2000||||||false||||||
<P>
You've been given the unfortunate task of planning text-book wrapping
for your brothers and sisters (still in high-school). To save money, your
parents bought sufficient plastic covering for any concievable number of text-
books (certainly enough for all of the wrapping you will be asked to do).

<P>
The plastic comes in a huge roll (which is guaranteed to be long enough)
1,8m wide. Your parents have also insisted that you plan the book covering
so that a stretch of the roll will be cut off <SPAN  CLASS="textit">straight</SPAN> (meaning that the cut
line will be at 90 degrees to the edges). To save time, you will be wrapping
each book with a rectangular piece of plastic - in particular, you will not
be making any further cutouts to beautify the wrapping.

<P>
Given the <SPAN CLASS="MATH"><I>n</I></SPAN> text-books to be covered, your task is to determine the
mininum length <SPAN CLASS="MATH"><I>k</I></SPAN> (in millimeters) of plastic to cut from the roll, so that
each book is covered with a 4cm wrap-around (perhaps with some wasteage).
Each of the <SPAN CLASS="MATH"><I>n</I></SPAN> books has the usual shape for books (rectangular, and having
both front and back covers) and is described using an ordered sequence of
three integers (measured in millimeters): the height, width, and thickness.
All except the thickness are guaranteed to be positive. (The thickness may,
in fact, be zero in the case that you are asked to cover a leaflet.) You are
guaranteed never to have a book with a dimension greater than 1720mm.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input will contain of several datasets, each of them consisting on a sequence of lines: the first line contains <SPAN CLASS="MATH"><I>n</I></SPAN>; each
of the <SPAN CLASS="MATH"><I>n</I></SPAN> subsequent lines (terminated by a new-line) contains three ordered
integers (separated by a space) describing the height, width and thickness of
one of the books to be covered.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, your output will consist of integer <SPAN CLASS="MATH"><I>k</I></SPAN> on a line by itself.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
620 500 0
610 300 400
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1080
</PRE> 

<P>

______________________________________________________
2001||||||false||||||
<P>
You have been asked to create a code generator for a simple machine. The
input to the code generator (produced by the compiler's front-end) consists
of arithmetic expressions in postfix form (also known as <SPAN  CLASS="textit">post-order</SPAN> or <SPAN  CLASS="textit">reverse
Polish notation</SPAN> form). The output will be in the assembly language of the target
machine.

<P>
The target machine has a single register and a number of temporary locations
(which are allocated by the <SPAN  CLASS="textit">assembler</SPAN> - something beyond the scope of this
problem) named $1, <SPAN CLASS="MATH">...</SPAN> , $9 (to be used in that order). The machine supports
the following instructions, where the operand is either an identifier (identifiers
consist of single letters - either upper and lower case) or a temporary location:

<P>

<UL>
<LI><TT>L</TT> - load the operand into the register.
</LI>
<LI><TT>A</TT> - add the operand to the contents of the register.
</LI>
<LI><TT>S</TT> - subtract the operand from the contents of the register.
</LI>
<LI><TT>M</TT> - multiply the contents of the register by the operand.
</LI>
<LI><TT>D</TT> - divide the contents of the register by the operand.
</LI>
<LI><TT>R</TT> - give the remainder of the contents of the register divided by the operand.
</LI>
<LI><TT>ST</TT> - store the contents of the register in the operand location.
</LI>
</UL>

<P>
The arithmetic operators replace the contents of the register with the expression
result.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>   

<P>
The input consists of several test cases, each on a line by itself. Each test case contains a single, well-formed (and non-empty), postfix ex-
pression appearing on one line with no white-space (no spaces, tabs, new-line
characters, etc.). The operators include the normal ones `<TT>+</TT>', `<TT>-</TT>', `<TT>*</TT>', `<TT>/</TT>' 
and `<TT>%</TT>' (for remainder).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output of each test case will consist of a sequence of lines each with a single instruction,
satisfying the following:

<P>

<OL>
<LI>There will be a single space separating the instruction and the operand (if
        there is one).
</LI>
<LI>Each line (including the last one) will be terminated by a new-line.
</LI>
<LI>The original order of the operands must be preserved in the assembly code.
</LI>
<LI>Assembly code must be generated for each operator as soon as it is encountered.
</LI>
<LI>As few temporaries as possible should be used (within the limits of the above restrictions).
</LI>
<LI>For each operator in the input expression, the minimum number of instructions must be generated (also within the limits of the above restrictions).
</LI>
<LI>The final result must be left in the register.
</LI>
</OL>

<P>
Your code generator must create straightforward code, without any optimizations whatsoever. Print a blank line betwee consecutive test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
AB+CD+EF++GH+++
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
L A
A B
ST $1
L C
A D
ST $2
L E
A F
A $2
ST $2
L G
A H
A $2
A $1
</PRE> 

<P>

______________________________________________________
2002||||||false||||||
<P>
In an effort to entertain your crossword-obsessed aunt and uncle, you decide to work on some software to create compact crosswords. A crossword must be rectangular and adjacent letters must be part of a word. the meaning of `adjacent' differs for the two different types of crosswords - see below.
This problem is case-sensitive.

<P>
There are two types of crosswords:

<P>

<UL>
<LI>strict - these allow words to be vertical and horizontal in the grid only;
      they may be top-to-bottom or vice-versa and left-to-right or right-to-left.
</LI>
<LI>diagonal - these <B>also</B> allow words to appear on a diagonal.
</LI>
</UL>

<P>
You are given a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> words along with possible synonyms (meaning-
equivalents) for that word - no word will appear more than once anywhere
in the input. With this, you are to determine the minimum number <SPAN CLASS="MATH"><I>k</I></SPAN> of
black squares which <SPAN CLASS="MATH"><I>must</I></SPAN> be present in a crossword for the words. Each
word, or a synonym thereof, must appear exactly once in the crossword and
no additional words may appear.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>   

<P>
The input consists of several test cases. The first line of each test case contains either the
letter <TT>S</TT> or the letter <TT>D</TT> (designating whether you are to consider strict or
diagonal crosswords). The next line contains positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>. The next
<SPAN CLASS="MATH"><I>n</I></SPAN> lines (each terminated by a new-line) each consist of at least one word,
followed by a number indicating the number of synonym words for the first word on the line, then the list of synonym words, each
separated by a space. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output for each dataset consists of <SPAN CLASS="MATH"><I>k</I></SPAN> followed by a newline.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Note for the sample output:</SPAN> since `<TT>copter</TT>' and `<TT>poll</TT>' can be intersected at either 
the `<TT>o</TT>' or the `<TT>p</TT>', in both
cases giving a <!-- MATH
 $5 \times 4$
 -->
<SPAN CLASS="MATH">5 <TT>x</TT> 4</SPAN> crossword with <!-- MATH
 $4 \cdot 5 - 5 - 4 + 1 = 12$
 -->
<SPAN CLASS="MATH">4<SUP> . </SUP>5 - 5 - 4 + 1 = 12</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
S
2
Helicopter 1 copter
election 1 poll
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
12
</PRE> 

<P>

______________________________________________________
2003||||||false||||||
<P>Genomic computing has become big business, and you decide to cash in. Your first attempt is to write a program which constructs a family tree from genetic information.<P>The gene sequence for an individual is given as a string (with no spaces) consisting of only the letters a, c, g, and t. The relatedness of two individuals can be estimated using the Hamming distance between their gene sequences. The Hamming distance between strings <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> is the number of individual letters in <SPAN CLASS="MATH"><I>x</I></SPAN> which must be changed to give <SPAN CLASS="MATH"><I>y</I></SPAN>. For Hamming distance purposes, you are guaranteed that <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are the same length.<P>You may assume that each individual has either zero or two offspring, and that this species functions asexually (each individual has at most one parent). We are interested in a family tree in which we minimize the Hamming distance between a parent and its children.<P>Given <SPAN CLASS="MATH"><I>n</I> : <I>n</I> &gt; 0</SPAN> individual gene sequences, you are to determine a <SPAN CLASS="textit">plausible</SPAN> family tree which has the smallest total Hamming distance <SPAN CLASS="MATH"><I>h</I></SPAN> (the sum of the Hamming distances between all parents and their children). Your output must include the family tree. If there is more than one such tree, output any of them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input for each dataset consists of several lines. The first line contains <SPAN CLASS="MATH"><I>n</I></SPAN>. Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains a single individual's gene sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each dataset consists of <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> lines. The first line contains <SPAN CLASS="MATH"><I>h</I></SPAN>. The remaining lines contain the family tree in prefix form. Each line contains a single individual, followed by a space and either the letter <TT>P</TT> (if the individual is a parent) or the letter <TT>N</TT> (if the individual is not a parent). When there are two children, output them in any order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
gattaca
gcttaca
gaccata
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
gattaca P
gaccata N
gcttaca N
</PRE><P>
______________________________________________________
2004||||||false||||||
<P>Your city's fire department collaborates with the transportation depart- ment to maintain maps of the city which reflects the current status (on that day) of the city streets. On any given day, some streets are closed for repairs or construction. The fire engine navigator needs to be able to select routes, from the firestation to the fire, that do not use closed streets. You must write a program that the central dispatcher can use to generate routes from the firestation to a fire.<P>Street intersections are identified by positive integers not more than 20, with the firestation always at intersection 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several dataset. The first line of each dataset consists of a single integer which is the number of the street intersection closest to the fire. The following lines each consist of a pair of positive integers separated by a space and terminated by a new-line. They represent the adjacent street intersections of an open street. For example, if 4 7 appears on a line, then the street between intersections 4 and 7 is open and there are no other intersections between 4 and 7 on that section of street. The final line of each dataset consists of a pair of <TT>0</TT>'s.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, your output must consist of a line for each valid route from the firestation to the intersection closest to the fire, written with the intersections in the order in which they appear on the route. The intersections must appear separated by a space, terminated by a new-line. Include only routes which do not pass through any streetintersection more than once. The lines of output must be in lexicographical order. Print a blank line between consecutive datasets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
1 2
1 3
3 4
3 5
4 6
5 6
2 3
2 4
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 3 4 6
1 2 3 5 6
1 2 4 3 5 6
1 2 4 6
1 3 2 4 6
1 3 4 6
1 3 5 6
</PRE><P>
______________________________________________________
2005||||||false||||||
<P>
You are to implement a message decoder for a scheme which sends mes-
sages in two parts: a header and the encoded message itself.

<P>
The foundation of the scheme is a sequence of binary `key' strings as
follows:

<P>
<P><!-- MATH
 \begin{displaymath}
0, 00, 01, 10, 000, 001, 010, 011, 100, 101, 110, 0000, \ldots
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
0, 00, 01, 10, 000, 001, 010, 011, 100, 101, 110, 0000,...
</DIV><P></P>

<P>
The first one is of length 1, the next three of length 2, the next seven of
length 3, next fifteen of length 4, etc. If two adjacent keys have the same
length, the second can be obtained from the first by adding 1. Note that
there are no keys consisting only of 1s.

<P>
The keys are mapped to the characters in the header in order. Suppose
the header is <TT>Bruce</TT>, the first key (0) is mapped to <TT>B</TT>, etc.

<P>
The encoded message contains only 0s and 1s and possibly carriage re-
turns (new-lines) - though they are to be ignored. The message is divided
into segments. The first 3 digits of a segment give the binary representation
of the length of the keys in that segment. For example, if the first 3 digits
are <SPAN CLASS="MATH">011<SUB>2</SUB></SPAN>, then the remainder of the segment consists of keys of length <SPAN CLASS="MATH">3<SUB>10</SUB></SPAN>
(one of <!-- MATH
 $000, 001, \ldots , 110$
 -->
<SPAN CLASS="MATH">000, 001,..., 110</SPAN>). The end of a segment is a string of 1s which is
the same length as the length of the keys in that segment (this is why all
1s were not used above). So, in the example above, the segment would be
terminated by 111. The entire message is terminated by a segment begining 000 
(which would signify a segment in which keys have length 0). The
message is decoded by translating the keys in the segments into the header
characters to which they have been mapped.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>      

<P>
The input file contains several datasets. The first line of each dataset contains the header,
terminated by a new-line (which is not part of the message); any spaces are
part of the header. The length of the header is limited by the fact that
key strings have a maximum length of <SPAN CLASS="MATH">111<SUB>2</SUB></SPAN> (<SPAN CLASS="MATH">7<SUB>10</SUB></SPAN> in decimal). If there are
multiple copies of a character in the header, then several keys will map to
that character.

<P>
The remaining lines of input contain the encoded message. The message is
made up only of <TT>0</TT>'s and <TT>1</TT>'s (and possibly carriage-returns - to be ignored).
You are guaranteed that it is a valid message according to the encoding
described above.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, your output must consist of the message, followed by a new-line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
$#**/
01
00000
1011011
000111
00101000
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
##*/$

______________________________________________________
2006||||||false||||||
<P>Write a program to find the most frequent word in a file of text. A word is any non-empty continuous sequence of alphabetic characters. Case is not regarded as significant, so the words "bother" and "BOTHeR" should be considered the same word.<P>Any non-alphabetic characters (including control characters such as newlines) can be used to separate words. Thus "isn't" is counted as two words, the second of which is a one letter word consisting only of the letter "t".<P>If more than one word appears with the maximum frequency, then the first word to reach the maximum frequency is required.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of a set of paragraphs each terminated by a single line containing only the character '#' which will not otherwise occur anywhere in the text. No paragraph will contain more than 2000 different words, and no word will be more than 20 letters long. The input is terminated by a test case with no words at all. This case should produce no output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each paragraph, your program should print one line containing the frequency of the most frequent word, right justified in a field of width 4, followed by a space and the most frequently occurring word itself, entirely in lower case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
This is a simple file of test data, which should
not cause your program any trouble. Do note that
it contains several punctuation characters. Of course,
this is not really a problem, because such characters
are treated in the same way as spaces.
#
Don't use contractions; it isn't nice.
#
aBc def AbC def dfe ABC
#
123
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
   2 of
   2 t
   3 abc
</PRE><P>
______________________________________________________
2007||||||false||||||
<P>
Markup languages such as HTML use tags to highlight sections with special significance. In this way, a
sentence in boldface can be indicated thus:
<P>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;B>This is a sentence in boldface&lt;/B>
<P>
Typically every tag has an opening tag of the form &lt;TAG> and a closing tag of the form &lt;/TAG>, so that
portions of text can be bracketed as above. Tags can then be combined to achieve more than one effect on a
particular piece of text simply by nesting them properly, for instance:
<P>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;CENTER>&lt;B>This text is centred and in boldface&lt;/B>&lt;/CENTER>
<P>
Two of the most common mistakes when tagging text are:
<li> getting the nesting wrong:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;B>&lt;CENTER>This should be centred boldface, but the tags are wrongly nested&lt;/B>&lt;/CENTER>
<li> forgetting a tag:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;B>&lt;CENTER>This should be centred boldface, but there is a missing tag&lt;/CENTER>
<P>
Write a program to check that all the tags in a given piece of text (a paragraph) are correctly nested,and that
there are no missing or extra tags. An opening tag for this problem is enclosed by angle brackets, and
contains exactly one upper case letter, for example &lt;T>, &lt;X>, &lt;S>. The corresponding closing tag will be
the same letter preceded by the symbol "/". For the examples above these would be &lt;/T>, &lt;/X>, &lt;/S>.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of any number of paragraphs. Each paragraph will consist of a sequence of tagged
sentences, over as many lines as necessary, and terminating with a # which will not occur elsewhere in the
text. The input will never break a tag between two lines and no line will be longer than 80 characters. The
input will be terminated by an empty paragraph, i.e. a line containing only a single #.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
If the paragraph is correctly tagged then output the line "Correctly tagged paragraph", otherwise output a
line of the form "Expected &lt;expected> found &lt;unexpected>" where &lt;expected> is the closing tag matching
the most recent unmatched tag and <unexpected> is the closing tag encountered. If either of these is the end
of paragraph, i.e. there is either an unmatched opening tag or no matching closing tag at the end of the
paragraph, then replace the tag or closing tag with #. These points are illustrated in the examples below
which should be followed exactly as far as spacing is concerned.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
The following text&lt;C>&lt;B>is centred and in boldface&lt;/B>&lt;/C>#
&lt;B>This &lt;\g>is &lt;B>boldface&lt;/B> in &lt;&lt;*> a&lt;/B> &lt;\6> &lt;&lt;d>sentence#
&lt;B>&lt;C> This should be centred and in boldface, but the
tags are wrongly nested &lt;/B>&lt;/C>#
&lt;B>This should be in boldface, but there is an extra closing
tag&lt;/B>&lt;/C>#
&lt;B>&lt;C>This should be centred and in boldface, but there is
a missing closing tag&lt;/C>#
#
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Correctly tagged paragraph
Correctly tagged paragraph
Expected &lt;/C> found &lt;/B>
Expected # found &lt;/C>
Expected &lt;/B> found #
</PRE>

<P>

______________________________________________________
2008||||||false||||||
<P>
The Department of Defence of a certain country (No, not Australia or New Zealand), in conjunction with
the Department of Police, have devised a brilliant method of saving money on crowd control - really
bouncy rubber bullets. They had noticed that the rubber bullets they had been using were largely being
wasted - those that hit anyone or anything usually just fell to the ground, whereas if they were really,
really bouncy, they would bounce off and possibly hit several more people before their energy was spent.
<P>
They decided to test this idea by building a special circular test rig. The bullet would be fired into the rig
horizontally and at some predetermined angle to the tangent to the rig at that point. It would have sufficient
energy to travel some considerable distance before stopping. (You may assume cartoon physics, i.e. that it
travels horizontally until it reaches the end of its travel, at which time it drops to the floor.) However, as so
often happens with lucrative defence contracts, the contractor made off with the money, so they decided to
simulate the whole process on a computer. This is where you come in.
<P>
Write a program that will read in details of a test rig and a series of test firings and determine how many
times the rubber bullet would bounce before it stops. You may assume that the bullet is a point and that,
because of problems in determining the exact sequence of events, any test firing where the bullet stops
within 1 mm of the rig is deleted from consideration.<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will be a series of tests, each test consisting of a series of test firings. Each test starts with an integer
specifying the radius of the test rig in millimetres and a value of 0 for the radius terminates the input. Each
test firing occurs on a line by itself and consists of a distance in millimetres (between 100 and 10000
inclusive) that the bullet will travel, and an angle, in degrees, (between 10 and 170 inclusive, where 90
means directly towards the centre of the rig). The series of test firings will be terminated by a line
containing two zeroes (0 0).
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test rig, output a line with the words "Test Rig" followed by a space and then the number of the
test rig (a running number starting at 1) followed by a series of lines, one for each test firing for that rig
with each line giving the number of times a bullet bounces off a wall before it stops. This number is to be
written without any leading or trailing spaces. A blank line should appear between test rigs. Follow the
example given below.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
100
1000 23
1200 47
0 0
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Test Rig 1
12
8
</PRE>

<P>

______________________________________________________
2009||||||false||||||
<P>
Lazy Larrys Leisure Photo Shop specialises in taking shots of people in leisure situations - at the beach,
skiing, in cable cars and so on. When the photographer returns to the office at the end of a shoot, she has
anything up to 50 images which she wishes to display. She has found that the most practical solution is to
lay them out in a single row in a strip across the top of the screen with the first image hard up against the
left of the strip, the rest of the images in order from left to right, and the last image as far right as necessary
or possible.
<P>
<center><img src="http://livearchive.onlinejudge.org/external/20/p2009.jpg></center>
<P>
The images are all of the same height, which comfortably fits into the strip of screen space, but have
varying widths. The photographer can vary the width of the strip within limits, largely dictated by the size
of the screen she is working on and other applications that may be running. When there is enough room,
the images should be packed from left to right with a fixed spacing. When there is not enough room the
spacing has to be reduced until it reaches zero. Thereafter the images must be allowed to overlap.
<P>
Write a program that will read in details of the size of the strip and a series of images and that will
determine the best layout according to the following rules:
<ol><li>Pack the images starting at the left margin as shown in the diagram above with SPACING pixels
between images. This is the ideal case.
<li>Place the first image hard up against the left edge of the strip, the last image hard up against the right
edge of the strip and then place the left edges of the other images on the pixel boundaries closest to
the positions that they would occupy were it possible to contract the spacing in a smooth continuous
manner. Round 0.5 up to the next integer.
<li>Place the last image hard up against the right edge of the strip and overlap the remaining images so
that their left boundaries remain in order from left to right. Allocate each image as many pixels as
possible so that all images have the same proportion (truncated to one pixel) of their width visible. If
there are still pixels left to be allocated, allocate them to images in descending order of the fractional
portions of their desired display width. In case of a tie, allocate the extra pixel to the leftmost image.
<li>Placement is impossible if one or more images are not displayable, i.e. do not have at least one pixel
allocated to them.
</OL>
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will be a sequence of problems, terminated by a line of three (3) zeroes (0 0 0). The first line of each
problem has three positive integers specifying <i>WIDTH</i>, <i>SPACING</i>, and <i>NIMAGES</i>. <i>WIDTH</i> is the width of
the available screen area in pixels, <i>SPACING</i> is the maximum spacing to be used between images and
<i>NIMAGES</i> is the number of images to be placed. This is followed by <i>NIMAGES</i> integers specifying, in
order, the widths of the images, on one or more lines. You may assume that <i>SPACING</i> &le; 10, that 0 <
<I>NIMAGES</I> &le; 50 and that the image widths range from 10 pixels to no more than <I>WIDTH</I>/2.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output for each problem is a line with the words <I>Problem number</I> followed by a space and the problem
number followed by a line containing either the word <I>IMPOSSIBLE</I> if placement is impossible, or
<I>NIMAGES</I> integers, separated by single spaces, specifying the position at which the leftmost pixel of each
image (in the order given in the input) should be placed. Pixels are numbered from 0 to <I>WIDTH</I>-1.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
380 8 5
35 28 43 35 5
0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Problem number 1
0 43 79 130 173
</PRE>

<P>

______________________________________________________
2010||||||false||||||
<P>
Many sports and games hold tournaments to determine at least a winner and, very often, a ranking or
ordering as well. In two player games (such as Tennis, Chess and Scrabble), the two most common forms
of tournament areknockout (usually based on an initial ranking or seeding) and round robin (where
everybody plays everybody else). The disadvantage in knockout is that a promising newcomer could meet
a very much stronger player early in the tournament and not reach their true position. Round Robin
eliminates this but at a huge cost in time - a Round Robin involving 128 players needs 127 rounds
whereas it would take only 7 rounds in a knockout competition.
<P>
An alternative known as Swiss Draw is very popular in games such as Scrabble. To maximize competition,
any one player will play any other player no more than once. After each round, players are ranked on the
number of games they have won, where a draw is equal to half a win (more is better) and, within that, by
spread - the cumulative difference between their scores and their opponents scores (again bigger is
better). If by chance two or more players tie in this ranking then they appear in inverse order of their
previous ranking, i.e. the initially lower-ranked players move ahead. In each round each player either plays
someone above them or the highest ranked player below them that allows everyone to play someone they
have not played before. The input will specify the (usually random) ordering before the first game.
<P>
Write a program to determine the final ranking of a group of Scrabble players, given the initial draw and
the scores for each individual for each round.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of one or more scenarios. The first line of each scenario will consist of two integers, P
and R, (16 &le; P &le; 64, 4 &le; R &le; P/4) denoting the number of players (a multiple of two) and the number of
rounds respectively. This will be followed by P lines, each line consisting of a name (a string of 1 through
20 alphabetic characters without any spaces) followed by R integers (separated from each other and the
name by at least one space) representing the R scores for that individual. The list will be in the initial order
of play, thus in the first round player 2n+1 played player 2n+2 (0 &le; n < P / 2). Input will be terminated by
a line containing two zeroes (i.e. P and R both zero).
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output will consist of a list of all the players ranked according to the above criteria, together with the
number of wins and the spread. Note that a draw is counted as half a win, so indicate an odd number of
draws by a plus sign (+) after the number of wins. The name is left justified in a field of width 20, the
number of wins is right justified in a field of width 3, specification of draws occupies 1 character position
and the spread is right justified in a field of width 6. Leave one blank line between scenarios.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
16 4
Absalom  280 334 319 426
Betsheba 374 514 459 417
Carolyne 318 415 445 481
Davidian 402 361 375 278
Eleanor  425 302 447 522
Frances  425 513 306 327
Gabriel  330 337 365 398
Hermione 539 254 442 450
Ishmael  485 305 540 522
Jeremiah 288 295 367 476
Kenneth  532 304 452 445
Laurence 426 437 260 474
Meredith 438 489 274 475
Nicholas 307 357 380 482
Octavia  426 498 305 497
Patricia 333 253 370 412
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Ishmael               4    619
Meredith              3    247
Carolyne              3    186
Betsheba              3    158
Kenneth               3    126
Eleanor               2+   -11
Hermione              2    264
Laurence              2    -93
Nicholas              2   -114
Davidian              2   -150
Frances               1+  -119
Octavia               1    -85
Absalom               1   -187
Jeremiah              1   -188
Gabriel               1   -338
Patricia              0   -315
</PRE>

<P>

______________________________________________________
2011||||||false||||||
<P>
Calypso is a fun-filled family card game that has been propagated at the training camps for the Australian
Maths Olympiad teams. The game is designed for four players and will be described in that way, although
I am sure you can adapt it to a different number. I will start with a complete description, since I suspect
most of you will never have heard of it and you may want to play it some time (possibly with your coach
as a fourth on the way to Vancouver next year).
<P>
The game is played with a standard deck of 52 cards where each card has a suit: Spades (S), Hearts (H),
Diamonds (D) or Clubs (C) - and a value: 2-9, Jack (J), Queen (Q), King (K) and Ace (A).The cards
are ranked (from lowest to highest) in the order given. One person is designated as the dealer, after each
deal this role moves clockwise. To make the following description easier, assume that the four players are
Amy, Bob, Carol and Dave and that they are sitting in that order clockwise around a table. Dave is the first
dealer, Amy will deal next and so on.
<P>
Dave deals one card to each player face down, starting with Amy, and continues until all cards have been
dealt (each player now has 13 cards). Amy now designates how many tricks she expects to take, a number
between 0 and 13, (tricks will be explained later) and her personal trump suit, then Bob does likewise and
so on. Dave as the last bidder must bid for a number of tricks such that the total number of tricks bid (by all
four players) does not equal 13. After this has been done and recorded the play begins.
<P>
Amy then leads to the first trick, i.e. she lays a card face up on the table. Each player in clockwise then
plays a card and the four cards constitute a trick. Each player <b>must</b> follow suit if possible, i.e. play a card
of the same suit as that led. Players who cannot follow suit may play one of their personal trumps or just
discard one of their other cards. The winner of the trick collects it and leads to the next trick. The winner is
determined as follows. If a trick has not been trumped (the leader did not lead anyones personal trump suit
and everyone either followed suit or discarded) then the highest card in the led suit wins. If the trick has
been trumped, then the highest trump wins. If there are two or more trumps of equal value (remember that
everyone has their own trump suit) then the first highest wins. For example, assume that at some stage
Dave led a low diamond, that neither Amy or Bob have any diamonds left, and that Amys trump suit is
Hearts and Bobs is Spades. If Amy plays HK and Dave plays SA, he would win. If Amy had played HA,
she would have won, even if Dave had still played SA. When all 13 tricks have been played, players score
the number of tricks they won. In addition, players who achieved their target (won the number of tricks
they bid for) score an extra 10 points.
<P>
In order to simulate this game, we will make the following modifications. Bids will consist of only the
desired trump suit, based on length. If two or more suits are equally long, value the suits by allocating 5
points to an Ace, 4 points to a King, 3 points to a queen, two points to a Jack and 1 point to anything else
and bid the highest valued suit. If there is still a tie, bid the highest ranked suit in the order (from highest to
lowest) S, H, D, C. At the end of a deal each player will merely score the number of tricks they won, with-out
any bonuses.
<P>
When leading, lead the highest card in your trump suit if possible, otherwise lead the highest card in the
highest ranking suit that is not someone elses trump suit. If this is not possible, lead the lowest ranked
card in your hand (choosing the lowest ranked suit in case of a tie). When playing, always attempt to win
the trick if you can, otherwise play as cheaply as possible. Thus you will play the highest card in the suit
led, unless a higher card has already been played, in which case play your lowest card in that suit. If you
cannot follow suit, play your highest trump if you can and if it could win. If you have no trumps, or your
highest trump could not win the trick, then discard the lowest card in your hand. If you have two lowest
cards, play the one from the lowest ranking suit (using the ranking given above).
<P>
Consider that the deck is (in order from the top of the deck to the bottom):
<pre>
 C8 HK D6 ST DT H5 S7 C9 DQ DK SA HA D2 S8 CT H8 SJ SQ S4 D8 D7 C3 SK
 H6 HT H4 HQ S2 C6 C2 H9 DJ C7 CK CQ H2 CA DA CJ D5 S3 D3 S6 D9 H3 D4
 S5 C4 H7 C5 HJ S9
</pre>
Thus Dave will deal the C8 to Amy, HK to Bob, D6 to Carol and ST to himself and then continue. The
resulting hands and bids are as follows:
<pre>
 Amy  : C6 C7 C8 CA D2 D7 DT DQ H3 H7 HT S3 SJ bids C
 Bob  : C2 C3 C5 CK D3 D4 DK DA H4 H5 HK S8 SQ bids D
 Carol: CT CJ CQ D6 H9 HJ HQ S4 S5 S6 S7 SK SA bids S
 Dave : C4 C9 D5 D8 D9 DJ H2 H6 H8 HA S2 S9 ST bids H
</pre>
Amy will lead to the first trick. In what follows, the leftmost card is the card led by the winner of the
previous trick (indicated on the right of the previous line). The next three cards are the next three cards
played. Note that the leftmost card is the card that was led, not necessarily the card played by Amy.
<pre>
 Trick  1: CA C2 CT C4 Amy
 Trick  2: C8 C3 CJ C9 Amy
 Trick  3: C7 C5 CQ HA Dave
 Trick  4: H8 H3 H4 H9 Dave
 Trick  5: H6 H7 H5 HJ Dave
 Trick  6: H2 HT HK HQ Dave
 Trick  7: S2 SJ SQ SA Carol
 Trick  8: SK S9 S3 S8 Carol
 Trick  9: S7 ST D2 DA Bob
 Trick 10: DK D6 D5 D7 Bob
 Trick 11: D4 S6 D8 DT Carol
 Trick 12: S5 D9 C6 CK Amy
 Trick 13: DQ D3 S4 DJ Carol
</pre>
Thus at the end of the deal Amy has won 3 tricks, Bob 2 and Carol and Dave 4 each.
<P>
Write a program to simulate playing this game.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of a series of decks (between 1 and 99,
both numbers inclusive), each consisting of 4 lines of 13 cards without spaces as shown below and
terminated by a line containing only ##.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each deck in the input, output a line as shown below. After
all decks have been processed output a summary line as shown.
<P>
Follow the spacing of the example exactly. The number of the deal is right justified in a field of width 5,
the other numbers are right justified in fields of width 8.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
C8HKD6STDTH5S7C9DQDKSAHAD2
S8CTH8SJSQS4D8D7C3SKH6HTH4
HQS2C6C2H9DJC7CKCQH2CADACJ
D5S3D3S6D9H3D4S5C4H7C5HJS9
SAD3DTS4C9DAHJH6S8HACTD8H9
HTCQC5STHKHQS5D6C6D5H5H2H7
CKD7D4SJD2DQC3C8C4C2SQSKH3
DKD9H4CAH8S7CJS2S6C7DJS9S3
##
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Round    1:       3       2       4       4
Round    2:       4       3       3       3
                  7       5       7       7
</PRE>

<P>

______________________________________________________
2012||||||false||||||
<P>
Four in a Line is a game similar to 3-dimensional noughts and crosses. It consists of a horizontal table on
which 16 pegs, each of which can hold 4 beads, are arranged in a 4 × 4 grid. Each player has a supply of
either green or red beads which are placed on the pegs in turn, starting with red. Obviously, as each bead is
placed on a peg, it slides down as far as it can - until it either hits another bead or the supporting table.
The winner is the first to get 4 beads of their colour in a line (hence the name). The line can be in any plane
and in any orientation, as long as the four beads are all of the same colour and form a straight line.<P>
<P>
As with most games, the interesting part comes towards the end, when each player (colour) is attempting to
build a line and block the opponents incipient lines. Write a program that will read in details of a game
position and determine whether green (the next player) can be guaranteed to win the game within 5 plies.
A ply is half a turn, in this situation placing one bead, thus 5 plies implies three moves by green and two
by red.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of a number of games. Each game consists of 4 lines of characters, each line consisting of 4
blocks of 4 characters - R for red, G for green or # for empty - where each block represents the
contents of a single peg with the left end representing the bottom. Thus the block GRR# represents a peg
with a green bead on the bottom with two red beads above it. Note that the entire state of the game is
always given, thus the starting state would consist of 64 # characters arranged in 16 blocks of 4. You can
assume that the position is valid, i.e. that there will be exactly one more red bead than green beads, and that
there will not be any holes in the description (the block GR#G, for instance). There will be one blank
line after each game and input will be terminated by a line containing only a single #.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each game description in the input, output a single line of the form "Green can win in N move(s)",
where 1 &le; N &le; 3, and where N is the smallest such number, or "Green cannot win in 3 moves". Use the
singular form when N = 1 and the plural form otherwise.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
GGG# RR## R### R###
#### #### #### ####
#### #### #### ####
#### #### #### ####

RRR# RGG# RGG# ####
#### #### #### ####
#### #### #### ####
#### #### #### ####

#
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Green can win in 1 move
Green cannot win in 3 moves
</PRE>

<P>

______________________________________________________
2013||||||false||||||
<P>You are given a collection of sealed pizza boxes. The tops and bottoms of the boxes are covered internally with metal foil, but the edges are not. Inside, each box has been divided into r rows and c columns (both in the range 2 to 8 inclusive), after the manner of a chess board. Each of the thus-formed internal squares is either empty or contains a single widget. Widgets absorb beta radiation slightly, so by placing a beta emitter on one side of a box and a receiver on the other side you can tell how many widgets there are in the line of sight between emitter and receiver, but not where they are. By appropriate placement of the emitters and receivers we can determine the occupancies along various lines, i.e. how many widgets there are in each row (r numbers), column (c numbers), down diagonal (r+c-1 numbers), and up diagonal (r+c-1 numbers)<P>For example, the following 8 by 8 configuration will produce the numbers shown.<P><center><img src="http://livearchive.onlinejudge.org/external/20/p2013.jpg></center><P>Write a program that will determine the arrangement of widgets in a pizza box, given a set of numbers such as those above. To make life a bit easier for you, the test data for this program will always have a unique solution. Also, the arrangement of widgets will be such that if any proper subset of the squares is revealed, there will always be at least one line with hidden squares such that either all the hidden squares in that line are empty or all the hidden squares in that line are occupied.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to the program is a sequence of problems, each consisting of five lines of integers. The first line of each problem contains r and c (2 &le; r &le; 10, 2 &le; c &le; 10), line 2 contains r numbers giving the row occupancies, line 3 contains c numbers giving the column occupancies, line 4 contains r+c-1 numbers giving the down diagonal occupancies and line 5 contains r+c-1 numbers giving the up diagonal occupancies. A line of two zeroes (0 0) for r and c terminates the input.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output of the program is a sequence of pictures, one per input problem except for the terminal one. The
first line of the output contains the words "Pizza box" followed by a single space and the number of the
problem (a running number starting at 1). The next r lines each contain c characters - either a # for a full
square or - for an empty square. Leave a blank line between problems.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 3
3 1 1 2
2 1 4
1 2 2 1 0 1
1 1 1 2 1 1
8 8
0 2 2 2 3 2 3 0
0 2 2 2 3 2 3 0
0 0 0 0 3 2 0 4 0 2 3 0 0 0 0
0 0 0 0 3 2 0 2 1 2 3 0 1 0 0
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Pizza box 1
###
--#
--#
#-#

Pizza box 2
--------
---##---
--#--#--
-#----#-
-#--#-#-
--#--#--
---##-#-
--------
</PRE>

<P>

______________________________________________________
2014||||||false||||||
<P>
Lauries little brother Joey has been playing Find the Cookie with her.
However, after the 32,767<sup>th</sup> time, Laurie is tired of it.  She wants to write a program to keep the
boy occupied.  Write a program to simulate a game of Find the Cookie.  The game takes place in a long narrow hall,
so Joey can only move forward and backward, not right or left.  At the beginning of each game, a cookie is placed
in the hall (not at the center of the hall) and Joey starts at the center of the hall.  Joey attempts to find the
cookie.  He does this by moving to another point in the hall, whereupon the computer tells him whether he is "warmer"
(he has moved closer to the cookie than his last position), "colder" (he has moved farther away from the cookie than
his last position), "same" (he has not moved closer or farther away from the cookie), or he has reached the cookie.
Joey continues until he exactly reaches the location of the cookie, which always happens within 20 moves. 





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Each input line represents a new game.  Each input line contains at least two and at most 21 integers separated
by whitespace.  The integers represent locations along the hall, expressed in units of feet.  Joey begins each
game at location 0 feet.  The first integer on an input line is the location of the cookie.  This integer is
guaranteed to be different from 0.  The remaining integers represent locations Joey moves to, in order.  Joey will
never move more than 5280 feet from his original location.  Joey will always reach the cookie in each game, and this
will be the last move on the input line.  Your program should stop processing input lines when the cookie is located
at 5280 feet (a mile from the center of the hall is way too far for Joey to go for only one cookie).






<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each location that Joey moves to, determine whether he is warmer, colder, the same, or has reached the
cookie.  Have a blank line between the output for different input lines.  Follow the format in the Sample Output.





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5  10 11 12  3 4 5
3   10  10 7  3
12  5  -3  1   4  6 7 8 9 12
5280 10
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Moving from 0 to 10: same.
Moving from 10 to 11: colder.
Moving from 11 to 12: colder.
Moving from 12 to 3: warmer.
Moving from 3 to 4: warmer.
Moving from 4 to 5: found it!
 
Moving from 0 to 10: colder.
Moving from 10 to 10: same.
Moving from 10 to 7: warmer.
Moving from 7 to 3: found it!
 
Moving from 0 to 5: warmer.
Moving from 5 to -3: colder.
Moving from -3 to 1: warmer.
Moving from 1 to 4: warmer.
Moving from 4 to 6: warmer.
Moving from 6 to 7: warmer.
Moving from 7 to 8: warmer.
Moving from 8 to 9: warmer
Moving from 9 to 12: found it!
</PRE>

<P>

______________________________________________________
2015||||||false||||||
<P>Bingo is a game played on a 5 by 5 board called a card. There are many variations, but Bob's Bingo uses the following rules:<blockquote><li>Each card will have the 25 positive integers, where each value is less than or equal to 75. <li>No value will appear in more than one position on a card. <li>During the game, numbers are selected and if they are on a card, they are covered. <li>To be a winner, all the numbers on a card in a given pattern must be covered. The pattern can change from game to game. Some sample patterns (marked by the Xs) include:</blockquote><center><img src=p2015a.gif align=center></center><p>Two different cards may both be winners for a given pattern. Consider the cards and pattern below:</p><center><img src=p2015b.gif></center><p>Both of these cards are winners when the numbers 1, 2, 7, 8, 13, 14, 19, 20, and 25 are selected. These are considered to be equivalent cards.</p><p>Bob's Bingo players get mad when they have two equivalent cards (since it reduces their chance to win) or when one of their cards is equivalent to a card of another player (since they have to share the prize). Bob wants you to write a program to go through his stack of cards and identify the equivalent cards.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input data file contains a collection of one or more independent datasets where each represents the cards for one game.</p><p>Each dataset begins with the winning pattern for the game. This will be entered as 5 lines, with 5 characters (either 'X' or '_') on each line. Each line will be one row of the pattern with an 'X' representing a position that is part of the pattern and an '_' representing a position that is not part of the pattern. Each pattern will have at least one 'X'.</p><p>After the pattern will be a line containing a single integer <i>n</i>, with <i>0 &le; n &le; 100</i>. Then there will be n cards, where each card is represented by 5 lines of 5 integers each, with at least one space between the integers on a line. Each line of input represents one row of the card.</p><p>The end of input will be marked by a dataset with 0 cards to check. This dataset should not be processed.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each dataset, first output the number of the dataset (starting at 1). Then, for each card that is equivalent to a previous card, output a line stating <i>"Card k is equivalent to card m"</i> where k is the number of the current card in the set and m is the earlier card that is equivalent to card k (where card numbering starts at 1). If the current card is equivalent to more than one other card in the set, print the lowest numbered one. If there is no earlier card equivalent to the current card, you should not print any output for the card.</p><p>Have one blank line between outputs for consecutive datasets.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
X____
XX___
_XX__
__XX_
___XX
4
1 6 11 16 21
2 7 12 17 22
3 8 13 18 23
4 9 14 19 24
5 10 15 20 25
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20
21 22 23 24 25
7    18   60   64   65
14   19   4    21   50
40   20   25   52   5
49   75   13   2    43
74   63   9    8    1
1 3 4 5 6
2 7 31 32 33
34 13 8 35 36
37 38 19 14 39
40 41 42 20 25
_XXX_
X_X_X
XXXXX
X_X_X
_XXX_
2
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20
21 22 23 24 25
25 24 23 22 21
20 19 18 17 16
15 14 13 12 11
10 9 8 7 6
5 4 3 2 1
X____
XX___
_XX__
__XX_
___XX
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Game 1
Card 3 is equivalent to card 1
Card 4 is equivalent to card 1

Game 2
Card 2 is equivalent to card 1
</PRE><P>
______________________________________________________
2016||||||false||||||
<P>
<p>Dozens of charity WWW sites have appeared recently.  These sites donate advertising payments they receive to charitable
 organizations.  But advertisers don't want to pay for people who come to the WWW site dozens of time a day, so require
 a list of unique visitors to the site.  Some sites, such as The Hunger Site (thehungersite.com), the original "Click 
for Charity" site, allow only one donation per address per day.  Others, such as the Meals On Wheels site (givemeals.com),
 allow donations as frequently as every 6 hours.</p>

<p>You are to write a program to take a list of visits for a month and list the visitors to the site and the number of
 visits, both valid and invalid, they made in that month.</p>





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input data file contains zero or more records of visitors to a charity WWW site, where each record appears on 
single line.  Each visit will be in the following format:</p>

 

<blockquote>dd:hh:mm:ss:address</blockquote>

<p>where:</p>

<blockquote>
	<li>dd  is an integer that represents the day of the visit, with 01 &le; dd &le; 32
	<li>hh       is an integer that represents the hour of the visit, with 00 &le; hh &le; 23
	<li>mm       is an integer that represents the minute of the visit, with 00 &le; mm &le; 59
	<li>ss       is an integer that represents the second of the visit, with 00 &le; ss &le; 59
	<li>address       is a string that represents the email address of the visitor.  The address will consist of
	 the upper and lower case letters, digits, periods ('.'), and the at sign ('@') only.  It will have exactly 
	one '@' in it (that will not be the first character) and at least one period after the '@'.  The '@' and 
	'.' will not appear next to each other.  An address will not end with a '.'.  There will be at most
	 65 characters in the address.  Case is not significant in addresses, so a@b.c and A@B.C should be 
	considered to be the same address.
</blockquote>

<p>The visits will be arranged in time order, from earliest to latest.  While there may be two or more visits at a
 given time, there will not be two visits for the same address at the same time.</p>

<p>There will be at most 1000 unique addresses in the input file.  </p>

<p>The end of input will be indicated by an entry for day 32.  This line should not be processed.</p>






<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>Output the number of valid and invalid visits for each address in the file.  A visit is valid if it is the first 
visit in the file for the address or if it is 6 hours or more since the most recent previous valid visit for that
 address.  A visit is invalid if it is not valid (that is, if it is less than 6 hours since the last valid visit 
 for that email address in the file).  </p>

<p>Output should be grouped by top-level domain, and within a top-level domain by the second-level domain. 
 The top-level domain of the address is the character or characters after the last period in the address. 
 The second-level domain is the collection of letters and digits immediately before the last period. 
 For example, the address programmer@acm.cs.gcsu.edu has the top-level domain edu and the second-level domain
 gcsu .  Top-level domains should be alphabetized, then the second-level domains alphabetized under them. 
 For each second-level domain, all the donors in that domain should be listed in ASCII order of address, 
followed by the number of valid donations and invalid donations.  There should be one blank line between
 second-level domains and two blank lines between top-level domains.  Use the format in the sample output.</p>

<p>All email addresses in the output should be in lower case.  </p>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
01:00:24:18:joe@gcsu.edu
01:00:24:18:jane3@cobra.cs.mercer.edu
01:01:00:29:joe@gcsu.edu
01:07:00:29:JOE@GCSU.EDU
01:08:30:15:JANE3@COBRA.CS.MERCER.EDU
01:12:02:19:THOMAS@USA.EDU
02:08:30:15:jane@cobra.cs.mercer.edu
04:07:20:00:bob@ist.ucf.EDU
04:08:18:39:mickey@disney.com
04:13:19:59:bob@ist.ucf.edu
04:18:20:19:thomas@usa.EDU
05:19:19:45:rudy@survivor.cbs.tv
06:00:18:24:jane3@cobra.cs.mercer.edu
06:01:19:45:Rudy@Survivor.CBS.TV
10:00:24:18:joe@gcsu.edu
32:01:02:03:last.name@the.list
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
TOP-LEVEL DOMAIN = com
Second level domain = disney
mickey@disney.com                                                   1   0
 
 
TOP-LEVEL DOMAIN = edu
Second level domain = gcsu
joe@gcsu.edu                                                        3   1
 
Second level domain = mercer
jane3@cobra.cs.mercer.edu                                           3   0
jane@cobra.cs.mercer.edu                                            1   0
 
Second level domain = ucf
bob@ist.ucf.edu                                                     1   1
 
Second level domain = usa
thomas@usa.edu                                                      2   0
 
 
TOP-LEVEL DOMAIN = tv
Second level domain = cbs
rudy@survivor.cbs.tv                                                2   0
</PRE>

<P>

______________________________________________________
2017||||||false||||||
<P>The Olympic committee has hired American Code Masters (ACM) to verify the IDs issued to all the athletes, reserves, judges, staff, and the press. Each badge has a barcode written on it in base-5, encoding the ID number. The system of ID numbers uses a check-digit scheme to detect errors and reduce forgeries. You are to write a program to help ACM detect invalid ID numbers.</p><p>The devices that security uses to read the barcodes produce strings of the letters V,W,X,Y,Z. Each letter represents a base-5 digit: V represents 4, W represents 3, X represents 2, Y represents 1, and Z represents 0. So, WXZ=320 (base-5), which is 85 (base-10). The base-5 number is first converted to a base-10 number. Any number with more than 8 (base-10) digits is considered invalid. Numbers with less than 8 digits are padded on the left with zeroes. IDs are allocated based on the most significant digit (in base-10):</p><blockquote>0, 1 &nbsp;&nbsp;&nbsp; athletes;<br>2, 3 &nbsp;&nbsp;&nbsp; reserves,<br>4, 5 &nbsp;&nbsp;&nbsp; judges;<br>6, 7 &nbsp;&nbsp;&nbsp; staff; and<br>8, 9 &nbsp;&nbsp;&nbsp; press.<br></blockquote><p>Consider the ID number d<sub>7</sub> d<sub>6</sub> ... d<sub>1</sub> d<sub>0</sub> expressed in base-10, where d<sub>i</sub> (0&le;i&le;7) is a single digit of the ID number. For this ID to be valid the following checksum value must be 0:</p><blockquote>F(0,d<sub>0</sub>) x F(1,d<sub>1</sub>) x F(2,d<sub>2</sub>) x ... x F(6,d<sub>6</sub>) x F(7,d<sub>7</sub>)</blockquote>We will define the function F(i,j) and the operator x next. The function F is defined as:<center><img src="http://livearchive.onlinejudge.org/external/20/p2017a.gif></center><p>The definition of the function F depends on a permutation of the decimal digits we call G:</p><center><img src="http://livearchive.onlinejudge.org/external/20/p2017a.gif></center><p>That is, G(0)=1, G(1)=5, etc.</p><p>The function i x j is based on dihedral groups and has the nice property that transposing digits in the ID creates a checksum error. It is defined as follows:</p><center><img src="http://livearchive.onlinejudge.org/external/20/p2017a.gif></center>

<p>Note that -4 mod 5 = 1.  </p>

<p>The operator x is left-associative, so for example i x j x k = (i x j) x k.</p>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The first line of the input contains an integer n³1.  Each of the next n lines contains a single scanned
 barcode representing a potential ID number.  Each scanned barcode will consist only of the characters
  'V', 'W', 'X', 'Y', and 'Z' and will be at least 1 and at most 12 letters long.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>You should output the ID number as read, its corresponding base-10 number, and a message telling
either that the ID is invalid or, if it is valid, the type of participant that the ID belongs to. 
 Use the wording and format in the sample output below.</p>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
6
WYYXWVZXX
YWYWYYXWVZYY
YWYWYYXWVZYX
YYZWYYXWVZYX
YXXWYYXWVZXW
XYXWYYXWXYY
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
WYYXWVZXX/01274262 is valid athlete id number
YWYWYYXWVZYY/81352381 is valid press id number
YWYWYYXWVZYX/81352382 is invalid id number
YYZWYYXWVZYX/59868007 is valid judge id number
YXXWYYXWVZXW/73539888 is valid staff id number
XYXWYYXWXYY/22520431 is valid reserve id number
</PRE>

<P>

______________________________________________________
2018||||||false||||||
<P>
The coaches for the US Olympic Track Team, Pierre A. Noid and Ada Noid, fear that their 16-year-old, 7 2
javelin thrower, Moven van Driver, has not been given a "fair go" by the Olympic referees.  They have 
purchased two distance measuring devices (DMD) to help them check on the accuracy of the measurements 
made by the referees.  There are several elimination rounds for which each coach positions him/herself in 
either coaches area (which includes the boundaries), such that the two coaches are on opposite sides of 
the throwing zone. At the beginning of each round the coaches measure their separation from each other 
and the distance of each from the launching point. During a round the coaches do not move. For each throw 
in each round they record their distances from the landing point, and calculate the distance that should have 
been awarded to Moven. You may assume that the javelin will always land somewhere in the landing area (which 
includes its boundary).</p>

<center><img src="http://livearchive.onlinejudge.org/external/20/p2018a.gif></center>

<p>The following measurements are made, as indicated in the figure above:

<blockquote>
            x &nbsp;&nbsp;&nbsp; Pierres distance from the launching point<br>
            y &nbsp;&nbsp;&nbsp; Adas distance from the launching point<br>
            z &nbsp;&nbsp;&nbsp; distance between Ada and Pierre<br>
            a &nbsp;&nbsp;&nbsp; Pierres distance from the javelins landing point<br>
            c &nbsp;&nbsp;&nbsp; Adas distance from the javelins landing point<br>
</blockquote>

<p>Your program is to determine b, the actual distance traveled by the javelin
(in meters, to the nearest hundredth of a meter) from the other measurements (given in meters to the
nearest hundredth of a meter).</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>There will be several groups of input data, each representing a round.  The first line of each group will 
have an integer and three real numbers, n, x, y, and z separated by white space. The first number n is the
number of throws in the current round, such that 0 &le; n &le; 5. The other distance limits are 10 &le; x &le; 100,
10 &le; y &le; 100, and 5 &le; z &le; 100.
 The next n lines will have pairs of real numbers, representing measurements a and c, such that 1 &le; a &le; 100,
 and 0 &le; c &le; 100. The input data is terminated by a value of n=0, followed by three zeros, and this data is not
 processed.</p>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>The output should be labeled by the number of the round, and followed by the distance of each throw for that
 round (each on a separate line). Formatting should be as in the sample output.

</p>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 50.00 50.00 75.00
50.00 50.00
60.00 40.00
30.00 75.00
2 30.00 60.00 87.50
55.55 66.66
33.33 88.88
0 0 0 0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Round 1
1.   66.14
2.   66.30
3.   69.96
 
Round 2
1.   52.77
2.   48.81

</PRE>

<P>

______________________________________________________
2019||||||false||||||
<P>
<p>Dolores's house has an unusual semi-circular driveway that can accommodate 26 cars in a single file, with 
exits at the front and the back.  This is nice because when she hosts a party because everyone can park in 
the driveway.  However, it causes complications when a guest wants to leave, because other guests with cars
 blocking that person must move their cars temporarily.  Her guests take this in stride, and make a game out 
of the nuisance.  When someone leaves, those cars that must move return to the driveway in reverse order.  
Since there are two ways for the leaving car to exit (through the front or rear exit), the cars on the shorter 
path to an exit must move (and return in reverse order). If the car that wants to leave is exactly in the 
middle, the front cars (on the left) must move.</p>

<p>For example, suppose the initial driveway configuration is represented as ABCDEFG.  Suppose further that
 the owner of car E decides to leave.  Then the owners of cars F and G must move (since theyre on the 
shorter path to an exit) to make room for E to leave, and then return to the driveway in reverse order.
 The new driveway configuration will be ABCDGF. Suppose now C wants to leave. Here, A and B have to move
 (since theyre on the shorter path to an exit) , with the resulting configuration BADGF. Lets say that
 now D wants to leave. In this case, B and A must move (since both exit paths are of  equal length, and
 A and B are on the path to the front exit). The resulting configuration is ABGF.</p>

<p>Write a program to simulate this party game.</p>





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>Each data set begins with a line containing only a string of uppercase letters, representing the initial
 order of cars in the driveway as described above.  The string will contain at least one letter, and 
no letter is duplicated.  The next line contains an integer n &ge; 0.  The next n lines each contain only a 
single uppercase letter, indicating the next car to leave the party; this letter is guaranteed to
 represent one of the remaining cars at the party.  Your program should stop processing data sets 
when it reaches an initial driveway order of STOP.</p>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>Begin the output for each data set by indicating the data set number and the initial order of cars in
 the driveway.  As each car leaves, output the new car order.  Follow the output format indicated in the
 Sample Output.  Leave a blank line between the output for different data sets.</p>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
ABCDEFG
3
E
C
D
HIWORLD
1
H
STOP
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Dataset #1:  The initial order is ABCDEFG.
After E leaves, the order is ABCDGF.
After C leaves, the order is BADGF.
After D leaves, the order is ABGF.
 
Dataset #2:  The initial order is HIWORLD.
After H leaves, the order is IWORLD.
</PRE>

<P>

______________________________________________________
2020||||||false||||||
<P>

<p>The judges at the programming contest have been watching the Olympics, and are considering using style
 judging at next years contest.  Particularly, they like the model used in the diving competition where
 each problem is given a degree of difficulty and then six judges will give it a score on a scale from
 0.0 to 10.0.  The high and low score will be discarded, the other four scores added up, and then the
 sum is multiplied by the degree of difficulty.  The team with the highest total score for all their
 problems is declared the winner.</p>

<p>Your job for this problem is to write a program that will read in the number of teams and problems,
 each problems degree of difficulty, and the problems that are submitted by each team at an actual
 competition along with each of the six judges scores for those problems.  The program will then print 
a summary showing each teams score on each of the problems along with the winning team number and their
 score.  A team is allowed to submit a problem more than once without penalty, but the judges scores 
for the most recent submission are the ones that are used.  In case more than one team has an overall 
score within three hundredths of a point of the high score, your program should indicate there is a 
tie and list the teams with multiple high scores.</p>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input file will consist of data sets for one or more contests.  Each data set will begin with a
 single integer 0 &lt; n &le; 9, representing the total number of teams competing in the contest. 
 This will be followed by a line that begins with an integer 0 &lt; p &le; 9 indicating the number of 
 problems at the competition, and then p numbers representing the judges difficulty ratings for
 each of the  problems.  Each of the difficulty ratings is a non-negative fixed point value with
 exactly one digit after the decimal point. All judges scores are fixed point numbers in the range 
from 0.0 to 10.0 with one digit after the decimal point.  The next lines contain a teams submission 
and the six judges scores for that submission in the following format :</p>

 

<blockquote>
	Team-Number Problem-Number Score<sub>1</sub> Score<sub>2</sub> Score<sub>3</sub> Score<sub>4</sub> Score<sub>5</sub> Score<sub>6</sub>
</blockquote>

 

<p>The end of input for a given contest is indicated by the string "TIME'S UP" starting in column 1. 
 A line of "END" starting in column 1 indicates end of input and should not be processed.</p>






<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>The first line of output for each contest should be the number of the contest, where contest numbering 
starts with 1.  The program should then print a summary showing the problem numbers, followed by a blank
 line, and then the team number of each team starting with the first team along with their total scores for 
each of the respective problems in a tabular format as shown below.  All team and problem numbers are 
numbered with positive integers starting at 1 and continuing with each consecutive integer thereafter. 
 The score for each team should be rounded to one digit to the right of the decimal point.  
This should be followed by a blank line, the team number(s) with the most points, and the overall 
winning point total.

 
<pre>
           Prob<sub>1</sub>  Prob<sub>2</sub>  Prob<sub>3</sub>    ...   Prob<sub>j</sub>
 
Team<sub>1</sub>      Score<sub>1</sub> Score<sub>2</sub> Score<sub>3</sub>   ...   Score<sub>j</sub>
Team<sub>2</sub>      Score<sub>1</sub> Score<sub>2</sub> Score<sub>3</sub>   ...   Score<sub>j</sub>
Team<sub>3</sub>      Score<sub>1</sub> Score<sub>2</sub> Score<sub>3</sub>   ...   Score<sub>j</sub>
  .                         .
  .                         .
  .                         .
Team<sub>i</sub>      Score<sub>1</sub> Score<sub>2</sub> Score<sub>3</sub>   ...   Score<sub>j</sub>

Team x wins with xxx.x points
</pre>
 
<p>In case of a tie between two teams, the final line should be written in the following format:</p>

 

<blockquote>
	<i>Tie for first with xxx.x points among these teams : x x</i>
</blockquote>

<p>If  the tie is between more than two teams, simply continue listing your team numbers with a single space between each.</p>

 

Have two blank lines after each contest.




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
3 2.1 1.9 1.8
2 2 6.0 2.1 6.5 7.0 8.0 7.5
1 2 1.9 5.0 6.5 7.0 7.0 5.5
3 3 1.8 5.5 8.5 7.0 6.0 6.0
4 3 2.3 7.0 7.0 7.0 7.0 7.0
2 3 2.3 7.0 7.0 7.0 7.0 7.0
2 1 1.9 5.0 6.5 7.0 7.0 5.5
1 1 1.9 5.0 6.5 7.0 7.0 5.5
3 1 1.9 5.0 6.5 7.0 7.0 5.5
2 3 8.0 7.5 7.5 8.0 7.5 7.0
1 3 6.9 5.5 6.5 7.5 7.0 8.5
4 2 5.5 7.5 7.0 7.0 8.0 7.5
TIME'S UP
END
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Contest 1:
           1       2       3
 
1       50.4    45.6    50.2
2       50.4    51.3    54.9
3       50.4     0.0    44.1
4        0.0    55.1    50.4
 
Team 2 wins with 156.6 points
</PRE>

<P>

______________________________________________________
2021||||||false||||||
<p>Starting with an initial colorless background, we will paint a sequence of potentially overlapping, horizontally-aligned rectangles of  various colors. The problem is to determine the exposed area of a given color.</p>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input data file contains a collection of independent datasets.</p>

<p>The first line of each dataset contains two numbers. The first number is an integer 0 &le; n &le; 1000 
specifying the number of rectangles that follow. The second number is a positive integer 0 < c < 8,
 representing the color whose exposed area we want to determine. </p>

<p>Each of the next n lines of the dataset contains information about a rectangle, and the lines are 
given in order of the painting sequence. The first number on the line is an integer 0 < c' < 8,
 representing the rectangles color. The next two integer values on the line are respectively the
 x- and y-coordinates of any corner of the rectangle. The last two integer values are respectively 
the x- and y-coordinates of the diagonally opposite corner of the rectangle. All coordinates lie in
 the range from -100 to +100 inclusively.</p>

<p>The end of input will be indicated by a dataset with n = 0.  This dataset should not be processed.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each dataset, the output of your program will be a single line  containing the string 
<i>"The area of color x in dataset y is: "</i> followed by a single integer representing the area
 (in square units) of the exposed color specified in the dataset.</p>
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 2
2 6 0 0 4
4 1 -4 3 -1
2 3 3 8 7
5 2 -2 4 6
1 5
7 0 0 1 1
2 3
3 0 0 2 2
4 0 0 1 1
0 1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
The area of color 2 in dataset 1 is: 31
The area of color 5 in dataset 2 is: 0
The area of color 3 in dataset 3 is: 3
</PRE>

<P>

______________________________________________________
2022||||||false||||||
<P>Air transportability is concerned with the packing of cargo on aircraft. In order to ensure safe takeoffs and landings, cargo must be packed according to rigorous rules, which can vary from airplane to airplane. Rules for packing aircraft are:</p><blockquote><li>All aircraft will have weight limits. They cannot hold more than their weight limit, and for the sake of efficiency, no plane may carry less than 50% of its weight limit. <li>Cargo items are rectangular and have uniform weight distribution. Two adjacent items must be at least 1 foot apart to allow for tie downs. <li>All aircraft will have a rectangular area for cargo, the cargo hold. No cargo can be placed within one foot of the edge of the cargo hold to allow space to tie it down. <li>At least 60% of the cargo weight must be put in the front half of the cargo hold. <li>The weight on the left side of the center line must be no more than 5% more or less than the weight on the right hand side of the center line. <li>If a piece of cargo can be moved toward the rear of the plane and still meet the other constraints, then it should be moved toward the rear of the plane because all loading and unloading takes place at the rear of the plane. <li>To allow for speedy loading and unloading, no plane may hold more than 10 items.</blockquote><p>You are to write a program to help allocate cargo to aircraft efficiently.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p><p>The input will consist of one or more input sets. The first line of each input set will be an integer 0 &le; p &le; 20 which represents the number of planes to be loaded. There will then be p sets of plane information. Each set of plane information has two lines. The first has a string of 1 to 25 characters representing the name of the aircraft. No two different aircraft in an input set will have the same name. The second line will have four integers, 0 < x &le; 100, 0 < y &le; 30, 0 < w &le; 100000, 0 < c &le; 20000 where:</p><blockquote><li>x represents the length of the cargo hold (from the front of the plane to the rear of the plane) in feet, <li>y represents the width of the plane (from left to right) in feet, <li>w represents the weight limit of the plane in pounds, <li>c represents the cost of the plane in dollars.</blockquote><p>After the plane information will be the information about the cargo to be loaded. The first line will have a single integer 0 < n &le; 200, representing the number of pieces of cargo to be loaded. There will then be n sets of cargo item information. Each line of cargo information will consist of 4 integers 0 < i &le; 1000, 0 < len &le; 20, 0 < wid &le; 20, 0 < wt &le; 10000, where:</p><blockquote><li>i is a unique value that identifies the cargo item and gives its relative priority (where the higher the value, the more important the item) <li>len is the length of the item in feet <li>wid is the width of the item in feet <li>wt is the weight of the item in pounds</blockquote><p>Items cannot be turned when they are loaded on the aircraft, so the lengthwise side of the cargo item must be loaded lengthwise along the aircraft. The end of input will be a set with p = 0. This set should not be processed.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>If it is possible to load all of the cargo meeting the constraints, you should load the cargo using the most inexpensive collection of planes, given the constraints above. If all of the cargo cannot be loaded, you should load as many items as possible without regard for cost. If two configurations load the same number of items, select the configuration with the highest total priority. If two configurations have the same number of items loaded and the same priority and meet all of the above constraints, print either one.</p><p>The first line of output for each input set should include the number of the set (starting with 1) and the total cost of the planes used to transport the set. Then, for each plane used, give the name of the plane on a line by itself followed by one line for each of the cargo items on the plane (in ascending numerical order of priority), giving the cargo item number, and the distance of its leftmost front corner from the front of the cargo hold and the left edge of the cargo hold (because of the position of tie downs, these must be integer values). Finally, on the last line of the output, if there are pieces of cargo that cannot be loaded, list them, in numerical order of priority.</p><p>Have a blank line between output for consecutive input sets and use the format in the sample output.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
C-5A, first
100 30 100000 20000
Cessna
10 5 1000 200
5 
400 20 20 56000
300 20 20 4000
80  20 10 30000
900 20 10 10000
5 5 3 400
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Plane loading 1:
C-5A, first
    80 loaded at 79 back, 1 from left
    300 loaded at 30 back, 5 from left
    400 loaded at 9 back, 5 from left
    900 loaded at 79 back, 19 from left
 
Unloaded: 5
</PRE><P>
______________________________________________________
2023||||||false||||||
<P>A television game show host begins each new game by selecting a player, as follows.  The host asks candidate
 players to order four items.  The first candidate to order the items correctly wins.  If there is a tie for
 the fastest time, or if no one correctly answers, the host poses a new question.  The producers air only
 questions that select a player.  They are unhappy with their current player selection software and are
 seeking a replacement.</p>

<p>The candidates have at most 30 seconds to answer the question.  During this time, they press buttons 
A, B, C, or D, indicating how to order the items.  Pressing a special rub out button marked X erases the 
last selection (this has no effect if there are no characters to rub out).  For example, after pressing 
BXXACXDXBDC, the candidate has selected the answer ABDC.  Each candidates selection is sent to the
 software along with a timestamp (from 0 to 300, in tenths of a second) and a number identifying the 
candidate.  A candidate cannot make simultaneous selections (i.e., with the same timestamp), but two 
different candidates might make selections at the same time.  Although the software receives the 
messages in time sequence for a particular candidate, messages from two different candidates may 
arrive out of time sequence.  For example, the software might receive the following sequence:</p>

<center><img src="http://livearchive.onlinejudge.org/external/20/p2023a.gif></center>

<p>Suppose that the correct item order is BDAC.  To be considered correct, a candidate's final answer
 must exactly match the correct item order.  In this example, both candidates have the correct answer,
 but Candidate 2 has the faster time (15.0 seconds), and is the player for the next round.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input contains several player selection rounds.  Each round begins with a line containing two 
integers m and n separated by whitespace, where 2 £ m £ 10 is the number of candidates and n is the 
number of messages.  The next line contains only the letters A, B, C, and D, in the correct order
 for that round; each letter appears exactly once and in upper case.  The next n lines contain the 
messages in the following format:</p>

 
<blockquote>
	<i>candidate timestamp selection</i>
</blockquote>
 

<p>where candidate is an integer between 1 and m inclusive that identifies the candidate sending 
the message, timestamp is an integer between 0 and 300 inclusive representing the time in tenths
 of a second, and selection is either A, B, C, D, or X (in upper case) as explained above.  Your 
program must stop processing input when it encounters a data set in which n is 0.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>Begin the output of each player selection round by summarizing the results.  List the candidates 
in order of candidate number and state whether the candidate was correct or incorrect.  If the candidate
 was correct, indicate the time at which the candidate completed data entry.  If a player is
 selected, indicate which player.  If no player is selected, indicate that this question should 
not be aired and a new question is needed.  Leave a blank line between the output for different
 player selection rounds.  Follow the format shown in the Sample Output.</p>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2 10
BDAC
1 20 B
2 10 B
1 50 C
2 40 D
1 70 X
1 110 D
1 120 A
2 100 A
2 150 C
1 170 C
2 8
ABCD
1 20 A
1 25 B
1 78 D
2 15 C
2 59 D
2 105 A
2 189 B
1 187 C
2 0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Round #1:  2 candidates
Candidate 1:  Correct in 17.0 seconds
Candidate 2:  Correct in 15.0 seconds
Candidate 2 is selected as the player for this round.
  
Round #2:  2 candidates
Candidate 1:  Incorrect
Candidate 2:  Incorrect
Dont air this one...we need a new question.
</PRE>

<P>

______________________________________________________
2024||||||false||||||
<P>A convoy of vehicles has lined up on a single lane and one-way street in front of a single lane and one-way bridge over a river. Note that since the street is single lane, no vehicle can overtake any other. The bridge can sustain a given maximum load. To control the traffic on the bridge, operators are stationed on both ends of the bridge. The convoy of vehicles is to be divided into groups, such that all the vehicles in any group can cross the bridge together. When a group reaches the other side, the operator on that side of the bridge uses a telephone to inform the operator on this side that the next group can start its journey over the bridge. The weight of each vehicle is known. The sum of the weights of the vehicles in any group cannot exceed the maximum load sustainable by the bridge. Associated with each vehicle is the maximum speed with which it can travel over the bridge. The time taken by a group of vehicles is calculated as the time taken by the slowest vehicle in the group to cross the bridge. The problem is to find the minimum amount of time in which the entire convoy can cross the bridge.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The file has several inputs. The first line of input contains three positive integers (separated by blanks): the first one represents the maximum load that the bridge can sustain (in tones); the second one represents the length of the bridge (in km); and the third one is the number of vehicles <b>n</b> in the convoy. Each of the next <b>n</b> lines of input contains a pair of positive integers, <b>w</b> and <b>s</b> (separated by blanks), where <b>w</b> is the weight of the vehicle (in tones) and <b>s</b> is the maximum speed (in km/h) with which this vehicle can travel over the bridge. The weights and speeds of the vehicles are specified in the same order as the order in which the vehicles are queued up. You can assume that <b>n</b> < 1000. The file ends when n = 0.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output of each dataset should be a single real number on a line by itself specifying the minimum time in minutes in which the convoy can cross the bridge. Print the number with exactly one decimal digit.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
100 5 10
40 25
50 20
50 20
70 10
12 50
9 70
49 30
38 25
27 50
19 70
0 0 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
78.0
</PRE><P>
______________________________________________________
2025||||||false||||||
<P><p>Assume that you work for the Digital Processing Lab. They ask you to write a program with an input binary matrix <b>A</b>, which contains the pattern to search on other binary matrix <b>B</b>. The input file include the size and elements for both <b>A</b> and <b>B</b>. The recognition process consists in scanning row by row (horizontal scanning) the matrix <b>B</b>, when a pattern is located on <b>B</b> you must mark this pattern. To mark a located pattern change 1 to 2 and 0 to * on <b>B</b>. The output file of your program will be the matrix <b>B</b> with the located patterns marked.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input contains the number of test. For each test, the first line contains the size of <b>A</b>, next lines contains the matrix <b>A</b> row by row, next line contains the size of <b>B</b> and next lines contains the matrix <b>B</b> row by row. Each test will be separated by exactly one empty line.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For every test, the output is the matrix <b>B</b> with the located patterns marked. Output one empty line between test.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4

2 2
1 0
1 1
5 5
1 1 0 0 0
0 1 1 0 0
1 0 0 1 0
1 1 1 1 0
0 0 1 1 1

1 1
1
5 5
1 1 0 0 0
0 1 1 0 0
1 0 0 1 0
1 1 1 1 0
0 0 1 1 1

1 1
0
5 5
1 1 0 0 0
0 1 1 0 0
1 0 0 1 0
1 1 1 1 0
0 0 1 1 1

2 6
1 0 0 1 0 1
1 1 1 0 1 0
5 5
1 1 0 0 0
0 1 1 0 0
1 0 0 1 0
1 1 1 1 0
0 0 1 1 1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1 2 * 0 0
0 2 2 0 0
2 * 0 1 0
2 2 1 2 *
0 0 1 2 2

2 2 0 0 0
0 2 2 0 0
2 0 0 2 0
2 2 2 2 0
0 0 2 2 2

1 1 * * *
* 1 1 * *
1 * * 1 *
1 1 1 1 *
* * 1 1 1

1 1 0 0 0
0 1 1 0 0
1 0 0 1 0
1 1 1 1 0
0 0 1 1 1
</PRE><P>
______________________________________________________
2026||||||false||||||
<P>Consider a set <b>D</b>={1,2,3,...,n}.<br>A permutation of the elements of <b>D</b> is an ordered array a = a<sub>1</sub>a<sub>2</sub>a<sub>3</sub>...a<sub>n</sub> of all the distinct elements of <b>D</b>.<br>The number of permutations of <b>D</b> is n!.<br>Sample:<br>Let <b>D</b>={1,2,3}, then #Permutations = 3! = 6, and Permutations = { 123, 132, 213,231, 312,321 }</p><p><b>Lexicographical order</b><br>Let a = a<sub>1</sub>a<sub>2</sub>a<sub>3</sub>...a<sub>n</sub> and b = b<sub>1</sub>b<sub>2</sub>b<sub>3</sub>...b<sub>n</sub> permutations of <b>D</b>, then a < b if only if for some m with 0 < m < n and a<sub>1</sub> = b<sub>1</sub>, a<sub>2</sub> = b<sub>2</sub>, a<sub>3</sub> = b<sub>3</sub>, ..., a<sub>m-1</sub> = b<sub>m-1</sub> and a<sub>m</sub> < b<sub>m</sub>.<br>Check that the sample above is in lexicographical order.</p><p><b>Generating Permutations</b><br>If the permutation b is the lexicographical successor of the permutation a, then we can get b from a using the next procedure:<br><blockquote>1. Look for the greater m that a<sub>m</sub> < a<sub>m+1</sub>.<br>2. Make b<sub>1</sub> = a<sub>1</sub>, b<sub>2</sub> = a<sub>2</sub>, ..., b<sub>m-1</sub> = a<sub>m-1</sub>.<br>3. Make b<sub>m</sub> equal to the minor value of a<sub>m+1</sub>, a<sub>m+2</sub>, ..., a<sub>n</sub>, that is greater than a<sub>m</sub>.<br>4. Make b<sub>m+1</sub> < b<sub>m+2</sub> < ...< b<sub>n</sub>.</p><br></blockquote><p>Make a program that accept in an input file the number of elements n (0 < n < 10) of <b>D</b> and generate in an output file all the permutations of D lexicographically ordered.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input is the number of elements n (0 < n < 10) of the set D. There might be several runs in the input file. Your program should stop when n = 0.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output will be the name of the run, the value of n, follow by the list of all the permutations of <b>D</b> lexicographically ordered. There should be a blank line between runs.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
2
4
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Run 1 n=1
1

Run 2 n=2
1 2
2 1

Run 3 n=4
1 2 3 4
1 2 4 3
1 3 2 4
1 3 4 2
1 4 2 3
1 4 3 2
2 1 3 4
2 1 4 3
2 3 1 4
2 3 4 1
2 4 1 3
2 4 3 1
3 1 2 4
3 1 4 2
3 2 1 4
3 2 4 1
3 4 1 2
3 4 2 1
4 1 2 3
4 1 3 2
4 2 1 3
4 2 3 1
4 3 1 2
4 3 2 1
</PRE><P>
______________________________________________________
2027||||||false||||||
<P>An aerial photograph represents a square portion of an islands vegetation as a positive integer matrix.
 Each number in the matrix corresponds to a square subsection of the total area and contains relevant 
information about the plants that inhabit that particular place. For example, plant species that are 
unique to the island are represented with prime numbers, while species that can be found elsewhere 
are represented with non-prime numbers. The Botanical Institute of the island wants to divide the area 
into regions that have unique vegetation, and those that do not. To accomplish this task, the Institute 
has requested you to analyze the supplied information and determine the number of different regions
 that exist and their sizes. Two subsections belong to the same region if they lie contiguously on 
the same row or column, and if they both are either prime or non-prime. </p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input to this problem is given out as sets of square areas. Each set
 contains the size of the area to analyze in a line by itself and is followed
 by the corresponding integer matrix, with each row occupying one line. A non-positive 
integer for the area size indicates that no more sets should be analyzed. The size of the
 matrix will not exceed 100 units per side and integers will not be larger than 100,000,000.</p>
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each set write the set number on the first line. On the next line output the number of 
regions of unique vegetation followed by the number of cells sorted in increasing order, that 
corresponds to each region. On the third line write the number of regions with non-unique vegetation.
 Output should be formatted as in the sample and an empty line must separate output from different 
sets.</p>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
2 4 9
17 6 37
29 8 11
4
2 3 12 15
5 7 21 33
4 6 11 17
8 9 13 29
-1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Area 1:
2 unique vegetation regions: 2 3
1 non-unique vegetation regions

Area 2:
2 unique vegetation regions: 4 4
2 non-unique vegetation regions
</PRE>

<P>

______________________________________________________
2028||||||false||||||
<P>In this problem you will be given a map of a rectangular maze with square blocks. From each block you can move in four directions (N, E, W, S) and you lose some energy for every walk from one block to an adjacent one. Some blocks of the maze are really blocked - that is you cannot move to those blocks. Some other blocks contain some treasures that you will have to collect. Each treasure has a particular pickup cost and carrying cost associated with it. The pickup cost is the energy required to pick up the treasure from the floor and the carrying cost is the energy required to carry the treasure from one block to an adjacent one. Now given a starting and ending location in the maze you will have to plan a single walk from the starting location to collect and carry all the treasures to the ending location at the expense of minimum energy.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input contains two integers <b>R</b> and <b>C</b> (each < 21) describing the dimensions of the maze. Then follows <b>R</b> lines of <b>C</b> characters each representing the map of the maze. Each character corresponds to a square block and represents its property ('.' : an empty block, '#' : a blocked block, '*' : a block containing a treasure, 'S' : the starting block, 'T' : the ending block). The next line contains an integer representing the energy required in calories for a walk from a block to an adjacent one.</p><p>The next line contains pairs of integers (P<sub>i</sub>, C<sub>i</sub>) representing the pickup and carrying cost in calories for the treasures given in the map from top to bottom and for the same row from left to right. There will be at most 10 treasures in the maze. The input may contain several test cases and ends with two zeros for <b>R</b> and <b>C</b>.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case first output the hunt number. In the next line print the minimum energy required for the hunt. The third line will contain the description of the hunt as a sequence of characters containing 'N', 'E', 'W', 'S' and 'P'. 'N', 'E', 'W' and 'S' represent a walk to the north, east, west and south respectively and 'P' means that the treasure is picked up from the current location. If the hunt is impossible just output the sentence <i>'The hunt is impossible.'</i> in a line by itself. Each test case must be followed by a blank line.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5 8
#......T
..#*..#.
..######
...*...#
####S.#*
5
10 50 50 100 30 80
10 10
#........*
..#*..#...
..######..
.......#..
####S..##.
.*.#...#..
.......#..
.##.#....#
.*.....#.#
....*..#.T
10
100 400 20 50 150 250 30 70 4 5
0 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Hunt #1
The hunt is impossible.

Hunt #2
Minimum energy required = 17539 cal
NWWWNNNEESPNWWSSSEEESSSWSSESPWWWNPW
NNENPESEEESEEENENNNNNNPSSSSSWSSSSE
</PRE><P>
______________________________________________________
2029||||||false||||||
<P>
Mr. Richards, an enthusiastic mathematician, is spending his holiday in Shanghai.  He is so crazy 
about his study that he may associate anything with mathematical problems.  According to his 
schedule,  he should visit the Museum today.  But after getting up, he was in a daze in the hotel, 
thinking deeply about a coloration problem.  Yesterday, when he took a walk in the nightfall, the 
slabs of stone paved on the piazza fascinated him.  He has associated  those stones with a 
combinatorial problem. 

<P>
The shape of those slabs of stone is equilateral triangle whose side length is 1 meter.  But if Mr. 
Richards arranges 4 slabs of stone, as Fig.1 below shows, those stones may form a larger 
equilateral triangle whose side length is 2 meters.  He designates those stones with the numbers 1 
to 4 first, then he tries to use three different colors  -  blue, green and red  -  to color those stones.  
In such a triangle, the contiguous stones are required not to be painted with the same color.  He 
asks himself to find out the number of the coloration methods.  Since he is a learned person in 
combinatorial theory, it's not a difficult problem for him.  Soon he works out the answer, 24.  
You know, because of the marks on those stones, they should not be regarded as the same ones. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2029a.eps}$
 -->
<IMG
 WIDTH="232" HEIGHT="176" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2029img1.png
 ALT="\epsfbox{p2029a.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Fig.1 The colored slabs of stone 

</DIV>

<P>
Arranging for more slabs of stone to form a larger triangle, and using more colors, the coloration 
problem will be much more complex.  For example, arranging 9 slabs of stone, as Fig.2 below 
shows, Mr. Richards has to form a triangle whose side length is 3 meters.  Using 5 colors to paint 
on those stones, the answer will be an enormous number.  Without a computer, he could not tell 
the result exactly, although he knows clearly how to account the coloration methods.  So you are 
required to write a program to tell him the exact answer. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2029b.eps}$
 -->
<IMG
 WIDTH="317" HEIGHT="219" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2029img1.png
 ALT="\epsfbox{p2029b.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Fig.2 The triangle whose side length is 3 meters 

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file may contain several data sets.  Each data set consists of two integers <SPAN CLASS="MATH"><I>l</I></SPAN> <!-- MATH
 $(0 \le l \le 6)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2029img1.png
 ALT="$ \le$"><I>l</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2029img1.png
 ALT="$ \le$">6)</SPAN> 
and <SPAN CLASS="MATH"><I>c</I></SPAN> <!-- MATH
 $(1 \le c \le 4)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2029img1.png
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2029img1.png
 ALT="$ \le$">4)</SPAN>.  The first integer <SPAN CLASS="MATH"><I>l</I></SPAN> represents the side length of the triangle formed by slabs of 
stone.  The second integer <SPAN CLASS="MATH"><I>c</I></SPAN> represents the number of the kinds of the  colors.  The input file is 
terminated by <SPAN CLASS="MATH"><I>l</I> = 0</SPAN>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each data set, compute <SPAN CLASS="MATH"><I>s</I></SPAN>, the number of the coloration methods without any two contiguous 
stones painted with the same color.  If the colors given are insufficient to paint the slabs of stone, 
the answer should be 0.  Output your answer as a single integer on a line by itself. 

<P>

<P>
<BR>

<B>Note:</B> You are required to tell him the exact answers, not the floating-point values.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 3 
3 3
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
24 
528
</PRE> 

<P>

______________________________________________________
2030||||||false||||||
<P>
In such a demanding age, after working busily day after day, undoubtedly people would expect to 
enjoy their leisure time.  What do they want to do first?  It's the trip.  Nowadays, in the eyes of 
a traveler who hopes to visit tourist attractions all over the country, the world is wonderful.  
Since there are so many travel agencies, if he wants to participate in an organized trip, he may 
choose any of them.  But for a travel agency, the competition seems to be much more ruthless, 
for he has so many rivals in scrambling for the tourists. 

<P>
Company trip center is one of those unfortunate travel agencies.  After investigating from the 
questionnaires, the agent has found out that there are some tourists who do not get along with each 
other, so he has to choose some of them to organize a trip group.  But he had made many 
mistakes in choosing those members before, and they caused many of his customers shift to his 
rivals.  Although he could not tell exactly how many rivals he has, he knows clearly that his 
profits have diminished terribly.  So he decides to take action to change the situation. 

<P>
Company trip center pays attention to that problem at the beginning.  Initially the agent does not 
know what tourists do not like each other, but after discussing with those tourists, he is able to 
acquire the information.  So he will be able to form a trip group from some of those tourists in 
which no one is unwilling to get along with others.  If company A could make a wise decision, 
there will be maximum number of tourists in this group,  which will undoubtedly bring the biggest 
profits to him.  What a great idea, isn't it? 

<P>
You are required to write a program for company trip center to solve the problem.  The solution 
will exist for sure.  After writing such a program, you will get an acknowledgement from him. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file for this problem will consist of multiple test cases.  The first line of each test case 
contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(n \le 50)$
 -->
<SPAN CLASS="MATH">(<I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2030img1.png
 ALT="$ \le$">50)</SPAN>, which specifies the number of tourists participating in the trip group.  
A value of 0 for the integer <SPAN CLASS="MATH"><I>n</I></SPAN> indicates the end of input, and this test case should not be processed.  
Each line in the following  <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains n characters without any separators.  Each character 
should be either ``1" or ``0", no characters else will appear in the input file.  The character ``1" 
means that the two tourists could not get along well with each other, so you shouldn't arrange 
them in one trip group.  And the character ``0" means they will make no difficulty to join the 
same group.  For example, if the 2nd characte r in the 1st line is ``1", the trip group may comprise 
either the 1st tourist or the 2nd tourist, if the character is ``0", the trip group may comprise both of 
them. 

<P>

<P>
<BR>

<B>Assumption:</B> Obviously, a tourist could not be unwilling to get along with himself.  So you may 
assume the corresponding character will always be ``0".  If a tourist does not wish to get along 
with another one, the latter will be unwilling with the former either.  You may assume the data in 
the input file appear conjugated.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case, your program should output one integer in a line, which specifies the maximum 
tourists in the trip group.  No more white spaces or blank lines in the output are allowed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 
010001 
100100 
000110 
011000 
001001 
100010 
0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3
</PRE> 

<P>

______________________________________________________
2031||||||false||||||
<P>Mr. White, a fat man, now is crazy about a game named ``Dance, Dance, Revolution". But his dance skill is so poor that he could not dance a dance, even if he dances arduously every time. Does ``DDR" just mean him a perfect method to squander his pounds? No way. He still expects that he will be regarded as ``Terpsichorean White" one day. So he is considering writing a program to plan the movement sequence of his feet, so that he may save his strength on dancing. Now he looks forward to dancing easily instead of sweatily.<P>``DDR" is a dancing game that requires the dancer to use his feet to tread on the points according to the direction sequence in the game. There are one central point and four side points in the game. Those side points are classified as top, left, bottom and right. For the sake of explanation, we mark them integers. That is, the central point is 0, the top is 1, the left is 2, the bottom is 3, and the right is 4, as the figure below shows:<P><DIV ALIGN="CENTER"><IMG WIDTH="218" HEIGHT="227" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2031img1.png ALT="\epsfbox{p2031.eps}"></DIV><P>At the beginning the dancer's two feet stay on the central point. According to the direction sequence, the dancer has to move one of his feet to the special points. For example, if the sequence requires him to move to the top point at first, he may move either of his feet from point 0 to point 1 (<SPAN CLASS="textit">Note: Not both of his feet</SPAN>). Also, if the sequence then requires him to move to the bottom point, he may move either of his feet to point 3, regardless whether to use the foot that stays on point 0 or the one that stays on point 1.<P>There is a strange rule in the game: moving both of his feet to the same point is not allowed. For instance, if the sequence requires the dancer to the bottom point and one of his feet already sta ys on point 3, he should stay the very foot on the same point and tread again, instead of moving the other one to point 3.<P>After dancing for a long time, Mr. White can calculate how much strength will be consumed when he moves from one point to another. Moving one of his feet from the central point to any side points will consume 2 units of his strength. Moving from one side point to another adjacent side point will consume 3 units, such as from the top point to the left point. Moving from one side point to the opposite side point will consume 4 units, such as from the top point to the bottom point. Yet, if he stays on the same point and tread again, he will use 1 unit.<P>Assume that the sequence requires Mr. White to move to point <SPAN CLASS="MATH">1 <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2031img1.png ALT="$ \rightarrow$"> 2 <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2031img1.png ALT="$ \rightarrow$"> 2 <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2031img1.png ALT="$ \rightarrow$"> 4</SPAN>. His feet may stays on (point 0, point 0) <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2031img1.png ALT="$ \rightarrow$"> (0, 1) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2031img1.png ALT="$ \rightarrow$"> (2, 1) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2031img1.png ALT="$ \rightarrow$"> (2, 1) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2031img1.png ALT="$ \rightarrow$"> (2, 4)</SPAN>. In this couple of integers, the former number represents the point of his left foot, and the latter represents the point of his right foot. In this way, he has to consume 8 units of his strength. If he tries another pas, he will have to consume much more strength. The 8 units of strength is the least cost.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of a series of direction sequences. Each direction sequence contains a sequence of numbers. Ea ch number should either be 1, 2, 3, or 4, and each represents one of the four directions. A value of 0 in the direction sequence indicates the end of direction sequence. And this value should be excluded from the direction sequence. The input file ends if the sequence contains a single 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each direction sequence, print the least units of strength will be consumed. The result should be a single integer on a line by itself. Any more white spaces or blank lines are not allowable.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 2 2 4 0 
1 2 3 4 1 2 3 3 4 2 0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8 
22
</PRE><P>
______________________________________________________
2032||||||false||||||
<P>
Since ancient time, people have been dreaming of flying in the sky.  Eventually, the dream was 
realized in the 20th century.  Nowadays, the airplane  becomes a useful vehicle that is used 
frequently in our daily life. 

<P>
But before the dream came true, a large number of people had tried to design the aircrafts.  One 
of those aircrafts, which is called ``helicopter" in modern time, can be traced back to the blueprint 
of the aircraft designed by Leonardo da Vinci.  But the helicopter was not effective enough till 
this century. 

<P>
Since the helicopter rises through the updraft generated by the airscrew, it is very important for it 
to keep balance.  Even for the late-model helicopters, the loads are required to be distributed 
evenly, so that the center of gravity of the helicopter lies just underneath the airscrew.  It is one of 
the most important requirements for it in flight. 

<P>
Now, you are requested by an airline company to write a program for a passenger transport 
helicopter.  The program may arrange a seat for each passenger automatically so that the center 
of gravity of the helicopter should be located underneath the airscrew as dose as possible.  The 
seats in the helicopter and the airscrew are designed as the figure below. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2032.eps}$
 -->
<IMG
 WIDTH="217" HEIGHT="262" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2032img1.png
 ALT="\epsfbox{p2032.eps}">
</DIV>

<P>
You may assume the distance of the adjoining seats is 1 unit, and the airscrew occupies a seat.  A 
seat along with a passenger on it will generate a transverse mome nt and a longitudinal moment.  
The transverse moment, <SPAN CLASS="MATH"><I>Mv</I><SUB>i</SUB></SPAN>, is the weight of a passenger on the seat multiplied by the transverse 
distance from the seat to the airscrew.  The longitudinal moment,  <SPAN CLASS="MATH"><I>Mh</I><SUB>i</SUB></SPAN>, is the weight of a 
passenger on the seat multiplied by the longitudinal distance.  If the transverse moments 
generated by the passengers on the left are assumed to be positive, the moments by the passengers 
on the right will be negative.  Also, if the longitudinal moments generated by the passengers in 
front are assumed to be positive, the moments by the passengers on the back will be negative.  
That is, the moments may counteract with each other.  You may use the formula below to figure 
out the composition of moments. 

<P>
<P><!-- MATH
 \begin{displaymath}
M=\sqrt{(\sum^{8}_{i=1}Mv_{i})^{2}+(\sum^{8}_{i=1}Mh_{i})^{2}}
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>M</I> = <IMG
 WIDTH="203" HEIGHT="79" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2032img1.png
 ALT="$\displaystyle \sqrt{{(\sum^{8}_{i=1}Mv_{i})^{2}+(\sum^{8}_{i=1}Mh_{i})^{2}}}$">
</DIV><P></P>

<P>
If <SPAN CLASS="MATH"><I>M</I> = 0</SPAN>, the center of gravity of the helicopter lies just underneath the airscrew. 

<P>
You are required to arrange the seats of 8 passengers according to their weights to locate the center 
of gravity underneath the airscrew as far as possible.  That is, the value of  <SPAN CLASS="MATH"><I>M</I></SPAN> should be  
minimum. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file may contain several test cases.  Each test case consists of eight integers in lines, 
which represent the weights of those passengers.  The end of input is signified by the test case in 
which the weights are all 0.  And this test case should not be processed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output for each test case should include a line contains a real number which tells the 
composition of moments, <SPAN CLASS="MATH"><I>M</I></SPAN>, in the optimal arrangement.  The output of the composition of 
moments should be accurate to 3 decimal places.  And you should not print any more white 
spaces or blank lines in the output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1 2 3 4 5 6 7 8 
0 0 0 0 0 0 0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sampple Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
0.000
</PRE> 

<P>

______________________________________________________
2033||||||false||||||
<P><SPAN CLASS="textbf">Introduction</SPAN><P>The cards originated when a psychic named Orlan modified these tarot cards for games. The game became popular with soldiers passing time between battles. As its popularity spread, each region developed its own rules and picture variations.<P><DIV ALIGN="CENTER"><IMG WIDTH="192" HEIGHT="168" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="\epsfbox{p2033a.eps}"></DIV><P><SPAN CLASS="textbf">Diagram</SPAN><P><OL><LI>Picture; </LI><LI>Numbers: Correspond to the 4 sides of the card. (1:weak 10:strong) </LI><LI>Element: Some rules allow the players to use its elemental property. </LI></OL><P><DIV ALIGN="CENTER"><IMG WIDTH="184" HEIGHT="168" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="\epsfbox{p2033b.eps}"></DIV><P><SPAN CLASS="textbf">Battle Area </SPAN><P><OL><LI>Battle area: Place cards here one at a time. </LI><LI>Elemental: Some rules indicate elements on the board. </LI></OL><P><DIV ALIGN="CENTER"><IMG WIDTH="177" HEIGHT="178" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="\epsfbox{p2033c.eps}"></DIV><P><SPAN CLASS="textbf">Basic Rules</SPAN><P><P><BR>There are two players in the game.<P>One of them is the red player, and the other is the blue one. They place their own cards on the battle area in turn, the red player places red cards while the blue player places blue cards. Placing a card on the location of the area that has a card is not allowed. A Card in the battle area will be turn over if its value on side adjacent to new card is less than new card's value on side adjacent to it. That is, the card's color will be changed, and it will belong to the other player. For example, as the figure shows, assume a red card has been placed on the battle area, and a blue one is now placed on the area adjacent to the right side of the red one. Since the value of the left side of the old card is 2, and the value of the right side of the new card is 7, the red card will be turned over to be a blue one, and it belongs to the blue player. When all 9 areas are filled, the outcome of the game is judged. If the player who put first card has 5 cards in battle area, it's a tie. If he has more cards, he wins the game. But if the amount of his cards is less than 5, unfortunately, he is defeated.<P><SPAN CLASS="textit">Note: Only the card is being placed on the battle area may turn over those that have been already placed on the area. It will not be turned over by the old ones. <b>Remember that the new card can only turn over opponents' cards.</b></SPAN><P><DIV ALIGN="CENTER"><IMG WIDTH="197" HEIGHT="181" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="\epsfbox{p2033d.eps}"></DIV><P><P><BR><SPAN CLASS="textbf">Same Rule</SPAN><P><P><BR><SPAN CLASS="textbf">Same rule</SPAN> will turns over cards that have same values on 2 or more sides. As the figure shows, two red cards have already been placed on the battle area. The value of the down side of the up card is 4, and that of the right side of the left card is 1. If a blue card whose up side is 4 and right side is 1 is placed on the area, while it's adjacent to the down side of the up one and adjacent to the right side of the left one, both of the red cards will be turned over.<P><SPAN CLASS="textit"><b>Note: Only adjacent cards that belong to the opponent will be turned over. In the example above, if the up card is blue, the blue card to be placed on the battle area will turn over the left red one, but not the up blue one.</b></SPAN><P><DIV ALIGN="CENTER"><IMG WIDTH="199" HEIGHT="183" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="\epsfbox{p2033e.eps}"></DIV><P><P><BR><SPAN CLASS="textbf">Plus Rule</SPAN><P><P><BR><SPAN CLASS="textbf">Plus Rule</SPAN> means that cards adding to the same value on 2 or more adjacent sides will be turned over. As the figure shows, two red cards have been placed on the area. The value of the up one's down side is 3, and that of the left one's right side is 5. If a blue card whose up side is 4 and left side is 2 is placed on the area, while it's adjacent to the down side of the up one and adjacent to the right side of the left one, both of the red cards will be turned over. Since both of the sum values are 7.<P><SPAN CLASS="textit"><b>Note: Only adjacent cards that belong to the opponent will be turned over. In the example above, if the up card is blue, the blue card to be placed on the battle area will turn over the left red one, but not the up blue one.</b></SPAN><P><DIV ALIGN="CENTER"><IMG WIDTH="199" HEIGHT="176" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="\epsfbox{p2033f.eps}"></DIV><P><P><BR><SPAN CLASS="textbf">Combo Rule</SPAN><P><P><BR>Cards turned over using <SPAN CLASS="textbf">Same Rule</SPAN> or <SPAN CLASS="textbf">Plus Rule</SPAN> turn over adjacent cards in <SPAN CLASS="textbf">Combo Rule</SPAN> . As the figure shows, a red card and two blue cards are on the battle area. The value of the left side of the red one is 2, and that of the down side is 4. And the red one is placed in the top left corner. A blue card whose left side is 3 is adjacent to the right side of the red one, and another blue card whose up side is 1 is adjacent to the down side of the red one. Assume those two cards are just turned over to be blue by <SPAN CLASS="textbf">Same Rule</SPAN> or <SPAN CLASS="textbf">Plus Rule</SPAN> by another card, using <SPAN CLASS="textbf">Combo Rule</SPAN> , the red one will be turned over, because the value of the right blue card's left side is larger than the value of the red one's right side <SPAN CLASS="MATH">(3 &gt; 2)</SPAN>, although the value of the down blue card's up side is less than the value of the red one's down side <SPAN CLASS="MATH">(1 &lt; 4)</SPAN>.<P><SPAN CLASS="textit">Note: In the example above, <SPAN CLASS="textbf">Combo Rule</SPAN> is used, not <SPAN CLASS="textbf">Plus Rule</SPAN>. If <b>only</b> the right blue card is just turned over by <SPAN CLASS="textbf">Same Rule</SPAN> or <SPAN CLASS="textbf">Plus Rule</SPAN>, using <SPAN CLASS="textbf">Combo Rule</SPAN>, the red one will be turned over <SPAN CLASS="MATH">(3 &gt; 2)</SPAN>. <b>If only</b> the down blue card is just turned over by <SPAN CLASS="textbf">Same Rule</SPAN> or <SPAN CLASS="textbf">Plus Rule</SPAN>, using <SPAN CLASS="textbf">Combo Rule</SPAN>, the red one will not be turned over <SPAN CLASS="MATH">(1 &lt; 4)</SPAN>.</SPAN><P><DIV ALIGN="CENTER"><IMG WIDTH="146" HEIGHT="176" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="\epsfbox{p2033g.eps}"></DIV><P><P><BR><SPAN CLASS="textbf">Same Wall Rule</SPAN><P><P><BR><SPAN CLASS="textbf">Same Wall Rule</SPAN> uses Battle Area Wall (the frame) as one of card's 4 sides when using <SPAN CLASS="textbf">Same Rule</SPAN> . The value of the wall on any sides may be assumed to be 10. That is, the card that is adjacent to the frame may be turned over using <SPAN CLASS="textbf">Same Wall Rule</SPAN>.<P><DIV ALIGN="CENTER"><IMG WIDTH="201" HEIGHT="181" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="\epsfbox{p2033h.eps}"></DIV><P><P><BR><SPAN CLASS="textbf">Elemental Rule</SPAN><P><P><BR><SPAN CLASS="textbf">Elemental Rule</SPAN> will change the value of a card depending on the elemental property, as the figure shows. When a card and a slot match elemental properties, the value of the four sides will be increased by 1. If elements don't match, the value of the four sides of the card will be decreased 1 from the original value. <b>When a card has elemental property but the slot doesn't, the values don't change, but if the slot has elementary property while the card doesn't, it's considered a mismatch (i.e. values will be decreased by 1).</b><P>You are required to write a program to judge the outcome of the game according to the rules above, and tell us whether the game is a tie. If it isn't, please inform us the winner and the number of cards the players have.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are data groups of several card games in one input file. Each card game will begin with a line consists of 5 integers, which tell whether the rules above will be adopted respectively. Those integers should be either 1 or 0. If an integer is 1, the corresponding rule will be adopted. Otherwise, the rule will be disabled. Those 5 integers stand for, in order, basic rules, same rule, plus rule, combo rule, and same wall rule. The end of input is marked by the card game in which basic rules are disabled. And this card game should not be processed. If the game does not indicate the end of the input, there will be 3 following lines, which tell the elemental properties of the battle area. Each line contains 3 integers from 0 to 9. The <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> array of integers defines the locations of the battle area. Each location's elemental property is described by the corresponding integer. A value of 0 indicates that the corresponding location has no elemental property. While all of the 9 locations do not have elemental properties, elemental rule is disabled. Otherwise, elemental rule will be adopted. The following are 9 lines of integers, each of them tells the information of a card to be placed on the battle area by one of the players. A card in described by 9 integers. The first two integers are <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="$ \le$">3)</SPAN>, indicating the row and column of the location on which the card will be placed. The re mains are, in order, <SPAN CLASS="MATH"><I>u</I>, <I>l</I>, <I>d</I>, <I>r</I></SPAN>, and <SPAN CLASS="MATH"><I>e</I>(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="$ \le$"><I>u</I>, <I>l</I>, <I>d</I>, <I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="$ \le$">10, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="$ \le$"><I>e</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2033img1.png ALT="$ \le$">9)</SPAN>. The integers <SPAN CLASS="MATH"><I>u</I>, <I>l</I>, <I>d</I></SPAN> and <SPAN CLASS="MATH"><I>r</I></SPAN> represent the values of the up side, left side, down side and right side of the card, and the integer <SPAN CLASS="MATH"><I>e</I></SPAN> represents the elemental property of the card.<P><P><BR><SPAN CLASS="textbf">Assumptions:</SPAN><P><OL><LI><SPAN CLASS="textit">If the rules above are adopted, the priorities are, in order, from high to low, elemental rule, same rule, same wall rule, plus rule, combo rule, and basic rules.</SPAN> </LI><LI><SPAN CLASS="textit">If same rule and plus rule are disabled, combo rule will be useless, no matter whether it is adopted.</SPAN> </LI><LI><SPAN CLASS="textit">If same rule is disabled, same wall rule will be useless, no matter whether it is adopted.</SPAN> </LI><LI><SPAN CLASS="textit">You may assume the data groups in the input are always correct. That is, a card will not be placed on the location that has another card already, and there will not be any integers that violate the prescriptions.</SPAN> </LI><LI><SPAN CLASS="textit">The player who put the first card is regarded as player 1, and the other is regarded as player 2.</SPAN> </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each card game, show the outcome according to the rules above. The first line of the outcome contains 3 integers <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I></SPAN>, indicating the winner and the cards the players hold finally. The integer <SPAN CLASS="MATH"><I>a</I></SPAN> represents the number of the player 1's cards, and <SPAN CLASS="MATH"><I>b</I></SPAN> represent the number of the player 2's cards. If the player 1 wins the game, <SPAN CLASS="MATH"><I>c</I> = 1</SPAN>; if he loses, <SPAN CLASS="MATH"><I>c</I> = 2</SPAN>; and if it's a tie, <SPAN CLASS="MATH"><I>c</I> = 0</SPAN>. The following 3 lines contain 3 integers each, describing the results of the battle area. Those integers are from 1 to 2. If the location of the battle area has a card owned by player 1, print 1 at the corresponding location. If it has a card owned by player 2, print 2 accordingly.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1 1 1 0 
0 0 0 
3 0 0 
0 0 0 
1 1 1 2 3 4 1 
1 2 4 5 3 3 2 
2 1 3 4 5 3 3 
2 2 4 3 7 8 4 
3 3 1 2 3 4 5 
2 3 5 8 1 6 6 
1 3 2 1 1 3 7 
3 1 3 3 3 3 8 
3 2 8 3 2 1 9 
0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 6 2 
2 2 1 
2 1 2 
2 1 2
</PRE><P>
______________________________________________________
2034||||||false||||||
<P>John Smith, who is a member of Academy of Cold Manager (ACM), is in charge of a large-scale cold store. For him, it's a troublesome job. Whenever the temperature in the cold store is too hot or too cold for a long time, the goods will be damaged. And poor Mr. Smith will have to compensate for the loss of the store.<P>Therefore, Mr. Smith has installed an automatic temperature control system in the store. The system may control the temperature according to the input polynomial and the start time. At each moment, it tries to adjust the temperature equal to the value of the polynomial function. But Mr. Smith still feels worried. Since he could not know the effect beforehand how the system will regulate. At such a worrisome moment, it's lucky for him to call to remembrance that you, an excellent programmer, are willing to offer a program to help him. Making use of this program, he may simply input the polynomial and the parameters of the start time and the end time, and then he will be aware of the average temperature during this period. Now he is relieved from such a bothersome job.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file may contain several data sets. Each data set begins with a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(<I>n</I> &lt; 100)</SPAN>, which specifies the highest power of the polynomial. A value of 0 for the power indicates the end of input, and this data set should not be processed. In each data set, the following line contains <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> real numbers, which tell the coefficients of the polynomial. The sequence of those coefficients is arranged according to the power of items from high to low in the polynomial. If an item of the polynomial does not exist, the corresponding coefficient is 0. And then follows a line consists of 2 real numbers <SPAN CLASS="MATH"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>e</I>(<I>s</I> &lt; <I>e</I>)</SPAN>, indicating the start time and the end time.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, compute <SPAN CLASS="MATH"><I>t</I></SPAN>, the average temperature of the input polynomial from the start time to the end time. Print your answer as a single real number accurate to 3 decimal places on a line by itself. You should not print any more white spaces or blank lines in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1.0 0.0 0.0 
0.0 1.0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.333
</PRE><P>
______________________________________________________
2035||||||false||||||
<P>A monocycle is a cycle that runs on one wheel and the one we will be considering is a bit more special. It has a solid wheel colored with five different colors as shown in the figure:<P><DIV ALIGN="CENTER"><IMG WIDTH="589" HEIGHT="302" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2035img1.png ALT="\epsfbox{p2035a.eps}"></DIV><P>The colored segments make equal angles (72<SPAN CLASS="MATH"><SUP>o</SUP></SPAN>) at the center. A monocyclist rides this cycle on an <SPAN CLASS="MATH"><I>M</I> <TT>x</TT> <I>N</I></SPAN> grid of square tiles. The tiles have such size that moving forward from the center of one tile to that of the next one makes the wheel rotate exactly 72<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> around its own center. The effect is shown in the above figure. When the wheel is at the center of square 1, the mid-point of the periphery of its blue segment is in touch with the ground. But when the wheel moves forward to the center of the next square (square 2) the mid- point of its white segme nt touches the ground.<P><DIV ALIGN="CENTER"><IMG WIDTH="483" HEIGHT="230" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2035img1.png ALT="\epsfbox{p2035b.eps}"></DIV><P>Some of the squares of the grid are blocked and hence the cyclist cannot move to them. The cyclist starts from some square and tries to move to a target square in minimum amount of time. From any square either he moves forward to the next square or he remains in the same square but turns 90 left or right. Each of these actions requires exactly 1 second to execute. He always starts his ride facing north and with the mid- point of the green segment of his wheel touching the ground. In the target square, too, the green segment must be touching the ground but he does not care about the direction he will be facing.<P>Before he starts his ride, please help him find out whether the destination is reachable and if so the minimum amount of time he will require to reach it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2035img1.png ALT="$ \le$"><I>M</I>, <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2035img1.png ALT="$ \le$">25)</SPAN> giving the dimensions of the grid. Then follows the description of the grid in <SPAN CLASS="MATH"><I>M</I></SPAN> lines of <SPAN CLASS="MATH"><I>N</I></SPAN> characters each. The character `<TT>#</TT>' will indicate a blocked square, all other squares are free. The starting location of the cyclist is marked by `<TT>S</TT>' and the target is marked by `<TT>T</TT>'.<P>The input terminates with two zeros for <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input first print the test case number on a separate line as shown in the sample output. If the target location can be reached by the cyclist print the minimum amount of time (in seconds) required to reach it exactly in the format shown in the sample output, otherwise, print ``<TT>destination not reachable</TT>".<P>Print a blank line between two successive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 3 
S#T 
10 10 
#S.......# 
#..#.##.## 
#.##.##.## 
.#....##.# 
##.##..#.# 
#..#.##... 
#......##. 
..##.##... 
#.###...#. 
#.....###T 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1 
destination not reachable 
 
Case #2 
minimum time = 49 sec
</PRE><P>
______________________________________________________
2036||||||false||||||
<P>My little sister had a beautiful necklace made of colorful beads. Two successive beads in the necklace shared a common color at their meeting point. The figure below shows a segment of the necklace:<P><DIV ALIGN="CENTER"><IMG WIDTH="548" HEIGHT="71" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2036img1.png ALT="\epsfbox{p2036.eps}"></DIV><P>But, alas! One day, the necklace was torn and the beads were all scattered over the floor. My sister did her best to recolle ct all the beads from the floor, but she is not sure whether she was able to collect all of them. Now, she has come to me for help. She wants to know whether it is possible to make a necklace using all the beads she has in the same way her original necklace was made and if so in which order the bids must be put.<P>Please help me write a program to solve the problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The first line of the input contains the integer <SPAN CLASS="MATH"><I>T</I></SPAN>.<P>The first line of each test case contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(5<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2036img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2036img1.png ALT="$ \le$">1000)</SPAN> giving the number of beads my sister was able to collect. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains two integers describing the colors of a bead. Colors are represented by integers ranging from 1 to 50.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input first output the test case number as shown in the sample output. Then if you apprehend that some beads may be lost just print the sentence ``<TT>some beads may be lost</TT>" on a line by itself. Otherwise, print <SPAN CLASS="MATH"><I>N</I></SPAN> lines with a single bead description on each line. Each bead description consists of two integers giving the colors of its two ends. For <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2036img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2036img1.png ALT="$ \le$"><I>N</I> - 1</SPAN>, the second integer on line <SPAN CLASS="MATH"><I>i</I></SPAN> must be the same as the first integer on line <SPAN CLASS="MATH"><I>i</I> + 1</SPAN>. Additionally, the second integer on line <SPAN CLASS="MATH"><I>N</I></SPAN> must be equal to the first integer on line 1. Since there are many solutions, any one of them is acceptable.<P>Print a blank line between two successive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
5 
1 2 
2 3 
3 4 
4 5 
5 6 
5 
2 1 
2 2 
3 4 
3 1 
2 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1 
some beads may be lost 
 
Case #2 
2 1 
1 3 
3 4 
4 2 
2 2
</PRE><P>
______________________________________________________
2037||||||false||||||
<P>A digital river is a sequence of numbers where the number following <SPAN CLASS="MATH"><I>n</I></SPAN> is <SPAN CLASS="MATH"><I>n</I></SPAN> plus the sum of its digits. For example, 12345 is followed by 12360, since <SPAN CLASS="MATH">1 + 2 + 3 + 4 + 5 = 15</SPAN>. If the first number of a digital river is <SPAN CLASS="MATH"><I>k</I></SPAN> we will call it river <SPAN CLASS="MATH"><I>k</I></SPAN>.<P>For example, river 480 is the sequence beginning <SPAN CLASS="MATH">{480, 492, 507, 519,...}</SPAN> and river 483 is the sequence beginning <SPAN CLASS="MATH">{483, 498, 519,...}</SPAN>.<P>Normal streams and rivers can meet, and the same is true for digital rivers. This happens when two digital rivers share some of the same values. For example: river 480 meets river 483 at 519, meets river 507 at 507, and never meets river 481.<P>Every digital river will eventually meet river 1, river 3 or river 9. Write a program that can determine for a given integer <SPAN CLASS="MATH"><I>n</I></SPAN> the value where river <SPAN CLASS="MATH"><I>n</I></SPAN> first meets one of these three rivers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases. Each test case occupies a separate line and contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2037img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2037img1.png ALT="$ \le$">16384)</SPAN>. A test case wit <SPAN CLASS="MATH"><I>h</I></SPAN> value of 0 for <SPAN CLASS="MATH"><I>n</I></SPAN> terminates the input and this test case must not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input first output the test case number (starting from 1) as shown in the sample output. Then on a separate line output the line ``<TT>first meets river <SPAN CLASS="MATH"><I>x</I></SPAN> at <SPAN CLASS="MATH"><I>y</I></SPAN></TT>". Here <SPAN CLASS="MATH"><I>y</I></SPAN> is the lowest value where river <SPAN CLASS="MATH"><I>n</I></SPAN> first meets river <SPAN CLASS="MATH"><I>x</I></SPAN> (<SPAN CLASS="MATH"><I>x</I> = 1</SPAN> or 3 or 9). If river <SPAN CLASS="MATH"><I>n</I></SPAN> meets river <SPAN CLASS="MATH"><I>x</I></SPAN> at <SPAN CLASS="MATH"><I>y</I></SPAN> for more than one value of <SPAN CLASS="MATH"><I>x</I></SPAN>, output the lowest value.<P>Print a blank line between two consecutive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
86 
12345 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1 
first meets river 1 at 101 

Case #2 
first meets river 3 at 12423

______________________________________________________
2038||||||false||||||
<P>
Bob enjoys playing computer games, especially strategic games, but sometimes he cannot find the solution fast
enough and then he is very sad. Now he has the following problem. He must defend a medieval city, the roads of
which form a tree. He has to put the minimum number of soldiers on the nodes so that they can observe all the
edges. Can you help him?

<p>
Your program should find the minimum number of soldiers that Bob has to put for a given tree.

<p>
For example for the tree:
<p align=center><img src=p2038a.gif>
<p>
the solution is one soldier (at the node 1). 
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several data sets in text format. Each data set represents a tree with the following description:
<blockquote>
	<li>the number of nodes
	<li>the description of each node in the following format:<br>
<blockquote>
<i>	node_identifier:(number_of_roads) node_identifier1 node_identifier2  node_identifiernumber_of_roads</i><br>
	or<br>
<i>	node_identifier:(0)</i>
</blockquote>
</blockquote>
	The node identifiers are integer numbers between <i>0</i> and <i>n-1</i>, for <i>n</i> nodes (<i>0 < n &le; 1500</i>). Every edge appears only once in the input data.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output should be printed on the standard output. For each given input data set, print one integer number
in a single line that gives the result (the minimum number of soldiers).

<P>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
0:(1) 1
1:(2) 2 3
2:(0)
3:(0)
5
3:(3) 1 4 2
1:(1) 0
2:(0)
0:(0)
4:(0)
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1
2
</PRE>

<P>

______________________________________________________
2039||||||false||||||
<P>A company pays different hourly wages for different job types. Each week the company keeps evidence of the total number of work hours for every job type and the total amount paid to all employees for that week. In different weeks different job types can be accomplished. The hourly wage for any job type in the same company remains unchanged. The hourly wage for any job type is a positive integer and the ratio between the maximum wage and the minimum wage is less than 6.<p>You are asked to write a program that computes the hourly wage for every job type using the data collected a period of time (one or several weeks). The number of job types is limited to 200 and the number of weeks in one data set is limited to 50.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file contains several data sets in text format. The format for the data set is:<blockquote><li><i>The number of lines for the data set;</i><br><li><i>information_for__one_or_more_weeks</i></blockquote>The format of the information for a week is the following:<blockquote><li><i>job_type1&nbsp;&nbsp;&nbsp;number_of _hours1</i> <li><i>job_type2&nbsp;&nbsp;&nbsp;number_of _hours2</i> <li><i>job_type3&nbsp;&nbsp;&nbsp;number_of _hours3</i> <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;... <li><i>.&nbsp;&nbsp;&nbsp;&nbsp;total_paid ( the dot marks the ending of info for a week)</i></blockquote>The job type is represented as a string of characters (limited to 20). The number of hours is a positive integer (smaller than 1E5). The total paid is a positive integer (smaller than 2E10).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The program should write to standard output (for every job type involved in the data set) a line containing the job type and the hourly wage. The output for a data set ends with a line containing a dot.<p>If the program cannot compute a unique hourly wage for every job type it will print "<i>Incomplete data</i>" and if it cannot compute an integer hourly wage it will print "<i>Inconsistent data</i>"<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5
job1   6
job2   5
job8   4
job10  3
.      100
13
job3   1
job2   2
.      40
job1   3
job2   1
.      100
job1   1
job3   2
job2   3
.      100
job1   1
job2   5
.      80
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Incomplete data
.
job3 20
job2 10
job1 30
.
</PRE><P>
______________________________________________________
2040||||||false||||||
<P>Write a program that, given a natural number N between 0 and 4999 (inclusively), and M distinct decimal digits X<sub>1</sub>,X<sub>2</sub>...X<sub>M</sub> (at least one), finds the smallest strictly positive multiple of N that has no other digits besides X<sub>1</sub>,X<sub>2</sub>...X<sub>M</sub> (if such a multiple exists).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file has several data sets separated by an empty line, each data set having the following format:<blockquote><li>On the first line - the number <i>N</i> <li>On the second line - the number <i>M</i> <li>On the following M lines - the digits <i>X<sub>1</sub>,X<sub>2</sub>...X<sub>M</sub></i>.</blockquote><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each data set, the program should write to standard output on a single line the multiple, if such a multiple exists, and 0 otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
22
3
7
0
1

2
1
1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
110
0
</PRE><P>
______________________________________________________
2041||||||false||||||
<P>
In the second year of the university somebody started a study on the romantic relations between the students.
The relation romantically involved is defined between one girl and one boy. For the study reasons it is
necessary to find out the maximum set satisfying the condition: there are no two students in the set who
have been romantically involved. The result of the program is the number of students in such a set.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several data sets in text format. Each data set represents one set of subjects of
the study, with the following description:

<blockquote>
	<li>the number of students
	<li>the description of each student, in the following format
<blockquote>
	<i>student_identifier:(number_of_romantic_relations) student_identifier1 student_identifier2 student_identifier3...</i><br>
	or<br>
	<i>student_identifier:(0)</i>
</blockquote>


</blockquote>
The student_identifier is an integer number between 0 and n-1, for n subjects.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each given data set, the program should write to standard output a line containing the result.
<P>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
7
0: (3) 4 5 6
1: (2) 4 6
2: (0)
3: (0)
4: (2) 0 1
5: (1) 0
6: (2) 0 1
3
0: (2) 1 2
1: (1) 0
2: (1) 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
5
2
</PRE>

<P>

______________________________________________________
2042||||||false||||||
<P>
Write a program that performs symbolic derivation <i>f(x) = df(x)/dx</i> of a given function <i>f(x)</i>. The function <i>f(x)</i>
is defined by an expression which may contain the following operations: + (addition), - (subtraction), *
(multiplication), / (division), and ln (natural logarithm). Besides, the operands may be the variable x and
numerical constants. The expression may contain arbitrarily nested sub-expressions in parentheses ( ).

<p>
The expression is given in a usual, infix form, such as:

<p align=center>
(2*ln(x+1.7)-x*x)/((-7)+3.2*x*x)+(x+3*x)*x

<p>
Numerical constants have the form d.d, with an optional sign (+ or -), where the number of digits both in integer
and decimal parts are arbitrary. The input expression is guaranteed to be correct (no syntax error can occur).

<p>
The output expression should be written in infix form. It should not be optimized for human reading. This means,
it can contain redundancies, such as 0*x, 1*x, 0+x, etc. The derivation should be performed using the following
rules:

<blockquote>
	<li>The operators * and / are of higher priority than the operators + and -. Parentheses may change
	the priorities as usually.
	<li>The operators +, -, *, and / are left-associative, meaning that they group from left to right:<br>
<pre>		a*b*c = (a*b)*c, a/b/c = (a/b)/c, a/b*c = (a/b)*c, etc.</pre>
	<li>The rules for derivation are:
	<pre>
		(a + b)' = a' + b'
		(a - b)' = a' - b'
		(a * b)' = (a' * b + a * b')
		(a / b)' = (a' * b - a * b') / b^2
			(Note: use b^2 and not (b*b) for presentation)
		ln(a)' = (a')/(a)
		x' = 1
		const' = 0
	</pre>
	<li>While producing the symbolic derivation, use parentheses for output strictly as stated in the
	previous rule. Do not perform presentation optimizations, such as 0*a = 0, 1*a = a, etc.
</blockquote>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input is a textual file which has one <i>f(x)</i> definition per line. The input lines do not have blanks.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output should contain lines with corresponding symbolic derivations <i>f=df/dx</i>, one line for each <i>f</i>.
The strings representing <i>f(x)</i> and <i>f (x)</i> are guaranteed to have no more than 100 characters. 
<P>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
x*x/x
-45.78*x+x
-2.45*x*x+ln(x-3)
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
((1*x+x*1)*x-x*x*1)/x^2
(0*x-45.78*1)+1
((0*x-2.45*1)*x-2.45*x*1)+(1-0)/(x-3)
</PRE>

<P>

______________________________________________________
2043||||||false||||||
<P>A specialist in VLSI design testing must decide if there are some components that cover each other for a given design. A component is represented as a rectangle. Assume that each rectangle is rectilinearly oriented (sides parallel to the x and y axis), so that the representation of a rectangle consists of its minimum and maximum x and y coordinates.<p>Write a program that counts the rectangles that are entirely covered by another rectangle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file contains the text description of several sets of rectangles. The specification of a set consists of the number of rectangles in the set and the list of rectangles given by the minimum and maximum x and y coordinates separated by white spaces, in the format:<blockquote>nr_rectangles<br>xmin<sub>1</sub> xmax<sub>1</sub> ymin<sub>1</sub> ymax<sub>1</sub><br>xmin<sub>2</sub> xmax<sub>2</sub> ymin<sub>2</sub> ymax<sub>2</sub><br>...<br>xmin<sub>n</sub> xmax<sub>n</sub> ymin<sub>n</sub> ymax<sub>n</sub><br></blockquote><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output should be printed on the standard output. For each given input data set, print one integer number in a single line that gives the result (the number of rectangles that are covered).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
100 101 100 101
0 3 0 101
20 40 10 400
4
10 20 10 20
10 20 10 20
10 20 10 20
10 20 10 20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0
4
</PRE><P>
______________________________________________________
2044||||||false||||||
<P>
Consider a group of N students and P courses. Each student visits zero, one or more than one courses. Your task
is to determine whether it is possible to form a committee of exactly P students that satisfies simultaneously
the conditions:
<blockquote>
	<li>every student in the committee represents a different course (a student can represent a course if he/she visits that course)
	<li>each course has a representative in the committee
</blockquote>
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input file contains the number of the data sets. Each data set is presented in the
following format:
<blockquote><pre>
P   N
Count<sub>1</sub>   Student<sub>1 1</sub>   Student<sub>1 2</sub>      Student<sub>1 Count<sub>1</sub></sub>
Count<sub>2</sub>   Student<sub>2 1</sub>   Student<sub>2 2</sub>      Student<sub>2 Count<sub>2</sub></sub>
..
Count<sub>P</sub>   Student<sub>P 1</sub>   Student<sub>P 2</sub>      Student<sub>P Count<sub>P</sub></sub>
</pre></blockquote>

<p>
The first line in each data set contains two positive integers separated by one blank: <i>P (1&le;P&le;100)</i> - the
number of courses and <i>N (1&le;N&le;300)</i> - the number of students. The next P lines describe in sequence of the
courses  from course 1 to course P, each line describing a course. The description of course i is a line that
starts with an integer <i>Count<sub>i</sub> (0&le;Count<sub>i</sub>&le;N)</i> representing the number of students
visiting course i. Next, after a blank, youll find the Count i students, visiting the course, each two consecutive
separated by one blank. Students are numbered with the positive integers from 1 to N.
There are no blank lines between consecutive sets of data. Input data are correct.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input data set the program prints on a single line <i>YES</i> if it is possible to form a committee
and <i>NO</i> otherwise. There should not be any leading blanks at the start of the line.
<P>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
3 3
3 1 2 3
2 1 2
1 1
3 3
2 1 3
2 1 3
1 1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
YES
NO
</PRE>

<P>

______________________________________________________
2045||||||false||||||
<P>
Write a program that takes as input a rooted tree and a list of pairs of vertices. For each pair
(u,v) the program determines the closest common ancestor of u and v in the tree. The closest common
ancestor of two nodes u and v is the node w that is an ancestor of both u and v and has the greatest
depth in the tree. A node can be its own ancestor (for example in Figure 1 the ancestors of node 2 are 2 and 5).

<p align=center><img src=p2045a.gif>
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The data set, which is read from a text file, starts with the tree description, in the form:
	
<blockquote>
	nr_of_vertices
	vertex:(nr_of_successors) successor<sub>1</sub> successor<sub>2</sub> ... successor<sub>n</sub>
		
</blockquote>

where vertices are represented as integers from 1 to n. The tree description is followed by a list of pairs of
vertices, in the form:
<blockquote>
	nr_of_pairs
	(u v)	(x y)	
</blockquote>

The input file contents several data sets (at least one). Note that white-spaces (tabs, spaces and line breaks)
can be used freely in the input.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each common ancestor the program prints the ancestor and the number of pair for which it is
an ancestor. The results are printed on the standard output on separate lines, in to the ascending
order of the vertices, in the format:
<blockquote>
	ancestor:times
</blockquote>
<P>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
  5:(3) 1 4 2
  1:(0)
  4:(0)
  2:(1) 3
  3:(0)
6
(1 5) (1 4) (4 2)
      (2 3)
(1 3) (4 3)
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
2:1
5:5
</PRE>

<P>

______________________________________________________
2046||||||false||||||
<P>Modulo arithmetic is an interesting topic as there are dierent ways of computing the results eectively. Consider the multiple exponentiation problem, which computes the following modulo arithmetic:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>y</I> = <I>a</I><SUP>p<SUP>p<SUP>.<SUP>.<SUP>.<SUP>p</SUP></SUP></SUP></SUP></SUP></SUP> mod <I>n</I></DIV><P></P>where there are <SPAN CLASS="MATH"><I>m</I></SPAN> exponentiations. The numbers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>p</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> are all positive integers greater than 1 and less than 65535. Furthermore, <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>p</I></SPAN> are prime numbers such that <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2046img1.png ALT="$ \le$">2<I>a</I></SPAN> and <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2046img1.png ALT="$ \le$">2<I>p</I></SPAN>. This ensures the existence of useful discrete logarithms.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should be structured as a loop to read in lines of 4 numbers, in the order of <SPAN CLASS="MATH"><I>a</I>, <I>p</I>, <I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN>, from the standard input.<P>In your program, no error checking is required for input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Write a program to compute the value of <SPAN CLASS="MATH"><I>y</I></SPAN>.<P>Print out the results to standard output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3315
3325
3335
47 47 167
47 47 267
47 47 367
32719 54323 99 65399
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
2
2
6
19
54
46184
</PRE><P>
______________________________________________________
2047||||||false||||||
<P>Complex numbers can be useful in manycontext. Here wewould like to perform complex arithmetic and evaluate an expression containing complex numbers. Each simple complex number is of the form <SPAN CLASS="MATH"><I>a</I> + <I>bi</I></SPAN> or <SPAN CLASS="MATH"><I>a</I> - <I>bi</I></SPAN>, or simply <SPAN CLASS="MATH"><I>bi</I></SPAN>, where <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are positive integers. Thus <SPAN CLASS="MATH">- <I>a</I> + <I>bi</I></SPAN> and <SPAN CLASS="MATH">- <I>a</I> - <I>bi</I></SPAN> are illegal forms. There are five operators in complex expressions: ``+", ``-", ``*", ``/" and ``%", where ``%" is a unary postfix operator meaning conjugate. In other words, <SPAN CLASS="MATH">(<I>a</I> + <I>bi</I>)% = <I>a</I> - <I>bi</I></SPAN> and <SPAN CLASS="MATH">(<I>a</I> - <I>bi</I>)% = <I>a</I> + <I>b</I></SPAN>i. There is no unary minus operator.<P>In this problem, the precedence rules of the operators are <SPAN CLASS="textit">slightly different</SPAN> from those in common sense. In particular, the conjugate operator ``%" will take the highest precedence. Both ``+" and ``-" will take the next precedence. Finally, ``*" and ``/" will take the lowest precedence. Operators with the same precedence are evaluated in a left-to-right order. In other words, subexpressions within brackets will be evaluated first. The conjugate will be evaluated before ``+" and ``-", which again will be evaluated before ``*" and ``/". Each expression will be terminated by the ``=" operator that will force the expression to be evaluated.<P>Operands to the expressions can be either a positive number or a simple complex number, but not ``complicated" complex numbers. It is possible that during evaluation of division, complex numbers that are not simple may be resulted. In this application, you are required to express ``complicated" complex numbers in the form of <SPAN CLASS="MATH">[<I>a</I> + <I>bi</I>]/<I>r</I></SPAN> or <SPAN CLASS="MATH">[<I>a</I> - <I>bi</I>]/<I>r</I></SPAN>, where <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are non-negative integers and <SPAN CLASS="MATH"><I>r</I></SPAN> is a non-zero integer (may be negative). Note that <SPAN CLASS="MATH">(<I>a</I> + <I>bi</I>)/(<I>c</I> + <I>di</I>) = [(<I>ac</I> + <I>bd</I> )+ (<I>bc</I> - <I>ad</I> )<I>i</I>]/(<I>c</I><SUP>2</SUP> + <I>d</I><SUP>2</SUP>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Write a program to read in a sequence of lines from the standard input file containing one or more expressions, each ended with `<TT>=</TT>'.<P>In your program, no error checking is required for input. For simplicity, each line can be assumed to contain at most 80 characters and that during all intermediate steps, the numerator and denominator will not fall beyond the range of a largest signed integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each expression, evaluate and print the result in the form of a ``complicated" complex number, <SPAN CLASS="MATH">[<I>a</I> + <I>bi</I>]/<I>r</I></SPAN> or <SPAN CLASS="MATH">[<I>a</I> - <I>bi</I>]/<I>r</I></SPAN>.<P>The result is to be printed to the standard output.<P>Sample inputs and outputs of the program are as follows:<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3+2i * 4 + i=
2+i*2-i =
(2 + 3 i) /(7+i)% =
(5+3i)/(1+3i)% =
(1+i)%/3+ i *2-i+3 =
((1+i)%/3+i*2-i+3)+(3i+1*(2i*2-i%/3)) =
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
[10+11i]/1
[5+0i]/1
[11+23i]/50
[2-9i]/-5
[3-11i]/5
[61+43i]/-15
</PRE><P>
______________________________________________________
2048||||||false||||||
<P>
Johnny is the manager of a moving company. As business is improving by the days and
Johnny would like to optimize the operations and profits of the company, he decides to
automate manpower planning and scheduling. The main factors to consider in such a
planning exercise include what major furniture items are to be moved and the manpower
requirement(suchasnumber of movers) to moveeach of such items. Johnny's customers
are usually corporate clients who are demanding and always liketohave the moving job
completed within a certain amount of time. Johnny comes to you for help for such a
planning and scheduling system.

<P>
Write a program to read in a sequence of job descriptions from a standard input file.
Each job description consists of:

<P>

<UL>
<LI>the maximum time allowed for moving all items,
</LI>
<LI>the number of major furniture items, followed by
</LI>
<LI>a list of records, one for each of the major furniture items to move and each on a separate line.
</LI>
</UL>

<P>
Each record contains three fields:

<P>

<UL>
<LI>the name(atmost30characters long) of the item,
</LI>
<LI>how long it takes to move the item, and
</LI>
<LI>the number of movers required for moving the item.
</LI>
</UL>

<P>
Time is specified in minutes.

<P>

<P>
<BR>
Each job description should generate the following output:

<P>

<UL>
<LI>A line printing ``<TT>Job description:</TT>".
</LI>
<LI>The job description:

<UL>
<LI>One line is output for each major furniture item, its time requirement, and
manpower requirement, separated by commas. Each line is enclosed by a pair
of square brackets.
</LI>
<LI>The sequence of furniture items should be ordered in exactly the same way
that they are read in.
</LI>
</UL>
</LI>
<LI>A line with ``<TT>Number of movers required: </TT>" followed by the minimum number of
movers required to satisfy all the timing and manpower requirement constraints.
</LI>
<LI>All possible schedules for moving each of the major furniture items, specifying the
start times for each item.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each schedule consists of a sequence of start times on one line. The times should
be enclosed in square brackets and separated by commas. Each start time is for each
furniture item. The start times should be printed in the exact order that the items are
read in. The time should be in the number of minutes since the start of the moving job
(at time 0).

<P>
Note that the many possible schedules of a job must be ordered ascendingly according
to the lexicographical ordering defined as follows. We consider a schedule for <SPAN CLASS="MATH"><I>n</I></SPAN> items to
be a string of <SPAN CLASS="MATH"><I>n</I></SPAN> integers

<P>
<P><!-- MATH
 \begin{displaymath}
t_{1}, t_{2}, \dots, t_{n}.
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>,..., <I>t</I><SUB>n</SUB>.
</DIV><P></P>

<P>
A string <!-- MATH
 $t_{1}, \ldots, t_{n}$
 -->
<SPAN CLASS="MATH"><I>t</I><SUB>1</SUB>,..., <I>t</I><SUB>n</SUB></SPAN> is <SPAN  CLASS="textit">less than</SPAN> another string <!-- MATH
 $s_{1}, \ldots, s_{n}$
 -->
<SPAN CLASS="MATH"><I>s</I><SUB>1</SUB>,..., <I>s</I><SUB>n</SUB></SPAN> if there exists <!-- MATH
 $1 \le k \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2048img1.png
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2048img1.png
 ALT="$ \le$"><I>n</I></SPAN> such that

<P>

<UL>
<LI><!-- MATH
 $t_{i} = s_{i}$
 -->
<SPAN CLASS="MATH"><I>t</I><SUB>i</SUB> = <I>s</I><SUB>i</SUB></SPAN> for all <SPAN CLASS="MATH"><I>i</I> &lt; <I>k</I></SPAN>, and
</LI>
<LI><!-- MATH
 $t_{k} < s_{k}$
 -->
<SPAN CLASS="MATH"><I>t</I><SUB>k</SUB> &lt; <I>s</I><SUB>k</SUB></SPAN>
</LI>
</UL>

<P>
The sample input specifies two jobs. The first job must be completed within
an hour and consists of four major furniture pieces. The first piece is a piano requiring
thirty minutes and three movers to move. The other items can be interpreted similarly.
The second specification begins immediately after the first specification. The second job
is very similar to the first job except for a slight difference in manpower requirement for
the table.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output for different jobs should be separated by a blank line. The job output should
also be ordered in exactly the same way that they are specified in the input file. The
output should be printed to the standard output file.

<P>
You can safely assume that all items can be moved at the same time if enough manpower 
is assigned. You also need to consider only jobs with at most ten furniture items.
Each job spans across at most one hour. Each furniture item requires at least one mover.

<P>
The output format up to the schedules for each job is pretty straight forward. For
space reason, we cannot give you all the possible schedules, but they must respect the
same lexicographical ordering defined above. For example, in the first schedule of the first
job, it means that the piano should be handled at the beginning of the move, the chair
and the table both after 30 minutes, and the bed after 45 minutes. The first schedule of
the first job is lexicographically less than the second schedule of the same job since

<P>

<UL>
<LI>they are equal in the first start time, and
</LI>
<LI>the second start time (30) of the first schedule is less than that (31) of the second
schedule.
</LI>
</UL>

<P>
This lexicographical ordering is maintained for all schedules of both the first and
second jobs. Note that a blank line is printed between the output of the first job and
that of the second job.

<P>
You can safely assume that there are at least one item to move in each moving job,
and that all job specifications are doable when given enough manpower resources. Your
program should also run with reasonable eficiency. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
60
4
piano 30 3
chair 10 1
bed 15 3
table 15 2
60
4
piano 30 3
chair 10 1
bed 15 3 
table 15 3
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Job description:
[piano,30,3]
[chair,10,1]
[bed,15,3]
[table,15,2]
Number of movers required: 3
[0,30,45,30]
[0,31,45,30]
...
Job description:
[piano,30,3]
[chair,10,1]
[bed,15,3]
[table,15,3]
Number of movers required: 4
[0,0,30,45]
[0,0,45,30]
[0,1,30,45]
...
[30,49,15,0]
[30,50,0,15]
[30,50,15,0]
</PRE> 

<P>

______________________________________________________
2049||||||false||||||
<P>In order to guarantee the effectiveness of a communication network, we will monitor each communication line to make sure it works properly. We will use a device, called <SPAN CLASS="textit">Network Watcher</SPAN>, for this purpose. Once a Network Watcher is installed on a site, it can monitor all communication lines connected to the site. To be cost effective, we wish to use the smallest number of Network Watchers to monitor all communication lines in a communication network. As you may have guessed, it is extremely dificult to determine such a number for a network.<P>Fortunately, the problem you are facing seems easier: there are only <SPAN CLASS="MATH"><I>K</I></SPAN> Network Watchers available. Therefore if a network requires more than <SPAN CLASS="MATH"><I>K</I></SPAN> Network Watchers, we have to use other means to monitor the communication lines. Your task is to determine if a given network requires at most <SPAN CLASS="MATH"><I>K</I></SPAN> Network Watchers to monitor all communication lines; if so, find at most <SPAN CLASS="MATH"><I>K</I></SPAN> sites to install Network Watchers to monitor all communication lines in the network. Call this the <SPAN CLASS="MATH"><I>K</I></SPAN> Network Watcher problem. The really good news for you is that due to budget constraints, <SPAN CLASS="MATH"><I>K</I></SPAN> is at most 10. Furthermore, the number <SPAN CLASS="MATH"><I>N</I></SPAN> of sites in a network is at most 100.<P>Write a program to solve the <SPAN CLASS="MATH"><I>K</I></SPAN> Network Watcher problem. You program should be eficient enough to solve the problem instances in time<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should read the input from the standard input. The first line of the input is the number of networks in the input. Assume that each site is represented by a unique number between 1 and <SPAN CLASS="MATH"><I>N</I></SPAN>. The input for each network consists of numbers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN>, and a description of the network. The first line of input contains numbers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN> separated by exactly one blank space. It is followed by at most <SPAN CLASS="MATH"><I>N</I></SPAN> lines that specify a network, and number `<TT>-1</TT>' in a separate line. For site with site index <SPAN CLASS="MATH"><I>i</I></SPAN> (or simply site <SPAN CLASS="MATH"><I>i</I></SPAN>), there is an input line consisting of the site followed by the list of sites with larger site indices that are connected to site <SPAN CLASS="MATH"><I>i</I></SPAN>, with a blank space separating every two sites. For example, the following line<P><PRE>
1 4 2 3 6 7
</PRE>means that site 1 is connected to sites 2 3 4 6 and 7. If site <SPAN CLASS="MATH"><I>i</I></SPAN> is not connected to any sites with larger site indices, there is no input line for site <SPAN CLASS="MATH"><I>i</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your output should be printed to the standard output. The output for each problem is a list of sites, each separated by one blank space, and should be on a separate line. The list of sites should be ordered in increasing site indices. If <SPAN CLASS="MATH"><I>K</I></SPAN> Network Watchers are not enough for an input network, you just output ``<TT>Impossible</TT>".<P>You should note that the solution to a <SPAN CLASS="MATH"><I>K</I></SPAN> Network Watcher problem is not unique. However, you are required to give only one answer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

8 3
1 4 2 3 6 7 
2 3 4 5 6
3 5 7 6 8
-1

6 3 
1 4 5 2 
2 6 3
3 4 6 
4 5
5 6
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 3
</PRE><P>
______________________________________________________
2050||||||false||||||
<P>Consider an <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <SPAN CLASS="MATH">(17<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2050img1.png ALT="$ \ge$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2050img1.png ALT="$ \ge$">2)</SPAN> board of unit squares with the upper-right corner square missing. Figure 1 shows some of the possible boards for <SPAN CLASS="MATH"><I>n</I> =</SPAN> 2, 3, and 4. The missing squares are shaded.<P>You are required to tile a board using triominoes (Figure 2). In this tiling two triominoes may not overlap and they must cover all the <SPAN CLASS="MATH">(<I>n</I><SUP>2</SUP> - 1)</SPAN> squares.<P><DIV ALIGN="CENTER"><IMG WIDTH="320" HEIGHT="115" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2050img1.png ALT="\epsfbox{p2050a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: Boards</DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="301" HEIGHT="56" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2050img1.png ALT="\epsfbox{p2050b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2: Triominoes with dierent orientations</DIV><P>Write a program that shows how a board could be tiled by triominoes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should read a satndard input file that contains a few lines. Each line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>. If an <SPAN CLASS="MATH"><I>n</I></SPAN> by <SPAN CLASS="MATH"><I>n</I></SPAN> board with a missing corner square can be tiled, your program should output the tiling by marking every square with a tile number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Specifically, for each input number <SPAN CLASS="MATH"><I>n</I></SPAN>, your program should output <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each line with <SPAN CLASS="MATH"><I>n</I></SPAN> integers separated by a space (except for the first line, which has <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> integers). The <SPAN CLASS="MATH"><I>i</I></SPAN>-th number of the <SPAN CLASS="MATH"><I>j</I></SPAN>-th line represents the number of the tile that covers the square in the board that is <SPAN CLASS="MATH"><I>i</I></SPAN> units from the left and <SPAN CLASS="MATH"><I>j</I></SPAN> units from the top. Format your output so that eachinteger occupies exactly two character spaces.<P>If the board cannot be tiled, your program should output ``<TT>No solution</TT>". Write your output to the standard output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
4
5
10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
No solution

2  2  5
2  3  5  5
1  3  3  4
1  1  4  4

3  3  6  6
3  5  5  6  8
2  2  5  8  8
2  1  4  4  7
1  1  4  7  7

17 17 19 19 21 21 29 29 33
17 18 19 20 21 22 29 32 33 33
18 18 20 20 22 22 30 32 32 31
 1  1  3  3  6  6 30 30 31 31
 1  2  3  5  5  6  7 28 28 27
 2  2  4  4  5  7  7 28 27 27
16 16 12  4  8  8  9 26 26 25
16 13 12 12  8  9  9 26 25 25
15 13 13 14 10 10 11 24 24 23
15 15 14 14 10 11 11 24 23 23
</PRE><P>
______________________________________________________
2051||||||false||||||
<P>Consider an <SPAN CLASS="MATH"><I>n</I></SPAN> by <SPAN CLASS="MATH"><I>n</I></SPAN> board of <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN> squares. Each square has a pair of co-ordinates <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2051img1.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2051img1.png ALT="$ \le$"><I>n</I></SPAN>. Each square has two states: either ``On" or ``Off". Initially, all squares are in the ``Off" state.<P>For a square <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN>, its <SPAN CLASS="textit">neighbors</SPAN> are the squares: <SPAN CLASS="MATH">{(<I>i'</I>, <I>j'</I>)| 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2051img1.png ALT="$ \le$"><I>i'</I>, <I>j'</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2051img1.png ALT="$ \le$"><I>n</I>;| <I>i'</I> - <I>i</I>|,| <I>j'</I> - <I>j</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2051img1.png ALT="$ \le$">1}</SPAN>. For example, if <SPAN CLASS="MATH"><I>n</I> = 4</SPAN>, the neighbors of (4,2) are (4,1),(4,2),(3,2),(4,3). Note that <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> is a neighbor of itself. Define the operation <SPAN CLASS="MATH"><I>toggle</I>(<I>i</I>, <I>j</I>)</SPAN> that toggles the states of square <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN>'s neighbors. That is, if a square's original state is ``On", it will be switched to ``Off" and vice versa.<P>Write a program that, given an <SPAN CLASS="MATH"><I>n</I></SPAN> by <SPAN CLASS="MATH"><I>n</I></SPAN> board of all `Off" squares, computes a <SPAN CLASS="textit">shortest</SPAN> sequence of <SPAN CLASS="textit">toggle</SPAN> operations that turns all the squares ``On". If no sequences can turn all the squares ``On", output ``<TT>No solution</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Specifically, your program should read astandard input file that contains a few lines. Each line contains a number <SPAN CLASS="MATH"><I>n</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program should output a standard file, which contains <SPAN CLASS="MATH"><I>n</I></SPAN> sequences (or the string ``<TT>No solution</TT>"), separated by blank lines. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th sequence gives a solution to the toggling problem of the board specified by the <SPAN CLASS="MATH"><I>i</I></SPAN>-th input number <SPAN CLASS="MATH"><I>n</I></SPAN>. Each sequence is a sequence of square co-ordinates of the form <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN>. (Note that <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are separated by a lone comma, not any spaces.) The co-ordinates of squares are separated by a space. A sequence specifies the order in which the <SPAN CLASS="textit">toggle</SPAN> operation should be applied to the squares. For example, the sequence:<P><PRE>
(1,2) (2,3) (1,1)
</PRE>specifies that the toggle operations are applied to square (1,2) first, then to square (2,3), and finally to square (1,1). Figure 3 shows how the above sequence changes the states of the squares ina 3 by 3 board. (Shaded squares are ``On".)<P><DIV ALIGN="CENTER"><IMG WIDTH="639" HEIGHT="114" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2051img1.png ALT="\epsfbox{p2051.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 3: Boards</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
(1,1) (1,2) (2,2) (2,1)

(2,2) (1,3) (3,3) (3,1) (1,1)

(1,1) (1,3) (1,4) (2,2) (2,3) (2,4) (3,1) (3,2) (3,3) (4,1) (4,2) (4,4)
</PRE>
______________________________________________________
2052||||||false||||||
<P>Starting from point (0,0) on a plane, we have written all non-negative integers 0,1,2,... as shown in the figure. For example, 1, 2, and 3 has been written at points (1,1), (2,0), and (3,1) respectively and this pattern has continued.<p align=center><img src=p2052.gif></p><p>You are to write a program that reads the coordinates of a point (x, y), and writes the number (if any) that has been written at that point. (x, y) coordinates in the input are in the range 0...5000.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input is N, the number of test cases for this problem. In each of the N following lines, there is x, and y representing the coordinates (x, y) of a point.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each point in the input, write the number written at that point or write <i>"No Number"</i> if there is none.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
4 2
6 6
3 4
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
6
12
No Number
</PRE><P>
______________________________________________________
2053||||||false||||||
<P>His Excellency the ambassador of Puzzlestan to Tehran is giving a reception (party) on the occasion of Puzzlestan national day on the second of November. Ambassadors of all missions to Tehran are invited. At the entrance to reception hall each guest leaves his belongings (overcoat, hat, ..., which we will call items afterwards) with the attendant who knows the host ambassador loves puzzle games. While waiting for the reception to end, the attendant prepares a program on his laptop that helps him find what belongs to whom. He asks each guest to give some statements that:</p><blockquote><li>Relates two items belonging to the same guest. <li>Indicates two items that do not belong to the same guest.</blockquote><p>Suppose there are N kinds of items and M guests, and assume each guest has exactly one item from each kind (i.e. each guest has one overcoat, one hat, ...). Each of N x M items is given a unique name, which is a single letter (case-sensitive). We can then represent all items of kind i (1 &le; i &le; N) by a string of length M. We call this, ith group. For example, ith group can be ABCD. In this case, its first item is A, its second item is B, and so on.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line includes the number of test cases (at most 20). First line of each test case includes two positive integers; the first one being N (1 &le; N &le; 7), the number of item kinds, and the second is M (1 &le; M &le; 7), the number of guests. In each of the next N lines, there is one string of length M, representing one group (different items of the same kind). The rest of the input includes several lines of statements. Each statement is of form i j X k r, which means that the jth item of the ith group and the rth item of the kth group belong to the same guest (if X is R) or do not belong to the same guest (if X is N). The last line of each test case is a dummy statement 0 0 R 0 0.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case, the program should produce M lines, line i (1 &le; i &le; M) starts with the letter indicating the ith member of the first group in the input test case, then the related member of the second set and so on until that of the last set. (So the letters in the first column are the same as the letters in the first group, preserving order). Output for consecutive test cases must be separated by exactly one blank line.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
3 4
ABCD
EFGH
IJKL
1 1 R 3 2
1 2 N 2 2
2 2 R 3 4
1 3 R 2 3
1 1 N 2 4
3 1 R 1 3
0 0 R 0 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
AEJ
BHK
CGI
DFL
</PRE><P>
______________________________________________________
2054||||||false||||||
<P>DDL is a very simple programming language in which variables are dynamically declared at run time. All variables in DDL are of the signed integer type within the range -9999...9999. There are up to five types of statements in a DDL program (each statement is in a separate program line, and the first statement is in line 1):</p>1. Dcl &lt;id><blockquote>Dcl is a keyword specifying a declaration statement. id is a single (case-sensitive) letter designating a DDL variable. For example Dcl x when executed correctly, allocates memory for variable x, and sets its value to zero.</blockquote>2. &lt;id> = &lt;ic><blockquote>This is an assignment statement, where id is a DDL variable, and ic is a literal integer constant in the range (0...9999). For example x = 2000 when executed correctly, changes value of x to 2000. Note that there may be one or more number of blank characters around =, but there is no tab characters.</blockquote>3. Goto &lt;label>, or Goto &lt;id> &lt;label><blockquote>Goto is a keyword specifying an unconditional or conditional goto statement. label is a program line's number. For example Goto 5 transfers the program execution flow to line 5 of the program, and Goto x 5 when executed correctly, trasfers the flow to line 5 iff x>0, and to the next line otherwise. The label is guaranteed to be in the range of program line numbers.</blockquote>4.Inc &lt;id>, or Dec &lt;id><blockquote>Inc and Dec are keywords specifying increment and decrement statements respectively. For example Inc x (Dec y) when executed correctly adds (substracts) 1 to (from) the value of x (y).</blockquote>5. End<blockquote>End is a keyword specifying the end statement, whose execution stops the program.</blockquote><p>Note that the keywords of the DDL language are case-insensitive.</p><p><b>Error conditions:</b></p><p>When one of the following erroneous statements encounters during the program execution, an error message appears in a separate line of the output. Each error message is of the form &lt;label> &lt;space> &lt;error code>. label is the line number for the erroneous statement, space is one blank character, and error code is a positive integer specified below.</p><blockquote>1. Dcl x is erroneous if x has not been referenced (used in assignment, goto, increment or decrement) since the last time a Dcl x (declaring the same variable) statement has been executed, unless this is the first Dcl x statement being executed. In this erroneous condition, an error message indicating a repeated declaration is generated as &lt;label> 1, where label is the program line number for the erroneous statement. Then the program flow transfers to the statement in the next program line, and any prior correctly executed declaration for x is valid.<br><br>2.Any other statement where a variable such as x is referenced (used in assignment, goto, increment or decrement) is erroneous if no Dcl x has been previously correctly executed. In this case, an error message indicating an undeclared reference is generated as &lt;label> 2 and the program execution continues from the next line.</blockquote><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>First line of the input file contains a single integer N indicating the number of DDL programs to follow (1 &le; N &le; 20). The first line of each test case contains a single integer indicating number of statements in that program which is in the range (1...100). There are no blank lines between test cases. Statements of each DDL program come one after the other in separate lines without any blank lines in between. Statements are not explicitly labeled, but they are implicitly labeled by the number of their line beginning from 1 for the first statement in each program. There is no syntax error in programs and they are guaranteed to terminate, and no overflow or underflow errors will occur during execution. In each line of the program, tokens (e.g. GOTO, =, etc.) are separated by at least one blank character. Also there may be some blank characters in the beginning or at the end of each line.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each input DDL program, your output should start with the program number in the first line, followed by the error messages generated by the program in the order they are generated, each error message in one line. There should be no blank lines between error messages.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
4
DCL X
INC X
DCL X
END
9
DCL X
INC X
GOTO X 5
DCL Y
Y = 100
DCL X
DCL X
Y = 50
END
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1
2
5 2
7 1
8 2
</PRE><P>
______________________________________________________
2055||||||false||||||
<P>A company producing toys has a complex system to paint its products. To obtain the desired color, the product must be painted by several colors in a specified order. A product is painted by moving through color tunnels. For each color there is at least one tunnel that paints with that color, but there may be more. The tunnels are distributed in the painting area and the product must be delivered from one tunnel to another in order to be painted with the given colors. The product is at a certain point in the production plant when painting process starts and must finally be delivered to the product warehouse.</p><p>More formally, a finished uncolored product is at a certain given point (source point) and must be delivered to another given point (destination point) after being painted with different colors in a given order. There are several tunnels, each is assumed to be a line segment in the plain with a specific color. The colors of the tunnels are not necessarily distinct.&nbsp;&nbsp; Let &lt;<i>c</i><sub>1</sub>, <i>c</i><sub>2</sub>, ..., <i>c<sub>n</sub></i>&gt; be the sequence of <i>n</i> colors that the product is to be painted with. The product is required to pass through tunnels&nbsp; &lt;<i>t</i><sub>1</sub>, <i>t</i><sub>2</sub>, ... <i>t<sub>n</sub></i>&gt; such that the color of <i>t<sub>i</sub></i> is <i>c<sub>i</sub></i>. Note that it is possible to pass through a tunnel without being painted, so the mentioned &lt;<i>t</i><sub>1</sub>, <i>t</i><sub>2</sub>, ... <i>t<sub>n</sub></i>&gt; may be in fact a subsequence of the tunnels which the product passes through. The direction in which the product passes a tunnel is not important. The goal is to find the shortest path from source to destination subject to the color constraints. The path may cross itself, or even cross a tunnel. Passing twice (or more) through a tunnel is also allowed. Note that two tunnels can cross or overlap but are different.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains several test cases. The first line of the input consists of a single integer <i>t</i> (between 1 and 20), the number of test cases. Following the first line is the data for <i>t</i> test cases. The first line of each test case contains four real numbers <i>x<sub>s</sub></i>, <i>y<sub>s</sub></i>, <i>x<sub>t</sub></i>, <i>y<sub>t</sub></i><sub> </sub>which are <i>x</i> and <i>y</i> coordinates of the source and destination respectively. The second line of the test case contains the color sequence: the first number is the length of the sequence (between 1 and 30), and the rest of the line is the sequence itself. Each color in the sequence is an integer in the range 1...100. The third line contains a single integer <i>n</i> in the range 1...60 which is the number of tunnels followed by <i>n</i> lines each containing five numbers. The first two numbers are the <i>x</i> and <i>y</i> coordinates of one end of the tunnel. The third and fourth numbers are the <i>x</i> and <i>y</i> coordinates of the other end. Coordinates are real numbers. The fifth number is an integer in the range 1...100 representing the color of the tunnel.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output file must have <i>t</i> lines, each containing the minimum length of a path from source to destination subject to the constraints of the problem, with a precision of three digits after decimal point.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
0 1.5 100 67
4 1 4 3 1
9
10 10 20 20 1
10 15 20.5 35.333 3
30 15 14.55 12.5 1
40 30 44 33 1
29 84 33 58 4
9 39 41 115 2
75 47 37 69 4
46 26 58 25 3
73 48 27 59 3
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
240.610
</PRE><P>
______________________________________________________
2056||||||false||||||
<P>A math instructor is too lazy to grade a question in the exam papers in which students are supposed to produce a complicated formula for the question asked. Students may write correct answers in different forms which makes grading very hard. So, the instructor needs help from computer programmers and you can help.</p><p>You are to write a program to read different formulas and determine whether or not they are arithmetically equivalent.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line of the input contains an integer <i>N</i> (1 &le; <i>N</i> &le; 20) that is the number of test cases. Following the first line, there are two lines for each test case. A test case consists of two arithmetic expressions, each on a separate line with at most 80 characters. There is no blank line in the input. An expression contains one or more of the following:<blockquote><li>Single letter variables (case insensitive). <li>Single digit numbers. <li>Matched left and right parentheses. <li>Binary operators +, - and * which are used for addition, subtraction and multiplication respectively. <li>Arbitrary number of blank or tab characters between above tokens.</blockquote><p><i>Note:</i> Expressions are syntactically correct and evaluated from left to right with equal precedence (priority) for all operators. The coefficients and exponents of the variables are guaranteed to fit in 16-bit integers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>Your program must produce one line for each test case. If input expressions for each test data are arithmetically equivalent, "YES", otherwise "NO" must be printed as the output of the program. Output should be all in upper-case characters.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
(a+b-c)*2
(a+a)+(b*2)-(3*c)+c
a*2-(a+c)+((a+c+e)*2)
3*a+c+(2*e)
(a-b)*(a-b)
(a*a)-(2*a*b)-(b*b)
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
YES
YES
NO
</PRE><P>
______________________________________________________
2057||||||false||||||
<P>Discovery Co. ltd. builds a satellite using a new kind of an intelligent camera. The camera has special software to detect cities and roads from an image, and is also able to detect every region (which is a connected part of surface), bounded by a series of connected roads with no other region inside. Using this technology, the satellite is able to compress the picture before sending it. The compressed format of a picture is the city locations and its regions.</p><p>Discovery has launched the satellite, without testing the software completely. So, after a while, they received some buggy pictures which includes one more extra region: the outer region. The outer region is the region of the plane enclosing every other region (which has infinite area). Further analysis shows that all images sent have the following properties:</p><blockquote><li>1. All cities, in the image, have at least two roads to the other cities. <li>2. There is a path connecting every pair of cities. <li>3. There is at most one road between each pair of cities. <li>4. Roads do not cross each other except at the cities.</blockquote><p align=center><img src="http://livearchive.onlinejudge.org/external/20/p2057.gif></p><p>The above Figure shows a sample image received (see sample input).</p><p>You are to write a program to read a buggy image and report the outer region.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input consists of a single integer N (1 &le; N &le; 20), which is the number of test cases. The test cases appear with no blank lines in between. The first line of each test case consists of the number of cities (between 1 and 50) followed by pairs of integers (x, y) which are location of cities (each pair in one line), followed by number of faces in a separate line (between 1 and 50), followed by face information on each line. Face information consists of number of cities making the face and the city numbers in clockwise (or counterclockwise) order.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>There should be a single line containing the boundary face number for each test case, with no blank lines in between.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
5
2 6
4 4
4 7
8 6
4 10
3
4 1 2 4 3
4 1 3 4 5
4 1 2 4 5
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
3
</PRE><P>
______________________________________________________
2058||||||false||||||
<p>A supermarket in Tehran is open 24 hours a day every day 
and needs a number of cashiers to fit its need.&nbsp; The supermarket manager has 
hired you to help him, solve his problem. The problem is that the supermarket 
needs different number of cashiers at different times of each day (for example, 
a few cashiers after midnight, and many in the afternoon) to provide good 
service to its customers, and he wants to hire the least number of cashiers for 
this job.</p>

<p>The manager has provided you with the least number of 
cashiers needed for every one-hour slot of the day. This data is given as <i>R</i>(0),
<i>R</i>(1), ..., <i>R</i>(23): <i>R</i>(0) represents the least number of 
cashiers needed from midnight to 1:00 A.M., <i>R</i>(1) shows this number for 
duration of 1:00 A.M. to 2:00 A.M., and so on. Note that these numbers are the 
same every day. There are <i>N</i> qualified applicants for this job. Each 
applicant <i>i</i> works non-stop once each 24 hours in a shift of exactly 8 
hours starting from a specified hour, say <i>t<sub>i</sub></i> (0
&le; <i>t<sub>i</sub></i>
&le; 23), exactly from the start of the 
hour mentioned. That is, if the <i>i</i>th applicant is hired, he/she will work 
starting from <i>t<sub>i</sub></i> oclock sharp for 8 hours. Cashiers do not 
replace one another and work exactly as scheduled, and there are enough cash 
registers and counters for those who are hired.</p>

<p>You are to write a program to read the <i>R</i>(<i>i</i>) 
's for <i>i</i>=0...23 and <i>t<sub>i</sub></i>'s for <i>i</i>=1..<i>N</i> that 
are all, non-negative integer numbers and compute the least number of cashiers 
needed to be employed to meet the mentioned constraints. Note that there can be 
more cashiers than the least number needed for a specific slot.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The first line of input is the number of test cases for 
this problem (at most 20). Each test case starts with 24 integer numbers 
representing the <i>R</i>(0), <i>R</i>(1), ..., <i>R</i>(23) in one line (<i>R</i>(<i>i</i>) 
can be at most 1000). Then there is <i>N</i>, number of applicants in another 
line (0 &le; <i>N</i> &le; 1000), after which come <i>N</i> 
lines each containing one <i>t<sub>i </sub></i>(0 &le; <i>t<sub>i </sub></i>
&le; 23). There are no blank lines between test cases.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, the output should be written in one line, which is the least number of cashiers needed.</p>

<p>If there is no solution for the test case, you should write <i>No Solution</i> for that case.</p>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
5
0
23
22
1
10
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1
</PRE>

<P>

______________________________________________________
2059||||||false||||||
<p>In a newly constructed dolphin pool in the Kish island in Persian Gulf, one 
of the fun games is as follows: the game
director throws several plastic rings in the pool such that center of no ring 
lies inside any other ring, and no two rings are tangent. The dolphins are 
trained to jump out on the directors whistle through the closed areas that are 
completely outside&nbsp; the rings, one dolphin from one such area. The dolphins 
jump out if and only if the number of closed areas exactly equals
to the number of dolphins. </p>

<p>You are to write a program to given the following input/output description, 
finds the number of closed areas between rings to help the dolphins decide to 
jump out or not. </p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The first line includes the number of test cases (at most 20). Each test case 
data has an integer N (1 &le; N &le; 20), the number of plastic rings, in its first 
line. Following the first line there are N lines, each containing three 
integers, the first and second being the x and y coordinates of the circle of 
the ring, and the third is its radius. Coordinates are positive integers less 
than 1000 and the radius is in the range 1...100. </p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, there must be one line in the output including the number 
of closed areas in that test case. </p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
4
100 100 20
100 135 20
135 100 20
135 135 20
1
10 10 40
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1
0
</PRE>

<P>

______________________________________________________
2060||||||false||||||
<P>It's now 3002 and the Godfather Unlucky Luchiano is planning a rubbery from the Rectilinia museum.
 The problem is that the walls of the museum are impenetrable and the doors are guarded so his men
 cannot enter the museum from its doors. He is lucky that the museum has no roofs and one can enter
 the museum from the above. So he decides to use a device from thousands of years ago; a catapult!
 Using this, his men can fly and fall in some place in the museum without being caught by guards.</p>

<p>But another problem still exists which is a high-tech laser gun that guards the museum. The laser gun 
is designed based on a very recent discovery that it is possible to guide the laser beam not on a straight
 line, but on a rectilinear path. The fact that the beam travels the shortest (possible) distance from
 the emission point to a target still remains. The problem is that if one land somewhere in the museum 
that is reachable by the laser beams, he will be immediately destroyed. Again godfather is lucky,
 since in the museum, there are some walls and other obstacles through which the beam cannot pass and 
if his men can land in the shadows of that walls, they are safe in the way that they are not destroyed
 by the gun right after landing and they can use their special device to disable the laser gun. As
 the catapult is not a very precise device, godfather wants to know the probability of landing in
shadows, so he has to compute the total area of shadowy regions of the museum.</p>

<p>Given the layout of the museum, you have to write a program to compute the total area of the 
shadowy regions. Yes! This time you really HAVE TO!</p>

<p>As you study the layout of the museum from the top view, you find that the museum can be 
considered as a rectangle with some obstacles in it. The obstacles are simple polygons with 
sides parallel to the rectangle sides. Interior of obstacles do not overlap. The laser gun is 
located in the upper-right corner of the museum. A laser beam is composed of a number of line
 segments; each is either horizontal or vertical. When the gun chooses its target, it intelligently 
determines a possible path to the target and fires. A possible path has the following characteristics:</p>

<blockquote>
	<li>It consists of only horizontal and vertical segments.
	<li>It never crosses an obstacle but in some parts may be tangent to obstacle sides. It can never be tangent to two obstacle sides at one point.
	<li>In the travel from the gun to the target, the beam never moves from left to right or from bottom to top (directions are relative to view of the museum from the above).
</blockquote>

<p align=center><img src="http://livearchive.onlinejudge.org/external/20/p2060.gif></p>

<p>The problem is to compute the total area of the shadowy regions in the museum (not belonging to the
 interior of the obstacles), where the laser gun cannot shoot any point inside those regions. In the above
 figure, the point marked by (x) is in a shadowy region (see sample input).</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input file contains several test cases. The first line contains a single integer t (between 1
 and 10), which is the number of test cases. Rest of the input file contains t test cases. The first 
line of each test case contains 2 positive integers, which are the length and the width of the rectangle
 respectively. The second line contains a single integer n, which is the number of obstacles in the museum
 (between 0 and 50). After it, there are n lines, which contain the obstacle data. Each obstacle data is
 in a single line, which begins with an integer m, which is the number of vertices of the obstacle (between
 4 and 50), followed by 2m numbers, which are the x, and y coordinates of the vertices listed in clockwise
 order. Every coordinate in the input is a positive integer less than 1,000,000. Upper-left corner of the
 rectangle is the coordinate origin.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>The output file must contain exactly t lines. Each line contains a single number, which is the total
 area of the safe regions in the test case. The output for each test case is guaranteed to fit in a 
32-bit integer.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
12 8
3
8 5 1 11 1 11 5 7 5 7 4 9 4 9 2 5 2
4 0 3 3 3 3 4 0 4
4 1 4 2 4 2 6 1 6
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
12
</PRE>

<P>

______________________________________________________
2061||||||false||||||
<P align="center"><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2061_1.gif width="404" height="201"><P align="left">In the triangle game you start off with six triangles numbered on each edge, as in the example above. You can slide and rotate the triangles so they form a hexagon, but the hexagon is only legal if edges common to two triangles have the same number on them. You may not flip any triangle over. Two legal hexagons formed from the six triangles are illustrated below.<P align="center"><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2061_1.gif width="404" height="201"><p>The score for a legal hexagon is the sum of the numbers on the outside six edges.</p><p>Your problem is to find the highest score that can be achieved with any six particular triangles.</p><p><b><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Input</A> </FONT></b></p><p>The input file will contain one or more data sets. Each data set is a sequence of six lines with three integers from 1 to 100 separated by blanks on each line. Each line contains the numbers on the triangles in clockwise order. Data sets are separated by a line containing only an asterisk. The last data set is followed by a line containing only a dollar sign.<br><br><p><b><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Output</A></FONT></b></p>For each input data set, the output is a line containing only the word &quot;none&quot; if there are no legal hexagons or the highest score if there is a legal hexagon.</p><P><H2><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Sample Input</A>&nbsp;</FONT></H2><P><pre>1 4 20 
3 1 5 
50 2 3 
5 2 7 
7 5 20 
4 7 50 
* 
10 1 20 
20 2 30 
30 3 40 
40 4 50 
50 5 60 
60 6 10 
* 
10 1 20 
20 2 30 
30 3 40 
40 4 50 
50 5 60 
10 6 60 
$</pre><h2><FONT color=#ff0000 size=4><A name=SECTION0001004000000000000000>Sample Output</A>&nbsp;</FONT></h2><P><pre>152 
21 
none</pre>
______________________________________________________
2062||||||false||||||
<P>Password security is a tricky thing. Users prefer simple passwords that are easy to remember (like buddy), but such passwords are often insecure. Some sites use random computer-generated passwords (like xvtpzyo), but users have a hard time remembering them and sometimes leave them written on notes stuck to their computer. One potential solution is to generate &quot;pronounceable&quot; passwords that are relatively secure but still easy to remember.<P>FnordCom is developing such a password generator. You work in the quality control department, and it's your job to test the generator and make sure that the passwords are acceptable. To be acceptable, a password must satisfy these three rules:<ol><li>It must contain at least one vowel. </li><li>It cannot contain three consecutive vowels or three consecutive consonants. </li><li>It cannot contain two consecutive occurrences of the same letter, except for '<tt>ee</tt>' or '<tt>oo</tt>'.</li></ol><p>(For the purposes of this problem, the vowels are '<tt>a</tt>', '<tt>e</tt>', '<tt>i</tt>', '<tt>o</tt>', and '<tt>u</tt>'; all other letters are consonants.) Note that these rules are not perfect; there are many common/pronounceable words that are not acceptable.</p><p><b><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Input</A> </FONT></b></p><p>The input consists of one or more potential passwords, one per line, followed by a line containing only the word '<tt>end</tt>' that signals the end of the file. Each password is at least one and at most twenty letters long and consists only of lowercase letters.<p><b><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Output</A> </FONT></b></p>For each password, output whether or not it is acceptable, using the precise format shown in the example.</p><P><H2><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Sample Input</A>&nbsp;</FONT></H2><P><pre>a
tv
ptoui
bontres
zoggax
wiinq
eep
houctuh
end</pre><h2><FONT color=#ff0000 size=4><A name=SECTION0001004000000000000000>Sample Output</A>&nbsp;</FONT></h2><P><pre>&lt;a&gt; is acceptable.
&lt;tv&gt; is not acceptable.
&lt;ptoui&gt; is not acceptable.
&lt;bontres&gt; is not acceptable.
&lt;zoggax&gt; is not acceptable.
&lt;wiinq&gt; is not acceptable.
&lt;eep&gt; is acceptable.
&lt;houctuh&gt; is acceptable.</pre>
______________________________________________________
2063||||||false||||||
<p>A simple matching game for children uses a board that is a sequence of colored squares. Each player has a game piece. Players alternate turns, drawing cards containing either one colored square or two colored squares of the same color. Players move their pieces forward on the board to the next square that matches the single color on the card, or forward to the second matching square if the card contains two colored squares, or forward to the last square on the board if there is no square matching the description above. A player wins if his piece lands on the last square of the board. It is possible for all the cards to be drawn and still not have a winner.</p><p>This problem represents colors with capital letters from A-Z. Below is a diagram of a sample board.</p><p align="center"><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2063.gif width="635" height="82"></p><p>Consider the deck of cards: <tt>R, B, GG, Y, P, B, P, RR </tt></p><p>For 3 players, the game proceeds as follows:</p><pre>Player 1 draws R,  moves to 1st square
Player 2 draws B,  moves to 5th square
Player 3 draws GG, moves to 8th square
Player 1 draws Y,  moves to 2nd square
Player 2 draws P,  moves to 11th square
Player 3 draws B,  moves to 9th square
Player 1 draws P,  moves to 4th square
Player 2 draws RR, Wins! (no Rs in front of piece so it goes to last square)
</pre><p>Using the same board and the same deck of cards, but with 2 players, Player 1 wins after 7 cards. With 4 players, no one wins after exhausting the deck of 8 cards.</p><p><b><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Input</A> </FONT></b></p><p>Input consists of information for one or more games. Each game starts with one line containing the number of players (1-4), the number of squares on the board (1-79), and the number of cards in the deck (1-200). This is followed by a single line of characters representing the colored squares on the board. Following this are the cards in the deck, one card per line. Cards can have only a single character, or two of the same character. The end of the input is signalled by a line with 0 for the number of players - the other two values will be present but indeterminate.<br><br><p><b><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Output</A> </FONT></b></p>For each game, the output is either the winning player and the total number of cards drawn, or the number of cards in the deck, as shown in the sample output. Always use the plural &quot;cards&quot;.</p><P><H2><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Sample Input</A>&nbsp;</FONT></H2><P><pre>2 13 8
RYGPBRYGBRPOP
R
B
GG
Y
P
B
P
RR
2 6 5
RYGRYB
R
YY
G
G
B
3 9 6
QQQQQQQQQ
Q
QQ
Q
Q
QQ
Q
0 6 0</pre><h2><FONT color=#ff0000 size=4><A name=SECTION0001004000000000000000>Sample Output</A>&nbsp;</FONT></h2><P><pre>Player 1 won after 7 cards.
Player 2 won after 4 cards.
No player won after 6 cards.</pre>
______________________________________________________
2064||||||false||||||
<P align="center"><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2064_1.gif width="241" height="154"><P align="center">Figure 1<p>Figure 1 shows a graphical representation of a binary tree of letters.&nbsp; People familiar with binary trees can skip over the definitions of a binary tree of letters, leaves of a binary tree, and a binary search tree of letters, and go right to <b>The problem</b>.</p><ol><p>A <i>binary tree of letters</i> may be one of two things:</p><ol><li>It may be empty. </li><li>It may have a root <i>node.</i>&nbsp; A node has a letter as data and refers to a left and a right subtree.&nbsp; The left and right subtrees are also binary trees of letters. </li></ol></ol><ol><p>In the <i>graphical</i> representation of a binary tree of letters:</p><ol><li>Empty trees are omitted completely. </li><li>Each node is indicated by<ul type="DOT"><li>Its letter data, </li><li>A line segment down to the left to the left subtree, if the left subtree is nonempty, </li><li>A line segment down to the right to the right subtree, if the right subtree is nonempty. </li></ul></li></ol><p>A <i>leaf</i> in a binary tree is a node whose subtrees are both empty.&nbsp; In the example in Figure 1, this would be the five nodes with data <tt>B</tt>, <tt>D</tt>, <tt>H</tt>, <tt>P</tt>, and <tt>Y</tt>.</p><p>The <i>preorder traversal of a tree of letters</i> satisfies the defining properties:</p><ol><li>If the tree is empty, then the preorder traversal is empty. </li><li>If the tree is not empty, then the preorder traversal consists of the following, in order<ul type="DOT"><li>The data from the root node, </li><li>The preorder traversal of the root's left subtree, </li><li>The preorder traversal of the root's right subtree. </li></ul></li></ol><p>The preorder traversal of the tree in Figure 1 is <tt>KGCBDHQMPY</tt>.</p><p>A tree like the one in Figure 1 is also a binary search tree of letters.&nbsp; A <i>binary search tree of letters</i> is a binary tree of letters in which each node satisfies:</p><ol><li>The root's data comes later in the alphabet than all the data in the nodes in the left subtree. </li><li>The root's data comes earlier in the alphabet than all the data in the nodes in the right subtree.</li></ol></ol><p><b><font color="#ff0000" size="4">The problem:</font></b></p><p>Consider the following sequence of operations on a binary search tree of letters</p><blockquote><p>Remove the leaves and list the data removed<br>Repeat this procedure until the tree is empty</p></blockquote><p>Starting from the tree below on the left,&nbsp; we produce the sequence of trees shown, and then the empty tree</p><p align="center"><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2064_1.gif width="652" height="149"></p><p>by removing the leaves with data</p><blockquote><p><tt>BDHPY</tt><br><tt>CM</tt><br><tt>GQ</tt><br><tt>K</tt></p></blockquote><p>Your problem is to start with such a sequence of lines of leaves from a binary search tree of letters and output the preorder traversal of the tree.</p><p><b><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Input</A></FONT></b></p><p>The input file will contain one or more data sets.&nbsp; Each data set is a sequence of one or more lines of capital letters.&nbsp; The lines contain the leaves removed from a binary search tree in the stages described above.&nbsp; The letters on a line will be listed in increasing alphabetical order.&nbsp; Data sets are separated by a line containing only an asterisk ('<tt>*</tt>').&nbsp; The last data set is followed by a line containing only a dollar sign ('<tt>$</tt>').&nbsp; There are no blanks or empty lines in the input.</p><p><b><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Output</A> </FONT></b></p><p>For each input data set, there is a unique binary search tree that would produce the sequence of leaves.&nbsp; The output is a line containing only the preorder traversal of that tree, with no blanks.</p><P><H2><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Sample Input</A>&nbsp;</FONT></H2><P><pre>BDHPY 
CM 
GQ 
K 
* 
AC 
B 
$</pre><h2><FONT color=#ff0000 size=4><A name=SECTION0001004000000000000000>Sample Output</A>&nbsp;</FONT></h2><P><pre>KGCBDHQMPY
BAC</pre>
______________________________________________________
2065||||||false||||||
<p>IONU Satellite Imaging, Inc. records and stores very large images using run 
length encoding. You are to write a program that reads a compressed image, finds 
the edges in the image, as described below, and outputs another compressed image 
of the detected edges.<br>
<br>
A simple edge detection algorithm sets an output pixel's value to be the maximum 
absolute value of the differences between it and all its surrounding pixels in 
the input image. Consider the input image below:</p>
<p align="center"><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2065_1.gif width="295" height="273"><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2065_1.gif width="295" height="273"></p>
<p>The upper left pixel in the output image is the maximum of the values 
|15-15|, |15-100|, and |15-100|, which is 85. The pixel in the 4th row, 2nd 
column is computed as the maximum of |175-100|, |175-100|, |175-100|, |175-175|, 
|175-25|, |175-175|, |175-175|, and |175-25|, which is 150. </p>
<p>Images contain 2 to 1,000,000,000 (10<sup>9</sup>) pixels. All images are 
encoded using run length encoding (RLE). This is a sequence of pairs, containing 
pixel value (0-255) and run length (1-10<sup>9</sup>). Input images have at most 
1,000 of these pairs. Successive pairs have different pixel values. All lines in 
an image contain the same number of pixels.</p>


<p><b><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Input</A></FONT></b></p>
<p>Input consists of information for one or more images. Each image starts with 
the width, in pixels, of each image line. This is followed by the RLE pairs, one 
pair per line. A line with 0 0 indicates the end of the data for that image. An 
image width of 0 indicates there are no more images to process. The first image 
in the example input encodes the 5x7 input image above.<br>
<br>


<p><b><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Output</A> 
</FONT></b></p>
Output is a series of edge-detected images, in the same format as the input 
images, except that there may be more than 1,000 RLE pairs.<br>
<br>
<b>Important Note</b>: A brute force solution that attempts to compute an output 
value for every individual pixel will likely fail due to space or time 
constraints.</p>
<P>


<H2><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Sample 
Input</A>&nbsp;</FONT> </H2>
<P>
<pre>7
15 4
100 15
25 2
175 2
25 5
175 2
25 5
0 0
10
35 500000000
200 500000000
0 0
3
255 1
10 1
255 2
10 1
255 2
10 1
255 1
0 0
0</pre>


<h2><FONT color=#ff0000 size=4><A name=SECTION0001004000000000000000>Sample 
Output</A>&nbsp;</FONT> </h2>
<P>
<pre>7
85 5
0 2
85 5
75 10
150 2
75 3
0 2
150 2
0 4
0 0
10
0 499999990
165 20
0 499999990
0 0
3
245 9
0 0
0</pre>

______________________________________________________
2066||||||false||||||
<P>Instruens Fabulam means drawing a chart (or table) in Latin. That's what you 
will do for this problem.. 


<h2><FONT color=#ff0000 size=4><A name=SECTION0001004000000000000000>Input</A>&nbsp;</FONT> </h2>
<P>The input consists of one or more table descriptions, followed by a line 
whose first character is '*', which signals the end of the file. Each 
description begins with a header line containing one or more characters that 
define the number and alignment of columns in the table. Each character in the 
header line is either '&lt;', '=', or '&gt;', and indicates a left-justified, 
centered, or right-justified column. Following the header are at least two and 
at most 21 data lines that contain the entries for each row. Each data line 
consists of one or more nonempty entries separated by an ampersand ('&amp;'), where 
the number of entries is equal to the number of columns defined in the header 
line. The first data line contains entries for the column titles, and the remaining data lines contain entries for the body of the table. Spaces may 
appear within an entry, but never at the beginning or end of an entry. The 
characters '&lt;', '=', '&gt;', '&amp;', and '*' will not appear in the input except where 
indicated above. 


<h2><FONT color=#ff0000 size=4><A name=SECTION0001004000000000000000>Output</A>&nbsp;</FONT> </h2><P>For each table description, output the table using the exact format shown in 
the examples. Note that 
<ul>
  <li>The total width of the table will never exceed 79 characters (not counting 
  end-of-line).</li>
  <li>Dashes ('<tt>-</tt>') are used to draw horizontal lines, not underscores 
  ('<tt>_</tt>'). 'At' signs ('<tt>@</tt>') appear at each of the four outer 
  corners. Plus signs ('<tt>+</tt>') appear at intersections <em>within</em> the 
  line separating the title from the body. </li>
  <li>The largest entry in a column is always separated from the enclosing bars 
  ('<tt>|</tt>') by exactly one space. </li>
  <li>If a centered entry cannot be <em>exactly</em> centered within a column, 
  the extra space goes on the right of the entry.</li>
</ul>
<p>Input and correct output files satisfy all the requirements listed in <i>
Notes to Teams</i>, <b>except</b> that the output may contain two or more 
consecutive spaces. There are no spaces at the beginning or end of lines, and 
only spaces are used (never tabs).</p>
<P>


<H2><FONT color=#ff0000 size=4><A name=SECTION0001003000000000000000>Sample 
Input</A>&nbsp;</FONT> </H2>
<P>
<pre>&lt;&gt;=&gt;
TITLE&amp;VERSION&amp;OPERATING SYSTEM&amp;PRICE
Slug Farm&amp;2.0&amp;FreeBSD&amp;49.99
Figs of Doom&amp;1.7&amp;Linux&amp;9.98
Smiley Goes to Happy Town&amp;11.0&amp;Windows&amp;129.25
Wheelbarrow Motocross&amp;1.0&amp;BeOS&amp;34.97
&gt;
What is the answer?
42
&lt;&gt;
Tweedledum&amp;Tweedledee
&quot;Knock, knock.&quot;&amp;&quot;Who's there?&quot;
&quot;Boo.&quot;&amp;&quot;Boo who?&quot;
&quot;Don't cry, it's only me.&quot;&amp;(groan)
*</pre>


<h2><FONT color=#ff0000 size=4><A name=SECTION0001004000000000000000>Sample 
Output</A>&nbsp;</FONT> </h2>
<P><PRE>@-----------------------------------------------------------------@
| TITLE                     | VERSION | OPERATING SYSTEM |  PRICE |
|---------------------------+---------+------------------+--------|
| Slug Farm                 |     2.0 |     FreeBSD      |  49.99 |
| Figs of Doom              |     1.7 |      Linux       |   9.98 |
| Smiley Goes to Happy Town |    11.0 |     Windows      | 129.25 |
| Wheelbarrow Motocross     |     1.0 |       BeOS       |  34.97 |
@-----------------------------------------------------------------@
@---------------------@
| What is the answer? |
|---------------------|
|                  42 |
@---------------------@
@---------------------------------------------@
| Tweedledum                 |     Tweedledee |
|----------------------------+----------------|
| &quot;Knock, knock.&quot;            | &quot;Who's there?&quot; |
| &quot;Boo.&quot;                     |     &quot;Boo who?&quot; |
| &quot;Don't cry, it's only me.&quot; |        (groan) |
@---------------------------------------------@</PRE>

______________________________________________________
2067||||||false||||||
<P>Given cells filled with functional formulas and data, display the calculated results of a mini-spreadsheet. Spreadsheet cells are labeled by columns(A-J) and rows (1-10). The cell in the 6-th column of the 3-rd row would be labeled with address F3. All cell entries will be integers. All function names and cell references are case insensitive. Any function not adhering to proper syntax should output `<TT>#SYN#</TT>' in its cell. The functions the spreadsheet should handle are as follows:<P><DL><DT><STRONG>Average(<SPAN CLASS="MATH"><I>Range</I></SPAN>)</STRONG></DT><DD>Calculate the average of the non-blank cells in a specified <SPAN CLASS="MATH"><I>Range</I></SPAN>. Truncate result.</DD><DT><STRONG>Large(<SPAN CLASS="MATH"><I>Range</I></SPAN>, <SPAN CLASS="MATH"><I>k</I></SPAN>)</STRONG></DT><DD>Calculate the <SPAN CLASS="MATH"><I>k</I></SPAN>-th largest distinct value of non-blank cells in a specified <SPAN CLASS="MATH"><I>Range</I></SPAN>.<P><SPAN CLASS="MATH"><I>k</I></SPAN> may be a cell address. Ex.. Large(2,2,5,5,5,8,8,8,3) is 2.<P>Output `<TT>#ERR#</TT>' if impossible. Ex.. Large(2,2,5,5,5,8,8,4)</DD><DT><STRONG>CountIF(<SPAN CLASS="MATH"><I>Range</I></SPAN>, <SPAN CLASS="MATH"><I>condition</I></SPAN>)</STRONG></DT><DD>Count the number of cells satisfying a condition. Conditions are ``<SPAN CLASS="MATH">&gt; <I>n</I></SPAN>'', ``<SPAN CLASS="MATH">&lt; <I>n</I></SPAN>'', ``<SPAN CLASS="MATH">&gt; = <I>n</I></SPAN>'', ``<SPAN CLASS="MATH">&lt; = <I>n</I></SPAN>'', or ``<SPAN CLASS="MATH">= <I>n</I></SPAN>''. <SPAN CLASS="MATH"><I>n</I></SPAN> represents any integer. Positive numbers may have a leading `<TT>+</TT>'. Zero is a value; an empty cell, denoted by `<TT>B</TT>', is not.<P>Ex. CountIF(A4, B1:B5, ``>0")</DD><DT><STRONG>Median(<SPAN CLASS="MATH"><I>Range</I></SPAN>)</STRONG></DT><DD>Find the median of the cells in a specified Range<P>The median is the middle number of the cells if they are in numerical order. If the Range contains an odd number of cells, the median is the average of the two middle cells. Truncate the result if there is an even number of cells.</DD><DT><STRONG>Mode(<SPAN CLASS="MATH"><I>Range</I></SPAN>)</STRONG></DT><DD>Find the mode of the cells in a specified Range<P>The mode is the most frequently occurring value in the range. In case of a tie, use the first modal value occurring in a list of the Range values. Rectangular sections of the Range should be listed by rows, from left to right.</DD><DT><STRONG>SumIf( <SPAN CLASS="MATH"><I>Evaluation</I>&nbsp;<I>Range</I></SPAN>, <SPAN CLASS="MATH"><I>condition</I></SPAN>, <SPAN CLASS="MATH"><I>Sum</I>&nbsp;<I>Range</I></SPAN>)</STRONG></DT><DD>Sum certain cells.<P>If a cell in the <SPAN CLASS="MATH"><I>Evaluation</I>&nbsp;<I>Range</I></SPAN> meets the specified <SPAN CLASS="MATH"><I>condition</I></SPAN>, the corresponding cell in the <SPAN CLASS="MATH"><I>Sum</I>&nbsp;<I>Range</I></SPAN> should be included in the sum. Output `<TT>#ERR#</TT>' if there is not a 1-1 correspondence between <SPAN CLASS="MATH"><I>Evaluation</I>&nbsp;<I>Range</I></SPAN> cells and <SPAN CLASS="MATH"><I>Sum</I>&nbsp;<I>Range</I></SPAN> cells. Condition specifications are the same as those of the CountIf function. Rectangular sections of the <SPAN CLASS="MATH"><I>Range</I></SPAN> are in row major form. That is, they should be listed by rows, from left to right. Any blank cell in the <SPAN CLASS="MATH"><I>Evaluation</I>&nbsp;<I>Range</I></SPAN> counts for purposes of the required 1-1 correspondence, but the <SPAN CLASS="MATH"><I>condition</I></SPAN> should automatically evaluate to False.<P>Ex. If A1=1, A2=2, A4=4, B1=10, C1=20,B3=30, B4=40<P>SumIf(A1:A2, 3 ,A4, "&gt;2" , B1 , C1 ,B3:B4) is 70.</DD></DL><P>A range may be a <!-- MATH
 $<Cell \ Address>$
 --> <SPAN CLASS="MATH">&lt; <I>Cell</I>&nbsp;<I>Address</I> &gt;</SPAN>, <!-- MATH
 $<Cell \ Address:Cell \ Address>$
 --><SPAN CLASS="MATH">&lt; <I>Cell</I>&nbsp;<I>Address</I> : <I>Cell</I>&nbsp;<I>Address</I> &gt;</SPAN>, any integer, or a combination of these separated by commas.<P>Examples are `<TT>C5</TT>', or `<TT>A3:B4</TT>' (meaning A3,B3,A4, and B4), `<TT>55</TT>', or the combination `<TT>D2, 55, A3:B4, J3</TT>', respectively. There may be spaces within the parentheses. There will not be spaces separating a column and a row in a cell address.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input beginning with `<TT>R</TT>' indicates a particular row's data. Any row not accounted for should be filled with blanks. If a row is listed, all entries in the row are listed, from left to right, separated by blank(s). A row's entries may extend over more than one line.<P>There are no circular references in the data; however, one cell's function may use another cell's results as input. If there is an `<TT>#ERR#</TT>' or `<TT>#SYN#</TT>' in an input cell the function should display `<TT>#INP#</TT>'. If there is an `<TT>#INP#</TT>' in any input cell the function should display `<TT>#INP#</TT>'. `<TT>#INP#</TT>' is the error with most precedence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Output should be exactly as above. Column and row heading labels should be right justified in a field width of 5. All cells should be of width 5. Integers should be right-aligned within cells. Any cells without data should contain 5 spaces. There should be no extraneous spaces in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
R1 8 4 5 7 B 4 3 6 90 B
R3 7 8 11 14 Average(A3:D3,A3) SumF(A1 A2) B B B B
R5 B 3 4 B B B B B B Large( B1:B10 , 3)
R6 B 4 3 B B B B B B Average(4, J7)
R7 B CountIf(B1:B6,"&gt;0") LARGE(C1:C6,D1:E6,1) B B
B B B
B Large(B1:B10, 5)
R10 B Mode(A1:I1) Median(A1:I1,B1:B3) B B B B B B SUMIF(B5:C6,"&gt;3",A1:D1)
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
       A    B    C     D     E    F    G     H       I       J
 1     8    4    5     7          4    3     6      90
 2
 3     7    8   11    14     9#SYN#
 4
 5          3    4                                           3
 6          4    3                                       #INP#
 7          4   14                                       #ERR#
 8
 9
10          4    5                                           9
</PRE>
______________________________________________________
2068||||||false||||||
<P>PC<SPAN CLASS="MATH"><SUP><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2068img1.png ALT="$\scriptstyle \wedge$"></SUP></SPAN>3 is intended as a postprocessor for PC<SPAN CLASS="MATH"><SUP><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2068img1.png ALT="$\scriptstyle \wedge$"></SUP></SPAN>2, which is popular with ACMers, to allow for an alternative way of scoring to be used for our local contest. After a local guru has written a script for extracting necessary information from the PC<SPAN CLASS="MATH"><SUP><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2068img1.png ALT="$\scriptstyle \wedge$"></SUP></SPAN>2 databases in the following format:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Team</I>&nbsp;<I>number</I>&nbsp;&nbsp;&nbsp;&nbsp;<I>Problem</I>&nbsp;<I>number</I>&nbsp;&nbsp;&nbsp;&nbsp;<I>Time</I>&nbsp;<I>of</I>&nbsp;<I>submission</I>&nbsp;&nbsp;&nbsp;&nbsp;<I>Judgment</I></DIV><P></P>we are now left with the job of identifying the winner according to the local scoring rules. The local scoring system, which totally ignores the time of submission, is based on adding the values associated with the solved problems for each team and then declares the team, or teams, with the highest score as winner, or winners. The values associated with each problem are selected by the contest organizer and are made public in advance.<P>Your task is to write a program to use the data extracted from the PC<SPAN CLASS="MATH"><SUP><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2068img1.png ALT="$\scriptstyle \wedge$"></SUP></SPAN>2 database and declare the winner, or winners.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem consists of a sequence of one or more contests. Each contest is described by several lines as follows: <P><UL><LI>The first line consists of four integers: the contest label <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 10</SPAN>; the number of problems, <SPAN CLASS="MATH"><I>P</I></SPAN>, <!-- MATH
 $0 < P < 12$
 --><SPAN CLASS="MATH">0 &lt; <I>P</I> &lt; 12</SPAN>; the number of teams, <SPAN CLASS="MATH"><I>T</I></SPAN>, <!-- MATH
 $1 < T < 300$
 --><SPAN CLASS="MATH">1 &lt; <I>T</I> &lt; 300</SPAN>; and the number of submissions, <SPAN CLASS="MATH"><I>R</I></SPAN>, <!-- MATH
 $0 < R < 1000$
 --><SPAN CLASS="MATH">0 &lt; <I>R</I> &lt; 1000</SPAN>. The integers are separated by a single space. </LI><LI>The second line contains <SPAN CLASS="MATH"><I>P</I></SPAN> integers, separated by single space, that describe the values for the <SPAN CLASS="MATH"><I>P</I></SPAN> problems given in ascending order of problem numbers. Problems are numbered 1 to <SPAN CLASS="MATH"><I>P</I></SPAN>, and their values will be less than or equal to 100. </LI><LI>Each of the following <SPAN CLASS="MATH"><I>R</I></SPAN> lines describes the data about one submission, which consists of four (4) integers separated by a single space. The four integers describe team number, problem number, time of submission in milliseconds from start of the five (5) hours contest, and the judge's decision (zero for accepted, and non-zero for rejected). </LI></UL><P>The input will be terminated by a line that consists of four zeros (<TT>0 0 0 0</TT>), separated by a single space. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each contest, the output is one line that contains the contest label and numbers of the winning team numbers (sorted in increasing order) as shown in the Sample Output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 5 20 6 
3 3 10 30 100 
6 1 16024555 0 
3 2 15895629 4 
3 2 765629 0 
17 4 1120132 0 
3 2 1895629 3 
6 3 9024555 0 
2 5 20 7 
3 10 10 30 100 
6 1 16024555 0 
3 2 15895629 5 
3 2 765629 0 
17 4 1120139 0 
5 4 1895629 0 
6 3 9024555 0 
10 4 2895629 0 
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Contest 1 Winner: Team 17 
Contest 2 Winner: Team 5 and Team 10 and Team 17
</PRE><P>
______________________________________________________
2069||||||false||||||
<P>
A group of ACMers designed a variation, and a much simpler one at that, of the popular game TARGET to help them relax while waiting for the judges' declaration of the final scores. The game consists of finding words that satisfy certain criterion (e.g., start with ``dog" (``dogma") or contain ``cat" (``scatological"), used in the news today (``nuclear"), etc). 

<P>
For this game the group agreed that longer words are more worthy than short words and unusual words are better than common words, where commonness is defined as the number of participants who all think of the same word. The score for a word is calculated as its number of letters divided by the number of participants choosing it. Examples are: the word ``<SPAN ID="txt48">direkt</SPAN>" chosen by a single German participant scores ``6" points for her, and the word ``<SPAN ID="txt49">directly</SPAN>" chosen by three participants scores only ``8/3" for each of them. 

<P>
The total score for each participant is the sum of his/her individual word scores. The group has also set some rules for the game: 

<P>

<OL>
<LI>the number of participants to be between two (2) and nine (9), 
</LI>
<LI>the number of words chosen by a participant to have a maximum of nine (9) words, 
</LI>
<LI>each of the words, which naturally has at least one letter, to have a maximum of twenty (20) letters, and 
</LI>
<LI>the length of the name that a participant chooses for himself/herself to be between one (1) and ten (10) letters. 
</LI>
</OL>

<P>
Your task is to write a program that processes several lists of words, one for each participant, and determines the winner. You do not have to worry about checking the validity of the words against the criterion. The participants will perform this task as part of learning new and foreign words.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input for this problem consists of a sequence of one or more rounds of the game. Each round is described by several lines as follows: 

<P>

<UL>
<LI>The first line consists of a single integer, <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $1 < N < 10$
 -->
<SPAN CLASS="MATH">1 &lt; <I>N</I> &lt; 10</SPAN>; that describes the number of participants. 
</LI>
<LI>Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines starts with the name of a participant followed after a single space by a list of words, separated by a single space. The input will be terminated by a line that consists of a single zero (<TT>0</TT>). This line should not be processed.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each round, the output consists of two lines. The first line contains the round number starting with 1 as shown in the Sample Output below. The second line contains the names of participants with the highest score in this round, separated by a single space. The names must appear in the same order as they appear in the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
John dire direct direction 
Jane direkt 
Joan direction 
Janet vondire direction 
2 
john great admired politician 
Kim great loss poorer 
2 
peter moral choice 
paul moral choice 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Round 1 
John 
Round 2 
john 
Round 3 
peter paul
</PRE> 

<P>

______________________________________________________
2070||||||false||||||
<P>Chip and Dale have devised an encryption method to hide their messages. They first agree secretly on a number that will be used as the number of columns in a matrix. The sender prepares an intermediate format by removing capitalizations and punctuations and spaces from the message. The sender then enters the letters of the <SPAN ID="txt48">intermediate format</SPAN> along the diagonals of the matrix and pads with extra random letters so as to make a rectangular array of letters. For example, if the message is ``There's no place like my office on a muggy day" and there are five columns, Dale would write down<P><P><BR><DIV ALIGN="CENTER"><TT>t h r n a<BR>e e o c k<BR>s p e e f<BR>l l m f o<BR>i y i n g<BR>o c a g a<BR>e m y y x<BR>u d x x x</TT></DIV><P><P><BR>Note how Dale includes only the letters and writes them all in lower case. Dale then sends the message to Chip by writing the letters in each row. So, the message in its intermediate format would be encrypted as<P><DIV ALIGN="CENTER"><TT>thrnaeeockspeefllmfoiyingocagaemyyxudxxx </TT></DIV><P>In this example, Dale used the character `<TT>x</TT>' to pad the message out to make a rectangle, although he could have used any letter.<P>Your job is to recover for Chip the message in its intermediate format from the encrypted one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple input sets. Input for each set will consist of two lines. The first line will contain an integer in the range <SPAN CLASS="MATH">2...20</SPAN> indicating the number of columns used. The next line is a string of up to 200 lower case letters. The last input set is followed by a line containing a single zero (<TT>0</TT>). This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each input set should generate one line of output, giving the message in its <SPAN ID="txt59">intermediate format</SPAN> followed by the padding letters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
thrnaeeockspeefllmfoiyingocagaemyyxudxxx 
3 
thsiiesaysxx 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
theresnoplacelikemyofficeonamuggydayxxxx 
thisiseasyxx
</PRE><P>
______________________________________________________
2071||||||false||||||
<P>
The manager of a packing warehouse, which specialises in packing breakable items, contracted a supplier for boxes of sizes from the Fibonacci sequence. I am not sure of the reason behind it, but it is rumoured to be related to the recent ``Da Vinci code" movie. An item whose size is in the sequence can be packed in a box of equal size with no filling, but an item whose size is not in the sequence must be packed with sufficient filling material to fill the box and protect the item from breaking. An item cannot be split between two boxes, and each item must be packed separately in its own box.

<P>
The second twist in this story, which makes it the more bizarre, is that the company only receives a daily filling material delivery of size <SPAN CLASS="MATH"><I>F</I></SPAN> to be used. At the end of each day, any unused filling material is discarded. 

<P>
Your task is to maximize the number of items shipped each day for a given amount of filling material <SPAN CLASS="MATH"><I>F</I></SPAN> and a given list of items.

<P>

<P><P>
<BR>
<!-- MATH
 $\framebox{
\parbox{6in}{
Fibonacci Numbers are defined as:
\par
\begin{displaymath}
\begin{array}{rcll}
F(n) & = & n                 &       \qquad  \mbox{for } n < 2 \\
& = & F(n-1) + F(n-2)   &         \qquad  \mbox{for } n > 1
\end{array}
\end{displaymath}
\par
A list of the first few Fibonacci numbers are:
\par
\begin{center}
0 1 1 2 3 5 8 13 21 34 55 $\ldots$
\end{center}
\par
Note that each number, with the exception of the first two, is obtained by adding the preceding two numbers.
}
}$
 -->
<IMG
 WIDTH="713" HEIGHT="188" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2071img1.png
 ALT="\framebox{
\parbox{6in}{
Fibonacci Numbers are defined as:
\par
\begin{displayma...
...exception of the first two, is obtained by adding the preceding two numbers.
}
}">

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input to this problem consists of packing tasks for one or more days. The tasks for each day are described by two lines as follows: 

<P>

<UL>
<LI>The first line consists of three integers: the number of items <SPAN CLASS="MATH"><I>W</I></SPAN>, <!-- MATH
 $0 < W < 1000$
 -->
<SPAN CLASS="MATH">0 &lt; <I>W</I> &lt; 1000</SPAN> to be packed; the available size of filling material, <SPAN CLASS="MATH"><I>F</I></SPAN>, <!-- MATH
 $1 < F < 1000$
 -->
<SPAN CLASS="MATH">1 &lt; <I>F</I> &lt; 1000</SPAN>; and maximum size of each item, <SPAN CLASS="MATH"><I>S</I></SPAN>, <!-- MATH
 $1 < S < 100000000$
 -->
<SPAN CLASS="MATH">1 &lt; <I>S</I> &lt; 100000000</SPAN>. The integers are separated by a single space. 
</LI>
<LI>The following line contains <SPAN CLASS="MATH"><I>W</I></SPAN> integers separated by a single space that describe the sizes of items to be packed. 
</LI>
</UL>

<P>
The input will be terminated by a line that consists of three zeros (<TT>0 0 0</TT>), separated by a single space. This line should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each day, the output consists of one line that contains the number of items that can be packed for that day.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 10 30 
7 15 30 5 
11 100 5812167 
20 40 30 15 17 5812167 23 43 33 13 37 
0 0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
10
</PRE> 

<P>

______________________________________________________
2072||||||false||||||
<P>
The reading of ``Flatland: A Romance of Many Dimensions" by <SPAN  CLASS="textit">Edwin Abbott</SPAN> had a profound, and rather unusual, effect on young Bob and his mother too. Bob started to only use things that are either flat or with flat sides: Soup bowls, dishes, glasses, mugs, and even the cutlery. However the annoying part, for his mother that is, was the way he re-organized the cupboard. Bob removed all the shelves and drew a grid, with integer coordinates, (0 0) for the lower left corner and (1000 1000) for the upper right corner, on the back of the cupboard. Bob will always stack the crockery neatly on top of each other. Neatly means aligned with his grid, so that he can record the location of each item by four integers that describe the coordinates of its lower left corner and its upper right corner. For the example, the red mug (labelled with Zs) is described by the four integers (1 0 3 3).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2072.eps}$
 -->
<IMG
 WIDTH="818" HEIGHT="331" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/20/2072img1.png
 ALT="\epsfbox{p2072.eps}">
</DIV>

<P>
Bob's mother will not move a crockery item unless no other item in the cupboard exists vertically above it. This way she can be sure that none of Bob's precious mugs/glasses gets broken. Examples are: taking the yellow mug (labelled with Xs) requires her to move the grey ``rectangular" soup bowl (labelled with Ss) first, and taking the grey mug (labelled with Ys) requires her to move four items first.

<P>
Your task is to write a program to calculate for Bob's mother the number of items she must move before she can remove the item of her choice.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input to this problem consists of a sequence of one or more situations. Several lines describe each situation as follows: 

<P>

<UL>
<LI>The first line contains the number of crockery items <SPAN CLASS="MATH"><I>M</I></SPAN>, <!-- MATH
 $0 < M < 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>M</I> &lt; 100</SPAN>; given as an integer. 
</LI>
<LI>The second line consists of <SPAN CLASS="MATH">4 <TT>*</TT> <I>M</I></SPAN> integers (i.e., <SPAN CLASS="MATH"><I>M</I></SPAN> pairs of 2-dimensional coordinates), separated by a single space, that describe the exact positions of crockery items in the flat cupboard. 
</LI>
<LI>The third line consists of four (4) integers (i.e., a pair of 2-dimensional coordinates), separated by a single space, that describe the exact position of the item to be removed. 
</LI>
</UL>

<P>
The input will be terminated by a line that consists of a zero (<TT>0</TT>). This line should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each situation, the output is a single line that contains the number of objects to be removed before the desired item can be removed in accordance with Bob's mother desires.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
0 0 4 4 3 4 6 6 5 0 7 4 4 6 5 8 20 0 21 21 
20 0 21 21 
4 
0 0 4 4 3 4 6 6 5 0 7 4 4 6 5 8 
0 0 4 4 
0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 
2
</PRE> 

<P>

______________________________________________________
2073||||||false||||||
<P>A printed circuit board has a number of horizontal and vertical tracks that may be used to connect electronic components. The example below demonstrates a square board with 10 vertical tracks that we shall assign labels from 0 to 9 starting from the left end, 10 horizontal tracks that we shall assign labels from 0 to 9 starting from the bottom end, and 8 laid down wires (shown in black). Each wire occupies a single horizontal or a single vertical track, and is described by its lower left coordinate followed by its upper right coordinate. In the example below, the 8 wires are described by<P><DIV ALIGN="CENTER">0 0 1 0 4 0 4 6 0 5 5 5 8 2 8 6 6 4 6 7 7 6 7 8 2 6 5 6 7 8 9 8</DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="818" HEIGHT="316" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2073img1.png ALT="\epsfbox{p2073.eps}"></DIV><P>A horizontal wire may overlap with a vertical wire in a single grid point. A horizontal wire may not overlap with another horizontal wire, except at their endpoints. Similarly a vertical wire may not overlap with another vertical wire, except at their endpoints.<P>Your task is to write a program to identify a path on a printed circuit board to connect two given points on the grid, which adheres to the above rules, such that the number of points your path has in common with the existing wires is minimised. The four red wires, in the above example, connect the points (6 8) and (5 1) with minimum number of 1 overlap. The green wires connect the same two points with 2 overlaps.<P>In some cases a path may not exist, but your program will only be used to connect a pair of points in printed circuit boards where such a path is known to exist. Those cases will be identified and removed by a sophisticated imaging system, but that is another story.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem consists of a sequence of one or more design situations. Several lines describe each design situation as follows:<P><UL><LI>The first line consists of two integers: the number of existing wires, <SPAN CLASS="MATH"><I>M</I></SPAN>, <!-- MATH
 $0 < M < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>M</I> &lt; 100</SPAN>; the number of horizontal tracks (and also the number of vertical tracks) on a square printed circuit board <SPAN CLASS="MATH"><I>S</I></SPAN>, <!-- MATH
 $0 < S < 1000000000$
 --><SPAN CLASS="MATH">0 &lt; <I>S</I> &lt; 1000000000</SPAN>. The integers are separated by a single space. </LI><LI>The second line consists of <SPAN CLASS="MATH">4 <TT>*</TT> <I>M</I></SPAN> integers (i.e., <SPAN CLASS="MATH"><I>M</I></SPAN> pairs of 2-dimensional coordinates), separated by a single space, that describe the exact positions of the existing wires in the design. </LI><LI>The third line consists of four (4) integers (i.e., a pair of 2-dimensional coordinates), separated by a single space, that describe the exact positions of the two points to be connected. </LI></UL><P>The input will be terminated by a line that consists of two zeros (<TT>0 0</TT>). This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each design situation, the output is a single line that contains the minimum number of overlaps.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 10 
0 0 1 0 4 0 4 6 0 5 5 5 8 2 8 6 6 4 6 7 7 6 7 8 2 6 5 6 7 8 9 8 
6 8 5 1 
7 10 
0 0 1 0 4 0 4 6 0 5 5 5 8 2 8 6 6 4 6 7 2 6 5 6 6 4 8 4 
6 8 5 1 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
0
</PRE><P>
______________________________________________________
2074||||||false||||||
<P>
The Sudoku craze is sweeping the world, and that has got the ``Word Find" problem preparation company worried. The company wants to head off their losses in the market place by introducing a variation of the old game. This example, with 5 words and table size 8, is a typical <SPAN  CLASS="textit">second generation word find puzzle</SPAN>:

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=9 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
P </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> N </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> L </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Y </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>       CLASS </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> K </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> L </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> K </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>       ROCK </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

Q </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> L </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>       BOOK  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

U </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> S </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> K </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>       PENCIL </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> S </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> N </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> U </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>       PAPER </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> S </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  

N </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> K </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> N </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> K </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

J </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> X </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Y </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> N </TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Each of the given words may appear multiple times in the table more but no more than four (4) times. Each word may be oriented in any of the 8 possible directions. The aim is to locate the given words, which will be different to each other, with the added challenge that no two words may share a letter. A generated puzzle is ``soluble" if all the words can be found with no two words sharing a letter, and ``challenging" if at least one pair of the given words shares a letter in the table.

<P>
For the sake of saving development cost and reducing time-to-market, the company decided to use a tweaked version of their software to create the new puzzles and then reject those that are not suitable. Your task is to write a program to test the generated puzzles and to accept the ones that are both ``challenging" and ``soluble" and to reject all other puzzles. For the above example, your program should accept the generated puzzle and report ``<TT>YES</TT>" for being ``challenging" and ``<TT>YES</TT>" for being ``soluble". 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to this problem consists of a sequence of one or more puzzles. Each puzzle is described by several lines as follows: 

<P>

<UL>
<LI>The first line consists of two integers: the number of words, <SPAN CLASS="MATH"><I>W</I></SPAN>, <!-- MATH
 $1 < W < 10$
 -->
<SPAN CLASS="MATH">1 &lt; <I>W</I> &lt; 10</SPAN>; and the table size, <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $1 < N < 100$
 -->
<SPAN CLASS="MATH">1 &lt; <I>N</I> &lt; 100</SPAN>. The integers are separated by a single space. 
</LI>
<LI>Each of the following <SPAN CLASS="MATH"><I>W</I></SPAN> lines contains one word, which does not contain any spaces. 
</LI>
<LI>Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines describes one row of the table, which consists of <SPAN CLASS="MATH"><I>N</I></SPAN> letters separated by a single space. All letters are upper case. 
</LI>
</UL>

<P>
The input will be terminated by a line that consists of two zeros (<TT>0 0</TT>), separated by a single space. This line should not be processed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each puzzle, the output consists of two lines. The first line contains the puzzle number starting with the value of one (1), followed by a ``<TT>:</TT>`` and followed by `<TT>ACCEPT</TT>' or `<TT>REJECT</TT>' as shown in the Sample Output below. The second line contains `<TT>YES</TT>' if the puzzle is challenging and `<TT>NO</TT>' otherwise, followed by a single space, and followed by `<TT>YES</TT>' if soluble and `<TT>NO</TT>' otherwise.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 4 
PEN 
NET 
PET 
P E N S 
O N E T 
P E T K 
S P E N 
2 3 
NO 
OR 
O R M 
X R Y 
T N O 
2 2 
NO 
OR 
N O 
X R 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Puzzle 1: ACCEPT 
YES YES 
Puzzle 2: ACCEPT 
YES YES 
Puzzle 3: REJECT 
YES NO
</PRE> 

<P>

______________________________________________________
2075||||||false||||||
<HTML><HEAD><TITLE>Chairlift</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2K.1beta"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"><LINK REL="STYLESHEET" HREF="htmlatex.css"></HEAD><BODY LANG="EN" BGCOLOR=#FFFFFF><H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0000ff><TR><TD><B><FONT SIZE=5 COLOR=#FFff00>&nbsp;<A NAME="SECTION0001000000000000000000"> Chairlift</A>&nbsp;</FONT></B></TABLE></CENTER></H1><P>A chairlift is used to transport skiers (or summer sightseers) up the mountain. Figure 1 shows the components of a chairlift, viewed from the air above the chairlift:<P><CENTER><IMG BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/p2075a.gif></CENTER><P><blockquote><li>A closed-loop steel cable is in continuous motion around two rotating wheels (one at the bottom, one at the top of the mountain).<BR><BR><li>There are N equally spaced chairs suspended from the cable. N is an even integer, 18 <= N <= 300. In
Figure 1, N = 18. The chairs are shown as short dashes across the cable. You must understand that Figure
1 is a "snapshot", i.e., that the chairs are in continuous motion along with the cable.<BR><BR>
<li>The circumference of each wheel is equal to the distance between adjacent chairs.<BR><BR>
<li>Passengers ride up in the chairs on the "upward bound" side of the lift; the chairs come back down
empty on the "downward bound" side.<BR><BR>
<li>The loading station (see Figure 2) is located on the lift's upward bound side, at the point of tangency
between the cable and the wheel at the bottom of the mountain. When a chair goes by the loading station,
passengers will quickly board the chair; the chair doesn't stop (each chair is actually a bench , it can
hold up to 4 people).<BR><BR>
<li>The unloading station (see Figure 3) is also located on the lift's upward bound side, at the point of tangency between the cable and the wheel at the top of the mountain. When a chair goes by the unloading station, passengers will quickly get off the chair; the chair doesn't stop.<BR><BR>
</blockquote>

<P>
<CENTER>
<IMG BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/p2075a.gif>
</CENTER>

<P>
<blockquote>
<li>The chairs are numbered in the order in which they appear at the loading station when the lift is first
activated in the morning. That is, they are numbered starting at 1, increasing sequentially in a direction
opposite to the direction of motion. Figure 4 is a reproduction of Figure 1, showing chair numbers for the
case N = 18. (Remember that the figure is just a "snapshot", the chairs are in continuous motion.)
</blockquote>

<P>
<CENTER>
<IMG BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/p2075a.gif>
</CENTER>

<P>
Now that you are familiar with the chairlift, it is time to state the problem. Two friends, whom we shall
call Bob and Alice, are out for a day of skiing. They are just riding up in chair 56 and know that the lift
has 126 chairs. They also know that the ride from the loading station to the unloading station takes exactly
225.0 seconds. Bob asks Alice: "How much longer will the ride take?" Alice doesn't look at her watch. Instead,
she waits until their chair meets a downward bound empty chair, notes that the number of that chair is 71,
and replies: "We have 198.9 more seconds to go." (An upward bound chair and a downward bound chair "meet" when
they are exactly opposite each other (i.e., both chairs are equidistant from the top of the mountain). At the
instant shown in Figure 4, no two chairs meet, but very soon thereafter, chairs 6 and 7, as well as chairs 5
and 8, etc., would meet.)<BR>
Your program will carry out Alice's computations. 
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input file will contain N, followed by T. The constraints on N were previously
stated. T (the time it takes to  ride from the loading station to the unloading station) is a floating
point number, measured in seconds, 200.0 <= T <= 999.9. The first line will be followed by one or more
additional lines of input. On each of these additional lines, there will be exactly two integer values
in the range 1..N, representing two distinct chairs. The first of these chairs is the upward bound chair
in which Bob and Alice are riding. The second chair is the downward bound chair they meet when Alice
announces the remaining time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
After displaying N and T, the program will produce one line of output, containing the two chair numbers
and the remaining time, for each pair of chairs in the input. Pay attention to all formatting details,
such as punctuation, upper/lower case letters, the alignment of certain words, blank spaces, and the
absence of blanks lines.

<P>
Here is a formatting template shown between two lines of the above output:

<P>
<PRE>
1234567890123456789012345678901234567890123456789
N = 126, T = 225.0
Chair  56 meets chair  71, remaining time = 198.9
</PRE>

<P>
Note in particular, that:

<blockquote>
<li>all numerical values are right-justified in the output fields shown by the formatting template.
<li>floating point values (representing seconds) will be displayed with one digit following the decimal point.
</blockquote>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
126 225.0
56 71
31 120
100 53
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Program 1 by team X
N = 126, T = 225.0
Chair  56 meets chair  71, remaining time = 198.9
Chair  31 meets chair 120, remaining time =  65.7
Chair 100 meets chair  53, remaining time =  83.7
End of program 1 by team X
</PRE>

<P>


<P>
<BR><HR>
<ADDRESS>
Mountain Region'2000
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
2076||||||false||||||
<HTML><HEAD><TITLE>Reserve Bookshelf</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2K.1beta"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"><LINK REL="STYLESHEET" HREF="htmlatex.css"></HEAD><BODY LANG="EN" BGCOLOR=#FFFFFF><H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0000ff><TR><TD><B><FONT SIZE=5 COLOR=#FFff00>&nbsp;<A NAME="SECTION0001000000000000000000"> Reserve Bookshelf</A>&nbsp;</FONT></B></TABLE></CENTER></H1><P>A very small rural library has only one shelf dedicated to reserve books (reserve books are deemed important to a large number of library users and can therefore be checked out only for very short periods of time) .<P>When the library's staff places a book on reserve, the book is put on the reserve shelf's left end. All books that were already on the reserve shelf must therefore be moved to the right, just enough to make room for the new book on the shelf. When a reserve book is checked out and subsequently returned, it is also put on the reserve shelf's left end, as if it were just being placed on reserve. What happens when the shelf is full? When a book is placed on reserve, or when a previously checked out reserve book is returned, and there is not enough room on the reserve bookshelf, then, starting at the right end, as many books (but no more) are removed from the reserve shelf (they are "taken off reserve") as needed in order to make room for the book to be put on the reserve bookshelf.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line of the input file contains a single integer, the total available space on the reserve book shelf (when it is empty), measured in millimeters (1 inch equals about 25 millimeters). Its value will be at least 250 and at most 1500. Your program will start with an empty reserve book shelf.<P>Each subsequent line of input will start with one of the four commands ADD, CHECKOUT, RETURN, PRINT in upper case letters, starting in column 1.<blockquote><li>The ADD command is followed by a title (starting in column 10), consisting of at most 29 printable characters. The title is followed (starting in column 40) by the thickness of the book (the amount of book shelf space it will require), a positive integer, not greater than 150. The effect of the ADD command will be to place a new title on reserve, as described above. Once a particular title has been ADDed, it will not be ADDed again as long as that book is on the reserve book shelf or has been checked out. However, if a title has been forced off the reserve book shelf (by another ADD command or by a RETURN command) then that title may appear in a subsequent ADD command (with the same thickness as before).<BR><BR><li>The CHECKOUT command is followed by a title (starting in column 10) which is currently on the reserve shelf. The effect of the CHECKOUT command is to remove the specified title from the reserve shelf (until it is placed back on the reserve shelf by a subsequent RETURN command.<BR><BR><li>A CHECKOUT may create a gap between two books (for example, when "The C Programming Language" is checked out in the example shown). Such a gap will count as part of the free space.<BR><BR><li>The RETURN command is followed by a title (starting in column 10) which is currently checked out. The effect of the RETURN command is to put the specified book to the left end of the reserve shelf, as described in the introductory paragraphs.<BR><BR><li>The effect of the PRINT command will be to display in the output file: the title and thickness of each book currently on the reserve shelf, one book per line, in the (left-to-right) order in which the books are currently on the reserve shelf, the currently available space on the reserve shelf, and one blank line.</blockquote><P>There will not be any trailing blank spaces in the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Pay attention to all formatting details, such as punctuation, upper/lower case characters, and the presence or absence of blank spaces and blank lines. All titles, as well as the sentence "AVAILABLE SHELF SPACE:" are left-justified, starting in column 1. All numerical quantities are displayed right-justified, with the unit's digit in column 34.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
250
PRINT
ADD      101 Uses for a Dead Cat       38
ADD      Thin Thighs in 30 Days        63
ADD      The Republic                  44
ADD      Mein Kampf                    101
PRINT
ADD      Principia Mathematica         79
PRINT
CHECKOUT The Republic
ADD      On the Origin of Species      55
ADD      The C Programming Language    15
PRINT
RETURN   The Republic
ADD      101 Uses for a Dead Cat       38
CHECKOUT The C Programming Language
PRINT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Program 2 by team X
AVAILABLE SHELF SPACE:         250

Mein Kampf                     101
The Republic                    44
Thin Thighs in 30 Days          63
101 Uses for a Dead Cat         38
AVAILABLE SHELF SPACE:           4

Principia Mathematica           79
Mein Kampf                     101
The Republic                    44
AVAILABLE SHELF SPACE:          26

The C Programming Language      15
On the Origin of Species        55
Principia Mathematica           79
Mein Kampf                     101
AVAILABLE SHELF SPACE:           0

101 Uses for a Dead Cat         38
The Republic                    44
On the Origin of Species        55
Principia Mathematica           79
AVAILABLE SHELF SPACE:          34

End of program 2 by team X
</PRE><P><P><BR><HR><ADDRESS>Mountain Region'2000</ADDRESS></BODY></HTML></HTML>
______________________________________________________
2077||||||false||||||
<HTML><HEAD><TITLE>Clock</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2K.1beta"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"><LINK REL="STYLESHEET" HREF="htmlatex.css"></HEAD><BODY LANG="EN" BGCOLOR=#FFFFFF><H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0000ff><TR><TD><B><FONT SIZE=5 COLOR=#FFff00>&nbsp;<A NAME="SECTION0001000000000000000000"> Clock</A>&nbsp;</FONT></B></TABLE></CENTER></H1><P>You are given a standard 12-hour clock with analog display, an hour hand and a minute hand. How many times does the minute hand pass the hour hand in a given time interval?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file contains an indefinite number of lines; each line contains four numbers. The first pair of numbers represents an "initial time"; the second pair represents a "final time". In each such number pair, the first number represents hours, second number represents minutes. The hours will be in the range 1..12, the minutes in the range 0..59. No initial time and no final time will be an instant at which the minute hand just passes the hour hand. (In particular, 12 00 will not occur as an initial or final time). No initial time will be the same as the corresponding final time. Between each initial time and corresponding final time, the hour hand will have turned less than one full revolution (360 degrees). As the hour hand turns from its initial position to its final position, it may or may not sweep past the number 12 on the clock's dial. If it does, then either the initial time is an "A.M." time and the final time a "P.M." time, or vice versa. If it does not, then either both times (initial and final) are "A.M." or both are "P.M.".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Each line of input gives rise to one line of output, containing the initial and final times, and the number of times the minute hand passes the hour hand between the initial time and the final time. Observe all details of formatting, such as upper/lower case letters, punctuation, blank spaces, and the absence of blank lines. In each time display, the hours and minutes are displayed in fields of width 2, separated by a colon. The ten's digit (of hours or minutes) is displayed as a zero if it is zero.<P>Here is a formatting template shown between two lines of the above output:<P><pre>
Initial time  Final time  Passes
12345678901234567890123456789012
       12:50       01:02       0
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
12 50  1  2
 3  8  3 20
 2 45 11  0
11  0  3 20
 1  2 12 50
 3 20  3  8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Program 3 by team X
Initial time  Final time  Passes
       12:50       01:02       0
       03:08       03:20       1
       02:45       11:00       8
       11:00       03:20       4
       01:02       12:50      11
       03:20       03:08      10
End of program 3 by team X
</PRE><P><P><BR><HR><ADDRESS>Mountain Region'2000</ADDRESS></BODY></HTML></HTML>
______________________________________________________
2078||||||false||||||
<P>Given a triangle, you're asked to find the points with integer coordinates in its interior.<P>Figure 1 illustrates the first triangle of the sample input, and the points with integer coordinates in its interior. Note that (1,3) lies on this triangle's border and is therefore not encapsulated by the triangle.<P><center><IMG SRC="http://livearchive.onlinejudge.org/external/20/p2078a.gif></center><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each line of the input will specify the x- and y-coordinates of the three vertices of a triangle in the xy-plane, starting at some vertex and proceeding clockwise. For each vertex, the x-coordinate will be specified before the y-coordinate. Each x- and y-coordinate will be an integer in the range -9..9. The input file will consist of one or more lines.<P>Each triangle specified in the input will encapsulate at least one point with integer coordinates. Within each line of input, the difference between the largest and smallest x-coordinate will not exceed 9.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each triangle specified in the input file, the output will list all points in the xy-plane which have integer coordinates and lie in the triangle's interior (such points are said to be encapsulated by the triangle). Points that lie on one of the triangle's borders (in particular, the vertices of the triangle) will not be listed in the output.<P>Points (x, y) which are listed on one line of output have the same y-coordinate; the x-coordinates of these points are in increasing order from left to right. The y-coordinates of points in the interior of a triangle will be in decreasing order from one line of output to the next line.<P>Each (x, y) point will be printed in a nine-column output field. Points that have the same x-coordinate (and pertain to the same triangle) will be listed in the same nine-column output field. Here is a formatting template between two lines of the above output:<P><pre>
                           ( 2,  3) ( 3,  3) 
12345678901234567890123456789012345678901234567890
(-1,  2) ( 0,  2) ( 1,  2) ( 2,  2) ( 3,  2) 
</pre><P>Each nine-column output field has the following layout (unless it is blank):<blockquote><li>Column 1: opening parenthesis <li>Columns 2-3 : x coordinate (right justified) <li>Column 4: comma <li>Columns 5-7 : y-coordinate (right justified) <li>Column 8 : closing parenthesis. <li>Column 9: blank space to separate current nine-column field from the next one, if there is a next one.</blockquote><P>The line(s) containing the smallest x-value pertaining to a particular triangle (such as -1 for the first triangle in the above example) will not start with a blank output field. There will not be a blank output field between two non-blank ones on a given line. After listing the points encapsulated by each triangle, your program will produce one blank line of output. There will not be any additional blank lines in the output.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4  4  2 -1 -2  2
2  4  4 -3  0 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Program 4 by team X
                           ( 2,  3) ( 3,  3)
(-1,  2) ( 0,  2) ( 1,  2) ( 2,  2) ( 3,  2)
         ( 0,  1) ( 1,  1) ( 2,  1)
                  ( 1,  0) ( 2,  0)

         ( 2,  3)
         ( 2,  2)
( 1,  1) ( 2,  1)
( 1,  0) ( 2,  0) ( 3,  0)
( 1, -1) ( 2, -1) ( 3, -1)
                  ( 3, -2)

End of program 4 by team X
</PRE><P>
______________________________________________________
2079||||||false||||||
<P>The Zhombi tribe populates an island in the South Pacific. The tribe consists of a number of clans (which are collections of related families). The tribe has a chief, and so does each clan.<P>When a tribal law is proposed, the voting members of each clan convene and vote on the proposal. In case of a tie, the clan chief (who is otherwise not a voting member) will break the tie.<P>After the clans have voted, the clan chiefs convene at the tribal headquarters to conduct the tribal level vote, which will determine whether the proposal passes. There each clan chief will cast a number of votes equal to the number of voting members of his/her tribe. Furthermore, <u>all</u> votes cast by one clan chief will be either in favor of the proposal or against the proposal, depending on how his/her clan voted. For example, if clan A has 28 voting members and voted in favor of the proposal, then clan A's chief will cast all 28 votes in favor of the proposal at the tribal level, even if the vote at the clan level was "15 for 13 against", or if the vote at the clan level was a 14:14 tie that the clan chief chose to break in favor of the proposal. In case of a tie at the tribal level vote, the tribal chief (who is otherwise not a voting member) will break the tie.<P>You probably suspect now that a proposal could pass at the tribal level even if fewer than 50% of all votes were cast in its favor at the clan level. The main goal of the program will be to determine the smallest number of clan-level votes needed to pass a law at the tribal level, without having to break a tie either at the clan level or at the tribal level.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input to your program will contain several test cases, each one in a line. Each test case consists of at least two, but no more than 20 integers, all on one line, separated by blank spaces, without any trailing blanks. Each of these numbers will be in the range 2..999.<P>Each number in the input file represents the number of voting members of a clan (not counting the chief). We will refer to the clans of the tribe by upper case letters, in alphabetical order. Thus, the data in this example specify that the tribe consists of four clans, A, B, C, and D, having 28, 12, 15, and 7 voting members, respectively.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output for each test case presents a scenario in which a proposal passes at the tribal level with the smallest possible number of supporting votes at the clan level, without having to break a tie either at the clan level or at the tribal level.<blockquote><li>The line labeled "Clan" lists (in increasing alphabetical order) those clans that voted in favor of the proposal. <li>The line labeled "Clan level votes" lists the (smallest) number of clan-level votes needed from each clan that voted in favor of the proposal, in order to pass the proposal at the tribal level. In those clans that are not listed, all votes were cast against the proposal. <li>The line labeled "Tribal level votes" lists the votes cast in favor of the proposal at the tribal level.</blockquote><p>In the two "summary" lines:<blockquote><li>The number 19 represents the crux of the results, it is the smallest number of clan-level votes which can result in the stated goal. <li>The total (62 in this case) will always be the same number on the two "summary" lines; it is simply the sum of the numbers in the input. <li>The percentage of tribal-level votes (56.5% in this case) will always be greater than 50% (in some cases the output, rounded to one decimal place, may be 50.0% even though the actual percentage is greater than 50%).</blockquote><p>There could be several correct instances. In particular, for a given input, all correct instances of output will be identical on the line "Clan level summary". Other lines of the output may be different, as long as the conditions of the problem are met.<p>Pay attention to all formatting details, such as the presence or absence of blanks lines, blank spaces, punctuation, upper/lower case letters. The letters and numbers displayed on the "Clan", "Clan level votes", and "Tribal level votes" lines are right-justified in fields of width 4. Integer values that appear in the "summary" lines are right-justified in fields of width 6. You may assume that no more than 14 clans voted in favor of the proposal.<p>Here is a formatting template shown between two lines of the second instance of output from above:<p><PRE>
Tribal level votes:  12  15   7
12345678901234567890123456789012345678901234567890
Clan level summary:      19 out of    62, 30.6%
</PRE><p>Note the column numbers of the '9' in 19, the comma, the decimal point, and the percent sign. The percentages are displayed to a precision of one digit after the decimal point.<p>Print a blank line between consecutive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
28 12 15 7
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Program 5 by team X 

Clan:                 A   D
Clan level votes:    15   4
Tribal level votes:  28   7

Clan level summary:      19 out of    62, 30.6%
Tribal level summary:    35 out of    62, 56.5% 
End of program 5 by team X
</PRE><P>&nbsp;<p><b>Non-uniqueness of output:</b><p>For the specific input shown above, the output shown above is not the only correct output. Here is another instance of correct output for the input shown above:<pre>
Program 5 by team X

Clan:                 B   C   D
Clan level votes:     7   8   4
Tribal level votes:  12  15   7

Clan level summary:      19 out of    62, 30.6%
Tribal level summary:    34 out of    62, 54.8% 
End of program 5 by team X
</pre><P>
______________________________________________________
2080||||||false||||||
<P>Floating point numbers are represented at the hardware level of most computer systems in <u>normalized binary scientific notation</u>. We will consider a hypothetical computer in which floating point numbers are represented in a 16-bit word. An example is shown in Figure 1:<P><center><IMG SRC="http://livearchive.onlinejudge.org/external/20/p2080a.gif></center><P>In the common Intel chips, the exponent of a float has 8 bits and the mantissa has 23 bits, otherwise the representation is the same as in Figure 1.<P>We will show that this particular example represents the number whose usual decimal representation is -10.375.<p>The leftmost bit (the sign bit) is 1 if the floating point number is negative, 0 otherwise.<p>The next seven bits (<b>1000010</b> in this example) represent the Exponent component of the normalized binary scientific notation. The following two operations will reveal the exponent's actual value:<blockquote><li>Evaluate the binary number <b>1000010</b>: it is <b>1</b>*64+<b>0</b>*32+<b>0</b>*16+<b>0</b>*8+<b>0</b>*4+<b>1</b>*2+<b>0</b>*1 = 66.<br><li>Subtract the bias correction 63 from 66, which yields 3 as the actual value of the exponent that we will use below (the purpose of the bias correction is to allow negative exponents. As long as the exponent has seven bits, which will always be the case in this program, the bias correction is 63 = 2<sup>7-1</sup> - 1).</blockquote><p>The remaining 8 bits (01001100 in this example) constitute the mantissa, which is the fractional part of the normalized binary scientific notation. You will see in the next step how it is used.<p>The sign bit, the mantissa, and the exponent are used to calculate the value of the floating point number:<P><center><IMG SRC="http://livearchive.onlinejudge.org/external/20/p2080a.gif></center><P><blockquote><li>The period preceding the mantissa is the "binary point" which has the same meaning as the decimal point in a decimal (base ten) representation. <li>In the normalized binary scientific notation there is only one binary digit preceding the binary point, and it is always 1 (except if the floating point number is the number zero). It is called the characteristic. Since it is always 1, it does not explicitly appear in the 16-bit representation of Figure 1.</blockquote><p>Since the number 1.01001100 is in binary, the digits to the right of the binary point represent successive negative powers of 2. Therefore, the number shown in Figure 2 can be re-written as:<P><center><IMG SRC="http://livearchive.onlinejudge.org/external/20/p2080a.gif></center><p>Here the result has been expressed using scientific notation (base ten). Most programming languages would output this result as -1.0375e+001. The use of a lower case "e" or upper case "E", and the number of leading zeros in the exponent can vary from one programming language to another.<p><u>An important exception:</u> if all bits except the sign bit are zero, then the floating point number is zero, regardless of the sign bit.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input contains an undetermined number of lines. Each line contains, starting in column 1, exactly 16 printable characters which can be any permutation of 0s and 1s. The first character represents the sign bit, the next seven characters, the exponent, and the last eight characters, the mantissa of a floating point number in normalized binary scientific notation according to the conventions discussed on the preceding page.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Each floating point number read from the input will be written by your program to the output file, one number per line.<p>The following formatting conventions are required in your output:<blockquote><li>The floating point numbers will be displayed in scientific notation (base ten). <li>Column 1 will either be blank (indicating a positive number or zero) or contain a minus sign (indicating a negative number). <li>Column 2 will contain a digit. <li>Column 3 will contain the decimal point. <li>Columns 4 - 9 will contain six additional significant digits of the floating point number. <li>The remaining columns will specify the exponent of scientific notation. The sign and magnitude of the exponent must of course be correct, but the exact format in which the exponent is displayed will be determined by the programming language you use.</blockquote><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1100001001001100
0011111100000000
1011111110000000
0000000010101010
0011011111100000
1001111011100000
0101011001010101
0100011011101101
0111111111111111
1100001000101100
0000000000000000
1000000000000000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Program 6 by team X
-1.037500e+001
 1.000000e+000
-1.500000e+000
 1.804180e-019
 7.324219e-003
-2.182787e-010
 1.117389e+007
 2.465000e+002
 3.682143e+019
-9.375000e+000
 0.000000e+000
 0.000000e+000
End of program 6 by team X
</PRE><P>
______________________________________________________
2081||||||false||||||
<P>Bio-informatics is an exciting new field of science, in which computer science techniques are applied to solving biological problems. The search for genetic drugs is one of the central problems of bio-informatics. In tackling this problem, <u>genes from various organisms are compared</u>.<p>A gene is characterized by the sequence of amino acids that can be derived from it. There are altogether 20 amino acids. Each amino acid is identified by a one-letter abbreviation of its full chemical name (the upper case letters of the alphabet, except B, J, O, U, X, and Z, are used to identify amino acids).<p>Your program will look for discrepancies among the amino acid sequences of the given organisms.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each logical column of the input specifies a particular gene from a different organism. The number of organisms is at least three but not greater than eight.<p>The first line specifies the names of the organisms. Each name consists of at least one but not more than eight lower case characters and is right-justified in a field of width 9 characters.<p>Each of the remaining lines specifies an amino acid for each of the organisms listed on the first line. Each amino acid is represented by its one-letter abbreviation, right-justified in a field of width 9 characters, under the name of the organism with which it is associated. Thus, in the example shown, the amino acid sequence for the particular yeast gene is M, E, S, L, D, A, N, C, T, M.<p>The amino acid sequences of all organisms represented in a given input file will have the same length (in this example, 10). The minimum length of the amino acid sequences in the input file is 10, the maximum length is 9999.<p>Each amino acid in the amino acid sequence of a particular gene occupies a certain position. The positions are numbered starting at 1 and they increase sequentially. Thus, the yeast sequence in the example shown has M in positions 1 and 10, E in position 2, A in position 6, etc.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For those positions in which all organisms have the same amino acid (positions 1, 2, 5, 6, and 9 in the example shown), no output will be produced.<p>In those positions in which not all organisms have the same amino acid (positions 3, 4 ,7, 8 and 10 in the example shown) your program will:<blockquote><li>Print the position number. <li>Identify by an asterisk those organisms that deviate (in that particular position) from the most frequently occurring amino acid (in that particular position). <li>In position 3 of the given example, S is certainly the most frequently occurring amino acid, and human is the only organism that does not have S in position 3. <li>In case of a tie for the most frequently occurring amino acid in a particualar position, the amino acid that as the rightmost occurrence (among those involved in the tie) will be chosen as the most frequent one. For example, in position 8 in the given example, both C and A occur twice. We choose C as the most frequent amino acid in position 8, because its rightmost occurrence is under yeast, which is further right than the rightmost occurrence of A (nematode) in this position. In the given example, there is an extreme case of a tie in position 10: all five organisms have different amino acids. Therefore, the amino having the rightmost occurrence, namely R, will be designated as the most frequent one.</blockquote><p>Two lines of the above output are reproduced here with a formatting template:<p><pre>
         1         2         3         4         5         6         7
12345678901234567890123456789012345678901234567890123456789012345678901234567890
         human fruitfly nematode    yeast bacteria
   3         *                                    
</pre><p>Note in particular:<blockquote><li>The position numbers are right justified in columns 1-4. <li>Column 5 is blank. <li>Starting in column 6, the output (name of an organism or an asterisk) will be right-justified in fields of width 9.</blockquote><p>Also pay attention to formatting details, such as upper/lower case variations, blank spaces, and the absence of blank lines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
human fruitfly nematode    yeast bacteria
        M        M        M        M        M
        E        E        E        E        E
        C        S        S        S        S
        L        L        L        L        W
        D        D        D        D        D
        A        A        A        A        A
        K        Q        G        N        G
        C        A        A        C        K
        T        T        T        T        T
        S        H        E        M        R
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Program 7 by team X
         human fruitfly nematode    yeast bacteria
   3         *
   4                                             *
   7         *        *                 *
   8                  *        *                 *
  10         *        *        *        *
End of program 7 by team X
</PRE><P>
______________________________________________________
2082||||||false||||||
<P>This program will acquaint you with the judicious method used by rulers of the ancient Roman empire to choose the locations of their military forts.<p>You are given a collection of cities. The cities will be labeled by upper case letters in alphabetical order, starting with 'A'. Given any pair of cities, there is one and only one path between them (see Figure 1).<P><center><IMG SRC="http://livearchive.onlinejudge.org/external/20/p2082a.gif></center><P>This path may be a direct connection (as between J and C in Figure 1) or it may pass through a number of intermediate cities (as between J and B in Figure 1). In the example of Figure 1, the path from J to B passes through C, G, and F.<P>The actual number of miles between cities is irrelevant. The <u>distance</u> between a pair of cities is defined as the number of hops (each "hop" being taken over a over a direct connection) between them. In Figure 1, the number of hops between J and C is 1, and the number of hops between J and B is 4.<P>Initially, only one of the cities is fortified (by a military fort). As your program executes, additional cities will be fortified. If a city is not fortified, we say it is vulnerable. Furthermore, if a city is vulnerable, its degree of vulnerability is defined as the shortest distance between it and a fortified city. When one or more cities have already been fortified, the location of an additional fort is chosen by a simple rule: it is the most vulnerable city (the one having the highest degree of vulnerability). In case of a tie, choose the alphabetically first city among those tied as the most vulnerable city.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line of the input contains three items of information, separated by one or more blank spaces:<blockquote><li>The total number of cities in the given collection. It will be in the range 3..26. In this example, it is 11, which means that the cities are labeled A..K. <li>An upper case letter in the valid range of cities, denoting the city which is initially fortified. <li>The total number of cities that are to be fortified, including the initially fortified one. It will be at least three and not greater than the total number of cities in the collection</blockquote><P>Each of the remaining lines of the input file will contain two upper case letters, separated by one or more blank spaces. Each letter will be in the range of labels of cities in the given collection. Each pair of letters on one line of input determines a direct connection between two cities. The direct connections listed in the sample input is identical to the direct connections of Figure 1. The set of direct connections listed in the input will satisfy all previously stated conditions.<p>All lines of input will be free of leading or trailing blank spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output will list the cities to be fortified, as upper case letters, in the correct order.<p>The upper case letters denoting the cities in the output will be separated by one blank space. There will not be any blank lines or leading blank spaces in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
11 J 5
A D
B E
F B
C G
F G
C A
G H
G I
J C
K F
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Program 8 by team X
J E D H K
End of program 8 by team X
</PRE><P>&nbsp;<p><b>Explanation of the sample output:</b><p>When there is only one fortified city, the degree of vulnerability of each vulnerable city is its distance from the fortified city. Initially, with J being the only fortified city, E is the most vulnerable city with degree of vulnerability 5.<p>With J and E being fortified, D, H, I, and K contend for being the most vulnerable city, all having degree of vulnerability 3. For example, the distance from D to E is 6, the distance from D to J is 3; the smaller of these two numbers is 3. Therefore, the degree of vulnerability of D is 3. The alphabetically first city among the four contenders (D, H, I, and K) is D, which will be the next city to be fortified.<p>Similarly, H, and then K, will be selected as the next city to be fortified. At this point, the number of fortified cities is 5 (as specified in the input), and the program terminates. Note that city I is not fortified, because its degree of vulnerability drops from 3 to 2 once H is fortified, making K the most vulnerable city.<p>
______________________________________________________
2083||||||false||||||
<p>A simple mathematical formula for <i>e</i> is</p><p align="center"><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2083img1.jpg ALT="e = summation ( 1 / i!, i = 0, i = n )"></p><p>where <i>n</i> is allowed to go to infinity. This can actually yield very accurate approximations of <i>e</i> using relatively small values of <i>n</i>.</p><h2><font size="4" color="#ff0000"><a name="INPUT">Input</a> </font></h2><p>There is no input file for this problem.</p><h2><font size="4" color="#ff0000"><a name="OUTPUT">Output</a> </font></h2><p>Output the approximations of <i>e</i> generated by the above formula for the values of <i>n</i> from 0 to 9. The beginning of your output should appear as in the sample output below.</p><h2><font size="4" color="#ff0000"><a name="SAMPLE_INPUT">Sample Input</a> </font></h2><p>There is no sample input for this problem.</p><h2><font size="4" color="#ff0000"><a name="SAMPLE_OUTPUT">Sample Output</a> </font></h2><p><pre>
n e
- -----------
0 1
1 2
2 2.5
3 2.666666667
4 2.708333333
</pre></p>
______________________________________________________
2084||||||false||||||
<p>Imagine a perfectly formed honeycomb, spanning the infinite Cartesian plane. It is an interlocking grid composed of congruent equilateral hexagons. One hexagon is located so that its center is at the origin and has two corners on the X-axis. A bee must be very careful about how it travels in order not to get lost in the infinite plane. To get from an arbitrary point A to another arbitrary point B, it will first head from A to the exact center of the hexagon in which A is located. Then, it will travel in a straight line to the exact center of an adjacent hexagon. It will move from center to adjacent center until it has reached the hexagon containing point B. At the destination hexagon, it will move from the center to point B. In all cases, the bee will take a path of minimal distance that obeys the rules. The figure below demonstrates one possible minimal path from point A to point B.</p><p align="center"><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2084img1.jpg ALT="graphic of a honeycomb"></p><h2><font size="4" color="#ff0000"><a name="INPUT">Input</a> </font></h2><p>Input will be in the form of 5 floating point numbers per line. The first number will be the length, in centimeters, of the sides of the hexagons. The next two numbers will be the x and y coordinates of point A, followed by the x and y coordinates of point B. The input will be terminated by a line containing five zeroes. Neither point A nor point B will ever be exactly on a border between hexagons.</p><h2><font size="4" color="#ff0000"><a name="OUTPUT">Output</a> </font></h2><p>For each line of the input, output the minimum length of a path from point A to point B, to the nearest 0.001 centimeters.</p><h2><font size="4" color="#ff0000"><a name="SAMPLE_INPUT">Sample Input</a> </font></h2><p><pre>
1.0 -3.2 2.2 3.3 0
9 1 4 5 1
0.1 0.09 0 0.21 0
0 0 0 0 0
</pre></p><h2><font size="4" color="#ff0000"><a name="SAMPLE_OUTPUT">Sample Output</a> </font></h2><p><pre>
7.737
5.000
0.526
</pre></p>
______________________________________________________
2085||||||false||||||
<p>The <i>digital root</i> of a positive integer is found by summing the digits of the integer. If the resulting value is a single digit then that digit is the digital root. If the resulting value contains two or more digits, those digits are summed and the process is repeated. This is continued as long as necessary to obtain a single digit.</p><p>For example, consider the positive integer 24. Adding the 2 and the 4 yields a value of 6. Since 6 is a single digit, 6 is the digital root of 24. Now, consider the positive integer 39. Adding the 3 and the 9 yields 12. Since 12 is not a single digit, the process must be repeated. Adding the 1 and the 2 yields 3, a single digit and also the digital root of 39.</p><h2><font size="4" color="#ff0000"><a name="INPUT">Input</a> </font></h2><p>The input file will contain a list of positive integers, one per line. The end of the input will be indicated by an integer value of 0.</p><h2><font size="4" color="#ff0000"><a name="OUTPUT">Output</a> </font></h2><p>For each integer in the input, output its digital root on a separate line of the output.</p><h2><font size="4" color="#ff0000"><a name="SAMPLE_INPUT">Sample Input</a> </font></h2><p><pre>
24
39
0
</pre></p><h2><font size="4" color="#ff0000"><a name="SAMPLE OUTPUT">Sample Output</a> </font></h2><p><pre>
6
3
</pre></p>
______________________________________________________
2086||||||false||||||
<p>In this problem, you will be given a series of lists containing both words and numbers. The goal is to sort these lists in such a way that all words are in alphabetical order and all numbers are in numerical order. Furthermore, if the <i>n</i><sup>th</sup> element in the list is a number, it must remain a number, and if it is a word, it must remain a word.</p><h2><font size="4" color="#ff0000"><a name="INPUT">Input</a> </font></h2><p>The input will contain multiple lists, one per line. Each element of the list will be specified by a comma followed by a space, and the list will be terminated by a period. Words will contain only letters (and no two words will be duplicated), while numbers will contain only digits and the optional plus or minus sign at the very beginning and will fit into a 32-bit signed integer. The input will be terminated by a line containing a single period.</p><h2><font size="4" color="#ff0000"><a name="OUTPUT">Output</a> </font></h2><p>For each list in the input, output the scramble sorted list, separating each element of the list with a comma followed by a space, and ending the list with a period.</p><h2><font size="4" color="#ff0000"><a name="SAMPLE_INPUT">Sample Input</a> </font></h2><p><pre>
0.
banana, strawberry, OrAnGe.
Banana, StRaWbErRy, orange.
10, 8, 6, 4, 2, 0.
x, 30, -20, z, 1000, 1, Y.
50, 7, kitten, puppy, 2, orangutan, 52, -100, bird, worm, 7, beetle.
.
</pre></p><h2><font size="4" color="#ff0000"><a name="SAMPLE OUTPUT">Sample Output</a> </font></h2><p><pre>
0.
banana, OrAnGe, strawberry.
Banana, orange, StRaWbErRy.
0, 2, 4, 6, 8, 10.
x, -20, 1, Y, 30, 1000, z.
-100, 2, beetle, bird, 7, kitten, 7, 50, orangutan, puppy, 52, worm.
</pre></p>
______________________________________________________
2087||||||false||||||
<p>XML, eXtensible Markup Language, is poised to become the <i>lingua franca</i> of structured data communication for the foreseeable future, due in part to its strict formatiing requirements. XML parsers must report anything that violates the rules of a <i>well-formed</i> XML document. An XML document is said to be well-formed if it meets all the well-formedness constraints as defined by the World Wide Web Consortium (W3C) XML specification.</p><p>XML documents are composed of units called elements, that contain either character data and/or other elements. Elements may also contain within their declaration, values called attributes. Consider the following XML document:</p><p><pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;<b>customer</b>&gt;
        &lt;<b>name</b>&gt;
                &lt;<b>first</b>&gt;John&lt;/<b>first</b>&gt;
                &lt;<b>last</b>&gt;Doe&lt;/<b>last</b>&gt;
        &lt;/<b>name</b>&gt;
        &lt;<b>address</b>&gt;
                &lt;<b>street</b>&gt;
                        &lt;<b>number</b>&gt;15&lt;/<b>number</b>&gt;
                        &lt;<b>direction</b>&gt;West&lt;/<b>direction</b>&gt;
                        &lt;<b>name</b>&gt;34th&lt;/<b>name</b>&gt;
                &lt;/<b>street</b>&gt;
                &lt;<b>city</b>&gt;New York&lt;/<b>city</b>&gt;
                &lt;<b>state-code</b>&gt;NY&lt;/<b>state-code</b>&gt;
                &lt;<b>zip-code</b> <i>format</i>=&quot;PLUS4&quot;&gt;10001-0001&lt;/<b>zip-code</b>&gt;
                &lt;<b>country-code</b>&gt;USA&lt;/country-code&gt;
        &lt;/<b>address</b>&gt;
        &lt;<b>orders</b>/&gt;
&lt;/<b>customer</b>&gt;
</pre></p><p>The bold identifiers contained within angle brackets are the elements of the document. The italicized identifer "format" within the "zip-code" element is an attribute of that element. All elements, with the exception of "orders", have a start and an end declaration, also called tags. The "orders" element is an empty element, as indicated by the "/&gt;" sequence that closes the element, and does not require a separate end-tag. The first line is a processing instruction for an XML parser and is <i>not</i> considered an element of the document.</p><p>The rules for a well-formed document are:</p><ol type="1"><li><b>There is exactly one element that is not contained within any other element.</b> This element is identified as the "root" or "document" element. In the example above, "customer" is the document element. <li><b>The structure of an XML document must nest properly.</b> An element's start-tag must be paired with a closing end-tag if it is a non-empty element. <li><b>The name in an element's end-tag must match the element type in the start-tag.</b> For example, an element opened with <tt>&lt;address&gt;</tt> must be closed by <tt>&lt;/address&gt;</tt>. <li><b>No attribute may appear more than once in the same start-tag or empty-element tag.</b> <li><b>A parsed element must not contain a recursive reference to itself.</b> For example, it is improper to include another address element within an address element. <li><b>A named attributed must have an associated value.</b></ol><h2><font size="4" color="#ff0000"><a name="INPUT">Input</a> </font></h2><p>The input will contain a series of XML documents. The start of each document is identified by a line containing only the processing instruction "<tt>&lt;?xml version="1.0"&gt;</tt>". The end of the input is idenitified by a line containing only the text "<tt>&lt;?end?&gt;</tt>" (this is not a true XML processing instruction, just a sentinel used to mark the end of input for this problem). As with all XML documents, white space between elements and attributes should be ignored. You may make the following assumptions with regards to the input.</p><ul><li>The only processing instruction that will be present is the XML version processing instruction, and it will always appear only at the beginning of each document in the input. <li>Element and attribute names are case-sensitive. For example, <tt>&lt;Address&gt;</tt> and <tt>&lt;address&gt;</tt> are considered to be different.
	<li>Element and attribute names will use only alpha-numeric characters and the dash, "-", character.
	<li>XML comments will not appear in the input.
	<li>Values for attributes will always be properly enclosed in double quotes.
</ul>

<h2>
	<font size="4" color="#ff0000">
	<a name="OUTPUT">Output</a>
	</font>
</h2>

<p>
	For each input XML document, output a line containing the text "well-formed" if the document is well-formed, and "non well-formed" otherwise.
</p>

<h2>
	<font size="4" color="#ff0000">
	<a name="SAMPLE_INPUT">Sample Input</a>
	</font>
</h2>

<p>
<pre>
&lt;?xml version=&quot;1.0&quot;&gt;
&lt;acm-contest-problem&gt;
        &lt;title&gt;A Well-Formed Problem&lt;/title&gt;
        &lt;text&gt;XML, eXtensible Markup Language, is poised to become the lingua franca of
structured data communication for the foreseeable future. [...]&lt;/text&gt;
        &lt;input&gt;probleme.in&lt;/input&gt;
        &lt;output&gt;probleme.out&lt;/output&gt;
&lt;/acm-contest-problem&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;shopping-list&gt;
        &lt;items&gt;
                &lt;item quantity=&quot;1&quot; quantity=&quot;1&quot;&gt;Gallon of milk&lt;/item&gt;
                &lt;item&gt;Frozen pizza
        &lt;/items&gt;
&lt;/Shopping-list&gt;
&lt;errand-list&gt;
        &lt;errand&gt;Get some cash at the ATM
                &lt;errand&gt;Pick up dry cleaning&lt;/errand&gt;
        &lt;/errand&gt;
&lt;/errand-list&gt;
&lt;?end?&gt;
</pre>
</p>

<h2>
	<font size="4" color="#ff0000">
	<a name="SAMPLE OUTPUT">Sample Output</a>
	</font>
</h2>

<p>
<pre>
well-formed
non well-formed
</pre>
</p>

______________________________________________________
2088||||||false||||||
<p>An entropy encoder is a data encoding method that achieves lossless data compression by encoding a message with "wasted" or "extra" information removed. In other words, entropy encoding removes information that was not necessary in the first place to accurately encode the message. A high degree of entropy implies a message with a great deal of wasted information; English text encoded in ASCII is an example of a message type that has very high entropy. Already compressed messages, such as JPEG graphics or ZIP archives, have very little entropy and do not benefit from further attempts at entropy encoding.</p><p>English text encoded in ASCII has a high degree of entropy because all characters are encoded using the same number of bits, eight. It is a known fact that the letters E, L, N, R, S and T occur at a considerably higher frequency than do most other letters in English text. If a way could be found to encode just these letters with four bits, then the new encoding would be smaller, would contain all the original information, and would have less entropy. ASCII uses a fixed number of bits for a reason, however: it's easy, since one is always dealing with a fixed number of bits to represent each possible glyph or character. How would an encoding scheme that used four bits for the above letters be able to distinguish between the four-bit codes and eight-bit codes? This seemingly difficult problem is solved using what is known as a "prefix-free variable-length" encoding.</p><p>In such an encoding, any number of bits can be used to represent any glyph, and glyphs not present in the message are simply not encoded. However, in order to be able to recover the information, no bit pattern that encodes a glyph is allowed to be the prefix of any other encoding bit pattern. This allows the encoded bitstream to be read bit by bit, and whenever a set of bits is encountered that represents a glyph, that glyph can be decoded. If the prefix-free constraint was not enforced, then such a decoding would be impossible.</p><p>Consider the text "AAAAABCD". Using ASCII, encoding this would require 64 bits. If, instead, we encode "A" with the bit pattern "00", "B" with "01", "C" with "10", and "D" with "11" then we can encode this text in only 16 bits; the resulting bit pattern would be "0000000000011011". This is still a fixed-length encoding, however; we're using two bits per glyph instead of eight. Since the glyph "A" occurs with greater frequency, could we do better by encoding it with fewer bits? In fact we can, but in order to maintain a prefix-free encoding, some of the other bit patterns will become longer than two bits. An optimal encoding is to encode "A" with "0", "B" with "10", "C" with "110", and "D" with "111". (This is clearly not the only optimal encoding, as it is obvious that the encodings for B, C and D could be interchanged freely for any given encoding without increasing the size of the final encoded message.) Using this encoding, the message encodes in only 13 bits to "0000010110111", a compression ratio of 4.9 to 1 (that is, each bit in the final encoded message represents as much information as did 4.9 bits in the original encoding). Read through this bit pattern from left to right and you'll see that the prefix-free encoding makes it simple to decode this into the original text even though the codes have varying bit lengths.</p><p>As a second example, consider the text "THE CAT IN THE HAT". In this text, the letter "T" and the space character both occur with the highest frequency, so they will clearly have the shortest encoding bit patterns in an optimal encoding. The letters "C", "I" and "N" only occur once, however, so they will have the longest codes. There are many possible sets of prefix-free variable-length bit patterns that would yield the optimal encoding, that is, that would allow the text to be encoded in the fewest number of bits. One such optimal encoding is to encode spaces with "00", "A" with "100", "C" with "1110", "E" with "1111", "H" with "110", "I" with "1010", "N" with "1011" and "T" with "01". The optimal encoding therefore requires only 51 bits compared to the 144 that would be necessary to encode the message with 8-bit ASCII encoding, a compression ratio of 2.8 to 1.</p><h2><font size="4" color="#ff0000"><a name="INPUT">Input</a> </font></h2><p>The input file will contain a list of text strings, one per line. The text strings will consist only of uppercase alphanumeric characters and underscores (which are used in place of spaces). The end of the input will be signalled by a line containing only the word "END" as the text string. This line should not be processed.</p><h2><font size="4" color="#ff0000"><a name="OUTPUT">Output</a> </font></h2><p>For each text string in the input, output the length in bits of the 8-bit ASCII encoding, the length in bits of an optimal prefix-free variable-length encoding, and the compression ratio accurate to one decimal point.</p><h2><font size="4" color="#ff0000"><a name="SAMPLE_INPUT">Sample Input</a> </font></h2><p><pre>
AAAAABCD
THE_CAT_IN_THE_HAT
END
</pre></p><h2><font size="4" color="#ff0000"><a name="SAMPLE OUTPUT">Sample Output</a> </font></h2><p><pre>
64 13 4.9
144 51 2.8
</pre></p>
______________________________________________________
2089||||||false||||||
<p>An <i>n-tersection</i> is defined as a location in <i>n</i>-dimensional space, <i>n</i> being a positive integer, having all non-negative integer coordinates. For example, the location (1,2,3) represents an n-tersection in three dimensional space. Two n-tersections are said to be <i>adjacent</i> if they have the same number of dimensions and their coordinates differ by exactly 1 in a single dimension only. For example, (1,2,3) is adjacent to (0,2,3), (2,2,3) and (1,2,4), but not to (2,3,3), (3,2,3) or (1,2). An <i>n-teresting space</i> is defined as a collection of paths between adjacent n-tersections. Finally, an <i>n-credible maze</i> is defined as an n-teresting space combined with two specific n-tersections in that space, one of which is identified as the starting n-tersection and the other as the ending n-tersection.</p><h2><font size="4" color="#ff0000"><a name="INPUT">Input</a> </font></h2><p>The input file will consist of the descriptions of one or more n-credible mazes. The first line of the description will specify <i>n</i>, the dimension of the n-teresting space. (For this problem, <i>n</i> will not exceed 10, and all coordinate vectors will be less than 10.) The next line will contain 2<i>n</i> non-negative integers, the first <i>n</i> of which describe the starting n-tersection, least dimension first, and the next <i>n</i> of which describe the ending n-tersection. Next will be a non-negative number of lines containing 2<i>n</i> non-negative integers each, identifying paths between adjacent n-tersections in the n-teresting space. The list is terminated by a line containing only the value -1. Several such maze descriptions may be present in the file. The end of the input is signalled by space dimension of zero. No further data will follow this terminating zero.</p><h2><font size="4" color="#ff0000"><a name="OUTPUT">Output</a> </font></h2><p>For each maze, output it's position in the input; e.g. the first maze is "Maze #1", the second maze is "Maze #2", etc. If it is possible to travel through the n-credible maze's n-teresting space from the starting n-tersection to the ending n-tersection, also output "can be travelled" on the same line. If such travel is not possible, output "cannot be travelled" instead.</p><h2><font size="4" color="#ff0000"><a name="SAMPLE_INPUT">Sample Input</a> </font></h2><p><pre>
2
0 0 2 2
0 0 0 1
0 1 0 2
0 2 1 2
1 2 2 2
-1
3
1 1 1 1 2 3
1 1 2 1 1 3
1 1 3 1 2 3
1 1 1 1 1 0
1 1 0 1 0 0
1 0 0 0 0 0
-1
0
</pre></p><h2><font size="4" color="#ff0000"><a name="SAMPLE OUTPUT">Sample Output</a> </font></h2><p><pre>
Maze #1 can be travelled
Maze #2 cannot be travelled
</pre></p>
______________________________________________________
2090||||||false||||||
<p>Consider the two networks shown below. Assuming that data moves around these networks only between directly connected nodes on a peer-to-peer basis, a failure of a single node, 3, in the network on the left would prevent some of the still available nodes from communicating with each other. Nodes 1 and 2 could still communicate with each other as could nodes 4 and 5, but communication between any other pairs of nodes would no longer be possible. Node 3 is therefore a Single Point of Failure (SPF) for this network. Strictly, an SPF will be defined as any node that, if unavailable, would prevent at least one pair of available nodes from being able to communicate on what was previously a fully connected network. Note that the network on the right has no such node; there is no SPF in the network. At least two machines must fail before there are any pairs of available nodes which cannot communicate.</p><center><table><tr><td><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2090img1.jpg hspace="25"></td><td><img border="0" src="http://livearchive.onlinejudge.org/external/20/p2090img1.jpg hspace="25"></td></tr></table></center><h2><font size="4" color="#ff0000"><a name="INPUT">Input</a> </font></h2><p>The input will contain the description of several networks. A network description will consist of pairs of integers, one pair per line, that identify connected nodes. Ordering of the pairs is irrelevant; 1 2 and 2 1 specify the same connection. All node numbers will range from 1 to 1000. A line containing a single zero ends the list of connected nodes. An empty network description flags the end of the input. Blank lines in the input file should be ignored.</p><h2><font size="4" color="#ff0000"><a name="OUTPUT">Output</a> </font></h2><p>For each network in the input, you will output its number in the file, followed by a list of any SPF nodes that exist. The first network in the file should be identified as "Network #1", the second as "Network #2", etc. For each SPF node, output a line, formatted as shown in the examples below, that identifies the node and the number of fully connected subnets that remain when that node fails. If the network has no SPF nodes, simply output the text "No SPF nodes" instead of a list of SPF nodes. Output a blank line between each block.</p><h2><font size="4" color="#ff0000"><a name="SAMPLE_INPUT">Sample Input</a> </font></h2><p><pre>
1 2
5 4
3 1
3 2
3 4
3 5
0

1 2
2 3
3 4
4 5
5 1
0

1 2
2 3
3 4
4 6
6 3
2 5
5 1
0

0
</pre></p><h2><font size="4" color="#ff0000"><a name="SAMPLE OUTPUT">Sample Output</a> </font></h2><p><pre>
Network #1
  SPF node 3 leaves 2 subnets

Network #2
  No SPF nodes

Network #3
  SPF node 2 leaves 2 subnets
  SPF node 3 leaves 2 subnets
</pre></p>
______________________________________________________
2091||||||false||||||
<P><DIV ALIGN="CENTER">=6.5in <IMG WIDTH="751" HEIGHT="270" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2091img1.png ALT="\epsfbox{p2091.eps}"></DIV><P>As shown above, there is only one lane leading to the starting line. So the racing cars should be line up at the starting line in the order of their numbers which have been assigned according to the records in the preliminary race. When the cars arrive at the main entrance in a certain order, we want to find out whether we can rearrange the cars in the increasing order of their numbers by using a one-lane bypass. Note that the cars should move only forward as designated by the arrows shown in the figure. Also, note that the cars in the bypass should be in a line because the bypass has only one lane. You can assume that the bypass is long enough to accommodate all the cars which participate in the race.<P>For instance, suppose there are four competitors and they arrive in the order 1, 3, 2, 4. Then we can rearrange the cars so that they can line up in the order 1, 2, 3, 4 at <SPAN CLASS="MATH"><I>t</I></SPAN>he starting line as follows: let the car numbered `1' first reach the starting line and the car numbered `3' enter the bypass and wait for the car numbered 2. After the car numbered `2' reach es the starting line, the car numbered `3' comes out from the bypass and arrives the starting line . Finally the car numbered 4 reaches the starting line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of the input file contains an integer representing the number of test cases. Each test case begins with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, indicating the number of cars which participate in the race. The following line represents a permutation of <SPAN CLASS="MATH"><I>N</I></SPAN> cars, numbered <SPAN CLASS="MATH">1, 2,..., <I>N</I></SPAN>. The consecutive car numbers are separated by a single space. Assume that <SPAN CLASS="MATH"><I>N</I></SPAN> is less than 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case in the output. The line should contain ``<TT>YES</TT>" if the test case can be rearranged, and contain ``<TT>NO</TT>" otherwise .<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                           
4                                           
1 3 2 4       
3 
3 2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
YES
NO
</PRE>
______________________________________________________
2092||||||false||||||
<P>Chulsoo is working part-time at KAIST Central Library. His job is to collect books that have been left on desks by careless users and to relocate them into their original positions on bookshelves. To do this job efficiently Chulsoo collects the books and puts them on a long bookshelf, which is left empty for him, and then sort these books according to their call numbers. He carries the sorted books on a cart, and walks around bookshelves to restore th em into proper places.<P>One of the most difficult tasks for Chulsoo is to sort a number of books on his bookshelf according to their call numbers. He usually selects two books that are ``out of order" and swaps them, and selects another two books that are ``out of order" and swaps them, and repeats this ``select-and-swap" process until all books are sorted. We say that two books are ``out of order" if one with smaller call number is to the right of another with larger call number.<P>You are to write a program to sort the books using a minimum number of swaps in ascending order of their call numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains one integer <SPAN CLASS="MATH"><I>t</I></SPAN> representing the number of test cases. Each case is described by two lines: the first line contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN>, which is the number of books on Chulsoo's bookshelf, and the second line contains a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> positive integers, in which the <SPAN CLASS="MATH"><I>i</I></SPAN>-th integer is the call number of the book at position <SPAN CLASS="MATH"><I>i</I></SPAN>. Assume that the call numbers of the books are all different and each of them does not exceed 10,000. Also, assume that <SPAN CLASS="MATH"><I>n</I></SPAN> does not exceed 1,000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program should print a sequence of <SPAN CLASS="MATH"><I>t</I></SPAN> integers. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th integer is the number of swaps for the <SPAN CLASS="MATH"><I>i</I></SPAN>-th test case that your program has computed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2              
5 
25 347 12 19 203  
7 
55 101 47 61 82 11 96
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 4
</PRE><P>
______________________________________________________
2093||||||false||||||
<P>Venture MFG Company, Inc. has made a game board. This game board has 15 holes and these holes are filled with pegs except one hole. A peg can jump over one or more consecutive peg s to the nearest empty hole along the straight line. As a peg jump over the pegs you remove them from the board. In the following figure, the peg at the hole number 12 or the peg at the hole number 14 can jump to the empty hole number 5. If the peg at the hole number 12 is moved then the peg at the hole number 8 is removed. Instead, if the peg at the hole number 14 is moved then the peg at the hole number 9 is removed.<P><DIV ALIGN="CENTER"><IMG WIDTH="283" HEIGHT="177" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2093img1.png ALT="\epsfbox{p2093.eps}"></DIV><P>Write a program which find a shortest sequence of moving pegs to leave the last peg in the hole that was initially empty. If such a sequence does not exist the program should write a message ``<TT>IMPOSSIBLE</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases (<SPAN CLASS="MATH"><I>T</I></SPAN>) is given in the first line of the input file. Each test case is a single integer which means an empty hole number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the first line of the output file contains an integer which is the number of jumps in a shortest sequence of moving pegs. In the second line of the output file, print a sequence of peg movements. A peg movement consists of a pair o f integers separated by a space. The first integer of the pair denotes the hole number of the peg that is moving, and the second integer denotes a destination (empty) hole number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1                                                   
5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10
12 5 3 8 15 12 6 13 7 9 1 7 10 8 7 9 11 14 14 5
</PRE><P>
______________________________________________________
2094||||||false||||||
<P>You are given <SPAN CLASS="MATH"><I>n</I></SPAN> axis-parallel rectangles on a plane. Here, an axis-parallel rectangle is a rectangle whose edges are parallel to either <SPAN CLASS="MATH"><I>x</I></SPAN>-axis or <SPAN CLASS="MATH"><I>y</I></SPAN>-axis. You are to find the number of colors to paint the given <SPAN CLASS="MATH"><I>n</I></SPAN> rectangles according to the following rules:<P><DL COMPACT><DT>1.</DT><DD>Each rectangle has to be painted with one color.</DD><DT>2.</DT><DD>A pair of intersecting rectangles must have the same color. Two rectangles are intersecting if their intersection is not empty when we regard a rectangle as a set of points including the boundary.</DD><DT>3.</DT><DD>A rectangle <SPAN CLASS="MATH"><I>R</I><SUB>a</SUB></SPAN> must have the same color as <SPAN CLASS="MATH"><I>R</I><SUB>b</SUB></SPAN> if there is a sequence of rectangles <SPAN CLASS="MATH"><I>R</I><SUB>a</SUB> = <I>R</I><SUB>i<SUB>1</SUB></SUB>, <I>R</I><SUB>i<SUB>2</SUB></SUB>,..., <I>R</I><SUB>i<SUB>k</SUB></SUB> = <I>R</I><SUB>b</SUB></SPAN> such that <SPAN CLASS="MATH"><I>R</I><SUB>i<SUB>j</SUB></SUB></SPAN> and <SPAN CLASS="MATH"><I>R</I><SUB>i<SUB>j+1</SUB></SUB></SPAN> are intersecting for all <!-- MATH
 $1 \le j < k$
 --><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2094img1.png ALT="$ \le$"><I>j</I> &lt; <I>k</I></SPAN> otherwise, they must have different colors. For instance, rectangle <SPAN CLASS="MATH"><I>R</I><SUB>9</SUB></SPAN> in the following figure must have the same color as <SPAN CLASS="MATH"><I>R</I><SUB>4</SUB>, <I>R</I><SUB>5</SUB>, <I>R</I><SUB>8</SUB></SPAN>, and have a different color from <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB>, <I>R</I><SUB>2</SUB>, <I>R</I><SUB>3</SUB>, <I>R</I><SUB>6</SUB>, <I>R</I><SUB>7</SUB></SPAN>. </DD></DL><P><DIV ALIGN="CENTER"><IMG WIDTH="316" HEIGHT="286" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2094img1.png ALT="\epsfbox{p2094.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases (<SPAN CLASS="MATH"><I>T</I></SPAN>) is given in the first line of the input file. Each test case begins with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2094img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2094img1.png ALT="$ \le$">200</SPAN>, that represents the number of rectangles in the test case. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains four positive integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, and <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2094img1.png ALT="$ \le$"><I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2094img1.png ALT="$ \le$">10000</SPAN>, representing a rectangle. <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> are the <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>-coordinates of the lower-left and upper-right corners of the rectangle, respectively. The four integers are delimited by one or more spaces. From the <SPAN CLASS="MATH"><I>N</I> + 3</SPAN>-th line, the remaining test cases are listed in the same manner as above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should contain the number of colors, one per line.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                                                               
9                                                                               
3 8 6 12            
1 2 4 9        
5 6 8 10                 
11 9 13 11                                                                 
12 4 14 7                                              
6 2 7 7                       
3 1 7 3                            
10 4 12 7                                                   
9 6 11 9                                
4    
11 9 13 11                                                       
12 4 14 7                                         
10 4 12 7                                                             
9 6 11 9
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2
1
</PRE><P>
______________________________________________________
2095||||||false||||||
<P><SPAN CLASS="MATH"><I>N</I></SPAN> men and <SPAN CLASS="MATH"><I>N</I></SPAN> women who are registered to the company want to marry as soon as possible. Each man and each woman have a list of preferences for all the people of the opposite sex. The most preferable person will come at the first position in the list, the second preferable person will come at the next, and so on. The table below shows a set of preference lists that might exist among 4 men and 4 women.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>M</I><SUB>1</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>2</SUB>&nbsp;<I>W</I><SUB>4</SUB>&nbsp;<I>W</I><SUB>1</SUB>&nbsp;<I>W</I><SUB>3</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&nbsp; &nbsp;/SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>1</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>M</I><SUB>4</SUB>&nbsp;<I>M</I><SUB>1</SUB>&nbsp;<I>M</I><SUB>2</SUB>&nbsp;<I>M</I><SUB>3</SUB></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>M</I><SUB>2</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>1</SUB>&nbsp;<I>W</I><SUB>2</SUB>&nbsp;<I>W</I><SUB>3</SUB>&nbsp;<I>W</I><SUB>4</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&nbsp; &nbsp;/SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>2</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>M</I><SUB>4</SUB>&nbsp;<I>M</I><SUB>3</SUB>&nbsp;<I>M</I><SUB>2</SUB>&nbsp;<I>M</I><SUB>1</SUB></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>M</I><SUB>3</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>2</SUB>&nbsp;<I>W</I><SUB>3</SUB>&nbsp;<I>W</I><SUB>4</SUB>&nbsp;<I>W</I><SUB>1</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&nbsp; &nbsp;/SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>3</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>M</I><SUB>1</SUB>&nbsp;<I>M</I><SUB>4</SUB>&nbsp;<I>M</I><SUB>2</SUB>&nbsp;<I>M</I><SUB>3</SUB></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>M</I><SUB>4</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>1</SUB>&nbsp;<I>W</I><SUB>3</SUB>&nbsp;<I>W</I><SUB>2</SUB>&nbsp;<I>W</I><SUB>4</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&nbsp; &nbsp;/SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>4</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>M</I><SUB>3</SUB>&nbsp;<I>M</I><SUB>2</SUB>&nbsp;<I>M</I><SUB>1</SUB>&nbsp;<I>M</I><SUB>4</SUB></SPAN></TD></TR></TABLE></DIV><P><P><BR>Your task is to make matches of all the men to all the women in such a way as to respect all their preferences as much as possible. However, you must assume that anyone assigned to someone other than the ir first choice will be disappointed and will always prefer anyone higher up on the list. If the <SPAN CLASS="MATH"><I>N</I></SPAN> matches are chosen such that there exist a man and a woman who are not married on each other, but who would both prefer each other to their actual marriage partners, then the matches are said to be <SPAN CLASS="textit">unstable</SPAN>. If no such pair exists, it is called <SPAN CLASS="textit">stable</SPAN>. For example, a match `` <SPAN CLASS="MATH"><I>M</I><SUB>1</SUB><I>W</I><SUB>3</SUB>&nbsp;<I>M</I><SUB>2</SUB><I>W</I><SUB>1</SUB>&nbsp;<I>M</I><SUB>3</SUB><I>W</I><SUB>4</SUB>&nbsp;<I>M</I><SUB>4</SUB><I>W</I><SUB>2</SUB></SPAN>" is unstable because <SPAN CLASS="MATH"><I>M</I><SUB>1</SUB></SPAN> prefers <SPAN CLASS="MATH"><I>W</I><SUB>1</SUB></SPAN> to <SPAN CLASS="MATH"><I>W</I><SUB>3</SUB></SPAN>, and <SPAN CLASS="MATH"><I>W</I><SUB>1</SUB></SPAN> prefers <SPAN CLASS="MATH"><I>M</I><SUB>1</SUB></SPAN> to <SPAN CLASS="MATH"><I>M</I><SUB>2</SUB></SPAN>. The unstable couples might be separated easily after marriage; this is a definitely bad situation that you want to avoid.<P>In general, there are many different stable matches for a given set of preference lists. Your task is to print just one stable match among them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases (<SPAN CLASS="MATH"><I>T</I></SPAN>) is given in the first line of the input file. Each test case begins with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN> less than 100, indicating that <SPAN CLASS="MATH"><I>N</I></SPAN> men and <SPAN CLASS="MATH"><I>N</I></SPAN> women are given. The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines repres ent the men's preferences for the women, where the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line contains the preference list of a man with id <SPAN CLASS="MATH"><I>i</I></SPAN> in order of preferences of the <SPAN CLASS="MATH"><I>N</I></SPAN> women; he prefers a woman <SPAN CLASS="MATH"><I>X</I></SPAN> to another woman <SPAN CLASS="MATH"><I>Y</I></SPAN> if <SPAN CLASS="MATH"><I>X</I></SPAN> precedes <SPAN CLASS="MATH"><I>Y</I></SPAN> in the list. The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines represent the women's preferences for the <SPAN CLASS="MATH"><I>N</I></SPAN> men. Assume that all men and all women have consecutive id-numbers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line should contain a stable match for the test case. Each match should be represented as a sequence of the women's id, according to the increasing order of men's id. The woman with the first id in the match is a partner of the man with id `1', the woman with the second id in the match is a partner of the man with id `2', and the woman with the <SPAN CLASS="MATH"><I>i</I></SPAN>-th id in the match is a partner of the man with id `<SPAN CLASS="MATH"><I>i</I></SPAN>'. The consecutive women's id in the match should be separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
6
6 1 4 5 2 3
2 3 5 4 1 6
2 1 5 3 6 4
4 5 6 2 3 1
6 3 4 5 2 1
6 4 1 3 5 2
5 6 4 2 3 1
4 6 1 5 3 2
5 4 3 1 6 2
4 3 1 6 2 5
5 3 4 6 2 1
3 2 6 4 5 1
3 
1 2 3
3 2 1
2 1 3
1 2 3
3 2 1
2 1 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2 5 1 4 3 6            
1 3 2
</PRE><P>
______________________________________________________
2096||||||false||||||
<P>Taekwondo is the name of a traditional Korean martial art and it is turned into a modern international sport. It is adopted by IOC (International Olympic Committee) as an official game of 2000 Sydney Olympic Games. In Taekwondo, there are individual competitions and team competitions. An individual competition is conducted by two players and a team competition is a set of individual competitions. For two groups of players, we are going to make a team competition where two players for each individual competition are selected from each group. Note that players in each group can participate at most one individual competition. For fair competition, weights of two players in each individual competition must be very close. Given weights of players in two groups, you are to write a program to find pairs of players so that the sum of the absolute differences of theweights of two players in each competition is minimized.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. The first line of the input file contains an integer representing the number of test cases. The first line of each test case contains two integers. The first integer, <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN>, is the number of players in the first group, and the second integer, <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN>, is the number of players in the second group, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2096img1.png ALT="$ \le$"><I>n</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2096img1.png ALT="$ \le$">500</SPAN>. You have to make <SPAN CLASS="MATH">min{<I>n</I><SUB>1</SUB>, <I>n</I><SUB>2</SUB>}</SPAN> pairs of players. Each line of the next <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> lines contains the weight of the player in the first group and the next <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> lines contain the weights of players in the second group. Weights of players are in the range of 40.0 to 130.0. You may assume that the precision of weight is one tenth.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, your program reports the minimum of the sum of the absolute differences of the weights of two players in each individual competition in the team competition.<P>The following sample input and corresponding correct output represents two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2  
2 3
44.9 
50.0 
77.2 
86.4 
59.8 
4 2  
44.9 
50.0 
77.2 
86.4 
59.8 
58.9
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
42.1 
23.8
</PRE>
______________________________________________________
2097||||||false||||||
<P>
Younghee an elementary school student just finished her homework. Today her teacher gave her several lists 
each containing distinct positive integers. The homework was to calculate every sum of each pair of integers 
in a list. The teacher gave students mutually different lists for preventing copying out. So, she had to do the 
homework all by herself. It was hard job because she is not so good at arithmetic and pretty many lists were 
given. After finishing her homework  Younghee went out to play with her friends. When Younghee returned to 
home she found out the lists were lost. Only the papers she wrote the sums were there. Younghee should 
return the lists at the next class because her teacher would check up her homework with the lists. Finally Younghee found out who did it. Her mother thought the lists as garbage and threw them into the garbage can and emptied it. Soon after listening to her mother, Younghee ran to the garbage box in the outside. Alas! The garbage colle ctor already emptied the box. After a little consideration Younghee thinks there might be a way to restore the lists. She calls you and asks you to help her.

<P>
In this problem, you are to solve Younghee's trouble. For each list of sums Younghee wrote, your program should restore the list of distinct integers. But, Younghee is not so good at arithmetic. So, there can be a list of sums which is not restorable, that is, there does not exist a list of integers which leads to the sums. In that case your program s hould print `<TT>-1</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input contains <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The first line of input contains a single integer (<SPAN CLASS="MATH"><I>T</I></SPAN>) representing the number of test cases which is exactly the number of lists Younghee received from her teacher. Each test case begins with 
a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">2 &lt; <I>n</I> &lt; 50</SPAN>, indicating the number of integers in a list. In the next line, there are 
<SPAN CLASS="MATH"><I>n</I>(<I>n</I> - 1)/2</SPAN> positive integers which are the sums of all possible pairs in non-decreasing order. Each number in the sums will be less than 10000.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
Print exactly one line for each test case. The output should consist of <SPAN CLASS="MATH"><I>n</I></SPAN> distinct positive integers in increasing order, if restorable. If not restorable, `<TT>-1</TT>' should be printed. Numbers should be separated by a single space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
4
4 5 7 10 12 13
3 
2 5 6  
5 
3 4 5 5 6 6 7 7 8 9
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 3 4 9
-1 
1 2 3 4 5
</PRE>

<P>

______________________________________________________
2098||||||false||||||
<P>Once upon a time the following puzzle was suggested to pupils on a regional middle school olympiad on mathematics:<P><UL><LI>A set of coins consists of 15 coins: 14 coins are valid while a remaining 15-th coin is a false one. All valid coins have one and the same weight while the false coin has a different weight. One valid coin is marked. Is it possible to identify a false coin balancing coins 3 times at most? </LI></UL><P>A jury member was a trainer of a team of undergraduates for programming contests. So a question on how to put the puzzle for programming arose naturally. Fin ally the problem was formulated as follows:<P><UL><LI>A set of coins consists of <SPAN CLASS="MATH"><I>N</I></SPAN> coins: (<SPAN CLASS="MATH"><I>N</I> - 1</SPAN>) coins are valid while a remaining <SPAN CLASS="MATH"><I>N</I></SPAN>-th coin is a false one. All valid coins have one and the same weight while the false coin has a different weight. One valid coin is marked. Write a program which for every input pair<UL><LI>a number <SPAN CLASS="MATH"><I>N</I></SPAN> of coins under question, </LI><LI>a limit <SPAN CLASS="MATH"><I>K</I></SPAN> of balancing </LI></UL></LI></UL>outputs either ``<TT>POSSIBLE</TT>" or ``<TT>IMPOSSIBLE</TT>" with respect to existence of a strategy to identify the false coin balancing coins <SPAN CLASS="MATH"><I>K</I></SPAN> times at most.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> that represents a total amount of different pairs <SPAN CLASS="MATH">(<I>N</I>, <I>K</I>)</SPAN> to process. Every line of next <SPAN CLASS="MATH"><I>T</I></SPAN> lines contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2098img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2098img1.png ALT="$ \le$">100</SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2098img1.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/20/2098img1.png ALT="$ \le$">100</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output file should contain <SPAN CLASS="MATH"><I>T</I></SPAN> lines with ``<TT>POSSIBLE</TT>" or ``<TT>IMPOSSIBLE</TT>" per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                           
6 2                         
10 2                        
15 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
POSSIBLE 
IMPOSSIBLE 
POSSIBLE
</PRE>
______________________________________________________
2099||||||false||||||
<P>
The Contortion Brothers are a famous set of circus clowns, known worldwide for their incredible ability
to cram an unlimited number of themselves into even the smallest vehicle. During the off-season, the
brothers like to get together for an Annual Contortionists Meeting at a local park. However, the brothers
are not only tight with regard to cramped quarters, but with money as well, so they try to find the way
to get everyone to the party which minimizes the number of miles put on everyone's cars (thus saving
gas, wear and tear, etc.). To this end they are willing to cram themselves into as few cars as necessary
to minimize the total number of miles put on all their cars together. This often results in many brothers
driving to one brother's house, leaving all but one car there and piling into the remaining one. There is
a constraint at the park, however: the parking lot at the picnic site can only hold a limited number of
cars, so that must be factored into the overall miserly calculation. Also, due to an entrance fee to the
park, once any brother's car arrives at the park it is there to stay; he will not drop off his passengers
and then leave to pick up other brothers. Now for your average circus clan, solving this problem is a
challenge, so it is left to you to write a program to solve their milage minimization problem.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input begins with a single positive integer on a line by itself indicating the number of the cases
following, each of them as described below. This line is followed by a blank line, and there is also a
blank line between two consecutive inputs. 

<P>
Each case will consist of one problem instance. The first line will contain a single integer n indicating the
number of highway connections between brothers or between brothers and the park. The next n lines
will contain one connection per line, of the form name1 name2 dist, where name1 and name2 are either
the names of two brothers or the word Park and a brother's name (in either order), and dist is the
integer distance between them. These roads will all be 2-way roads, and dist will always be positive.
The maximum number of brothers will be 20 and the maximumlength of any name will be 10 characters.
Following these n lines will be one final line containing an integer s which specifies the number of cars
which can fit in the parking lot of the picnic site. You may assume that there is a path from every
brother's house to the park and that a solution exists for each problem instance.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, the output must follow the description below. The outputs of two consecutive cases
will be separated by a blank line.

<P>
For each test case, the output should consist of one line of the form

<P>

<P>

<TT>Total miles driven: xxx</TT>

<P>

<P>
where xxx is the total number of miles driven by all the brothers' cars.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2

10
Alphonzo Bernardo 32
Alphonzo Park 57
Alphonzo Eduardo 43
Bernardo Park 19
Bernardo Clemenzi 82
Clemenzi Park 65
Clemenzi Herb 90
Clemenzi Eduardo 109
Park Herb 24
Herb Eduardo 79
3

10
Alphonzo Bernardo 32
Alphonzo Park 57
Alphonzo Eduardo 43
Bernardo Park 19
Bernardo Clemenzi 82
Clemenzi Park 65
Clemenzi Herb 90
Clemenzi Eduardo 109
Park Herb 24
Herb Eduardo 79
1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Total miles driven: 183

Total miles driven: 255
</PRE>

<P>

______________________________________________________
2100||||||false||||||
<P>A polygonal number is a number which can be represented by a regular geometrical arrangement of equally spaced points, where the arrangement forms a regular polygon. Some examples are shown in the figure below.<P align="center"><img src="http://livearchive.onlinejudge.org/external/21/2100.gif></img><P>The first figure shows the first 4 triangular numbers 1, 3, 6, 10. The next three show the first four square, pentagonal and hexagonal numbers, respectively. In general, k-gonal numbers are those whose points define a regular k-gon (hence triangular numbers are 3-gonal, square numbers are 4-gonal, etc.). We will define k as an index of the polygonal number. For this problem, you are to find numbers which are k-gonal for two or more values of k. We will call these numbers poly-polygonal.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple problem instances. Each instance will consist of 3 lines. The first line will be a non-negative integer n &le; 50 indicating the number of types of polygonal numbers of interest in this problem. Note that this line may be longer than 80 characters. The next line will contain n integers indicating the indices of these polygonal numbers (all distinct and in increasing order). For example, if the first line contained the value 3, and the next line contained the values 3 610, then that problem instance would be interested in 3-gonal, 6-gonal and 10-gonal numbers. Each index k will lie in the range 3 &le; k &le; 1000. The last line of the problem instance will consist of a single positive integer s &le; 10000, which serves as a starting point for the search for poly-polygonal numbers. A value of n = 0 terminates the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, you should output the next 5 poly-polygonal numbers which are greater than or equal to s. Each number should be on a single line and conform to the following format:<P><TT>num:k1 k2 k3 ...</TT><P>where num is the poly-polygonal number, and k1, k2, k3 ... are the indices (in increasing order) of the poly-polygonal number equal to num. A single space should separate each index, and you should separate each problem instance with a single blank line. The judge's input will be such that the maximum value for any poly-polygonal number will fit in a long variable.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10
6 7 8 9 10 11 12 13 14 15
1000
5
3 4 13 36 124
1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1216:9 12
1540:6 10
1701:10 13
2300:11 14
3025:12 15

1:3 4 13 36 124
36:3 4 13 36
105:3 36
171:3 13
1225:3 4 124
</PRE><P>
______________________________________________________
2101||||||false||||||
<P>
A polynomial p(x) of degree n can be used to approximate a function f(x) by setting the coeficients of
p(x) to match the first n coeficients of the power series of f(x) (expanded about x = 0). For example,

<P align="center">
<img src="http://livearchive.onlinejudge.org/external/21/2101a.gif></img>

<P style='line-height:25.0pt'>
Unfortunately, polynomials are "nice" and they do not work well when they are used to approximate
functions that behave poorly (e.g. those with singularities). To overcome this problem, we can instead
approximate functions by rational functions of the form <i>p(x)/q(x)</i>, where <i>p(x)</i> and <i>q(x)</i>
are polynomials. You have been asked by Approximate Calculation Machinery to solve this problem, so they can
incorporate your solution into their approximate calculation software.

<P>
Given <i>m</i>, <i>n</i>, and the first <i>m + n</i> coeficients of the power series of <i>f(x)</i>, we wish to compute two
polynomials <i>p(x)</i> and <i>q(x)</i> of degrees at most <i>m-1</i> and <i>n-1</i>, respectively, such that the power series
expansion of <i>q(x)·f(x)-p(x)</i> has <i>0</i> as its first <i>m+n-1</i> coefficients, and <i>1</i> as its coefficient corresponding
to the <i>x<sup>m+n-1</sup></i> term. In other words, we want to find <i>p(x)</i> and <i>q(x)</i> such that
<P>

<P align="center">
<img src="http://livearchive.onlinejudge.org/external/21/2101a.gif></img>

<P>
where ... contains terms with powers of <i>x</i> higher than <i>m+n-1</i>. From this, f(x) can
be approximated by <i>p(x)/q(x)</i>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Background Definitions</A>&nbsp;</FONT>
</H2>

<P>
A polynomial <i>p(x)</i> of degree n can be written as <i>p<sub>0</sub> + p<sub>1</sub>·x + p<sub>2</sub>·x<sup>2</sup> + ...
+ p<sub>n</sub>·x<sup>n</sup></i>, where <i>p<sub>i</sub></i>'s are integers in this problem.

<P>
A power series expansion of <i>f(x)</i> about <i>0</i> can be written as <i>f<sub>0</sub> + f<sub>1</sub>·x +
f<sub>2</sub>·x<sup>2</sup></i> + ..., where <i>f<sub>i</sub></i>'s are integers in this problem.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of multiple cases. Each case will be specified on one line, in the form
<P>
<i>m n f<sub>0</sub> f<sub>1</sub> ... f<sub>m+n-1</sub></i><BR>
<P>
where <i>f<sub>i</sub></i> is the coefficient of <i>x<sup>i</sup></i> in the power series expansion
of <i>f</i>. You may assume that <i>1&le;m</i>, <i>1&le;n&le;4</i>, <i>2&le;m+n&le;10</i>, and <i>f<sub>i</sub></i> are
integers such that |<i>f<sub>i</sub></i>|&le;5. The end of input will be indicated by a line containing
<i>m=n=0</i>, and no coefficients for <i>f</i>. You may assume that there is a unique solution for the
given input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print two lines of output. Print the polynomial <i>p(x)</i> on the first line, and then <i>q(x)</i>
on the second line. The polynomial <i>p(x)</i> should be printed as a list of pairs <i>(p<sub>i</sub>,i)</i> arranged in ascending
order in i, such that <i>p<sub>i</sub></i> is a non-zero coefficient for the term <i>x<sup>i</sup></i>. Each non-zero coefficient <i>p<sub>i</sub></i> should be
printed as <i>a/b</i>, where <i>b > 0</i> and <i>a/b</i> is the coefficient expressed in lowest terms. In addition, if <i>b = 1</i>
then print only <i>a</i> (and omit <i>b</i>). If <i>p(x) = 0</i>, print a line containing only <i>(0,0)</i>. Separate the pairs in
the list by one space. The polynomial <i>q(x)</i> should be printed in the same manner. Insert a blank line
between cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 2 0 0 1 1
4 2 1 2 3 4 5 -2
1 1 2 3
1 4 -5 0 -2 1-2
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
(0,0)
(1,1)

(-4/33,0) (-1/11,1) (-2/33,2) (-1/33,3)
(-4/33,0) (5/33,1)

(2/3,0)
(1/3,0)

(25/6,0)
(-5/6,0) (1/3,2) (-1/6,3)
</PRE>

<P>

______________________________________________________
2102||||||false||||||
<p>Consider the following pattern of positive integers:</p><p>3 3 1<br>3 1<br>2</p><p>Note that each row is left-justified and no longer than its preceding row. Also, the entries in each row, when read left to right, are non-increasing and the entries in each column, when read top to bottom are non-increasing. We will call such a pattern a stacking pattern (SP) because such a pattern can represent a way of stacking cubes in a corner in the following way: if you consider placing the topmost row and leftmost column against walls, then the SP gives a bird's-eye view of how many cubes are stacked vertically. The SP above represents the following corner stacking:</p><p ALIGN="center"><img border="0" src="http://livearchive.onlinejudge.org/external/21/2102a.gif width="118" height="110"></p><p>We will call the wall against the topmost row the right wall , and the wall against the leftmost column the left wall. Here is another SP and the corner stacking it represents:</p><pre>
6 5 5 4 3 3
6 4 3 3 1
6 4 3 1 1
4 2 2 1
3 1 1
1 1 1
</pre><p align="center"><img border="0" src="http://livearchive.onlinejudge.org/external/21/2102a.gif><p>Note that if you rotate a corner stacking so the left wall becomes the floor and the floor becomes the right wall, you still have a corner stacking. (We will call this a left rotation.) Likewise, you would still have a corner stacking if you rotate so the right wall becomes the floor and the floor becomes the left wall. (We will call this a right rotation.) So the SP of the left and right rotations of the first SP given above are</p><table border="0" cellpadding="30" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111"><tr><td>3 2 1<br>2 1 1<br>2 1<br><td>3 3 2<br>2 1 1<br>1</td></tr></table><p>You should check that both the left and right rotations of the second example SP are identical to the original SP.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>This problem will consist of multiple problem instances. Each problem instance will consist of a positive integer n&nbsp; &lt;= 11 indicating the number of rows in the SP that follows. (n = 0 indicates the end of input.) The rows of the SP will follow, one per line with entries separated by single spaces, delimited by a trailing 0. (The trailing 0 is, of course, not part of the input data proper and you may assume that each row given has at least one cube.) Each entry in the pattern proper will be a positive integer less than or equal to 20 and there will be no more than 20 entries in any row.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each input SP you should produce two stacking patterns corresponding to the left rotation and the right rotation (in that order). Rows of the SP should be left-justified with entries separated by a single space. One blank line should separate the left and right rotations of the given SP and two blank lines should separate output for different problem instances.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><P><P><P><P><P><P><pre>
3
3 3 1 0
3 1 0
2 0
6
6 5 5 4 3 3 0
6 4 3 3 1 0
6 4 3 1 1 0
4 2 2 1 0
3 1 1 0
1 1 1 0
0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><pre>
3 2 1
2 1 1
2 1
 
3 3 2
2 1 1
1
 
6 5 5 4 3 3
6 4 3 3 1
6 4 3 1 1
4 2 2 1
3 1 1
1 1 1
 
6 5 5 4 3 3
6 4 3 3 1
6 4 3 1 1
4 2 2 1
3 1 1
1 1 1
</pre><p>
______________________________________________________
2103||||||false||||||
<p>The game of checkers is played on an 8 by 8 red-black board using alternate squares. Two players (Red and White) each start with 12 pieces which are set up in the starting position shown below:</p><p ALIGN="center"><img border="0" src="http://livearchive.onlinejudge.org/external/21/2103a.gif width="436" height="260"></p><p>Rules for movement and capture are as follows (Note: a forward move is one in which a piece moves towards the opponent's side of the board):</p><p>1. Players alternate moves.</p><p>2. A piece may move one square forward diagonally to any empty square.</p><p>3. A piece may jump forward over an opposing player's piece if the opposing piece is adjacent to the piece and the square directly beyond the opposing piece is empty. After a jump, the opposing piece is removed from the board (captured). If after a jump, the jumping piece can make another jump, it must do so. This continues until it can make no other jumps. This is called a multiple jump.</p><p>4. A player must make a jump if possible. If several jumps are possible, the player may choose any, even choosing a single jump over a multiple jump. (However, if a multiple jump is chosen, it must be completed.)</p><p>5. The last row on the opponent's side of the board (the row where the piece can make no more forward moves) is the player's promotion row. When a piece reaches the promotion row it is promoted to a king and may now move and capture backward as well as forward. Once a piece is promoted, its move ends-it cannot start to jump or continue a multiple jump after becoming a king until the next turn.</p><p>6. A piece may be jumped at most once during a move (only a consideration when a king is doing the jumping).</p><p>Games are recorded using the square numbering shown above. For example, a simple forward move for White might be 22-18; a single jump for Red might be 14{23 (capturing a White piece at square 18); and a multiple jump for a White king might be 22-31-24-15 (capturing Red pieces at 26, 27 and 19).</p><p>For this problem, you will be given a position of a game in progress and a set of moves to be applied starting at that position, and you must determine if all the moves are legal by writing an Advanced Checkers Machine.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input will consist of multiple problem instances. Each instance will start with two integers r and w, indicating the number of Red and White pieces on the board (values of r = w = 0 indicates end of input, otherwise 1 &lt;= r; w &lt;= 12). The next line will contain r square numbers indicating the Red piece positions and the next line will contain w square numbers for the White piece positions. Positive square values will indicate that a normal piece lies on that square, while a negative value -sq will indicate that a promoted piece lies on square sq. The next line will contain a single integer m &gt;= 1 indicating the number of moves to make, followed by a space and then a single character (either R or W) indicating whose move it is. The next m lines will contain the m moves, using the notation described above. (You may assume that there are no more than 13 square numbers listed in any one move.)</p><p ALIGN="LEFT">All board positions will be legal positions (e.g., there will never be two pieces occupying the same square). You may assume that pieces that have advanced to their promotion row are indeed promoted; that is, there will be no pieces on their promotion row that are not kings.</p><p ALIGN="LEFT"><b><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT> </b></p><p ALIGN="LEFT">For each problem instance, output either All moves valid or Move n is invalid, where n=1 corresponds to the firrst move in the problem instance. If there are multiple illegal moves, you should list only the first such move.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
4 3
6 7 8 -16
9 18 19
3 W
9-2
16-23-14
2-11-4
4 3
6 10 15 19
18 22 23
6 R
19-26
18-11
10-14
22-18
6-10
10-15
0 0
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><pre>
All moves valid
Move 5 is invalid
</pre>
______________________________________________________
2104||||||false||||||
<p ALIGN="LEFT">Alexander Charles McMillan loves to gamble, and during his last trip to the casino he ran across a new game. It is played on a linear sequence of squares as shown below.</p><p ALIGN="center"><img border="0" src="http://livearchive.onlinejudge.org/external/21/2104a.gif width="364" height="86"></p><p ALIGN="LEFT">A chip is initially placed on the Start square. The player then tries to move the chip to the End square through a series of turns, at which point the game ends. In each turn a coin is flipped: if the coin is heads the chip is moved one square to the right and if the coin is tails the chip is moved two squares to the right (unless the chip is one square away from the End square, in which case it just moves to the End square). At that point, any instruction on the square the coin lands on must be followed. Each instruction is one of the following:</p><p ALIGN="LEFT">1. Move right n squares (where n is some positive integer)</p><p ALIGN="LEFT">2. Move left n squares (where n is some positive integer)</p><p ALIGN="LEFT">3. Lose a turn</p><p ALIGN="LEFT">4. No instruction</p><p ALIGN="LEFT">After following the instruction, the turn ends and a new one begins. Note that the chip only follows the instruction on the square it lands on after the coin ip. If, for example, the chip lands on a square that instructs it to move 3 spaces to the left, the move is made, but the instruction on the resulting square is ignored and the turn ends. Gambling for this game proceeds as follows: given a board layout and an integer T, you must wager whether or not you think the game will end within T turns.</p><p ALIGN="LEFT">After losing his shirt and several other articles of clothing, Alexander has decided he needs professional help-not in beating his gambling addiction, but in writing a program to help decide how to bet in this game.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p ALIGN="LEFT">Input will consist of multiple problem instances. The first line will consist of an integer n indicating the number of problem instances. Each instance will consist of two lines: the rst will contain two integers m and T (1 &lt;= m &lt;= 50, 1 &lt;= T &lt;= 40), where m is the size of the board excluding the Start and End squares, and T is the target number of turns. The next line will contain instructions for each of the m interior squares on the board. Instructions for the squares will be separated by a single space, and a square instruction will be one of the following: +n, -n, L or 0 (the digit zero). The first indicates&nbsp; a right move of n squares, the second a left move of n squares, the third a lose-a-turn square, and the fourth indicates no instruction for the square. No right or left move will ever move you off the board.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p ALIGN="LEFT">Output for each problem instance will consist of one line, either</p><p ALIGN="LEFT">Bet for. x.xxxx</p><p ALIGN="LEFT">if you think that there is a greater than 50% chance that the game will end in T or fewer turns, or</p><p ALIGN="LEFT">Bet against. x.xxxx</p><p ALIGN="LEFT">if you think there is a less than 50% chance that the game will end in T or fewer turns, or</p><p ALIGN="LEFT">Push. 0.5000</p><p ALIGN="LEFT">otherwise, where x.xxxx is the probability of the game ending in T or fewer turns rounded to 4 decimal places. (Note that due to rounding the calculated probability for display, a probability of 0.5000 may appear after the Bet for. or Bet against. message.)</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><pre>
5
4 4
0 0 0 0
3 3
0 -1 L
3 4
0 -1 L
3 5
0 -1 L
10 20
+1 0 0 -1 L L 0 +3 -7 0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><pre>
Bet for. 0.9375
Bet against. 0.0000
Push. 0.5000
Bet for. 0.7500
Bet for. 0.8954
</pre>
______________________________________________________
2105||||||false||||||
<p>When rendering a scene with multiple objects onto a screen, the order in 
which the objects are drawn is very important. In general, the farther an object 
is from the screen, the earlier it should be drawn allowing later, closer 
objects to be drawn on top of them. If two objects do not overlap, the order of 
drawing is immaterial. A binary space-partitioning (BSP) tree is one type of 
data structure which attempts to simplify the determination of the ordering of 
objects. It works as follows. Assume that the screen lies in the xy-plane 
centered on the z-axis and that the z-axis points away from the user looking at 
the screen. (For our purposes, assume the user lies near - &#8734;
on the z-axis.) We also assume that all the objects lie on the opposite side of 
the screen (z &gt; 0). The BSP tree is built by placing a series of planes parallel 
to the y-axis. The&nbsp; first plane divides space into two regions: a region 
containing the viewer and a region not containing the viewer. We partition all 
objects in space according to which of these two regions they lie in, and 
observe that all objects in the region containing the viewer should be drawn 
after all the objects in the other region. The BSP tree can be viewed at this 
point as a root with only two children, each child containing one of the 
partitions. We can now add a second plane, which subdivides the space again. We 
split each of the two partitions from the rst plane in two, making a total of 4 
partitions, and the resulting BSP tree now has three levels, with the partitions 
in the leaves (note that some of these partitions may contain several objects 
and some may contain none). This process is continued until each partition has 
at most one object in it, or until some predetermined number of planes has been 
used. The diagram below gives an example of using 1, 2 and 3 planes (looking 
down along the y-axis). For simplicity we assume that all objects lie parallel 
to the z-axis, so we need only deal this 2-d image to determine the BSP tree.</p>
<p align="center"><img border="0" src="http://livearchive.onlinejudge.org/external/21/2105a.gif></p>

<p ALIGN="LEFT">Assuming you have split the partitions correctly, a simple 
traversal of the BSP tree will give you an appropriate ordering for which to 
render the objects in the scene. Note in the example above that once a node 
contains just one object it need not be split as additional planes are added.</p>



<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


<p ALIGN="LEFT">Input will consist of several problem instances. The first line of each instance will 
contain a positive integer n &lt;= 20 indicating the number of objects in the 
scene. The next n lines will contain a description of these objects using the 
format m x1 z1 x2 z2 .. xm zm, where m is the number of vertices in the object 
and the remaining values are the vertices of the intersection of the object with 
the xz-plane. All objects will have between 3 and 6 vertices. Objects are 
assumed to be labeled &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, ... in the order they are defined. Next in 
the input le will be a positive integer p &lt;= 10 indicating the number of planes 
used to create the BSP tree. The last p input lines will contain a description 
of each plane of the form x1 z1 x2 z2 representing two points on the 
intersection line of the plane and the xz-plane. You may assume that no line 
will intersect any object (including edges and vertices) and that no plane is 
parallel to the z-axis. All coordinates will be integers.</p>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>


<p ALIGN="LEFT">Output will consist of a single line for each instamce containing the names of the 
objects in the order that they should be rendered for the specified BSP tree. In 
the case when some partition contains two or more objects, you should list the 
objects in alphabetical order.</p>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<pre>
10
3 65 5 66 5 65 6
3 65 123 66 123 65 124
3 122 176 123 176 122 177
3 56 23 57 23 56 24
3 11 49 12 49 11 50
3 167 111 168 111 167 112
3 57 123 58 123 57 124
3 130 6 131 6 130 7
3 100 85 101 85 100 86
3 11 28 12 28 11 29
10
159 165 -131 -177
-153 -192 -197 158
-77 -86 -98 30
-177 59 146 63
192 -117 92 43
121 -67 -62 -134
41 -81 130 196
95 -185 -89 154
-163 -179 93 175
113 41 -92 -28
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<pre>
BCGEJFIHDA
</pre>

<P>

______________________________________________________
2106||||||false||||||
<p ALIGN="LEFT">Alice Catherine Morris and her sister Irene Barbara frequently send each other e-mails. Ever wary of interceptions and wishing to keep their correspondence private, they encrypt their messages in two steps. After removing all nonalphabetic characters and converting all letters to upper case, they: 1) replace each letter by the letter s positions after it in the alphabet (1 &le; s &le; 25) - we call this a shift by s- and then, 2) divide the result of step 1 into groups of m letters and reverse the letters in each group (5 &lt;= m &lt;= 20). If the length of the message is not divisible by m, then the last k (less than m) letters are reversed. For example, suppose s = 2 and m = 6. If the plaintext were</p><p ALIGN="LEFT"><i>Meet me in St. Louis, Louis.</i></p><p ALIGN="LEFT">after removing unwanted characters and changing to upper case we get</p><p ALIGN="LEFT"><i>MEETMEINSTLOUISLOUIS</i></p><p ALIGN="LEFT">We will call this the modi ed plaintext. We then shift each letter by 2 (Y would be replaced with A and Z would be replaced by B, here), getting the intermediate result:</p><p ALIGN="LEFT"><i>OGGVOGKPUVNQWKUNQWKU</i></p><p ALIGN="LEFT">And finally reverse every group of 6 letters:</p><p ALIGN="LEFT"><i>GOVGGOQNVUPKWQNUKWUK</i></p><p ALIGN="LEFT">Note the last two letters made up the last reversed group. As is customary, we write the result in groups of 5 letters. So the cipher text would be:</p><p ALIGN="LEFT"><i>GOVGG OQNVU PKWQN UKWUK</i></p><p ALIGN="LEFT">Alas, it's not so hard to find the values for s and m when the cipher text is intercepted. In fact it's even easier if you know a crib, which is a word in the modified plaintext. In the above example, LOUIS would be a crib. Your job here is to find s and m when presented with a cipher text and a crib.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p ALIGN="LEFT">Input will consist of multiple problem instances. The first line of input will contain a positive integer indicating the number of problem instances. The input for each problem will consist of multiple lines. The first line of input for a problem will contain the integer n (20 &lt;= n &lt;= 500) which is equal to the number of characters in the ciphertext. The following lines will contain the ciphertext, all upper case in groups of 5 letters separated by a single space. (The last group of letters may contain fewer than 5 letters.) There will be 10 groups of letters per line, except possibly for the last line of ciphertext. The input line following the last line of ciphertext will contain the crib; a single word consisting of between 4 and 10 (inclusive) upper case characters.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p ALIGN="LEFT">Output will be two integers, s and m on a line, separated by a single space, indicating the encryption key that produces the crib, where s is the shift and m is the reversed group size. If there is more than one solution, output the one with smallest s. If there is more than one with the same s, output the one with smallest m. If no such s and m exist, output the message Crib is not encrypted.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><pre>
4
83
FIQMF IISFN QMFIB EOPFH FNQMV PSFIU IZNGP UPEUS BFPEP PEPPE
PPEPN QMFIP EOPIS FIQMF IBSFN QMFBE OPI
RHONDA
105
VDBMN DQDGS LNQEM ZLZRZ RNGVX ZALNA TERZV CZDGD MZQHZ GENKK
KONSC DJHKC KKZAD RZAXZ SNMRH GBHGV RZVDG XZRNS XZKOS ZCNNF
SHFMH
BOMBAY
50
QFNWX YQFNW YSAQX FYNWY XQFNW SXYQF FXNYS AXYQF NASXY QFNAX
HEAVEN
20
GOVGG OQNVU PKWQN UKWUK
LOUIS
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><pre>
1 6
25 6
Crib is not encrypted.
2 6
</pre><P>
______________________________________________________
2107||||||false||||||
<P>The <B>ToxicCo</B> chemical company has developed a new, somewhat unstable process for electroplating metals in a hot acid bath. This process requires constant monitoring of the temperatures and voltages present in the bath. Too low a temperature or too high a voltage will cause the dissolved metals to congeal in a mass at the bottom of the vat, damaging the equipment. On the other hand, if the temperature gets too high, acid fumes may be released into the atmosphere. If the voltage goes too low, the chemical reaction is altered, and an explosion becomes possible.<P>A state-of-the-art, artificially-intelligent process controller is supposed not only to keep the vat temperature and voltage at safe levels, but also to continually adjust them so as to maximize the speed of the electroplating process. Unfortunately, the software developers have reported that ``there's still a few bugs in the system" and won't promise delivery of the controller for at least another 9 months. (A few malcontents within the company are beginning to question whether the development team, headed by the nephew of the ToxicCo company president, will ever deliver a working system.)<P>This plant needs to start operation as soon as possible, so you have been commissioned to write a simpler control program to serve in the interim while the delux version is being debugged.<P><P><BR>Write a program to read descriptions of "safe regions" within which temperature and voltage levels can range and to read current temperatures and voltage values and then to determine if the current values are safe. A safe region is described by 4 linear constraints:<P><UL><LI>Two lower bounds of the form <SPAN CLASS="MATH"><I>aT</I> + <I>bV</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2107img1.gif ALT="$ \ge$"><I>c</I></SPAN> , where <SPAN CLASS="MATH"><I>T</I></SPAN> and <SPAN CLASS="MATH"><I>V</I></SPAN> denote the vat temperature and voltage, respectively. <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, and <SPAN CLASS="MATH"><I>c</I></SPAN> are constants to be supplied in the program input.<P></LI><LI>Two upper bounds of the form <SPAN CLASS="MATH"><I>aT</I> + <I>bV</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2107img1.gif ALT="$ \le$"><I>c</I></SPAN> , where the symbols are defined in the same manner. </LI></UL><P>The safe region forms a quadrilateral in the <SPAN CLASS="MATH">(<I>T</I>, <I>V</I>)</SPAN> coordinate space, and is guaranteed to be closed (i.e., the safe region does not include plus or minus infinity for either <SPAN CLASS="MATH"><I>T</I></SPAN> or <SPAN CLASS="MATH"><I>V</I></SPAN>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>All input to this program is supplied from the standard input stream. The input begins with a line containing an integer value indicating the number of data sets to follow. There will be at least one data set, but no more than 500.<P>Each data set consists of 5 lines of text, as follows<P><UL><LI>Line 1 will contain the <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, and <SPAN CLASS="MATH"><I>c</I></SPAN> values for the first lower bound.<P></LI><LI>Line 2 will contain the <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, and <SPAN CLASS="MATH"><I>c</I></SPAN> values for the second lower bound.<P></LI><LI>Line 3 will contain the <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, and <SPAN CLASS="MATH"><I>c</I></SPAN> values for the first upper bound.<P></LI><LI>Line 4 will contain the <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, and <SPAN CLASS="MATH"><I>c</I></SPAN> values for the second upper bound.<P></LI><LI>Line 5 will contain the current temperature and voltage. </LI></UL><P>On each line, the indicated values will be given as floating point numbers, separated from one another by one or more blanks. No line will exceed 80 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output of this program will consist of a single line of text per data set, written to the standard output. Each line will contain the data set number, left-justified, a blank, and then either the word `<TT>SAFE</TT>' or the word `<TT>UNSAFE</TT>', followed by the appropriate end-of-line termination. No other output should appear.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
35.0 -5.0  375.0
0.0     1.0     65.0
-10.0   32.5   3000.0
55.0   -30.0   1350.0
   15.0 75.2
35.0 -5.0  375.0
0.0     1.0     65.0
-10.0   32.5   3000.0
55.0   -30.0   1350.0
   25.0 70.6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 UNSAFE
2 SAFE
</PRE><P>
______________________________________________________
2108||||||false||||||
<P>Bill and Scott are business rivals. Each of them wishes to buy a house in Javaville, but they want to live as far away from each other as possible. Since Javaville is a relatively new town, there are no maps available yet; instead, information about homes and other buildings has been collected by word of mouth and provided to both Bill and Scott. This information consists of building addresses and distances between buildings. All of the information is consistent, although it may be incomplete or redundant.<P>The streets in Javaville are laid out in a rectangular grid of <SPAN CLASS="MATH"><I>m</I></SPAN> east/west streets (named A, B, C, ...) and <SPAN CLASS="MATH"><I>n</I></SPAN> north/south streets (numbered 0, 1, 2, ...), where <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> are each between 2 and 10. Every building (either a house or some other building, such as a post office or school) in Javaville is at the intersection of two streets, and no two buildings are located at the same intersection. Some intersections have no buildings at all. All distances are measured in terms of the smallest number of whole blocks that must be traversed north, south, east, and/or west to get from one intersection to another intersection. It is know that there are no more than 50 intersections in the entire town.<P><P><BR>Here is some sample information that might be provided to Bill and Scott by various reliable sources:<P><UL><LI>There are 5 east/west streets and 5 north/south streets.<P></LI><LI>House1 is located at intersection A0<P></LI><LI>The post office is located at intersection A4<P></LI><LI>The school is at a distance of 4 blocks from house1<P></LI><LI>House2 is at a distance of 6 blocks from the post office<P></LI><LI>The school is at a distance of 6 blocks from the post office<P></LI><LI>House3 is at a distance of 6 blocks from the post office </LI></UL><P>From this we can see that there are two possible maps of Javaville-see Figure 1.<P><PRE>
             0     1     2     3     4                0     1     2     3     4
         A   h1----o-----o-----o-----P           A    h1----o-----o-----o-----P
             |     |     |     |     |                |     |     |     |     |
             |     |     |     |     |                |     |     |     |     |
         B   o-----o-----o-----o-----o           B    o-----o-----o-----o-----o
             |     |     |     |     |                |     |     |     |     |
             |     |     |     |     |                |     |     |     |     |
         C   h2----o-----o-----o-----o    OR     C    h3----o-----o-----o-----o
             |     |     |     |     |                |     |     |     |     |
             |     |     |     |     |                |     |     |     |     |
         D   o-----S-----o-----o-----o           D    o-----S-----o-----o-----o
             |     |     |     |     |                |     |     |     |     |
             |     |     |     |     |                |     |     |     |     |
         E   o-----o-----h3----o-----o           E    o-----o-----h2----o-----o


                  Figure 1: h1,h2,h3 = houses, P = postoffice, S = school
</PRE><P><P><BR>We see that the locations of house1, the post office, and the school are fixed, but house2 could be at either C0 or E2, and house3 could be at either C0 or E2. Clearly there is always a pair of houses separated by 6 blocks (house1 is always 6 blocks from the furthest house), but the best distance we can guarantee for any <EM>specific pair</EM> of houses is 4 (since house2 is always 4 blocks away from house 3). We would report this information to Bill and Scott, telling them that, even though a separation of 6 is always achievable, the safest recommendation that we are able to make for specific houses is to have one of them purchase house2 and have the other purchase house3. (We assume that Bill and Scott will consult with one another before purchasing their houses in order to guarantee that one of our recommendations is followed.)<P><P><BR>Bill and Scott would like you to write a program that will take location and distance information about buildings and determine two quantities, <SPAN CLASS="MATH"><I>D</I></SPAN> and <SPAN CLASS="MATH"><I>D'</I></SPAN>. <SPAN CLASS="MATH"><I>D</I></SPAN> is the minimum, over all possible valid arrangements of buildings, of the largest house separation in each arrangement. <SPAN CLASS="MATH"><I>D'</I></SPAN> is the maximum value for which there exists a pair of houses <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN> that are guaranteed to be separated by a distance of at least <SPAN CLASS="MATH"><I>D'</I></SPAN>. In the latter case, you should list all pairs of houses that are guaranteed to be separated by at least <SPAN CLASS="MATH"><I>D'</I></SPAN> blocks.<P>To make sure your program is working correctly, Bill and Scott would like to be able to test it on multiple data sets, so your program will be presented with several hypothetical descriptions of Javaville.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of one or more descriptions. Each description will begin with a line containing two positive integers, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN>, representing the number of blocks in each direction ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2108img1.gif ALT="$ \le$"><I>m</I>, <I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2108img1.gif ALT="$ \le$">10</SPAN>). Each description will end with a line containing the single word `<TT>END</TT>' in uppercase. The entire data set will end with a line containing a pair of zeros. No assignment of values for <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> will result in a town having more than 50 intersections.<P>The remaining lines in each data set will be in one of the following two formats:<P><P><BR><TT><SPAN CLASS="MATH"><I>name</I></SPAN> LOCATION <SPAN CLASS="MATH"><I>r</I></SPAN> <SPAN CLASS="MATH"><I>c</I></SPAN></TT><P><P><BR>or<P><P><BR><TT><SPAN CLASS="MATH"><I>name</I></SPAN> DISTANCE <SPAN CLASS="MATH"><I>d</I></SPAN> <SPAN CLASS="MATH"><I>name</I>2</SPAN></TT><P><P><BR>where <SPAN CLASS="MATH"><I>name</I></SPAN> and <SPAN CLASS="MATH"><I>name</I>2</SPAN> are strings containing only digits and lowercase alphabetic characters, each of length at most 10; <SPAN CLASS="MATH"><I>r</I></SPAN> is an uppercase letter between <TT>A</TT> and <TT>J</TT>; <SPAN CLASS="MATH"><I>c</I></SPAN> is a digit; and <SPAN CLASS="MATH"><I>d</I></SPAN> is a positive integer. If the first five characters of a <SPAN CLASS="MATH"><I>name</I></SPAN> are the lowercase letters `<TT>house</TT>' then it is a candidate for selection as a home for Bill or Scott; otherwise it stands for some non-residential building. In a `<TT>DISTANCE</TT>' specification, <SPAN CLASS="MATH"><I>name</I>2</SPAN> will always be the name of some building that has occurred previously in this data set as the first <SPAN CLASS="MATH"><I>name</I></SPAN> on one of the data lines (in other words, there are no forward references to buildings in <TT>DISTANCE</TT> constraints). Each description is consistent (i.e., there is at least one way to lay out the houses and other buildings in a way consistent with the description). Each description will include information about at least two distinct houses. At most 20 distinct building names will occur in each description, and there will be at most 21 constraints (<TT>LOCATION</TT> or <TT>DISTANCE</TT>) for each description.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each description, the output will consist of the description number, followed by the maximum achievable house separation <SPAN CLASS="MATH"><I>D</I></SPAN>, followed by a list of all pairs of houses with maximum guaranteed separation <SPAN CLASS="MATH"><I>D'</I></SPAN> (which might be smaller than the maximum achievable separation). No pair of houses should be listed more than once. The output should be labeled exactly as shown in the sample output below, with a blank line separating the outputs for consecutive data sets. In each pair, houses should be ordered according to the first time they appear in the input; the list of pairs should be ordered in the same way, sorted by the first element of the pair, then by the second element.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 5
house1 LOCATION A 0
postoffice LOCATION A 4
school DISTANCE 4 house1
house2 DISTANCE 6 postoffice
school DISTANCE 6 postoffice
house3 DISTANCE 6 postoffice
END
2 3
school LOCATION A 0
house1 DISTANCE 1 school
house2 DISTANCE 1 house1
house3 DISTANCE 1 house2
house4 DISTANCE 1 house3
house5 DISTANCE 1 house4
END
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
DESCRIPTION 1
Maximum guaranteed separation is 6 blocks.
Houses separated by at least 4 blocks:
house2 house3

DESCRIPTION 2
Maximum guaranteed separation is 3 blocks.
Houses separated by at least 2 blocks:
house1 house3
house1 house5
house2 house4
house3 house5
</PRE><P>
______________________________________________________
2109||||||false||||||
<P>I.M. Crooked, general contractor, is looking for an easier way to give potential customers totally useless estimates of how much it will cost to build additions onto their houses. Although the final estimates aren't related to what the additions will cost, Mr. Crooked wants the estimates to be based on a formula so he can explain to the customers how he arrives at the estimate. You've been given the formula and must implement a program to automate his estimates.<P>There is a fixed base cost for adding on an addition; a cost per square foot of finished floor, ceiling, or wall; a cost per square foot of door; and a cost per square foot of window. Additionally, there are maximum widths and heights for standard doors or windows. If any window or door exceeds one of those dimensions, then the cost for that particular window or door is multiplied by a given factor.<P>Your program will accept a file which lists a set of prices, and then lists a set of potential additions. You must calculate and output the cost of each addition.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><UL><LI>line 1: <!-- MATH
 $<base \ cost>$
 --><SPAN CLASS="MATH">&lt; <I>base</I>&nbsp;<I>cost</I> &gt;</SPAN><P></LI><LI>line 2: <!-- MATH
 $<cost \ per \ finished \ square \ foot \ of \ floor/ceiling/wall>$
 --><SPAN CLASS="MATH">&lt; <I>cost</I>&nbsp;<I>per</I>&nbsp;<I>finished</I>&nbsp;<I>square</I>&nbsp;<I>foot</I>&nbsp;<I>of</I>&nbsp;<I>floor</I>/<I>ceiling</I>/<I>wall</I> &gt;</SPAN><P></LI><LI>line 3: <!-- MATH
 $<cost \ per \ square \ foot \ of \ door>$
 --><SPAN CLASS="MATH">&lt; <I>cost</I>&nbsp;<I>per</I>&nbsp;<I>square</I>&nbsp;<I>foot</I>&nbsp;<I>of</I>&nbsp;<I>door</I> &gt;</SPAN><P></LI><LI>line 4: <!-- MATH
 $<max. \ unpenalized \ door \ width>$
 --><SPAN CLASS="MATH">&lt; <I>max</I>.&nbsp;<I>unpenalized</I>&nbsp;<I>door</I>&nbsp;<I>width</I> &gt;</SPAN> <!-- MATH
 $<max. \ unpenalized \ height>$
 --><SPAN CLASS="MATH">&lt; <I>max</I>.&nbsp;<I>unpenalized</I>&nbsp;<I>height</I> &gt;</SPAN> <!-- MATH
 $<penalty \ multiplier>$
 --><SPAN CLASS="MATH">&lt; <I>penalty</I>&nbsp;<I>multiplier</I> &gt;</SPAN><P></LI><LI>line 5: <!-- MATH
 $<cost \ per \ square \ foot \ of \ window>$
 --><SPAN CLASS="MATH">&lt; <I>cost</I>&nbsp;<I>per</I>&nbsp;<I>square</I>&nbsp;<I>foot</I>&nbsp;<I>of</I>&nbsp;<I>window</I> &gt;</SPAN><P></LI><LI>line 6: <!-- MATH
 $<max. \ unpenalized \ window \ width>$
 --><SPAN CLASS="MATH">&lt; <I>max</I>.&nbsp;<I>unpenalized</I>&nbsp;<I>window</I>&nbsp;<I>width</I> &gt;</SPAN> <!-- MATH
 $<max. \ unpen. \ height>$
 --><SPAN CLASS="MATH">&lt; <I>max</I>.&nbsp;<I>unpen</I>.&nbsp;<I>height</I> &gt;</SPAN> <!-- MATH
 $<penalty \ multiplier>$
 --><SPAN CLASS="MATH">&lt; <I>penalty</I>&nbsp;<I>multiplier</I> &gt;</SPAN> </LI></UL><P>Each addition is a single room, and its definition will begin with a line:<P><P><BR><TT>room <SPAN CLASS="MATH">&lt; <I>width</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>length</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>height</I> &gt;</SPAN> <!-- MATH
 $<number \ of \ doors>$
 --><SPAN CLASS="MATH">&lt; <I>number</I>&nbsp;<I>of</I>&nbsp;<I>doors</I> &gt;</SPAN> <!-- MATH
 $<number \ of \ windows>$
 --><SPAN CLASS="MATH">&lt; <I>number</I>&nbsp;<I>of</I>&nbsp;<I>windows</I> &gt;</SPAN></TT><P><P><BR>Immediately following that line will be one door line for each door:<P><P><BR><TT>door <SPAN CLASS="MATH">&lt; <I>width</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>height</I> &gt;</SPAN></TT><P><P><BR>Following all of the door lines will be one window line for each window:<P><P><BR><TT>window <SPAN CLASS="MATH">&lt; <I>width</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>height</I> &gt;</SPAN></TT><P><P><BR>The next addition will begin immediately following the last line belonging to the previous room.<P><P><BR>The file will end with:<P><P><BR><TT>END OF INPUT</TT><P><P><BR>All numbers except the number of doors and the number of windows will be floating point numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each room, a single line of output will show the calculated price, rounded to the nearest penny. No dollar sign will be used:<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10000
3.45
2.10
3 7 1.5
4.5
3 5 2.1
room 25 15 10 2 1
door 3 8
door 3 7
window 4 5
END OF INPUT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
15431.95
</PRE><P>
______________________________________________________
2110||||||false||||||
<P>Lon Tymago, a professor of history, is having a difficult time training his students not to use the personal pronoun "I" when they write their term papers. Most of Dr. Tymago's students now submit their papers electronically, so the professor has hired you to write a program that will automatically scan the students' papers, identifying occurrences of the pronoun ``I". This will eliminate one step in grading the papers.<P>Unfortunately, history papers often make use of the Roman numeral ``I" (e.g., King George I, Pope John Paul I, World War I). Your program is not to indicate any error when it can be <EM>clearly determined</EM> that one of these situations has occurred.<P><P><BR>The word ``I," used as a pronoun, frequently occurs immediately in front of a verb: ``I think," ``I am," ``I did," and so on. The same can be said of noun phrases such as ``King George I" and ``World War I": ``George I thinks," ``World War I is," and so on. However, some verb forms are appropriate for only one case. It is grammatically correct to write ``I think," but it is not correct to write ``George I think." Likewise, we can say ``I am," but we cannot say ``World War I am." Your program will make use of verb forms as part of its strategy for locating the pronoun ``I." Of course, in some cases the verb form is not enough-for example, ``I had" and ``George I had" are both correct Your program should identify these as indeterminate cases requiring further scrutiny by Dr. Tymago.<P>One other clue helps distinguish valid uses of ``I" from invalid ones: the pronoun ``I" rarely appears immediately before a punctuation mark. (There are exceptions, of course, as in ``I, a student of history, ...," but we will assume that these exceptions will not occur in any of the student papers.)<P><P><BR>You will first be given a list of verb pairs. Each pair will show a form correct for the first-person singular pronoun ``I" and a form correct for a third-person noun (the two forms may be the same). Following this, you will be given several essays written by Dr. Tymago's students. Your program should print each line of text unchanged (including all white space, punctuation, etc.), preceded by a count of the number of positively identified uses of the first-person pronoun ``I" and a count of the uses of ``I" that are possibly incorrect. In addition, these ``I"s should be marked as described below. Correct usages of ``I" (as determined by the verb forms or presence of punctuation) should not be counted or marked.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The data file will begin with a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2110img1.gif ALT="$ \le$">50</SPAN>) indicating the number of verb pairs, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each containing the first-person and third-person forms of some verb, separated by a space. Each verb form is no longer than 20 letters. Following this will be one or more student essays. Each essay will consist of at most 25 nonempty lines, each consisting of at most 60 upper and lower case letters, spaces, and punctuation marks. There are no trailing blanks on the lines. The only permitted punctuation marks are periods (`<TT>.</TT>'), commas (`<TT>,</TT>'), exclamation points (`<TT>!</TT>'), and question marks (`<TT>?</TT>'). There are no other special characters (such as parentheses, tabs, hyphens, apostrophes, etc.), and lines are broken only between words or after punctuation marks. Each student paper will be followed by a line containing only the word `<TT>END</TT>'. The entire data file will be terminated by a line containing the words `<TT>END OF DATA</TT>'. You may assume that every verb which appears following the word ``I" will be one of the verb forms in the initial list, that the word ``I" will never appear in the text except followed by a verb form or a punctuation mark, and that no two distinct verbs will agree on their first- and third-person forms.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Imitate the sample output below. Each student essay should be printed out, preceded by a line containing the number of the essay in the input sequence. Each line of student text should be exactly reproduced in the output, including all leading blanks, punctuation marks, etc., but shifted 8 spaces to the right. Beneath each line of text there should be an indicator line showing a `<TT>*</TT>' below every positively identified use of the pronoun ``I" and a `<TT>?</TT>' below each ``I" whose meaning cannot be determined according to the rules described above. A blank indicator line should follow text lines that have no indeterminate or incorrect usages of ``I". Trailing blanks are permitted in indicator lines as long as they do not cause the total line length to exceed 80 columns. In the eight spaces preceding each line of student text there should be two integers representing the number of occurrences of the pronoun ``I" and the number of indeterminate uses of the word ``I" (cases in which the rules are not sufficient to make a determination) for that line. A blank line should separate each student's paper from the next paper.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10
was was
do does
have has
imitate imitates
think thinks
thought thought
am is
wonder wonders
would would
like likes
World War I was many years after the Revolutionary War. I
wonder what King George I would have thought of his grandson
losing that war.  Another king, Richard I, was nicknamed
Richard the Lionhearted. I think I like him.
END
   I would like to get an A on this paper about Pope Pius I,
but I have no idea who he is.
END
END OF DATA
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
STUDENT 1
  1  1  World War I was many years after the Revolutionary War. I
                  ?                                             *
  0  1  wonder what King George I would have thought of his grandson
                                ?
  0  0  losing that war.  Another king, Richard I, was nicknamed
  2  0  Richard the Lionhearted. I think I like him.
                                  *       *

STUDENT 2
  0  1     I would like to get an A on this paper about Pope Pius I,
           ?
  1  0  but I have no idea who he is.
            *
</PRE><P>
______________________________________________________
2111||||||false||||||
<P>
In the wake of the recent controversy
over the intrusive questions asked by the
US Census Bureau during the 2000
census, Congress has decided that
decisive action is required and so, after
much debate, it has decided to ...
commission a fact-finding study.
The Census Bureau has been instructed to
form discussion groups of people from
around the country and of many different
ancestries to help refine the questions for
the 2010 census.

<P>
To encourage diverse responses, no two
members of any discussion group can
come from the same ancestry or from the
same city. Furthermore, because these
people will be together in small meeting
rooms for some time, smokers should not be placed in the same group with non-smokers. Finally, the
caterer has suggested that serving lunch to these groups would be easier if
vegetarians and non-vegetarians were not mixed together.

<P>

<P>
<BR>
Write a program to read descriptions of the people participating in the fact-finding study. Your program
should then assign these people to discussion groups so that no two people of the same ancestry are
together in a group, no two people from the same city are together in a group, no group contains a mixture
of smokers and non-smokers, and no group contains a mixture of vegetarians and omnivores (non-
vegetarians).  The program should also enforce limits on the maximum number of discussion groups and
the maximum size of any one group. It is possible that, given such limits, assignment of all people into
groups may not be possible. The program should indicate in its output whether or not a suitable assignment
of people into groups is possible and, if it is possible, the membership of each group.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
All input is taken from the standard input stream. The first line of input will contain two positive integers,
separated by one or more blanks. The first integer is the maximum number of discussion groups permitted.
The second is the maximum number of people per group.

<P>
Each subsequent line of input describes a single person participating in the study. Each person is implicitly
identified by number according to the line in which their description occurs. The first line of input, as
already noted, describes the number and size of groups rather than a person. Therefore the second line of
input describes person #1, the third line describes person #2, etc.

<P>
Each person's description has the form:

<P>

<P>
<BR>

<!-- MATH
 $Ancestry-code$
 -->
<SPAN CLASS="MATH"><I>Ancestry</I> - <I>code</I></SPAN> <SPAN CLASS="MATH"><I>City</I> - <I>code</I></SPAN> <!-- MATH
 $Smoker-code$
 -->
<SPAN CLASS="MATH"><I>Smoker</I> - <I>code</I></SPAN> <!-- MATH
 $Lunch-code$
 -->
<SPAN CLASS="MATH"><I>Lunch</I> - <I>code</I></SPAN>

<P>

<P>
<BR>
Each of the four codes is separated from the others by one or more blanks. The <!-- MATH
 $Ancestry-code$
 -->
<SPAN CLASS="MATH"><I>Ancestry</I> - <I>code</I></SPAN> and
<SPAN CLASS="MATH"><I>City</I> - <I>Code</I></SPAN> are positive integers. The <!-- MATH
 $Smoker-code$
 -->
<SPAN CLASS="MATH"><I>Smoker</I> - <I>code</I></SPAN> is either `<TT>S</TT>' or `<TT>N</TT>' (Smoker or Non-Smoker).
The <!-- MATH
 $Lunch-code$
 -->
<SPAN CLASS="MATH"><I>Lunch</I> - <I>code</I></SPAN> is `<TT>V</TT>' or `<TT>O</TT>' (Vegetarian or Omnivore). The smoker and lunch codes will always
be upper-case letters. No line of input will exceed 80 characters.

<P>
The entire set of descriptions is terminated by end-of-file on the input stream. There will be at most 200
descriptions.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
All output is to the standard output stream.

<P>
If it is not possible to assign all the people to appropriate discussion groups, the program should
print `<TT>NO ASSIGNMENT POSSIBLE</TT>'.

<P>
If an assignment is possible, then the program should print one line of output for each non-empty
discussion group. Each line of output should contain the identifying numbers of the people assigned to that
group, separated from one another by a single blank character. The numbers in each line may appear in any
order. At the end of this listing of group assignments, the program should print `<TT>END OF GROUPS</TT>'.
The `<TT>NO ASSIGNMENT POSSIBLE</TT>' or `<TT>END OF GROUPS</TT>' messages should appear by themselves on
a single line starting in the first character position of that line.

<P>

<P>
<BR>
Note that, for some inputs, there may be many acceptable assignments. The program may print any
acceptable assignment in such cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 3
1 1 S V
2 3 S V
3    2 N O
  1 3 S V
1 1 N O
4 4 N O
5 7 N O
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 2
5 6 3
4
7
END OF GROUPS
</PRE>

<P>

______________________________________________________
2112||||||false||||||
<P>
The FAA's most recent plan to replace every
computerized component of their traffic control
system has failed.  They have finally decided to
replace only the most important part, the collision
detection system.  You have been given the
responsibility of writing this life-critical part of the
system.

<P>

<P>
<BR>
Your program receives input from an airport's radar
system.  The radar system is very advanced and can
report the position, direction, and speed of any
airplane in the vicinity.  The program must determine
if any plane it sees is likely to collide with any other
plane in the area.

<P>
The airport's radar spins at a continuous rate,
completing one revolution every 4 seconds.  Data is
reported about each plane as the radar faces in that
direction.  As each plane's data is received, the
program must determine if the new plane's course over the next 10 seconds will be too close to the course
of another plane that has been seen by the radar within the past eight seconds.

<P>
The minimum requirement for proximity at this airport is that the planes always be separated by at least
2500 feet in all directions (standard three dimensional distance).  If a test is made between the current plane
and one seen previously, the previous plane's course is plotted by calculating where it would be at the
current time if it has continued its last known direction over the time from when it was last seen to the
present.  For example, for a plane seen 3 seconds previously, that plane's course is plotted by calculating
where it would be 3 seconds after its last observation; then the routes of the two planes over the subsequent
10 seconds is calculated.  If, at any point during those 10 seconds, the planes would be within 2500 feet, the
two planes are too close.

<P>

<P>
<BR>
The input to the program consists of the series of radar observations.  Anytime a plane's course will bring it
too close to another plane's course, the program will output a warning listing the two planes.  If a new plane
is too close to multiple planes' flightpaths, the conflicts will be printed out from the most recently seen
plane to the least recently seen.

<P>
The radar spins clockwise.  Note that a plane's course may not conflict with its own course seen previously
by the radar.  More than one plane may be found at a particular bearing of the radar.  Planes with identical
bearings may be listed in any order.  The input will indicate when the plane spins through 0 degrees.
Planes at a bearing of 0 degrees will always be listed after this indication.

<P>
Keep only one entry for each plane.  Keep no entry older than 8 seconds.

<P>

<P>
<BR>

<B>HINT:</B> compass degrees are in a different coordinate system than standard trigonometric degrees.

<P>

<P>
<BR>
Because floating point errors may be introduced by different solutions to this problem, the data in all input
files will produce planes which pass either within 2490 feet or further than 2510 feet, so comparisons with
2500 feet are reliable.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each line consists of:

<P>

<P>
<BR>

<SPAN CLASS="MATH">&lt; <I>bearing</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>PlaneID</I> &gt;</SPAN> <!-- MATH
 $<distance \ from \ radar>$
 -->
<SPAN CLASS="MATH">&lt; <I>distance</I>&nbsp;<I>from</I>&nbsp;<I>radar</I> &gt;</SPAN> <!-- MATH
 $<elevation>$
 -->
<SPAN CLASS="MATH">&lt; <I>elevation</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>heading</I> &gt;</SPAN> <!-- MATH
 $<rate \ of \ ascent>$
 -->
<SPAN CLASS="MATH">&lt; <I>rate</I>&nbsp;<I>of</I>&nbsp;<I>ascent</I> &gt;</SPAN> <!-- MATH
 $<velocity>$
 -->
<SPAN CLASS="MATH">&lt; <I>velocity</I> &gt;</SPAN>

<P>

<UL>
<LI><SPAN CLASS="MATH">&lt; <I>bearing</I> &gt;</SPAN> is <SPAN CLASS="MATH">[0..360)</SPAN>

<P>
</LI>
<LI><SPAN CLASS="MATH">&lt; <I>PlaneID</I> &gt;</SPAN> is an alphanumeric (no spaces) id for the plane, no more than 10 characters

<P>
</LI>
<LI><!-- MATH
 $<distance \ from \ radar>$
 -->
<SPAN CLASS="MATH">&lt; <I>distance</I>&nbsp;<I>from</I>&nbsp;<I>radar</I> &gt;</SPAN> is in feet, and is in the horizontal plane only

<P>
</LI>
<LI><!-- MATH
 $<elevation>$
 -->
<SPAN CLASS="MATH">&lt; <I>elevation</I> &gt;</SPAN> is in feet

<P>
</LI>
<LI><SPAN CLASS="MATH">&lt; <I>heading</I> &gt;</SPAN> is <SPAN CLASS="MATH">[0..360)</SPAN>

<P>
</LI>
<LI><!-- MATH
 $<rate \ of \ ascent>$
 -->
<SPAN CLASS="MATH">&lt; <I>rate</I>&nbsp;<I>of</I>&nbsp;<I>ascent</I> &gt;</SPAN> is in feet per second (0 is level)

<P>
</LI>
<LI><!-- MATH
 $<velocity>$
 -->
<SPAN CLASS="MATH">&lt; <I>velocity</I> &gt;</SPAN> is in feet per second (in the horizontal plane)
</LI>
</UL>

<P>
All numbers are real-valued numbers.  All numbers will be non-negative, except for rate of ascent, which
may be negative for descent.  However, note that the courses over the next ten seconds may produce
negative coordinates, in the case of a landing plane, for instance.  Your program should allow such negative
coordinates for landing planes (do not force altitude to stay positive).  The total length of the line will not
exceed 150 characters.

<P>
A line of:

<P>

<P>
<BR>

<TT>CLICK</TT>

<P>

<P>
<BR>
indicates that the radar has spun through 360 degrees.

<P>

<P>
<BR>
The file will terminate with

<P>

<P>
<BR>

<TT>END OF INPUT</TT>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output is only produced in the case of planes' courses being too close, in which case the <SPAN CLASS="MATH"><I>PlaneID</I></SPAN> of the
just-spotted plane is printed followed by the <SPAN CLASS="MATH"><I>PlaneID</I></SPAN> of the previously seen plane.  In the case of multiple
proximity violations, print all conflicts on separate lines, with the most recently seen conflicting plane
being printed first.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 planeA 1 10000 0 0 .2
75 planeB 5.79 10000 270 0 1
270 planeC 2500 10000 0 0 .2
END OF INPUT
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
planeB planeA
planeC planeB
</PRE>

<P>

______________________________________________________
2113||||||false||||||
<P>"Louie, I bet you that there are over 200 ways to make change for a dollar."<P>"You're on Frankie, there are only 5 coins and its only 100 cents. Everyone knows there can only be 100 different ways."<P>"Oh yeah, I can prove it. Watch."<P><P><BR>Write a program that determines the number of ways the following US coins can be combined to make amounts of money up to and including 2 dollars.<P>Penny - $0.01<P>Nickel - $0.05<P>Dime - $0.10<P>Quarter - $0.25<P>Half Dollar - $0.50<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of a sequence of lines, each line indicating the amount of change required. Input terminates with a value of 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input value, a line indicating `<TT>There are <SPAN CLASS="MATH"><I>X</I></SPAN> ways to make <code>$</code><SPAN CLASS="MATH"><I>Y</I></SPAN></TT>' where <SPAN CLASS="MATH"><I>X</I></SPAN> is the number of ways, and <SPAN CLASS="MATH"><I>Y</I></SPAN> is the input value. Each input set should have one line of output.<P>After all inputs sets have been run, the program will print `<TT>End of Output</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1.00
0.51
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
There are 292 ways to make $1.00
There are 50 ways to make $0.51
End of Output
</PRE><P>
______________________________________________________
2114||||||false||||||
<P>
Even in ancient times when sea commerce was conducted entirely by sail or rowing, harbors were
sometimes mined to discourage unwelcome visitors (smugglers, raiders, etc.). Of course, in pre-gunpowder
eras, the harbor would be blocked, not with explosives.  Instead, nets, chains, sunken derilict ships and
other debris, lying a little below the waterline, could rip the bottom out of a ship, or at least strand a ship
long enough for shore-bound archers and siege engines to come to bear.

<P>
When ships arrived on legitimate business, a local pilot would row out to meet it, board the ship, and guide
it into port through the safe channels left between the underwater obstacles. The location of these safe
passages was, of course, a closely-held secret that would prove invaluable to a city's enemies.
An agent for an unfriendly power has received a description of the passage through one such harbor and
has been instructed to attempt the passage late at night to verify the accuracy of the information. If the
information is correct, a full-scale invasion will follow.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2114a.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/p2114a.jpg
 ALT="\epsfbox{p2114a.eps}">
</DIV>

<P>
<EM>"The harbor of Algorithmos is shaped by two
narrow arms of land, as shown in the
accompanying map, with the open end to the
north. The west and east ends of the opening are
100 stadia apart. Beacon fires, marked "A" and
"B" on the map, are maintained at the ends of
the two arms. At night, you will have to navigate
by reference to these beacons. Starting from the
midpoint of the line between those beacons, your
directions are as follows..."</EM>

<P>

<P>
<BR>
There follows a set of instructions of the form
``SE 10 stadia, WSW 5 stadia, S 15 stadia, ..."

<P>

<P><P>
<BR>
The agent sets out with two sailors in a small boat with a compass and a pair of sextants (navigational
instruments) that allow each sailor to measure the angle between the beacon fires and north (as indicated by
the compass). They call these angles out to the agent, who must determine when they have completed a
``leg" of the instructions.

<P>

<P>
<BR>
Write a program that reads in the instructions for the safe path and prints, for each leg of the journey, the
 angles of the two beacons at the end of that leg. The directions
 given in the input instructions and the measurement of angles
 should be conducted with respect to the conventional compass
 rose, as shown here. (All angles should be expressed in the range
 from 0 up to but not including 360, where North is 0, East is 90,
 NE is 45, NNE is 22.5, etc.)

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2114b.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/p2114a.jpg
 ALT="\epsfbox{p2114b.eps}">
</DIV>

<P>
You may assume that the beacons A and B lie exactly on an East-
 West line from one another, and are exactly 100 stadia apart. The
 safe path begins at the point 50 stadia from each beacon. You may
 assume that no safe path ever goes north of the East-West line
 between the beacons.

<P>
For each leg of the journey, you should print the heading (angle)
of the two beacons on the compass rose as observed from the boat at end of that leg. Because of the
limitations in measurement technology of the time, these outputs will be rounded to the closest degree.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
All input is taken from the standard input stream, and consists of several datasets. The first line of the
input indicates the number of datasets.

<P>
There will be a blank line before each dataset. The first line
of each dataset consists of a single integer indicating the number of
legs of the complete safe path. Each line after that describes a
single leg of the path, giving the direction in which to travel
expressed as one of the names from the compass rose (`<TT>N</TT>', `<TT>NNE</TT>',
...) followed by one or more blanks, then a distance (in stadia)
given as a positive floating point number.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
All output goes to the standard output stream.

<P>
For each successive leg of the journey, print the heading (angle) of beacon A and beacon B on a single line,
separated by a single blank. These quantities are to be rounded to the closest degree, and printed in integer
format (no decimal points).

<P>
After the angles for the final leg, print the phrase `<TT>END OF PATH</TT>' on a line by itself. Print a blank line between datasets.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
S 50.0
W 25.0
ESE 10.5
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
315 45
333 56
327 50
END OF PATH
</PRE>

<P>

______________________________________________________
2115||||||false||||||
<P>
Consider the function f which is inductively defined on the positive integers, as follows:
<blockquote>
f(1) = 1<br>
f(2n) = n<br>
f(2n+1) = f(n) + f(n+1)<br>
</blockquote>
Given a positive integer value for n (greater than or equal to 1), find the value of f(n).
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a sequence of positive integer values for n followed by 1. The integers are preceded and/or followed
by whitespace (blanks, tabs, and ends of lines).
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each positive integer n, display the value of n and the value of f(n). Use the format shown in the example below, and
leave a blank line between the output for each value of n.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
  2    53
          153
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
f(2) = 1

f(53) = 27

f(153) = 77
</PRE>

<P>

______________________________________________________
2116||||||false||||||
<P>
The Mobius function M(n) is defined on positive integers as follows:
<blockquote>
M(n) = 1 if n is 1.<br>
M(n) = 0 if any prime factor of n is contained in n more than once.<br>
M(n) = (1)<sup>p</sup> if n is the product of p different prime factors.<br>
</blockquote>
For example:
<blockquote>
M(78) = 1, since 78 = 2 x 3 x 13.<br>
M(34) = 1, since 34 = 2 x 17.<br>
M(45) = 0, since 45 = 3 x 3 x 5.<br>
</blockquote>
Given a value for n greater than or equal to 1 and less than or equal to 10000, find the value of M(n).
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a sequence of positive integer values for n followed by 1. The integers are preceded and/or followed
by whitespace (blanks, tabs, and ends of lines).
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each positive integer n, display the value of n and the value of f(n). Use the format shown in the example below, and
leave a blank line between the output for each value of n.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
78
    34      45
       105
     1
           -1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
M(78) = -1

M(34) = 1

M(45) = 0

M(105) = -1

M(1) = 1
</PRE>

<P>

______________________________________________________
2117||||||false||||||
<P>
A flat rectangular maze is constructed from square cells. Each cell has one, two, or three open sides. The maze has two entry points
from outside the maze, one in the cell at the upper left corner of the maze, and the other in the cell at the lower right corner of the
maze. A maze may have dead ends, but it does not contain any loops. That is, there is no forward path through a maze that will lead
back to a previously visited cell.

<p>
At the same time, two robots (named Ro and Bot) enter and begin traversing the maze. Ro enters at the upper left corner, and Bot
enters at the lower right corner. Each robot takes the same amount of time to move from one cell to the next. The robots follow these
rules in traversing the maze:

<blockquote>
<li>If a robot enters a cell that has only one open side (a dead end), the robot turns around and leaves the cell.
<li>If a robot enters a cell that has two open sides, it leaves using the side through which it did not enter.
<li>If a robot enters a cell that has three open sides A, B and C (labeled in clockwise order), and was first entered through side A, the
robot must choose to leave through side B or side C. Ro will choose to exit through side B, and Bot will choose to exit through
side C. If a dead end later causes a robot to return to the cell, it will then leave through the last remaining open side. For
example, if Ro enters a cell with three open sides through side A, it will leave through side B. If that route leads to dead ends, Ro
eventually returns to the cell and leaves through side C. Naturally if all paths reached through sides B and C lead to dead ends,
the robot eventually retreats back through side A (which it first used when it entered the cell).
<li>The robots stop if they meet in a cell (at the same time) or if they exit the maze.
You are to write a program that will determine from the description of a maze if the robots will stop inside the maze, and if they do,
the cell at which they will stop.
</blockquote>

<p>
A few examples will clarify these ideas. Shown below are three mazes. Below each maze is a table showing the cells through which
the robots will pass while traversing the maze. Row and column numbers are used to identify the cells in each maze.
<P>
<center>
<IMG BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2117a.gif>
</center>
<p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input data will contain descriptions of multiple mazes. The description of each maze begins with integers giving the
number of rows (NR) and number of columns (NC) in the maze. Neither NR nor NC will be larger than 20. Following these
integers there will appear NR × NC hexadecimal digits, corresponding to the cells in the maze in row-major order. Blanks
and end of line characters may be included at arbitrary places for readability. Hexadecimal digits include the decimal digits 0
through 9 (representing themselves), and the upper case letters A through F (representing the values 10 through 15
respectively). Each hexadecimal digit identifies the open sides of the corresponding cell in the maze, as follows. Each side
of a cell has an associated number: top = 1, right = 2, bottom = 4, and left = 8. If the numbers corresponding to the open
sides of a cell are totaled, they yield the corresponding hexadecimal digit that will appear in the input for that cell. For
example, a cell that has only its left and right sides open would be specified in the input as the hexadecimal digit A, since 8
(left) + 2 (right) = 10. A cell with its right, bottom, and left sides open would be specified in the input as the hexadecimal
digit E, since the value of E is 14, or 2 (right) + 4 (bottom) + 8 (left).

<p>
A pair of zeroes follows the data for the last case.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each maze must begin with the word Maze followed by the maze sequence number (they are numbered
sequentially starting with 1), a colon, and a blank. This is then followed by the message
<blockquote>
The robots do not meet.
</blockquote>
or the message
<blockquote>
The robots meet in row R, column C.
</blockquote>
as appropriate (with R and C replaced by the row and column number at which the robots meet). Leave a single blank line
between the output for each maze.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 3 A C 4 4 7 D 7 D 1 1 3 A
3 7 C 4 2 E A E C 5 3 E 9 6 9 1 3 A B 8 3 A A
5 4 A E C 4 4 5 1 5 3 B A D 6 C 6 9 1 3 B A
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Maze 1: The robots do not meet.

Maze 2: The robots meet in row 1, column 4.

Maze 3: The robots do not meet.
</PRE>

<P>

______________________________________________________
2118||||||false||||||
<P>

The single player game of minesweeper is played on a rectangular grid. Each cell in this grid is either vacant or contains a
mine. When the game begins, all cells are covered so the player cannot tell if a cell contains a mine. Plays consist of
selecting and uncovering cells, one at a time. If an uncovered cell contains a mine, the game is over. If the cell does not
contain a mine, it reveals an integer that indicates the number of neighboring cells that do contain mines. Neighboring cells
are those that are immediately adjacent either horizontally, vertically, or diagonally.

<p>
In this problem, you are given a game grid on which some number of plays has already been made without uncovering a
mine. You are to determine the status of those still covered cells whose status can be determined using only the information
revealed by the uncovered cells. That is, for each cell still covered, determine if its status can be discovered, and if so,
whether or not it contains a mine.

<p>
As an example, consider the grids shown below. The cells with the darker background color and without a number represent
cells that are still covered. The cells containing a number are uncovered, and the number each contains indicates the number
of neighboring cells that contain mines. In the left grid, it is clear that the rightmost uncovered cell in the top row contains a
mine, as do the last uncovered cell in the leftmost column and the rightmost uncovered cell in the second row from the top.
These cells have been marked with an asterisk (*) for clarity. We can now determine that the covered cells marked with a
plus sign (+) have no mines. The status of the cell in the upper left corner of the grid cannot be determined. In the right grid,
we cannot unambiguously determine the status of any uncovered cells. It could be that the first or second cell in the top row
contains a mine, with the other cell not containing a mine.

<P>
<center>
<IMG SRC="http://livearchive.onlinejudge.org/external/21/p2118a.jpg>
</center>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input data will contain multiple cases. Each case begins with integers giving the number of rows and columns in the
grid. There will be no more than 10 rows and 10 columns in the grid. Following these there will be one integer for each cell
in the grid, given in row major order. For a covered cell, the value 1 is given. For an uncovered cell, the number of
neighboring (covered) cells that contain mines is given, a value between 0 and 8. No uncovered cells contain mines.

<p>
A pair of zeroes follows the data for the last case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, first display the case number. Cases are numbered sequentially, starting with 1. Then display a list with the
row and column number of each cell that definitely contains a mine, and another list with the row and column number of
each cell that definitely does not contain a mine. The lists are to be displayed in a format similar to that shown in the sample
below. Separate the output for consecutive cases with a blank line.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5 5
-1 -1 -1 -1  1
-1 -1  2  1  1
-1  2  1  0  0
-1  1  0  0  0
 1  1  0  0  0

2 2
-1 -1
 1  1

0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1:
    Cells with mines: (1,4), (2,2), (4,1)
    Cells without mines: (1,2), (1,3), (2,1), (3,1)

Case 2:
    Cells with mines:
    Cells without mines:
</PRE>

<P>

______________________________________________________
2119||||||false||||||
<P>

A popular television game show requires contestants to identify a phrase, usually with some of the letters missing. Some of
these phrases are formed from a combination of two phrases that are unrelated, except that the last word (or words) of the
first phrase are the same as the first word (or words) of the second phrase.

<p>
For example, consider the phrases the shallow end of the pool and the pool table. The last two words of the first phrase
(the pool) are the same as the first two words of the second phrase. These phrases could then be combined to yield the
before and after phrase the shallow end of the pool table.

<p>
In this problem you are given a set of phrases and asked to find all possible before and after phrases that can be produced.
For each such combination, you are to display the two phrases, one per line, with the common words aligned.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input data contains one line for each phrase, with a blank line following the last phrase. Each phrase will consist of
words containing only lower-case alphabetic characters. Words are separated by one or more blanks, and blanks may
precede or follow the phrase. No word will contain more than 12 letters, and no input line will contain more than 50
characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Display three lines for each before and after phrase that can be produced from the phrases given in the input. On the first
line, display the first phrase starting in column 1. On the second line, display the second phrase indented so the overlapping
word (or words) are perfectly aligned under the matching words in the first phrase. The third line is blank. Each phrase
should be displayed with exactly one blank between adjacent words.

<p>
The order in which the before and after phrases are displayed should correspond to the order in which the first phrase of the
combination appears in the input data.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
house  of  cards
     the pool table
  the white house
      the house limit
the  shallow  end  of  the  pool
<i>(This line is blank)</i>
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
the white house
          house of cards

the shallow end of the pool
                   the pool table
</PRE>

<P>

______________________________________________________
2120||||||false||||||
<P>

Prime numbers (those that have only themselves and other primes as factors) starting with 2 can be arranged on a two-dimensional
plane starting as show below:

<p>
<center>
<img src=p2120a.gif>
</center>

<p>
Assume a Cartesian coordinate system is used to reference the primes, and that 2 is located at (0,0). We can then see that 3 is
located at (1,0), 5 is located at (1,1), 7 is located at (0,1) and 11 is located at (1,1). Given the coordinates of a prime number
in this system, find and display the prime number at that location.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input data will contain multiple pairs of integers, each pair representing the coordinates of a prime number. The last pair
will be followed by a single integer 999. No prime will be larger than 10000.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each coordinate pair, display the input case number (starting with 1), the coordinate pair, and the prime at that coordinate
location. Display one blank line between the output for each case. Your output should resemble the format shown below.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 1
2 2
-2 2
-999
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1: The prime at location (1,1) is 5.

Case 2: The prime at location (2,2) is 41.

Case 3: The prime at location (-2,2) is 59.
</PRE>

<P>

______________________________________________________
2121||||||false||||||
<P>

A program is needed to assist in checking and visualizing the mazes for problem 3. In that problem, the input consists of a
sequence of maze descriptions. The mazes are rectangular, and consist of a number of square cells. Some of the sides of
these cells are solid, and other sides are open.

<p>
To be consistent, an open side in one cell must correspond to an open side on the adjacent neighboring cell. The maze
characteristics also require that there be only two entry points to the maze, one on the left side of upper left cell in the maze,
and one on the right side of the lower right cell in the maze.

<p>
These maze characteristics can be easily verified if a visual representation of the maze is available. To prepare such a
representation, each cell in the maze is approximately displayed using plus signs at the corners of cells, three hyphens (or
minus signs) for a solid top or bottom side, and a single vertical stroke for a solid left or right side. An appropriate number of
blanks should be used for any open sides of a cell. If a side shared by two cells is inconsistent (solid in one cell and open in
the other), then print three lower-case xs in place of the three hyphens if a top or bottom side is inconsistent, or a single
upper case X in place of the vertical stroke if a left or right side is inconsistent.

<p>
A cell with solid sides is shown on the left below. To its right a two row, two-column maze is shown. This maze has an
open side to the left of the upper left cell and to the right of the lower right cell. The visualization also shows an
inconsistency between the right side of the upper left cell and the left side of the upper right cell, and an inconsistency
between the lower side of the upper right cell and the upper side of the lower right cell.

<p>
<center>
<img src=p2121a.gif>
</center>

<p>
Display a visual representation of each maze in the input data.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input data will contain descriptions of multiple mazes. The description of each maze begins with integers giving the
number of rows (NR) and number of columns (NC) in the maze. Neither NR nor NC will be larger than 20. Following these
integers there will appear NR × NC hexadecimal digits, corresponding to the cells in the maze in row-major order. Blanks
and end of line characters may be included at arbitrary places for readability. Hexadecimal digits include the decimal digits 0
through 9 (representing themselves), and the upper case letters A through F (representing the values 10 through 15
respectively). Each hexadecimal digit identifies the open sides of the corresponding cell in the maze, as follows. Each side
of a cell has an associated number: top = 1, right = 2, bottom = 4, and left = 8. If the numbers corresponding to the open
sides of a cell are totaled, they yield the corresponding hexadecimal digit that will appear in the input for that cell. For
example, a cell that has only its left and right sides open would be specified in the input as the hexadecimal digit A, since 8
(left) + 2 (right) = 10. A cell with its right, bottom, and left sides open would be specified in the input as the hexadecimal
digit E, since the value of E is 14, or 2 (right) + 4 (bottom) + 8 (left).
A pair of zeroes follows the data for the last case.<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each maze will begin with identification of the maze number. Mazes are numbered sequentially starting with
1. Following this identification there should be a single blank line and the visualization of the maze as previously described.
The maze should be displayed starting in column one of each output line. A blank line should follow each maze.<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 3 A C 4 4 3 D 7 D D 1 3 A
3 7 C 4 2 2 A E C 5 3 E 9 6 9 1 3 A B 8 3 A A
5 4 A E C 4 4 5 1 5 2 B A D 6 C 6 9 1 3 B A
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Maze 1:

+---+---+---+
        |   |
+---+   +   +
|   |       |
+   +xxx+   +
|       X   |
+   +   +xxx+
|   |
+---+---+---+

Maze 2:

+---+---+---+---+---+---+---+
    |   |   X               |
+   +   +---+xxx+---+   +   +
|   |           |       |   |
+   +---+   +---+   +---+---+
|               |
+---+---+---+---+---+---+---+

Maze 3:

+---+---+---+---+
            |   |
+---+   +   +   +
|   |   |   |   |
+xxx+   +---+   +
|               |
+---+---+---+   +
|       |       |
+   +   +   +---+
|   |
+---+---+---+---+
</PRE>

<P>

______________________________________________________
2122||||||false||||||
<P>The functional programming language LISP uses s-expressions to represent programs and the data on which they operate. A simplified definition of an s-expression is as follows.<blockquote>1. Any single alphabetic letter, upper or lower case, is an s-expression.<br>2. If u and v are s-expressions, then so is (u,v) .</blockquote><p>For example, each of the letters a, c and m is individually a legal s-expression, as confirmed by part 1 of the definition. Using part 2 of the definition, we determine that (a,c) is also a legal s-expression, and then so is ((a,c),m).<p>Your task, in this problem, is to develop a recognizer for s-expressions of the form just described. For each potential s-expression given in the input, you are to determine if it is legal and to display your finding.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input data will contain multiple candidates for s-expressions. Each line of the input will contain an s-expression candidate. There may be blanks (spaces) before, after, or both before and after the candidate. No input line will contain more than 72 characters. A blank line (that is, a line containing only zero or more blanks) will follow the last candidate.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each candidate, display the input line number (starting with 1), the candidate (without any leading blanks), and an indication of whether it is an s-expression or not. Display one blank line between the output for each candidate. Your output should resemble the format shown below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
a
  b
    (a,b)
((a,b),(C,d))
  (ab,c)
     [ a , b ]
<i>(This line is blank)</i>
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1: a
   is an s-expression.

2: b
   is an s-expression.

3: (a,b)
   is an s-expression.

4: ((a,b),(C,d))
   is an s-expression.

5: (ab,c)
   is not an s-expression.

6: [ a , b ]
   is not an s-expression.
</PRE><P>
______________________________________________________
2123||||||false||||||
<P>
The Quadratic Equation was a topic that preoccupied you for some time in Algebra. In this problem you'll be revisiting this topic. You are to find the roots of a quadratic equation: 

<P>
<P><!-- MATH
 \begin{displaymath}
a x^{2} + b x + c \equiv  0 \ (\mbox{\texttt{Mod }}p)
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>ax</I><SUP>2</SUP> + <I>bx</I> + <I>c</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$\displaystyle \equiv$"> 0&nbsp;(<TT>Mod </TT><I>p</I>)
</DIV><P></P>
with a little twist. The coefficients <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN> as well as <SPAN CLASS="MATH"><I>x</I></SPAN> are positive integers in the range <SPAN CLASS="MATH">1...<I>p</I></SPAN> where <SPAN CLASS="MATH"><I>p</I></SPAN> is an odd prime number (that is included as part of the input). All operations are done (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>). For instance, consider the equation <!-- MATH
 $3 x^{2} + 1000 x + 65709 \equiv  0 \ (\mbox{\texttt{Mod }}p)$
 -->
<SPAN CLASS="MATH">3<I>x</I><SUP>2</SUP> +1000<I>x</I> + 65709 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 0&nbsp;(<TT>Mod </TT><I>p</I>)</SPAN> and <!-- MATH
 $p = 337639$
 -->
<SPAN CLASS="MATH"><I>p</I> = 337639</SPAN>. (You may trust us, 337639 is a prime number). You may verify <SPAN CLASS="MATH"><I>x</I> = 2345</SPAN> is one root of this quadratic (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>).

<P>
One way to solve a modular quadratic is to use the good old Quadratic formula. The only caveat is how to perform the 
operations needed in the quadratic formula (efficiently!). For example, we need: 

<P>

<UL>
<LI>the ``<SPAN  CLASS="textbf">power</SPAN>" (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) operation,
</LI>
<LI>the ``<SPAN  CLASS="textbf">square root</SPAN>" (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) operation, and finally
</LI>
<LI>the ``<SPAN  CLASS="textbf">division</SPAN>" (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) operation.
</LI>
</UL>

<P>

<P>
<BR>

<SPAN ID="txt191"><SPAN  CLASS="textbf">Modular Power Operation </SPAN></SPAN>

<P>
Modular power is defined by the equation: <SPAN CLASS="MATH">(<I>a</I>)<SUP>b</SUP></SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>). You take the exponent of the number a and calculate the result (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>):

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Examples of Modular Power Operation: </SPAN>

<P>
<PRE><TT>
<TT>CASE:</TT> <SPAN CLASS="MATH"><I>p</I> = 7</SPAN>: 
<BR><!-- MATH
 $(5)^{4} \equiv  625 \equiv 2$
 -->
<SPAN CLASS="MATH">(5)<SUP>4</SUP> <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 625 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 2</SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
<BR><TT>CASE:</TT> 		 <SPAN CLASS="MATH"><I>p</I> = 13</SPAN>: 
<BR><!-- MATH
 $(5)^{4} \equiv  625 \equiv  1$
 -->
<SPAN CLASS="MATH">(5)<SUP>4</SUP> <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 625 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 1</SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
</TT></PRE> 

<P>

<SPAN ID="txt192"><SPAN  CLASS="textbf">Modular Square Root Operation</SPAN> </SPAN>

<P>
A number <SPAN CLASS="MATH"><I>n</I></SPAN> has two <TT>square roots</TT> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>), <B>if and only if</B> the following condition holds: 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<B>CONDITION</B>   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <B>IMPLIES THAT</B>  </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $n \verb!^! ((p-1)/2) == 1$
 -->
<SPAN CLASS="MATH"><I>n</I><code>^</code>((<I>p</I> - 1)/2) = = 1</SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>)  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <SPAN CLASS="MATH"><I>n</I></SPAN> has two square roots (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $n \verb!^! ((p-1)/2) != 1$
 -->
<SPAN CLASS="MATH"><I>n</I><code>^</code>((<I>p</I> - 1)/2)! = 1</SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>)  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>n</I></SPAN> has no square root (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
If <SPAN CLASS="MATH"><I>n</I></SPAN> has two ``<TT>square roots</TT>" (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>), then there exists two integers <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN> such that: 
<P><!-- MATH
 \begin{displaymath}
n \equiv r_{1} \verb!^! 2 \ (\mbox{\texttt{Mod }}p) \mbox{ and } n \equiv r_{2} \verb!^! 2 \ (\mbox{\texttt{Mod }}p)
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>n</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$\displaystyle \equiv$"> <I>r</I><SUB>1</SUB><code>^</code>2&nbsp;(<TT>Mod </TT><I>p</I>) and <I>n</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$\displaystyle \equiv$"> <I>r</I><SUB>2</SUB><code>^</code>2&nbsp;(<TT>Mod </TT><I>p</I>)
</DIV><P></P>

<P>
The main trick is finding the integers <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN>. While we <SPAN  CLASS="textbf">won't</SPAN> show you how to calculate a ``<TT>square root</TT>" (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>), (that's your job!) we will show you how these square roots work: 

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Examples of Modular Square Root Operation:</SPAN>

<P>
<PRE><TT>
<TT>CASE:</TT> <SPAN CLASS="MATH"><I>p</I> = 7</SPAN>: 
<BR>
Given below are the two ``<TT>square roots</TT>" of 4 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
r<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> = Sqrt(4) <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> 2 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
r<SPAN CLASS="MATH"><SUB>2</SUB></SPAN> = Sqrt(4) <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> 5 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
Make sure these are indeed the ``<TT>square roots</TT>" of 4 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
Check <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN>: (<SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN>)<code>^</code> 2 <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> 2 <SPAN CLASS="MATH"><TT>*</TT></SPAN> 2 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> 4 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> 4 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
Check <SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN>: (<SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN>)<code>^</code> 2 <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> 5 <SPAN CLASS="MATH"><TT>*</TT></SPAN> 5 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> 25 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> 4 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
<BR><TT>CASE:</TT> 		 p = 337639277: 
<BR>
Given below are the two ``<TT>square roots</TT>" of 17 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR><SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN> <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> Sqrt(17)   113622037 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR><SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN> <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> Sqrt(17)   224017240 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
Make sure these are indeed the ``<TT>square roots</TT>" of 4 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
Check <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN>: <SPAN CLASS="MATH">(<I>r</I><SUB>1</SUB>)</SPAN><code>^</code> 2 <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> 12909967292029369   17 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
Check <SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN>: <SPAN CLASS="MATH">(<I>r</I><SUB>2</SUB>)</SPAN><code>^</code> 2 <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"></SPAN> 50183723817217600   17 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
</TT></PRE>

<P>

<SPAN ID="txt195"><SPAN  CLASS="textbf">Modular Division Operation</SPAN></SPAN>

<P>
In order to do modular division, you need to understand the modular multiplicative inverse operation. Assume that <SPAN CLASS="MATH"><I>z</I></SPAN> is the multiplicative inverse of a number <SPAN CLASS="MATH"><I>b</I></SPAN> then the following should hold:
<P><!-- MATH
 \begin{displaymath}
z \cdot b \equiv 1 \ (\mbox{\texttt{Mod }}p)
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>z</I><SUP> . </SUP><I>b</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$\displaystyle \equiv$"> 1&nbsp;(<TT>Mod </TT><I>p</I>)
</DIV><P></P>
this implies that 
<P><!-- MATH
 \begin{displaymath}
z \equiv (b)^{-1} \ (\mbox{\texttt{Mod }}p)
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>z</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$\displaystyle \equiv$"> (<I>b</I>)<SUP>-1</SUP>&nbsp;(<TT>Mod </TT><I>p</I>)
</DIV><P></P>
thus, <SPAN CLASS="MATH">(<I>b</I>)<SUP>-1</SUP></SPAN> is the multiplicative inverse of <SPAN CLASS="MATH"><I>b</I></SPAN>. To divide any number <SPAN CLASS="MATH"><I>a</I></SPAN> by <SPAN CLASS="MATH"><I>b</I></SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) simply multiply <SPAN CLASS="MATH"><I>a</I></SPAN> by the multiplicative inverse of <SPAN CLASS="MATH"><I>b</I></SPAN> 

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Examples of Modular Division:</SPAN>

<P>
<PRE><TT>
<TT>CASE:</TT> <SPAN CLASS="MATH"><I>p</I> = 7</SPAN>: 
<BR>
Calculate <!-- MATH
 $5/4 \equiv  5 \ast (4)^{-1}$
 -->
<SPAN CLASS="MATH">5/4 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 5 <TT>*</TT> (4)<SUP>-1</SUP></SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
First, find the inverse of 4 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>): <!-- MATH
 $(4)^{-1} \equiv 2$
 -->
<SPAN CLASS="MATH">(4)<SUP>-1</SUP> <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 2</SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
Second, calculate <!-- MATH
 $5 \ast (4)-1 \equiv 5 \ast 2 \equiv 10 \equiv 3$
 -->
<SPAN CLASS="MATH">5 <TT>*</TT> (4) - 1 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 5 <TT>*</TT> 2 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 10 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 3</SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
Check: <!-- MATH
 $(5/4) \ast 4 \equiv  3 \ast 4 \equiv 12 \equiv 5$
 -->
<SPAN CLASS="MATH">(5/4) <TT>*</TT> 4 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 3 <TT>*</TT> 4 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 12 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 5</SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
<BR><TT>CASE:</TT> 		 p = 13: 
<BR>
Calculate <!-- MATH
 $5/4 \equiv 5 \ast(4)^{-1}$
 -->
<SPAN CLASS="MATH">5/4 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 5 <TT>*</TT> (4)<SUP>-1</SUP></SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
First, find the inverse of 4 (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>): <!-- MATH
 $(4)^{-1} \equiv 10$
 -->
<SPAN CLASS="MATH">(4)<SUP>-1</SUP> <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 10</SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
Second, calculate <!-- MATH
 $5 \ast (4)-1 \equiv 5 \ast 10 \equiv 50 \equiv 11$
 -->
<SPAN CLASS="MATH">5 <TT>*</TT> (4) - 1 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 5 <TT>*</TT> 10 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 50 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 11</SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
Check: <!-- MATH
 $(5/4) \ast 4 \equiv 11 \ast 4 \equiv 44 \equiv 5$
 -->
<SPAN CLASS="MATH">(5/4) <TT>*</TT> 4 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 11 <TT>*</TT> 4 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 44 <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2123img1.png
 ALT="$ \equiv$"> 5</SPAN> (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>) 
<BR>
</TT></PRE>

<P>

<SPAN ID="txt198"><SPAN  CLASS="textbf">The Program</SPAN></SPAN> 

<P>

<SPAN  CLASS="textbf">!!!NOTE!!!:</SPAN> Calculations <B>may require integers</B> up to a maximum of <B>64 bits</B> in length.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your task is to write a program that reads quadratic equations from a text file, and determines whether or not each of the equations in the input has roots (<TT>Mod </TT><SPAN CLASS="MATH"><I>p</I></SPAN>). Each quadratic equation is on a separate line. The coefficients <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN> of each quadratic equation and a modulus <SPAN CLASS="MATH"><I>p</I></SPAN> are given on each line.  You may safely assume that all the non-negative values of <SPAN CLASS="MATH"><I>p</I></SPAN> are odd prime numbers, however, if you encounter a negative <SPAN CLASS="MATH"><I>p</I></SPAN> value, you should output the message ``<TT>invalid input</TT>" as shown below in the sample. Your program must be efficient, because the input file will contain a large number of equations to solve. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each equation, output the equation and the root(s) in the following format: 

<P>

<P>
<BR>

<TT>Q[x_] := Mod[ <SPAN CLASS="MATH"><I>a</I></SPAN>x<code>^</code>2 + <SPAN CLASS="MATH"><I>b</I></SPAN>x + <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH"><I>p</I></SPAN> ]</TT> 
<BR><TT>{</TT> <SPAN CLASS="MATH"><I>root</I>(<I>s</I>)</SPAN> or <SPAN CLASS="MATH"><I>message</I></SPAN> goes here <TT>}</TT> 
<BR><SPAN  CLASS="textit">...blank line...</SPAN> 
<BR><TT>Q[x_] := Mod[ <SPAN CLASS="MATH"><I>a</I></SPAN>x<code>^</code>2 + <SPAN CLASS="MATH"><I>b</I></SPAN>x + <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH"><I>p</I></SPAN> ]</TT> 
<BR><TT>{</TT> <SPAN CLASS="MATH"><I>root</I>(<I>s</I>)</SPAN> or <SPAN CLASS="MATH"><I>message</I></SPAN> goes here <TT>}</TT> 
<BR><SPAN  CLASS="textit">...blank line...</SPAN>

<P>

<P>
<BR>
To see how this format corresponds to actual input look at the sample input and output given below. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4  3         3         -13
4  3         3         13
17 8         1         71 
3  1000      65709     337639 
1  179344794 146367396 179424691
</PRE>   

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Q[x_] := Mod[ 4x^2 + 3x + 3, -13 ]
{ invalid input } 
 
Q[x_] := Mod[ 4x^2 + 3x + 3, 13 ] 
{ 11 }

Q[x_] := Mod[ 17x^2 + 8x + 1, 71 ]
{ has no roots } 

Q[x_] := Mod[ 3x^2 + 1000x + 65709, 337639 ]
{ 2345, 109868 } 

Q[x_] := Mod[ 1x^2 + 179344794x + 146367396, 179424691 ]
{ 78021, 1876 }
</PRE>  

<P>

______________________________________________________
2124||||||false||||||
<P>Given 3 values, <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN>, what is the smallest integer having a base less than or equal to 36 such that <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB> + <I>s</I><SUB>2</SUB> = <I>s</I><SUB>3</SUB></SPAN>? Each string, <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN>, is composed of digits and upper case letters, with ASCII value ordering <SPAN CLASS="MATH">(0123...<I>XYZ</I>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Groups of 3 strings (one per line) <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>, <I>s</I><SUB>3</SUB></SPAN>.<P><UL><LI>Each string will be at most 80 characters. </LI><LI>Each string will consist entirely of digits &amp; upper-case letters. </LI></UL><P>Input will end with a single `<TT>0</TT>' alone on a line. Thus, the total number of lines will be <SPAN CLASS="MATH">3 <TT>*</TT> <I>k</I> + 1</SPAN> (for some integer <SPAN CLASS="MATH"><I>k</I></SPAN>). There will be no leading zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each triplet of <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN>, print one line of output (line-wrap is allowable for long strings):<P><UL><LI>If a value, <SPAN CLASS="MATH"><I>x</I></SPAN>, is found that meets the criteria, print: <TT><SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> + <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> = <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN> in base <SPAN CLASS="MATH"><I>x</I></SPAN></TT> </LI><LI>If no answer exists, print: <TT><SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> + <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> != <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN></TT> </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
3 
10 
5 
3 
11 
5 
3 
8 
5 
3 
7 
ABC 
DEF 
18AB 
1111111111111111111 
2222222222222222222 
3333333333333333333 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 + 3 = 10 in base 8 
5 + 3 = 11 in base 7 
5 + 3 = 8 in base 9 
5 + 3 != 7 
ABC + DEF = 18AB in base 16 
1111111111111111111 + 2222222222222222222 = 3333333333333333333 in base 4
</PRE><P>
______________________________________________________
2125||||||false||||||
<P>
Cribbage is an old card game, usually played by 2 people. Points are scored by having various card 
combinations in a hand.  In Cribbage, many of these combinations are similar to other card games, 
two-of-a-kind, three-of-a-kind, four-of-a-kind and runs (numerically sequential cards of 3 or more).  
But also in Cribbage, combinations of cards that add up to 15 are important. (Face cards are 
counted as 10 points, and aces are worth 1 point).

<P>
In a standard, two-player game, each person is dealt 6 cards. Four of these cards are kept as the 
player's hand, and the other 2 are placed in the ``crib". The crib is given to each player 
alternately. 
Therefore, scoring is done on groups of 4 cards (either in the hand or the crib). In addition, a 
single card is turned up (after the crib is made), which can be used to supplement the scoring. 

<P>
In our version of Cribbage, we will be ``dealt" 8 cards, plus the one extra. It is the job of your 
program to divide the 8 dealt cards into a hand and a crib (4 cards each) such that the maximum total 
score is achieved, using the extra card as appropriate. (That is, the sum of the hand and the crib is 
maximized.) 

<P>

<P>
<BR>
For our purposes, we will not use card suits, and we will represent the cards as single characters, 
as follows:

<P>
Ace=1, Two=2, Three=3, Four=4, Five=5, Six=6, Seven=7, Eight=8, Nine=9, Ten=T, Jack=J, 
Queen=Q, King=K 

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Scoring</SPAN> 

<P>
Two-of-a-kind (a pair): 2 points 

<P>
Three-of-a-kind (3 pair): 6 points 

<P>
Four-of-a-kind (6 pair): 12 points 

<P>
Runs (sequentially numbered cards of length greater than 2): 1 point per card in the run 

<P>
Fifteens: 2 points for any distinct combination of cards that sum to 15 

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Example #1</SPAN> 

<P>
Hand dealt: 5T524765 

<P>
Extra card: 9 

<P>
Best possible total score: 20 points 

<P>

<P>
<BR>

<SPAN  CLASS="textit">Explanation:</SPAN>

<P>
Hand: 555T = 14 points (3 pair for 6 points, plus 4 15s for 8 points(10+5, 10+5, 10+5, 5+5+5)) 

<P>
Crib: 2467 = 6 points (3 15s (9+6, 2+4+9, 2+6+7)) 

<P>
(Note that either group of 4 could be the ``crib" and either group the ``hand".) 

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Example #2</SPAN> 

<P>
Hand dealt: 46K98827 

<P>
Extra card: 5 

<P>
Best possible total score: 18 points 

<P>

<P>
<BR>

<SPAN  CLASS="textit">Explanation:</SPAN>

<P>
Hand: 6788 = 14 points (2 runs of 4 cards for 8 points, a pair of 8s for 2 points, and two 15s 
(8+7, 8+7) for 4 points) 

<P>
Crib:  249K = 4 points (2 15s (2+4+9, 5+K)) 

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Example #3</SPAN> 

<P>
Hand dealt: 76547T61 

<P>
Extra card: 6 

<P>
Best possible total score: 25 points  

<P>

<P>
<BR>

<SPAN  CLASS="textit">Explanation:</SPAN>

<P>
Hand: 4566 = 21 points (3 runs of 3 cards for 9 cards, 3 pair for 6 points, 3 15s for 6 points) 

<P>
Crib: 177T = 4 points (a pair for 2 points, one 15 (1+7+7) for 2 points) 

<P>

<P>
<BR>
Note that the extra card is not displayed as a part of either the hand or the crib, but it can be 
used in scoring for both. 

<P>
Your task is to write a program that reads a file of ``dealt" cards, and returns the maximum point 
total for each dealing, along with the hand and crib configuration that produced that score. (Order 
of cards in display is ascending. Which group of 4 is the hand and which is the crib is immaterial.) 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file will consist of a series of lines, each line containing 9 ``cards". The last card on 
each line will be considered the ``extra" card for that dealing. The last line in the file will 
consist of 9 zeroes, which will indicate the end of file, and the end of your processing. All input 
characters will be of a valid card type, as explained above. Cards represented by alphabetic 
characters will be capitalized.  There will be no spaces between card characters, and no blank lines 
in the file. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 
The output must follow the format below

<P>

<P>
<BR>

<TT>Deal #1:</TT> 
<BR><TT>Extra Card: <SPAN CLASS="MATH"><I>x</I></SPAN></TT> 
<BR><TT>Hand: <SPAN CLASS="MATH"><I>xxxx</I></SPAN> = <SPAN CLASS="MATH"><I>yy</I></SPAN> points</TT> 
<BR><TT>Crib: <SPAN CLASS="MATH"><I>xxxx</I></SPAN> = <SPAN CLASS="MATH"><I>yy</I></SPAN> points</TT> 
<BR><TT>Best Score = <SPAN CLASS="MATH"><I>zz</I></SPAN></TT> 
<BR>
<BR><TT>Deal #2:</TT> 
<BR><TT>Extra Card: <SPAN CLASS="MATH"><I>x</I></SPAN></TT> 
<BR><TT>Hand: <SPAN CLASS="MATH"><I>xxxx</I></SPAN> = <SPAN CLASS="MATH"><I>yy</I></SPAN> points</TT> 
<BR><TT>Crib: <SPAN CLASS="MATH"><I>xxxx</I></SPAN> = <SPAN CLASS="MATH"><I>yy</I></SPAN> points</TT> 
<BR><TT>Best Score = <SPAN CLASS="MATH"><I>zz</I></SPAN></TT> 
<BR>
<BR>
etc.

<P>

<P>
<BR>
Note that a line of whitespace is required between the output for each dealing. 

<P>
Note also that the explanation of scoring (as seen in the examples) is not to be displayed in the 
actual program output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 
<PRE>
5674JKQ27
Q1Q2Q3Q45
000000000
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 
<PRE>
Deal #1:
Extra card: 7
Hand: 4567 = 12 points
Crib: 2JQK = 3 points
Best Score = 15

Deal #2:
Extra card: 5
Hand: QQQQ = 20 points
Crib: 1234 = 7 points
Best Score = 27
</PRE> 

<P>

______________________________________________________
2126||||||false||||||
<P>This problem features a variant of the game of "poker solitaire" (PS). To play PS, deal a <SPAN CLASS="MATH">5 <TT>x</TT> 5</SPAN> grid of cards from a standard deck. The score for a PS grid is the SUM of the scores for each row, column, and diagonal. These twelve hands each score as follows:<P><UL><LI>pair (1 point) two of the five cards have the same rank. </LI><LI>two pair (3 points) two pairs amongst the five cards. </LI><LI>three of a kind (5 points) three of the five cards have the same rank. </LI><LI>straight (7 points) the five cards may be arranged in sequence, 8-6-9-7-5. Aces may be high (above King) or low (below 2). </LI><LI>flush (10 points) All five cards are the same suit. </LI><LI>full house (12 points) one pair and three of a kind. </LI><LI>four of a kind (25 points) four of the five cards have the same rank. </LI><LI>straight-flush (50 points) both a straight and a flush. </LI></UL><P>In normal poker solitaire, the player deals one card at a time and can place the card in any open space until all twenty-five are dealt. But we've changed the game! We'll give you a grid of twenty-five cards and then you'll swap pairs of cards to try to maximize the score. At each step, choose the pair of cards that maximizes the score (be greedy).<P>You'll need to calculate the number of steps until no single step yields improvement.<P>If there are several possible steps with the same score, break ties by choosing the pair with the lowest POSITIONED card in it, using the following grid:<P><PRE>
 1  2  3  4  5 
 6  7  8  9  10 
 11 12 13 14 15 
 16 17 18 19 20 
 21 22 23 24 25
</PRE><P>For example, swapping 1 &amp; 24 would take priority over swapping 2 &amp; 3. If there's still a tie (for example, 1 &amp; 3 vs. 1 &amp; 5), use the second card's position in the grid, taking the lower one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain a series of <SPAN CLASS="MATH">5 <TT>x</TT> 5</SPAN> grids of cards. Each line will correspond to a row of five cards. Each card will be a rank (`<TT>2</TT>'-`<TT>9</TT>', `<TT>A</TT>', `<TT>K</TT>', `<TT>Q</TT>', `<TT>J</TT>', `<TT>T</TT>') followed by a suit (`<TT>C</TT>', `<TT>D</TT>', `<TT>H</TT>', `<TT>S</TT>'). For example, a single row would look like this:<P><PRE>
TD 2S 3C AS QH
</PRE><P>Each row will be flush to the left and cards will be separated by exactly one blank. Thus there are EXACTLY 14 characters per row.<P>There will be a row with 14 zeros (``<TT>00000000000000</TT>") to signal the end of input.<P>The number of rows will be divisible by 5 (we won't give you a partial grid at the end).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each grid, print three lines, followed by a blank line, with:<P>the score for the initial grid<P>the number of steps<P>the score for the final grid<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
AD KD QD JD TD 
AC TC QC JC KC 
AS KS QS JS TS 
AH KH QH JH TH 
9S 9C 9D 9H 8S 
AD KD QD JD TD 
TC AC QC JC KC 
AS KS QS JS TS 
AH KH QH JH TH 
9S 9C 9D 9H 8S 
AC KD TH JD TD 
TC AD QC JC KC 
AS KS JS JH TS 
AH KH QH QH 9D 
9S 9C QD 9H 8S 
00000000000000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Initial score = 317 
Steps = 1 
Final score = 357 

Initial score = 298 
Steps = 2 
Final score = 357 

Initial score = 38 
Steps = 7 
Final score = 314
</PRE><P>
______________________________________________________
2127||||||false||||||
<P>Before the age of computing, some of the simplest codes were sent in plain view, embedded in a long string of text. The simplest type of this embedded code is to ``hide" a string of text every <SPAN CLASS="MATH"><I>n</I></SPAN> characters in the larger block of text. The recipient only needed to know the value of <SPAN CLASS="MATH"><I>n</I></SPAN>, to extract the message.<P>You are to write a program that searches a block of text for a given string. Determine if the string is embedded <SPAN CLASS="textit">somewhere</SPAN>, and if so, report the <SPAN CLASS="MATH"><I>n</I></SPAN> value.<P><P><BR>For example,<P>String to search for: Hello World<P>Text to search through: AHaealalaoa aWaoaralad<P>Result: ``Hello World" is found with encoding of 2.<P><P><BR>In this problem, case matters. Treat all characters in the string to search for as significant, including spaces. That is, in the above example, if the text to search through was ``AhaealalaoaaWaoaralad", then ``Hello World" is not found.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file for this program will consist of a series of search pairs. The first line of such a pair will be the string to search for (the embedded code). This line will be no more than 80 characters long and will be terminated by the character `<TT>*</TT>'. The next (up to) 255 characters will be the text to search through. The character `<TT>*</TT>' will determine the end of this line. Both the search string and the text to search through will be comprised of alphanumeric characters and the space character. There will be no punctuation, carriage return/line feeds or any other whitespace other than the space character contained in either string. (The file, of course, will contain carriage return/line feeds, but these will not be found in either string.) The end of the input file will be denoted by the `<TT>#</TT>' character. You may assume the text to search through is at least as long as the string being searched for.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each search pair, output one line of text, either:<P><P><BR><TT>[ <SPAN CLASS="MATH"><I>search</I>&nbsp;<I>string</I></SPAN>] is not found.</TT><P>Or<P><P><BR><TT>[ <SPAN CLASS="MATH"><I>search</I>&nbsp;<I>string</I></SPAN>] is found with encoding of <SPAN CLASS="MATH"><I>n</I></SPAN>.</TT><P><P><BR>where `` <SPAN CLASS="MATH"><I>search</I>&nbsp;<I>string</I></SPAN>" is replaced with the actual string being searched for, and <SPAN CLASS="MATH"><I>n</I></SPAN> is replaced with the integer encoding value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Hello World*
AHbecldleof gWhoirjlkd* 
Hello World*
AhbecldleofgWhoirjlkd*  
DOS RULZ* 
ZaDerOssS87 poRkjUaaL9lZ* 
DOS RULZ* 
ZaDerOsss87 poRkjUaaL9lZ* 
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
[Hello World] is found with encoding of 2.
[Hello World] is not found. 
[DOS RULZ] is found with encoding of 3. 
[DOS RULZ] is not found.
</PRE><P>
______________________________________________________
2128||||||false||||||
<P>Congratulations! You've just taken a job as an analyst for KACM radio, a station that broadcasts to a region extending over the square from [-10,-10] to [10,10] inclusive.<P>KACM has some (one or more) transmitters of varying power, all located at integer coordinates inside the broadcast region. They would like to have their signal strength exceed a constant at every integer coordinate in the zone. The signal strength at a point is just the sum of the signals from all transmitters. This total signal must exceed 100.<P>The signal at location <SPAN CLASS="MATH"><I>L</I></SPAN> from a transmitter <SPAN CLASS="MATH"><I>T</I></SPAN> of power <SPAN CLASS="MATH"><I>P</I></SPAN> is given by:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>floor</I>(<I>P</I>/<I>D</I>(<I>L</I>, <I>T</I>)<SUP>2</SUP>)</DIV><P></P><P>That is, signal degrades quadratically in this world.<P>Sometimes the signal at all points is above the threshold, but usually it isn't. In such cases, KACM wants to know where to build a single new tower with sufficient (but not excess) power to cover the region. Your job is to determine the integer <SPAN CLASS="MATH"><I>X</I></SPAN>,<SPAN CLASS="MATH"><I>Y</I></SPAN> location and integer power <SPAN CLASS="MATH"><I>P</I></SPAN> such that the signal at all locations within the region exceeds 100.<P>Note that it is possible to place more than one transmitter at a single location. If such is the case, the power for each transmitter is evaluated separately.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>A series of transmitter lists. Each list consists of <SPAN CLASS="MATH"><I>X</I></SPAN> <SPAN CLASS="MATH"><I>Y</I></SPAN> <SPAN CLASS="MATH"><I>P</I></SPAN> integer triples. The end of each list is a ``<TT>0 0 0</TT>" triple, and the series ends with an empty group (i.e., an extra ``<TT>0 0 0</TT>").<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each transmitter list, your program is to determine the location of the lowest-powered transmitter that can be added to the grid to provide the needed signal strength at all locations on the grid. If more than one location can be used for such a transmitter, select the location with the smallest <SPAN CLASS="MATH"><I>X</I></SPAN> coordinate. If more than one location exists with the same <SPAN CLASS="MATH"><I>X</I></SPAN> coordinate, select the location with the smallest <SPAN CLASS="MATH"><I>Y</I></SPAN> coordinate. Print a line indicating the transmitter power required and selected location using a format similar to that of the sample output. If every location on the grid already receives a signal of adequate strength, print the message ``<TT>No additional transmitters needed</TT>" on a separate line.<P><P><P><BR><SPAN CLASS="textbf">Note:</SPAN> The sum <SPAN CLASS="MATH"><I>S</I></SPAN> at any location is guaranteed to be less than 1,000,000 (we're not going to throw a bunch of high-powered transmitters at you and watch your program overflow).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0 20000 
0 0 0 
0 0 10000 
0 0 0 
5 5 5000 
-5 5 5000 
0 0 0 
7 7 1224 
7 -7 1224 
-7 7 1224 
0 0 0 
7 7 2000 
7 -7 2000 
-7 7 2000 
0 0 0 
5 2 1000 
7 6 3000 
-7 5 2000 
-10 10 300 
10 -10 5000 
-10 -10 3000 
0 0 0 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
No additional transmitters needed 
Add a power 10000 transmitter at 0,0 
Add a power 6900 transmitter at 0,-10 
Add a power 9990 transmitter at -3,-3 
Add a power 6120 transmitter at -4,-4 
Add a power 169 transmitter at -1,3
</PRE><P>
______________________________________________________
2129||||||false||||||
<P>A very colorful one-person game can be played as follows. First a set of colors is selected then a set of circles is drawn using some or all of the colors, with duplicates possible-there are at least as many circles as colors. These circles are then connected together in any way by colored arrows-any number of arrows, with any colors, may be used to connect any pair of circles. For example, if we use the four colors R, G, B, and Z and four circles then we could have the following situation:<P><DIV ALIGN="CENTER"><IMG WIDTH="270" HEIGHT="233" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2129img1.png ALT="\epsfbox{p2129.eps}"></DIV><P>Three different circles are then picked from the set; two of them have a counter placed inside, while the third is the ``target" circle. A counter may be moved from one circle to another along an arrow (in the correct direction), only if the other counter is not in the circle being moved to, and the color of the arrow is the same as the color of the circle the other counter is in. A counter may be moved several times in succession - they don't have to be moved alternately. The aim is to get one of the counters in the target circle, in the least number of moves; if the target circle can't be reached, the game is ``impossible".<P>For example, in the picture above, if one counter is in the B circle, the other counter is in the Z circle, and the target is the G circle, then the game can only be won by moving the Z counter to the R circle (since a B arrow runs in that direction), which makes it possible to move the B counter to the Z circle along the R arrow, and the R counter can now be moved to the G circle along the Z arrow, for a total of three moves.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will be from a text file and will consist of descriptions of several games, using numbers instead of colors. The first line of each game description contains five numbers, <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>R</I></SPAN>, <SPAN CLASS="MATH"><I>S</I></SPAN>, <SPAN CLASS="MATH"><I>T</I></SPAN>, <SPAN CLASS="MATH"><I>M</I></SPAN> where <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of circles in the game (they will be numbered 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>, with <SPAN CLASS="MATH"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2129img1.png ALT="$ \le$">100</SPAN>), <SPAN CLASS="MATH"><I>R</I></SPAN> and <SPAN CLASS="MATH"><I>S</I></SPAN> are the numbers of the circles the two counters start in, <SPAN CLASS="MATH"><I>T</I></SPAN> is the number of the target circle, and <SPAN CLASS="MATH"><I>M</I></SPAN> is the total number of arrows connecting the circles <SPAN CLASS="MATH">(<I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2129img1.png ALT="$ \le$">5, 000)</SPAN>. After this are several lines (maximum length 60 characters) containing <SPAN CLASS="MATH"><I>N</I></SPAN> numbers giving the colors of the circles in order (1 to <SPAN CLASS="MATH"><I>N</I></SPAN>), with up to 20 numbers per line, separated by one or more spaces. The colors are denoted by numbers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> - some of these numbers may be unused. Then come <SPAN CLASS="MATH"><I>M</I></SPAN> lines which define the arrows, in no particular order. Each contains three numbers; the first is the number of the starting circle, the second the number of the ending circle, and the third is the color of the line. The input will be terminated by a line consisting of a five zeroes. The first example below describes the picture above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output, which must be written to standard output (the screen), must be one number for each game description giving the minimum number of moves to complete the game, or 0 if the game is impossible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 2 3 4 7
1 2 3 4
1 4 3
1 4 4
2 3 1
3 1 2
4 2 3
4 3 2
4 3 1
5 3 4 1 8
2 3 2 1 4
2 1 2
4 1 5
4 5 3
5 1 4
3 2 1
3 2 2
5 3 3
3 5 1
0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
4
</PRE><P>
______________________________________________________
2130||||||false||||||
<P>
Your competitors in the low end routing business are adding firewall type features and your sales 
department is frantic. They want to add access lists ASAP. 

<P>
But the marketeers also require that `wire speed' routing not be compromised and the routing engine 
is underpowered. Your job is to write a simulator to help answer the performance questions. 

<P>
Engineering has used a sniffer to record network traffic and extracted the relevant information from 
the packet headers. 

<P>
Here are some samples of the simulated traffic packets: 

<P>
<PRE>
216.35.137.204     0   131.215.211.5     0   1 
131.215.139.100 49152  131.215.90.109    53  17 
 24.218.179.217 27015    131.215.89.4  2326  17 
148.246.129.175  6699  131.215.142.85  1138   6
</PRE> 

<P>
The fields are: 
<DIV ALIGN="CENTER">
<TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<SPAN  CLASS="textbf">source IP address</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <SPAN  CLASS="textbf">source port</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN  CLASS="textbf">destination IP address</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN  CLASS="textbf">destination port</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN  CLASS="textbf">protocol</SPAN>  </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>dotted decimal address </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> decimal number </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> dotted decimal address </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> decimal number </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> decimal number </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
The fields are separated by one or more blanks and the first field may be preceded by one or more 
blanks. 

<P>
A dotted decimal address is a 32 bit value, high order byte first, with the decimal representation of 
each 8-bit byte (0..255) separated by a `.' (decimal point). For example, 1.2.255.15 is 0x0102FF0F. 

<P>

<P>
<BR>
Ports are in the range: 0..65535 

<P>

<P>
<BR>
Note that ports are only significant for the TCP (6) and UDP (17) protocols. The port fields will be 
0 for other protocols. 

<P>

<P>
<BR>
The protocol is in the range: 0..255 

<P>

<P>
<BR>
You will be given sample access lists. They will be syntax checked with fields that are separated by 
one or more blanks. Some example entries: 

<P>
<PRE>
*  1.2.3.4 255.255.0.15 3   5.6.7.8 0.0.255.255 9  Permit 
6  0.0.0.0 0.0.0.0 *  131.215.254.254 255.255.255.255 21   deny
</PRE> 

<P>
The fields are: 

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=8 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
protocol </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> source IP </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> source </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> source </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> destinatio </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> destinatio </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> destinatio </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> action </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  address  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  mask  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  port  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  n IP      </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   n mask   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  n port    </TD><TD></TD></TR>
<TR><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> address    </TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>decimal  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> dotted    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> dotted </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> decimal </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  dotted   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> dotted     </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  decimal   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> ``permit' or </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
number or </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> decimal  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> decimal </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> number or </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> decimal </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> decimal   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> number or  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> ``deny' (case </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
`*'      </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> address   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  mask  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> `*' or a </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> address   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  mask     </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> `*' or a   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   not </TD></TR>
<TR><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> range   </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> range      </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  significant) </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
A range is two decimal numbers separated by `-' with no whitespace between the numbers and the `-'. For example, 5-52 will match any port number between 5 and 52. 

<P>
In the access list, the protocol and the ports can be specified as `*', which means match any 
protocol or port.

<P>
A dotted decimal mask is the same format as an address. It indicates which bits are significant 
when comparing addresses. For example, the addresses 123.234.248.14 and 123.234.254.126 
match when compared with the mask 255.255.240.15 (0xFFFFF00F). The 1 bits in the mask show 
which bits in the addresses to compare. Note that a mask of 0.0.0.0 will cause any address pair to 
match. 

<P>
The way an access list works is each simulated traffic packet is compared with the access list 
entries, in the same order those entries were provided, until the packet matches an entry. For a 
match to occur, the protocol, source and destination addresses (using the respective masks), and 
ports must all match. In a real router, the action directs the router to accept or reject the packet, 
but the simulator just keeps track of how many access list entries are compared, and the number of 
times each action is taken. 

<P>
For example, if a packet matches the 3rd, 5th, and 8th entries in a 30 entry access list, (with the 
action of the 3rd entry being `permit'), then processing that packet will contribute 3 comparisons 
and add 1 to the number of `permit' actions taken. In this case the 5th and 8th entries are not 
examined further. The first entry that matches is the last examined for a given packet. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file will be a series of test cases. Each test case consists of two groups of data, 
separated by a blank line. A blank line also separates test cases. The first group of data in a test 
case is the access list entries, one per line. There will be no more than 100 access list entries. The 
next group of data in the test case is the simulated packet traffic data. Each of these lines will be at 
most 100 characters. The test case is terminated by a blank line or end-of-file.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case print 3 numbers: the total count of access list entries compared; the number of 
simulated packets resulting in the `permit' action; and the number of simulated packets resulting in 
the `deny' action. Put no leading spaces before the first number and exactly 1 space before the 2nd 
and 3rd numbers. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
* 204.69.0.0  255.255.248.0  * 0.0.0.0 0.0.0.0 * permit 
*   0.0.0.0 0.0.0.0 *   0.0.0.0 0.0.0.0 *  DENY 

204.69.6.230 3072 24.115.85.245 23 6 
192.168.215.17 53  204.248.52.7 1243 17 
204.69.12.21 2118  152.163.241.11 21 6 

* 0.0.0.0 0.0.0.0 * 0.0.0.0 0.0.0.0 * deny 
   
  192.102.199.19 27961  63.20.61.96 65535 17 

6 198.138.176.100 255.255.255.255 *  204.69.4.100 255.255.255.255 111 permit 
6 0.0.0.0 0.0.0.0 * 204.69.0.0 255.255.240.0 111 deny 
6  0.0.0.0 0.0.0.0 * 204.69.0.0 255.255.248.0 80 permit 
* 0.0.0.0 0.0.0.0 * 204.69.0.255 255.255.248.255 * deny 
* 204.69.0.0 255.255.248.0 * 0.0.0.0 0.0.0.0 * deny 
* 127.0.0.0 255.0.0.0 *  0.0.0.0 0.0.0.0 * deny 
* 0.0.0.0 0.0.0.0 *  204.69.7.240 255.255.255.240 9990-9999 deny 
* 0.0.0.0 0.0.0.0 *  0.0.0.0 0.0.0.0 * permit 

204.69.4.87 80 204.69.9.12 6776 6 
134.79.112.65 2186  204.69.4.218 21 6 
216.112.217.140 2212 204.69.5.255 22 6 
198.138.176.100 1053 204.69.4.100 111 6 
198.138.176.100 1054 204.69.5.100 111  6
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
5 1 2 
1 0 1 
20 2 3
</PRE>  


______________________________________________________
2131||||||false||||||
<P>
You have recently landed a job with an supercomputing application hosting firm. The
firm's primary mission is to provide distributed computing for its customers across its
networked supercomputer. The supercomputer consists of many individual computers
of varying size (i.e. Mainframes, Servers, and Workstations) and configurations (i.e.
OS's, hardware, MIPS). Each of these computers are commonly referred to as
processing nodes. Customers submit to a centralized distribution point the programs
they want executed and the sets of data files to be processed. Each program is
distributed to the processing nodes along with a particular data file. The program is
then executed on each node with general security privileges. The types of programs
that customers submit are thread intensive, utilize a large amount of inter-process
communication, and execute generic OS system calls. The results of the processing
are then communicated to the submitter.

<P>
The firm's customers are primarily competing bioengineering firms researching the
human genome. Each is racing to patent particular genes and gene interactions which
they discover. Since the applications are submitted directly by the customers and
many customers will be submitting programs for distributed computation at the same
time, security of the processing nodes and of individual customer data and source
code is of paramount importance.

<P>
Your project lead is concerned that some customers may try to interject virus or
malicious code into the distribution process, either to crash the processing nodes, steal
the source code and data of other customers, or affect the programs of other customers
in order to produce erroneous data.

<P>
You have been tasked with writing a malicious code scanning program for the
distribution subsystem. Its primary functional requirement is to scan programs and
data files submitted by customers and compare them to the malicious code library
your company maintains. This program will produce reports indicating if malicious
code exists in the submitted program and data files.

<P>
Here are a the requirements given to you by your lead:

<P>

<UL>
<LI>Malicious code characters always appear in files sequentially without interruption i.e. "the dog" will always appear as "the dog" never as "the cat dog".
</LI>
<LI>A malicious code character may differ from the signature character, however they will only differ in the character ASCII value not in the amount of characters i.e. "the dog" may be represented as "The dog" or " he dog" or "tHe doc" but not as "the ddog". <SPAN  CLASS="textbf">SPECIAL CASE: at no time will an EOLN (end of line)/ carriage return character replace an ASCII value of a malicious code character</SPAN>.
</LI>
<LI>Malicious code match percentages are determined with the following formula:
</LI>
</UL>

<P>
<P><!-- MATH
 \begin{displaymath}
\mbox{Code match percentage} = {{\# \mbox{of characters matching the virus signature}} \over
{\# \mbox{of characters in the virus signature}}}.
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
Code match percentage = <IMG
 WIDTH="345" HEIGHT="56" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2131img1.png
 ALT="$\displaystyle {{\char93  \mbox{of characters matching the virus signature}} \over
{\char93  \mbox{of characters in the virus signature}}}$">.
</DIV><P></P>

<P>

<UL>
<LI>Code, or data files, are considered CLEAN or POISON.
</LI>
<LI>"CLEAN" indicates the file does not contain any malicious code matches equaling or exceeding the threshold percentage for any signature. ``POISON" indicates that the file does contain malicious code matches exceeding the threshold percentage for at least one signature.
</LI>
<LI>If more than one instance of malicious code exists, examine them all. If any one exceeds the threshold the code is considered POISON.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of up to 100 data sets. Each data set will be correct and follow the following rules:

<P>

<UL>
<LI>A set of malicious code descriptions contains the following:

<P>

<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=JUSTIFY WIDTH="1.5"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="2.75"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="1.25">
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>
<SPAN  CLASS="textbf">Elements of a</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> <SPAN  CLASS="textbf">Description</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> <SPAN  CLASS="textbf"><TT>Example</TT></SPAN></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 
<SPAN  CLASS="textbf">Malicious code</SPAN></TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 
<SPAN  CLASS="textbf">description</SPAN></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Malicious code signatures start line    </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="198">    A set of characters of the form MALICIOUS CODE  
SIGNATURES followed by a new line character. </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="90">   <TT>MALICIOUS CODE SIGNATURES</TT> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Any number of Code  Signatures    </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="198">  Next bullet in the list </TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>
</LI>
<LI>Code Signature(s) - <SPAN CLASS="MATH">0...<I>n</I></SPAN> instances of the following:

<P>

<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=JUSTIFY WIDTH="1.5"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="3"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="1">
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>
<SPAN  CLASS="textbf">Elements of a</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>   <SPAN  CLASS="textbf">Description</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>   <SPAN  CLASS="textbf">Example</SPAN></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 
<SPAN  CLASS="textbf">Signature</SPAN></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Signature description start line </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216">    A set of characters of the           form <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> (any 
combination              of the following valid           characters ``a"..``z", ``A"..``Z",    
``0"..``9", &amp; ``.") followed by a      name of the signature.            </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">  <TT>RABBIT</TT>   </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Threshold percentage start line   </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216">  A set of characters of the  form THRESHOLD     PERCENTAGE 
followed by         a new line character.  </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">   <TT>PERCENTAGE THRESHOLD</TT> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Threshold  percentage        </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216">      A set of characters of the    form <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN> (any combination   of 
the following valid     characters ``0"..``9" &amp; ``.")  followed by a new line  character. <SPAN CLASS="MATH">&lt;</SPAN>y<SPAN CLASS="MATH">&gt;</SPAN> 
is the    threshold percentage to 2   decimal places of precision   i.e. 100.00, 95.03 etc. </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">     
<TT>50.00</TT>          </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Threshold  percentage end line           </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216">    A set of characters of the      form THRESHOLD           PERCENTAGE followed by     a new line character. </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">  <TT>THRESHOLD SIGNATURE</TT> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Code Signature start line </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216">  A set of characters of the  form SIGNATURE followed   by a new line 
character.  </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Code signature       </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216">    A set of characters (1..n - all      ASCII characters except EOF  and 
EOLN are valid)    followed by a new line character. The entire contents  of these lines is the code
   signature. </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">  <TT>We</TT> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Code Signature end line  </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216">  A set of characters of the   form SIGNATURE followed    by a new line character.  </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">  <TT>SIGNATURE</TT>  </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Signature  description end line      </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216">             A set of characters of the   form SIGNATURE 
followed        by a new line character. </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">  <TT>RABBIT</TT> </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=JUSTIFY WIDTH="1.5"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="2.75"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="1.25">
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>
<SPAN  CLASS="textbf">Elements of a</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>   <SPAN  CLASS="textbf">Description</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> <SPAN  CLASS="textbf">Example</SPAN></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 
<SPAN  CLASS="textbf">Malicious code</SPAN></TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 
<SPAN  CLASS="textbf">description</SPAN></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">Malicious code signatures start line    </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="198">    A set of characters of the form MALICIOUS CODE  
SIGNATURES followed by a new line character. </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="90">   <TT>MALICIOUS CODE SIGNATURES</TT> </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>
</LI>
<LI>Code or data to scan - 1 instance of the following: 

<P>

<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=JUSTIFY WIDTH="1"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="2.25"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="2.25">
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>
<SPAN  CLASS="textbf">Elements</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>  <SPAN  CLASS="textbf">Description</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>  <SPAN  CLASS="textbf">Example</SPAN></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 
<SPAN  CLASS="textbf">of code file</SPAN></TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 
<SPAN  CLASS="textbf">to scan</SPAN></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">File start line </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="162">    A set of     characters of     the form <SPAN CLASS="MATH">&lt; <I>z</I> &gt;</SPAN> (any  combination of  the following  valid characters   ``a"..``z",   ``A"..``Z", ``0"..``9", &amp; ".")    followed by a   new line     character. <SPAN CLASS="MATH">&lt; <I>z</I> &gt;</SPAN> is the name of  the file.  </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="162"> <TT>XCHROMOSOMECALC1</TT> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">Data start line </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="162">      A set of     characters of  the form   DATA  followed by a  new line  
character. </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="162"> <TT>DATA</TT></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">Data        </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="162">       characters (<SPAN CLASS="MATH">1...<I>n</I></SPAN> - all ASCII    characters    except EOF are 
 valid) followed  by a new line     character. The   entire contents    of these lines is   
    the data or        program file to    be scanned.    </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="162">
<TT>Class calc </TT>{
</DIV>
<P>
<DIV ALIGN="CENTER"><TT>public calc() </TT>{
</DIV>
<P>
<DIV ALIGN="CENTER"><TT>Wefg6me3to 632edcM</TT> 
</DIV>
<P>
<DIV ALIGN="CENTER"><TT>regsdfal p3455agdisg fogiest.</TT> 
</DIV>
<P>
<DIV ALIGN="CENTER"><TT>System.out.println("cmo");</TT> 
</DIV>
<P>
<DIV ALIGN="CENTER"><TT>While heM; egimm;</TT>   
</DIV>
<P>
<DIV ALIGN="CENTER"><TT>ing; System</TT> 
</DIV>
<P>
<DIV ALIGN="CENTER"><TT>.out.println("con<!-- MATH
 $\backslash$
 -->
<SPAN CLASS="MATH">&#92;</SPAN>ntest");</TT> 
</DIV>
<P>
<DIV ALIGN="CENTER">}
</DIV>
<P>
<DIV ALIGN="CENTER">} </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">Data end line   </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="162">      A set of     characters of       the form         DATA      followed by a        new line        character.   </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="162"> <TT>DATA</TT>  </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72">File end line   </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="162">     A set of           characters of  the form <SPAN CLASS="MATH">&lt; <I>z</I> &gt;</SPAN> (any    combination of   
the following    valid characters      ``a"..``z",    ``A"..``Z",    ``0"..``9", &amp; ``.")   followed
by a        new line       character. <SPAN CLASS="MATH">&lt; <I>z</I> &gt;</SPAN> is the name of  the file.   </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="162">   <TT>XCHROMOSOMECALC1</TT> </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>
</LI>
<LI>Blank line - separating the start of another data set from the previous data set.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, output will consist of a set of characters of the form ``<SPAN CLASS="MATH">&lt; <I>z</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>r</I> &gt;</SPAN>"
where <SPAN CLASS="MATH">&lt; <I>z</I> &gt;</SPAN> is the name of the data file which was scanned (any combination of the
following valid characters ``a"..``z", ``A"..``Z", ``0"..``9", <SPAN CLASS="MATH">&amp;</SPAN> ``.") and <SPAN CLASS="MATH">&lt; <I>r</I> &gt;</SPAN> is a set of
characters of the form ``<TT>CLEAN</TT>" or ``<TT>POISON</TT>" followed by a new line character.
``<TT>CLEAN</TT>" indicates the file does not contain any malicious code matches equaling or
exceeding the threshold percentage for any signature. ``<TT>POISON</TT>" indicates that the file
does contain malicious code matches exceeding the threshold percentage for at least
one signature.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
MALICIOUS CODE SIGNATURES
MALICIOUS CODE SIGNATURES
XCHROMOSOMECALC1
DATA

Class calc {
public calc() {
Wefg6me3to 632edcM
regsdfal p3455agdisg fogiest.
System.out.println("cmo");
While heM; egimm;
ing; System .out.println("con\ntest");
}
}
DATA
XCHROMOSOMECALC1

MALICIOUS CODE SIGNATURES
RABBIT
THRESHOLD PERCENTAGE
50.00
THRESHOLD PERCENTAGE
SIGNATURE

We
SIGNATURE
RABBIT
MALICIOUS CODE SIGNATURES
XCHROMOSOMECALC1
DATA

Class calc {
public calc() {
Wefg6me3to 632edcM
regsdfal p3455agdisg fogiest.
System.out.println("cmo");
While heM; egimm;
ing; System .out.println("con\ntest");
}
}
DATA
XCHROMOSOMECALC1

MALICIOUS CODE SIGNATURES
RABBIT
THRESHOLD PERCENTAGE
70.00
THRESHOLD PERCENTAGE
SIGNATURE
Welcome to the ACM regional programming contest.
SIGNATURE
RABBIT
FROG
THRESHOLD PERCENTAGE
85.05
THRESHOLD PERCENTAGE
SIGNATURE
Thats the way uh-hu uh-hu I like it..
SIGNATURE
FROG
MALICIOUS CODE SIGNATURES
PROTEINFOLDING.2
DATA

Public Class {
format c:

Thats the ACM regional hu I like it..
}
DATA
PROTEINFOLDING.2
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
XCHROMOSOMECALC1 CLEAN
XCHROMOSOMECALC1 POISON
PROTEINFOLDING.2 CLEAN
</PRE> 

<P>

______________________________________________________
2132||||||false||||||
<P>
A LSU physics researcher who we will call ``Sparky" was very successful in procuring
funding for the physics department because of his breakthrough research into new
3-dimensional crystalline storage technology. Though a brilliant physicist, Sparky's
organizational habits were lacking. His office was strewn with stacks of crystal pictures,
and most were not labeled in any way other than to note the orientation of the crystal.

<P>
Unfortunately for the physics department, Sparky asphyxiated from laughter after a
night grading midterms for his Physics For Non-Majors class. You are the lucky new
non-tenured professor that has been hired by the Physics departement to decipher
Sparky's research and keep that grant money flowing.

<P>
In Sparky's now vacant office, there is a mess of picutures all about. You know that he
was taking three pictures of each crystal he grew (one picture down each primary axis:
X,Y,Z). You also know that the crystals grew in a liquid suspension and therefore don't
necessarily consist of a single continuous mass.

<P>
As a first step in organizing the mess you decide to take the pictures three at a time (one
down each axis) and see whether or not they could be pictures of the same crystal. Of
course, you know Sparky always took pictures of cubical areas, so you pick out pictures
of the same dimensions before examining them.

<P>
Here are some other useful things that you know about the pictures:

<P>

<UL>
<LI>All the pictures are black-and-white.
</LI>
<LI>Every picture is of resolution <!-- MATH
 $N \times N$
 -->
<SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> (in other words, each picture is a square).
</LI>
<LI>Each picture was created by placing the crystal on top of the film and shining a light through the crystal. The result was that areas of the film hit directly by the light (without passing through the crystal) are bright. Any light striking the crystal is reflected away from the film. The resulting picture is therefore a silohuette of the crystal projected down a particular axis.
</LI>
<LI>The crystal grows in a very regular way. It creates small cubical areas precisely <!-- MATH
 $1\times1\times1$
 -->
<SPAN CLASS="MATH">1 <TT>x</TT> 1 <TT>x</TT> 1</SPAN> that may be adjacent to one another or that may grow separately. In essence, the crystal is a <!-- MATH
 $N\times N\times N$
 -->
<SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I> <TT>x</TT> <I>N</I></SPAN> matrix where at any coordinate in the matrix a piece of crystal may or may not reside.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each
data set will be formatted according to the following description, and there will be <SPAN  CLASS="textbf">no
blank lines</SPAN> separating data sets.

<P>
A single data set has five components:
<DL COMPACT>
<DT>1.</DT>
<DD><SPAN  CLASS="textit">Start line</SPAN> - A single line, ``<TT>START</TT> <!-- MATH
 $<cube\_size>$
 -->
<SPAN CLASS="MATH">&lt; <I>cube</I><IMG
 WIDTH="42" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2132img1.png
 ALT="$ \_size$"> &gt;</SPAN>" where <!-- MATH
 $<cube\_size>$
 -->
<SPAN CLASS="MATH">&lt; <I>cube</I><IMG
 WIDTH="42" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2132img1.png
 ALT="$ \_size$"> &gt;</SPAN> is a positive integer in the range 1-10, <SPAN  CLASS="textbf">inclusive</SPAN>, that gives the height/width/depth for the cube (fortunately, height/width/depth are all the same for cubes, so you only need one number). For example:

<P>

<P>
<BR>

<TT>START 5</TT>

<P>
</DD>
<DT>2.</DT>
<DD><SPAN  CLASS="textit">Shadow 1</SPAN> - A shadow down the Z axis. Shadows consist of <TT>X</TT>'s and <TT>O</TT>'s (letter not number), where an `<TT>X</TT>' represents a one unit square area of shadow and an `<TT>O</TT>' represents a similarly sized illuminated area. There is no white-space leading or following any of the lines. For example:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2132a.eps}$
 -->
<IMG
 WIDTH="813" HEIGHT="286" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2132img1.png
 ALT="\epsfbox{p2132a.eps}">
</DIV>

<P>
</DD>
<DT>3.</DT>
<DD><SPAN  CLASS="textit">Shadow 2</SPAN> - A shadow down the Y axis

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2132b.eps}$
 -->
<IMG
 WIDTH="813" HEIGHT="286" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2132img1.png
 ALT="\epsfbox{p2132b.eps}">
</DIV>

<P>
</DD>
<DT>4.</DT>
<DD><SPAN  CLASS="textit">Shadow 3</SPAN> - A shadow down the X axis

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2132c.eps}$
 -->
<IMG
 WIDTH="818" HEIGHT="288" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2132img1.png
 ALT="\epsfbox{p2132c.eps}">
</DIV>

<P>
</DD>
<DT>5.</DT>
<DD><SPAN  CLASS="textit">End line</SPAN> - A single line, ``<TT>END</TT>"
</DD>
</DL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, there will be exactly one line of output. This line will simply be the word ``<TT>YES</TT>" or the word ``<TT>NO</TT>" (all caps with no whitespace leading or following). 

<P>
A ``<TT>YES</TT>" line will appear only if there exists some solid 3-dimensional object that could project the given silhouettes. (In other words, these could all be pictures of the same crystal).

<P>
A ``<TT>NO</TT>" line will be output for all data sets that fail to meet the criteria for a ``<TT>YES</TT>" line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
START 1
O
O
O
END
START 3
XXX
XOX
XOX
XXX
XXX
XXX
XXX
XXX
XXX
END
START 7
XXXXXXX
XXXXXXX
XXXXXXX
XXXXXXX
XXXXXXX
XXXXXXX
XXXXXXX
OOOOOOO
OOOOOOO
OOOOOOO
OOOOOOO
OOOOOOO
OOOOOOO
OOOOOOO
XOOOOOO
OXOOOOO
OOXOOOO
OOOXOOO
OOOOXOO
OOOOOXO
OOOOOOX
END
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
NO
YES
NO
</PRE> 

<P>

______________________________________________________
2133||||||false||||||
<P>
After numerous recounts of the presidential votes in Florida, candidates George W. Bush (Republican) and Al Gore (Democrat) are unconvinced of the accuracy of the results. Each candidate is convinced that he should receive Florida's electoral votes needed to win the presidency and no amount of recounting the ballots will determine a clear winner. Also, it was revealed that some of the volunteers forgot to turn in several ballot boxes, and are currently unavailable on vacation at Disney World. 

<P>
The U.S. population is justly demanding a resolution to the problem to avoid a third term under Clinton. Political analysts insist that they can determine which candidate the state will be awarded to, based on the income levels of its districts' residents. Jeb Bush, the governor of Florida, has asked you to write a program that will determine which candidate will win Florida, and ultimately the election. The future of the country rests in your hands.

<P>
The program will be based on the electoral college system, extended to the district level. Each district is worth a certain number of electoral votes, with the winner of the district determined by the median income of its residents. Exit polls have revealed that if the median income of the district is greater than a certain level, it will be awarded to
the Republican candidate. A simple majority of electoral votes is needed to win the entire state (a tie will result in the deciding vote being cast by Jeb, resulting in a Republican victory).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of a non-zero number of independent data sets containing election information. Each election data set will conform to the following:

<P>

<OL>
<LI>The first line of a data set will be `<TT>START</TT>'.
</LI>
<LI>The next two lines (this is a run-off election, no third-party candidates) will contain the names of the Democratic candidate coming first.
</LI>
<LI>The fourth line will contain the number of districts.
</LI>
<LI>The fifth line will contain the target median income level. A district with a median income greater than the target will have its electoral votes go to the Republican candidate. All other electoral votes will go to the Democratic candidate.
</LI>
<LI>Each of the next lines will contain a district's name, its median income level (formatted as a simple integer), and its number of electoral votes (also an integer), each separated by a comma.
</LI>
<LI>The last line of a data set will be `<TT>END</TT>'.
</LI>
</OL>

<P>
There will be no blank lines in the input, but there will be an endline just before the end of the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output will be the results of the elections from the input. For a given election set, the output will consist of a line containg the winning candidates' name and his number of electoral votes, separated by a comma (there will be no spaces on either side of the comma):

<P>

<P>
<BR>

<TT>George W. Bush,96</TT>

<P>

<P>
<BR>
There will be no blank lines separating output sets.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
START
Al Gore
George W. Bush
12
39000
North,50000,10
Northnortheast,30000,18
Northeast,40000,11
East,40000,15
Southeast,43000,13
Southsoutheast,52000,14
South,47000,9
Southsouthwest,25000,20
Southwest,25000,24
West,60000,12
Northwest,39000,11
Northnorthwest,35000,12
END
START
Bleed N. Hart
Pub Lee Kahn
437000
North,25000,40
East,35000,20
South,40000,30
West,45000,20
END
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Al Gore,85
Bleed N. Hart,60
</PRE> 

<P>

______________________________________________________
2134||||||false||||||
<P>James recently purchased a new palm-top computer at a discount store. To get a really good price, he decided to have the free operating system, "JameSIX", installed instead of the more popular and expensive "Windwoes" operating system. One drawback to the free OS is that there are many bugs, but James is a savvy computer programmer and thinks it worth the risk.<P>A few days later, James is attempting to play "Sweeper" when all of a sudden the screen flashes and some strange output appears. Angered by this interruption to his favorite game, James decides to use his vast programming knowledge and attempt to debug the program in the free debugger, JDB.<P>James has found a suspicious piece of code. He knows the values of all variables, and he is attempting to determine if the code fragment was the one that produced the output that interrupted his high-score attempt.<P>The "JameSIX" Assembly language in which the program was written has a very simple set of commands:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=JUSTIFY WIDTH="1.5"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="4.5"><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1><SPAN CLASS="textbf">Command</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1><SPAN CLASS="textbf">Explanation</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>START</TT> <!-- MATH
 $<progname>$
 --><SPAN CLASS="MATH">&lt; <I>progname</I> &gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">The first statement of a program, where <!-- MATH
 $<progname>$
 --><SPAN CLASS="MATH">&lt; <I>progname</I> &gt;</SPAN> is the program's integer identifier</DIV><P><DIV ALIGN="CENTER">Example: <TT>START 21</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>SET</TT> <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>value</I> &gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">Will set variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN>'s value to <SPAN CLASS="MATH">&lt; <I>value</I> &gt;</SPAN></DIV><P><DIV ALIGN="CENTER">Example: <TT>SET <SPAN CLASS="MATH"><I>a</I></SPAN> 9</TT> is equivalent to <SPAN CLASS="MATH"><I>a</I> = 9</SPAN></DIV><P><DIV ALIGN="CENTER">Note: <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN> can only be integers.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>STORE</TT> <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">Will set variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN>'s value to the value of variable <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN></DIV><P><DIV ALIGN="CENTER">Example: <TT>STORE <SPAN CLASS="MATH"><I>b</I></SPAN> <SPAN CLASS="MATH"><I>a</I></SPAN></TT> is equivalent to <SPAN CLASS="MATH"><I>b</I> = <I>a</I></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>MULT</TT> <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">Equivalent to variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> = variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> * variable <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN></DIV><P><DIV ALIGN="CENTER">Example: <TT>MULT <SPAN CLASS="MATH"><I>b</I></SPAN> <SPAN CLASS="MATH"><I>a</I></SPAN></TT> is equivalent to <SPAN CLASS="MATH"><I>b</I> = <I>b</I> <TT>*</TT> <I>a</I></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>SUB</TT> <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">Equivalent to variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> = variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> - variable <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN></DIV><P><DIV ALIGN="CENTER">Example: <TT>SUB <SPAN CLASS="MATH"><I>b</I></SPAN> <SPAN CLASS="MATH"><I>c</I></SPAN></TT> is equivalent to <SPAN CLASS="MATH"><I>b</I> = <I>b</I> - <I>c</I></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>DIV</TT> <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">Equivalent to variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> = floor(variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">/</SPAN> variable <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN>) except in the case where variable <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN>'s value is <TT>0</TT>. If variable <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN>'s value is equal to <TT>0</TT>, then the statement has no effect on the value of variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> or variable <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN> or any other variable within the program (i.e. <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">=</SPAN> <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN>).</DIV><P><DIV ALIGN="CENTER">Example: <TT>DIV b c</TT> is equivalent to <SPAN CLASS="MATH"><I>b</I> = <I>b</I> - <I>c</I></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>ADD</TT> <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">Equivalent to variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">=</SPAN> variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <SPAN CLASS="MATH">+</SPAN> variable <SPAN CLASS="MATH">&lt; <I>y</I> &gt;</SPAN></DIV><P><DIV ALIGN="CENTER">Example: <TT>ADD b c</TT> is equivalent to <SPAN CLASS="MATH"><I>b</I> = <I>b</I> + <I>c</I></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>PRINT</TT> <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">Prints the value of the variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> followed by a carriage-return</DIV><P><DIV ALIGN="CENTER">Example: <TT>PRINT b</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>GOTO</TT> <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">Execution moves to the nth line of the program. The first line is line number 1.</DIV><P><DIV ALIGN="CENTER">Example: <TT>GOTO 10</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>END</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">This statement ends the current program.</DIV><P><DIV ALIGN="CENTER">Example: <TT>END</TT></TD></TR></TBODY></TABLE></DIV><P><P><BR>And one conditional command (non-simple):<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=JUSTIFY WIDTH="2"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="4"><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1><SPAN CLASS="textbf">Command</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1><SPAN CLASS="textbf">Explanation</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="144"><TT>IF</TT> <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> <TT>IS</TT> <SPAN CLASS="MATH">&lt; <I>value</I> &gt;</SPAN> <TT>THEN</TT> <!-- MATH
 $<simple\_command>$
 --><SPAN CLASS="MATH">&lt; <I>simple</I><IMG WIDTH="86" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2134img1.png ALT="$ \_command$"> &gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288">Where <!-- MATH
 $<simple\_command>$
 --><SPAN CLASS="MATH">&lt; <I>simple</I><IMG WIDTH="86" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2134img1.png ALT="$ \_command$"> &gt;</SPAN> is any of the previously mentioned simple commands. <!-- MATH
 $<simple\_command>$
 --><SPAN CLASS="MATH">&lt; <I>simple</I><IMG WIDTH="86" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2134img1.png ALT="$ \_command$"> &gt;</SPAN> is only executed if the value of the variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> is equivalent to the integer <SPAN CLASS="MATH">&lt; <I>value</I> &gt;</SPAN> (this is not a variable).</DIV><P><DIV ALIGN="CENTER">Example: <TT>IF <SPAN CLASS="MATH"><I>b</I></SPAN> IS 3 THEN ADD <SPAN CLASS="MATH"><I>b</I></SPAN> <SPAN CLASS="MATH"><I>c</I></SPAN></TT></DIV><P><DIV ALIGN="CENTER">is equivalent to</DIV><P><DIV ALIGN="CENTER"><TT>if b = 3 then</TT></DIV><P><DIV ALIGN="CENTER"><TT>b = b + c</TT></DIV><P><DIV ALIGN="CENTER"><TT>endif</TT></TD></TR></TBODY></TABLE></DIV><P><P><BR><B>NOTE:</B> All variables are of type integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of a non-zero number of `programs', each of which are completely independent of one another. Each program will conform to the following:<P><OL><LI>The first statement (line 1 of each program) will be `<TT>START</TT> <!-- MATH
 $<progname>$
 --><SPAN CLASS="MATH">&lt; <I>progname</I> &gt;</SPAN>' (See above for clarification on <TT>START</TT> command). </LI><LI>The last statement will be `<TT>END</TT>'. </LI><LI>All variables will be initialized with a `<TT>SET</TT>' statement before being used in any other statement. </LI><LI>Program ID numbers will be unique. </LI><LI>Line numbering resets each time a new program begins (each `<TT>START</TT>' statement). </LI><LI>All variables are single lowercase letters (<TT>a</TT>, <TT>b</TT>, <TT>c</TT>, <SPAN CLASS="MATH">...</SPAN>, <TT>z</TT>). </LI><LI>All variable values will be within the following range throughout the program; <SPAN CLASS="MATH">-1000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2134img1.png ALT="$ \le$"><I>a</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2134img1.png ALT="$ \le$">1000</SPAN> where <SPAN CLASS="MATH"><I>a</I></SPAN> is the variable i.e. <TT>ADD</TT> <SPAN CLASS="MATH"><I>x</I></SPAN> <SPAN CLASS="MATH"><I>y</I></SPAN> will never result in a value outside of the range. </LI></OL><P>Arguments to individual statements will always be separated by exactly one space, and there will not be any blank lines in the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output will be the results of the programs in the input file. For a given program, you will print to the output file:<P><OL><LI>A single line containing `<TT>START</TT> <!-- MATH
 $<progname>$
 --><SPAN CLASS="MATH">&lt; <I>progname</I> &gt;</SPAN>' exactly like the first line of the program when execution of a new program begins </LI><LI>A single line with the value currently stored in the variable <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> when a `<TT>PRINT</TT> <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN>' statement is executed. </LI></OL><P>There will be no blank lines separating output sets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
START 1
SET b 10
PRINT b
END
START 2
SET b 10
SET a 1
SET c 0
STORE c a
MULT c b
PRINT c
END
START 10
SET a 1
SET b 2
SET c 3
SET d 4
SET e 5
STORE e a
ADD a a
PRINT a
MULT c b
IF e IS 8 GOTO 13
GOTO 7
PRINT c
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
START 1
10
START 2
10
START 10
2
4
8
16
48
</PRE><P>
______________________________________________________
2135||||||false||||||
<P>
Once upon a time there lived a programmer with the potential to be the best Java programmer the world had ever seen, and his name was Sebastian. Unfortunately for Sebastian, he was born several decades prematurely and was forced to store all of his programs on punchcards. If you do not know what a punchcard is ask one of your professors after the contest. We are sure she will be able to tell you many horror stories about punchcards and shoe boxes.

<P>
One day Sebastian had to turn in his senior project, a program that calculated pi to a billion decimal places. On his way to deliver his program to the grader, he was suddenly overtaken by a vicious case of scurvy (pizza just doesn't have that much vitamin C). In his mad dash to the nearest lavatory, he dropped the box of punchcards containing his program, and the cards scattered everywhere.

<P>
After he had picked up all the cards, and counted them, he realized that one was missing. Luckily Sebastian had taken the time to record his program card-by-card in a notebook at the dorm. This will allow him to replicate the missing card and still turn his project in on time. The problem was that the cards were all jumbled and he didn't
know which card to replicate.

<P>
Here are a few things that Sebastian knows about his cards:

<P>

<UL>
<LI>Sebastian's program had at least 1 card before he dropped it.
</LI>
<LI>There are <SPAN CLASS="MATH"><I>n</I></SPAN> cards numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>.
</LI>
<LI>Exactly one card is missing.
</LI>
<LI>No cards have duplicate numbers.
</LI>
</UL>

<P>
Please write a program to help Sebastian determine what card number his needs to replicate so that he can turn-in his project on time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of up to 100 data sets. Each data set will consist of:

<P>

<OL>
<LI><SPAN  CLASS="textit">Start line</SPAN> - A single line of the form ``<TT>START</TT> <SPAN CLASS="MATH"><I>n</I></SPAN>" where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of punch cards in the program. No program will consist of more than 10,000 cards.
</LI>
<LI><SPAN  CLASS="textit">Card list</SPAN>  - A list of <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> card numbers in the range 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> (inclusive). Each card number will appear on its own line with no leading or following whitespace.
</LI>
<LI><SPAN  CLASS="textit">End line</SPAN> - A single line of the form ``<TT>END</TT>".
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, output will consist of a single number on its own line representing the card that was missing from the Card list of that data set.

<P>

<P>
<BR>

<B>Note:</B> these samples are <SPAN  CLASS="textbf">VERY</SPAN> small compared to some of the data sets your problem will be judged against and are abbreviated due to the number of trees that would have to be destroyed to provide a large example. The limit is 10,000 cards per data set.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
START 1
END
START 5
1
2
4
5
END
START 20
13
14
17
1
2
3
4
15
16
5
18
20
6
10
11
12
7
8
9
END
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
3
19
</PRE> 

<P>

______________________________________________________
2136||||||false||||||
<P>
My Uncle Lester is known throughout Lafayette Parish as the luckiest man around. He has picked the winners of the last 7 NCAA Basketball Championships. During Mardi Gras last year, I got Uncle Lester to explain exactly how he is able to consistently pick the winners of this event. He is convinced that if you rate teams' offense and defense
on a scale of 1 to 10 and then multiply their offensive rating by 5 and subtract double their opponents defensive rating, you will have calculated that teams score if that team played their opponent. (Keep in mind that if a score is not an integer, then that score will be rounded to the nearest whole number.) I told Uncle Lester that this could result
in negative scores and he told me that was true, but the eventual outcome is accurate.
Whoever has the greatest score will win the game and continue on to the next round.

<P>

<P>
<BR>
<SPAN  CLASS="textit"><SPAN  CLASS="textbf">The result of team A playing team B is calculated as follows:</SPAN></SPAN>

<P>

<P>
<BR>
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN  CLASS="textbf">Team</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN  CLASS="textbf">Offensive</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN  CLASS="textbf">Defensive</SPAN> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>A</I></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>w</I></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I></SPAN> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>B</I></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>z</I></SPAN> </TD></TR>
</TBODY>
</TABLE>

<P>

<P>
<BR>
<SPAN  CLASS="textit"><SPAN  CLASS="textbf">Score of team</SPAN></SPAN> <!-- MATH
 $A = 5 * w - 2 * z$
 -->
<SPAN CLASS="MATH"><I>A</I> = 5*<I>w</I> - 2*<I>z</I></SPAN>

<P>
<SPAN  CLASS="textit"><SPAN  CLASS="textbf">Score of team</SPAN></SPAN> <!-- MATH
 $B = 5 * y - 2 * x$
 -->
<SPAN CLASS="MATH"><I>B</I> = 5*<I>y</I> - 2*<I>x</I></SPAN>

<P>

<P>
<BR>
If one team beats the other team by more than 10 points, the winning team's offensive rating will increase by .5. A tie score will result in the winner being the team with the mascot name which would appear first in alphabetical order between the two teams.

<P>
As you may know, the NCAA seeds all teams in the tournament. They seed the teams according to their offensive rating. The higher the offensive rating is, the lower the seed is. If more than 1 team has the same offensive rating, then the school mascot names are sorted in alphabetical order with the first team in the list getting the next lowest seed number available. For example, if in determining seed 3, a team with mascot name Bananas has the same offensive rating as a team with mascot name Mangoes then Bananas would be awarded seed 3 position. The tournament bracket is laid out where the highest seeded team plays the lowest seeded team, the second highest seeded team plays the second lowest seeded team, and so on. The winner of the first two games play each other and so on.

<P>
<PRE>
 1 Team  1
          |-Winner1
16 Team  2         |- Winner9
 2 Team  3         |        |
          |        |        |
          |-Winner2         |
          |                 |
15 Team  4                  |-Winner13
 3 Team  5                  |         |
          |-Winner3         |         |
          |        |        |         |
14 Team  6         |-Winner10         |
 4 Team  7         |                  |
          |-Winner4                   |
          |                           |
13 Team  8                            |-Winner15
 5 Team  9                            |
          |-Winner5                   |
          |        |                  |
12 Team 10         |-Winner11         |
 6 Team 11         |        |         |
          |-Winner6         |         |
          |                 |         |
11 Team 12                  |-Winner14
 7 Team 13                  |
          |-Winner7         |
          |        |        |
10 Team 14         |-Winner12
 8 Team 15         |
          |-Winner8
 9 Team 16
</PRE> 

<P>
With all of Uncle Lester's theories, and the NCAA's rules for tournament seeding, who will win the next NCAA Basketball Championship, and what will the final score be?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of n data sets in the following format:

<P>

<UL>
<LI>A line of the form <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> followed by a new line. <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> is the number of schools in the tournament.
</LI>
<LI><SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN> lines of the form <!-- MATH
 $<school \ name>$
 -->
<SPAN CLASS="MATH">&lt; <I>school</I>&nbsp;<I>name</I> &gt;</SPAN>, <!-- MATH
 $<school \ mascot>$
 -->
<SPAN CLASS="MATH">&lt; <I>school</I>&nbsp;<I>mascot</I> &gt;</SPAN>, <!-- MATH
 $<offensive \ rating>$
 -->
<SPAN CLASS="MATH">&lt; <I>offensive</I>&nbsp;<I>rating</I> &gt;</SPAN>, <!-- MATH
 $<defensive \ rating>$
 -->
<SPAN CLASS="MATH">&lt; <I>defensive</I>&nbsp;<I>rating</I> &gt;</SPAN> followed by a new line.
</LI>
<LI>There will always be enough schools to fill-out a complete bracket (i.e. <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN> teams, with <SPAN CLASS="MATH"><I>n</I></SPAN> between 1 and 4, inclusively). School name and school mascot will consist solely of alphabetic characters (no spaces).
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output will be the name of the tournament champion and the score of the final game followed by a new line. The final score will be the two scores separated by a minus sign. The champion's score will be first in the sequence.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
16
LOU,Snorks,7,8
LSU,Tigers,9,6
OU,Sooners,6,7
TAM,Aggies,4,9
UT,Longhorns,8,3
BU,Cubs,4,4
ACM,Hackers,8,4
IEEE,Techs,7,7
MIA,Soldiers,3,3
MIB,Aliens,6,9
TUG,Warriors,3,8
TNG,Trekkies,4,4
CIA,Agents,5,7
FBI,Gmen,6,6
WWF,Wrestlers,3,5
MAY,Flowers,2,5
4
IBM,Judges,5,5
UPS,Drivers,7,3
TKO,Fighters,8,4
YMCA,Villagers,7,4
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
LSU 34-26
TKO 35-27
</PRE> 

<P>

______________________________________________________
2137||||||false||||||
<P>The Dominion War has ended and Benjamin Sisco has convinced the Wormhole Aliens to allow the Federation unlimited access to the wormhole that connects Alpha Quadrent and Delta Quadrent. In his discussions with the aliens, Sisco learned that there are other Wormholes that exist throughout the galaxy. He has also convinced the aliens to identify the locations of these wormholes and allow the Federation access to them.<P>The galaxy has now been fully mapped, and The Federation has determined that a new navigational system needs to be built to take advantage of the new charts. Of particular interest to The Federation is how long a particular trip will take. Your team has been tasked with writing that part of navigational system.<P>The map of the galaxy is 2-dimensional and has been split up into a regular grid of sectors. The first sector is sector 1. Sectors are numbered left to right, bottom to top. It takes one day to travel from one sector to another. It also takes one day to travel through a wormhole from one sector to another. Travel can take place by three types of moves, each of which uses one day:<P><OL><LI>A horizontal move (left or right) </LI><LI>A vertical move (up or down) </LI><LI>A move that traverses a worm hole from one of the endpoints to the other endpoint. </LI></OL><P>You can <SPAN CLASS="textbf">not</SPAN> travel to sectors diagonally.<P>Your specific task will be to construct a system that can determine the minimum number of days it will take to get from a specified starting sector to a specified target sector.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of a non-empty series of input sets. Each input set will follow the following format:<P><P><BR><!-- MATH
 $<Size of the galaxy>$
 --><SPAN CLASS="MATH">&lt; <I>Sizeofthegalaxy</I> &gt;</SPAN><BR><TT><!-- MATH
 $<WormholeName>$
 --><SPAN CLASS="MATH">&lt; <I>WormholeName</I> &gt;</SPAN>, <!-- MATH
 $<Wormhole \ endpoint \ \#1>$
 --><SPAN CLASS="MATH">&lt; <I>Wormhole</I>&nbsp;<I>endpoint</I>&nbsp;#1 &gt;</SPAN>, <!-- MATH
 $<Wormhole \ endpoint \ \#2>$
 --><SPAN CLASS="MATH">&lt; <I>Wormhole</I>&nbsp;<I>endpoint</I>&nbsp;#2 &gt;</SPAN></TT><BR>.<BR>.<BR>.<BR><TT>Trip, <!-- MATH
 $<Sector \ the \ trip \ begins \ in>$
 --><SPAN CLASS="MATH">&lt; <I>Sector</I>&nbsp;<I>the</I>&nbsp;<I>trip</I>&nbsp;<I>begins</I>&nbsp;<I>in</I> &gt;</SPAN>, <!-- MATH
 $<Sector \ the \ trip \ ends \ in>$
 --><SPAN CLASS="MATH">&lt; <I>Sector</I>&nbsp;<I>the</I>&nbsp;<I>trip</I>&nbsp;<I>ends</I>&nbsp;<I>in</I> &gt;</SPAN></TT><P><P><BR>The size of the galaxy is in the format <TT><SPAN CLASS="MATH">&lt; <I>Number</I>1 &gt;</SPAN>x<SPAN CLASS="MATH">&lt; <I>Number</I>2 &gt;</SPAN></TT>. <SPAN CLASS="MATH"><I>Number</I>1</SPAN> and <SPAN CLASS="MATH"><I>Number</I>2</SPAN> may be equal, but they do not have to be equal. <SPAN CLASS="MATH"><I>Number</I>1</SPAN> represents the number of <SPAN CLASS="textit">rows</SPAN>, <SPAN CLASS="MATH"><I>Number</I>2</SPAN> represents the number of <SPAN CLASS="textit">columns</SPAN>. Both <SPAN CLASS="MATH"><I>Number</I>1</SPAN> and <SPAN CLASS="MATH"><I>Number</I>2</SPAN> will be greater than 0 and less than or equal to 100.<P>The list of Wormholes is of variable length (0-20 wormholes). Wormholes can be traversed in either direction. <!-- MATH
 $<WormholeName>$
 --><SPAN CLASS="MATH">&lt; <I>WormholeName</I> &gt;</SPAN> may contain alphanumeric characters as well as spaces and underscores.<P>The single Trip line of the input set specifies the start and end sectors for the trip that the system should chart a course for.<P>All commas in the input are followed by exactly one space.<P>Each input set will be separated from the next with a single blank line. There will not be a blank line at the beginning of the input, but there will be an endline just before the end of input.<P><P><BR><B>Note:</B> The below corresponds to the first example in the sample data. Wormholes exist such that you can travel from 3 to 5 and from 42 to 51.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=10 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>91</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>92</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>93</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>94</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>95</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>96</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>97</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>98</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>99</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>100</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>81</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>82</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>83</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>84</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>85</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>86</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>87</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>88</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>89</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>90</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>71</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>72</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>73</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>74</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>75</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>76</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>77</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>78</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>79</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>80</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>61</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>62</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>63</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>64</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>65</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>66</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>67</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>68</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>69</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>70</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>51</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>52</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>53</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>54</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>55</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>56</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>57</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>58</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>59</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>60</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>41</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>42</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>43</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>44</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>45</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>46</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>47</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>48</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>49</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>50</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>31</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>32</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>33</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>34</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>35</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>36</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>37</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>38</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>39</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>40</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>21</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>22</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>23</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>24</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>25</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>26</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>27</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>28</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>29</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>30</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>16</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>17</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>18</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>19</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>20</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>10</TD></TR></TBODY></TABLE></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input set, there will be a single line in the output. This line will indicate the minimum number of days <SPAN CLASS="MATH">(<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2137img1.png ALT="$ \ge$">0)</SPAN> it will take to get from the starting sector to the ending sector and will have the following format:<P><P><BR><TT>Trip from <!-- MATH
 $<start \ sector>$
 --><SPAN CLASS="MATH">&lt; <I>start</I>&nbsp;<I>sector</I> &gt;</SPAN> to <!-- MATH
 $<end \ sector>$
 --><SPAN CLASS="MATH">&lt; <I>end</I>&nbsp;<I>sector</I> &gt;</SPAN> takes <SPAN CLASS="MATH">&lt; <I>days</I> &gt;</SPAN> days</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10x10
Wormhole1, 3, 5
Wormhole2, 21, 50
Wormhole3, 90, 100
Trip, 1, 49
100x100
The OSU Wormhole, 1, 5
The OU Wormhole,  39, 2005
The LSU Wormhole, 3021, 9765
The UL-LA Wormhole, 50, 2005
The Baylor Wormhole,  2205, 3001
Trip, 45, 3021
100x10
The quick trip, 56, 67
Trip, 55, 67
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Trip from 1 to 49 takes 4 days
Trip from 45 to 3021 takes  29 days
Trip from 55 to 67 takes 2 days
</PRE><P>
______________________________________________________
2138||||||false||||||
<P>Uncle Jacques has purchased some colorful floor panels for the dance floor of his club. Every Friday his employees will rearrange the panels so that the disco dance floor will have a new and exciting look. He has purchased a large supply of panels with seven different shapes. Each panel consists of four 1 foot squares as depicted below:<P><PRE>
                                                _
 _        _       _     _       _              | |
| |      | |    _| |   | |_    | |_     _ _    | |
| |_    _| |   |  _|   |_  |   |  _|   |   |   | |
|_ _|  |_ _|   |_|       |_|   |_|     |_ _|   |_|
  1      2       3       4       5       6      7
</PRE><P>Uncle Jacques needs to know if his dance floor can be completely covered using these panels. He also needs to know how many different patterns his employees can create on the dance floor. The panels can be rotated in 90-degree increments, they cannot overlap, they cannot extend past the edge of the dance floor, and they must cover the dance floor completely.<P>Your first job is to determine whether the dance floor can be completely covered. Your second job is to determine the number of different patterns that can be created by rearranging the panels. Patterns are considered distinct if the borders between panels are different. For example, for a 4 foot by 2 foot dance floor, there are 4 distinct patterns:<P><PRE>
 _ _ _ _    _ _ _ _    _ _ _ _    _ _ _ _
| |_ _  |  |  _ _| |  |_ _ _ _|  |   |   |
|_ _ _|_|  |_|_ _ _|  |_ _ _ _|  |_ _|_ _|
</PRE><P>Rotations of patterns are also considered distinct. For example, the following four patterns are distinct:<P><PRE>
 _ _ _ _    _ _ _ _    _ _ _ _    _ _ _ _
|  _|_  |  |  _ _| |  |_ _ _ _|  | |_ _  |
| |   | |  |_|   | |  | |   | |  | |   |_|
|_|_ _|_|  | |_ _| |  | |_ _| |  | |_ _| |
|_ _ _ _|  |_ _ _|_|  |_ _|_ _|  |_|_ _ _|
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program must accept the length and width of the dance floor in feet. There can be any number of dance floor measurements in the input. The dance floor will not be larger than 36 square feet.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There will only be one line of output for each set or measurements. Your program must return the number of distinct patterns, which completely cover the dance floor. If the floor cannot be completely covered, your program must return zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 4
3 3
3 4
4 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
0
23
117

______________________________________________________
2139||||||false||||||
<P>Swamp County Electronics is a leading supplier of military-grade widgets, and has been using Statistical Process Control for years to help monitor and control its widget manufacturing process. Statisical Process Control, or SPC, is a discipline that uses sampled and measured products, statistics, and historical sample data to determine if a manufacturing process is either in control or out of control.<P>Swamp County Electronics (SCE) uses <SPAN CLASS="textit">control charts</SPAN> to detect when its product (hence its process) goes out of control: at the end of each hour of production, five units are removed from the assembly line for measurement. Statistics calls the taking of one or more measurements for a single statistical analysis a <SPAN CLASS="textit">sample</SPAN>, usually denoted <SPAN CLASS="MATH"><I>X</I></SPAN>. Testing the widgets is very complicated; only two units can be tested per hour. The testing apparatus is outrageously expensive and SCE can afford only one such apparatus. As such, at the end of the eight hour workday, the Quality Assurance Team works into the wee hours of the morning, measuring all the units in each sample. As soon as each sample is measured, the sample mean, <SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ \overline{{X}}$"></SPAN>, and the sample range, <SPAN CLASS="MATH"><I>R</I></SPAN>, are calculated:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="20" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$\displaystyle \overline{{X}}$"> = <IMG WIDTH="17" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$\displaystyle {\frac{{1}}{{5}}}$"><IMG WIDTH="27" HEIGHT="69" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$\displaystyle \sum_{{i=1}}^{{5}}$"><I>x</I><SUB>i</SUB>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>R</I> = max(<I>X</I>) - min(<I>X</I>)</DIV><P></P>where <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> represents each individual measurement. <SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ \overline{{X}}$"></SPAN> and <SPAN CLASS="MATH"><I>R</I></SPAN> are then plotted consecutively on an X&amp;R control chart as in Figure 1. The centerlines, <SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="22" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ \overline{{\overline{X}}}$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ \overline{{R}}$"></SPAN>, are the process targets determined previously by more in-depth analyses. The control limits are set at <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ \pm$">3<I>s</I></SPAN>, where <SPAN CLASS="MATH"><I>s</I></SPAN> is the expected standard deviation for the process, again determined previously.<P><DIV ALIGN="CENTER"><IMG WIDTH="704" HEIGHT="188" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="\epsfbox{p2139a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1. X&amp;R chart from the sample input.</DIV><P>When one of more of the out-of-control patterns in Figures 2a through 2e are detected on either of the X or R control charts, production is stopped until the cause of the irregularity is fixed, and <SPAN CLASS="textit">all</SPAN> of the units manufactured since the <SPAN CLASS="textit">onset</SPAN> of the irregularity are discarded. The problem is that the irregular patterns can take up to ten hours to detect, and may not be detected until two days after the onset of the problem.<P>Before investing in two more test apparatuses to detect irregularities in ``real time," SCE wishes to investigate the use of <SPAN CLASS="textit">precontrol charts</SPAN>. Precontrol charts require only two measurements per sample, and these measurements are plotted with respect to the specified product tolerances (upper and lower limits) and precontrol, or PC, lines. PC lines are set at <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ {\frac{{1}}{{4}}}$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ {\frac{{3}}{{4}}}$"></SPAN> of the total specified tolerance range. See Figure 3. The precontrol chart is divided into red, yellow, and green zones, with the red zone outside the tolerance limits, yellow between the PC line and the nearest tolerance limit, and green between the PC lines. Green is defined by the closed interval [0:25; 0:75] of the tolerance range, yellow by the half-opened intervals [0; 0:25) and (0:75; 1] of the tolerance range. If either measurement falls in a red zone, or both measurements fall into yellow zones, the process is probably out of control. Compared to X&amp;R charts, the precontrol charts have a higher probability of signaling a problem incorrectly (a false positive), or failing to detect a problem even if it exists (false negative).<P><DIV ALIGN="CENTER"><IMG WIDTH="855" HEIGHT="436" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="\epsfbox{p2139b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2. Out of control sequences for X or R.</DIV><P>Figure 2a: a single point outside of <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ \pm$">3<I>s</I></SPAN>. Figure 2b: seven successive points on one side of the centerline; <SPAN CLASS="textit">a point on the centerline cancels the sequence</SPAN>. Figure 2c: two successive points in [-3s; -2s) or (+2s; +3s]. Figure 2d: exactly 10 out of 11 successive points on one side of the centerline; <SPAN CLASS="textit">a point on the centerline cancels the sequence</SPAN>. Figure 2e: a trend of seven successive points upward or downward (a point followed by six monotonically increasing or decreasing points).<P><DIV ALIGN="CENTER"><IMG WIDTH="623" HEIGHT="181" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="\epsfbox{p2139c.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 3. Precontrol chart from the sample input.</DIV><P>As a precursor to a cost-benefit analysis, SCE has contracted your team to simulate the precontrol chart's effectiveness compared to the X&amp;R chart's trusted behavior. You will use the historical sample data from the control charts. From this data you will compute sample means and ranges for control chart analysis. Then, using only the first two measurements of each sample, you will apply the precontrol chart criteria (red, yellow, green zones), indicating when a false positive or false negative occurs with respect to the out-of-control patterns depicted in Figures 2a through 2e. Bear in mind that the control chart method is a series-based indicator-when an irregularity is detected at the end of a sequence, the irregularity actually started at the beginning of the sequence. The precontrol chart indicates ``instantaneous" behavior. <SPAN CLASS="textit">A precontrol false positive occurs when there are no irregular control chart sequences overlaying its sample, and occurs at the instantaneous sample</SPAN>. A precontrol false negative really doesn't exist at a particular sample; rather it is the lack of any precontrol problem indication over the duration of a control chart out-of-control sequence. <SPAN CLASS="textit">A false negative is reported at the end of a control chart irregular sequence</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program consists of two lines of quality specifications: the first line contains the process mean, <SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="22" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ \overline{{\overline{X}}}$"></SPAN>, and upper and lower control limits. The upper and lower control limits are always centered about <SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="22" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ \overline{{\overline{X}}}$"></SPAN>. The second line contains the range average, <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ \overline{{R}}$"></SPAN>, and its upper and lower control limits, centered about <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2139img1.png ALT="$ \overline{{R}}$"></SPAN>. The third line contains the upper and lower product tolerances. Each remaining line until end-of-file holds the data for a five-measurement sample. All measurements fall within the range [-1000,1000]. Only the values measured may be viewed by your team; what the actual data signifies is highly classified due to the military nature of the production contract. All values within lines are separated by whitespace. The samples are numbered implicitly: line 4 is sample 1, line 5 is sample 2, etc.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output is a list of false positive or false negative indications along with the sample number where they occurred, one indication per line. In either case, output the sample number without any leading spaces. For a false positive, follow the sample number with the string ``false positive". For a false negative, follow the sample number with the string ``problem missed". The output must appear in ascending order of sample number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
60.5 63.5 57.5
 5.5  9.5  1.5 
65 55 
54   61   59.5 56   56.5 
63   57   57   57.1 55.9 
58   59   58   59   58.5 
57   57.5 63   62.5 59.1 
57   57.4 63   62.5 59.2 
65   61   56   61.5 62 
64   61   58   60   62 
59   61   58.5 60   61.5 
61   59   58.5 60.5 59 
58.5 59   61   58.5 58 
56   58   58   62.3 58 
58   60   57   56   57 
58   56   59   62.3 58 
60   62   56   61.5 66 
60   62   56.5 61.5 65.5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 false positive 
3 problem missed 
5 false positive 
12 problem missed 
14 problem missed
</PRE><P>
______________________________________________________
2140||||||false||||||
<P>Satellite imagery that was collected worldwide is being reformatted into a latitude/longitude coordinate system in order to produce a map. The data is being divided into square cells for layout onto a grid. The map grid extends completely around the world in the longitudinal (west-east) direction but does not extend to either the North or the South Poles in the latitudinal (north-south) direction. Within the area covered by the grid, there are cells for which no data was collected. These cells are to be left blank on the map.<P>All cells are of equal size and are oriented so that their corners coincide with the intersections of the gridlines. Figure 1 shows a sample map grid with 8 cells in the longitudinal direction and 3 cells in the latitudinal direction. The map wraps around at the left and right edges. The areas containing data are represented by shaded cells. In the following discussion, the shaded cells are referred to as map cells.<P><DIV ALIGN="CENTER"><IMG WIDTH="695" HEIGHT="219" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2140.gif ALT="\epsfbox{p2140.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1. Sample map grid.</DIV><P>During the map-production process, it will be necessary to identify all points on the grid that are shared by more than one map cell. You are to write a program that reports all such points on the grid and the number of map cells sharing each point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input will contain the dimensions <SPAN CLASS="MATH"><I>L</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> of the map, represented as the numbers of cells in the longitudinal <SPAN CLASS="MATH">(<I>x</I>)</SPAN> and latitudinal <SPAN CLASS="MATH">(<I>y</I>)</SPAN> directions, respectively. Both numbers will be integers separated by whitespace. You can assume that <SPAN CLASS="MATH"><I>L</I></SPAN> is an integer in the range [3, 720] and <SPAN CLASS="MATH"><I>M</I></SPAN> an integer whose value is constrained by <SPAN CLASS="MATH"><I>L</I></SPAN> and the requirements on the map.<P>The second line of input will contain the total number of map cells, <SPAN CLASS="MATH"><I>P</I></SPAN>. You can assume that <SPAN CLASS="MATH"><I>P</I></SPAN> is a positive integer that does not exceed the maximum allowed by the map dimensions.<P>The final <SPAN CLASS="MATH"><I>P</I></SPAN> lines of input will be a list of the map cells. Each cell will be identified by the (integer) grid coordinates of its southwest (lower left) corner on the map, where (0, 0) is defined to be the coordinates of the southwest corner of the grid. Each cell is one unit wide in the <SPAN CLASS="MATH"><I>x</I></SPAN>-dimension and one unit high in the <SPAN CLASS="MATH"><I>y</I></SPAN>-dimension. One cell will be identified per line of input. On each line, the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate will be specified first, followed by whitespace, followed by the <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate. The cells will be ordered randomly. You can assume that the map cells will be within the bounds of the defined map, and that the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinates are constrained to the range <SPAN CLASS="MATH">[0, <I>L</I> - 1]</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program should list all the unique grid points that are shared by at least two map cells. For each shared grid point, output on a single line the point's <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate, <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate, and the number of map cells sharing that point, all separated by one blank and with no leading or trailing whitespace on the line. Output the grid points (if any) along the southern border of the map first, in order from west to east, starting at <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate 0; continue in the same manner along successive lines of latitude, ending with the northern border of the map. If no shared grid points can be found in the entire map, your program should print the string<P><P><BR><TT>NO SHARED CORNERS</TT><P><P><BR>and exit. Note that since the map wraps around the world at its eastern border, points along the map's eastern border are the same as those along its western border and should not be reported twice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 3 
10 
0 0 
0 1 
1 1 
1 2 
3 1 
4 2 
5 2 
5 1 
5 0 
7 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 1 3 
1 1 3 
5 1 2 
6 1 2 
0 2 2 
1 2 3 
2 2 2 
4 2 2 
5 2 3 
6 2 2 
5 3 2
</PRE><P>
______________________________________________________
2141||||||false||||||
<P>
Your competitors in the low end routing business are adding firewall type features and your sales department is frantic. Sales wants to add access lists ASAP. The marketeers also require that `wire speed' routing not be compromised, but the routing engine is underpowered. Your job is to write a simulator to help answer the performance questions.

<P>
Engineering has used a sniffer to record network traAEc and to extract the relevant information from the packet headers, generating a stream of simulated traAEc. Here are some samples of the simulated traffic packets:

<P>
<PRE>
 216.35.137.204     0   204.69.7.5     0   1 
204.69.3.100 49152  204.69.7.109    53  17
 24.218.179.217 27015    204.69.0.4  2326  17 
148.246.129.175  6699  204.69.2.85  1138   6
</PRE> 

<P>
The packet fields are:

<P>

<P>
<BR>
<TABLE COLS=3>
<COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<EM>Field Number</EM> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <EM>Contents</EM> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <EM>Format</EM> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
1 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> source IP address </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> dotted decimal address </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
2 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> source port </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> decimal number </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
3 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> destination IP address </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> dotted decimal address </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
4 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> destination port </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> decimal number </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
5 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> protocol </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> decimal number </TD></TR>
</TABLE>

<P>

<P>
<BR>
The fields are separated by one or more blanks and the first field may be preceded by one or more blanks. A dotted decimal address is a 32-bit value, high order byte first, with the decimal representation of each 8-bit byte [0..255] separated by a `<TT>.</TT>'. For example, 1.2.255.15 is 0x0102FF0F. Ports are in the range [0..65535]. Note that ports are significant for the TCP (6) and UDP (17) protocols only. The port fields will be 0 for other protocols. The protocol is in the range [0..255].

<P>
You will be given sample access lists. They will be syntactically correct with fields that are separated by one or more blanks. Some example entries are:

<P>
<PRE>
*  1.2.3.4 255.255.0.15 3   5.6.7.8 0.0.255.255 9  Permit 
6  0.0.0.0 0.0.0.0 *  204.69.4.254 255.255.255.255 0-1023   deny
</PRE> 

<P>
The access list fields are:

<P>

<P>
<BR>
<TABLE COLS=3>
<COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<EM>Field Number</EM> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <EM>Contents</EM> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <EM>Format</EM> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
1 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> protocol </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> decimal number or `<TT>*</TT>' </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
2 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> source IP address </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> dotted decimal address </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
3 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> source mask </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> dotted decimal mask </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
4 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> source port </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> decimal number or `<TT>*</TT>' or a range </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
5 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> destination IP address </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> dotted decimal address </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
6 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> destination mask </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> dotted decimal mask </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
7 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> destination port </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> decimal number or `<TT>*</TT>' or a range </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
8 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> action </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> `permit' or `deny' (case is not significant) </TD></TR>
</TABLE>

<P>

<P>
<BR>
A range is two decimal numbers separated by `<TT>-</TT>' with no whitespace between the numbers and the `<TT>-</TT>'. For example, 5<TT>-</TT>52 will match <!-- MATH
 $5 \le port \ number \le 52$
 -->
<SPAN CLASS="MATH">5<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2141img1.png
 ALT="$ \le$"><I>port</I>&nbsp;<I>number</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2141img1.png
 ALT="$ \le$">52</SPAN>. In the access list, the protocol and the ports can be specified as `<TT>*</TT>', which means match any protocol or port.

<P>
A dotted decimal mask is the same format as an address. It indicates which bits are significant when comparing addresses. For example, the addresses 123.234.248.14 and 123.234.254.126 match when compared using the mask 255.255.240.15 (0xFFFFF00F). The 1 bits in the mask show which bits in the addresses to compare. Note that a mask of 0.0.0.0 will cause any address pair to match.

<P>
Each simulated traffic packet is compared with the access list entries, in the same order those entries were entered, until the packet matches an entry. For a match to occur, the protocol, source and destination addresses (using the respective masks), and ports must <SPAN  CLASS="textit">all</SPAN> match. In the real router, the action directs the router to accept or reject the packet, but the simulator just keeps track of how many access list entries are compared, and the number of times each action is taken. For example, if a packet matches the 3rd, 5th, and 8th entries in a 30-entry access list, with the action of the 3rd entry being `permit', then processing that packet will contribute 3 comparisons and add 1 to the number of `permit' actions taken. If the action were `deny', 3 would also be added to the comparison count, but 1 would be added to the `deny' count. In either case the 5th and 8th entries are not examined. The first entry that matches is the last examined for a given packet.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input is a series of test cases. Each test case consists of the access list entries terminated by a blank line. The simulated packet traffic data follows. Each line will be at most 100 characters. The test case is terminated by a blank line or end-of-file. Each test case will have at most 100 access list entries.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case print three numbers: the total count of access list entries compared, the number of simulated packets resulting in the `permit' action, and the number of simulated packets resulting in the `deny' action. Put no leading spaces before the first number and exactly one space before the second and third numbers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
* 204.69.0.0  255.255.248.0  * 0.0.0.0 0.0.0.0 * permit 
*   0.0.0.0 0.0.0.0 *   0.0.0.0 0.0.0.0 *  DENY

204.69.6.230 3072 24.115.85.245 23 6 
192.168.215.17 53  204.248.52.7 1243 17 
204.69.12.21 2118  152.163.241.11 21 6

* 0.0.0.0 0.0.0.0 * 0.0.0.0 0.0.0.0 * deny

  192.102.199.19 27961  63.20.61.96 65535 17 

6 198.138.176.100 255.255.255.255 * 204.69.4.100 255.255.255.255 111 permit 
6 0.0.0.0 0.0.0.0 * 204.69.0.0 255.255.240.0 111 deny 
6  0.0.0.0 0.0.0.0 * 204.69.0.0 255.255.248.0 80 permit 
* 0.0.0.0 0.0.0.0 * 204.69.0.255 255.255.248.255 * deny 
* 204.69.0.0 255.255.248.0 * 0.0.0.0 0.0.0.0 * deny 
* 127.0.0.0 255.0.0.0 *  0.0.0.0 0.0.0.0 * deny 
* 0.0.0.0 0.0.0.0 *  204.69.7.240 255.255.255.240 9990-9999 deny 
* 0.0.0.0 0.0.0.0 *  0.0.0.0 0.0.0.0 * permit

    204.69.4.87 80    204.69.9.12 6776 6 
  134.79.112.65 2186  204.69.4.218 21  6 
216.112.217.140 2212  204.69.5.255 22  6 
198.138.176.100 1053  204.69.4.100 111 6 
198.138.176.100 1054  204.69.5.100 111 6
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
5 1 2 
1 0 1 
20 2 3
</PRE> 

<P>

______________________________________________________
2142||||||false||||||
<P>The human rights organization, PeopleFirst, has observers around the world checking up on human rights abuses in various countries. Since some countries take a dim view of this sort of activity, PeopleFirst needs a way for their observers to report abuses without the countries they are residing in realizing that a report is being made. The idea is this: Their observers will create websites where they will display photographs of their sightseeing trips, collections, or other hobbies, but the pictures will be subtly altered to hide the reports in them.<P>There is software available to do this, but PeopleFirst doesn't want to run the risk that some government will try one of these programs on their observer's pictures and find a hidden message. To avoid that, one of their members has written a custom program for hiding messages in pictures. Unfortunately, she had to leave on her own stint as an observer before she could write the program that extracts the messages from the pictures. That's where you come in. You've been asked to write the missing program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The observer's photographs are posted to their web sites in GIF format. Prior to being given to your program, the pictures are run through a filter that converts them to ppm format, so your program has a simpler picture representation to work with. The ppm format begins with the two characters ``P6" followed by whitespace, most often a single linefeed character. This is followed by the picture width and height formatted as two decimal numbers in ASCII, separated by whitespace. The height is followed by more whitespace, again most often a single linefeed. Following this is the maximum color component value: a decimal number in ASCII. This is the value of the brightest shade for any of the three primary colors in a pixel. You should ignore this value and treat it as if it were 255. This is immediately followed by a single whitespace character, usually a linefeed. Immediately after the whitespace character are <SPAN CLASS="MATH">3 <TT>x</TT> <I>width</I> <TT>x</TT> <I>height</I></SPAN> bytes representing a left to right, top to bottom scan of the pixels in the picture, three bytes per pixel, representing the shades of red, green and blue for the pixel, in that order. Treat each byte as an unsigned binary number representing the shade.<P>The message is hidden in the picture by altering the original pixel values slightly. Each pixel in the picture encodes one bit of the message, which is extracted by taking the exclusive-or of the low order bits of the shades of red, green and blue that make up the pixel. Message bits are assigned to pixels from left to right in rows, starting with the top left pixel in the picture, and ending with the bottom right pixel. The first thing encoded in the picture is the length of the message. It is encoded as 32 bits of binary, starting with the low order bit. The length is immediately followed by the bytes of the message, each byte encoded with the low order bit first. The message is immediately followed by a 32-bit checksum, with the low order bit appearing first.<P>The checksum is calculated from all of the bytes of the message length and the message. In calculating the checksum, the bytes of the message length are ordered with the low order byte first. Initialize the checksum to hexadecimal <TT>ffffffff</TT>. For each byte that goes into the checksum, first do a single bit left circular shift of the 32 bits of the checksum, then add the byte as an unsigned value, ignoring any overflow.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output consists of the extracted message, or an error message if no hidden message was found in the input picture. A bad message length or invalid checksum indicate that the input picture has no hidden message.<P>If the extracted message length is zero, output the following error message and exit before producing any other output:<P><P><BR><TT>No message found: message length is zero</TT><P><P><BR>If the extracted message length has a value so large that there wouldn't be enough pixels in the input picture to encode all of the bits of the message length, message and checksum, output the following error message and exit before producing any other output:<P><P><BR><TT>No message found: bad length: <SPAN CLASS="MATH"><I>msz</I></SPAN> bits <SPAN CLASS="MATH">&gt;</SPAN> <SPAN CLASS="MATH"><I>psz</I></SPAN> pixels</TT><P><P><BR>In the actual message, replace <SPAN CLASS="MATH"><I>msz</I></SPAN> with the number of bits needed to encode the message length, message and checksum; replace <SPAN CLASS="MATH"><I>psz</I></SPAN> with the number of pixels in the picture. Output both numbers in decimal.<P>If the checksum you calculate does not equal the extracted checksum, output the following error message and exit before producing any other output:<P><P><BR><TT>No message found: bad checksum: recorded = <SPAN CLASS="MATH"><I>rcs</I></SPAN>, calculated = <SPAN CLASS="MATH"><I>ccs</I></SPAN></TT><P><P><BR>In the actual message, replace <SPAN CLASS="MATH"><I>rcs</I></SPAN> with the extracted checksum, and replace <SPAN CLASS="MATH"><I>ccs</I></SPAN> with the calculated checksum. Output both checksums with the prefix `<TT>0x</TT>', followed by 8 hexadecimal digits, using lower case for the alphabetic hexadecimal digits. The string `<TT>0x13579bdf</TT>' would be one example of the required format.<P>The judge's data will have no improperly formatted input or require impossibly large memory allocations. Consequently, the three defined errors will be the only ones that can appear legally in your output.<P>Note that the ppm formatted picture is likely to contain many unprintable characters, and there is no requirement that the message consists solely of printable characters either. The sample input printed on this page has `<code> </code>' to indicate spaces and the expression `<code>&lt;ffl&gt;</code>'
that represent 0x0a (linefeed). Each line is broken after the occurrence of 0x0a for readability. To view your input and output, the <SPAN  CLASS="textit">od</SPAN> command should prove useful. To view the pictures as pictures, you can use <SPAN  CLASS="textit">xloadimage</SPAN>. A more interesting example is available via the <SPAN  CLASS="textit">getdata</SPAN> command: the picture, jellies.ppm, hides another picture, the GIF file, redrose.gif.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
P6&lt;ffl&gt;
8 12&lt;ffl&gt; 
255&lt;ffl&gt;
!}~ ~p }` ~P ~@~ 0 ~  ~&lt;ffl&gt;
0~~0~p0~`0~P0~@0~0/~!0~&lt;ffl&gt; 
)}~@~p@~`@~P@~@@~0@~ @~&lt;ffl&gt; 
P~~P~pP~`P~PP~@P~0P~ P~&lt;ffl&gt; 
`~~`~p`~``~Q`~@`~0`~!`~&lt;ffl&gt; 
o}}o~qp~`p~Op~@p~/p~!p~&lt;ffl&gt; 
~q~~pp~p`~pP~p@~p1~p ~p&lt;ffl&gt; 
~`~~ap~``~_P~`@~`0~` ~`&lt;ffl&gt; 
~P~~Pp~P`~PP~P)}Q1~O_~Q&lt;ffl&gt; 
~A~~@p~@a~@P~@@~@0~@ ~@&lt;ffl&gt; 
~0~~0p~0`~0P~0@~00~0 ~0&lt;ffl&gt; 
~ ~~ p~ `~ P~ @~ 0~  ~"&lt;ffl&gt;
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Hi!
</PRE> 

<P>

<P><P>
<BR>
Note the space characters `<code> </code>' and 0x0a `<code>&lt;ffl&gt;</code>'

<P>

______________________________________________________
2143||||||false||||||
<P>Swamp County has gotten new hardware for handling and reading ballots, so they need to replace their vote counting software. Frugal as always, the county supervisors have found volunteer labor, you, to develop the software, so they can use the savings as justification for voting themselves hefty raises as a reward for saving the county so much money.<P>Here's what you have to do to fulfill your civic duty: Write a program that accepts a description of the choices before the voters in the election and how those choices are represented on the ballot, reads the raw ballots, and prints the results.<P>To avoid wordiness, we will use the word ``question" to represent the office, proposition, or other question put before the voters, and the word ``choice" to represent the candidates, ``yes" or ``no," or the other choices voters can make on a question. The ballots used in Swamp County have pre-recorded precinct numbers, and contain 384 positions (numbered from 1 to 384) that can be used to record voters' choices. Only a small number of these positions will be used in any election to represent choices on ballot questions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input is in three sections, each of which consists of several lines. Every line will contain one or more data items, and is terminated by a newline character. The format of the data items is described later.<P>The first section is a description of the ballot questions. This section begins with a line containing a single number which gives the total number of ballot questions. It is followed by the descriptions of the questions themselves, each in its own subsection. Questions are numbered, starting with 1, in the order that they appear in this section.<P>The first line of the subsection for a ballot question contains its name. The second line contains two numbers, the first of which is the number of choices for this question. The second number is the number of choices that can be voted for on the question, since some questions, like positions on a party's central committee, allow you to vote for more than one candidate. The remaining lines are the names of the choices, one per line. The choices are numbered from 1, in the order they appear in the question.<P>The second section is a description of the ballots, which has a separate subsection for each precinct, since which questions are voted on and the order of the choices may vary by precinct. The first line in this section contains the number of precincts in the county. It is followed by the subsections describing the ballots in each precinct.<P>The first line of a precinct ballot description subsection contains two numbers: the precinct number, and the number of ballot positions in use on ballots in that precinct. The following lines associate one of those ballot positions with the vote it represents. Each line contains a ballot position number and the question and choice numbers associated with that ballot position. Thus a line containing `<TT>31 2 5</TT>' indicates that a vote in position 31 on that precinct's ballot is a vote for choice 5 of question 2, as given in the description of the ballot questions in the first section of input.<P>The last section is the raw ballot information, one line per ballot, until end-of-file. A ballot line starts with the precinct number for the ballot, right justified in a 4-character field. This field is followed (after a single blank) by 48 pairs of hexadecimal digits encoding the 384-bit bit string that represents how the ballot was voted. In this representation, the bits in the bit string are numbered from 1 to 384, and each position on the ballot is represented by the identically numbered bit. That bit is 1 if the corresponding ballot position is marked, and 0 if it is not marked. In the string of 96 hexadecimal digits that encodes this bit string, bit number 1 is the high order bit of the first hex digit, and the numbering proceeds from high order to low order bit in each hexadecimal digit, until bit number 384, which is the low order bit of the last hex digit. Count the ballots, starting at 1 as you read them, in case you need to report an error on that ballot.<P>Numbers are represented by strings of decimal digits in ASCII. Bit strings are represented by strings of pairs of hexadecimal digits, as already described. Multiple numbers and bit strings can appear on the same line, separated by single blanks. Character strings are represented by a single line of printable characters, including blanks, but excluding the newline character that terminates the line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Ballots must be checked for validity before they can be counted. If the precinct number on a ballot is not known (did not appear in the ballot description section of the input), print the ballot number and the string ``bad precinct" as an error message. If a ballot has any marks in positions that do not correspond to any ballot choices for ballots in that precinct, print the ballot number and the string ``stray mark" as an error message. Either of these two errors will void the entire ballot. Do not count any votes from such a ballot.<P>If a ballot has votes for more than the allowed number of choices on a question, only the vote on that question is voided. This error does not void the entire ballot. If this happens, print the ballot number, the question number, and the string, ``too many votes" as an error message. Do not count the vote for any choice on that question (or any other voided question) on the ballot, but do count the votes for any questions that have not been voided on that ballot.<P>Each error message should be on a single line and should contain just the numbers and strings mentioned. There should be just a single blank character between each number and string. Do your validity checks for each ballot in the order given. If the precinct is bad, don't bother checking anything else. If there are stray marks, don't bother reporting that some questions may have too many votes. For any ballot, report too many votes on more than one question in the order of their question numbers. If there are any error messages, follow them by three empty lines to separate them from the result output.<P>The first line of result output should start with 32 blanks, followed by the string ``Election Results", providing a title for the election results. The title line is followed by an empty line and then the results for each question in the order they were presented in the first section of the input.<P>The result for each question is output as a line containing 8 blanks and the name of the question, followed by an empty line, followed by one line for each choice in that question, in the order they appeared in the first section of the input. The line for each choice begins with the choice name, left justified in a field of 64 characters, followed by a single space followed by the number of votes for that choice, right justified in a field of 10 characters, followed by a single space, followed by the percentage of the vote for that choice on that question, rounded to the nearest integer, right justified in a field of 3 characters, and followed by a percent sign. Note that the percentage is the percentage of ballots cast on that question that voted for that choice. That means that, if you can vote for 2 choices on that question, the percentages, subject to rounding error, can add up to 200%. Always round .5 up.<P>The output of the results for the ballot questions should be separated from each other by single empty lines, and there should be no empty line after the results for the last question.<P>No input line in the ballot description sections is longer than 64 characters, while every raw ballot is represented by a line that is exactly 101 characters long. The line lengths do not include the line terminator.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
President 
5 1 
Bugs Bunny 
Daffy Duck 
Goofy 
Kenshiro 
Mickey Mouse 
Justice League of America 
6 4 
Aquaman 
Batman 
Superman 
Spiderman 
The Flash 
The Green Lantern 
Justice League of America Membership: Should Spidey be Eligible? 
2 1 
Yes 
No 
3 
122 5 
2 1 3 
4 1 2 
6 1 5 
8 1 1 
10 1 4 
43 13 
2 1 5 
4 1 2 
6 1 1 
8 1 4 
10 1 3 
21 2 6 
23 2 3 
25 2 2 
27 2 4 
29 2 1 
31 2 5 
70 3 1 
75 3 2 
8365 5 
3 1 1 
6 1 4 
9 1 5 
12 1 2 
15 1 3 
  43 10000A880000000004000000000000000000000000000000
     000000000000000000000000000000000000000000000000 
  43 004002A20000000000200000000000000000000000000000
     000000000000000000000000000000000000000000000000 
  43 040008AA0000000004000000000000000000000000000000
     000000000000000000000000000000000000000000000000 
 122 004000000000000000000000000000000000000000000000
     000000000000000000000000000000000000000000000000 
 233 004400000000010000000080000000000000000000000000
     000000008000000000000000000000000000000000000000 
 122 040000000000000000000000000000000000000000000000
     000000000000000000000000000000000000000000000001
  43 100008A00000000000200000000000000000000000000000
     000000000000000000000000000000000000000000000000 
8365 008000000000000000000000000000000000000000000000
     000000000000000000000000000000000000000000000000
  43 100002A20000000004000000000000000000000000000000
     000000000000000000000000000000000000000000000000 
8365 200000000000000000000000000000000000000000000000
     000000000000000000000000000000000000000000000000
  43 40000A200000000004000000000000000000000000000000
     000000000000000000000000000000000000000000000000 
  43 000002A00000000004000000000000000000000000000000
     000000000000000000000000000000000000000000000000 
  43 10000AA00000000000000000000000000000000000000000
     000000000000000000000000000000000000000000000000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 2 too many votes 
5 bad precinct 
6 stray mark



                                Election Results 

        President 

Bugs Bunny                                                               2  20% 
Daffy Duck                                                               4  40% 
Goofy                                                                    1  10% 
Kenshiro                                                                 1  10% 
Mickey Mouse                                                             2  20%

        Justice League of America 

Aquaman                                                                  1  14%
Batman                                                                   6  86%
Superman                                                                 6  86%
Spiderman                                                                6  86%
The Flash                                                                2  29%
The Green Lantern                                                        4  57%

        Justice League of America Membership: Should Spidey be Eligible?

Yes                                                                      5  71%
No                                                                       2  29%
</PRE><P>
______________________________________________________
2144||||||false||||||
<P>Every year Swamp County holds its regional collegiate programming contest. One part of running the programming contest is assigning teams to workstations. The organizers attempt to locate teams such that teams from the same school are not assigned workstations close to each other. In the past this has been an ad hoc process. Your team will develop an application to allow the organizers to compare their ad hoc workstation assignments with the best possible layout.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program is a list of Cartesian coordinates of workstation locations (in integer feet) followed by one line per school giving the number of teams from the school and the school name. There will be a maximum of 14 workstations, and 4 teams per school. The last workstation will always be located at `0,0'. The dimensions of the largest possible workstation lab are 200 by 200 feet. Also, the number of teams will not exceed the number of workstations, and there will always be at least one school with at least two teams.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output from your program is the <SPAN CLASS="textit">square</SPAN> of the minimum distance between any two teams from the same school after teams have been assigned workstations that maximize this distance. The output is one line containing the left justified integer value that is the squared distance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3,0 6,0 9,0 
0,2 3,2 6,2 9,2 
0,5 3,5 6,5 9,5 14,3 14,6 0,0 
3 Bogy U 
3 Gator State 
1 Armadillo Tech 
2 CFTBL City College 
1 Moss Institute 
3 SC Polytechnic
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
34

______________________________________________________
2145||||||false||||||
<P>William Robinson was completely puzzled in the music room; he could not find his triangle in his bag. He was sure that he had prepared it the night before. He remembered its clank when he had stepped on the school bus early that morning. No, not in his dream. His triangle was quite unique:no two sides had the same length, which made his favorite peculiar jingle. He insisted to the music teacher, Mr. Smith, that his triangle had probably been stolen by those aliens and thrown away into deep space.<P>Your mission is to help Will find his triangle in space. His triangle has been made invisible by the aliens, but candidate positions of its vertices are somehow known. You have to tell which three of them make his triangle. Having gone through worm-holes, the triangle may have changed its size. However, even in that case, all the sides are known to be enlarged or shrunk equally, that is, the transformed triangle is similar to the original.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The very first line of the input has an integer which is the number of data sets. Each data set gives data for one incident such as that of Will's.<P>The first line of each data set contains three decimals that give lengths of the sides of the original triangle, measured in centimeters. Three vertices of the original triangle are named P, Q, and R. Three decimals given in the first line correspond to the lengths of sides QR, RP, and PQ, in this order. They are separated by one or more space characters.<P>The second line of a data set has an integer which is the number of points in space to be considered as candidates for vertices. At least three and at most thirty points are considered.<P>The rest of the data set are lines containing coordinates of candidate points, in light years. Each line has three decimals, corresponding to x, y, and z coordinates, separated by one or more space characters. Points are numbered in the order of their appearances, starting from one.<P>Among all the triangles formed by three of the given points, only one of them is similar to the original, that is, ratios of the lengths of any two sides are equal to the corresponding ratios of the original allowing an error of less than 0.01 percent. Other triangles have some of the ratios different from the original by at least 0.1 percent.<P>The origin of the coordinate system is not the center of the earth but the center of our galaxy. Note that negative coordinate values may appear here. As they are all within or close to our galaxy, coordinate values are less than one hundred thousand light years. You don't have to take relativistic effects into account, i.e., you may assume that we are in a Euclidean space. You may also assume in your calculation that one light year is equal to <SPAN CLASS="MATH">9.461 <TT>x</TT> 10<SUP>12</SUP></SPAN> kilometers.<P>A succeeding data set, if any, starts from the line immediately following the last line of the preceding data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, one line should be output. That line should contain the point numbers of the three vertices of the similar triangle, separated by a space character. They should be reported in the order P, Q, and then R.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
  50.36493   81.61338   79.96592
5
 -10293.83  -4800.033  -5296.238
  14936.30   6964.826   7684.818
 -4516.069   25748.41  -27016.06
  18301.59  -11946.25   5380.309
  27115.20   43415.93  -71607.81
  11.51547   13.35555   14.57307
5
 -56292.27   2583.892   67754.62
 -567.5082  -756.2763  -118.7268
 -1235.987  -213.3318  -216.4862
 -317.6108  -54.81976  -55.63033
  22505.44  -40752.88   27482.94
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 4
3 4 2
</PRE><P>
______________________________________________________
2146||||||false||||||
<P>A professor of anthropology was interested in people living in isolated islands and their history. He collected their family trees to conduct some anthropological experiment. For the experiment, he needed to process the family trees with a computer. For that purpose he translated them into text files. The following is an example of a text file representing a family tree.<P><PRE>
John
 Robert
  Frank
  Andrew
 Nancy
  David
</PRE><P>Each line contains the given name of a person. The name in the first line is the oldest ancestor in this family tree. The family tree contains only the descendants of the oldest ancestor. Their husbands and wives are not shown in the family tree. The children of a person are indented with one more space than the parent. For example, Robert and Nancy are the children of John, and Frank and Andrew are the children of Robert. David is indented with one more space than Robert, but he is not a child of Robert, but of Nancy. To represent a family tree in this way, the professor excluded some people from the family trees so that no one had both parents in a family tree.<P>For the experiment, the professor also collected documents of the families and extracted the set of statements about relations of two persons in each family tree. The following are some examples of statements about the family above.<P><PRE>
John is the parent of Robert.
Robert is a sibling of Nancy.
David is a descendant of Robert.
</PRE><P>For the experiment, he needs to check whether each statement is true or not. For example, the first two statements above are true and the last statement is false. Since this task is tedious, he would like to check it by a computer program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several data sets. Each data set consists of a family tree and a set of statements. The first line of each data set contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(0 < n < 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I> &lt; 1000)</SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> <!-- MATH
 $(0 < m < 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>m</I> &lt; 1000)</SPAN> which represent the number of names in the family tree and the number of statements, respectively. Each line of the input has less than 70 characters.<P>As a name, we consider any character string consisting of only alphabetic characters. The names in a family tree have less than 20 characters. The name in the first line of the family tree has no leading spaces. The other names in the family tree are indented with at least one space, <SPAN CLASS="textit">i.e.</SPAN>, they are descendants of the person in the first line. You can assume that if a name in the family tree is indented with <SPAN CLASS="MATH"><I>k</I></SPAN> spaces, the name in the next line is indented with at most <SPAN CLASS="MATH"><I>k</I> + 1</SPAN> spaces. This guarantees that each person except the oldest ancestor has his or her parent in the family tree. No name appears twice in the same family tree. Each line of the family tree contains no redundant spaces at the end.<P>Each statement occupies one line and is written in one of the following formats, where <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> are different names in the family tree.<P><P><BR><SPAN CLASS="MATH"><I>X</I></SPAN> <TT>is a child of</TT> <SPAN CLASS="MATH"><I>Y</I></SPAN>.<BR><SPAN CLASS="MATH"><I>X</I></SPAN> <TT>is the parent of</TT> <SPAN CLASS="MATH"><I>Y</I></SPAN>.<BR><SPAN CLASS="MATH"><I>X</I></SPAN> <TT>is a sibling of</TT> <SPAN CLASS="MATH"><I>Y</I></SPAN>.<BR><SPAN CLASS="MATH"><I>X</I></SPAN> <TT>is a descendant of</TT> <SPAN CLASS="MATH"><I>Y</I></SPAN>.<BR><SPAN CLASS="MATH"><I>X</I></SPAN> <TT>is an ancestor of</TT> <SPAN CLASS="MATH"><I>Y</I></SPAN>.<P><P><BR>Names not appearing in the family tree are never used in the statements. Consecutive words in a statement are separated by a single space. Each statement contains no redundant spaces at the beginning and at the end of the line.<P>The end of the input is indicated by two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each statement in a data set, your program should output one line containing <TT>True</TT> or <TT>False</TT>.<P>The first letter of `<TT>True</TT>' or `<TT>False</TT>' in the output must be a capital. The output for each data set should be followed by an empty line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 5
John
 Robert
  Frank
  Andrew
 Nancy
  David
Robert is a child of John.
Robert is an ancestor of Andrew.
Robert is a sibling of Nancy.
Nancy is the parent of Frank.
John is a descendant of Andrew.
2 1
abc
 xyz
xyz is a child of abc.
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
True
True
True
False
False

True
</PRE><P>
______________________________________________________
2147||||||false||||||
<P>Mr. Schwarz was a famous powerful pro wrestler. He starts a part time job as a warehouseman. His task is to move a cargo to a goal by repeatedly pushing the cargo in the warehouse, of course, without breaking the walls and the pillars of the warehouse.<P>There may be some pillars in the warehouse. Except for the locations of the pillars, the floor of the warehouse is paved with square tiles whose size fits with the cargo. Each pillar occupies the same area as a tile.<P><DIV ALIGN="CENTER"><IMG WIDTH="672" HEIGHT="758" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2147.gif ALT="\epsfbox{p2147.eps}"></DIV><P>Initially, the cargo is on the center of a tile. With one push, he can move the cargo onto the center of an adjacent tile if he is in proper position. The tile onto which he will move the cargo must be one of (at most) four tiles (i.e., east, west, north or south) adjacent to the tile where the cargo is present.<P>To push, he must also be on the tile adjacent to the present tile. He can only push the cargo in the same direction as he faces to it and he cannot pull it. So, when the cargo is on the tile next to a wall (or a pillar), he can only move it along the wall (or the pillar). Furthermore, once he places it on a corner tile, he cannot move it anymore.<P>He can change his position, if there is a path to the position without obstacles (such as the cargo and pillars) in the way. The goal is not an obstacle. In addition, he can move only in the four directions (i.e., east, west, north or south) and change his direction only at the center of a tile.<P>As he is not so young, he wants to save his energy by keeping the number of required pushes as small as possible. But he does not mind the count of his pedometer, because walking is very light exercise for him.<P>Your job is to write a program that outputs the minimum number of pushes required to move the cargo to the goal, if ever possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple maps, each representing the size and the arrangement of the warehouse. A map is given in the following format.<P><P><BR><TABLE COLS=5><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>w</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>h</I></SPAN></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>11</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>12</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>13</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>1w</SUB></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>21</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>22</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>23</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>2w</SUB></SPAN></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>h1</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>h2</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>h3</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>hw</SUB></SPAN></TD></TR></TABLE><P><P><BR>The integers <SPAN CLASS="MATH"><I>w</I></SPAN> and <SPAN CLASS="MATH"><I>h</I></SPAN> are the lengths of the two sides of the floor of the warehouse in terms of widths of floor tiles. <SPAN CLASS="MATH"><I>w</I></SPAN> and <SPAN CLASS="MATH"><I>h</I></SPAN> are less than or equal to 7. The integer <SPAN CLASS="MATH"><I>d</I><SUB>ij</SUB></SPAN> represents what is initially on the corresponding floor area in the following way.<P><DL COMPACT><DT>0:</DT><DD>nothing (simply a floor tile)</DD><DT>1:</DT><DD>pillar</DD><DT>2:</DT><DD>the cargo</DD><DT>3:</DT><DD>the goal</DD><DT>4:</DT><DD>the warehouseman (Mr. Schwarz)</DD></DL><P>Each of the integers 2, 3 and 4 appears exactly once as <SPAN CLASS="MATH"><I>d</I><SUB>ij</SUB></SPAN> in the map. Integer numbers in an input line are separated by at least one space character. The end of the input is indicated by a line containing two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each map, your program should output a line containing the minimum number of pushes. If the cargo cannot be moved to the goal, `<TT>-1</TT>' should be output instead.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 5
0 0 0 0 0
4 2 0 1 1
0 1 0 0 0
1 0 0 0 3
1 0 0 0 0
5 3
4 0 0 0 0
2 0 0 0 0
0 0 0 0 3
7 5
1 1 4 1 0 0 0
1 1 2 1 0 0 0
3 0 0 0 0 0 0
0 1 0 1 0 0 0
0 0 0 1 0 0 0
6 6
0 0 0 0 0 3
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 2 0 0 0 0
4 0 0 0 0 0
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5
-1
11
8
</PRE><P>
______________________________________________________
2148||||||false||||||
<P>
Bill is a boss of security guards. He has pride in that his men put on wearable computers on their
duty. At the same time, it is his headache that capacities of commercially available batteries are
far too small to support those computers all day long. His men come back to the office to charge
up their batteries and spend idle time until its completion. Bill has only one battery charger in
the office because it is very expensive.

<P>
Bill suspects that his men spend much idle time waiting in a queue for the charger. If it is the
case, Bill had better introduce another charger. Bill knows that his men are honest in some
sense and blindly follow any given instructions or rules. Such a simple-minded way of life may
lead to longer waiting time, but they cannot change their behavioral pattern.

<P>
Each battery has a data sheet attached on it that indicates the best pattern of charging and
consuming cycle. The pattern is given as a sequence of pairs of consuming time and charging
time. The data sheet says the pattern should be followed cyclically to keep the battery in quality.
A guard, trying to follow the suggested cycle strictly, will come back to the office exactly when
the consuming time passes out, stay there until the battery has been charged for the exact time
period indicated, and then go back to his beat.

<P>
The guards are quite punctual. They spend not a second more in the office than the time
necessary for charging up their batteries. They will wait in a queue, however, if the charger is
occupied by another guard, exactly on first-come-first-served basis. When two or more guards
come back to the office at the same instance of time, they line up in the order of their identifi-
cation numbers, and, each of them, one by one in the order of that line, judges if he can use the
charger and, if not, goes into the queue. They do these actions in an instant.

<P>
Your mission is to write a program that simulates those situations like Bill's and reports how
much time is wasted in waiting for the charger.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of one or more data sets for simulation.

<P>
The first line of a data set consists of two positive integers separated by a space character:the
number of guards and the simulation duration. The number of guards does not exceed one
hundred. The guards have their identification numbers starting from one up to the number of
guards. The simulation duration is measured in minutes, and is at most one week, i.e., 10080
(min.).

<P>
Patterns for batteries possessed by the guards follow the first line. For each guard, in the order
of identification number, appears the pattern indicated on the data sheet attached to his battery.
A pattern is a sequence of positive integers, whose length is a multiple of two and does not exceed
fifty. The numbers in the sequence show consuming time and charging time alternately. Those
times are also given in minutes and are at most one day, i.e., 1440 (min.). A space character or
a newline follows each number. A pattern is terminated with an additional zero followed by a
newline.

<P>
Each data set is terminated with an additional empty line. The input is terminated with an
additional line that contains two zeros separated by a space character.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set your program should simulate up to the given duration. Each guard should
repeat consuming of his battery (i.e., being on his beat) and charging of his battery according
to the given pattern cyclically. At the beginning, all the guards start their cycle simultaneously,
that is, they start their beats and, thus, start their first consuming period.

<P>
For each data set, your program should produce one line containing the total wait time of the
guards in the queue up to the time when the simulation duration runs out. The output should
not contain any other characters.

<P>
For example, consider a data set:

<P>
<PRE>
3 25
3 1 2 1 4 1 0
1 1 0
2 1 3 2 0
</PRE> 

<P>
The guard 1 tries to repeat 3 min. consuming, 1 min. charging, 2 min. consuming, 1 min.
charging, 4 min. consuming, and 1 min. charging, cyclically. Yet he has to wait sometimes to
use the charger, when he is on his duty together with the other guards 2 and 3. Thus, the actual
behavior of the guards looks like:

<P>
<PRE>
         0         10        20
         |    |    |    |    |    |
guard 1: ***.**.****.***.**-.****.
guard 2: *.*-.*-.*-.*.*.*.*--.*.*-
guard 3: **.***--..**-.***..**.***
</PRE> 
where ``<TT>*</TT>" represents a minute spent for consuming, ``<TT>.</TT>" for charging, and ``<TT>-</TT>" for waiting in the queue. At time 3, the guards 1 and 2 came back to the office and the guard 1 started charging while the guard 2 went into the queue. At time 6, all the guards came back to the office and the guard 1 started charging while the others went to the queue. When the charger got available at time 7, the guard 2 started charging, leaving the guard 3 in the queue. All those happened are consequences of rules stated above. And the total time wasted in waiting for the charger becomes 10 minutes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 25
3 1 2 1 4 1 0
1 1 0
2 1 3 2 0

4 1000
80 20 80 20 80 20 80 20 0
80
20
0
80 20 90
10 80
20
0
90 10
0

0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10
110
</PRE> 

<P>

______________________________________________________
2149||||||false||||||
<P>
Haven't you ever thought that programs written in Java, C++, Pascal, or any other modern
computer languages look rather sparse? Although most editors provide sufficient screen space
for at least 80 characters or so in a line, the average number of significant characters occurring
in a line is just a fraction. Today, people usually prefer readability of programs to efficient use
of screen real estate.

<P>
Dr. Faust, a radical computer scientist, believes that editors for real programmers shall be more
space efficient. He has been doing research on saving space and invented various techniques
for many years, but he has reached the point where no more essential improvements will be
expected with his own ideas.

<P>
After long thought, he has finally decided to take the ultimate but forbidden approach. He does
not hesitate to sacrifice anything for his ambition, and asks a devil to give him supernatural
intellectual powers in exchange with his soul. With the transcendental knowledge and ability,
the devil provides new algorithms and data structures for space efficient implementations of
editors.

<P>
The editor implemented with those evil techniques is beyond human imaginations and behaves
somehow strange. The mighty devil Dr. Faust asks happens to be the devil of gravity. The
editor under its control saves space with magical magnetic and gravitational forces.

<P>
Your mission is to defeat Dr. Faust by re-implementing this strange editor without any help
of the devil. At first glance, the editor looks like an ordinary text editor. It presents texts in
two-dimensional layouts and accepts editing commands including those of cursor movements and
character insertions and deletions. A text handled by the devil's editor, however, is partitioned
into text segments, each of which is a horizontal block of non-blank characters. In the following
figure, for instance, four text segments ``<TT>abcdef</TT>", ``<TT>ghijkl</TT>", ``<TT>mnop</TT>", ``<TT>qrstuvw</TT>" are present and the first two are placed in the same row.

<P>
<PRE>
abcdef  ghijkl
     mnop
qrstuvw
</PRE> 

<P>
The editor has the following unique features.

<P>

<OL>
<LI>A text segment without any supporting segments in the row immediately below it falls by the evil gravitational force.
</LI>
<LI>Text segments in the same row and contiguous to each other are concatenated by the evil magnetic force.
</LI>
</OL>

<P>
For instance, if characters in the segment ``<TT>mnop</TT>" in the previous example are deleted, the two
segments on top of it fall and we have the following.

<P>
<PRE>
abcdef
qrstuvw ghijkl
</PRE> 

<P>
After that, if ``<TT>x</TT>" is added at the tail (i.e., the right next of the rightmost column) of the segment
``<TT>qrstuvw</TT>", the two segments in the bottom row are concatenated.

<P>
<PRE>
abcdef
qrstuvwxghijkl
</PRE> 

<P>
Now we have two text segments in this figure. By this way, the editor saves screen space but demands the users' extraordinary intellectual power.

<P>
In general, after a command execution, the following rules are applied, where <SPAN CLASS="MATH"><I>S</I></SPAN> is a text segment, left(<SPAN CLASS="MATH"><I>S</I></SPAN>) and right(<SPAN CLASS="MATH"><I>S</I></SPAN>) are the leftmost and rightmost columns of <SPAN CLASS="MATH"><I>S</I></SPAN>, respectively, and row(<SPAN CLASS="MATH"><I>S</I></SPAN>) is the row number of <SPAN CLASS="MATH"><I>S</I></SPAN>.

<P>

<OL>
<LI>If the columns from left(<SPAN CLASS="MATH"><I>S</I></SPAN>) to right(<SPAN CLASS="MATH"><I>S</I></SPAN>) in the row numbered row(<SPAN CLASS="MATH"><I>S</I></SPAN>)-1 (i.e., the row just below <SPAN CLASS="MATH"><I>S</I></SPAN>) are empty (i.e., any characters of any text segments do not exist there), <SPAN CLASS="MATH"><I>S</I></SPAN> is pulled down to row(<SPAN CLASS="MATH"><I>S</I></SPAN>)-1 vertically, preserving its column position. If the same ranges in row(<SPAN CLASS="MATH"><I>S</I></SPAN>)-2, row(<SPAN CLASS="MATH"><I>S</I></SPAN>)-3, and so on are also empty, <SPAN CLASS="MATH"><I>S</I></SPAN> is further pulled down again and again. This process terminates sooner or later since the editor has the ultimate bottom, the row whose number is zero.
</LI>
<LI>If two text segments <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>T</I></SPAN> are in the same row and right(<SPAN CLASS="MATH"><I>S</I></SPAN>) +1 = left(<SPAN CLASS="MATH"><I>T</I></SPAN>), that is, <SPAN CLASS="MATH"><I>T</I></SPAN> starts at the right next column of the rightmost character of <SPAN CLASS="MATH"><I>S</I></SPAN>, <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>T</I></SPAN> are automatically concatenated to form a single text segment, which starts at left(<SPAN CLASS="MATH"><I>S</I></SPAN>) and ends at right(<SPAN CLASS="MATH"><I>T</I></SPAN>). Of course, the new segment is still in the original row.
</LI>
</OL>

<P>
Note that any text segment has at least one character. Note also that the first rule is applied prior to any application of the second rule. This means that no concatenation may occur while falling segments exist. For instance, consider the following case.

<P>
<PRE>
   dddddddd
   cccccccc
bbbb
aaa
</PRE> 

<P>
If the last character of the text segment ``<TT>bbbb</TT>" is deleted, the concatenation rule is not applied
until the two segments ``<TT>cccccccc</TT>" and ``<TT>dddddddd</TT>" stop falling. This means that ``<TT>bbb</TT>" and
``<TT>cccccccc</TT>" are not concatenated.

<P>
The devil's editor has a cursor and it is always in a single text segment, which we call the current
segment. The cursor is at some character position of the current segment or otherwise at its
tail. Note that the cursor cannot be a support. For instance, in the previous example, even if
the cursor is at the last character of ``<TT>bbbb</TT>" and it stays at the same position after the deletion,
it cannot support ``<TT>cccccccc</TT>" and ``<TT>dddddddd</TT>" any more by solely itself and thus those two
segments shall fall. Finally, the cursor is at the leftmost ``<TT>d</TT>"

<P>
The editor accepts the following commands, each represented by a single character.

<P>

<UL>
<LI><TT>F</TT>: Move the cursor forward (i.e., to the right) by one column in the current segment. If the cursor is at the tail of the current segment and thus it cannot move any more within the segment, an error occurs.
</LI>
<LI><TT>B</TT>: Move the cursor backward (i.e., to the left) by one column in the current segment. If the cursor is at the leftmost position of the current segment, an error occurs.
</LI>
<LI><TT>P</TT>: Move the cursor upward by one row. The column position of the cursor does not change. If the new position would be out of the legal cursor range of any existing text segment, an error occurs.
</LI>
<LI><TT>N</TT>: Move the cursor downward by one row. The column position of the cursor does not change. If the cursor is in the bottom row or the new position is out of the legal cursor range of any existing text segment, an error occurs.
</LI>
<LI><TT>D</TT>: Delete the character at the cursor position. If the cursor is at the tail of the current segment and so no character is there, an error occurs. If the cursor is at some character, it is deleted and the current segment becomes shorter by one character. Neither the beginning (i.e., leftmost) column of the current segment nor the column position of the cursor changes. However, if the current segment becomes empty, it is removed and the cursor falls by one row. If the new position would be out of the legal cursor range of any existing text segment, an error occurs.

<P>
Note that after executing this command, some text segments may lose their supports and be pulled down toward the hell. If the current segment falls, the cursor also falls with it.
</LI>
<LI><TT>C</TT>: Create a new segment of length one immediately above the current cursor position. It consists of a copy of the character under the cursor. If the cursor is at the tail, an error occurs. Also if the the position of the new segment is already occupied by another segment, an error occurs. After executing the command, the created segment becomes the new current segment and the column position of the cursor advances to the right by one column.
</LI>
<LI>Lowercase and numeric characters (`<TT>a</TT>' to `<TT>z</TT>' and `<TT>0</TT>' to `<TT>9</TT>'): Insert the character at the current cursor position. The current segment becomes longer by one character. The cursor moves forward by one column. The beginning column of the current segment does not change.
</LI>
</UL>

<P>
Once an error occurs, the entire editing session terminates abnormally.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input contains an integer that represents the number of editing sessions.
Each of the following lines contains a character sequence, where the first character is the initial
character and the rest represents a command sequence processed during a session. Each session
starts with a single segment consisting of the initial character in the bottom row. The initial
cursor position is at the tail of the segment. The editor processes each command represented
by a character one by one in the manner described above.

<P>
You may assume that each command line is non-empty and its length is at most one hundred.
A command sequence ends with a newline.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each editing session specified by the input, if it terminates without errors, your program
should print the current segment at the completion of the session in a line. If an error occurs
during the session, just print ``<TT>ERROR</TT>" in capital letters in a line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
12BC3BC4BNBBDD5
aaaBCNBBBCb
aaaBBCbNBC
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
15234
aba
ERROR
</PRE> 

<P>

______________________________________________________
2150||||||false||||||
<P>A scientist discovered a strange variation of amoeba. The scientist named it <SPAN CLASS="textit">numoeba</SPAN>. A numoeba, though it looks like an amoeba, is actually a community of cells, which always forms a tree.<P>The scientist called the cell <SPAN CLASS="textit">leader</SPAN> that is at the root position of the tree. For example, in Fig. 1, the leader is <SPAN CLASS="MATH"><I>A</I></SPAN>. In a numoeba, its leader may change time to time. For example, if <SPAN CLASS="MATH"><I>E</I></SPAN> gets new leadership, the tree in Fig. 1 becomes one in Fig. 2. We will use the terms root, leaf, parent, child and subtree for a numoeba as defined in the graph theory.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=7><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{$A$}"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>B</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>C</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>D</I></SPAN></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>E</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>F</I></SPAN></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>G</I></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Fig. 1</DIV><P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=7><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>B</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>C</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>D</I></SPAN></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="29" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{$E$}"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>F</I></SPAN></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>G</I></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Fig. 2</DIV><P><P><BR>Numoeba changes its physical structure at every biological clock by cell division and cell death. The leader may change depending on this physical change.<P>The most astonishing fact about the numoeba cell is that it contains an organic unit called <SPAN CLASS="textit">numbosome</SPAN>, which represents an odd integer within the range from 1 to 12,345,677. At every biological clock, the value of a numbosome changes from <SPAN CLASS="MATH"><I>n</I></SPAN> to a new value as follows:<P><OL><LI>The maximum odd factor of <SPAN CLASS="MATH">3<I>n</I> + 1</SPAN> is calculated. This value can be obtained from <SPAN CLASS="MATH">3<I>n</I> + 1</SPAN> by repeating division by 2 while even. </LI><LI>If the resulting integer is greater than 12,345,678, then it is subtracted by 12,345,678. </LI></OL><P>For example, if the numbosome value of a cell is 13, <SPAN CLASS="MATH">13 <TT>x</TT> 3 + 1 = 40</SPAN> is divided by <SPAN CLASS="MATH">2<SUP>3</SUP> = 8</SPAN> and a new numbosome value 5 is obtained. If the numbosome value of a cell is 11,111,111, it changes to 4,320,989, instead of 16,666,667. If <SPAN CLASS="MATH">3<I>n</I> + 1</SPAN> is a power of 2, yielding 1 as the result, it signifies the death of the cell as will be described below.<P>At every biological clock, the next numbosome value of every cell is calculated and the fate of the cell and thereby the fate of numoeba is determined according to the following steps.<P><OL><LI>A cell that is a leaf and increases its numbosome value is designated as a <SPAN CLASS="textit">candidate</SPAN> leaf.<P>A cell dies if its numbosome value becomes 1. If the dying cell is the leader of the numoeba, the numoeba dies as a whole. Otherwise, all the cells in the subtree from the dying cell (including itself) die. However, there is an exceptional case where the cells in the subtree do not necessarily die; if there is only one child cell of the dying non-leader cell, the child cell will replace the dying cell. Thus, a straight chain simply shrinks if its non-leader constituent dies.<P>For example, consider a numoeba with the leader A below.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=11><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{$A$}"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>B</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>C</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>D</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>E</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>F</I></SPAN></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>G</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>H</I></SPAN></TD></TR></TABLE>(1)</DIV><P><P><BR>If the leader A dies in (1), the numoeba dies.<P>If the cell D dies in (1), (1) will be as follows.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=9><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{$A$}"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>B</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>C</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>E</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>F</I></SPAN></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>G</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>H</I></SPAN></TD></TR></TABLE>(2)</DIV><P><P><BR>And, if the cell E dies in (1), (1) will be as follows.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=7><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{$A$}"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>B</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>C</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>D</I></SPAN></TD></TR></TABLE>(3)</DIV><P><P><BR>Note that this procedure is executed sequentially, top-down from the root of the numoeba to leaves. If the cells <SPAN CLASS="MATH"><I>E</I></SPAN> and <SPAN CLASS="MATH"><I>F</I></SPAN> will die in (1), the death of <SPAN CLASS="MATH"><I>F</I></SPAN> is not detected at the time the procedure examines the cell <SPAN CLASS="MATH"><I>E</I></SPAN>. The numoeba, therefore, becomes (3). One should not consider in such a way that the death of <SPAN CLASS="MATH"><I>F</I></SPAN> makes <SPAN CLASS="MATH"><I>G</I></SPAN> the only child of <SPAN CLASS="MATH"><I>E</I></SPAN>, and, therefore, <SPAN CLASS="MATH"><I>G</I></SPAN> will replace the dying <SPAN CLASS="MATH"><I>E</I></SPAN>. </LI><LI>If a <SPAN CLASS="textit">candidate</SPAN> leaf survives with the numbosome value of <SPAN CLASS="MATH"><I>n</I></SPAN>, it spawns a cell as its child, thereby a new leaf, whose numbosome value is the least odd integer greater than or equal to <SPAN CLASS="MATH">(<I>n</I> + 1)/2</SPAN>. We call the child <SPAN CLASS="textit">leaf bonus</SPAN>. </LI><LI>Finally, a new leader of the numoeba is selected, who has a unique maximum numbosome value among all the constituent cells. The tree structure of the numoeba is changed so that the new leader is its root, like what is shown in Fig. 1 and Fig. 2. Note that the parent-child relationship of some cells may be reversed by this leader change. When a new leader of a unique maximum numbosome value, say <SPAN CLASS="MATH"><I>m</I></SPAN>, is selected (it may be the same cell as the previous leader), it spawns a cell as its child with the numbosome whose value is the greatest odd integer less than or equal to <SPAN CLASS="MATH">(<I>m</I> + 1)/2</SPAN>. We call the child <SPAN CLASS="textit">leader bonus</SPAN>. If there is more than one cell of the same maximum numbosome value, however, the leader does not change for the next period, and there is no leader bonus. </LI></OL><P>The following illustrates the growth and death of a numoeba starting from a single cell seed with the numbosome value 15, which plays both roles of the leader and a leaf at the start. In the figure, a cell is nicknamed with its numbosome value. Note that the order of the children of a parent is irrelevant.<P><P><BR><TABLE COLS=7><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>clock</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=5>structure</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>comments</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="33" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{15}"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>15 plays both roles of the leader and a leaf.</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="33" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{23}"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>23 (from 15) is the new leader (again).</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>13 is the leaf bonus,</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>and 11 is the leader bonus.</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>17</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>17 is the leader bonus.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \uparrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="33" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{35}"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>35 (from 23) is the new leader (again).</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5 is from 13.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>17</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>17 (from 11) spawns</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>the leaf bonus 9.</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>13 is from 17.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \uparrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="33" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{53}"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>27</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>53 (from 35) is the new leader (again).</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>27 is the leader bonus.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Note that 5 dies out.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5 is from 13.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \uparrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \leftarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="33" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{41}"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>41 (from 27) is the new leader,</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>and spawns the leader and leaf bonuses both 21.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5 (from 53) loses its leadership.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \leftarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="33" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{31}"></SPAN></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>only 31 (from 41) survives,</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>which spawns the leader bonus 15.</TD></TR></TABLE><P><P><BR>The numoeba continues changing its structure, and at clock 104, it looks as follows.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=19><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>167</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>53</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \uparrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \uparrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>17</TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>167</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>53</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \uparrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \uparrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \nearrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \leftarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \leftarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="24" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="\fbox{5}"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>167</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>53</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \searrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2429</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>161</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>23</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \downarrow$"></SPAN></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2429</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>161</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>23</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TABLE></DIV><P><P><BR>Here, two ambitious 2429's could not become the leader. The leader 5 will die without promoting these <SPAN CLASS="textit">talented</SPAN> cells at the next clock. This alludes the fragility of a big organization.<P><P><BR>And, the numoeba dies at clock 105.<P><P><BR>Your job is to write a program that outputs statistics about the life of numoebae that start from a single cell seed at clock zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>A sequence of odd integers, each in a line. Each odd integer <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \le$"><I>k</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2150img1.png ALT="$ \le$">9, 999)</SPAN> indicates the initial numbosome value of the starting cell. This sequence is terminated by a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>A sequence of pairs of integers:an integer that represents the numoeba's life time and an integer that represents the maximum number of constituent cells in its life. These two integers should be separated by a space character, and each pair should be followed immediately by a newline. Here, the lifetime means the clock when the numoeba dies.<P>You can use the fact that the life time is less than 500, and that the number of cells does not exceed 500 in any time, for any seed value given in the input. You might guess that the program would consume a lot of memory. It is true in general. But, don't mind. Referees will use a test data set consisting of no more than 10 starting values, and, starting from any of the those values, the total numbers of cells spawned during the lifetime will not exceed 5000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
5
7
15
655
2711
6395
7195
8465
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 3
1 1
9 11
105 65
398 332
415 332
430 332
428 332
190 421
</PRE><P>
______________________________________________________
2151||||||false||||||
<P>Dr. Extreme experimentally made an extremely precise telescope to investigate extremely curi- ous phenomena at an extremely distant place. In order to make the telescope so precise as to investigate phenomena at such an extremely distant place, even quite a small distortion is not allowed. However, he forgot the influence of the internal gas affected by low-frequency vibration of magnetic flux passing through the telescope. The cylinder of the telescope is not affected by the low-frequency vibration, but the internal gas is.<P>The cross section of the telescope forms a perfect circle. If he forms a coil by putting extremely thin wire along the (inner) circumference, he can measure (the average vertical component of) the temporal variation of magnetic flux:such measurement would be useful to estimate the influence. But points on the circumference at which the wire can be fixed are limited; furthermore, the number of special clips to fix the wire is also limited. To obtain the highest sensitivity, he wishes to form a coil of a polygon shape with the largest area by stringing the wire among carefully selected points on the circumference.<P>Your job is to write a program which reports the maximum area of all possible <SPAN CLASS="MATH"><I>m</I></SPAN>-polygons (polygons with exactly <SPAN CLASS="MATH"><I>m</I></SPAN> vertices) each of whose vertices is one of the <SPAN CLASS="MATH"><I>n</I></SPAN> points given on a circumference with a radius of 1. An example of the case <SPAN CLASS="MATH"><I>n</I> = 4</SPAN> and <SPAN CLASS="MATH"><I>m</I> = 3</SPAN> is illustrated below.<P><DIV ALIGN="CENTER"><IMG WIDTH="800" HEIGHT="514" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="\epsfbox{p2151.eps}"></DIV><P>In the figure above, the equations such as `` <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB> = 0.0</SPAN>" indicate the locations of the <SPAN CLASS="MATH"><I>n</I></SPAN> given points, and the decimals such as ``1.000000" on <SPAN CLASS="MATH"><I>m</I></SPAN>-polygons indicate the areas of <SPAN CLASS="MATH"><I>m</I></SPAN>-polygons.<P>Parameter <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> denotes the location of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th given point on the circumference <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \le$"><I>n</I>)</SPAN>. The location <SPAN CLASS="MATH"><I>p</I></SPAN> of a point on the circumference is in the range <!-- MATH
 $0 \le p < 1$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \le$"><I>p</I> &lt; 1</SPAN>, corresponding to the range of rotation angles from 0 to <SPAN CLASS="MATH">2<IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \pi$"></SPAN> radians. That is, the rotation angle of a point at <SPAN CLASS="MATH"><I>p</I></SPAN> to the point at 0 equals <SPAN CLASS="MATH">2<IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \pi$"><I>p</I></SPAN> radians. (<SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \pi$"></SPAN> is the circular constant 3.14159265358979323846....)<P>You may rely on the fact that the area of an isosceles triangle ABC (AB = AC = 1) with an interior angle BAC of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \alpha$"></SPAN> radians <!-- MATH
 $(0 < \alpha < \pi )$
 --><SPAN CLASS="MATH">(0 &lt; <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \alpha$"> &lt; <IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \pi$">)</SPAN> is <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ {\frac{{1}}{{2}}}$"></SPAN>sin<SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \alpha$"></SPAN> , and the area of a polygon inside a circle with a radius of 1 is less than <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \pi$"></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple subproblems followed by a line containing two zeros that indicates the end of the input. Each subproblem is given in the following format.<P><P><BR><TABLE COLS=4><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>n</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>m</I></SPAN></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>p</I><SUB>n</SUB></SPAN></TD></TR></TABLE><P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> is the number of points on the circumference <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \le$">40)</SPAN>. <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of vertices to form <SPAN CLASS="MATH"><I>m</I></SPAN>-polygons <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \le$"><I>n</I>)</SPAN>. The locations of <SPAN CLASS="MATH"><I>n</I></SPAN> points, <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>n</SUB></SPAN>, are given as decimals and they are separated by either a space character or a newline. In addition, you may assume that <!-- MATH
 $0 \le p_{1} < p_{2} <  \cdots  < p_{n} < 1$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2151.gif ALT="$ \le$"><I>p</I><SUB>1</SUB> &lt; <I>p</I><SUB>2</SUB> &lt; <SUP>... </SUP>&lt; <I>p</I><SUB>n</SUB> &lt; 1</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each subproblem, the maximum area should be output, each in a separate line. Each value in the output may not have an error greater than 0.000001 and its fractional part should be represented by 6 decimal digits after the decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3
0.0 0.25 0.5 0.666666666666666666667
4 4
0.0 0.25 0.5 0.75
30 15
0.00 0.03 0.06 0.09 0.12 0.15 0.18 0.21 0.24 0.27
0.30 0.33 0.36 0.39 0.42 0.45 0.48 0.51 0.54 0.57
0.61 0.64 0.66 0.69 0.72 0.75 0.78 0.81 0.84 0.87
40 20
0.351 0.353 0.355 0.357 0.359 0.361 0.363 0.365 0.367 0.369
0.371 0.373 0.375 0.377 0.379 0.381 0.383 0.385 0.387 0.389
0.611 0.613 0.615 0.617 0.619 0.621 0.623 0.625 0.627 0.629
0.631 0.633 0.635 0.637 0.639 0.641 0.643 0.645 0.647 0.649
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1.183013
2.000000
3.026998
0.253581
</PRE><P>
______________________________________________________
2152||||||false||||||
<P>
Euclid, dwelt in Alexandria, still being convinced firmly that there is no Royal Road to Euclidean
Geometry yet, began to feel gradually, reading newspaper articles, watching TV programs, or
brainwashed by young students, that it might be possible to create such a discipline as 
e-Geometry or Geometry on the Internet. In an e-Geometry environment, he could timely discuss
geometry issues with many friends of his including Pythagoras, or he could upload new versions
of his unparalleled famous archive ``Elements of Geometry (Stoicheia)" on his WWW site. He
instantly made up his mind to join the Internet.

<P>
He started laying ether cable himself from the hub to his terminal in his uniquely shaped study.
He designed the cable route as short as possible.

<P>
Figure 1 is a plan of his study. Integers in a pair of parentheses like <TT>(0 0)</TT> are <SPAN CLASS="MATH"><I>x</I></SPAN>- and 
<SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates of the nearest pillar or hub or terminal. Between two adjacent pillars are walls
indicated by the solid lines. Suppose A is the position of the hub and B his terminal, then the
shortest cable may run as drawn with a broken line.

<P>
Your mission is to answer the sequence of the coordinates of turning points of the shortest cable
route including those of both ends A and B for each plan. So, you are to answer as:

<P>

<P>
<BR>

<TT>(1 1) (2 2) (8 4) (9 5)</TT>

<P>

<P>
<BR>
for the example of Figure 1.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2152a.eps}$
 -->
<IMG
 WIDTH="687" HEIGHT="506" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/p2152a.gif
 ALT="\epsfbox{p2152a.eps}">
</DIV>

<P>
Remember, however, that this is a house of Euclid, the founder and master of Euclidean Geom-
etry. The pillars, hub and terminal are ideal points of Euclidean Geometry. The walls and cable
are line segments in the sense of geometry. Accordingly, the cable may overlap the walls or the
pillars. Hence for Figures 2, 3 and 4, the answers should be as follows:(Hereafter, the layouts
of the study are given by means of the lists of the pillar coordinates.)

<P>

<P>
<BR>
Figure 2: Pillars: 
<BR><TT>(0 0) (2 0) (2 2) (4 2) (4 0) (6 0) (6 6) (4 6) (4 4) (2 4) (2 6) (0 6)</TT> 
<BR>
Hub: <TT>(1 1)</TT>, Terminal: <TT>(5 1)</TT> 
<BR>
The answer: <TT>(1 1) (2 2) (4 2) (5 1)</TT> 
<BR>
<BR>
Figure 3: Pillars: 
<BR><TT>(0 0) (2 0) (2 2) (4 2) (4 0) (6 0) (6 6) (4 6) (4 4) (2 4) (2 6) (0 6)</TT> 
<BR>
Hub: <TT>(1 1)</TT>, Terminal: <TT>(5 5)</TT> 
<BR>
The answer: <TT>(1 1) (5 5)</TT> 
<BR>
Warning: <TT>(2 2) (4 4)</TT> are not the turning points. 
<BR>
<BR>
Figure 4: Pillars: 
<BR><TT>(0 0) (2 0) (2 2) (4 2) (4 0) (6 0) (6 2) (8 2) (8 0) (10 0) (10 6) (8 6)</TT> 
<BR><TT>(8 4) (6 4) (6 6) (4 6) (4 4) (2 4) (2 6) (0 6)</TT> 
<BR>
Hub: <TT>(1 1)</TT>, Terminal: <TT>(9 1)</TT> 
<BR>
The answer: <TT>(1 1) (2 2) (8 2) (9 1)</TT>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2152b.eps}$
 -->
<IMG
 WIDTH="1011" HEIGHT="248" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/p2152a.gif
 ALT="\epsfbox{p2152b.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figures 2, 3, 4 respectively.

</DIV>

<P>
All values of coordinates are integers. Walls are parallel to either x- or y-axis. Walls turn right
or left at each pillar for which the coordinates are given. The coordinates of the pillars are given
in the order to look the inside of study to the left. From the last pillar in the list, the next wall
stretches to the first pillar. Every position of the pillar appears only once in the list. Each pillar
is connected to exactly two walls, one of which is parallel to <SPAN CLASS="MATH"><I>x</I></SPAN>-axis and the other to <SPAN CLASS="MATH"><I>y</I></SPAN>-axis. The
whole wall surrounds the study with single stroke closing line. No walls cross. No wall branches
exist. It is known that no independent walls or other obstacles are found inside the study. Only
one hub and one terminal exist inside the study for each plan, and their positions are always
different.

<P>
Submit your program when it could solve for the study of complicated shape like Figure 5. This
layout is included in the sample input.

<P>

<P>
<BR>
Pillars: 
<BR><TT>(0 0) (2 0) (2 4) (4 4) (4 0) (14 0) (14 6) (10 6) (10 8) (14 8) (14 14)</TT> 
<BR><TT>(4 14) (4 10) (2 10) (2 14) (0 14) (0 8) (6 8) (6 12) (12 12) (12 10)</TT> 
<BR><TT>(8 10) (8 4) (12 4) (12 2) (6 2) (6 6) (0 6)</TT> 
<BR>
Hub: <TT>(1 1)</TT>, Terminal: <TT>(1 13)</TT> 
<BR>
The answer:
<TT>(1 1) (2 4) (4 4) (6 2) (12 2) (12 4) (10 6) (10 8) (12 10) (12 12)</TT> 
<BR><TT>(6 12) (4 10) (2 10) (1 13)</TT>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2152c.eps}$
 -->
<IMG
 WIDTH="569" HEIGHT="569" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/p2152a.gif
 ALT="\epsfbox{p2152c.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains one or more data sets of the coordinates of the pillars, hubs and terminals.
Each set begins with a line of an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(4 \le n \le 208)$
 -->
<SPAN CLASS="MATH">(4<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/p2152a.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/p2152a.gif
 ALT="$ \le$">208)</SPAN>, which is the number of the pillars
of the study. The following lines contain the coordinates of pillars, five pairs of coordinates per
line. After these lines comes one line that contains the coordinates of the hub <!-- MATH
 $(a_{x} \ a_{y})$
 -->
<SPAN CLASS="MATH">(<I>a</I><SUB>x</SUB>&nbsp;<I>a</I><SUB>y</SUB>)</SPAN> and the
terminal <!-- MATH
 $(b_{x} \ b_{y})$
 -->
<SPAN CLASS="MATH">(<I>b</I><SUB>x</SUB>&nbsp;<I>b</I><SUB>y</SUB>)</SPAN>.

<P>
The structure of one complete data set is as follows:(Input/output data do not use parentheses.)

<P>

<P>
<BR>
<TABLE COLS=7>
<COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN CLASS="MATH"><I>n</I></SPAN> </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH">...</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>5</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>5</SUB></SPAN> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>6</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>6</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>7</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>7</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH">...</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>10</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>10</SUB></SPAN> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>11</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>11</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH">...</SPAN> </TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH">...</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>n</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>n</SUB></SPAN> </TD><TD></TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>a</I><SUB>x</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>y</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>b</I><SUB>x</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>b</I><SUB>y</SUB></SPAN> </TD><TD></TD><TD></TD><TD></TD></TR>
</TABLE>

<P>

<P>
<BR>
To make the situation simple, the coordinates of the pillars are all even integers, while those of
the hub and terminal are all odd. It is also known that the room size is less than 100 coordinate
units in both x and y directions and the cable length is shorter than 1000 coordinate units.

<P>
The input is terminated by a line having one 0 after the last set.

<P>
The sample input corresponds to Figures 1 and 5.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, print the sequence of the coordinates of turning points of the shortest cable
with those of the hub at the beginning and those of the terminal at the end. Each line should
contain five pairs of coordinates separated by a single space, except the last of these lines which
may contain fewer than five. In each coordinate pair, x and y values should be separated also by
a single space. The last coordinate of each line may be followed by a single space. The answer
of each data set must be followed by a single empty line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
 20
  0  0  2  0  2  2  4  2  4  0
  6  0  6  2  8  2  8  0 10  0
 10  6  8  6  8  4  6  4  6  6
  4  6  4  4  2  4  2  6  0  6
  1  1  9  5
 28
  0  0  2  0  2  4  4  4  4  0
 14  0 14  6 10  6 10  8 14  8
 14 14  4 14  4 10  2 10  2 14
  0 14  0  8  6  8  6 12 12 12
 12 10  8 10  8  4 12  4 12  2
  6  2  6  6  0  6
  1  1  1 13
 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 1 2 2 8 4 9 5

1 1 2 4 4 4 6 2 12 2
12 4 10 6 10 8 12 10 12 12
6 12 4 10 2 10 1 13

______________________________________________________
2153||||||false||||||
<P>One part of the new WAP portal is also a calculator computing expressions with very long numbers. To make the output look better, the result is formated the same way as is it usually used with manual calculations.</p><p>Your task is to write the core part of this calculator. Given two numbers and the requested operation, you are to compute the result and print it in the form specified below. With addition and subtraction, the numbers are written below each other. Multiplication is a little bit more complex: first of all, we make a partial result for every digit of one of the numbers, and then sum the results together.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is a&nbsp;single positive integer <VAR>T</VAR> on the first line of input. It stands for the number of expressions to follow. Each expression consists of a&nbsp;single line containing a&nbsp;positive integer number, an&nbsp;operator (one of <TT>+</TT>, <TT>-</TT> and <TT>*</TT>) and the second positive integer number. Every number has at most 500&nbsp;digits. There are no spaces on the line. If the operation is subtraction, the second number is always lower than the first one. No number will begin with zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each expression, print two lines with two given numbers, the second number below the first one, last digits (representing unities) must be aligned in the same column. Put the operator right in front of the first digit of the second number. After the second number, there must be a&nbsp;horizontal line made of dashes (<TT>-</TT>).<P>For each addition or subtraction, put the result right below the horizontal line, with last digit aligned to the last digit of both operands.<P>For each multiplication, multiply the first number by each digit of the second number. Put the partial results one below the other, starting with the product of the last digit of the second number. Each partial result should be aligned with the corresponding digit. That means the last digit of the partial product must be in the same column as the digit of the second number. No product may begin with any additional zeros. If a&nbsp;particular digit is zero, the product has exactly one digit -- zero. If the second number has more than one digit, print another horizontal line under the partial results, and then print the sum of them.<P>There must be minimal number of spaces on the beginning of lines, with respect to other constraints. The horizontal line is always as long as necessary to reach the left and right end of both numbers (and operators) right below and above it. That means it begins in the same column where the leftmost digit or operator of that two lines (one below and one above) is. It ends in the column where is the rightmost digit of that two numbers. The line can be neither longer nor shorter than specified.<P>Print one blank line after each test case, including the last one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
12345+67890
324-111
325*4405
1234*4
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
 12345
+67890
------
 80235

 324
-111
----
 213

    325
  *4405
  -----
   1625
     0
 1300
1300
-------
1431625

1234
  *4
----
4936
</PRE><P>
______________________________________________________
2154||||||false||||||
<P>ACM uses a&nbsp;new special technology of building its transceiver stations. This technology is called <EM>Modular Cuboid Architecture</EM> (<EM>MCA</EM>) and is covered by a&nbsp;patent of Lego company. All parts of the transceiver are shipped in unit blocks that have the form of cubes of exactly the same size. The cubes can be then connected to each other. The MCA is modular architecture, that means we can select preferred transceiver configuration and buy only those components we need.<P>The cubes must be always connected "face-to-face", i.e. the whole side of one cube is connected to the whole side of another cube. One cube can be thus connected to at most six other units. The resulting equipment, consisting of unit cubes is called <EM>The Bulk</EM> in the communication technology slang.<P>Sometimes, an&nbsp;old and unneeded bulk is condemned, put into a&nbsp;storage place, and replaced with a&nbsp;new one. It was recently found that ACM has many of such old bulks that just occupy space and are no longer needed. The director has decided that all such bulks must be disassembled to single pieces to save some space. Unfortunately, there is no documentation for the old bulks and nobody knows the exact number of pieces that form them. You are to write a&nbsp;computer program that takes the bulk description and computes the number of unit cubes.<P>Each bulk is described by its faces (sides). A&nbsp;special X-ray based machine was constructed that is able to localise all faces of the bulk in the space, even the inner faces, because the bulk can be partially hollow (it can contain empty spaces inside). But any bulk must be connected (i.e. it cannot drop into two pieces) and composed of whole unit cubes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is a&nbsp;single positive integer <VAR>T</VAR> on the first line of input. It stands for the number of bulks to follow. Each bulk description begins with a&nbsp;line containing single positive integer <VAR>F</VAR>, 6 &lt;= <VAR>F</VAR> &lt;= 250, stating the number of faces. Then there are <VAR>F</VAR> lines, each containing one face description. All faces of the bulk are always listed, in any order. Any face may be divided into several distinct parts and described like if it was more faces. Faces do not overlap. Every face has one inner side and one outer side. No side can be "partially inner and partially outer".<P>Each face is described on a&nbsp;single line. The line begins with an&nbsp;integer number <VAR>P</VAR> stating the number of points that determine the face, 4 &lt;= <VAR>P</VAR> &lt;= 200. Then there are 3 <VAR>x P</VAR> numbers, coordinates of the points. Each point is described by three coordinates <VAR>X</VAR>,<VAR>Y</VAR>,<VAR>Z</VAR> (0 &lt;= <VAR>X</VAR>,<VAR>Y</VAR>,<VAR>Z</VAR> &lt;= 1000) separated by spaces. The points are separated from each other and from the number <VAR>P</VAR> by two space characters. These additional spaces were added to make the input more human readable. The face can be constructed by connecting the points in the specified order, plus connecting the last point with the first one.<P>The face is always composed of "unit squares", that means every edge runs either in <VAR>X</VAR>, <VAR>Y</VAR> or <VAR>Z</VAR>-axis direction. If we take any two neighbouring points <VAR>X</VAR><SUB>1</SUB>,<VAR>Y</VAR><SUB>1</SUB>,<VAR>Z</VAR><SUB>1</SUB> and <VAR>X</VAR><SUB>2</SUB>,<VAR>Y</VAR><SUB>2</SUB>,<VAR>Z</VAR><SUB>2</SUB>, then the points will always differ in exactly one of the three coordinates. I.e. it is either <VAR>X</VAR><SUB>1</SUB> &lt;&gt; <VAR>X</VAR><SUB>2</SUB>, or <VAR>Y</VAR><SUB>1</SUB> &lt;&gt; <VAR>Y</VAR><SUB>2</SUB>, or <VAR>Z</VAR><SUB>1</SUB> &lt;&gt; <VAR>Z</VAR><SUB>2</SUB>, other two coordinates are the same. Every face lies in an&nbsp;orthogonal plane, i.e. exactly one coordinate is always the same for all points of the face. The face outline will never touch nor cross itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program must print a&nbsp;single line for every test case. The line must contain the sentence <TT>The bulk is composed of </TT><VAR>V</VAR><TT> units.</TT>, where <VAR>V</VAR> is the volume of the bulk.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
12
4  10 10 10  10 10 20  10 20 20  10 20 10
4  20 10 10  20 10 20  20 20 20  20 20 10
4  10 10 10  10 10 20  20 10 20  20 10 10
4  10 20 10  10 20 20  20 20 20  20 20 10
4  10 10 10  10 20 10  20 20 10  20 10 10
5  10 10 20  10 20 20  20 20 20  20 15 20  20 10 20
4  14 14 14  14 14 16  14 16 16  14 16 14
4  16 14 14  16 14 16  16 16 16  16 16 14
4  14 14 14  14 14 16  16 14 16  16 14 14
4  14 16 14  14 16 16  16 16 16  16 16 14
4  14 14 14  14 16 14  16 16 14  16 14 14
4  14 14 16  14 16 16  16 16 16  16 14 16
12
4  20 20 30  20 30 30  30 30 30  30 20 30
4  10 10 10  10 40 10  40 40 10  40 10 10
6  10 10 20  20 10 20  20 30 20  30 30 20  30 40 20  10 40 20
6  20 10 20  20 20 20  30 20 20  30 40 20  40 40 20  40 10 20
4  10 10 10  40 10 10  40 10 20  10 10 20
4  10 40 10  40 40 10  40 40 20  10 40 20
4  20 20 20  30 20 20  30 20 30  20 20 30
4  20 30 20  30 30 20  30 30 30  20 30 30
4  10 10 10  10 40 10  10 40 20  10 10 20
4  40 10 10  40 40 10  40 40 20  40 10 20
4  20 20 20  20 30 20  20 30 30  20 20 30
4  30 20 20  30 30 20  30 30 30  30 20 30
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
The bulk is composed of 992 units.
The bulk is composed of 10000 units.
</PRE><P>
______________________________________________________
2155||||||false||||||
<P>You probably know those quizzes in Sunday magazines: given the sequence 1, 2, 3, 4, 5, what is the next number? Sometimes it is very easy to answer, sometimes it could be pretty hard. Because these "sequence problems" are very popular, ACM wants to implement them into the "Free Time" section of their new WAP portal.<P>ACM programmers have noticed that some of the quizzes can be solved by describing the sequence by polynomials. For example, the sequence 1, 2, 3, 4, 5 can be easily understood as a&nbsp;trivial polynomial. The next number is 6. But even more complex sequences, like 1, 2, 4, 7, 11, can be described by a&nbsp;polynomial. In this case, 1/2.<VAR>n</VAR><SUP>2</SUP>-1/2.<VAR>n</VAR>+1 can be used. Note that even if the members of the sequence are integers, polynomial coefficients may be any real numbers.<P>Polynomial is an&nbsp;expression in the following form:<BR><P></P><DIV align=center><VAR>P</VAR>(<VAR>n</VAR>) = <VAR>a</VAR><SUB><VAR>D</VAR></SUB>.<VAR>n</VAR><SUP><VAR>D</VAR></SUP>+<VAR>a</VAR><SUB><VAR>D</VAR>-1</SUB>.<VAR>n</VAR><SUP><VAR>D</VAR>-1</SUP>+...+<VAR>a</VAR><SUB>1</SUB>.<VAR>n</VAR>+<VAR>a</VAR><SUB>0</SUB></DIV><p><BR clear=all></p><P></P><p>. If <VAR>a</VAR><SUB><VAR>D</VAR></SUB> &lt;&gt; 0, the number <VAR>D</VAR> is called a&nbsp;<EM>degree</EM> of the polynomial. Note that constant function <VAR>P</VAR>(<VAR>n</VAR>) = <VAR>C</VAR> can be considered as polynomial of degree 0, and the zero function <VAR>P</VAR>(<VAR>n</VAR>) = 0 is usually defined to have degree -1.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is a&nbsp;single positive integer <VAR>T</VAR> on the first line of input. It stands for the number of test cases to follow. Each test case consists of two lines. First line of each test case contains two integer numbers <VAR>S</VAR> and <VAR>C</VAR> separated by a&nbsp;single space, 1 &lt;= <VAR>S</VAR> &lt; 100, 1 &lt;= <VAR>C</VAR> &lt; 100, (<VAR>S</VAR>+<VAR>C</VAR>) &lt;= 100. The first number, <VAR>S</VAR>, stands for the length of the given sequence, the second number, <VAR>C</VAR> is the amount of numbers you are to find to complete the sequence.<P>The second line of each test case contains <VAR>S</VAR> integer numbers <VAR>X</VAR><SUB>1</SUB>, <VAR>X</VAR><SUB>2</SUB>, ... <VAR>X</VAR><SUB><VAR>S</VAR></SUB> separated by a&nbsp;space. These numbers form the given sequence. The sequence can always be described by a&nbsp;polynomial <VAR>P</VAR>(<VAR>n</VAR>) such that for every <VAR>i</VAR>, <VAR>X</VAR><SUB><VAR>i</VAR></SUB> = <VAR>P</VAR>(<VAR>i</VAR>). Among these polynomials, we can find the polynomial <VAR>P</VAR><SUB><VAR>min</VAR></SUB> with the lowest possible degree. This polynomial should be used for completing the sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For every test case, your program must print a&nbsp;single line containing <VAR>C</VAR> integer numbers, separated by a&nbsp;space. These numbers are the values completing the sequence according to the polynomial of the lowest possible degree. In other words, you are to print values <VAR>P</VAR><SUB><VAR>min</VAR></SUB>(<VAR>S</VAR>+1), <VAR>P</VAR><SUB><VAR>min</VAR></SUB>(<VAR>S</VAR>+2), .... <VAR>P</VAR><SUB><VAR>min</VAR></SUB>(<VAR>S</VAR>+<VAR>C</VAR>).<P>It is guaranteed that the results <VAR>P</VAR><SUB><VAR>min</VAR></SUB>(<VAR>S</VAR>+<VAR>i</VAR>) will be non-negative and will fit into the standard <EM>integer</EM> type.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
6 3
1 2 3 4 5 6
8 2
1 2 4 7 11 16 22 29
10 2
1 1 1 1 1 1 1 1 1 2
1 10
3
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
7 8 9
37 46
11 56
3 3 3 3 3 3 3 3 3 3
</PRE><P>
______________________________________________________
2156||||||false||||||
<P>Building the GSM network is a&nbsp;very expensive and complex task. Moreover, after the <EM>Base Transceiver Stations</EM> (<EM>BTS</EM>) are built and working, we need to perform many various measurements to determine the state of the network, and propose effective improvements to be made.<P>The ACM technicians have a&nbsp;special equipment for measuring the strength of electro-magnetic fields, the transceivers' power and quality of the signal. This equipment is packed into a&nbsp;huge knapsack and the technician must move with it from one BTS to another. Unfortunately, the knapsack have not enough memory for storing all of the measured values. It has a&nbsp;small cache only, that can store values for several seconds. Then the values must be transmitted to the BTS by an&nbsp;infrared connection (IRDA). The IRDA needs direct visibility between the technician and the BTS.<P>Your task is to find the path between two neighbouring BTSes such that at least one of those BTSes is always visible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is a&nbsp;single positive integer <VAR>T</VAR> on the first line of input. It stands for the number of test cases to follow. Each test case consists of a&nbsp;town description. For simplicity, a&nbsp;town is modelled as a&nbsp;rectangular grid of <VAR>P x Q</VAR> square fields. Each field is exactly 1&nbsp;metre wide. For each field, a&nbsp;non-negative integer <VAR>Z</VAR><SUB><VAR>i</VAR>,<VAR>j</VAR></SUB> is given, representing the height of the terrain in that place, in metres. That means the town model is made of cubes, each of them being either solid or empty. There are no "half solid" cubes.<P>The first line of each test case contains two integer numbers <VAR>P</VAR> and <VAR>Q</VAR>, separated by a&nbsp;single space, 1 &lt;= <VAR>P</VAR>,<VAR>Q</VAR> &lt;= 200. Then there are <VAR>P</VAR> lines each containing <VAR>Q</VAR> integer numbers separated by a&nbsp;space. These numbers are <VAR>Z</VAR><SUB><VAR>i</VAR>,<VAR>j</VAR></SUB>, where 1 &lt;= <VAR>i</VAR> &lt;= <VAR>P</VAR>, 1 &lt;= <VAR>j</VAR> &lt;= <VAR>Q</VAR> and 0 &lt;= <VAR>Z</VAR><SUB><VAR>i</VAR>,<VAR>j</VAR></SUB> &lt;= 5000. After the terrain description, there are four numbers <VAR>R</VAR><SUB>1</SUB>, <VAR>C</VAR><SUB>1</SUB>, <VAR>R</VAR><SUB>2</SUB>, <VAR>C</VAR><SUB>2</SUB> on the last line of each test case. These numbers represent position of two BTSes, 1 &lt;= <VAR>R</VAR><SUB>1</SUB>,<VAR>R</VAR><SUB>2</SUB> &lt;= <VAR>P</VAR>, 1 &lt;= <VAR>C</VAR><SUB>1</SUB>,<VAR>C</VAR><SUB>2</SUB> &lt;= <VAR>Q</VAR>. The first coordinate (<VAR>R</VAR>) determines the row of the town, the second coordinate determines the column.<P>The technician is moving in steps (<EM>steps</EM> stands for <EM>Standard Technician's Elementary Positional Shift</EM>). Each step is made between two neighbouring square fields. That means the step is always in North, South, West or East direction. It is not possible to move diagonally. The step between two fields <VAR>A</VAR> and <VAR>B</VAR> (step from <VAR>A</VAR> to <VAR>B</VAR>) is allowed only if the height of the terrain in the field <VAR>B</VAR> is not very different from the height in the field <VAR>A</VAR>. The technician can climb at most 1&nbsp;metre up or descend at most 3&nbsp;metres down in a&nbsp;single step.<P>At the end of each step, at least one of the two BTSes must be visible. However, there can be some point "in the middle of the step" where no BTS is visible. This is OK and the data is handled by the cache. The BTS is considered visible, if there is a&nbsp;direct visibility between the unit cube just above the terrain on the BTSes coordinates and the cube just above the terrain on the square field, where the technician is. Direct visibility between two cubes means that the line connecting the centres of the two cubes does not intersect any solid cube. However, the line can touch any number of solid cubes. In other words, consider both the BTS and the technician being points exactly half metre above the surface and in the centre of the appropriate square field.<P>Note that the IRDA beam can go between two cubes that touch each other by their edge, although there is no space between them. It is because such a&nbsp;beam touches both of these two cubes but does not intersect any of them. See the last test case of the sample input for an&nbsp;example of such a&nbsp;situation.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>You are to find the shortest possible path meeting the above criteria. All steps must be done between neighbouring fields, the terrain must not elevate or descend too much, and at the end of each step, at least one BTS must be visible.<P>For each test case, print one line containing the sentence <TT>The shortest path is </TT><VAR>M</VAR><TT> steps long.</TT>, where <VAR>M</VAR> is the number of steps that must be made. If there is no such path, output the sentence <TT>Mission impossible!</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
5 5
8 7 6 5 4
2 2 2 2 2
2 2 2 2 2
2 2 2 2 2
2 2 2 2 2
1 1 5 1
5 8
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
9 9 9 9 9 9 9 2
2 2 2 2 2 2 2 2
1 2 5 1
5 8
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
9 9 9 9 9 9 9 2
2 2 2 2 2 2 2 2
1 5 5 1
6 12
5 5 5 5 1 5 5 5 5 5 5 5
5 5 5 5 1 5 5 5 5 5 5 5
5 5 5 5 9 5 5 5 5 5 5 5
5 9 1 5 5 5 5 5 5 5 5 5
5 5 9 5 5 5 5 5 5 5 5 5
5 5 9 5 5 5 5 5 5 5 5 5
6 1 3 12
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
The shortest path is 10 steps long.
Mission impossible!
The shortest path is 14 steps long.
The shortest path is 18 steps long.
</PRE><P>
______________________________________________________
2157||||||false||||||
      <P>The most important activity of ACM is the GSM network. As the mobile 
      phone operator, ACM must build its own transmitting stations. It is very 
      important to compute the exact behaviour of electro-magnetic waves. 
      Unfortunately, prediction of electro-magnetic fields is a&nbsp;very 
      complex task and the formulas describing them are very long and 
      hard-to-read. For example, below are the Maxwell's Equations describing 
      the basic laws of electrical engineering.
<p>
      <TABLE>
        <TBODY>
        <TR>
          <TD>
          <IMG height=18 src="http://livearchive.onlinejudge.org/external/21/p2157a.gif width=51 align=bottom 
            border=0> </TD>
          <TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </TD>
          <TD>
          <IMG height=34 src="http://livearchive.onlinejudge.org/external/21/p2157a.gif width=57 align=middle 
            border=0> </TD></TR>
        <TR>
          <TD>
          <IMG height=37 src="http://livearchive.onlinejudge.org/external/21/p2157a.gif width=97 align=middle 
            border=0> </TD>
          <TD></TD>
          <TD>
          <IMG height=37 src="http://livearchive.onlinejudge.org/external/21/p2157a.gif width=82 align=middle 
            border=0> </TD></TR></TBODY></TABLE>
<p>ACM has designed its own computer 
      system that can make some field computations and produce results in the 
      form of mathematic expressions. Unfortunately, by generating the 
      expression in several steps, there are always some unneeded parentheses 
      inside the expression. Your task is to take these partial results and make 
      them "nice" by removing all unnecessary parentheses. </p>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

      <P>There is a&nbsp;single positive integer <VAR>T</VAR> on the first line 
      of input. It stands for the number of expressions to follow. Each 
      expression consists of a&nbsp;single line containing only lowercase 
      letters, operators (<TT>+</TT>, <TT>-</TT>, <TT>*</TT>, <TT>/</TT>) and 
      parentheses (<TT>(</TT> and <TT>)</TT>). The letters are variables that 
      can have any value, operators and parentheses have their usual meaning. 
      Multiplication and division have higher priority then subtraction and 
      addition. All operations with the same priority are computed from left to 
      right (operators are left-associative). There are no spaces inside the 
      expressions. No input line contains more than 250 characters. 





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

      <P>Print a&nbsp;single line for every expression. The line must contain 
      the same expression with unneeded parentheses removed. You must remove as 
      many parentheses as possible without changing the semantics of the 
      expression. The semantics of the expression is considered the same if and 
      only if any of the following conditions hold: 
      <UL>
        <LI>The ordering of operations remains the same. That means 
        "(<VAR>a</VAR>+<VAR>b</VAR>)+<VAR>c</VAR>" is the same as 
        "<VAR>a</VAR>+<VAR>b</VAR>+<VAR>c</VAR>", and 
        "<VAR>a</VAR>+(<VAR>b</VAR>/<VAR>c</VAR>)" is the same as 
        "<VAR>a</VAR>+<VAR>b</VAR>/<VAR>c</VAR>". 
        <LI>The order of some operations is swapped but the result remains 
        unchanged with respect to the addition and multiplication associativity. 
        That means "<VAR>a</VAR>+(<VAR>b</VAR>+<VAR>c</VAR>)" and 
        "(<VAR>a</VAR>+<VAR>b</VAR>)+<VAR>c</VAR>" are the same. We can also 
        combine addition with subtraction and multiplication with division, if 
        the subtraction or division is the second operation. For example, 
        "<VAR>a</VAR>+(<VAR>b</VAR>-<VAR>c</VAR>)" is the same as 
        "<VAR>a</VAR>+<VAR>b</VAR>-<VAR>c</VAR>". </LI></UL>
      <P>You cannot use any other laws, namely you cannot swap left and right 
      operands and you cannot replace "<VAR>a</VAR>-(<VAR>b</VAR>-<VAR>c</VAR>)" 
      with "<VAR>a</VAR>-<VAR>b</VAR>+<VAR>c</VAR>". 



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
8
(a+(b*c))
((a+b)*c)
(a*(b*c))
(a*(b/c)*d)
((a/(b/c))/d)
((x))
(a+b)-(c-d)-(e/f)
(a+b)+(c-d)-(e+f)
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
a+b*c
(a+b)*c
a*b*c
a*b/c*d
a/(b/c)/d
x
a+b-(c-d)-e/f
a+b+c-d-(e+f)
</PRE>

<P>

______________________________________________________
2158||||||false||||||
<P>The most important part of a&nbsp;GSM network is so called <EM>Base Transceiver Station</EM> (<EM>BTS</EM>). These transceivers form the areas called <EM>cells</EM> (this term gave the name to the cellular phone) and every phone connects to the BTS with the strongest signal (in a&nbsp;little simplified view). Of course, BTSes need some attention and technicians need to check their function periodically.<P>ACM technicians faced a&nbsp;very interesting problem recently. Given a&nbsp;set of BTSes to visit, they needed to find the shortest path to visit all of the given points and return back to the central company building. Programmers have spent several months studying this problem but with no results. They were unable to find the solution fast enough. After a&nbsp;long time, one of the programmers found this problem in a&nbsp;conference article. Unfortunately, he found that the problem is so called "Travelling Salesman Problem" and it is very hard to solve. If we have <VAR>N</VAR> BTSes to be visited, we can visit them in any order, giving us <VAR>N</VAR>! possibilities to examine. The function expressing that number is called factorial and can be computed as a&nbsp;product 1.2.3.4....<VAR>N</VAR>. The number is very high even for a&nbsp;relatively small <VAR>N</VAR>.<P>The programmers understood they had no chance to solve the problem. But because they have already received the research grant from the government, they needed to continue with their studies and produce at least <EM>some</EM> results. So they started to study behaviour of the factorial function.<P>For example, they defined the function <VAR>Z</VAR>. For any positive integer <VAR>N</VAR>, <VAR>Z</VAR>(<VAR>N</VAR>) is the number of zeros at the end of the decimal form of number <VAR>N</VAR>!. They noticed that this function never decreases. If we have two numbers <VAR>N</VAR><SUB>1</SUB>&lt;<VAR>N</VAR><SUB>2</SUB>, then <VAR>Z</VAR>(<VAR>N</VAR><SUB>1</SUB>) &lt;= <VAR>Z</VAR>(<VAR>N</VAR><SUB>2</SUB>). It is because we can never "lose" any trailing zero by multiplying by any positive number. We can only get new and new zeros. The function <VAR>Z</VAR> is very interesting, so we need a&nbsp;computer program that can determine its value efficiently.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is a&nbsp;single positive integer <VAR>T</VAR> on the first line of input. It stands for the number of numbers to follow. Then there is <VAR>T</VAR> lines, each containing exactly one positive integer number <VAR>N</VAR>, 1 &lt;= <VAR>N</VAR> &lt;= 1000000000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For every number <VAR>N</VAR>, output a&nbsp;single line containing the single non-negative integer <VAR>Z</VAR>(<VAR>N</VAR>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
6
3
60
100
1024
23456
8735373
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0
14
24
253
5861
2183837
</PRE><P>
______________________________________________________
2159||||||false||||||
<P>If you want to buy a&nbsp;new cellular phone, there are many various types to choose from. To decide which one is the best for you, you have to consider several important things: its size and weight, battery capacity, WAP support, colour, price. One of the most important things is also the list of games the phone provides. Nokia is one of the most successful phone makers because of its famous Snake and Snake&nbsp;II. ACM wants to make and sell its own phone and they need to program several games for it. One of them is Master-Mind, the famous board logical game.<P>The game is played between two players. One of them chooses a&nbsp;<EM>secret code</EM> consisting of <VAR>P</VAR>&nbsp;ordered pins, each of them having one of the predefined set of <VAR>C</VAR>&nbsp;colours. The goal of the second player is to guess that secret sequence of colours. Some colours may not appear in the code, some colours may appear more than once.<P>The player makes guesses, which are formed in the same way as the secret code. After each guess, he/she is provided with an&nbsp;information on how successful the guess was. This feedback is called a&nbsp;<EM>hint</EM>. Each hint consists of <VAR>B</VAR> black points and <VAR>W</VAR> white points. The black point stands for every pin that was guessed right, i.e. the right colour was put on the right position. The white point means right colour but on the wrong position. For example, if the secret code is "white, yellow, red, blue, white" and the guess was "white, red, white, white, blue", the hint would consist of one black point (for the white on the first position) and three white points (for the other white, red and blue colours). The goal is to guess the sequence with the minimal number of hints.<P>The new ACM phone should have the possibility to play both roles. It can make the secret code and give hints, but it can also make its own guesses. Your goal is to write a&nbsp;program for the latter case, that means a&nbsp;program that makes Master-Mind guesses.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is a&nbsp;single positive integer <VAR>T</VAR> on the first line of input. It stands for the number of test cases to follow. Each test case describes one game situation and you are to make a&nbsp;guess. On the first line of each test case, there are three integer numbers, <VAR>P</VAR>, <VAR>C</VAR> and <VAR>M</VAR>. <VAR>P</VAR> ( 1 &lt;= <VAR>P</VAR> &lt;= 10) is the number of pins, <VAR>C</VAR> (1 &lt;= <VAR>C</VAR> &lt;= 100) is the number of colours, and <VAR>M</VAR> (1 &lt;= <VAR>M</VAR> &lt;= 100) is the number of already played guesses.<P>Then there are 2 <VAR>x M</VAR> lines, two lines for every guess. At the first line of each guess, there are <VAR>P</VAR> integer numbers representing colours of the guess. Each colour is represented by a&nbsp;number <VAR>G</VAR><SUB><VAR>i</VAR></SUB>, 1 &lt;= <VAR>G</VAR><SUB><VAR>i</VAR></SUB> &lt;= <VAR>C</VAR>. The second line contains two integer numbers, <VAR>B</VAR> and <VAR>W</VAR>, stating for the number of black and white points given by the corresponding hint.<P>Let's have a&nbsp;secret code <VAR>S</VAR><SUB>1</SUB>, <VAR>S</VAR><SUB>2</SUB>, ... <VAR>S</VAR><SUB><VAR>P</VAR></SUB> and the guess <VAR>G</VAR><SUB>1</SUB>, <VAR>G</VAR><SUB>2</SUB>, ... <VAR>G</VAR><SUB><VAR>P</VAR></SUB>. Then we can make a&nbsp;set <VAR>H</VAR> containing pairs of numbers (<VAR>I</VAR>,<VAR>J</VAR>) such that <VAR>S</VAR><SUB><VAR>I</VAR></SUB> = <VAR>G</VAR><SUB><VAR>J</VAR></SUB>, and that any number can appear at most once on the first position and at most once on the second position. That means for every two different pairs from that set, (<VAR>I</VAR><SUB>1</SUB>,<VAR>J</VAR><SUB>1</SUB>) and (<VAR>I</VAR><SUB>2</SUB>,<VAR>J</VAR><SUB>2</SUB>), we have <VAR>I</VAR><SUB>1</SUB> &lt;&gt; <VAR>I</VAR><SUB>2</SUB> and <VAR>J</VAR><SUB>1</SUB> &lt;&gt; <VAR>J</VAR><SUB>2</SUB>. Then we denote <VAR>B</VAR>(<VAR>H</VAR>) the number of pairs in the set, that meet the condition <VAR>I</VAR> = <VAR>J</VAR>, and <VAR>W</VAR>(<VAR>H</VAR>) the number of pairs with <VAR>I</VAR> &lt;&gt; <VAR>J</VAR>.<P>We define an&nbsp;ordering of every two possible sets <VAR>H</VAR><SUB>1</SUB> and <VAR>H</VAR><SUB>2</SUB>. Let's say <VAR>H</VAR><SUB>1</SUB> &lt;= <VAR>H</VAR><SUB>2</SUB> if and only if one of the following holds:<UL><LI><VAR>B</VAR>(<VAR>H</VAR><SUB>1</SUB>) &lt; <VAR>B</VAR>(<VAR>H</VAR><SUB>2</SUB>), or <LI><VAR>B</VAR>(<VAR>H</VAR><SUB>1</SUB>) = <VAR>B</VAR>(<VAR>H</VAR><SUB>2</SUB>) and <VAR>W</VAR>(<VAR>H</VAR><SUB>1</SUB>) &lt;= <VAR>W</VAR>(<VAR>H</VAR><SUB>2</SUB>)</LI></UL><p>Then we can find a&nbsp;maximal set <VAR>H</VAR><SUB><VAR>max</VAR></SUB> according to this ordering. The numbers <VAR>B</VAR>(<VAR>H</VAR><SUB><VAR>max</VAR></SUB>) and <VAR>W</VAR>(<VAR>H</VAR><SUB><VAR>max</VAR></SUB>) are the black and white points for that hint.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For every test case, print the line containing <VAR>P</VAR> numbers representing <VAR>P</VAR> colours of the next guess. Your guess must be valid according to all previous guesses and hints. The guess is valid if the sequence could be a&nbsp;secret code, i.e. the sequence was not eliminated by previous guesses and hints.<P>If there is no valid guess possible, output the sentence <TT>You are cheating!</TT>. If there are more valid guesses, output the one that is lexicographically smallest. I.e. find such guess <VAR>G</VAR> that for every other valid guess <VAR>V</VAR> there exists such a&nbsp;number <VAR>I</VAR> that:<UL><LI><VAR>G</VAR><SUB><VAR>J</VAR></SUB> = <VAR>V</VAR><SUB><VAR>J</VAR></SUB> for every <VAR>J</VAR>&lt;<VAR>I</VAR>, and <LI><VAR>G</VAR><SUB><VAR>I</VAR></SUB>&lt;<VAR>V</VAR><SUB><VAR>I</VAR></SUB>. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
4 3 2
1 2 3 2
1 1
2 1 3 2
1 1
4 6 2
3 3 3 3
3 0
4 4 4 4
2 0
8 9 3
1 2 3 4 5 6 7 8
0 0
2 3 4 5 6 7 8 9
1 0
3 4 5 6 7 8 9 9
2 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1 1 1 3
You are cheating!
9 9 9 9 9 9 9 9
</PRE><P>
______________________________________________________
2160||||||false||||||
      <P>Every customer sometimes needs help with new and unusual products. 
      Therefore, hotline service is very important for every company. We need 
      a&nbsp;single phone number where the customer can always find 
      a&nbsp;friendly voice ready to help with anything. On the other hand, many 
      people are needed to serve as hotline operators, and human resources are 
      always very expensive. Moreover, it is not easy to pretend "friendly 
      voice" at 4am and explain to a&nbsp;drunken man that you are really unable 
      to give him the number to House of Parliament. It was also found that some 
      of the questions repeat very often and it is very annoying to answer them 
      again and again. 
      <P>ACM is a&nbsp;modern company, wanting to solve its hotline problem. 
      They want to decrease the number of human operators by creating 
      a&nbsp;complex software system that would be able to answer most common 
      questions. The customer's voice is analysed by a&nbsp;special Voice 
      Recognition Module (VRM) and converted to a&nbsp;plain text. The text is 
      then taken by an Artificial Automatic Adaptive Answering Algorithm 
      (AAAAA). The most common questions are recognised and answered 
      automatically. The replies are then converted to a&nbsp;sound by 
      Text-to-Speech Module (TTS). 
      <P>You are to write the AAAAA module. Because your algorithm should be 
      adaptive, it has no explicit knowledge base. But it must be able to listen 
      to sentences in English and remember the mentioned facts. Whenever the 
      question is asked about such a&nbsp;fact, the system has to answer it 
      properly. The VRM and TTS modules are already implemented, so the input 
      and output of AAAAA will be in the text form. 



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


      <P>There is a&nbsp;single positive integer <VAR>T</VAR> on the first line 
      of input. It stands for the number of dialogues to follow. Each dialogue 
      consists of zero or more lines, each of them containing one sentence: 
      either statement or question. The statement ends with a&nbsp;dot character 
      (<TT>.</TT>), the question ends with a&nbsp;question mark (<TT>?</TT>). No 
      statement will appear more than once, however the questions can be 
      repeated. There is one extra line after each dialogue. That line ends with 
      an&nbsp;exclamation mark (<TT>!</TT>). 
      <P>Sentences can contain words, spaces and punctuation characters (such as 
      commas, colons, semicolons etc.). All words contain only letters of 
      English alphabet and are case-sensitive. That means the same word is 
      always written the same way, usually in lowercase. Acronyms, names and 
      some other words can begin with capital letters. For simplicity, all 
      sentences begin with a&nbsp;lowercase letter. Only if the first word 
      should be written with a&nbsp;capital, the sentence begins with 
      a&nbsp;capital letter. There are no unneeded spaces between words. No line 
      will have more than 100 characters. There will be at most 100 statements 
      per each test case. 
      <P>
      <H3>Statements</H3>
      <P>Each statement has one of the following two forms ( 
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> denotes a&nbsp;space): <BR><I>subject</I>
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>predicate</I>[<TT>s</TT>] [
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>object</I>] <TT>.</TT>
      <BR><I>subject</I> 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <TT>don't</TT>|<TT>doesn't</TT> 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>predicate</I> [ 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>object</I>]
      <TT>.</TT> 
      <P>The square brackets mark an&nbsp;optional part, the vertical line two 
      possible variants. Subject is a&nbsp;single word, noun or pronoun in 
      singular. Predicate is a&nbsp;verb (single word) denoting some activity. 
      Object can be any text. Object does not contain any dots. Any pair "verb + 
      object" determines unique activity. The same verb with different objects 
      makes different independent activities, i.e. the different and independent 
      meaning of the sentence. Sentence without any object can be considered as 
      sentence with an&nbsp;empty object. The verb without an&nbsp;object has 
      different and independent meaning than the same verb with any non-empty 
      object. 
      <P>The first variant of sentence denotes a&nbsp;positive statement. The 
      word "<I>predicate</I>[<TT>s</TT>]" means verb that matches the subject of 
      the sentence. If the subject is "<TT>I</TT>" or "<TT>you</TT>", the verb 
      has the same form as the infinitive. With any other subject, the letter 
      "<TT>s</TT>" is appended on the end of the verb. Assume there are no 
      irregular verbs. 
      <P>The second variant is a&nbsp;negative statement. Verb "<TT>don't</TT>" 
      or "<TT>doesn't</TT>" must also match the subject. The form 
      "<TT>don't</TT>" is used with either "<TT>I</TT>" or "<TT>you</TT>", 
      "<TT>doesn't</TT>" is used in any other case. 
      <P>A&nbsp;special generic subject "<TT>everybody</TT>" can be used. It 
      means the activity holds for any subject. Other special subject is 
      "<TT>nobody</TT>". Such sentence also holds for any subject, but its 
      meaning is negative. Both of these generic subjects can be used with the 
      first variant only (without "<TT>doesn't</TT>"). The sentence "<TT>nobody 
      likes something</TT>" is exactly equal to "<TT>everybody doesn't like 
      something</TT>", except the latter form will never occur in the input. 
      <P>
      <H3>Questions</H3>
      <P>Each question has one of the following three forms: 
      <DL compact>
        <DT>1. 
        <DD><TT>do</TT>|<TT>does</TT> 
		<IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
        <I>subject</I> 
		<IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>predicate</I> [
		<IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> object] <TT>?</TT>
        <DT>2. 
        <DD><TT>who</TT> 
		<IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
        <I>predicate</I><TT>s</TT> [ 
		<IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
        <I>object</I>] <TT>?</TT> 
        <DT>3. 
        <DD><TT>what</TT> 
		<IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
        <TT>do</TT>|<TT>does</TT> 
		<IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
        <I>subject</I> <TT>do</TT> <TT>?</TT> </DD></DL>
      <P>The word "<TT>do</TT>|<TT>does</TT>" always matches the subject 
      ("<TT>do I?</TT>", "<TT>do you?</TT>", "<TT>does</TT> any other 
      subject?"). In the second type of question, predicate always matches the 
      word "<TT>who</TT>", i.e. the "<TT>s</TT>" is always appended. Generic 
      subjects cannot be used in questions. 




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

      <P>For each dialogue, your program must output the line <TT>Dialogue 
      #</TT><VAR>D</VAR><TT>:</TT>, where <VAR>D</VAR> is the sequence number of 
      dialogue, starting with 1. Then print exactly three lines for every 
      question: the first line repeats the question, the second line contains 
      the answer, and the third line is empty. Print nothing for statements. 
      After each dialogue, print the same line with an&nbsp;exclamation mark 
      that was in the input. Then print one extra empty line. Empty line 
      contains a&nbsp;new-line character only. 
      <P>The answer must be properly formated to be accepted by a&nbsp;TTS 
      module. Only the statements appearing in the input before the answer are 
      used for the corresponding reply. If there is any contradiction among 
      statements, the reply is always <TT>I am abroad.</TT>. If the question and 
      statements consider the special subject "<TT>you</TT>", it must be 
      replaced with "<TT>I</TT>" in the answer. If the question considers 
      special subject "<TT>I</TT>", it must be replaced with "<TT>you</TT>" in 
      the answer. The verb must always match the subject of the sentence. The 
      exact form of the correct answer depends on the type of question. 
      <P>
      <H3>1.&nbsp;does subject predicate [object] ?</H3>
      <P>If there is any positive statement about the mentioned subject (or 
      generic subject "<TT>everybody</TT>"), predicate and object, the answer 
      is: <BR><TT>yes,</TT> 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>subject</I>
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>predicate</I>[<TT>s</TT>] [
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>object</I>] <TT>.</TT>
      <P>If there is any negative statement about the mentioned subject (or 
      generic subject "<TT>nobody</TT>"), predicate and object, the answer is: 
      <BR><TT>no,</TT> 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>subject</I>
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <TT>don't</TT>|<TT>doesn't</TT>
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>predicate</I> [
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>object</I>] <TT>.</TT>
      <P>Otherwise, the answer is: <TT>maybe.</TT> 
      <P>Subject in the answer is always the same subject as the subject of the 
      question. 
      <P>
      <H3>2.&nbsp;who predicates [object] ?</H3>
      <P>If there is a&nbsp;positive statement considering any subject, the 
      specified predicate and object, the answer is: <BR><I>subject</I> 
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>predicate</I>[<TT>s</TT>] [
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>object</I>] <TT>.</TT>
      <P>If two or more subjects match the activity, replace the subject in the 
      answer with enumeration of all such subjects, in the same order as the 
      corresponding statements have appeared in the input. Subjects are 
      separated with comma and space, last two subjects are separated with the 
      word "<TT>and</TT>". If "<TT>everybody</TT>" belongs to the group of 
      enumerated subjects, do not enumerate subjects, and print 
      "<TT>everybody</TT>" only. If the enumeration contains at least two 
      subjects, the predicate matches the plural subject (i.e. verb is without 
      trailing "<TT>s</TT>"), otherwise it matches the only subject. 
      <BR><I>subject1</I> <TT>,</TT> 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
	  <I>subject2</I> <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <TT>and</TT>
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>subject3</I> <I>predicate</I> [
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>object</I>] <TT>.</TT>
      <P>If there is a&nbsp;negative statement considering the generic subject 
      "nobody", the specified predicate and object, the answer is: 
      <BR><I>nobody</I> 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>predicate</I><TT>s</TT> [ 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>object</I>] <TT>.</TT> 
      <P>Otherwise, the answer is: <TT>I don't know.</TT> 
      <P>
      <H3>3.&nbsp;what does subject do ?</H3>
      <P>If there are one or more sentences (both positive and negative) 
      considering the specified subject (or a&nbsp;generic subject 
      "<TT>everybody</TT>" or "<TT>nobody</TT>"), all verbs and objects from 
      such sentences must be included in a&nbsp;reply in the same order as the 
      corresponding sentences have appeared in the input. No verb-object pair 
      can be included more than once (the eventual second appearance must be 
      skipped). The verb-object pairs are separated by a&nbsp;comma followed by 
      a&nbsp;space, the last verb is separated by a&nbsp;comma and the word 
      "<TT>and</TT>". Please note the comma is printed here although there was 
      no comma when separating the subjects in the previous type of answer (see 
      above). The negative answers have the same form as the statements, that 
      means the verb "<TT>don't</TT>" or "<TT>doesn't</TT>" is used: 
      <BR><I>subject</I> [ 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <TT>don't</TT>|<TT>doesn't</TT>] 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>predicate1</I>[<TT>s</TT>] [ 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>object1</I>] <TT>,</TT> <BR>[ 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <TT>don't</TT>|<TT>doesn't</TT>] 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>predicate2</I>[<TT>s</TT>] [ 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>object2</I>] <TT>,</TT> <BR>
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
	  <TT>and</TT> [ <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <TT>don't</TT>|<TT>doesn't</TT>] 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>predicate3</I>[<TT>s</TT>] [ 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>object3</I>] <TT>.</TT> <BR><I>subject</I> [ 
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <TT>don't</TT>|<TT>doesn't</TT>]
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>predicate1</I>[<TT>s</TT>] [
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>object1</I>] <TT>,</TT> <BR>
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <TT>and</TT> [
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <TT>don't</TT>|<TT>doesn't</TT>]
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>predicate2</I>[<TT>s</TT>] [
      <IMG 
	  src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6"> <I>object2</I>] <TT>.</TT>
      <BR><I>subject</I> [ 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <TT>don't</TT>|<TT>doesn't</TT>] 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>predicate</I>[<TT>s</TT>] [ 
	  <IMG src="http://livearchive.onlinejudge.org/external/21/p2160.gif width="12" height="6">
      <I>object</I>] <TT>.</TT> 
      <P>Otherwise, the answer is: <TT>I don't know.</TT> 



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
I like hotdogs.
nobody likes to work.
everybody smiles.
what do I do?
who smiles?
what do you do?
does Joe smile?
do I like to work?
everybody hurts sometimes.
who walks there?
Michal walks there.
who walks there?
what does Michal do?
do you understand?
nobody walks there.
do you understand now?
bye!
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Dialogue #1:
what do I do?
you like hotdogs, don't like to work, and smile.

who smiles?
everybody smiles.

what do you do?
I don't like to work, and smile.

does Joe smile?
yes, Joe smiles.

do I like to work?
no, you don't like to work.

who walks there?
I don't know.

who walks there?
Michal walks there.

what does Michal do?
Michal doesn't like to work, smiles, hurts sometimes, and walks there.

do you understand?
maybe.

do you understand now?
I am abroad.

bye!
</PRE>

<P>

______________________________________________________
2161||||||false||||||
<P>Most of you have probably tried to type an&nbsp;SMS message on the keypad of a&nbsp;cellular phone. It is sometimes very annoying to write longer messages, because one key must be usually pressed several times to produce a&nbsp;single letter. It is due to a&nbsp;low number of keys on the keypad. Typical phone has twelve keys only (and maybe some other control keys that are not used for typing). Moreover, only eight keys are used for typing 26&nbsp;letters of an&nbsp;English alphabet. The standard assignment of letters on the keypad is shown in the left picture:<P align=center><img src=p2161a.gif><P>There are 3 or 4 letters assigned to each key. If you want the first letter of any group, you press that key once. If you want the second letter, you have to press the key twice. For other letters, the key must be pressed three or four times. The authors of the keyboard did not try to optimise the layout for minimal number of keystrokes. Instead, they preferred the even distribution of letters among the keys. Unfortunately, some letters are more frequent than others. Some of these frequent letters are placed on the third or even fourth place on the standard keyboard. For example, <TT>S</TT> is a&nbsp;very common letter in an&nbsp;English alphabet, and we need four keystrokes to type it. If the assignment of characters was like in the right picture, the keyboard would be much more comfortable for typing average English texts.<P>ACM have decided to put an&nbsp;optimised version of the keyboard on its new cellular phone. Now they need a&nbsp;computer program that will find an&nbsp;optimal layout for the given letter frequency. We need to preserve alphabetical order of letters, because the user would be confused if the letters were mixed. But we can assign any number of letters to a&nbsp;single key.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is a&nbsp;single positive integer <VAR>T</VAR> on the first line of input. It stands for the number of test cases to follow. Each test case begins with a&nbsp;line containing two integers <VAR>K</VAR>, <VAR>L</VAR> (1 &lt;= <VAR>K</VAR> &lt;= <VAR>L</VAR> &lt;= 90) separated by a&nbsp;single space. <VAR>K</VAR> is the number of keys, <VAR>L</VAR> is the number of letters to be mapped onto those keys. Then there are two lines. The first one contains exactly <VAR>K</VAR> characters each representing a&nbsp;name of one key. The second line contains exactly <VAR>L</VAR> characters representing names of letters of an&nbsp;alphabet. Keys and letters are represented by digits, letters (which are case-sensitive), or any punctuation characters (ASCII code between 33 and 126 inclusively). No two keys have the same character, no two letters are the same. However, the name of a&nbsp;letter can be used also as a&nbsp;name for a&nbsp;key.<P>After those two lines, there are exactly <VAR>L</VAR> lines each containing exactly one positive integer <VAR>F</VAR><SUB>1</SUB>, <VAR>F</VAR><SUB>2</SUB>, ... <VAR>F</VAR><SUB><VAR>L</VAR></SUB>. These numbers determine the frequency of every letter, starting with the first one and continuing with the others sequentially. The higher number means the more common letter. No frequency will be higher than 100000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Find an&nbsp;optimal keyboard for each test case. Optimal keyboard is such that has the lowest "price" for typing average text. The <EM>price</EM> is determined as the sum of the prices of each letter. The price of a&nbsp;letter is a&nbsp;product of the&nbsp;letter frequency (<VAR>F</VAR><SUB><VAR>i</VAR></SUB>) and its position on the key. The order of letters cannot be changed, they must be grouped in the given order.<P>If there are more solutions with the same price, we will try to maximise the number of letters assigned to the last key, then to the one before the last one etc.<P>More formally, you are to find a&nbsp;sequence <VAR>P</VAR><SUB>1</SUB>, <VAR>P</VAR><SUB>2</SUB>, ... <VAR>P</VAR><SUB><VAR>L</VAR></SUB> representing the position of every letter on a&nbsp;particular key. The sequence must meet following conditions:<UL><LI><VAR>P</VAR><SUB>1</SUB> = 1 <LI>for each <VAR>i</VAR>&gt;1, either <VAR>P</VAR><SUB><VAR>i</VAR></SUB> = <VAR>P</VAR><SUB><VAR>i</VAR>-1</SUB>+1 or <VAR>P</VAR><SUB><VAR>i</VAR></SUB> = 1 <LI>there are at most <VAR>K</VAR> numbers <VAR>P</VAR><SUB><VAR>i</VAR></SUB> such that <VAR>P</VAR><SUB><VAR>i</VAR></SUB> = 1 <LI>the sum of products <VAR>S</VAR><SUB><VAR>P</VAR></SUB> = <IMG height=30 src="http://livearchive.onlinejudge.org/external/21/p2161.gif width=32 align=middle border=0> <VAR>F</VAR><SUB><VAR>i</VAR></SUB>.<VAR>P</VAR><SUB><VAR>i</VAR></SUB> is minimal <LI>for any other sequence <VAR>Q</VAR> meeting these criteria and with the same sum <VAR>S</VAR><SUB><VAR>Q</VAR></SUB> = <VAR>S</VAR><SUB><VAR>P</VAR></SUB>, there exists such <VAR>M</VAR>, 1 &lt;= <VAR>M</VAR> &lt;= <VAR>L</VAR> that for any <VAR>J</VAR>, <VAR>M</VAR>&lt;<VAR>J</VAR> &lt;= <VAR>L</VAR>, <VAR>P</VAR><SUB><VAR>J</VAR></SUB> = <VAR>Q</VAR><SUB><VAR>J</VAR></SUB>, and <VAR>P</VAR><SUB><VAR>M</VAR></SUB>&gt;<VAR>Q</VAR><SUB><VAR>M</VAR></SUB>. </LI></UL><P>The output for every test case must start with a&nbsp;single line saying <TT>Keypad #</TT><VAR>I</VAR><TT>:</TT>, where <VAR>I</VAR> is a&nbsp;sequential order of the test case, starting with 1. Then there must be exactly <VAR>K</VAR> lines, each representing one letter, in the same order that was used in input. Each line must contain the character representing the key, a&nbsp;colon, one space and a&nbsp;list of letters assigned to that particular key. Letters are not separated from each other.<P>Print one blank line after each test case, including the last one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
8 26
23456789
ABCDEFGHIJKLMNOPQRSTUVWXYZ
3371
589
1575
1614
6212
971
773
1904
2989
123
209
1588
1513
2996
3269
1080
121
2726
3083
4368
1334
518
752
427
733
871
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Keypad #1:
2: ABCD
3: EFG
4: HIJK
5: LM
6: NOPQ
7: RS
8: TUV
9: WXYZ
</PRE><P>
______________________________________________________
2162||||||false||||||
<p>A Strange Tree (S-tree) over the variable set X<sub>n</sub>={x<sub>1</sub>, ..., x<sub>n</sub>} is a complete binary tree representing a Boolean function f: {0,1}^n -> {0,1}. Each of the S-tree's nodes has a depth, defined as the number of nodes in the path from the root to itself minus 1 (so the root has depth 0). The depth of any node in an S-tree is at most n. The nodes with depth less than n are called non-terminal nodes, each having two children: the right child and the left child. Each non-terminal node is labeled with some variable x<sub>i</sub> from the variable set X<sub>n</sub>. All non-terminal nodes with the same depth are labeled with the same variable, and non-terminal nodes with different depth are labeled with different variables. So, there is a unique variable x<sub>i0</sub> corresponding to the root, a unique variable x<sub>i1</sub> corresponding to the nodes with depth 1, and so on. The sequence of the variables x<sub>i0</sub>, x<sub>i1</sub>, ..., x<sub>in-1 </sub>is called the variable ordering. The nodes having depth n are called terminal nodes. They have no children and are labeled with either 0 or 1. Note that the variable ordering and the distribution of 0's and 1's on terminal nodes are sufficient to completely describe an S-tree.</p><p>As stated earlier, each S-tree represents a Boolean function f. If you have an S-tree and values for the variables x<sub>1</sub>, ..., x<sub>n</sub>, then it is quite simple to evaluate f(x<sub>1</sub>, ..., x<sub>n</sub>): Start at the root and repeat the following steps: if the node you are at is labeled with a variable x<sub>i</sub>, then depending on whether the value of x<sub>i</sub> is 1 or 0, you go to its right or left child, respectively. Once you reach a terminal node, its label gives the value of the function.</p><pre>
            x1                               x3 
         /      \                         /      \ 
      /           \                    /           \ 
     x2            x2                 x1            x1 
   /    \        /    \             /    \        /    \ 
  x3     x3     x3     x3          x2     x2     x2     x2 
 /  \   /  \   /  \   /  \        /  \   /  \   /  \   /  \ 
0    0 0    0 0    1 1    1      0    0 0    1 0    0 1    1 
</pre><p align=center>Fig. 1.- S-trees for the function x<sub>1</sub> and (x<sub>2</sub> or x<sub>3</sub>)</p><p>In the picture, the two S-trees represent the same Boolean function:</p><p align=center>f(x<sub>1</sub>, x<sub>2</sub>, x<sub>3</sub>)=x<sub>1</sub> and (x<sub>2</sub> or x<sub>3</sub>)</p <p>For the left tree, the variable ordering is x<sub>1</sub>, x<sub>2</sub>, x<sub>3</sub>, and for the right tree it is x<sub>3</sub>, x<sub>1</sub>, x<sub>2</sub>. The values of the variables x<sub>1</sub>, ..., x<sub>n</sub>, are given as a Variable Value Assignment (VVA) (x<sub>1</sub>=b<sub>1</sub>, x<sub>2</sub>=b<sub>2</sub>, ..., x<sub>n</sub>=b<sub>n</sub>) with b<sub>1</sub>, b<sub>2</sub>, ... b<sub>n</sub> in {0,1}. For instance, (x<sub>1</sub>=1, x<sub>2</sub>=1, x<sub>3</sub>=0) would be a VVA for n=3, resulting, for the sample function above, in the value f(1, 1, 0)=1 and (1 or 0)=1.</p><p>Your task is to write a program which takes an S-tree and some VVAs and computes f(x<sub>1</sub>, ..., x<sub>n</sub>) as described above.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains the description of several S-trees with associated VVAs which you have to process. Each description begins with a line containing a single integer n; 1 <= n <= 7, the depth of 
the S-tree. This is followed by a line describing the variable ordering of the S-tree.
The format of that line is x<sub>i1</sub> x<sub>i2</sub> ... x<sub>i</sub>n. (There will be exactly n different single
space-separated strings). So, for n=3 and the variable ordering x<sub>3</sub>, x<sub>1</sub>, x<sub>2</sub>,
this line would look as follows </p>

<p align=center>x3 x1 x2 </p>

<p>In the next line the distribution of 0's and 1's over the terminal nodes is given.
There will be exactly 2^n characters (each of which can be 0 or 1), followed by the
new-line character. The characters are given in the order in which they appear in
the S-tree, the first character corresponds to the leftmost terminal node of the
S-tree, the last one to its rightmost terminal node. </p>

<p>The next line contains a single integer m, the number of VVAs, followed by m lines
describing them. Each of the m lines contains exactly n characters (each of which can
be 0 or 1), followed by a new-line character. Regardless of the variable ordering of
the S-tree, the first character always describes the value of x<sub>1</sub>, the second character
describes the value of x<sub>2</sub>, and so on. So, the line</p>

<p align=center>110 </p>


<p>corresponds to the VVA (x<sub>1</sub>=1, x<sub>2</sub>=1, x<sub>3</sub>=0). </p>

<p>The input is terminated by a test case starting with n=0. This test case should not be 
processed. </p>





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each S-tree, output the line "S-Tree #j", where j is the number of the
S-tree. Then print a line that contains the value of f(x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub>) for
each of the given m VVAs, where f is the function 
defined by the S-tree. Output a blank line after each test case.</p>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 
x1 x2 x3 
00000111 
4 
000 
010 
111 
110 
3 
x3 x1 x2 
00010011 
4 
000 
010 
111 
110 
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
S-Tree #1 
0011 

S-Tree #2 
0011 

</PRE>

<P>

______________________________________________________
2163||||||false||||||
<p>Some led systems display characters as a combination of lightlines, much like digital calculators do. Suppose we have one of such led systems, in which each letter of the standard English alphabet is constructed combining some of ten possible lightlines, numbered as below:</p><p><img src=p2163a.jpg></p><p>For instance, the letter A is shown using the lines 1,2,3,4,5 and 7. With these few lines it is not possible, of course, to show all the 26 letters with their natural shapes. A complete list of the letters of our system is appended at the end.</p><p>You have to solve the problem of decoding a combination of numbers (representing lightlines) in the form of the respective letter, to form a whole word or phrase. As input you have a string of letters and/or numbers, and as output you must show only the letters.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file begins with a line containing a single integer N, that indicates the number of input examples, followed by N lines, each one representing an input phrase. Each input phrase consists of uppercase letters, blank spaces and/or digits. In the case of digits, their combination must form valid led letters. Each letter is coded as a combination of numbers, ordered in the form 1,2,3,4,5,6,7,8,9,0. A zero (0) that is not part of a valid letter code, is interpreted as a blank space. You may assume that no invalid codes are entered, and that the system does not allow ambiguity between two letter codes.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output file consists of N lines (one for each input string) with the form:</p><pre>
Phrase 1: ..... 
Phrase 2: ..... 
</pre><p>where the dots are, of course, the result of the decoding process. The alphabetic letters and blank spaces must not be decoded at all: only the numbers must be converted to the corresponding led letters.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 
HELL1235670WO1234591561580 
PROGRAMMING037124670C123567123567156 
AND MORE037124903735790278134573712467045612356735792781245612467278 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Phrase 1: HELLO WORLD 
Phrase 2: PROGRAMMING IS COOL 
Phrase 3: AND MORE IF IN THIS CONTEST 
</PRE><P><h2>Complete List of Letters</h2><img src=p2163b.jpg> 
______________________________________________________
2164||||||false||||||
<p>A local cable network is planning to expand their services to a neighboring city. For that, a transmission center is being built and a cable net connecting the new clients has to be installed. Each client has to be connected to the center in the cable net.</p><p>The network organized a survey and has now the addresses of all potential clients. Also it has an estimate on the cost of installing each cable link through the city.</p><p>The network board of directors has decided to offer the following initial subscription package: Each new client will pay a fixed subscription fee and will get the first three months of service for free. This ensures a <b>potential initial capital</b> for building the cable net, which is simply the number of potential clients (according to the survey) multiplied by the subscription fee.</p><p>The decision on what links to build in this first phase will be done according to the following. A set of links induces a <b>loss in the potential initial capital</b>, defined as <i>l + (t * d)</i>, where l is the cost of installing the links in the set, t is the subscription fee and d is the number of potential clients that are not connected to the center by this set of links. The board of directors decided they will build a set of links that induces a loss as small as possible in the potential initial capital.</p><p>Your job is to write a program to compute the minimum possible loss in the potential initial capital. For that, you are given the location of each potential client as well as the center location. Also, you are given the costs of all possible net links and the value of the subscription fee.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains the description of several instances. An instance with n=0 indicates the end of the input. Your program should not process this instance.</p><p>The first line of the file, contains two positive integers: n (0 <= n <= 20) representing the number 
of potential clients and t representing the subscription fee. Each potential client is identified by a 
number between 1 and n while the center is identified by 0. Next, there is a line for each i from 0 
to n-1. In line i there is a list of n-i positive integers. Each integer, say the j-th one, represents 
the cost of installing a link between i and j. </p>





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>


<p>For each instance, your program should print three lines; the first contains "Cable Net #j", where 
j is the number of the instance; in the second line, it should print the potential initial capital for 
that instance and in the third line, the value of the minimum possible loss in the potential initial 
capital for that instance. Your program should also print a blank line after the output of each 
instance. </p>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5 10 
5 17 2 3 23 
9 6 1 19 
14 5 13 
19 21 
40 
3 1 
5 3 23 
1 19 
14 
0 1 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Cable Net #1 
50 
21 

Cable Net #2 
3 
3 

</PRE>

<P>

______________________________________________________
2165||||||false||||||
<p>The Air Force has a special team devoted to destroying bridges. This team is composed of several planes which over the targeted bridge one after another. Each of these planes carries one bomb, which the pilot drops at a given location in the bridge. The aim of the team is to split the bridge in two, so that no one can cross it.</p><p>Unfortunately, bombs are not completely accurate. As a result, even though missions are planned in advance, the exact location where the bombs actually fall may be different than planned. Still, the Air Force keeps his original plan untouched except for the last plane, which may have to act differently.</p><p>Each bomb that is dropped on the bridge leaves a hole that, viewed from above, has the shape of a circle, its radius depending on the power of the bomb. A bomb of size s leaves a hole of radius s. Your task is to determine the plan for the last plane, that is, the minimum bomb size and the position where the last plane should drop the bomb so that, if everything goes well, the bridge is split in two.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line contains a positive integer n, representing the number of instances of the problem contained on the input file.</p><p>Each instance is represented by three positive integers w, l and b, which denote the width and length of the bridge and the amount of bombs dropped on the bridge. Then come b lines, each containing integers x, y and r (x, y >= 0, r > 0) which denote the coordinates of the center and the radius of the holes left by the b bombs. Coordinate (0,0) is the lower-left corner of the bridge (viewed from above), assuming that the bridge has width parallel to the x axis and length parallel to the y axis.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>Your program must produce one output line for each instance. This line contains an integer representing the minimum bomb size you need to split the bridge in two, or the words Bridge already split if the bridge is already split by the bombs that have been dropped. The bridge is considered to be split if the two ends of the bridge are disconnected (except perhaps for a finite number of points). Remember that a bomb of size s leaves a hole of radius s.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
100 1000 2
15 100 20
90 100 30
100 1000 1
50 100 40
100 1000 2
25 500 25
75 500 25
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
13 
50 
Bridge already split 
</PRE><P>
______________________________________________________
2166||||||false||||||
<p>You have three jars containing water. Each jar has associated a capacity indicating the maximum amount of water it can contain. Your wish is to have a certain amount of water in each jar. The initial content of each jar, its capacity, and the desired content, are all non negative integers; in addition, the capacities are between 1 and 150. You have nothing but the jars to help you in achieving your goal. So the only way to obtain the desired content in each jar is to make a sequence of movements of water. In a movement of water you pour a certain amount of water from one jar to another jar. We call the first jar source and the second jar destination. While moving water two situations can occur: If the current content of the source jar is not enough to complete the capacity of the destination jar, then all the water contained in the source jar is moved to the destination jar; otherwise, only the exact amount of water needed to complete the destination jar is moved from the source jar. Under no circumstances you can use additional water or throw away water. Your task is to determine the minimum number of movements required to obtain the desired amount of water in each jar.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains a certain number of test cases for this problem. Each test case is given in a single line containing nine values c<sub>1</sub>, c<sub>2</sub>, c<sub>3</sub>, a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, b<sub>1</sub>, b<sub>2</sub>, b<sub>3</sub>; these values are separated by an arbitrary number of blank spaces. The value c<sub>i</sub> is the capacity of the i-th jar, a<sub>i</sub> is its initial content, and b<sub>i</sub> is the desired content for the jar. In the last line of the file c<sub>1</sub> has value equal to 0; this line should not be processed.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case in the input file, the output file must contain a line with the minimum number of movements required to obtain the desired content in each jar. If for a given test case there is no solution, you must write the value -1 instead of the number of movements.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5 4 1 1 0 1 0 2 0 
5 4 1 1 0 1 0 3 0 
5 4 1 1 0 1 0 0 2 
5 4 1 1 0 1 1 0 1 
5 4 1 0 4 0 3 0 1 
0 1 1 0 0 0 0 0 0 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2 
-1 
-1 
0 
2 
10 
</PRE><P>
______________________________________________________
2167||||||false||||||
<p>Piet Mondrian (1872-1944) was one of the best abstract artists of the century. His simple yet elegant designs were intentionally restricted to use only straight lines and a few colors. His artwork reflects an idealized view of reality, one which has perfect harmony and balance.</p><p>Armando, a Latin American businessman, wants to create and sell fake Mondrian pictures. Since Mondrian's designs are based on a few simple rules, he hopes to build a machine that can mass-produce different Mondrian pictures and sell them as originals.</p><p>Mondrian's rules are very simple:</p><p>1. only black, white, red, blue and yellow colors can be used.</p><p>2. the painting can only contain rectangles, with sides parallel to the borders of the canvas. Lines that are not part of the border of a rectangle are not allowed. The following four examples do not fulfill this rule:</p><img src=p2167.jpg><p>The top-left painting contains a shape that is not a rectangle (the shape that is outside the central square). In the top-right painting every shape is a rectangle, but there are lines that are not part of the border of any rectangle. Bottom-left painting contains a shape that is not a rectangle (the inverted L). Bottom-right painting contains a line that is not part of the border of any rectangle. In the figure we also include a real (well, sort of) Mondrian (Composition with red, yellow, and blue, 1928).</p><p>3. Borders of the rectangles can only be painted in black. Rectangles can only be painted in white, red, blue or yellow. The borders of the canvas are considered to be already painted in black.</p><p>4. Two adjacent rectangles (that is, two rectangles that share a segment of their borders) cannot have the same color, unless they are painted in white.</p><p>The machine Armando has devised receives a set of instructions to draw the painting. Your task is to program an algorithm that will tell (before the machine begins to perform Armando's instructions) whether these instructions correspond to a picture that fulfills Mondrian's rules, and how much paint he will need.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains a set of test cases. Each test case is described in several lines, and contains Armando's instructions for one painting. There are two types of instructions: instructions that indicate the drawing of a line, and instructions that indicate the painting of a rectangle. Each test case of the input file starts with a line containing four integer values w, h, n, m. The values w and h represent the width and height of the canvas, respectively; these values are between 1 and 10000. The value n is the number of instructions for drawing lines, while m is the number of instructions for painting rectangles; these values are between 0 and 1000. The test case continues with n lines containing the instructions for drawing lines, each instruction in a separate line of the file. Each instruction consists of four integer values x<sub>1</sub>, x<sub>2</sub>, x<sub>3</sub> and x<sub>4</sub>, where (x<sub>1</sub>, x<sub>2</sub>) and (x<sub>3</sub>, x<sub>4</sub>) are the coordinates of the end points of the line. Lines are always horizontal or vertical. The lower left corner of the canvas has coordinates (0,0). Instructions can result in a line or part of a line being drawn more than once. The test case ends with m lines containing the instructions for painting rectangles, each one in a separate line of the input file. Each instruction specifies two integer values x and y, as well as a letter c in the set {r, b, y} (r means red, b is blue and y is yellow). The instruction indicates the machine to paint the rectangle containing the point with coordinates (x; y) with color c. All rectangles not painted with a color in this set are assumed to be painted in white. The input file ends with a test case in which w has a value of 0; this test case should not be processed. Every pair of consecutive values in a same line of the input file is separated by an arbitrary number of blank spaces.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>Your program must produce one output line for each test case. If the instructions follow Mondrian's rules, you must write the line Mondrian r b y, where r, b and y are total areas painted in red, blue and yellow, respectively. Otherwise, you must write the line Error!.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
100 100 3 3 
0 50 60 50 
20 50 100 50 
50 0 50 100 
25 25 r 
75 75 r 
25 75 y 
610 987 2 3 
0 50 305 50 
305 0 305 987 
1 1 r 
1 400 r 
400 100 y 
1000 1000 3 2 
0 200 500 200 
500 0 500 400 
500 400 1000 400 
200 800 r 
700 200 y 
0 0 0 0 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Mondrian: 5000 0 2500 
Error! 
Error! 
</PRE><P>
______________________________________________________
2168||||||false||||||
<P>The importance of postfix and prefix notation in parsing arithmetic expressions is that these notations are completely free of parentheses. Consequently, an expression in postfix (or prefix) form is crucial because having a unique form for an expression greatly simplifies its evaluation. But we humans prefer to read and evaluate an infix expression especially when it is parenthesized.<P>We would like to try the conversion from the postfix format to the parenthesized infix format for expression written in some functional language. The language will consist of the unary function INV and the binary functions ADD and MUL.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input shall consist of several cases. Each case will be represented on a separate line. The number of cases will be given in the first line of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, the converted expression should be on a separate line, and should have a space after each comma.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
2 -3 Add Inv  6 10 Mul Mul
100 1000 MUL 10 ADD INV
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Mul ( Inv (Add (2, -3)), Mul (6, 10))
Inv ( Add (10, Mul (100, 1000)))
</PRE><P>
______________________________________________________
2169||||||false||||||
<P>This problem is about right justification of the text. By that we mean that the printed form of the text is such that the right margin is aligned for all lines in the output. This task is normally achieved by first attempting to split words across lines, and then by leaving a certain amount of spaces between words.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Assumptions</A>&nbsp;</FONT></H2><P>For this problem, assume that words are not to be split between lines and that each line is to be both left and right justified, except for the last line of text. Any extra blank characters which are required in the justification of the text are to be distributed as uniformly as possible between the words of a line. Furthermore, we assume that there are no paragraphs and that pagination and indentation are not required. Finally, each word in the input text is separated from every other word by a blank, and each punctuation symbol is followed by a blank.<P>For the output, assume 50 characters per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Sultan Qaboos university is a young university compared 
to universities found in the ArabianGulf region.
However, it has an excellent reputation in the region. 
The university enjoys solid infrastructure, stable
academic platforms, and state of the art facilities. 
The university includes six colleges, four centers, three
libraries, and a hospital. A new college of information 
technology seems to be on the horizon, and may be
announced any time.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Sultan  Qaboos  university  is  a young university
compared  to universities found in the ArabianGulf
region. However, it has an excellent reputation in
the    region.   The   university   enjoys   solid 
infrastructure,  stable  academic  platforms,  and
state   of  the  art  facilities.  The  university
includes   six   colleges,   four  centers,  three
libraries,  and  a  hospital.  A  new  college  of
information technology seems to be on the horizon,
and may be announced any time.
</PRE><P>
______________________________________________________
2170||||||false||||||
<P>"Logic World" is a company that produces systems with extensive use of bitwise operators. Before hiring engineers, the company tests their ability to write programs that manipulate bit-strings to evaluate both their programming skills and their mastery of the bitwise operators: OR, AND, NOR, NAND and XNOR. The test gives three bit-strings of length 40 represented in hexadecimal, and five operations to be performed on these bit-strings. Given the strings <SPAN CLASS="MATH"><I>S</I>1</SPAN>, <SPAN CLASS="MATH"><I>S</I>2</SPAN> and <SPAN CLASS="MATH"><I>S</I>3</SPAN>, the operations to be performed will be: <SPAN CLASS="MATH"><I>S</I>1</SPAN> AND <SPAN CLASS="MATH"><I>S</I>2</SPAN>, <SPAN CLASS="MATH"><I>S</I>2</SPAN> OR <SPAN CLASS="MATH"><I>S</I>3</SPAN>, <SPAN CLASS="MATH"><I>S</I>1</SPAN> AND (<SPAN CLASS="MATH"><I>S</I>2</SPAN> OR <SPAN CLASS="MATH"><I>S</I>3</SPAN>), <SPAN CLASS="MATH"><I>S</I>1</SPAN> NAND <SPAN CLASS="MATH"><I>S</I>2</SPAN> NOR <SPAN CLASS="MATH"><I>S</I>3</SPAN>, (<SPAN CLASS="MATH"><I>S</I>1</SPAN> NOR <SPAN CLASS="MATH"><I>S</I>2</SPAN>) XNOR (<SPAN CLASS="MATH"><I>S</I>2</SPAN> NOR <SPAN CLASS="MATH"><I>S</I>3</SPAN>)<P>Challenge yourself by taking this test and see whether you would be hired by ``Logic World"<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input data consists of a set of cases terminated by a case of only <TT>X</TT>'s. Each case is made of 3 bit-strings separated by a comma and a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, results of the five operations should be given as shown in the sample output. Leave a blank line after each case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
FFFFFF4444, 222F0FFF11, AABBCCDDEE
XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
Operation 1: 222B0CDD00
Operation 2: FFFFFFFF55
Operation 3: AABFCF4444
Operation 4: 0004030000
Operation 5: AABFCFFF55
</PRE><P>
______________________________________________________
2171||||||false||||||
<P>As a child, did you ever dream of playing in a maze? If you had thought about it, you may have come up with the idea of marking your paths as you went along. If you were trapped, you could then go back to the last crossing and take another path. By doing this, your actually applying what is called <SPAN CLASS="textit"><SPAN CLASS="textbf">backtracking</SPAN></SPAN>. This problem is about trying to get out of a maze.<P>Given a maze and a starting point within, you are to determine whether there is a way out. There is only <B>one</B> exit from the maze. You may move horizontally or vertically (but not diagonally) in any direction in which there is an open path, but you may not move in a direction that is blocked. If you move into a position where you are blocked on three sides, you must go back the way you came (backtrack) and try another path.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The should come from a text file. The file contains the original maze, represented as a square matrix of symbols, with one row of the matrix per line. Each symbol is a character that indicates whether the corresponding maze is an open path (`<TT>O</TT>'), a trap (`<TT>+</TT>'), or the exit (`<TT>E</TT>'). The size of the maze is 10<SPAN CLASS="MATH"><TT>x</TT></SPAN>10 positions. At the end of the maze in the input file, there a series of starting position coordinates. Each line contains a pair of values, representing the row and the column of the starting position in the maze. Your task is to process each of these positions in your quest for the exit from the maze.<P><P><BR><SPAN CLASS="textbf">Processing</SPAN><P><P><BR>For each starting position, start your move into the maze from the given starting position (in terms of a row and a column numbers) until you either get to `<TT>E</TT>' (exit) or get trapped (cannot move). You can move only where `<TT>O</TT>' is found.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each of the ten starting positions, print out the result of your move in the maze, by displaying either Exit or Trapped in front of the starting position.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
O O + E + O O + + +       1  2
O + + O + O + O O O       10 1
O O O O O O + O + O       10 8
+ + + + + O + + O O       7  6
O O O + O O O + O +       1  7
O + O + O + + + O +       8  7
O + O + O O O + O O       7  9
+ + O + + + O + + O       9  3
O + O O O O O + + O       7  1
O + O + + O + O O O       2  8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Starting Position       Result
1,2                     Exit
10,1                    Trapped
10,8                    Trapped
7,6                     Exit
1,7                     Exit
8,7                     Exit
7,9                     Trapped
9,3                     Exit
7,1                     Exit
2,8                     Trapped
</PRE><P>
______________________________________________________
2172||||||false||||||
<P>In this problem you will implement the Merkle-Hellman Knapsack cryptosystem. The encryption and decryption algorithms are based on solving a knapsack problem. The knapsack problem consists of finding a way to select some of the items to be packed such that their sum (the amount of space they take up) exactly equals the knapsack capacity (the target). Formally the knapsack problems is as follows: given a set <SPAN CLASS="MATH"><I>S</I> = {<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,...<I>a</I><SUB>n</SUB>}</SPAN> and a target sum <SPAN CLASS="MATH"><I>T</I></SPAN>, where each <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2172img1.png ALT="$ \ge$"> 0</SPAN>, is there a selection vector <SPAN CLASS="MATH"><I>V</I> = {<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>,...<I>v</I><SUB>n</SUB>}</SPAN> each of whose elements is 0 or 1, such that <SPAN CLASS="MATH"><IMG WIDTH="27" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2172img1.png ALT="$ \sum_{{i}}^{}$">(<I>a</I><SUB>i</SUB>*<I>v</I><SUB>i</SUB>) = <I>T</I></SPAN>.<P>The idea behind Merkle-Hellman scheme is to encode a binary message as a solution to a knapsack problem reducing the ciphertext to the target sum obtained by adding terms corresponding to 1s in the plaintext. That is, blocks of plain text are converted to knapsack sums by adding into the sum the terms that match with 1bits in the plaintext as shown below:<P><P><BR><TABLE COLS=8><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Plaintext:</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Knapsack:</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>43</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Ciphertext:</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>49</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TABLE><P><P><BR><TABLE COLS=8><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Plaintext:</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Knapsack:</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>43</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Ciphertext:</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>27</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TABLE><P><P><BR>The receiver will have to use the ciphertext (the target sum) to recover the plaintext.<P>A knapsack problem is said to be ``easy" if <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2172img1.png ALT="$ \forall$"><I>k</I>&nbsp;<I>a</I><SUB>k</SUB> &gt; <IMG WIDTH="57" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2172img1.png ALT="$ \sum_{{j}}^{{(k-1)}}$"><I>a</I><SUB>j</SUB></SPAN>. The solution for the easy knapsack problem is straightforward, and can be achieved in <SPAN CLASS="MATH"><I>O</I>(<I>n</I>)</SPAN>. Furthermore, there exists a way for transforming an easy knapsack set <SPAN CLASS="MATH"><I>S</I></SPAN> into a non-easy knapsack <SPAN CLASS="MATH"><I>H</I></SPAN> simply by multiplying the elements of <SPAN CLASS="MATH"><I>S</I></SPAN> by <SPAN CLASS="MATH"><I>w</I> mod <I>n</I></SPAN> where <SPAN CLASS="MATH"><I>w</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> are well chosen integers. Formally the terms of <SPAN CLASS="MATH"><I>H</I></SPAN> are: <SPAN CLASS="MATH"><I>h</I><SUB>i</SUB> = (<I>w</I>*<I>s</I><SUB>i</SUB>) mod <I>n</I></SPAN><P>For example if <SPAN CLASS="MATH"><I>S</I> = {1, 2, 4, 9}</SPAN>, <SPAN CLASS="MATH"><I>w</I> = 15</SPAN>, and <SPAN CLASS="MATH"><I>n</I> = 17</SPAN> then <SPAN CLASS="MATH"><I>H</I> = {15, 13, 9, 6}</SPAN>.<P><P><BR><SPAN CLASS="textbf">Encryption algorithm (executed by the sender)</SPAN><P><P><BR><SPAN CLASS="MATH"><I>H</I></SPAN> is called the public key and is made public by the receiver<P><OL><LI>Choose <SPAN CLASS="MATH"><I>w</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> such that <SPAN CLASS="MATH"><I>n</I> &gt; max(<I>S</I>)</SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> is prime, and <SPAN CLASS="MATH"><I>w</I> &lt; <I>n</I></SPAN>. Construct <SPAN CLASS="MATH"><I>H</I></SPAN> from <SPAN CLASS="MATH"><I>S</I></SPAN>, <SPAN CLASS="MATH"><I>w</I></SPAN>, and <SPAN CLASS="MATH"><I>n</I></SPAN>. </LI><LI>Sender uses <SPAN CLASS="MATH"><I>H</I></SPAN> to encipher blocks of of <SPAN CLASS="MATH"><I>m</I></SPAN> bits <SPAN CLASS="MATH"><I>P</I><SUB>0</SUB> = [<I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>...<I>p</I><SUB>m</SUB>]</SPAN>, <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB> = [<I>p</I><SUB>m+1</SUB>, <I>p</I><SUB>m+2</SUB>...<I>p</I><SUB>2m</SUB>]</SPAN> and so forth (<SPAN CLASS="MATH"><I>m</I></SPAN> is the number of terms in <SPAN CLASS="MATH"><I>H</I></SPAN>), as follows: <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB> = <I>P</I><SUB>i</SUB>*<I>H</I> = <IMG WIDTH="28" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2172img1.png ALT="$ \sum_{{j}}^{}$">(<I>p</I><SUB>j</SUB>*<I>h</I><SUB>j</SUB>)</SPAN>. Thus <SPAN CLASS="MATH"><I>T</I><SUB>0</SUB> = <I>P</I><SUB>0</SUB>*<I>H</I></SPAN>, <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB> = <I>P</I><SUB>1</SUB>*<I>H</I></SPAN> and so on. <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN> are then transmitted to the receiver via a reliable channel. </LI></OL><P><P><BR><SPAN CLASS="textbf">Decryption algorithm (executed by the receiver)</SPAN><P><P><BR>The tuple <SPAN CLASS="MATH">(<I>S</I>, <I>n</I>, <I>w</I>)</SPAN> is called the private key and is kept secret by the receiver<P><OL><LI>Use <SPAN CLASS="MATH"><I>w</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> to compute <SPAN CLASS="MATH"><I>w</I><SUP>-1</SUP></SPAN> where <SPAN CLASS="MATH"><I>w</I><SUP>-1</SUP>*<I>w</I> = 1 mod <I>n</I></SPAN>. if <SPAN CLASS="MATH"><I>n</I></SPAN> is prime then <SPAN CLASS="MATH"><I>w</I><SUP>-1</SUP> = <I>w</I><SUP>(n-2)</SUP> mod <I>n</I></SPAN> </LI><LI>Compute <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB> = <I>w</I><SUP>-1</SUP>*<I>T</I><SUB>i</SUB> mod <I>n</I></SPAN> </LI><LI>Find <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN> by solving <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB> = <I>P</I><SUB>i</SUB>*<I>S</I></SPAN> </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input file</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>N</I></SPAN> test cases. The number of them (<SPAN CLASS="MATH"><I>N</I></SPAN>) is given on the first line of the input file. Each test case begins with a line containing a plaintext to be encrypted. The second line contains the number of elements (<SPAN CLASS="MATH"><I>m</I></SPAN>) in the knapsack <SPAN CLASS="MATH"><I>S</I></SPAN> that show in the third line. The knapsack elements are positive integers separated by space. The fourth line of each text case contains <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>w</I></SPAN> in this order separated by space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output file</A>&nbsp;</FONT></H2><P>Print exactly 3 lines for each test case. The first line should contain the encrypted values of the plaintext of the set separated by space. The second line should contain the plaintext obtained by applying the decryption algorithm to the plaintext, preceded by `<TT>Recovered plain text: </TT>'. The third line should contain the value of <SPAN CLASS="MATH"><I>w</I><SUP>-1</SUP></SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
Salaam!
4
1 2 4 9
17 15
hello there?
4
1 2 4 9
19 7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
29 25 22 16 22 28 22 16 22 16 22 44 9 16 0 24
Recovered plain text: Salaam!
8
23 7 23 20 23 21 23 21 23 36 9 0 29 14 23 7 23 20 29 9 23 20 15 36 0 16
Recovered plain text: hello there?
11
</PRE><P>
______________________________________________________
2173||||||false||||||
<P>An arithmetic progression is of the form <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>a</I> + <I>b</I></SPAN>, <SPAN CLASS="MATH"><I>a</I> + 2<I>b</I></SPAN>, ..., <SPAN CLASS="MATH"><I>a</I> + <I>nb</I></SPAN> where <SPAN CLASS="MATH"><I>n</I> = 0, 1, 2, 3...</SPAN>. Assume <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are non-negative integers <SPAN CLASS="MATH">(0, 1, 2, 3,...)</SPAN>.<P>Write a program that finds all arithmetic progressions of length <SPAN CLASS="MATH"><I>n</I></SPAN> in the set <SPAN CLASS="MATH"><I>S</I></SPAN> of bisquares. The set of bisquares is defined as the set of all integers of the form <SPAN CLASS="MATH"><I>p</I><SUP>2</SUP> + <I>q</I><SUP>2</SUP></SPAN> (where <SPAN CLASS="MATH"><I>p</I></SPAN> and <SPAN CLASS="MATH"><I>q</I></SPAN> are non-negative integers).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>As input, your program should accept the length of progressions <SPAN CLASS="MATH"><I>N</I></SPAN> to search for and an upper bound <SPAN CLASS="MATH"><I>M</I></SPAN> to limit the search to the bisquares in the range from 0 to <SPAN CLASS="MATH"><I>M</I></SPAN>. Each line of the input file contains <SPAN CLASS="MATH"><I>N</I>&nbsp;<I>M</I></SPAN>. Assume <SPAN CLASS="MATH"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2173img1.png ALT="$ \le$">10, 000</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each pair <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>M</I></SPAN> in the input file, you should print line showing the pair <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>M</I></SPAN> followed by all the progressions found. If no progressions are found, you program should write No progressions found.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 200
13 100
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8 200

Difference of 12:
1  13 25 37 49 61 73 85
13 25 37 49 61 73 85 97
25 37 49 61 73 85 97 109
37 49 61 73 85 97 109 121

Difference of 24:
1  25 49 73 97  121 145 169
2  26 50 74 98  122 146 170
25 49 73 97 121 145 169 193
26 50 74 98 122 146 170 194

13 100

No Progressions found
</PRE><P>
______________________________________________________
2174||||||false||||||
<P>Generating random numbers is ususally done through a function of the form:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>seed</I> (<I>x</I> + 1) = [<I>seed</I> (<I>x</I>) + <I>STEP</I>]%<I>MOD</I></DIV><P></P><P>The numbers generated will be between 0 and <SPAN CLASS="MATH"><I>MOD</I> - 1</SPAN>. However this function will generate the same pattern of numbers in a cyclic manner. A carful choice of the <SPAN CLASS="MATH"><I>STEP</I></SPAN> and <SPAN CLASS="MATH"><I>MOD</I></SPAN> will minimize this problem by generating a Uniform distribution of all the values between 0 and <SPAN CLASS="MATH"><I>MOD</I> - 1</SPAN> inclusive.<P>For example, if <SPAN CLASS="MATH"><I>STEP</I> = 3</SPAN> and <SPAN CLASS="MATH"><I>MOD</I> = 5</SPAN>, the function will generate the series of pseudo-random numbers 0, 3, 1, 4, 2 in a repeating cycle. So all the numbers between 0 and <SPAN CLASS="MATH"><I>MOD</I> - 1</SPAN> are generated including 0 and <SPAN CLASS="MATH"><I>MOD</I> - 1</SPAN> every <SPAN CLASS="MATH"><I>MOD</I></SPAN> iterations of the function. Note that by the nature of the function to generate the same <SPAN CLASS="MATH"><I>seed</I> (<I>x</I> + 1)</SPAN> every time <SPAN CLASS="MATH"><I>seed</I> (<I>x</I>)</SPAN> occurs means that if a function will generate all the numbers between 0 and <SPAN CLASS="MATH"><I>MOD</I> - 1</SPAN>, it will generate pseudo-random numbers uniformly with every <SPAN CLASS="MATH"><I>MOD</I></SPAN> iterations.<P>If <SPAN CLASS="MATH"><I>STEP</I> = 15</SPAN> and <SPAN CLASS="MATH"><I>MOD</I> = 20</SPAN>, the function generates the series 0, 15, 10, 5 (or any other repeating series if the initial seed is other than 0). This is a poor selection of <SPAN CLASS="MATH"><I>STEP</I></SPAN> and <SPAN CLASS="MATH"><I>MOD</I></SPAN> because no initial seed will generate all of the numbers from 0 and <SPAN CLASS="MATH"><I>MOD</I> - 1</SPAN>.<P>Your task is to determine if the choices of <SPAN CLASS="MATH"><I>STEP</I></SPAN> and <SPAN CLASS="MATH"><I>MOD</I></SPAN> will generate a uniform distribution of pseudo-random numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each line of input will contain a pair of integers for <SPAN CLASS="MATH"><I>STEP</I></SPAN> and <SPAN CLASS="MATH"><I>MOD</I></SPAN> in that order <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2174img1.png ALT="$ \le$"><I>STEP</I>, <I>MOD</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2174img1.png ALT="$ \le$">100000)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input, your program should print the <SPAN CLASS="MATH"><I>STEP</I></SPAN> value right-justified in columns 1 through 10, the <SPAN CLASS="MATH"><I>MOD</I></SPAN> value right-justified in columns 11 through 20 and either ``<TT>Good Choice</TT>" or ``<TT>Bad Choice</TT>" left-justified starting in column 25. The ``<TT>Good Choice</TT>" message should be printed when the selection of <SPAN CLASS="MATH"><I>STEP</I></SPAN> and <SPAN CLASS="MATH"><I>MOD</I></SPAN> will generate all the numbers between and including 0 and <SPAN CLASS="MATH"><I>MOD</I> - 1</SPAN> when <SPAN CLASS="MATH"><I>MOD</I></SPAN> numbers are generated. Otherwise, your program should print the message ``<TT>Bad Choice</TT>". After each output test set, your program should print exactly one blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 5
15 20
63923 99999
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
          3        5    Good Choice
         15       20    Bad Choice
      63923    99999    Good Choice
</PRE><P>
______________________________________________________
2175||||||false||||||
<P>
Let's consider a set, that will call Sigma, which consists of an integer
sequence with the following properties:

<P>
<P><!-- MATH
 \begin{displaymath}
\left\{ \begin{array}{l}   a_{0} = 1 \\
                            a_{m} = n \\
                         a_{0} < a_{1} < a_{2} < \ldots < a_{m-1} < a_{m} \\
                         \forall k \in [1,m], \exists i \& j \in [0,k-1] \ \mbox{such that} \
a_{k}=a_{i}+a_{j} 
\end{array} \right. 
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<IMG
 WIDTH="20" HEIGHT="104" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2175img1.png
 ALT="$\displaystyle \left\{\vphantom{ \begin{array}{l} a_{0} = 1 \\
a_{m} = n \\  ...
... \&amp; j \in [0,k-1] \ \mbox{such that} \
a_{k}=a_{i}+a_{j}
\end{array} }\right.$"><IMG
 WIDTH="410" HEIGHT="104" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/21/2175img1.png
 ALT="$\displaystyle \begin{array}{l} a_{0} = 1 \\
a_{m} = n \\
a_{0} &lt; a_{1} &lt; ...
...\exists i \&amp; j \in [0,k-1] \ \mbox{such that} \
a_{k}=a_{i}+a_{j}
\end{array}$">
</DIV><P></P>

<P>
Given an integer <SPAN CLASS="MATH"><I>n</I></SPAN> as input.  Your program should construct and outputs a
sequence of integers, with minimal length,
satisfying the properties above for <SPAN CLASS="MATH"><I>n</I></SPAN>.

<P>
Note that there can be more than one sequence satisfying the properties above.  Your program should output the one with the
maximal sum.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of 100 test cases.  Test cases are stored in an input file.  
Each test case in the file is
stored in a separate line and the number `<TT>-1</TT>' marks the end of the input file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output file should follow this organization:
Each test case output consist of a sequence of integers separated by one blank.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
4
9
77
80
87
99
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 2 3
1 2 4
1 2 4 8 9
1 2 4 6 9 17 34 68 77
1 2 4 8 16 32 64 80
1 2 4 8 16 24 28 29 58 87
1 2 4 8 16 32 33 66 99

______________________________________________________
2176||||||false||||||
<P>A lattice point is a point <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> in the 2-dimensional xy-plane with <SPAN CLASS="MATH"><I>x</I>, <I>y</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$ \in$"> <I>Z</I></SPAN>, where <SPAN CLASS="MATH"><I>Z</I></SPAN> be the set of integers. Let<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>P</I>(<I>r</I>) = {(<I>x</I>, <I>y</I>)| <I>x</I><SUP>2</SUP> + <I>y</I><SUP>2</SUP><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \le$"><I>r</I><SUP>2</SUP>,(<I>x</I>, <I>y</I>) is a lattice point in the <SPAN CLASS="MATH"><I>xy</I></SPAN>-plane}</DIV><P></P>and we denote D(r) be the number of elements in P(r). For each lattice point <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> in the <SPAN CLASS="MATH"><I>xy</I></SPAN>-plane, let<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>S</I>(<I>x</I>, <I>y</I>) = {(<I>u</I>, <I>v</I>)| <I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \le$"><I>u</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \le$"><I>x</I> + 1, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \le$"><I>v</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \le$"><I>y</I> + 1}</DIV><P></P>and<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>B</I>(<I>r</I>) = {(<I>x</I>, <I>y</I>)| <I>x</I><SUP>2</SUP> + <I>y</I><SUP>2</SUP><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \le$"><I>r</I><SUP>2</SUP>, <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are real numbers}</DIV><P></P><P>Then it is easy to verify that when <SPAN CLASS="MATH"><I>r</I> &gt; <IMG WIDTH="28" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$ \sqrt{{2}}$"></SPAN><P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>B</I>(<I>r</I> - <IMG WIDTH="28" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \sqrt{{2}}$">) <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \subset$"> <IMG WIDTH="70" HEIGHT="59" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \bigcup_{{(x,y)\in P(r)}}^{}$"><I>S</I>(<I>x</I>, <I>y</I>) <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \subset$"> <I>B</I>(<I>r</I> + <IMG WIDTH="28" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \sqrt{{2}}$">)</DIV><P></P><P>We know that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Area</I>(<IMG WIDTH="70" HEIGHT="59" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \bigcup_{{(x,y)\in P(r)}}^{}$"><I>S</I>(<I>x</I>, <I>y</I>)) = <IMG WIDTH="70" HEIGHT="59" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \sum_{{(x,y) \in P(r)}}^{}$"><I>Area</I>(<I>S</I>(<I>x</I>, <I>y</I>)) = <IMG WIDTH="70" HEIGHT="59" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \sum_{{(x,y) \in P(r)}}^{}$">1 = <I>D</I>(<I>r</I>).</DIV><P></P><P>Hence<P><P><!-- MATH
 \begin{displaymath}
\pi(r-\sqrt{2})^{2}<D(r)<\pi(r+\sqrt{2})^{2}
\end{displaymath}
 --></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="15" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \pi$">(<I>r</I> - <IMG WIDTH="28" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \sqrt{{2}}$">)<SUP>2</SUP> &lt; <I>D</I>(<I>r</I>) &lt; <IMG WIDTH="15" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \pi$">(<I>r</I> + <IMG WIDTH="28" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \sqrt{{2}}$">)<SUP>2</SUP></DIV><P></P><P>This implies<P><P><!-- MATH
 \begin{displaymath}
\pi(1- \frac{\sqrt{2}}{r})^{2} < \frac{D(r)}{r^{2}}< \pi(1+\frac{\sqrt{2}}{r})^{2}
\end{displaymath}
 --></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="15" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \pi$">(1 - <IMG WIDTH="31" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle {\frac{{\sqrt{2}}}{{r}}}$">)<SUP>2</SUP> &lt; <IMG WIDTH="45" HEIGHT="58" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle {\frac{{D(r)}}{{r^{2}}}}$"> &lt; <IMG WIDTH="15" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \pi$">(1 + <IMG WIDTH="31" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle {\frac{{\sqrt{2}}}{{r}}}$">)<SUP>2</SUP></DIV><P></P><P>It yields<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="38" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \lim_{{r \rightarrow \infty}}^{}$"><IMG WIDTH="45" HEIGHT="58" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle {\frac{{D(r)}}{{r^{2}}}}$"> = <IMG WIDTH="15" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$\displaystyle \pi$"></DIV><P></P><P>So if we can calculate <SPAN CLASS="MATH"><I>D</I>(<I>r</I>)</SPAN> for a large <SPAN CLASS="MATH"><I>r</I></SPAN>, then we can estimate the value of <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$ \pi$"></SPAN>.<P>The following C function can be used to calculate the value of <SPAN CLASS="MATH"><I>D</I>(<I>r</I>)</SPAN> withing a reasonable aumount of time when <SPAN CLASS="MATH"><I>r</I></SPAN> is a small integer, say e.g., <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$ \le$">10, 000</SPAN>.<P><P><BR><PRE>
long D(long r)
{   long x,y,count=0;
    for(x=-r;x&lt;=r;x++)
        for(y=-r;y&lt;=r;y++)
            if(x*x+y*y&lt;=r*r)
                count++;
    return count;
}
</PRE><P><P><BR>Is is easy to obtained <SPAN CLASS="MATH"><I>D</I>(1) = 5</SPAN>, <SPAN CLASS="MATH"><I>D</I>(2) = 13</SPAN>, <SPAN CLASS="MATH"><I>D</I>(3) = 29</SPAN>, and <SPAN CLASS="MATH"><I>D</I>(10000) = 314159053</SPAN> using this program. Recall that <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$ \pi$"> = 3.14159...</SPAN>. Your task is to find <SPAN CLASS="MATH"><I>D</I>(<I>r</I>)</SPAN> for a large <SPAN CLASS="MATH"><I>r</I></SPAN> within a reasonable aumount of time.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are five lanes in the input file, the <SPAN CLASS="MATH"><I>k</I></SPAN>th line contain an integer <SPAN CLASS="MATH"><I>n</I><SUB>k</SUB>(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$ \le$"><I>n</I><SUB>k</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2176img1.png ALT="$ \le$">100, 000, 000)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>List integer <SPAN CLASS="MATH"><I>n</I><SUB>k</SUB></SPAN> in line <SPAN CLASS="MATH">2<I>k</I> - 1</SPAN> and the value of <SPAN CLASS="MATH"><I>D</I>(<I>n</I><SUB>k</SUB>)</SPAN> in line <SPAN CLASS="MATH">2<I>k</I></SPAN> for <SPAN CLASS="MATH"><I>k</I> = 1, 2, 3, 4, 5.</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
2
3
10000
100000000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
5
2
13
3
29
10000
314159053
100000000
31415926535867961
</PRE><P>
______________________________________________________
2177||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> be <SPAN CLASS="MATH"><I>n</I></SPAN> relatively prime positive integers. A positive integer <SPAN CLASS="MATH"><I>k</I></SPAN> has a representation by <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> if there exist non-negative integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>n</SUB></SPAN> such that <SPAN CLASS="MATH"><I>k</I> = <I>x</I><SUB>1</SUB><I>a</I><SUB>1</SUB> + <I>x</I><SUB>2</SUB><I>a</I><SUB>2</SUB> + <SUP>... </SUP>+ <I>x</I><SUB>n</SUB><I>a</I><SUB>n</SUB></SPAN>. The linear Diophantine problem of Frobenius is to determine the largest integer <SPAN CLASS="MATH"><I>g</I>(<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB>)</SPAN> with no such representation.<P>The linear Diophantine problem of Frobenius has very practical application. It is equivalent to the problem of coin exchange. Given sufficient supply of coins of denominations <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB></SPAN>, determine the largest amount which cannot be formed by means of these coins.<P>Mathematical problems, such as this, are usually difficult to solve. We shall consider a simple case in which <SPAN CLASS="MATH"><I>n</I> = 2</SPAN>. In addition to <SPAN CLASS="MATH"><I>g</I>(<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>)</SPAN>, we shall also want to find <SPAN CLASS="MATH"><I>n</I>(<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>)</SPAN> the number of positive integers that cannot be represented by <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN>.<P>Write a program to compute <SPAN CLASS="MATH"><I>g</I>(<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>)</SPAN> and <SPAN CLASS="MATH"><I>n</I>(<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>)</SPAN>. The following theorem may help you in designing your program.<P><BLOCKQUOTE><SPAN CLASS="textbf">Theorem:</SPAN> A positive number <SPAN CLASS="MATH"><I>k</I> = <I>qa</I><SUB>1</SUB> + <I>r</I></SPAN>, <SPAN CLASS="MATH">0 &lt; <I>r</I> &lt; <I>a</I><SUB>1</SUB></SPAN>, can be represented by <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> if and only if <SPAN CLASS="MATH"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2177img1.png ALT="$ \ge$"><I>t</I><SUB>r</SUB></SPAN>, where <SPAN CLASS="MATH"><I>t</I><SUB>r</SUB></SPAN> is the smallest positive integer which has the same residue <SPAN CLASS="MATH"><I>r</I></SPAN> modulo <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> and can be represented by <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB>,..., <I>a</I><SUB>n</SUB></SPAN>.</BLOCKQUOTE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of one or more cases. Each case contains two positive integers <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> in a line. The product of <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> is less than <SPAN CLASS="MATH">2<SUP>32</SUP></SPAN>. A line containing two zeros follows the last case, and terminates the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> in the input file, the output file should contain a line with two numbers <SPAN CLASS="MATH"><I>g</I>(<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>)</SPAN> and <SPAN CLASS="MATH"><I>n</I>(<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>)</SPAN> separated by a blank.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 5
23 20
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 4 
417 209
</PRE><P>
______________________________________________________
2178||||||false||||||
<P>A sawtoothed chess-board is a chess-board whose boundary forms two staircases from left down to right. See the following figure for an example.<P><DIV ALIGN="CENTER"><IMG WIDTH="275" HEIGHT="314" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/p2178.gif ALT="\epsfbox{p2178.eps}"></DIV><P>A square is <SPAN CLASS="textit">dominated</SPAN> by a rook if it is in the same row or column with this rook. Your task is to determine the minimun number of rooks such that every square in a sawtoothed chess-board is dominated by at least one rook. For example, see the above figure again. It needs only four rooks located at the squares with a dot to dominate all the squares.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input data will contain multiple test cases. Each test case will consist of less than 100 pairs of integers which represent the row and column indexes of the corner points, in clockwise order, in a sawtoothed chess-board starting from the upper-left most corner. For example, the corner points in the above figure are <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>,..., <I>v</I><SUB>12</SUB></SPAN>, respectively. Each corner point is represented by its x and y coordinates in the 2-dimensional xy-plane whose values are in the range from 1 to 100. For example, the indexes of <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN>,<SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>v</I><SUB>3</SUB></SPAN> are (1,1), (1,4) and (3,4), respectively. The input for each test case will be terminated with a pair of zeros, wich are not to be treated as the indexes of a corner point. An additional pair of zeros will follow the last test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, determine the minimun number of rooks needed to dominate all of the squares in the sawtoothed chess-board described in the test case. Display, one test case a line, the test case number (they are numbered sequentially starting with 1) and the number of rooks which are separated by one blank.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1  1 4  3 4  3 6  4 6
4 7  8 7  8 6  6 6  6 3
4 3  4 1  0 0  1 1  1 3
3 3  3 6  5 6  5 2  3 2
3 1  0 0  0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 4
2 3
</PRE><P>
______________________________________________________
2179||||||false||||||
<P>In the year 2199, the earth is united into a Federation with the head of the Federation being the Prime Minister. The newly elected Prime Minister <SPAN CLASS="MATH"><I>Q</I></SPAN> decided to colonize Mars by constructing cities and interconnection pathways between cities. Acording to the geographical survey, the Federation has chosen a square piece of flat land to construct <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2179img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2179img1.png ALT="$ \le$">10, 000</SPAN>, cities. Each city <SPAN CLASS="MATH"><I>h</I></SPAN> is given a coordinate <SPAN CLASS="MATH">(<I>x</I><SUB>h</SUB>, <I>y</I><SUB>h</SUB>)</SPAN> at the 2-dimensional <SPAN CLASS="MATH"><I>xy</I></SPAN>-plane with the point of origin at the south-west corner of the piece of the land. Each city is in the shape of a circle with a radius of exactly 0.5 kilometer. The coordinate is the center of the city. It is known that the values of <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of any city are in units of 1 kilometer and are positive integers smaller or equal to 100,000. No two cities have the same coordinates. Since Mars has unpredictable weathers, Prime Minister <SPAN CLASS="MATH"><I>Q</I></SPAN> decided to build covered pathways between the cities. In order to speed-up the construction, simplify the construction plan and save budget, only north-south or east-west bounded pathways connecting exactly two cities are constructed. The height and width of each pathway is exactly 3 meters. In addition, no two pathways intersect except at the <SPAN CLASS="MATH"><I>N</I></SPAN> cities. According to the above, Minister of Transportation <SPAN CLASS="MATH"><I>T</I></SPAN> designs the following pathway constructing plan:<P><UL><LI>If a pathway is built between two cities, then the <SPAN CLASS="textit">distance</SPAN> of this pathway is the actual distance outside the two city limits. The two cities are called the two <SPAN CLASS="textit">endpoints</SPAN> of the pathway. For example, a pathway between a city at (1,1) and (4,1) is two kilometers long in distance. These 2 kilometers of the pathway is called the <SPAN CLASS="textit">body</SPAN> of this pathway. </LI><LI>A pathway is built between two cities <SPAN CLASS="MATH"><I>u</I></SPAN> and <SPAN CLASS="MATH"><I>v</I></SPAN> if <SPAN CLASS="MATH"><I>u</I></SPAN> is directly to the north, south, east or west of <SPAN CLASS="MATH"><I>v</I></SPAN> if there is no city between <SPAN CLASS="MATH"><I>u</I></SPAN> and <SPAN CLASS="MATH"><I>v</I></SPAN>. </LI><LI>Because it is possible for a vahicle to travel in Mars surface for a short distance without any covered protection, the distance between the centers of <SPAN CLASS="MATH"><I>u</I></SPAN> and <SPAN CLASS="MATH"><I>v</I></SPAN> must be strictly larger than 1 kilometer in order for the pathway to be built. </LI><LI>In order not to cause noise in the cities, if any part of the body of a pathway is less than or equal to 0.5 kilometer of <SPAN CLASS="textbf">any part</SPAN> (not the center) of a city that is not one of the two endpoints, then this pathway is not built. </LI><LI>If a potential east-west bounded pathway is intersected with a north-south bounded pathway, then the east-west bounded one is not built. </LI></UL><P>The construction plan is approved by Primary minister <SPAN CLASS="MATH"><I>Q</I></SPAN>. Your task is to help Minister of Transportation <SPAN CLASS="MATH"><I>T</I></SPAN> finding the total distance (in kilometers) of the pathways constructed.<P>For example, there are 9 cities in the following piece of flat land whose coordinates are (1,1), (3,1), (6,1), (7,2), (1,3), (5,3), (7,3), (3,5) and (6,5), respectively. There are 6 pathways constructed with a total distance of 10 kilometers.<P><DIV ALIGN="CENTER"><IMG WIDTH="592" HEIGHT="359" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2179img1.png ALT="\epsfbox{p2179.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. In each test case, a list of coordinates for the cities are listed one city per line with 2 positive numbers indicating their <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates. A line with two <TT>0</TT>'s separates two test cases. The end of the file is a line with two <TT>-1</TT>'s.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the total number of pathways constructed and their total distance in kilometers in one line separated by one blank.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1
3 1
6 1
7 2
1 3
5 3
7 3
3 5
6 5
0 0
1 1
4 1
0 0
-1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6 10
1 2
</PRE><P>
______________________________________________________
2180||||||false||||||
<P>In a country, there are <SPAN CLASS="MATH"><I>N</I></SPAN> persons, labeled by <SPAN CLASS="MATH">1, 2,..., <I>N</I></SPAN>. The country has exactly two plitical parties. All of the people in this country belong to at most one of the two political parties. If two persons join the same party, then they are <SPAN CLASS="textit">friends</SPAN> to each other and are <SPAN CLASS="textit">enemies</SPAN> if they belong to different parties. Assume that N is known in advance. Let <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>w</SUB>,...</SPAN> be a sequence of operations where each operation <SPAN CLASS="MATH"><I>p</I><SUB>w</SUB></SPAN> is one of the following two types: (1) a pair of persons indicating that these two persons are enemies, or (2) a query asking the set confirmed friends and enemies for a person using the information aviable in the prefix of sequence <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>w-1</SUB></SPAN>. Your task when N and the sequence is given, is to answer the queries mixed in the sequence one by one in sequence. We use a pair of positive integers <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2180img1.png ALT="$ \le$"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2180img1.png ALT="$ \le$"><I>N</I></SPAN>, to represent a type (1) operation and use the pair <SPAN CLASS="MATH">(0, <I>k</I>)</SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2180img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2180img1.png ALT="$ \le$"><I>N</I></SPAN>, to represent a type (2) operation. For example, when <SPAN CLASS="MATH"><I>N</I> = 5</SPAN> in the following input sequence:<P><PRE>
    p1    1    3
    p2    5    2
    p3    2    4
    p4    0    2
    p5    1    4
    p6    0    4
          .    .
          .    .
</PRE><P>At <SPAN CLASS="MATH"><I>p</I><SUB>4</SUB></SPAN> it should show that there are no confirmed friend for person 2 and two confirmed enemies (4 and 5) for person 2 according to all inputs appeared before <SPAN CLASS="MATH"><I>p</I><SUB>4</SUB></SPAN>. At <SPAN CLASS="MATH"><I>p</I><SUB>6</SUB></SPAN> it should show that there are two confirmed friends (3 and 5) and two enemies (1 and 2) for person 4.<P>Given the input sequence, let <SPAN CLASS="MATH"><I>p</I><SUB>w</SUB> = (<I>i</I>, <I>j</I>)</SPAN> be a type (1) operation. Then <SPAN CLASS="MATH"><I>p</I><SUB>w</SUB></SPAN> <SPAN CLASS="textit">conflicts</SPAN> with the previous operations, if it is already confirmed that i and j are friends to each other according to the prefix <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>w-1</SUB></SPAN>. To handle this situation, we should completely ignore this conflict relation and assume that it does not exist. For example, in the following input sequence when <SPAN CLASS="MATH"><I>N</I> = 5</SPAN>, the operations <SPAN CLASS="MATH"><I>p</I><SUB>4</SUB> = (4, 5)</SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>7</SUB> = (1, 2)</SPAN> should be ignored and <SPAN CLASS="MATH"><I>p</I><SUB>5</SUB></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>8</SUB></SPAN> will have the same outputs for the queries <SPAN CLASS="MATH"><I>p</I><SUB>4</SUB></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>6</SUB></SPAN> in the previous input sequence:<P><PRE>
    p1    1    3
    p2    5    2
    p3    2    4
    p4    4    5
    p5    0    2
    p6    1    4
    p7    1    2
    p8    0    4
          .    .
          .    .
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases eaxch of which separated by a pair of <TT>0</TT>'s. For each test case, the first line contains the number of persons <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2180img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2180img1.png ALT="$ \le$">30, 000</SPAN>. Then in each of the following input lines, it includes two integers <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN> separated by blanks where <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2180img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2180img1.png ALT="$ \le$"><I>N</I></SPAN> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2180img1.png ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2180img1.png ALT="$ \le$"><I>N</I></SPAN> to denote an operation. The number of operations for each test case is within 1,100,000. If <SPAN CLASS="MATH"><I>i</I></SPAN> is equal to 0 then a query for person <SPAN CLASS="MATH"><I>j</I></SPAN>'s current status should be printed out. Otherwise <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN> are a pair of enemies. Note the enemy relation between <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN> is ignored if a conflict condition occurred. A line consists of a single `<TT>0</TT>' indicates the end of the file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each query of the person <SPAN CLASS="MATH"><I>k</I></SPAN>, you should print out one line to list out number of friends and number of enemies for person <SPAN CLASS="MATH"><I>k</I></SPAN> known at the current stage as follows:<P><P><BR><TT>person <SPAN CLASS="MATH"><I>k</I></SPAN>'s status: <SPAN CLASS="MATH"><I>number</I>&nbsp;<I>of</I>&nbsp;<I>friends</I></SPAN>, <SPAN CLASS="MATH"><I>number</I>&nbsp;<I>of</I>&nbsp;<I>enemies</I></SPAN></TT><P><P><BR>Print a blank line after each output of a query. Print a line with ten <TT>=</TT>'s at the end of each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
1 3
5 2
2 4
0 2
1 4
0 4
0 0
5
1 3
5 2
2 4
4 5
0 2
1 4
1 2
0 4
0 0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
person 2's status: 0, 2

person 4's status: 2, 2

==========
person 2's status: 0, 2

person 4's status: 2, 2

==========
</PRE><P>
______________________________________________________
2181||||||false||||||
<P>Here we introduce a special version of the combinatoric game called Nim. This progressively finite take-away game involves 4 piles of stones on a table. In this game, the two players take turns removing at least one but at most 3 stones from exactly one of the piles. The playes who takes the last stone of the table losses.<P>The configuration of an instance of this Nim game can be described with four nonnegative integers representing the sizes of these four piles. i.e., <SPAN CLASS="MATH">(<I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>, <I>p</I><SUB>3</SUB>, <I>p</I><SUB>4</SUB>)</SPAN>, where the <SPAN CLASS="MATH"><I>k</I></SPAN>-th, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2181img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2181img1.png ALT="$ \le$">4</SPAN>, number <SPAN CLASS="MATH"><I>p</I><SUB>k</SUB></SPAN> representing the current size of the <SPAN CLASS="MATH"><I>k</I></SPAN>-th pile.<P>A configuration of this Nim game is <SPAN CLASS="textit">winnable</SPAN> if a player facing this configuration can allway find a way to win the game. To write a program that plays the Nim game perfectly, we need to decide whether a given instance of the Nim game is <SPAN CLASS="textit">winnable</SPAN> to the current player or not facing the given configuration. For example, the configuration (0,0,0,2) is winnable by removing one stone from the last pile; however, you can verify that neither (0,0,0,5) nor (2,2,0,0) is winnable. Further, to make the problem easier the number of stones on each pile is at most 9.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of Nim game configurations, which can be as large as 20. After <SPAN CLASS="MATH"><I>n</I></SPAN>, there will be <SPAN CLASS="MATH"><I>n</I></SPAN> lists of Nim game configurations; each line contains four integers <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>,<SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN>,<SPAN CLASS="MATH"><I>p</I><SUB>3</SUB></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>4</SUB></SPAN>. Note that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2181img1.png ALT="$ \le$"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>, <I>p</I><SUB>3</SUB>, <I>p</I><SUB>4</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2181img1.png ALT="$ \le$">9</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each configuration appeared in the input, decide whether it is winnable or not. Output a single number `<TT>1</TT>' if the instance is winnable; otherwise, output `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
0 0 0 5
0 0 0 6
0 0 2 2
1 2 3 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
1
0
0
</PRE><P>
______________________________________________________
2182||||||false||||||
<P>There are <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2182img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2182img1.png ALT="$ \le$">1, 000</SPAN>, rectangles in the 2-D <SPAN CLASS="MATH"><I>xy</I></SPAN>-plane, each rectangle is associated with exactly one of the three colors: RED, BLUE or GREEN. The four sides of a rectangle are horizontal or vertical line segments. Rectangles are defined by their lower-left and upper-right corner points. Each corner point is a pair of two non-negative integers in the range of 0 through 50,000 indicating its x and y coordinates. We say that the intersection area of rectangles is <SPAN CLASS="textit">tri-colored</SPAN> if there are at least one RED, one BLUE and one GREEN rectangles covering this intersection area of these rectangles.<P><P><BR><SPAN CLASS="textbf">Example:</SPAN> Consider the following three rectangles and their colors: rectangle 1: <!-- MATH
 $< (0,0) \ (4,4) \ RED >$
 --><SPAN CLASS="MATH">&lt; (0, 0)&nbsp;(4, 4)&nbsp;<I>RED</I> &gt;</SPAN>, rectangle 2: <!-- MATH
 $< (1,1) \ (5,2) \ BLUE >$
 --><SPAN CLASS="MATH">&lt; (1, 1)&nbsp;(5, 2)&nbsp;<I>BLUE</I> &gt;</SPAN>, rectangle 3: <!-- MATH
 $< (1,1) \ (2,5) \ GREEN >$
 --><SPAN CLASS="MATH">&lt; (1, 1)&nbsp;(2, 5)&nbsp;<I>GREEN</I> &gt;</SPAN>. The tri-colored intersection rectangle is at (1,1) (2,2) with an area of 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consist of multiple test cases. A line of 5 <TT>-1</TT>'s separates each test case. An extra line of 5 <TT>-1</TT>'s marks the end of the input. In each test case, the rectangles are given one by one in a line. In each line for a rectangle, 5 non-negative integers are given. The first two are the x and y coordinates of the lower-left corner. The next two are the x and y coordinates of the lower-left corner. The last integer indicates the color of the rectangle with 1 means RED, 2 means BLUE and 3 means GREEN.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the total tri-colored intersection area in a line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0 4 4 1 
1 1 5 2 2
1 1 2 5 3
-1 -1 -1 -1 -1
0 0 2 2 1
1 1 3 3 2
2 2 4 4 3
-1 -1 -1 -1 -1
-1 -1 -1 -1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
0
</PRE><P>
______________________________________________________
2183||||||false||||||
<P>A <SPAN CLASS="textit">deadlock</SPAN> is defined as a set of processes entering a state where each process is waiting for response (or computing resources) from other processes. For example, in OS text books, there are deadlock detection algorithms to detect if a set of processes is <SPAN CLASS="textit">deadlocked</SPAN> during runtime.<P>The deadlock detction problem here is to prevent deadlocks from happening before a program is executed (or even before the program is implemented). The problem is to find if there are <SPAN CLASS="textit">potential deadlocks</SPAN> among a set of processes without executing the program.<P>Assume that processes communicate via <SPAN CLASS="textit">send</SPAN> and <SPAN CLASS="textit">receive</SPAN> with buffer of zero lenght; that is, when a process invokes <SPAN CLASS="textit">send</SPAN>, it must block (or wait) until the message is received by the designated process via <SPAN CLASS="textit">receive</SPAN>. When a process invokes a <SPAN CLASS="textit">receive</SPAN> command and there is no message available, the process must block (or wait) until a message arrives. Note that it is possible for two processes to send to the same process <SPAN CLASS="MATH"><I>P</I></SPAN> and then <SPAN CLASS="MATH"><I>P</I></SPAN> receive the two in sequence. For example, there are three processes <SPAN CLASS="MATH"><I>P</I>1</SPAN>,<SPAN CLASS="MATH"><I>P</I>2</SPAN>, and <SPAN CLASS="MATH"><I>P</I>3</SPAN> as follows:<P><DIV ALIGN="CENTER"></DIV><PRE>
    P1:                     P2:                     P3:
    do {                   do {                    do {
       msg1 = 1;             msg2 = 2;                 receive(&amp;msg);
       send(P3,msg1);        send(P3, msg2);           if (msg == 1)
       .....                 .....                        send(P1,''ACK'');
       receive(&amp;msg);        receive(&amp;msg);            else
    } while (1);           } while (1);                   send(P2,''ACK'');
                                                   } while(1);
</PRE><DIV ALIGN="CENTER"></DIV><P>A sender invoking a <SPAN CLASS="textit">send</SPAN> command must specify the receiving process. When <SPAN CLASS="MATH"><I>P</I>1</SPAN> invokes <SPAN CLASS="textit">send</SPAN>, it will wait until the message is retrieved by <SPAN CLASS="MATH"><I>P</I>3</SPAN>. The <SPAN CLASS="textit">receive</SPAN> command, on the other hand, does not need to specify the process from wich the message is sent, so there is no process ID in the <SPAN CLASS="textit">receive</SPAN> command. The synchronization among the processes constitutes a synchronization structure. If there is no deadlock in a system, we say the system is well-synchronized.<P>Researchers discovered that we can abstract every process is abstracted into a finite-state machine which is expressed using a directed graph with labels on the vertices and edges. The following game on the abstracted graphs can be used to solve a simplified version of the deadlock detection problem. You are given <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2183img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2183img1.png ALT="$ \le$">6</SPAN>, directed graphs <SPAN CLASS="MATH"><I>G</I><SUB>1</SUB>, <I>G</I><SUB>2</SUB>,..., <I>G</I><SUB>n</SUB></SPAN> abstracted from processes. Let <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>E</I><SUB>i</SUB></SPAN> be the vertices and edges of <SPAN CLASS="MATH"><I>G</I><SUB>i</SUB></SPAN>, respectively. You may assume each graph has less than 20 nodes. The nodes of <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN> are numbered <SPAN CLASS="MATH">0, 1,...,| <I>V</I><SUB>i</SUB>| - 1</SPAN>. Each edge <SPAN CLASS="MATH"><I>e</I><SUB>i, j</SUB> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2183img1.png ALT="$ \in$"> <I>E</I><SUB>i</SUB></SPAN> is denoted as <SPAN CLASS="MATH"><I>s</I><SUB>i, j</SUB> <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2183img1.png ALT="$ \rightarrow$"> <I>t</I><SUB>i, j</SUB></SPAN> indicatin and edge from the node <SPAN CLASS="MATH"><I>s</I><SUB>i, j</SUB></SPAN> to the node <SPAN CLASS="MATH"><I>t</I><SUB>i, j</SUB></SPAN>. Each edge is labeled with an integer <SPAN CLASS="MATH"><I>label</I> (<I>e</I><SUB>i, j</SUB>)</SPAN> that can be either positive or negative, but not 0. Initially, the game starts by picking a node <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> in each graph <SPAN CLASS="MATH"><I>G</I><SUB>i</SUB></SPAN> and then place a stone in it. In each of following steps, we move exactly two stones <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>j</SUB></SPAN> using the following rules:<P><OL><LI>A stone can only be moved forward one edge in distance along an edge in the graph where the stone is in as a process can only advance to its next state. </LI><LI>Assume that <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> moves to <SPAN CLASS="MATH"><I>s'</I><SUB>i</SUB></SPAN>, and <SPAN CLASS="MATH"><I>s</I><SUB>j</SUB></SPAN> moves to <SPAN CLASS="MATH"><I>s'</I><SUB>j</SUB></SPAN>. Then <SPAN CLASS="MATH"><I>label</I> (<I>s</I><SUB>i</SUB> <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2183img1.png ALT="$ \rightarrow$"> <I>s'</I><SUB>i</SUB>) + <I>label</I> (<I>s</I><SUB>j</SUB> <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2183img1.png ALT="$ \rightarrow$"> <I>s'</I><SUB>j</SUB>) = 0</SPAN>. Note that a positive edge means the sending of a message and a negative edges denotes a receiving command. In this simplified version, a send command does not specify the destination. </LI></OL><P>Hence we can describe each step of the game using an <SPAN CLASS="MATH"><I>n</I></SPAN>-tuple vector <!-- MATH
 $S_{i}= < c_{i,1}, c_{i,2}, \ldots , c_{i,n} >$
 --><SPAN CLASS="MATH"><I>S</I><SUB>i</SUB> = &lt; <I>c</I><SUB>i, 1</SUB>, <I>c</I><SUB>i, 2</SUB>,..., <I>c</I><SUB>i, n</SUB> &gt;</SPAN>, where <SPAN CLASS="MATH"><I>c</I><SUB>i, j</SUB></SPAN> is a node in the graph <SPAN CLASS="MATH"><I>G</I><SUB>j</SUB></SPAN>. The game ends when it is not possible to make any more moves. The steps that cannot be further advanced are called <SPAN CLASS="textit">deadlocked</SPAN> steps.<P>An example is given below for a set of games without deadlocked steps and a set of games with a deadlocked step. In Figure 1, there are three graphs.In each graph, we initially put a stone in the nodes as shown in the figure. Following the rules described above, for example, we camn move the stones of G1 and G3 to their next nodes by following the edges labeled with `<TT>111</TT>' and `<TT>-111</TT>', respectively. Continuously, you can allways find two stones to move without any deadlock. We can verify that this example has no deadlocks states. Figure 2(a) is an example that has deadlocks. Suppose we initially put the stones as shown in Figure 2(a). Suppose we move the stone of G1 and G3 to become a state in (b). In (b), we can not make any further movements, thus is deadlocked. It can be veritied that the number of all possible deadlock steps in this example is 1.<P>Given <SPAN CLASS="MATH"><I>n</I></SPAN>, the set of graphs and their starting nodes, yopur task is to find the number of all the possible deadlocked steps from the starting step.<P><DIV ALIGN="CENTER"><IMG WIDTH="465" HEIGHT="409" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2183img1.png ALT="\epsfbox{p2183.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2: The game has 1 deadlock state.</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains multiple yest cases. The first line contains the number of graphs <SPAN CLASS="MATH"><I>n</I></SPAN> and the followed by the data of the <SPAN CLASS="MATH"><I>n</I></SPAN> graphs. Each graph starts with three integers <SPAN CLASS="MATH"><I>s</I>&nbsp;<I>t</I>&nbsp;<I>i</I></SPAN>, where <SPAN CLASS="MATH"><I>s</I></SPAN> is the number of nodes, <SPAN CLASS="MATH"><I>t</I></SPAN> is the number of transactions, and <SPAN CLASS="MATH"><I>i</I></SPAN> is the starting node. Following the line of the three integers <SPAN CLASS="MATH"><I>s</I></SPAN>, <SPAN CLASS="MATH"><I>t</I></SPAN> and <SPAN CLASS="MATH"><I>i</I></SPAN> is <SPAN CLASS="MATH"><I>t</I></SPAN> lines of directed edges in the form of <SPAN CLASS="MATH"><I>a</I>&nbsp;<I>b</I>&nbsp;<I>c</I></SPAN>, wich represents and edge with label <SPAN CLASS="MATH"><I>b</I></SPAN> from node <SPAN CLASS="MATH"><I>a</I></SPAN> to node <SPAN CLASS="MATH"><I>c</I></SPAN>. A line with three <TT>0</TT>`s means the end of a test case. When the number of graphs is <TT>0</TT> <SPAN CLASS="MATH">(<I>n</I> = 0)</SPAN>, it is the end of all test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the total number of deadlock steps in a line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
2 2 0
0 111 1
1 -333 0
2 2 0
0 222 1
1 -444 0
3 4 0
0 -111 1
0 -222 2
1 333 0
2 444 0
0 0 0
3
2 2 0
0 747 1
1 -777 0
2 2 0
0 747 1
1 -911 0
2 2 0
0 -747 1
1 911 0
0 0 0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
1

______________________________________________________
2184||||||false||||||
<p>There are several ancient Greek texts that contain descriptions of the fabled island Atlantis. Some of
these texts even include maps of parts of the island. But unfortunately, these maps describe different regions
of Atlantis. Your friend Bill has to know the total area for which maps exist. You (unwisely) volunteered
to write a program that calculates this quantity.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file consists of several test cases. Each test case starts with a line containing a single integer n
(1&le;n&le;100) of available maps. The n following lines describe one map each. Each of these lines contains
four numbers x1 ; y1 ; x2 ; y2 (0&le;x1&lt;x2&le;100000; 0&le;y1&lt;y2&le;100000), not necessarily integers. The
values (x1 ; y1) and (x2 ; y2) are the coordinates of the top-left resp. bottom-right corner of the mapped area.
The input file is terminated by a line containing a single 0. Dont process it.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, your program should output one section. The first line of each section must be "Test
case #k", where k is the number of the test case (starting with 1). The second one must be "Total
explored area: a", where a is the total explored area (i.e. the area of the union of all rectangles in
this test case), printed exact to two digits to the right of the decimal point.
Output a blank line after each test case.
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<pre>
2
10 10 20 20
15 15 25 25.5
0
</pre>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
Test case #1
Total explored area: 180.00
</pre>

______________________________________________________
2185||||||false||||||
<p>
Your little sister got a new mechanical building kit, which includes many cog-wheels of different sizes.
She started building gears with different ratios, but soon she noticed that there were some ratios which
were quite difficult to realize, and some others she couldnt realize at all. Since the most intelligent being
in your family is your computer (as you have always been claiming), now it has to figure out which ratios
are achievable.

<p>
There you are! Thats the punishment for bragging about your computer. Now, you must write a
program that will do the job: your sister tells you the sizes of the cog-wheels (the numbers of cogs they
have) in her kit. Then, she tells you the ratios of the gears she would like to build. Your computer has to
decide whether this is possible and, if so, determine how to connect the wheels to obtain the ratio.

<p>
Here is an example: lets assume there are cog-wheels with 6, 12, and 30 cogs. Your sister wants to
realize a gear of ratio 4 : 5. One possible solution is the following:

<p align=center><img src="http://livearchive.onlinejudge.org/external/21/p2185a.gif>

<p>
The picture shows a complete gear of ratio 4 : 5. Four wheels are used: c<sub>1</sub> with 12 cogs, d<sub>1</sub> with 6 cogs,
c<sub>2</sub> with 12 cogs, and d<sub>2</sub> with 30 cogs. Note that d<sub>1</sub> and c<sub>2</sub> share one axis. In this configuration, if c<sub>1</sub> turns
once, d<sub>2</sub> will make 4/5 of a rotation.

<p>
On the other hand, no gear of ratio 1 : 6 can be realized using the cog-wheels your sister has.

<p>The picture above can be written as 12 : 6; 12 : 30. Each transmission is written as c : d,wherecand d
denote the number of cogs of the two wheels. A list of transitions c<sub>1</sub> : d<sub>1</sub> , c<sub>2</sub> : d<sub>2</sub> , ... , c<sub>m</sub>:d<sub>m</sub> means that the
second wheel of each transition is on the same axis as the first one of the next transition (d<sub>i</sub> and c<sub>i+1</sub> share
one axis for 1 $le; i < m). For those of you who are not good at mechanics: the ratio realized by this gear is

<p align=center><img src="http://livearchive.onlinejudge.org/external/21/p2185a.gif>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>The input file contains the descriptions of several sets of cog-wheels, each one followed by a list of ratios
to be realized.

<p>A set of cog-wheels is described by one line starting with the number n of sizes of cog-wheels (1 &le;
n &le; 20). The rest of the line will consist of n numbers a<sub>1</sub>,...,a<sub>n</sub>, the numbers of cogs on the wheels. There
will always be at least 5 and at most 100 cogs per wheel. You may assume that your sister has an infinite
supply of wheels of each size.

<p>In your sisters building kit (and thus, in the input file), the number of cogs on every wheel is divisible
by the number of cogs on the smallest wheel in the kit.

<p>The line describing the set of cog-wheels is followed by a list of ratios to be realized. Each ratio to
be realized is given by one line containing two numbers a<sub>j</sub> and b<sub>j</sub> (1 &le; aj , bj &le; 10000; a<sub>j</sub> != b<sub>j</sub> ), meaning
a<sub>j</sub> : b<sub>j</sub> . The line 0 0 marks the end of that list.

<p>At the end of the input file, there will be a line containing only a zero (instead of the number of cog-wheels
of the next set).


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>Output one section for each set of cog-wheels. The sections should start with the line Set #k where k
is the number of the set.

<p>Then, output the results for the ratios from the test set. Output exactly one line for each ratio. Each
of these lines should start with Ratio a<sub>j</sub> :b<sub>j</sub> :, followed either by Impossible if the ratio cannot
be realized with the given set of cog-wheels, or a description of a gear which realizes the ratio. This
description has to be in the notation described above: a blank-separated list of transitions, each transition
having the form c<sub>i</sub>:d<sub>i</sub>.

<p>The gear does not need to be the smallest possible; we guarantee that if there is a solution then there is
a solution using at most 10000 transitions. Any solution with at most that many transitions is an acceptable
answer.

<p>Every section should be followed by a blank line.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<pre>
3 6 12 30
4 5
1 6
0 0
0
</pre>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
Set #1
Ratio 4:5: 12:30 12:6
Ratio 1:6: Impossible
</pre>

______________________________________________________
2186||||||false||||||
<P>
The new boss of a rural fire service of the ``rectangular state", whose map is drawn on a grid, with integer coordinates that are multiples of a meter, (0 0) for the lower left corner and (10000 10000) for the upper right corner, in a nation far away used to be an IT person. She believes that a good computer system, especially one based on provably correct algorithms, can outperform humans in stressful situations. That is the reason, when asked; she could not pass the opportunity of posing this problem to the best problem-solvers in the southern hemisphere.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=20 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
75 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>70 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>65 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>60 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>55 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>50 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>45 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>40 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>35 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>30 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>25 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> H </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> H </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> H </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 10 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 15 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 20 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 25 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 30 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 35 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 40 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 45 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 50 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 55 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 60 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 65 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 70 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 75 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 80 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 85 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 90 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
It is easy to describe, the boss said: At the height of the fire season, the department maintains a database of fire fighter unit locations and the reported sightings of fire. The horizontal and vertical distance, of the closest grid point, from the left lower corner of the state is used to describe the location of a fire or a fire fighter unit. An experienced team of officers dispatches each of the units to one of the fires, with the objective that the longest time for a unit to reach a fire is minimized. At the end of a long day, members of the team are exhausted and their judgement may not be the best possible. The above example shows 4 fires (marked by the letter F) and 3 units (marked by the letter H) already deployed in the field.

<P>
Your task is to program a method for dispatching the fire fighter units to fire locations so that they arrive at their destinations in the shortest possible time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input to this problem consists of a sequence of one or more scenarios. Several lines describe each scenario as follows: 

<P>

<UL>
<LI>The first line consists of three integers: the number of fire fighters, <SPAN CLASS="MATH"><I>H</I></SPAN>, <!-- MATH
 $0 < H < 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>H</I> &lt; 100</SPAN>; the number of fires, <SPAN CLASS="MATH"><I>F</I></SPAN>, <!-- MATH
 $H < F < 200$
 -->
<SPAN CLASS="MATH"><I>H</I> &lt; <I>F</I> &lt; 200</SPAN>, and the speed that all fire fighters' travels, <SPAN CLASS="MATH"><I>V</I></SPAN> (in meters/second). The integers are separated by a single space. 
</LI>
<LI>The third line consists of <SPAN CLASS="MATH">2*<I>H</I></SPAN> integers (i.e., <SPAN CLASS="MATH"><I>H</I></SPAN> 2-dimensional coordinates) that describe positions of the fire fighters to be handled. The integers are separated by a single space. 
</LI>
<LI>The second line consists of <SPAN CLASS="MATH">2*<I>F</I></SPAN> integers (i.e., <SPAN CLASS="MATH"><I>F</I></SPAN> 2-dimensional coordinates) that describe positions of the bush fires to be handled. The integers are separated by a single space. 
</LI>
</UL>

<P>
The input will be terminated by a line that consists of three zeros (<TT>0 0 0</TT>). This line should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each scenario, the output is a single line that contains the shortest time, rounded-up if necessary (e.g., all values larger than ``3" and less than ``4" are rounded-up to ``4"), in seconds for the <SPAN CLASS="MATH"><I>H</I></SPAN> fire fighters to arrive at <SPAN CLASS="MATH"><I>H</I></SPAN> <SPAN ID="txt58">different</SPAN> fire locations.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 4 10 
0 0 25 25 50 0 
0 50 50 50 25 0 75 0 
0 0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
</PRE> 

<P>

______________________________________________________
2187||||||false||||||
<P>
Rob runs a one-man security firm. When he is not out on the street doing what PIs usually do, he makes his money watching videos on his broadband connected computer (Security video streams, that is). Being a very stressful job, even with its meager pay of no more than 200 dollars for a video stream, as he is required to raise the alarm immediately when a potential security breach occurs, he elected to impose the rule of not watching more than two video streams at any time. For each job Rob knows the starting time (given in minutes with ``0" as mid-night and all times belong to the same day), duration (in minutes) and payment (in dollars). 

<P>
Your task is to write a program to help Rob to select the videos he must watch to maximize his pay for a given day. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input to this problem consists of a sequence of one or more scenarios. Three lines describe the situation of each scenario as follows: 

<P>

<UL>
<LI>The first line consists of two integers: the label for the scenario, <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $0 < N < 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 100</SPAN>; and the number of videos; <SPAN CLASS="MATH"><I>V</I></SPAN>, <!-- MATH
 $0 < V < 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>V</I> &lt; 100</SPAN>. 
</LI>
<LI>The second line contains <SPAN CLASS="MATH"><I>V</I></SPAN> triples of integers, separated by single space, which describe the payment, start-time (in minutes, with ``0" as midnight) and duration (in minutes) for each of the <SPAN CLASS="MATH"><I>V</I></SPAN> videos. 
</LI>
</UL>

<P>
The input will be terminated by a line that consists of two zeros (<TT>0 0</TT>), separated by a single space. This line should not be processed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each scenario, the output is a single line that contains Rob's maximum possible pay for the day. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 6 
20 500 120 10 600 100 100 640 30 50 700 200 90 1100 1200 200 650 1000
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
460
</PRE> 

<P>

______________________________________________________
2188||||||false||||||
<P>A local guru has written a script for extracting necessary information from the PC<SPAN CLASS="MATH"><SUP><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/21/2188img1.png ALT="$\scriptstyle \wedge$"></SUP></SPAN>2 databases in the following format:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Team</I>&nbsp;<I>number</I>&nbsp;&nbsp;&nbsp;&nbsp;<I>Problem</I>&nbsp;<I>number</I>&nbsp;&nbsp;&nbsp;&nbsp;<I>Time</I>&nbsp;<I>of</I>&nbsp;<I>submission</I>&nbsp;&nbsp;&nbsp;&nbsp;<I>Judgment</I></DIV><P></P>to allow for an alternative way of scoring to be used for our local contest. The local scoring system, which totally ignores the time of submission, is based on adding the values associated with the solved problems for each team and then declares the team, or teams, with the highest score as winner, or winners. The values associated with each problem are selected by the contest organizer and are made public in advance.<P>Our guru also scrambled the extracted information, by permuting the ``Team number" entries, and provided the permutation number as the clue for the organizer. He claims this is a good method to maintain privacy when number of submissions is small. For example, for the contest with four submissions, shown on the left side below, the ``Team number" entries have been permuted according to the 9th permutation of four items and shown on the right side.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3 2 765629 0</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>17 2 765629 0</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>17 4 1120132 0</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3 4 1120132 0</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3 2 1895629 3</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3 2 1895629 3</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>6 3 9024555 0</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>6 3 9024555 0</TT></TD></TR></TABLE></DIV><P><P><BR>You may recall that the number of permutations of ``<SPAN CLASS="MATH"><I>x</I></SPAN>" items is ``<SPAN CLASS="MATH"><I>x</I>!</SPAN>". The table below shows the permutations of four (4) items sorted in lexicographically increasing order, as an example, along with their permutation numbers from 1 to 24.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=24 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>16</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>17</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>18</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>19</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>22</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>23</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>24</TD></TR></TBODY></TABLE></DIV><P><P><BR>Your task is to write a program to use the data provided by our guru, descramble the `` <SPAN CLASS="MATH"><I>Team</I>&nbsp;<I>number</I></SPAN>" entries, and to declare the winner, or winners.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem consists of a sequence of one or more contests. Each contest is described by several lines as follows:<P><UL><LI>The first line consists of three integers: the contest label <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 10</SPAN>; the number of problems, <SPAN CLASS="MATH"><I>P</I></SPAN>, <!-- MATH
 $0 < P < 12$
 --><SPAN CLASS="MATH">0 &lt; <I>P</I> &lt; 12</SPAN>; the number of submissions, <SPAN CLASS="MATH"><I>R</I></SPAN>, <!--1 < R < 13$
 --><SPAN CLASS="MATH">1 &lt; <I>R</I> &lt; 13</SPAN>. The integers are separated by a single space. </LI><LI>The second line contains the permutation number, given as an integer, which is used to scramble the `` <SPAN CLASS="MATH"><I>Team</I>&nbsp;<I>number</I></SPAN>" entries. </LI><LI>The third line contains <SPAN CLASS="MATH"><I>P</I></SPAN> integers, separated by single space, that describe the values for the <SPAN CLASS="MATH"><I>P</I></SPAN> problems given in ascending order of problem numbers. Problems are numbered 1 to <SPAN CLASS="MATH"><I>P</I></SPAN>, and their values will be less than or equal to 100. </LI><LI>Each of the following <SPAN CLASS="MATH"><I>R</I></SPAN> lines describes the data about one submission, which consists of four (4) integers separated by a single space. The four integers describe team number, problem number, time of submission in milliseconds from start of the five (5) hours contest, and the judge's decision (zero for accepted, and non-zero for rejected). </LI></UL><P>The input will be terminated by a line that consists of three zeros (<TT>0 0 0</TT>), separated by a single space. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each contest, the output is one line that contains the contest label and numbers of the winning team numbers (sorted in increasing order) as shown in the Sample Output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 5 6 
6 
3 3 10 30 100 
6 1 3602455567 0 
3 2 6589562919 4 
3 2 9076562919 0 
6 4 1120132409 0 
3 2 7189562919 3 
17 3 9902455567 0 
2 5 6 
120 
3 10 10 30 100 
6 1 3602455567 0 
6 2 6589562919 5 
5 2 9076562919 0 
17 4 1120132409 0 
3 4 7189562919 0 
3 3 9902455567 0 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Contest 1 Winner: Team 17 
Contest 2 Winner: Team 5 and Team 17
</PRE>
______________________________________________________
2189||||||false||||||
<html><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=Generator content="Microsoft Word 11 (filtered)"><title>The 2004 ACM Asia Programming Contest Dhaka, sponsored by IBM </title><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Beaconsfield Bold";}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Bard Hollow";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h6
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:41.0pt;
	page-break-after:avoid;
	font-size:54.5pt;
	font-family:Algerian;
	position:relative;
	top:5.5pt;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:none;
	font-size:11.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Beaconsfield Bold";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.StyleArial16pt
	{font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:595.45pt 841.7pt;
	margin:.9in .7in .6in .7in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body lang=EN-US link=blue vlink=purple><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none'><tr><td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><b><span style='font-size:72.0pt;font-family:Arial'>A</span></b></p></td><td width=438 valign=top style='width:328.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:36.0pt;font-family:Impact'>Mobile Casanova</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard Input</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'> Standard Output</span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Mobile Phone industry is the fastest growing industry in Wonderland. The three prominent mobile service providers of Wonderland are Coktel, Anglolink and Grinding Phone. All three operators provide very cheap rate packages after 12:00 AM. The name of their packages are The Thief Talk (Chorer Alap in Bangla), Insomnia and The Vampire Chat respectively. These cheap packages have inspired many people to disturb others at Night.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><img width=252 height=163 src="http://livearchive.onlinejudge.org/external/21/p2189.gif align=left hspace=12>One such gone to ashtray guy is Arif whose activities begin after 12:00 AM. He dials a number randomly and writes down it in his notebook if he likes it. Later he dials those numbers written in his notebook frequently. As names are not important to him so his note book contains only numbers, and no names. But in a few days his notebook becomes filled with many numbers. So now he wants to reorganize the numbers in a new notebook. The reorganizing process is described below:</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Arifs notebook contains many numbers so there may exist some consecutive numbers. Therefore he wants to save space by writing the consecutive numbers as a range. For example if there are three numbers 01711322396, 01711322397, 01711322398 then he will write them as 01711322396-8. It means that the smallest number in the sequence is the first part of the range followed by a hyphen and then only the rightmost digits of the largest number that are different than the first number. A phone number can have any numerical value within 100 and 2000000000 (inclusive) and is always preceded by only a single zero. So 01123 is a valid phone number but 00123, 089, 1234, 02000000001 are invalid phone numbers.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>You will be given up to 100000 sorted phone (As you cant sort numbers) numbers and your job is to write a program that does the job for Arif. </p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'>The input file contains 110 sets of inputs. But only about 10% of them are large inputs. The description of each set is given below:</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Each set starts with an integer N (0 &#8804; N &#8804; 100000) which denotes how many phone numbers are there in this set. Each of the next N lines contains a valid phone number. The phone numbers will be sorted in ascending order according to their numerical values. You can assume that all input phone numbers will be valid and distinct. You can also assume that all phone numbers in a single set will have equal length.</p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal>Input is terminated by a set where the value of N=0. This set need not be processed.</p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal align=center style='text-align:center'>&nbsp;</p><h4><span class=StyleArial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'>For each set of inputs produce two or more lines of outputs. The description of output for each set is given below.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>First line contains the serial of output. Next lines contain the phone numbers printed according to the rule mentioned in the problem statement. The numbers which are not part of a consecutive sequence are printed exactly as the input and the consecutive number sequences are printed as range. Print a blank line after the output for each set of input. Look at the output for sample input for details. Remember that it needs at least two consecutive numbers to form a consecutive sequence.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input                             Output for Sample Input</span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none'><tr><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><pre><b><span style='font-size:11.0pt'>3</span></b></pre><pre><b><span
  style='font-size:11.0pt'>01711322396</span></b></pre><pre><b><span
  style='font-size:11.0pt'>01711322397</span></b></pre><pre><b><span
  style='font-size:11.0pt'>01711322398</span></b></pre><pre><b><span
  style='font-size:11.0pt'>7</span></b></pre><pre><b><span style='font-size:
  11.0pt'>01187239192</span></b></pre><pre><b><span style='font-size:11.0pt'>01711322396</span></b></pre><pre><b><span
  style='font-size:11.0pt'>01711322397</span></b></pre><pre><b><span
  style='font-size:11.0pt'>01711322398</span></b></pre><pre><b><span
  style='font-size:11.0pt'>01711322399</span></b></pre><pre><b><span
  style='font-size:11.0pt'>01711322400</span></b></pre><pre><b><span
  style='font-size:11.0pt'>01711389821</span></b></pre><pre><b><span
  style='font-size:11.0pt'>0</span></b></pre></td><td width=309 valign=top style='width:231.85pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1:</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>01711322396-8</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2:</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>01187239192</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>01711322396-400</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>01711389821</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'>Problem setter: Shahriar Manzoor, Special Thanks: Syed Monowar Hossain</p></body></html>
______________________________________________________
2190||||||false||||||
<P>Professor AlwaysLate is notorious for having something to say past the end of class time, and even past the start time of following classes. This habit is not viewed kindly by the students' rights movement, which motivated them to collect data about such conduct. The students' rights movement wants to process their extensive data collection and extract some useful information for their annual report, and you are asked to help. Your task is to write a program to read a number of lines, where each line contains a record about a single class, and calculate the average length of time spent past the end of class for Professor AlwaysLate.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a series of scenarios. In each scenario, the input starts with a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that represents the number of records, with <SPAN CLASS="MATH">30000 &ge; <I>N</I> &gt; 0</SPAN> <tex2html_verbatim_mark>, on a separate line followed by a description of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> records. Each record is described on a separate line by: Four (4) integers <SPAN CLASS="MATH"><I>oHour</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>oMinute</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>aHour</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>aMinute</I></SPAN> <tex2html_verbatim_mark>. The integers are separated by single spaces. <SPAN CLASS="MATH"><I>oHour</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>oMinute</I></SPAN> <tex2html_verbatim_mark> represent the official finish time of a class, while <SPAN CLASS="MATH"><I>aHour</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>aMinute</I></SPAN> <tex2html_verbatim_mark> represent the actual time Professor AlwaysLate left the classroom, where <!-- MATH
 $0 <= aMinute, oMinute < 60, 8 <= oHour <= 20 \ \mbox{and} \ oHour <= aHour <= oHour +1$
 --><SPAN CLASS="MATH">0 &le; <I>aMinute</I>, <I>oMinute</I> &lt; 60, 8 &le; <I>oHour</I> &le; 20&nbsp;and&nbsp;<I>oHour</I> &le; <I>aHour</I> &le; <I>oHour</I> + 1</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each scenario, the output of your program is a single integer that represents the average number of minutes that Professor AlwaysLate spends lecturing past the end of his official class finish time rounded down (that is, truncated) to the nearest minute.<P>It is worth mentioning that the students's rights movement considers early finishing of a class as a class finished on time, as demonstrated in the second example below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
10 50 10 55 
12 50 13 0 
17 50 17 50 
13 45 14 0 
4 
10 50 10 55 
12 50 13 0 
17 50 17 40 
13 45 14 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7
7
</PRE><P>
______________________________________________________
2191||||||false||||||
<html><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=Generator content="Microsoft Word 11 (filtered)"><title>The 2004 ACM Asia Programming Contest Dhaka, sponsored by IBM </title><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Beaconsfield Bold";}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Bard Hollow";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h6
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:41.0pt;
	page-break-after:avoid;
	font-size:54.5pt;
	font-family:Algerian;
	position:relative;
	top:5.5pt;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:none;
	font-size:11.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Beaconsfield Bold";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.StyleArial16pt
	{font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:595.45pt 841.7pt;
	margin:.9in .7in .6in .7in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body lang=EN-US link=blue vlink=purple><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none'><tr><td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><b><span style='font-size:72.0pt;font-family:Arial'>B</span></b></p></td><td width=438 valign=top style='width:328.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:36.0pt;font-family:Impact'>Potentiometers</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard Input</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'> Standard Output</span></p></td></tr></table></div><p style='text-align:justify'>A potentiometer, or potmeter for short, is an electronic device with a variable electric resistance. It has two terminals and some kind of control mechanism (often a dial, a wheel or a slide) with which the resistance between the terminals can be adjusted from zero (no resistance) to some maximum value. Resistance is measured in Ohms, and when two or more resistors are connected in series (one after the other, in a row), the total resistance of the array is the sum of the resistances of the individual resistors.</p><p style='text-align:justify'>In this problem we will consider an array of <b>N</b> potmeters, numbered <b>1</b> to <b>N</b> from left to right. The left terminal of some potmeter numbered <b>x</b> is connected to the right terminal of potmeter <b>x-1</b>, and its right terminal to the left terminal of potmeter <b>x+1</b>. The left terminal of potmeter <b>1</b> and the right terminal of potmeter <b>N</b> are not connected.</p><p style='text-align:justify'>Initially all the potmeters are set to some value between 0 and 1000 Ohms. Then we can do two things:</p><ul type=disc><li class=MsoNormal style='text-align:justify'>Set one of the potmeters to another value. </li><li class=MsoNormal style='text-align:justify'>Measure the resistance between two terminals anywhere in the array. </li></ul><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'>The input consists less than 3 cases. Each case starts with <b>N</b>, the number of potmeters in the array, on a line by itself. <b>N</b> can be as large as 200000. Each of next N lines contains one numbers between 0 and 1000, the initial resistances of the potmeters in the order <b>1</b> to <b>N</b>. Then follow a number of actions, each on a line by itself. The number of actions can be as many as 200000. There are three types of action:</p><ul type=disc><li class=MsoNormal style='text-align:justify'>&quot;S x r&quot; - set potmeter <b>x</b> to <b>r</b> Ohms. <b>x</b> is a valid potmeter number and <b>r</b> is between 0 and 1000. </li><li class=MsoNormal style='text-align:justify'>&quot;M x y&quot; - measure the resistance between the left terminal of potmeter <b>x</b> and the right terminal of potmeter <b>y</b>. Both numbers will be valid and <b>x</b> is smaller than or equal to <b>y</b>. </li><li class=MsoNormal style='text-align:justify'>&quot;END&quot; - end of this case. Appears only once at the end of a list of actions. </li></ul><p class=MsoNormal style='text-align:justify'>A case with <b>N</b>=0 signals the end of the input and it should not be processed.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h4 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'>For each case in the input produce a line &quot;Case n:&quot;, where n is the case number, starting from 1.<br>For each measurement in the input, output a line containing one number: the measured resistance in Ohms. The actions should be applied to the array of potmeters in the order given in the input.<br>Print a blank line between cases.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><b>Warning: Input Data is pretty big (~  8 MB) so use faster IO.</b></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><b><span style='font-size:16.0pt;font-family:Arial;color:black'><br clear=all style='page-break-before:always'></span></b><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input                             Output for Sample Input</span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none'><tr><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>100</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>100</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>100</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>M 1 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>M 1 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>S 2 200</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>M 1 2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>S 3 0</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>M 2 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>END</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>10</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>5</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>6</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>7</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>8</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>9</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>10</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>M 1 10</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>END</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>0</span></b></p><pre><b><span style='font-size:11.0pt'>&nbsp;</span></b></pre></td><td width=309 valign=top style='width:231.85pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1:</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>100</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>300</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>300</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>200</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2:</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>55</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'>Problem setter: Joachim Wulff, Special Thanks: Shahriar Manzoor</p></body></html>
______________________________________________________
2192||||||false||||||
<html><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=Generator content="Microsoft Word 11 (filtered)"><title>The 2004 ACM Asia Programming Contest Dhaka, sponsored by IBM </title><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Beaconsfield Bold";}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Bard Hollow";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h6
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:41.0pt;
	page-break-after:avoid;
	font-size:54.5pt;
	font-family:Algerian;
	position:relative;
	top:5.5pt;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:none;
	font-size:11.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Beaconsfield Bold";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.StyleArial16pt
	{font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:595.45pt 841.7pt;
	margin:.9in .7in .6in .7in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body lang=EN-US link=blue vlink=purple><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none'><tr><td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><b><span style='font-size:72.0pt;font-family:Arial'>C</span></b></p></td><td width=438 valign=top style='width:328.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:36.0pt;font-family:Impact'>Collecting Marbles</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard Input</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'> Standard Output</span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'>&nbsp;</p><table class=MsoTableGrid border=0 cellspacing=0 cellpadding=0 align=right style='border-collapse:collapse;margin-left:6.75pt;margin-right:6.75pt'><tr><td width=408 valign=top style='width:4.25in;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><img width=366 height=271 src="http://livearchive.onlinejudge.org/external/21/p2192.gif></p></td></tr><tr><td width=408 valign=top style='width:4.25in;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
  font-family:Arial'>Figure: The figure above corresponds to the first sample input. The dashed rectangle shows the subgrid (1, 1, 2, 2). If we move all the marbles of this subgrid to cell (2, 2) the total cost will be (1*2+2*1+5*1+6*0)=9. And this is the minimum possible cost, because the cost of moving all the marbles to (1, 1), (1, 2) and (2, 1) is 19, 17 and 11 respectively. This example corresponds to the second query of first sample input.</span></p></td></tr></table><p class=MsoNormal style='text-align:justify'>There is a grid of r rows and c columns. The rows are numbered from 1 to r and the columns are numbered from 1 to c. The upper left cell is in row 1 and column 1. The lower right cell is in row r and column c. A cell(p,q) denotes the cell in row p and column q in the grid. A subgrid (r<sub>1</sub>, c<sub>1</sub>, r<sub>2</sub>, c<sub>2</sub>) is a part of the grid that contains all the cells from rows r<sub>1</sub> to r<sub>2</sub> and columns c<sub>1</sub> to c<sub>2</sub> (inclusive). In one unit of time you can move one marble from the cell(p,q) to any of the following 4 cells: cell(p-1,q), cell(p+1,q), cell(p,q-1), cell(p,q+1). You will be given the information of a grid. Then you will be given some subgrids. For each subgrid your task is to calculate the minimum amount of time needed to move all the marbles to any of the cells in that sub grid.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'>First line of the input contains an integer T (T &#8804; 3) the number of test cases.  Each of the test cases begins with three integers r, c (1 &#8804; r, c &#8804; 500) and q (0 &#8804; q &#8804; 10000) in one line. Here r is the number of rows, c is the number of columns and q is the number of queries. Each of the next r lines contains c integers. The jth integer in the ith line contains the number of marbles in the cell(i,j). All these numbers are non- negative and less than 1001. Each of the next q lines contains 4 integers: r<sub>1</sub>, c<sub>1</sub>, r<sub>2</sub>, c<sub>2</sub>. These 4 integers denote the sub grid (r<sub>1</sub>, c<sub>1</sub>, r<sub>2</sub>, c<sub>2</sub>). You can obviously assume that (1 &#8804; r<sub>1</sub>, r<sub>2 </sub>&#8804; r and 1 &#8804; c<sub>1</sub>, c<sub>2</sub> &#8804; c)</p><p class=MsoNormal>&nbsp;</p><h4><span class=StyleArial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'>For each test case you have to produce q+1 lines of output. The description of output for each test case is given below:</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>First line of each test case contains the serial of that test case. Each of the next q line contains output for one query of that test case. Output for each query contains two integers separated by a single space. The first integer denotes the serial of the query and the second integer denotes the minimum time required to move the marbles within the query subgrid to one of the cells within the subgrid. Print a blank line after each test case.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>&nbsp;</span></b></h1><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>&nbsp;</span></b></h1><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input                             Output for Sample Input</span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none'><tr><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 4 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 3 4</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>5 6 7 8</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>9 10 11 12</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 1 3 4</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 1 2 2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 1 3 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 3 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 1 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4 6 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>11 2 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 1 3 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 1 2 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 1 3 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt'>&nbsp;</span></b></p></td><td width=309 valign=top style='width:231.85pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Test Case 1:</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 118</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 9</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 66</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Test Case 2:</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 45</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 16</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 27</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'>Problem setter: Abdullah al Mahmud, Special Thanks: Shahriar Manzoor</p></body></html>
______________________________________________________
2193||||||false||||||
<html><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=Generator content="Microsoft Word 11 (filtered)"><title>The 2004 ACM Asia Programming Contest Dhaka, sponsored by IBM </title><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Beaconsfield Bold";}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Bard Hollow";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h6
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:41.0pt;
	page-break-after:avoid;
	font-size:54.5pt;
	font-family:Algerian;
	position:relative;
	top:5.5pt;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:none;
	font-size:11.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Beaconsfield Bold";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.StyleArial16pt
	{font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:595.45pt 841.7pt;
	margin:.9in .7in .6in .7in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body lang=EN-US link=blue vlink=purple><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none'><tr><td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><b><span style='font-size:72.0pt;font-family:Arial'>D</span></b></p></td><td width=438 valign=top style='width:328.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:36.0pt;font-family:Impact'>Expression</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard Input</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'> Standard Output</span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Professor Conrad loves to work with expressions and we all know that there are many well known techniques to evaluate expressions. After teaching his class about evaluating expression he gives his class a bit tricky assignment. As usual being the most brilliant programmer of the class, your classmates have grasped you to do the assignment for them. The assignment is stated below:</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>You are given an expression consisting only brackets, blank spaces and +/- operators and also some digits. You have to place the given digits in the blank spaces in such a way so that the value of the expression is maximum.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h5><span class=StyleArial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'>First line of the input file contains an integer N (N&lt;=505) which denotes how many sets of inputs will be there. The description of each set is given below.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>First line of each set contains a correct expression and the second line contains a sequence of digits. You can put any of this one of these digits in the blank spaces of the expression. In the input the blank spaces are denoted with # characters. You can assume that (a) The number of # signs in the expression and the number of given digits will be equal (b) There will be maximum eight consecutive # signs in the given expression (c) The length of the expression will be less than  200</p><p class=MsoNormal>&nbsp;</p><h4><span class=StyleArial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'>For each set of input produce three lines of output. First line contains the serial of output, the second line contains the expression which produces maximum value and the third line contains this maximum value. If more than one expression produces maximum value then output the lexicographically smallest one. You can assume that (a) the maximum value of the expression will fit in a 32-bit signed integer (b) Numbers in the expression can have leading zeroes.   </p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input                             Output for Sample Input</span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none'><tr><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><pre><b><span style='font-size:12.0pt'>3</span></b></pre><pre><b><span
  style='font-size:12.0pt'>##-(##+###)</span></b></pre><pre><b><span
  style='font-size:12.0pt'>3333333</span></b></pre><pre><b><span
  style='font-size:12.0pt'>#+#</span></b></pre><pre><b><span style='font-size:
  12.0pt'>31</span></b></pre><pre><b><span style='font-size:12.0pt'>#-#</span></b></pre><pre><b><span
  style='font-size:12.0pt'>31</span></b></pre></td><td width=309 valign=top style='width:231.85pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1:</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>33-(33+333)</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>-333</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2:</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1+3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 3:</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3-1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'>Problem setter: Shahriar Manzoor, Special Thanks: Derek Kisman</p></body></html>
______________________________________________________
2194||||||false||||||
<html><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=Generator content="Microsoft Word 11 (filtered)"><title>The 2004 ACM Asia Programming Contest Dhaka, sponsored by IBM </title><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Beaconsfield Bold";}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Bard Hollow";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h6
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:41.0pt;
	page-break-after:avoid;
	font-size:54.5pt;
	font-family:Algerian;
	position:relative;
	top:5.5pt;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:none;
	font-size:11.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Beaconsfield Bold";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.StyleArial16pt
	{font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:595.45pt 841.7pt;
	margin:.9in .7in .6in .7in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body lang=EN-US link=blue vlink=purple><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none'><tr><td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><span style='font-size:12.0pt;
  font-family:"Times New Roman"'><br clear=all style='page-break-before:always'></span><p class=MsoNormal align=center style='text-align:center'><b><span style='font-size:72.0pt;font-family:Arial'>E</span></b></p></td><td width=438 valign=top style='width:328.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:36.0pt;font-family:Impact'>The Luncheon</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard Input</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'> Standard Output</span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Karim and Rahim go to the same restaurant once every day to have lunch. They both have their own list of favorite dishes but they dont necessarily eat their favorite dishes at lunch. The restaurant they visit have <b>N</b> dishes in total. Karim and Rahim choose a dish randomly (They both eat the same dish) from the <b>N</b> dishes and have it for lunch. They go to that restaurant regularly for <b>D</b> days. You have to find the probability that the number of days for which the dish chosen is a favorite of Rahim's is exactly twice the number of days for which the dish chosen is a favorite of Karim's.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h5><span class=StyleArial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span class=StyleArial16pt><span style='font-family:"Times New Roman";font-weight:normal'>The input file contains at most </span></span><span class=StyleArial16pt><span style='font-family:"Times New Roman"'>600</span></span><span class=StyleArial16pt><span style='font-family:"Times New Roman";font-weight:
normal'> sets of inputs. The description of each set is given below:</span></span></p><p class=MsoNormal style='text-align:justify'><span class=StyleArial16pt><span style='font-family:"Times New Roman";font-weight:normal'>&nbsp;</span></span></p><p class=MsoNormal style='text-align:justify'><span class=StyleArial16pt><span style='font-family:"Times New Roman";font-weight:normal'>Each set starts with an integer N (0&lt;N&lt;37) which denotes the total number of dishes. Dishes are identified by integers from 1..N.  Next line starts with an integer S (0&#8804;S&lt;N) which denotes the total number of Karims favorite dishes. Next S distinct integers are favorite dishes of Karim. All these integers are within the range (1..N). The Next line starts with an integer T (0&#8804;T&lt;N) which denotes the total number of Rahims favorite dishes. Next T distinct integers are favorite dishes of Rahim. All these integers are also within the range (1..N). </span></span>The next line contains an integer D (0&lt;D&lt;101) which indicates how many days Karim and Rahim goes to the restaurant.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Input is terminated by a line containing a single zero.</p><p class=MsoNormal>&nbsp;</p><h4><span class=StyleArial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'>For each set of input produce one line of output. This line contains the serial of output followed by the desired probability rounded to five digits after the decimal point. Look at the output for sample input for details. There is no special judge for this problem. But the judge data is such that errors less than <sub><img width=51 height=21 src="http://livearchive.onlinejudge.org/external/21/p2194.gif></sub>will be ignored. But please make sure when the answer very near to zero you print it as 0.00000 and not as -0.00000. </p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input                             Output for Sample Input</span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none'><tr><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><pre><b>6</b></pre><pre><b>3 1 2 3</b></pre><pre><b>3 4 5 6</b></pre><pre><b>18</b></pre><pre><b>7</b></pre><pre><b>3 1 2 3</b></pre><pre><b>3 4 5 6</b></pre><pre><b>20</b></pre><pre><b>8</b></pre><pre><b>3 1 2 3</b></pre><pre><b>3 2 3 4</b></pre><pre><b>20</b></pre><pre><b>0</b></pre></td><td width=309 valign=top style='width:231.85pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:10.0pt;font-family:"Courier New"'>Case 1: 0.07082</span></b></p><p class=MsoNormal><b><span style='font-size:10.0pt;font-family:"Courier New"'>Case 2: 0.02592</span></b></p><p class=MsoNormal><b><span style='font-size:10.0pt;font-family:"Courier New"'>Case 3: 0.01501</span></b></p><p class=MsoNormal><b><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'>Problem setter: Shahriar Manzoor, Special Thanks: Derek Kisman</p></body></html>
______________________________________________________
2195||||||false||||||
<html><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=Generator content="Microsoft Word 11 (filtered)"><title>The 2004 ACM Asia Programming Contest Dhaka, sponsored by IBM </title><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Beaconsfield Bold";}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Bard Hollow";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h6
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:41.0pt;
	page-break-after:avoid;
	font-size:54.5pt;
	font-family:Algerian;
	position:relative;
	top:5.5pt;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:none;
	font-size:11.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Beaconsfield Bold";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.StyleArial16pt
	{font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:595.45pt 841.7pt;
	margin:.9in .7in .6in .7in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body lang=EN-US link=blue vlink=purple><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none'><tr><td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><span style='font-size:12.0pt;
  font-family:"Times New Roman"'><br clear=all style='page-break-before:always'></span><p class=MsoNormal align=center style='text-align:center'><b><span style='font-size:72.0pt;font-family:Arial'>F</span></b></p></td><td width=438 valign=top style='width:328.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:36.0pt;font-family:Impact'>Counting Zeroes</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard Input</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'> Standard Output</span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>In our daily life we often meet some stupid persons. They tend to do things by hand which can only be done with computers. Our friend Hashmat is such a person and now he is counting with abacus, pencil and paper the summation of trailing zeroes of a particular number in all possible number systems (Of course, I am talking about the common number system like decimal, binary, hexadecimal or n-based number system).</p><p class=MsoNormal style='text-align:justify'><img width=204 height=200 src="http://livearchive.onlinejudge.org/external/21/p2195a.gif align=left hspace=12></p><p class=MsoNormal style='text-align:justify'>We the average intelligent peoples know what a number system is. Our daily life number system is the decimal (10-based) number system, our corporate life number system is the binary (2-based) number system. A number may or may not have trailing zeroes in certain number system. For example in decimal number system 102<b>0</b><sub>10</sub> (It means 1020 is a number whose base is 10) has 1 trailing zero but in hexadecimal number system 102<b>0</b><sub>10 </sub>has no trailing zeroes. Let us create a function <i>fzero(n,b)</i>, which actually denotes the number of trailing zeroes of n in b-based number system. So fzero(102<b>0</b><sub>10</sub>,10)=1 and fzero(102<b>0</b><sub>10</sub>,16)=0. Although for a certain number and certain base the task is trivial but it is very time consuming to do it for all possible number systems with the help of only pencil and paper. So your job is now to help Hashmat, so that he can complete this task and do something meaningful in life. In other words given the value of n your job is to find out the value of:</p><p class=MsoNormal align=center style='text-align:center'><sub><img width=110 height=54 src="http://livearchive.onlinejudge.org/external/21/p2195a.gif></sub></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'>The input file contains at most 400 lines of inputs. Each line contains a decimal integer n (0&lt;n&lt;=10<sup>13</sup>).</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Input is terminated by a line containing a single zero.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h4 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt'>Output </span></span></h4><h4 style='text-align:justify'>For each line of input produce one line of output. This line contains the input number followed by the value of <sub><img width=110 height=54 src="http://livearchive.onlinejudge.org/external/21/p2195a.gif></sub>.</h4><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input                               Output for Sample Input</span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none'><tr><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><pre><b>10</b></pre><pre><b>20</b></pre><pre><b>0</b></pre></td><td width=309 valign=top style='width:231.85pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>10 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>20 6</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'>Problem setter: Shahriar Manzoor, Special Thanks: Derek Kisman</p></body></html>
______________________________________________________
2196||||||false||||||
<html><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=Generator content="Microsoft Word 11 (filtered)"><title>The 2004 ACM Asia Programming Contest Dhaka, sponsored by IBM </title><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Beaconsfield Bold";}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Bard Hollow";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h6
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:41.0pt;
	page-break-after:avoid;
	font-size:54.5pt;
	font-family:Algerian;
	position:relative;
	top:5.5pt;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:none;
	font-size:11.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Beaconsfield Bold";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.StyleArial16pt
	{font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:595.45pt 841.7pt;
	margin:.9in .7in .6in .7in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body lang=EN-US link=blue vlink=purple><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none'><tr><td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><span style='font-size:12.0pt;
  font-family:"Times New Roman"'><br clear=all style='page-break-before:always'></span><p class=MsoNormal align=center style='text-align:center'><b><span style='font-size:72.0pt;font-family:Arial'>G</span></b></p></td><td width=438 valign=top style='width:328.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:36.0pt;font-family:Impact'>Multiplication</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard Input</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'> Standard Output</span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Multiplying factors is one of the most tiresome jobs of algebra, so now you might want to take the help of computers to do that. In this problem you will have to deal with expression of the form<sub><img width=276 height=24 src="http://livearchive.onlinejudge.org/external/21/p2196a.gif></sub>, given the value of n. To be more specific for n=2 you have to find the length of the output<sub><img width=144 height=24 src="http://livearchive.onlinejudge.org/external/21/p2196a.gif></sub>, for n=3 you have to find the length of the output <sub><img width=340 height=25 src="http://livearchive.onlinejudge.org/external/21/p2196a.gif></sub> and so on. In plain text mode this type of strings can be outputted in three lines as:</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><u><span style='font-family:"Courier New"'>1234567890123456789012345678901234567890 //This is not output</span></u></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:"Courier New"'> 3  2              </span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:"Courier New"'>x +x (a +a +a )+x(a a +a a +a a )+a a a </span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:"Courier New"'>       1  2  3     1 2  1 3  2 3   1 2 3 </span></b></p><p class=MsoNormal style='text-align:justify'>So the length of the result is 40 when n=3. As with growth of n the length grows very fast so you dont need to output the length but output modulo 10000 value of the length only. For your convenience you might want to notice that for n=10 the initial part of the multiplication answer is:</p><p class=MsoNormal style='text-align:justify'><span style='font-size:8.0pt;
font-family:"Courier New"'> 10  9                                  8</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:8.0pt;
font-family:"Courier New"'>x  +x (a +a +a +a +a +a +a +a +a +a  )+x (a a +a a +a a +a a +a a +a a + a a +a a +a a  )+  </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:8.0pt;
font-family:"Courier New"'>        1  2  3  4  5  6  7  8  9  10      1 2  1 3  1 4  1 5  1 6  1 7   1 8  1 9  1 10</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'>The input file contains at most 6005 lines of inputs.  Each line consists of a single integer n (0&lt;n&#8804;1000000000). Here n means the number of factors that are to be multiplied.</p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal>Input is terminated by a line where the value of n is zero. This line should not be processed.</p><p class=MsoNormal>&nbsp;</p><h4><span class=StyleArial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'>For each line of input produce one line of output. If the length of the multiplied string is t then for each input you should output the serial of output followed by t % 10000. Please note that you dont need to put any unnecessary brackets and also note that you dont need to output terms like x<sup>1</sup>. Show the power of x only when it is greater than 1.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input                             Output for Sample Input</span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none'><tr><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  11.0pt;font-family:"Courier New"'>1</span></b></p><p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  11.0pt;font-family:"Courier New"'>2</span></b></p><p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  11.0pt;font-family:"Courier New"'>3</span></b></p><p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  11.0pt;font-family:"Courier New"'>4</span></b></p><p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  11.0pt;font-family:"Courier New"'>5</span></b></p><p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  11.0pt;font-family:"Courier New"'>8</span></b></p><p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  11.0pt;font-family:"Courier New"'>12</span></b></p><p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  11.0pt;font-family:"Courier New"'>0</span></b></p></td><td width=309 valign=top style='width:231.85pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: 4</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 16</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 3: 40</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 4: 92</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 5: 208</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 6: 2332</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Case 7: 9439</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'>Problem setter: Shahriar Manzoor, Special Thanks: Derek Kisman</p></body></html>
______________________________________________________
2197||||||false||||||
<html><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=Generator content="Microsoft Word 11 (filtered)"><title>The 2004 ACM Asia Programming Contest Dhaka, sponsored by IBM </title><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Beaconsfield Bold";}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Bard Hollow";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h6
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:41.0pt;
	page-break-after:avoid;
	font-size:54.5pt;
	font-family:Algerian;
	position:relative;
	top:5.5pt;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:none;
	font-size:11.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Beaconsfield Bold";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.StyleArial16pt
	{font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:595.45pt 841.7pt;
	margin:.9in .7in .6in .7in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body lang=EN-US link=blue vlink=purple><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none'><tr><td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><b><span style='font-size:72.0pt;font-family:Arial'>H</span></b></p></td><td width=438 valign=top style='width:328.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:36.0pt;font-family:Impact'>Paint the Roads</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard Input</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'> Standard Output</span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><img width=456 height=306 src="http://livearchive.onlinejudge.org/external/21/p2197.jpg align=left hspace=12>In a country there are n cities connected by m one way roads. You can paint any of these roads. To paint a road it costs d unit of money where d is the length of that road. Your task is to paint some of the roads so that the painted roads can be partitioned into some disjoint cycles such that every vertex appears in exactly k of these disjoint cycles. But you have to minimize the costs of painting these roads.</p><p class=MsoNormal align=center style='text-align:center'>&nbsp;</p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'>First line of the input contains T the number of test case. Then following lines contains T Test cases.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Each case starts with a line containing 3 integers n (1 &#8804; n &#8804; 40), m (1 &#8804; m &#8804; 2000) and k (1 &#8804; k and 1&#8804;k*n&#8804;100). Next m lines contain description of m roads. Each line contains three integers f, t (0 &#8804; f, t &lt;n and f &#8800; t) and d (0 &#8804; d &lt; 100). That means there is a road of d length from city f to city t. You can assume that there will be at most one road in one direction between two cities.</p><p class=MsoNormal>&nbsp;</p><h4><span class=StyleArial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'>For each test case output contains 1 integer denoting the minimum unit of money needed to paint roads. In the case it is impossible to paint the roads maintaining the constraints output -1.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input                             Output for Sample Input</span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none'><tr><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4 8 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 0 2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 3 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 2 2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 5</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 0 6</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 3 5</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 1 6</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4 8 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 0 10</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 3 10</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 2 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 10</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 0 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 3 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 1 10</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4 8 2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 0 2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 3 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 2 2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 5</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 0 6</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 3 5</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 1 6</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 4 1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 5</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 0 6</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 7</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 0 8</span></b></p><pre><b><span style='font-size:11.0pt'>&nbsp;</span></b></pre></td><td width=309 valign=top style='width:231.85pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>6</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>28</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>-1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'>Problem setter: Abdullah al Mahmud, Special Thanks: Derek Kisman</p></body></html>
______________________________________________________
2198||||||false||||||
<html><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=Generator content="Microsoft Word 11 (filtered)"><title>The 2004 ACM Asia Programming Contest Dhaka, sponsored by IBM </title><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Beaconsfield Bold";}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Bard Hollow";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h6
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:41.0pt;
	page-break-after:avoid;
	font-size:54.5pt;
	font-family:Algerian;
	position:relative;
	top:5.5pt;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:none;
	font-size:11.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Beaconsfield Bold";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.StyleArial16pt
	{font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:595.45pt 841.7pt;
	margin:.9in .7in .6in .7in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body lang=EN-US link=blue vlink=purple><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none'><tr><td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><b><span style='font-size:72.0pt;font-family:Arial'>I</span></b></p></td><td width=438 valign=top style='width:328.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:36.0pt;font-family:Impact'>Protecting Zonk</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard Input</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'> Standard Output</span></p></td></tr></table></div><p style='text-align:justify'><img width=360 height=278 src="http://livearchive.onlinejudge.org/external/21/p2198.jpg align=left hspace=12>In a star system far, far away, there are two civilised planets: Zonq and Clunq. Zonq is a lovely planet with plenty of natural resources and its inhabitants, the zonq-ians, developed into a peace-loving people, with high moral standards and a rich culture of arts, sciences and all things nice. Clunq, on the other hand, is a cold, dark planet where the resources are scarce, and its inhabitants, the clunq-ons, struggle for their existence from the day they are born. It is no wonder they developed into strong fighters, and martial arts are their main form of culture.</p><p style='text-align:justify'>As always happens in the universe, at some point in their development the clunq-ons invented space exploration, and now they are on the verge of loading their space-ships with warriors to conquer Zonq. Although the zonq-ians developed mathematics to a very high level (they factorize million digit numbers for breakfast and the proof of Fermat's Last Theorem is taught in elementary school), they never bothered to tire themselves with such mundane things as computers and informatics. So now they need your help to defend the planet.</p><p style='text-align:justify'>Zonq consists of a number of villages connected by roads. Since the zonq-ians hate physical labour, they built just enough roads to insure that all villages are mutually connected, directly or indirectly, but not one road more. When the clunq-ons invade, they will always land on a road, halfway between two villages, and spread out from there. To defend the roads, the zonq-ians can place guard robots in their villages. There are two types: soldier-bots and sergeant-bots. A soldier-bot, when placed in a village, protects all roads connected to that village. A sergeant-bot is more powerful: it protects the roads connected to the village it is placed in, but also all roads connected to the villages that are direct neighbors to it. Both types of robot come at a price, and it's your task to assign robots to villages such that: a) all roads are protected, b) the total cost of the robots is as low as possible.</p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p style='text-align:justify'>There are several scenarios. Each scenario starts with three numbers on a line by it self: N (1 &#8804; N &#8804; 10000), the number of villages, C1 (0 &#8804; C1 &#8804; 1000), the cost of a soldier-bot, and C2 (0 &#8804; C2 &#8804; 1000), the cost of a sergeant-bot. For the sake of abstraction, the villages are numbered from 1 to N. Then follow N-1 lines containing two numbers V1 (1 &#8804; V1 &#8804; N) and V2 (1 &#8804; V2 &#8804; N)., each defining a road between two villages, numbered V1 and V2, respectively. No road is mentioned twice, and all roads together span all villages.</p><p style='text-align:justify'>A line with three zeros marks the end of the input and should not be processed.</p><h4><span class=StyleArial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p style='text-align:justify'>For each scenario in the input, print just one number on a line by it self: the minimal cost of protecting Zonq.</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input                             Output for Sample Input</span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none'><tr><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>5 30 50</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 4</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4 5</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>9 20 30</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 2</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 4</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4 5</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4 8</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>5 6</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>5 7</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>8 9</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>6 100 500</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 3</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>3 4</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4 5</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>4 6</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>0 0 0</span></b></p><pre><b><span style='font-size:11.0pt'>&nbsp;</span></b></pre></td><td width=309 valign=top style='width:231.85pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>50</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>50</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>200</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'>Problem setter: Joachim Wulff, Special Thanks: Abdullah al Mahmud</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>PS. How were the zonq-ians able to utilize robots, if they never bothered to build computers? Well, that's a stupid question: they called 0800-RENT-A-BOT, of course! How else do you think they hired you, in the first place?</p></body></html>
______________________________________________________
2199||||||false||||||
<html><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=Generator content="Microsoft Word 11 (filtered)"><title>The 2004 ACM Asia Programming Contest Dhaka, sponsored by IBM </title><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Beaconsfield Bold";}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Bard Hollow";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:normal;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h6
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:41.0pt;
	page-break-after:avoid;
	font-size:54.5pt;
	font-family:Algerian;
	position:relative;
	top:5.5pt;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:none;
	font-size:11.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	page-break-after:avoid;
	font-size:20.0pt;
	font-family:"Beaconsfield Bold";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.StyleArial16pt
	{font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page Section1
	{size:595.45pt 841.7pt;
	margin:.9in .7in .6in .7in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body lang=EN-US link=blue vlink=purple><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none'><tr><td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><b><span style='font-size:72.0pt;font-family:Arial'>J</span></b></p></td><td width=438 valign=top style='width:328.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:36.0pt;font-family:Impact'>Battle</span><span style='font-size:36.0pt;font-family:Impact'> of the Triangle</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard Input</span></p><p class=MsoNormal align=center style='text-align:center'><b><span style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'> Standard Output</span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>It is now year 2020, people dont install games in their hard disk now as they only play online games. Battle of the triangle has evolved as the most popular online game now. The game is played between two armies: One army is controlled by 100 players from one city and another army is controlled by another 100 player from another city.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>At the start of the game there is a toss. The winner of the toss is marked Team A and the loser is marked team B. The battle field is already generated for the two teams. Battle field means a two dimensional plane where positions of the soldiers are given by two dimensional Cartesian Coordinate System and position of the tanks are also given by two dimensional Cartesian Coordinate System. There are three boundary lines which create a triangle and everything inside the triangle belongs to Team A and everything in the reciprocal regions of the triangle belongs to team B, as shown in the picture below. The other three regions are neutral regions. Team A can move the boundary lines to select his own triangle. But of course he cannot rotate the boundary lines.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><div align=right><table class=MsoTableGrid border=0 cellspacing=0 cellpadding=0 align=right style='border-collapse:collapse;margin-left:6.75pt;margin-right:6.75pt'><tr><td width=369 valign=top style='width:276.7pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=right style='text-align:right'><img width=370 height=280 src="http://livearchive.onlinejudge.org/external/21/p2199a.gif></p></td></tr><tr><td width=369 valign=top style='width:276.7pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
  font-family:Arial'>Figure: Dark Gray is the region of A, Light Gray is the region of B and white is the neutral region.</span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'>There is a central server where the players have to connect to play this game and it is already mentioned that each team consists of 100 players. Each team has a Captain. The captain of Team A initially selects the three boundary lines. When the boundary lines are selected the server has to give the Captain of Team A two information: The difference between soldier number of Team A and Team B and the difference between the tank number of Team A and Team B so that the captain can rethink his strategy.  But as many teams all around the world play at the same time using the same battle field so the server has to answer many queries simultaneously. Your job is to write a program that does this job very efficiently.</p><p class=MsoNormal style='text-align:justify'> </p><h5><span class=StyleArial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'>The input file contains several sets of inputs. The description of each set is given below:</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Each set starts with three integers S, T and Q. Here S (0&lt;S&#8804;50000) is the total number of soldiers in the map, T (0&lt;T&#8804;50000) is the total number of Tanks in the map and Q (0&lt;Q&#8804;10000) is the total number of queries the server has to handle. Each of the next S lines contain two integers x<sub>i</sub>, y<sub>i  </sub>(|x<sub>i</sub>|, |y<sub>i</sub>|&#8804;10000000) which denotes the Cartesian coordinates of the soldiers. Each of the next T lines contains two integers x<sub>j</sub>, y<sub>j  </sub>(|x<sub>j</sub>|, |y<sub>j</sub>|&#8804;10000000) which denotes the coordinates of the tanks. These lines are followed by 3Q lines as each query consists of three lines of inputs. First line contains three integers<sub><img width=64 height=23 src="http://livearchive.onlinejudge.org/external/21/p2199a.gif></sub>, second line contains three integers <sub><img width=69 height=23 src="http://livearchive.onlinejudge.org/external/21/p2199a.gif></sub> and third line contains three integers<sub><img width=71 height=24 src="http://livearchive.onlinejudge.org/external/21/p2199a.gif></sub>. These denotes that captain of team A has placed the first boundary line along the straight line <sub><img width=127 height=23 src="http://livearchive.onlinejudge.org/external/21/p2199a.gif></sub> the second boundary line along the straight line along the straight line <sub><img width=128 height=23 src="http://livearchive.onlinejudge.org/external/21/p2199a.gif></sub> and the third boundary line along the straight line <sub><img width=127 height=24 src="http://livearchive.onlinejudge.org/external/21/p2199a.gif></sub>. So the region for team A is the triangle formed by these three straight lines and the region for team B is three reciprocal regions of this triangle. For each query you have to find the soldier number difference between team A and B and tank number difference between team A and team B. The figure below corresponds to the sample input. You can of course assume that in a set of input the first line of each query are parallel to one another, and this is true for second lines of each query and third line of each query as well.  You can also assume that (<sub><img width=181 height=23 src="http://livearchive.onlinejudge.org/external/21/p2199a.gif></sub>), <sub><img width=155 height=23 src="http://livearchive.onlinejudge.org/external/21/p2199a.gif></sub>, no two lines in a query are parallel each other, the three lines in a query are not concurrent and no soldier and no tank will be on any of the three boundary lines.</p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal>Input is terminated by a case where S=T=Q=0. This case should not be processed. The input file size is around 6 MB. This will give you some idea on how efficient your program needs to be.</p><p class=MsoNormal>&nbsp;</p><h4><span class=StyleArial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'>For each set of input produce (Q+1) lines of outputs. First line contains the battle field serial. Each of the next Q lines contains output for one query. For each query output in a single line the serial of the query followed by two integers DS and DT separated by a single space. Here DS is the difference of number of soldiers between team A and team B, and DT is the difference of number of tanks between team A and team B. Look at output for sample input for details. Although this problem does not have multiple answers, due to unstable behavior of floating-point number is linux a difference of one between judge solution and contestant solution will be accepted. So there is a special judge for this problem.</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input                             Output for Sample Input</span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none'><tr style='height:42.7pt'><td width=307 rowspan=2 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:42.7pt'><pre><b>8 5 2</b></pre><pre><b>-1 8</b></pre><pre><b>-7 3</b></pre><pre><b>-2 1</b></pre><pre><b>-2 -1</b></pre><pre><b>-5 -2</b></pre><pre><b>6 -1</b></pre><pre><b>2 -4</b></pre><pre><b>-4 -5</b></pre><pre><b>1 7</b></pre><pre><b>1 1</b></pre><pre><b>3 4</b></pre><pre><b>-6 5</b></pre><pre><b>-12 -6</b></pre><pre><b>2 -2 10</b></pre><pre><b>-2 6 6</b></pre><pre><b>-5 -3 15</b></pre><pre><b>1 -1 5</b></pre><pre><b>1 -3 -3</b></pre><pre><b>5 3 -15</b></pre><pre><b>0 0 0</b></pre><pre><b>&nbsp;</b></pre></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt;height:42.7pt'><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Battle Field 1:</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Query 1: 1 -1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>Query 2: 1 -1</span></b></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p></td></tr><tr style='height:107.9pt'><td width=336 valign=top style='width:3.5in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:107.9pt'><p class=MsoNormal><img width=321 height=247 src="http://livearchive.onlinejudge.org/external/21/p2199a.gif></p><p class=MsoNormal style='text-align:justify'>The figure above corresponds to the sample input:</p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'>Problem setter: Shahriar Manzoor</p></div></body></html>
______________________________________________________
2200||||||false||||||
<P>
It's Friday evening and Jill hates two things
which are common to all trains:

<P>

<OL>
<LI>They are always late.
</LI>
<LI>The schedule is always wrong.
</LI>
</OL>

<P>
Nevertheless, tomorrow in the early morning hours Jill will have to
travel from Hamburg to Darmstadt in order to get to the regional
programming contest.
Since she is afraid of arriving too late and being excluded from the contest
she is looking for the train which gets her to Darmstadt as early
as possible.
However, she dislikes to get to the station too early, so if there
are several schedules with the same arrival time then she will choose the
one with the latest departure time.

<P>

<P>
<BR>
Jill asks you to help her with her problem.
You are given a set of railroad schedules from which you must compute
the train with the earliest arrival time and the fastest connection from one
location to another.
One good thing: Jill is very experienced in changing trains. She can do this
instantaneously, i.e., in zero time!!!

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The very first line of the input gives the number of scenarios.
Each scenario consists of three parts.

<P>
Part one lists the names of all cities connected by the
railroads. It starts with a number <!-- MATH
 $1<C \le 100$
 -->
<SPAN CLASS="MATH">1 &lt; <I>C</I>
 &le; 100</SPAN>, followed by <SPAN CLASS="MATH"><I>C</I></SPAN> lines
containing city names. These names consist of letters.

<P>
Part two describes all the trains running during a day.
It starts with a number <!-- MATH
 $T \le 1000$
 -->
<SPAN CLASS="MATH"><I>T</I>
 &le; 1000</SPAN> followed by <SPAN CLASS="MATH"><I>T</I></SPAN> train descriptions.
Each of them consists of one line with a number <!-- MATH
 $t_i \le 100$
 -->
<SPAN CLASS="MATH"><I>t</I><SUB>i</SUB>
 &le; 100</SPAN> and <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
more lines
with a time and a city name, meaning that passengers can get on or off the
train at that time at that city.

<P>
Part three consists of three lines: Line one contains the earliest journey's
starting time, line two the name of the city where she starts,
and line three the destination city. The two cities are always different.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each scenario print a line containing ``<TT>Scenario <SPAN CLASS="MATH"><I>i</I></SPAN></TT>'',
where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of the scenario starting at 1.

<P>
If a connection exists then print the two lines
containing zero padded timestamps and locations as shown in the sample. Use
blanks to achieve the indentation.
If no connection exists on the same day (i.e., arrival before midnight)
then print a line containing
``<TT>No connection</TT>''.

<P>
After each scenario print a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
3
Hamburg
Frankfurt
Darmstadt
3
2
0949 Hamburg
1006 Frankfurt
2
1325 Hamburg
1550 Darmstadt
2
1205 Frankfurt
1411 Darmstadt
0800
Hamburg
Darmstadt
2
Paris
Tokyo
1
2
0100 Paris
2300 Tokyo
0800
Paris
Tokyo
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario 1
Departure 0949 Hamburg
Arrival   1411 Darmstadt

Scenario 2
No connection
</PRE>

<P>

______________________________________________________
2201||||||false||||||
<P>Ouroboros was a mythical snake in Ancient Egypt. It has its tail inside its mouth and continuously devours itself.<P><P><BR>Ouroboros numbers are binary numbers of <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN> bits that have the property of generating the whole set of numbers from 0 to <SPAN CLASS="MATH">2<SUP>n</SUP> - 1</SPAN> as follows: To produce all of them we place the <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN> bits wrapped in a circle so that the last bit goes before the first one. Then we can denote all <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN> different strings with <SPAN CLASS="MATH"><I>n</I></SPAN> bits starting each time with the next bit in the circle.<P>For example, for <SPAN CLASS="MATH"><I>n</I> = 2</SPAN> there are only four Ouroboros numbers. These are 0011, 0110, 1100 and 1001. For 0011, the following diagram and table depicts the process of finding all the bitstrings:<P><P><BR><DIV ALIGN="CENTER"><IMG WIDTH="173" HEIGHT="178" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2201img1.gif ALT="\epsfbox{p2201.eps}"></DIV><P><DIV ALIGN="CENTER"><BR><BR><BR></DIV><P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><B><I>k</I></B></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT><B>0011</B>0011...</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><B><I>o</I>(<I>n</I> = 2, <I>k</I>)</B></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>00</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>01</code></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>11</code></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>10</code></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY></TABLE></DIV><P>Your program will compute the function <SPAN CLASS="MATH"><B><I>o</I>(<I>n</I>, <I>k</I>)</B></SPAN>, where <SPAN CLASS="MATH"><B><I>n</I> &gt; 0</B></SPAN> and <!-- MATH
 $0 \leq k < 2^n$
 --><SPAN CLASS="MATH"><B>0 &le; <I>k</I> &lt; 2<SUP>n</SUP></B></SPAN>. This function calculates the <SPAN CLASS="MATH"><B><I>k</I></B></SPAN>-th number inside the smallest Ouroboros number of size <SPAN CLASS="MATH"><B><I>n</I></B></SPAN>-bits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input starts with a line containing the number of test cases. For each test case you will be given a line with two integers <SPAN CLASS="MATH"><B><I>n</I></B></SPAN> (<SPAN CLASS="MATH"><B>0 &lt; <I>n</I> &lt; 22</B></SPAN>) and <SPAN CLASS="MATH"><B><I>k</I></B></SPAN> (<!-- MATH
 $0\leq k < 2^n$
 --> <SPAN CLASS="MATH"><B>0 &le; <I>k</I> &lt; 2<SUP>n</SUP></B></SPAN>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For every test case your output must evaluate the function <SPAN CLASS="MATH"><B><I>o</I>(<I>n</I>, <I>k</I>)</B></SPAN> and print the result on a line by itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
2 0
2 1
2 2
2 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0
1
3
2
</PRE><P>
______________________________________________________
2202||||||false||||||
<P>The world-known gangster Vito Deadstone is moving to New York. He has a very big family there, all of them living in Lamafia Avenue. Since he will visit all his relatives very often, he is trying to find a house close to them.<P><P><BR>Vito wants to minimize the total distance to all of them and has blackmailed you to write a program that solves his problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of several test cases. The first line contains the number of test cases.<P>For each test case you will be given the integer number of relatives <SPAN CLASS="MATH"><I>r</I></SPAN> (<!-- MATH
 $0 < r < 500$
 --> <SPAN CLASS="MATH">0 &lt; <I>r</I> &lt; 500</SPAN>) and the street numbers (also integers) <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>,..., <I>s</I><SUB>i</SUB>,..., <I>s</I><SUB>r</SUB></SPAN> where they live (<!-- MATH
 $0 < s_i < 30000$
 --> <SPAN CLASS="MATH">0 &lt; <I>s</I><SUB>i</SUB> &lt; 30000</SPAN> ). Note that several relatives could live in the same street number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case your program must write the minimal sum of distances from the optimal Vito's house to each one of his relatives. The distance between two street numbers <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>j</SUB></SPAN> is <SPAN CLASS="MATH"><I>d</I><SUB>ij</SUB> = | <I>s</I><SUB>i</SUB> - <I>s</I><SUB>j</SUB>|</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
2 2 4
3 2 4 6
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2
4
</PRE><P>
______________________________________________________
2203||||||false||||||
<P>
While skimming his phone directory in 1982, Albert Wilansky, a mathematician
of Lehigh University, noticed that the telephone number of
his brother-in-law H.&nbsp;Smith had the following peculiar property: The sum of the
digits of that number was equal to the sum of the digits of the prime factors
of that number. Got it? Smith's telephone number was 493-7775. This number can
be written as the product of its prime factors in the following way:
 <!-- MATH
 \begin{displaymath}
4937775 = 3\cdot 5\cdot 5\cdot 65837
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
4937775 = 3<SUP> . </SUP>5<SUP> . </SUP>5<SUP> . </SUP>65837
</DIV><P></P>
 The sum of all digits of the telephone number is
<!-- MATH
 $4+9+3+7+7+7+5=42$
 -->
<SPAN CLASS="MATH">4 + 9 + 3 + 7 + 7 + 7 + 5 = 42</SPAN>, and the sum of the digits of its prime factors is equally
<!-- MATH
 $3+5+5+6+5+8+3+7=42$
 -->
<SPAN CLASS="MATH">3 + 5 + 5 + 6 + 5 + 8 + 3 + 7 = 42</SPAN>. Wilansky was so amazed by his discovery that he named
this type of numbers after his brother-in-law: Smith numbers.

<P>
As this observation is also true for every prime number, Wilansky
decided later that a (simple and unsophisticated) prime number is
not worth being a Smith number and he excluded them from the definition.

<P>

<P>
<BR>
Wilansky published an article about Smith numbers in the <SPAN  CLASS="textit">Two Year
  College Mathematics Journal</SPAN> and was able to present a whole collection of
different Smith numbers: For example, 9985 is a Smith number and so is 6036.
However, Wilansky was not able to give a Smith number which was larger
than the telephone number of his brother-in-law. It is your task to find
Smith numbers which are larger than 4937775.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of several test cases, the number of which you are given in
the first line of the input.

<P>
Each test case consists of one line containing a
single positive integer smaller than <SPAN CLASS="MATH">10<SUP>9</SUP></SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For every input value <SPAN CLASS="MATH"><I>n</I></SPAN>, you are to
compute the smallest Smith number which is larger than <SPAN CLASS="MATH"><I>n</I></SPAN>
and print each number on a single line. You can assume
that such a number exists.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
4937774
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4937775
</PRE>

<P>

______________________________________________________
2204||||||false||||||
<P>As every year the Canadian Lumberjack Society has just held its annual woodcutting competition and the national forests between Montreal and Vancouver are devastated. Now for the social part! In order to lay out an adequate dance floor for the evening party the organizing committee is looking for a large rectangular area without trees. Naturally, all lumberjacks are already drunk and nobody wants to take the risk of having any of them operate a chainsaw.<P><P><BR>The organizing committee has asked you to find the largest yet free rectangle which could serve as the dance floor. The area in which you should search is also rectangular and the dance floor must be entirely located in that area. Its sides should be parallel to the borders of the area. It is allowed that the dance floor is located at the borders of the area and also that trees grow on the borders of the dance floor. What is the maximum size of the dance floor?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">The Input</A>&nbsp;</FONT></H2><P>The first line of the input specifies the number of scenarios.<P>For each scenario, the first line provides the length <SPAN CLASS="MATH"><I>l</I></SPAN> and width <SPAN CLASS="MATH"><I>w</I></SPAN> of the area in meters (<!-- MATH
 $0<l,w\leq 10000$
 --> <SPAN CLASS="MATH">0 &lt; <I>l</I>, <I>w</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2204img1.gif ALT="$ \leq$"> 10000</SPAN>, both integers). Each of the following lines describes either a single tree, or a line of trees according to one of the following formats:<P><UL><LI><SPAN CLASS="MATH">1&nbsp;<I>x</I>&nbsp;<I>y</I></SPAN>, where the ``one'' characterizes a single tree, and <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> provide its coordinates in meters with respect to the upper left corner. </LI><LI><SPAN CLASS="MATH"><I>k</I>&nbsp;<I>x</I>&nbsp;<I>y</I>&nbsp;<I>dx</I>&nbsp;<I>dy</I></SPAN>, where <SPAN CLASS="MATH"><I>k</I> &gt; 1</SPAN> provides the number of trees in a line with coordinates <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>),(<I>x</I> + <I>dx</I>, <I>y</I> + <I>dy</I>),...,(<I>x</I> + (<I>k</I> - 1)<I>dx</I>, <I>y</I> + (<I>k</I> - 1)<I>dy</I>)</SPAN>. </LI><LI><code>0</code> denotes the end of the scenario. </LI></UL>The coordinates <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, <SPAN CLASS="MATH"><I>dx</I></SPAN>, and <SPAN CLASS="MATH"><I>dy</I></SPAN> are given as integers. It is guaranteed that all the trees are situated in the area, i.e. have coordinates in <SPAN CLASS="MATH">[0, <I>l</I>]&#215;[0, <I>w</I>]</SPAN>. There will be at most 1000 trees.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">The Output</A>&nbsp;</FONT></H2><P>For each scenario print a line containing the maximum size of the dance floor measured in square meters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
2 3
0
10 10
2 1 1 8 0
2 1 9 8 0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
6
80
</PRE><P>
______________________________________________________
2205||||||false||||||
<P>The Hungarian Paul Erd&#246;s (1913-1996, speak as ``Ar-dish'') not only was one of the strangest mathematicians of the 20th century, he was also one of the most famous. He kept on publishing widely circulated papers up to a very high age and every mathematician having the honor of being a co-author to Erd&#246;s is well respected.<P>Not everybody got the chance to co-author a paper with Erd&#246;s, so many people were content if they managed to publish a paper with somebody who had published a scientific paper with Erd&#246;s. This gave rise to the so-called <SPAN CLASS="textit">Erd&#246;s numbers</SPAN>. An author who has jointly published with Erd&#246;s had Erd&#246;s number 1. An author who had not published with Erd&#246;s but with somebody with Erd&#246;s number 1 obtained Erd&#246;s number 2, and so on.<P><P><BR>Today, nearly everybody wants to know which Erd&#246;s number he or she has. Your task is to write a program which computes Erd&#246;s numbers for a given set of scientists.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line of the input contains the number of scenarios.<P>The input for each scenario consists of a paper database and a list of names. It begins with the line<P><SPAN CLASS="MATH"><I>P</I>&nbsp;<I>N</I></SPAN><P>where <SPAN CLASS="MATH"><I>P</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN> are natural numbers. Following this line are <SPAN CLASS="MATH"><I>P</I></SPAN> lines containing descriptions of papers (this is the paper database). A paper appears on a line by itself and is specified in the following way:<PRE>
Smith, M.N., Martin, G., Erdos, P.: Newtonian forms of prime factors matrices
</PRE>Note that umlauts like `&#246;' are simply written as `o'. After the <SPAN CLASS="MATH"><I>P</I></SPAN> papers follow <SPAN CLASS="MATH"><I>N</I></SPAN> lines with names. Such a name line has the following format:<PRE>
Martin, G.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For every scenario you are to print a line containing a string `<TT>Scenario <SPAN CLASS="MATH"><I>i</I></SPAN></TT>' (where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of the scenario) and the author names together with their Erd&#246;s number of all authors in the list of names. The authors should appear in the same order as they appear in the list of names. The Erd&#246;s number is based on the papers in the paper database of this scenario. Authors which do not have any relation to Erd&#246;s via the papers in the database have Erd&#246;s number `<TT>infinity</TT>'.<P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
4 3
Smith, M.N., Martin, G., Erdos, P.: Newtonian forms of prime factor matrices
Erdos, P., Reisig, W.: Stuttering in petri nets
Smith, M.N., Chen, X.: First oder derivates in structured programming
Jablonski, T., Hsueh, Z.: Selfstabilizing data structures
Smith, M.N.
Hsueh, Z.
Chen, X.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Scenario 1
Smith, M.N. 1
Hsueh, Z. infinity
Chen, X. 2
</PRE><P>
______________________________________________________
2206||||||false||||||
<P>In the Ancient Caves of Mystery (ACM), scientists have found another old computer. Surprisingly it still worked. The scientists started typing text at the keyboard which was shown immediately on the computer screen. But every now and again some characters were inserted - apparently out of nowhere. After a while they noticed that only characters were inserted which they had typed before. Andrew C. Matthiews, a young and very ambitious theoretician, conjectured that the computer was connected to an interstellar computer network and the inserted characters were in fact an echo generated by some mysterious alien <EM>Echo Race</EM>. The scientists were very excited and immediately started chatting with whoever was sitting (or whatever was convenient to them) at the other side of the network.<P>They also suspected that such a system must have some finite buffer, so to avoid overloading the system they were careful to wait for a reply when ten characters were entered without remote echo.<P>Unfortunately, after several hours of work, one of the tired scientists spilled his cup of coffee all over the keyboard. That was too much for the old computer, and it just blew up and could not be revived.<P>All that the scientists can do now to verify their theory - and such prove the aliens' existence - is looking at their notes of the display contents.<P><P><BR>You are hired to check whether the scientists' notes are consistent with their theory, i.e., if a given string is an ``echo string with buffer size ten''. Here, an ``echo string'' <SPAN CLASS="MATH"><I>e</I></SPAN> is a merged version of a string <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> and its identical echo <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>. Note that the order in which the characters of <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> appear in <SPAN CLASS="MATH"><I>e</I></SPAN> is not changed. The ``buffer size ten'' means, that a character in <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> is not separated by more than nine characters from its echo in <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>.<P>Due to the sudden end of the experiment, there are three cases:<UL><LI>The system had echoed all characters when it blew up, so the string really is an echo string with buffer size ten. </LI><LI>The system blew up before it could echo all characters that were entered, but up to that point its behaviour was consistent with the theory. </LI><LI>The string cannot be completed by more output to form an echo string of buffer size ten, so the scientists must have entered too many characters at a time or their theory is wrong. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number <SPAN CLASS="MATH"><I>n</I></SPAN> of scenarios.<P>In each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines you will find one non-empty string to be examined, and it consists of letters and digits only. No line will contain more than 1000 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each scenario, print one of the following, corresponding to the three cases described above:<UL><LI><code>An echo string with buffer size ten</code> </LI><LI><code>Not an echo string, but still consistent with the theory</code> </LI><LI><code>Not consistent with the theory</code> </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
ACABCB
ABCAB
aa0123456789b
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
An echo string with buffer size ten
Not an echo string, but still consistent with the theory
Not consistent with the theory
</PRE><P>
______________________________________________________
2207||||||false||||||
<P>Fold-up patterns for solids like cubes or octahedrons can be found in many books, but without actually folding them it is hard to tell whether they will really work. We will restrict our attention to a special class of patterns.<P><P><BR><DIV ALIGN="CENTER"><IMG SRC="http://livearchive.onlinejudge.org/external/22/p2207a.gif ALT="\epsfbox{p2207a.eps}"></DIV><P><P><BR>Given a fold-up pattern built from unit squares in the plane, together with a description along what edges it should be folded in what direction, decide whether it will result in a closed surface of a solid in three dimensions. If it does, find the volume of the solid.<P>More precisely, the pattern consists of a connected set of unit squares in the plane. For any edge between connected sides you are told whether to fold forward, back, or not at all along that edge, always at right angles. If an edge of two adjacent squares in the pattern is not mentioned in the input, you may assume that the squares are not connected and can be ripped apart when folding. However, connected edges must always be folded according to the description.<P>For our purposes a closed surface is one so that every square in the pattern separates the inside from the outside. When folded, the squares of the pattern lie on a rectangular, 3-dimensional grid, and each separates a cell (cubes of side length one unit) on the inside from one on the outside. For every cell it must be clear whether it is inside or outside. The following sketch illustrates this rule in two dimensions (the ``insides'' are shaded).<P><P><BR><DIV ALIGN="CENTER"><IMG SRC="http://livearchive.onlinejudge.org/external/22/p2207a.gif ALT="\epsfbox{p2207b.eps}"></DIV><P>Note that according to our definition the second pattern in the sketch at the top of the page is a closed surface, although it rather looks like two separate cubes attached along an edge.<P>Two different squares must not occupy exactly the same position in space, though they may (and should for a closed surface) touch at edges and vertices. Make sure that the pattern does not interpenetrate itself through connected edges. Apart from that, do not worry about the process of folding, e.g. what edges are folded first or whether part of the structure is in the way for the rest.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input specifies the number of scenarios.<P>For each scenario, the first line provides the number <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2207a.gif ALT="$ \leq$"> <I>n</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2207a.gif ALT="$ \leq$"> 1000</SPAN> of squares in the pattern and the number <SPAN CLASS="MATH">0 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2207a.gif ALT="$ \leq$"> <I>e</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2207a.gif ALT="$ \leq$"> 4000</SPAN> of edges. Squares are labelled by the integers <SPAN CLASS="MATH">0</SPAN> to <SPAN CLASS="MATH">(<I>n</I> - 1)</SPAN>. The following <SPAN CLASS="MATH"><I>e</I></SPAN> lines describe one edge each using the following four numbers:<UL><LI>The two numbers <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> (with <!-- MATH
 $0\leq s_1<s_2<n$
 --><SPAN CLASS="MATH">0 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2207a.gif ALT="$ \leq$"> <I>s</I><SUB>1</SUB> &lt; <I>s</I><SUB>2</SUB> &lt; <I>n</I></SPAN>) of the squares that are joined by the edge. </LI><LI>The position <SPAN CLASS="MATH"><I>p</I></SPAN> of the square <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> with respect to the square <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> in the pattern. Here <SPAN CLASS="MATH"><I>p</I> = 0, 1, 2</SPAN>, or <SPAN CLASS="MATH">3</SPAN> mean above, to the left, below, or to the right, respectively (see sketch). </LI><LI>The number <SPAN CLASS="MATH"><I>f</I> = 0, 1, 2</SPAN> tells you to fold along the edge either not at all, or forward, or back, respectively. </LI></UL>It is guaranteed that the folded pattern fits in a cube with a side length of 40. You can also assume that the pattern is connected and can be drawn in the plane without overlapping.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each scenario print a line containing either ``<code>Not a closed surface</code>'' if the pattern does not form a closed surface or ``<code>Closed surface, volume=</code>'' and the volume as an integer if it does.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
6 5
0 2 2 1
1 2 3 1
2 3 3 1
2 4 2 1
4 5 2 0
12 11
0 3 2 1
1 5 2 1
2 3 3 1
3 4 3 1
4 5 3 2
5 6 3 1
6 7 3 1
7 8 3 1
8 9 3 2
3 10 2 1
5 11 2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Not a closed surface
Closed surface, volume=2
</PRE><P>
______________________________________________________
2208||||||false||||||
<P>This is a game of counting triangles. Short sticks of 1 or <SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2208img1.png ALT="$ \sqrt{{2}}$"></SPAN> units of length are placed onto a grid as shown in Figure 1, horizontally, vertically or diagonally. The sticks placed diagonally are allowed to cross each other.<P><DIV ALIGN="CENTER"><IMG WIDTH="588" HEIGHT="220" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2208img1.png ALT="\epsfbox{p2209a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: Basic placement patterns of sticks.</DIV><P>A random placement of short sticks on a grid creates either a pattern without any triangle or a pattern with one or more triangles as illustrated in Figure 2 where patterns (a), (b), (c), (d) and (e) have 2, 5, 12, 0 and 0 triangles respectively.<P><DIV ALIGN="CENTER"><IMG WIDTH="582" HEIGHT="320" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2208img1.png ALT="\epsfbox{p2209b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2: Sample patterns of triangles.</DIV><P>Your task is to write a program that counts the number of triangles in a pattern.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of one or more patterns of short sticks. The first line of each pattern contains the name of the pattern. Each name is an alphanumeric string of no more than 30 characters. The next line contains the number of short sticks to be placed on the grid. This is followed by pairs of integers specifying the starting and ending coordinates of each stick. The grid will not be larger than 10 by 10; i.e., the coordinates of the lower left and upper right corners are (0, 0) and (9, 9) respectively.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each pattern, the output file contains a line with the name of the pattern followed by the number of triangles found. Sample inputs and outputs for Figures 2(a) and 2(e) are illustrated below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Figure2(a)
6
3 2  2 2  2 2  1 2  3 2  2 3
2 3  1 2  2 2  2 1  2 1  3 2

Figure2(e)
2
1 1  2 2  2 2  3 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Figure2(a) 2 triangles

Figure2(e) 0 triangles
</PRE><P>
______________________________________________________
2209||||||false||||||
<P>A treasure hunt takes place in a 3-dimensional space filled with rocks and electric monsters. The space is of at most a <SPAN CLASS="MATH">10 <TT>x</TT> 10 <TT>x</TT> 10</SPAN> cubic unit block. Your spaceship is not of negligible size; it has to follow the instructions given below for navigation. Suppose you are at location marked ``<SPAN CLASS="MATH"><TT>*</TT></SPAN>" (Figure 1), you can move, in one step and one unit of time, to the center of one of the following positions:<P><OL><LI><SPAN CLASS="MATH"><I>e</I></SPAN>, <SPAN CLASS="MATH"><I>k</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>p</I></SPAN> or <SPAN CLASS="MATH"><I>v</I></SPAN> if this position is empty (or is the destination). </LI><LI><SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN>, <SPAN CLASS="MATH"><I>f</I></SPAN>, <SPAN CLASS="MATH"><I>h</I></SPAN>, <SPAN CLASS="MATH"><I>j</I></SPAN>, <SPAN CLASS="MATH"><I>l</I></SPAN>, <SPAN CLASS="MATH"><I>o</I></SPAN>, <SPAN CLASS="MATH"><I>q</I></SPAN>, <SPAN CLASS="MATH"><I>s</I></SPAN>, <SPAN CLASS="MATH"><I>u</I></SPAN>, <SPAN CLASS="MATH"><I>w</I></SPAN> or <SPAN CLASS="MATH"><I>y</I></SPAN> if this position is empty (or is the destination), and the 2 common nearest neighbors between <SPAN CLASS="MATH"><TT>*</TT></SPAN> and this position are empty too. For example, one can go to <SPAN CLASS="MATH"><I>q</I></SPAN> if <SPAN CLASS="MATH"><I>p</I></SPAN>, <SPAN CLASS="MATH"><I>q</I></SPAN>, and <SPAN CLASS="MATH"><I>n</I></SPAN> are empty. </LI><LI><SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH"><I>g</I></SPAN>, <SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>r</I></SPAN>, <SPAN CLASS="MATH"><I>t</I></SPAN>, <SPAN CLASS="MATH"><I>x</I></SPAN> or <SPAN CLASS="MATH"><I>z</I></SPAN> if this position is empty (or is the destination), and the 6 common neighbors between <SPAN CLASS="MATH"><TT>*</TT></SPAN> and this position are empty too. For example, one can go to <SPAN CLASS="MATH"><I>z</I></SPAN> if <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>p</I></SPAN>, <SPAN CLASS="MATH"><I>q</I></SPAN>, <SPAN CLASS="MATH"><I>v</I></SPAN>, <SPAN CLASS="MATH"><I>w</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN> and <SPAN CLASS="MATH"><I>z</I></SPAN> are empty. </LI></OL><P><DIV ALIGN="CENTER"><IMG WIDTH="394" HEIGHT="439" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2209a.gif ALT="\epsfbox{p2210a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: A 3-dimensional point and its neighbors shown in 3 layers of cubic blocks.</DIV><P>The treasure is placed in the destination block. The homes of electric monsters are randomly located. Each home has exactly one monster and is located at the center of a block. Each monster will attack objects that it can see in an empty block. An empty block is visible if all its eight corners and center can be seen; i.e., it is not blocked by rocks or the destination block. The size of a rock is 1 cubic unit and the destination block is safe from monster attack. Each attack cycle takes one unit of time and aims at the center of an empty block where your spaceship is located. For example, consider the top layer in Figure 1. If all the locations are empty except <SPAN CLASS="MATH"><I>a</I></SPAN> (a cubic rock) and <SPAN CLASS="MATH"><I>d</I></SPAN> (a monster in the block center), the monster will be able to see <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN>, <SPAN CLASS="MATH"><I>e</I></SPAN>, <SPAN CLASS="MATH"><I>f</I></SPAN>, <SPAN CLASS="MATH"><I>g</I></SPAN>, <SPAN CLASS="MATH"><I>h</I></SPAN> and <SPAN CLASS="MATH"><I>i</I></SPAN> but not <SPAN CLASS="MATH"><I>b</I></SPAN>. The power of an electric blow from each monster follows an exponential function as follows:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>power</I> = 2<I>e</I><SUP>-d<SUP>2</SUP>/<IMG WIDTH="19" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2209a.gif ALT="$\scriptstyle \sigma^{{2}}$"></SUP></DIV><P></P>where <SPAN CLASS="MATH"><I>d</I></SPAN> is the distance and <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2209a.gif ALT="$ \sigma$"></SPAN> is the monster size. The distance <SPAN CLASS="MATH"><I>d</I></SPAN> is computed from the center of one block to the center of the other. When the accumulated electric exposure of a trip exceeds or equals to 1, serious damage will be done to your spaceship and you are out of the game. Hence, one must determine if there is a safe pass from the starting point to the ending point where the treasure is located. In order to minimize the damage done to the spaceship, one must compute the safest pass that minimizes the total exposure of electric attacks. When there are more than one safest passes, one should output the pass with the shortest time spanned. If there are more than one such passes, printing out one pass is good enough.<P><P><BR>You should note that:<P><UL><LI>Time efficiency is an important consideration in this problem. </LI><LI>To handle the problem of truncation error in real number representation, the accuracy of computation will only require 4 digits after the decimal point. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of one or more maze patterns as illustrated in Figure 2 (and in the Sample Input below). The first line of each pattern contains the name of the maze. Each name is an alphanumeric string of no more than 30 characters. The next line contains the dimension specification in the order of X, Y and Z. The coordinate origin starts from (0,0,0). The input continues with one or more layers of specifications of content in each cubic volume where `tt -2' represents the destination, `<TT>-1</TT>' represents a rock, 0 represents an empty space, and any non-zero positive integer represents the size of a monster present in that location. The specification starts from the top layer to the bottom layer. At each layer, it starts from the top row to the bottom row as shown in the Sample Input. Each pattern ends with the starting and ending positions of the hunt.<P><DIV ALIGN="CENTER"><IMG WIDTH="829" HEIGHT="563" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2209a.gif ALT="\epsfbox{p2210b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2: Two examples of input mazes.</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each maze pattern, the output should contain a line with the name of the maze followed by the accumulated electric exposure of the safe path. Four precision digits after the decimal point are required; i.e., the other digits after the decimal point should be truncated. If there is no safe path, a negative number should be printed. Otherwise, the safe path coordinates should be printed as shown in the Sample Output. Each line should start with a <SPAN CLASS="MATH">&lt;</SPAN>tab<SPAN CLASS="MATH">&gt;</SPAN> and is followed by exactly 4 coordinate points.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Figure2(a)

3 3 3

-1 -1 -2
-1 -1 -1
-1 -1 -1

-1 -1  0
-1 -1 -1
-1 -1 -1

-1 -1  0
-1 -1  0
 0  0  0

0 0 0
2 2 2


Figure2(b)

4 3 3

 0  0 -2  0
 0  0  0  0
 0  0  0  0

 0  0  0  0
 0  0  3  0
 0  0  0  0

 0  0  0  0
-1  0  0  0
 0  0 -1  0

 0 0 0
 2 2 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Figure2(a)
    0.0000
    (0,0,0) (1,0,0) (2,0,0) (2,1,0)
    (2,2,0) (2,2,1) (2,2,2)

Figure2(b)
    -1
</PRE><P>
______________________________________________________
2210||||||false||||||
<P>A major shopping complex opens in Singapore recently. As the operating company is new to the region, it wants to study the buying behavior of consumers. You are appointed as a data analyst by the company to collect statistics on the purchasing pattern of consumers, and to present statistical evidence from the data to be collected from sales counters over a period. In particular, the company is interested in finding the set of items (goods) purchased in one transaction by customers.<P>The company keeps a log of all the transactions made by consumers over a period of time. Each transaction consists of a set of items (goods) purchased by a consumer. (For simplicity, we ignore item quantity, price and other information from the transaction.) Given the transaction log, the company wants to determine the collection of <SPAN CLASS="textit">itemsets</SPAN> that meet a certain <SPAN CLASS="textit">support factor threshold</SPAN>. Each itemset informs the company of the set of items that a consumer frequently buys together.<P>An itemset <SPAN CLASS="MATH"><I>X</I></SPAN> is a subset of a transaction in the transaction log. The support factor of <SPAN CLASS="MATH"><I>X</I></SPAN> is the ratio <SPAN CLASS="MATH"><I>A</I>/<I>B</I></SPAN> (between 0 and 1) where <SPAN CLASS="MATH"><I>A</I></SPAN> is the number of times that <SPAN CLASS="MATH"><I>X</I></SPAN> occurs as a subset among all the transactions in the log, and <SPAN CLASS="MATH"><I>B</I></SPAN> is the total number of transactions in the log. The company is interested in those itemsets whose support factor is greater than or equal to a certain threshold.<P>For practical purpose, we assume that the total number of items sold by the company is no more than 100, and that the maximum number of items that can be purchased in a single transaction is limited to 10.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of lines of transactions followed by lines of support factor thresholds. Each line of transaction represents the set of items purchased by a customer in a single transaction. The format is as follows:<P><P><BR><TT><SPAN CLASS="MATH">&lt; <I>Item</I> - 1 &gt;</SPAN>,<SPAN CLASS="MATH">&lt; <I>Item</I> - 2 &gt;</SPAN>,...,<SPAN CLASS="MATH">&lt; <I>Item</I> - <I>n</I> &gt;</SPAN></TT><P><P><BR>Each item (which is of no more than 10 characters) in a transaction is separated by a comma, except the last one. The items in a transaction are ordered lexicographically. It is further assumed that no item will repeat itself in a single transaction.<P>The different support factor thresholds follow the transactions after an empty line. Each threshold is a value between 0 and 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each support factor threshold given in the input file, your program should produce the itemsets whose support factor is greater than or equal to the threshold. The format is as follows: For each threshold, the first outline line displays the threshold value. Subsequent lines display itemsets (exceeding the threshold) in increasing order of their size in the following format: Each line begins with a (increasing) count value followed by a dot (<TT>.</TT>) symbol, an itemset, a dash (<TT>-</TT>) symbol, then the support factor (in brackets) of the itemset at two precision values. Note that items in the itemset are comma-separated and must be lexicographically ordered when displayed. When itemsets are of the same size, they must be lexicographically ordered when displayed.<P>If there is no itemset for a support factor threshold, your program should display only the heading followed by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
soap,toothbrush,toothpaste
aabattery,wristwatch
shoe,soap,tie,toothpaste
aabattery,toothbrush,toothpaste

0.25
0.50
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Relationships for support factor 0.25:
1.aabattery,toothbrush-(0.25)
2.aabattery,toothpaste-(0.25)
3.aabattery,wristwatch-(0.25)
4.shoe,soap-(0.25)
5.shoe,tie-(0.25)
6.shoe,toothpaste-(0.25)
7.soap,tie-(0.25)
8.soap,toothbrush-(0.25)
9.soap,toothpaste-(0.50)
10.tie,toothpaste-(0.25)
11.toothbrush,toothpaste-(0.50)
12.aabattery,toothbrush,toothpaste-(0.25)
13.shoe,soap,tie-(0.25)
14.shoe,soap,toothpaste-(0.25)
15.shoe,tie,toothpaste-(0.25)
16.soap,tie,toothpaste-(0.25)
17.soap,toothbrush,toothpaste-(0.25)
18.shoe,soap,tie,toothpaste-(0.25)

Relationship for support factor 0.50:
1.soap,toothpaste-(0.50)
2.toothbrush,toothpaste-(0.50)
</PRE><P>
______________________________________________________
2211||||||false||||||
<P>A factory produces products that are packed in square packets. All packets have the same height <SPAN CLASS="MATH"><I>h</I></SPAN> but are of different sizes <SPAN CLASS="MATH">1 <TT>x</TT> 1</SPAN>, <SPAN CLASS="MATH">2 <TT>x</TT> 2</SPAN>, <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN>, <SPAN CLASS="MATH">4 <TT>x</TT> 4</SPAN>, <SPAN CLASS="MATH">5 <TT>x</TT> 5</SPAN> or <SPAN CLASS="MATH">6 <TT>x</TT> 6</SPAN>. These products are always delivered to customers in square boxes of height <SPAN CLASS="MATH"><I>h</I></SPAN> and of size <SPAN CLASS="MATH">6 <TT>x</TT> 6</SPAN>. In order to reduce transportation cost, it is in the interest of the factory as well as of the customers to minimize the numbers of boxes necessary to deliver the ordered products from the factory to the customer. A good algorithm to resolve the problem of determining the minimum number of boxes necessary to deliver the given products according to a purchase order would save a lot of money. You are asked to write such a program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of lines of purchase order specifications. Each line specifies one purchase order. Orders are described by six integers representing the quantity purchased of packets of size in the order <SPAN CLASS="MATH">1 <TT>x</TT> 1</SPAN> to <SPAN CLASS="MATH">6 <TT>x</TT> 6</SPAN>. A line containing six zeros indicates the end of the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains one line for each line in the input file. This line specifies the minimum number of boxes that the purchase order from the corresponding line of the input file needs. There is no line in the output corresponding to the last <SPAN CLASS="textit">null</SPAN> line of the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0 4 0 0 1
7 5 1 0 0 0
0 0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
1
</PRE><P>
______________________________________________________
2212||||||false||||||
<P>
Should athletes be required to undergo drug testing? And if drug testing is required, should an
athlete who tests positive be banned from sport?  These questions are haunting the Seoul
Olympics Drug Free Association (SODFA) for the past few months.  Several sources of
uncertainty, as well as several ``costs" are involved here.

<P>
The uncertainties involve the proportion of the total athlete population who use drugs and the
reliability of the tests.  If an athlete is tested for a certain type of drug usage (steroids, say), then
the test will come out either positive or negative.  However, these tests are never perfect.  Some
athletes who are drug-free tested positive, and some who are drug users tested negative. The
former is called <SPAN  CLASS="textit">false positives</SPAN>, and the latter are called <SPAN  CLASS="textit">false negatives</SPAN>.  
For example, in the last Sydney
Olympics, SODFA found out that 5% of all athletes use drugs, 3% of all tests on drug-free
athletes yield false positives, and 7% of all tests on drug users yield false negatives.

<P>
There are certain ``monetary" values involved with drug testing.  These values can be broadly
categorized into benefits and costs.  The benefit for drug testing is correctly identifying a drug
user and banning him or her from sports.  The costs includes the obvious cost of the tests, but
also the less obvious ``costs" of invading an athlete's privacy and of declaring an athlete a drug
user when in fact he or she is not (because of faulty test).  Specifically, for this problem the
monetary values involved are as follows:

<P>

<UL>
<LI>The benefit B from correctly identifying a drug user and barring him or her from sports.
</LI>
<LI>The cost C1 of the test itself for a single athlete (materials and labor).
</LI>
<LI>The cost C2 of falsely accusing a non-user and barring him or her from sports.
</LI>
<LI>The cost C3 of not identifying a drug user (either by not testing at all or by obtaining a false negative).
</LI>
<LI>The cost C4 of violating a nonuser's privacy by performing the test.
</LI>
</UL>

<P>
Observe that only C1 is a direct monetary cost that is easy to measure.  However, the other
``costs" and benefit B are real, and they must be compared on the same scale to enable
administrators to make a rational decision. In this problem you must do so by comparing
everything to the cost C1.  (We would express all other costs as multiples of C1.)

<P>
You may assume that there are only two alternatives: perform drug testing on all athletes or do not
perform any drug testing.  In the former case, the result of the drug test is first observed.  Each
test result leads to an action (ban or no ban from sports), and then the eventual benefit or cost
depends on whether the athlete uses drugs.  If no drug testing is performed, then there is no
intermediate test result.  You may also assume that all benefits have a positive sign and all costs
have a negative sign associated with them.

<P>

<P>
<BR>
SODFA needs your help to write a program that computes:

<P>

<UL>
<LI>The probability that an athlete who tested positive is a drug user.
</LI>
<LI>The probability that an athlete who tested negative is drug-free.
</LI>
<LI>The <SPAN  CLASS="textit">Potential Monetary Value</SPAN> for performing drug testing (denoted by  <SPAN CLASS="MATH"><I>PMV</I><SUB>T</SUB></SPAN>). It is defined as:  <!-- MATH
 $PMV_{T}= W_{+}p_{+}+W_{-}p_{-}$
 -->
<SPAN CLASS="MATH"><I>PMV</I><SUB>T</SUB> = <I>W</I><SUB>+</SUB><I>p</I><SUB>+</SUB> + <I>W</I><SUB>-</SUB><I>p</I><SUB>-</SUB></SPAN> where <SPAN CLASS="MATH"><I>W</I><SUB>+</SUB></SPAN> and <SPAN CLASS="MATH"><I>W</I><SUB>-</SUB></SPAN> are the <SPAN  CLASS="textit">weighted costs</SPAN> of the results of a drug test (positive and negative) and <SPAN CLASS="MATH"><I>p</I><SUB>+</SUB></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>-</SUB></SPAN> are their probabilities respectively. The weighted cost of a positive or negative drug test result is a weighted average of the total monetary values associated with the <SPAN  CLASS="textit">eventual</SPAN> outcomes of the drug test result, weighted by their probabilities.  Note that an <SPAN  CLASS="textit">eventual</SPAN> outcome of a positive drug test may yield a false positive.  Similarly, an eventual outcome of a negative drug test may yield a false negative. Formally, if  <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> is the total monetary value corresponding to eventual outcome <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> is its probability, then <SPAN CLASS="MATH"><I>W</I></SPAN> is defined as follows:

<P>
<P><!-- MATH
 \begin{displaymath}
W = \sum v_{i}p_{i}
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>W</I> = <IMG
 WIDTH="27" HEIGHT="43" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2212img1.png
 ALT="$\displaystyle \sum$"><I>v</I><SUB>i</SUB><I>p</I><SUB>i</SUB>
</DIV><P></P>

<P>
</LI>
<LI>The <SPAN  CLASS="textit">Potential Monetary Value</SPAN> for not performing drug testing (denoted by  <SPAN CLASS="MATH"><I>PMV</I><SUB>NT</SUB></SPAN>). It is a weighted average of the total monetary values associated with the eventual outcomes for not performing drug test, weighted by their probabilities.  The eventual outcome in this case may yield a non-user or a drug user who escapes from being barred from sports. Formally, if <SPAN CLASS="MATH"><I>v</I><SUB>j</SUB></SPAN> is the monetary value corresponding to eventual outcome <SPAN CLASS="MATH"><I>j</I></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>j</SUB></SPAN> is its probability then <SPAN CLASS="MATH"><I>PMV</I><SUB>NT</SUB></SPAN> is defined as follows:

<P>
<P><!-- MATH
 \begin{displaymath}
PMV_{NT} = \sum v_{j}p_{j}
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>PMV</I><SUB>NT</SUB> = <IMG
 WIDTH="27" HEIGHT="43" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2212img1.png
 ALT="$\displaystyle \sum$"><I>v</I><SUB>j</SUB><I>p</I><SUB>j</SUB>
</DIV><P></P>
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of nine lines.  The first line contains an integer and represents the percentage
of an athlete's using drugs.  The second and third lines also contain integers representing the
percentages of all tests that yield false positives and false negatives respectively.  Each of the
remaining lines contains a string and an integer that denotes different types of monetary values
and their values.  The integers are always positive. The last line terminates the input and should
not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For the given values in the input file, output the following:

<P>

<UL>
<LI>The probability that an athlete who tested positive is a drug user.  Print the string ``<TT>Positive =</TT>" and the value of the probability accurate to four decimal places.
</LI>
<LI>The probability that an athlete who tested negative is drug-free. Print the string ``<TT>Negative =</TT>" and the value of the probability accurate to four decimal places.
</LI>
<LI>The PMV for performing a drug test. Print the string ``<TT>PMV-Test =</TT>" and the value accurate to two decimal places.
</LI>
<LI>The PMV for not performing a drug test. Print the string ``<TT>PMV-Not-Test =</TT>" and the value accurate to two decimal places.
</LI>
<LI>Print a blank line between each output.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
3
7
25 B
1 C1
50 C2
20 C3
2 C4
0 END
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Positive = 0.6200
Negative = 0.9962
PMV-Test = -3.23
PMV-Not-Test = -1.00
</PRE> 

<P>

______________________________________________________
2213||||||false||||||
<P>In a manufacturing simulation, a <SPAN CLASS="textit">process route</SPAN> specifies the sequence of various processing steps required to transform raw materials into finished products. Processing steps are arranged in the order in which they occur in the manufacturing of the product. Each processing step is represented by a record that contains information for that step. The record includes the <SPAN CLASS="textit">machine</SPAN> and <SPAN CLASS="textit">operators</SPAN> required for the step and the <SPAN CLASS="textit">processing time</SPAN>. For example, test case 1 in the sample input specifies a process route with five processing steps. Machine <SPAN CLASS="MATH"><I>M</I>1</SPAN> and operator <SPAN CLASS="MATH"><I>O</I>1</SPAN> are used in the first step which requires a processing time of 0.1 time unit. Exactly one machine is used per processing step. However, zero, one or multiple operators may be required in a given processing step.<P>It is possible for two different machines to require the same operator to perform the operation (e.g., both processing steps 1 and 3 in test case 1 require operator <SPAN CLASS="MATH"><I>O</I>1</SPAN> and both processing steps 3 and 4 require operator <SPAN CLASS="MATH"><I>O</I>2</SPAN>). In addition, different operators may be required to operate the machine in a given processing step (e.g., processing steps 3 in test case 1 uses both <SPAN CLASS="MATH"><I>O</I>1</SPAN> and <SPAN CLASS="MATH"><I>O</I>2</SPAN>). This leads to situations as shown in the following figure, where machine <SPAN CLASS="MATH"><I>M</I>1</SPAN> and <SPAN CLASS="MATH"><I>M</I>2</SPAN> share operator <SPAN CLASS="MATH"><I>O</I>1</SPAN>, and machine <SPAN CLASS="MATH"><I>M</I>2</SPAN> and <SPAN CLASS="MATH"><I>M</I>3</SPAN> share operator <SPAN CLASS="MATH"><I>O</I>2</SPAN>.<P><DIV ALIGN="CENTER"><IMG WIDTH="631" HEIGHT="246" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="\epsfbox{p2213.eps}"></DIV><P>Machines and operators are modeled as resources in simulation. The relationship between machines and operators can be defined as follows: machine <SPAN CLASS="MATH"><I>X</I></SPAN> and operator <SPAN CLASS="MATH"><I>Y</I></SPAN> are related to each other (written as <SPAN CLASS="MATH"><I>X</I> <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \leftrightarrow$"> <I>Y</I></SPAN>) if <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> are required in the same processing step. Note that relation <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \leftrightarrow$"></SPAN> is symmetric. An equivalence class can then be defined by the transitive closure of this relation (written as <SPAN CLASS="MATH"><IMG WIDTH="33" HEIGHT="37" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \leftrightarrow^{{+}}_{}$"></SPAN>). For resources <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN>,<P><P><BR><SPAN CLASS="MATH"><I>X</I> <IMG WIDTH="33" HEIGHT="37" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \leftrightarrow^{{+}}_{}$"> <I>Y</I></SPAN>, if <SPAN CLASS="MATH"><I>X</I> <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \leftrightarrow$"> <I>Y</I></SPAN>; or<P><SPAN CLASS="MATH"><I>X</I> <IMG WIDTH="33" HEIGHT="37" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \leftrightarrow^{{+}}_{}$"> <I>Y</I></SPAN>, if there exists a resource <SPAN CLASS="MATH"><I>Z</I></SPAN> and <SPAN CLASS="MATH"><I>X</I> <IMG WIDTH="33" HEIGHT="37" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \leftrightarrow^{{+}}_{}$"> <I>Z</I></SPAN>, then <SPAN CLASS="MATH"><I>Z</I> <IMG WIDTH="33" HEIGHT="37" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \leftrightarrow^{{+}}_{}$"> <I>Y</I></SPAN>.<P><P><BR>The edges shown in the above graph represent relation <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \leftrightarrow$"></SPAN>. Any two resources connected by a path must be in the same equivalence class.<P>To easily resolve the resource requirements in the simulation, it requires that machines in the same equivalence class are put together to form a <SPAN CLASS="textit">conflict set</SPAN>. Thus, in the above example, <SPAN CLASS="MATH"><I>M</I>1</SPAN>, <SPAN CLASS="MATH"><I>M</I>2</SPAN> and <SPAN CLASS="MATH"><I>M</I>3</SPAN> form a conflict set.<P>In this problem, you are requested to develop a program that generates the following information from a process route:<P><OL><LI><SPAN CLASS="textit">Conflict Sets</SPAN>: Each conflict set consists of a machine or a group of machines according to the above definition. For test case 1 in the sample input, there are two conflict sets: <SPAN CLASS="MATH"><I>CS</I>1</SPAN> and <SPAN CLASS="MATH"><I>CS</I>2</SPAN>. <SPAN CLASS="MATH"><I>CS</I>1 = {<I>M</I>1, <I>M</I>2, <I>M</I>3}</SPAN> and <SPAN CLASS="MATH"><I>CS</I>2 = {<I>M</I>4}</SPAN>. </LI><LI><SPAN CLASS="textit">Connectivity between Conflict Sets</SPAN>: There is a direct link from conflict set <SPAN CLASS="MATH"><I>CS'</I></SPAN> to conflict set <SPAN CLASS="MATH"><I>CS</I>"</SPAN> if there exist machines <SPAN CLASS="MATH"><I>M'</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \in$"> <I>CS'</I></SPAN> and <SPAN CLASS="MATH"><I>M</I>" <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \in$"> <I>CS</I>"</SPAN> so that <SPAN CLASS="MATH"><I>M'</I></SPAN> and <SPAN CLASS="MATH"><I>M</I>"</SPAN> are used in two consecutive processing steps. For test case 1, there is a link from <SPAN CLASS="MATH"><I>CS</I>1</SPAN> to <SPAN CLASS="MATH"><I>CS</I>2</SPAN>, since <SPAN CLASS="MATH"><I>M</I>1 <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \in$"> <I>CS</I>1</SPAN>, <SPAN CLASS="MATH"><I>M</I>4 <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \in$"> <I>CS</I>2</SPAN>, and <SPAN CLASS="MATH"><I>M</I>1</SPAN> and <SPAN CLASS="MATH"><I>M</I>4</SPAN> are used in two consecutive processing steps (i.e., steps 1 and 2). Similarly, there is also a link from <SPAN CLASS="MATH"><I>CS</I>2</SPAN> to <SPAN CLASS="MATH"><I>CS</I>1</SPAN>. </LI><LI><SPAN CLASS="textit">Weight of Conflict Set</SPAN>: The weight of a conflict set is defined as the aggregated processing time of all the steps involved by the machines in the conflict set. For example, the weight of conflict set <SPAN CLASS="MATH"><I>CS</I>1</SPAN> is 2.6 which is the summation of processing times at steps 1, 3, 4 and 5 (i.e., all steps involved by machines <SPAN CLASS="MATH"><I>M</I>1</SPAN>, <SPAN CLASS="MATH"><I>M</I>2</SPAN> and <SPAN CLASS="MATH"><I>M</I>3</SPAN>). </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of test cases, each of which describes a process route and ends with a `<TT>#</TT>' sign. A process route consists of a number of lines, each of which describes the machine, operators and processing time required for a processing step. It is given in the following format:<P><P><BR><SPAN CLASS="MATH"><I>step</I><IMG WIDTH="26" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \_id$">&nbsp;<I>machine</I><IMG WIDTH="26" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \_id$">&nbsp;<I>list</I><IMG WIDTH="29" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \_of$"><IMG WIDTH="77" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \_operator$"><IMG WIDTH="34" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \_ids$">&nbsp;<I>processing</I><IMG WIDTH="46" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \_time$"></SPAN><P><P><BR>Step identifiers are specified using integers. Identifiers of machines and operators are specified using integers prefixed by characters `<TT>M</TT>' and `<TT>O</TT>' respectively, and processing times are specified using floating-point numbers (with a single decimal place). Note that there is exactly one machine per processing step. However, zero, one or multiple operators may be required at a given processing step.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The definition of the conflict sets should be printed according to the following format (see the sample output below):<P><P><BR><SPAN CLASS="MATH"><I>Total</I>&nbsp;<I>number</I>&nbsp;<I>of</I>&nbsp;<I>conflict</I>&nbsp;<I>sets</I></SPAN><BR><SPAN CLASS="MATH"><I>List</I>&nbsp;<I>of</I>&nbsp;<I>machine</I>&nbsp;<I>identifiers</I>&nbsp;<I>in</I>&nbsp;<I>each</I>&nbsp;<I>conflict</I>&nbsp;<I>sets</I></SPAN><P><P><BR>The connectivity between conflict sets and the weight of conflict set should be printed as a <SPAN CLASS="textit">connectivity matrix</SPAN> according to the following definition (see the sample output below):<P><P><BR><SPAN CLASS="MATH"><I>CM</I></SPAN> is a connectivity matrix.<P><SPAN CLASS="MATH"><I>CM</I>(<I>i</I>, <I>i</I>)</SPAN> contains the weight of conflict set <SPAN CLASS="MATH"><I>i</I></SPAN>.<P><SPAN CLASS="MATH"><I>CM</I>(<I>i</I>, <I>j</I>)</SPAN>, <SPAN CLASS="MATH"><I>i</I> <IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2213.gif ALT="$ \neq$"> <I>j</I></SPAN>, contains `<TT>1</TT>' if there is a direct link from conflict set <SPAN CLASS="MATH"><I>i</I></SPAN> to conflict set <SPAN CLASS="MATH"><I>j</I></SPAN>; otherwise it contains `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 M1 O1 0.2
2 M4 O3 1.0
3 M2 O1 O2 1.2
4 M3 O2 0.2
5 M1 1.0
#
1 M1 O1 0.5
2 M2 O1 0.5
3 M3 1.0
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Test Case 1:
Total number of conflict sets: 2
Conflict Set 1: M1, M2, M3
Conflict Set 2: M4
Connectivity Matrix:
2.6, 1
1, 1.0

Test Case 2
Total number of conflict sets: 2
Conflict Set 1: M1, M2
Conflict Set 2: M3
Connectivity Matrix
1.0 1
0 1.0
</PRE><P>
______________________________________________________
2214||||||false||||||
<P>Mr. John Chong is a project manager in NewAge.com Pte Ltd. His task is to schedule activities in a project to make sure that the project can be completed in a minimum amount of time. An <SPAN CLASS="textit">activity</SPAN> is a part of the project that takes place over a period of time and a <SPAN CLASS="textit">milestone</SPAN> is the completion of an activity (or a group of activities). Activities in a project are usually specified using an <SPAN CLASS="textit">activity graph</SPAN> as shown below. Nodes in the activity graph are milestones and links are activities. The label of a link indicates the duration of the corresponding activity (in the unit of days). An activity can be specified using a <SPAN CLASS="textit">starting</SPAN> and an <SPAN CLASS="textit">ending milestone</SPAN>. For example, activity <SPAN CLASS="MATH"><I>BD</I></SPAN> takes 4 days to complete. It starts from milestone <SPAN CLASS="MATH"><I>B</I></SPAN> and ends at milestone <SPAN CLASS="MATH"><I>D</I></SPAN>. Each activity graph has exactly one <SPAN CLASS="textit">start</SPAN> and one <SPAN CLASS="textit">finish milestone</SPAN>. In the following diagram, the start milestone is <SPAN CLASS="MATH"><I>A</I></SPAN> and the finish milestone is <SPAN CLASS="MATH"><I>E</I></SPAN>.<P><DIV ALIGN="CENTER"><IMG WIDTH="551" HEIGHT="246" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2214.gif ALT="\epsfbox{p2214.eps}"></DIV><P>An activity graph also depicts the dependencies among activities and milestones. An activity starting from a milestone can only begin after all activities ending at that milestone have been completed. For instance, activity <SPAN CLASS="MATH"><I>DE</I></SPAN> can only begin after activities <SPAN CLASS="MATH"><I>BD</I></SPAN> and <SPAN CLASS="MATH"><I>CD</I></SPAN> have been completed.<P>Given an activity graph, the minimum amount of time it will take to complete the project can be easily calculated. This is referred to as the <SPAN CLASS="textit">minimum duration</SPAN> of the project. The minimum duration of the project depicted by the above activity graph is 9 days. It is determined by the activities <SPAN CLASS="MATH"><I>AB</I></SPAN>, <SPAN CLASS="MATH"><I>BD</I></SPAN> and <SPAN CLASS="MATH"><I>DE</I></SPAN>. However, besides minimum duration, John also needs to know:<P><OL><LI>the earliest time an activity may begin (referred to as <SPAN CLASS="textit">earliest starting time</SPAN>, EST, of an activity), and </LI><LI>the latest time an activity may begin so that the project may still be completed in minimum duration (referred to as <SPAN CLASS="textit">latest starting time</SPAN>, LST, of an activity). </LI></OL><P>For example, in the above activity graph, activities <SPAN CLASS="MATH"><I>AB</I></SPAN> and <SPAN CLASS="MATH"><I>AC</I></SPAN> can begin immediately since they do not depend on any other activities. So, their EST is 1 (i.e., day 1). Activity <SPAN CLASS="MATH"><I>BD</I></SPAN> can only begin after activity <SPAN CLASS="MATH"><I>AB</I></SPAN> has been completed. Its EST, therefore, is 4. Similarly, the EST of activity <SPAN CLASS="MATH"><I>CD</I></SPAN> is 3. Activity <SPAN CLASS="MATH"><I>DE</I></SPAN> can only begin after activities <SPAN CLASS="MATH"><I>BD</I></SPAN> and <SPAN CLASS="MATH"><I>CD</I></SPAN> have been completed. Since <SPAN CLASS="MATH"><I>BD</I></SPAN> cannot be completed until day 8 and <SPAN CLASS="MATH"><I>CD</I></SPAN> cannot be completed until day 6, the earliest starting time for activity <SPAN CLASS="MATH"><I>DE</I></SPAN> is 8.<P>In order to complete the project in minimum duration, activity <SPAN CLASS="MATH"><I>DE</I></SPAN> then must begin at day 8. So, its LST is 8. For activity <SPAN CLASS="MATH"><I>DE</I></SPAN> begins at day 8, activity <SPAN CLASS="MATH"><I>BD</I></SPAN> has to start at day 4. However, activity <SPAN CLASS="MATH"><I>CD</I></SPAN> can begin as late as day 6 without delaying the schedule of activity <SPAN CLASS="MATH"><I>DE</I></SPAN>. So, LSTs of activities <SPAN CLASS="MATH"><I>BD</I></SPAN> and <SPAN CLASS="MATH"><I>CD</I></SPAN> are 4 and 6 respectively. Similarly, LSTs of activities <SPAN CLASS="MATH"><I>AB</I></SPAN> and <SPAN CLASS="MATH"><I>AC</I></SPAN> can be calculated. They are 1 and 4 respectively.<P>In this problem, you are requested to develop a program to help John schedule activities in a project. Activities and their duration are specified in the input. You program should output the EST and LTS of each activity and the list of activities that determine the minimum duration of the project.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of test cases, each of which ends with a # sign. A test case describes an activity graph. It consists of a start and a finish milestone of the activity graph and a list of activities. Each activity is specified in the following format by a starting milestone, an ending milestone and its duration:<P><P><BR><SPAN CLASS="MATH"><I>starting</I><IMG WIDTH="87" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2214.gif ALT="$ \_milestone$">&nbsp;<I>ending</I><IMG WIDTH="87" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2214.gif ALT="$ \_milestone$">&nbsp;<I>duration</I></SPAN><P><P><BR>Milestones are specified using alphabet characters and duration is specified using integers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the EST and LST of each activity should be printed out in the following format (see the sample output below):<P><P><BR><SPAN CLASS="MATH"><I>starting</I><IMG WIDTH="87" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2214.gif ALT="$ \_milestone$">&nbsp;<I>ending</I><IMG WIDTH="87" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2214.gif ALT="$ \_milestone$">&nbsp;<I>EST</I>&nbsp;<I>LST</I></SPAN><P><P><BR>Activities that determine the minimum duration of the project should also be printed out (see the sample output below).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
A
E
A B 3
A C 2
B D 4
C D 2
D E 2
#
A
F
A B 2
A C 3
B D 3
B E 2
C D 1
C E 3
D F 4
E F 2
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Test Case 1
A B 1 1
A C 1 4
B D 4 4
C D 3 6
D E 8 8
Activities that determine minimum duration
A B
B D
D E

Test Case 2
A B 1 1
A C 1 2
B D 3 3
B E 3 6
C D 4 5
C E 4 5
D F 6 6
E F 7 8
Activities that determine minimum duration
A B
B D
D F
</PRE><P>
______________________________________________________
2215||||||false||||||
<P>An expert system consists of two main components. The <SPAN CLASS="textit">knowledge base</SPAN> contains the knowledge with which the <SPAN CLASS="textit">inference engine</SPAN> draws conclusion. In this problem, you will build a very small expert system. Each <SPAN CLASS="textit">knowledge</SPAN> (or <SPAN CLASS="textit">fact</SPAN>) is represented by a certain predicate name along with two arguments. Some possible facts are shown below:<P><PRE><TT>
<TT>father_of (tom,john).</TT> 		                              (1) 
<BR><TT>mother_of (mary,john).</TT> 		                           (2) 
<BR><TT>child_of (susan,mary).</TT> 		                              (3)
</TT></PRE><P><P><BR>The first fact states that Tom is the father of John. The second fact states that Mary is the mother of John, and the third fact states that Susan is a child of Mary. Each rule in the inference engine is represented in the following format:<P><P><BR><TT>p :- q.</TT><P><P><BR>where <SPAN CLASS="MATH"><I>p</I></SPAN> is the rule's <SPAN CLASS="textit">head</SPAN> and <SPAN CLASS="MATH"><I>q</I></SPAN> is the <SPAN CLASS="textit">subgoal</SPAN>. This expression states that the head goal <SPAN CLASS="MATH"><I>p</I></SPAN> is satisfied if the subgoal <SPAN CLASS="MATH"><I>q</I></SPAN> is satisfied. As an example, the `` <SPAN CLASS="MATH"><I>parent</I><IMG WIDTH="29" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2215img1.png ALT="$ \_of$"></SPAN>" rules are as follows:<P><P><BR><PRE><TT>
<TT>parent_of (X,Y) :- father_of (X,Y).</TT> 		                (4) 
<BR><TT>parent_of (X,Y) :- mother_of (X,Y).</TT> 		           (5) 
<BR><TT>parent_of (X,Y) :- child_of (Y,X).</TT> <SPAN CLASS="MATH">&nbsp;</SPAN> (6)
</TT></PRE><P><P><BR>The rules state that <SPAN CLASS="MATH"><I>X</I></SPAN> is the parent of <SPAN CLASS="MATH"><I>Y</I></SPAN> if <SPAN CLASS="MATH"><I>X</I></SPAN> is the father of <SPAN CLASS="MATH"><I>Y</I></SPAN>, <SPAN CLASS="MATH"><I>X</I></SPAN> is the mother of <SPAN CLASS="MATH"><I>Y</I></SPAN>, or <SPAN CLASS="MATH"><I>Y</I></SPAN> is a child of <SPAN CLASS="MATH"><I>X</I></SPAN>. Note that the name of the head might be the same as the name of the subgoal.<P>There are two types of queries that a user may raise in this system. The first type of queries is similar to the statement of a fact, except that one argument is a <SPAN CLASS="textit">variable</SPAN> (that is, the unknown argument), and it begins with an uppercase letter. The system will need to use the facts it has to compute all the possible values of the variable. For example, the following query asks who is John's parent:<P><P><BR><TT>parent_of (X,john).</TT><P><P><BR>The system yields the following answers based on facts (2) and (1):<P><PRE>
X = mary
X = tom
</PRE><P>Note that there might be one or several values associated with <SPAN CLASS="MATH"><I>X</I></SPAN>. If no proper value is found, there will be no output. The second type of queries looks like a rule with an empty head, which might yield an output of <TT>TRUE</TT> or <TT>FALSE</TT>. An example is as follows:<P><P><BR><TT>:- parent_of (tom,john).</TT><P><P><BR>This query asks if Tom is the parent of John. In this case, the system yields the following answer based on fact (1) and rule (4):<P><P><BR><TT>TRUE</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of facts, rules, and queries. Each statement terminates with a period and there are less than 100 statements in the input file. As a convention, constants begin with a lowercase letter and variables begin with an uppercase letter. A single `<TT>0</TT>' symbol in the input line signifies the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Answer each query by providing the value of the variables, or <TT>TRUE</TT> or <TT>FALSE</TT>. Note that the answer is based on the facts/rules presented before the queries, and not on all the facts/rules in the file. If there are several answers for a query, remove any duplicates and sort the results in alphabetical order. Each line should contain only one single answer. Draw a dashed line like `<TT>--</TT>' after the output of each query. Use a single `<TT>*</TT>' symbol to signify the end of output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
father_of (tom,john) .
parent_of (X,Y) :- father_of (X,Y) .
parent_of (X,Y) :- mother_of (X,Y) .
parent_of (X,Y) :- child_of (Y,X) .
parent_of (X,john) .
mother_of (X,john) .
:- parent_of (mary,john) .
mother_of (mary,john) .
parent_of (X,john) .
child_of (susan,mary) .
parent_of (mary,X) .
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
X = tom
----
----
FALSE
----
X = mary
X = tom
----
X = john
X = susan
----
*

______________________________________________________
2216||||||false||||||
<P>Flip game is played on a rectangular 4x4 field with two-sided pieces placed 
on each of its 16 squares. One side of each piece is white and the other one is 
black and each piece is lying either it's black or white side up. Each round you 
flip 3 to 5 pieces, thus changing the color of their upper side from black to 
white and vice versa. The pieces to be flipped are chosen every round according 
to the following rules:</P>
<OL>
  <LI>Choose any one of the 16 pieces. 
  <LI>Flip the chosen piece and also all adjacent pieces to the left, to the 
  right, to the top, and to the bottom of the chosen piece (if there are any). 
  </LI></OL>
<P><IMG style="FLOAT: right" alt="Sample position" 
src="http://livearchive.onlinejudge.org/external/22/p2216a.gif></IMG> Consider the following position as an 
example:</P><PRE><TT>bwbw
wwww
bbwb
bwwb</TT></PRE>
<P>Here "b" denotes pieces lying their black side up and "w" denotes pieces 
lying their white side up. If we choose to flip the 1st piece from the 3rd row 
(this choice is shown at the picture), then the field will become:</P><PRE><TT>bwbw
bwww
wwwb
wwwb</TT></PRE>
<P>The goal of the game is to flip either all pieces white side up or all pieces 
black side up. You are to write a program that will search for the minimum 
number of rounds needed to achieve this goal.</P>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>The input file consists of several datasets. Each dataset consists of 4 lines with 4 characters "w" or "b" each that 
denote game field position.</P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>For each test case, write to the output a single integer number - the minimum number of 
rounds needed to achieve the goal of the game from the given position - in a single line. If the 
goal is initially achieved, then write 0. If it's impossible to achieve the 
goal, then write the word "Impossible" (without quotes).</P>
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
bwwb
bbwb
bwwb
bwww
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
4
</PRE>

<P>

______________________________________________________
2217||||||false||||||
<P>DBMS (Data Base Management System) development team has been successful in 
designing efficient Lock Manager and is going to proceed further. As a part of 
the team you will be responsible for the <STRONG>Buffer Manager</STRONG>.</P>
<P><STRONG>Data blocks</STRONG> being read by DBMS from the hard drive are 
stored in the main memory in a fixed number of pre-allocated 
<STRONG>buffers</STRONG>. Each buffer can hold one data block. Each buffer can 
be either <STRONG>free</STRONG> (does not contain any useful information) or 
<STRONG>occupied</STRONG> by some data. When DBMS is going to read data block 
from the hard drive it has to decide which buffer to use for data storing. If 
there are any free buffers, then one of them is used for that purpose. If there 
are no free buffers, then one of the occupied buffers has to be flushed to 
become free, unless it was <STRONG>locked</STRONG> by some part of DBMS.</P>
<P>The choice of the buffer to flush is critical to DBMS performance. A lot of 
different algorithms were developed, LRU (Least Recently Used) algorithm being 
the one used most often. However, your DBMS is going to implement the Advanced 
Buffer Management algorithm which takes advantage of the fact that maximal 
performance is achieved when a number of consecutive data blocks from the hard 
drive are read into consecutive memory buffers. </P>
<P>Buffers are numbered from 1 to <EM>N</EM>, where <EM>N</EM> 
(1&nbsp;&#8804;&nbsp;<EM>N</EM>&nbsp;&#8804;&nbsp;100000) is a total number of buffers. Each 
buffer can be in any one of the following states: free, occupied or locked. Each 
occupied buffer is assigned an integer number from 1 to 9  the 
<STRONG>worthiness</STRONG> of the currently stored information in that buffer. 
The worthiness of free buffers is considered to be zero. Locked buffers cannot 
be neither used nor flushed and their worthiness is undefined.</P>
<P>Having received the request to read <EM>K</EM> 
(1&nbsp;&#8804;&nbsp;<EM>K</EM>&nbsp;&#8804;&nbsp;10000) data blocks from the hard drive, 
Buffer Manager has to choose <EM>K</EM> consecutive non-locked buffers numbered 
from <EM>L</EM> to <EM>L</EM>+<EM>K</EM>-1 that have minimal possible sum of 
their worthiness, or to report that it is impossible to find <EM>K</EM> 
consecutive non-locked buffers. The latter can also happen if total number of 
buffers is less than <EM>K</EM>. </P>
<P>Your task is to write a program that models the processing of one request to 
Buffer Manager using the above algorithm.</P>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>Input consists of several datasets. The first line of each dataset contains two integers, <EM>N</EM> and 
<EM>K</EM>, separated by a space.</P>
<P>Starting from the second line there is a description of a buffers' state. The 
state of each buffer is represented by a single character:</P>
<UL>
  <LI><STRONG><TT>0</TT></STRONG>  when the corresponding buffer is free. 
  <LI><STRONG><TT>1</TT></STRONG>  when the corresponding buffer is occupied 
  and has worthiness of 1. 
  <LI><STRONG><TT>2</TT></STRONG>  when the corresponding buffer is occupied 
  and has worthiness of 2. 
  <LI>... 
  <LI><STRONG><TT>9</TT></STRONG>  when the corresponding buffer is occupied 
  and has worthiness of 9. 
  <LI><STRONG><TT>*</TT></STRONG>  when the corresponding buffer is locked. 
  </LI></UL>
<P>Those characters are situated on the consecutive lines grouped by 80 
characters per line without any spaces. Thus, each line starting from the second 
one contains exactly 80 characters with a possible exception for the last 
line.</P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>For each test case, write to the output the single integer number <EM>L</EM> in a single line. This number 
gives the buffer number where first of the <EM>K</EM> blocks from the hard drive 
shall be read to ensure the minimal possible total worthiness of the blocks that 
have to be flushed. If there are more than one such value for <EM>L</EM>, then 
write the smallest one. </P>
<P>Write to the output file a single number 0 if it's impossible to find 
<EM>K</EM> consecutive non-locked buffers.</P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
100 10
2165745216091853477755800393859785807207523169954341**7363*9*94664808*4777717089
09825185827659480548
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
36
</PRE>

<P>

______________________________________________________
2218||||||false||||||
<P>Triathlon is an athletic contest consisting of three consecutive sections that should be completed as fast as possible as a whole. The first section is swimming, the second section is riding bicycle and the third one is running.</P><P>The speed of each contestant in all three sections is known. The judge can choose the length of each section arbitrarily provided that no section has zero length. As a result sometimes she could choose their lengths in such a way that some particular contestant would win the competition.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. The first line of each dataset contains integer number <EM>N</EM> (1&nbsp;&#8804;&nbsp;<EM>N</EM>&nbsp;&#8804;&nbsp;100), denoting the number of contestants. Then <EM>N</EM> lines follow, each line contains three integers <EM>V<SUB>i</SUB></EM>, <EM>U<SUB>i</SUB></EM> and <EM>W<SUB>i</SUB></EM> (1&nbsp;&#8804;&nbsp;<EM>V<SUB>i</SUB></EM>, <EM>U<SUB>i</SUB></EM>, <EM>W<SUB>i</SUB></EM>&nbsp;&#8804;&nbsp;10000), separated by spaces, denoting the speed of <EM>i</EM><SUP>th</SUP> contestant in each section.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset and each contestant, write to the output one line, that contains word "Yes" if the judge could choose the lengths of the sections in such a way that this particular contestant would win (i.e. she is the only one who would come first), or word "No" if this is impossible.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
9
10 2 6
10 7 3
5 6 7
3 2 7
6 2 6
3 5 7
8 4 6
10 4 2
1 8 7
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Yes
Yes
Yes
No
No
No
Yes
No
Yes
</PRE><P>
______________________________________________________
2219||||||false||||||
<blockquote><EM><STRONG>Dominoes</STRONG><BR><BR>game played with small, 
      rectangular blocks of wood or other material, each identified by a number 
      of dots, or pips, on its face. The blocks usually are called bones, 
      dominoes, or pieces and sometimes men, stones, or even cards.<BR><BR>The 
      face of each piece is divided, by a line or ridge, into two squares, each 
      of which is marked as would be a pair of dice...<BR><BR>The principle in 
      nearly all modern dominoes games is to match one end of a piece to another 
      that is identically or reciprocally numbered.</EM> 

<blockquote>ENCYCLOPÆDIA BRITANNICA
</blockquote></blockquote>


<P>Consider an arbitrary set of domino pieces where each 
piece is marked with two digits from 1 to 6. Some sets can be completely laid 
out in a row matching one end of a piece to another that is identically 
numbered, while others cannot. For example, the set consisting of 5 pieces: 
(1,&nbsp;5), (1,&nbsp;6), (5,&nbsp;5) and (2,&nbsp;4) twice, cannot be laid out 
in a row. However, if we add (2,&nbsp;5) piece to the above set we could lay out 
the resulting set in the following row:</P>
<P style="TEXT-ALIGN: center"><IMG alt="(6, 1)(1, 5)(5, 5)(5, 2)(2, 4)(4, 2)" 
src="http://livearchive.onlinejudge.org/external/22/p2219a.gif></IMG></P>
<P>However, we are interested in a row having the smallest sum of digits on its 
pieces. In our example, instead of the piece (2,&nbsp;5) with a sum of 7, we 
could add two pieces (1,&nbsp;2) with a total sum of 6 to lay out the following 
row:</P>
<P style="TEXT-ALIGN: center"><IMG 
alt="(5, 5)(5, 1)(1, 2)(2, 4)(4, 2)(2, 1)(1, 6)" 
src="http://livearchive.onlinejudge.org/external/22/p2219a.gif></IMG></P>
<P>Your task is to write a program that for a given domino set will find an 
additional (possibly empty) set with the smallest possible sum of digits, so 
that a row could be laid out with both sets combined.</P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>Input consists of several datasets. The first line of each dataset contains a single integer <EM>N</EM> 
(2&nbsp;&#8804;&nbsp;<EM>N</EM>&nbsp;&#8804;&nbsp;100) representing the total number of 
pieces in the domino set. The following <EM>N</EM> lines describe pieces. Each 
piece is represented on a separate line in a form of two digits from 1 to 6 
separated by a space. The digits of a piece can be written in any order.</P>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>On the first line of each dataset write the smallest sum of digits of the 
additional set or 0 if that set is empty. On the second line write the total 
number of pieces in the additional set or 0 if that set is empty. Then write the 
pieces of the additional set in the same format as in input.</P>
<P>If there are a number of additional sets with the same smallest sum of digits 
exist then write any one of them.</P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
1 5
6 1
5 5
2 4
2 4
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
6
2
1 2
1 2
</PRE>

<P>

______________________________________________________
2220||||||false||||||
<P>The program fragment below performs binary search of an integer number in an array that is sorted in a nondescending order:</P><TABLE style="WIDTH: 100%"><TBODY><TR><TD><STRONG>Pascal (file "sproc.pas")</STRONG></TD><TD><STRONG>C (file "sproc.c")</STRONG></TD></TR><TR><TD style="VERTICAL-ALIGN: top; WIDTH: 50%"><PRE xml:space="preserve"><TT>
const
  MAXN = 10000;
var
  A: array[0..MAXN-1] of integer;
  N: integer;

procedure BinarySearch(x: integer);
var
  p, q, i, L: integer;
begin
  p := 0;   { Left border of the search  }
  q := N-1; { Right border of the search }
  L := 0;   { Comparison counter         }
  while p &lt;= q do begin
    i := (p + q) div 2;
    inc(L);
    if A[i] = x then begin
      writeln('Found item i = ', i,
        ' in L = ', L, ' comparisons');
      exit
    end;
    if x &lt; A[i] then
      q := i - 1
    else
      p := i + 1
  end
end;
</TT></PRE></TD><TD style="VERTICAL-ALIGN: top; WIDTH: 50%"><PRE xml:space="preserve"><TT>

#define MAXN 10000

int A[MAXN];
int N;

void BinarySearch(int x)
{
  int p, q, i, L;

  p = 0;   /* Left border of the search  */
  q = N-1; /* Right border of the search */
  L = 0;   /* Comparison counter         */
  while (p &lt;= q) {
    i = (p + q) / 2;
    ++L;
    if (A[i] == x) {
      printf("Found item i = %d"
        " in L = %d comparisons\n", i, L);
      return;
    }
    if (x &lt; A[i])
      q = i - 1;
    else
      p = i + 1;
  }
}
</TT></PRE></TD></TR></TBODY></TABLE><P>Before <TT>BinarySearch</TT> was called, <TT>N</TT> was set to some integer number from 1 to 10000 inclusive and array <TT>A</TT> was filled with a nondescending integer sequence.</P><P>It is known that the procedure has terminated with the message "<TT>Found item i = XXX in L = XXX comparisons</TT>" with some known values of <TT>i</TT> and <TT>L</TT>.</P><P>Your task is to write a program that finds all possible values of <TT>N</TT> that could lead to such message. However, the number of possible values of <TT>N</TT> can be quite big. Thus, you are asked to group all consecutive <TT>N</TT>s into intervals and write down only first and last value in each interval.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several datasets. Each datasets consists of a single line with two integers <TT>i</TT> and <TT>L</TT> (0&nbsp;&#8804;&nbsp;<TT>i</TT>&nbsp;&lt;&nbsp;10000 and 1&nbsp;&#8804;&nbsp;<TT>L</TT>&nbsp;&#8804;&nbsp;14), separated by a space.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>On the first line of each dataset write the single integer number <EM>K</EM> representing the total number of intervals for possible values of <TT>N</TT>. Then <EM>K</EM> lines shall follow listing those intervals in an ascending order. Each line shall contain two integers <EM>A<SUB>i</SUB></EM> and <EM>B<SUB>i</SUB></EM> (<EM>A<SUB>i</SUB></EM>&nbsp;&#8804;&nbsp;<EM>B<SUB>i</SUB></EM>) separated by a space, representing first and last value of the interval.</P><P>If there are no possible values of <TT>N</TT> exist, then the output file shall contain the single 0.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
10 3
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
4
12 12
17 18
29 30
87 94
</PRE><P>
______________________________________________________
2221||||||false||||||
<P>Lilliputian frontier is a convex polygon with non-zero area. The vertices of 
this polygon are guard towers, which are connected by straight lines. This 
frontier is too long and expensive for Lilliputia to maintain; therefore the 
Lilliputian government has decided to revise it to make it shorter. However, 
they don't want to build new guard towers, but to use existing ones as a part of 
a new frontier.</P>
<P><IMG style="FLOAT: right" alt="Sample frontier picture" 
src="http://livearchive.onlinejudge.org/external/22/p2221a.gif></IMG> Each day frontier guards inspect the 
frontier. They go from one guard tower to the next one, traversing the frontier 
clockwise. Guard towers are numbered from 1 to <EM>N</EM> according to this 
inspection order. Frontier revision should not change this way of inspection and 
the area of Lilliputia shall remain non-zero.</P>
<P>For example, the frontier that is shown on the picture (axes are in kilometer 
scale) is traversed by 
1&nbsp;-&nbsp;2&nbsp;-&nbsp;3&nbsp;-&nbsp;4&nbsp;-&nbsp;5&nbsp;-&nbsp;1 route, 
which is 57.89 kilometers long. To make the frontier as short as possible 
Lilliputia should revise it so that the frontier is traversed by 
2&nbsp;-&nbsp;3&nbsp;-&nbsp;4&nbsp;-&nbsp;2 route, thus reducing its length to 
27.31 kilometers.</P>
<P>However, Lilliputia has a number of historical monuments which are its major 
pride. The historical monuments shall be kept inside Lilliputia at any cost and 
they should not end up on the frontier. So, the task is to design the shortest 
frontier that will preserve all historical monuments inside Lilliputia.</P>
<P>On the sample picture two historical monuments marked "A" and "B" are shown. 
The desire to keep them inside Lilliputia will lead to the shortest frontier 
with a traverse path 1&nbsp;-&nbsp;2&nbsp;-&nbsp;3&nbsp;-&nbsp;4&nbsp;-&nbsp;1 
having 51.78 kilometers in length.</P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>Input consists of several datasets. The first line of each dataset contains two integers <EM>N</EM> and 
<EM>M</EM>, separated by a space. <EM>N</EM> 
(3&nbsp;&#8804;&nbsp;<EM>N</EM>&nbsp;&#8804;&nbsp;50) is a total number of guard towers on 
the Lilliputian frontier. <EM>M</EM> (0&nbsp;&#8804;&nbsp;<EM>M</EM>&nbsp;&#8804;&nbsp;1000) 
is a total number of historical monuments that are situated inside 
Lilliputia.</P>
<P>Next <EM>N</EM> lines contain guard towers' coordinates in a clockwise order 
followed by <EM>M</EM> lines that contain historical monuments' coordinates. All 
coordinates are represented as two integers (for <EM>X</EM> and <EM>Y</EM> 
correspondingly) separated by a space. Coordinates are given in a kilometer 
scale and each coordinate does not exceed 10000 by an absolute value. All guard 
towers are located at distinct points.</P>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>For each test case, write to the output a single line containing a real number - the minimal possible length 
of the Lilliputian frontier (in kilometers) accurate to two digits to the right 
of the decimal point.</P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5 2
8 9
0 -7
-8 -7
-8 1
-8 9
-4 -3
-1 -5
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
51.78
</PRE>

<P>

______________________________________________________
2222||||||false||||||
<P><IMG style="FLOAT: right" alt="Sample garland picture" src="http://livearchive.onlinejudge.org/external/22/p2222a.gif></IMG> The New Year garland consists of <EM>N</EM> lamps attached to a common wire that hangs down on the ends to which outermost lamps are affixed. The wire sags under the weight of lamp in a particular way: each lamp is hanging at the height that is 1 millimeter lower than the average height of the two adjacent lamps.</P><P>The leftmost lamp in hanging at the height of <EM>A</EM> millimeters above the ground. You have to determine the lowest height <EM>B</EM> of the rightmost lamp so that no lamp in the garland lies on the ground though some of them may touch the ground.</P><P>You shall neglect the lamp's size in this problem. By numbering the lamps with integers from 1 to <EM>N</EM> and denoting the <EM>i</EM><SUP>th</SUP> lamp height in millimeters as <EM>H<SUB>i</SUB></EM> we derive the following equations:</P><UL><LI><EM>H</EM><SUB>1</SUB> = <EM>A</EM> <LI><EM>H<SUB>i</SUB></EM> = (<EM>H</EM><SUB><EM>i</EM>-1</SUB> + <EM>H</EM><SUB><EM>i</EM>+1</SUB>)/2 - 1, for all 1 &lt; <EM>i</EM> &lt; <EM>N</EM> <LI><EM>H</EM><SUB><EM>N</EM></SUB> = <EM>B</EM> <LI><EM>H<SUB>i</SUB></EM> &#8805; 0, for all 1 &#8804; <EM>i</EM> &#8804; <EM>N</EM> </LI></UL><P>The sample garland with 8 lamps that is shown on the picture has <EM>A</EM>&nbsp;=&nbsp;15 and <EM>B</EM>&nbsp;=&nbsp;9.75.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several datasets. Each datasets contains a single line with two numbers <EM>N</EM> and <EM>A</EM> separated by a space. <EM>N</EM> (3&nbsp;&#8804;&nbsp;N&nbsp;&#8804;&nbsp;1000) is an integer representing the number of lamps in the garland, <EM>A</EM> (10&nbsp;&#8804;&nbsp;A&nbsp;&#8804;&nbsp;1000) is a real number representing the height of the leftmost lamp above the ground in millimeters.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, write to the output the single real number <EM>B</EM> accurate to two digits to the right of the decimal point representing the lowest possible height of the rightmost lamp.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
692 532.81
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
446113.34
</PRE><P>
______________________________________________________
2223||||||false||||||
<P>Hacker Bill has accidentally lost all the information from his workstation's 
hard drive and he has no backup copies of its contents. He does not regret for 
the loss of the files themselves, but for the very nice and convenient directory 
structure that he had created and cherished during years of work. Fortunately, 
Bill has several copies of directory listings from his hard drive. Using those 
listings he was able to recover full paths (like 
"WINNT\SYSTEM32\CERTSRV\CERTCO~1\X86") for some directories. He put all of them 
in a file by writing each path he has found on a separate line. Your task is to 
write a program that will help Bill to restore his state of the art directory 
structure by providing nicely formatted directory tree.</P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>Input consists of several datasets. The first line of each dataset contains single integer number <EM>N</EM> 
(1&nbsp;&#8804;&nbsp;<EM>N</EM>&nbsp;&#8804;&nbsp;500) that denotes a total number of 
distinct directory paths. Then <EM>N</EM> lines with directory paths follow. 
Each directory path occupies a single line and does not contain any spaces, 
including leading or trailing ones. No path exceeds 80 characters. Each path is 
listed once and consists of a number of directory names separated by a back 
slash ("<STRONG><TT>\</TT></STRONG>"). </P>
<P>Each directory name consists of 1 to 8 uppercase letters, numbers, or the 
special characters from the following list: exclamation mark, number sign, 
dollar sign, percent sign, ampersand, apostrophe, opening and closing 
parenthesis, hyphen sign, commercial at, circumflex accent, underscore, grave 
accent, opening and closing curly bracket, and tilde 
("<STRONG><TT>!#$%&amp;'()-@^_`{}~</TT></STRONG>").
<p>There is a blank line after each dataset.</P>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>For each test case, write to the output the formatted directory tree. Each directory name 
shall be listed on its own line preceded by a number of spaces that indicate its 
depth in the directory hierarchy. The subdirectories shall be listed in 
lexicographic order immediately after their parent directories preceded by one 
more space than their parent directory. Top level directories shall have no 
spaces printed before their names and shall be listed in lexicographic order. 
See sample below for clarification of the output format.</P>
<p>Print a blank line after each dataset</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
7
WINNT\SYSTEM32\CONFIG
GAMES
WINNT\DRIVERS
HOME
WIN\SOFT
GAMES\DRIVERS
WINNT\SYSTEM32\CERTSRV\CERTCO~1\X86
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
GAMES
 DRIVERS
HOME
WIN
 SOFT
WINNT
 DRIVERS
 SYSTEM32
  CERTSRV
   CERTCO~1
    X86
  CONFIG
</PRE>

<P>

______________________________________________________
2224||||||false||||||
<P>A cooperative society has purchased some land for distribution amongst its members. The land is divided into plots so that every member can get a plot. It is planned to mark each plot by a two meter high boundary wall. The boundary of each plot is shaped like a polygon (not necessarily a convex one). (The figure below shows a land with five plots.) It is divided into line segments such that any two line segments either intersect at an end point or do not intersect at all (there may be co-linear segments present). A builder has been hired to construct the boundary walls. He has put different groups of workers to work on different segments of the boundary wall (a segment of boundary wall corresponds to a line segment in the boundary of a plot). All the groups, at the end of the day, submit their report to the contractor indicating whether their work is finished or not. Write a program to help identify the builder the number of plots for which the work has been completed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input gives the number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>.<P>For each test case, the first line contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> (between 3 and 50) giving the number of line segments in the land. The <SPAN CLASS="MATH"><I>j</I></SPAN>-th of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains five integers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN>, and <SPAN CLASS="MATH"><I>e</I></SPAN> where <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> and <SPAN CLASS="MATH">(<I>c</I>, <I>d</I> )</SPAN> give the coordinates of the corner point of the <SPAN CLASS="MATH"><I>j</I></SPAN>-th line segment and the number <SPAN CLASS="MATH"><I>e</I></SPAN> is 1 if that boundary wall segment is complete, 0 otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, there is one line in the output giving the number of plots on which work is completed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
5
0 0 0 1 0
0 0 1 0 1
0 1 1 1 1
1 0 1 1 1
0 0 1 1 1
7
0 0 2 0 1
0 0 0 1 1
2 0 2 2 1
2 2 1 2 1
1 2 0 1 1
1 2 1 1 1
0 1 1 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
2
</PRE><P>
______________________________________________________
2225||||||false||||||
<P>A skier wants to ski down from the top of a mountain to its base. There are several possible routes, using different slopes enroute, and passing through some flat areas. The effort expended in skiing down a slope depends upon the length of the slope and the speed of skiing. For each slope, there is a maximum advisable speed. The skier wants to use a route that minimizes the average effort spent per unit distance traveled (i.e., the total effort expended divided by the total distance traveled).<P>You are given the map of the mountain slopes. That is, the flat areas and the slopes connecting these areas are given. Note that on a slope, one can only ski downwards. For each slope, you are also given the length of the slope and the maximum advisable speed for it. The effort expanded in skiing down a particular slope is given by the following formula.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>e</I> = <I>d</I>*(70 - <I>s</I>)&nbsp;if&nbsp;<I>s</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2225img1.png ALT="$\displaystyle \le$">60,&nbsp;and&nbsp;<I>e</I> = <I>d</I>*(<I>s</I> - 50)&nbsp;if&nbsp;<I>s</I> &gt; 60</DIV><P></P>where <SPAN CLASS="MATH"><I>e</I></SPAN> is the effort required, <SPAN CLASS="MATH"><I>d</I></SPAN> is the distance traveled, and <SPAN CLASS="MATH"><I>s</I></SPAN> is the speed of travel.<P>You have to determine the minimum average effort per unit distance that the skier has to expend in order to reach the mountain base, while staying within the maximum advisable speed at every slope.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may have multiple test cases. The first line of input gives the number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>. For each test case, the first line of input gives the number of flats, <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(<I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2225img1.png ALT="$ \le$">100)</SPAN>, and the number of slopes, <SPAN CLASS="MATH"><I>R</I></SPAN> <SPAN CLASS="MATH">(<I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2225img1.png ALT="$ \le$">10000)</SPAN>, connecting them respectively.<P>The flats are assumed to be numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>. The flats at the top and the base of the mountain are assumed to be numbered 1 and <SPAN CLASS="MATH"><I>N</I></SPAN> respectively. Each of the next <SPAN CLASS="MATH"><I>R</I></SPAN> lines describes a slope by giving: the numbers of the flats at the top and the bottom of the slope, the maximum advisable speed for the slope, and the length of the slope respectively.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single number (to an accuracy of 2 decimal places) that gives the minimum average effort per unit distance that needs to be expended to ski down from the mountain top to the base. The output for each test case should be on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4 5
1 4
1 4 30 60
1 2 50 40
1 3 60 20
2 4 60 50
3 4 50 50
3 3
1 3
1 2 50 40
1 3 40 20
2 3 20 30
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
14.44
30.00
</PRE><P>
______________________________________________________
2226||||||false||||||
<P>The director of Hind Circus has decided to add a new performance, the monkey dance, to his show. The monkey dance is danced simultaneously by <SPAN CLASS="MATH"><I>N</I></SPAN> monkeys. There are <SPAN CLASS="MATH"><I>N</I></SPAN> circles drawn on the ground. In the beginning, each monkey sits on a different circle. There are <SPAN CLASS="MATH"><I>N</I></SPAN> arrows drawn from circle to circle in such a way that in each circle, exactly one arrow starts and exactly one ends. No arrow can both begin and end at the same circle. When the show begins, at each whistle of the ringmaster, all the monkeys simultaneously jump from their respective circles to other circles following the arrows from their respective current circles. This is one step of the dance. The dance ends when all the monkeys have returned to the circles where they initially started. The director wishes the dance to last as many steps as possible. This can be achieved by drawing the arrows intelligently. Given <SPAN CLASS="MATH"><I>N</I></SPAN>, you have to write a program to determine the maximum possible number of steps such that there is a way of drawing the arrows to make the dance last these many steps.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may have multiple cases. Each case consists of just the value of <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(<I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2226img1.png ALT="$ \le$">40)</SPAN> on a separate line. The input ends with a `<TT>0</TT>' for the value of <SPAN CLASS="MATH"><I>N</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, simply output the maximum possible number of steps. Each output should be on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
8
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6
15
</PRE><P>
______________________________________________________
2227||||||false||||||
<P>Error correction is extremely useful in recovering from corrupted data. The abstract setting for this problem is: given a set of <SPAN CLASS="MATH"><I>n</I></SPAN> data elements such that at least <SPAN CLASS="MATH"><I>t</I></SPAN> of the data elements are uncorrupted, recover the complete uncorrupted data from it. To be able to do such a correction, data elements need to be of special form. Such forms are called <SPAN CLASS="textit">Error-correcting codes</SPAN>. An error-correcting code that is widely used is as follows: the data elements are evaluations of a univariate polynomial of degree <SPAN CLASS="MATH"><I>d</I></SPAN> modulo a prime number <SPAN CLASS="MATH"><I>p</I></SPAN>. The error-correction algorithm for this code was very complex until Madhu Sudan discovered a nice way of doing this. His algorithm is: given a set of <SPAN CLASS="MATH"><I>n</I></SPAN> points <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB>,..., <I>y</I><SUB>n</SUB></SPAN> (each value is between 0 and <SPAN CLASS="MATH"><I>p</I> - 1</SPAN>, and also <SPAN CLASS="MATH"><I>n</I> &lt; <I>p</I></SPAN>) with at least <SPAN CLASS="MATH"><I>t</I></SPAN> of the <SPAN CLASS="MATH"><I>y</I></SPAN>'s correct (this means that for the correct <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB> = <I>P</I>(<I>j</I>)</SPAN> for some unknown degree <SPAN CLASS="MATH"><I>d</I></SPAN> polynomial modulo <SPAN CLASS="MATH"><I>p</I></SPAN>) do the following:<P><OL><LI>Construct a <EM>non-zero</EM> polynomial in two variables <SPAN CLASS="MATH"><I>Q</I>(<I>x</I>, <I>y</I>)</SPAN> with the degree of <SPAN CLASS="MATH"><I>y</I></SPAN> being <SPAN CLASS="MATH"><I>e</I></SPAN> and the degree of <SPAN CLASS="MATH"><I>x</I></SPAN> being <SPAN CLASS="MATH"><I>f</I></SPAN> and <SPAN CLASS="MATH">(<I>e</I> + 1)*(<I>f</I> + 1) &gt; <I>n</I></SPAN> and <!-- MATH
 $e * d + f < t$
 --><SPAN CLASS="MATH"><I>e</I>*<I>d</I> + <I>f</I> &lt; <I>t</I></SPAN> for which <SPAN CLASS="MATH"><I>Q</I>(<I>j</I>, <I>y</I><SUB>j</SUB>) = 0</SPAN> for every <SPAN CLASS="MATH"><I>j</I></SPAN> between 1 and <SPAN CLASS="MATH"><I>n</I></SPAN>. The exact values of <SPAN CLASS="MATH"><I>e</I></SPAN> and <SPAN CLASS="MATH"><I>f</I></SPAN> are determined using <SPAN CLASS="MATH"><I>t</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN>, and <SPAN CLASS="MATH"><I>n</I></SPAN>. </LI><LI>Factor the polynomial <SPAN CLASS="MATH"><I>Q</I></SPAN> into irreducible factors. </LI><LI>Consider all the factors of the form <SPAN CLASS="MATH">(<I>y</I> - <I>g</I>(<I>x</I>))</SPAN> such that degree of <SPAN CLASS="MATH"><I>g</I></SPAN> is <SPAN CLASS="MATH"><I>d</I></SPAN> and identify one for which <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB> = <I>g</I>(<I>j</I>)</SPAN> for at least <SPAN CLASS="MATH"><I>t</I></SPAN> values. </LI></OL><P>This identified polynomial, <SPAN CLASS="MATH"><I>g</I></SPAN>, is the desired one. Once the polynomial is identified, all the correct values of <SPAN CLASS="MATH"><I>y</I></SPAN> can be recovered by computing <SPAN CLASS="MATH"><I>g</I>(<I>j</I>)</SPAN> for every <SPAN CLASS="MATH"><I>j</I></SPAN>.<P>Madhu Sudan has written programs for factoring the two variable polynomial and for identifying the right polynomial as well as computed the right values of <SPAN CLASS="MATH"><I>e</I></SPAN> and <SPAN CLASS="MATH"><I>f</I></SPAN>. He now just needs a program that constructs the two variable polynomial <SPAN CLASS="MATH"><I>Q</I></SPAN>. Please help him in writing this program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> is written in the first line of the input.<P>For each test case, the first line contains the value of <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>p</I></SPAN>, <SPAN CLASS="MATH"><I>e</I></SPAN>, and <SPAN CLASS="MATH"><I>f</I></SPAN> (all these are between 1 and 100 satisfying the constraints mentioned above; in particular, <SPAN CLASS="MATH"><I>p</I></SPAN> is always a prime number) in that order. The <SPAN CLASS="MATH"><I>j</I></SPAN>-th of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains the value <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output all the coefficients of the polynomial <SPAN CLASS="MATH"><I>Q</I></SPAN> in the following order: first output all the coefficients of the terms in which the degree of <SPAN CLASS="MATH"><I>y</I></SPAN> is zero and order these coefficients by increasing degree of <SPAN CLASS="MATH"><I>x</I></SPAN>; then output all the coefficients of the terms in which degree of <SPAN CLASS="MATH"><I>y</I></SPAN> is one ordering these in the same way as before, and so on. Each coefficient must be on a separate line. If there are more than one solutions, output any one.<P>The output of different test cases must be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3 7 1 1
6
4
5
4 11 1 2
2
3
0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
4
3
1
1
4
1
2
6
0
</PRE><P>
______________________________________________________
2228||||||false||||||
<P>A spaceship is to be launched from the Earth to visit a number of planets. The order of visiting the planets is fixed. The spaceship can travel from one planet to another via normal space or via <SPAN CLASS="textit">hyperspace</SPAN>. Hyperspace travel reduces the traveled distance substantially, however, the fuel consumption during the hyperspace travel is much more. In fact, if the spaceship travels <SPAN CLASS="MATH"><I>d</I></SPAN> light years thorough the hyperspace, then the fuel consumed is <SPAN CLASS="MATH"><I>d</I><SUP>4</SUP></SPAN> units! For <SPAN CLASS="MATH"><I>d</I></SPAN> light years traveled through normal space, the fuel consumed is just <SPAN CLASS="MATH"><I>d</I></SPAN> units. Also, between two planets, the spaceship can either travel via hyperspace or normal space but not both. Design an algorithm that determines a way oftraveling that minimizes the fuel consumption.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains a number <SPAN CLASS="MATH"><I>T</I></SPAN> giving the number of test cases to follow.<P>The first line of each test case contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> (between 1 and 50) giving the number of planets to be visited. The <SPAN CLASS="MATH"><I>j</I></SPAN>-th of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines correspond to the <SPAN CLASS="MATH"><I>j</I></SPAN>-th planet to be visited and contains two integers <SPAN CLASS="MATH"><I>hd</I></SPAN> and <SPAN CLASS="MATH"><I>nd</I></SPAN> denoting respectively the hyperspace and normal space distance between the <SPAN CLASS="MATH">(<I>j</I> - 1)</SPAN>-th planet and <SPAN CLASS="MATH"><I>j</I></SPAN>-th planet (the 0-th planet is taken to be the Earth). The number <SPAN CLASS="MATH"><I>hd</I></SPAN> is between 1 and 10 light years and the number <SPAN CLASS="MATH"><I>nd</I></SPAN> is between 1 light year and 10 million light years.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, output a number giving the minimum units of fuel required to visit all the planets. Each test case output must be on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
3 1000
2 5000
4 8000
5
1 10000
2 3547
7 36782
4 2178
9 67428
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2296
52507
</PRE><P>
______________________________________________________
2229||||||false||||||
<P>One day, looking at old documents inherited from his grandfather, Ramesh discovers a map. Reading the accompanying document, he realizes that the map is of a complex maze of chambers and passages inside a mountain. Chambers in this maze have doors opening to passages leading to other chambers. All the doors have one peculiarity: they have handles only on one side, and so can be opened either from the chamber or from the passage but not both. The passages leading from any chamber have been designed in such a way that either there is only one passage leading out or there is a passage such that upon following it one can <SPAN CLASS="textit">never come back</SPAN> to the chamber. Also, there is at most one passage between any two chambers. On the ceiling of each chamber, a number is written. There are two special chambers: the entry chamber and the exit chamber. The entry chamber can be entered via a door from outside the mountain and the exit chamber has a door that leads to a secret chamber. The exit door opens only upon reciting a magic sequence of numbers. It is given that this sequence is the only sequence of numbers satisfying the following properties:<P><UL><LI>The sequence can be constructed by noting the numbers written in chambers, in that order, on a path from entry chamber to exit chamber. </LI><LI>The numbers in the sequence are all distinct. </LI><LI>If any chamber has a number from this sequence written, then there is a path from the chamber to the exit chamber such that all the chambers in this path contain numbers <SPAN CLASS="textit">only</SPAN> from this sequence. </LI></UL><P>Design an algorithm to help Ramesh reach the secret chamber.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input consists of an integer <SPAN CLASS="MATH"><I>T</I></SPAN> giving the number of test cases to follow.<P>The first line of each test case contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> (between 1 and 100) and <SPAN CLASS="MATH"><I>P</I></SPAN> (between 1 and 1000) giving the number of chambers and the number of passages in the maze respectively. The next line contains <SPAN CLASS="MATH"><I>N</I></SPAN> numbers: the <SPAN CLASS="MATH"><I>j</I></SPAN>-th number is written in the <SPAN CLASS="MATH"><I>j</I></SPAN>-th chamber. Each of the next <SPAN CLASS="MATH"><I>P</I></SPAN> lines contain four numbers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN> with <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> between 1 and <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN> having binary value, giving that there is a passage between chamber number <SPAN CLASS="MATH"><I>a</I></SPAN> and chamber number <SPAN CLASS="MATH"><I>b</I></SPAN> such that the door to the passage from chamber <SPAN CLASS="MATH"><I>a</I></SPAN> opens from inside the chamber if <SPAN CLASS="MATH"><I>c</I> = 1</SPAN> and the door to the passage from chamber <SPAN CLASS="MATH"><I>b</I></SPAN> opens from inside the chamber if <SPAN CLASS="MATH"><I>d</I> = 1</SPAN>. The last line of the test case contains two numbers <SPAN CLASS="MATH"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> with <SPAN CLASS="MATH"><I>s</I></SPAN> being the entry chamber number and <SPAN CLASS="MATH"><I>t</I></SPAN> being the exit chamber number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, there is one output line that contains the magic sequence with numbers separated by blanks.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
6 6
9 10 11 12 13 14
1 2 1 0
2 3 1 0
3 4 1 0
4 5 1 0
4 6 1 0
4 2 1 0
1 5
10 13
22 81 84 84 72 60 63 62 99 54
1 2 1 0
1 4 1 1
2 4 1 0
2 5 1 0
5 3 0 1
6 3 0 1
4 7 1 0
8 4 0 1
5 2 1 0
5 8 1 0
9 5 0 1
9 6 0 1
10 6 0 1
1 9
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9 10 11 12 13
22 81 72 99
</PRE><P>
______________________________________________________
2230||||||false||||||
<P>A battalion of tanks is to be sent to a border post from the base. There are no obstructions between the base and the border post and so the tanks can travel in any direction. However, the terrain between the base and the border post is of two kind: first comes the muddy terrain and then the desert. The maximum velocity of a tank in each of these terrains is different. It is assumed that a straight line separates the two terrains. Design an algorithm that finds out the fastest route to the border post.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. The first line of the input contains the number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>.<P>For each test case, the first line has two numbers <SPAN CLASS="MATH"><I>u</I></SPAN> and <SPAN CLASS="MATH"><I>v</I></SPAN> with <SPAN CLASS="MATH"><I>u</I></SPAN> being the maximum velocity (in kilometers per hour) of a tank in the desert and <SPAN CLASS="MATH"><I>v</I></SPAN> the maximum velocity in the muddy terrain. The next line contains the coordinates of the border post assuming the dividing line between the terrains to be the <SPAN CLASS="MATH"><I>x</I></SPAN>-axis (the <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate of the border post is always positive). The third line contains the coordinates of the base camp (the <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate of the base camp is always negative). The unit of the coordinates is kilometers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, there is one output line containing two numbers: the first number denotes the time taken in seconds (rounded off to the closest second) by a tank to reach the border post by the fastest route. The second number denotes the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate (in kilometers, with an accuracy of three decimal digits) of the point where the tank crosses over to the desert.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
1 1
5 3
5 -2
3 5
20 10
8 -9
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
18000 5.000
21590 15.688
</PRE><P>
______________________________________________________
2231||||||false||||||
<P>
Company  ACIDIC  manufactures  acid.  The  acid  is  filled  into  containers  and  sent  out  to  different  places.  Sometimes,  the containers start leaking. To handle such situations, the company has a room with several container holders. These holders are arranged in a rectangle grid. Each of these can hold one leaky container and absorb the acid leakage. After all the acid has leaked out, the containers are taken out and the leak point(s) are fixed. One day, the leaky containers were put in some of the holders. After a while, some more leaky containers were detected and brought to the room. The supervisor handling this then realized that all the containers that are present in the room are leaking very heavily. So heavily that they have corroded their holders and in a short time they would also corrode all the holders in the room in the directions of the leak. The containers are leaking either in the North-South direction or in the East-West direction. (The figure above shows a room with a 4-by-6 grid of holders having four leaky containers. The  dashed arrows represent the direction of leakage.) The supervisor tried to remove containers from their holders but could not as they were stuck to the holders. However, he could rotate the containers so that the direction of leakage could be changed from North-South to East-West or vice-versa. The supervisor suspects that the current lot of leaky containers may also start to leak heavily. Help the supervisor find the rotations of existing containers and  placement of current lot of containers so that the number of corroded holders is minimized.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several test cases. The first line of the input contains the number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>.

<P>
For each test case, the first line has four numbers <SPAN CLASS="MATH"><I>R</I></SPAN>, <SPAN CLASS="MATH"><I>C</I></SPAN>, <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN>. Numbers <SPAN CLASS="MATH"><I>R</I></SPAN> and <SPAN CLASS="MATH"><I>C</I></SPAN> (between 10 and 100) give the number of rows and columns in the grid. Number <SPAN CLASS="MATH"><I>N</I></SPAN> (between 1 and 20) gives the number of leaky containers in the room and number <SPAN CLASS="MATH"><I>M</I></SPAN> (between 1 and 20) gives the number of leaky containers in the current lot. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines gives the placement and the leakage direction of an existing container. These are given as three numbers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, and <SPAN CLASS="MATH"><I>c</I></SPAN> where <SPAN CLASS="MATH"><I>a</I></SPAN> (between 1 and <SPAN CLASS="MATH"><I>R</I></SPAN>) is the row number (counting from top), <SPAN CLASS="MATH"><I>b</I></SPAN> (between 1 and <SPAN CLASS="MATH"><I>C</I></SPAN>) is the column number (counting from left), and <SPAN CLASS="MATH"><I>c</I></SPAN> is 1 if the leakage direction is North-South, 0 otherwise.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, the output should be a number giving the smallest number of holders that will get corroded after rotating the existing containers and placing the containers in the current lot (assuming the all the current lot containers will also leak heavily). The output for different test cases should be on different lines.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
4 6 4 4
1 2 0
2 4 0
3 2 1
3 5 1
50 50 5 10
1 35 1
17 44 0
17 46 1
42 35 1
42 46 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
12
148

______________________________________________________
2232||||||false||||||
<P>
ACM Airlines is a regional airline with von Neumann Airport as its home port. For many passengers, von Neumann
Airport is not the start of their trip, nor their final destination, so many transfer passengers pass through the airport.

<p>
The von Neumann Airport has a corridor layout. Arrival gates are located, equally spaced, at the north side of the
corridor. Departure gates are at the south side of the corridor, equally spaced as well. The distance between two
adjacent gates equals the width of the corridor. Each arrival gate is assigned to exactly one city, and the same holds
for the departure gates. Passengers arrive at the arrival gate assigned to their city of origin and exit the terminal or
proceed to a connecting flight at a gate assigned to their destination city. For this problem, only passengers with
connecting flights are considered.

<p>
Transferring passengers generate a lot of traffic in the corridor. The average number of people traveling between
cities is known beforehand. Using this information, it should be possible to reduce the traffic. If transfers from city
Cx to city Cy occur very frequently, it may help to locate the gates assigned to these cities near or even directly
opposite each other.

<p>
Due to the presence of shops and gardens it is not possible to cross the corridor diagonally, so the distance between
arriving gate G1 and departing gate G3 (see diagram) equals 1 + 2 = 3.


<p>
You must assess total traffic load for several different configurations. The traffic load between an origin and
destination gate is defined as the number of origin to destination passengers multiplied by the distance between the
arriving and departing gate. The total traffic load is the sum of the traffic loads for all origin-destination pairs.

<p align=center><img src=p2232a.gif>
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several test cases. The last test case in the input file is followed by a line containing the
number 0.

<p>
Each test case has two parts: first the traffic data, then the configuration section.

<p>
The traffic data starts with an integer <i>N (1 &le; N &le; 25)</i>, representing the number of cities. The following <i>N</i> lines each
represent traffic data for one city. Each line with traffic data begins with an integer in the range <i>1..N</i> identifying the
city of origin. This is followed by <i>k</i> pairs of integers, one pair for every destination city. Each pair identifies the
destination city and the number of passengers (at most 500) traveling from the city of origin to this destination city.

<p>
The configuration section consists of one or more (at most 20) configurations and ends with a line containing the
number 0.

<p>
A configuration consists of 3 lines. The first line contains a positive number identifying the configuration. The next
line contains a permutation of the cities, as they are assigned to the arrival gates: the first number represents the city
assigned to the first gate, and so on. The next line in the same way represents the cities as they are assigned to the
departure gates.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, the output contains a table presenting the configuration numbers and total traffic load, in
ascending order of traffic load. If two configurations have the same traffic load, the one with the lowest
configuration number should go first. Follow the output format shown in the sample below. Note that the
configuration number is right-aligned to a width of five characters and the traffic load is left justified.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
1  2  2 10  3 15
2  1  3 10
3  2  1 12  2 20
1
1 2 3
2 3 1
2
2 3 1
3 2 1
0
2
1  1  2 100
2  1  1 200
1
1 2
1 2
2
1 2
2 1
0
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Configuration Load
    2         119
    1         122
Configuration Load
    2         300
    1         600
</PRE>

<P>

______________________________________________________
2233||||||false||||||
<P>
Once upon a time, in a giant piece of cheese, there lived a cheese mite named Amelia Cheese Mite. Amelia should
have been truly happy because she was surrounded by more delicious cheese than she could ever eat. Nevertheless,
she felt that something was missing from her life.

<p>
One morning, her dreams about cheese were interrupted by a noise she had never heard before. But she immediately
realized what it was  the sound of a male cheese mite, gnawing in the same piece of cheese! (Determining the
gender of a cheese mite just by the sound of its gnawing is by no means easy, but all cheese mites can do it. Thats
because their parents could.)

<p>
Nothing could stop Amelia now. She had to meet that other mite as soon as possible. Therefore she had to find the
fastest way to get to the other mite. Amelia can gnaw through one millimeter of cheese in ten seconds. But it turns
out that the direct way to the other mite might not be the fastest one. The cheese that Amelia lives in is full of holes.
These holes, which are bubbles of air trapped in the cheese, are spherical for the most part. But occasionally these
spherical holes overlap, creating compound holes of all kinds of shapes. Passing through a hole in the cheese takes
Amelia essentially zero time, since she can fly from one end to the other instantly. So it might be useful to travel
through holes to get to the other mite quickly.

<p>
For this problem, you have to write a program that, given the locations of both mites and the holes in the cheese,
determines the minimal time it takes Amelia to reach the other mite. For the purposes of this problem, you can
assume that the cheese is infinitely large. This is because the cheese is so large that it never pays for Amelia to leave
the cheese to reach the other mite (especially since cheese-mite eaters might eat her). You can also assume that the
other mite is eagerly anticipating Amelias arrival and will not move while Amelia is underway.<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains descriptions of several cheese mite test cases. Each test case starts with a line containing a
single integer <i>n (0 &le; n &le; 100)</i>, the number of holes in the cheese. This is followed by <i>n</i> lines containing four integers
<i>x<sub>i</sub>, y<sub>i</sub>, z<sub>i</sub>, r<sub>i</sub></i> each. These describe the centers (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>, <i>z<sub>i</sub></i>) and radii <i>r<sub>i</sub></i> (<i>r<sub>i</sub> > 0</i>) of the holes. All values here (and in the
following) are given in millimeters.

<p>
The description concludes with two lines containing three integers each. The first line contains the values <i>x<sub>A</sub>, y<sub>A</sub>, z<sub>A</sub>,</i>
giving Amelias position in the cheese, the second line containing <i>x<sub>O</sub>, y<sub>O</sub>, z<sub>O</sub>,</i> gives the position of the other mite.

<p>
The input file is terminated by a line containing the number <i>1</i>.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print one line of output, following the format of the sample output. First print the number of the
test case (starting with 1). Then print the minimum time in seconds it takes Amelia to reach the other mite, rounded
to the closest integer. The input will be such that the rounding is unambiguous.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
20 20 20 1
0 0 0
0 0 10
1
5 0 0 4
0 0 0
10 0 0
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT></H2>
<PRE>
Cheese 1: Travel time = 100 sec
Cheese 2: Travel time = 20 sec
</PRE>

<P>

______________________________________________________
2234||||||false||||||
<P>
Your brilliant but absent-minded uncle believes he has solved a difficult crossword puzzle but has misplaced the
solution. He needs your help to reconstruct the solution from a list that contains all the words in the solution, plus
one extra word that is not part of the solution. Your program must solve the puzzle and print the extra word.

<p>
The crossword puzzle is represented by a grid with ten squares on each side. Figure 1 shows the top left corner of a
puzzle. The puzzle has a certain number of slots where a word can be placed. Each slot is represented by the row
and column number of the square where the slot begins, and the direction in which the slot extends from its initial
square (across or down). The length of each slot is not specified. The puzzle has a list of candidate words, all
but one of which is used in solving the puzzle.

<p align=center><img src=p2234a.gif>

<p>
Figure 2 shows a solution to the example puzzle in Figure 1. In a valid solution, each slot is filled with a candidate
word. The word at a slot is defined as the maximal horizontal/vertical sequence from the origin of the slot, along its
direction. Further more, the previous grid of the origin along the direction must not be a letter (which would be confusing).
The set of words at all slots must be the set of input words excluding an extra word. Any
candidate word can be used in any slot as long as the word fits in the puzzle and does not conflict with any other
word. In the example, all the candidate words are used except the word BOY.

<p align=center><img src=p2234b.gif>



<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input data consist of one or more test cases each describing a puzzle trial. The first input line in each test case
contains a positive integer <i>N</i> that represents the number of slots in the puzzle. This line is followed by <i>N</i> lines, each
containing the row number and column number of a square where a slot begins, followed by the letter <i>A</i> (if the slot
is <i>Across</i>) or <i>D</i> (if the slot is <i>Down</i>). The next <i>N + 1</i> input lines contain candidate words that can be used in
the puzzle solution. Words are mutually different. All the words have at least two characters. 

<p>
The final test case is followed by a line containing the number zero.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each trial, print the trial number followed by the word that is not used in the puzzle solution, using the format in
the example output. Observe the following rules:
<blockquote>
1) Print a blank line after each trial.<br><br>
2) If your uncle has made a mistake and the puzzle has no solution using the given words, print the word
Impossible. For example, if Trial 2 has no solution, you should print Trial 2: Impossible.<br><br>
3) If the puzzle can be solved in more than one way, print each word that can be omitted from a valid solution. The
words can be printed in any order but each word must be printed only once. For example, if Trial 3 has a
solution that omits the word DOG and two solutions that omit the word CAT, you should print Trial 3:
DOG CAT or Trial 3: CAT DOG.
</blockquote>
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
1 1 D
2 3 D
3 1 A
5 2 A
SLOW
AGAIN
BOY
TAIL
BEAR
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Trial 1: BOY
</PRE>

<P>

______________________________________________________
2235||||||false||||||
<P>
Once upon a time, in a country far away, there was a king who owned a forest of valuable trees. One day, to deal
with a cash flow problem, the king decided to cut down and sell some of his trees. He asked his wizard to find the
largest number of trees that could be safely cut down.

<p>
All the kings trees stood within a rectangular fence, to protect them from thieves and vandals. Cutting down the
trees was difficult, since each tree needed room to fall without hitting and damaging other trees or the fence. Each
tree could be trimmed of branches before it was cut. For simplicity, the wizard assumed that when each tree was cut
down, it would occupy a rectangular space on the ground, as shown below. One of the sides of the rectangle is a
diameter of the original base of the tree. The other dimension of the rectangle is equal to the height of the tree.

<p align=center><img src=p2235a.gif>

<p>
Many of the kings trees were located near other trees (that being one of the tell-tale signs of a forest.) The wizard
needed to find the maximum number of trees that could be cut down, one after another, in such a way that no fallen
tree would touch any other tree or the fence. As soon as each tree falls, it is cut into pieces and carried away so it
does not interfere with the next tree to be cut.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of several test cases each describing a forest. The first line of each description contains five
integers, <i>xmin, ymin, xmax, ymax,</i> and <i>n</i>. The first four numbers represent the minimal and maximal coordinates of
the fence in the x- and y-directions (<i>xmin < xmax, ymin < ymax</i>). The fence is rectangular and its sides are parallel to
the coordinate axes. The fifth number <i>n</i> represents the number of trees in the forest (<i>1 &le; n &le; 100</i>).

<p>
The next <i>n</i> lines describe the positions and dimensions of the <i>n</i> trees. Each line contains four integers, <i>x<sub>i</sub>, y<sub>i</sub>, d<sub>i</sub>,</i> and
<i>h<sub>i</sub></i>, representing the position of the trees center (<i>x<sub>i</sub>, y<sub>i</sub></i>), its base diameter <i>d<sub>i</sub></i>, and its height <i>h<sub>i</sub></i>. No tree bases touch
each other, and all the trees are entirely inside the fence, not touching the fence at all.

<p>
The input is terminated by a test case with xmin = ymin = xmax = ymax = n = 0. This test case should not be
processed.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, first print its number. Then print the maximum number of trees that can be cut down, one after
another, such that no fallen tree touches any other tree or the fence. Follow the format in the sample output given
below. Print a blank line after each test case.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
0 0 10 10 3
3 3 2 10
5 5 3 1
2 8 3 9
0 0 0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Forest 1
2 tree(s) can be cut
</PRE>

<P>

______________________________________________________
2236||||||false||||||
<P>
Researchers at the Association for Computational Marinelife in Vancouver have been working for several years to
harness various forms of aquatic life with the goal of constructing an underwater computer that can be seen from
outer space. The current research focus is a breed of clam known as the geoduck (pronounced "GOOEY duck"),
scientific name <i>Panope abrupta</i>. Geoducks can be as heavy as ten pounds and as long as 1 meter with their siphons
or "necks" fully extended. Because of their life expectancy (up to 150 years), they seem to be good agents for
manipulating a large-scale oceanic graphical user interface - hence, the "geoduck GUI" project.

<p>
Current research examines pairs of trained geoducks each starting in a distinct corner of a rectangular grid. They
crawl across the grid spreading luminescent chemicals from containers attached to their shells. Geoducks are trained
to move one grid unit horizontally or vertically per time unit to approximate a direction vector (each geoduck has a
unique vector). If a move takes a geoduck off the edge of the grid, a trained dolphin immediately transports it to the
cell on the opposite edge of the grid, effectively providing a "wraparound" mechanism. The entry point in the
opposite edge cell is horizontally or vertically aligned with the exit point of the cell departed and the geoduck
trajectory is maintained. Geoduck moves are synchronized; however, a geoduck halts when it enters a cell that it has
previously visited. If two geoducks are in the same cell at the same time, they halt in that cell. If two geoducks
attempt to move into each others cells at the same time, then they halt. A geoduck is initially placed at a grid corner
so that its direction vector points "in" to the grid (e.g., if the x-component is positive and the y-component is
negative, the starting position is at the minimum x-value and the maximum y-value in the grid).

<p>
Both geoducks begin at time t=1 in their respective (distinct) starting corners. A geoduck follows its vector as if the
vector starting point were anchored to the center of geoducks initial cell position in the grid. It always moves to the
next cell that is divided into regions by the vector (or its extension), with one exception. If the vector passes through
a corner of the grid, the geoduck moves horizontally and then vertically to reach the next cell divided by the vector.
Figure 1 shows several geoduck paths. The numbers in the cells indicate elapsed time. Grid cells are numbered from
the lower left starting at zero in both the x and y directions. If the two geoducks in Figure 1 start at the same time in
the same 6 by 5 grid, they each halt after 5 time units with a total of 10 cells illuminated.

<p align=center><img src=p2236a.gif>

<p>
You must write a program to select pairs of geoducks that illuminate the maximum number of grid cells on the
screen in the least amount of time. Note that there may be some extra timesteps needed after the maximum illumination is achieved, before they halt. Repeat your calculations for various grid sizes and comb inations of geoducks.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input consists of a sequence of test cases each beginning with a line containing two integers <i>m</i> and <i>n</i>, <i>1 &le; m,n &le; 50</i>,
where <i>m</i> and <i>n</i> are not both 1. These are x and y dimensions of the grid. The second line of each test case contains an
integer <i>k, 2 &le; k &le; 10</i>, representing the number of geoducks. At least one pair of geoducks will have distinct starting
points. The next <i>k</i> lines each contain a pair of non-zero integers representing the x and y components of the <i>k</i>
geoduck direction vectors.

<p>
The final test case is followed by two zeros.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print the test case number, the maximum number of illuminated cells, the minimum number of
time units required to illuminate that number of cells, and the sequence numbers of each pair of geoducks that
achieve these values. Print all pairs of geoducks that achieve maximum illumination in minimum time. The order of
printing does not matter; however, do not print any pair twice for the same test case. Imitate the sample output
shown below.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
6 5
3
-4 -3
1 1
1 -1
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1   Cells Illuminated: 10   Minimum Time: 5
   Geoduck IDs:  1  2
   Geoduck IDs:  1  3
</PRE>

<P>

______________________________________________________
2237||||||false||||||
<P>
In western music, the 12 notes used in musical notation are identified with the capital letters A through G, possibly
followed by a sharp '#' or flat 'b' character, and are arranged cyclically as shown below. A slash is used to identify
alternate notations of the same note.

<p>
C/B# C#/Db D D#/Eb E/Fb F/E# F#/Gb G G#/Ab A A#/Bb B/Cb C/B# 

<p>
Any two adjacent notes in the above list are known as a semitone. Any two notes that have exactly one note
separating them in the above list are known as a tone. A major scale is composed of eight notes; it begins on one of
the above notes and follows the progression tone-tone-semitone-tone-tone-tone-semitone. For example, the major
scales starting on C and Db, respectively, are made up of the following notes:

<p>
C D E F G A B C
Db Eb F Gb Ab Bb C Db

<p>
The following rules also apply to major scales:
<blockquote>
1. The scale will contain each letter from A to G once and only once, with the exception of the first letter of the
scale, which is repeated as the last letter of the scale.<br>
2. The scale may not contain a combination of both flat and sharp notes.
</blockquote>

<p>
The note that begins a major scale is referred to as the key of the scale. For example, the scales above are the scales
for the major keys of C and Db, respectively. Transposing notes from one scale to another is a simple matter of
replacing a note in one scale with the note in the corresponding position of another scale. For example, the note F in
the major key of C would transpose to the note Gb in the major key of Db since both notes occupy the same position
in their respective scales.

<p>
You must write a program to transpose notes from one major scale to another.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of multiple test cases, with one test case per line. Each line starts with a source key, followed by a
target key, and then followed by a list of notes to be transposed from the major scale of the source key to the major
scale of the target key. Each list is terminated by a single asterisk character. All notes on a line and the terminating
asterisk are delimited by a single space.

<p>
The final line of the input contains only a single asterisk which is not to be processed as a test case .

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Each test case produces one or more lines of output. If the source and target keys are valid, then the first output line
for each input line should read <i>Transposing from X to Y:</i> where <i>X</i> is the source key and <i>Y</i> is the target
key. If either the source or target key is not valid a line which reads <i>Key of X/Y is not a valid major
key</i>, where <i>X/Y</i> is the key that is not valid, should be output and the remainder of the input for that line skipped. If
both the source and target key are not valid, report only the source key.

<p>
For test cases that contain valid source and target keys, the first output line will be followed by one output line for
each note to be transposed. If the note is a valid note in the major scale of the source key then the output line should
read <i>M transposes to N</i> where <i>M</i> is the note in the source key and <i>N</i> is the corresponding note in the target
key. If the input note is not a valid note in the major scale of the source key then the output line should read <i>M is
not a valid note in the X major scale</i> where <i>M</i> is the input note and <i>X</i> is the source key. For
either valid or non-valid notes, the output line should be indented in a consistent manner.

<p>
The output data for each input line should be delimited by a single blank line. The format of your output should be
similar to the output shown below.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
C Db F *
Db C Gb *
C B# A B *
C D A A# B Bb C *
A# Bb C *
*
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Transposing from C to Db:
  F transposes to Gb

Transposing from Db to C:
  Gb transposes to F

Key of B# is not a valid major key

Transposing from C to D:
  A transposes to B
  A# is not a valid note in the C major scale
  B transposes to C#
  Bb is not a valid note in the C major scale
  C transposes to D

Key of A# is not a valid major key
</PRE>

<P>

______________________________________________________
2238||||||false||||||
<P>
A technique used in early multiprogramming operating systems involved partitioning the available primary memory
into a number of regions with each region having a fixed size, different regions potentially having different sizes.
The sum of the sizes of all regions equals the size of the primary memory.

<p>
Given a set of programs, it was the task of the operating system to assign the programs to different memory regions,
so that they could be executed concurrently. This was made difficult due to the fact that the execution time of a
program might depend on the amount of memory available to it. Every program has a minimum space requirement,
but if it is assigned to a larger memory region its execution time might increase or decrease.

<p>
In this program, you have to determine optimal assignments of programs to memory regions. Your program is given
the sizes of the memory regions available for the execution of programs, and for each program a description of how
its running time depends on the amount of memory available to it. Your program has to find the execution schedule
of the programs that minimizes the average turnaround time for the programs. An execution schedule is an
assignment of programs to memory regions and times, such that no two programs use the same memory region at
the same time, and no program is assigned to a memory region of size less than its minimum memory requirement.
The turnaround time of the program is the difference between the time when the program was submitted for
execution (which is time zero for all programs in this problem), and the time that the program completes execution.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input data will contain multiple test cases. Each test case begins with a line containing a pair of integers <i>m</i> and
<i>n</i>. The number <i>m</i> specifies the number of regions into which primary memory has been partitioned (<i>1 &le; m &le; 10</i>), and
<i>n</i> specifies the number of programs to be executed (<i>1 &le; n &le; 50</i>).

<p>
The next line contains <i>m</i> positive integers giving the sizes of the <i>m</i> memory regions. Following this are <i>n</i> lines,
describing the time-space tradeoffs for each of the <i>n</i> programs. Each line starts with a positive integer <i>k</i> (<i>k &le; 10</i>),
followed by <i>k</i> pairs of positive integers <i>s<sub>1</sub>,t<sub>1</sub>,s<sub>2</sub>,t<sub>2</sub>,,s<sub>k</sub>,t<sub>k</sub>,</i> that satisfy <i>s<sub>i</sub> < s<sub>i+1</sub></i> for <i>1 &le; i < k</i>. The minimum space
requirement of the program is <i>s<sub>1</sub></i>, i.e. it cannot run in a partition of size less than this number. If the program runs in
a memory partition of size <i>s</i>, where <i>s<sub>i</sub> &le; s < s<sub>i+1</sub></i> for some <i>i</i>, then its execution time will be ti. Finally, if the programs
runs in a memory partition of size sk or more, then its execution time will be tk.

<p>
A pair of zeroes will follow the input for the last test case.

<p>
You may assume that each program will execute in exactly the time specified for the given region size, regardless of
the number of other programs in the system. No program will have a memory requirement larger than that of the
largest memory region.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, first display the case number (starting with 1 and increasing sequentially). Then print the
minimum average turnaround time for the set of programs with two digits to the right of the decimal point. Follow
this by the description of an execution schedule that achieves this average turnaround time. Display one line for each
program, in the order they were given in the input, that identifies the program number, the region in which it was
executed (numbered in the order given in the input), the time when the program started execution, and the time when
the program completed execution. Follow the format shown in the sample output, and print a blank line after each
test case.

<p>
If there are multiple program orderings or assignments to memory regions that yield the same minimum average
turnaround time, give one of the schedules with the minimum average turnaround time.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2 4
40 60
1 35 4
1 20 3
1 40 10
1 60 7
3 5
10 20 30
2 10 50 12 30
2 10 100 20 25
1 25 19
1 19 41
2 10 18 30 42
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1
Average turnaround time = 7.75
Program 1 runs in region 1 from 0 to 4
Program 2 runs in region 2 from 0 to 3
Program 3 runs in region 1 from 4 to 14
Program 4 runs in region 2 from 3 to 10

Case 2
Average turnaround time = 35.40
Program 1 runs in region 2 from 25 to 55
Program 2 runs in region 2 from 0 to 25
Program 3 runs in region 3 from 0 to 19
Program 4 runs in region 3 from 19 to 60
Program 5 runs in region 1 from 0 to 18
</PRE>

<P>

______________________________________________________
2239||||||false||||||
<P>
Professor Monotonic has been experimenting with comparison networks, each of which includes a number of two-input,
two-output comparators. A comparator, as illustrated below, will compare the values on its inputs, i<sub>1</sub> and i<sub>2</sub>,
and place them on the outputs, o<sub>1</sub> and o<sub>2</sub>, so that o<sub>1</sub> &le; o<sub>2</sub> regardless of the relationship between the input values.

<p align=center><img src=p2239a.gif>

<p>
A comparison network has n inputs a<sub>1</sub>,a<sub>2</sub>,,a<sub>n</sub> and n outputs b<sub>1</sub>,b<sub>2</sub>,,b<sub>n</sub>. Each of the two inputs to a comparator is
either connected to one of the networks n inputs or connected to the output of another comparator. Each of the two
outputs from a comparator is either connected to one of the networks n outputs or is connected to the input of
another comparator. A graph of the interconnections of comparators must be acyclic. The illustration below shows a
comparison network with four inputs, four outputs, and five comparators.

<p align=center><img src=p2239b.gif>

<p>
In operation, the networks inputs are applied and the comparators perform their functions. Of course a comparator
cannot operate until both of its inputs are available. Assuming a comparator requires one unit of time to operate, this
sample network will require three units of time to produce its outputs. Comp -1 and Comp-2 operate in parallel, as do
Comp-3 and Comp-4. Comp-5 cannot operate until Comp -3 and Comp-4 have completed their work.

<p>
Professor Monotonic needs help in determining which proposed comparison networks are also sorting networks, and
how long they will take to perform their task. A sorting network is a comparison network for which the outputs are
monotonically increasing regardless of the input values. The example above is a sorting network, since for all
possible input values the output values will have the relation b<sub>1</sub> &le; b<sub>2</sub> &le; b<sub>3</sub> &le; b<sub>4</sub>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The professor will provide a description of each comparison network to be examined. Each description will begin
with a line containing values for n (the number of inputs) and k (the number of comparators). These values satisfy
<i>1 = n = 12</i> and <i>0 = k = 150</i>. This is followed by zero or more non-empty lines, each containing at most 15 pairs of
comparator inputs. The source of the input to each comparator is given by a pair of integers <i>i</i> and <i>j</i>. Each of these
specifies either the subscript of a network input that is input to the comparator (that is, <i>a<sub>i</sub></i> or <i>a<sub>j</sub></i>), or the corresponding
output of a preceding comparator.

<p>
The outputs of a comparator are numbered the same as its inputs (in other words, if the comparators inputs are <i>i</i> and
<i>j</i>, the corresponding outputs are also labeled <i>i</i> and <i>j</i>). The order in which these pairs appear is significant, and affects
the order in which the comparators operate. If two pairs contain an integer in common, the order of the
corresponding comparators in the network is determined by the order of the pairs in the list. For example, consider
the input data for the example shown:
<blockquote>
<pre>
4   5
1   2    3   4    1   3
2   4    2   3
</pre>
</blockquote>

<p>
This indicates there will be four input values and five comparators in the network. The first comparator (Comp -1)
will receive its input values from network inputs a<sub>1</sub> and a<sub>2</sub>. The second comp arator (Comp -2) will receive its input
values from network inputs a<sub>3</sub> and a<sub>4</sub>. The third comparator (Comp -3) will receive its first input from the first output
of Comp -1, and will receive its second input from the first output of Comp -2. Similarly, the fourth comparator
(Comp-4) will receive its first input from the second output of Comp -1, and will receive its second input from the
second output of Comp -2. Finally, the fifth comparator (Comp -5) will receive its first input from the first output of
Comp-4, and will receive its second input from the second output of Comp -3. The outputs b<sub>1</sub>,b<sub>2</sub>,,b<sub>n</sub> are taken from
the first output of Comp -3, the first output of Comp -5, the second output of Comp -5, and the second output of
Comp-4, respectively.

<p>
A pair of zeros will follow the input data for the last network.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input case, display the case number (cases are numbered sequentially starting with 1), an indication of
whether the network is a sorting network or not, and the number of time units required for the network to operate
(regardless of whether it is a sorting network or not).
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4  5
1  2   3  4   1  3
2  4   2  3
8  0
3  3
1  2   2  3   1  2
0  0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1 is a sorting network and operates in 3 time units.
Case 2 is not a sorting network and operates in 0 time units.
Case 3 is a sorting network and operates in 3 time units.
</PRE>

<P>

______________________________________________________
2240||||||false||||||
<P>
The game Vexed is a Tetris -like game created by James McCombe. The game consists of a board and blocks that are
arranged in stacks. If the space to the immediate left or right of a block is open (that is, it contains no other block nor
any part of the game board wall), then that block can be moved in that direction. Only blocks that are not part of
the game board wall can be moved; wall blocks are stationary in all events. After a block is moved, if it or any
other block no longer has anything under it, those blocks fall until they land on another block. After all blocks have
landed, if any two or more identically-marked pieces are in contact horizontally and/or vertically, then those blocks
are removed as a group. If multiple such groups result, then all groups are removed simultaneously. After all such
groups are removed, all blocks again fall to resting positions (again, wall blocks do not move). This might then
result in more groups being removed, more blocks falling, and so on, until a stable state is reached. The goal of the
game is to remove all the movable blocks from the board.

<p>
Consider the simple example shown here. For reference purposes, number the rows of the board from top to bottom
starting with an index value of zero, and number the columns from the left to right, also with a starting index value
of zero. Board positions can be therefore be referenced as ordered (row, column) pairs. By additionally using an L
or R to refer to a left or right push respectively, we can also use the ordered triple (row, column, direction) to
indicate moves.

<p align=center><img src=p2240a.gif>

<p>
In (A) we have two choices for moves as shown in (B). These moves are (0,1,R) and (1,3,L) using the identification
scheme defined above. Note that if we try (0,1,R), the resulting board state as shown in (C) is a dead end; no further
moves are possible and blocks still remain on the board. If we choose the other move, however, the blocks at (1,2)
and (2,2) are now in vertical contact, so they form a group that should be removed as shown by (D). The resulting
board state is shown in (E), leaving the two moves shown by (F). Note that either move would eventually allow a
solution, but (0,1,R) leads to a two move solution, whereas (2,1,R) leads to a three move solution. (G) and (H) show
the final steps if we choose (0,1,R).

<p>
There are often many ways to solve a particular Vexed puzzle. For this problem, only solutions with a minimum
number of moves are of interest. The minimum number of moves can sometimes be surprising. Consider another
example.

<p align=center><img src=p2240b.gif>

<p>
In this example there are ten possible first moves, and there are in fact several ways to arrive at a solution. There is
only one move in (A), however, that allows us to achieve a solution with the minimum number of moves. Observe
the sequence of events shown if (3,1,R) is chosen as the first move.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of several puzzles. Each begins with a line containing integers giving the number of rows
(NR) and columns (NC) in the puzzle, and a string of characters (terminated by the end of line) giving the name of
the puzzle; these items are separated by one or more spaces. This line is followed by an NR by NC array of
characters defining the puzzle itself; an end of line will follow the last character in each row. NR and NC will each
be no larger than 9. The outer walls (in addition to inner wall blocks) on the left, right, and bottom will always
be included as part of the puzzle input, and are represented as hash mark (#) characters. Moveable blocks are
represented by capital letters which indicate the marking on the block. To avoid possible ambiguities, open spaces in
the puzzle are represented in the input by a hyphen () rather than by spaces. Other than the outer walls, wall blocks
and moveable blocks may be arranged in any stable pattern. Every input puzzle is guaranteed to have a solution
requiring 11 or fewer moves.

<p>
A puzzle with zero dimensions marks the end of the input and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input puzzle, display a minimum length solution formatted as shown in the sample output. In the event that
there are multiple solutions of minimum length, display one of them.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 5 SAMPLE-01
#A--#
##-B#
#AB##
#####
6 7 SAMPLE-02
#--Y--#
#-ZX-X#
#-##-##
#-XZ--#
####YZ#
#######
0 0 END
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0 0 END
SAMPLE-01: Minimum solution length = 2
(B,1,3,L) (A,0,1,R)
SAMPLE-02: Minimum solution length = 9
(Y,0,3,R) (Z,4,5,L) (X,1,3,R) (Z,1,2,R)
(Z,1,3,R) (X,3,4,R) (X,3,2,R) (X,4,5,L)
(X,1,5,L)
</PRE>

<P>

______________________________________________________
2241||||||false||||||
<P>
Stockbrokers are known to overreact to rumours. You have been contracted to develop a
method of spreading disinformation amongst the stockbrokers to give your employer the
tactical edge in the stock market. For maximum effect, you have to spread the rumours in
the fastest possible way.

<P>
Unfortunately for you, stockbrokers only trust information coming from their `trusted
sources'. This means you have to take into account the structure of their contacts when
starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the
rumour on to each of his colleagues. Your task will be to write a program that tells you
which stockbroker to choose as your starting point for the rumour, as well as the time it
will take for the rumour to spread throughout the stockbroker community. This duration is
measured as the time needed for the last person to receive the information.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program will input data for different sets of stockbrokers.
 Each set starts with a line
with the number of stockbrokers. Following this is a line for each
stockbroker which contains the number of people who they have
contact with, who these people are, and the time taken for them to
pass the message to each person. The format of each stockbroker
line is as follows: The line starts with the number of contacts
(<SPAN CLASS="MATH"><I>n</I></SPAN>), followed by <SPAN CLASS="MATH"><I>n</I></SPAN> pairs of integers, one pair for each
contact. Each pair lists first a number referring to the contact
(e.g. a `<TT>1</TT>' means person number one in the set), followed by
the time in minutes taken to pass a message to that person. There
are no special punctuation symbols or spacing rules.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each set of data, your program must output a single line
containing the person who results in the fastest message
transmission, and how long before the last person will receive any
given message after you give it to this person, measured in
integer minutes.

<P>
Each person is numbered 1 through to the number of stockbrokers. The time taken to
pass the message on will be between 1 and 10 minutes (inclusive), and the number of
contacts will range between 0 and one less than the number of stockbrokers. The number
of stockbrokers will range from 1 to 100. The input file is terminated by a set of
stockbrokers containing 0 (zero) people.

<P>
It is possible that your program will receive a network of connections that excludes some
persons, i.e. some people may be unreachable. If your program
detects such a broken network, simply output the message `<TT>disjoint</TT>'.  Note that the time taken to pass the message from
person A to person B is not necessarily the same as the time taken
to pass it from B to A, if such transmission is possible at all.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
2 2 4 3 5
2 1 2 3 6
2 1 2 2 2
5
3 4 4 2 8 5 3
1 5 8
4 1 6 4 10 2 7 5 2
0
2 2 5 1 5
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 2
3 10
</PRE>

<P>

______________________________________________________
2242||||||false||||||
<P>Consider the following 5 picture frames placed on an 9 x 8 array.<P><PRE>
........   ........   ........   ........   .CCC....
EEEEEE..   ........   ........   ..BBBB..   .C.C....
E....E..   DDDDDD..   ........   ..B..B..   .C.C....
E....E..   D....D..   ........   ..B..B..   .CCC....
E....E..   D....D..   ....AAAA   ..B..B..   ........
E....E..   D....D..   ....A..A   ..BBBB..   ........
E....E..   DDDDDD..   ....A..A   ........   ........
E....E..   ........   ....AAAA   ........   ........
EEEEEE..   ........   ........   ........   ........

   1          2          3          4          5
</PRE><P>Now place them on top of one another starting with 1 at the bottom and ending up with 5 on top. If any part of a frame covers another it hides that part of the frame below. Viewing the stack of 5 frames we see the following.<P><PRE>
.CCC....
ECBCBB..
DCBCDB..
DCCC.B..
D.B.ABAA
D.BBBB.A
DDDDAD.A
E...AAAA
EEEEEE..
</PRE><P>In what order are the frames stacked from bottom to top? The answer is `<TT>EDABC</TT>'. Your problem is to determine the order in which the frames are stacked from bottom to top given a picture of the stacked frames. Here are the rules:<P><OL><LI>The width of the frame is always exactly 1 character and the sides are never shorter than 3 characters. </LI><LI>It is possible to see at least one part of each of the four sides of a frame. A corner shows two sides. </LI><LI>The frames will be lettered with capital letters, and no two frames will be assigned the same letter. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each input block contains the height, <SPAN CLASS="MATH"><I>h</I></SPAN> (<SPAN CLASS="MATH"><I>h</I> &le; 30</SPAN>) on the first line and the width <SPAN CLASS="MATH"><I>w</I></SPAN> (<SPAN CLASS="MATH"><I>w</I> &le; 30</SPAN>) on the second. A picture of the stacked frames is then given as <SPAN CLASS="MATH"><I>h</I></SPAN> strings with <SPAN CLASS="MATH"><I>w</I></SPAN> characters each.<P>Your input may contain multiple blocks of the format described above, without any blank lines in between. All blocks in the input must be processed sequentially.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Write the solution to the standard output. Give the letters of the frames in the order they were stacked from bottom to top. If there are multiple possibilities for an ordering, list all such possibilities in alphabetical order, each one on a separate line. There will always be at least one legal ordering for each input block. List the output for all blocks in the input sequentially, without any blank lines (not even between blocks).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9
8
.CCC....
ECBCBB..
DCBCDB..
DCCC.B..
D.B.ABAA
D.BBBB.A
DDDDAD.A
E...AAAA
EEEEEE..
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
EDABC
</PRE><P>
______________________________________________________
2243||||||false||||||
<P>When a radio station is broadcasting over a very large area, repeaters are used to retransmit the signal so that every receiver has a strong signal. However, the channels used by each repeater must be carefully chosen so that nearby repeaters do not interfere with one another. This condition is satisfied if adjacent repeaters use different channels. Since the radio frequency spectrum is a precious resource, the number of channels required by a given network of repeaters should be minimised. You have to write a program that reads in a description of a repeater network and determines the minimum number of channels required.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of maps of repeater networks. Each map begins with a line containing the number of repeaters. This is between 1 and 26, and the repeaters are referred to by consecutive upper-case letters of the alphabet starting with A. For example, ten repeaters would have the names A,B,C,...,I and J. A network with zero repeaters indicates the end of input.<P>Following the number of repeaters is a list of adjacency relationships. Each line has the form:<P><PRE>
    A:BCDH
</PRE><P>which indicates that the repeaters B, C, D and H are adjacent to the repeater A. The first line describes those adjacent to repeater A, the second those adjacent to B, and so on for all of the repeaters. If a repeater is not adjacent to any other, its line has the form<P><PRE>
    A:
</PRE><P>The repeaters are listed in alphabetical order.<P><P><BR>Note that the adjacency is a symmetric relationship; if A is adjacent to B, then B is necessarily adjacent to A. Also, since the repeaters lie in a plane, the graph formed by connecting adjacent repeaters does not have any line segments that cross.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each map (except the final one with no repeaters), print a line containing the minumum number of channels needed so that no adjacent channels interfere. The sample output shows the format of this line. Take care that channels is in the singular form when only one channel is required.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
A:
B:
4
A:BC
B:ACD
C:ABD
D:BC
4
A:BCD
B:ACD
C:ABD
D:ABC
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 channel needed.
3 channels needed.
4 channels needed.
</PRE><P>
______________________________________________________
2244||||||false||||||
<P>
You are in charge of security at a top-secret government research
facility. Recently your government has captured a live
extra-terrestrial (ET) life form, and is hosting an open day for
fellow researchers. Of course, not all the guests can be trusted,
so they are assigned different security clearance levels. Only
guests with a level 5 rating will be allowed into the lab where
the extra-terrestrial is being held; other than that, everyone is
free to roam throughout the rest of the facility. Each room in the
facility is connected via one-way airlocks, so that you can pass
through the door in only one direction.

<P>
To protect your precious ET you will put in place enhanced
security measures (in the form of armed guards) on the route
leading to the room containing the ET, but not in the room itself
ð the guards do not have sufficient clearance to enter the room
containing the ET. The guards will check the identity and the
security rating of all guests trying to pass through the room in
which they are stationed, so you would like to place the guards
where they will cause the minimum amount of irritation to the
guests who have no intention of visiting the ET. The room where
the guards must be placed thus satisfies the following two
conditions:

<P>

<OL>
<LI>In order to get to the room containing the ET, the guests
must pass through the   room containing the guards;

<P>
</LI>
<LI>There is no other room with this property that is closer to the room
containing the ET - remember, the guards cannot be placed in the room containing the ET itself.
</LI>
</OL>

<P>
The diagram below illustrates one possible map of your facility:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2244.eps}$
 -->
<IMG
 WIDTH="400" HEIGHT="400" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2244.gif
 ALT="\epsfbox{p2244.eps}">
</DIV>

<P>
Note that placing the guards in room 2 would satisfy the first condition, but room 3 is
closer to the ET, so the guards must be placed in room 3.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<B>The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</B>

<P>

<P><P>
<BR>

<P>
All guests enter through room 0, the entrance to your facility.
Your program accepts a sequence of lines containing integers. The
first line consists of two integers: the number of rooms, and the
room in which the ET is being held (out of his own free will, of
course). The rest of the input is a sequence of lines consisting
of only two integers, specifying where the airlock-doors are
located. The first number on these lines specifies the source
room, and the second the destination room. Remember: you can pass
only from the source room to the destination room.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<B>For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>

<P>
The output of your program consists only of a single line:

<P>

<P>
<BR>

<TT>Put guards in room </TT><SPAN CLASS="MATH"><I>N</I></SPAN>.

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>N</I></SPAN> is the room you've decided to place the
guards.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input (This input sequence specifies the map shown above.)</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

9 4
0 2
2 3
3 4
5 3
5 4
3 6
6 5
6 7
6 8
4 7
0 1
1 7
7 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Put guards in room 3.
</PRE>

<P>

______________________________________________________
2245||||||false||||||
<P>Fractions in octal (base 8) notation can be expressed exactly in decimal notation. For example, 0.75 in octal is 0.963125 (7/8 + 5/64) in decimal. All octal numbers of <SPAN CLASS="MATH"><I>n</I></SPAN> digits to the right of the octal point can be expressed in no more than 3n decimal digits to the right of the decimal point.<P>Write a program to convert octal numerals between 0 and 1, inclusive, into equivalent decimal numerals.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input to your program will consist of octal numbers, one per line, to be converted. Each input number has the form <SPAN CLASS="MATH">0.<I>d</I><SUB>1</SUB><I>d</I><SUB>2</SUB><I>d</I><SUB>3</SUB>...<I>d</I><SUB>k</SUB></SPAN>, where the <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> are octal digits (0..7). There is no limit on <SPAN CLASS="MATH"><I>k</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Your output will consist of a sequence of lines of the form<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">0.<I>d</I><SUB>1</SUB><I>d</I><SUB>2</SUB><I>d</I><SUB>3</SUB>...<I>d</I><SUB>k</SUB>[8] = 0.<I>D</I><SUB>1</SUB><I>D</I><SUB>2</SUB><I>D</I><SUB>3</SUB>...<I>D</I><SUB>m</SUB>[10]</DIV><P></P>where the left side is the input (in octal), and the right hand side the decimal (base 10) equivalent. There must be no trailing zeros, i.e. <SPAN CLASS="MATH"><I>D</I><SUB>m</SUB></SPAN> is not equal to <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0.75
0.0001
0.01234567
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.75 [8] = 0.953125 [10]
0.0001 [8] = 0.000244140625 [10]
0.01234567 [8] = 0.020408093929290771484375 [10]
</PRE><P>
______________________________________________________
2246||||||false||||||
<P>
You have been contracted by a terrorist group to crack encrypted
transmissions. The only information that the terrorists could give
you regarding the encrypted message is that a fixed key-length
XOR-encryption algorithm was used to encode it. After a brief
search on the 'Net, you find the following definition of
XOR-encryption:

<P>
<BLOCKQUOTE>
Assuming that we have a character <I>u</I>[<I>i</I>] from the unencrypted
input stream, and a key <I>k</I> of length <I>l</I> with characters <I>k</I>[<I>j</I>],

0 &le; <I>j</I> &lt; <I>l</I>, then the encrypted
value <I>e</I>[<I>i</I>] is obtained as follows:
</BLOCKQUOTE>
<center>
<I>e</I>[<I>i</I>] = <I>u</I>[<I>i</I>]&nbsp;<I>XOR</I>&nbsp;<I>k</I>[<I>iMODl</I>]
</center>
<BLOCKQUOTE>

where MOD is the remainder after integer division (the %
operator in C, C++ and Java), and XOR is the bitwise XOR operator
applied to an 8-bit character (the <code>^</code> operator in C, C++ and Java).
XOR encryption is a symmetric encryption scheme, so that the
message is decoded by encrypting the encrypted message (a second
time) with the same key, so that
</BLOCKQUOTE>
<center>
<I>u</I>[<I>i</I>] = <I>e</I>[<I>i</I>]&nbsp;<I>XOR</I>&nbsp;<I>k</I>[<I>iMODl</I>]
</center>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>

<P>
You are given an encrypted input stream of fewer than 30 000
characters. Your program must output the decrypted stream. The
stream was encrypted using XOR encryption with a fixed length key
of fewer than 30 characters. Each character in the key is unique
(appears only once), and is selected from the set a..z merged with
0..9.

<P>
Your task is to determine the correct key length, and decrypt the
encrypted input stream. Your terrorist friends provided you with
one last vital piece of information: ``The decrypted message will
be in English."

<P>
It is recommended that you write an XOR encryption program first
to aid you in testing your solution.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
The output of the XOR encryption algorithm is not normally
printable, since it may contain ASCII codes greater than 127.
Therefore, the sample-encrypted message below is shown in
numerical ASCII values (in decimal) - the actual input file
contains the ASCII symbols. If the message ``<TT>the quick brown
fox jumps over the lazy dog</TT>" is encrypted using the key "12" (the
literal characters "1" and "2", concatenated), the following
(binary) file results.

<P>
<PRE>
69 90 84 18 64 71 88 81 90 18 83 64 94 69 95 18
87 93 73 18 91 71 92 66 66 18 94 68 84 64 17 70
89 87 17 94 80 72 72 18 85 93 86
</PRE>

<P>
If these values are converted to ASCII symbols and stored in a
file (the file length should be exactly 43 bytes), it can be used
as input to your program. It is recommended that you first write
the encryption algorithm.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
Your program should determine the key length to be 2 (you should
not output this value), and decrypt the message to yield:

<P>
<PRE>
the quick brown fox jumps over the lazy dog
</PRE>

<P>


______________________________________________________
2247||||||false||||||
The <EM>digital root</EM> of a number is found by adding together the
digits that make up the number. If the resulting number has more
than one digit, the process is repeated until a single digit
remains.

 Your task in this problem is to calculate a variation on
the digital root --a <EM>prime digital root</EM>. The addition
process described above stops when there is only one digit left,
but will also stop if the original number, or any of the
intermediate numbers (formed by addition) are prime numbers. If
the process continues and results in a single digit that is not a
prime number, then the original number has no prime digital root.

<P>
<BR>
An integer <EM>greater than</EM> one is called a prime number if its only
positive divisors (factors) are one and itself.

<UL>
<LI>For example, the first six primes are 2, 3, 5, 7, 11, and 13.

</LI>
<LI>Number 6 has four positive divisors: 6, 3, 2, and 1. Thus
number 6 is <EM>not</EM> a prime.

</LI>
<LI>Caveat: number 1 is <EM>not</EM> a prime.
</LI>
</UL>

<P>
<BR>

<B>Examples of prime digital roots:</B>

<DL>
<DT><STRONG>1</STRONG></DT>
<DD>This is not a prime number, so 1
has no prime digital root.

</DD>
<DT><STRONG>3</STRONG></DT>
<DD>This is a prime number, so the prime
digital root of 3 is 3.

</DD>
<DT><STRONG>4</STRONG></DT>
<DD>This not a prime number, so 4 has no
prime digital root.

</DD>
<DT><STRONG>11</STRONG></DT>
<DD>This is a prime number, so the prime
digital root of 11 is 11.

</DD>
<DT><STRONG>642</STRONG></DT>
<DD>This is not a prime number, so
adding its digits gives <!-- MATH
 $6 + 4 + 2 = 12$
 -->
<SPAN CLASS="MATH">6 + 4 + 2 = 12</SPAN>. This is not a prime
number, so adding again gives <SPAN CLASS="MATH">1 + 2 = 3</SPAN>. This is a prime number,
so the prime digital root of 642 is 3.

</DD>
<DT><STRONG>128</STRONG></DT>
<DD>This is not a prime
number, so adding its digits gives <!-- MATH
 $1 + 2 + 8 = 11$
 -->
<SPAN CLASS="MATH">1 + 2 + 8 = 11</SPAN>. This is a prime
number, so the prime digital root of 128 is 11.

</DD>
<DT><STRONG>886</STRONG></DT>
<DD>This is not a
prime number, so adding its digits gives <!-- MATH
 $8 + 8 + 6 = 22$
 -->
<SPAN CLASS="MATH">8 + 8 + 6 = 22</SPAN>. This is
not a prime number, so adding again gives <SPAN CLASS="MATH">2 + 2 = 4</SPAN>. This is not a
prime number, so 886 has no prime digital root.
</DD>
</DL>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will contain a single
integer on each line in the range 0 to 999999 inclusive. The end
of the input will be indicated by the value `<TT>0</TT>'.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
If the input number has a prime digital root, then the
input number must be output right aligned with a field width of 7.
It must be followed by a single space, and then by the calculated
prime digital root also right aligned with a field width of 7.

If the input number has no prime digital root, then the input number
should be output as defined above followed by 4 spaces followed by
the word `<TT>none</TT>' (in lowercase). The terminating zero should not be
output.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
3
4
11
642
128
886
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
      1    none
      3       3
      4    none
     11      11
    642       3
    128      11
    886    none
</PRE>


<P>

______________________________________________________
2248||||||false||||||
<p>This problem requires you to search a black and white satellite image of a desert for a secret building complex with a given shape. A complex of this given shape may host an installation for producing the strategic xeenium macgillicudamate ingredient, and must keep its orientation with regard to cardinal axes (North-East-South-West). Rotations and mirror images are not allowed because they would interfere with the delicate alchemy required for the production process. You must determine how many times the given complex may possibly occur in the image.<p>Consider the following images, both on the same scale, where a `<TT>#</TT>' (sharp) is a ``black'' pixel representing a part of a building, and a `<TT>.</TT>' (dot) is a ``white'' pixel, representing sand. On the left is an image of the complex you are trying to locate, on the right is an image of the desert with some buildings on it.<DIV ALIGN="CENTER"><TABLE COLS=3><COL ALIGN=CENTER><COL ALIGN=JUSTIFY WIDTH="1cm"><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=center ALIGN=CENTER NOWRAP><TABLE COLS=1 BORDER FRAME=BOX RULES=NONE><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>#..</code></TD></TR><!--/TABLE>
</TD><TD></TD><TD></TD></TR--><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><code>#.#</code></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><code>#..</code></TD></TR></table></td><!--/TBODY><TBODY>
<TR><TD></TD><TD></TD--><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TABLE COLS=1 BORDER FRAME=BOX RULES=NONE><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>#..... #........................#...</code></TD></TR><!--/TABLE>
</TD></TR--><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><code>#.#....#.#.. #........ #............</code></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><code>#......#.#...##....#...##......###..</code></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><code>.......#.....#...#.#...##........#.#</code></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><code>...................#.....#.......#..</code></TD></TR></table></td></TBODY><!--TBODY>
<TR><TD></TD><TD></TD><TD></TD></TR>
</TBODY--></TABLE></DIV><UL><LI>How many possible locations for the given secret buildings do we count? </LI><LI>The answer is <EM>four</EM>: one at the top-left corner, two overlapped possibilities to its right, and one in the bottom right. The shapes near the top-right corner, and in the centre bottom don't count because they are rotated (remember that rotated and/or mirrored images do not count). </LI><LI>Note that, as this answer implies, the sand pixels in the image of the building complex simply establish the necessary relationships between the building parts. In the actual image they may contain <EM>either</EM> sand <EM>or</EM> other building parts (possibly for disguising the true nature of the complex). </LI><LI><EM>Assume</EM> that images representing strategic complexes are already trimmed of any unneeded dot ``white'' pixels on the edges, ie, these images will always contain <EM>at least one <TT>#</TT> character on each edge</EM> (as our example shows). An edge here is the first or last row or column. </LI></UL><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each problem will give you the specification for the building complex image followed by the specification for the desert image. There may be several problems in the input data, which will be terminated by a line containing just `<TT>0 0</TT>'. In each problem the input is:<UL><LI>Line 1: 2 positive integers, <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>B</I><SUB>2</SUB></SPAN>, respectively representing the number of lines and the numbers of columns in the following Buildings image. Both numbers will be in the range 1 to 16 inclusive. </LI><LI>Next <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB></SPAN> lines: <SPAN CLASS="MATH"><I>B</I><SUB>2</SUB></SPAN> characters (`<TT>#</TT>' or `<TT>.</TT>') on each line to represent part of the image of the building complex. </LI><LI>Next Line: 2 positive integers, <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>D</I><SUB>2</SUB></SPAN>, respectively representing the number of lines and the numbers of columns in the following <EM>Desert</EM> image. Both numbers will be in the range 1 to 64 inclusive. </LI><LI>Next <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> lines: <SPAN CLASS="MATH"><I>D</I><SUB>2</SUB></SPAN> characters (`<TT>#</TT>' or `<TT>.</TT>') on each line to represent the desert image. </LI></UL><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Print one line for each problem, giving the number of occurrences.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2 2
#.
##
3 5
#.#.#
#####
.###.
1 3
#.#
3 6
##..##
.#.#.#
#.#...
3 3
#..
#.#
#..
5 36
#......#........................#...
#.#....#.#...#.........#............
#......#.#...##....#...##......###..
.......#.....#...#.#...##........#.#
...................#.....#.......#..
0 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
4
3
4
</PRE><P>
______________________________________________________
2249||||||false||||||
<p>A histogram is a bar graph, and a convenient way to view a distribution of values. Each bar of the graph represents a range of values, and the length of a bar represents the number of input values in that range. Your program must read a collection of non-negative integer input values, and display it as a histogram. The bars of the histogram are represented as horizontal rows of `<TT>#</TT>' characters. The parameters of the histogram are:<UL><LI>the <SPAN CLASS="MATH"><I>lo</I></SPAN> bound (the lowest value that the histogram can represent) </LI><LI>the <SPAN CLASS="MATH"><I>step</I></SPAN> size (the range of values represented by a single bar) </LI></UL><p>The bars of the histogram are numbered from 0 up to some maximum number. The number of `<TT>#</TT>' characters in histogram bar number <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of input values which lie between <SPAN CLASS="MATH"><I>lo</I> + <I>n</I>*<I>step</I></SPAN> and <SPAN CLASS="MATH"><I>lo</I> + (<I>n</I> + 1)*<I>step</I> - 1</SPAN>. So bar 3 of a histogram where <SPAN CLASS="MATH"><I>lo</I></SPAN> is 5 and <SPAN CLASS="MATH"><I>step</I></SPAN> is 10 will represent values between 35 and 44, bar 4 of the same histogram will represent values from 45 to 54. For this problem, all input values, and the histogram parameters, are non-negative integers. Histogram parameters must be chosen to be ``nice'' round numbers that will allow the histogram to have no more than 20 bars. The constraints are as follows:<UL><LI>The <SPAN CLASS="MATH"><I>step</I></SPAN> size must be 1 or 2 or 5, possibly multiplied by some positive integer power of 10. For example: 2, 100, 5000. The <SPAN CLASS="MATH"><I>step</I></SPAN> size is thus an integer. </LI><LI>The <SPAN CLASS="MATH"><I>lo</I></SPAN> bound must be some multiple of the <SPAN CLASS="MATH"><I>step</I></SPAN> size. </LI><LI>The <SPAN CLASS="MATH"><I>lo</I></SPAN> bound and the <SPAN CLASS="MATH"><I>step</I></SPAN> size must be chosen so that the minimum input value counts towards the first histogram bar, and the maximum input value counts towards a histogram bar number which is less than 20, but otherwise is as large as possible. That is, the histogram <EM>has as many bars as possible</EM>, up to a <EM>maximum</EM> of 20. </LI></UL><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input to your program consists of a series of data sets. Each data set begins with a single integer in the range 2 to 500 inclusive, on a line by itself. This is the number of input values. It is followed by the non-negative integer data values, which may be split across lines arbitrarily. The entire input is terminated by an empty data set (where the initial count is zero).<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each data set, the program must print out the corresponding histogram. The histogram is a series of histogram bars, one to a line. Each bar is preceded by the bottom of the range of values for that bar, displayed right justified in a field eight characters wide. This bound is followed by one space, and then a row of `<TT>#</TT>' characters, corresponding to the number of input values for this histogram bar. The input data is such that no bar will have more than 70 <TT>#</TT>'s. The histogram should be printed from the first non-empty bar to the last non-empty bar, inclusive, and should be followed by one blank line. As a special case, if all input values in a given set are equal, then no histogram is displayed, and the program must give a line exactly in the following form:<P><BR><code>All inputs equal 15.</code><P><BR>There must be exactly three spaces at the positions indicated, and a full stop at the end of the line. As with a valid histogram, this message must be followed by a blank line.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
55
  0  10  20  30  40  50  60  70  80  90
  0  10  20  30  40  50  60  70  80  90
 81  82  83  84  85  86  87  88  89  81
 81  82  83  84  85  86  87  88  89  81
150 200 250 300 350 400 450 500 550 600
700 750 800 850 900
12
11 11 11 11 11 11 11 11 11 11 11 11
2
3099 5001
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
       0 ##########
      50 ##############################
     100
     150 #
     200 #
     250 #
     300 #
     350 #
     400 #
     450 #
     500 #
     550 #
     600 #
     650
     700 #
     750 #
     800 #
     850 #
     900 #

All inputs equal 11.

    3000 #
    3200
    3400
    3600
    3800
    4000
    4200
    4400
    4600
    4800
    5000 #
</PRE><P>
______________________________________________________
2250||||||false||||||
<p>Most text encryption schemes use a secret key string to convert the plain text to the enciphered text in some way. A novel method being tested by the Australian Security Service consists of a transformation of a key string <SPAN CLASS="MATH"><I>K</I></SPAN> into a target string <SPAN CLASS="MATH"><I>P</I></SPAN> using block moves. Each <EM>block move</EM> is of the form <SPAN CLASS="MATH"><I>copy</I>(<I>start</I>, <I>length</I>)</SPAN>, where <SPAN CLASS="MATH"><I>start</I></SPAN> indicates a position in <SPAN CLASS="MATH"><I>K</I></SPAN> and <SPAN CLASS="MATH"><I>length</I></SPAN> is the number of characters to be copied from <SPAN CLASS="MATH"><I>K</I></SPAN> to <SPAN CLASS="MATH"><I>P</I></SPAN>. Since the idea is to eventually transmit only the block moves, the principle is to use as few block moves as possible. For example if:<BR><BR><TABLE COLS=1><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>K: abaabba</code></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>P: aaabbbabbbaaa</code></TD></TR></TABLE><BR><BR>Assuming that here string positions start with 1, two shortest block move sequences would be:<BR><BR><SPAN CLASS="MATH"><I>copy</I>(3, 2);<I>copy</I>(4, 3);<I>copy</I>(2, 2);<I>copy</I>(5, 2);<I>copy</I>(2, 3);<I>copy</I>(1, 1)</SPAN><BR><BR>or<BR><BR><SPAN CLASS="MATH"><I>copy</I>(7, 1);<I>copy</I>(3, 3);<I>copy</I>(5, 2);<I>copy</I>(4, 2);<I>copy</I>(5, 3);<I>copy</I>(3, 2)</SPAN><BR><BR>The actual shortest block move sequences are not unique but the minimum number is, 6 in this case. If the moves are now transmitted, then it is possible to construct the plaintext message <SPAN CLASS="MATH"><I>P</I></SPAN> from the key string <SPAN CLASS="MATH"><I>K</I></SPAN>. The Australian Security Service is now automating this procedure, so given <SPAN CLASS="MATH"><I>K</I></SPAN> and <SPAN CLASS="MATH"><I>P</I></SPAN> they need to count the minimum number of block moves from <SPAN CLASS="MATH"><I>K</I></SPAN> to <SPAN CLASS="MATH"><I>P</I></SPAN>. To make things simple at the beginning, they are considering strings comprised of lowercase letters and digits. The set of characters within string <SPAN CLASS="MATH"><I>P</I></SPAN> is a subset of the set of characters of the key string <SPAN CLASS="MATH"><I>K</I></SPAN>. You are to help the Australian Security Service by writing a program to get two strings <SPAN CLASS="MATH"><I>K</I></SPAN> and <SPAN CLASS="MATH"><I>P</I></SPAN> as above, and print the minimum number of block moves from <SPAN CLASS="MATH"><I>K</I></SPAN> to <SPAN CLASS="MATH"><I>P</I></SPAN>.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Your code will be tested with a sequence of lines. Odd lines are to be used as the key strings <SPAN CLASS="MATH"><I>K</I></SPAN>, and even lines to be used as target strings <SPAN CLASS="MATH"><I>P</I></SPAN>.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output will consist solely of the minimum number of block moves for each pair. The input will be terminated by a `<TT>#</TT>' by itself in the place of a <SPAN CLASS="MATH"><I>K</I></SPAN> string. Assume that each of <SPAN CLASS="MATH"><I>K</I></SPAN> and <SPAN CLASS="MATH"><I>P</I></SPAN> is made up of 1 to 120 characters (<SPAN CLASS="MATH"><I>K</I></SPAN> is allowed to be longer than <SPAN CLASS="MATH"><I>P</I></SPAN>).<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
abaabba
aaabbbabbbaaa
xy0z
zzz0yyy0xxx
#
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
6
10
</PRE><P><P><BR><B>COMMENTS:</B> The first sample is discussed on the first page. Here follows a minimal sequence of block moves for the second sample:<BR><BR><SPAN CLASS="MATH"><I>copy</I>(4, 1);<I>copy</I>(4, 1);<I>copy</I>(4, 1);<I>copy</I>(3, 1);</SPAN><BR><SPAN CLASS="MATH"><I>copy</I>(2, 1);<I>copy</I>(2, 1);<I>copy</I>(2, 2);</SPAN><BR><SPAN CLASS="MATH"><I>copy</I>(1, 1);<I>copy</I>(1, 1);<I>copy</I>(1, 1)</SPAN><P>
______________________________________________________
2251||||||false||||||
<p>A terrorist hides in an underground sewage system. Any two pipes have at most one common node that is also an endpoint for both of them. The terrorist hides in one such node and has placed clock-activated bombs at several other nodes. The passage into and through a node becomes impossible after the explosion.<p>James Bond wants to capture this terrorist and has at his disposal a complete map of the sewage system that also highlights the position of the terrorist, the placement of the bombs, and their timings. At time 0 Bond starts from one of the nodes and must reach the terrorist in the shortest possible time. Bond dies if an explosion at one of the trapped nodes hits him, but otherwise he is unscathed and can pursue his search.<p>Determine the minimum time that Bonds needs to capture the terrorist, if this is possible.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><UL><LI>Line 1: Four positive integers <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>M</I></SPAN>, <SPAN CLASS="MATH"><I>S</I></SPAN>, <SPAN CLASS="MATH"><I>T</I></SPAN>. <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of nodes and nodes are numbered 1, 2, ...<SPAN CLASS="MATH"><I>N</I></SPAN>. <SPAN CLASS="MATH"><I>M</I></SPAN> is the number of pipes. There is at most one pipe between each pair of nodes. <SPAN CLASS="MATH"><I>S</I></SPAN> is Bond's starting node, and <SPAN CLASS="MATH"><I>T</I></SPAN> is the node where the terrorist hides (<SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2251img1.gif ALT="$ \le$"><I>S</I></SPAN>, <SPAN CLASS="MATH"><I>T</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2251img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2251img1.gif ALT="$ \le$">100</SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2251img1.gif ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2251img1.gif ALT="$ \le$"><I>N</I><SUP>2</SUP></SPAN>). </LI><LI>Next <SPAN CLASS="MATH"><I>N</I></SPAN> Lines: Each line contains `<TT>0</TT>' if the corresponding node is not trapped. Otherwise it contains a positive integer <SPAN CLASS="MATH"><I>X</I></SPAN> giving the time when the bomb will detonate ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2251img1.gif ALT="$ \le$"><I>X</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2251img1.gif ALT="$ \le$">1000</SPAN>). </LI><LI>Next <SPAN CLASS="MATH"><I>M</I></SPAN> Lines: Each line contains two node numbers representing the pipe's end nodes, and a positive integer giving the travel time <SPAN CLASS="MATH"><I>Y</I></SPAN> between its end nodes ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2251img1.gif ALT="$ \le$"><I>Y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2251img1.gif ALT="$ \le$">1000</SPAN>). </LI></UL>The above set can be repeated several times. The end is signaled by a line with <SPAN CLASS="MATH"><I>N</I> = <I>M</I> = <I>S</I> = <I>T</I> = 0</SPAN>.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Print one line for each input set, giving the minimum time that Bonds needs to capture the terrorist, if this is possible (thus print 0 if Bond starts at the terrorist node). Otherwise print `<TT>0</TT>'.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4 4 1 4
0
0
5
0
2 1 3
3 4 4
3 2 2
1 3 4
3 2 1 3
0
1
0
1 2 3
2 3 1
0 0 0 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
8
0
</PRE><P>
______________________________________________________
2252||||||false||||||
<p>Under certain conditions volcanic basalt forms large crystals, like hexagonal pillars.
At Fingal Head, at the border of New South Wales and Queensland, there is a
dramatic example, called Giant's Causeway, where a peninsula formed of such
columns juts into the Pacific. It is particularly dramatic when the big Pacific rollers
break on the causeway, leaving streams of water cascading over the basalt pillars.

<p>Your task is to find out how much water could collect in hexagonal hollows, formed
when some pillars are shorter than others, and can act as wells.

<p>Here is a diagram of a set of hexagons. Each hexagon has an integer height. Water
can always cascade off the edge of the set of hexagons, but it will collect in the five
shaded hexagons, since they form wells completely surrounded by higher hexagons.
Water drains from the left hand pair over two pillars of height six, and from the three
on the right water drains over a pillar of height seven. Assuming each hexagon has
unit area, the volume of water that can collect is 17 units.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2252.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2252.gif
 ALT="\epsfbox{p2252.eps}">
</DIV>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Your program must handle input as a series of problem descriptions.

Each problem begins with two integers <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN>, on a line by themselves, in the range
1 to 200 inclusive, giving the number of hexagons along an <SPAN CLASS="MATH"><I>X</I></SPAN>-axis, and along a <SPAN CLASS="MATH"><I>Y</I></SPAN>-axis,
as shown in the diagram. Then there are given a further <SPAN CLASS="MATH"><I>X</I>*<I>Y</I></SPAN> integers, in the range 0
to 5000 inclusive, which are the heights of the hexagons. The order of input heights is
given as <SPAN CLASS="MATH"><I>Y</I></SPAN> rows of <SPAN CLASS="MATH"><I>X</I></SPAN> integers, but they may be split across lines arbitrarily.

The given diagram is described by sample input below.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output must consist only of one integer for each problem given, on a line by itself
with no spaces, giving the volume of water that could collect for that set of columns.

The output for the given problem description would thus be the sample output below.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5 6
8 12 7 13 0 3 6 5 9 0 12
4 7 8 8 6 9 1 2 12 12 15 13 4 9 0 7 8 12 5
0 0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
17
</PRE>


<P>

______________________________________________________
2253||||||false||||||
<p>In certain entertainment magazines there is a type of crossword puzzle where, instead of clues for words, the cells contain positive integers. There is a hidden one-to-one correspondence with numbers and letters, and the goal of the puzzle is to assign alphabet letters to these positive numbers so that sequences of two or more letters (across the rows and down the columns) form valid words.<p>Your task is to write a program to help solve this type of puzzles.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input will consist of a series of games. Each game will have a valid dictionary of words (preceded by a size) that can be used, followed by a puzzle grid (preceded by <SPAN CLASS="MATH"><I>r</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN>, the number of rows and columns). Each word will be at least 2 and at most 10 characters in length from the set `<TT>a</TT>'-`<TT>z</TT>'. The dictionary size will be at most 1000 words; the dictionary entries are unique but not necessarily sorted. Each puzzle grid consists of <SPAN CLASS="MATH"><I>c</I></SPAN> columns, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2253img1.gif ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2253img1.gif ALT="$ \le$">10</SPAN>, and <SPAN CLASS="MATH"><I>r</I></SPAN> rows, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2253img1.gif ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2253img1.gif ALT="$ \le$">10</SPAN>, of cell numbers in the range 0-26. A positive cell number denotes a letter and a cell number of `<TT>0</TT>' denotes a ` ' (blank character). The numbers form a continuous range, thus one can expect numbers such as 0, 1, 2, 3, 4, 5 but not 0, 1, 12, 13, 24, 25. The series of games is terminated by a ``game'' with dictionary size `<TT>0</TT>' and should not be processed.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output should consist of the <EM>guaranteed uniquely</EM> solved puzzle for each game, where the cell numbers are replaced with characters `<TT>a</TT>'-`<TT>z</TT>', ` '. A blank line should separate output solutions.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
max
min
nix
3 4
1 2 3 0
4 0 0 0
5 4 3 0
12
boon
boonbar
boony
foobar
foorag
goon
goony
rannoo
ranoon
toon
toonbar
toony
6 6
1 2 2 3 4 5
2 0 0 2 0 0
2 0 0 2 0 6
5 4 7 7 2 2
4 0 0 8 0 2
9 0 0 0 0 7
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
max
i
nix

foobar
o  o
o  o t
rannoo
a  y o
g    n
</PRE><P>
______________________________________________________
2254||||||false||||||
<B>Background definitions:</B><P><BR><EM>Subsequence</EM> of a given string: any string that can be obtained by deleting zero or more symbols from the given string (the remaining symbols occur in the same order, but aren't necessarily consecutive). Examples: ``'', ``<code>a</code>'', ``<code>xb</code>'', ``<code>aaa</code>'', ``<code>bbb</code>'', ``<code>xabb</code>'', ``<code>xaaabbb</code>'' are subsequences of ``<code>xaaabbb</code>''.<P><BR><EM>Common subsequence</EM> of a given set of strings: any string that is a subsequence of each of the given strings. Examples: ``<code>xa</code>'', ``<code>aaa</code>'', ``<code>bbb</code>'' are common subsequences of the strings in {``<code>xaaabbb</code>'', ``<code>a7axb8bab</code>'', ``<code>bbabartxta</code>''}.<P><BR><EM>Longest common subsequence</EM> of a given set of strings: any <EM>maximum length</EM> common subsequence of the given set of strings. Example: ``<code>aaa</code>'', ``<code>bbb</code>'' are the two longest common subsequences of the above set of strings. Their length is 3, which is greater than the length of any other common subsequence.<BR><BR><P><P><BR><b>Determine</b> the maximum length of the common subsequences of a given set of <SPAN CLASS="MATH"><I>N</I></SPAN> non-empty words. Consider a set of <SPAN CLASS="MATH"><I>N</I></SPAN> words (strings), where each word is a non-empty sequence of lowercase English letters and digits. Assume that <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2254img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2254img1.gif ALT="$ \le$">100</SPAN>, that each word contains maximum 100 characters, and that in each set the product of all its word lengths is maximum 1,048,576.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input may consist of several sets, and each set consists of several lines.<UL><LI>Line 1: a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> giving the number of words in the current set. The value <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> signals the end. </LI><LI>Next <SPAN CLASS="MATH"><I>N</I></SPAN> Lines: each line consists of a non-empty word, ie, a non-empty sequence of lowercase English letters and digits. </LI></UL><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output consists of one line for each input set. Each line contains an integer giving the maximum length of all common subsequences of the corresponding set (in input order).<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
ab
bc
3
xaaabbb
a7axb8bab
bbabartxta
3
ab
bc
cd
2
1abc2def3ghi4jkl5mno6pqr7stu8vwx9yz0
abc8def7ghi6jkl0mno4pqr3stu2vwx1yz
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1
3
0
26
</PRE><P><P><BR><B>COMMENTS:</B><BR><TT>1</TT> = the length of `<TT>b</TT>'<BR><TT>3</TT> = the length of either `<TT>aaa</TT>' or `<TT>bbb</TT>'<BR><TT>0</TT> = the length of the empty word<BR><TT>26</TT> = the length of `<TT>abcdefghijklmnopqrstuvwxyz</TT>'<P>
______________________________________________________
2255||||||false||||||
<p>Consider arithmetic-type formulas consisting of the following symbols:<UL><LI>uppercase letters in the `<TT>A</TT>'-`<TT>L</TT>' range; </LI><LI>two operators `<TT>+</TT>', `<TT>-</TT>'; and </LI><LI>round parentheses `<TT>(</TT>', `<TT>)</TT>'. </LI></UL>The letters represent variables with integer values. Our two operators are a bit nonstandard here: the `<TT>+</TT>' operator denotes the <EM>maximum</EM>, and the `<TT>-</TT>' operator denotes the <EM>minimum</EM> of the two operands. Both operators are left-associative, and the <EM>minimum</EM> operator has a higher priority than the <EM>maximum</EM> operator. Parentheses are optional and are used for grouping in the usual way. Formula representations may also contain white spaces, which are ignored. For example, the following two formulas are equivalent in our interpretation:<BR><BR><code>A-B + A-C + BC</code><BR><BR>and<BR><BR><code>A-B + (A-C) + ((C - ( (B) )))</code><BR><BR>According to our rules, both these formulas denote the same expression:<BR><BR><SPAN CLASS="MATH"><I>max</I>(<I>max</I>(<I>min</I>(<I>A</I>, <I>B</I>), <I>min</I>(<I>A</I>, <I>C</I>)), <I>min</I>(<I>C</I>, <I>B</I>))</SPAN><BR><BR>The above expression will always return the <SPAN CLASS="MATH">2<SUP>nd</SUP></SPAN> smallest value in the <EM>multiset</EM> {<SPAN CLASS="MATH"><I>A</I></SPAN>, <SPAN CLASS="MATH"><I>B</I></SPAN>, <SPAN CLASS="MATH"><I>C</I></SPAN>}, regardless of the numerical values assigned to its variables. For example, consider <SPAN CLASS="MATH"><I>A</I> = 50</SPAN>, <SPAN CLASS="MATH"><I>B</I> = 70</SPAN>, <SPAN CLASS="MATH"><I>C</I> = 30</SPAN>. The value returned by the above expression is 50, which is the <SPAN CLASS="MATH">2<SUP>nd</SUP></SPAN> smallest value in {50, 70, 30}. Consider <SPAN CLASS="MATH"><I>A</I> = 50</SPAN>, <SPAN CLASS="MATH"><I>B</I> = 30</SPAN>, <SPAN CLASS="MATH"><I>C</I> = 30</SPAN>. The value returned by this expression is 30, which is the <SPAN CLASS="MATH">2<SUP>nd</SUP></SPAN> smallest value in the multiset {50, 30, 30}. A multiset is like a set except that it can have repetitions of identical elements. Determine if a given formula always returns the <SPAN CLASS="MATH"><I>K</I></SPAN>th smallest value regardless of the values assigned to its variables, for a given <SPAN CLASS="MATH"><I>K</I></SPAN>. Our formulas are <EM>guaranteed</EM> valid. The formulas contain between 1 and 12 different variables (but not necessarily consecutive), and at most 20,000 total symbol occurrences. <SPAN CLASS="MATH"><I>K</I></SPAN> will be in the range 1 to the number of different variables actually used.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input contains a sequence of formulas. Each formula starts with a positive integer <SPAN CLASS="MATH"><I>K</I></SPAN> at the beginning of a line, followed by a space, and then a valid formula containing the following characters: `<TT>A</TT>'-`<TT>L</TT>', `<TT>+</TT>', `<TT>-</TT>', `<TT>(</TT>', `<TT>)</TT>', and ` ' (space). Each line contains a maximum of 120 characters. Long formulas are broken over several lines, and the continuation is signaled by an `<TT>_</TT>' (underscore) at the end of every line except the last. The value <SPAN CLASS="MATH"><I>K</I> = 0</SPAN> signals the end of the input.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output contains one line for each input formula. Each line consists of either the word <code>YES</code> if the formula satisfies our request, or <code>NO</code> otherwise (both in uppercase).<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1 A
1 (A)
1 ((A))
1 A+B
1 A-B
2 A+B+C
2 A-B-C
2 A-B + A-C + B-C
2 A-B + (A-C)    +_
    ((C  -  (   (B)   )))
2 (A+B) - (A+C) - (B+C)
2 (A+I) - (A+L) - (I+L)
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
YES
YES
YES
NO
YES
NO
NO
YES
YES
YES
YES
</PRE><P>
______________________________________________________
2256||||||false||||||
<P>
The Mooville city officials have been trying to bring in business and 
entertainment to their small town.
Recently, the ferry closed the canal that passes through the town. After
witnessing a water ski show at Cypress Gardens, Mayor Moocky came up with an
interesting twist that might just suit his small town. Every Saturday night on
the closed canal, they will stage a ski jumping dual jump, using two connected
ramps, where skiers will approach from opposite ends of the canal and jump over
the ramp simultaneously.  (The boats
don't hit each other because they are kept perfectly straight on opposite sides
of the canal.)  The problem is, the
boats they will use have different top speeds and accelerations, so they need
to figure out what point on the canal to place the grandstands each week.

<P>
Given a length of canal with a boat
at each end, and the acceleration and top speed of each boat, determine the
meeting point. (You may assume each boat has constant acceleration until top
speed is reached and they continue at top speed until after the amazing jump.)

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each input line contains five
integer values separated by white space. The first integer will be the length
of the canal in miles and will be between 1 and 20. The second integer will be
the top speed of boat A and the third integer will be the acceleration of boat
A. The fourth integer will be the top speed of boat B and the fifth integer
will be the acceleration of boat B. The top speed of a boat will be in miles
per hour and will be greater than zero. The acceleration of a boat will be
given in miles per hour per second and will be greater than zero. The last line
of the input file will have a canal length value of zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The first line of output should
read `<TT>SKI OUTPUT</TT>'.
After that, for each line of input, there should be one line of output
consisting of `<TT>JUMP POINT:</TT>' followed by the distance in miles to the collision point from the
starting point of boat A. The distance must be rounded to two decimal places.
The last line of output should read `<TT>END OF OUTPUT</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
20 50 5 60 6
20 40 2 80 4
20 60 6 30 3
0 1 1 1 1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
SKI OUTPUT
JUMP POINT: 9.09
JUMP POINT: 6.67
JUMP POINT: 13.33
END OF OUTPUT
</PRE>

<P>

______________________________________________________
2257||||||false||||||
<P>
As your
company's network manager, you have become concerned about how slow your
Internet connection seems to be in the afternoons.  You have a fixed
high-speed connection, so you suspect the problem is that too many employees are downloading music and video files,
overloading your link.  To test your theory, you have already hooked up a Linux box to your Internet connection,
running the &#168;tcpdump&#168; program to monitor all network traffic.
That program produced several huge text files, each with a detailed log of every network packet that passed between
your company and the rest of the Internet during each tcpdump run.

<P>
Now your problem is to make sense of the logs, because looking at files with tens of
thousands of records each makes your head hurt.  Your task for this
problem is to write a program that will read
the information in the log files, and then print out a short, useful summary
report. That report will be a list of
the top ten Internet addresses, ranked by total network traffic, and a list of
the top ten internal network users, again ranked by network traffic. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several tcpdump logs, each headed by a one-line description-line
describing the tcpdump log, followed by several tcpdump-records. The file ends with a single line containing
just the word <TT>END</TT>. 

<P>
Every line begins in column 1.

<P>

<P>
<BR>
Each description-line is in the format shown on the following line: 

<P>

<P>
<BR>

<TT>TCP log from <EM>start-date-time</EM> to <EM>end-date-time</EM>.</TT>

<P>

<P>
<BR>
The <EM>start-date-time</EM> and <EM>end-date-time</EM> are each in the format
<TT><SPAN CLASS="MATH"><I>YYYY</I></SPAN>-<SPAN CLASS="MATH"><I>MM</I></SPAN>-<SPAN CLASS="MATH"><I>DD</I></SPAN>:<SPAN CLASS="MATH"><I>HH</I></SPAN>:<SPAN CLASS="MATH"><I>MM</I></SPAN>:<SPAN CLASS="MATH"><I>SS</I></SPAN></TT> where <SPAN CLASS="MATH"><I>YYYY</I></SPAN> is a four digit year, <SPAN CLASS="MATH"><I>MM</I></SPAN>
is a two digit month number, <SPAN CLASS="MATH"><I>DD</I></SPAN> is a two digit day,
<SPAN CLASS="MATH"><I>HH</I></SPAN> is a two digit hour (in 24-hour clock format), <SPAN CLASS="MATH"><I>MM</I></SPAN> is a two digit minute, and
<SPAN CLASS="MATH"><I>SS</I></SPAN> is a two digit second. For example, 10:30:15 AM on January 5, 2001 would be represented as
<TT>2001-01-05:10:30:15</TT>, and 10:30:15 PM on that day would
be represented as <TT>2001-01-05:22:30:15</TT>.

<P>

<P>
<BR>
Each tcpdump-record is in a format shown in either of the following lines:

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH"><I>timestamp</I></SPAN>; <SPAN CLASS="MATH"><I>protocol</I></SPAN>; <SPAN CLASS="MATH"><I>interface</I></SPAN>; <SPAN CLASS="MATH"><I>size</I></SPAN>; <SPAN CLASS="MATH"><I>between</I></SPAN></TT> 
<BR><TT><SPAN CLASS="MATH"><I>timestamp</I></SPAN>; <SPAN CLASS="MATH"><I>protocol</I></SPAN>; <SPAN CLASS="MATH"><I>interface</I></SPAN>; <SPAN CLASS="MATH"><I>size</I></SPAN>; <SPAN CLASS="MATH"><I>between</I></SPAN>; <SPAN CLASS="MATH"><I>optional</I></SPAN></TT>

<P>

<P>
<BR>
Each tcpdump-record is a single line, no longer than 255 characters long, and
terminated by an end-of-line marker. The fields <SPAN CLASS="MATH"><I>timestamp</I></SPAN>, <SPAN CLASS="MATH"><I>protocol</I></SPAN>, <SPAN CLASS="MATH"><I>interface</I></SPAN>, <SPAN CLASS="MATH"><I>size</I></SPAN>,
and <SPAN CLASS="MATH"><I>between</I></SPAN> are all sequences of characters that do not contain
end-of-line markers or semi-colons. If
there is an <SPAN CLASS="MATH"><I>optional</I></SPAN> field, it may contain any character other than an
end-of-line marker. The only fields you
need to use are <SPAN CLASS="MATH"><I>size</I></SPAN> and <SPAN CLASS="MATH"><I>between</I></SPAN>.

<P>
The <SPAN CLASS="MATH"><I>size</I></SPAN> field contains an integer in the range of 1 to 32767, followed by a single
space, followed by the string `<TT>bytes</TT>'
(not including the quotation marks.) For example, if the packet is
412 bytes long, the <SPAN CLASS="MATH"><I>size</I></SPAN> field will be `<TT>412 bytes</TT>'. 
Even if the field is only 1 byte long, it will look like `<TT>1 bytes</TT>'.

<P>
The <SPAN CLASS="MATH"><I>between</I></SPAN> field is in the form `<TT>from <SPAN CLASS="MATH"><I>source</I></SPAN>:<SPAN CLASS="MATH"><I>port</I></SPAN>
to <SPAN CLASS="MATH"><I>dest</I></SPAN>:<SPAN CLASS="MATH"><I>port</I></SPAN></TT>'. The <SPAN CLASS="MATH"><I>source</I></SPAN> and <SPAN CLASS="MATH"><I>dest</I></SPAN> fields are each distinct and valid IP
addresses. An IP address consists of four integers in the range from 0 to 255
separated by periods (e.g., 127.12.255.0). The <SPAN CLASS="MATH"><I>port</I></SPAN> field is an integer
in the range from 0 to 65535.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Processing:</SPAN>

<P>
Each time a new description-line is read, a new, independent log is started.

<P>
As your program reads tcp-dump records, it will keep track of the total number of bytes
that passed to or from each IP address. It doesn't matter if an address is the <SPAN CLASS="MATH"><I>source</I></SPAN> or <SPAN CLASS="MATH"><I>dest</I></SPAN>; if
it appears in a tcpdump-record, the value of the <SPAN CLASS="MATH"><I>size</I></SPAN> field is added to
the total being tracked for each of the two addresses. 

<P>
After determining all the totals for all IP addresses, your program will determine
the 10 external IP addresses that have the greatest number of bytes passed to
or from them, and the 10 internal IP addresses that have the greatest number of
bytes passed to or from them, and print those two ``top 10" lists,
suitably labeled and formatted. Each
list should be printed in descending order by number of bytes. 

<P>
An internal IP address is any address assigned to your company's own network.
Those addresses are recognized by their
prefixes. Any address in any of the
following formats is internal: <TT>192.168.<SPAN CLASS="MATH"><I>x</I></SPAN>.<SPAN CLASS="MATH"><I>x</I></SPAN></TT>,
<TT>204.146.114.<SPAN CLASS="MATH"><I>x</I></SPAN></TT>, <TT>206.199.79.<SPAN CLASS="MATH"><I>x</I></SPAN></TT>,
where <SPAN CLASS="MATH"><I>x</I></SPAN> is any integer in the range from 0 to 255.
An external IP address is any IP address
that is not an internal IP address.

<P>
You may assume that there are at least 10 internal and 10 external IP addresses
represented in each section of the input data file.
There will be at most 12000 distinct IP addresses in any tcp-dump.

<P>
You may assume that the total number of bytes sent to or from a single IP address in
any single section of the input file is no more than 2147483647. 

<P>
You may assume that no tcpdump-record begins with either
<TT>END</TT> or <TT>TCP</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output file will contain a separate summary report for each tcpdump log in the input
file. The first line of the summary
report will be exactly the same as the tcpdump-description line read from the
input file. That will be followed by a
single blank line, then the following header line, beginning in column 1: 

<P>

<P>
<BR>

<TT>Top 10 External Sites Visited:</TT>

<P>

<P>
<BR>
That header line will be followed by ten lines, each showing the total number of
bytes seen passing to or from an external IP address, and the IP address.
The total number of bytes should be printed
in columns 1 through 10, right aligned in the field, followed by one space,
followed by the IP address, left aligned. 
The list should be printed in descending order by number of bytes.
If two sites have the same number of bytes,
they should be ordered lexicographically by IP address.
There will then be a single blank line,
followed by another header line, beginning in column 1: 

<P>

<P>
<BR>

<TT>Top 10 Internal Users:</TT>

<P>

<P>
<BR>
That line will also be followed by ten lines in the same format as above, except using
internal IP address. A blank line
followed by a summary for the next tcpdump log will come next, until all logs
have been reported on. Here is a short example of a properly formatted output file:

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
TCP log from 2000-03-16:15:06:33 to 2000-03-16:15:06:34.
Wed Mar 15 15:06:33 2000; TCP; eth0; 1296 bytes; from 204.146.114.10:1916 to 156.26.62.201:126
Wed Mar 15 15:06:33 2000; TCP; eth0; 625 bytes; from 204.146.114.30:289 to 188.226.173.122:13
Wed Mar 15 15:06:33 2000; TCP; eth0; 2401 bytes; from 192.168.5.41:529 to 188.226.173.122:31
Wed Mar 15 15:06:33 2000; TCP; eth0; 1296 bytes; from 206.199.79.28:1280 to 167.253.170.210:168;first packet
Wed Mar 15 15:06:33 2000; TCP; eth0; 625 bytes; from 192.168.5.72:1247 to 89.40.199.255:214
Wed Mar 15 15:06:33 2000; TCP; eth0; 2401 bytes; from 192.168.5.44:290 to 110.150.70.190:26
Wed Mar 15 15:06:33 2000; TCP; eth0; 2401 bytes; from 192.168.5.119:253 to 192.22.192.204:206;lost data
Wed Mar 15 15:06:33 2000; TCP; eth0; 1296 bytes; from 192.168.5.95:1646 to 156.26.62.201:12
Wed Mar 15 15:06:33 2000; TCP; eth0; 625 bytes; from 206.199.79.5:1566 to 6.234.186.83:145
Wed Mar 15 15:06:33 2000; TCP; eth0; 1296 bytes; from 204.146.114.14:2017 to 183.74.83.174:103
Wed Mar 15 15:06:33 2000; TCP; eth0; 2401 bytes; from 204.146.114.50:645 to 132.130.65.172:127
Wed Mar 15 15:06:33 2000; TCP; eth0; 2401 bytes; from 192.168.5.5:1184 to 83.141.167.38:64
Wed Mar 15 15:06:33 2000; TCP; eth0; 81 bytes; from 192.168.5.117:963 to 203.68.142.136:112
END
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
TCP log from 2000-03-16:15:06:33 to 2000-03-16:15:06:34.

Top 10 External Sites Visited:
      3026 188.226.173.122
      2592 156.26.62.201
      2401 110.150.70.190
      2401 132.130.65.172
      2401 192.22.192.204
      2401 83.141.167.38
      1296 167.253.170.210
      1296 183.74.83.174
       625 6.234.186.83
       625 89.40.199.255

Top 10 Internal Users:
      2401 192.168.5.119
      2401 192.168.5.41
      2401 192.168.5.44
      2401 192.168.5.5
      2401 204.146.114.50
      1296 192.168.5.95
      1296 204.146.114.10
      1296 204.146.114.14
      1296 206.199.79.28
       625 192.168.5.72
</PRE>

<P>

______________________________________________________
2258||||||false||||||
<P>
Your
company regularly needs to distribute lots of files to other companies on
CD-ROMs. You've been given the job of
writing the program that takes a set of data files (file-set) to distribute,
and produces instructions specifying how many discs are needed, and lists which
files should be stored on which disc.   

<P>
A brute-force algorithm that gives the ``best" solution could be very expensive.
However, an algorithm that gives a ``pretty good" solution, known as
``first-fit descending-size", is described below.
(FYI: if the ``best" method would
require <EM>n</EM> discs to store all the files, this ``pretty good"
method will require at most 11/9 +4 discs.)

<P>
The
``first-fit descending-size" algorithm, which you must use in your
solution to this problem, is used to distribute the files in the file-set on a
set of discs (disc-set) numbered from 1 to <SPAN CLASS="MATH"><I>m</I></SPAN>, where <SPAN CLASS="MATH"><I>m</I></SPAN> will be
determined by the program. The files,
in descending order of size, are placed on the lowest numbered disc that has
enough room to hold the file. If the
file doesn't fit on any of the discs you've already started using, you will
need to add another disc to your disc-set. 

<P>
In processing the input, you should assume the following:

<P>

<OL>
<LI>Each disc has a capacity of 675,840,000 bytes. 
</LI>
<LI>The amount of space required by a file is an integral multiple of 2048 bytes.
That is, any file with a size in the range
of 1 to 2048 bytes will use exactly 2048 bytes on the disc.
Any file within the range of 2049 to 4096
bytes will use exactly 4096 bytes on disc, and so on.
</LI>
<LI>A file of size 0 will not require any space on the disc.
</LI>
<LI>There will be no single file larger than 675,840,000 bytes.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each non-signaling line will each describe one file in a file-set.
The first 9 characters will contain the size
(in bytes) of the file as a right-aligned decimal number.
Character 10 will always be blank.
Characters 11 through the end of the line will contain the filename.
You may assume that no file name is longer than 64 characters.
A line having both a file size of zero, and a
filename of ``<TT>END</TT>" will signal the
last file in the file-set. (This line is not
to be processed.) After this, other file-sets may follow. The end of file-sets
is signaled by an empty file-set. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each disc-set:  

<P>
The first 2 lines of output should begin in column 1, and should have the following format:

<P>

<P>
<BR>

<TT>--------------------</TT> 
<BR><TT>DISC-SET<SPAN CLASS="MATH"><I>n</I></SPAN> requires <SPAN CLASS="MATH"><I>m</I></SPAN> discs for archival.</TT>

<P>

<P>
<BR>
Where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of the disc-set (starting at 1) and <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of
discs required. This is followed by a blank line.   

<P>
For each disc there is a line summarizing the disc contents, as shown below. 

<P>

<P>
<BR>

<TT>Disc <EM>x</EM> contains <EM>y</EM> files totaling <EM>z</EM> bytes:</TT>

<P>

<P>
<BR>
Where <SPAN CLASS="MATH"><I>x</I></SPAN> is the number of the disc (starting at 1), <SPAN CLASS="MATH"><I>y</I></SPAN> is the number of files to be
stored on this disc, and <SPAN CLASS="MATH"><I>z</I></SPAN> is the total number of bytes in those files. 

<P>
For each file on this disc, there should be a line containing the right-justified file
size in positions 1-9, a blank in position 10, and the file name beginning in
position 11. The files must be listed
in descending order by size. A blank line should follow the last file on the disc.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
  47500000 a.dat
 123456789 Very long (but legitimate!) file name: don't reject weird chars.
         0 real file with length zero.text
         1 END
 555555555    A big file with leading blanks in its name.c
         0 END
         1 b.dat
         2 c.dat 
         0 END
         0 END
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
----------------------------------------
DISC-SET 1 requires 2 discs for archival.

Disc 1 contains 4 files totaling 603055556 bytes:
555555555    A big file with leading blanks in its name.c
 47500000 a.dat
        1 END
        0 real file with length zero.text

Disc 2 contains 1 file totaling 123456789 bytes:
123456789 Very long (but legitimate!) file name: don't reject weird chars.

----------------------------------------
DISC-SET 2 requires 1 disc for archival.

Disc 1 contains 2 files totaling 3 bytes:
        2 c.dat
        1 b.dat
</PRE>

<P>

______________________________________________________
2259||||||false||||||
<P>In this problem we will be using a one-bit error-correcting code called a Hamming code, which allows the receiver to correct any one-bit error in a binary sequence called a <EM>transmission string</EM>. The transmission string is generated by the sender from a binary sequence called the <EM>message string</EM>, and additional embedded bits called <EM>parity bits</EM>.<P>Let us number the transmission string bit positions from left to right starting at 1. The embedded parity bits <SPAN CLASS="MATH"><I>p</I><SUB>0</SUB>, <I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,...<I>p</I><SUB>i</SUB>,...<I>p</I><SUB>n</SUB></SPAN> are at positions <SPAN CLASS="MATH">1, 2, 4,...2<I>i</I>...2<I>n</I></SPAN> respectively, where <SPAN CLASS="MATH">2<I>n</I> &lt;</SPAN> length(<EM>transmission string</EM>). Associated with each parity bit <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> is a subset <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> of transmission string bits. Note that <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> is a member of subset <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN>. Note also that these subsets are non-disjoint. The value of the parity bits are set so that the parity (sum) of all the bits in their corresponding subset is even. The implied subsets are most easily explained by giving an example: a transmission string bit at position <SPAN CLASS="MATH">13 = 1101<SUB>2</SUB> = 1 <TT>x</TT> 2<SUP>3</SUP> +1 <TT>x</TT> 2<SUP>2</SUP> +0 <TT>x</TT> 2<SUP>1</SUP> +1 <TT>x</TT> 2<SUP>0</SUP> = 2<SUP>3</SUP> +2<SUP>2</SUP> +2<SUP>0</SUP></SPAN> contributes to the parity of subsets <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>0</SUB></SPAN>.<P><P><BR>For example, if the message is 10110, the transmission string will be laid out like<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=10 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Position</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Transmission string</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>p</I><SUB>0</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>p</I><SUB>3</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD></TR></TBODY></TABLE></DIV><P><P><BR><UL><LI>To make the parity of <SPAN CLASS="MATH"><I>s</I><SUB>0</SUB></SPAN> (bits at positions 1,3,5,7,9) even, <SPAN CLASS="MATH"><I>p</I><SUB>0</SUB></SPAN> is set to 0. </LI><LI>To make the parity of <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> (bits at positions 2,3,6,7) even, <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN> is set to 1. </LI><LI>To make the parity of <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> (bits at positions 4,5,6,7) even, <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN> is set to 0. </LI><LI>To make the parity of <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN> (bits at positions 8,9) even, <SPAN CLASS="MATH"><I>p</I><SUB>3</SUB></SPAN> is set to 0. </LI></UL><P>Thus, the generated transmission stringcalled a Hamming codewill be 011001100, and the sender now transmits this.<P><P><BR>We will assume that, if an error occurs during transmission, no more than one bit in the received transmission string will be in error (i.e., inverted). The receiver checks the parity of each subset. If <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> is even (i.e., correct), assign a bit <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> a value of 0, otherwise a value of 1. If the binary number corresponding to <SPAN CLASS="MATH"><I>b</I><SUB>n</SUB>...<I>b</I><SUB>i</SUB>...<I>b</I><SUB>2</SUB><I>b</I><SUB>1</SUB><I>b</I><SUB>0</SUB></SPAN> is zero, there were no errors in the transmission, otherwise, the binary number corresponds to the location of the error.<P>Going back to the example above, let us say that (unbeknown to the receiver) bit 5 was corrupted (inverted), i.e., the received transmission string is 011011100.<P>The receiver calculates the subset parities, and calculates the error position.<P><SPAN CLASS="MATH"><I>b</I><SUB>0</SUB></SPAN> = 1 (<SPAN CLASS="MATH"><I>s</I><SUB>o</SUB></SPAN> is odd)<P><SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> = 0 (<SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> is even)<P><SPAN CLASS="MATH"><I>b</I><SUB>2</SUB></SPAN> = 1 (<SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> is odd)<P><SPAN CLASS="MATH"><I>b</I><SUB>3</SUB></SPAN> = 0 (<SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN> is even)<P>The receiver discovers that the received transmission string bit at position <SPAN CLASS="MATH"><I>b</I><SUB>3</SUB><I>b</I><SUB>2</SUB><I>b</I><SUB>1</SUB><I>b</I><SUB>0</SUB> = 0101<SUB>2</SUB> = 5</SPAN> is in error. Thus, the corrected transmission string is 011001100. The (corrected) message string is 10110, obtained by stripping out the parity bits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains a number of received binary transmission strings, one to a line, that are valid Hamming codes with no more than 1 error (<!-- MATH
 $3 \le length \ of \ string < 32,000$
 --> <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2259img1.png ALT="$ \le$"><I>length</I>&nbsp;<I>of</I>&nbsp;<I>string</I> &lt; 32, 000</SPAN>). The list is terminated with a transmission string of `<TT>0</TT>', which is not to be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The (corrected) binary message string is to be output, one to a line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
011011100
011001100
01101
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
10110
10110
11
</PRE><P>
______________________________________________________
2260||||||false||||||
<P>The people of Bumpus (Bumpkins) are a fun, happy, peace-loving people who have a big problem. They have very little depth perception and are constantly running into doors. They've asked you to write a program to let them know when they should duck going through a doorway. Since Bumpkins love fun, some of their doorways have been made intentionally short to force other Bumpkins to either crawl or limbo through the door.&nbsp; Unfortunately, the Bumpkins don't all use the same set of measurements, so some heights are measured in inches, others in feet, others in yards, others in centimeters, and others in meters.&nbsp; To do the conversions, recall that:<P><UL><LI>1 inch = 2.54 centimeters </LI><LI>1 foot = 12 inches </LI><LI>1 yard = 3 feet </LI><LI>1 meter = 100 centimeters </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will begin with a single line, telling you how many Bumpkins want help. Then, for each Bumpkin, there will be data about the Bumpkin and the doorways they reach. The first line of each dataset will give you the Bumpkin's name (all Bumpkins have names of exactly 6 characters), an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of doors to process for this Bumpkin <SPAN CLASS="MATH">(<I>n</I> &gt; 0)</SPAN>, and the Bumpkin's height, a floating point number followed by exactly one blank and then one of `<TT>i</TT>', `<TT>f</TT>', `<TT>y</TT>', `<TT>c</TT>', or `<TT>m</TT>' (representing inches, feet, yards, centimeters, and meters). The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines will have the height of the doorways in the bumpkin's life, one per line. Each height will be a floating point number followed by exactly one blank and one of `<TT>i</TT>', `<TT>f</TT>', `<TT>y</TT>', `<TT>c</TT>', or `<TT>m</TT>' (representing inches, feet, yards, centimeters, and meters).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each Bumpkin, print the name of the Bumpkin on one line and then for each door, print the way the Bumpkin should travel through the door. Decide on a mode of travel based on the table below, where <SPAN CLASS="MATH"><I>b</I></SPAN> is the height of the Bumpkin, <SPAN CLASS="MATH"><I>d</I></SPAN> is the height of the door (expressed in the same units):<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Door height</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Travel method</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>d</I> &gt; <I>b</I>*1.25</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Stilts</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>b</I>*1.25<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2260img1.png ALT="$ \ge$"><I>d</I> &gt; <I>b</I>*1.05</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Walk</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>b</I>*1.05<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2260img1.png ALT="$ \ge$"><I>d</I> &gt; <I>b</I>*0.65</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Duck</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>b</I>*0.65<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2260img1.png ALT="$ \ge$"><I>d</I> &gt; <I>b</I>*0.40</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Crawl</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>b</I>*0.40<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2260img1.png ALT="$ \ge$"><I>d</I> &gt; <I>b</I>*0.25</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Limbo</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>b</I>*0.25<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2260img1.png ALT="$ \ge$"><I>d</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Blocked</TT></TD></TR></TBODY></TABLE></DIV><P><P><BR>Have one blank line after each data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
2
Mookin 3 150.4 c
75 i
2 f
151 c
Kimkin 1 67.3 i
204.5 c
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Mookin
Doorway 1: Stilts
Doorway 2: Crawl
Doorway 3: Duck

Kimkin
Doorway 1: Walk
</PRE><P>
______________________________________________________
2261||||||false||||||
<P>Joe likes highway driving on the edge <SPAN CLASS="MATH">...</SPAN> of an empty gas tank, that is. Joe's fuel gauge only registers the number of eighths of a tank remaining (i.e., 1/8, 2/8, <SPAN CLASS="MATH">...</SPAN> 8/8). One of his favorite stretches of highway has exits spaced evenly so that he can reach the same number of exits, <SPAN CLASS="MATH"><I>k</I></SPAN>, for each eighth of a tank of gas (for example, with 2/8 tank of gas, he can reach <SPAN CLASS="MATH">2<I>k</I></SPAN> exits). Exits may or may not have a gas station. Given the number of eighths of a tank of gas in Joes car, the value of <SPAN CLASS="MATH"><I>k</I></SPAN>, and the locations of the gas stations, determine the farthest exit with a gas station that Joe can reach using only the gas in his tank (i.e., no fill-ups of the tank are allowed en route). Of course, it is possible that Joe will run out of gas <SPAN CLASS="MATH">...</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each data set begins with a line containing a single integer <SPAN CLASS="MATH"><I>t</I></SPAN>, indicating the number of eighths of a tank of gas in Joe's car (where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2261img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2261img1.png ALT="$ \le$">8</SPAN>). The next line contains a single integer <SPAN CLASS="MATH"><I>k</I></SPAN>, indicating how many highway exits can be reached per 1/8 tank of gas, (where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2261img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2261img1.png ALT="$ \le$">8</SPAN>). Starting on the next line of the input, and possibly continuing over several input lines, will appear the numbers of the exits at which gas stations are located. Joes first available exit is always 1, and the exits are numbered consecutively. The furthest possible exit number is 1000. The list of exits will be terminated by a `<TT>-1</TT>'. Exit numbers in a particular data set will not be duplicated but may be listed in any order. Your program should stop processing data sets when it reaches a value of 0 for <SPAN CLASS="MATH"><I>t</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, output the exit number of the last gas station that the car can reach. If the car runs out of gas before it can reach a gas station, output that information instead. Follow the format illustrated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
8
1
1 2 7 4 5 6   -1
1
8
44 45
13 43
50 -1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Stop for gas at exit 7.
Dude!  Ran out of gas.
</PRE><P>
______________________________________________________
2262||||||false||||||
<P>An important feature of smart game playing programs is the ability to evaluate the relative goodness of different game scenarios.<P>Tic-tac-toe is played on a three by three board by two players, who are traditionally called 'X' and 'O'. For the sake of this game, 'X' will move first. Play alternates between the players. Each player places exactly one of their markers on one of the blank spaces of the board. The game is won when one player has placed three of their markers in a row horizontally, vertically, or diagonally. No moves are made once the game is won. Below are three snapshots of boards:<P><PRE> 
      Board 1         Board 2         Board 3

     O | X | O       O | X | O       O | X | O
    ---+---+---     ---+---+---     ---+---+---
       | X |           | X | O         | X |
    ---+---+---     ---+---+---     ---+---+---
     X |   |         X |   |         X | O |
</PRE><P>In Board 1, it is O's turn to move and Boards 2 and 3 show two of the possible moves O can make.<P>In deciding what move to next make, some players will see how many different final configurations are reachable from the current board and of those final configurations, how many would give the win to each of the players. From Board 2 above, there are 4 more reachable configurations, with 2 of them giving the win to X and 1 giving the win to O:<P><PRE> 
     No wins           O win           X win           X win

     O | X | O       O | X | O       O | X | O       O | X | O
    ---+---+---     ---+---+---     ---+---+---     ---+---+---
     X | O | O       X | X | O         | X | O       O | X | O
    ---+---+---     ---+---+---     ---+---+---     ---+---+---
     X | O | X       X |   | O       X | X |         X | X | X
</PRE><P>Note that there is no assumption of intelligence in the players! While a human player might always work to win the game or block the opponent if possible, this problem is just asking for <EM>possible</EM> configurations, not <EM>smart</EM> ones.<P>From Board 3 above, there are 3 more reachable configurations, with 1 of them giving the win to X and none giving the win to O:<P><PRE> 
      No win           X win           No win

     O | X | O       O | X | O       O | X | O
    ---+---+---     ---+---+---     ---+---+---
     X | X | O       X | X | X       O | X | X
    ---+---+---     ---+---+---     ---+---+---
     X | O | X       X | O | O       X | O | O
</PRE><P>Your program must take an initial tic-tac-toe board and compute how many legal possible final configurations are reachable from the starting board, and in how many of those X wins, and in how many of those O wins. Your final configurations must have at least one move past the initial board in order to be counted.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to this program will be a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> which tells how many initial boards to examine. There will then be <SPAN CLASS="MATH"><I>n</I></SPAN> boards with three lines each, three characters on each line. An `<TT>X</TT>' represents a square with an X, an `<TT>O</TT>' represents a square with an O, and an underscore (`<TT>_</TT>') represents an empty square.<P>You may assume all boards have valid configurations that could occur in a game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input board, print the number of the board, the number of final configurations (where numbering starts at 1), the number of those the X player wins, and the number the O player wins. Have one blank line after each line of output. Follow the format in the Sample Output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
2
OXO
_XO
X__
OXO
_X_
XO_
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Game 1: 4 possible, 2 X win, 1 O win

Game 2: 3 possible, 1 X win, O O win
</PRE><P>
______________________________________________________
2263||||||false||||||
<P>You will frequently see claims using percentages like: &#168;56.3% of all Florida tourists prefer Daytona Beach!&#168; But what do these claims <EM>really</EM> mean? In this program, you should determine the minimum sample size necessary to give a given percentage with a given number of decimal digits.<P>For this problem, percentages are computed by taking an integer divided by the sample size. For example, a percentage of 50% with 0 decimal digits could be obtained from a sample size of just 2, since 1/2 = 50%, but a percentage of 51% with 0 decimal digits would need a sample size of 35, since to get a value that would round to 51%, you need to use 18/35. No smaller sample size would give a percentage of 51%. Similarly, to get a percentage of 50.0% with 1 decimal digit, a sample size of 2 would still suffice, but it would take a sample size of 49 to get a percentage of 51.0% with one decimal digit. You should follow standard rounding rules where values of 5 and above round up to the next higher value and all others round down.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will be a list of 1 or more data sets where each data set consists of two numbers <SPAN CLASS="MATH"><I>d</I></SPAN> and <SPAN CLASS="MATH"><I>p</I></SPAN>. <SPAN CLASS="MATH"><I>d</I></SPAN> is an integer, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2263img1.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2263img1.png ALT="$ \le$">5</SPAN>, indicating the number of significant decimal digits in the percentage, which is represented by p, <!-- MATH
 $0 < p < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>p</I> &lt; 100</SPAN>, a floating point number.<P>The end of input will be indicated by the data set `<TT>0 0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input (except for the end of input indicator line), your program should produce a line of output in the following form:<P><P><BR><TT>A minimum sample size of <SPAN CLASS="MATH"><I>n</I></SPAN> is necessary for a percentage of <SPAN CLASS="MATH"><I>p</I></SPAN>.</TT><P><P><BR>where <SPAN CLASS="MATH"><I>n</I></SPAN> is replaced with the minimum sample size and <SPAN CLASS="MATH"><I>p</I></SPAN> is the input value <SPAN CLASS="MATH"><I>p</I></SPAN>, with <SPAN CLASS="MATH"><I>d</I></SPAN> decimal digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
0 51
2 51.00
1 56.3
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
A minimum sample size of 35 is necessary for a percentage of 51.
A minimum sample size of 100 is necessary for a percentage of 51.00.
A minimum sample size of 16 is necessary for a percentage of 56.3.
</PRE><P>
______________________________________________________
2264||||||false||||||
<P>A simple form of number puzzle consists of nine rows of nine numbers or spaces each. One possible number puzzle is given below:<P><DIV ALIGN="CENTER"><IMG WIDTH="266" HEIGHT="385" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/p2264.gif ALT="\epsfbox{p2264.eps}"></DIV><P>To solve the problems, numbers are filled into the blank spaces so that each row, each column, and each darkly shaded 3 by 3 box has the digits 1 through 9 in it exactly one time.<P>Write a program to find a solution to this type of number puzzle. The input will consist of puzzles with exactly one solution.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more test cases. Each test case will consist of nine lines with nine digits on each line. There may be 0 or more blanks between the digits. The digits `1' through `9' will represent a number and the digit `0' will represent a blank square. The end of input is indicated by the end of the file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print, in the format shown below, the number of the case (preceded by the word `<TT>Puzzle</TT>'), and the solved puzzle. Separate the digits by a single space and have a blank line after each puzzle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
023 456 789
406 789 123
780 123 456
234 067 891
567 801 234
891 230 567
345 678 012
678 912 305
912 345 670
7 0 4  5 0 8  3 6 0
9 2 5  7 3 0  1 0 0
8 3 6  4 1 2  0 7 0
6 7 0  1 2 4  8 5 0
3 0 1  0 0 0  6 2 0
0 5 8  0 0 0  7 4 0
4 0 3  6 8 0  2 1 7
1 8 0  2 4 0  5 3 6
5 0 2  3 7 1  4 0 8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Puzzle 1
1 2 3 4 5 6 7 8 9
4 5 6 7 8 9 1 2 3
7 8 9 1 2 3 4 5 6
2 3 4 5 6 7 8 9 1
5 6 7 8 9 1 2 3 4
8 9 1 2 3 4 5 6 7
3 4 5 6 7 8 9 1 2
6 7 8 9 1 2 3 4 5
9 1 2 3 4 5 6 7 8

Puzzle 2
7 1 4 5 9 8 3 6 2
9 2 5 7 3 6 1 8 4
8 3 6 4 1 2 9 7 5
6 7 9 1 2 4 8 5 3
3 4 1 8 5 7 6 2 9
2 5 8 9 6 3 7 4 1
4 9 3 6 8 5 2 1 7
1 8 7 2 4 9 5 3 6
5 6 2 3 7 1 4 9 8
</PRE><P><P><P><BR><SPAN CLASS="textbf">Giving credit:</SPAN><P>To find more Number Puzzles, look at Dell Magazine's <EM>Math Puzzles and Logic Problems</EM>.<P>
______________________________________________________
2265||||||false||||||
<P>
MTU, Inc., is a multi-national software developer with
office buildings in several cities. As
part of a corporate reorganization, the company's leaders are changing employee
office assignments. Employees will
remain in the same office building. 
Consider the Milledgeville office with employees A, B, C, F, G, I, R,
and U as depicted below (the hallways are shaded, and the office numbers are
indicated above the employee names).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2265.eps}$
 -->
<IMG
 WIDTH="823" HEIGHT="257" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2265.gif
 ALT="\epsfbox{p2265.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file will contain a series of building specifications. Each
building specification begins with a line containing a single nonnegative
integer, <SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2265.gif
 ALT="$ \le$">50</SPAN>. The next line contains a string of
between 1 and 25 uppercase or lowercase letters, indicating the name of the
city where the building is located. 
Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains a single office specification. Each office
specification is of the form:

<P>

<P>
<BR>

<!-- MATH
 $office\_number$
 -->
<SPAN CLASS="MATH"><I>office</I><IMG
 WIDTH="70" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2265.gif
 ALT="$ \_number$"></SPAN> <!-- MATH
 $old\_occupant$
 -->
<SPAN CLASS="MATH"><I>old</I><IMG
 WIDTH="79" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2265.gif
 ALT="$ \_occupant$"></SPAN> <!-- MATH
 $new\_occupant$
 -->
<SPAN CLASS="MATH"><I>new</I><IMG
 WIDTH="79" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2265.gif
 ALT="$ \_occupant$"></SPAN>

<P>

<P>
<BR>
where <!-- MATH
 $office\_number$
 -->
<SPAN CLASS="MATH"><I>office</I><IMG
 WIDTH="70" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2265.gif
 ALT="$ \_number$"></SPAN> is an integer, <!-- MATH
 $old\_occupant$
 -->
<SPAN CLASS="MATH"><I>old</I><IMG
 WIDTH="79" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2265.gif
 ALT="$ \_occupant$"></SPAN>
and <!-- MATH
 $new\_occupant$
 -->
<SPAN CLASS="MATH"><I>new</I><IMG
 WIDTH="79" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2265.gif
 ALT="$ \_occupant$"></SPAN> are strings of between 1 and 25 uppercase 
or lowercase letters each, and these three fields are separated by whitespace.
For each building specification, an employee
name will appear exactly once as an <!-- MATH
 $old\_occupant$
 -->
<SPAN CLASS="MATH"><I>old</I><IMG
 WIDTH="79" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2265.gif
 ALT="$ \_occupant$"></SPAN> and exactly 
once as a <!-- MATH
 $new\_occupant$
 -->
<SPAN CLASS="MATH"><I>new</I><IMG
 WIDTH="79" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2265.gif
 ALT="$ \_occupant$"></SPAN>. No employees share an office.
Your program should stop processing building
specifications when it reaches a building where <SPAN CLASS="MATH"><I>n</I></SPAN> is 0.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Begin the output for each building
with a line containing only the name of the city where the building is
located. On the next line, output the
length of the longest dependency chain. 
Output all dependency chains meeting this length on succeeding lines,
one chain per line. Begin the output
for a chain with the name from the chain that comes first when the names are
sorted in increasing order. The order
of succeeding names in the chain should reflect the office swaps (for example,
<TT>C I U G</TT> is the correct output for the
Milledgeville building, <TT>C</TT> moves to the office originally occupied by <TT>I</TT>,
<TT>I</TT> moves to the office originally occupied by <TT>U</TT>, etc.; note that
<TT>C G U I</TT> is unacceptable output in this case because <TT>C</TT> does not move to
the office originally occupied by <TT>G</TT>).
If there are multiple dependency chains with the same length, 
list them in the output in increasing sorted order of the
first name in each list. Separate the output between buildings with a blank line. 
Follow the format illustrated in the Sample Output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
8
Milledgeville
11 A R
21 C G
22 U I
23 B F
31 F B
32 I C
33 G U
41 R A
4
IowaCity
1  Newman      Allen
2  Allen       Newman
3  Chalmers    Granger
4  Granger     Chalmers
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
Milledgeville
The longest dependency chain length is 4.
Chain 1:  C I U G

IowaCity
The longest dependency chain length is 2.
Chain 1:  Allen Newman
Chain 2:  Chalmers Granger
</PRE>

<P>

______________________________________________________
2266||||||false||||||
<P>Professor C. Ess bought 4 items at the 7-Eleven convenience store. As the cashier, Alec, was a former computer science student, Professor Ess thought it wise to double-check how his bill of $7.11 was calculated. Alec told him that he simply multiplied the prices of the items together. When Professor Ess objected that the amounts should have been added instead of multiplied, Alec replied that it didnt matter; the amount was the same either way. Sure enough, when Professor Ess multiplied his items for $1.20, $1.25, $1.50, and $3.16 together, the result was the same as their sum.<P>You are given a list of dollar amounts, and you are asked to find the prices of 4 items that, when multiplied, achieve exactly the same value as when added. There may be no solution, one solution, or distinct multiple solutions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a list of positive dollar (2 decimal place) amounts less than 20.00, one per line. The list is terminated by a value of 0.00, which is not to be solved.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The first line of output for each input line is the amount of the bill. If there are no solutions, the next line is `<TT>No solutions</TT>'. If there is one or more solutions, each solution must be on a separate line, in the form `<TT>Solution <SPAN CLASS="MATH"><I>N</I></SPAN>: <SPAN CLASS="MATH"><I>I</I>1</SPAN>, <SPAN CLASS="MATH"><I>I</I>2</SPAN>, <SPAN CLASS="MATH"><I>I</I>3</SPAN>, <SPAN CLASS="MATH"><I>I</I>4</SPAN></TT>', where <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of the solution, and <SPAN CLASS="MATH"><I>I</I>1</SPAN>, <SPAN CLASS="MATH"><I>I</I>2</SPAN>, <SPAN CLASS="MATH"><I>I</I>3</SPAN>, <SPAN CLASS="MATH"><I>I</I>4</SPAN> are the item prices (2 decimal places) in increasing order. If there are multiple solutions they must be distinct and listed in lexicographically increasing order, as done in the sample output. There must be a blank line following each set of solutions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
7.11
0.50
7.20
0.00
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
7.11
Solution 1: 1.20, 1.25, 1.50, 3.16

0.50
No solutions

7.20
Solution 1: 0.80, 1.50, 2.40, 2.50
Solution 2: 1.00, 1.20, 2.00, 3.00
Solution 3: 1.00, 1.50, 1.50, 3.20
</PRE>
______________________________________________________
2267||||||false||||||
          <p>Anthrax, also called Splenic Fever, Malignant Pustule, or Woolsorters' 
            Disease, is caused by Bacillus anthracis, an organism that under certain 
            conditions forms highly resistant spores capable of maintaining its 
            virulent effect for many years in contaminated soil and other materials. 
            <br>
            Anthrax was the first human disease that was demonstrated to be caused 
            by a specific microorganism. It was also the first infectious disease 
            against which a bacterial vaccine was found to be effective (Louis 
            Pasteur in 1881). These discoveries led to the origin and development 
            of bacteriology and immunology. <br>
            Interest has reborn around the study of how infected cells reproduce 
            and die. A hypothesis states that cell reproduction can be modeled 
            as a two-dimensional infinite grid of square cells like chessboard 
            cells but in Practical lab studies its defined as finite grid. In 
            this grid, each cell is considered to be alive or dead. A living cell 
            is represented as a mark on its position in the grid. Each cell has 
            up to 8 neighboring cells (up, down, left, right, upper-right, upper-left, 
            lower-right and lower-left). Cells located in the border of the grid 
            have smaller number of neighbor.<br>
            The model starts with an Initial Generation <b>G</b>(<i>0</i>) consisting 
            of some living and death cells in the Grid. After reproduction rules 
            are applied to every Cell, a new Generation <b>G</b>(<i>1</i>) is 
            obtained. New generations are always created using the information 
            of the previous generation. That is Generation <b>G</b>(<i>i</i>) 
            is created based on information of Generation <b>G</b>(<i>i-1</i>).<br>
            The reproduction rules that are used in the model are: <br>
            1. A dead cell with exactly three living neighbors becomes a living 
            cell (birth). <br>
            2. A living cell with zero or one living neighbors dies (loneliness). 
            <br>
            3. A living cell with two or three living neighbors stays alive (survival). 
            <br>
            4. A living cell with four or more living neighbors dies (overcrowding). 
          </p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

          <p> The input will contain data for several runs, each run will have 
            the following information: <br>
            The first line has two numbers indicating the <b>X</b> and <b>Y</b> 
            dimensions of the grid. (<b>X</b> number of columns, <b>Y</b> number 
            of rows). A <i>0</i> in this first line indicates end of run. <br>
            The second line is one number <b>n</b> representing the number of 
            generations that must be obtained. The third line is a number, that 
            specifies the number of cells that have a microorganism. Starting 
            in the forth line, there will be the coordinates of each microorganism, 
            one per line with format <b>x</b>, <b>y</b> (<b>x</b> is column number 
            and <b>y</b> is row number). The row and column numbers start at <i>1</i>.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
          <p>In the output you have to show two different generations: first the 
            Initial Generation<b> G</b>(<i>0</i>), followed by the <b>n</b> Generation 
            <b>G</b>(<b>n</b>). A Generation is represented as a matrix showing 
            living microorganisms as an &quot;<i>*</i>&quot; (asterisk) and death 
            cells as a &quot;<i>0</i>&quot; (zero). In the first line of each 
            test you should output the study number (the number of the run). Before 
            the Initial Generation write the string &quot;<i>Initial Generation</i>&quot;. 
            Before each new generation write &quot;<i>Generation </i><b>n</b>&quot;, 
            where <b>n</b> is the generation number.</p>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
15 10
5
3
5 5
5 6
5 7
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Study 1
Initial Generation
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 * 0 0 0 0 0 0 0 0 0 0
0 0 0 0 * 0 0 0 0 0 0 0 0 0 0
0 0 0 0 * 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Generation 5
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 * * * 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
</PRE>

<P>

______________________________________________________
2268||||||false||||||
<p>A junior high school has found that many of their students have problems with the conceptualization of mathematical expressions evaluated in postfix. You were contacted by the school to develop a program that could evaluate expressions in postfix, so that the students can practice with it helping them to keep the objectives of the class.<br>The program was requested by the professor of Mathematics I. For this reason the program should only handle operations with two operands and one operator, real numbers and the four basic operations: addition, subtraction, multiplication and division. An addition request was made. The program could only remember two operands.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input of the program will be a file containing the data for several runs. Each line will have one expression. Each expression will have a valid structure. Each line could be up to 100 characters. The program should stop after processing all the expressions. All operations will fit into an 8 bytes number (double).</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>In the output you have to show the result of each expression, one result per line. It should have a four digit precision.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
123 1254 + 1.254 * 45.87 /
5 4 +
5 4 + 1 + 2 + 12 -
3 2 * 1 - 2 / 3.1415 +
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
37.6446
9.0000
0.0000
5.6415
</PRE><P>
______________________________________________________
2269||||||false||||||
<p>The travel agency where you work, asked you to modify the Web Reservation Application Page to include the following functionality:<br><br><b>FUNCTIONALITY </b><br>Given a departing city <b>C</b> and an airline <b>A</b>, determine all the cities that can be reached from <b>C</b> using only airline <b>A</b>.<br>The number of airlines is <b>n</b> (0 &lt; <b>n </b>&lt; 26) and are identified as <i>0</i> to <b>n</b>-<i>1</i>. The number of cities is <b>m</b> (1 &lt; <b>m &lt; </b>101) and the cities are identified as <i>0</i> to <b>m</b>-<i>1</i>.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains several test. The first line of each test contains two positive integers: the number of existing cities (<b>m</b>) and the number of existing airlines (<b>n</b>). The next lines contain several positive integers. Each line contains the departing city number, an airline number and the city numbers for all the cities that you can get to from the departing city using single flights by the given airline. The last line of the test contains only two positive integers: the number of a departing city and the number of the airline that you want use. There is a blank line between tests. The input ends when <b>m</b> = 0 and <b>n</b> = 0.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output of your program will be a single line of positive ordered integers for each test. Based on the information of the last line in the test, the output line contains the city number of all the cities that you can reach from the departing city , using only the given airline. Do not include in the output the departing city number. When you can&acute;t get to any city from the departing city using the given airline, the output line should contain the next message : &quot;<i>There are no possible destinations through this airline</i>&quot;.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
17 3
1 1 2
1 0 6
1 2 5
2 1 3
2 0 7
2 2 6
3 1 4
3 0 8
3 2 7
4 2 8
5 1 6
5 0 10
5 2 9
6 1 7
6 0 11
6 2 10
7 1 8
7 0 12
7 2 11
8 2 12
9 1 10
9 0 14
9 2 13
10 1 11
10 0 15
10 2 14
11 1 12
11 0 16
11 2 15
12 2 16
13 1 14
14 1 15
15 1 16
1 0

100 100
1 0

10 10
0 1 1 4
0 2 8
0 6 3 8
0 7 1
0 9 2 3 4
1 0 4
1 2 3 9
1 5 4
1 6 8
1 7 6
1 9 6
2 0 0 5 6
2 2 6
2 5 1 9
2 7 4 9
2 8 4 8 9
3 0 7
3 4 0
3 5 0 8
3 6 5
4 0 2
4 1 6
4 2 3 6
4 3 0
4 6 1 5
4 9 1 8
5 3 2
5 4 0 6
5 5 4 8
5 6 0 2 7 9
5 7 2
5 9 0 6
6 0 4
6 1 3
6 2 2
6 3 5
6 5 1
6 7 1 3
6 8 2 7 9
6 9 0
7 1 1 6
7 2 6 8
7 3 4 9
7 6 4
7 7 6
8 0 1 2 3
8 2 5 9
8 4 2
8 5 3
8 7 2 6
8 8 7 9
8 9 2
9 1 4 8
9 2 7
9 4 2
9 6 4
9 7 1 2
9 8 0
8 0

0 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
6 11 16
There are no possible destinations through this airline
0 1 2 3 4 5 6 7
</PRE><P>
______________________________________________________
2270||||||false||||||
<p>A farmer has decided to surround his garden in order to protect his fruits from the appetite of his neighbors. This man does not have a lot of money, but he is a very innovative person. He has found the possibility of reducing costs by using trees from his property as fence posts. He found that in order to maximize the area to be enclosed by the fence, the trees to be used as fence posts must be selected carefully avoiding the creation of inward angles in the fence. Also, the selection of tree posts must ensure that the fence will enclose all the trees that are in the property.<br><br><b>PROBLEM </b><br>Given a set of trees (each tree is identified by a unique tree identifier) and the position of each tree in the property, write a program that obtains the following information:<br>a) The minimum number of trees required to enclose all the trees in the property<br>b) The sequence of trees that must be used as tree posts.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains several tests. The first line of the test contains an integer value <b>n </b>(1 &lt; <b>n</b> &lt; 100) representing the number of trees available in the garden. The following <b>n</b> lines are triplets representing the tree id (integer number) and the position of the tree (<b>x</b>, <b>y</b> coordinates) in the garden (the coordinates are real numbers). The input ends when <b>n</b> = 0.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test, the first line displays the number of trees that must be used as fence posts. The next line displays the sequence of tree identifiers that will be used as fence posts.</p><p><b>EXAMPLE </b><br>The next matrix represents the position of 11 trees in a property. A cell with a number indicates that the Tree whose identifier is the number in the cell is located in the <b>x</b>, <b>y</b> position of the garden. For example, tree 11 is in position (0 , 3). In this example, The number of fence posts required will be 6 and the sequence of tree identifiers that will be part of the fence posts is 11,6,4,10,9 and 8.</p><p align="center"><img src="http://livearchive.onlinejudge.org/external/22/p2270a.gif width="252" height="155"></p><p><br><br><b>NOTES/HINT</b><br>The first tree of the output sequence is always the last tree for which a position was provided in the input file. Your sequence in the output file must be printed in clockwise order.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
11 
1 2 2 
2 1 3 
3 2 5
4 3 5
5 3 4 
6 4 3 
7 2 1 
8 0 1
9 0 3
10 0 6
11 3 0
9 
1 7.1 1.1 
2 2.1 2.1
3 9.1 -1.1
4 9.1 2.1
5 10.1 -1.1
6 7.1 0.0
7 5.1 2.1
8 4.1 -2.1
9 4.1 3.1
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
6
11 6 4 10 9 8
5
9 2 8 5 4
</PRE><P>
______________________________________________________
2271||||||false||||||
<p>A key component of Parallel Computer architecture is the Interconnection Network. This network enables the communication among different processors of the computer. Throughout the years, different interconnection networks have been used. One of the most popular and efficient networks is the hypercube network. This network has been used in different systems such as nCube, Intel IPSC, Thinking Machines CM-2 and the SGI-Gray Origin 2000 supercomputer.</p><p>A hypercube network of dimension <b>k</b> has the following properties</p><p>o The total number of nodes is 2<sup><font size="-1">k</font></sup>.<br>o The nodes are identified with a node number in the range 0.. 2<sup><font size="-1">k</font></sup> -1.<br>o Every node has <b>k</b> bi-directional links with other nodes.<br>o Two nodes are connected if and only if the binary representation of the node number of the two nodes differs in exactly 1 bit.<br>o The binary representation of nodes in a hypercube of dimension <b>k</b> has <b>k</b> bits.( The exception is the singular case of hypercube with <b>k </b>= <i>0</i>).</p><p>The following figure shows a graphical representation of hypercube of dimensions <i>0</i>, <i>1</i>, <i>2</i> and <i>3</i>.</p><p align="center"><img src="http://livearchive.onlinejudge.org/external/22/p2271a.gif></p><p>A shortest path between any two nodes of a hypercube is represented as a sequence of nodes N<sub><font size="-1">0</font></sub>, N<sub><font size="-1">1</font></sub>, &#133;, N<sub><font size="-1">j</font></sub> where <b>j </b>is the length of the path. In a hypercube, there might be more than one shortest paths between any two nodes. We are interested in computing a bit-position ordered shortest path. A bit-position ordered shortest path is a hypercube shortest path with the following property:</p><p>For any pair of nodes N<sub><font size="-1">i</font></sub>, N<sub><font size="-1">i+1</font></sub> that belong to the sequence that represents a shortest path, if the difference in the bit representation of nodes N<sub><font size="-1">i</font></sub> and N<sub><font size="-1">i+1</font></sub> is in bit position <b>q</b> (bit position is considered from right to left) then, the bit position of the difference in the bit representation between any pair of nodes that are in the sequence before N<sub><font size="-1">i</font></sub> should be less than <b>q</b>. Also the bit position of the difference in the bit representation between any pair of nodes that are after N<sub><font size="-1">i+1</font></sub> in the sequence should be greater than <b>q</b>.<br>For example, for hypercube with <b>k</b> = <i>3</i>, a bit-position ordered shortest path between nodes 1 (001) and 6 (110) is<br>1 (001), 0 (000), 2 (010) and 6 (110).</p><p>A shortest path that is not bit-position ordered is 1 (001), 3 (011), 7 (111) and 6 (110). The problem here is that nodes 1 and 3 differ in bit position 2 however, nodes 7 and 6 differ in bit position 1.</p><p>Write a program that computes the bit-position ordered shortest path between any two nodes of the hypercube and also outputs the length of the path.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Your program will repeatedly accept the input sets from the input file. Each input set has the dimensionality of a hypercube (the dimension of the hypercube is in the range of <i>0</i> up to <i>20</i>) a source and a destination node (integer numbers in decimal base). The program will stop when it identifies an input data set with dimension <i>0</i>.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The program will output the following information:</p><p>&middot; The length (number of links that must be traversed) of the shortest path between the source and the destination nodes.<br>&middot; An ordered shortest path showing all the nodes that are visited from the source to the destination. The nodes must be shown in binary and decimal representation.</p><P>Print a blank line between sets.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2 0 3
5 20 6
3 2 5
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Hypercube Dimension 2
Source Node 0
Destination Node 3
Shortest Path Length 2
Shortest Path
00 (0)
01 (1)
11 (3)

Hypercube Dimension 5
Source Node 20
Destination Node 6
Shortest Path Length 2
Shortest Path
10100 (20)
10110 (22)
00110 (6)

Hypercube Dimension 3
Source Node 2
Destination Node 5
Shortest Path Length 3
Shortest Path
010 (2)
011 (3)
001 (1)
101 (5)
</PRE><P>
______________________________________________________
2272||||||false||||||
<p>The structure (or shape) of a Binary Search Tree (BST) can be represented in memory as follows:</p><p>Let d<sub><font size="-1">1</font></sub>, d<sub><font size="-1">2</font></sub>, d<sub><font size="-1">3</font></sub>, &#133;, d<sub><font size="-1">n</font></sub>, be the keys (nodes) of a BST where d<sub><font size="-1">1 </font></sub>&lt; d<sub><font size="-1">2</font></sub> &lt; d<sub><font size="-1">3 </font></sub>&lt; &#133; &lt; d<sub><font size="-1">n</font></sub> . You can see that each key has an index that identify the key. For example, the key d<sub><font size="-1">3</font></sub> has the index 3.</p><p>The matrix <b>M</b> is built as follows: for every <i>i</i> &#8804; <i>j</i>, <b>M</b>[<i>i</i>,<i>j</i>] contains the index of the key that represents the root in the BST that is formed with the keys from d<sub><font size="-1"><i>i</i></font></sub> to d<sub><font size="-1"><i>j</i></font></sub>. The rest of the values in the matrix <b>M</b> are set to zero since are nor required. This representation is known as Matrix of Roots.<br>The Matrix of Roots has <b>n</b>+<i>1</i> rows that range from <i>1</i> to <b>n</b>+<i>1</i> and <b>n</b>+<i>1</i> columns that range from <i>0</i> to <b>n</b>.</p><p>Below is an example of a BST and its corresponding Matrix of Roots:<br></p><p align="center"><img src="http://livearchive.onlinejudge.org/external/22/p2272a.gif> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<img src="http://livearchive.onlinejudge.org/external/22/p2272a.gif></p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>You will be given a number of test cases. Each test case represents a BST in its Matrix of Roots representation. The input for each test is as follows: The first line represents the order (# of rows and columns) of the Matrix of Roots for the BST. The following lines will represent the values of the matrix, each line will correspond to one row of the matrix. The values within each row are delimited by spaces. All values are non-negative and you can assume that a BST contains at most 100 elements.<br>You will identify the end of input when you find a single line with a -1 value.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case, print the case number followed by a messages indicating the height of the BST and the average number of comparisons that will be required to perform the search of keys in the BST. The average number of comparisons is the sum of the comparisons that each key needs to be found divided into the total quantity of keys. You are going to count only the comparisons between keys. For example, in the BST of above, the key 12 needs 1 comparison to be found; the key 19 needs 4 comparisons to be found, etc.<br>Output the information using the following format:<br>Case <b>X</b>:<br>The height of the BST is: <b>Y</b><br>The average of the search in the BST is: <b>Z</b></p><p>where <b>X</b>, <b>Y</b> and <b>Z</b> are replaced by the appropriate values. <b>Z</b> should be displayed with 2 decimals.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
10
0 1 2 3 3 5 5 5 5 5
0 0 2 3 3 5 5 5 5 5
0 0 0 3 3 5 5 5 5 5
0 0 0 0 4 5 5 5 5 5
0 0 0 0 0 5 5 5 5 5
0 0 0 0 0 0 6 7 7 9
0 0 0 0 0 0 0 7 7 9
0 0 0 0 0 0 0 0 8 9
0 0 0 0 0 0 0 0 0 9
0 0 0 0 0 0 0 0 0 0
-1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1: 
The height of the BST is: 4
The average of the search in the BST is: 2.89
</PRE><P>
______________________________________________________
2273||||||false||||||
<P>The positive integer <SPAN CLASS="MATH"><I>K</I></SPAN> and a string <SPAN CLASS="MATH"><I>S</I></SPAN>, that contains digits from 0 to 9, are given. The string <SPAN CLASS="MATH"><I>S</I></SPAN> can be partitioned into some not empty substrings <SPAN CLASS="MATH"><I>S</I>[0], <I>S</I>[1], <I>S</I>[2],...</SPAN> so that <SPAN CLASS="MATH"><I>S</I>[0] + <I>S</I>[1] + <I>S</I>[2] +...= <I>S</I></SPAN> (+ is a concatenation operation, <SPAN CLASS="MATH"><I>S</I>[0]</SPAN> is the head of <SPAN CLASS="MATH"><I>S</I></SPAN>). Each partition of the string <SPAN CLASS="MATH"><I>S</I></SPAN> into <SPAN CLASS="MATH"><I>M</I></SPAN> substrings defines a polynom <SPAN CLASS="MATH"><I>P</I>(<I>x</I>) = <I>a</I>[0] + <I>a</I>[1]*<I>x</I> + <I>a</I>[2]*<I>x</I><SUP>2</SUP> + ... + <I>a</I>[<I>M</I>]*<I>x</I><SUP>M</SUP></SPAN>, where <SPAN CLASS="MATH"><I>a</I>[<I>i</I>]</SPAN> is the number designated by the substring <SPAN CLASS="MATH"><I>s</I>[<I>i</I>]</SPAN>. For example, the string <SPAN CLASS="MATH"><I>S</I> = 1204</SPAN> can be partitioned into <SPAN CLASS="MATH"><I>S</I> = 1 + 204</SPAN> (polynom <SPAN CLASS="MATH"><I>P</I>(<I>x</I>) = 1 + 204*<I>x</I></SPAN>), into <SPAN CLASS="MATH"><I>S</I> = 1 + 2 + 04</SPAN> (polynom <SPAN CLASS="MATH"><I>P</I>(<I>x</I>) = 1 + 2*<I>x</I> + 4*<I>x</I><SUP>2</SUP></SPAN>) etc. You must write a program that finds the polynom that has the minimum value <SPAN CLASS="MATH"><I>P</I>(<I>K</I>)</SPAN> from all possible polynoms that can be built from <SPAN CLASS="MATH"><I>S</I></SPAN>. It is known that the maximum magnitude of the result cannot exceed <SPAN CLASS="MATH">12*10<SUP>14</SUP></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is one number in the first line - the number of tests. Each test is on a single line, containing the number <SPAN CLASS="MATH"><I>K</I></SPAN> and the string <SPAN CLASS="MATH"><I>S</I></SPAN> separated by one space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test you must write on one line the polynom that has the minimum value <SPAN CLASS="MATH"><I>P</I>(<I>K</I>)</SPAN>. If there exist several optimal polynoms, you must write the one that has the minimal degree. The polynom must be printed beginning with the lowest degree.<P>For the second test of Sample Input you have <SPAN CLASS="MATH"><I>K</I> = 3</SPAN>, <SPAN CLASS="MATH"><I>S</I> = 123</SPAN>. <SPAN CLASS="MATH"><I>S</I></SPAN> can be partitioned into (all possible partitions):<P><P><BR><TABLE COLS=3><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>S</I> = 123</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>polynom: <SPAN CLASS="MATH"><I>P</I>(<I>X</I>) = 123</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>value: <SPAN CLASS="MATH"><I>P</I>(3) = 123</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>S</I> = 1 + 23</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>polynom: <SPAN CLASS="MATH"><I>P</I>(<I>X</I>) = 1 + 23 <TT>*</TT> <I>X</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>value: <SPAN CLASS="MATH"><I>P</I>(3) = 70</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>S</I> = 12 + 3</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>polynom: <SPAN CLASS="MATH"><I>P</I>(<I>X</I>) = 12 + 3 <TT>*</TT> <I>X</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>value: <SPAN CLASS="MATH"><I>P</I>(3) = 21</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>S</I> = 1 + 2 + 3</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>polynom: <SPAN CLASS="MATH"><I>P</I>(<I>X</I>) = 1 + 2 <TT>*</TT> <I>X</I> + 3 <TT>*</TT> <I>X</I><SUP>2</SUP></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>value: <SPAN CLASS="MATH"><I>P</I>(3) = 34</SPAN></TD></TR></TABLE><P><P><BR>Minimum polynom`s value is 21 on partition <SPAN CLASS="MATH"><I>S</I> = 12 + 3</SPAN>, so the answer is <SPAN CLASS="MATH"><I>P</I>(<I>X</I>) = 12 + 3*<I>X</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
1 1234
3 123
1 1001
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 + 2 * X^1 + 3 * X^2 + 4 * X^3
12 + 3 * X^1
1 + 1 * X^1
</PRE><P>
______________________________________________________
2274||||||false||||||
<P>The soldiers of the moon army are standing in a line, some of them looking to the left end of the line, other - to the right end of the line. Therefore, some couples of neighbors in the line could stand face to face, some couples - back to back, and some - back to face (or face to back which is the same). By a command the soldiers start to turn. One turn applies to a single couple of soldiers that are standing face to face. After the turn the soldiers are standing back to back. For a given line of soldiers it is necessary to decide whether it is possible to order the soldiers by consecutive turns in such a way that there is no couple of soldiers in the line standing face to face. If this is possible - find the minimum number of turns.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains a sequence of input data sets. In the first line of the input file there is a single number <SPAN CLASS="MATH"><I>t</I></SPAN> - amount of tests <!-- MATH
 $(0 < t < 10)$
 --><SPAN CLASS="MATH">(0 &lt; <I>t</I> &lt; 10)</SPAN>. Next lines contain test data. The first line of each test contains a natural number <SPAN CLASS="MATH"><I>k</I></SPAN> <!-- MATH
 $(0 < k < 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>k</I> &lt; 1000)</SPAN>, which gives the amount of next lines for current test. These lines designate the row of soldiers. The length of each line is no more then 50. The soldiers position in the line is given with a sequence of two symbols: `<SPAN CLASS="MATH">&lt;</SPAN>' - the soldier faces towards left, `<SPAN CLASS="MATH">&gt;</SPAN>' - the soldier faces towards right.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be printed on the standard output. For each given input data set, print one number in a single line. If the arrangement for fight is impossible (the number of turns is infinite) for current test, you must print `<TT>-1</TT>'. If possible, print the minimal number of turns to reach this arrangement.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
2
&gt;&lt;&gt;
&lt;
1
&gt;&lt;&lt;&lt;&lt;
3
&lt;
&lt;
&gt;
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
4
0
</PRE><P>
______________________________________________________
2275||||||false||||||
<P>Two natural numbers <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are chosen <SPAN CLASS="MATH">(1 &lt; <I>a</I> &lt; <I>b</I>)</SPAN>. Person <SPAN CLASS="MATH"><I>M</I></SPAN> is told the multiple of <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> <SPAN CLASS="MATH">(<I>a</I> <TT>*</TT> <I>b</I>)</SPAN>, and person <SPAN CLASS="MATH"><I>S</I></SPAN> is told the sum of <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> <SPAN CLASS="MATH">(<I>a</I> + <I>b</I>)</SPAN>. The discussion between <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>S</I></SPAN> goes like this:<P><P><BR>M: I do not know the numbers <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>.<P>S: I do not know them either, but I knew you would not know them.<P>M: Now I know the numbers!<P>S: Now I know them, too!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is given in a text file. The input file contains pairs of natural numbers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> <!-- MATH
 $(2 \le x < y \le 550)$
 --><SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2275img1.png ALT="$ \le$"><I>x</I> &lt; <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2275img1.png ALT="$ \le$">550)</SPAN>, one pair per line. The input is guaranteed to be correct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each pair <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, find all pairs of <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>, such that <!-- MATH
 $x \le a < b \le y$
 --><SPAN CLASS="MATH"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2275img1.png ALT="$ \le$"><I>a</I> &lt; <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2275img1.png ALT="$ \le$"><I>y</I></SPAN> and that the given discussion is possible. Write these pairs in a single line, and finish that line with `<TT>no more pairs.</TT>' if there are <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> found in the given range, or write simply `<TT>no pairs.</TT>' if there are not. Separate the numbers of a pair with a comma, terminate each pair with a semi-colon, and separate different pairs with a blank after the semi-colon, as shown in the example below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2  10
2  20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
no pairs.
4,13; no more pairs.
</PRE><P>
______________________________________________________
2276||||||false||||||
<P>
The managers of a very large typography (with a virtually infinite number of resources - i.e. an infinite number and variety of printing machines) would like to know what is the minimum time required to fulfill a customer's order. An order is a request to print a certain number of magazines, or leaflets, or books etc. For each product that can be printed - there is a certain flow that must be followed. For example, first a machine takes single paper from a pile of paper, other machine cuts the paper to appropriate page dimensions, other machine prints one page, one collects the pages into a pile, and the last machine staples the pages together. Thus, the printing flow can be described by giving the <SPAN CLASS="MATH"><I>N</I></SPAN> operations required, the time consumed for each operation, and the dependencies between the operations (e.g. operations 0, 1, and 2 may start immediately, 3 may start after 2 completes, 4 may start after 1 and 3 are completed, and 5 may start after 1 is completed, and 6 may start after 0, 4 and 5 are completed).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your task is to write a program that computes the minimum time required to fulfill a customer's order. The program will read from the input file several data sets separated by an empty line - each data set represents a customer's order and has the following format:

<P>

<UL>
<LI>On the first line - the number <SPAN CLASS="MATH"><I>N</I></SPAN> of operations required for printing a product (max. 100)
</LI>
<LI>On the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines - for each operation, we have (in this order) the operation's ID (between 0 and <SPAN CLASS="MATH"><I>N</I> - 1</SPAN>), the time required for completing the operation (a strictly positive integer), the IDs of the operations that must start after the current operation is completed, and a terminator (the integer '<TT>-1</TT>').
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set (customer order), the program must write to the standard output a single line containing the time required to complete the order (`<TT>-1</TT>' if it is impossible).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
0 2 1 2 -1
1 3 -1
2 2 -1

2
0 1 1 -1
1 1 0 -1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
-1
</PRE> 

<P>

______________________________________________________
2277||||||false||||||
<P>Given a permutation of <SPAN CLASS="MATH"><I>n</I></SPAN> elements <SPAN CLASS="MATH">(1, 2,..., <I>n</I>)</SPAN>: <SPAN CLASS="MATH"><I>A</I> = (<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB>)</SPAN>. We define a sequence <SPAN CLASS="MATH"><I>P</I>(<I>A</I>) = (<I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>(n-1)</SUB>)</SPAN> where <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> = 0</SPAN> if <SPAN CLASS="MATH"><I>A</I>(<I>i</I>) &gt; <I>A</I>(<I>i</I> + 1)</SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> = 1</SPAN> if <!-- MATH
 $A(i) < A(i+1)$
 --><SPAN CLASS="MATH"><I>A</I>(<I>i</I>) &lt; <I>A</I>(<I>i</I> + 1)</SPAN>. Given a permutation <SPAN CLASS="MATH"><I>B</I></SPAN>, find the number of all permutations <SPAN CLASS="MATH"><I>C</I></SPAN> where <SPAN CLASS="MATH"><I>P</I>(<I>C</I>) = <I>P</I>(<I>B</I>)</SPAN> including the permutation <SPAN CLASS="MATH"><I>B</I></SPAN> itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input text file contains several tests, each on a separate line. The first number in the test is <SPAN CLASS="MATH"><I>n</I></SPAN> followed by <SPAN CLASS="MATH"><I>n</I></SPAN> numbers representing the permutation all of them separated by a single space. The last line in the input contatins only `<TT>0</TT>' and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be written on the standard output. For each line in the input (excluding the last one, `<TT>0</TT>') you should write the result i.e. the number of the permutations having the same value for <SPAN CLASS="MATH"><I>P</I>(<I>A</I>)</SPAN> when given the permutation <SPAN CLASS="MATH"><I>A</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 1 2
4 1 3 2 4
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
5
</PRE><P>
______________________________________________________
2278||||||false||||||
<P><SPAN CLASS="MATH"><I>S</I></SPAN> is a set of non-negative integers, such that an integer may occur more that once in <SPAN CLASS="MATH"><I>S</I></SPAN>, and <SPAN CLASS="MATH"><I>k</I></SPAN> is a positive integer. Let <SPAN CLASS="MATH"><I>m</I></SPAN> be the largest possible integer, not larger than <SPAN CLASS="MATH"><I>k</I></SPAN>, and <SPAN CLASS="MATH"><I>m</I></SPAN> is equal to the sum of the members of some subset of <SPAN CLASS="MATH"><I>S</I></SPAN>.<P>The problem of finding <SPAN CLASS="MATH"><I>m</I></SPAN>, by given <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN>, is a hard one.<P>Your task will be easier. Your program should find and output an integer <SPAN CLASS="MATH"><I>p</I></SPAN> that is within 10% of <SPAN CLASS="MATH"><I>m</I></SPAN>. Formally written <SPAN CLASS="MATH"><I>p</I></SPAN> should satisfy the inequality: <!-- MATH
 $m*(0.9) < p \le m$
 --><SPAN CLASS="MATH"><I>m</I>*(0.9) &lt; <I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2278img1.png ALT="$ \le$"><I>m</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should read sets of data from a text file. The first line of the input file contains the number of the data sets. Each data set is presented in the following format:<P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN><BR><SPAN CLASS="MATH"><I>S</I>[1]&nbsp;<I>S</I>[2]&nbsp;<I>S</I>[3]&nbsp;...&nbsp;<I>S</I>[<I>n</I>]</SPAN><BR><SPAN CLASS="MATH"><I>k</I></SPAN><P><P><BR>The first line contains one positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2278img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2278img1.png ALT="$ \le$">500)</SPAN> representing the number of elements in <SPAN CLASS="MATH"><I>S</I></SPAN>. The second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> non-negative integers, each two consecutive separated by one blank. The third line contains the integer <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2278img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2278img1.png ALT="$ \le$">2000000000)</SPAN>.<P>There are no blank lines between consecutive sets of data. Input data are correct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The result of the program is printed on the standard output. For each input data set the program prints a single line containing a single integer <SPAN CLASS="MATH"><I>p</I></SPAN>, such that <!-- MATH
 $m*(0.9) < p \le m$
 --><SPAN CLASS="MATH"><I>m</I>*(0.9) &lt; <I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2278img1.png ALT="$ \le$"><I>m</I></SPAN>. There should not be any leading blanks at the start of the line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
5
10 4 5 6 4
24
4
3 8 2 11
10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
22
10
</PRE><P>
______________________________________________________
2279||||||false||||||
<P>
The ``Great Expectations" Popular Bank is verifying the deposits it holds. A deposit is a pile of coins of equal weight. The secret service came with the information that <SPAN  CLASS="textit">precisely one coin from each deposit has been replaced with a counterfeit coin</SPAN>, which is lighter or heavier than any other coin in the deposit. Take for granted this information and write a program that verifies the deposits. For each deposit and the outcome of a series of weighting tests the program tries to find the bad coin and its relative weight. The program input is from a text file. Each data set in the file stands for a deposit and has the format:

<P>

<P>
<BR>

<!-- MATH
 $N \ M \ weighting\_test_{1} \dots weighting\_test_{M}$
 -->
<SPAN CLASS="MATH"><I>N</I>&nbsp;<I>M</I>&nbsp;<I>weighting</I><IMG
 WIDTH="47" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="$ \_test_{{1}}^{}$">...<I>weighting</I><IMG
 WIDTH="55" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="$ \_test_{{M}}^{}$"></SPAN>

<P>

<P>
<BR>

<!-- MATH
 $3 \le N \le 1000$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="$ \le$">1000</SPAN> is the number of coins in the deposit, and <SPAN CLASS="MATH"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="$ \ge$"> 0</SPAN> is the number of weighting tests. The coins are identified by numbers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>. A <!-- MATH
 $weighting\_test$
 -->
<SPAN CLASS="MATH"><I>weighting</I><IMG
 WIDTH="39" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="$ \_test$"></SPAN> has the format:

<P>

<P>
<BR>

<!-- MATH
 $coin_{1} \ \dots \ coin_{w/2} \ needle \ coin_{w/2+1} \ \dots \ coin_{w}$
 -->
<SPAN CLASS="MATH"><I>coin</I><SUB>1</SUB>&nbsp;...&nbsp;<I>coin</I><SUB>w/2</SUB>&nbsp;<I>needle</I>&nbsp;<I>coin</I><SUB>w/2+1</SUB>&nbsp;...&nbsp;<I>coin</I><SUB>w</SUB></SPAN>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>w</I> &gt; 0</SPAN> is the even number of weighted coins <!-- MATH
 $1 \le coin_{k} \le N$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="$ \le$"><I>coin</I><SUB>k</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="$ \le$"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>k</I> = 1</SPAN>, <SPAN CLASS="MATH"><I>w</I></SPAN>, <!-- MATH
 $coin_{i} \neq coin_{j}$
 -->
<SPAN CLASS="MATH"><I>coin</I><SUB>i</SUB> <IMG
 WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="$ \neq$"> <I>coin</I><SUB>j</SUB></SPAN> for <SPAN CLASS="MATH"><I>i</I> <IMG
 WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="$ \neq$"> <I>j</I></SPAN>. Coins <!-- MATH
 $coin_{1} \ldots coin_{w/2}$
 -->
<SPAN CLASS="MATH"><I>coin</I><SUB>1</SUB>...<I>coin</I><SUB>w/2</SUB></SPAN> are placed on the left pan of the scale; coins <!-- MATH
 $coin_{w/2+1} \ldots coin_{w}$
 -->
<SPAN CLASS="MATH"><I>coin</I><SUB>w/2+1</SUB>...<I>coin</I><SUB>w</SUB></SPAN> are placed on the right pan of the scale. The needle is one of the characters `<TT><code>\</code>,|,/</TT>' as follows:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2279.eps}$
 -->
<IMG
 WIDTH="797" HEIGHT="72" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/2279img1.png
 ALT="\epsfbox{p2279.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>     

<P>
Data items in the input are separated by at least one white space. The input data comply fully with the format above but may be logically inconsistent or incomplete <SPAN  CLASS="textit">with regard to the problem assumption</SPAN>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The result for each deposit is printed on standard output as shown below.

<P>

<P>
<BR>
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=JUSTIFY WIDTH="1.5"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="4.5">
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108">
Result  </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">  Meaning </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>Coin <SPAN CLASS="MATH">#</SPAN> is light</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">  The coin numbered # is counterfeit and it is light. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>Coin <SPAN CLASS="MATH">#</SPAN> is heavy</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324"> The coin numbered # is counterfeit and it is heavy. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>Inconsistent data</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324"> The assumption is contradicted or conflicting conclusions on the kind of coins (honest or bad) follow from data and problem's assumption. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="108"><TT>Incomplete data</TT>  </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324"> Data do not provide sufficient information to find the counterfeit coin and its relative weight. </TD></TR>
</TBODY>
</TABLE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 2   1 | 2   1 \ 3
3 2   1 | 2   1 | 3
3 2   1 | 2   1 \ 2 
3 1   1 | 2
4 2   1 | 2   1 2 \ 3 4
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Coin 3 is light
Inconsistent data
Inconsistent data
Incomplete data
Incomplete data
</PRE> 

<P>

<P><P>
<BR>

<SPAN  CLASS="textbf">NOTES:</SPAN> 
The examples below span some possible cases of correct, inconsistent or incomplete input data. The first data set is for 3 coins and 2 weighting tests. The test 1 <SPAN CLASS="MATH">|</SPAN> 2 weights coins 1 and 2. Since the scale is in balance both coins are honest. The test 1 <!-- MATH
 $\backslash$
 -->
<SPAN CLASS="MATH">&#92;</SPAN> 3 weights coins 1 and 3. The scale tips left and, therefore, coin 3 is light. The second data set (3 coins, 2 tests) contradicts the problem assumption since all coins are honest.

<P>
In the third data set the weighting tests lead to contradictory conclusions: a) both 1 and 2 are honest, and b) one of 1 and 2 is counterfeit. In the fourth data set (3 coins, 1 weighting test) coin 3 is counterfeit but we do not know whether it is light or heavy. In the last data set one coin out of 3 and 4 is light but we cannot tell which. 

<P>

______________________________________________________
2280||||||false||||||
<P>Brian is an enthusiast of computer games, especially those that simulate virtual reality. Now he is in front of the Star Gate. In order to open the gate he must break the protection as quickly as he can. Breaking the protection means to match a given code (a sequence of numbers) against the gate protection (a very long sequence of numbers). The starting position of the first occurrence of the code within the sequence opens the gate. Can you help him?<P>The code is a sequence of at most 60000 integer numbers between 0 and 255. The gate protection contains integer numbers between 0 and 255. Your program must find the first match if there is one, or report the absence of a match.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The text input file contains several data sets. Each data set has the following format:<P><UL><LI>the length of the code </LI><LI>the sequence of numbers representing the code </LI><LI>the number of integers in the gate protection </LI><LI>the sequence of numbers representing the gate protection </LI></UL><P><P><BR><SPAN CLASS="MATH"><I>code</I><IMG WIDTH="93" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2280img1.png ALT="$ \_dimension$"></SPAN><BR><SPAN CLASS="MATH"><I>integer</I><SUB>1</SUB>&nbsp;<I>integer</I><SUB>2</SUB>&nbsp;...&nbsp;<I>integer</I><SUB>code<IMG WIDTH="74" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2280img1.png ALT="$\scriptstyle \_dimension$"></SUB></SPAN><BR><SPAN CLASS="MATH"><I>protection</I><IMG WIDTH="93" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2280img1.png ALT="$ \_dimension$"></SPAN><BR><SPAN CLASS="MATH"><I>integer</I><SUB>1</SUB>&nbsp;<I>integer</I><SUB>2</SUB>&nbsp;...&nbsp;<I>integer</I><SUB>protection<IMG WIDTH="74" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2280img1.png ALT="$\scriptstyle \_dimension$"></SUB></SPAN><P><P><BR>White spaces may occur freely in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The results must be printed on the standard output. For each given data set, print the result on a separate line. The result is a number that represents the position (starting from zero) of the first occurrence of the code in the gate protection, or the message `<TT>no solution</TT>' if there is no match.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
0 1 2
7
2 3 4 0 1 2 5

2
1 4
6
4 1 4 1 4 4

3
1 2 3
7
3 2 1 3 2 255 7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
1
no solution

______________________________________________________
2281||||||false||||||
<P>A color reduction is a mapping from a set of discrete colors to a smaller one.The solution to this problem requires that you perform just such a mapping in a standard twenty-four bit RGB color space. The input consists of a target set of sixteen RGB color values, and a collection of arbitrary RGB colors to be mapped to their closest color in the target set. For our purposes, an RGB color is defined as an ordered triple (<SPAN CLASS="MATH"><I>R</I>, <I>G</I>, <I>B</I></SPAN>) where each value of the triple is an integer from 0 to 255. The distance between two colors is defined as the Euclidean distance between two three-dimensional points. That is, given two colors ( <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB>, <I>G</I><SUB>1</SUB>, <I>B</I><SUB>1</SUB></SPAN>) and ( <SPAN CLASS="MATH"><I>R</I><SUB>2</SUB>, <I>G</I><SUB>2</SUB>, <I>B</I><SUB>2</SUB></SPAN>), their distance <SPAN CLASS="MATH"><I>D</I></SPAN> is given by the equation.<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>D</I> = <IMG WIDTH="316" HEIGHT="50" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2281img1.gif ALT="$\displaystyle \sqrt{(R_2-R_1)^2 + (G_2 - G_1)^2 + (B_2 -B_1)^2}$">.</DIV><P></P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file is a list of RGB colors, one color per line, specified as three integers from 0 to 255 delimited by a single space. The first sixteen colors form the target set of colors to which the remaining colors will be mapped. The input is terminated by a line containing three `<TT>-1</TT>' values.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each color to be mapped, output the color and its nearest color from the target set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
0 0 0
255 255 255
0 0 1
1 1 1
128 0 0
0 128 0
128 128 0
0 0 128
126 168 9
35 86 34
133 41 193
128 0 128
0 128 128
128 128 128
255 0 0
0 1 0
0 0 0
255 255 255
253 254 255
77 79 134
81 218 0
-1 -1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
(0,0,0) maps to (0,0,0)
(255,255,255) maps to (255,255,255)
(253,254,255) maps to (255,255,255)
(77,79,134) maps to (128,128,128)
(81,218,0) maps to (126,168,9)
</PRE><P>
______________________________________________________
2282||||||false||||||
<P>Morse code represents characters as variable length sequences of dots and dashes.In practice, characters in a message are delimited by short pauses. The following table shows the Morse code sequences:<P><PRE>
     A  .-           H  ....         O  ---          V  ...-
     B  -...         I  ..           P  .--.         W  .--
     C  -.-.         J  .---         Q  --.-         X  -..-
     D  -..          K  -.-          R  .-.          Y  -.--
     E  .            L  .-..         S  ...          Z  --..
     F  ..-.         M  --           T  -
     G  --.          N  -.           U  ..-
</PRE><P>Note that four dot-dash combinations are unassigned. For the purposes of this problem we will assign them as follows (these are not the assignments for actual Morse code):<PRE>
               underscore  ..--                  period  ---.
                    comma  .-.-           question mark  ----
</PRE><P>Thus, the message ``<code>ACM_GREATER_NY_REGION</code>" is encoded as:<P><PRE>
.- -.-. -- ..-- --. .-. . .- - . .-. ..-- -. -.-- ..-- .-. . --. .. --- -.
</PRE><P>M.E. Ohaver proposed an encryption scheme based on mutilating Morse code.Her scheme replaces the pauses between letters, necessary because Morse is a variable-length encoding that is not prefix-free, with a string that identifies the number of dots and dashes in each. For example, consider the message ``.--.-.--". Without knowing where the pauses should be, this could be ``ACM", ``ANK", or several other possibilities. If we add length information, however, ``.--.-.--242", then the code is unabiguous.<P>Ohaver's scheme has three steps, the same for encryption and decryption:<P><OL><LI>Convert the text to Morse code without pauses but with a string of numbers to indicate code lengths<P></LI><LI>Reverse the string of numbers<P></LI><LI>Convert the dots and dashes back into to text using the reversed string of numbers as code lengths </LI></OL><P>As an example, consider the encrypted message ``<code>AKADTOF_IBOETATUK_IJN</code>". Converting to Morse code with a length string yields<PRE>
".--.-.--..----..-...--..-...---.-.--..--.-..--...----.232313442431121334242".
</PRE><P>Reversing the numbers and decoding yields the original message ``<code>ACM_GREATER_NY_REGION</code>".<P>This problem requires that you implement Ohaver's encoding algorithm.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of several messages encoded with Ohaver's algorithm. The first line of the input is an integer <SPAN CLASS="MATH"><I>n</I></SPAN> that specifies the number of test cases. The following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain one message per line. Each message will use only the twenty-six capital letters, underscores, commas, periods, and question marks. Messages will not exceed 100 characters in length.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each message in the input, output the line number starting in column one, a colon, a space, and then the decoded message. The output format must be adhered to precisely.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5
AKADTOF_IBOETATUK_IJN
PUEL
QEWOISE.EIVCAEFNRXTBELYTGD.
?EJHUT.TSMYGW?EJHOT
DSU.XFNCJEVE.OE_UJDXNO_YHU?VIDWDHPDJIKXZT?E
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1: ACM_GREATER_NY_REGION
2: PERL
3: QUOTH_THE_RAVEN,_NEVERMORE.
4: TO_BE_OR_NOT_TO_BE?
5: THE_QUICK_BROWN_FOX_JUMPS_OVER_THE_LAZY_DOG
</PRE><P><P><P><BR><B>Notes</B><P>As presented, this encryption scheme is only trivially secure. In fact it offers no security at all if the algorithm is known to the attacker. The key is the string of numbers needed to decide where the pauses should be inserted to recover the message, but with the method shown here, this information is encoded in and easily recovered from the encrypted data. Even should some other method be chosen to scramble the length information in the encoding, secrecy of the algorithm is the real key in this technique. Modifications of Ohaver's technique do exist in which the security is not based on the secrecy of the algorithm.<P>
______________________________________________________
2283||||||false||||||
<P>
Plato believed what we perceive is but a shadow of reality. Recent
archaeological excavations have uncovered evidence that this
belief may have been encouraged by Plato's youthful amusement with
cleverly-designed blocks.  The blocks have the curious property
that, when held with any face toward a light source, they cast
shadows of various letters, numbers, shapes, and patterns.  It is
possible for three faces incident to a corner to correspond to
three different shadow patterns.  Opposite faces, of course, cast
shadows which are mirror images of one another.

<P>
The blocks are formed by gluing together small cubes to form a
single, connected object.  As an example, the figures below show,
layer by layer, the internal structure of a block which can cast
shadows of the letters "E", "G", or "B".

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2283.eps}$
 -->
<IMG
 SRC="http://livearchive.onlinejudge.org/external/22/p2283.gif
 ALT="\epsfbox{p2283.eps}">
</DIV>

<P>
Only a partial set of blocks was discovered, but the curious
scientists wouldlike to determine what combinations of shadows are
possible.  Your program, the solution to this problem, will help
them!  The program will input groups of shadow patterns, and for
each group will report whether or not a solid can be constructed
that will cast those three shadows.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains a sequence of data sets, each specifying a
dimension and three shadow patterns.  The first line of a data set
contains a positive integer <!-- MATH
 $1 \le n \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2283.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/22/p2283.gif
 ALT="$ \le$">20</SPAN> that specifies the
dimensions of the input patterns.  The remainder of the data set
consists of <SPAN CLASS="MATH">3<I>n</I></SPAN> lines, each containing a string of <SPAN CLASS="MATH"><I>n</I></SPAN> `<TT>X</TT> and `<TT>-</TT>'
characters.  Each group of <SPAN CLASS="MATH"><I>n</I></SPAN> lines represents a pattern.  Where an
`<TT>X</TT>' appears a shadow should be cast by the final solid, and where
a `<TT>-</TT>' appears, light should pass through.  For this problem, the
input patterns may be assumed to have at least one `<TT>X</TT>' along each
edge of the pattern. The input is terminated by a line containing
a single zero in place of a valid dimension.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set in the input, output the data set number and one
of the following messages:

<P>

<P>
<BR>
<PRE>
Valid set of patterns
Impossible combination
</PRE>

<P>

<P>
<BR>
For a set of patterns to be considered valid, it must be possible
to construct,by gluing unit cubes together along their faces, a
one-piece solid capable of casting the shadow of each of the input
patterns.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
XXXXX
X----
X--XX
X---X
XXXXX
XXXXX
X----
XXXXX
X----
XXXXX
XXXXX
X---X
XXXX-
X---X
XXXXX
3
X--
-X-
--X
XX-
XXX
-XX
-XX
XXX
XX-
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Data set 1: Valid set of patterns
Data set 2: Impossible combination
</PRE>

<P>

______________________________________________________
2284||||||false||||||
<P>Consider the AC circuit below. We will assume that the circuit is in steady-state.Thus, the voltage at nodes 1 and 2 are given by <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB> = <I>V</I><SUB>S</SUB>cos<IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2284img1.gif ALT="$ \omega$"><I>t</I></SPAN> and <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB> = <I>V</I><SUB>R</SUB>cos(<IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2284img1.gif ALT="$ \omega$"><I>t</I> + <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2284img1.gif ALT="$ \theta$">)</SPAN> where <SPAN CLASS="MATH"><I>V</I><SUB>S</SUB></SPAN> is the voltage of the source, <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2284img1.gif ALT="$ \omega$"></SPAN> is the frequency (in radians per second), and <SPAN CLASS="MATH"><I>t</I></SPAN> is time. <SPAN CLASS="MATH"><I>V</I><SUB>R</SUB></SPAN> is the magnitude of the voltage drop across the resistor, and <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2284img1.gif ALT="$ \theta$"></SPAN> is its phase.<P><DIV ALIGN="CENTER"><IMG SRC="http://livearchive.onlinejudge.org/external/22/2284img1.gif ALT="\epsfbox{p2284.eps}"></DIV><P>You are to write a program to determine <SPAN CLASS="MATH"><I>V</I><SUB>R</SUB></SPAN> for different values of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2284img1.gif ALT="$ \omega$"></SPAN>. You will need two laws of electricity to solve this problem. The first is Ohm's Law, which states <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB> = <I>i</I>&nbsp;<I>R</I></SPAN> where <SPAN CLASS="MATH"><I>i</I></SPAN> is the current in the circuit, oriented clockwise. The second is <SPAN CLASS="MATH"><I>i</I> = <I>C</I>&nbsp;<I>d</I> /<I>dt</I>(<I>v</I><SUB>1</SUB> - <I>v</I><SUB>2</SUB>)</SPAN> which relates the current to the voltage on either side of the capacitor. ``<SPAN CLASS="MATH"><I>d</I> /<I>dt</I></SPAN>" indicates the derivative with respect to <SPAN CLASS="MATH"><I>t</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of one or more lines. The first line contains three real numbers and a non-negative integer. The real numbers are <SPAN CLASS="MATH"><I>V</I><SUB>S</SUB></SPAN>, <SPAN CLASS="MATH"><I>R</I></SPAN>, and <SPAN CLASS="MATH"><I>C</I></SPAN>, in that order. The integer, <SPAN CLASS="MATH"><I>n</I></SPAN>, is the number of test cases. The following <SPAN CLASS="MATH"><I>n</I></SPAN> lines of the input will have one real number per line. Each of these numbers is the angular frequency, <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/22/2284img1.gif ALT="$ \omega$"></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each angular frequency in the input you are to output its corresponding <SPAN CLASS="MATH"><I>V</I><SUB>R</SUB></SPAN> on a single line. Each <SPAN CLASS="MATH"><I>V</I><SUB>R</SUB></SPAN> value output should be rounded to three digits after the decimal point. Example<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1.0 1.0 1.0 9
0.01
0.031623
0.1
0.31623
1.0
3.1623
10.0
31.623
100.0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0.010
0.032
0.100
0.302
0.707
0.953
0.995
1.000
1.000
</PRE><P>
______________________________________________________
2285||||||false||||||
<P>
For this problem you will determine the output of a logic circuit
composed of one or more inputs, zero or more dual-input AND/OR
gates, and one output. The input circuits are drawn with standard
ASCII characters. Circuit paths are represented using horizontal
and vertical lines, and junctions. Horizontal lines are
represented with dash characters (ASCII code 45 decimal), vertical
lines with vertical bar characters (ASCII code 124 decimal), and
junctions with plus characters (ASCII code 43 decimal). Inputs are
represented using the capital letters A through Z, and the output
is represented by a question mark. AND and OR gates are
represented as shown in the leftmost entries in the figure below,
and their orientation will always be exactly as shown. The
location of the gate inputs and output is shown by the middle
figure below. Finally, gate inputs or its output can be inverted,
represented by a lowercase "oh" character (ASCII code 111 decimal)
at the input or output location. The figure on the right below
shows a simple but complete logic circuit.

<P>
<PRE>
        :\          :\            -:\               -o:\               A-o:\
        : )         : &gt;            : )-               : )o-               : )o-?
        :/          :/            -:/               --:/               B--:/

     AND gate     OR gate    Gate with inputs   An inverted top    Two logic inputs
                                                  input and an      and the output
                                                 inverted output
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Circuits in the input will obey the following guidelines:

<P>

<OL>
<LI>The maximum size of the circuit picture is 100 by 100
characters.

<P>
</LI>
<LI>A path always travels in a straight line unless altered by a
junction.At a junction, the path can and will make a ninety degree
turn. Two junctions will not be horizontally or vertically
adjacent.

<P>
</LI>
<LI>No paths will be "broken". That is, every path character is
guaranteed to be adjacent on both sides to either another path
character of the same type, a junction, a gate input, a gate
output, a logic input, or the logic output.

<P>
</LI>
<LI>Circuit paths do not cross or intersect other paths.

<P>
</LI>
<LI>Gate inputs always approach horizontally from the left as shown
above. Gate outputs always leave horizontally to the right as
shown above.

<P>
</LI>
<LI>Inversions may only appear immediately adjacent to a gate input
or output, and will always be preceded (in the case of an input)
or followed (in the case of an output) by at least one dash as
shown above.
</LI>
</OL>

<P>
The end of a logic diagram in the input is indicated by line
containing only a single asterisk in the first column. Following
this are several lines which indicate the state of the inputs in
the logic diagram.  Each of these lines is a string of twenty-six
`<TT>0</TT>' (zero) or `<TT>1</TT>' characters, with the first position representing
the state of input A, the second position representing the state
of input B, etc.  Note that input values which are not actually
used in the circuit may simply be ignored. The list of input
states is terminated by a line containing only a single asterisk
character in the first column.

<P>
Following the asterisk which terminates the list of input states
is another circuit diagram followed by a list of input states,
which is then followed by another circuit diagram and list of
input states, and so on until the end of the file.  The file will
always contain at least one circuit and one set of inputs for that
circuit.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The program is to report the value of the output (`<TT>0</TT>' or `<TT>1</TT>') of each
logic circuit, one value per line, for each set of input values in
the list which follows the circuit.  The list of outputs for each
circuit should be separated by a single blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
A---:\
    : )---?
B---:/
*
00000000000000000000000000
10000000000000000000000000
01000000000000000000000000
11000000000000000000000000
*
A---+
    |
    +---:\
        : &gt;o---:\
    +---:/     : )---?
    |      C--o:/
B---+
*
00000000000000000000000000
11100000000000000000000000
*
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0
0
0
1

1
0
</PRE>

<P>

______________________________________________________
2286||||||false||||||
<P>Consider a small microprocessor that has the following properties:<P><UL><LI>Each word is four bits. </LI><LI>Addresses are two words. The high word always comes first. That is, the high word of a two-word address will always occupy the lower word of memory. </LI><LI>Memory is 256 words. </LI><LI>There are two accumulators, A and B, each storing one word. </LI><LI>There are nine instruction codes. Each instruction requires at least one word to store the code that specifies the instruction. Four instructions have arguments and require an additional two words. </LI></UL><P>Each 4 bit number can have the values from 0 to 15, inclusive, in base 10. We will write these using hexadecimal in the usual way, i.e. A means 10, B means 11, etc.<P>These are the nine instructions:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=JUSTIFY WIDTH="5in"><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Code</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Words</B></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360"><B>Description</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">LD: Load accumulator A with the contents of memory at the specified argument.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">ST: Write the contents of accumulator A to the memory location specified by the argument.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">SWP: Swap the contents of accumulators A and B.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">ADD: Add the contents of accumulators A and B. The low word of the sum is stored in A, and the high word in B.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">INC: Increment accumulator A. Overflow is allowed; that is, incrementing F yields 0.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">DEC: Decrement accumulator A. Underflow is allowed; that is, decrementing 0 yields F.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">BZ: If accumulator A is zero, the next command to be executed is at the location specified by the argument. If A is not zero, the argument is ignored and nothing happens.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">BR: The next command to be executed is at the location specified by the argument.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">STP: Stop execution of the program.</TD></TR></TBODY></TABLE></DIV><P><P><BR>The microprocessor always begins by executing the command at location 00. It executes the commands in sequence until it reaches the Stop command.<P>The examples below show partial programs and describe their affect.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=JUSTIFY WIDTH="5.5in"><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Program</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="396">Description</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>01A8</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="396">Load accumulator A with the contents of memory location 1A (26 in decimal) and stop.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>01A512F8</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="396">Load accumulator A with the contents of memory location 1A (26 in decimal), decrement it, store the result to memory location 2F, then stop.</TD></TR></TBODY></TABLE></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of several lines of exactly 256 hex characters. Each line is the contents of memory, beginning with address 00 and ending with address FF. The end of the input is indicated by a memory state that has a stop instruction(an `<TT>8</TT>') at address 00. The input programs will never ``fall of the end of memory", that is, you will never execute an instruction that is located between addresses F0 and FF, inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each memory state, you should simulate execution beginning with address 00.When the stop instruction is reached, you will dump the contents of memory to the output as a single string of 256 hex characters followed by a newline character.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0102011311321128FF00000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000
040563B14004220FF31FF041320FE31FE00C2042314200032041314170080000F030000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000001
80000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0102011311321128FF1E000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000
040563B14004220FF31FF041320FE31FE00C204231420003204131417008000011F0000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000E1
</PRE><P><P><P><BR><B>Note:</B> The first sample program reads two one-word numbers from 10 and 11, and stores the two-word sum at 12 and 13. The second program computes <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN>, where <SPAN CLASS="MATH"><I>n</I></SPAN> is stored at 40, and stores the two-word result at FE and FF.<P>
______________________________________________________
2287||||||false||||||
<P>A cyclic number is an integer <SPAN CLASS="MATH"><I>n</I></SPAN> digits in length which, when multiplied by any integer from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>, yields a ``cycle" of the digits of the original number. That is, if you consider the number after the last digit to ``wrap around" back to the first digit, the sequence of digits in both numbers will be the same, though they may start at different positions.<P>For example, the number 142857 is cyclic, as illustrated by the following table:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>142857</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&#215;</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>142857</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>142857</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&#215;</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>285714</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>142857</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&#215;</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>428571</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>142857</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&#215;</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>571428</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>142857</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&#215;</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>714285</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>142857</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&#215;</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>857142</TD></TR></TABLE></DIV><P><P><BR>Write a program which will determine whether or not numbers are cyclic.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file is a list of integers from 2 to 60 digits in length. (Note that preceding zeros should not be removed, they are considered part of the number and count in determining <SPAN CLASS="MATH"><I>n</I></SPAN>. Thus, `<TT>01</TT>' is a two-digit number, distinct from `<TT>1</TT>' which is a one-digit number.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input integer, write a line in the output indicating whether or not it is cyclic.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
142857
142856
142858
01
0588235294117647
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
142857 is cyclic
142856 is not cyclic
142858 is not cyclic
01 is not cyclic
0588235294117647 is cyclic
</PRE><P>
______________________________________________________
2288||||||false||||||
<P>Given a two-dimensional array of positive and negative integers, a <EM>sub-rectangle</EM> is any contiguous sub-array of size 1 <SPAN CLASS="MATH">&#215;</SPAN> 1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the <EM>maximal sub-rectangle</EM>.<P>As an example, the maximal sub-rectangle of the array:<PRE>
 0 -2 -7  0
 9  2 -6  2
-4  1 -4  1
-1  8  0 -2
</PRE>is in the lower left corner:<PRE>
 9  2
-4  1
-1  8
</PRE>and has a sum of 15.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of an <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> array of integers. The input begins with a single positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> on a line by itself, indicating the size of the square two-dimensional array. This is followed by <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> integers separated by whitespace (spaces and newlines). These are the <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> integers of the array, presented in row-major order. That is, all numbers in the first row, left to right, then all numbers in the second row, left to right, etc. <SPAN CLASS="MATH"><I>N</I></SPAN> may be as large as 100. The numbers in the array will be in the range [-127,127].<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output the sum of the maximal sub-rectangle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
0 -2 -7 0 9 2 -6 2
-4 1 -4  1 -1

8  0 -2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
15
</PRE><P>
______________________________________________________
2289||||||false||||||
<P>The game of Set is played with a deck of eighty-one cards, each having the following four characteristics:<P><UL><LI>Symbol: diamonds, ovals, or squiggles </LI><LI>Count: 1, 2, or 3 symbols </LI><LI>Color: red, green, or purple </LI><LI>Shading: outlined, filled, or striped </LI></UL><P>The cards are shuffled and a tableau of twelve cards is laid out. Players then attempt to be the first to identify ``sets" which exist in the tableau. Sets are removed as they are identified and new cards are dealt in their place. Play continues in this manner until all cards have been used. The winner is the player with the most sets.<P>A <EM>set</EM> is a collection of three cards in which each characteristic is either the same on all three cards or different on all three cards. For example, the cards shown below form a set.<P><DIV ALIGN="CENTER"><IMG SRC="http://livearchive.onlinejudge.org/external/22/p2289a.gif ALT="\epsfbox{p2289a.eps}"></DIV><P>To see how the cards above form a set, take each characteristic in turn. First, each card has <EM>different symbol</EM>: the first card has squiggles, the second diamonds, and the third ovals. Second, each card has the same count of symbols, three. Third each card has a <EM>different color</EM>, and finally, each card has a <EM>different shading</EM>. Thus, each characteristic is either the same on all three cards or different on all three cards, satisfying the requirement for a set.<P>Consider the following example of three cards which do not form a set.<P><DIV ALIGN="CENTER"><IMG SRC="http://livearchive.onlinejudge.org/external/22/p2289a.gif ALT="\epsfbox{p2289b.eps}"></DIV><P>Again, take each characteristic in turn. Each card has a different symbol,each card has a different count of symbols, and each card is the same color. So far this satisfies the requirements for a set. When the shading characteristic is considered, however, two cards are filled and one card is striped. Thus, the shading on all three cards is neither all the same nor all different, and so these cards do not form a set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input for this program consists of several tableaus of cards. The tableaus are listed in the input file one card per line, with a single blank line between tableaus. The end of the input is marked by the end of the file. Each card in a tableau is specified by four consecutive characters on the input line. The first identifies the type of symbol on the card, and will be either a `<TT>D</TT>', `<TT>O</TT>', or `<TT>S</TT>', for Diamond, Oval, or Squiggle, respectively. The second character will be the digit `<TT>1</TT>', `<TT>2</TT>', or `<TT>3</TT>', identifying the number of symbols on the card. The third identifes the color and will be an `<TT>R</TT>', `<TT>G</TT>', or `<TT>P</TT>' for Red, Green, or Purple, respectively. The final character identifes the shading and will be an `<TT>O</TT>', `<TT>F</TT>', or `<TT>S</TT>' for Outlined, Filled, or Striped. All characters will be in uppercase.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for the program is, for each tableau, a list of all possible sets which could be formed using cards in the tableau. The order in which the sets are output is not important, but your output should adhere to the format illustrated by the example below. In the event that no sets exist in a tableau, report `<TT>*** None Found ***"</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
S1PS
D3PO
S2GF
O2GS
O2GF
O3PO
S2RF
S3GS
D2GS
O1GS
O1GF
S2PS

O2GF
O1PF
D2PO
D3RO
S2PO
O1GF
O1GS
D2GO
S3PF
S2GF
D2GS
S1RS
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
CARDS:  S1PS D3PO S2GF O2GS O2GF O3PO S2RF S3GS D2GS O1GS O1GF S2PS
SETS:   1.  D3PO S2RF O1GS
        2.  S3GS D2GS O1GS

CARDS:  O2GF O1PF D2PO D3RO S2PO O1GF O1GS D2GO S3PF S2GF D2GS S1RS
SETS:   *** None Found ***
</PRE><P>
______________________________________________________
2290||||||false||||||
<P>In a wireless network with multiple transmitters sending on the same frequencies, it is often a requirement that signals don't overlap, or at least that they don't conflict. One way of accomplishing this is to restrict a transmitter's coverage area. This problem uses a shielded transmitter that only broadcasts in a semicircle.</P><P>A transmitter <I>T</I> is located somewhere on a 1,000 square meter grid. It broadcasts in a semicircular area of radius <I>r</I>. The transmitter may be rotated any amount, but not moved. Given <I>N</I> points anywhere on the grid, compute the maximum number of points that can be simultaneously reached by the transmitter's signal. Figure 1 shows the same data points with two different transmitter rotations.</P><CENTER><img border="0" src="http://livearchive.onlinejudge.org/external/22/p2290a.gif width="464" height="175"></CENTER><P>All input coordinates are integers (0-1000). The radius is a positive real number greater than 0. Points on the boundary of a semicircle are considered within that semicircle. There are 1-150 unique points to examine per transmitter. No points are at the same location as the transmitter.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of information for one or more independent transmitter problems. Each problem begins with one line containing the (x,y) coordinates of the transmitter followed by the broadcast radius, <I>r</I>. The next line contains the number of points <I>N</I> on the grid, followed by <I>N</I> sets of (x,y) coordinates, one set per line. The end of the input is signalled by a line with a negative radius; the (x,y) values will be present but indeterminate. Figures 1 and 2 represent the data in the first two example data sets below, though they are on different scales. Figures 1a and 2 show transmitter rotations that result in maximal coverage.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each transmitter, the output contains a single line with the maximum number of points that can be contained in some semicircle.</P><!-- <br><br><br><BR><BR><BR><BR><br><br><br><BR><BR><BR><BR><br><br> --><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
25 25 3.5
7
25 28
23 27
27 27
24 23
26 23
24 29
26 29
350 200 2.0
5
350 202
350 199
350 198
348 200
352 200
995 995 10.0
4
1000 1000
999 998
990 992
1000 999
100 100 -2.5
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
3
4
4
</PRE>
______________________________________________________
2291||||||false||||||
<P>Weird Wally's Wireless Widgets, Inc. manufactures an eclectic assortment of small, wireless, network capable devices, ranging from dog collars, to pencils, to fishing bobbers. All these devices have very small memories. Encryption algorithms like Rijndael, the candidate for the Advanced Encryption Standard (AES) are demonstrably secure but they don't fit in such a tiny memory. In order to provide some security for transmissions to and from the devices, WWWW uses the following algorithm, which you are to implement.</P><P>Encrypting a message requires three integer keys, <I>k<SUB>1</SUB></I>, <I>k<SUB>2</SUB></I>, and <I>k<SUB>3</SUB></I>. The letters [a-i] form one group, [j-r] a second group, and everything else ([s-z] and underscore) the third group. Within each group the letters are rotated <I>left</I> by <I>k<SUB>i</SUB></I> positions in the message. Each group is rotated independently of the other two. Decrypting the message means doing a <I>right</I> rotation by <I>k<SUB>i</SUB></I> positions within each group.</P><P>Consider the message <TT>the_quick_brown_fox</TT> encrypted with <I>k<SUB>i</SUB></I> values of 2, 3 and 1. The encrypted string is <TT>_icuo_bfnwhoq_kxert</TT>. The figure below shows the decrypting right rotations for one character in each of the three character groups.</P><CENTER><img border="0" src="http://livearchive.onlinejudge.org/external/22/p2291a.jpg></CENTER><P>Looking at all the letters in the group [a-i] we see {<TT>i</TT>,<TT>c</TT>,<TT>b</TT>,<TT>f</TT>,<TT>h</TT>,<TT>e</TT>} appear at positions {2,3,7,8,11,17} within the encrypted message. After a right rotation of <I>k<SUB>1</SUB></I>=2, these positions contain the letters {<TT>h</TT>,<TT>e</TT>,<TT>i</TT>,<TT>c</TT>,<TT>b</TT>,<TT>f</TT>}. The table below shows the intermediate strings that come from doing all the rotations in the first group, then all rotations in the second group, then all the rotations in the third group. Rotating letters in one group will not change any letters in any of the other groups.</P><TABLE width="100%"><TBODY><TR><TH></TH><TH>[a-i], <I>k<SUB>1</SUB></I>= 2</TH><TH>[j-r], <I>k<SUB>2</SUB></I>= 3</TH><TH>[s-z] and _, <I>k<SUB>3</SUB></I>= 1</TH></TR><TR><TD>Encrypted:</TD><TD><TT>_icuo_bfnwhoq_kxert</TT></TD><TD><TT>_heuo_icnwboq_kxfrt</TT></TD><TD><TT>_heuq_ickwbro_nxfot</TT></TD></TR><TR><TD>Decrypted:</TD><TD><TT>_heuo_icnwboq_kxfrt</TT></TD><TD><TT>_heuq_ickwbro_nxfot</TT></TD><TD><TT>the_quick_brown_fox</TT></TD></TR><TR><TD>Changes:</TD><TD><PRE><TT> ^^   ^^  ^     ^  </TT></PRE></TD><TD><PRE><TT>    ^   ^  ^^ ^  ^  </TT></PRE></TD><TD><PRE><TT>^  ^ ^   ^   ^ ^  ^  </TT></PRE></TD></TR></TBODY></TABLE><P>All input strings contain only lowercase letters and underscores(_). Each string will be at most 80 characters long. The <I>k<SUB>i</SUB></I> are all positive integers in the range 1-100.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of information for one or more encrypted messages. Each problem begins with one line containing <I>k<SUB>1</SUB></I>, <I>k<SUB>2</SUB></I>, and <I>k<SUB>3</SUB></I> followed by a line containing the encrypted message. The end of the input is signalled by a line with all key values of 0.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each encrypted message, the output is a single line containing the decrypted string.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2 3 1
_icuo_bfnwhoq_kxert
1 1 1
bcalmkyzx
3 7 4
wcb_mxfep_dorul_eov_qtkrhe_ozany_dgtoh_u_eji
2 4 3
cjvdksaltbmu
0 0 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>the_quick_brown_fox
abcklmxyz
the_quick_brown_fox_jumped_over_the_lazy_dog
ajsbktcludmv
</PRE>
______________________________________________________
2292||||||false||||||
<P>The Dotty Software Company makes software that is displayed on inexpensive text based terminals.&nbsp; One application for this system has a main window that can be subdivided into further subwindows.&nbsp; Your task is to take a description of the screen layout after a sequence of window splits and draw the minimum sized window grid that is consistent with the description.</P><P>In this problem we will concentrate on the boundaries of windows, so all the characters inside of windows will be left blank.&nbsp; Each window that is not further subdivided has a label.&nbsp; Each label is a distinct uppercase letter.&nbsp; For a text terminal the boundaries of windows must be drawn with characters, chosen as follows:&nbsp; A capital letter label is placed in the upper left-hand corner of each undivided window.&nbsp; Asterisks,'<TT>*</TT>', appear in corners of windows where there is not a label. Dashes, '<TT>-</TT>', appear on upper and lower boundaries where there are not corners. Vertical bars, '<TT>|</TT>', appear on side boundaries where there are not corners.</P><P>For example, the sequence of splits below would generate Window 1:&nbsp; Initially there could be an application window labeled <TT>M</TT>, that is split next into left and right subwindows, adding label <TT>R</TT>, and the left subwindow is split into top and bottom subwindows, adding the label <TT>C</TT>.</P><img border="0" src="http://livearchive.onlinejudge.org/external/22/p2292a.gif width="559" height="86"><P>For each pattern of splits there is a binary tree of characters that can describe it.&nbsp; The window splitting and tree structures are described together, building up from the simplest cases.</P><OL><LI>A window may be an undivided rectangle.&nbsp; Such a window has a capital letter as label.&nbsp; The tree for the window contains just the label. <LI>A window may either be split into left and right subwindows or into top and bottom subwindows, and the corresponding trees have as root the boundary character for the split: a vertical line '<TT>|</TT>' or a horizontal dash '<TT>-</TT>' respectively.&nbsp; The root has left and right subtrees corresponding to the top and bottom or left and right subwindows respectively. </LI></OL>Tree 1, above, and Trees 2-4, below, would be consistent with Windows 1-4.&nbsp; Note that Tree 4 contains Trees 2 and 3.<P><img border="0" src="http://livearchive.onlinejudge.org/external/22/p2292a.gif width="482" height="211"><P><img border="0" src="http://livearchive.onlinejudge.org/external/22/p2292a.gif width="465" height="195"><P>The trees may be more succinctly expressed via a preorder traversal:<OL><LI>The preorder traversal of a tree with just one node (containing a letter) is that letter. <LI>The preorder traversal of a tree with a left and a right subtree is the character from the root of the tree ('<TT>-</TT>' or '<TT>|</TT>') followed by the preorder traversal of the left subtree, and then the preorder traversal of the right subtree. </LI></OL>The preorder traversals for Trees 1 through 4 are<BR><PRE>   |-MCR    -|-ABC-D|E-FG   -P-|Q|RST    |-|-ABC-D|E-FG-P-|Q|RST</PRE><P>Each undivided window must have space for at least one character inside.&nbsp; Hence each tree of splits will be associated with a minimum window size.&nbsp; Windows 1-4 are minimum sized windows for Trees 1-4.&nbsp; Each window illustrates the fact that even in a minimum sized window, not all undivided windows contain only one character.</P><P>Consider Tree 4 and Window 4.&nbsp; The main window is split into a left window with Tree 2 and right window with Tree 3. The left window is like Window 2, but the right window is not just like Window 3.&nbsp; The heights of left and right subwindows must match, so the right window must be stretched.</P><P>The stretching rule depends on a definition of the size of windows.&nbsp; For dimension calculations it is easiest to imagine that a window contains its interior and a half character wide boundary on all sides, so the total dimensions of a window are one more than the dimensions of the interior.&nbsp;&nbsp; Hence the minimum dimensions of a window are 2 by 2, since a window must contain one character inside, and we add one for the boundary.&nbsp; This definition also means that the sum of the widths of left and right subwindows is the width of their enclosing window.&nbsp; The sum of the heights of top and bottom subwindows is the height of their enclosing window.</P><P>The right window in Window 4 must be stretched to match the height 10 of the left window.&nbsp; The right window is split into a top with tree <TT>P</TT> having minimum height 2 and a bottom with tree <TT>-|Q|RST</TT> having minimum height 4.&nbsp; The rule for the dimensions in the stretched window is that the heights of the subwindows expand in proportion to their minimum heights, if possible.&nbsp; Some symbols may help here:&nbsp; Let <I>D</I> = 10 be the height of the combined stretched window.&nbsp; We want to determine <I>D<SUB>1</SUB></I> and <I>D<SUB>2</SUB></I>, the stretched heights of the top and bottom subwindow.&nbsp; Call the corresponding minimum dimensions <I>d</I> = 6, <I>d<SUB>1</SUB></I> = 2, and <I>d<SUB>2</SUB></I> = 4.&nbsp; If the window were expanded from a total height <I>d</I> to <I>D</I> in proportion, we would have <I>D<SUB>1</SUB></I> = <I>d<SUB>1</SUB></I>*(<I>D</I>/<I>d</I>) = 2*(10/6) = 3.333...and <I>D<SUB>2</SUB></I> = <I>d<SUB>2</SUB></I>*(<I>D</I>/<I>d</I>) = 6.666....&nbsp;&nbsp; Since the results are not integers we increase <I>D<SUB>1</SUB></I> to 4 and decrease <I>D<SUB>2</SUB></I> to 6.<P>There is a similar calculation for the bottom window with tree <TT>-|Q|RST</TT>.&nbsp; It is further subdivided into a top with tree <TT>|Q|RS</TT> and a bottom with tree <TT>T</TT>, each having minimum height 2 = <I>d<SUB>1</SUB></I> = <I>d<SUB>2</SUB></I>.&nbsp; The heights need to add up to <I>D</I> = 6, so they are increased proportionally to <I>D<SUB>1</SUB></I> = <I>D<SUB>2</SUB></I> = 2*(6/4) = 3 (exact integers).<P>The final dimensions of an enclosing window are always determined before the final dimensions of its subwindows.&nbsp; In this example only heights needed to be apportioned.&nbsp; If all horizontal and vertical splits were interchanged in this example, producing a tree&nbsp; <TT>-|-|ABC|D-E|FG|P|-Q-RST</TT>, then widths would be apportioned correspondingly, as shown in the third part of the sample output below.&nbsp; If the proportion calculations do not work out to integers, it is always the top or left subwindow whose dimension is increased to the next integer.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains one integer, which is the total number of preorder traversals describing window structures.&nbsp; This line is followed by one line for each preorder traversal.&nbsp; Each preorder traversal will contain appropriate dividers '<TT>|</TT>' and '<TT>-</TT>' and from 1 to 26 uppercase letters.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each preorder traversal, print the number of the preorder traversal on one line followed by the minimum sized window grid that the traversal could represent.&nbsp; Contrary to the general contest output conventions, there may be more than one consecutive blank in this output, but the other general rules for contest output are followed.&nbsp; The total number of rows or columns in output grids will be no more than 53.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
3
|-MCR
|-|-ABC-D|E-FG-P-|Q|RST
-|-|ABC|D-E|FG|P|-Q-RST
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1
M-R-*
| | |
C-* |
| | |
*-*-*
2
A-C-P-----*
| | |     |
B-* |     |
| | |     |
D-*-Q-R-S-*
|   | | | |
E-F-* | | |
| | T-*-*-*
| G-*     |
| | |     |
*-*-*-----*
3
A-B-D-E---*
| | | |   |
C-*-* F-G-*
|   | | | |
P---Q-*T*-*
|   |  |  |
|   R--*  |
|   |  |  |
|   S--*  |
|   |  |  |
*---*--*--*
</PRE>
______________________________________________________
2293||||||false||||||
<P>Most nonfiction and reference books have an <EM>index</EM> to help readers find references to specific terms or concepts in the text. Here is a sample index.</P><BLOCKQUOTE><PRE>larch, 4, 237, 238, 414
+ Monty Python and, 64, 65, 66
+ planting of, 17
Lenny Kravitz, 50
+ going his way, 53
lumbago, 107
mango
+ Chris Kattan, 380
+ storage of, 87, 90
+ use in Nethack, 500, 501
+ Vitamin C content, 192
</PRE></BLOCKQUOTE><P>Each index entry contains a <B><I>primary entry</I></B> followed by zero or more <B><I>secondary entries</I></B>, which begin with a '<TT>+</TT>'. Entries will normally be followed by a list of page references, but a primary entry might not be if at least one secondary entry is present (as is the case with <I>mango</I>, above). Primary entries are sorted, and secondary entries following a primary entry are also sorted. Sorting is case-insensitive. Page references for an entry are in ascending order and do not include duplicates. (A duplicate could occur if there are two or more identical entries on the same page.)</P><P>Your task is to read a document that has index information embedded within it and produce the index. Documents consist of one or more lines of ASCII text. The page number starts at 1, and the character '<TT>&amp;</TT>' indicates the start of a new page (which adds 1 to the current page number). Index entries are indicated by a <B><I>marker</I></B>, which in its most elaborate form has the following syntax:</P><BLOCKQUOTE>{<I>text</I><TT>%</TT><I>primary</I><TT>$</TT><I>secondary</I>}</BLOCKQUOTE><P>Here <I>text</I> is the text to be indexed, <I>primary</I> is an alternative primary entry, and <I>secondary</I> is a secondary entry. Both '<TT>%</TT><I>primary</I>' and '<TT>$</TT><I>secondary</I>' are optional, but if both are present they must appear in the order given. If <I>primary</I> is present then it is used as the primary entry, and if not then <I>text</I> is used as the primary entry. If <I>secondary</I> is present then the marker adds a page reference for that secondary entry; otherwise it adds a page reference for the primary entry. A single marker cannot add a page reference for both a primary and secondary entry. Here are examples of each of the four possible types of marker, which correspond to four of the entries in the sample index above.</P><BLOCKQUOTE><PRE>... his {lumbago} was acting up, so ...
... {Lenny%Lenny Kravitz} lit up the crowd with his version of ...
... Monty Python often used the {larch$Monty Python and} in ...
... when storing {mangos%mango$storage of}, be sure to ...
</PRE></BLOCKQUOTE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more documents, followed by a line containing only '<TT>**</TT>' that signals the end of the input. Documents are implictly numbered starting with 1. Each document consists of one or more lines of text followed by a line containing only '<TT>*</TT>'. Each line of text will be at most 79 characters long, not counting end-of-line characters.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For document <I>i</I>, output the line '<TT>DOCUMENT</TT> <I>i</I>' followed by the sorted index using the exact output format shown in the examples.</P><P>Be sure to read <I>Notes to Teams</I>, which has general formatting guidelines that pertain to all problem input files, including this one. Also note:</P><UL><LI>A document will contain at most 100 markers, with at most 20 primary entries. <LI>A primary entry will have at most 5 secondary entries. <LI>An entry will have at most 10 unique page references (not including duplicates). <LI>The character '<TT>&amp;</TT>' will not appear anywhere within a marker, and will appear at most 500 times within a document. <LI>The character '<TT>*</TT>' is used only to signal the end of a document or the end of the input. <LI>The characters '<TT>{</TT>', '<TT>}</TT>', '<TT>%</TT>', and '<TT>$</TT>' will only be used to define markers, and will not appear in any text or entries. <LI>A marker may span one or more lines. Every end-of-line within a marker must be converted to a single space. <LI>A space within a marker (including a converted end-of-line) is normally included in the text/entry, just like any other character. However, any space that immediately follows '<TT>{</TT>', immediately precedes '<TT>}</TT>', or is immediately adjacent to '<TT>%</TT>' or '<TT>$</TT>' must be ignored. <LI>The total length of a marker, measured from the opening '<TT>{</TT>' to the closing '<TT>}</TT>', and in which all embedded end-of-lines are converted to spaces, will be at most 79 characters. </LI></UL><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
Call me Ishmael.
*
One {fish $unary}, two {fish$ binary},&red {fish $ scarlet}, blue {fish$
azure}. & By { Dr. Seuss }.
*
This is a {simple } & & { document} that &{
simply %simple
$adverb
} & {illustrates %vision} &&&&& one {simple-minded% simple} {Judge}'s {vision} 
for what a {document } might { look % vision} like.
*
**
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
DOCUMENT 1
DOCUMENT 2
Dr. Seuss, 3
fish
+ azure, 2
+ binary, 1
+ scarlet, 2
+ unary, 1
DOCUMENT 3
document, 3, 10
Judge, 10
simple, 1, 10
+ adverb, 4
vision, 5, 10
</PRE>
______________________________________________________
2294||||||false||||||
<P>How far can you make a stack of cards overhang a table? If you have one card, 
you can create a maximum overhang of half a card length. (We're assuming that 
the cards must be perpendicular to the table.) With two cards you can make the 
top card overhang the bottom one by half a card length, and the bottom one 
overhang the table by a third of a card length, for a total maximum overhang of 
1/2 <TT>+</TT> 1/3 <TT>=</TT> 5/6 card lengths. In general you can make <I>n</I> 
cards overhang by 1/2 <TT>+</TT> 1/3 <TT>+</TT> 1/4 <TT>+</TT> ... <TT>+</TT> 
1/(<I>n</I> <TT>+</TT> 1) card lengths, where the top card overhangs the second 
by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 
1/4, etc., and the bottom card overhangs the table by 1/(<I>n</I> <TT>+</TT> 1). 
This is illustrated in the figure below.</P>
<CENTER><img border="0" src="http://livearchive.onlinejudge.org/external/22/p2294a.jpg width="424" height="115"></CENTER>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>The input consists of one or more test cases, followed by a line containing 
the number 0.00 that signals the end of the input. Each test case is a single 
line containing a positive floating-point number <I>c</I> whose value is at 
least 0.01 and at most 5.20; <I>c</I> will contain exactly three digits.</P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>For each test case, output the minimum number of cards necessary to achieve 
an overhang of at least <I>c</I> card lengths. Use the exact output format shown 
in the examples.</P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
1.00
3.71
0.04
5.19
0.00
</PRE>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
3 card(s)
61 card(s)
1 card(s)
273 card(s)
</PRE>

______________________________________________________
2295||||||false||||||
<P>The DoubleVision company designs inks and fonts that can be easily read by both humans and machines. They design their fonts on a rectangular grid. Shown below is a very simple 5x3 design for the first five digits.</P><BLOCKQUOTE><PRE>.o. .o. oo. oo. o.o
o.o .o. ..o ..o o.o
o.o .o. .o. oo. ooo
o.o .o. o.. ..o ..o
.o. .o. ooo oo. ..o
</PRE></BLOCKQUOTE><P>The ink appears to be normal black ink, but just underneath the surface DoubleVision adds a special polymer that can be detected by an infrared scanner. A human sees the black ink but not the polymer, and a machine sees the polymer but not the black ink. The only problem is that the polymer is much more expensive than the ink, so DoubleVision wants to use as little of it as possible. They have discovered that with many fonts, each symbol can be uniquely identified by at most two pixels. By only adding the polymer to one or two pixels per symbol, they drastically lower costs while still ensuring 100% accuracy in their scanners. The font shown above has this property; pixels that uniquely identify each letter are highlighted with '<TT>#</TT>'. (There are other choices that would work as well.)</P><BLOCKQUOTE><PRE>.#. .o. #o. oo. o.#
#.o .#. ..o ..o o.o
o.o .o. .o. #o. ooo
o.o .o. #.. ..o ..o
.o. .o. ooo #o. ..o
</PRE></BLOCKQUOTE><P>Your job is to write a program to determine if a given font has this property, and if so highlight the pixels.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more test cases, followed by a line containing '<TT>0</TT> <TT>0</TT> <TT>0</TT>' (three zeros) that signals the end of the input. Each test case begins with a line containing three positive integers <I>n</I>, <I>r</I>, and <I>c</I>, separated by a space: <I>n</I> is the number of symbols in the font, <I>r</I> is the number of rows in each grid, and <I>c</I> is the number of columns in each grid. The next <I>r</I> lines contain the image of each symbol, using the exact format shown in the examples: a dot '<TT>.</TT>' represents an empty part of the grid, a lowercase '<TT>o</TT>' represents a pixel, and adjacent grids are separated by a space. The total width of each line will be at most 79 characters (not counting end-of-line characters), and <I>r</I> will be at most 10. The test cases are implicitly numbered starting with 1.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For test case <I>i</I>, first output a line that says '<TT>Test</TT> <I>i</I>'. Then determine if each symbol can be uniquely identified with one or two pixels. If not, output a line with the word '<TT>impossible</TT>'. Otherwise, output the font in the same format except that the identifying pixels for each symbol are replaced with '<TT>#</TT>'.<P>In general there may be several different pixels or pixel pairs that uniquely identify a symbol. To ensure that the output is unique, we add the following definition and rules. When comparing two pixels, the <EM>topmost-leftmost</EM> pixel is the one closest to the top of the grid. If both pixels are on the same row, then the topmost-leftmost is the one closest to the left of the grid.</P><P>If one pixel will work, highlight the topmost-leftmost pixel that works. Never highlight a two-pixel solution if a one-pixel solution is possible. If two pixels are needed, highlight the pair with the topmost-leftmost pixel. If two or more pairs have the same topmost-leftmost pixel, highlight the one with the topmost-leftmost <EM>other</EM> pixel.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>3 2 2
oo oo .o
o. .o o.
3 2 2
oo oo .o
o. .o oo
5 5 3
.o. .o. oo. oo. o.o
o.o .o. ..o ..o o.o
o.o .o. .o. oo. ooo
o.o .o. o.. ..o ..o
.o. .o. ooo oo. ..o
1 2 4
.o..
...o
0 0 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>Test 1
impossible
Test 2
#o #o .o
#. .# ##
Test 3
.#. .o. #o. oo. o.#
#.o .#. ..o ..o o.o
o.o .o. .o. #o. ooo
o.o .o. #.. ..o ..o
.o. .o. ooo #o. ..o
Test 4
.#..
...o
</PRE>
______________________________________________________
2296||||||false||||||
<P>Technicians in a pathology lab analyze digitized images of slides. Objects on a slide are selected for analysis by a mouse click on the object. The perimeter of the boundary of an object is one useful measure. Your task is to determine this perimeter for selected objects.</P><P>The digitized slides will be represented by a rectangular grid of periods, '<TT>.</TT>', indicating empty space, and the capital letter '<TT>X</TT>', indicating part of an object.&nbsp; Simple examples are</P><P><B><TT>XX&nbsp;&nbsp; Grid 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .XXX&nbsp;&nbsp; Grid 2</TT></B><BR><B><TT>XX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .XXX</TT></B><BR><B><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .XXX</TT></B><BR><B><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...X</TT></B><BR><B><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ..X.</TT></B><BR><B><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X...</TT></B></P><P>An <TT>X</TT> in a grid square indicates that the entire grid square, including its boundaries, lies in some object.&nbsp; The <TT>X</TT> in the center of the grid below is <I>adjacent</I> to the <TT>X</TT> in any of the 8 positions around it. The grid squares for any two adjacent <TT>X</TT>'s overlap on an edge or corner, so they are connected.</P><P><TT>XXX</TT><BR><TT>X<B>X</B>X&nbsp;&nbsp;&nbsp;</TT> Central <TT>X</TT> and adjacent <TT>X</TT>'s<BR><TT>XXX</TT></P><P>An object consists of the grid squares of all <TT>X</TT>'s that can be linked to one another through a sequence of adjacent <TT>X</TT>'s.&nbsp; In Grid 1, the whole grid is filled by one object.&nbsp; In Grid 2 there are two objects.&nbsp; One object contains only the lower left grid square.&nbsp; The remaining <TT>X</TT>'s belong to the other object.</P><P>The technician will always click on an <TT>X</TT>, selecting the object containing that <TT>X</TT>.&nbsp; The coordinates of the click are recorded.&nbsp; Rows and columns are numbered starting from 1 in the upper left hand corner.&nbsp; The technician could select the object in Grid 1 by clicking on row 2 and column 2.&nbsp; The larger object in Grid 2 could be selected by clicking on row 2, column 3. The click could not be on row 4, column 3.</P><P><img border="0" src="http://livearchive.onlinejudge.org/external/22/p2296a.gif align="left" width="50" height="124"> One useful statistic is the perimeter of the object.&nbsp; Assume each <TT>X</TT> corresponds to a square one unit on each side.&nbsp; Hence the object in Grid 1 has perimeter 8 (2 on each of four sides).&nbsp; The perimeter for the larger object in Grid 2 is illustrated in the figure at the left.&nbsp; The length is 18.</P><P>Objects will not contain any totally enclosed holes, so the leftmost grid patterns shown below could <I>NOT</I> appear. The variations on the right could appear:<P><B><TT>Impossible&nbsp;&nbsp; Possible</TT></B><B><TT></TT></B><P><B><TT>XXXX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XXXX&nbsp;&nbsp; XXXX&nbsp;&nbsp; XXXX</TT></B><BR><B><TT>X..X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XXXX&nbsp;&nbsp; X...&nbsp;&nbsp; X...</TT></B><BR><B><TT>XX.X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XXXX&nbsp;&nbsp; XX.X&nbsp;&nbsp; XX.X</TT></B><BR><B><TT>XXXX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XXXX&nbsp;&nbsp; XXXX&nbsp;&nbsp; XX.X</TT></B><B><TT></TT></B><P><B><TT>.....&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .....&nbsp; .....&nbsp; .....</TT></B><BR><B><TT>..X..&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ..X..&nbsp; ..X..&nbsp; ..X..</TT></B><BR><B><TT>.X.X.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .XXX.&nbsp; .X...&nbsp; .....</TT></B><BR><B><TT>..X..&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ..X..&nbsp; ..X..&nbsp; ..X..</TT></B><BR><B><TT>.....&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .....&nbsp; .....&nbsp; .....</TT></B><B></B></P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain one or more grids.&nbsp; Each grid is preceded by a line containing the number of rows and columns in the grid and the row and column of the mouse click.&nbsp; All numbers are in the range 1-20.&nbsp; The rows of the grid follow, starting on the next line, consisting of '<TT>.</TT>' and '<TT>X</TT>' characters.</P><P>The end of the input is indicated by a line containing four zeros.&nbsp; The numbers on any one line are separated by blanks.&nbsp; The grid rows contain no blanks.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each grid in the input, the output contains a single line with the perimeter of the specified object.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2 2 2 2
XX
XX
6 4 2 3
.XXX
.XXX
.XXX
...X
..X.
X...
5 6 1 3
.XXXX.
X....X
..XX.X
.X...X
..XXX.
7 7 2 6
XXXXXXX
XX...XX
X..X..X
X..X...
X..X..X
X.....X
XXXXXXX
7 7 4 4
XXXXXXX
XX...XX
X..X..X
X..X...
X..X..X
X.....X
XXXXXXX
0 0 0 0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
8
18
40
48
8
</pre>
______________________________________________________
2297||||||false||||||
<P>
In the game of duplicate bridge, twelve pairs of players play 
exactly the same deal of cards.  Each pair plays against another 
pair not chosen from the original 12 (so there are 24 pairs 
altogether). To eliminate the luck involved in randomly 
distributing cards, the scoring system compares the results of 
the 12 original pairs. A numerical score is computed from the 
rules of the game, which may be positive or negative (or rarely, 
0). A pair then receives 1 point for every other pair with a 
worse score and 1/2 point for every other pair with an equal score. 
The total of these points is the pair's score. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Suppose the 12 teams' names and scores, in order, are the ones in
the Sample Input below.

<P>
The Smith team receives a total of 5 1/2  points (1/2 each for tying 
the Haskin team, the Most team, and the Franklin team, and 1 each 
for beating teams Williams, Kelso, Lawler, and Boston).  The 
Binfield team would receive a top score of 11 for beating every 
other team, while the Boston team would receive a ``bottom" score 
of 0 for neither tying nor beating any other team.  The sample 
input will always consist of 12 lines of a team name and score.  
The team name will be no longer than 10 characters. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output should consist of two columns.  The first column should 
denote the scores of the top six teams, in order of finish.  The 
second column should denote the second six teams, in order of 
finish.  Names should be left-aligned; scores should be decimal 
aligned to tenths.  Spacing between columns may be approximate.  
Headings must have the exact verbiage and be over the related data.  
In cases of ties, list the names in alphabetical order.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Smith  110 
Jones  130 
Haskin  110 
Williams  90 
Kelso  -50 
Binfield  420 
Lawler  90 
Most  110 
Charles  120 
Boston  -100 
Kistle  130 
Franklin  110
</PRE>      

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Name       Score           Name        Score 
Binfield    11.0           Most          5.5 
Jones        9.5           Smith         5.5 
Kistle       9.5           Lawler        2.5 
Charles      8.0           Williams      2.5 
Franklin     5.5           Kelso         1.0 
Haskin       5.5           Boston        0.0
</PRE> 

<P>

______________________________________________________
2298||||||false||||||
<P>BIGIANT UNIVERSITY reports payroll expenses to the administration giving totals by department within school. For instance, within the school of arts and sciences totals would be accumulated for the Psychology, Economics, Philosophy, and other departments.<P>Your task is to write a program, which will accumulate total payroll expenses by department within school and report them. You will not list individual pay amounts, only the totals by department and by school.<P>You must report the total number of employees and total pay amount by department and by school, and give a grand total for the entire university. <B>The data from which these totals are to be calculated are arranged in order by department within school</B>. This process is known as ``control break processing" because a control break is said to have occurred each time a department or school changes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The following is an example of the type of data, which you will be processing: (End of input data is indicated by a line containing all nines.) The columns for the data are specified below:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">SCHOOL NUMBER</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">DEPARTMENT NUMBER</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">INDIVIDUAL PAY AMOUNT</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Column 1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Cols. 2 &amp; 3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Cols. 4-10</TD></TR></TABLE></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For the Sample Input data below, the printed report would appear like the Sample Output.<P>All titles and identifying information should be identical to the given output. Output should have <TT>SCHOOL</TT>, <TT>DEPARTMENT</TT>, and <TT>NO. OF EMPLOYEES</TT> columns right aligned. The <TT>PAYROLL</TT> column should be decimally aligned. The <TT>SCHOOL</TT> and <TT>UNIVERSITY TOTAL</TT> lines should also contain entries that are right aligned and decimally aligned with the data above them. All <TT>PAYROLL</TT> numbers, should include commas where appropriate. All titles (including the required report title) and identifying information should be in upper case letters. Blank lines should be included after the report title, the heading line, and each school total line. Horizontal spacing between columns may be approximate; however, data should be under appropriate headings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1010050000 
1010025050 
1010037825 
1020078550 
1020046520 
2010075000 
2010049675 
2020120000 
2020037800 
2030074250 
2040037500 
2040065050 
3010091613 
3010085544 
3020057515 
3020110525
9999999999
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
                             BIGIANT UNIVERSITY 
                           PAYROLL EXPENSE REPORT 

SCHOOL        DEPARTMENT          NO. OF EMPLOYEES         PAYROLL 

1                 01                   3                   1,128.75 
1                 02                   2                   1,250.70 
                    *SCHOOL TOTALS*    5                   2,379.45 

2                 01                   2                   1,246.75 
2                 02                   2                   1,578.00 
2                 03                   1                     742.50 
2                 04                   2                   1,025.50 
                     *SCHOOL TOTALS*   7                   4,592.75 

3                 01                   2                   1,771.57 
3                 02                   2                   1,680.40 
                     *SCHOOL TOTALS*   4                   3,451.97 

                **UNIVERSITY TOTALS*  16                  10,424.17
</PRE><P>
______________________________________________________
2299||||||false||||||
<P>When the great Computer Scientist Shug-Array Leonard retired, he was asked to develop an automated version of the exciting game of Bingo for his retirement community. However, before he could complete his work, he passed away. In his memory, the following details are provided to assist you in the development of this Bingo Game.<P><P><BR>I.) A virtual card is generated, which contains five columns of five numbers, noted as follows:<P>The 1-st column (B) has five random numbers from 1-20.<P>The 2-nd column (I) has five random numbers from 21-40.<P>The 3-rd column (N) has five random numbers from 41-60.<P>The 4-th column (G) has five random numbers from 61-80.<P>The 5-th column (O) has five random numbers from 81-100.<P><P><BR>The card generated for all 5 games in this problem looks like...<P><PRE>
              B     I     N     G     O 
             ---   ---   ---   ---   --- 
              16    37    44    61    90 
               5    40    55    63   100 
              20    39    51    73    94 
               2    25    60    71    86 
              11    22    47    79    82
</PRE><P><P><BR>II.) The computer generates a random list of 100 distinct numbers, to be used as the numbers called out during game play.<P><P><BR>III.) As the numbers from the list are called out, a comparison to your card is performed. If your card contains the number called out, a marker(<TT>*</TT>) is placed next to the entry of your card.<P><BR>IV.) The game is over when your card has markers in all of the entries across any row, down any column, along any full diagonal, or in all four corners.<P><P><BR>V.) You win the game if the game ends (it is over) before the 50th number is called out from the list.<P><P><BR>VI.) The results of the game should include the game number, final card (numbers should be right-aligned under the BINGO letters, asterisks to the right), the list of numbers called out, the number of integers called out, and whether the game was won or lost.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to find the disposition of five games. There will be 500 numbers in the data file. If there are remaining numbers after a game concludes, they should be discarded before the next game commences. In the sample, numbers 40 to 100 would be discarded before game 2 is played.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>All 500 numbers will be separated by commas. Game outputs should be separated by a horizontal line of <TT>=</TT>'s, as shown above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
43,35,13,52,34,16,62,29,04,78,30,73,97,25,89,23,96,03,53,14, 
55,61,76,88,80,09,37,81,99,18,08,65,95,31,90,05,75,40,44,22, 
65,100,95,38,28,39,32,54,60,89,30,33,51,70,16,46,83,21,58,27, 
88,06,03,13,84,43,68,66,97,10,93,42,71,57,26,91,96,35,90,99, 
45,12,87,61,56,08,72,79,36,59,44,37,92,20,01,48,52,53,63,02, 
98,41,25,73,23,22,17,18,31,75,69,11,34,78,62,09,15,50,07,19,
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
-Game 1- 
======== 
 B    I    N    G    O 
---  ---  ---  ---  --- 
 16*  37*  44*  61*  90* 
  5*  40*  55*  63  100 
 20   39   51   73*  94 
  2   25*  60   71   86 
 11   22   47   79   82 
 
The numbers called out during the game were... 

43,35,13,52,34,16,62,29,04,78,30,73,97,25,89,23,96,03,53,14, 
55,61,76,88,80,09,37,81,99,18,08,65,95,31,90,05,75,40,44. 
 
This card was a WINNER in Game 1 because it needed 
only 39 numbers to end the game.
</PRE><P>
______________________________________________________
2300||||||false||||||
<P>Suppose we have a set of places (at least 3 places) connected by cable lines. We are concerned with how well-connected this set of places is. We will call the collection of places connected if we can get from any place to any other place using the cable lines. We will say the collection is 1-connected if we can remove ANY line and still be able to get from any place to any other place. Finally, we will say the collection is 2-connected if we can remove ANY TWO lines and still be able to get from any place to any other place. You are to write a program which will determine if a set of places and lines is connected, 1-connected, and 2-connected. For convenience, we will number the places instead of naming them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input for each example will start with a line which indicates how many places we have. Each of the other lines of input will have two numbers, say <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>, to indicate a cable line between <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>. (The line works in both directions.) The last line of input is a `<TT>#</TT>'.<P>The initial data line of the input will be an integer specifying how many examples are to be solved.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is five lines for each example. Follow the form shown in the sample data. Assume that there are no more than 10 places and 40 lines in any one example.<P>Include a blank line after each example. The verbiage and punctuation should be exactly as indicated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3 
1  2 
2  3 
# 
3 
1  2 
1  3 
3  2 
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Example 1: 
The places are connected. 
The places are not 1-connected. 
The places are not 2-connected. 
 
Example 2: 
The places are connected. 
The places are 1-connected. 
The places are not 2-connected.
</PRE><P>
______________________________________________________
2301||||||false||||||
<P>A school teacher wants to simplify the concept of a stack and its operations to his classroom. He wants a program to show them how anagrams can result from sequences of stack operations: 'push' and `pop'. He'll be illustrating on 4-letter words. There are two sequences of stack operators which can convert <TT>TROT</TT> to <TT>TORT</TT>:<P><PRE>
[ 
i i i i o o o o 
i o i i o o i o 
]
</PRE>where `<TT>i</TT>' stands for Push and `<TT>o</TT>' stands for Pop. Given pairs of words, your program should produce sequences of stack operatons which convert the first word to the second.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of several pairs of input lines. The first line of the file will include a single integer, indicating the number of pairs of input lines that will follow. The first line of each pair of input lines is to be considered as a 4-letter source word. The second line is the 4-letter target word.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input pair, your program should produce a sorted list of valid sequences of `<TT>i</TT>' and `<TT>o</TT>' which produce the target word from the source word. Each list should be delimited by<P><P><BR><TT>[</TT><BR><TT>]</TT><P><P><BR>on a separate line.<P>The sequences should be printed in ``dictionary order". Within each sequence, each `<TT>i</TT>' and `<TT>o</TT>' should be followed by a single space. Each sequence should be on a separate line.<P><P><BR><b>Process</b><P>A stack is a data storage and retrieval structure permitting two operations:<P><P><BR>Push - to insert an item and Pop - to retrieve the most recently pushed item<P><P><BR>We will use the symbol `<TT>i</TT>' (in) for push and `<TT>o</TT>' (out) for pop operations for an initially empty stack of characters. Given an input word, some sequences of push and pop operations are valid in that every character of the word is both pushed and popped, and futhermore, no attempt is ever made to pop the empty stack.<P>For example, if the word <TT>FOO</TT> is input, then the sequence:<P><PRE><TT>
<TT>i i o i o o</TT> 	is valid, but 
<BR><TT>i i o</TT> 		is not (it's too short), neither is 
<BR><TT>i i o o o i</TT> 	(there's an illegal pop of an empty stack) 
</TT></PRE><P>Valid sequences yield rearrangements of the letters in an input word. For example, the input word <TT>FOO</TT> and the sequence `<TT>i i o i o o</TT>' produce the anagram <TT>OOF</TT>. So also would the sequence `<TT>i i i o o o</TT>'. You are to write a program to input pairs of words and output all the valid sequences of `<TT>i</TT>' and `<TT>o</TT>' which will produce the second member of each pair from the first.<P>Output for each example should include the output line with the initial word as well as the target word. There should be no blank lines between examples.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
mada 
adam 
long 
nice 
eric 
rice
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Output for mada adam 
[  
i i i i o o o o  
i i o i o i o o 
]
Output for long nice 
[ 
] 
Output for eric rice 
[ 
i i o i o i o o  
]
</PRE><P>
______________________________________________________
2302||||||false||||||
<P>You are to write a program that evaluates assignment statements. Assume that there is one (and only one) statement on each line of the input, and each assignment statement is terminated by a semicolon. The following are some of possible assignment statements:<P><PRE>
       length = 4 +6; 
        width=3+12*10; 
      area =length    *width - b; 
     total   =100 - y- (width+111*222)    /area + x; 
        area= area +5 -  3 *4^ (    width  - 3*(length+30    ))+100; 
           x  =     area +(total-area/  width ) ;
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Here are some assumptions and rules:<P><DL COMPACT><DT>(1)</DT><DD>All variables are 1-10 characters long, and only lowercase letters are used.</DD><DT>(2)</DT><DD>All values are integers, and all numbers are in the range of -32768 to 32767. (Such numbers are stored in 16 bits of memory.)</DD><DT>(3)</DT><DD><SPAN CLASS="MATH">/</SPAN> is the integer division operator. So <SPAN CLASS="MATH">7/2 = 3</SPAN> (truncated to integer), and <SPAN CLASS="MATH">100/7 = 14</SPAN>.</DD><DT>(4)</DT><DD><code>^</code> is the exponential operator. For example, <SPAN CLASS="MATH">2<code>^</code>5 = 2*2*2*2*2 = 32</SPAN>.</DD><DT>(5)</DT><DD>An expression may contain both integer literals and variables.</DD><DT>(6)</DT><DD>Any number of spaces may be used to separate different items in a statement.</DD><DT>(7)</DT><DD>All statements are 1 - 80 characters long.</DD><DT>(8)</DT><DD>All variables have a default value of 0.</DD><DT>(9)</DT><DD>All statements are valid.</DD><DT>(10)</DT><DD>First line of the input contains a positive integer indicating the number of statements to be evaluated.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program should read and evaluate all statements and print a table that shows all variables, in alphabetical order and aligned to the left, that appear in the input data along with their corresponding final values aligned to right.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
       length = 4 +6; 
        width=3+12*10; 
      area =length    *width - b; 
     total   =100 - y- (width+111*222)    /area + x; 
        area= area +5 -  3 *4^ (    width  - 3*(length+30    ))+100; 
           x  =     area +(total-area/  width ) ;
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Variable            Value 
========================= 
area                 1143 
b                       0 
length                 10 
total                  80 
width                 123 
x                    1214 
y                       0
</PRE><P>
______________________________________________________
2303||||||false||||||
<P>
The town of Fooble is illuminated at night by a series of lights. 
Each light illuminates a circular area of a specified size.  Due 
to recent energy conservation laws, the lights cannot be left on 
all the time.  Therefore all the lights in town are designed to 
be on for a fixed number of time units and then turned off for 
the same time period.  This cycle repeats forever (i.e. light is 
on, light is off, light is on, light is off...). 

<P>
There are two types of lights used in the town.  Type A lights 
that are on and then off, and type B lights that are off and then 
on.  For example, a type A light with a duty cycle of 10 is on 
for 10 time units, off for 10, on for 10, off for 10 and so on.  
A type B light, with the same duty cycle, would be off for 10 
time units, on for 10, off for 10, and so on.  

<P>
The Fooble people are a funny lot.  They only travel at night and 
will only travel from one light to another.  It always takes a 
Foobie exactly one time unit to travel from one light to another, 
regardless of the distance between the lights.  Foobies are 
deathly afraid of the dark so they never walk from one light to 
another unless the entire area between the lights is illuminated.  
They are perfectly happy to leave a light that is currently off, 
provided that some light (or lights) are currently illuminating 
the entire area they wish to travel.  Foobies are willing to wait 
at a light that has been turned off and is in the dark, in the 
hope that some light (perhaps the one they are waiting at) will 
turn on and illuminate the area they wish to travel.  Points of 
tangency for illuminated circles are considered to be lit. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The town has prepared a listing of light information for its 
residents.  The listing includes the number, model, location, 
duty cycle, and radius of the area illuminated for each light in 
town.  The lights are numbered starting at 0 and their locations 
are given in terms of nonnegative integer <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> values.  All 
distances are in Fooble units.  Foobies work exclusively with 
nonnegative integer values.  The first line in an individual 
example specifies the total number of lights in town, and the 
lights are always listed in numerical order. The last line of an example
specifies the origin and destination lights of the travel.   

<P>
The first line of the sample data is the number of examples 
to be solved. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
You are to write a program that given a light list, and the 
number of a light where a Foobie will start from and the number 
of the light they wish to travel to, will print out a quickest 
path (in terms of time units) that the Foobie must travel to 
reach their destination.  Travel directions are vertical, 
horizontal, and diagonal.  The program must output the sequence 
of moves the Foobie will take and will also indicate when the 
Foobie must wait before moving on to the next light.  Your 
program must be able to indicate if the Foobie cannot make the 
desired trip. 

<P>
Examples should be separated by a blank line.  A 
title line specifying the example number and using the verbiage 
given below should also be included.  Finally, there should be a 
blank line after each example title line. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>   

<P>
<PRE>
3 
2 
0 A 0 0 3 1 
1 B 0 2 2 1 
0 1 
3 
0 A 0 0 3 1 
1 B 0 2 2 1 
2 B 0 4 3 1 
0 2 
2 
0 A 2 2 5 2 
1 B 2 5 5 2 
0 1
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Output for Example 1:

Wait 
Wait 
Move 0 to 1 

Output for Example 2: 

Wait 
Wait 
Move 0 to 1 
Move 1 to 2 

Output for Example 3: 

No path exists
</PRE> 


______________________________________________________
2304||||||false||||||
<P>As the host of a popular daytime television talk show, you are working through the details of an upcoming episode on dieting. Your guest is the controversial Dr. Kevorkian, who has recently invented his own weight-loss plan, ``Do You Want To Diet?" that guarantees to reduce your body weight by 1 pound every day.<P>You have a number of dieters scheduled to be on the show who have all been using Dr. Kevorkian's new plan. You want to make the episode more dramatic by introducing your guests in decreasing order of their weights on the day of the show. The problem is that the forms you had them fill out only requested the following information: Name, Days on the diet, Weight at start of diet. Hopefully you can dredge up those long-forgotten math skills before the filming time tonight!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be <B>no blank lines</B> separating data sets.<P>A single data set has 3 components:<DL COMPACT><DT>1</DT><DD><EM>Start line</EM> - A single line, ``<TT>START</TT>"</DD><DT>2</DT><DD><EM>Dieter list</EM> - A series of 1 to 10 (inclusive) single lines consisting of three fields, with each field separated from the others by a single space:<UL><LI><EM>Name</EM> - The dieters first name. This will be a text string containing 1 to 20 (inclusive) alphanumeric characters (no spaces). </LI><LI><EM>Days On Diet</EM> - The number of days the dieter has been on the ``Do You Want To Diet" as of the day of the talk show. This will be a non-zero positive integer strictly less than 1000. </LI><LI><EM>Starting Weight</EM> - The weight, in pounds, of the dieter just before starting the diet. This will be a non-zero positive integer strictly less than 10,000. </LI></UL></DD><DT>3</DT><DD><EM>End line</EM> - A single line, ``<TT>END</TT>"</DD></DL><P>Here are some facts that may be useful:<UL><LI>All dieters lost exactly 1 pound every day they were on the diet, as advertised. </LI><LI>Nobody stayed on the diet long enough to weigh less than 1 pound at the time of the show. </LI><LI>All dieters in a given input set will have different weights on the day of the show. </LI><LI>All dieters in a given input set will have different names. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input data set, there will be exactly one output set, and there will be exactly <B>one blank line</B> separating output sets.<P>A single output set consists of a series of lines, each containing the <EM>Name</EM> of one of the dieters from the <EM>Dieter list</EM>. The list will be sorted in descending order according to weight at the time of the TV show. All dieters must be listed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
START
Joe 10 110
END
START
James 100 150
Laura 100 140
Hershey 100 130
END
START
Hershey0 1 5
Hershey2 1 3
Hershey1 1 4
Hershey3 1 2
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Joe

James
Laura
Hershey

Hershey0
Hershey1
Hershey2
Hershey3
</PRE><P>
______________________________________________________
2305||||||false||||||
<P>
A group of colonists has landed on an uncharted island, looking for that special place to stop and settle.
Unfortunately, there are already natives on the island, and now it's a race to see who will be able to survive.
In order to settle, a group must find food.

<P>
The settlers have not learned the arts of agriculture yet, so they will invariably eat all the food and have to move on.
If any groups encounter each other, they will fight to the death, since resources are scarce.
Your job is to determine who will be alive or dead at the end of <SPAN CLASS="MATH"><I>N</I></SPAN> turns and where they are on the island.

<P>
The island is a rectangular <!-- MATH
 $A \times B$
 -->
<SPAN CLASS="MATH"><I>A</I> <TT>x</TT> <I>B</I></SPAN> matrix.
Each square is either water, fields, or mountains.
Settlers or native groups can only be located on fields (they can neither swim nor climb).
Wheat grows in certain locations on the fields and is the only source of food for the groups.

<P>
Each group is assigned an identifier and has a certain number of people in it.
During each year (or turn), the surviving groups (those with one or more people alive) will perform an action.
The group with the lowest identifier goes first, followed by the next lowest, until all groups have had their ``turn."

<P>
A group can only do one of the actions listed below.
To determine which action a group does, they try to do the first action.
If unable to do that action, the group will try the second action, and so forth until it finds an action that it can perform.

<P>
Note that a group will always be able to do one of the following actions each turn:

<P>

<OL>
<LI>If a group is adjacent to another group, they will attack (in the case of multiple adjacent tribes, the tribe will attack the first tribe it finds in a clockwise search starting at the northern square).
</LI>
<LI>If a group is adjacent to wheat, then the group will eat it and not move (if multiple wheat terrain squares are adjacent to the group, the wheat eaten will be the first encountered using a clockwise search starting from the terrain square to the north of the group).

<P>
The wheat eaten will be reduced by the number of people in the group.
If there are more people in the group than wheat, the next group of wheat in the clockwise search pattern will be eaten until either there is no more wheat in an adjacent terrain square or the total number of wheat units consumed equals the size of the group.
Once wheat is completely consumed, the square that the wheat was in should be considered as a normal field.
</LI>
<LI>If a group was not adjacent to any wheat at the beginning of their turn, the group will search for food by moving one square to the North, East, South, or West (see below for moving requirements).
If the group is unable to move, it will stay in its current location.
</LI>
</OL>

<P>
At the end of each group's turn, the number of people in the group and anything they might have encountered is recalculated based on:

<P>

<OL>
<LI>If the group ate this turn, the group will grow by 33% (rounded up) of the people that were able to eat. 5% (rounded up) of the people that did not eat will die due to starvation.
</LI>
<LI>If the group attacked another tribe, the group will kill an amount of people equal to its 'strength.'
A group's strength is equal to 50% (rounded up) of its population.
Because they are not eating while fighting, 10% (rounded up) of the group will die after the fighting is finished.
Note that only the group attacking does damage; the other group will have to wait until its turn to retaliate, if it is able to.
</LI>
<LI>If a group moved to another square, 10% (rounded up) of the people in the group will die due to starvation and the rigors of travel.
</LI>
</OL>

<P>

<P>
<BR>

<B>NOTE:</B> When rounding, round the amount that will be added or subtracted from the group. Only use the cardinal points (<TT>N</TT>,<TT>S</TT>,<TT>E</TT>,<TT>W</TT>) when determining if a group is adjacent to something.

<P>

<P>
<BR>

<B>Movement</B>: Whether a group is comprised of settlers or natives, moving on the island is highly ritualized.
Each group follows a set of rules to determine which direction to move in order to find the perfect place to stop and make a (brief) home:

<P>

<OL>
<LI>Each group remembers where it has been and determines which direction to go based on a point system. Points will be recalculated each turn as follows:

<UL>
<LI>Assign each area adjacent to the group (considering cardinal directions only) a number of points equal to the number of times the group has entered that square.
Note that if a group moves to and stays in a single square for multiple turns, it has only entered the square once.
Starting the simulation in a particular terrain square also counts as entering that square once.
</LI>
<LI>Groups loath to turn around and go back the way they came, thus the last visited area shall be worth double the points calculated from above.
</LI>
</UL>
</LI>
<LI>The group will move in the direction with the lowest points.
In case of a tie, the group will give priority to the tied direction appearing first in this list: North, East, South, West.
</LI>
</OL>

<P>

<UL>
<LI><EM>Since water and mountains are impassible, do not consider moving to terrain squares containing them!</EM>
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to this problem will consist of a (non-empty) series of up to 100 data sets.
Each data set will be formatted according to the following description, and there will be <B>no blank lines</B> separating data sets.

<P>
A single data set has 3 components:

<OL>
<LI><EM>Start line</EM> - A single line, ``<TT>START <SPAN CLASS="MATH"><I>N</I></SPAN></TT>", where <SPAN CLASS="MATH"><I>N</I></SPAN> is a positive integer in the range <!-- MATH
 $1 \le N \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2305img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2305img1.png
 ALT="$ \le$">100</SPAN> which indicated the number of years that must be calculated.
</LI>
<LI><EM>Starting Map</EM> - A map showing the starting position. The map consists of a set of <SPAN CLASS="MATH"><I>A</I></SPAN> lines, each describing <SPAN CLASS="MATH"><I>B</I></SPAN> terrain squares. Note that the actual size of the <!-- MATH
 $A \times B$
 -->
<SPAN CLASS="MATH"><I>A</I> <TT>x</TT> <I>B</I></SPAN> map is not given within the input set but will be in the range 1 to 20 inclusive. The terrain squares in each line are separated from one another by a single space, and each terrain square is a pair ``<EM>identifier number</EM>." 

<P>

<P>
<BR>
The <EM>identifier</EM> may be one of:
<DL COMPACT>
<DT></DT>
<DD>'<TT>.</TT>' - (period) Field, without wheat
</DD>
<DT></DT>
<DD>'<TT>w</TT>' - (lower-case) Field, with wheat
</DD>
<DT></DT>
<DD>'<TT>M</TT>' - (upper-case) Mountain
</DD>
<DT></DT>
<DD>'<TT>W</TT>' - (upper-case) Water
</DD>
<DT></DT>
<DD>'<TT>Z</TT>' - (upper-case) An integer in the range <SPAN CLASS="MATH">[0..<I>n</I> - 1]</SPAN>, where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of groups on the map, and <!-- MATH
 $1 \le n \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2305img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2305img1.png
 ALT="$ \le$">10</SPAN>.
</DD>
</DL>
This group identifier will be unique for each group on a given map.  

<P>

<P>
<BR>
The <EM>number</EM> is an integer in the range <SPAN CLASS="MATH">[0, 999]</SPAN>, inclusive. It is only meaningful for groups (detailing how many people are left in that group), or wheat (which is the amount of wheat remaining).
</LI>
<LI><EM>End line</EM> - A single line, ``<TT>END</TT>"
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, there will be exactly one output set, and there will be a <B>single blank</B> line separating output sets.

<P>
A single output set consists of a series of lines, ``<EM>GroupID Size Position YearDied</EM>", displayed in increasing order of <EM>GroupID</EM>, where:

<P>

<UL>
<LI><EM>GroupID</EM> - The group's identification number.
</LI>
<LI><EM>Size</EM> - The size of the group at the end of <SPAN CLASS="MATH"><I>N</I></SPAN> years.
</LI>
<LI><EM>Position</EM> - The position, ``<SPAN CLASS="MATH">(<I>X</I>, <I>Y</I>)</SPAN>" of the group at the end of <SPAN CLASS="MATH"><I>N</I></SPAN> years. Where <SPAN CLASS="MATH"><I>X</I></SPAN> indicates the column and <SPAN CLASS="MATH"><I>Y</I></SPAN> the row, with (0,0) being the most North-West terrain square (the first terrain square in the first line of the <EM>StartingMap</EM>).
</LI>
<LI><EM>YearDied</EM> - The year (or turn) in which this group died (size fell to 0), represented by a positive integer.
If the group is still alive at the end of <SPAN CLASS="MATH"><I>N</I></SPAN> years, this field will not be output.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
START 5
W 000 W 000 W 000 W 000 W 000 W 000 W 000 W 000
W 000 W 000 . 000 . 000 2 060 . 000 w 345 W 000
W 000 . 000 . 000 . 000 . 000 . 000 . 000 W 000
W 000 1 140 . 000 . 000 0 050 . 000 . 000 W 000
W 000 W 000 . 000 M 000 M 000 . 000 . 000 W 000
W 000 W 000 w 200 M 000 M 000 . 000 3 025 W 000
W 000 W 000 . 000 . 000 . 000 . 000 . 000 W 000
W 000 W 000 . 000 . 000 . 000 . 000 . 000 W 000
W 000 W 000 . 000 w 115 w 115 . 000 . 000 W 000
W 000 W 000 W 000 W 000 W 000 W 000 W 000 W 000
END
START 3
. 000 2 100 . 000 . 000
0 100 1 050 . 000 . 000
. 000 . 000 . 000 . 000
. 000 . 000 . 000 . 000
END
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
0 0 (4,2) 2
1 57 (4,1)
2 43 (5,1)
3 31 (6,2)

0 72 (1,0)
1 0 (1,1) 1
2 72 (3,1)
</PRE>

<P>

______________________________________________________
2306||||||false||||||
<P>You've been a treasure hunter for a long time. You're pretty good at disarming traps, sneaking past the natives, and generally getting the goods while leaving your skin intact. That stuff doesn't really worry you, but what really raises a sweat is after each expedition there are always very tense arguments about how to split up the loot. You've worked with all kinds of characters and nobody ever agrees on what each piece of treasure is actually worth. You need to come up with a way of splitting the booty as fairly as possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be <B>no blank lines</B> separating data sets.<P>A single data set has 5 components:<OL><LI><EM>Start line</EM> - A single line, ``<TT>START</TT>" </LI><LI><EM>Number of Treasures</EM> - A single line with a single integer, <SPAN CLASS="MATH"><I>t</I></SPAN>, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2306img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2306img1.png ALT="$ \le$">8</SPAN>, indicating the number of treasures. </LI><LI><EM>Number of Hunters</EM> - A single line with a single integer, <SPAN CLASS="MATH"><I>h</I></SPAN>, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2306img1.png ALT="$ \le$"><I>h</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2306img1.png ALT="$ \le$">6</SPAN>, indicating the number of treasure hunters. </LI><LI><EM>Treasure Value List</EM> - A series of <SPAN CLASS="MATH"><I>h</I></SPAN> lines, one for each hunter in sequence (line 1 for hunter 1, line 2 for hunter 2, etc.). Each line contains a space-separated list of estimated treasure values for that hunter. The first estimate on each line is for treasure 1, the second is for treasure 2, etc., and an estimate for each treasure will appear for every hunter. Each estimate will be a positive integer strictly less than 10000. </LI><LI><EM>End line</EM> - A single line, ``<TT>END</TT>" </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input data set, there will be exactly one output set, and there will be exactly <B>one blank line</B> separating output sets.<P>Each output set consists of multiple lines, where each line represents a hunter (listed in the same order as the corresponding input data set). Each line contains a list of the treasures given to that hunter followed by the total perceived cash value (by that hunter), of all the treasures they receive. Treasures will be listed in ascending order by treasure number, and all values on each line will be space-separated.<P>Treasures will be divided among the hunters in the fairest way possible. The ``fairest" way to divide the treasure is defined to be the distribution with the minimum difference between the highest perceived total value and the lowest perceived total value of treasures received by any hunter. In other words, find the distribution that minimizes the difference between the hunter that gets the ``most" and the hunter that gets the ``least."<P>There will not be multiple ``fair" distributions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
START
5
3
42 500 350 700 100
250 200 500 1000 75
150 400 800 800 150
END
START
5
3
42 500 350 200 100
250 200 500 1000 75
150 400 800 800 150
END
START
5
3
500 500 350 200 100
250 200 500 1000 75
150 400 800 800 150
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
4 700
3 5 575
1 2 550

1 4 5 342
3 500
2 400

1 2 1000
4 1000
3 5 950
</PRE><P>
______________________________________________________
2307||||||false||||||
<P>``Uncle Jacques, " you ask, ``What's for dinner?"<P>``Ask me again in 10 minutes," Uncle Jacques replies, eyeing the weary-looking frog sitting on the shoulder of Interstate 10, in front of your dilapidated shack.<P><P><BR>You notice the potential roadkill as it begins its journey across the vehicle-laden road. You want to know if you should begin boiling a pot of water in anticipation of frog legs for dinner or warm up the leftover possum. You fire up your Swamp 'Puter XL2 and quickly write a program to determine if it is possible for the frog to make it across the road or if it will be hit by a vehicle.<P>Examining the patch of road in front of your shack, you notice the lanes and shoulders resemble a 10 <SPAN CLASS="MATH"><TT>x</TT></SPAN> 10 grid of squares (shown below). You also notice that the way the frog and the vehicles are moving can be described in ``turns". To determine if the frog makes it across the road, you quickly devise a set of rules:<P><OL><LI>At the onset of a run, the frog can start in any square on row 0 (the starting shoulder). </LI><LI>At the onset of a run, each vehicle will occupy a square in any column, but only in rows 1-8 (the lanes). </LI><LI>Each turn will consist of two steps:<UL><LI>First, the frog will always remain in the same column and move one row down, towards row 9, his destination (he's not the smartest frog in the world). </LI><LI>Next, all the vehicles move (at the same time), <SPAN CLASS="MATH"><I>n</I></SPAN> squares left or right, depending on which row (lane) they are in, where <SPAN CLASS="MATH"><I>n</I></SPAN> is their speed (given in the input). To simulate more approaching vehicles, if a vehicle moves off the grid, it instead ``wraps around" and appears from the opposite side. Ex: In the grid below, if a vehicle would move to occupy column -1, it would instead occupy column 9 (column -2 would instead occupy column 8, etc.). Also, if a vehicle would move to occupy column 10, it would instead occupy column 0 (column 11 would instead occupy column 1, etc.).<P><PRE> 
     Column
    0123456789
    ----------
R 0|          |&lt;- The frog can start in any square on row 0 
o 1|          |(shoulder)
w 2|   /___   | 
  3|   \      |cars in rows (lanes) 1-4 move left, or
  4|          |towards column 0
  5|          |
  6|    ___\  |cars in rows (lanes) 5-8 move right, or
  7|       /  |towards column 9
  8|          |
  9|          |&lt;- The destination row (shoulder) of the frog
    ----------
</PRE></LI></UL></LI><LI>The frog will succeed in crossing the interstate for a run if it can reach row 9 (without becoming roadkill) after a series of turns starting in ANY column on row 0 (he's not the dumbest frog in the world, either). </LI><LI>The frog will become roadkill if at any point it occupies the same square as a vehicle. This includes:<UL><LI>The frog moving into a square a vehicle occupies, or </LI><LI>A vehicle ``running over" the frog by moving over or into a square the frog occupies. </LI></UL></LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will describe the starting conditions of the interstate for a run and will be formatted according to the following description. There will be <B>no blank lines</B> separating data sets.<P><OL><LI><EM>Start line</EM> - A single line, ``<TT>START</TT>" </LI><LI>The next 8 lines will represent rows 1-8 (the ``lanes" of the interstate), starting with row 1. Each line will consist of 10 integers, separated by single spaces. Each integer will represent a column for that row and will be either:<UL><LI>0, representing no vehicle occupying that square, or </LI><LI>a non-zero integer <SPAN CLASS="MATH"><I>N</I></SPAN> in the range <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2307img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2307img1.png ALT="$ \le$">9</SPAN>, representing a vehicle is occupying that square and the non-zero integer is its speed. NOTE: The given speeds will NOT result in vehicles moving over other vehicles or into a square occupied by another vehicle (no accidents), since all the vehicles move at the same time and all vehicles on a given row are guaranteed to move at the same speed. </LI></UL></LI><LI><EM>End line</EM> - A single line, ``<TT>END</TT>" </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output for each data set will be exactly one line of output. The line will either be `<TT>LEFTOVER POSSUM</TT>' or `<TT>FROGGER</TT>' (both all caps with no whitespace leading or following).<P><P><BR>`<TT>LEFTOVER POSSUM</TT>' will appear if the frog can make it safely (without becoming roadkill) across the interstate after a series of turns starting in ANY column on row 0.<P><P><BR>`<TT>FROGGER</TT>' will be output for a data set if it fails to meet the criteria for a `<TT>LEFTOVER POSSUM</TT>' line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
START
3 0 0 0 0 3 0 0 0 3
1 0 0 0 1 0 0 0 0 0
4 0 0 0 0 0 0 4 0 0
0 0 2 0 0 0 0 0 0 2
5 0 0 0 0 0 0 0 0 0
0 2 0 0 0 0 0 2 0 2
0 0 0 4 0 0 0 0 0 0
0 2 0 0 0 0 0 0 0 0
END
START
9 9 9 9 9 9 9 9 9 9
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
END
START
1 0 0 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0 0 0
0 0 0 1 0 0 0 0 0 0
0 0 0 0 1 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
FROGGER
FROGGER
LEFTOVER POSSUM
</PRE><P>
______________________________________________________
2308||||||false||||||
<P>
When trying to avoid conflict and maintain peace, a good strategy is to remove the elements that cause the most trouble.
IBM is using its Deep Blue machine to try to study this strategy by modeling it with a game of chess.
IBM needs a program to find the minimum number of chess pieces that must be removed from a chessboard in order for none of the pieces to be attacking each other.

<P>

<P>
<BR>
All pieces will have the standard attack movements for that chess piece.

<P>

<P>
<BR>
King  - Can attack the adjacent space in any direction.  Up, down, left, right and diagonally.

<P>
Queen - Can attack any number of spaces in any direction.  Up, down, left, right and diagonally.

<P>
Bishop - Can attack any number of spaces diagonally.

<P>
Rook - Can attack any number of spaces up, down, left, or right but not diagonally.

<P>
Pawns - There won't be any pawns.

<P>
Knight - Can attack with their usual 'L' shaped movement.  Up twice and right once, up once and left twice, etc<SPAN CLASS="MATH">...</SPAN> 

<P>

<P>
<BR>
Here is a diagram, which demonstrates the movement of a knight.<PRE> 
 --------------
| | |*| |*| | |
---------------
| |*| | | |*| |
---------------
| | | |N| | | |
---------------
| |*| | | |*| |
---------------
| | |*| |*| | |
---------------
N = Knight
* = Square that the knight can attack
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to this problem will consist of a (non-empty) series of up to 100 data sets.
Each data set will be formatted according to the following description, and there will be <B>no blank lines</B> separating data sets.
The maximum dimensions of the board are 10 squares wide by 10 squares high.
The maximum number of chess pieces that will start out on the board is 15.

<P>
A single data set has 5 components:

<P>

<OL>
<LI><EM>Start line</EM> - A single line, `<TT>START</TT>'
</LI>
<LI><EM>Board Width (# of columns)</EM> - A single line containing a positive integer, <SPAN CLASS="MATH"><I>w</I></SPAN>, indicating the number of squares across the width of the board where <!-- MATH
 $1 \le w \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2308img1.png
 ALT="$ \le$"><I>w</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2308img1.png
 ALT="$ \le$">10</SPAN>.
</LI>
<LI><EM>Board Height (# of rows)</EM> - A single line containing a positive integer, <SPAN CLASS="MATH"><I>h</I></SPAN>, indicating the number of squares that dictate the height of the board, where <!-- MATH
 $1 \le h \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2308img1.png
 ALT="$ \le$"><I>h</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2308img1.png
 ALT="$ \le$">10</SPAN>.
</LI>
<LI><EM>Board Layout</EM> - <SPAN CLASS="MATH"><I>h</I></SPAN> lines, each corresponding to a row of the board.  The first line corresponds to the first row, the second line to the second row, and so on.  Each row consists of a space-separated list of single letters, each representing the contents of the corresponding square on the board according to the following list:

<P>
<DL COMPACT>
<DT></DT>
<DD><TT>K</TT> - King
</DD>
<DT></DT>
<DD><TT>Q</TT> - Queen
</DD>
<DT></DT>
<DD><TT>R</TT> - Rook
</DD>
<DT></DT>
<DD><TT>B</TT> - Bishop
</DD>
<DT></DT>
<DD><TT>N</TT> - Knight
</DD>
<DT></DT>
<DD><TT>E</TT> - Empty Square
</DD>
</DL>
</LI>
<LI><EM>End line</EM> - A single line, `<TT>END</TT>'
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, there will be exactly one output set, and there will be <B>no blank lines</B> separating output sets.

<P>
A single output set consists of a single line, `<TT>Minimum Number of Pieces to be removed: <SPAN CLASS="MATH"><I>X</I></SPAN></TT>', where <SPAN CLASS="MATH"><I>X</I></SPAN> is the minimum number of pieces that must be removed from the board such that none of the remaining pieces are attacking any other remaining piece.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
START
3
3
K E K
E Q E
K E K
END
START
8
8
E E E E E E E E
E B E K E E N E
E E E E N E E E
E E E E E E E R
B E Q E E E E E
E E E E E Q E E
E E E E E B E E
E B E R E E E E
END
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
Minimum Number of Pieces to be removed: 1
Minimum Number of Pieces to be removed: 5
</PRE>

<P>

______________________________________________________
2309||||||false||||||
<P>Boudreaux and Thibodaux have just seen the Matrix, and are arguing whether or not it would actually be possible to dodge bullets if you moved fast enough. Boudreaux is used to hunting nutria with buckshot, and maintains that most bullet spreads should make it impossible to dodge all the bullets. Thibodaux is still doing kung-fu in his head, and is sure that if you could move fast enough it would be possible to dodge the bullets. Boudreaux is getting fed up, and is about ready to prove his point with some empirical testing. Your job is to come up with a way to prove or disprove this hypothesis for different scenarios using computer simulations, which are much safer than the methods that Boudreaux has in mind.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 20 data sets. Each data set will be formatted according to the following description, and there will be <B>no blank lines</B> separating data sets.<P>A single data set has 5 components:<P><OL><LI><EM>Start line</EM> - A single line, `<TT>START</TT> <SPAN CLASS="MATH"><I>N</I></SPAN>', where <SPAN CLASS="MATH"><I>N</I></SPAN> is a positive integer in the range <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2309img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2309img1.png ALT="$ \le$">10</SPAN> which indicates the number of bullets fired at the target. </LI><LI><EM>Target Velocity</EM> - A single line representing the velocity of the target. </LI><LI><EM>Bullet Velocity List</EM> - A non-empty set of up to 10 lines. Each line will contain the velocity of a single bullet. </LI><LI><EM>Target</EM> - A nonempty series of up to 30 lines. Each line will consist of up to 30 characters (not counting the end-of-line). Each non-whitespace character represents a piece of the target that can be hit by a bullet. The target will not contain numbers, asterisks, or commas, but any other characters may be used. The target grid is assumed rectangular for the purposes of determining its center, and its dimensions are that of the longest row/column (this will not exceed 30 blocks in either direction). Each block of the target grid is 10cm <SPAN CLASS="MATH"><TT>x</TT></SPAN> 10cm. </LI><LI><EM>End line</EM> - A single line, `<TT>END</TT>' </LI></OL><P><B>Note:</B><P><UL><LI>The target will be the first line after the last bullet velocity line with a first character that is neither a number nor a minus sign (`<TT>-</TT>') followed by a number. </LI><LI>The bullets are assumed to have been fired at the same instant, from a point exactly 10 meters due South of the center of target, and at a height equal to half the height of the target. </LI><LI>Each bullet (and the target) velocity will be listed as a three-component velocity vector. The velocities are in meters per second, and of the format: <!-- MATH
 $<velocity \ North>$
 --><SPAN CLASS="MATH">&lt; <I>velocity</I>&nbsp;<I>North</I> &gt;</SPAN>, <!-- MATH
 $<velocity \ East>$
 --><SPAN CLASS="MATH">&lt; <I>velocity</I>&nbsp;<I>East</I> &gt;</SPAN>, <!-- MATH
 $<velocity \ up>$
 --><SPAN CLASS="MATH">&lt; <I>velocity</I>&nbsp;<I>up</I> &gt;</SPAN> with no spaces. Velocities may be negative values. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Find out if the target got out 'da way. A hit occurs when any bullet passes through a grid square with mass in it. For the sake of simplicity, the target can be assumed to be two dimensional, and the bullets volumeless. Also, Boudreaux and Thibideaux don't even know what precision means, they just make sure to calculate to at least four decimal places. (In other words, don't worry about precision edge detection. Just keep the math simple and use very precise numbers to minimize error. You'll find hits in the correct places.)<P>For each data set, there will be exactly one output set, and there will be exactly <B>one blank line</B> separating output sets.<P>An output set will take one of two forms:<UL><LI>If no bullets hit mass-containing parts of the target, your output will be, `<TT>Got out da way!</TT>' </LI><LI>Otherwise (if at least one hit occurred), your output will be the Target, with all hit blocks replaced with asterisks (`<TT>*</TT>'). </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
START 3
-10,-2,1
300,14.5,-20
350,-80,0
400,28.75,26
     @@@@      n
     #^^#     oU
      ##     o
  ooooooooooo
  o oooooo
  o  oooo
 o   DDDD
oo   DDDD
     D  D
     D  D
    TT  TT
    TT  TT
  &lt;TTT  TTT&gt;
END
START 2
-10,-2,1
300,14.5,-20
350,-80,0
     @@@@      n
     #^^#     oU
      ##     o
  ooooooooooo
  o oooooo
  o  oooo
 o   DDDD
oo   DDDD
     D  D
     D  D
    TT  TT
    TT  TT
  &lt;TTT  TTT&gt;
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 

     @@@@      *
     #^^#     oU
      ##     o
  ooooooooooo
  o oooooo
  o  oooo
 o   DDDD
oo   DDDD
     D  D
     D  D
    TT  TT
    TT  TT
  &lt;TTT  TTT&gt;

Got out da way!
</PRE><P>
______________________________________________________
2310||||||false||||||
<P>Remember those wacky number puzzles you used to win at birthday parties as a kid? Well, they're back, but this time with a digital twist. As with everything else, kids today are spoiled, having access to technology to make things easier for them. And why should games be any different?<P><DIV ALIGN="CENTER"><IMG WIDTH="323" HEIGHT="196" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2310.gif ALT="\epsfbox{p2310.eps}"></DIV><P>With this in mind Wiltin' Badley has decided to release a 21st Century version of this old puzzle favorite and call it <EM>Missing Piece 2001</EM>. Since this is a modern version of the game, it will be accompanied with a software supplement to give the player an idea of the skill level necessary to solve the puzzle. The software supplement will allow the player to enter in the initial board configuration along with the expected final board configuration, and the software will tell the player whether it is solvable within a certain number of moves. If the puzzle is solvable within the selected number of moves, the software will then give the optimal number of moves necessary to solve the puzzle. You have been hired by Wiltin' Badley as a Software Engineer to write this very software.<P>As with any good software, the ability of your software to be flexible is a must. Therefore, you are to design this software to allow the user to enter the dimensions of the game board, the desired number of moves in which the puzzle is to be solved, the initial board configuration, and the final board configuration. This user input will take into account different game board sizes (different-sized game boards sold separately, for a nominal fee of course), different number of moves necessary to solve the puzzle (so the player can tell if the puzzle is solvable given his/her skill level), as well as any solution set the player may want to try.<P><P><BR><B>Game Piece Movement</B><P><P><BR>A valid move consists of moving a game piece (number) which is adjacent to the <EM>missing piece</EM> (`X') in the direction of the <EM>missing piece</EM>. Note that only game pieces that are adjacent to the <EM>missing piece</EM> may be moved, and the only valid directions of movement are UP, DOWN, LEFT, or RIGHT (depending on the placement of the game piece in relation to the <EM>missing piece</EM>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 10 data sets. Each data set will be formatted according to the following description, and there will be <B>no blank lines</B> separating data sets.<P>Each data set consists of 4 components:<P><OL><LI><EM>Start Line</EM> - A single line, ``<TT>START</TT> <SPAN CLASS="MATH"><I>D</I></SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN>", where <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2310.gif ALT="$ \le$"><I>D</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2310.gif ALT="$ \le$">10</SPAN> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2310.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2310.gif ALT="$ \le$">15</SPAN> </LI><LI><EM>Initial Board Layout</EM> - Consists of a <SPAN CLASS="MATH"><I>D</I> <TT>x</TT> <I>D</I></SPAN> matrix of integers ranging from 1 to <SPAN CLASS="MATH">(<I>D</I><SUP>2</SUP> - 1)</SPAN> inclusive (where <SPAN CLASS="MATH"><I>D</I></SPAN> is the Board Dimension), and an '<TT>X</TT>' to denote the missing piece. This matrix represents the layout of the game board prior to the solution attempt. </LI><LI><EM>Solved Board Layout</EM> - Consists of a <SPAN CLASS="MATH"><I>D</I> <TT>x</TT> <I>D</I></SPAN> matrix of integers ranging from 1 to <SPAN CLASS="MATH">(<I>D</I><SUP>2</SUP> - 1)</SPAN> inclusive (where <SPAN CLASS="MATH"><I>D</I></SPAN> is the Board Dimension), and an '<TT>X</TT>' to denote the missing piece. This matrix represents the final layout of the game board necessary to successfully solve the puzzle. </LI><LI><EM>End Line</EM> - A single line, ``<TT>END</TT>" </LI></OL><P><B>Notes:</B><P><UL><LI>On the ``Start" line of the data set, <SPAN CLASS="MATH"><I>D</I></SPAN> represents the dimensions of the puzzle board. </LI><LI>On the ``Start" line of the data set, <SPAN CLASS="MATH"><I>N</I></SPAN> represents the number of moves the player wants to be able to solve the puzzle within. </LI><LI>Both game board layout matrices will contain ALL numbers within the range mentioned above (inclusive), with no missing or repeated numbers, and one `<TT>X</TT>' (<EM>missing piece</EM>). </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, there will be exactly one output set, and there will be a <B>single blank line</B> separating output sets.<P>An output set consists of a string telling the player whether the puzzle is solvable within the number of moves specified in the input, along with the optimal number of moves necessary to obtain the Solution Board Layout if the puzzle is solvable within the number of specified moves. If the puzzle is not solvable within the specified number of moves, the number of specified moves is echoed back to the output. The output for each data set will consist of a single line, specified by the following format:<P><P><BR><!-- MATH
 $<Answer \ String>$
 --><SPAN CLASS="MATH">&lt; <I>Answer</I>&nbsp;<I>String</I> &gt;</SPAN> <TT>WITHIN</TT> <SPAN CLASS="MATH">[<I>Number</I>&nbsp;<I>Moves</I>]</SPAN> <TT>MOVES</TT><P><P><BR><SPAN CLASS="textbf">Notes:</SPAN><P><P><BR><B>IF</B> the puzzle is able to be solved within the specified number of moves:<P><DL COMPACT><DT></DT><DD><SPAN CLASS="MATH"><I>Answer</I>&nbsp;<I>String</I></SPAN> = <TT>SOLVABLE</TT></DD><DT></DT><DD><SPAN CLASS="MATH"><I>Number</I>&nbsp;<I>Moves</I></SPAN> = <SPAN CLASS="MATH">&lt;</SPAN><EM>An integer representing the optimal number of moves</EM><SPAN CLASS="MATH">&gt;</SPAN></DD></DL><P><P><BR><B>ELSE</B><P><DL COMPACT><DT></DT><DD><SPAN CLASS="MATH"><I>Answer</I>&nbsp;<I>String</I></SPAN> = <TT>NOT SOLVABLE</TT></DD><DT></DT><DD><SPAN CLASS="MATH"><I>Number</I>&nbsp;<I>Moves</I></SPAN> = <SPAN CLASS="MATH">&lt;</SPAN><EM>An integer representing the number of moves specified as input</EM><SPAN CLASS="MATH">&gt;</SPAN></DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
START 3 4
1 5 2
4 X 3
7 8 6
1 2 3
4 5 6
7 8 X
END
START 3 3
1 2 3 
7 X 8
6 5 4
1 2 3 
8 X 4
7 6 5
END
START 4 10
1 X 2 4
5 6 3 7
9 10 11 8
12 13 14 15
1 2 3 4
5 6 7 8
9 10 X 11
12 13 14 15
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
SOLVABLE WITHIN 4 MOVES

NOT SOLVABLE WITHIN 3 MOVES

SOLVABLE WITHIN 5 MOVES
</PRE><P>
______________________________________________________
2311||||||false||||||
<P>You're in space.<BR>You want to get home.<BR>There are asteroids.<BR>You don't want to hit them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.<P><P><BR>A single data set has 5 components:<P><OL><LI><EM>Start line</EM> - A single line, ``<TT>START</TT> <SPAN CLASS="MATH"><I>N</I></SPAN>", where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2311img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2311img1.png ALT="$ \le$">10</SPAN>. </LI><LI><EM>Slice list</EM> - A series of <SPAN CLASS="MATH"><I>N</I></SPAN> slices. Each slice is an <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> matrix representing a horizontal slice through the asteroid field. Each position in the matrix will be one of two values:<DL COMPACT><DT></DT><DD>'<TT>O</TT>' - (the letter ``oh") Empty space</DD><DT></DT><DD>'<TT>X</TT>' - (upper-case) Asteroid present</DD></DL></LI><LI><EM>Starting Position</EM> - A single line, ``<SPAN CLASS="MATH"><I>A</I>&nbsp;<I>B</I>&nbsp;<I>C</I></SPAN>", denoting the <SPAN CLASS="MATH">&lt;</SPAN>A,B,C<SPAN CLASS="MATH">&gt;</SPAN> coordinates of your craft's starting position. The coordinate values will be integers separated by individual spaces. </LI><LI><EM>Target Position</EM> - A single line, ``<SPAN CLASS="MATH"><I>D</I>&nbsp;<I>E</I>&nbsp;<I>F</I></SPAN>", denoting the <SPAN CLASS="MATH">&lt;</SPAN>D,E,F<SPAN CLASS="MATH">&gt;</SPAN> coordinates of your target's position. The coordinate values will be integers separated by individual spaces. </LI><LI><EM>End line</EM> - A single line, ``<TT>END</TT>" </LI></OL><P>The origin of the coordinate system is <SPAN CLASS="MATH">&lt; 0, 0, 0 &gt;</SPAN>. Therefore, each component of each coordinate vector will be an integer between 0 and <SPAN CLASS="MATH"><I>N</I> - 1</SPAN>, inclusive.<P><UL><LI>The first coordinate in a set indicates the column. Left column = 0. </LI><LI>The second coordinate in a set indicates the row. Top row = 0. </LI><LI>The third coordinate in a set indicates the slice. First slice = 0. </LI></UL><P>Both the Starting Position and the Target Position will be in empty space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, there will be exactly one output set, and there will be <B>no blank lines</B> separating output sets.<P>A single output set consists of a single line. If a route exists, the line will be in the format `<SPAN CLASS="MATH"><I>X</I>&nbsp;<I>Y</I></SPAN>', where <SPAN CLASS="MATH"><I>X</I></SPAN> is the same as <SPAN CLASS="MATH"><I>N</I></SPAN> from the corresponding input data set and <SPAN CLASS="MATH"><I>Y</I></SPAN> is the least number of moves necessary to get your ship from the starting position to the target position. If there is no route from the starting position to the target position, the line will be `<TT>NO ROUTE</TT>' instead.<P>A move can only be in one of the six basic directions: up, down, left, right, forward, back. Phrased more precisely, a move will either increment or decrement a single component of your current position vector by 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
START 1
O
0 0 0
0 0 0
END
START 3
XXX
XXX
XXX
OOO
OOO
OOO
XXX
XXX
XXX
0 0 1
2 2 1
END
START 5
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
XXXXX
XXXXX
XXXXX
XXXXX
XXXXX
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
0 0 0
4 4 4
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
1 0
3 4
NO ROUTE

______________________________________________________
2312||||||false||||||
<P>As director of the upcoming blockbuster movie <SPAN CLASS="textit">Deep Code 9</SPAN>, your employer<BR><SPAN CLASS="textit">21st Century Fox</SPAN> has assigned you the task of selecting the actors and actresses.<P><P><P><BR>The problem is that in the movie about 10 male and 10 female characters occur, and - with the tiny budget that you have been given - you simply cannot afford that many actors and actresses!<P>Looking closely at the movie script, however, you wonder if some of the characters could be played by the same person. For example, if Mr. Programmer and Mr. Hero never appear together at the same time during the movie, one actor can play both roles!<P><P><BR>You tell your boss your idea, and he agrees, as long as you adhere to the following rules:<P><OL><LI>Male characters can only be played by male actors, and female characters can only be played by female actresses. </LI><LI>Each character must be played by one actor/ actress throughout the whole movie. Changing the person who plays a given character during the movie is not allowed. </LI><LI>When two characters ever appear together at the same time during the movie, they must be played by different actors/ actresses. </LI></OL><P>Given these restrictions, your job is to determine the minimum number of actors and actresses needed to produce the movie.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several movie descriptions. Each description starts with one line that contains three integers <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> that specify the number of male <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2312img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2312img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> and female <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2312img1.png ALT="$ \le$"><I>F</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2312img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> characters occurring in the movie and the number of scenes that the movie has <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2312img1.png ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2312img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>.<P>On the second and third line, the names of the male and female characters are given.<P>Then <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> lines follow, each line describing one scene. Each of these lines contains the number of people who occur in the scene and the list of their names.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each movie description, output three lines:<P><UL><LI>a line saying: `<TT>Movie #<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark></TT>' where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of the movie </LI><LI>a line saying: `<TT>You need <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> actors and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> actresses.</TT>' where <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> is the solution.<P>Use singular (actor, actress), if <SPAN CLASS="MATH"><I>x</I> = 1</SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>y</I> = 1</SPAN> <tex2html_verbatim_mark>. </LI><LI>a blank line </LI></UL><P><P><BR>See the sample output below for the correct output format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1 1
Donald
Daisy
2 Donald Daisy
4 3 6
Tarzan Jim John Tom
Lucy Cynthia Jane
3 Jim John Tom
2 Tarzan Lucy
2 Jane Cynthia
2 Jim Jane
2 Tarzan Jim
2 Tarzan Jane
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Movie #1
You need 1 actor and 1 actress.

Movie #2
You need 3 actors and 2 actresses.
</PRE><P>
______________________________________________________
2313||||||false||||||
<P>A perfect square is a positive integer of which the square root is also an integer, for example, <SPAN CLASS="MATH">36 = 6 <TT>*</TT> 6</SPAN>.<P>There exists a mathematical theorem stating that every multiple of 4 (greater than 4) can be decomposed into the difference of two perfect squares, that is, for every integer <SPAN CLASS="MATH"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2313img1.png ALT="$ \ge$">2</SPAN>, let <SPAN CLASS="MATH"><I>k</I> = 4 <TT>*</TT> <I>j</I></SPAN>. There then exists two perfect squares <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> such that <SPAN CLASS="MATH"><I>k</I> = 4 <TT>*</TT> <I>j</I> = <I>a</I> - <I>b</I></SPAN><P>Note that there may be more than one pair <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> whose difference yields the desired value of <SPAN CLASS="MATH"><I>k</I></SPAN>. Your task will be to find the first such pair, that is, the pair with the smallest possible value of a (subject, of course, to a and b being perfect squares).<P><P><BR>Your task is to, given a positive integer greater than or equal to 8,<OL><LI>determine if it is a multiple of four </LI><LI>if it is, print out the smallest pair of perfect squares such that their difference yields the desired number. </LI></OL><P>For example, note that the number 40 can be decomposed as follows:<P><PRE>
49 - 9 = 40
</PRE>where, of course, <SPAN CLASS="MATH">49 = 7 <TT>*</TT> 7</SPAN>, and <SPAN CLASS="MATH">9 = 3 <TT>*</TT> 3</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input will be a list of line seperated positive integers. Some of them may not be multiples of 4. These should be ignored without generating any output.<P>Note that the smallest input number will be 8, and your largest input number will be <SPAN CLASS="MATH">2<SUP>32</SUP> - 1</SPAN>, or 4294967295. Input will be terminated by a value of 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your output must be the equation listing the solution, of the form<P><PRE>
&lt;a&gt; - &lt;b&gt; = &lt;k&gt;
</PRE>where <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> are the two perfect squares, and <SPAN CLASS="MATH"><I>k</I></SPAN> is the input value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
40 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
49 - 9 = 40
</PRE><P>
______________________________________________________
2314||||||false||||||
<P>This problem deals with finding the longest common subsequence between a given set of sequences. A subsequence of a given sequence is simply the given sequence with some elements, possibly none, removed. For example, (2,4,1,5,7) is a subsequence of (9,2,3,4,1,4,5,12,7,10,9). Every sequence is a subsequence of itself; the empty sequence is a subsequence of every sequence. Given two sequences A and B, we say that X is a common subsequence of A and B, if C is subsequence of both A and B. Given three sequences A, B, and C, we say that X is a common subsequence of A, B and C, if X is a subsequence of A, is a subsequence of B, and is a subsequence of C. The longest common subsequence of a given trio of sequences is the maximum-length common subsequence of the three sequences.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of several problem instances. The first line of the file will include a single integer, indicating the number of problem instances that will follow. Each problem instance consists of three lines, each line consisting of a sequence of positive integers, separated by space and terminated with a zero (the final zero is not considered part of the sequence). The length of the sequence will not be greater than 50.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, your program should output a single line consisting of a single integer, representing the length of the longest common subsequence of the two given sequences.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
2 1 3 5 3 8 5 9 4 0
1 2 3 4 8 9 12 14 0
4 1 2 3 4 8 12 9 14 9 2 0
3 1 2 4 5 6 0
3 1 2 4 5 6 0
3 1 2 4 5 6 0
3 2 1 9 10 3 8 4 9 2 3 4 0
1 3 2 9 4 2 4 2 3 4 5 2 4 0
1 3 2 3 9 3 2 2 4 2 2 9 4 2 3 4 4 2 1 0
2 1 4 2 3 9 2 3 4 2 4 0
2 2 2 2 4 0
1 2 3 4 2 4 4 9 2 4 2 3 4 0
2 1 3 2 4 9 2 3 0
8 9 8 9 8 0
5 7 6 7 9 7 5 0
1 2 3 4 5 0
6 7 8 9 10 0
3 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
6
7
5
1
0
</PRE><P>
______________________________________________________
2315||||||false||||||
<P>You are given a file containing several data sets. The first line of the file contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, and the rest of the file contains one integer per line. The number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> refers to the number of data sets in the file. Each data set consists of a number of lines, each line containing a single integer, terminated by a line containing the integer 0. For each data set, we would like to know whether the data set contains a data element <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> with the property that <SPAN CLASS="MATH">2<I>x</I></SPAN> <tex2html_verbatim_mark> is equal to the sum of the other data elements (not including <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>). If the data set includes more than one element with this property then the data element which occurs first is the one that should be printed. If no such element exists, then the number `<TT>0</TT>' should be printed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will begin with an input line consisting of a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. The number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> refers to the number of data sets in the file. Each data set consists of a number of lines, each line consisting of a single integer (in the range -30000...30000), and is terminated by a line containing only the number `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, output a single line containing the integer <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
-5
15
42
-6
32
18
30
0
2
8
13
6
10
0
4
6
-8
19
-9
12
0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
42
13
0
0
</PRE><P>
______________________________________________________
2316||||||false||||||
<P>
A well-known problem is to determine the maximum number of queens that 
can be placed on a chess-board without any of them attacking any other. 
In this problem you have to answer this question for a new type of 
chess piece, the peasant. 

<P>
Unlike the other pieces, a peasant's valid moves 
change from time to time. You will thus be given the valid moves as 
part of the input. Each valid move consists of a pair <SPAN CLASS="MATH">(<I>R</I>, <I>C</I>)</SPAN>, indicating 
that the peasant may move <SPAN CLASS="MATH"><I>R</I></SPAN> rows forward and <SPAN CLASS="MATH"><I>C</I></SPAN> columns right, provided 
that this does not take the piece off the board. Negative values 
indicate motion in the opposite direction. For example, a knight in chess 
would be described by the valid moves (+/-1, +/-2) and (+/-2, +/-1). Like a 
knight, a peasant moves directly to the target square, even if there 
are other pieces in between. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of multiple cases. 
Each cases starts with a line containing <SPAN CLASS="MATH"><I>N</I></SPAN>, the width and height of the 
board. The second line contains <SPAN CLASS="MATH"><I>M</I></SPAN>, the number of valid moves that a 
peasant has. The next <SPAN CLASS="MATH"><I>M</I></SPAN> lines describe the valid moves for this test case. 
Each line consists of two space-separated integers, <SPAN CLASS="MATH"><I>R</I></SPAN> and <SPAN CLASS="MATH"><I>C</I></SPAN>, which have 
the meanings described above. The last test case is followed by a line 
containing only a `<TT>0</TT>'. 

<P>
The following constraints are in place: <!-- MATH
 $1 \le N \le
12$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2316img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2316img1.png
 ALT="$ \le$">12</SPAN>; <!-- MATH
 $0 \le R \le 1$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2316img1.png
 ALT="$ \le$"><I>R</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2316img1.png
 ALT="$ \le$">1</SPAN> and <!-- MATH
 $-N < C < N$
 -->
<SPAN CLASS="MATH">- <I>N</I> &lt; <I>C</I> &lt; <I>N</I></SPAN>. For each case, each <SPAN CLASS="MATH">(<I>R</I>, <I>C</I>)</SPAN> pair is 
unique and not equal to (0, 0). 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, determine the maximum number 
of peasants that can be placed on a board without any peasant attacking 
(i.e. being able to move directly to the square occupied by) any other; 
write this number to the output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
3 
1 -1
1 0
1 1
4 
2 
0 -1
1 0
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 
8
</PRE> 

<P>

<P><P>
<BR>

<B>Note:</B> The drawings below show possible maximum layouts, with <TT>*</TT>'s representing peasants and <TT>.</TT>'s representing unoccupied squares.

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<TT>***</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>         <TT>*.*.</TT>  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>...</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>         <TT>.*.*</TT>  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>***</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>         <TT>*.*.</TT>  </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>         <TT>.*.*</TT> </TD></TR>
</TABLE>

</DIV>

<P>

______________________________________________________
2317||||||false||||||
BIGIANT UNIVERSITY reports payroll expenses to the administration
giving totals by department within school.  For instance, within
the school of arts and sciences totals would be accumulated for
the Psychology, Economics, Philosophy, and other departments.

<P>
Your task is to write a program, which will accumulate total
payroll expenses by department within school and report them.
You will not list individual pay amounts, only the totals by
department and by school.

<P>
You must report the total number of employees and total pay
amount by department and by school, and give a grand total for
the entire university.  The data from which these totals are to
be calculated are arranged in order by department within school.
This process is known as "control break processing" because a
control break is said to have occurred each time a department or
school changes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Below there are an example of the type of data, which you will
be processing:  (End of input data is indicated by a line
containing all nines.) The columns for the data are specified
as:

<P>
<PRE>
SCHOOL NUMBER    DEPARTMENT NUMBER    INDIVIDUAL PAY AMOUNT
Column 1            Cols. 2 &amp; 3          Cols. 4-10
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For the sample data below, the printed report would appear as
of the sample output that follows.

<P>

<P>
<BR>
All titles and identifying information should be identical to the
given output.  Output should have <TT>SCHOOL</TT>, <TT>DEPARTMENT</TT>, 
and <TT>NO. OF EMPLOYEES</TT> columns right aligned.  The <TT>PAYROLL</TT> column should be
decimally aligned.  The <TT>SCHOOL</TT> and <TT>UNIVERSITY TOTAL</TT> lines should
also contain entries that are right aligned and decimally aligned
with the data above them.  All <TT>PAYROLL</TT> numbers, should include
commas where appropriate.  All titles (including the required
report title) and identifying information should be in upper case
letters.  Blank lines should be included after the report title,
the heading line, and each school total line.  Horizontal spacing
between columns may be approximate; however, data should be under
appropriate headings.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1010050000
1010025050
1010037825
1020078550
1020046520
2010075000
2010049675
2020120000
2020037800
2030074250
2040037500
2040065050
3010091613
3010085544
3020057515
3020110525
9999999999
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
                           BIGIANT UNIVERSITY
                          PAYROLL EXPENSE REPORT

SCHOOL      DEPARTMENT              NO. OF EMPLOYEES    PAYROLL

     1           01                      3              1,128.75
     1           02                      2              1,250.70
                   *SCHOOL TOTALS*       5              2,379.45

     2           01                      2              1,246.75
     2           02                      2              1,578.00
     2           03                      1                742.50
     2           04                      2              1,025.50
                   *SCHOOL TOTALS*       7              4,592.75

     3           01                      2              1,771.57
     3           02                      2              1,680.40
                   *SCHOOL TOTALS*       4              3,451.97

              **UNIVERSITY TOTALS*      16              10,424.17
</PRE> 

<P>

______________________________________________________
2318||||||false||||||
<P>The purpose of this problem is to determine whether two given line segments intersect. Two line segments are considered to intersect if they have at least one endpoint in common. A line segment is defined by its two endpoints: <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>. The input file will consist of a number of pairs of linear segments. For each pair, if the two line segments intersect, then you will print ``<TT>yes</TT>", if they do not, you will print ``<TT>no</TT>."<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of several problem instances, each problem instance representing a pair of line segments. The first line of the file will include a single integer, indicating the number of problem instances that will follow. Each problem instance consists of two lines: the first line contains four positive integer numbers (in the range <SPAN CLASS="MATH">0...1000</SPAN> <tex2html_verbatim_mark>): <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, separated by space, representing the two endpoints of the first line segment; the second line contains four integer numbers (in the range <SPAN CLASS="MATH">0...100</SPAN> <tex2html_verbatim_mark>): <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, separated by space, representing the two endpoints of the second line segment.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, your program should output a single line consisting of the word ``<TT>yes</TT>" if the two line segments intersect and the word ``<TT>no</TT>" if the two line segments do not intersect.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
100 100 200 200
200 100 100 200
50 60 80 90
40 50 45 70
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
yes
no
</PRE><P>
______________________________________________________
2319||||||false||||||
<P>The Cairo Metro Authority has asked you to write a program to compute the average time necessary to travel between any two metro stations in Cairo. You are given the number of stations; for every pair of stations that are directly adjacent, you are given the average time needed to travel from one station to the other. (Mathematically, this is a weighted undirected graph showing which stations are connected to which). Connections are assumed to be symmetric, i.e. the length of the connection from a to b will always be the same as the length from b to a. For every station in Cairo, you are to find the shortest path from this station to all other stations. You are then to find the average shortest path over the entire city.<P>There might be some pairs of stations that have no path between them; such pairs of stations should be excluded from the average computation.<P><P><BR><SPAN CLASS="textbf">Example</SPAN><P>Suppose we have 7 stations {a,b,c,d,e,f,g} whose connections are shown in the following table:<P><P><BR><TABLE COLS=8><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>f</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>g</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>G</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR></TABLE><P><P><BR><SPAN CLASS="textbf">Solution to Example</SPAN><P>The following table shows the length of the shortest path between every pair of stations; note that some pairs of stations have no path between them:<P><P><BR><TABLE COLS=8><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>f</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>g</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>f</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>g</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR></TABLE><P><P><BR>The average shortest path length, over all pairs of stations which have paths between them, is 3.7272.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of several problem instances. The first line of the file will include a single integer, indicating the number of problem instances that will follow. Each problem instance is structured as follows: the first line is an integer indicating the number of stations; the second line is an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of connections <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>; this is followed by <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines, each line representing a connection. Each connection consists of three integers: the first two integers representing the two stations numbers, and the third integer representing the length of the connection. The maximum number of stations in any problem instance will be 40. The maximum connection length in any problem instance will be 50.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, your program should output a single line consisting of a single floating point number, representing the average length of the shortest path over all pairs of stations which have paths. This floating point number should be printed with exactly four decimal places; anything after the fourth decimal place should be truncated.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
7
7
1           2           2
1           3           5
2           3           3
2           4           4
3           4           1
3           5           2
6           7           3
3
2
1 2 1
3 2 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3.7272
2.0000
</PRE><P>
______________________________________________________
2320||||||false||||||
<P>
It's 3000 years ago. The Pharao's pyramid has just been finished, and now the interior needs to be worked
on. However, it's pitch dark inside, and the problem of providing light for the workers has to be solved.

<P>
Electric light hasn't been invented yet, and lighting a fire inside the pyramid isn't a good solution either,
because the interior should stay clean of smoke and ash. Therefore, the senior architect's proposal is to use
mirrors to redirect sunlight from the entrance to the construction sites. From time to time, after work had
been finished at one place, the mirrors will have to be realigned in order to direct the light to another place.

<P>
For this task of realigning the mirrors, an algorithm is needed. The input will be a two-dimensional map of
one floor. The map displays the origin and the desired destination of the light, all obstacles and all mirrors,
and the current path of the light. The output should be another map in which the mirrors are realigned
appropriately (if neccessary) so that the light reaches the destination.

<P>
As the Pharao's chief software engineer, it's your job to design this algorithm. The ``computers"  - a group
of mathematically trained workers - will execute the program manually later. (Now you know why it took
decades to build the pyramids.)

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file consists of one or more test cases. Each test case starts with a line that contains two integers:
the number of rows <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> and the number of columns <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> of the map.

<P>
Then a map of the current situation follows, given as R rows of C characters each.

<P>
The possible characters are <TT>'O'</TT>, <TT>'D'</TT>, <TT>'/'</TT>, <TT>'<!-- MATH
 $\backslash$
 -->
<SPAN CLASS="MATH">&#92;</SPAN>
<tex2html_verbatim_mark>'</TT>, <TT>'-'</TT>, <TT>'|'</TT>, <TT>'+'</TT>, <TT>'#'</TT> and <TT>'.'</TT>. They stand for:

<P>

<P>
<BR>
<TABLE COLS=2>
<COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<TT>O</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       origin of light </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>D</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       destination of light </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>/</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       mirror in position 1 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT><!-- MATH
 $\backslash$
 -->
<SPAN CLASS="MATH">&#92;</SPAN>
<tex2html_verbatim_mark></TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       mirror in position 2 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>#</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       obstacle </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>.</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       free space </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>|</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       light ray moving vertically </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>-</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       light ray moving horizontally </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>+</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       crossing light rays </TD></TR>
</TABLE>

<P>

<P>
<BR>
The origin of light <TT>'O'</TT> will always be on the border. The remaining border will consist entirely of <TT>'#'</TT>
characters. Light always travels vertically or horizontally, and reflections are always 90-degree turns.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the same map with the following two modifications:

<P>

<UL>
<LI>Turn mirrors where it is neccessary, i.e. replace <TT>/</TT> by <TT><!-- MATH
 $\backslash$
 -->
<SPAN CLASS="MATH">&#92;</SPAN>
<tex2html_verbatim_mark></TT> or vice versa.
</LI>
<LI>Redraw the light ray, i.e. change the characters <TT>|</TT>,<TT>-</TT>,<TT>+</TT> and <TT>.</TT>  accordingly, so that it goes from <TT>O</TT> to <TT>D</TT>.
</LI>
</UL>

<P>

<P>
<BR>
The characters <TT>O</TT>, <TT>D</TT>, and <TT>#</TT> always remain unchanged.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 6
###O##
#..|.#
#D.\-#
######
11 49
##O##############################################
##|#............................................#
#.|............................../..\...........#
#.|.....\.......................................#
#.|..............#####..........................#
#.|......../......................../...........#
#.|..............#####..........................#
#.\------------------------------\..............#
#......###...###.................|..............#
#......###.D.###-----------------/..............#
#################################################
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
###O##
#..|.#
#D-/.#
######

##O##############################################
##|#............................................#
#.|............................../--\...........#
#.|.....\........................|..|...........#
#.|..............#####...........|..|...........#
#.|......../---------------------+--/...........#
#.|........|.....#####...........|..............#
#.\--------+---------------------/..............#
#......###.|.###................................#
#......###.D.###................./..............#
#################################################
</PRE> 


______________________________________________________
2321||||||false||||||
<p>
Adam and Eve enter this year's ACM International Collegiate Programming
Contest. Last night, they played the Calendar Game, in celebration of
this contest. This game consists of the dates from January 1, 1900 to
November 4, 2001, the contest day. The game starts by randomly
choosing a date from this interval. Then, the players, Adam and Eve,
make moves in their turn with Adam moving first: Adam, Eve, Adam, Eve,
etc. There is only one rule for moves and it is simple: from a current
date, a player in his/her turn can move either to the next calendar
date or the same day of the next month. When the next month does not
have the same day, the player moves only to the next calendar date.
For example, from December 19, 1924, you can move either to December
20, 1924, the next calendar date, or January 19, 1925, the same day of
the next month. From January 31 2001, however, you can move only to
February 1, 2001, because February 31, 2001 is invalid.
</p>
<p> A player wins the game when he/she exactly reaches the date of
November 4, 2001. If a player moves to a date after November 4, 2001,
he/she looses the game.
</p>
<p>
Write a program that decides whether, given an
initial date, Adam, the first mover, has a winning strategy.
</p>
<p>
For this
game, you need to identify leap years, where February has 29 days. In
the Gregorian calendar, leap years occur in years exactly divisible by
four. So, 1993, 1994, and 1995 are not leap years, while 1992 and 1996
are leap years. Additionally, the years ending with 00 are leap years
only if they are divisible by 400. So, 1700, 1800, 1900, 2100, and
2200 are not leap years, while 1600, 2000, and 2400 are leap years.
</p>
<div align="center"><br>
</div>
<p>
</p>
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001001000000000000000">Input</a>&nbsp;</font>
</h2>
The input consists of <i>T</i>test cases. The number of test cases (<i>T</i>) is given in the first line of the input file. Each
test case is written in a line and corresponds to an initial date. The
three integers in a line, YYYY MM DD,
represent the date of the DD-th day of MM-th month in the year of YYYY.
Remember that initial dates are
randomly chosen from the interval between January 1, 1900 and November
4, 2001.
<p></p>
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001002000000000000000">Output</a>&nbsp;</font>
</h2>
Print exactly one line for each test case. The line should contain the
answer "YES" or "NO" to the question of
whether Adam has a winning strategy against Eve. Since we have <i>T</i> test
cases, your program should output
totally <i>T </i>lines of "YES" or "NO".
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001003000000000000000">Sample Input</a> <br>
</font></h2>

<pre>
3
2001 11 3
2001 11 2
2001 10 3
</pre>

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001004000000000000000">Sample Output</a>&nbsp;</font>
</h2>

<pre>
YES
NO
NO
</pre>


______________________________________________________
2322||||||false||||||
There is a pile of <i>n </i>wooden sticks. The length and weight of
each stick are known in advance. The sticks are
to be processed by a woodworking machine in one by one fashion. It
needs some time, called setup time, for
the machine to prepare processing a stick. The setup times are
associated with cleaning operations and
changing tools and shapes in the machine. The setup times of the
woodworking machine are given as follows:
<ul>
<li>The setup time for the first wooden
stick is 1 minute.</li>
<li>
Right after processing a stick of length <i>l </i>and weight <i>w
</i>, the machine will need no setup time for a stick
of length <i>l</i>' and weight <i>w</i>' if <i>l </i><=<i>l</i>'
and <i>w </i><=<i>w</i>' . </li>
</ul>
Otherwise, it will need 1 minute for setup.<br>
You are to find the minimum setup time to process a given pile of <i>n
</i>wooden sticks. For example, if you have
five sticks whose pairs of length and weight are (4,9), (5,2), (2,1), (3,5),
and (1,4) then the minimum setup
time should be 2 minutes since there is a sequence of pairs (1,4),
(3,5), (4,9), (2,1), (5,2).
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001001000000000000000">Input</a> <br>
</font></h2>
The input consists of <i>T</i> test cases. The number of test cases (<i>T</i>) is given in the first line of the input file. Each
test case consists of two lines: The first line has an integer <i>n</i>,
1&lt;=<i>n&lt;=</i>5000, that represents the number of
wooden sticks in the test case, and the second line contains 2<i>n </i>positive
integers <i>l<sub>1</sub></i>, <i>w<sub>1</sub></i>, <i>l<sub>2</sub></i>,
<i>w<sub>2</sub></i>, ..., <i>l<sub>n</sub></i>, <i>w<sub>n</sub></i>,
each of magnitude at most 10000, where <i>l<sub>i</sub> </i>and <i>w<sub>i</sub>
</i>are the length and weight of the <i>i </i>th wooden stick,
respectively. The 2<i>n </i>integers are delimited by one or
more spaces.

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001002000000000000000">Output</a>&nbsp;</font>
</h2>
The output should contain the minimum setup time in minutes, one per
line.
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001003000000000000000">Sample Input</a> <br>
</font></h2>

<pre>
3
5
4 9 5 2 2 1 3 5 1 4
3
2 2 1 1 2 2
3
1 3 2 2 3 1
</pre>

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001004000000000000000">Sample Output</a>&nbsp;</font>
</h2>

<pre>
2
1
3
</pre>


______________________________________________________
2323||||||false||||||
Consider polynomials whose coefficients are 0 and 1. Addition of two
polynomials is achieved by 'adding' the
coefficients for the corresponding powers in the polynomials. The
addition of coefficients is performed by
addition modulo 2, i.e., (0 + 0) mod 2 = 0, (0 + 1) mod 2 = 1, (1 + 0)
mod 2 = 1, and (1 + 1) mod 2 = 0. Hence,
it is the same as the exclusive-or operation.
<br>
<div style="text-align: center;"><span style="font-family: monospace;">(x<sup>6</sup>
+ x<sup>4</sup> + x<sup>2</sup> + x + 1) + (x<sup>7</sup> + x + 1) = x<sup>7</sup>
+ x<sup>6</sup> + x<sup>4</sup> + x<sup>2</sup></span><br>
</div>
<br>
Subtraction of two polynomials is done similarly. Since subtraction of
coefficients is performed by subtraction
modulo 2 which is also the exclusive-or operation, subtraction of
polynomials is identical to addition of
polynomials.
<br>
<div style="text-align: center;"><span style="font-family: monospace;">(x<sup>6</sup>
+ x<sup>4</sup> + x<sup>2</sup> + x + 1) - (x<sup>7</sup> + x + 1) = x<sup>7</sup>
+ x<sup>6</sup> + x<sup>4</sup> + x<sup>2<br>
<br>
</sup></span></div>
Multiplication of two polynomials is done in the usual way (of course,
addition of coefficients is performed by
addition modulo 2).<br>
<br>
<div style="text-align: center;"><span style="font-family: monospace;">(x<sup>6</sup>
+ x<sup>4</sup> + x<sup>2</sup> + x + 1)(x<sup>7</sup> + x + 1) = x<sup>13</sup>
+ x<sup>11</sup> + x<sup>9</sup> + x<sup>8</sup> + x<sup>6</sup> + x<sup>5</sup>
+ x<sup>4</sup> + x<sup>3</sup> + 1<br>
<br>
</span></div>
Multiplication of two polynomials f(x) and g(x) modulo a polynomial
h(x) is the remainder of f(x)g(x) divided
by h(x).
<br>
<div style="text-align: center;"><span style="font-family: monospace;">(x<sup>6</sup>
+ x<sup>4</sup> + x<sup>2</sup> + x + 1)(x<sup>7</sup> + x + 1) modulo
(x<sup>8</sup> + x<sup>4</sup> + x<sup>3</sup> + x + 1) = x<sup>7</sup>
+ x<sup>6</sup> + 1<br>
<br>
</span></div>
The largest exponent of a polynomial is called its degree. For example,
the degree of <span style="font-family: monospace;">x</span><sup
 style="font-family: monospace;">7</sup><span
 style="font-family: monospace;"> + x</span><sup
 style="font-family: monospace;">6</sup><span
 style="font-family: monospace;"> + 1</span> is 7.<br>
Given three polynomials f(x), g(x), and h(x), you are to write a
program that computes f(x)g(x) modulo h(x).<br>
We assume that the degrees of both f(x) and g(x) are less than the
degree of h(x). The degree of a polynomial
is less than 1000.<br>
<br>
Since coefficients of a polynomial are 0 or 1, a polynomial can be
represented by d+1 and a bit string of
length d+1, where d is the degree of the polynomial and the bit string
represents the coefficients of the
polynomial. For example, <span style="font-family: monospace;">x<sup>7</sup>
+ x<sup>6</sup> + 1</span> can be represented by<br>
<br>
<div style="text-align: center;"><span style="font-family: monospace;">8
1 1 0 0 0 0 0 1.</span></div>
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001001000000000000000">Input</a>&nbsp;</font>
</h2>
The input consists of T test cases. The number of test cases (T) is
given in the first line of the input file. Each
test case consists of three lines that contain three polynomials f(x),
g(x), and h(x), one per line. Each
polynomial is represented as described above.
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001002000000000000000">Output</a>&nbsp;</font>
</h2>
The output should contain the polynomial f(x)g(x) modulo h(x), one per
line.<br>
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001003000000000000000">Sample Input</a> <br>
</font></h2>

<pre>
2
7 1 0 1 0 1 1 1
8 1 0 0 0 0 0 1 1
9 1 0 0 0 1 1 0 1 1
10 1 1 0 1 0 0 1 0 0 1
12 1 1 0 1 0 0 1 1 0 0 1 0
15 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1
</pre>

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001004000000000000000">Sample Output</a>&nbsp;</font>
</h2>

<pre>
8 1 1 0 0 0 0 0 1
14 1 1 0 1 1 0 0 1 1 1 0 1 0 0
</pre>

______________________________________________________
2324||||||false||||||
It is well known that a human gene can be considered as a sequence,
consisting of four nucleotides, which are
simply denoted by four letters, A, C, G, and T. Biologists have been
interested in identifying human genes
and determining their functions, because these can be used to diagnose
human diseases and to design new
drugs for them.<br>
<br>
A human gene can be identified through a series of time-consuming
biological experiments, often with the
help of computer programs. Once a sequence of a gene is obtained, the
next job is to determine its function.
One of the methods for biologists to use in determining the function of
a new gene sequence that they have
just identified is to search a database with the new gene as a query.
The database to be searched stores many
gene sequences and their functions - many researchers have been
submitting their genes and functions to the<br>
database and the database is freely accessible through the Internet.<br>
<br>
A database search will return a list of gene sequences from the
database that are similar to the query gene.
Biologists assume that sequence similarity often implies functional
similarity. So, the function of the new
gene might be one of the functions that the genes from the list have.
To exactly determine which one is the
right one another series of biological experiments will be needed.<br>
<br>
Your job is to make a program that compares two genes and determines
their similarity as explained below.<br>
Your program may be used as a part of the database search if you can
provide an efficient one.<br>
<br>
Given two genes AGTGATG and GTTAG, how similar are they? One of the
methods to measure the similarity
of two genes is called alignment. In an alignment, spaces are inserted,
if necessary, in appropriate positions of
the genes to make them equally long and score the resulting genes
according to a scoring matrix.<br>
<br>
For example, one space is inserted into AGTGATG to result in AGTGAT-G,
and three spaces are inserted into
GTTAG to result in -GT--TAG. A space is denoted by a minus sign
(-). The two genes are now of equal
length. These two strings are aligned:<br>
<div style="text-align: center; font-family: monospace;">AGTGAT-G<br>
-GT--TAG<br>
</div>
In this alignment, there are four matches, namely, G in the second
position, T in the third, T in the sixth, and G
in the eighth. Each pair of aligned characters is assigned a score
according to the following scoring matrix.<br>
<br>
<table
 style="width: 495px; height: 160px; text-align: left; margin-left: auto; margin-right: auto;"
 border="1" cellspacing="2" cellpadding="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><br>
      </td>
      <td style="vertical-align: top;">A<br>
      </td>
      <td style="vertical-align: top;">C<br>
      </td>
      <td style="vertical-align: top;">G<br>
      </td>
      <td style="vertical-align: top;">T<br>
      </td>
      <td style="vertical-align: top;">-<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">A<br>
      </td>
      <td style="vertical-align: top;">5<br>
      </td>
      <td style="vertical-align: top;">-1<br>
      </td>
      <td style="vertical-align: top;">-2<br>
      </td>
      <td style="vertical-align: top;">-1<br>
      </td>
      <td style="vertical-align: top;">-3<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">C<br>
      </td>
      <td style="vertical-align: top;">-1<br>
      </td>
      <td style="vertical-align: top;">5<br>
      </td>
      <td style="vertical-align: top;">-3<br>
      </td>
      <td style="vertical-align: top;">-2<br>
      </td>
      <td style="vertical-align: top;">-4<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">G<br>
      </td>
      <td style="vertical-align: top;">-2<br>
      </td>
      <td style="vertical-align: top;">-3<br>
      </td>
      <td style="vertical-align: top;">5<br>
      </td>
      <td style="vertical-align: top;">-2<br>
      </td>
      <td style="vertical-align: top;">-2<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">T<br>
      </td>
      <td style="vertical-align: top;">-1<br>
      </td>
      <td style="vertical-align: top;">-2<br>
      </td>
      <td style="vertical-align: top;">-2<br>
      </td>
      <td style="vertical-align: top;">5<br>
      </td>
      <td style="vertical-align: top;">-1<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">-<br>
      </td>
      <td style="vertical-align: top;">-3<br>
      </td>
      <td style="vertical-align: top;">-4<br>
      </td>
      <td style="vertical-align: top;">-2<br>
      </td>
      <td style="vertical-align: top;">-1<br>
      </td>
      <td style="vertical-align: top;">*<br>
      </td>
    </tr>
  </tbody>
</table>
<br>
* denotes that a space-space match is not allowed. The score of the
alignment above is (-3)+5+5+(-2)+(-3)+5+(-3)+5=9.<br>
<br>
Of course, many other alignments are possible. One is shown below (a
different number of spaces are inserted
into different positions):<br>
<div style="text-align: center;"><span style="font-family: monospace;">AGTGATG</span><br
 style="font-family: monospace;">
<span style="font-family: monospace;">-GTTA-G</span><br
 style="font-family: monospace;">
</div>
<br>
This alignment gives a score of (-3)+5+5+(-2)+5+(-1) +5=14. So, this
one is better than the previous one. As
a matter of fact, this one is optimal since no other alignment can have
a higher score. So, it is said that the
similarity of the two genes is 14.<br>

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001001000000000000000">Input</a>&nbsp;</font>
</h2>
The input consists of <i>T</i> test cases. The number of test cases (<i>T</i>) is given in the first line of the input file. Each
test case consists of two lines: each line contains an integer, the
length of a gene, followed by a gene sequence.
The length of each gene sequence is at least one and does not exceed
100.
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001002000000000000000">Output</a>&nbsp;</font>
</h2>
The output should print the similarity of each test case, one per line.<br>
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001003000000000000000">Sample Input</a> <br>
</font></h2>

<pre>
2
7 AGTGATG
5 GTTAG
7 AGCTATT
9 AGCTTTAAA
</pre>

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001004000000000000000">Sample Output</a>&nbsp;</font>
</h2>

<pre>
14
21
</pre>

______________________________________________________
2325||||||false||||||
This puzzle consists of a random sequence of <i>m </i>black disks and
<i>n </i>white disks on an oval-shaped track, with a
turnstile capable of flipping (i.e., reversing) three consecutive
disks. In Figure 1, there are 8 black disks and 10
white disks on the track. You may spin the turnstile to flip the three
disks in it or shift one position clockwise
for each of the disks on the track (Figure 1).<br>
<center><img src="http://livearchive.onlinejudge.org/external/23/p2325a.gif></center>
The goal of this puzzle is to gather the disks of the same color in
adjacent positions using flips and shifts.<br>
<center><img src="http://livearchive.onlinejudge.org/external/23/p2325a.gif></center>
<br>
You are to write a program which decides whether a given sequence can
reach a goal or not. If a goal is
reachable, then write a message "YES"; otherwise, write a message "NO".<br>
<br>

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001001000000000000000">Input</a>&nbsp;</font>
</h2>
The input consists of <i>T</i> test cases. The number of test cases (<i>T</i>) is given in the first line of the input file. Each
of the next <i>T </i>lines gives a test case. A test case consists of
an integer, representing the sum of <i>m </i>and <i>n</i>, and a
sequence of <i>m+n </i>0s and 1s, representing an initial sequence. A
0 denotes a white disk and a 1 denotes a black
disk. The sum of <i>m </i>and <i>n </i>is at least 10 and does not
exceed 30. There is a space between numbers.
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001002000000000000000">Output</a>&nbsp;</font>
</h2>
The output should print either "YES" or "NO" for each test case, one
per line.<br>
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001003000000000000000">Sample Input</a> <br>
</font></h2>

<pre>
2
18 0 0 1 0 1 1 1 1 0 1 0 0 1 0 0 0 0 1
14 1 1 0 0 1 1 1 0 0 1 1 0 1 0
</pre>

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001004000000000000000">Sample Output</a>&nbsp;</font>
</h2>

<pre>
YES
NO
</pre>

______________________________________________________
2326||||||false||||||
The famous ACM (Advanced Computer Maker) Company has rented a floor of
a building whose shape is in
the following figure.
<center><img src="http://livearchive.onlinejudge.org/external/23/p2326a.gif></center>
The floor has 200 rooms each on the north side and south side along the
corridor. Recently the Company
made a plan to reform its system. The reform includes moving a lot of
tables between rooms. Because the
corridor is narrow and all the tables are big, only one table can pass
through the corridor. Some plan is needed
to make the moving efficient. The manager figured out the following
plan: Moving a table from a room to
another room can be done within 10 minutes. When moving a table from
room <i>i </i>to room <i>j</i>, the part of the
corridor between the front of room <i>i </i>and the front of room <i>j
</i>is used. So, during each 10 minutes, several
moving between two rooms not sharing the same part of the corridor will
be done simultaneously. To make it
clear the manager illustrated the possible cases and impossible cases
of simultaneous moving.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellspacing="2"
 cellpadding="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><br>
      </td>
      <td style="vertical-align: top;">Table moving<br>
      </td>
      <td style="vertical-align: top;">Reason<br>
      </td>
    </tr>
    <tr>
      <td colspan="1" rowspan="2" style="vertical-align: middle;">Possible<br>
      </td>
      <td style="vertical-align: top;">( room 30 to room 50) and (room
60 to room 90)<br>
      </td>
      <td style="vertical-align: top;">no part of corridor is shared<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">(room 11 to room 12) and (room
14 to room 13)<br>
      </td>
      <td style="vertical-align: top;">no part of corridor is shared<br>
      </td>
    </tr>
    <tr>
      <td colspan="1" rowspan="3" style="vertical-align: middle;">Impossible<br>
      </td>
      <td style="vertical-align: top;">(room 20 to room 40) and (room
31 to room 80)<br>
      </td>
      <td style="vertical-align: top;">corridor in front of room 31 to
room 40 is shared<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">(room 1 to room 4) and (room 3
to room 6) <br>
      </td>
      <td style="vertical-align: top;">corridor in front of room 3 is
shared <br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">(room 2 to room 8) and (room 7
to room 10) <br>
      </td>
      <td style="vertical-align: top;">corridor in front of room 7 is
shared <br>
      </td>
    </tr>
  </tbody>
</table>
<br>
For each room, at most one table will be either moved in or moved out.
Now, the manager seeks out a method
to minimize the time to move all the tables. Your job is to write a
program to solve the manager's problem.
<p>
</p>
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001001000000000000000">Input</a>&nbsp;</font>
</h2>
The input consists of <i>T</i> test cases. The number of test cases (<i>T</i>) is given in the first line of the input file. Each
test case begins with a line containing an integer <i>N </i>, 1&lt;=<i>N</i><span
 style="font-style: italic;">&lt;=</span>200 , that represents the
number of tables to move.
Each of the following <i>N </i>lines contains two positive integers <i>s
</i>and <i>t, </i>representing that a table is to move from
room number <i>s </i>to room number <i>t </i>(each room number
appears at most once in the <i>N </i>lines). From the <i>N</i>+3-rd
line, the remaining test cases are listed in the same manner as above.
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001002000000000000000">Output</a>&nbsp;</font>
</h2>
The output should contain the minimum time in minutes to complete the
moving, one per line.
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001003000000000000000">Sample Input</a> <br>
</font></h2>

<pre>
3
4
10 20
30 40
50 60
70 80
2
1 3
2 200
3
10 100
20 80
30 50
</pre>

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001004000000000000000">Sample Output</a>&nbsp;</font>
</h2>

<pre>
10
20
30
</pre>

______________________________________________________
2327||||||false||||||
We have a map for farming land in a country. The whole farming land of
the country is divided into a set of
disjoint farming regions. Each farmer owns only one farming region in
this country. There is a boundary fence
between two neighboring farming regions. The farmland map for this
country can be represented in a plane
graph. The following Figure-1 shows one example.<br>
<br>
<center><img src="http://livearchive.onlinejudge.org/external/23/p2327a.gif></center>
<div style="text-align: left;">There are two types of edges, boundary
edge and non-boundary edge. All edges of G(V,E) except (v8, v6) and
(v11, v10) are boundary edges which are between two neighboring farming
regions. The "proper farming
region" in a Farmland graph is a closed region bounded by a simple
cycle and it should not contain any
vertices or edges inside. In this figure, the polygon &lt;v1,v9,v8,v7
&gt; is a proper farming region, and the region &lt;
v2, v1, v7, v8 , v2, v5, v4, v3 &gt; is not a proper farming region
since its boundary cycle is not simple.<br>
<br>
We assume that the farmland graph G(V,E) is a simple connected graph,
which does not allow self-loops
(Figure-2 (a)) and parallel edges (Figure-2 (b)). Also in Farmland
graph G(V,E), we do not consider the outer
face of G(V,E). You can see that there are 2 proper farming regions in
G(V,E) shown in Figure-1, namely
&lt;v1,v9,v8,v7&gt;
and &lt;v2,v3,v4,v5&gt;, since there are no vertices or edges inside.
But the polygon&lt;v1,v7,v8,v2&gt; is not
a proper farming region since vertex v3, v4, and v5 are located in that
region. Similarly, the region
&lt;v9,v11,v12,v8&gt; is not a proper region because a vertex v10 is
inside the region. A degenerate polygon &lt;v6, v8&gt;
is not a proper region because it has no valid area inside.<br>
<center><img src="http://livearchive.onlinejudge.org/external/23/p2327a.gif></center>
<div style="text-align: left;"><br>
There are other assumptions for input farmland graph data.<br>
<div style="margin-left: 40px;">1. There is at least one proper farming
region.<br>
2. The position of each vertex in Farmland graph is distinct.<br>
3. There is no edge crossing, which means the graph G(V,E) is a plane
graph.<br>
4. Farmland graph G(V,E) is simple and connected.<br>
</div>
<br>
Let us define the "size" of proper farming region. The size of proper
farming region is the number of boundary
edges of that region. For example, the size of the proper farming
region &lt;v2,v3,v4,v5 &gt; is 4.
The problem is to find the number of proper regions that have a
specified size. If you are requested to find the
number of proper regions with size of 4 in the graph given in Figure-1,
you must answer that there are 2
proper regions whose sizes are 4 because farming regions &lt;
v1,v9,v8,v7 &gt; and &lt;v2,v3,v4,v5 &gt; are proper regions
and their sizes are 4. If there are no such regions, then you have to
print 0.</div>
</div>
</div>
</div>
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001001000000000000000">Input</a>&nbsp;</font>
</h2>
The input file consists of <i>M </i>test cases. The first line of the
input file contains a positive integer <i>M</i>, the number
of test cases you are to solve. After the first line, input data for <i>M
</i>cases follow. The first line of each test case
contains a positive integer <i>N</i>(>=3), the number of vertices.
Each of the following <i>N </i>lines is of the form:<br>
<div style="margin-left: 40px;"><i>i x</i><sub>i</sub> <i>y</i><sub>i</sub>
<i>d</i><sub>i</sub> <i>a<sub>1</sub> a<sub>2</sub> a<sub>3</sub>
..... a<sub>di</sub></i><br>
</div>
"<i>i</i>" is the vertex number, <i>x<sub>i</sub> </i>and <i>y<sub>i</sub>
</i>are the coordinate <i>(x<sub>i</sub>, y<sub>i</sub>) </i>of the
vertex <i>i</i>, and <i>di </i>is the degree of the vertex <i>i</i>.
The following { <i>a<sub>i</sub> </i>} are the adjacent vertices of
the vertex <i>i</i>. The last line gives <i>k</i>, the size of proper
regions
that you have to count.<br>
<br>
Note that <i>M, </i>the number of cases in input file is less than
10. <i>N</i>, the number of vertices of a given farmland
graph is less than 200. All vertices are located on grid points of the
1000 x 1000 lattice grid.
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001002000000000000000">Output</a>&nbsp;</font>
</h2>
The output must contain <i>M </i>non-negative integers. Each line
contains the answer <i>n </i>to the corresponding case
of the input file.<br>
<br>
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001003000000000000000">Sample Input</a> <br>
</font></h2>

<pre>
2
12
1  2 6   3  9 7 2
2  5 6   4  5 3 1 8
3  3 5   2  4 2
4  3 4   2  3 5 
5  4 4   2  4 2
6  7 4   1  8
7  2 3   2  8 1
8  5 3   5  7 2 9 12 6
9  1 2   3  11 8 1
10 3 2   1  11
11 2 1   3  10 9 12
12 6 1   2  8 11
4
3
1  2 2   2  2 3
2  1 1   2  1 3
3  4 1   2  1 2
4
</pre>

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001004000000000000000">Sample Output</a>&nbsp;</font>
</h2>

<pre>
2
0
</pre>

______________________________________________________
2328||||||false||||||
The&nbsp; left&nbsp; figure below&nbsp; shows a complete&nbsp; 3x3 grid
made with&nbsp; 2x(3x4) (=24) matchsticks. The&nbsp; lengths of
all&nbsp; matchsticks are one. You can find many squares of different
sizes in the grid. The size of a square is the length&nbsp; of its
side. In the grid shown in the left figure, there are 9 squares of size
one, 4 squares of size two, and 1&nbsp; square of size three.<br>
<br>
Each matchstick of the complete grid is identified with a unique number
which is assigned from left to right
and from top to bottom as shown in the left figure. If you take some
matchsticks out from the complete grid,
then some squares in the grid will be destroyed, which results in an
incomplete 3&times;3 grid. The right figure
illustrates an incomplete 3&times;3 grid after removing three
matchsticks numbered with 12, 17 and 23. This
removal destroys 5 squares of size one, 3 squares of size two, and 1
square of size three. Consequently, the
incomplete grid does not have squares of size three, but still has 4
squares of size one and 1 square of size two.
<center><img src="http://livearchive.onlinejudge.org/external/23/p2328a.gif></center>

As input, you are given a (complete or incomplete) <i>n </i>&times; <i>n
</i>grid made with no more than 2<i>n</i>(<i>n</i>+1) matchsticks for a
natural number <i>n </i> 5 . Your task is to compute the minimum
number of matchsticks taken
out to destroy <b>all </b>the squares existing in the input <i>n </i>&times;
<i>n </i>grid.
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001001000000000000000">Input</a>&nbsp;</font>
</h2>
The input consists of <i>T </i>test cases. The number of test cases (<i>T</i>)
is given in the first line of the input file.
Each test case consists of two lines: The first line contains a natural
number <i>n </i>, not greater than 5, which
implies you are given a (complete or incomplete) <i>n </i>&times; <i>n
</i>grid as input, and the second line begins with a
nonnegative integer <i>k </i>, the number of matchsticks that are
missing from the complete <i>n </i>&times; <i>n </i>grid, followed
by
<i>k</i> numbers specifying the matchsticks. Note that if <i>k</i> is
equal to zero, then the input grid is a complete <i>n </i>&times; <i>n</i>
grid; otherwise, the input grid is an incomplete <i>n </i>&times; <i>n
</i>grid such that the specified <i>k </i>matchsticks are missing
from the complete <i>n </i>&times; <i>n </i>grid.
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001002000000000000000">Output</a>&nbsp;</font>
</h2>
Print exactly one line for each test case. The line should contain the
minimum number of matchsticks that
have to be taken out to destroy all the squares in the input grid.
<h2><font size="4" color="#ff0000"><a
 name="SECTION0001003000000000000000">Sample Input</a> <br>
</font></h2>

<pre>
2
2
0
3
3 12 17 23
</pre>

<h2><font size="4" color="#ff0000"><a
 name="SECTION0001004000000000000000">Sample Output</a>&nbsp;</font>
</h2>

<pre>
3
3
</pre>

______________________________________________________
2329||||||false||||||
<P>
Being well known for its highly innovative products, Merck would definitely be a good
target for industrial
espionage. To protect its brand-new research and development facility the company has
installed the latest
system of surveillance robots patrolling the area. These robots move along the walls
of the facility and
report suspicious observations to the central security office. The only flaw in the
system a competitor's
agent could find is the fact that the robots radio their movements unencrypted.
Not being able to find out
more, the agent wants to use that information to calculate the exact size of the
area occupied by the new
facility. It is public knowledge that all the corners of the building are situated
on a rectangular grid and that
only straight walls are used. Figure 1 shows the course of a robot around an example area.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2329.eps}$
 -->
<IMG
 WIDTH="580" HEIGHT="409" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2329.gif
 ALT="\epsfbox{p2329.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER">Figure 1: Example area

</DIV>

<P>


<P>
You are hired to write a program that calculates the area occupied by the new facility
from the movements
of a robot along its walls. You can assume that this area is a polygon with corners
on a rectangular grid.
However, your boss insists that you use a formula he is so proud to have found
somewhere. The formula
relates the number <SPAN CLASS="MATH"><I>I</I></SPAN> of grid points inside the polygon, the number <SPAN CLASS="MATH"><I>E</I></SPAN> of grid
points on the edges, and the
total area <SPAN CLASS="MATH"><I>A</I></SPAN> of the polygon. Unfortunately, you have lost the sheet on which he
had written down that simple
formula for you, so your first task is to find the formula yourself.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line contains the number of scenarios.

<P>
For each scenario, you are given the number <SPAN CLASS="MATH"><I>m</I></SPAN>, <!-- MATH
 $3 \le  m < 100$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2329.gif
 ALT="$ \le$"><I>m</I> &lt; 100</SPAN>, of movements of the robot
in the first line. The following <SPAN CLASS="MATH"><I>m</I></SPAN> lines contain pairs `<SPAN CLASS="MATH"><I>dx</I>&nbsp;<I>dy</I></SPAN>' of integers, separated
by a single blank, satisfying <!-- MATH
 $-100 \le  dx, dy \le 100$
 -->
<SPAN CLASS="MATH">-100<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2329.gif
 ALT="$ \le$"><I>dx</I>, <I>dy</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2329.gif
 ALT="$ \le$">100</SPAN> and <!-- MATH
 $(dx, dy)  \ne (0, 0)$
 -->
<SPAN CLASS="MATH">(<I>dx</I>, <I>dy</I>)<IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2329.gif
 ALT="$ \ne$">(0, 0)</SPAN>.
Such a pair means that the robot moves on to a grid point <SPAN CLASS="MATH"><I>dx</I></SPAN> units to the right
and <SPAN CLASS="MATH"><I>dy</I></SPAN> units upwards on the grid (with respect to the current position).

<P>
You can assume that the curve along which the robot moves is closed and that it
does not intersect or
even touch itself except for the start and end points. The robot moves anti-clockwise
around the building,
so the area to be calculated lies to the left of the curve. It is known in advance
that the whole polygon would
fit into a square on the grid with a side length of 100 units.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output for every scenario begins with a line containing `<TT>Scenario #<SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>',
where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number
of the scenario starting at 1. Then print a single line containing <SPAN CLASS="MATH"><I>I</I></SPAN>, <SPAN CLASS="MATH"><I>E</I></SPAN>, and <SPAN CLASS="MATH"><I>A</I></SPAN>,
the area <SPAN CLASS="MATH"><I>A</I></SPAN> rounded to one
digit after the decimal point. Separate the three numbers by two single blanks.
Terminate the output for the scenario with a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
4
1 0
0 1
-1 0
0 -1
7
5 0
1 3
-2 2
-1 0
0 -3
-3 1
0 -3
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario #1:
0 4 1.0

Scenario #2:
12 16 19.0
</PRE>

<P>

______________________________________________________
2330||||||false||||||
<P>More than 200 companies in more than 50 countries all over the world contribute towards the success of the <EM>Merck Group</EM>. You can imagine that every day <EM>Merck Group Headquarters</EM> at Darmstadt gets loads of mail from all over the world, the layout of all the letters following the customary style of their origin. In particular, the representation of a date is often ambiguous if you do not know in what order day, month, and year are given.<P>For example, if you read 01-02-03, you do not know if that represents the first of February 1903, or 2003, or if it is the third of February 1901, or 2001. It might even be the second of March 2001, or some other permutation of the three numbers. Instead of the hyphens, there could also be slashes, backslashes, dots, commas, or no delimiters at all.<P><P>You are hired to write a program that converts dates given in an unknown format to the format of the <EM>Adjusted Calender of Merck (ACM)</EM>. The latter specifies the number of days relative to November 4, 2001, an important day in Merck's history.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number of scenarios.<P>Every scenario contains a single date on a line by itself. A date consists of three parts: A day, a month, and a year given in any order, separated either by exactly two identical delimiters, or not separated by delimiters at all. Delimiters can be slashes `<TT>/</TT>', backslashes `<code>\</code>', hyphens `<TT>-</TT>', dots `<TT>.</TT>', or commas `<TT>,</TT>'.<P>The day and month are represented by a single digit, or by two digits, the first of which can be a leading zero. Valid years are in the range 1700 ...2299; either all four digits are given, or just the last two that specify the year relative to the century. In the latter case, a leading zero may be omitted.<P>Dates are considered illegal if no valid interpretation exists. More precisely, a date is illegal if no classification of the digits as day, month, and year results in a valid date in the range January 1, 1700, to December 31, 2299. However, you can be sure that all dates given contain 3 to 8 digits, and no other characters except for maybe the two delimiters.<P>Remember that February 29 is a valid date for leap-years only. A year is a leap-year if and only if either its number is divisible by four, but not by one hundred, or if its number is divisible by four hundred. So, in particular, 2000 is a leap-year, while 1700, 1800, 1900, 2100, or 2200 are not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for every scenario begins with a line containing `<TT>Scenario #<SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>', where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of the scenario starting at 1.<P>For every scenario, print all possible interpretations of the given date in the format of the <EM>Adjusted Calender of Merck (ACM)</EM>, each interpretation in a single line, in ascending order and with duplicates removed. If no valid interpretation exists, print a line containing `<TT>Illegal date</TT>' instead.<P>Terminate the output for each scenario with a single blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
1631/02/29
2001-11-03
010203
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Scenario #1:
Illegal date

Scenario #2:
-238
-1

Scenario #3:
-109847
-109820
-109513
-109456
-109149
-109119
-73323
-73296
-72989
-72932
-72625
-72595
-36799
-36772
-36465
-36408
-36101
-36071
-274
-247
60
117
424
454
36250
36277
36584
36641
36948
36978
72774
72801
73108
73165
73472
73502
</PRE><P>
______________________________________________________
2331||||||false||||||
<P>Your little sister has got a new mechanical building kit, which includes many cog-wheels of different sizes. She starts building gears with different ratios, but soon she notices that there are some ratios which are quite difficult to realize, and some others she cannot realize at all. She would like to have a computer program that tells her what ratios can be realized and what ratios cannot. She asks you to write a program that does the job.<P>For example, let us assume that the kit contains cog-wheels with 6, 12, and 30 cogs. Your sister wants to realize a gear of ratio 5 : 4. One possible solution is shown in Figure 2.<P><DIV ALIGN="CENTER"><IMG WIDTH="213" HEIGHT="283" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="\epsfbox{p2331.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 2: Combination of cog-wheels realizing a gear of 5 : 4.</DIV><P>It depicts a complete gear of ratio 5 : 4. Four wheels are used: cog-wheels of sizes 30 and 12 on the first axis, cog-wheels of sizes 6 and 12 on the second axis. The gear ratio is given by<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="26" HEIGHT="54" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="$\displaystyle {30 \over 12}$"><SUP> . </SUP><IMG WIDTH="26" HEIGHT="54" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="$\displaystyle {6 \over 12}$"> = <IMG WIDTH="17" HEIGHT="54" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="$\displaystyle {5 \over 2}$"><SUP> . </SUP><IMG WIDTH="17" HEIGHT="54" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="$\displaystyle {1 \over 2}$"> = 5 : 4</DIV><P></P>as desired. However, a gear of ratio 1 : 6 cannot be realized using the cog-wheels your sister has.<P><P>Given the sizes of the cog-wheels in the kit (i.e. the number of cogs they have), decide whether a given gear ratio can be built or not. You may use any finite number of cog-wheels of each size available.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Input</A>&nbsp;</FONT></H2><P>The input begins with a line containing the number of scenarios.<P>The input for each scenario starts with a description of the cog-wheels in the kit. First, there is a line containing the number <SPAN CLASS="MATH"><I>n</I></SPAN> of different sizes of cog-wheels ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="$ \le$">20</SPAN>). The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> numbers <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>,..., <I>c</I><SUB>n</SUB></SPAN>, separated by single blanks. These denote the <SPAN CLASS="MATH"><I>n</I></SPAN> different sizes of the cog-wheels in the kit, with <SPAN CLASS="MATH">5<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="$ \le$"><I>c</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="$ \le$">100</SPAN> for <SPAN CLASS="MATH"><I>i</I> = 1,..., <I>n</I></SPAN>. You may assume that there is a cog-wheel of smallest size <SPAN CLASS="MATH"><I>c</I> = min{<I>c</I><SUB>1</SUB>,..., <I>c</I><SUB>n</SUB>}</SPAN> in the kit such that all sizes <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>,..., <I>c</I><SUB>n</SUB></SPAN> are multiples of <SPAN CLASS="MATH"><I>c</I></SPAN>.<P>The line describing the available cog-wheels is followed by the list of gear ratios to be realized. It starts with a line containing the number <SPAN CLASS="MATH"><I>m</I></SPAN> of ratios. The next <SPAN CLASS="MATH"><I>m</I></SPAN> lines each contain two integers <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>, separated by a single blank. They denote the ratio <SPAN CLASS="MATH"><I>a</I> : <I>b</I></SPAN>, with <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="$ \le$"><I>a</I>, <I>b</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2331.gif ALT="$ \le$">10000</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for every scenario begins with a line containing `<TT>Scenario #<SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>', where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of the scenario starting at 1. Then print the results for all the gear ratios given in that scenario. For each gear ratio <SPAN CLASS="MATH"><I>a</I> : <I>b</I></SPAN>, print a line containing either<P><P><BR><TT>Gear ratio <SPAN CLASS="MATH"><I>a</I></SPAN>:<SPAN CLASS="MATH"><I>b</I></SPAN> can be realized.</TT><P><P><BR>or<P><P><BR><TT>Gear ratio <SPAN CLASS="MATH"><I>a</I></SPAN>:<SPAN CLASS="MATH"><I>b</I></SPAN> cannot be realized.</TT><P><P><BR>Terminate the output of each scenario with a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
3
6 12 30
2
5 4
1 6
1
42
2
13 13
42 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Scenario #1:
Gear ratio 5:4 can be realized.
Gear ratio 1:6 cannot be realized.

Scenario #2:
Gear ratio 13:13 can be realized.
Gear ratio 42:1 cannot be realized.
</PRE><P>
______________________________________________________
2332||||||false||||||
<P>
After many years of development, Merck has finally discovered a simple model which helps
with computer
aided drug design. Different chemical substances are viewed as two-dimensional
``puzzle" pieces which
may be combined in a three-dimensional way, forming more complex structures of atoms.
Special combinations of these pieces have very special chemical properties. These
combinations which are known as
<EM>ACM (Anachronistic Cube Molecules)</EM> result from combining six individual puzzle
pieces along their edges to form a complete cube (see Figure 3).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2332.eps}$
 -->
<IMG
 WIDTH="615" HEIGHT="358" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2332.gif
 ALT="\epsfbox{p2332.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER">Figure 3: Construction of a cube.

</DIV>

<P>


<P>
Given six pieces, decide whether they can be put together to form a cube of
dimension <!-- MATH
 $6 \times 6 \times 6$
 -->
<SPAN CLASS="MATH">6&#215;6&#215;6</SPAN>, with no
holes visible from the outside. Each piece can be thought of as being cut from a
plate of wood of dimension
<!-- MATH
 $6 \times 6 \times 1$
 -->
<SPAN CLASS="MATH">6&#215;6&#215;1</SPAN>, with the <!-- MATH
 $4 \times 4 \times 1$
 -->
<SPAN CLASS="MATH">4&#215;4&#215;1</SPAN> plate in the centre untouched.
A piece can be used the one or the other way
around, i.e., there is no distinction between the inside and the outside.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line contains the number of scenarios.

<P>
In each scenario, you are first given six lines with a graphical representation of
the six pieces. In that
representation, `<TT>X</TT>' symbolises solid wood, a dot `<TT>.</TT>' stands for a
<!-- MATH
 $1 \times 1 \times 1$
 -->
<SPAN CLASS="MATH">1&#215;1&#215;1</SPAN> piece of wood that was cut out.
A column with `<TT>!</TT>' stands on the right of each piece to separate them from each other.
There is a blank line following every scenario.

<P>
It is not necessary that the pieces can really be cut out of wood or that they
form a stable cube, as you can see in the sample input, second example.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output for every scenario begins with a line containing `<TT>Scenario #<SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>',
where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of
the scenario starting at 1. In the next line print `<TT>Yes</TT>' or `<TT>No</TT>' depending
on whether the given pieces can
be put together to form a cube. Terminate the output for the scenario with a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
XX..XX!.X..X.!XX..XX!.X..X.!..XX..!..XX..!
XXXXXX!.XXXX.!XXXXXX!.XXXX.!.XXXX.!.XXXX.!
.XXXX.!XXXXXX!.XXXX.!XXXXXX!XXXXXX!XXXXXX!
.XXXX.!XXXXXX!.XXXX.!XXXXXX!XXXXXX!XXXXXX!
XXXXXX!.XXXX.!XXXXXX!.XXXX.!.XXXX.!.XXXX.!
XX..XX!.X..X.!XX..XX!.X..X.!..XX..!..XX..!

.XXXX.!.XXXX.!.XXXX.!.XXXX.!XXXXXX!X....X!
XXXXXX!.XXXX.!XXXXXX!.XXXX.!XXXXXX!.XXXX.!
XXXXXX!.XXXX.!XXXXXX!.XXXX.!XXXXXX!.XXXX.!
XXXXXX!.XXXX.!XXXXXX!.XXXX.!XXXXXX!.XXXX.!
XXXXXX!.XXXX.!XXXXXX!.XXXX.!XXXXXX!.XXXX.!
......!......!......!......!XXXXXX!X....X!

......!......!......!......!......!......!
.XXXX.!.XXXX.!.XXXX.!.XXXX.!.XXXX.!.XXXX.!
.XXXX.!.XXXX.!.XXXX.!.XXXX.!.XXXX.!.XXXX.!
.XXXX.!.XXXX.!.XXXX.!.XXXX.!.XXXX.!.XXXX.!
.XXXX.!.XXXX.!.XXXX.!.XXXX.!.XXXX.!.XXXX.!
......!......!......!......!......!......!
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario #1:
Yes

Scenario #2:
Yes

Scenario #3:
No
</PRE>

<P>

______________________________________________________
2333||||||false||||||
<P>During the Second World War, the German military forces mainly used one special machine to secure their communication: the <EM>Enigma</EM> (see Figure 4). Breaking the Enigma cipher is one of the main success stories of Allied cryptanalysis and the triumph was mainly attributed to the emergence of digital computation and the genius of the people working at Bletchley Park, the secret cryptanalysis headquarters in England. The reason for this is that, while Enigma is certainly secure against pen and paper attacks, it is quite easily breakable using digital computers.<P><DIV ALIGN="CENTER"><IMG WIDTH="411" HEIGHT="771" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="\epsfbox{p2333a.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 4: An Enigma machine (picture source: http://www.nsa.gov/museum/enigma.html).</DIV><P>The Enigma was a rotor machine, a cipher method which was popular at that time. A rotor is an insulated disk on which electrical contacts, one for each letter of the alphabet, are placed uniformly around the periphery and on each side. An internal conduction path through the insulating material connects contacts in pairs, one on each side of the disk. An electric current entering on one side travels on an internal path through the rotor cross-section, emerging at one of the contacts on the other side (see Figure 5 for a 3D visualisation of two rotors). Figure 6 shows a schematic side view of the complete rotor system. It shows that the Enigma has three rotors <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{1}^{}$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{2}^{}$"></SPAN> plus an additional reflecting rotor <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN>.<P><DIV ALIGN="CENTER"><IMG WIDTH="522" HEIGHT="217" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="\epsfbox{p2333b.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 5: 3D view of two rotors.</DIV><P><P><P><BR><P><DIV ALIGN="CENTER"><IMG WIDTH="648" HEIGHT="217" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="\epsfbox{p2333c.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 6: Side view of the Enigma's rotor system.</DIV><P>The input to Enigma is a stream of alphabetic characters without blanks. Every character is subject to the following steps:<P><OL><LI>The plaintext is subject to an initial permutation <SPAN CLASS="MATH"><I>IP</I></SPAN> which is implemented by a <EM>plugboard</EM>. </LI><LI>The character resulting from step 1 is sent through the three rotors <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{1}^{}$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{2}^{}$"></SPAN>. </LI><LI>The resulting character is then sent through the reflecting rotor <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN>. </LI><LI>The character from step 3 is passed back through the rotors <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{2}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{1}^{}$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$"></SPAN> (i.e., in the opposite direction). </LI><LI>The character from step 4 is subject to the inverse <SPAN CLASS="MATH"><I>IP</I><SUP>-1</SUP></SPAN> of the initial permutation <SPAN CLASS="MATH"><I>IP</I></SPAN>. </LI></OL><P>The interesting point about the use of rotors is that after processing each character, every rotor might be rotated by a certain angle (i.e., a certain amount of letters) before processing the next character. With the Enigma, rotor <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$"></SPAN> is rotated by one in anti-clockwise direction with every new character. When <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$"></SPAN> has finished one round (i.e., after processing 26 characters), rotor <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{1}^{}$"></SPAN> moves by one character. Similarly, rotor <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{2}^{}$"></SPAN> is rotated by one character when <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{1}^{}$"></SPAN> has finished one revolution, and the reflecting rotor <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN> moves when <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{2}^{}$"></SPAN> has finished its rotation. Obviously, <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN> is the slowest of the four rotors.<P>The process described above can be used both for encryption and decryption, provided that the permutation <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN> implemented by the reflecting rotor is an involution. That means <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"> = <IMG WIDTH="33" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi^{-1}_{R}$"></SPAN> , or, equivalently, <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \xi$"> = <IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$">(<IMG WIDTH="13" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \zeta$">)</SPAN> whenever <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \zeta$"> = <IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$">(<IMG WIDTH="13" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \xi$">)</SPAN>. You may assume that this condition holds.<P>The secret key of the Enigma consists of (1) the rotors <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{1}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{2}^{}$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN>, (2) the plugboard permutation <SPAN CLASS="MATH"><I>IP</I></SPAN> , and (3) the initial rotational displacements <SPAN CLASS="MATH"><I>k</I><SUB>0</SUB>, <I>k</I><SUB>1</SUB>, <I>k</I><SUB>2</SUB>, <I>k</I><SUB>R</SUB></SPAN> of <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{1}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{2}^{}$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN> (see below). The rotors were changed infrequently and were selected from a set of four possible rotors in the Wehrmacht model.<P><P>You are time-warped to Bletchley Park together with your laptop and should help to decipher some messages which have been intercepted over the day. You are given the entire ciphertext, parts of the plaintext, and parts of the Enigma key. Your task is to determine the correct key and finally complete the plaintext by decoding the ciphertext.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number of scenarios.<P>Each scenario begins with the secret key of the Enigma. The secret key is specified by 6 lines. The first four lines contain a specification of the rotors <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{1}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{2}^{}$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN> as a sequence of lowercase alphabetic characters. Character <SPAN CLASS="MATH"><I>i</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \le$">26</SPAN>) gives the mapping of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th character of the alphabet (e.g., `<TT>bha...</TT>' means that `<TT>a</TT>' is mapped to `<TT>b</TT>', `<TT>b</TT>' is mapped to `<TT>h</TT>', `<TT>c</TT>' is mapped to `<TT>a</TT>' etc.). Physically, the sequence of characters is given in clockwise direction looking from the front of the rotor stack <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$">,...,<IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN>.<P>After the rotors follows a similar line giving the plugboard permutation <SPAN CLASS="MATH"><I>IP</I></SPAN>. Finally, the sixth line of the key gives the initial displacement <SPAN CLASS="MATH"><I>k</I><SUB>0</SUB>, <I>k</I><SUB>1</SUB>, <I>k</I><SUB>2</SUB>, <I>k</I><SUB>R</SUB></SPAN> of the four rotors <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{1}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{2}^{}$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN> as a string of four characters where `<TT>a</TT>' means that the rotor is in its original position (as defined by the rotor specification above), `<TT>b</TT>' means that it is rotated by one position in the usual way etc. For example, `<TT>dgaa</TT>' means that rotor <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{0}^{}$"></SPAN> has initial displacement 3, <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{1}^{}$"></SPAN> has 6, and <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{2}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2333a.gif ALT="$ \pi_{R}^{}$"></SPAN> are both in their original position.<P>After the key follow two lines, each containing at least 1 and at most 80 lowercase letters, and no other characters. The first line contains the plaintext while the second line contains the ciphertext.<P>The plaintext and any part of the key may be <EM>incomplete</EM>, i.e., some positions in the strings may be question marks `<TT>?</TT>'. The number of question marks in the input will be at most 3.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each scenario begins with a line containing `<TT>Scenario #<SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>', where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of the scenario starting at 1. In the next line you are to output the completed, decrypted plaintext. You can assume that a solution exists and that it is unique. Terminate the output for each scenario with a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
wfbtiznuvcqejpokshxgmadyrl
hmrgnqpkjcaivwluebfzsyxtdo
druahlbfzvgmwckxpiqysontje
owtvskypjifmluahrqecndbzgx
?bcdefghijklmnopqrstuvwxyz
aaaa
manyorganizationsrelyoncom??ters
grsuztldsznkwnerdpfbovvqnobkyiqn
oqzunvhtxwryfebicmjpklsgda
zupogrskynxtwdfqvbliejcmha
kzvlyjuodmscewxtfbphriqgna
gbcnylaztwkfmdspqvoiurjxeh
rfyhkxbuvplgtqmdiewjosznca
dmeo
???
ave
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Scenario #1:
manyorganizationsrelyoncomputers

Scenario #2:
acm
</PRE><P>
______________________________________________________
2334||||||false||||||
<P>
For years, computer scientists have been trying to find efficient solutions to
different computing problems.
For some of them efficient algorithms are already available, these are the ``easy"
problems like sorting,
evaluating a polynomial or finding the shortest path in a graph. For the ``hard"
ones only exponential-time
algorithms are known. The <EM>traveling-salesman problem</EM> belongs to this latter group.
Given a set of <SPAN CLASS="MATH"><I>N</I></SPAN> towns
and roads between these towns, the problem is to compute the shortest path allowing
a salesman to visit each of the towns once and only once and return to the starting point.

<P>


<P>
The president of Gridland has hired you to design a program that calculates the
length of the shortest
traveling-salesman tour for the towns in the country. In Gridland, there is one
town at each of the points of
a rectangular grid. Roads run from every town in the directions North, Northwest,
West, Southwest, South,
Southeast, East, and Northeast, provided that there is a neighbouring town in
that direction. The distance
between neighbouring towns in directions North­South or East­West is 1 unit.
The length of the roads is
measured by the Euclidean distance. For example, Figure 7 shows <!-- MATH
 $2 \times 3$
 -->
<SPAN CLASS="MATH">2&#215;3</SPAN>-Gridland,
i.e., a rectangular grid
of dimensions 2 by 3. In <!-- MATH
 $2 \times 3$
 -->
<SPAN CLASS="MATH">2&#215;3</SPAN>-Gridland, the shortest tour has length 6.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2334.eps}$
 -->
<IMG
 WIDTH="299" HEIGHT="171" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2334.gif
 ALT="\epsfbox{p2334.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER">Figure 7: A traveling-salesman tour in 2 <SPAN CLASS="MATH">&#215;</SPAN> 3-Gridland.

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line contains the number of scenarios.

<P>
For each scenario, the grid dimensions <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> will be given as two integer numbers
in a single line, separated by a single blank, satisfying <!-- MATH
 $1 < m < 50$
 -->
<SPAN CLASS="MATH">1 &lt; <I>m</I> &lt; 50</SPAN> and <!-- MATH
 $1 < n < 50$
 -->
<SPAN CLASS="MATH">1 &lt; <I>n</I> &lt; 50</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output for each scenario begins with a line containing `<TT>Scenario #<SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>',
where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of
the scenario starting at 1. In the next line, print the length of the shortest
traveling-salesman tour rounded
to two decimal digits. The output for every scenario ends with a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2 2
2 3
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario #1:
4.00

Scenario #2:
6.00
</PRE>

<P>

______________________________________________________
2335||||||false||||||
<P>A while ago it was quite cumbersome to create a message for the Short Message Service (SMS) on a mobile phone. This was because you only have nine keys and the alphabet has more than nine letters, so most characters could only be entered by pressing one key several times. For example, if you wanted to type ``<TT>hello</TT>" you had to press key 4 twice, key 3 twice, key 5 three times, again key 5 three times, and finally key 6 three times. This procedure is very tedious and keeps many people from using the Short Message Service.<P>This led manufacturers of mobile phones to try and find an easier way to enter text on a mobile phone. The solution they developed is called <EM>T9 text input</EM>. The ``9" in the name means that you can enter almost arbitrary words with just nine keys and without pressing them more than once per character. The idea of the solution is that you simply start typing the keys without repetition, and the software uses a built-in dictionary to look for the ``most probable" word matching the input. For example, to enter ``<TT>hello</TT>" you simply press keys 4, 3, 5, 5, and 6 once. Of course, this could also be the input for the word ``<TT>gdjjm</TT>", but since this is no sensible English word, it can safely be ignored. By ruling out all other ``improbable" solutions and only taking proper English words into account, this method can speed up writing of short messages considerably. Of course, if the word is not in the dictionary (like a name) then it has to be typed in manually using key repetition again.<P><DIV ALIGN="CENTER"><IMG WIDTH="398" HEIGHT="273" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2335.gif ALT="\epsfbox{p2335.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 8: The Number-keys of a mobile phone.</DIV><P>More precisely, with every character typed, the phone will show the most probable combination of characters it has found up to that point. Let us assume that the phone knows about the words ``<TT>idea</TT>" and ``<TT>hello</TT>", with ``<TT>idea</TT>" occurring more often. Pressing the keys 4, 3, 5, 5, and 6, one after the other, the phone offers you ``<TT>i</TT>", ``<TT>id</TT>", then switches to ``<TT>hel</TT>", ``<TT>hell</TT>", and finally shows ``<TT>hello</TT>".<P><P>Write an implementation of the <EM>T9 text input</EM> which offers the most probable character combination after every keystroke. The probability of a character combination is defined to be the sum of the probabilities of all words in the dictionary that begin with this character combination. For example, if the dictionary contains three words ``<TT>hell</TT>", ``<TT>hello</TT>", and ``<TT>hellfire</TT>", the probability of the character combination ``<TT>hell</TT>" is the sum of the probabilities of these words. If some combinations have the same probability, your program is to select the first one in alphabetic order. The user should also be able to type the beginning of words. For example, if the word ``<TT>hello</TT>" is in the dictionary, the user can also enter the word ``<TT>he</TT>" by pressing the keys 4 and 3 even if this word is not listed in the dictionary.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number of scenarios.<P>Each scenario begins with a line containing the number <SPAN CLASS="MATH"><I>w</I></SPAN> of distinct words in the dictionary ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2335.gif ALT="$ \le$"><I>w</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2335.gif ALT="$ \le$">1000</SPAN>). These words are given in the next <SPAN CLASS="MATH"><I>w</I></SPAN> lines in ascending alphabetic order. Every line starts with the word which is a sequence of lowercase letters from the alphabet without whitespace, followed by a space and an integer <SPAN CLASS="MATH"><I>p</I></SPAN>, <SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2335.gif
 ALT="$ \le$"><I>p</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2335.gif
 ALT="$ \le$">100</SPAN>, representing the probability of that word.
No word will contain more than 100 letters.

<P>
Following the dictionary, there is a line containing a single integer <SPAN CLASS="MATH"><I>m</I></SPAN>. Next
follow <SPAN CLASS="MATH"><I>m</I></SPAN> lines, each
consisting of a sequence of at most 100 decimal digits 2­9, followed by a
single 1 meaning ``next word".

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output for each scenario begins with a line containing `<TT>Scenario #<SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>',
where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of the scenario starting at 1.

<P>
For every number sequence <SPAN CLASS="MATH"><I>s</I></SPAN> of the scenario, print one line for every keystroke
stored in <SPAN CLASS="MATH"><I>s</I></SPAN>, except for
the 1 at the end. In this line, print the most probable word prefix defined by the
probabilities in the dictionary
and the T9 selection rules explained above. Whenever none of the words in the
dictionary match the given
number sequence, print `<TT>MANUALLY</TT>' instead of a prefix.

<P>
Terminate the output for every number sequence with a blank line, and print an
additional blank line at the end of every scenario.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
5
hell 3
hello 4
idea 8
next 8
super 3
2
435561
43321
7
another 5
contest 6
follow 3
give 13
integer 6
new 14
program 4
5
77647261
6391
4681
26684371
77771
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario #1:
i
id
hel
hell
hello

i
id
ide
idea


Scenario #2:
p
pr
pro
prog
progr
progra
program

n
ne
new

g
in
int

c
co
con
cont
anoth
anothe
another

p
pr
MANUALLY
MANUALLY
</PRE>

<P>

______________________________________________________
2336||||||false||||||
<P>
Christiane and Matthias are playing a new game, the <EM>Number Game</EM>. The rules of the
Number Game are:

<P>
Christian and Matthias take turns in choosing integer numbers greater than or
equal to 2. The following rules restrict the set of numbers which may be chosen:

<P>
<DL>
<DT><STRONG>R1</STRONG></DT>
<DD>A number which has already been chosen by one of the players or a multiple of
  such a number cannot be chosen. (A number <SPAN CLASS="MATH"><I>z</I></SPAN> is a <EM>multiple</EM> of a number <SPAN CLASS="MATH"><I>y</I></SPAN> if <SPAN CLASS="MATH"><I>z</I></SPAN>
  can be written as <SPAN CLASS="MATH"><I>y</I>·<I>x</I></SPAN> and <SPAN CLASS="MATH"><I>x</I></SPAN> is a positive integer.)

<P>
</DD>
<DT><STRONG>R2</STRONG></DT>
<DD>A sum of two such multiples cannot be chosen either.

<P>
</DD>
<DT><STRONG>R3</STRONG></DT>
<DD>For simplicity, a number which is greater than 20 cannot be chosen either. This
  enables a lot more NPCs (Non-Personal-Computers) to play this game.
</DD>
</DL>

<P>
The player who cannot choose any number anymore looses the Number Game.

<P>
Here is an example: Matthias starts by choosing 4. Then Christiane is not allowed to
choose 4, 8, 12,
etc. Let us assume her move is 3. Now, the numbers 3, 6, 9, etc. are excluded, too;
furthermore, numbers
like: 7 = 3 + 4, 10 = 2 <SPAN CLASS="MATH"><SUP> . </SUP></SPAN> 3 + 4, 11 = 3 + 2 <SPAN CLASS="MATH"><SUP> . </SUP></SPAN> 4, 13 = 3 <SPAN CLASS="MATH"><SUP> . </SUP></SPAN> 3 + 4,
...are not available. So, in fact, the only
numbers left are 2 and 5. Matthias now says 2. Since 5 = 2 + 3 is now forbidden,
too, he wins because there is no number for Christiane's move left.

<P>
Your task is to write a program which will help to play the Number Game. In general,
i.e., without
rule <B>R3</B>, this game may go on forever. However, with rule <B>R3</B>, it is
possible to write a program that finds a strategy to win the game.

<P>


<P>
Given a game situation (a list of numbers which are not yet forbidden), your program
should output all
<EM>winning moves</EM>. A winning move is a move by which the player whose turn it is can
force a win no matter
what the other player will do. Now we define these terms more formally:

<P>

<UL>
<LI>A <EM>loosing position</EM> is a position in which either

<OL>
<LI>all numbers are forbidden, or
</LI>
<LI>no winning move exists.
</LI>
</OL>
</LI>
<LI>A <EM>winning position</EM> is a position in which a winning move exists.
</LI>
<LI>A <EM>winning move</EM> is a move after which the position is a loosing position.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line contains the number of scenarios.

<P>
The input for each scenario describes a game position. It begins with a line containing
the number
<SPAN CLASS="MATH"><I>a</I></SPAN>, <!-- MATH
 $0 \le  a < 20$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2336img1.gif
 ALT="$ \le$"><I>a</I> &lt; 20</SPAN> of numbers which are still available. Next follows a single line
with the <SPAN CLASS="MATH"><I>a</I></SPAN> numbers still available, separated by single blanks.

<P>
You may assume that all game positions in the input could really occur in the
Number Game (for
example, if 3 is not in the list of numbers available, 6 will not be, either).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output for each scenario begins with a line containing `<TT>Scenario #<SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>',
where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of
the scenario starting at 1. In the next line either print `<TT>There is no winning move.</TT>'
if this is true
for the position of the current scenario, or `<TT>The winning moves
are: <!-- MATH
 $w_1\ w_2\ \dots \ w_k$
 -->
<SPAN CLASS="MATH"><I>w</I><SUB>1</SUB>&nbsp;<I>w</I><SUB>2</SUB>&nbsp;...&nbsp;<I>w</I><SUB>k</SUB></SPAN>.</TT>' where the
<SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN> are all the winning moves, in ascending order, separated by single blanks.
The output for each scenario should be followed by a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
1
2
2
2 3
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario #1:
The winning moves are: 2.

Scenario #2:
There is no winning move.
</PRE>

<P>

______________________________________________________
2337||||||false||||||
<P>On its trip, a train has to pass a lot of points (American English: switches) and signals. The train's track depends on the status of points and signals. The responsible operator on the signal box does not handle them separately, but tells the signal box the start and destination signal of the train's journey. The box then determines the correct status of points and signals and brings them into the right position.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2337a.gif ALT="\epsfbox{p2337a.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 9: Schematic view of points and signals on a sample train track.</DIV><P>Figure 9 shows a sample scenario in which railway tracks are shown as solid lines and signals are drawn as triangles (this is also the first scenario of the sample input). Signals have a sense of direction: they are only valid for the direction in which the triangle points (e.g., signal A is valid for trains running from left to right, see also Figure 10). Points are located where railway tracks meet (e.g., at points W1, W2, etc.). Points have a <EM>front</EM> side (i.e., the side from which a train can take alternative directions) and a <EM>back</EM> side and can be in two positions, named <TT>+</TT> and <TT>-</TT>. If a train comes from the front side, it leaves the point at the <TT>+</TT> or <TT>-</TT> leg, dependent on the point's position (see Figure 11). If the train comes from one of the the back legs, it leaves it at the front leg. Even then the point has to be put into the right state, otherwise it gets damaged!<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2337a.gif ALT="\epsfbox{p2337b.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 10: Signal valid for trains running from left to right.</DIV><P><P><P><BR><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2337a.gif ALT="\epsfbox{p2337c.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 11: Point with two possible positions.</DIV><P><P>Your task is to implement an automatic signal box, i.e., write a program which finds the correct position of points and signals for a given start and destination. The signal box should follow these rules:<P><UL><LI>A journey can only start and end at a signal. Both signals have to be in the same direction! </LI><LI>During a journey a train must not change its direction. </LI><LI>The journey consists of a sequence of signal and point settings. A signal is only taken into account for the journey if it has the right direction. A point along the way is always taken into account. </LI><LI>If there is more than one possible track from the start signal to the destination signal, the correct one is determined by the following scheme:<P><UL><LI>Consider a set of <EM>path selection rules</EM>. These are given as a triple <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN> of point identifiers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>, and a position <SPAN CLASS="MATH"><I>z</I></SPAN>. A selection rule has the following meaning:<BLOCKQUOTE>If there are alternative paths starting at point <SPAN CLASS="MATH"><I>x</I></SPAN> and ending at point <SPAN CLASS="MATH"><I>y</I></SPAN> where <SPAN CLASS="MATH"><I>x</I></SPAN> is approached from the front and <SPAN CLASS="MATH"><I>y</I></SPAN> from the back, then consider only paths in which <SPAN CLASS="MATH"><I>x</I></SPAN> is in position <SPAN CLASS="MATH"><I>z</I></SPAN> (<SPAN CLASS="MATH"><I>z</I></SPAN> is either <TT>+</TT> or <TT>-</TT>).</BLOCKQUOTE></LI><LI>If no such rule exists for a given point <SPAN CLASS="MATH"><I>x</I></SPAN>, the <TT>-</TT> position must be chosen. </LI></UL></LI></UL><P>The sample in- and output demonstrate the application of the rules. Furthermore, you can make the following assumptions:<P><UL><LI>The track plan is acyclic.<P></LI><LI>Within a path, each element is only used once or not at all.<P></LI><LI>If for a given point <SPAN CLASS="MATH"><I>x</I></SPAN> several rules <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN> exist, they will agree on the position to be chosen. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number of scenarios.<P>In the first line of the input for every scenario, you are given two signal identifiers for the departure and the destination, separated by a single blank. The following line contains the number <SPAN CLASS="MATH"><I>n</I></SPAN> of elements (points and signals) in the track plan. You can assume <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2337a.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2337a.gif ALT="$ \le$">200</SPAN> and that each element has a unique identifier of at most 20 alphanumeric characters. The identifier `<TT>XXX</TT>' is given to track ends.<P>There are signal and point elements, given in the following format:<UL><LI>Points are specified by a line `<TT>W I F M P</TT>', where `<TT>W</TT>' stands for ``Weiche" (German for point), `<TT>I</TT>' is the identifier of the point, `<TT>F</TT>' identifies the front element of the point, and `<TT>M</TT>' and `<TT>P</TT>' give the identifiers of the back elements of the point depending on whether it is in minus or plus position.<P></LI><LI>Signals are specified by a line `<TT>S I F B</TT>', where `<TT>S</TT>' stands for ``Signal" (German for signal), `<TT>I</TT>' is the identifier of the signal, and `<TT>F</TT>' and `<TT>B</TT>' give the identifiers of the front and back elements of the signal. The direction for which the signal is valid is from front to back. </LI></UL><P>The following line contains the number <SPAN CLASS="MATH"><I>p</I></SPAN>, <!-- MATH
 $0 \le  p \le  100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2337a.gif
 ALT="$ \le$"><I>p</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2337a.gif
 ALT="$ \le$">100</SPAN>, of path selection rules,
    followed by another <SPAN CLASS="MATH"><I>p</I></SPAN> lines of the rules themselves. A rule is of the
    form `<TT>FW X Y Z</TT>' where `<TT>FW</TT>' is the identifier of
``Fahrstraßenwahl-Regel" (German for path selection rule), `<TT>X</TT>', `<TT>Y</TT>' and `<TT>Z</TT>'
are the elements of the rule as explained above.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output for every scenario begins with a line containing `<TT>Scenario #<SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>',
where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of the scenario starting at 1.

<P>
For every scenario print out the elements on the path from departure to destination
in the order they
are passed by the train. However, print the signals first, followed by the points.
Every element of the path
must be on a line by itself. Elements of the path are signal and point identifiers
(the first and the last signal
identifiers must also be printed). For every point you should also give the correct
position of the point as
either `<TT>+</TT>' or `<TT>-</TT>' on the same line, separated from the point identifier by
a single blank. If there is no possible path, print `<TT>NOT POSSIBLE</TT>'.

<P>
Terminate each scenario by a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
A AC
14
S AB A XXX
S A AB W1
W W1 A W2 P3
W W2 W1 P1 P2
S P1 N1 W2
S N1 P1 W11
W W11 F N1 W12
S F AC W11
S AC F XXX
S P2 N2 W2
S N2 P2 W12
W W12 W11 N3 N2
S P3 N3 W1
S N3 P3 W12
2
FW W1 W11 +
FW W11 W1 -
S1 S2
2
S S1 S2 XXX
S S2 S1 XXX
0
S1 S4
6
S S1 XXX W1
S S2 W1 XXX
S S3 XXX W2
S S4 W2 XXX
W W1 S1 S2 W2
W W2 S4 W1 S3
0
S1 S2
8
S S1 XXX W1
S S2 W4 XXX
S S3 W1 W2
S S4 W3 W4
W W1 S1 W2 S3
W W2 W3 W1 S3
W W3 W2 W4 S4
W W4 S2 W3 S4
1
FW W1 W2 +
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario #1:
A
N3
AC
W1 +
W12 -
W11 +

Scenario #2:
NOT POSSIBLE

Scenario #3:
S1
S4
W1 +
W2 -

Scenario #4:
S1
S3
S2
W1 +
W2 +
W3 -
W4 -
</PRE>

<P>

______________________________________________________
2338||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>S</I> = <I>s</I><SUB>1</SUB><I>s</I><SUB>2</SUB>...<I>s</I><SUB>2n</SUB></SPAN> be a well-formed string of parentheses. <SPAN CLASS="MATH"><I>S</I></SPAN> can be encoded in two different ways:<P><OL><LI>By an integer sequence <SPAN CLASS="MATH"><I>P</I> = <I>p</I><SUB>1</SUB><I>p</I><SUB>2</SUB>...<I>p</I><SUB>n</SUB></SPAN> where <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> is the number of left parentheses before the <SPAN CLASS="MATH"><I>i</I></SPAN>-th right parenthesis in <SPAN CLASS="MATH"><I>S</I></SPAN> (<SPAN CLASS="MATH"><I>P</I></SPAN>-sequence). </LI><LI>By an integer sequence <SPAN CLASS="MATH"><I>W</I> = <I>w</I><SUB>1</SUB><I>w</I><SUB>2</SUB>&nbsp;<I>w</I><SUB>n</SUB></SPAN> where for each right parenthesis, say <SPAN CLASS="MATH"><I>a</I></SPAN> in <SPAN CLASS="MATH"><I>S</I></SPAN>, we associate an integer which is the number of right parentheses counting from the matched left parenthesis of <SPAN CLASS="MATH"><I>a</I></SPAN> up to <SPAN CLASS="MATH"><I>a</I></SPAN>. (<SPAN CLASS="MATH"><I>W</I></SPAN>-sequence). </LI></OL><P>Following is an example of the above encodings:<P><P><BR><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=RIGHT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>S</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>(((()()())))</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>P</I></SPAN>-sequence</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>4 5 6666</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>W</I></SPAN>-sequence</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>1 1 1456</TT></TD></TR></TABLE><P><P><BR>Write a program to convert <SPAN CLASS="MATH"><I>P</I></SPAN>-sequence of a well-formed string to the <SPAN CLASS="MATH"><I>W</I></SPAN>-sequence of the same string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2338img1.gif ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2338img1.gif ALT="$ \le$">10</SPAN>), the number of test cases, followed by the input data for each test case. The first line of each test case is an integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2338img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2338img1.gif ALT="$ \le$">20</SPAN>), and the second line is the <SPAN CLASS="MATH"><I>P</I></SPAN>-sequence of a well-formed string. It contains <SPAN CLASS="MATH"><I>n</I></SPAN> positive integers, separated with blanks, representing the <SPAN CLASS="MATH"><I>P</I></SPAN>-sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output file consists of exactly <SPAN CLASS="MATH"><I>t</I></SPAN> lines corresponding to test cases. For each test case, the output line should contain n integers describing the <SPAN CLASS="MATH"><I>W</I></SPAN>-sequence of the string corresponding to its given <SPAN CLASS="MATH"><I>P</I></SPAN>-sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
6
4 5 6 6 6 6
9
4 6 6 6 6 8 9 9 9
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1 1 1 4 5 6
1 1 2 4 5 1 1 3 9
</PRE><P>
______________________________________________________
2339||||||false||||||
<P>People in the hidden region of the Bermuda Triangle make everything they need in triangular shapes. One day, someone decided to break the rule and bake a hexagonally shaped cake. But as usual, he has to serve the cake in triangular pieces. The pieces are equilateral triangles but in different sizes for different people. He can use as many triangles as needed to cut the cake into pieces, such that nothing remains from the cake. For example, the following figure shows one way that a hexagon with side 9 can be cut into triangles with side 2 and 3. (The cake is cut along the thick lines, thin lines are drawn to show the sizes).<P><DIV ALIGN="CENTER"><IMG WIDTH="453" HEIGHT="398" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2339.gif ALT="\epsfbox{p2339.eps}"></DIV><P>Input is a hexagon and triangle types (specified by the length of their sides) and the goal is to decide if the hexagon can be completely divided by the given triangle types.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2339.gif ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2339.gif ALT="$ \le$">10</SPAN>), the number of test cases, followed by the input data for each test case. Each test case consists of a single line, containing <SPAN CLASS="MATH"><I>s</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2339.gif ALT="$ \le$"><I>s</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2339.gif ALT="$ \le$">25</SPAN>), the length of the hexagon's side, followed by <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of triangle types ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2339.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2339.gif ALT="$ \le$">10</SPAN>), followed by n integers representing the length of each triangle type's side (between 1 and 25, inclusive).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There should be one output line per test case containing either `<TT>YES</TT>' or `<TT>NO</TT>' depending on whether the hexagon can be completely divided by the given triangle types.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
5 2 2 3
7 2 3 2
13 2 2 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
NO
NO
YES
</PRE><P>
______________________________________________________
2340||||||false||||||
The village's carpentry is located by a hill side. The carpenter's two little boys
play with a piece of wood which looks like a deformed wheel with two identical
convex polygon-shaped faces. One boy sets the wooden wheel on a slope at the
hill top and let it roll down. The other boy is to quickly place himself at
where he guesses the rolling wood would stop. Your program is to help him make
the right guess.

<P>
More formally, we consider the wooden wheel as a simple convex
polygon and we approximate the hill by a sequence of connected
line segments with decreasing slopes. The slope of the last
segment in the sequence is assumed to be zero, and the slope of
the first segment is assumed to be a positive number. Initially,
the wheel is placed on the hill such that there is at least one
point of contact between the wheel and segments. For example in
the following figure, the wheel in its initial position is drawn
in solid lines, while the final position is drawn in dashed lines.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2340.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2340.gif
 ALT="\epsfbox{p2340.eps}">
</DIV>

<P>
At any instant, the wheel rotates around one of its vertices, say
P, if the <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate of its center of gravity is decreased
(note that this condition is necessary at <EM>any</EM> instant during
the motion). It can be easily shown that at any instant, there is
at most one such vertex. Rotation around P is stopped when the
wheel touches a segment. The motion continues until no vertex can
be found such that the wheel can rotate around it. At any instant,
assume that changing the position of the center of gravity in any
direction for at most <SPAN CLASS="MATH">10<SUP>-5</SUP></SPAN> units, does not affect the
stability of the wheel. Also assume that the friction between the
wheel and the surface of the hill is so high that the wheel never
slides on the surface.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1
\le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2340.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2340.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by the input
data for each test case. In the first line of each test case there
is an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2340.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2340.gif
 ALT="$ \le$">10</SPAN>), that indicates the number of
the wheel wheel vertices. In each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines, there is
a pair of numbers which are <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of the initial
position of a vertex. After this, there is a single line
containing the initial <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of the center of
gravity of the wheel. You can assume that the center of gravity is
inside or on the boundary of the polygon (note that the given
center of gravity is not necessarily computable from wheel's
geometric shape). Next lines of the test data will describe the
shape of the hill. The surface of the hill is approximated with a
series of line segments with decreasing slopes ending with a
horizontal line segment. For each segment, there is a line
containing length and slope of a segment (both of them are real
numbers). The lines are ordered in decreasing slope (The last line
of this part of the input has slope zero). You can assume that the
last (horizontal) line is long enough that the wheel would not
pass its end. In the last line of the test case, there is a line
containing the x and y coordinates of the right end-point of the
first segment. All coordinates and slopes are real numbers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, there should be a single line in the output
file, containing two numbers which are <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of
the wheel's center of gravity. Round the numbers in the output to
3 digits after decimal point.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
4
40 30
30 37
24 30
30 26
27 29
30 1
100 0
40 30
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
28.854 20.031
</PRE>

<P>

______________________________________________________
2341||||||false||||||
<P>Tom the robocat is presented in a Robotics Exhibition for an enthusiastic audience of youngsters, placed around an <SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN> field. Tom which is turned off initially is placed in some arbitrary point in the field by a volunteer from the audience. At time zero of the show, Tom is turned on by a remote control. Poor Tom is shown a holographic illusion of Jerry in a short distance such that a direct path between them is either vertical or horizontal. There may be obstacles in the field, but the illusion is always placed such that in the direct path between Tom and the illusion, there would be no obstacles. Tom tries to reach Jerry, but as soon as he gets there, the illusion changes its place and the chase goes on. Let's call each chase in one direction (up, down, left, and right), a <EM>chase trip</EM>. Each trip starts from where the last illusion was deemed and ends where the next illusion is deemed out. After a number of chase trips, the holographic illusion no more shows up, and poor Tom wonders what to do next. At this time, he is signaled that for sure, if he returns to where he started the chase, a real Jerry is sleeping and he can catch it.<P><P><BR>To simplify the problem, we can consider the field as a grid of squares. Some of the squares are occupied with obstacles. At any instant, Tom is in some unoccupied square of the grid and so is Jerry, such that the direct path between them is either horizontal or vertical. It's assumed that each time Tom is shown an illusion; he can reach it by moving only in one of the four directions, without bumping into an obstacle. Tom moves into an adjacent square of the grid by taking one and only one step.<P><P><BR>The problem is that Tom's logging mechanism is a bit fuzzy, thus the number of steps he has taken in each chase trip is logged as an interval of integers, e.g. 2 to 5 steps to the left. Now is your turn to send a program to Tom's memory to help him go back. But to ease your task in this contest, your program should only count all possible places that he might have started the chase from.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2341img1.gif ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2341img1.gif ALT="$ \le$">10</SPAN>), the number of test cases, followed by the input data for each test case. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN>, which are the number of rows and columns of the grid respectively ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2341img1.gif ALT="$ \le$"><I>m</I>, <I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2341img1.gif ALT="$ \le$">100</SPAN>). Next, there are <SPAN CLASS="MATH"><I>m</I></SPAN> lines, each containing <SPAN CLASS="MATH"><I>n</I></SPAN> integers which are either `<TT>0</TT>' or `<TT>1</TT>', indicating whether the corresponding cell of the grid is empty (0) or occupied by an obstacle (1).<P>After description of the field, there is a sequence of lines, each corresponding to a chase trip of Tom (in order). Each line contains two positive integers which together specify the range of steps Tom has taken (inclusive), followed by a single upper-case character indicating the direction of the chase trip, which is one of the four cases of `<TT>R</TT>' (for right), `<TT>L</TT>' (for left), `<TT>U</TT>' (for up), and `<TT>D</TT>' (for down). (Note that these directions are relative to the field and are not directions to which Tom turns). This part of the test case is terminated by a line containing exactly two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, there should be a single line, containing an integer indicating the number of cells that Tom might have started the chase from.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
6 6
0 0 0 0 0 0
0 0 0 1 1 0
0 1 0 0 0 0
0 0 0 1 0 0
0 0 0 1 0 1
0 0 0 0 0 1
1 2 R
1 2 D
1 1 R
0 0
3 4
0 0 0 0
0 0 0 0
0 0 0 0
1 2 R
3 7 U
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10
0
</PRE><P>
______________________________________________________
2342||||||false||||||
<P>The scientific committee members of the 26-th ACM/ICPC, who design the contest problems, use the following encryption algorithm to communicate the problem drafts securely through the Internet. To encrypt a text, all occurrences of each letter is replaced with another letter (possibly itself), such that no two letters are encrypted to the same letter. Both original and encrypted texts consist of only upper-case letters and blanks. Blanks are not encrypted and are repeated exactly in the encrypted text. As an example, the string `<TT>GSRH RH GSV URIHG HZNKOV</TT>' is the encrypted form of `<TT>THIS IS THE FIRST SAMPLE</TT>' according to the encryption table (A <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2342img1.gif ALT="$ \rightarrow$"></SPAN> Z, B <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2342img1.gif ALT="$ \rightarrow$"></SPAN> Y, C <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2342img1.gif ALT="$ \rightarrow$"></SPAN> X, ..., Z <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2342img1.gif ALT="$ \rightarrow$"></SPAN> A).<P>A recipient of a problem draft has lost the encryption table, but he has a dictionary which includes all the possible words appearing in the problems. You are to help him set up a decryption table to enable him restore the original problem draft from the encrypted one. Given a dictionary of the original words used in the text, and the encrypted text, we want to find the right encryption table such that after decrypting the given encrypted text back to the original one, all words can be found in the dictionary.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first part of the input file is a dictionary of English words common to all test cases. The first line of the file is <SPAN CLASS="MATH"><I>d</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2342img1.gif ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2342img1.gif ALT="$ \le$">50000</SPAN>); the number of words in the dictionary, followed by <SPAN CLASS="MATH"><I>d</I></SPAN> lines each containing a word in the dictionary. The words in the dictionary are sorted in alphabetical order and all are in uppercase&#163; Each word has at most 20 characters, but you can assume that sum of the length of all words in the dictionary is no more than 350,000. The next line contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2342img1.gif ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2342img1.gif ALT="$ \le$">10</SPAN>), the number of test cases, followed by the input data for each test case. Each test case, which is preceded by a single blank line, consists of multiple lines in the input file forming the encrypted text. Each line has a string containing only uppercase letters and blank. You may assume that no line break is occurred in the middle of a word and there may be arbitrary number of blank characters at the end of each line. Maximum length of input lines is 80.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output file contains exactly <SPAN CLASS="MATH"><I>t</I></SPAN> lines, each corresponding to a test case. Each line should contain a single string of 26 characters which is the encryption of the string `<TT>ABCDEFGHIJKLMNOPQRSTUVWXYZ</TT>' according to the encryption table used in the test case. Letters in the output string should be in uppercase. It is possible that some letters do not appear in the encrypted text at all. In this case, put a `<TT>*</TT>' mark in place of those letters not appearing in the decrypted version of the input text. If the test case has no solution, the output line should contain `<TT>#No solution#</TT>'. If there is more than one possible encryption table for a test case, the output line should contain `<TT>#More than one solution#</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
14
BE
CHANGE
FIRST
IN
IS
MUST
SAMPLE
SEE
THE
THIS
TO
WISH
WORLD
YOU
4

GSRH RH GSV URIHG HZNKOV

IZM BMVU    SP UGP
RGTANP IZM KFVG UZ VPP
FA UGP KZWCQ

XYZ ABCDEFG

XZY ABD
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Z***VU*SR**ON**K*IHG******
TSRQP*NGF**CBAZ**WVUM*K*I*
#No solution#
#More than one solution#
</PRE><P>
______________________________________________________
2343||||||false||||||
<P>Willy the spider used to live in the chemistry laboratory of Dr. Petro. He used to wander about the lab pipes and sometimes inside empty ones. One night while he was in a pipe, he fell asleep. The next morning, Dr. Petro came to the lab. He didn't notice Willy while opening the valve to fill the pipes with hot water. Meanwhile, Stanley the gray mouse got what was going to happen. No time to lose! Stan ran hard to reach the valve before Willy gets drawn, but... Alas! He couldn't make it!<P>Poor Willy was boiled in hot water, but his memory is still in our hearts. Though Stan tried his best, we want to write a program, in the memory of Willy, to compute the time Stan had, to rescue Willy, assuming he started to run just when the doctor opened the valve.<P>To simplify the problem, assume the pipes are all vertical cylinders with diameter 1 cm. Every pipe is open from the top and closed at the bottom. Some of the pipes are connected through special horizontal pipes named <EM>links</EM>. The links have very high flow capacity, but are so tiny that at any given time, the volume of water inside them is negligible. The water enters from top of one of the pipes with a constant rate of 0.25 <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2343img1.gif ALT="$ \pi$"></SPAN> cm<SPAN CLASS="MATH"><SUP>3</SUP></SPAN>/sec and begins to fill the pipe from the bottom until the water reaches a link through which it flows horizontally and begins to fill the connected pipe. From elementary physics we know if two pipes are connected and the surface of the water is above the connecting link, the level of water in both pipes remains the same when we try to fill one of them. In this case the water fills each pipe with a rate equal to half of the rate of incoming water. As an example, consider the following configuration:<P><DIV ALIGN="CENTER"><IMG WIDTH="604" HEIGHT="719" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2343img1.gif ALT="\epsfbox{p2343.eps}"></DIV><P>First, the lower 2 centimeters of the left pipe is filled with water at full rate, then, the lower 3 centimeters of the right pipe is filled, and after that, the upper part of the two pipes are filled in parallel at half rate. The input to your program is a configuration of pipes and links, and a target level in one of the pipes (the heavy dotted line in the above figure). The program should report how long it takes for the level of water to reach the target level. For the above configuration, the output is 9 seconds.<P>It is assumed that the water falls very rapidly, such that the time required for the water to fall can be neglected. The target level is always assumed to be a bit higher than the specified level for it. As an example, if we set the target point to level 4 in the left pipe in the figure above, the elapsed time for water to reach that target is assumed to be 5 (not 2), Also note that if the water reaches to the top of a pipe (say in level <SPAN CLASS="MATH"><I>x</I></SPAN>), it won't pour out outside the pipe until empty spaces in connected pipes below level <SPAN CLASS="MATH"><I>x</I></SPAN> are filled (if can be filled, i.e. the level of water reaches the connecting links). (Note that there may be some links at level <SPAN CLASS="MATH"><I>x</I></SPAN>, to which water is entered). After all such spaces are filled; the water level would not go up further.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>To describe positions, we assume the coordinates are expressed as (<SPAN CLASS="MATH"><I>x</I>, <I>y</I></SPAN>) and the origin lies in the top-left of all pipes and links. (Note that <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates are increased downwards). All coordinates are integer numbers between 0 and 100, inclusive.<P>The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2343img1.gif ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2343img1.gif ALT="$ \le$">10</SPAN>), the number of test cases, followed by the input data for each test case. The first line of each test case is <SPAN CLASS="MATH"><I>p</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2343img1.gif ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2343img1.gif ALT="$ \le$">20</SPAN>), the number of pipes, followed by <SPAN CLASS="MATH"><I>p</I></SPAN> lines, each describing a pipe. Each pipe description line consists of three numbers. The first two are (<SPAN CLASS="MATH"><I>x</I>, <I>y</I></SPAN>) coordinates of the upper-left corner of the pipe and the third number is the height of the pipe (at least 1 cm and at most 20 cm). Note that diameter of each pipe is 1 cm.<P>After input data describing the pipes, there is a line containing a single integer <SPAN CLASS="MATH"><I>l</I></SPAN>, which is the number of links ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2343img1.gif ALT="$ \le$"><I>l</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2343img1.gif ALT="$ \le$">50</SPAN>). After it, there are l lines describing links. Each link description contains 3 integers. The first two are (<SPAN CLASS="MATH"><I>x</I>, <I>y</I></SPAN>) coordinates of the left end-point of the link and the third is the length of the link (at least 1 cm and at most 20 cm). It is assumed that the width of the link is zero.<P>The last line for each test case contains two numbers. The first is the number of target pipe (starting from one, with the order appeared in test data). The second line is the desired <SPAN CLASS="MATH"><I>y</I></SPAN> for the level of water in the target pipe (note that the specified level may be out of the pipe at all).<P>You can assume the following about the input:<UL><LI>The water enters into the first pipe. </LI><LI>No link crosses a pipe. </LI><LI>No two links have the same y coordinates. </LI><LI>No two pipes have the same upper-left <SPAN CLASS="MATH"><I>x</I></SPAN> coordinates. </LI><LI>Both endpoints of each link are connected to pipes. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output file should contain exactly <SPAN CLASS="MATH"><I>t</I></SPAN> lines with no blank lines in between,each corresponding to one test case. Each output line should contain the time required for the water to reach the target level in the target pipe (an integer number). If in a specific test case, the water never reaches the target level, the line should contain `<TT>No Solution</TT>' string in it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
2
2 0 6
5 1 6
1
3 4 2
2 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9
</PRE><P>
______________________________________________________
2344||||||false||||||
<P>We are to predict some facts about the behavior of a single processor designed for running two programs in parallel. Programs are sequences of commands according to the following grammar:<P><TABLE COLS=3><COL ALIGN=RIGHT><COL ALIGN=CENTER><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>Program<SPAN CLASS="MATH">&gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2344img1.gif ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>Command<SPAN CLASS="MATH">&gt;</SPAN><SPAN CLASS="MATH"><SUP>*</SUP></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>Command<SPAN CLASS="MATH">&gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2344img1.gif ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>Variable<SPAN CLASS="MATH">&gt;</SPAN> := <SPAN CLASS="MATH">&lt;</SPAN>Operand<SPAN CLASS="MATH">&gt;</SPAN> <SPAN CLASS="MATH">&lt;</SPAN>Operator<SPAN CLASS="MATH">&gt;</SPAN> <SPAN CLASS="MATH">&lt;</SPAN>Operand<SPAN CLASS="MATH">&gt;</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>Operator<SPAN CLASS="MATH">&gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2344img1.gif ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>+ <SPAN CLASS="MATH">|</SPAN> -</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>Operand<SPAN CLASS="MATH">&gt;</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2344img1.gif ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>Variable<SPAN CLASS="MATH">&gt;</SPAN> <SPAN CLASS="MATH">|</SPAN> <SPAN CLASS="MATH">&lt;</SPAN>Constant<SPAN CLASS="MATH">&gt;</SPAN></TD></TR></TABLE><P>A <SPAN CLASS="MATH">&lt;</SPAN>Variable<SPAN CLASS="MATH">&gt;</SPAN> is a sequence of (at most 20) alphanumeric characters (A...Z, a...z, and 0...9) starting with a letter (not case sensitive). A <SPAN CLASS="MATH">&lt;</SPAN>constant<SPAN CLASS="MATH">&gt;</SPAN> is an unsigned integer number (less than 100). There may be arbitrary number of blank or tab characters between tokens.<P>Before execution, programs are translated into machine language. A statement of the form X := Y + Z is translated to the following set of machine instructions:<P><PRE>
Mov R1, Y
Mov R2, Z
Add R1, R2
Mov X, R1
</PRE><P>A MOV instruction copies the content of its second operand into its first operand. An `<TT>Add (Sub)</TT>' instruction, adds (subtracts) its second operand from its first operand and the result is stored in the first operand. Note that Y and Z denote either a variable or an integer constant. Instructions generated for the command X := Y - Z is similar to the above instructions, except that `<TT>Sub</TT>' command is used instead of `<TT>Add</TT>'.<P>The processor is given two machine language programs and starts executing them from the first instruction. In each step, it randomly selects one of the two programs and runs the next instruction from the selected program. This continues until one program reaches its end. In this situation, the remaining instructions from the other one are executed sequentially to the end and the processor stops. It is assumed that all variables are shared between two programs, but each program has a separate register set. The goal of this program is to compute the expected final value of all variables among all possible executions of the programs. More precisely, we want to consider every possible execution of the two programs and for each variable, calculate the average of its final value in different executions. It is assumed that the initial value of all variables is zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2344img1.gif ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2344img1.gif ALT="$ \le$">10</SPAN>), the number of test cases, followed by the input data for each test case. The data for each test case consists of a pair of programs. Each program is written as a sequence of consecutive lines, each line containing exactly one command. Programs end with a line containing only the word `<TT>END</TT>'. You may assume that no variable in any program is named `END'. There is no blank line between programs of one test case. There are at least one and at most 25 lines in each program. Total number of variables in two programs is no more than 10.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the output file should contain the expected final value of all variables in alphabetical order of variable names (digits precede letters in this order). Output for different test cases should be separated by exactly one blank line. Round the numbers in the output to 4 digits after decimal point. Do not omit trailing zeros after decimal point (e.g. write 1.2000 instead of 1.2).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 S := 1 + 3
END
S := S+S
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3.0000
</PRE><P>
______________________________________________________
2345||||||false||||||
<P>
There is a fierce competition among high-school graduates in Iran
to pass the centralized nationwide university entrance
examination. Ministry of Science, Research, and Technology has set
up the Education Evaluation Organization (EEO) to take care of all
aspects of this big exam. This year the EEO managed to select some
150,000 students to enter universities out of 1.4 million high
school graduates participated in a tough 4.5 hours multiple-choice
exam. This annual event is usually preceded by a multi-billion
Rial business offering preparatory courses to enthusiastic
students. A few weeks after the big exam day, each participant
receives a score sheet, and a list of Field-Department-University
(FDU), displaying each field of study in the universities'
departments (e.g., the Software Engineering field of Computer
Engineering department at Sharif University of Technology) along
with their capacity for that year. The eligible participants
(those who have scored enough to be allowed to declare their FDU
priorities) fill out a priority indication form, and declare the
FDUs they like to enter, in the order of their preference. The EEO
processes the forms, and considering the total score, the
participant's FDU priority list, and some other selection rules,
enters the accepted participants' names in the list of each FDU,
until all capacities are exhausted. Those who are not entered in a
list are considered failed and may try again next year. Each
accepted participant's name may be entered in only one list.

<P>
One of the interesting selection rules is to persuade participants to enter
universities in the vicinity of their home towns. This is to help reduce the
number of requests for staying in the university dormitories.

<P>
The selection process is so complex and so sensitive to many, that EEO has
decided to hire the very best programmers in Iran to design a new selection
algorithm and write a completely new program for what they have been doing
for years. ACM programming contest is where these programmers can be found.

<P>
There are <SPAN CLASS="MATH"><I>N</I></SPAN> students <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> to <SPAN CLASS="MATH"><I>S</I><SUB>N</SUB></SPAN> , and <SPAN CLASS="MATH"><I>M</I></SPAN> items <SPAN CLASS="MATH"><I>F</I><SUB>1</SUB></SPAN> to
<SPAN CLASS="MATH"><I>F</I><SUB>M</SUB></SPAN> , each representing one of the FDUs. There are also a number
of geographic regions. For each participant, the total score, the
geographic region where his/her high school diploma was awarded,
and a priority list of his/her wanted FDUs are available. For each
FDU, the geographic region where the corresponding university is
located, and its capacity for that year is recorded.

<P>
Write a program to compute the list of accepted students with the
FDU they can enter to, given the above list of input data. Your
program must abide with the following rules:

<P>

<OL>
<LI>(Local student selection rule) Suppose two students A and B
have both selected F in their priority lists and F is in region R.
Also suppose that score of A is greater than B's score.  Then, if
B is from region R (local) and A is from other regions
(non-local), and B's score is greater than 70% of A's score, then
B has priority over A to enter F. In <EM>all</EM> other cases A has
priority over B to enter F.

<P>
</LI>
<LI>(Fairness rule) Students should be treated according to their
priority list of FDUs. That is, an accepted student will be
accepted to the first possible FDU he/she can enter.
</LI>
</OL>

<P>
Note: We assume that scores are all different integer values.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1
\le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2345img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2345img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by the input
data for each case. The first line of each test case contains <SPAN CLASS="MATH"><I>N</I></SPAN>
(<!-- MATH
 $1 \le N \le 150$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2345img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2345img1.gif
 ALT="$ \le$">150</SPAN>) and <SPAN CLASS="MATH"><I>M</I></SPAN> (<!-- MATH
 $1 \le M \le 50$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2345img1.gif
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2345img1.gif
 ALT="$ \le$">50</SPAN>) followed by <SPAN CLASS="MATH"><I>N</I></SPAN>
lines, each for one student. The format of these lines is <!-- MATH
 $R_i,
M_i, K, F_{i1}, \dots, F_{iK}$
 -->
<SPAN CLASS="MATH"><I>R</I><SUB>i</SUB>, <I>M</I><SUB>i</SUB>, <I>K</I>, <I>F</I><SUB>i1</SUB>,..., <I>F</I><SUB>iK</SUB></SPAN> in this order. In this line, that
is for student <SPAN CLASS="MATH"><I>i</I>, <I>R</I><SUB>i</SUB></SPAN> is his/her region number, <SPAN CLASS="MATH"><I>M</I><SUB>i</SUB></SPAN> is his/her
score in the entrance exam, <SPAN CLASS="MATH"><I>K</I></SPAN> is the number of FDUs in his/her
priority list (<!-- MATH
 $0 \le K \le M$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2345img1.gif
 ALT="$ \le$"><I>K</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2345img1.gif
 ALT="$ \le$"><I>M</I></SPAN>), and his/her priority list
containing the FDU numbers in order of interest. Then there are M
lines, one for each FDU. Each line contains <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN>, and <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> in
that order, which respectively is region number of <SPAN CLASS="MATH"><I>F</I><SUB>i</SUB></SPAN> (the
<SPAN CLASS="MATH"><I>i</I></SPAN>-th FDU) and the capacity of <SPAN CLASS="MATH"><I>F</I><SUB>i</SUB></SPAN>. Note that region numbers
are arbitrary integers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Outputs for different test cases are separated by exactly one
blank line. For each test case, you should write <SPAN CLASS="MATH"><I>N</I></SPAN> lines, one
for each of the <SPAN CLASS="MATH"><I>N</I></SPAN> students. If student <SPAN CLASS="MATH"><I>i</I></SPAN> has been accepted to
FDU <SPAN CLASS="MATH"><I>F</I><SUB>j</SUB></SPAN>, then <SPAN CLASS="MATH"><I>i</I></SPAN>-th line should contain <SPAN CLASS="MATH"><I>j</I></SPAN>, and `<TT>not
accepted</TT>', if that student has not been accepted in any FDU of
his/her interest.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
9 2
1 100 2 1 2
2 80 2 2 1
1 90 1 1
2 40 1 2
2 50 1 1
1 60 1 2
2 75 1 1
1 95 1 1
2 30 1 2
1 3
2 4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
2
1
2
not accepted
2
not accepted
1
2
</PRE>

<P>

______________________________________________________
2346||||||false||||||
<P>You must have heard of the Josephus problem in connection with link lists. It dealt with finding the only survivor among <SPAN CLASS="MATH"><I>n</I></SPAN> persons. Here you have a game with a rather happy outcome. Suppose <SPAN CLASS="MATH"><I>n</I></SPAN> players stand in a circle. Counting from player number 1 every alternate player is temporarily removed (for example, at first 2 is removed) to finally end up with the single survivor. After the survivor has been determined each player with number higher than the survivor is paid Tk. 1 and permanently removed from the circle. The same operation is repeated with the remaining players, and players with number higher than the survivor are paid Tk. 1 each and removed from the circle again. Once such an operation fails to decrease the number of players in the circle, each of them is paid Tk. 2 and the game ends. Your problem is to determine total amount of money Josephus will have to pay to all players.<P><DIV ALIGN="CENTER"><IMG WIDTH="547" HEIGHT="209" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2346.gif ALT="\epsfbox{p2346.eps}"></DIV><P>For example, with 5 players in the first round survivor is 3, so players number 4 and 5 are paid Taka 1 each and removed from the game. In the next round survivor is player number 3 again. Consequently no one could be removed, therefore each of them is paid Taka 2, so in total <SPAN CLASS="MATH">(2 + 2 <TT>x</TT> 3 =)</SPAN> 8 will be paid for this game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input for every problem instance is an integer not exceeding 32,767 in a separate line. Input terminates with end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output for each problem instance is an integer not exceeding 65,535 which represents the amount of Taka to be paid in total to all the players.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
10
7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
13
14
</PRE><P>
______________________________________________________
2347||||||false||||||
<P>Consider the following recurrence relation defined on nonnegative integral values of <SPAN CLASS="MATH"><I>n</I></SPAN>:<P><P><BR><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>F</I>(<I>n</I>) = <IMG WIDTH="343" HEIGHT="77" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2347img1.png ALT="$\displaystyle \cases{
f_{0}, &amp; if \quad $n=0$ \cr
f_{1}, &amp; if \quad $n=1$ \cr
a \times F (n-1) + b \times F(n-2), &amp; otherwise \cr}
$"></DIV><P></P><P><P><BR>Here <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are constants such that the following two conditions are satisfied:<P><P><BR><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><TABLE><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>(1)</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>a</I><SUP>2</SUP> +4<I>b</I> &gt; 0</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>(2)</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>| <I>a</I> - <IMG WIDTH="73" HEIGHT="41" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2347img1.png ALT="$ \sqrt{{a^{2}+4b}}$">|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2347img1.png ALT="$ \le$">2</TD></TR></TABLE></SPAN></DIV><P><P><BR>Given the values of <SPAN CLASS="MATH"><I>f</I><SUB>0</SUB></SPAN>, <SPAN CLASS="MATH"><I>f</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN>, your job is to write a program that calculates the value of <SPAN CLASS="MATH"><I>F</I>(<I>n</I>)</SPAN>. You may safely assume that <SPAN CLASS="MATH"><I>F</I>(<I>n</I>)</SPAN> will be an integer with absolute value not exceeding <SPAN CLASS="MATH">10<SUP>9</SUP></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2347img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2347img1.png ALT="$ \le$">10, 000)</SPAN> denoting the number of test cases to follow.<P>Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains five (5) values in the following order: <SPAN CLASS="MATH"><I>f</I><SUB>0</SUB></SPAN>, <SPAN CLASS="MATH"><I>f</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN>. Here, <SPAN CLASS="MATH"><I>f</I><SUB>0</SUB></SPAN> and <SPAN CLASS="MATH"><I>f</I><SUB>1</SUB></SPAN> are integers with absolute values not exceeding <SPAN CLASS="MATH">10<SUP>9</SUP></SPAN>, and <SPAN CLASS="MATH"><I>n</I></SPAN> is a nonnegative integer not greater than. On the other hand, <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are floating-point numbers satisfying the two conditions stated in the problem description. Be assured that <SPAN CLASS="MATH">| <I>a</I>|,| <I>b</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2347img1.png ALT="$ \le$">10<SUP>6</SUP></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input file print a separate line containing the value of <SPAN CLASS="MATH"><I>F</I>(<I>n</I>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>  
3 
0 1 1 1 20 
0 1 -1 0 1000000000 
-1 1 4 -3 18
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>  
6765 
-1 
387420487
</PRE><P>
______________________________________________________
2348||||||false||||||
<P>
Jashim runs a juice shop near the university campus. Students buy their weekly juice stock from his shop. Every morning juice producers bring their supplies to his shop in jars of two different sizes. Each of these jars can contain a particular volume (expressed in liter) of juice and has marks to indicate that volume. The suppliers have jars of different volumes and jars given today are not necessarily the same in volume as those given yesterday. Had the shop been at some other location, Jashim wouldn't have faced any difficulty with the jars, but the students like to buy the smallest volume of juice Jashim is ready to provide.  So, every morning, Jashim has to undergo a long process of making the smallest volume of juice possible with the given jars.

<P>
Jashim doesn't have any measuring pot for direct measurement of volume. Rather he uses a very large barrel (of almost infinite capacity) for this purpose. He takes one of the supplied jars and either pours all the juice into the barrel or takes it out from the barrel into the supplied jar to jar's full capacity. The volume of juice transferred in any case is equal to the supplied jar's capacity. In this way, he uses both types of jar and pours juice into or takes it out of the barrel as many times as necessary to get the minimum volume achievable by this mechanism. After, the minimum volume is prepared, he uses this as measuring volume to sell juice of that volume. Now you are to help Jashim.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input file contains multiple cases. Each case contains two numbers <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(1 \le n \le m \le 2147483647)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2348img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2348img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2348img1.png
 ALT="$ \le$">2147483647)</SPAN> where <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> are the volumes (in liter) of two types of supplied jars. So, you can pour <SPAN CLASS="MATH"><I>m</I></SPAN> (or <SPAN CLASS="MATH"><I>n</I></SPAN>) liters of juice into the barrel and also take <SPAN CLASS="MATH"><I>m</I></SPAN> (or <SPAN CLASS="MATH"><I>n</I></SPAN>) liters of juice out of the barrel at each step. You are to determine the minimum volume (in liter) achievable by this process. Besides, determine the minimum number of times you are to pour in and take out from the barrel. Input terminates by a pair of <TT>0</TT>'s. You need not process this last case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, output consists of three lines. First line specifies the minimum volume achievable by this process. Second line specifies the minimum number of times volume <SPAN CLASS="MATH"><I>m</I></SPAN> has been poured into or taken out from the barrel and third line specifies the same for volume <SPAN CLASS="MATH"><I>n</I></SPAN>. If some volume need not be taken out or poured in, print ``<SPAN CLASS="MATH"><I>m</I></SPAN> (or <SPAN CLASS="MATH"><I>n</I></SPAN>) <TT>liter(s) not needed</TT>". Print a blank line between successive cases. Follow the format given in sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3240 1376
2607 79
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>  
minimum volume: 8 liter(s) 
3240 liter(s) withdrawn 31 times 
1376 liter(s) poured 73 times 
 
minimum volume: 79 liter(s) 
2607 liter(s) not needed 
79 liter(s) poured 1 times
</PRE>

<P>

______________________________________________________
2349||||||false||||||
<P>In combinational logic design, a Boolean function is classically expressed as sum of minterms. For example, <SPAN CLASS="MATH"><I>F</I>(<I>x</I>, <I>y</I>, <I>z</I>) = <IMG WIDTH="23" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{xy}}$"><I>z</I> + <IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{x}}$"><I>yz</I> + <I>xy</I><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{z}}$"> + <I>xyz</I></SPAN> is a Boolean function, where <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{xy}}$"><I>z</I>,<IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{x}}$"><I>yz</I>, <I>xy</I><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{z}}$"></SPAN> , and <SPAN CLASS="MATH"><I>xyz</I></SPAN> are the <EM>minterms (MTs)</EM> of the function. Usually, minterms are represented using their binary or decimal representation. For example, minterm <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{xy}}$"><I>z</I></SPAN> can be represented as 001(binary) or simply as 1(decimal) and minterm <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{x}}$"><I>yz</I></SPAN> can be represented as 011(binary) or 3(decimal). Using this numeric representation of minterms, the above function can be expressed as <SPAN CLASS="MATH"><I>F</I>(<I>x</I>, <I>y</I>, <I>z</I>) = <I>S</I>(1, 3, 6, 7)</SPAN> or <SPAN CLASS="MATH"><I>F</I>(<I>x</I>, <I>y</I>, <I>z</I>) = <I>S</I>(001, 011, 110, 111)</SPAN>. Very often, the binary representation of minterms are used for computer based processing of Boolean function.<P>Using the Boolean algebra theorem <SPAN CLASS="MATH"><I>Ax</I> + <I>A</I><IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{x}}$"> = <I>A</I></SPAN>, we can combine two product terms to generate a reduced product term. For example, <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{xy}}$"><I>z</I> + <IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{x}}$"><I>yz</I> = <IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{x}}$"><I>z</I></SPAN> and <SPAN CLASS="MATH"><I>xy</I><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{z}}$"> + <I>xyz</I> = <I>xy</I></SPAN>. The reduced product terms of a function are called <EM>prime implicants (PIs)</EM> of the function. Therefore, a Boolean function can be expressed as sum of prime implicants. For example, the above function can be expressed as <SPAN CLASS="MATH"><I>F</I>(<I>x</I>, <I>y</I>, <I>z</I>) = <IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{x}}$"><I>z</I> + <I>xy</I></SPAN>. Very often, the prime implicants are represented using binary notation, where a missing variable is represented by `<SPAN CLASS="MATH">-</SPAN>' . For example, the prime implicant <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2349img1.png ALT="$ \overline{{x}}$"><I>z</I></SPAN> is represented as 0<SPAN CLASS="MATH">-</SPAN>1 and <SPAN CLASS="MATH"><I>xy</I></SPAN> is represented as 11<SPAN CLASS="MATH">-</SPAN>. Then the above function can be expressed as <SPAN CLASS="MATH"><I>F</I>(<I>x</I>, <I>y</I>, <I>z</I>) = <I>S</I>(0</SPAN><SPAN CLASS="MATH">-</SPAN><SPAN CLASS="MATH">1, 11 -)</SPAN>.<P>Most of the prime implicant generation algorithms generate more prime implicants than the minimum requirement. For example, for the above function, minterms 001 and 011 generate the prime implicant 0<SPAN CLASS="MATH">-</SPAN>1, minterms 110 and 111 generate the prime implicant 11<SPAN CLASS="MATH">-</SPAN> , and minterms 011 and 111 generate the prime implicant <SPAN CLASS="MATH">-</SPAN>11. But the prime implicant <SPAN CLASS="MATH">-</SPAN>11 is not required for expressing the function. Therefore, given a set of minterms and a set of prime implicants for a function, it is required to find a minimal subset of the prime implicants that covers all the minterms of the function. The problem is indeed an optimization problem. An algorithm exists for this problem called <EM>cover most algorithm</EM>, which is discussed below.<P><EM>Cost</EM> of a prime implicant is the number of 0's and 1's in the prime implicant. For example, the cost of the prime implicant 0<SPAN CLASS="MATH">-</SPAN>1 is 2. A prime implicant <EM>covers</EM> a minterm if and only if the prime implicant can be expanded to produce the minterm. For example, the prime implicant 0<SPAN CLASS="MATH">-</SPAN>1 covers the minterms 001 and 011.<P>In cover most algorithm, the <EM>first choice</EM> is a prime implicant that covers maximum number of minterms. If more than one prime implicant cover the same number of minterms, the choice is the prime implicant with the minimum cost. Tie is broken by selecting the first prime implicant in order. The algorithm is illustrated below for the above function using the following table. A `x' in the table indicates covering.<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=7 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>MT</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>001</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>011</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>110</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>111</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Cost</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>No of</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>minterms</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>PI</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>covered</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0<SPAN CLASS="MATH">-</SPAN>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>X</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>x</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>11<SPAN CLASS="MATH">-</SPAN></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>X</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>x</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">-</SPAN>11</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>x</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>x</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD></TR></TBODY></TABLE></DIV><P><P><BR>The first choice is the prime implicant 0<SPAN CLASS="MATH">-</SPAN>1. Then the problem reduces to the following table.<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>MT</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>110</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>111</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Cost</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>No of</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>minterms</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>PI</TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>covered</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>11<SPAN CLASS="MATH">-</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>x</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>X</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">-</SPAN>11</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>X</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD></TR></TBODY></TABLE></DIV><P><P><BR>The next choice is the prime implicant 11<SPAN CLASS="MATH">-</SPAN>. Then the problem reduces to null and the minimum cover of the given prime implicants is 0<SPAN CLASS="MATH">-</SPAN>1 and 11<SPAN CLASS="MATH">-</SPAN>.<P>You need to write a program to find the minimal cover of prime implicants for a given set of prime implicants and a set of minterms for a function. You also need to identify whether the given set of prime implicants covers all the minterms of the function or not. If the given set of prime implicants does not cover all the minterms, the minimal cover produced by this algorithm will not cover the given function.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases. Each test case starts with three integers in a line for <EM>number of variables</EM>, <EM>number of minterms</EM>, and <EM>number of prime implicants</EM> as shown in the sample input. In the next line(s) minterms are listed separated by space or new line as shown in the sample input. In the following line(s) prime implicants are listed separated by space or new line. The range of number of variables is 2 to 20. Number of minterms and number of prime implicants will not exceed 200. The input terminates with three zeros for number of variables, number of minterms, and number of prime implicants.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, print the test case number followed by either `<TT>No of required PIs = <SPAN CLASS="MATH">&lt; <I>value</I> &gt;</SPAN></TT>' or `<TT>PIs don't cover all MTs</TT>' depending on the input case as shown in the sample output. Print a blank line between two successive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>  
4 7 5 
0001 0010 0101 0110 1001 1101 1110 
--01 -11- 0-1- 0--1 -1-1 
4 8 5 
0000 0010 0100 1000 
1010 1011 1100 1101 
---0 -10- 101- 01-- 0-0- 
4 9 5 
0000 0010 0011 0100 1000 1010 1011 1100 1101 
---0 -10- 101- 01-- 0-0- 
5 15 6 
00110 00100 01110 01100 11000 11010 11110 11100 10110 10100 
01111 01101 11111 11101 10001 
-11-- --1-0 001-- 11--0 10001 01-11 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>  
Test #1: No of required PIs = 3 
Test #2: No of required PIs = 3 
Test #3: PIs don't cover all MTs 
Test #4: No of required PIs = 4
</PRE><P>
______________________________________________________
2350||||||false||||||
<P>The early Greeks have made great contributions to the field of mathematics. Among the great mathematicians of this times were Euclid and Pythagoras. The 23 volume Elements of Euclid is still regarded as on of the cornerstones in the study of mathematics.<P>Euclid made an important contributions to a problem posed by Pythagoras - that of finding all the perfect numbers. The number 6 is called a perfect number because <SPAN CLASS="MATH">6 = 1 + 2 + 3</SPAN>, the sum of all its proper divisors, (i.e. divisors less than 6). Another example of a perfect number is 28, because <SPAN CLASS="MATH">28 = 1 + 2 + 4 + 7 + 14</SPAN>, and 1, 2, 4, 7 and 14 are the divisors of 28 less than 28.<P>In Book IX of the `Elements' Euclid found all the even perfect numbers. (It has been proven later much later, in the 20-th century that all perfect numbers are even.) Euclid proved that an even number is perfect if it has the form<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">2<SUP>p-1</SUP>(2<SUP>p</SUP> - 1)</DIV><P></P>where both <SPAN CLASS="MATH"><I>p</I></SPAN> and <SPAN CLASS="MATH">2<SUP>p</SUP> - 1</SPAN> are prime numbers.<P>Two thousand years later, Leonhard Euler proved the converse of Euclid's theorem. That is every even perfect number must be of Euclid's type. For example, for 6 and 28, we have<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">6 = 2<SUP>2-1</SUP>(2<SUP>2</SUP> -1), and 28 = 2<SUP>3-1</SUP>(2<SUP>3</SUP> - 1)</DIV><P></P><P>Perfect numbers are very rare. By 1975, only 24 perfect numbers have been discovered. The first four perfect numbers are<P><P><BR>6, 28, 496, and 8128<P><P><BR>which correspond to the following values of <EM>p</EM><P><P><BR>2, 3, 5, and 7.<P><P><BR>You would be given several integer numbers <SPAN CLASS="MATH"><I>p</I></SPAN>, which would not necessarily be prime numbers. You have to determine if <SPAN CLASS="MATH">2<SUP>p-1</SUP>(2<SUP>p</SUP> - 1)</SPAN> is a perfect number. The largest perfect number in this problem will not exceed <SPAN CLASS="MATH">2<SUP>33</SUP></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains two lines of integers. The first line contains the number of integers appearing on the second line. The second line contains the values of <SPAN CLASS="MATH"><I>p</I></SPAN> that should be tested.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each integer value to be tested output ``<TT>Yes</TT>" or ``<TT>No</TT>" on a line of its own. The output will be ``<TT>Yes</TT>" if the integer value <SPAN CLASS="MATH"><I>p</I></SPAN> generates a perfect number and ``<TT>No</TT>" otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>  
6 
2,3,4,5,6,7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>  
Yes 
Yes 
No 
Yes 
No 
Yes
</PRE><P>
______________________________________________________
2351||||||false||||||
<P>
Rubik's cube was a very popular puzzle game in the eighties. It is a cube (of course!) that is divided into three segments which are parallel to the surfaces, and each segment can be rotated independently as shown below:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2351a.eps}$
 -->
<IMG
 WIDTH="930" HEIGHT="457" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2351a.gif
 ALT="\epsfbox{p2351a.eps}">
</DIV>

<P>
Since there are six possible rotations, each rotation is labeled by a number from 1 through 6. Since we can rotate each segment independently, by rotation 1 we mean rotating the top segment anti-clockwise by 90 degrees (keeping the rest of the cube fixed). Similarly, rotation 2 means to rotate the bottom segment anti-clockwise by 90 degrees. From the above figure you can figure out that rotations 3, 4, 5 and 6 are the anti-clockwise rotations of right, left, back, and front segments respectively.  Just to make the problem interesting, by rotation -1 we mean the same rotation but in the clockwise direction. Similarly -2, -3, -4, -5 and -6 indicate rotations of the corresponding surfaces but in clockwise direction. You probably already have noticed that rotation 1 followed by rotation 1 followed by rotation 1 is actually rotation -1!

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2351b.eps}$
 -->
<IMG
 WIDTH="345" HEIGHT="348" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2351a.gif
 ALT="\epsfbox{p2351b.eps}">
</DIV>

<P>
The original Rubik's cube had a different color on each surface and as you would rotate the different segments, the colors would be all mixed up. The goal of the puzzle was to bring back all the original colors to their original surfaces (which was not easy!). For this problem we keep things simple and label every small square with a number as shown in the figure. 

<P>
As you can see the small squares of the top surface are labeled by the numbers 1 through 8. The center square is not labeled because no matter which segment is rotated the center squares never change position. The bottom surface is labeled by the numbers 9 through 16 (sorry, you can not see this in the figure), the right surface by 17 through 24, the left surface by 25 through 32 (which you cannot see), the back surface by 33 through 40 (which you cannot see) and the front surface by 41 through 48. Just to make sure that you have understood the labeling scheme properly note that the eight corners are composed of 3 smaller squares and the numbers on them are: 

<P>

<P>
<BR>
1-29-39, 3-17-37, 5-23-47, 7-31-45, 9-19-35, 11-27-33, 13-25-43, 15-21-41

<P>

<P>
<BR>
Similarly the middle section of each edge is composed of 2 small squares, there are 12 of them as follows:

<P>

<P>
<BR>
2-38, 4-24, 6-46, 8-30, 10-34, 12-26, 14-42,16-20, 18-36, 22-48, 28-40 and 32-44.

<P>

<P>
<BR>
If we start with an unscrambled Rubik's cube the label of the small squares of the six surfaces are in this order:

<P>

<P>
<BR>
1 2 3 4 5 6 7 8 Top Surface

<P>
9 10 11 12 13 14 15 16 Bottom Surface

<P>
17 18 19 20 21 22 23 24 Right Surface

<P>
25 26 27 28 29 30 31 32 Left Surface

<P>
33 34 35 36 37 38 39 40 Back Surface

<P>
41 42 43 44 45 46 47 48 Front Surface

<P>

<P>
<BR>
Now you are ready to rotate the segments and see what happens!

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file may contain multiple test cases, each case contains one line with integers -6 through 6 (excluding 0) indicating rotation of different segments. The positive numbers indicate anti-clockwise rotations and the negative numbers indicate clockwise rotations. Each test case is terminated with a zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input there should be six rows of 8 integers indicating the orders of the labels of the six surfaces in following order: top, bottom, right, left, back and front. Print a blank line between two successive test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>  
1 3 -2 0 
-4 6 5 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>  
 3  4 35 36 23  8  1  2 
31 48 41 10 11 12 13 14 
19 20  7 42 43 46 47 18 
33 34 15 28 37 38 39 32 
21 22 45 16  9 24 17 40 
25 26 27 44 29 30  5  6 
 
25 26 27  4 21 22 23 40 
17 18 19 44 29 30 31 16 
33  2  3 20 45 14 15 24 
39 32  9 10 43 28  5  6 
35 36 37 38 11 12 13 34 
 7  8  1 46 47 48 41 42
</PRE>

<P>

______________________________________________________
2352||||||false||||||
<P>Consider a problem of finding the best possible solution of a new kind of right alignment of two strings. As an example, here is the best such right alignment for two strings <TT>AADDEFGGHC</TT> and <TT>ADCDEGH</TT>:<P><TT>AAD-DEFGGHC</TT><P><P><BR><TT>&nbsp;ADCDE--GH-</TT><P><P><BR>Each vertical matching position scores 2, and each continuous run of gaps scores -1. Thus the total score of an alignment is twice the number of matching positions, less the number of continuous runs of gaps. In the given example, six positions (<TT>A</TT>, <TT>D</TT>, <TT>D</TT>, <TT>E</TT>, <TT>G</TT>, <TT>H</TT>) match, and three runs of gaps are introduced. Thus the score of this alignment is <SPAN CLASS="MATH">2 <TT>x</TT> 6 + (- 1) <TT>x</TT> 3 = 9</SPAN> . Note that we do not penalize for misalignment at the left, as we only consider the problem of finding the best right alignment.<P>You are to write a program that finds the score of the best right alignment for any two given strings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2352img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2352img1.png ALT="$ \le$">10, 000)</SPAN> indicating the number of test cases to follow. Each test case consists of two lines each of which contains a string of length at most 50. The strings are composed entirely of alpha-numeric characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input print a line containing the score of the best possible right alignment of the two given strings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>  
2
AADDEFGGHC 
ADCDEGH 
ERTTHCBYNQC 
BEARTBCHQYN
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>  
9 
8
</PRE><P>
______________________________________________________
2353||||||false||||||
<P>Eshita is a very ecologically conscious person. She works late and every night before going home she makes sure that all the lights are turned off at her workplace to conserve electricity. The workplace is represented as a 2-dimensional grid. Each square in the grid has 4 neighbors in up, down, left, and right directions. The electrical wiring is such that the sides of the grid wrap around i.e., the leftmost and the rightmost columns are neighbors. Similarly, the top and bottom rows are neighbors. This ensures that each of the squares in the grid has 4 neighbors.<P>To standardize our notation, assume that the upper left-most square of the board is position (0, 0). Rows run horizontally and the top row is row 0. Columns are vertical and column 0 is the left-most column. Any reference to a square is by row then column; thus the square (4, 6) means row 4, column 6.<P>So, in figure 1, the grid has 4 columns and 4 rows (all the grids will have same number of rows and columns). The shaded square is denoted as (2, 3). The four neighbors of the square (2, 3) are squares (1, 3), (3, 3), (2, 2) and (2, 0). Similarly, the four neighbors of the square (0, 0) are squares (3, 0), (1, 0), (0, 1), and (0, 3).<P><DIV ALIGN="CENTER"><IMG WIDTH="243" HEIGHT="212" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2353a.gif ALT="\epsfbox{p2353a.eps}"></DIV><P>Eshita is told that each square of the grid is a switch and a light. When a switch in some square is pushed, the light in that square and its neighboring squares toggle their ON/OFF state. Figure 2 shows a sequence where, starting from a grid with all the lights OFF, switches (1, 1), and (0, 0) have been pushed. The ON lights are shown as shaded.<P><DIV ALIGN="CENTER"><IMG WIDTH="810" HEIGHT="210" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2353a.gif ALT="\epsfbox{p2353b.eps}"></DIV><P>Given a grid with some of the lights ON, Eshita needs to say whether it is possible to turn all the lights OFF by pushing some sequence of button pushes. For example, in the first configuration of the 3<SPAN CLASS="MATH"><TT>x</TT></SPAN>3 grid in figure 3, all the lights can be turned OFF by pushing the switches (0, 0), (1, 1) and (2, 2) (some other lights may be turned ON in the intermediate stages, but at the end of this sequence all the lights will be turned off). But in the second configuration, it is not possible to turn all the lights off by pushing any sequence of switches.<P><DIV ALIGN="CENTER"><IMG WIDTH="481" HEIGHT="166" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2353a.gif ALT="\epsfbox{p2353c.eps}"></DIV><P>Your task is to write a program, which given some arbitrary configuration of a grid will determine whether all the lights can be turned off or not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains the descriptions of several grids. Each grid starts with a line containing an integer <SPAN CLASS="MATH"><I>size</I></SPAN>, specifying the number of rows and cloumns in the grid <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2353a.gif ALT="$ \le$"><I>size</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2353a.gif ALT="$ \le$">40)</SPAN>. Next line has a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>, specifying the number of lights that are turned on. The following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain two integers each, namely the <SPAN CLASS="MATH"><I>row</I></SPAN> and <SPAN CLASS="MATH"><I>column</I></SPAN> of each of ON light.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each of the grids output ``<TT>Yes</TT>" or ``<TT>No</TT>" on a line of its own. The output will be ``<TT>Yes</TT>" if all the lights in the configuration can be turned off and ``<TT>No</TT>" if it is not possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>  
5 
11 
0 0 
0 1 
0 2 
0 4 
1 4 
2 1 
2 2 
2 3 
3 2 
4 2 
4 4 
3 
3 
0 1 
0 2 
1 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample output</A>&nbsp;</FONT></H2><P><PRE>  
Yes 
No
</PRE>
______________________________________________________
2354||||||false||||||
<P>
The FBI is conducting a surveillance of a known criminal hideout
which serves as a communication center for a number of men and
women of nefarious intent. Using sophisticated decryption software
and good old fashion wiretaps, they are able to decode any e-mail
messages leaving the site. However, before any arrest warrants can
be served, they must match actual names with the user ID's on the
messages. While these criminals are evil, they're not stupid, so
they use random strings of letters for their ID's (no <TT>dillingerj</TT>
ID's found here). The FBI knows that each criminal uses only one
ID. The only other information they have which will help them is a
log of names of the people who enter and leave the hideout. In
many cases, this is enough to link the names to the ID's.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<B>The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</B>

<P>

<P><P>
<BR>

<P>
Input consists of one problem instance. The first line contains a
single positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> indicating the number of criminals using
the hideout. The maximum value for <SPAN CLASS="MATH"><I>n</I></SPAN> will be 20. The next line
contains the <SPAN CLASS="MATH"><I>n</I></SPAN> user ID's, separated by single spaces. Next will be
the log entries in chronological order. Each entry in the log has
the form <SPAN CLASS="MATH"><I>type</I>&nbsp;<I>arg</I></SPAN> , where <SPAN CLASS="MATH"><I>type</I></SPAN> is either <TT>E</TT>, <TT>L</TT> or <TT>M</TT>: <TT>E</TT> indicates
that criminal <SPAN CLASS="MATH"><I>arg</I></SPAN> has entered the hideout; <TT>L</TT> indicates criminal
<SPAN CLASS="MATH"><I>arg</I></SPAN> has left the hideout; <TT>M</TT> indicates a message was intercepted
from user ID <SPAN CLASS="MATH"><I>arg</I></SPAN>. A line containing only the letter <TT>Q</TT> indicates
the end of the log. Note that not all user ID's may be present in
the log but each criminal name will be guaranteed to be in the log
at least once. At the start of the log, the hideout is presumed to
be empty. All names and user ID's consist of only lowercase
letters and have length at most 20. Note: The line containing only
the user ID's may contain more than 80 characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<B>For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>

<P>
Output consists of <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each containing a list of criminal
names and their corresponding user ID's, if known. The list should
be sorted in alphabetical order by the criminal names. Each line
has the form <SPAN CLASS="MATH"><I>name</I></SPAN><TT>:</TT><SPAN CLASS="MATH"><I>userid</I></SPAN>, where <SPAN CLASS="MATH"><I>name</I></SPAN> is the criminal's name and
userid is either their user ID or the string `<TT>???</TT>' if their user ID
could not be determined from the surveillance log.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

7
bigman mangler sinbad fatman bigcheese frenchie capodicapo
E mugsy
E knuckles
M bigman
M mangler
L mugsy
E clyde
E bonnie
M bigman
M fatman
M frenchie
L clyde
M fatman
E ugati
M sinbad
E moriarty
E booth
Q
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
bonnie:fatman
booth:???
clyde:frenchie
knuckles:bigman
moriarty:???
mugsy:mangler
ugati:sinbad
</PRE>

<P>

______________________________________________________
2355||||||false||||||
<P>An ascending sorted sequence of distinct values is one in which some form of a less-than operator is used to order the elements from smallest to largest. For example, the sorted sequence <SPAN CLASS="MATH"><I>A</I>, <I>B</I>, <I>C</I>, <I>D</I></SPAN> implies that <SPAN CLASS="MATH"><I>A</I> &lt; <I>B</I></SPAN>, <SPAN CLASS="MATH"><I>B</I> &lt; <I>C</I></SPAN> and <SPAN CLASS="MATH"><I>C</I> &lt; <I>D</I></SPAN>. In this problem, we will give you a set of relations of the form <SPAN CLASS="MATH"><I>A</I> &lt; <I>B</I></SPAN> and ask you to determine whether a sorted order has been specified or not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple problem instances. Each instance starts with a line containing two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>. The first value indicates the number of objects to sort, where <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2355img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2355img1.gif ALT="$ \le$">26</SPAN>. The objects to be sorted will be the first <SPAN CLASS="MATH"><I>n</I></SPAN> characters of the uppercase alphabet. The second value <SPAN CLASS="MATH"><I>m</I></SPAN> indicates the number of relations of the form <SPAN CLASS="MATH"><I>A</I> &lt; <I>B</I></SPAN> which will be given in this problem instance. Next will be <SPAN CLASS="MATH"><I>m</I></SPAN> lines, each containing one such relation consisting of three characters: an uppercase letter, the character ``<TT>&lt;</TT>" and a second uppercase letter. No letter will be outside the range of the first <SPAN CLASS="MATH"><I>n</I></SPAN> letters of the alphabet. Values of <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> indicate end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, output consists of one line. This line should be one of the following three:<P><P><BR><TT>Sorted sequence determined after </TT><SPAN CLASS="MATH"><I>xxx</I></SPAN> <TT>relations:</TT> <SPAN CLASS="MATH"><I>yyy</I>...<I>y</I></SPAN><TT>.</TT><P><TT>Sorted sequence cannot be determined.</TT><P><TT>Inconsistency found after </TT><SPAN CLASS="MATH"><I>xxx</I></SPAN> <TT>relations.</TT><P><P><BR>where <SPAN CLASS="MATH"><I>xxx</I></SPAN> is the number of relations processed at the time either a sorted sequence is determined or an inconsistency is found, whichever comes first, and <SPAN CLASS="MATH"><I>yyy</I>...<I>y</I></SPAN> is the sorted, ascending sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4 6
A&lt;B
A&lt;C
B&lt;C
C&lt;D
B&lt;D
A&lt;B
3 2
A&lt;B
B&lt;A
26 1
A&lt;Z
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Sorted sequence determined after 4 relations: ABCD.
Inconsistency found after 2 relations.
Sorted sequence cannot be determined.
</PRE><P>
______________________________________________________
2356||||||false||||||
<P>Standard web browsers contain features to move backward and forward among the pages recently visited. One way to implement these features is to use two stacks to keep track of the pages that can be reached by moving backward and forward. In this problem, you are asked to implement this.<P>The following commands need to be supported:<P><DL><DT></DT><DD>BACK: Push the current page on the top of the forward stack. Pop the page from the top of the backward stack, making it the new current page. If the backward stack is empty, the command is ignored.<P></DD><DT></DT><DD>FORWARD: Push the current page on the top of the backward stack. Pop the page from the top of the forward stack, making it the new current page. If the forward stack is empty, the command is ignored.<P></DD><DT></DT><DD>VISIT <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2356img1.gif ALT="$ \langle$"></SPAN>url<SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2356img1.gif ALT="$ \rangle$"></SPAN>: Push the current page on the top of the backward stack, and make the URL specified the new current page. The forward stack is emptied.<P></DD><DT></DT><DD>QUIT: Quit the browser.</DD></DL><P>Assume that the browser initially loads the web page at the URL <TT>http://www.acm.org/</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR><P>Input is a sequence of commands. The command keywords <TT>BACK</TT>, <TT>FORWARD</TT>, <TT>VISIT</TT>, and <TT>QUIT</TT> are all in uppercase. URLs have no whitespace and have at most 70 characters. You may assume that no problem instance requires more than 100 elements in each stack at any time. The end of input is indicated by the <TT>QUIT</TT> command.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>For each command other than <TT>QUIT</TT>, print the URL of the current page after the command is executed if the command is not ignored. Otherwise, print `<TT>Ignored</TT>'. The output for each command should be printed on its own line. No output is produced for the <TT>QUIT</TT> command.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

VISIT http://acm.ashland.edu/
VISIT http://acm.baylor.edu/acmicpc/
BACK
BACK
BACK
FORWARD
VISIT http://www.ibm.com/
BACK
BACK
FORWARD
FORWARD
FORWARD
QUIT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
http://acm.ashland.edu/
http://acm.baylor.edu/acmicpc/
http://acm.ashland.edu/
http://www.acm.org/
Ignored
http://acm.ashland.edu/
http://www.ibm.com/
http://acm.ashland.edu/
http://www.acm.org/
http://acm.ashland.edu/
http://www.ibm.com/
Ignored
</PRE><P>
______________________________________________________
2357||||||false||||||
<P>We can number binary trees using the following scheme:<P><UL><LI>The empty tree is numbered 0.<P></LI><LI>The single-node tree is numbered 1.<P></LI><LI>All binary trees having <SPAN CLASS="MATH"><I>m</I></SPAN> nodes have numbers less than all those having <SPAN CLASS="MATH"><I>m</I> + 1</SPAN> nodes.<P></LI><LI>Any binary tree having <SPAN CLASS="MATH"><I>m</I></SPAN> nodes with left and right subtrees L and R is numbered <SPAN CLASS="MATH"><I>n</I></SPAN> such that all trees having <SPAN CLASS="MATH"><I>m</I></SPAN> nodes numbered <SPAN CLASS="MATH">&gt; <I>n</I></SPAN> have either<P><UL><LI>left subtrees numbered higher than L, or<P></LI><LI>a left subtree = L and a right subtree numbered higher than R. </LI></UL></LI></UL><P>The first 10 binary trees and tree number 20 in this sequence are shown below:<P><P><BR><PRE>
        0  1  2      3  4      5      6      7      8  9        ...     20

           X  X      X  X      X      X      X      X  X                 X
               \    /    \      \    / \    /      /    \               /
                X  X      X      X  X   X  X      X      X             X
                           \    /           \    /        \           / \
                            X  X             X  X          X         X   X
                                                            \
                                                             X
</PRE><P>Your job for this problem is to output a binary tree when given its order number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple problem instances. Each instance consists of a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2357img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2357img1.gif ALT="$ \le$">500, 000, 000</SPAN>. A value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> terminates input. (Note that this means you will never have to output the empty tree.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, you should output one line containing the tree corresponding to the order number for that instance. To print out the tree, use the following scheme:<P><UL><LI>A tree with no children should be output as <TT>X</TT>.<P></LI><LI>A tree with left and right subtrees L and R should be output as <TT>(</TT>L'<TT>)X(</TT>R'<TT>)</TT>, where L' and R' are the representations of L and R.<P><UL><LI>If L is empty, just output <TT>X(</TT>R'<TT>)</TT>.<P></LI><LI>If R is empty, just output <TT>(</TT>L'<TT>)X</TT>. </LI></UL></LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
20
31117532
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
X
((X)X(X))X
(X(X(((X(X))X(X))X(X))))X(((X((X)X((X)X)))X)X)
</PRE><P>
______________________________________________________
2358||||||false||||||
<P>
Roger Wilco is in charge of the design of a low orbiting space
station for the planet Mars. To simplify construction, the station
is made up of a series of Airtight Cubical Modules (ACM's), which
are connected together once in space. One problem that concerns
Roger is that of (potentially) lethal bacteria that may reside in
the upper atmosphere of Mars. Since the station will occasionally
fly through the upper atmosphere, it is imperative that extra
shielding be used on all faces of the ACMs which make up the
external surface of the station. Roger has made certain that where
two ACMs touch, either edge-to-edge or face-to-face, that joint is
sealed so no bacteria can sneak through. Any face of an ACM shared
by another ACM will not need shielding, of course, nor will a face
which cannot be reached from the outside. Roger could just put
extra shielding on all of the faces of every ACM, but the cost
would be prohibitive. Therefore, he wants to know the exact number
of ACM faces which need the extra shielding.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of multiple problem instances. Each instance
consists of a specification of a space station. We assume that
each space station can fit into an <!-- MATH
 $n \times m \times k$
 -->
<SPAN CLASS="MATH"><I>n</I>&#215;<I>m</I>&#215;<I>k</I></SPAN> grid (<!-- MATH
 $1 \le n, m, k \le
60$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2358img1.gif
 ALT="$ \le$"><I>n</I>, <I>m</I>, <I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2358img1.gif
 ALT="$ \le$">60</SPAN>), where each grid cube may or may not contain an ACM. We number
the grid cubes <!-- MATH
 $0, 1, 2, \dots, kmn-1$
 -->
<SPAN CLASS="MATH">0, 1, 2,..., <I>kmn</I> - 1</SPAN> as shown in the diagram
below. Each space station specification then consists of the
following: the first line contains four positive integers <!-- MATH
 $n~ m~ k~ l$
 -->
<SPAN CLASS="MATH"><I>n</I>&nbsp;<I>m</I>&nbsp;<I>k</I>&nbsp;<I>l</I></SPAN>,
where <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> are as described above and <SPAN CLASS="MATH"><I>l</I></SPAN> is the number of
ACM's in the station. This is followed by a set of lines which
specify the <SPAN CLASS="MATH"><I>l</I></SPAN> grid locations of the ACM's. Each of these lines
contain 10 integers (except possibly the last). Each space station
is fully connected (i.e., an astronaut can move from one ACM to
any other ACM in the station without leaving the station). Values
of <!-- MATH
 $n = m = k = l = 0$
 -->
<SPAN CLASS="MATH"><I>n</I> = <I>m</I> = <I>k</I> = <I>l</I> = 0</SPAN> terminate input.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2358.eps}$
 -->
<IMG
 WIDTH="450" HEIGHT="458" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2358img1.gif
 ALT="\epsfbox{p2358.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each problem instance, you should output one line of the form

<P>

<P>
<BR>

<TT>The number of faces needing shielding is </TT><SPAN CLASS="MATH"><I>s</I></SPAN><TT>.</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>s</I></SPAN> is for you to determine.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2 2 1 3
0 1 3
3 3 3 26
0 1 2 3 4 5 6 7 8 9
10 11 12 14 15 16 17 18 19 20
21 22 23 24 25 26
0 0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
The number of faces needing shielding is 14.
The number of faces needing shielding is 54.
</PRE>

<P>

______________________________________________________
2359||||||false||||||
<P>The Hines Sign company has been contracted to supply roadside signs for the state highway system. The head of the company has put his son Myles Hines in charge of one particular class of signs, those which indicate the number of miles to various towns. Myles is given a layout of the highway system and a set of locations where the signs should go; he is in charge of determining the mileage to nearby cities. To select which cities should be listed on any sign, he uses the following strategy: City X is put on the sign if the sign is on a road such that the shortest path from the intersection immediately preceeding the sign to X uses the road. You may assume that there is only one shortest path between each pair of intersections.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR><P>Input consists of a single problem instance consisting of a description of the highway system, followed by a set of sign locations. The highway system is defined as a set of intersections (some of which are also city locations) and a set of roads connecting the intersections. The first line of a problem instance contains three positive integers <SPAN CLASS="MATH"><I>n</I>&nbsp;<I>m</I>&nbsp;<I>k</I></SPAN>: <SPAN CLASS="MATH"><I>n</I></SPAN> specifies the number of intersections (numbered <SPAN CLASS="MATH">0, 1, 2,..., <I>n</I> - 1</SPAN>), <SPAN CLASS="MATH"><I>m</I></SPAN> indicates the number of roads between connections, and <SPAN CLASS="MATH"><I>k</I></SPAN> indicates the number of intersections which are also cities. Following this are <SPAN CLASS="MATH"><I>m</I></SPAN> lines of the form <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB>&nbsp;<I>i</I><SUB>2</SUB>&nbsp;<I>d</I></SPAN>, which specifies a two-way road between intersections <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>i</I><SUB>2</SUB></SPAN> of distance <SPAN CLASS="MATH"><I>d</I></SPAN>. The next <SPAN CLASS="MATH"><I>k</I></SPAN> lines are of the form <SPAN CLASS="MATH"><I>i</I>&nbsp;<I>name</I></SPAN>, which specifies that intersection <SPAN CLASS="MATH"><I>i</I></SPAN> is a city called <SPAN CLASS="MATH"><I>name</I></SPAN>. After this is a line with a single positive integer <SPAN CLASS="MATH"><I>s</I></SPAN> indicating the number of signs to place on the highway. The remaining <SPAN CLASS="MATH"><I>s</I></SPAN> lines are of the form <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB>&nbsp;<I>i</I><SUB>2</SUB>&nbsp;<I>d</I></SPAN>, indicating that a sign is to be placed on the road going from <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN> to <SPAN CLASS="MATH"><I>i</I><SUB>2</SUB></SPAN> a distance <SPAN CLASS="MATH"><I>d</I></SPAN> from <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN> (<SPAN CLASS="MATH"><I>d</I></SPAN> will always be non-zero and less than the distance from <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN> to <SPAN CLASS="MATH"><I>i</I><SUB>2</SUB></SPAN>). For all problem instances, the length of <SPAN CLASS="MATH"><I>name</I></SPAN> will be <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2359img1.gif ALT="$ \le$">18</SPAN> characters, and <SPAN CLASS="MATH">5<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2359img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2359img1.gif ALT="$ \le$">30</SPAN>. All distances will be non-zero and to the nearest hundredth mile.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>Each sign should be output as follows:<P><P><BR><SPAN CLASS="MATH"><I>name</I><SUB>1</SUB>&nbsp;<I>d</I><SUB>1</SUB></SPAN><P><SPAN CLASS="MATH"><I>name</I><SUB>2</SUB>&nbsp;<I>d</I><SUB>2</SUB></SPAN><P><SPAN CLASS="MATH">...</SPAN><P><P><BR>where each <SPAN CLASS="MATH"><I>name</I><SUB>i</SUB></SPAN> should be left justified in a field of width 20, and each distance <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> is rounded to the nearest mile. (Round .50 up. For example, 7.50 should be rounded to 8.) Each name-distance pair should be sorted by the rounded distance; pairs with the same rounded distance should be printed in alphabetical order. Signs should be output in the order in which they were listed in the input, and you should separate each sign output with a blank line. You may assume that every sign will have at least one city listed on it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

8 17 4
0 1 7.12
0 2 8.34
0 3 5.33
0 4 5.36
1 2 4.21
1 6 6.99
1 7 10.26
2 3 2.74
2 6 5.04
3 4 4.12
3 5 7.72
3 6 5.71
4 5 8.94
4 6 10.29
5 6 5.47
5 7 8.55
6 7 6.01
0 Allentown
1 Bobtown
6 Charlestown
7 Downville
3
0 3 2.17
3 2 0.45
4 3 3.14
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Charlestown 9
Downville 15

Bobtown 7

Charlestown 7
Bobtown 8
Downville 13
</PRE><P>
______________________________________________________
2360||||||false||||||
<P>The Robots game is a one-player game played on a <SPAN CLASS="MATH">31&#215;31</SPAN> board. The board is partitioned into <SPAN CLASS="MATH">1&#215;1</SPAN> cells arranged in 31 rows and 31 columns. Each cell is indexed by (<SPAN CLASS="MATH"><I>r</I>, <I>c</I></SPAN>) where <SPAN CLASS="MATH"><I>r</I></SPAN> is the row and <SPAN CLASS="MATH"><I>c</I></SPAN> is the column (starting from 1), and it may be empty, occupied by you, occupied by a robot, or occupied by debris. The object of this game is to move in such a way to destroy all the robots before the robots destroy you.<P>Initially, you occupy the cell at (15,15), and there are <SPAN CLASS="MATH"><I>R</I></SPAN> robots ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2360img1.gif ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2360img1.gif ALT="$ \le$">50</SPAN>) located in <SPAN CLASS="MATH"><I>R</I></SPAN> different cells other than (15,15). All other cells are empty. You are also given a list of <SPAN CLASS="MATH"><I>T</I></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2360img1.gif ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2360img1.gif ALT="$ \le$">20</SPAN>) cells that are potential teleport locations. You make the first move, and then the robots and you alternate moves. At your move, you are allowed to walk to an adjacent cell in any one of the eight compass directions, teleport to one of the specified teleport locations, or remain stationary. You may walk to an adjacent cell if it is empty. In addition, you may walk to an adjacent cell which contains debris by pushing the debris to the next adjacent cell along the line of movement, provided that the next cell does not already contain debris. If a cell that debris is pushed to contains a robot, that robot is destroyed. If you choose to teleport, the destination must be an empty cell. You may not make any move that will leave you or any debris that you push outside of the board.<P>When the robots move, each robot walks to the adjacent cell (even if it is not empty) in the eight compass directions such that the destination cell is closest to your current position (i.e. after your last move). The distance between two cells (<SPAN CLASS="MATH"><I>r</I><SUB>1</SUB>, <I>c</I><SUB>1</SUB></SPAN>) and (<SPAN CLASS="MATH"><I>r</I><SUB>2</SUB>, <I>c</I><SUB>2</SUB></SPAN>) is defined to be <SPAN CLASS="MATH">| <I>r</I><SUB>1</SUB> - <I>r</I><SUB>2</SUB>| + | <I>c</I><SUB>1</SUB> - <I>c</I><SUB>2</SUB>|</SPAN>. All robots walk at the same time during a move. If two or more robots walk to the same cell, or if a robot walks to a cell containing debris, all of these robots are destroyed. Destroyed robots become debris.<P>You lose the game if any robot walks to your current position, even if multiple robots do so and destroy each other. You win the game if all robots are destroyed and none has moved to your current position.<P>In order to stay in the game as long as possible, you will only consider moves that do not lead to an immediate loss (a loss before your next move). A plausible strategy is to always walk to a cell (or remain stationary) such that the number of robots remaining after your move and the robots' move (i.e. just before your next move) is minimized. In case of a tie, choose the move that maximizes the minimum distance to the remaining robots just before your next move. If there are still ties, choose the move that also minimizes the row index of the destination cell, and finally, break remaining ties by also minimizing the column index.<P>If it is not possible to make a move by walking or by remaining stationary without leading to an immediate loss, you should teleport to the first unused legal destination chosen from a list of locations given to you, as long as it does not lead to an immediate loss. When you search for a teleport site, you should always start the search at the beginning of the list. If no such teleport destination is available, you should remain stationary, leading to an immediate loss.<P>In this problem, you will implement this strategy and see how well it works.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of instances. The first line of each instance contains the integers <SPAN CLASS="MATH"><I>R</I></SPAN> and <SPAN CLASS="MATH"><I>T</I></SPAN> separated by a space. This is followed by <SPAN CLASS="MATH"><I>R</I></SPAN> lines containing two integers separated by a space, indicating the row and column of the initial positions of the <SPAN CLASS="MATH"><I>R</I></SPAN> robots. You may assume that each robot initially occupies a cell which is not (15,15) and the locations of the robots are distinct. The next <SPAN CLASS="MATH"><I>T</I></SPAN> lines give the list of teleport destinations available. Each line is given by the row and column of the destination cell, separated by a space. The input is terminated by a case with <SPAN CLASS="MATH"><I>R</I> = <I>T</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print the case number (starting from 1), in the format shown in the Sample Output, on its own line. For each teleport taken, print one line of the form:<P><P><BR><TT>Move </TT><SPAN CLASS="MATH"><I>m</I></SPAN><code>: teleport to (</code><SPAN CLASS="MATH"><I>r</I>, <I>c</I></SPAN><TT>)</TT><P><P><BR>where m is the number of moves you have made (including this one), and (r; c) is the destination of the teleport. This is followed by three lines containing the result of the game. If you win the game, print<P><P><BR><TT>Won game after making </TT><SPAN CLASS="MATH"><I>m</I></SPAN><TT>moves.</TT><P><code>Final position: (</code><SPAN CLASS="MATH"><I>r</I>, <I>c</I></SPAN><TT>)</TT><P><code>Number of cells with debris: </code><SPAN CLASS="MATH"><I>d</I></SPAN><P><P><BR>where <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of moves you have made when you won the game, (<SPAN CLASS="MATH"><I>r</I>, <I>c</I></SPAN>) is your final position, and <SPAN CLASS="MATH"><I>d</I></SPAN> is the number of cells with debris (use the word ``moves" even if <SPAN CLASS="MATH"><I>m</I> = 1</SPAN>). If you lose the game, print<P><P><BR><TT>Lost game after making </TT><SPAN CLASS="MATH"><I>m</I></SPAN> <TT>moves.</TT><P><code>Final position: (</code><SPAN CLASS="MATH"><I>r</I>, <I>c</I></SPAN><TT>)</TT><P><code>Number of cells with debris: </code><SPAN CLASS="MATH"><I>d</I></SPAN><P><code>Number of robots remaining: </code><SPAN CLASS="MATH"><I>n</I></SPAN><P><P><BR>where <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of moves you have made when you lost the game, (<SPAN CLASS="MATH"><I>r</I>, <I>c</I></SPAN>) is the location at which you are destroyed, <SPAN CLASS="MATH"><I>d</I></SPAN> is the number of cells with debris, and <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of robots remaining when you lost the game (use the word ``moves" even if <SPAN CLASS="MATH"><I>m</I> = 1</SPAN>).<P>Separate the output for each case by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4 0
17 18
13 18
8 12
10 12
4 0
17 17
13 17
13 13
17 13
3 3
17 18
13 18
5 31
15 16
16 15
3 7
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1:
Won game after making 5 moves.
Final position: (14,16)
Number of cells with debris: 1

Case 2:
Lost game after making 2 moves.
Final position: (15,15)
Number of cells with debris: 1
Number of robots remaining: 0

Case 3:
Move 30: teleport to (16,15)
Move 58: teleport to (15,16)
Move 86: teleport to (3,7)
Lost game after making 114 moves.
Final position: (1,29)
Number of cells with debris: 1
Number of robots remaining: 1
</PRE><P>
______________________________________________________
2361||||||false||||||
<P>Square Ice is a two-dimensional arrangement of water molecules <SPAN CLASS="MATH"><I>H</I><SUB>2</SUB><I>O</I></SPAN>, with oxygen at the vertices of a square lattice and one hydrogen atom between each pair of adjacent oxygen atoms. The hydrogen atoms must stick out on the left and right sides but are not allowed to stick out the top or bottom. One <SPAN CLASS="MATH">5&#215;5</SPAN> example is shown below.<P><PRE>
                              H-O H-O-H O-H O-H O-H
                                |       |   |   |
                                H   H   H   H   H
                                    |
                              H-O-H O H-O H-O-H O-H
                                    |   |       |
                                H   H   H   H   H
                                |           |
                              H-O H-O-H O-H O H-O-H
                                        |   |
                                H   H   H   H   H
                                |   |           |
                              H-O H-O H-O H-O-H O-H
                                        |
                                H   H   H   H   H
                                |   |   |   |
                              H-O H-O H-O-H O-H O-H
</PRE><P>Note that each hydrogen atom is attached to exactly one of its neighboring oxygen atoms and each oxygen atom is attached to two of its neighboring hydrogen atoms. (Recall that one water molecule is a unit of one <TT>O</TT> linked to two <TT>H</TT>'s.)<P>It turns out we can encode a square ice pattern with what is known as an <EM>alternating sign matrix</EM> (ASM): horizontal molecules are encoded as 1, vertical molecules are encoded as <TT>-1</TT> and all other molecules are encoded as <TT>0</TT>. So, the above pattern would be encoded as:<P><PRE>
                              0  1  0  0  0
                              1 -1  0  1  0
                              0  1  0 -1  1
                              0  0  0  1  0
                              0  0  1  0  0
</PRE><P>An ASM is a square matrix with entries <TT>0</TT>, <TT>1</TT> and <TT>-1</TT>, where the sum of each row and column is 1 and the non-zero entries in each row and in each column must alternate in sign. (It turns out there is a one-to-one correspondence between ASM's and square ice patterns!)<P>Your job is to display the square ice pattern, in the same format as the example above, for a given ASM. Use dashes (<TT>-</TT>) for horizontal attachments and vertical bars (<TT>|</TT>) for vertical attachments. The pattern should be surrounded with a border of asterisks (<TT>*</TT>), be left justified and there should be exactly one character between neighboring hydrogen atoms (<TT>H</TT>) and oxygen atoms (<TT>O</TT>): either a space, a dash or a vertical bar.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple cases. Each case consists of a positive integer <SPAN CLASS="MATH"><I>m</I></SPAN> (<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2361img1.gif ALT="$ \le$">11</SPAN>) on a line followed by <SPAN CLASS="MATH"><I>m</I></SPAN> lines giving the entries of an ASM. Each line gives a row of the ASM with entries separated by a single space. The end of input is indicated by a line containing <SPAN CLASS="MATH"><I>m</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print the case number (starting from 1), in the format shown in the Sample Output, followed by a blank line, followed by the corresponding square ice pattern in the format described above. Separate the output of different cases by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
0 1
1 0
4
0 1 0 0
1 -1 0 1
0 0 1 0
0 1 0 0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1:

***********
*H-O H-O-H*
*  |      *
*  H   H  *
*      |  *
*H-O-H O-H*
***********

Case 2:

*******************
*H-O H-O-H O-H O-H*
*  |       |   |  *
*  H   H   H   H  *
*      |          *
*H-O-H O H-O H-O-H*
*      |   |      *
*  H   H   H   H  *
*  |           |  *
*H-O H-O H-O-H O-H*
*      |          *
*  H   H   H   H  *
*  |       |   |  *
*H-O H-O-H O-H O-H*
*******************
</PRE><P>
______________________________________________________
2362||||||false||||||
<P>Larry graduated this year and finally has a job. He's making a lot of money, but somehow never seems to have enough. Larry has decided that he needs to grab hold of his financial portfolio and solve his financing problems. The first step is to figure out what's been going on with his money. Larry has his bank account statements and wants to see how much money he has. Help Larry by writing a program to take his closing balance from each of the past twelve months and calculate his average account balance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will be twelve lines. Each line will contain the closing balance of his bank account for a particular month. Each number will be positive and displayed to the penny. No dollar sign will be included.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output will be a single number, the average (mean) of the closing balances for the twelve months. It will be rounded to the nearest penny, preceded immediately by a dollar sign, and followed by the end-of-line. There will be no other spaces or characters in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100.00
489.12
12454.12
1234.10
823.05
109.20
5.27
1542.25
839.18
83.99
1295.01
1.75
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
$1581.42
</PRE><P>
______________________________________________________
2363||||||false||||||
<P>Fred Mapper is considering purchasing some land in Louisiana to build his house on. In the process of investigating the land, he learned that the state of Louisiana is actually shrinking by 50 square miles each year, due to erosion caused by the Mississippi River. Since Fred is hoping to live in this house the rest of his life, he needs to know if his land is going to be lost to erosion.<P>After doing more research, Fred has learned that the land that is being lost forms a semicircle. This semicircle is part of a circle centered at <SPAN CLASS="MATH">(0, 0)</SPAN>, with the line that bisects the circle being the <SPAN CLASS="MATH"><I>X</I></SPAN> axis. Locations below the <SPAN CLASS="MATH"><I>X</I></SPAN> axis are in the water. The semicircle has an area of 0 at the beginning of year 1. (Semicircle illustrated in the Figure.)<P><IMG WIDTH="283" HEIGHT="266" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2363a.gif ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=2.5in \epsfbox{p2363a.eps}
\end{center}}$"><IMG WIDTH="291" HEIGHT="313" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2363a.gif ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=2.5in \epsfbox{p2363b.eps}
\end{center}}$"><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input will be a positive integer indicating how many data sets will be included (<SPAN CLASS="MATH"><I>N</I></SPAN>).<P>Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines will contain the <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> Cartesian coordinates of the land Fred is considering. These will be floating point numbers measured in miles. The <SPAN CLASS="MATH"><I>Y</I></SPAN> coordinate will be non-negative. <SPAN CLASS="MATH">(0, 0)</SPAN> will not be given.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, a single line of output should appear. This line should take the form of:<P><P><BR><TT>Property <SPAN CLASS="MATH"><I>N</I></SPAN>: This property will begin eroding in year <SPAN CLASS="MATH"><I>Z</I></SPAN>.</TT><P><P><BR>Where <SPAN CLASS="MATH"><I>N</I></SPAN> is the data set (counting from 1), and <SPAN CLASS="MATH"><I>Z</I></SPAN> is the first year (start from 1) this property will be within the semicircle AT THE END OF YEAR <SPAN CLASS="MATH"><I>Z</I></SPAN>. <SPAN CLASS="MATH"><I>Z</I></SPAN> must be an integer. After the last data set, this should print out `<TT>END OF OUTPUT.</TT>'.<P><P><P><BR><B>Notes:</B><P><OL><LI>No property will appear exactly on the semicircle boundary: it will either be inside or outside. </LI><LI>This problem will be judged automatically. Your answer must match exactly, including the capitalization, punctuation, and white-space. This includes the periods at the ends of the lines. </LI><LI>All locations are given in miles. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
1.0 1.0
25.0 0.0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Property 1: This property will begin eroding in year 1.
Property 2: This property will begin eroding in year 20.
END OF OUTPUT.
</PRE><P>
______________________________________________________
2364||||||false||||||
<P>
Clearly the economy is bound to pick up again soon.  As a forward-thinking Internet
entrepreneur, you think that the 'Net will need a new search engine to serve all the
people buying new computers. Because you're frustrated with the poor results most
search engines produce, your search engine will be better.

<P>
You've come up with what you believe is an innovative approach to document matching.
By giving weight to the number of times a term appears in both the search string and
in the document being checked, you believe you can produce a more accurate search result.

<P>
Your program will be given a search string, followed by a set of documents.  You will
calculate the score for each document and print it to output in the order the document
appears in the input file.  To calculate the score for a document you must first
calculate the term score for each term appearing in the search string.  A term score
is the number of times a term occurs in the search string multiplied by the number of
times it occurs in the document.  The document score is the sum of the square roots of
each term score.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<B>The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</B>

<P>
Each test case consists of a set of documents separated by single lines containing only
ten dashes, ``<TT>----------</TT>''.  No word is longer than 50 characters.  
Total number of words for each document is less than 1000.  The first document is the search string.
The input for each test case terminates with two lines of ten dashes in a row.

<P>
The input documents will use the full ASCII character set.  You must parse each document
into a set of terms.
Terms are separated by white spaces in the input document.  Comparisons between terms are
case-insensitive.  Punctuation is removed from terms prior to comparisons, e.g.
<TT>don't</TT> becomes <TT>dont</TT>.  The resulting terms should contain only the characters
<TT>{[a-z], [0-9]}</TT>.  A term in the input consisting only of punctuation should be
ignored.  You may assume the search string and each document will have at least one
valid term.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<B>For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>
The output is a series of scores, one per line, printed to two decimal places.  The scores
are printed in the order the documents occur in the input.  No other characters 
should appear
in the output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>2

fee fi fo fum
----------
fee, fi, fo! fum!!
----------
fee fee fi, me me me
----------
----------</PRE>

<PRE>fee fi fo fum
----------
fee, fi, fo! fum!!
----------
fee fee fi, me me me
----------
----------
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>4.00
2.41</PRE>

<PRE>4.00
2.41<BR></PRE>


______________________________________________________
2365||||||false||||||
<P>A biologist experimenting with DNA modification of bacteria has found a way to make bacterial colonies sensitive to the surrounding population density. By changing the DNA, he is able to <EM>program</EM> the bacteria to respond to the varying densities in their immediate neighborhood.<P>The culture dish is a square, divided into 400 smaller squares <SPAN CLASS="MATH">(20&#215;20)</SPAN>. Population in each small square is measured on a four point scale (from 0 to 3). The DNA information is represented as an array <SPAN CLASS="MATH"><I>D</I></SPAN>, indexed from 0 to 15, of integer values and is interpreted as follows:<P>In any given culture dish square, let <SPAN CLASS="MATH"><I>K</I></SPAN> be the sum of that square's density and the densities of the four squares immediately to the left, right, above and below that square (squares outside the dish are considered to have density 0). Then, by the next day, that dish square's density will change by <SPAN CLASS="MATH"><I>D</I>[<I>K</I>]</SPAN> (which may be a positive, negative, or zero value). The total density cannot, however, exceed 3 nor drop below 0.<P>Now, clearly, some DNA programs cause all the bacteria to die off (e.g., <SPAN CLASS="MATH">[- 3, - 3,..., - 3]</SPAN>). Others result in immediate population explosions (e.g., <SPAN CLASS="MATH">[3, 3, 3,..., 3]</SPAN>), and others are just plain boring (e.g., <SPAN CLASS="MATH">[0, 0,..., 0]</SPAN>). The biologist is interested in how some of the less obvious DNA programs might behave.<P>Write a program to simulate the culture growth, reading in the number of days to be simulated, the DNA rules, and the initial population densities of the dish.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR><P>Input to this program consists of three parts:<P><OL><LI>The first line will contain a single integer denoting the number of days to be simulated. </LI><LI>The second line will contain the DNA rule <SPAN CLASS="MATH"><I>D</I></SPAN> as 16 integer values, ordered from <SPAN CLASS="MATH"><I>D</I>[0]</SPAN> to <SPAN CLASS="MATH"><I>D</I>[15]</SPAN>, separated from one another by one or more blanks. Each integer will be in the range -3 ...3, inclusive. </LI><LI>The remaining twenty lines of input will describe the initial population density in the culture dish. Each line describes one row of squares in the culture dish, and will contain 20 integers in the range 0 ...3, separated from one another by 1 or more blanks. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>The program will produce exactly 20 lines of output, describing the population densities in the culture dish at the end of the simulation. Each line represents a row of squares in the culture dish, and will consist of 20 characters, plus the usual end-of-line terminator.<P>Each character will represent the population density at a single dish square, as follows:<P><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Density</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Character</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>.</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>!</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>X</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>#</TT></TD></TR></TBODY></TABLE></DIV><P>No other characters may appear in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

2
0 1 1 1 2 1 0 -1 -1 -1 -2 -2 -3 -3 -3 -3
3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
##!................. 
#!..................
!...................
....................
....................
....................
....................
.........!..........
........!#!.........
.......!#X#!........
........!#!.........
.........!.......... 
....................
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
....................
</PRE><P>
______________________________________________________
2366||||||false||||||
<P>
One of the greatest alchemists of the lower Middle Renaissance, Algernon da Vinci
(one of Leonardo's lesser- known cousins), had the foresight to construct his chemical
works directly over a fast-running stream. Through a series of clever pipes and sluices,
he routed portions of the stream past each of the tables where his alchemists prepared
their secret brews, allowing them to dispose of their chemical byproducts into the waters
flowing by the table.

<P>
As Algernon's business grew, he even added additional floors to his factory, with water
lifted to the higher floors by treadmill-powered pumps (much to the dismay of the
apprentices who found themselves assigned to pump duty). The pipework for the entire
disposal system became quite complex. It was even rumored by some that the pipes
actually circled back in some places, so that a particularly odorous compound flushed
away from one table might return to that very same spot a few minutes later.

<P>
All was not well, however. Algernon's factory suffered from a series of mishaps, minor
explosions, gas clouds, etc.  It became obvious that chemicals dumped at one table might
react violently with other chemicals dumped from another table downstream. Algernon
realized that he needed to trace the possible chemical flows through his factory.

<P>
Write a program to aid Algernon in this task. To preserve the secrecy of the chemical
processes that are Algernon's stock in trade, all chemicals will be identified by a
single upper-case letter.  All tables are identified by positive numbers in the range
<!-- MATH
 $1 \ldots N$
 -->
<SPAN CLASS="MATH">1...<I>N</I></SPAN>, where <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of tables.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<B>The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</B>

<P>

<P><P>
<BR>

<P>
<DL>
<DT><STRONG>Line 1:</STRONG></DT>
<DD><P>
# of work tables, integer (henceforth referred to as <SPAN CLASS="MATH"><I>N</I></SPAN>). <SPAN CLASS="MATH"><I>N</I> &lt; 50</SPAN>.
</DD>
<DT><STRONG>Lines <!-- MATH
 $2 \ldots N+1$
 -->
<SPAN CLASS="MATH">2...<I>N</I> + 1</SPAN>:</STRONG></DT>
<DD><P>
For each table:

<UL>
<LI>a list of chemicals dumped into the stream at that table, followed by
</LI>
<LI>a list of chemicals that, if they appeared at that table, would be
        harmlessly neutralized by the reactions at that table, allowing no further
        trace of that chemical to flow downstream (we will assume that the rate of
        work at each table can be adjusted as necessary to guarantee total
        neutralization of whatever amount of these chemicals arrive from upstream).
</LI>
</UL>

<P>
Each of these lists is given as a series of upper-case alphabetic characters. The
only exception is that a special list, consisting of a single `<TT>.</TT>' character,
will be used to denote an empty list. The two lists are separated from one other by
one or more blanks. The same chemical will never appear in both lists.

<P>
</DD>
<DT><STRONG>Lines <!-- MATH
 $N+2 \ldots ?$
 -->
<SPAN CLASS="MATH"><I>N</I> + 2...?</SPAN>:</STRONG></DT>
<DD><P>
These lines provide a description of the pipeworks. Each line contains a pair of
integers in the range <!-- MATH
 $1 \ldots N$
 -->
<SPAN CLASS="MATH">1...<I>N</I></SPAN>, separated by one or more blanks:

<P>

<SPAN CLASS="MATH"><I>IJ</I></SPAN>

<P>
meaning that the table number <SPAN CLASS="MATH"><I>I</I></SPAN> is upstream of table number <SPAN CLASS="MATH"><I>J</I></SPAN>-anything dumped
into the stream at table <SPAN CLASS="MATH"><I>I</I></SPAN> or that arrives in the stream at table <SPAN CLASS="MATH"><I>I</I></SPAN> and is not
neutralized can then be counted on to arrive at table <SPAN CLASS="MATH"><I>J</I></SPAN>.

<P>
No <SPAN CLASS="MATH">(<I>I</I>, <I>J</I>)</SPAN> pair will be listed more than once, but the pairs may occur in any
order.  <SPAN CLASS="MATH"><I>I</I></SPAN> and <SPAN CLASS="MATH"><I>J</I></SPAN> will never be the same number.

<P>
</DD>
</DL>

<P>
The end of input is signaled by a pair of zeros:

<P>
<PRE>
0 0
</PRE>

<P>
Note that if a table only receives water directly from the stream entering the building,
that table will never occur in the second position of a pair. Similarly, any table that
discharges only into the stream leaving the building will never occur in the first
position of a pair.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<B>For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>

<P>
There will be <SPAN CLASS="MATH"><I>N</I></SPAN> lines of output, one for each table, in the same order as they
appeared in the program input.  Each line will contain the list of chemicals that
can be expected at that table's output. This list will be printed as a (possibly empty)
list of upper-case alphabetic characters between two colons (<TT>:</TT>). No empty spaces
should be printed on the line. The characters in the list should be sorted in alphabetic
order.

<P>
<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2366.eps}$
 -->
<IMG
 WIDTH="377" HEIGHT="394" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2366.gif
 ALT="\epsfbox{p2366.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input (for the figure above)</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

4
AB C
C BDA
BCD .
. A
1 2
2 4
3 1
1 3
3 4
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
:ABD:
:C:
:ABCD:
:BCD:
</PRE>

<P>

______________________________________________________
2367||||||false||||||
<P>The Fire Department of New York (FDNY) has always been proud of their response time<P>to fires in New York City, but they want to make their response time even better. To help them with their response time, they want to make sure that the dispatchers know the closest firehouse to any address in the city. You have been hired to write this software and are entrusted with maintaining the proud tradition of FDNY. Conceptually, the software will be given the address of the fire, the locations of the firehouses, street intersections, and the time it takes to cover the distance between each intersection. It will then use this information to calculate how long it takes to reach an address from each firehouse.<P>Given a specific fire location in the city, the software will calculate the time taken from all the fire stations located in the city to reach the fire location. The list of fire stations will be sorted from shortest time to longest time. The dispatcher can then pick the closest firestation with available firefighters and equipment to dispatch to the fire.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR><P><DL><DT><STRONG>Line 1:</STRONG></DT><DD><P># of intersections in the city, a single integer (henceforth referred to as <SPAN CLASS="MATH"><I>N</I></SPAN>) <SPAN CLASS="MATH"><I>N</I> &lt; 20</SPAN><P></DD><DT><STRONG>Lines <SPAN CLASS="MATH">2</SPAN> to <SPAN CLASS="MATH"><I>N</I> + 1</SPAN>:</STRONG></DT><DD><P>A table (square matrix of integer values separated by one or more spaces) representing the time taken in minutes between every pair of intersections in the city. In the sample input shown below the value `<TT>3</TT>' on the 1<SPAN CLASS="MATH"><SUP>st</SUP></SPAN> row and the 2<SPAN CLASS="MATH"><SUP>nd</SUP></SPAN> column represents the time taken from intersection #1 to reach intersection #2. Similarly the value `<TT>9</TT>' on the 4<SPAN CLASS="MATH"><SUP>th</SUP></SPAN> row and the 2<SPAN CLASS="MATH"><SUP>nd</SUP></SPAN> column represents the time taken from intersection #4 to reach intersection #2.<P>A value of -1 for time means that it is not possible to go directly from the origin intersection (row #) to the destination intersection (column #). All other values in the table are non-negative.<P></DD><DT><STRONG>Line <SPAN CLASS="MATH"><I>N</I> + 2</SPAN>:</STRONG></DT><DD><P>An integer value <SPAN CLASS="MATH"><I>n</I>( &le; <I>N</I>)</SPAN> indicating the intersection closest to the fire location followed by one or more integer values for the intersections closest to the fire stations (all on one line, separated by one or more spaces) will follow the input matrix.<P>In the sample input the last line indicates that `<TT>2</TT>' is the location of the fire and `<TT>4</TT>', `<TT>5</TT>' and `<TT>6</TT>' are the intersections where fire stations are located.</DD></DL><P><H3><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001100000000000000">Notes:</A>&nbsp;</FONT></H3><OL><LI>The rows and columns are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>. </LI><LI>All input values are integers. </LI><LI>All fire locations are guaranteed reachable from all firehouses. </LI><LI>All distance calculations are made from the intersection closest to each firehouse to the intersection closest to the fire. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P><DL><DT><STRONG>Line <SPAN CLASS="MATH">1</SPAN>:</STRONG></DT><DD><P>A label line with the headings for each column, exactly as shown in the example.</DD><DT><STRONG>Line <SPAN CLASS="MATH">2</SPAN> onwards (one line for each fire station):</STRONG></DT><DD><P>A sorted list (based on time) showing the fire station (origin), the destination site, time taken and a complete shortest path of nodes from the originating fire station to the fire location.</DD></DL><P><H3><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002100000000000000">Notes:</A>&nbsp;</FONT></H3><OL><LI>Columns are tab separated. </LI><LI>If two or more firehouses are tied in time print them in lexicographical order. </LI><LI>If more than one path exists that has the same minimal time for a given location &amp; firehouse, print the lexicographically smallest. </LI><LI>If the fire location and the fire station locations happen to be the same intersection, the output will indicate that the origin and destination have the same intersection number, the time will be `<TT>0</TT>' and the nodes in the shortest path will show just one number, the fire location. </LI></OL><P><DIV ALIGN="CENTER"><IMG WIDTH="243" HEIGHT="206" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2367.gif ALT="\epsfbox{p2367.eps}"></DIV><P><DIV ALIGN="CENTER">A partial map of the city representing the time taken between intersections</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

 6
 0    3    4   -1   -1   -1
-1    0    4    5   -1   -1
 2    3    0   -1   -1    2
 8    9    5    0    1   -1
 7    2    1   -1    0   -1
 5   -1    4    5    4    0
 2    4    5    6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Org Dest Time Path
5   2    2    5    2
4   2    3    4    5    2
6   2    6    6    5    2
</PRE><P>
______________________________________________________
2368||||||false||||||
The Cash Cow Consulting Company is challenging the Vice Presidents to increase the
profitability of their departments.  In an effort to provide proper incentive, the
Vice President whose department has the highest Profitability Index (PI) will win a
brand new Porsche.  The contest rules are as follows:

<P>

<UL>
<LI>The winning department will have the maximum Profitability Index (sales / development
cost)
</LI>
<LI>Each department must stay within the minimum and maximum cost range.
</LI>
<LI>In the case of equal profitability indexes, the higher profit margin will win
(sales - development cost).
</LI>
<LI>If two departments are still tied, the winning department will develop the smaller
number of features.
</LI>
<LI>If two departments are still tied, the winning department will satisfy the most
customers.
</LI>
</UL>

<P>
Mike Miser is still driving his high school moped and has determined this is his
chance to upgrade.  He has instructed the engineering department to determine what
it will cost for each feature to be developed.  He then instructed the sales force
to determine what features each customer requires, and what sales that will generate.
(To make a sale to a customer all features required must be provided).

<P>
Mike will then determine which feature combination his division should complete to
maximize his chances of winning the contest.

<P>

<H3><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001000100000000000000">
Notes</A>&nbsp;</FONT>
</H3>

<P>

<OL>
<LI>Because of the type of product the Cash Cow Consulting Company creates, the
production costs are negligible, and do not need to be considered.  Only the development
costs should be considered.
</LI>
<LI>The tie breakers listed will result in the selection of exactly one feature set.
</LI>
<LI>At least one feature set will satisfy the requirements.
</LI>
<LI>The Profitability Index should be rounded to three decimal places.  The values
3.4566 and 3.4574 will be considered equal.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
All input will be positive integers.

<P>
The first line of input will indicate the number of data sets.

<P>
The first line of each data set will contain 4 integers separated by white-space.
In order they are the minimum cost, maximum cost, number of potential features (<SPAN CLASS="MATH"><I>N</I></SPAN>)
and number of potential customers (<SPAN CLASS="MATH"><I>M</I></SPAN>).  <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> will be no larger than 20.

<P>
The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines (one for each feature) indicate the cost of each feature.

<P>
The next <SPAN CLASS="MATH"><I>M</I></SPAN> lines will contain the following (one line for each customer):

<P>

<UL>
<LI>Number of required features Feature number (for each required feature) Total Sales
for that customer.

<P>
</LI>
<LI>For instance, if a given customer wanted 3 features, number 1, 2 and 5 and would
provide sales of 50, the line would read: `<TT>3 1 2 5 50</TT>'.
</LI>
</UL>

<P>
The next data set, if more remain, will begin on the next line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The first line of output for each data set should indicate which Feature Set is being
considered.  These should print `<TT>Feature Set <SPAN CLASS="MATH"><I>N</I></SPAN></TT>' where <SPAN CLASS="MATH"><I>N</I></SPAN> is the feature set
number, counting from 1.

<P>
The next line of output for each data set should indicate the profitability index to 3
decimal places.

<P>
The next line of output for each data set should indicate the sales dollars.

<P>
The next line of output for each data set should indicate the cost.

<P>
The next line of output for each data set should indicate which features are implemented.
The first feature is feature number 1.  They must be listed in order, white-space separated.

<P>
The final line of output for each data set should indicate the customers who were satisfied.
 The first customer is customer #1. They must be listed in order, white-space separated.

<P>
No extra output should appear.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 100 2000 7 6
250
350
400
250
250
250
500
4 1 4 5 6 4000
4 1 4 5 6 500
4 1 4 5 6 60
3 1 4 5 7
4 1 2 3 5 5
4 1 2 3 7 6
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Feature Set 1
4.567
4567
1000
1 4 5 6
1 2 3 4
</PRE>

<P>

______________________________________________________
2369||||||false||||||
In recent days, a number of people have been injured after being pushed off the sidewalks
due to overcrowding.  City Hall is interested in figuring out how much pedestrian traffic
its sidewalks receive every day.  The results of this study will be used to determine
whether the city needs to fund more sidewalks.  The city has surveyed various buildings
in several blocks to determine the traffic patterns they generate.  Your job is to take
this survey data and convert it into sidewalk utilization information.

<P>
Your program will read in the size of the map and a map of several city blocks.  Buildings,
streets, and building entrance/exits will be marked on the map.  You will also be given a
list of pedestrian load between several pairs of exits and entrances.  Your program will
determine the paths used by pedestrians between each source and destination, add up the
total pedestrian load from all paths using each street, and output a table of the total
pedestrian load on each square.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Notes</A>&nbsp;</FONT>
</H2>

<P>

<UL>
<LI>The map is divided into squares. Each square of the map can be a street square, a
building square, or an entrance/exit square.  An entrance/exit square serves as both
entrance and exit for that building.  There will be no more than 90 street squares in
the map.
</LI>
<LI>People will always follow the shortest path between their origin and destination.
No shortest path will exceed 75 squares.
</LI>
<LI>If there are multiple equal-length shortest paths, the load will be divided equally
amongst the paths.  For shortest paths, there will be fewer than 50000 equal-length path
combinations.
</LI>
<LI>If a building entrance/exit has multiple sides facing a street (for example, a
corner of a building), the pedestrians may enter or exit through any street-facing side.
</LI>
<LI>All movement will be strictly N, E, S, or W.  No diagonal movement is permitted.
</LI>
<LI>Pedestrians cannot move through buildings or off the edge of the map.
</LI>
<LI>For convenience, you may ignore the fact that each street section may have two
sidewalks.
</LI>
<LI>Traffic load is not applied to the actual exit/entrance squares themselves.
</LI>
<LI>If an origin and destination are adjacent on the map, pedestrians may move directly
between them.  In this case, there is no resulting load placed on any portion of the map
because no streets are used.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<DL>
<DT><STRONG>Line 1:</STRONG></DT>
<DD><SPAN CLASS="MATH"><I>XY</I></SPAN>

<P>
<SPAN CLASS="MATH"><I>X</I></SPAN> is the number of columns in the map, Y is the number of rows. Each is a positive
integer less than 20.

<P>
</DD>
<DT><STRONG>Line <SPAN CLASS="MATH">2 - (<I>Y</I> + 1)</SPAN>:</STRONG></DT>
<DD><P>
Each line contains exactly <SPAN CLASS="MATH"><I>X</I></SPAN> symbols indicating the contents of that square on the map.
The symbols are:

<P>
<DL>
<DT><STRONG><TT>X</TT></STRONG></DT>
<DD>building, non-entrance/exit
	
</DD>
<DT><STRONG><TT>.</TT> (period)</STRONG></DT>
<DD>street
	
</DD>
<DT><STRONG>{<TT>A-O</TT>}</STRONG></DT>
<DD>letter indicating exit/entrance.  Each letter may occur at
        most once.
</DD>
</DL>

<P>
</DD>
<DT><STRONG>Lines <SPAN CLASS="MATH">(<I>Y</I> + 2) - ?</SPAN>:</STRONG></DT>
<DD><P>
Each line indicates a pedestrian route and specifies a source, destination, and pedestrian
load.  Source and destination will each be a letter {<TT>A-O</TT>} with no spaces in between.
The load factor will be a nonnegative integer, separated from the destination by whitespace.
Source and destination will never be equal.  At most 25 routes will be given.
There will be a valid path in the map for each requested route.

<P>
</DD>
</DL>

<P>
The file will terminate with the line:
<PRE>
XX 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output consists of Y lines, each with X space-separated fields indicating the load
factor. Each load factor is printed to two decimal places with 3 spaces for integer
digits (C 6.2 format).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 4
....
A.X.
XXX.
B...
AB 2
BA 1
XX 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
  1.50   3.00   3.00   3.00
  0.00   1.50   0.00   3.00
  0.00   0.00   0.00   3.00
  0.00   3.00   3.00   3.00
</PRE>

<P>

______________________________________________________
2370||||||false||||||
<P>A manufacturer wishes to encode the products it produces with unique codes expressed as a sequence of up to 32 uppercase letters. Every occurrence of a particular product model will be encoded using the same number and the same group of letters, but in different permutations, of course.<P>For example, a simple product code might include just the three letters A, B and C. No more than six of this particular model product could be labeled with a code, however, since there are only six different codes that could be produced using A, B and C (specifically ABC, ACB, BAC, BCA, CAB, and CBA).<P>Some groups of letters from which codes are produced might include duplicates. For example, suppose the group included A, A, and B. The only codes that could be produced using this group are AAB, ABA, and BAA.<P>The manufacturer wants a program to aid in the generation of the product codes. Specifically, given an existing product code, determine and display the next sequential product code. The sequential ordering of product codes is naturally based on alphabetic ordering.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. The input for each case is a single line containing between 1 and 32 uppercase letters immediately followed by the end of line character. The line following the last case will contain only a single end of line character.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the next sequential product code on a line by itself, if one exists. If there is no next sequential code (that is, the input code is the last in the sequence of codes that can be created using the given group of letters), then display the message <TT>*** No Successor***</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ACB
ABCA
ZYXCAB
ZYXCBA
</PRE><EM>This line is blank</EM><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
BAC
ACAB
ZYXCBA
</PRE><P>
______________________________________________________
2371||||||false||||||
<P>
The newly established republic of Northopia is in
the process of defining its monetary system, and is looking for a logical way
of deciding on the number and denomination of the units of its money (that is,
its bills and coins).  The government's
assumption is that the total number of bills and coins that must be exchanged
during a cash transaction is a measure of the ``goodness" of the number and
denomination selection.

<P>
Government consultants have already decided that the
smallest unit of money will be worth exactly one ``Northing", and that all other
units of money must be worth an integral number of Northings.  They have also agreed that there should be
no more than ten different monetary units, each worth no more than 10,000 Northings.

<P>
You have been employed to write a program to help in
determining the ``goodness" of a selection of monetary units.  Given a description of a set of proposed
units of money available in Northopia, and the total amount of a transaction,
your program is to determine the fewest number of bills and coins that can be
used in concluding the transaction.

<P>
For example, suppose five units of money are proposed, and
that they are worth 1, 5, 50, 100, and 500 Northings.  A 999 Northing transaction could be completed by paying one
500-Northing unit, four 100-Northing units, one 50-Northing unit, nine
5-Northing units, and four 1-Northing units, and then receiving no units as
change, for a total of 19 units of money exchanged in the transaction.  The minimum number of units, however, would
be obtained by paying with two 500-Northing units and then receiving one
1-Northing unit in change, for a total of 3 units of money involved in the
transaction.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input data will contain multiple test
cases.  Each test case will begin with
an integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> that indicates the
proposed number of units of money.  This
integer is then followed by <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>
integers representing the proposed value of each of those <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> units of money (in one Northing units), one of which will be 1
Northing, as defined by the consultants. 
Finally, the amount of a proposed transaction is given as an integer,
again in one Northing units.  All
transaction amounts will be non-negative. 
The last case will be followed by a single integer zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case, display the case number (they are
numbered sequentially starting with 1), and the minimum number of units of
money required to complete the transaction. Leave one blank line between the
output for each test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5  1  5  50  100 500  999

10  1  2  4  8  16  32  64  
128  256  512  999

0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 3 units required.

Case 2: 5 units required.
</PRE> 

<P>

______________________________________________________
2372||||||false||||||
<P>A ``fun house" designer is seeking to determine the effect of the placement of mirrors. She'd like to have a program which allows her to specify the placement and size of the mirrors, and then determine the effect of introducing a beam of light into the collection of mirrors at a given angle from a given location. For the purposes of this experiment, she is content to assume the light beam is coherent (that is, it effectively follows a straight line). The mirrors are double-sided, which means they reflect on each side. And, as usual, the light beam is reflected by each mirror at an angle equal to the angle of incidence of the beam.<P><DIV ALIGN="CENTER"><IMG WIDTH="575" HEIGHT="388" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2372.jpg ALT="\epsfbox{p2372.eps}"> <tex2html_verbatim_mark></DIV><P>Let's consider an example. The figure below shows three mirrors (the long, thin rectangles), the light source (the ``dot"), and the path the light will take (the dotted line). Although not drawn to scale, the figure makes it easy to understand our fun house designers goal. Given information about the placement of the double-sided mirrors and the location and direction of the coherent light beam, determine the location and direction of the last light beam leaving a mirrored surface.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. The input for each case begins with an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> (never larger than 10) that specifies the number of mirrors in the case. This is followed by <SPAN CLASS="MATH">2<I>m</I></SPAN> <tex2html_verbatim_mark> pairs of real numbers (that is, <SPAN CLASS="MATH">4<I>m</I></SPAN> <tex2html_verbatim_mark> real numbers). The first pair give the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates (in a Cartesian coordinate system) of one end of the first mirror, and the second pair give the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the other end of the same mirror. The placement of the other mirrors is given by the remaining numbers in a similar manner. (We assume that mirrors are arbitrarily thin, so we dont need to know their thickness.) The input data for each case will conclude with three real numbers specifying, in order, the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the coherent light source and the angle (in degrees) with which the light leaves the source. Zero degrees is to the right (parallel to the x axis), 90 degrees is vertical (parallel to the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> axis); angles increase as the beam is rotated counterclockwise. The input for the last case will be followed by a single integer zero. The origin of the coherent light source will not be on a mirror, and can be assumed to be transparent (thus light returning to the source will pass through it without effect). There will be no cases in which the light is reflected from the same point of the same side of any mirror more than once. Mirrors do not intersect or touch each other.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number (they are numbered sequentially starting with one), the number of mirrors from which the beam is reflected, the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the point on the last mirror from which the beam is reflected, and the angle the beam takes from that point. The angle should be greater than or equal to zero degrees, but less than 360 degrees, and use the same scheme as employed in the input (that is, 0 degrees is to the right, 90 degrees is vertical, and so forth). The coordinates and the angle should be rounded to and displayed with two fractional digits. If the light beam is not reflected from any mirror at all, then the output should just indicate that fact.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4 -1 6 1
4 4 6 2
0 0 0

1
4 -1 8 1
0 0 0

1
4 -0.577350 6 0.577350
0 0 0

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:  The beam is reflected from 2 mirrors, leaving the last mirror
         at (5.00,3.00) with an angle of 180.00 degrees.

Case 2:  The beam is reflected from 1 mirror, leaving the last mirror
         at (6.00,0.00) with an angle of 53.13 degrees.

Case 3:  The beam is reflected from 1 mirror, leaving the last mirror
         at (5.00,0.00) with an angle of 60.00 degrees.
</PRE><P>
______________________________________________________
2373||||||false||||||
<P>A scientist is conducting an experiment that requires periodic recording of the temperature of a solution. Unfortunately, the only temperature measurement device reports the temperature in degrees Fahrenheit, and he must record the temperature in Centigrade. To simplify this task, you have been asked to provide a table with two columns, the left one with temperatures in Fahrenheit, and the right one with temperatures in Centigrade. Every integral temperature in a given range of Fahrenheit temperatures is to appear in the table, along with the integral Centigrade temperatures in the same range, and the columns are to be ordered from low to high. Only when the Fahrenheit and Centigrade temperatures are equal should there be two entries in the same row.<P>The conversion between Fahrenheit and Centigrade is given by the following formulas:<P><DIV ALIGN="CENTER"></DIV><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><SUP>o</SUP><I>F</I> = <IMG WIDTH="17" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2373img1.png ALT="$\displaystyle {\frac{{9}}{{5}}}$">&nbsp;<SUP>o</SUP><I>C</I> + 32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<SUP>o</SUP><I>C</I> = <IMG WIDTH="17" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2373img1.png ALT="$\displaystyle {\frac{{5}}{{9}}}$">(<SUP>o</SUP><I>F</I> - 32)</DIV><P><tex2html_verbatim_mark></P><DIV ALIGN="CENTER"></DIV><P>An example will clarify the table organization. Suppose the scientist asked for a table with temperatures in the range 30 to 34 degrees Fahrenheit. The following table would be produced:<P><PRE>
Table 1: 30 to 34 degrees Fahrenheit
Fahrenheit Centigrade
---------- ----------
        30
                   -1
        31
        32          0
        33
                    1
        34
</PRE><P>The left column of the table contains every integral temperature in the range 30 to 34 degrees Fahrenheit. Since 32<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark> F is exactly 0<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark> C, both temperatures appear in the same row. There is no integral Fahrenheit equivalent for 1<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark>C or 1<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark>C, so they appear on lines by themselves, as do the other integral Fahrenheit temperatures. Note that 1<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark>C is between 30<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark>F and 31<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark>F.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. The input for each case consists of a pair of integers <SPAN CLASS="MATH"><I>low</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>high</I></SPAN> <tex2html_verbatim_mark>, with <SPAN CLASS="MATH"><I>low</I></SPAN> <tex2html_verbatim_mark> less than <SPAN CLASS="MATH"><I>high</I></SPAN> <tex2html_verbatim_mark>. A pair of integers follows the last case, with the first number larger than the second. No Fahrenheit or Centigrade temperature will require more than four columns for its display.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the table number (they are numbered sequentially starting with one), and the desired table, with appropriate column headings. Leave one blank line between each table. The format shown in the example above and in the samples below should be followed closely.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
50 54
210 215
1 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Table 1: 50 to 54 degrees Fahrenheit
Fahrenheit Centigrade
---------- ----------
        50         10
        51
                   11
        52
        53
                   12
        54

Table 2: 210 to 215 degrees Fahrenheit
Fahrenheit Centigrade
---------- ----------
       210
                   99
       211
       212        100
       213
                  101
       214
       215
</PRE><P>
______________________________________________________
2374||||||false||||||
<P>
Radio broadcasting is normally done only by stations
licensed by governments.  In some parts
of the world, however, clandestine unlicensed transmitters are operated by
groups at odds with the broadcasting standards imposed by the licensing
governments.  You have been employed by
one of these governments to locate some of these illegal transmitters.

<P>
You are provided with data from mobile tracking
stations, each capable of determining its distance from a radio signal's point
of origin (the transmitter).  Given the
data from three of these tracking stations (for each unlicensed transmitter)
and a map of the country, you are to determine the distance and direction of
the particular unlicensed transmitter from the nearest city.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of a two-dimensional map using
Cartesian coordinates, followed by the number of transmitters that must be
located, and the corresponding number of sets of data from tracking stations.

<P>
In the map, the data for each city will appear on a
separate line.  The data for each city
will consist of a fifteen character name followed by the citys x and y
coordinates and a radius, all real numbers representing measurements in
kilometers.  The x and y coordinates
give the location of the citys geographical center, while the radius gives the
distance from the center of the city to the city limits (for this problem, all
cities are considered to be circular). 
There will be no more than 50 cities, and the last city on the map will
be located at the origin (<TT>0, 0</TT>).

<P>
Following the map is a single integer that gives the
number of unlicensed transmitters to be located.  For each transmitter there will be readings from three tracking
stations.  Each of these readings
consists of the x and y coordinates of the tracking station and the distance to
the unlicensed transmitter, all real numbers representing measurements in
kilometers.  The three tracking station
locations will not be collinear, and will be at least 10 kilometers from each
other.  No city will be located more
than 6,000 kilometers from the origin.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program should process the set of readings for
each unlicensed transmitter and produce a single line of output that specifies
the distance from the unlicensed transmitter to the city limits (not the
geographical center) of the nearest city, the principal compass direction of
the unlicensed transmitter from the nearest city (north, northeast, east,
southeast, south, southwest, west, or northwest), and the name of the nearest
city.

<P>
The distance should be correct to within 0.02
kilometers and displayed with two significant digits.  To determine the compass direction of the unlicensed transmitter
from the nearest city, each of the eight principal directions should be
considered to be at the center of a 45-degree arc in that direction.  Unlicensed transmitters that fall anywhere
in a particular arc are considered to be in that direction.  Thus if due north is at zero degrees, a
transmitter that is at an angle between 22 and 67 degrees, inclusive, will be
considered northeast of the city, while a transmitter that is at an angle
between 68 and 112 degrees, inclusive, would be considered east of the
city.  When determining the direction of
the unlicensed transmitter, an angle should be rounded to the nearest whole
degree.

<P>
Unlicensed transmitters that are located inside a
city's radius are to be reported as originating from that city, with no
distance or directional information reported.

<P>
Each unlicensed transmitter report should include
the transmitter identification number (starting with transmitter 1).  Leave one blank line between the reports.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Pleasantville  937.8 1277.34    4.9
Avion          494.17 -483.06    12.7
Caniama        -803.24     1351.68    6.53
Kingstons Falls-554.45     -300.0     1.82
Otisburg       0.0   0.0  3.6
5
286.91 1538.6 676.989 1627.84 1450.3 1026.29 1140.4 451.47 705.152
-1021.9 -1064.67 2164.66 1089.23 0.0 1796.91 993.94 -1516.17 2882.78
200.0 -295.6 824.776 -683.94 -1118.64 998.19 474.16 1729.8 2145.37
-173.21 -700.2 695.308 -202.87 191.04 971.421 1407.9 525.65 1369.38
747.02 419.61 628.79 0.0 -582.19 645.469 -987.65 294.3 1300.12
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Unlicensed transmitter 1 is located 354.65 km southwest of Pleasantville 

Unlicensed transmitter 2 is located 524.55 km southeast of Caniama       

Unlicensed transmitter 3 is located 182.27 km north of Kingstons Falls

Unlicensed transmitter 4 is located in Avion          

Unlicensed transmitter 5 is located 275.12 km east of Otisburg
</PRE> 

<P>

______________________________________________________
2375||||||false||||||
<P>Sudoku is a puzzle played on a 9 by 9 grid. The grid is subdivided into 9 blocks of 3 by 3 cells. At the start of the puzzle, only a few numbers have been recorded on the grid, like this:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=9 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY></TABLE></DIV><P><P><BR>The objective is to complete the grid by filling in numbers in the blank spaces to satisfy the following conditions:<P><OL><LI>Each row must contain each digit 0 through 9 exactly once </LI><LI>Each column must contain each digit 0 through 9 exactly once </LI><LI>Each 3 by 3 sub-block must contain each digit 0 through 9 exactly once </LI></OL><P>In general, the solution of a Sudoku puzzle requires backtracking algorithms. A subset of all possible Sudoku puzzles, however, do not require backtracking. These puzzles can be solved by directly addressing the three conditions listed above, and your task will be to solve this kind of Sudoku puzzle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input will consist of an arbitrary number of input records. Each record describes the positions and values of the given cells, representing the starting state of the grid. A record consists of a number of lines, each line containing 5 integer values, formatted as follows:<P><P><BR><P><!-- MATH
 \begin{displaymath}
<block\_column\_nr> \ <block\_row\_nr> \ <cell\_column\_nr> \ <cell\_row\_nr> \ <digit>
\end{displaymath}
 --></P><DIV ALIGN="CENTER" CLASS="mathdisplay">&lt; <I>block</I><IMG WIDTH="68" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$\displaystyle \_column$"><IMG WIDTH="29" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$\displaystyle \_nr$"> &gt; &nbsp; &lt; <I>block</I><IMG WIDTH="40" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$\displaystyle \_row$"><IMG WIDTH="29" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$\displaystyle \_nr$"> &gt; &nbsp; &lt; <I>cell</I><IMG WIDTH="68" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$\displaystyle \_column$"><IMG WIDTH="29" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$\displaystyle \_nr$"> &gt; &nbsp; &lt; <I>cell</I><IMG WIDTH="40" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$\displaystyle \_row$"><IMG WIDTH="29" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$\displaystyle \_nr$"> &gt; &nbsp; &lt; <I>digit</I> &gt;</DIV><P></P><P><P><BR>where <!-- MATH
 $<block\_column\_nr>$
 --><SPAN CLASS="MATH">&lt; <I>block</I><IMG WIDTH="68" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$ \_column$"><IMG WIDTH="29" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$ \_nr$"> &gt;</SPAN> denotes the <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> sub-block column number, and <!-- MATH
 $<cell\_column\_nr>$
 --><SPAN CLASS="MATH">&lt; <I>cell</I><IMG WIDTH="68" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$ \_column$"><IMG WIDTH="29" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2375img1.png ALT="$ \_nr$"> &gt;</SPAN> denotes the cell column number within that sub-block, and likewise for the rows. Note that row and column numbers are numbered starting from 0. Each input record is terminated by a line containing the value `<TT>-1</TT>', except the last record in the input, which is terminated by a line containing the value `<TT>-2</TT>' instead. <P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>As output, you should print out the completed Sudoku puzzle, in the format shown in the Sample Output section below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0 0 0 9 
0 0 2 0 4 
0 0 1 1 5 
0 0 0 2 2 
1 0 1 0 8 
1 0 2 0 7 
1 0 0 2 3 
2 0 2 0 1 
2 0 0 1 6 
2 0 1 1 8 
2 0 2 2 9 
0 1 1 0 3 
0 1 2 0 6 
0 1 0 2 5 
0 1 2 2 7 
1 1 0 0 1 
1 1 2 0 5 
1 1 2 1 9 
1 1 0 2 4 
2 1 0 0 2 
2 1 2 0 4 
2 1 1 1 7 
2 1 1 2 3 
2 1 2 2 8 
0 2 0 1 4 
0 2 2 1 9 
0 2 1 2 1 
0 2 2 2 5 
1 2 0 1 6 
1 2 2 2 2 
2 2 2 0 5 
2 2 1 1 1 
2 2 1 2 6 
2 2 2 2 3
-2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
 9  6  4 | 5  8  7 | 3  2  1 
 3  5  1 | 2  9  4 | 6  8  7 
 2  7  8 | 3  6  1 | 4  5  9 
-----------------------------
 8  3  6 | 1  7  5 | 2  9  4 
 1  4  2 | 8  3  9 | 5  7  6 
 5  9  7 | 4  2  6 | 1  3  8 
-----------------------------
 6  2  3 | 7  1  8 | 9  4  5 
 4  8  9 | 6  5  3 | 7  1  2 
 7  1  5 | 9  4  2 | 8  6  3
</PRE><P>
______________________________________________________
2376||||||false||||||
<P>The ALE (Automatic Link Establishment) protocol is a system designed to allow military radios to agree on a frequency that is to be used for communication. In short, each radio is scanning a number of channels, and it will pause on every channel that it hears some traffic on. If it hears a call (from another radio) to its own address, it will stop on that channel, and alert the operator that a connection has been established.<P>ALE calls are typically encrypted. Your task will be to implement a decryption routine for such encrypted calls. First, a subset of the ALE protocol will be discussed in the <SPAN CLASS="textbf">ALE</SPAN> and <SPAN CLASS="textbf">Scanning ALE</SPAN> sections. This is followed by a description of the format used to pack the data for transmission in the <SPAN CLASS="textbf">ALE data packing</SPAN> section. Lastly, the <SPAN CLASS="textbf">ALE encryption</SPAN> section defines the encryption algorithm.<P><P><BR><SPAN CLASS="textbf">ALE</SPAN><P>ALE calls consist of two sections: a scanning section, and the calling section. The scanning section precedes the calling section, but it will only be discussed below under the heading <SPAN CLASS="textbf">Scanning ALE</SPAN>. The calling section will now be described.<P>Every radio has a ``self" address which contains only the digits [0-9]. The tricky part is that the addresses are variable length, and therefore they may consist of one, two or three digits, <SPAN CLASS="textit">i.e.</SPAN> ``0", ``01", ``00", ``000", and ``001" are all valid, unique addresses. Think of each address as a string of digits, rather than a number.<P><P><BR>To establish a call, the caller will transmit a sequence that starts with the callee's address, followed by the caller's. The simplest type of call is one between two single-digit-address radios, which looks like this:<P><PRE>
TO   1
TO   1
TIS  7
</PRE><P>This is a call from radio ``7" to radio ``1". The command ``<TT>TO</TT>" is self-explanatory; the ``<TT>TIS</TT>" command is a contraction of ``THIS IS". Note that the callee's address is repeated, <SPAN CLASS="textit">i.e.</SPAN> it appears twice.<P><P><BR>If either the caller or the callee have longer addresses, a more complex sequence is used. Here is an example of a call from radio ``7" to radio ``13":<P><PRE>
TO   1
DATA 3
TO   1
DATA 3
TIS  7
</PRE><P>Note that the callee's address is repeated twice, as in the example above, and that the ``<TT>DATA</TT>" keyword is used to represent the second digit of the address.<P><P><BR>When a three-digit address is used, it looks like this:<P><PRE>
TO   1
DATA 3
REP  5
TO   1
DATA 3
REP  5
TIS  7
</PRE><P>This is a call from radio ``7" to radio ``135". Note that the third digit of the address is represented using the ``<TT>REP</TT>" command (REPeat, meaning repeat of the command ``<TT>DATA</TT>", not the digit of the preceding ``<TT>DATA</TT>" command. The ``<TT>REP</TT>" command has its own digit payload.)<P><P><BR>The same principle is used for the caller's address, so that when radio ``721" calls radio ``51", it looks like this:<P><PRE>
TO   5
DATA 1
TO   5
DATA 1
TIS  7
DATA 2
REP  1
</PRE><P><P><BR>To summarise, a typical non-scanning call uses the following syntax:<P><PRE>
TO &lt;d1&gt; [DATA &lt;d2&gt; [REP &lt;d3&gt;]] 
TO &lt;d1&gt; [DATA &lt;d2&gt; [REP &lt;d3&gt;]] 
TIS &lt;s1&gt; [DATA &lt;s2&gt; [REP &lt;s3&gt;]]
</PRE>where <SPAN CLASS="MATH">&lt; <I>d</I>1 &gt; - &lt; <I>d</I>3 &gt;</SPAN> and <SPAN CLASS="MATH">&lt; <I>s</I>1 &gt; - &lt; <I>s</I>3 &gt;</SPAN> represent the digits of the callee and caller's addresses, and [ ] indicates optional components. Note, each command starts on a new line.<P><P><BR><SPAN CLASS="textbf">Scanning ALE</SPAN><P>There is one additional problem, though. Assume that radio ``7" wants to make a call to radio ``1". Radio ``1" is scanning through <SPAN CLASS="MATH"><I>N</I></SPAN> channels, spending a few milliseconds on each to see if there is a call for it on that channel. If radio ``7" thus decides to use channel 3 for the call, it must transmit long enough so that radio ``1" has time to go through all its channels and still be in time to hear the call from radio ``7". To solve this problem, radio ``7" will repeat the first command of the call (containing the first digit of the callee's address) a number of times, thus giving radio ``1" the opportunity to hear its own address (the first digit thereof). Note that other stations, like radio ``15" or radio ``123" will also stop to listen, but they will continue scanning once the full address follows, and they can unambiguously determine that the call is not for them. Thus, the simple call listed in the first example above will become, for example,<P><PRE>
TO   1
TO   1
TO   1
TO   1
TO   1
TIS  7
</PRE>where the number of repetitions of the first ``<TT>TO</TT>" command is arbitrary, but <SPAN CLASS="textbf">fewer than 10</SPAN>. Only the first ``<TT>TO</TT>" command is repeated, so that the second example (a call from ``7" to ``13") becomes, for example,<P><PRE>
TO   1
TO   1
TO   1
TO   1
TO   1
TO   1
DATA 3
TO   1
DATA 3
TIS  7
</PRE><P><P><BR>The final syntax for a scanning ALE call is thus:<P><PRE>
TO &lt;d1&gt;* 
TO &lt;d1&gt; [DATA &lt;d2&gt; [REP &lt;d3&gt;]] 
TO &lt;d1&gt; [DATA &lt;d2&gt; [REP &lt;d3&gt;]] 
TIS &lt;s1&gt; [DATA &lt;s2&gt; [REP &lt;s3&gt;]]
</PRE>where ``<SPAN CLASS="MATH"><TT>*</TT></SPAN>" means zero of more repetitions of the stated command. The sequence of repetitions of the first ``<TT>TO</TT>" command is called the scanning section.<P><P><BR>In a valid scanning ALE call, only certain commands may follow others. Here is a list of valid combinations:<P><UL><LI><TT>TO</TT> may be followed by <TT>TO</TT>, <TT>DATA</TT>, or <TT>TIS</TT> </LI><LI><TT>TIS</TT> may be followed by <TT>DATA</TT> </LI><LI><TT>DATA</TT> may be followed by <TT>TO</TT>, <TT>REP</TT>, or <TT>TIS</TT> </LI><LI><TT>REP</TT> may be followed by <TT>TO</TT>, or <TT>TIS</TT> </LI></UL><P><P><BR><SPAN CLASS="textbf">ALE data packing</SPAN><P>The individual commands can be packed into bytes using the following format:<P><UL><LI>The commands are represented using 4-bit values, which can be packed into the upper 4 bits of a byte. This effectively assigns hexadecimal values as follows: <TT>TO</TT> = 0x00, <TT>TIS</TT> = 0x10, <TT>DATA</TT> = 0x20, and <TT>REP</TT> = 0x30 </LI><LI>An address digit is represented as a 4-bit value, thus <SPAN CLASS="MATH">0 = 0, 1 = 1,..., 9 = 9</SPAN>. These values are stored in the lower 4 bits of a byte. Note that all other 4-bit values (0x0a through 0x0f) are invalid. </LI></UL><P>The packed commands are thus formed by adding (or bit-wise OR-ing) the command value to the digit value. The upper two bits of the resulting byte are always zero. This means that <TT>TO 1</TT> is encoded as 0x01, and <TT>REP 7</TT> as 0x37, and so on.<P><P><BR><SPAN CLASS="textbf">ALE encryption</SPAN><P>Now things get more interesting: this is a military protocol, hence the data must be encrypted. The original ALE protocol uses 56-bit encryption keys; our simplified algorithm will use a simple look-up table.<P><DIV ALIGN="CENTER"><TABLE COLS=11 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Key #</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=10><SPAN CLASS="textbf">Key phase number</SPAN></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x2a</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x15</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x2a</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x22</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x15</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x11</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x1a</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x2d</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x25</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x1e</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x17</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x2e</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x15</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x17</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x0f</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x28</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x2d</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x1e</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x3b</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x2f</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x11</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x2c</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x13</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x0c</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x23</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x28</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x3f</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x16</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x07</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x32</TD></TR></TBODY></TABLE></DIV><P>This table lists three encryption keys, <SPAN CLASS="MATH"><I>C</I>(<I>s</I>)<SUB>n</SUB></SPAN>. For a given call, any one of the three keys (<SPAN CLASS="MATH"><I>s</I> =</SPAN> 1, 2 or 3) is selected. Communications are encrypted as follows: a call command sequence (as defined above) is packed into bytes (of which the upper two bits are always set to zero) as described above. Call this sequence <SPAN CLASS="MATH"><I>p</I><SUB>n</SUB></SPAN>, the plaintext sequence. The encrypted sequence is then obtained by performing a bit-wise XOR with the corresponding word from the encryption key, to obtain the encrypted word, thus:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>e</I><SUB>n</SUB> = <I>C</I>(<I>s</I>)<SUB>(n%10)</SUB> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2376img1.png ALT="$\displaystyle \wedge$"> <I>p</I><SUB>n</SUB></DIV><P></P>where ``<SPAN CLASS="MATH">%</SPAN>" denotes the modulo operator, and ``<SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2376img1.png ALT="$ \wedge$"></SPAN>" the bit-wise XOR operator. The value <SPAN CLASS="MATH"><I>n</I>%10</SPAN> is called the phase of the key sequence. <SPAN CLASS="MATH"><I>n</I></SPAN> is the byte-index of the word in the message or encrypted message.<P><P><BR>Example: The sequence <TT>TO 1</TT>, <TT>TO 1</TT>, <TT>TIS 7</TT>, in packed form, is 0x01, 0x01, 0x17. Encrypting it with key 2 yields 0x16, 0x2f, 0x02.<P><P><BR>Things are a bit more complicated when the scanning section must be encrypted. Radio ``1" can arrive on the channel (that radio ``7" is calling on) at any time. Thus, if radio ``7" just blindly encrypted the entire call, it would be very difficult for radio ``1" to determine the correct encryption phase, since radio ``1" effectively misses the first <SPAN CLASS="MATH"><I>k</I></SPAN> words of the call, and it does not know what the value of <SPAN CLASS="MATH"><I>k</I></SPAN> is. The solution is to alternate between key phase 0 and key phase 1 for the scanning part of the call. This reduces the search space for radio ``1" considerably, making the problem tractable. In tabular form, here is an example of an encrypted call (using key 2, as example) with a scanning section:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Call word</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Packed words</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Key phase</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Encrypted words</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>TO 1</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x01</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x2f</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>TO 1</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x01</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x16</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>TO 1</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x01</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x2f</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>TO 1</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x01</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x16</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>DATA 8</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x28</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x06</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>TO 1</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x01</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x14</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>DATA 8</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x28</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x3f</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>TIS 7</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x17</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x18</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>DATA 5</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x25</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x0d</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>REP 3</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x33</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x1e</TD></TR></TBODY></TABLE></DIV><P><P><BR>Note that the key phase is always aligned so that the last word of the scanning section ends on phase 1, so that the first command that forms part of the full address (the 4th command in the example above) always starts on phase 0.<P><P><BR>Your task is to implement a decryption algorithm for this simplified ALE encryption scheme. As input, you will receive a sequence of encrypted bytes representing encrypted ALE words. The calls may include an optional scanning section (of no more than 10 words), followed by the call itself. The call will be encrypted as described above, using the encryption table provided above. You have to determine the correct key number to use, and you have to recover the key phase using only the encrypted data.<P>Note that your encrypted sequence will always contain words with a key phase of 0, 1 and 2. Longer messages will use higher phase numbers. A scanning section may or may not be present at the start of the encrypted sequence.<P>All input test data is guaranteed to have a unique solution. You may also assume that the reception of the words was flawless, <SPAN CLASS="textit">i.e.</SPAN> there were no transmission errors.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input will consist of a number of records. Each record is a sequence of integers in an ASCII-hexadecimal representation, separated by spaces. Each sequence is terminated by a `<TT>0xff</TT>' value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input record, your output should be the decrypted ALE call sequence, as shown below. Please format your text as shown below: the first column should be 4 characters wide, left-justified, followed by a singlespace column, followed by the digit column. After each input record has been processed, a newline character must be printed to the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0x10 0x2d 0x04 0x2b 0xff 
0x2f 0x16 0x2f 0x16 0x2f 0x02 0x32 0x3c 0xff
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
TO   1 
TO   1 
TIS  7 
DATA 7 

TO   1 
TO   1 
TO   1 
TO   1 
TO   1 
TIS  7 
DATA 5 
REP  3
</PRE><P>
______________________________________________________
2377||||||false||||||
<P>You are the chief designer of a road race that will be held in a hilly area. The racecourse consists of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> connected straight line segments; that is, the end of the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>th segment coincides with the beginning of the <SPAN CLASS="MATH">(<I>k</I> + 1)</SPAN> <tex2html_verbatim_mark>st segment. During planning, these segments are laid out on a planar surface, so 2-dimensional Cartesian coordinates identify the endpoints. The first segment begins at the origin. Figure 1 shows the planar view of a racecourse with 6 segments.<P><DIV ALIGN="CENTER"><IMG BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="\epsfbox{p2377a.eps}"> <tex2html_verbatim_mark></DIV><P>The actual race is run on the side of a hill. For simplicity, assume the hill makes an angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \theta$"></SPAN> <tex2html_verbatim_mark> with the horizontal plane, as illustrated in Figure 2.<P>The plane of the hill and the horizontal plane intersect in the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-axis. Each 2-dimensional Cartesian coordinate <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> corresponds to a 3-dimensional form <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB><SUP>'</SUP>, <I>y</I><SUB>i</SUB><SUP>'</SUP>, <I>z</I><SUB>i</SUB><SUP>'</SUP>)</SPAN> <tex2html_verbatim_mark>, with <SPAN CLASS="MATH"><I>z</I><SUB>i</SUB><SUP>'</SUP></SPAN> <tex2html_verbatim_mark> representing the height of the endpoint of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th linear segment. The height of the origin is 0.<P>This particular race is intended for novice drivers, so the racecourse must not include any segments that require downhill travel. That is, if the height of the endpoint of segment <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>z</I><SUB>k</SUB><SUP>'</SUP></SPAN> <tex2html_verbatim_mark>, then the height of the endpoint of each segment after segment <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> must not be less than <SPAN CLASS="MATH"><I>z</I><SUB>k</SUB><SUP>'</SUP></SPAN> <tex2html_verbatim_mark>. Formally we can write <SPAN CLASS="MATH"><I>z</I><SUB>k</SUB><SUP>'</SUP><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \le$"><I>z</I><SUB>m</SUB><SUP>'</SUP></SPAN> <tex2html_verbatim_mark>, for <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \ge$"><I>k</I></SPAN> <tex2html_verbatim_mark>.<P>If a proposed racecourse includes downhill segments, it might be possible to transform it into a racecourse with no downhill segments by rotating the planar view of the entire course about the origin, without changing the angle between consecutive pairs of segments. However there may be proposed racecourses that cannot be made acceptable by such a rotation.<P>In this problem you must determine if a proposed racecourse is acceptable (that is, if it does not contain any downhill segments). If it is not acceptable, you must determine the minimum angle through which the racecourse must be rotated to make it acceptable, if that is possible.<P><DIV ALIGN="CENTER"><IMG BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="\epsfbox{p2377b.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case is a description of a proposed racecourse and the slope of the hillside on which it will be run. The first line of each description contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \theta$">(0<SUP>o</SUP><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \le$"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \theta$"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \le$">45<SUP>o</SUP>)</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> denotes the number of segments in the course and <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \theta$"></SPAN> <tex2html_verbatim_mark> denotes the angle (in degrees) that the hillside makes with the horizontal plane. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contains a pair of integers <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2377a.jpg ALT="$ \le$"><I>N</I>)</SPAN> <tex2html_verbatim_mark>, which are the endpoints of the linear segments comprising the racecourse. The first segment begins at the origin, and segment <SPAN CLASS="MATH"><I>k</I> + 1</SPAN> <tex2html_verbatim_mark> begins at the endpoint of segment <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>. No segment has zero length.<P>The last test case is followed by a line containing two zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1). If the proposed course is acceptable without rotation, print ``<TT>Acceptable as proposed</TT>". If the course is not acceptable as proposed, but can be made acceptable by rotating it about the origin, print ``<TT>Acceptable after clockwise rotation of <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> degrees</TT>" or ``<TT>Acceptable after counterclockwise rotation of <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> degrees</TT>". The value <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> should be an unsigned number. For our purposes, a clockwise rotation would rotate the positive <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-axis toward the positive <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-axis. If both a clockwise and a counterclockwise rotation can make the course acceptable, choose the one with the smaller angle. If both rotations have the same angle, then choose the clockwise rotation. If the course cannot be made acceptable by any rotation, print ``<TT>Unacceptable</TT>". Display the angles of rotation rounded to two fractional digits.<P>Print a blank line after the output for each test case. Use an output format similar to that shown in the sample output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 45 
10 10 
0 1 
2 0 
1 1 
2 0 
3 45 
10 10 
1 10 
5 6 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Acceptable after clockwise rotation of 131.99 degrees 

Case 2: Acceptable as proposed

Case 3: Unacceptable
</PRE><P>
______________________________________________________
2378||||||false||||||
<P>Sets of integers having particular properties appear in lots of applications. In this problem, you are to determine the number of integers in a particular set. Each set to be considered has the value <SPAN CLASS="MATH"><I>first</I></SPAN> <tex2html_verbatim_mark> as its smallest value, and the value <SPAN CLASS="MATH"><I>last</I></SPAN> <tex2html_verbatim_mark> as its largest value. <SPAN CLASS="MATH"><I>first</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>last</I></SPAN> <tex2html_verbatim_mark> are supplied as input data items. Every other integer in the set is larger than <SPAN CLASS="MATH"><I>first</I></SPAN> <tex2html_verbatim_mark> and smaller than <SPAN CLASS="MATH"><I>last</I></SPAN> <tex2html_verbatim_mark>, and also has the property that it differs from another element already in the set by <SPAN CLASS="MATH"><I>diff</I></SPAN> <tex2html_verbatim_mark> (another integer value that will be supplied in the input).<P>Lets consider an example. Suppose <SPAN CLASS="MATH"><I>first</I> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>last</I> = 10</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>diff</I> = 3</SPAN> <tex2html_verbatim_mark>. Clearly 1 and 10 are in the set. <SPAN CLASS="MATH"><I>first</I> + <I>diff</I> = 4</SPAN> <tex2html_verbatim_mark> is also in the set. <SPAN CLASS="MATH"><I>last</I>&nbsp;<I>diff</I> = 7</SPAN> <tex2html_verbatim_mark> is in the set as well. Now we can consider <SPAN CLASS="MATH">4 + <I>diff</I> = 7</SPAN> <tex2html_verbatim_mark> for membership. But 7 is already in the set. Clearly this set includes only the integers 1, 4, 7, and 10. The number of elements in the set is 4, and that would be the proper output for this input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. The input for each case contains three integers, specifically <SPAN CLASS="MATH"><I>first</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>last</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>diff</I></SPAN> <tex2html_verbatim_mark>. The input for the last case will be followed by input for which <SPAN CLASS="MATH"><I>first</I> &gt; <I>last</I></SPAN> <tex2html_verbatim_mark>; this case is <SPAN ID="txt49">not</SPAN> to be considered as the specification of another set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number (they are numbered sequentially starting with one), and the number of integers in the set. Leave a blank line between the output for each case. The examples shown below illustrate an acceptable output format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 10 3
10 100 10
11 30 19
27 36 4
2 1 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Set contains 4 integers.

Case 2: Set contains 10 integers.

Case 3: Set contains 2 integers.

Case 4: Set contains 6 integers.

______________________________________________________
2379||||||false||||||
<P>
Most of you are probably familiar with Jumbleï¿½ a daily newspaper feature, where you reconstruct scrambled words.  For example, you might be given `<TT>ROYIN</TT>' and have to come up with `<TT>IRONY</TT>'.

<P>
One aspect that makes a particular scrambling of letters ``hard" is if it looks like a ``real" word.  Thus, `<TT>ROYIN</TT>' is tougher scramble than `<TT>NRYIO</TT>' because it confuses your brain into thinking that it's already a word.

<P>
Another aspect that makes a scrambling harder is whether letters are in their correct position.  So, `<TT>RIONY</TT>' isn't a very good scramble, even if it might kind-of look like a real word.

<P>

<P>
<BR>
Your task is to write a program that scores scrambles as `<TT>good</TT>', `<TT>fair</TT>', `<TT>poor</TT>', or `<TT>not</TT>'.  Your program will read pairs of words and score them.  A scramble is `<TT>good</TT>' if none of its letters are in the correct place and it looks ``real" (more on that later).  A scramble is `<TT>poor</TT>' if it doesn't look ``real" and has either the first letter in place or any two consecutive letters in place.  If the word isn't scrambled at all, it is said to be `<TT>not</TT>' scrambled.  Otherwise, the scramble is ``fair".

<P>
How do we know if a word looks "real"?  We will use an extremely crude heuristic that the word must alternate between vowels (`<TT>Y</TT>' is a vowel for these purposes) and consonants. However, certain groups of vowels and consonants are allowed:

<P>
<PRE>
  AI AY EA EE EO IO OA OO OY YA YO YU
  BL BR CH CK CL CR DR FL FR GH GL GR
  KL KR KW PF PL PR SC SCH SCR SH SHR
  SK SL SM SN SP SQ ST SW TH THR TR
  TW WH WR
</PRE> 

<P>
Also, all double consonants are allowed.  No other combinations are allowed, so `<TT>SWR</TT>' wouldn't be good, even though both `<TT>SW</TT>' and `<TT>WR</TT>' are both OK.

<P>

<P><P>
<BR>
<B>DUCK GOLO</B>! 	(That's a scramble of `GOOD LUCK'!)

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input for your program will be pairs of words, all upper-case letters, alternating until a ``word" of `<TT>999</TT>' is encountered.  The first word of the pair is the original word; the second is the scrambled version that you must evaluate. You may assume that the words are anagrams of one another and contain no spaces.  Words will be at least 3 letters in length.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each pair, you should print how well the second scores as a scramble of the first. Use the format shown in the sample.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
SPAM
MAPS
IRONY
RIONY
IRONY
ONYRI
IRONY
IRONY
IRONY
INOYR
IRONY
IOYRN
999
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
"MAPS" is a fair scramble of "SPAM"
"RIONY" is a fair scramble of "IRONY"
"ONYRI" is a good scramble of "IRONY"
"IRONY" is not a scramble of "IRONY"
"INOYR" is a fair scramble of "IRONY"
"IOYRN" is a poor scramble of "IRONY"
</PRE> 

<P>

______________________________________________________
2380||||||false||||||
<P>Alice has designed a secret encryption method she wants Bob to use when he sends ASCII messages to her. The method is based on arithmetic in the integers <SPAN CLASS="MATH">mod 17</SPAN> <tex2html_verbatim_mark>.<P><OL><LI>Alice tells Bob to partition his ASCII message (8 bit bytes) into 4-bit nibbles <SPAN CLASS="MATH"><I>m</I>1, <I>m</I>2, <I>m</I>3,...</SPAN> <tex2html_verbatim_mark> </LI><LI>Alice asks Bob to add 1 to each nibble to get integers <SPAN CLASS="MATH"><I>n</I>1, <I>n</I>2, <I>n</I>3,...</SPAN> <tex2html_verbatim_mark> (so each is from the set <SPAN CLASS="MATH">1, 2,...16</SPAN> <tex2html_verbatim_mark>.) </LI><LI>Alice asks Bob to group these into threes, such as <SPAN CLASS="MATH"><I>v</I> = (<I>n</I>1, <I>n</I>2, <I>n</I>3) = (14, 5, 7)</SPAN> <tex2html_verbatim_mark>, augmented in the last triple by zeros, if necessary, so that each triple is complete. </LI><LI>Alice has secretly provided Bob with a sequence of 9 numbers, <SPAN CLASS="MATH"><I>d</I>1, <I>d</I>2,..., <I>d</I>9</SPAN> <tex2html_verbatim_mark>, each from the set <SPAN CLASS="MATH">{0, 1,..., 16)</SPAN> <tex2html_verbatim_mark>. </LI><LI>Alice asks Bob to group the nine numbers into a 3 by 3 matrix thus:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I> = <IMG WIDTH="4" HEIGHT="31" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2380img1.png ALT="$\displaystyle \pmatrix$"><I>d</I>1 &amp; <I>d</I>2 &amp; <I>d</I>3<I>d</I>4 &amp; <I>d</I>5 &amp; <I>d</I>6<I>d</I>7 &amp; <I>d</I>8 &amp; <I>d</I>9</DIV><P><tex2html_verbatim_mark></P><P></LI><LI>Bob keeps <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> secret and follows Alice's instructions to use matrix multiplication to compute, for each triple <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Av</I> = <I>w</I> = (<I>c</I>1, <I>c</I>2, <I>c</I>3)</SPAN> <tex2html_verbatim_mark> reducing <SPAN CLASS="MATH">mod 17</SPAN> <tex2html_verbatim_mark> each entry of <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> so that these are in the range <SPAN CLASS="MATH">0, 1,..., 16</SPAN> <tex2html_verbatim_mark>. For example, for the matrix <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I> = <IMG WIDTH="4" HEIGHT="31" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2380img1.png ALT="$\displaystyle \pmatrix$">1 &amp; 2 &amp; 53 &amp; 4 &amp; 11 &amp; 2 &amp; 1</DIV><P><tex2html_verbatim_mark></P>and the triple <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> in step 3 the encrypted triple would be (8, 1, 14).<P></LI><LI>Alice knows the matrix <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and knows how to decrypt a sequence of triples to get Bob's original ASCII message. (This is not a public key method, since <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, supplied by Alice, must be kept secret by Bob.) </LI></OL><P>Your job is to program this decryption, given the matrix A and the sequence of triples from Bob. (Alice's choice of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is guaranteed to enable a unique solution to the decryption process.) Bob's message starts as printable ASCII characters or spaces (this is guaranteed). You are required to recover and print Bob's ASCII message.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program will be a series of data sets. The first line of input will be an integer, denoting the total number of data sets to process. Following this line will be the data sets. Each data set contains the matrix "<SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>" <SPAN CLASS="MATH">(<I>d</I>1, <I>d</I>2,..., <I>d</I>9)</SPAN> <tex2html_verbatim_mark>, an integer, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, (the number of triples in Bob's message), and Bob's set of triples. Each data set is constructed thusly:<P><P><BR><SPAN CLASS="MATH"><I>d</I>1&nbsp;<I>d</I>2&nbsp;<I>d</I>3</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>d</I>4&nbsp;<I>d</I>5&nbsp;<I>d</I>6</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>d</I>7&nbsp;<I>d</I>8&nbsp;<I>d</I>9</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>t</I>1&nbsp;<I>t</I>2&nbsp;<I>t</I>3&nbsp;<I>t</I>4&nbsp;<I>t</I>5&nbsp;<I>t</I>6...</SPAN> <tex2html_verbatim_mark><P><P><BR>You are guaranteed at least 1 triple, and all triples in the data set will be on a single line.<P><P><BR><B>Note</B> that in the example below, matrix ``<SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>" is the same for each data set, but this will not necessarily be the case!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Bob's original ASCII message, one line per data set. (The original message will be less than 50 characters.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
1 2 5
3 4 1
1 2 1
2
7 8 4 9 16 13
1 2 5
3 4 1
1 2 1
3
7 8 4 9 16 13 16 3 16
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ME?
ME?M
</PRE><P>
______________________________________________________
2381||||||false||||||
<P>Write a program that, given an <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> matrix of characters, determines the number of non-trivial single-character filled ``standard" triangles in that matrix.<P><P><BR>A ``standard" triangle is an isosceles right triangle, with either:<P><P><BR>a) the legs aligned along any two dimensions of the matrix, for example:<P><P><BR><PRE>
          A           BBB
          AA          BB
          AAA         B
</PRE><P><P><BR>b) the hypotenuse aligned along any one dimension of the matrix, for example:<P><P><BR><PRE>
                    B
          A        BB
         AAA      BBB
        AAAAA      BB
                    B
</PRE><P><P><BR>(These don't look like right triangles, because the font isn't perfectly square, but they are in terms of the matrix).<P><P><BR>No other triangles are counted.<P><P><BR>A non-trivial triangle must contain at least 3 letters (a single letter is a trivial triangle).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input for your program will be a sequence of matrices. Each matrix will start with a dimension (<SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>) that will be less than twenty, followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> rows of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> upper-case letters. The input ends with a single zero (<TT>0</TT>) as the dimension.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each matrix, you should print the total number of non-trivial right triangles in parentheses, followed by the number of non-trivial triangles for each character in the matrix.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
AAB
ABB
BBB
4
AABB
ABBB
BBBB
BBBB
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
(10) 1 A 9 B 
(51) 1 A 50 B
</PRE><P>
______________________________________________________
2382||||||false||||||
<P>You are working for the Department of Transportation (DOT) in road repair. When a road is closed for repairs, the public would like the marked detour to be the <SPAN CLASS="textit">shortest</SPAN> available combination of roads to travel from one end of the closed road to the other.<P>To simplify the data, we will only consider roads between cities/towns/villages/..., rather than trying to give unique identifiers to crossroads that do not have such names.<P>After your program has read in the road data set, it will read in a series of town name pairs that mark the roads to be closed. Your program is to find the <SPAN CLASS="textit">shortest</SPAN> detour between each of the two towns, and specify it by listing in order the towns along the detour - you may use either of the two towns as the starting point - and then list the towns along the path to the ending point. It is understood that there is a road between each pair of towns in your listing. At that point, list also the total length of the detour.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number of towns (an integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>) in the data set. The rest of the first line is to be discarded (there may be additional notation text)<P>The next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> records contain the names of the towns, each on a separate line. They may or may not contain embedded blanks in their names (for instance, <TT>Coeur d'Alene</TT> and <TT>Wilbur</TT>).<P>Subsequent lines contain three items that represent the roads (whitespace delimited):<P><OL><LI>The town at one end of the road </LI><LI>The town at the other end of the road </LI><LI>The length of the road connecting those two towns. </LI></OL><P>If the name of either town contains whitespace, it will be enclosed in double quote marks. (See sample data)<P>The end of road information is marked by this record: `<TT>EOD EOD 0</TT>'<P>Finally, there are a series of town pairs (whitespace delimited). These each represent a road to be closed for repairs, and consequently, two towns between which you must find the shortest path. Again, should the town names contain whitespace, they will be enclosed in double quotes. This portion of the data set is terminated by this town pair: `<TT>EOD EOD</TT>'<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>On one line, list all of the towns along the detour, including both end-point towns. The list must begin with the first town displayed in the input.<P>On a separate line following the detour path, give the length of the detour.<P>Follow this with a blank line.<P>Should your program encounter a city that is not in the list of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> cities, either in the list of roads or in the road-closure pairs, display a single line stating `<TT><SPAN CLASS="MATH"><I>CityName</I></SPAN> <tex2html_verbatim_mark> is not a recognized town.</TT>' If the unrecognized city is the first of that record, do not process the rest of the record.<P>Follow this with a blank line.<P>Should a road-closure pair contain recognized cities, but cities with no direct road between them, display a line stating: `<TT>There is no road directly from <SPAN CLASS="MATH"><I>CityName</I>1</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>CityName</I>2</SPAN> <tex2html_verbatim_mark>.</TT>' (City names may be in any order in this statement.)<P>Follow this with a blank line.<p>There will only be one valid solution for each test.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8
Connell
Coulee City
Davenport
George
Moses Lake
Ritzville
Sprague
Wilbur

Connell "Moses Lake"        46
Connell Ritzville           45
Connell Wilbur              99
"Coulee City" George        55
"Coulee City" "Moses Lake"  52
"Coulee City" Wilbur        35
Davenport Sprague           38
Davenport Wilbur            32
George "Moses Lake"         31
"Moses Lake" Ritzville      42
Ritzville Sprague           23

EOD EOD 0

"Coulee City"  "Moses Lake"
George "Moses Lake"
Seattle Spokane

EOD EOD
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Coulee City George Moses Lake
Total distance: 86 miles

George Coulee City Moses Lake
Total distance: 107 miles

Seattle is not a recognized town.

</PRE><P>
______________________________________________________
2383||||||false||||||
<P>
In June the IRS notified taxpayers that the United States Congress passed and President George "W." Bush signed into law the Economic Growth and Tax Relief Reconciliation Act of 2001. As part of the immediate relief, taxpayers would receive a check, the amount of which was based on Information submitted on their 2000 federal tax return. The notification described how the check amount was calculated, reproduced here in Table 1. Distribution of the checks was based on the schedule of Table 2.

<P>
As a new employee at the Department of the Treasury, you have been tasked with developing the program to determine the value of each taxpayer's check and to determine how much is to be sent out each applicable week.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Table 1.Refund Amount</SPAN>

<P>

<P>
<BR>

<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=JUSTIFY WIDTH=".5in"><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<B>If your filing status is:</B> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> <B>Then:</B></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Single or Married Filing Separately </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> The amount of your check will be the lesser of:</TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> $300, </TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 5% of your taxable income, </TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> or your income tax liability </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Head of Household </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> The amount of your check will be the lesser of:</TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> $500, </TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 5% of your taxable income, </TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> or your income tax liability </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Married Filing Jointly or Qualifying Widow(er) </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> The amount of your check will be the lesser of:</TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  $600, </TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 5% of your taxable income, </TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> or your income tax liability  </TD></TR>
</TBODY>
</TABLE>

<P>

<P><P>
<BR>

<SPAN  CLASS="textbf">Table 2.  Distribution Dates</SPAN>

<P>

<P>
<BR>

<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
If the last two digits of your Social Security  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
You should receive your refund the week of: </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Number are: </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>00 - 09  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   July 23 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
10 - 19  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   July 30 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
20 - 29	 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   August 6 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
30 - 39  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   August 13 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
40 - 49  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   August 20 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
50 - 59  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   August 27 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
60 - 69  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   September 3 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
70 - 79	 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   September 10 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
80 - 89  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   September 17 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
90 - 99  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   September 24 </TD></TR>
</TBODY>
</TABLE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to your program is a series of lines, one line per taxpayer, consisting of Social Security Number, filing status, taxable income, and tax liability, each separated by single spaces.  The format for the Social Security Number is <!-- MATH
 $\#\#\#-\#\#-\#\#\#\#$
 -->
<SPAN CLASS="MATH">### - ## - ####</SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH">#</SPAN>
<tex2html_verbatim_mark> is a decimal digit, 0-9.

<P>

<P>
<BR>
The filing status is a single digit,

<P>

<P>
<BR>
<TABLE COLS=2 RULES=GROUPS>
<COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
1 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Single </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
2 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Married Filing Jointly </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
3 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Married Filing Separately </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
4 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Head of Household </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
5 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Qualifying Widow(er) </TD></TR>
</TABLE>

<P>

<P>
<BR>
Taxable income and tax liability are whole integer dollars. Input is terminated by a Social Security Number consisting of all zeros.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each taxpayer, output a summary line reporting the following:

<P>

<UL>
<LI>Social Security Number (exactly as input)  
</LI>
<LI>two spaces 
</LI>
<LI>a dollar sign (<TT>$</TT>) and the check amount, left justified with no leading zeros as: dollars, a decimal point, and two digits of cents 
</LI>
</UL>

<P>
Then, for each week for which checks are to be distributed, output a summary line reporting the following:

<P>

<UL>
<LI>number of checks to be distributed that week (no leading space)
</LI>
<LI>two spaces
</LI>
<LI>a dollar sign (<TT>$</TT>) and the week's total distributed amount, left justified with no leading zeros, as: dollars, a 
</LI>
<LI>decimal point and two digits of cents
</LI>
<LI>one space
</LI>
<LI>the week exactly as listed in Table 2
</LI>
</UL>

<P>

<P>
<BR>
List the weeks in the same order as Table 2.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
123-45-0001 1 40100 8200
890-12-3456 4 98910 24182
123-45-0002 4 6000 904
000-00-0000
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
123-45-0001  $300.00
890-12-3456  $500.00
123-45-0002  $300.00
2  $600.00 July 23
1  $500.00 August 27
</PRE> 

<P>

______________________________________________________
2384||||||false||||||
<P>Swamp County Cable, which has a cable modem ISP operation, wants to get an idea of how often its customers are getting probed or attacked by hackers or worms. To get a handle on this, it has reserved a part of its IP address space, which has never been assigned to anyone, to watch in detail.<P>Your job is to convert the router accounting summary records for these addresses into an hour-by-hour count of attacks.<P><P><BR>Here are some sample accounting records:<P><PRE>
0830.19:29:57.65    61.121.70.13    2328    64.12.197.2      80    6    171
0830.19:30:40.709  131.91.143.40     3191 64.12.197.145    80    6      3
0830.19:31:21.629   200.56.110.205    3043 64.12.197.189     80    6      1
0830.19:30:40.705  131.91.143.40     3191 64.12.197.145     80    6    168
</PRE><P><P><BR>The fields are:<P><P><BR><TABLE COLS=3><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN ID="txt52">Field Number</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN ID="txt53">Contents</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN ID="txt54">Format</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>date-time</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>mmdd.hh:mm:sec</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>source IP address</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>dotted decimal number</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>source port</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>decimal number [0..65535]</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>destination IP address</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>dotted decimal number</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>destination port</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>decimal number [0..65535]</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>protocol</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>decimal number [0..255]</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>number of packets</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>decimal number [1..65535]</TD></TR></TABLE><P><P><BR>The fields are separated by one or more blanks.<P><P><BR>A dotted decimal number is a 32 bit value, high order byte first, with a decimal representation of each 8-bit byte [0..255], each separated by a period (.). For example, 1.2.255.15 is 0102FF0F in hexadecimal.<P>The date-time field consists of a 2 digit month [01..12], a 2 digit day [01..31], a period (.), a 2 digit hour [00..23], a colon (:), a 2 digit minute [00-59], a colon (:), and a seconds field [0..59.999].<P>What is of interest is the number of unique source IP addresses seen in each hour. An hour lasts from, for example, 01:00:0 until 01:59:59.999. Of course during some hours, no entries may appear if there is a major outage or if no attacks occur during that hour. In this case, don't print anything for that hour.<P>The records are almost sorted by the date-time field. A record will never be more than 5 minutes earlier than the latest record seen before.<P>From time to time there are attacks with forged source IP addresses that will result in thousands of unique source addresses in any given hour. If the count of unique source addresses exceeds 500 in any given hour, you will just indicate that it is greater than 500, rather than the exact count.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input is a series of test cases. Each test case consists of accounting records, each at most 100 characters in length. Each test case is ended by a blank line or end of file. There will never be more than 10 days in a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output will be one line for each hour, with data from the earliest time to the latest time of any record in the test case. The line has 3 fields: <SPAN CLASS="MATH"><I>date</I></SPAN> <tex2html_verbatim_mark>; <SPAN CLASS="MATH"><I>hour</I></SPAN> <tex2html_verbatim_mark>; <SPAN CLASS="MATH"><I>count</I></SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="MATH"><I>date</I></SPAN> <tex2html_verbatim_mark> is of the form <SPAN CLASS="MATH"><I>dd</I> - <I>mmm</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>dd</I></SPAN> <tex2html_verbatim_mark> is the 2 digit day [01..31] with a leading `<TT>0</TT>' if necessary and <SPAN CLASS="MATH"><I>mmm</I></SPAN> <tex2html_verbatim_mark> is a 3 character lower case abbreviation for the month [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]. Put exactly one blank after the date field. The <SPAN CLASS="MATH"><I>hour</I></SPAN> <tex2html_verbatim_mark> is a 2 digit hour [00..23] with a leading `<TT>0</TT>' if necessary. Put exactly one blank after the hour field. The <SPAN CLASS="MATH"><I>count</I></SPAN> <tex2html_verbatim_mark> field is the count of unique source IP addresses seen during that hour, left adjusted, with no leading 0 or trailing spaces. If the count is greater than 500, print `<TT>&gt;500</TT>' for the count. Skip one line between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0830.19:29:57.65    61.121.70.13    2328    62.225.197.2      80    6    171
0830.19:30:40.709  131.91.143.40     3191 62.225.197.145    80    6      3
0830.19:31:21.629   200.56.110.205    3043 62.225.197.189     80    6      1
0830.19:30:40.705  131.91.143.40     3191 62.225.197.145     80    6    168

0830.19:30:40.709  131.91.143.40     3191 62.225.197.145    80    6      3
0830.19:31:21.629   200.56.110.205    3043 62.225.197.189     80    6      1
0830.19:30:40.705  131.91.143.40     3191 62.225.197.145     80    6    168

1231.22:30:40.709  131.91.143.40     3191 62.225.197.145    80    6      3
0101.00:00:00.629   200.56.110.205    3043 62.225.197.189     80    6      1
1231.23:59:40.705  131.91.143.40     3191 62.225.197.145     80    6    168
0101.02:04:00.629   200.56.110.205    3043 62.225.197.19     80    6      1
0101.02:01:05.0   200.56.110.205    3043 62.225.197.18     80    6      1
0101.02:08:13.48   200.14.13.220    3043 62.225.197.189     80    6      1

0723.00:20:26.526 62.14.165.180     2409 62.225.197.204     53   17     19
0723.00:26:53.143 64.174.246.90     3914 62.225.197.72      80    6      3
0723.00:26:53.147 64.174.246.90     3914 62.225.197.72      80    6    171
0723.01:38:00.477 213.174.70.225       0 62.225.197.15    2816    1      1
0723.01:38:00.473 213.174.70.225       0 62.225.197.15    2816    1    118
0723.01:42:15.386 210.77.158.1         0 62.225.197.0     2816    1      1
0723.01:49:58.120 172.185.107.238      1 62.225.197.113  62331    6     20
0723.01:49:58.120 172.185.107.238      1 62.225.197.113  62331    6      1
0723.01:51:02.169 210.184.94.33        1 62.225.197.29   50386    6      1
0723.01:51:02.173 210.184.94.33        1 62.225.197.29   50386    6    120
0723.01:56:05.938 213.174.70.225       0 62.225.197.15    2816    1    118
0723.01:56:05.938 213.174.70.225       0 62.225.197.15    2816    1      1
0723.02:03:57.652 172.176.163.61       1 62.225.197.33   19146    6      1
0723.02:03:57.656 172.176.163.61       1 62.225.197.33   19146    6     19
0723.02:25:35.771 172.185.107.238      1 62.225.197.111  21414    6     19
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
30-aug 19 3

30-aug 19 2

31-dec 22 1
31-dec 23 1
01-jan 00 1
01-jan 02 2

23-jul 00 2
23-jul 01 4
23-jul 02 2
</PRE><P>
______________________________________________________
2385||||||false||||||
<P>
When designing an HTML page for display on the World Wide Web, the length of time it takes to display the page in the user's browser is a major consideration. Studies show that most users will not wait more than 10 seconds for a page to download before ``clicking out", and costing the web site valuable ``eyeballs". 

<P>
Many current HTML editors have the ability to let the designer know page download time for the ``average" user. Your task is to write such a utility to compute download time, assuming a ``static" HTML document. (For our purposes, a static HTML document is one that contains no multimedia, Java applets or dynamically generated content. It consists of only HTML code and images.) Download time will be determined by the total size (in bytes) of all images to be displayed in the document, plus the document size (in bytes, 1 character = 1 byte), which is computed by its character count. This total number of bytes is used to determine the download time, assuming 1000 bytes = 0.2 second. 

<P>

<P>
<BR>
For example, given a simple HTML document such as this:

<P>
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;ACM&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;IMG SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg&gt;&lt;BR&gt;
&lt;IMG SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE> 
and assuming the size of ``acm.jpg" is 10k bytes and ``contest.jpg" is 5k bytes we can compute the download time as follows:

<P>
<DL COMPACT>
<DT>-</DT>
<DD>Number of bytes in document: 112 (assume there is a CR/LF character at the end of EACH line)
</DD>
<DT>-</DT>
<DD>Number of bytes in images: 15000
</DD>
<DT>-</DT>
<DD>TOTAL SIZE: 15112 bytes
</DD>
<DT>-</DT>
<DD>DOWNLOAD TIME: 3.02 seconds
</DD>
</DL>

<P>

<P>
<BR>
For this problem, we are going to add an attribute to the <TT>IMG</TT> tag, called ``<TT>size</TT>". This attribute will have an integer value, denoting the image file size in bytes. For example, the sample above would look like this:

<P>
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;ACM&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;IMG SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg size="10000"&gt;&lt;BR&gt;
&lt;IMG SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg size="5000"&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE> 

<P>
Note that if an image is used more than once on the page, it is only counted once in determining download time, since it won't have to be downloaded again, once it's been downloaded originally. (Images with the same file name, but in different directories are NOT the same image. Image names ARE the same if a case-insensitive string compare declares them to be equal.)

<P>
Note that HTML tags are NOT case sensitive.

<P>
Note that other HTML tags besides the <TT>&lt;IMG&gt;</TT> tag can contain the ``<TT>SRC=</TT>" attribute and the ``<TT>size=</TT>" attribute.

<P>
Note also that an <TT>&lt;IMG&gt;</TT> tag can contain the ``SRC="http://livearchive.onlinejudge.org/external/23/acm.jpgMATH">&lt;</SPAN>
<tex2html_verbatim_mark>IMG<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> tags:

<P>
<PRE>
&lt;IMG SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg size="10000"&gt;
&lt;img BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg size="5000"&gt;
&lt;Img HEIGHT="42" WIDTH="42" size="5000" 
SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg&gt;
</PRE> 

<P>
(You may assume that the path/image name and size value are surrounded by double quotes.)

<P>
Specifically, you may assume that the only spaces in a tag will be either between <!-- MATH
 $name=value$
 -->
<SPAN CLASS="MATH"><I>name</I> = <I>value</I></SPAN>
<tex2html_verbatim_mark> pairs or embedded in quoted strings. More specifically, there will be no spaces between the <TT>&lt;</TT> and tag name, around the equal signs, before the <TT>&gt;</TT>, or anywhere else not already specified. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input for this problem will begin with a single integer on a line, denoting the number of HTML files to process. Following this line will be a series of document listings. Each HTML document listing will begin with <TT>&lt;HTML&gt;</TT> tag and end with <TT>&lt;/HTML&gt;</TT> tag (not case-sensitive!), and will contain 0 or more image tags. There will be no blank lines within the HTML document. The ending <TT>&lt;/HTML&gt;</TT> tag for each test document listing will be the last item on a line. Image file names (including the path) will not exceed 80 characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output consists of a series of lines, one per HTML document, listing the time, in seconds, to download that document, rounded to 2 decimal places.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;ACM Contest&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;HR&gt;&lt;H3&gt;IBM Sponsors ACM-ICPC!&lt;/h3&gt;
&lt;IMG SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg size="5000"&gt;&lt;BR&gt;
&lt;p&gt;A new paragraph&lt;/p&gt;
&lt;center&gt;&lt;img BORDER="0" size="1000" SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg&gt;&lt;/center&gt;
&amp;nbsp;&lt;img SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg size="50000"&gt;
&lt;/BODY&gt;
&lt;/html&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Pacific NW Region&lt;/TITLE&gt;
&lt;script language="JavaScript" SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg&gt;&lt;/script&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;b&gt;PacNW Rocks!&lt;/b&gt;&lt;br&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;Td&gt;&lt;IMG size="5000" SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;A new paragraph&lt;/p&gt;&lt;/td&gt;
&lt;td align=center&gt;&lt;img BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg size="7000"&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;br&gt;&lt;img SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg size="5000"&gt;&lt;br&gt;&lt;img size="15000" SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg&gt;
&lt;br&gt;&lt;img SRC="http://livearchive.onlinejudge.org/external/23/acm.jpg size="5000"&gt;
&lt;h1&gt;Bye!&lt;/h1&gt;&lt;/BODY&gt;&lt;/HTML&gt;
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
11.26 seconds
6.50 seconds
</PRE> 

<P>

______________________________________________________
2386||||||false||||||
<P>Jane Paren, was sitting around the house one day thinking about a multiplication machine she wanted to design. Her machine would take an ordered sequence of variables or numbers, like this:<P><P><BR><SPAN CLASS="MATH"><I>X</I><SUB>1</SUB>, <I>X</I><SUB>2</SUB>, <I>X</I><SUB>3</SUB>, <I>X</I><SUB>4</SUB>,..., <I>X</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR>And then determine all possible ordered, multiplicative "groupings" of the objects like this:<P><P><BR><SPAN CLASS="MATH">(<I>X</I><SUB>1</SUB>(<I>X</I><SUB>2</SUB>(<I>X</I><SUB>3</SUB>(<I>X</I><SUB>4</SUB>(...(<I>X</I><SUB>N-1</SUB>*<I>X</I><SUB>N</SUB>)...)))))</SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2386img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2386img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2386img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2386img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2386img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2386img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH">(((...(((<I>X</I><SUB>1</SUB>*<I>X</I><SUB>2</SUB>)<I>X</I><SUB>3</SUB>)<I>X</I><SUB>4</SUB>)...)<I>X</I><SUB>N-1</SUB>)<I>X</I><SUB>N</SUB>)</SPAN> <tex2html_verbatim_mark><P><P><BR>Jane hypothesized that a machine could produce these different groupings by repeatedly dividing the main sequence into two parts starting on the left and working toward the right, and then treating each of these sub-sequences just like the main sequence was treated. The very first division into two sub-sequences is shown here:<P><P><BR><SPAN CLASS="MATH">((<I>X</I><SUB>1</SUB>)(<I>X</I><SUB>2</SUB>&nbsp;<I>X</I>3...<I>X</I><SUB>N-1</SUB>&nbsp;<I>X</I><SUB>N</SUB>))</SPAN> <tex2html_verbatim_mark><P><P><BR>Later in the sequence another division of the main sequence into two sub-sequences is shown below:<P><P><BR><SPAN CLASS="MATH">((<I>X</I><SUB>1</SUB>&nbsp;<I>X</I><SUB>2</SUB>&nbsp;<I>X</I><SUB>3</SUB>...<I>X</I><SUB>j-1</SUB>)(<I>X</I><SUB>j</SUB>...<I>X</I><SUB>N-1</SUB>&nbsp;<I>X</I><SUB>N</SUB>))</SPAN> <tex2html_verbatim_mark><P><P><BR>Both the left and right sequences must be subdivided from left to right just like the main sequence. You will help Jane Paren verify her hypothesis by writing a program that can group a sequence into a series of multiplications using parentheses. Your program will not perform the actual multiplications; it will only find and output all possible ordered parenthesized groupings in the order specified by Jane's hypothesis.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of multiple lines of variable names or numbers.<P>Each variable name or number will be separated from its neighbors by spaces.<p>The input line will be terminated by carriage-return/line-feed (standard end-of-line marker).<p>Ignore multiple blank lines in the input and treat them as a single blank line.<P>The program will stop reading input when it reaches the end of the file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input line, the program will generate all possible multiplicative groupings, keeping the numbers or variables from the input line in their original order. <SPAN CLASS="textbf">The order in which the multiplicative groupings are output <SPAN ID="txt78">does</SPAN> matter!</SPAN><P><P><BR>Subsequences consisting of just one element will not have its' own set of parenthesis.<P>Subsequences consisting of just two elements are separated with the multiplication symbol * and have a set of parenthesis around them in the output, e.g. <SPAN CLASS="MATH">(<I>x</I>*<I>y</I>)</SPAN> <tex2html_verbatim_mark>.<P>For each element of the set of outputs calculated from a given input line, the output will display the line from which the group originated and the number within the group.<P><P><BR>Outputs must conform to the same formatting as the sample output, including spaces!<P>Separate each set of output groupings by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 2 
North South East West
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Input Line 1 Group 1. (1*2)

Input Line 2 Group 1. (North(South(East*West)))
Input Line 2 Group 2. (North((South*East)West))
Input Line 2 Group 3. ((North*South)(East*West))
Input Line 2 Group 4. ((North(South*East))West)
Input Line 2 Group 5. (((North*South)East)West)
</PRE>
______________________________________________________
2387||||||false||||||
<P>With the large amount of genomic DNA sequence data being made available, it is becoming more important to find genes (parts of the genomic DNA which are responsible for the synthesis of proteins) in these sequences. It is known that for eukaryotes (in contrast to prokaryotes) the process is more complicated, because of the presence of <EM>junk DNA</EM> that interrupts the coding regions of genes in the genomic sequence. That is, a gene is composed by several pieces (called <EM>exons</EM>) of coding regions. It is known that the order of the exons is maintained in the protein synthesis process, but the number of exons and their lengths can be arbitrary.<P>Most gene finding algorithms have two steps: in the first they search for possible exons; in the second they try to assemble a largest possible gene, by finding a chain with the largest possible number of exons. This chain must obey the order in which the exons appear in the genomic sequence. We say that exon <SPAN CLASS="MATH"><I>i</I></SPAN> <EM>appears</EM> before exon <SPAN CLASS="MATH"><I>j</I></SPAN> if the end of <SPAN CLASS="MATH"><I>i</I></SPAN> precedes the beginning of <SPAN CLASS="MATH"><I>j</I></SPAN>.<P>The objective of this problem is, given a set of possible exons, to find the chain with the largest possible number of exons that could be assembled to generate a gene.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Several input instances are given. Each instance begins with the number <!-- MATH
 $0 < n < 1000$
 --><SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 1000</SPAN> of possible exons in the sequence. Then, each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains a pair of integer numbers that represent the position in which the exon starts and ends in the genomic sequence. You can suppose that the genomic sequence has at most 50000 basis. The input ends with a line with a single `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input instance your program should print in one line the chain with the largest possible number of exons, by enumerating the exons in the chain. The exons must follow the order of appearance (as defined in the statement of the problem). If there is more than one chain with the same number of exons, your program can print anyone of them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
6
340 500
220 470
100 300
880 943
525 556
612 776
3
705 773
124 337
453 665
0
2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
3 1 5 6 4
2 3 1
</PRE><P>
______________________________________________________
2388||||||false||||||
<P>
The population of the small village of Zombiniville is famous for its genetic characteristics.
The inhabitants present only 5 variations on 4 aspects (hair, eyes, nose and feet).
Two research companies,
Gentec and Genco, tabulated an extensive series of data on the inhabitants of Zombiniville.

<P>
Both companies used symbols for the 4 aspects and its variations.  Gentec used the groups
(A,B,C,D,E), (F,G,H,I,J), (K,L,M,N,O) and (P,Q,R,S,T), while Genco used (a,b,c,d,e),
(f,g,h,i,j),
(k,l,m,n,o) and (p,q,r,s,t), but not necessarily for the same groups or in the same
order inside
a group. For example, the group (A,B,C,D,E) from Gentec could correspond to (r,p,t,s,q) from
Genco. In other words, ``A'' corresponds to ``r'', ``B'' corresponds to ``p'', ``C''
to ``t'', ``D'' to ``s'' and ``E'' to ``q''.

<P>
Recently the two companies reached an agreement and decided to exchange their research
results.  However, a group of international activists against human genetic research
invaded the offices of the two companies and destroyed part of the reports - exactly
the interpretation of the codes.

<P>
You and your team were hired to develop a program to establish a relationship among the two
notations. As the companies don't want to waste its capital at random, they prepared a
battery of tests for your program, before buying it.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each test case has the following data.

<P>

<OL>
<LI>A line with <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of individuals in the test case. You can assume
that <!-- MATH
 $0 < n < 64$
 -->
<SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 64</SPAN>.
</LI>
<LI>A line with <SPAN CLASS="MATH"><I>n</I></SPAN> descriptions (one for each individual) in the Gentec notation.
Each notation is constituted by 4 characters, the first in the interval A-E, the second
in the interval F-J, the third in K-O and the last in P-T. A notation is separated
from the following by exactly one blank space.
</LI>
<LI>A line with <SPAN CLASS="MATH"><I>n</I></SPAN> descriptions (for the same individuals, in the same order) in
the Genco notation.
Each notation is also constituted by 4 characters, the first in the interval a-e,
the second in
the interval f-j, the third in k-o and the last in p-t. Again, each notation is
separated from the following by exactly one blank space.
</LI>
</OL>

<P>
After a test case, a new one begins. The end of test cases is indicated by <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>.

<P>
You can assume that the test cases are well formed. There are no errors in the input data.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, an association table should be supplied, as in the example below.
Note that the
pairs are printed in alphabetical order of the capital letters, tive per line.
Obviously, Gentec and
Genco are testing your program, and they don't supply their real data. You can
assume that the
association table is changed between test cases. You should print only the associations
that are
unequivocally determined. If there are two or more possibilities for a given letter,
you should print a question mark after this letter.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
AGNP AFNQ BHMP AFNP AGKQ
egmr dgnr ehlp egnr dgms
12
AGNP AFNP BHMP AFNT EFKR CHKQ AGNP AILR DHKT BHKT EIKP BGOR
agnp afnp bhmp afnt efkr chkq agnp ailr dhkt bhkt eikp bgor
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Test #1:
A-g B-h C-? D-? E-?
F-n G-m H-l I-? J-?
K-s L-? M-p N-r O-?
P-e Q-d R-? S-? T-?
Test #2:
A-a B-b C-c D-d E-e
F-f G-g H-h I-i J-j
K-k L-l M-m N-n O-o
P-p Q-q R-r S-s T-t
</PRE>

<P>

______________________________________________________
2389||||||false||||||
<P>We say that a number is a <B>palindrom</B> if it is the same when read from left to right or from right to left. For example, the number 75457 is a palindrom.<P>Of course, the property depends on the basis in which the number is represented. The number 17 is not a palindrom in base 10, but its representation in base 2 (10001) is a palindrom.<P>The objective of this problem is to verify if a set of given numbers are palindroms in any basis from 2 to 16.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Several integer numbers comprise the input. Each number <!-- MATH
 $0 < n < 50000$
 --><SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 50000</SPAN> is given in decimal basis in a separate line. The input ends with a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program must print the message `<TT>Number <SPAN CLASS="MATH"><I>i</I></SPAN> is palindrom in basis</TT>' where <SPAN CLASS="MATH"><I>i</I></SPAN> is the given number, followed by the basis where the representation of the number is a palindrom. The leftmost digit of a number in any basis must be nonzero.<P>If the number is not a palindrom in any basis between 2 and 16, your program must print the message `<TT>Number <SPAN CLASS="MATH"><I>i</I></SPAN> is not palindrom</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
17
19
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Number 17 is palindrom in basis 2 4 16
Number 19 is not palindrom
</PRE><P>
______________________________________________________
2390||||||false||||||
<P>Your task here is to write a program to aid in the assembly of a jigsaw puzzle by a robot.<P>The puzzle is a rectangular array of flat four-sided pieces. Except for the outer borders, each side of each piece is shaped in such a way that it matches one side of exactly one other piece.<P>When the puzzle is presented to the robot, all the pieces are scrambled and spread out on a table, face up, in front ofthe robot's camera eye. Let's assume that someone already wrote software that does the image processing part of the problem. tind the puzzle pieces in the image captured by the camera, break the outline of each piece into its four sides, and tind pairs of sides that have the same shape. Your task is to program the next step - namely, decide where in the grid each piece should be placed, and how it should be rotated.<P>The image-processing software assigns, to each piece that the robot sees on the table, a unique <EM>piece number</EM> between 0 and <SPAN CLASS="MATH"><I>N</I> - 1</SPAN>, in some arbitrary order. It also labels the sides of the piece with integers 0, 1, 2, 3, in counterclockwise order, starting from an arbitrary side.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2390a.gif ALT="\epsfbox{p2390a.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several consecutive instances of the problem. Each instance consists of: one line contaning two integers <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $0 < N < 500$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 500</SPAN> (the number of pieces) and <SPAN CLASS="MATH"><I>K</I></SPAN>; then come <SPAN CLASS="MATH"><I>K</I></SPAN> lines, one for each pair of similar sides that were found among all pieces seen by the robot, in arbitrary order. Each of these lines contains four integers like this:<P><PRE>
17 2   23 1
</PRE><P>This line says that side number 2 of piece number 17 fits side 1 of piece 23. Therefore, in the assembled puzzle, pieces 17 and 23 should be neighbors, in one of these four positions.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2390a.gif ALT="\epsfbox{p2390b.eps}"></DIV><P>You can assume that the input data includes enough information to assemble the puzzle completely. Note, however, that it may not include all pairs of matching sides, and it may include some redundant pairs that could be deduced from the previous ones. The end of the input is marked by a line containing a single `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For the <SPAN CLASS="MATH"><I>i</I></SPAN>-th instance of the input file you should write the line `<TT>Instance <SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>', followed by a sequence of <SPAN CLASS="MATH"><I>N</I></SPAN> lines, one for each piece, containing four integers such as `<code>6 9 17 2</code>'. This line says that piece number 17 should be placed in row 6 and column 9 of the grid, turned so that its side number 2 lies at the bottom. (By convention, rows are numbered from top to bottom, and columns from left to right, starting with 0.)<P>Note also that any solution can be turned by multiples of 90 degrees to give three other valid solutions. In order to make the output unique, you must turn your solution around so that piece number 0 has its side number 0 at the bottom (turned towards the robot). In any case, the upper left corner of the assembled puzzle should be at position [0, 0].<P>The lines of the output should be presented in lexicographic order of the rows and columns, as shown in the sample output and using the same format. Assume that the puzzle is completely filled by the pieces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
12   13
 0 0   5 0
 0 2   6 2
 1 2  11 0
 1 3   9 2
 2 0   5 1
 2 1   4 2
 3 0  10 3
 3 3   8 0
 4 0   7 1
 4 1  11 1
 6 1   7 2
 8 2   9 3
10 0  11 2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Instance 1:
    0    0     3 3
    0    1    10 0
    0    2     7 1
    0    3     6 2
    1    0     8 2
    1    1    11 0
    1    2     4 2
    1    3     0 0
    2    0     9 1
    2    1     1 0
    2    2     2 3
    2    3     5 2
</PRE><P><P><P><BR><DIV ALIGN="CENTER">This represents the solution above</DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/p2390a.gif ALT="\epsfbox{p2390c.eps}"></DIV><P>
______________________________________________________
2391||||||false||||||
<P>Some algorithms on image processing are more efficient when applied to small patterns, such as <SPAN CLASS="MATH">3&#215;3</SPAN> matrices. One way of decomposing a given figure into small components is to apply the operation of direct subtraction, which is described in the following.<P>Given a 0/1 matrix <SPAN CLASS="MATH"><I>A</I><SUB>m&#215;m</SUB></SPAN> and a 0/1 matrix <SPAN CLASS="MATH"><I>B</I><SUB>3&#215;3</SUB></SPAN> we define the matrix <SPAN CLASS="MATH"><I>C</I><SUB>(m - 2)&#215;(m - 2)</SUB> = <I>A</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2391img1.gif ALT="$ \ominus$"> <I>B</I></SPAN> obtained in the following way:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>c</I><SUB>ij</SUB> = <IMG WIDTH="560" HEIGHT="74" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2391img1.gif ALT="$\displaystyle \cases{1 &amp; if matrix $B$ can be subtracted from the $3 \times 3$ ...
...red in $(i + 1,j + 1)$ without generating negative numbers \cr
0 &amp; otherwise}
$"></DIV><P></P><P>We call matrix <SPAN CLASS="MATH"><I>C</I></SPAN> a <B>valid direct subtraction</B> of <SPAN CLASS="MATH"><I>B</I></SPAN> from <SPAN CLASS="MATH"><I>A</I></SPAN> if for every <SPAN CLASS="MATH"><I>a</I><SUB>ij</SUB> = 1</SPAN> in matrix <SPAN CLASS="MATH"><I>A</I></SPAN>, there is a 1 in matrix <SPAN CLASS="MATH"><I>C</I></SPAN> which results from a subtraction of <SPAN CLASS="MATH"><I>B</I></SPAN> from a submatrix of <SPAN CLASS="MATH"><I>A</I></SPAN> containing <SPAN CLASS="MATH"><I>a</I><SUB>ij</SUB></SPAN> and the element of <SPAN CLASS="MATH"><I>B</I></SPAN> which is subtracted from <SPAN CLASS="MATH"><I>a</I><SUB>ij</SUB></SPAN> is equal to 1.<P>Example. Given matrices <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN>,<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I> = <IMG WIDTH="4" HEIGHT="30" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2391img1.gif ALT="$\displaystyle \pmatrix$">0 &amp; 1 &amp; 0 &amp; 1 &amp; 01 &amp; 1 &amp; 1 &amp; 1 &amp; 10 &amp; 1 &amp; 1 &amp; 1 &amp; 10 &amp; 0 &amp; 1 &amp; 1 &amp; 10 &amp; 0 &amp; 0 &amp; 1 &amp; 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>B</I> = <IMG WIDTH="4" HEIGHT="30" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2391img1.gif ALT="$\displaystyle \pmatrix$">0 &amp; 1 &amp; 01 &amp; 1 &amp; 10 &amp; 1 &amp; 0</DIV><P></P>the direct subtraction <SPAN CLASS="MATH"><I>C</I> = <I>A</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2391img1.gif ALT="$ \ominus$"> <I>B</I></SPAN> is <B>valid</B> and is given by<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>C</I> = <IMG WIDTH="4" HEIGHT="30" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2391img1.gif ALT="$\displaystyle \pmatrix$">1 &amp; 0 &amp; 10 &amp; 1 &amp; 10 &amp; 0 &amp; 1</DIV><P></P><P>Now, given matrices <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN>,<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I> = <IMG WIDTH="4" HEIGHT="30" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2391img1.gif ALT="$\displaystyle \pmatrix$">0 &amp; 0 &amp; 0 &amp; 1 &amp; 01 &amp; 0 &amp; 1 &amp; 1 &amp; 10 &amp; 1 &amp; 0 &amp; 1 &amp; 10 &amp; 0 &amp; 1 &amp; 1 &amp; 10 &amp; 0 &amp; 0 &amp; 1 &amp; 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>B</I> = <IMG WIDTH="4" HEIGHT="30" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2391img1.gif ALT="$\displaystyle \pmatrix$">0 &amp; 1 &amp; 01 &amp; 0 &amp; 10 &amp; 1 &amp; 1</DIV><P></P>the direct subtraction <SPAN CLASS="MATH"><I>C</I> = <I>A</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2391img1.gif ALT="$ \ominus$"> <I>B</I></SPAN> is <B>not valid</B> and is given by<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>C</I> = <IMG WIDTH="4" HEIGHT="30" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2391img1.gif ALT="$\displaystyle \pmatrix$">0 &amp; 0 &amp; 10 &amp; 1 &amp; 00 &amp; 0 &amp; 0</DIV><P></P><P>The objective of this problem is to determine if a matrix <SPAN CLASS="MATH"><I>A</I></SPAN> can be transformed into a <SPAN CLASS="MATH">3&#215;3</SPAN> matrix through a sequence of valid direct subtractions of, possibly different, <SPAN CLASS="MATH">3&#215;3</SPAN> matrices.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Several input instances are given. Each instance begins with the dimension <!-- MATH
 $0 < n < 20$
 --><SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 20</SPAN> of the matrix to be decomposed. The following <SPAN CLASS="MATH"><I>n</I></SPAN> lines describe the rows of that matrix, as a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> <TT>0</TT>'s and <TT>1</TT>'s, with no blank spaces between them. The input ends with a line with a single `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input instance your program must identify it by printing `<TT>Instance <SPAN CLASS="MATH"><I>i</I></SPAN></TT>' (where <SPAN CLASS="MATH"><I>i</I></SPAN> is the number of the instance) and, in the next line a message `<TT>Yes</TT>' or `<TT>No</TT>' for the case, resp. that the matrix is (resp. is not) decomposable.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5
01010
11111
01111
00111
00010
5
10001
00000
00100
00000
10001
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Instance 1
Yes
Instance 2
No
</PRE><P>
______________________________________________________
2392||||||false||||||
<P>Several drawing applications allow us to draw polygons and almost all ofthem allow us to fill them with some color. The task of filling a polygon reduces to knowing which points are inside it, so programmers have to colour only those points.<P>You're expected to write a program which tells us if a given point lies inside a given polygon described by the coordinates of its vertices. You can assume that if a point is in the border of the polygon, then it is in fact inside the polygon.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file may contain several instances of the problem. Each instance consists of: (i) one line containing integers <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $0 < N < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 100</SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN>, respectively the number of vertices of the polygon and the number of points to be tested. (ii) <SPAN CLASS="MATH"><I>N</I></SPAN> lines, each containing a pair of integers describing the coordinates of the polygon's vertices; (iii) <SPAN CLASS="MATH"><I>M</I></SPAN> lines, each containing a pair of integer coordinates of the points which will be tested for ``withinness'' in the polygon.<P>You may assume that: the vertices are all distinct; consecutive vertices in the input file are adjacent in the polygon; the last vertex is adjacent to the first one; and the resulting polygon is simple, that is, every vertex is incident with exactly two edges and two edges only intersect at their common end point. The last instance is followed by a line with a `<TT>0</TT>' (zero).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For the <SPAN CLASS="MATH"><I>i</I></SPAN>-th instance in the input file, you have to write one line in the output file with the phrase `<TT>Problem <SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>', followed by several lines, one for each point tested, in the order they appear in the input tile. Each of these lines should read `<TT>Within</TT>' or `<TT>Outside</TT>', depending on the outcome of the test. The output of two consecutive instances should be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 1
0 0
0 5
5 0
10 2
3 2
4 4
3 1
1 2
1 3
2 2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Problem 1:
Outside

Problem 2:
Outside
Within
</PRE><P>
______________________________________________________
2393||||||false||||||
<P>To improve airline security, Swamp County Puddle Jumper Airlines has decided that all luggage loaded onto an airplane must be matched with a passenger on board. You will be given a list of all passengers who have boarded a flight and a list of the owners of every item of luggage being loaded. For each item of luggage, you need to say whether the owner is on the flight or not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of the two lists, separated by a single empty line. The first list will be the list of passengers who have boaTded the plane, and the second list will be the list of the owner of each item of luggage. Each name in either list will appear on a line by itself, family name first, with no leading spaces, followed by a comma, a single space, and then the given names, separated by single spaces, with no trailing spaces. All letters will be lower case. Due to the size of the airplanes in use, no more than 100 passengers will ever be boarded.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output consists of a single line for each item ofluggage, containing the text '<TT>OK</TT>' if the owner was among the passengers who boarded the plane or `<TT>WARNING: passenger not on board</TT>' if the owner is not on board.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
smith, robert samuel
ffellows, mary louise
harwell, herman allan edgar

ffellows, mary louise
jones, sally
ffellows, mary louise
smith, robert samuel
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
OK
WARNING*. passenger not on board
OK
OK
</PRE><P>
______________________________________________________
2394||||||false||||||
<P>Interval arithmetic is a field of math where in numbers, both constants and variables, are represented not as a single, exact value, but rather as a range or interval with lower and upper bounds. Under normal arithmetic, a scalar value represents a single point on the number line, such as 3.25. Under interval arithmetic, a scalar represents a segment of the number line, perhaps [3,5]. Exact values, when represented as intervals, have identical upper and lower limits.<P>Arithmetical operations on two intervals involve the pairing of every point in one interval with every point in the other interval and performing the desired operation on each pair of points. The set of all points resulting from the operation form an interval. For example, adding [3, 5] to [-10, 1] yields [-7, 6], the interval where in all possible pairings of the addition of points from [3, 5] and [-10, 1] must lie. You are to write a program that can interpret single-line expressions of scalar interval constants with unary minus and the four basic operations of addition, subtraction, multiplication, and division. An example of each operation is shown below.<P><P><BR>unary minus: <SPAN CLASS="MATH">- [- 3, 5] = [- 5, 3]</SPAN> <tex2html_verbatim_mark><P>addition: <SPAN CLASS="MATH">[3, 5] + [- 10, 1] = [- 7, 6]</SPAN> <tex2html_verbatim_mark><P>subtraction: <SPAN CLASS="MATH">[3, 5] - [- 10, 1] = [2, 15]</SPAN> <tex2html_verbatim_mark><P>multiplication: <SPAN CLASS="MATH">[3, 5] <TT>*</TT> [- 10, 1] = [- 50, 5]</SPAN> <tex2html_verbatim_mark><P>division: <SPAN CLASS="MATH">[3, 5]/[- 10, - 0.1] = [- 50, - 0.3]</SPAN> <tex2html_verbatim_mark><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to the program consists of one or more scalar intervals of the form [min,max] in infix expressions involving paTentheses, unary minus (-), and binary addition (+), subtraction (-) , multiplication (<SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark>), and division (/). Parentheses may be nested. Spaces may occur within the line, but never between the interval brackets `[min,max]', nor after a unary minus. Your program need not handle exponential (E-format) numbers. No line will be longer than 80 chaTacters. The standard rules of precedence (order of operations) apply; in decreasing precedence:<P><P><BR>() parentheses<P>- unary minus<P><SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark> / multiplication and division, left to right<P>+ - addition and subration, left to right<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line ofinput, produce a single line ofoutput that is the resulting interval, in the form [min,max], where <SPAN CLASS="MATH"><I>min</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2394img1.png ALT="$ \le$"><I>max</I></SPAN> <tex2html_verbatim_mark>. The numbers in the output should be printed with three digits after the decimal point, and there should be no spaces within the interval. For expressions involving division by an interval that contains 0, output the string `Division by zero' rather than an interval.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
    -[-3,5]
[3,5] + [-10,1]
[3,5]-[-10,1]
[3,5] * [-10,1]
( ([3,5] / [-10,-0.1]) / -[2,2])
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
[-5.000,3.000]
[-1.000,6.000]
[2.000,15.000]
[-50.000,5.000]
[0.150,25.000]
</PRE><P>
______________________________________________________
2395||||||false||||||

<P>
The eccentric sculptor Albrecht Caravaggio Mondrian has been inspired by the history of the computer to create works of art that he calls ``Jacquard circuits." Each of his works of art consists of a series of polygonal circuit boards (defined below), all having the same shape but at different scales, joined together with wire or string into a three-dimensional tiered structure. Figure 1 below shows an example with two levels and a pentagonal shape.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2395a.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2395a.jpg
 ALT="\epsfbox{p2395a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
A.C.M. (as he is known to his friends) bases his art upon the punched hole cards of the Jacquard loom (that were later adapted by Charles Babbage for his analytical engine) and upon the regular grid layout approach often used in circuit interfacing (for instance, Pin Grid Arrays). 

<P>
The circuit boards used in the sculptures are in the shapes of lattice polygons. A lattice polygon is defined as any closed, non-self-intersecting cycle of straight line segments that join points with integer coordinates, with no two consecutive line segments parallel. For any given lattice polygon <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>, there is a smallest lattice polygon with the same shape and orientation as <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> -- call this the <SPAN  CLASS="textit">origin</SPAN>. Smaller polygons of the same shape and orientation as <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> are called its predecessors and polygons larger than <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> are its successors. (See Figure 2 on the following page.) 

<P>
To build one of his sculptures, A.C.M. begins by randomly selecting <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lattice points and then drawing a pattern by connecting these points. (Note that not all of the <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> points are necessarily vertices of a lattice polygon. This may happen, for example, if three or more consecutive points are collinear.) Let <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> be the lattice polygon determined by the pattern. Then he determines the origin corresponding to <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>, selects the number of levels, <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark>, he wishes to use, and constructs the first <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> polygonal circuit boards in the series (that is, the origin and its first <SPAN CLASS="MATH"><I>M</I> - 1</SPAN>
<tex2html_verbatim_mark> successors). Each lattice point lying strictly within the boundary of any of these polygons is a hole where strings or wires meet. 

<P>
The hard part of creating the sculpture is tying together all the strings or wires that meet at a given hole. Furthermore, some of A.C.M.'s famous miniaturized sculptures, built using nano-engineering techniques, involve hundreds of thousands of levels. Mondrian would like a way to determine, given a polygonal shape and the number of levels, how many holes there will be in the final sculpture. You must write a program to help him. (For example, the sculpture in Figure 1 above has 15 holes.) Assume holes have zero diameter.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2395b.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2395a.jpg
 ALT="\epsfbox{p2395b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of one or more test cases. Each case begins with a line containing two positive integers <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(3 \le N \le 1000)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2395a.jpg
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2395a.jpg
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le M \le 1000000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2395a.jpg
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2395a.jpg
 ALT="$ \le$">1000000)</SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the number of lattice points Mondrian selected and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> is the number of levels in the completed sculpture. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines contains two integers <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(|x|, |y| \le 1000000)$
 -->
<SPAN CLASS="MATH">(| <I>x</I>|,| <I>y</I>|<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2395a.jpg
 ALT="$ \le$">1000000)</SPAN>
<tex2html_verbatim_mark> which denote the coordinates of one of Mondrian's points. Points are listed in either clockwise or counterclockwise order. 

<P>
The last test case is followed by a line containing two zeroes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print a line containing the test case number (beginning with 1) followed by the number of holes in an <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark>-level sculpture starting from the origin polygon of the given pattern. In no case will this value exceed the maximum possible value of a 64-bit signed integer.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 2 
0 0 
8 0 
12 4 
8 8 
0 8 
3 2 
-1 -1 
3 1 
5 -1 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 15 
Case 2: 2
</PRE> 

<P>

______________________________________________________
2396||||||false||||||
<P>You are at a LAN party where nobody has brought a switch big enough for everybody to plug into. Instead, you have built a complicated network by connecting multiple switches together. What is worse, the network cables are of dubious quality, and introduce delays into the network when packets must be retransmitted.<P>You are trying to determine whether the network problems will be serious enough to affect gameplay. Given a description of the network, determine the maximum delay between any two devices on the network.<P>The network consists of <SPAN CLASS="MATH"><I>N</I></SPAN> devices (computers or switches), connected by <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> cables. There is exactly one route from any device to any other device. The delay between two devices is the sum of the delays of the cables (assume that switching does not introduce any delay).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. The first line of each test case contains <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2396img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2396img1.png ALT="$ \le$">100000</SPAN>), the number of devices, which are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>. The next <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> lines describe the cables. Each line consists of three integers <SPAN CLASS="MATH"><I>A</I></SPAN>, <SPAN CLASS="MATH"><I>B</I></SPAN> and <SPAN CLASS="MATH"><I>D</I></SPAN>, separated by spaces, indicating a cable that connects devices <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN> and which introduces delay <SPAN CLASS="MATH"><I>D</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2396img1.png ALT="$ \le$"><I>D</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/23/2396img1.png ALT="$ \le$">1000</SPAN>). The input is terminated by a line containing the number `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line containing a single integer, the maximum delay between any two devices for that test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
1 2 3 
1 3 5 
1 4 4 
5 
1 2 10
1 3 1 
3 4 6 
3 5 7
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9 
18
</PRE><P>
______________________________________________________
2397||||||false||||||

<P>
Collecting your luggage after a flight can be far from trivial. Suitcases and bags appear on a conveyor belt, and hundreds of passengers fight for a good vantage point from which to find and retrieve their belongings. Recently, the Narita Airport Authority has decided to make this process more efficient. Before redesigning their baggage claim areas, they need a simulation program to determine how average passengers behave when collecting their luggage. This simulation assumes that passengers will always take a path of straight line segments to reach their luggage in the least amount of time. 

<P>
For this problem, a conveyor belt is modeled as a simple polygon. A luggage piece appears on some point of the conveyor belt, and then moves along the conveyor belt at a constant speed. A passenger is initially positioned at some point outside the conveyor belt polygon. As soon as the piece of luggage appears, the passenger moves at a constant speed (which is greater than the speed of the luggage piece) in order to pick up the luggage. The passenger's path, which may not cross over the conveyer belt but may touch it, puts the passenger in the same position as the moving piece of luggage in the least amount of time. 

<P>
In the following figure, the conveyor belt is depicted as a polygon ABCDEF. The luggage starts at the top-left corner (Point A) and moves in counterclockwise direction around the polygon as shown with the small arrows. The passenger begins at point P and moves on the path that puts him and the luggage into the same place (point M in the figure) in the shortest amount of time. The passenger's path is shown by a red arrow. This figure corresponds to the first sample input.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2397.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2397.jpg
 ALT="\epsfbox{p2397.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of one or more test cases describing luggage pickup scenarios. A scenario description begins with a line containing a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(3 \le N \le 100)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2397.jpg
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2397.jpg
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>, the number of vertices of the conveyor belt polygon. This is followed by <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines, each containing a pair of integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(|x_{i}|, |y_{i}| \le 10000)$
 -->
<SPAN CLASS="MATH">(| <I>x</I><SUB>i</SUB>|,| <I>y</I><SUB>i</SUB>|<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2397.jpg
 ALT="$ \le$">10000)</SPAN>
<tex2html_verbatim_mark> giving the coordinates of the vertices of the polygon in counterclockwise order. The polygon is simple, that is, it will not intersect itself and it will not touch itself. The polygon description is followed by a line containing two integers <SPAN CLASS="MATH"><I>p</I><SUB>x</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I><SUB>y</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(|p_{x}|, |p_{y}| \le 10000)$
 -->
<SPAN CLASS="MATH">(| <I>p</I><SUB>x</SUB>|,| <I>p</I><SUB>y</SUB>|<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2397.jpg
 ALT="$ \le$">10000)</SPAN>
<tex2html_verbatim_mark>, the coordinates of the starting position of the passenger. The last line of the description contains two positive integers <SPAN CLASS="MATH"><I>V</I><SUB>L</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>V</I><SUB>P</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 < V_{L} < V_{P} \le 10000)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>V</I><SUB>L</SUB> &lt; <I>V</I><SUB>P</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/p2397.jpg
 ALT="$ \le$">10000)</SPAN>
<tex2html_verbatim_mark>, which are the speed of the luggage and the passenger respectively. All the coordinates are given in meters, and the speeds are given in meters per minute.

<P>
You can assume that the passenger is positioned outside the conveyor belt polygon. The luggage will move in counterclockwise direction around the conveyor belt, starting at the first vertex of the polygon. 

<P>
The input is terminated by a line containing a single integer zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print a line containing the test case number (beginning with 1) followed by the minimum time that it takes the passenger to reach the luggage. Use the formatting shown in the sample output (with minutes and seconds separated by a colon), rounded to the nearest second. 
The value for seconds should be printed in a field of width two (padded with leading zeroes if required).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 
0 40 
0 0 
20 0 
20 20 
40 20 
40 40 
120 40 
70 100 
4
0 0 
10 0 
10 10 
0 10 
100 100 
10 11 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: Time = 1:02 
Case 2: Time = 12:36
</PRE> 

<P>

______________________________________________________
2398||||||false||||||
<P>
GIF files are a popular way of storing images, but, being an old format, they suffer from some of the
limitations of the display haTdware that was available at the time the format was devised. One of these
limitations is a maximum color palette of 256 colors. This means that from the millions of colors that can
be represented using 8 bits each for red, green and blue, at most 256 of them aTe used to represent every
color in a single GIF image. Through a clever choice of these colors, and a technique (called dithering) for
approximating the missing colors, a reasonably good quality image can still be produced.

<P>
We want to be able to insert one GIF into another GIF as a small inset image, using the palette of the
larger GIF, and using dithering to represent the colors from the smaller GIF that are not shared by the two
GIFs. Your task is to write a program to tell us if this is possible or not.

<P>
When a pixel must be assigned the wrong color because the right color is not in the color palette,
dithering is used to adjust the colors of the pixels around it, so that the average color around that pixel is
close to the correct one. For example, if the desired color is redder than the color chosen from the palette,
the surrounding pixels are made redder than they should have been to compensate for it. Since the colors of
these pixels must also be chosen from the palette, the question is whether the desired color can be obtained
by averaging colors chosen from the palette.

<P>
Each color is given as a triplet <SPAN CLASS="MATH">(<I>r</I>, <I>g</I>, <I>b</I>)</SPAN>
<tex2html_verbatim_mark> of intensities for red, green and blue, so it can represent a point
on a 3-dimensional grid, with the intensity of red on the X axis, green on the Y, and blue on the Z. Colors
in the palette are fixed points on this grid, while an average color can be viewed as a movable point whose
position is determined by the pull of perfect springs attached between it and the palette colors that make up
the average. If palette colors surround the desired color, no matter how remotely, springs can be attached
that will pull the average there. But, if all of the palette colors are to one side of the desired color, so that a
plane could be interposed between it and them, then no spring can cross the plane to pull the average there.

<P>
Take a palette with just the colors (64,64,64), (255,64,64), (64,255,64) and (64,64,255). Interpreted as
points, the colors define a triangular pyramid whose sides are the planes <SPAN CLASS="MATH"><I>red</I> = 64</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $green = 64$
 -->
<SPAN CLASS="MATH"><I>green</I> = 64</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>blue</I> = 64</SPAN>
<tex2html_verbatim_mark>
and <!-- MATH
 $red+ green + blue = 383$
 -->
<SPAN CLASS="MATH"><I>red</I> + <I>green</I> + <I>blue</I> = 383</SPAN>
<tex2html_verbatim_mark>.  If a color is outside this pyramid, a plane can be placed between it and
the pyramid, separating it from all of the colors that define the pyramid. However, if a color is on the
surface or inside the pyramid, no plane can separate it from every color that defines the pyramid. Thus,
for this example, the color <SPAN CLASS="MATH">(<I>r</I>, <I>g</I>, <I>b</I>)</SPAN>
<tex2html_verbatim_mark> can be dithered if <SPAN CLASS="MATH"><I>r</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2398img1.png
 ALT="$ \le$">64</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>g</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2398img1.png
 ALT="$ \le$">64</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2398img1.png
 ALT="$ \le$">64</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $r + g + b \le 383$
 -->
<SPAN CLASS="MATH"><I>r</I> + <I>g</I> + <I>b</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2398img1.png
 ALT="$ \le$">383</SPAN>
<tex2html_verbatim_mark>. It follows that the color (127,127,127) can be dithered using this color palette, while the colors (16,64,106) and
(130,130,130) can not.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input consists of one or more sets of color palettes, multiple sets being separated from each other
by empty lines, and the last set being followed by end-of-file. In each set, the first color palette is the palette
for the main GIF, while those immediately following it without any empty lines, are the color palettes for one
or more inset GIFs. Each color palette begins with a line of at most 255 bytes, containing the name of the
GIF. The next line contains a single integer from 1 to 256, giving the number of colors in the palette. Each
succeeding line represents one of these colors, as many lines as there are colors in the palette. These lines
each contain three integers that represent the intensities of red, green and blue in the color. The integers
range from O to 255, and are separated from each other by any combination of spaces or tabs.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output for each set of palettes will be a list of the names of the GIFs in that set, in the same order
as the input, one name per line, with nothing preceding or following the name, except that the name of each
inset GIF will be followed by a single space followed by the text `<TT>yes</TT>' if every color in that palette can be
dithered from colors in the main GIF's palette, or the text `<TT>no</TT>' if any of the colors in that palette cannot
be dithered from colors in the main palette. The output for each successive set of palettes will be sepaTated
from the previous set by a single empty line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
LovelyScene.gif
4
64 64 64
255 64 64
64 255 64
64 64 255
GreenisBlue.gif
1
16 64 106
Gray130.gif
1
130 130 130
Gray127.gif
1
127 127 127
LineDrawing.gif
2
64  64 106
64 106  64
AnotherLineDrawing.gif
2
88 123 75
96 12 167


FunnyImage.gif
6
25 35 45
22 32 42
20 30 40
25 35 45
23 33 43
30 40 50
FirstColor.gif
1
10 20 30
FunnyInset.gif
3
20 30 40
25 35 45
30 40 50
WhatAnotherColor.gif
1
40 50 60
HowManySingleColorGifsCanYouStand.gif
1
30 20 10
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
LovelyScene. gif
GreenisBlue .gif no
Gray130 .gif no
Gray127 .gif yes
LineDrawing. gif yes
AnotherLineDrawing. gif no

FunnyImage. gif
FirstColor. gif no
FunnyInset. gif yes
WhatAnotherColor .gif no
HowManySingleColorGifsCanYouStand.gif no
</PRE> 

<P>

<P><P>
<BR>

<B>Useful Formulas</B>

<P>

<P>
<BR>
The vector from point <!-- MATH
 $(x_{1}, y_{1}, z_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>z</I><SUB>1</SUB>)</SPAN>
<tex2html_verbatim_mark> to point <!-- MATH
 $(x_{2}, y_{2}, z_{2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>z</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark> is <!-- MATH
 $(x_{2} - x_{1}, y_{2} - y_{1}, z_{2} - z_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB> - <I>x</I><SUB>1</SUB>, <I>y</I><SUB>2</SUB> - <I>y</I><SUB>1</SUB>, <I>z</I><SUB>2</SUB> - <I>z</I><SUB>1</SUB>)</SPAN>
<tex2html_verbatim_mark>.

<P>
The dot product of two 3-dimensional vectors is the product of the lengths of the two vectors with the
cosine of the angle between them. It can be computed as: <!-- MATH
 $(x_{1}, y_{1}, z_{1}) \bullet (x_{2}, y_{2}, z_{2}) = x_{1}x_{2} + y_{1}y_{2} + z_{1}z_{2}$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>z</I><SUB>1</SUB>)<IMG
 WIDTH="13" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2398img1.png
 ALT="$ \bullet$">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>z</I><SUB>2</SUB>) = <I>x</I><SUB>1</SUB><I>x</I><SUB>2</SUB> + <I>y</I><SUB>1</SUB><I>y</I><SUB>2</SUB> + <I>z</I><SUB>1</SUB><I>z</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>.

<P>
The cross product of two 3-dimensional vectors is a vector perpendicular to both vectors, whose length
is the product of the lengths of the two vectors with the sine of the angle between them, and whose direction
would be to your left if you stood so the first vector pointed up and you faced in the direction of the angle
between the vectors. It can be computed as: <!-- MATH
 $(x_{1}, y_{1}, z_{1}) \times (x_{2}, y_{2}, z_{2}) = (y_{1}z_{2} -z_{1}y_{2}, z_{1}x_{2} -x_{1}z_{2}, x_{1}y_{2} -y_{1}x_{2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>z</I><SUB>1</SUB>) <TT>x</TT> (<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>z</I><SUB>2</SUB>) = (<I>y</I><SUB>1</SUB><I>z</I><SUB>2</SUB> - <I>z</I><SUB>1</SUB><I>y</I><SUB>2</SUB>, <I>z</I><SUB>1</SUB><I>x</I><SUB>2</SUB> - <I>x</I><SUB>1</SUB><I>z</I><SUB>2</SUB>, <I>x</I><SUB>1</SUB><I>y</I><SUB>2</SUB> - <I>y</I><SUB>1</SUB><I>x</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark>.

<P>
You can test if three points are collinear by taking the cross product of the vector from the first point
to the second with the vector from the first point to the third, and checking that all three components of
the cross product are O.

<P>
A recursive definition for computing the value of a determinant of order <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $|a_{11}|= a_{11}$
 -->
<SPAN CLASS="MATH">| <I>a</I><SUB>11</SUB>| = <I>a</I><SUB>11</SUB></SPAN>
<tex2html_verbatim_mark>
</DIV>

<P>
<DIV ALIGN="CENTER">
<SPAN CLASS="MATH"><I>D</I> =</SPAN>
<tex2html_verbatim_mark>
<TABLE COLS=4 BORDER FRAME=VSIDES RULES=NONE>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      
<SPAN CLASS="MATH"><I>a</I><SUB>11</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>12</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>1n</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>a</I><SUB>21</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>22</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>2n</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2398img1.png
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2398img1.png
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="25" HEIGHT="29" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2398img1.png
 ALT="$ \ddots$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2398img1.png
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   
<SPAN CLASS="MATH"><I>a</I><SUB>n1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>n2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>nn</SUB></SPAN>
<tex2html_verbatim_mark> 
</TD></TR>
</TABLE>
 
<!-- MATH
 $= \sum^{n}_{j=1}a_{1_{j}} \cdot \mbox{cofactor} A_{1_{j}}$
 -->
<SPAN CLASS="MATH">= <IMG
 WIDTH="45" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/23/2398img1.png
 ALT="$ \sum^{{n}}_{{j=1}}$"><I>a</I><SUB>1<SUB>j</SUB></SUB><SUP> . </SUP>cofactor<I>A</I><SUB>1<SUB>j</SUB></SUB></SPAN>
<tex2html_verbatim_mark>
</DIV>

<P>
where the cofactor <SPAN CLASS="MATH"><I>A</I><SUB>i<SUB>j</SUB></SUB></SPAN>
<tex2html_verbatim_mark> of the element <SPAN CLASS="MATH"><I>a</I><SUB>i<SUB>j</SUB></SUB></SPAN>
<tex2html_verbatim_mark> of determinant <SPAN CLASS="MATH"><I>D</I></SPAN>
<tex2html_verbatim_mark> is defined to be the product of <!-- MATH
 $(-1)^{i+i}$
 -->
<SPAN CLASS="MATH">(- 1)<SUP>i+i</SUP></SPAN>
<tex2html_verbatim_mark> with the determinant derived from <SPAN CLASS="MATH"><I>D</I></SPAN>
<tex2html_verbatim_mark> by deleting the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>th row and the <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>th column.

<P>
The value of the determinant <TABLE COLS=3 BORDER FRAME=VSIDES RULES=NONE>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
                                                      <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TABLE>
 is twice the (signed) area of the triangle defined by the
points <!-- MATH
 $(x_{1}, y_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(x_{2}, y_{2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $(x_{3}, y_{3})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>3</SUB>, <I>y</I><SUB>3</SUB>)</SPAN>
<tex2html_verbatim_mark>, where the sign is negative if the points define the triangle in a clockwise direction, and positive if counter-clockwise.

<P>
Thee value of the determinant <TABLE COLS=4 BORDER FRAME=VSIDES RULES=NONE>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>z</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
                                                      <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>z</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>z</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>z</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TABLE>
     is six times the (signed) volume of the triangular pyramid defined by the points <!-- MATH
 $(x_{1},y_{1},z_{1}), (x_{2},y_{2},z_{2}), (x_{3},y_{3},z_{3})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>z</I><SUB>1</SUB>),(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>z</I><SUB>2</SUB>),(<I>x</I><SUB>3</SUB>, <I>y</I><SUB>3</SUB>, <I>z</I><SUB>3</SUB>)</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $(x_{q},y_{q},z_{q})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>q</SUB>, <I>y</I><SUB>q</SUB>, <I>z</I><SUB>q</SUB>)</SPAN>
<tex2html_verbatim_mark>, where the sign is negative if (viewed
from point 4) the first 3 points define the triangle in a clockwise direction, and positive if counter-clockwise.

<P>

______________________________________________________
2399||||||false||||||
<P>
As part of your graduate research work at Swamp County College, your advisor has requested that you
analyze sets of remote-sensing data collected from a satellite. Processed data from this particular satellite is
publicly available, but only at a premium. However, the raw, unprocessed data is for sale at minimal cost.
Your advisor has decided to give you the opportunity to exercise your programing skills on the raw data.

<P>
You have been provided with documentation of the raw data format and with files that (supposedly)
contain the raw data. As a first step, you will verify the presence of data within the files. The data within
each file has been stored as it was received from the satellite, in a single bit-stream. Within a file, one or
multiple segments ofvalid data may exist, separated by segments where no data was collected or by segments
of garbled (noisy) data. No data or garbled data may also occur at the beginning and/or end of a file. In
the worst case, a file may contain no valid data.

<P>
The raw data is partitioned into packets of 80 bytes each. Bytes are numbered starting at O. Assume
8 bits/byte. Bytes 4-7 ofeach packet contain a distinct 32-bit pattern known as the synchronization, or sync
code. The sync code, which is a constant for the satellite, acts as a marker by which the presence of the raw
data can be recognized within the bit stream. Bytes 9-12 of each packet contain a counter, represented as a
32-bit unsigned integer. Note, however, that no byte alignment was performed on the data before delivery
to you. As a result, the bytes of the data packets may be bit-shifted relative to the byte boundaries of the
data stored in each file. You may assume that the relative omsets between packet byte boundaries and data
byte boundaries are constant within a given file.

<P>
A valid packet is defined to be a complete packet containing the sync code in the correct location. For
the purposes of this discussion, an invalid packet is an 80-byte length that does not contain the sync code in
the correct location. Since the sync code can occur naturally anywhere in the bit stream, the beginning of a
valid data segment is (arbitrarily) defined to be three or more contiguous valid packets. Once the beginning
of a valid data segment has been found, the end of the segment is defined to be the end of the last valid
packet before three or more invalid packets OR the end of the last valid packet before end-of-file, whichever
comes first. If a valid data segment is followed by fewer than three invalid packets, you should treat those
invalid packets as valid packets (and thus as part of the valid data segment).

<P>
Given an input file, your program is to locate all segments of valid data within the file and report for
each segment

<P>

<OL>
<LI>The omset, relative to the start of the file, of the first bit of the segment, where bit omsets are numbered
starting at 0. Express this value as a non-negative integer.
</LI>
<LI>The number of packets in the segment. Express this value as a positive integer.
</LI>
<LI>The value of the counter for the first packet in the segment. Express this value as a non-negative integer.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
An input file will be a binary file ofnonzero length up to a maximum of 1 MB. For the sync code and counter
fields, bytes are ordered from high to low. Bits are ordered from high to low within a byte. The satellite's
sync code is (hexadecimal) 03915ED3.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each segment, report the omset, number of packets, and counter in that order on a single line. All
values should be expressed in decimal. Use a single space to separate each of the values. If your program
finds no valid data in the file, it should print the single line `<TT>No valid data found</TT>' terminated by a newline.

<P>
Note: Input to your program will be a binary file. For readability, the sample input has been expressed in
hexadecimal format with whitespace added after each byte.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
08 01 01 01 00 39 15 ED 30 00 00 00 60 OO 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 00 39 15 ED 30 00 00 00 60 10 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 00 39 15 ED 30 00 00 00 60 20 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Saple Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 3 1536

______________________________________________________
2400||||||false||||||
<P>The surveyor starship Hakodate-maru is famous for her two fuel containers with unbounded capacities. They hold the same type of atomic fuel balls.<P>There, however, is an inconvenience. The shapes of the fuel containers #1 and #2 are always cubic and regular tetrahedral respectively. Both of the fuel containers should be either empty or filled according to their shapes. Otherwise, the fuel balls become extremely unstable and may explode in the fuel containers. Thus, the number of fuel balls for the container #1 should be a cubic number (<SPAN CLASS="MATH"><I>n</I><SUP>3</SUP></SPAN> <tex2html_verbatim_mark> for some <SPAN CLASS="MATH"><I>n</I> = 0, 1, 2, 3,...</SPAN> <tex2html_verbatim_mark>) and that for the container #2 should be a tetrahedral number ( <SPAN CLASS="MATH"><I>n</I>(<I>n</I> + 1)(<I>n</I> + 2)/6</SPAN> <tex2html_verbatim_mark> for some <SPAN CLASS="MATH"><I>n</I> = 0, 1, 2, 3,...</SPAN> <tex2html_verbatim_mark>).<P>Hakodate-maru is now at the star base Goryokaku preparing for the next mission to create a precise and detailed chart of stars and interstellar matters. Both of the fuel containers are now empty. Commander Parus of Goryokaku will soon send a message to Captain Future of Hakodate-maru on how many fuel balls Goryokaku can supply. Captain Future should quickly answer to Commander Parus on how many fuel balls she requests before her ship leaves Goryokaku. Of course, Captain Future and her omcers want as many fuel balls as possible.<P>For example, consider the case Commander Parus offers 151200 fuel balls. If only the fuel container #1 were available (i.e. ifthe fuel container #2 were unavailable), at most 148877 fuel balls could be put into the fuel container since <!-- MATH
 $148877 = 53 \times 53 \times 53 < 151200 < 54 \times 54 \times 54$
 --><SPAN CLASS="MATH">148877 = 53 <TT>x</TT> 53 <TT>x</TT> 53 &lt; 151200 &lt; 54 <TT>x</TT> 54 <TT>x</TT> 54</SPAN> <tex2html_verbatim_mark>. If only the fuel container #2 were available, at most 147440 fuel balls could be put into the fuel container since <!-- MATH
 $147440 = 95 \times 96 \times 97/6 < 151200 < 96 \times 97 \times 98/6$
 --><SPAN CLASS="MATH">147440 = 95 <TT>x</TT> 96 <TT>x</TT> 97/6 &lt; 151200 &lt; 96 <TT>x</TT> 97 <TT>x</TT> 98/6</SPAN> <tex2html_verbatim_mark>. Using both of the fuel containers #1 and #2, 151200 fuel balls can be put into the fuel containers since <SPAN CLASS="MATH">151200 = 39 <TT>x</TT> 39 <TT>x</TT> 39 + 81 <TT>x</TT> 82 <TT>x</TT> 83/6</SPAN> <tex2html_verbatim_mark>. In this case, Captain Future's answer should be ``1512009".<P>Commander Parus's offer cannot be greater than 151200 because of the capacity of the fuel storages of Goryokaku. Captain Future and her omcers know that well.<P>You are a fuel engineer assigned to Hakodate-maru. Your duty today is to help Captain Future with calculating the number of fuel balls she should request.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of at most 1024 positive integers. Each line contains a single integer. The sequence is followed by a zero, which indicates the end of data and should not be treated as input. You may assume that none of the input integers is greater than 151200.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is composed of lines, each containing a single integer. Each output integer should be the greatest integer that is the sum of a nonnegative cubic number and a nonnegative tetrahedral number and that is not greater than the corresponding input number. No other characters should appear in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100
64
50
20
151200
O
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
99
64
47
20
151200
</PRE><P>
______________________________________________________
2401||||||false||||||
<P>The city of Hakodate recently established a commodity exchange market. To participate in the market, each dealer transmits through the Internet an order consisting of his or her name, the type of the order (buy or sell), the name of the commodity, and the quoted price.<P>In this market a deal can be made only if the price of a sell order is lower than or equal to the price of a buy order. The price of the deal is the mean of the prices of the buy and sell orders, where the mean price is rounded downward to the nearest integer. To exclude dishonest deals, no deal is made between a pair of sell and buy orders from the same dealer. The system of the market maintains the list of orders for which a deal has not been made and processes a new order in the following manner.<P><UL><LI>For a new sell order, a deal is made with the buy order with the highest price in the list satisfying the conditions. If there is more than one buy order with the same price, the deal is made with the earliest of them. </LI><LI>For a new buy order, a deal is made with the sell order with the lowest price in the list satisfying the conditions. Ifthere is more than one sell order with the same price, the deal is made with the earliest of them. </LI></UL><P>The market opens at 7:00 and closes at 22:00 everyday. When the market closes, all the remaining orders are cancelled. To keep complete record of the market, the system of the market saves all the orders it received everyday.<P>The manager ofthe market asked the system administrator to make a program which reports the activity of the market. The report must contain two kinds of information. For each commodity the report must contain informationon the lowest, the average and the highest prices ofsuccessful deals. For each dealer, the report must contain information on the amounts the dealer paid and received for commodities.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several data sets.  Each data set represents the record of the market on one day. The first line of each data set contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(n < 1000)$
 --><SPAN CLASS="MATH">(<I>n</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark> which is the number of orders in the record. Each line of the record describes an order, consisting of the name of the dealer, the type of the order, the name of the commodity, and the quoted price. They are separated by a single space character.<P>The name of a dealer consists of capital alphabetical letters and is less than 10 characters in length. The type of an order is indicated by a string, ``<TT>BUY</TT>'' or ``<TT>SELL</TT>''. The name of a commodity is a single capital letter. The quoted price is a positive integer less than 1000.<P>The orders in a record are arranged according to time when they were received and the first line of the record corresponds to the oldest order.<P>The end of the input is indicated by a line containing a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each data set consists of two parts separated by a line containing two hyphen (`<TT>-</TT>') characters.<P>The first part is output for commodities. For each commodity, your program should output the name of the commodity and the lowest, the average and the highest prices of successful deals in one line. The name and the prices in a line should be separated by a space character. The average price is rounded downward to the nearest integer. The output should contain only the commodities for which deals are made and the order of the output must be alphabetic.<P>The second part is output for dealers. For each dealer, your program should output the name of the dealer, the amounts the dealer paid and received for commodities. The name and the numbers in a line should be separated by a space character. The output should contain all the dealers who transmitted orders. The order of dealers in the output must be lexicographic on their names. The lexicographic order is the order in which words in dictionaries are arranged.<P>The output for each data set should be followed by a linecontaining ten hyphen (`<TT>-</TT>') characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
PERLIS SELL A 300
MILKES BUY A 200
HAMMING SELL A 100
4
BACKUS SELL A 10
FLOYD BUY A 20
IVERSON SELL B 30
BACKUS BUY B 40
7
MILKINSON SELL A 500
MCCARTHY BUY C 300
MILKINSON SELL C 200
DIJKSTRA SELL B 100
BACHMAN BUY A 400
DIJKSTRA BUY A 600
MILKINSON SELL A 300
2
ABCD sELL X 10
ABC BUY X 15
2
A sELL M 100
A BUY M 100
O
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
A 150 150 150
--
HAMMING 0 150
PERLIS O O
MILKES 150 O
----------
A 15 15 15
B 35 35 35
--
BACKUS 35 15
FLOYD 15 O
IVERSON O 35
----------
A 350 450 550
C 250 250 250
--
BACHMAN 350 0
DIJKSTRA 550 O
MCCARTHY 250 O
MILKINSON O 1150
----------
X 12 12 12
--
ABC 12 0
ABCD O 12
----------
--
A 0 0
----------
</PRE><P>
______________________________________________________
2402||||||false||||||
<P>A fisherman named Etadokah awoke in a very small island. He could see calm, beautiful and blue sea around the island. The previous night he had encountered a terrible storm and had reached this uninhabited island. Some wrecks of his ship were spread around him. He found a square wood-frame and a long thread among the wrecks. He had to survive in this island until someone came and saved him.<P>In order to catch fish, he began to make a kind of fishnet by cutting the long thread into short threads and fixing them at pegs on the square wood-frame (Figure 1). He wanted to know the sizes of the meshes of the fishnet to see whether he could catch small fish as well as large ones.<P>The wood-frame is perfectly square with four thin edges one meter long.. a bottom edge, a top edge, a left edge, and a right edge. There are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> pegs on each edge, and thus there are <SPAN CLASS="MATH">4<I>n</I></SPAN> <tex2html_verbatim_mark> pegs in total. The positions ofpegs are represented by their <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark>-coordinates. Those of an example case with <SPAN CLASS="MATH"><I>n</I> = 2</SPAN> <tex2html_verbatim_mark> are depicted in Figures 2 and 3. The position of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th peg on the bottom edge is represented by <SPAN CLASS="MATH">(<I>a</I><SUB>i</SUB>, 0)</SPAN> <tex2html_verbatim_mark>. That on the top edge, on the left edge and on the right edge are represented by <SPAN CLASS="MATH">(<I>b</I><SUB>i</SUB>, 1)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(0, <I>c</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">(1, <I>d</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>, respectively. The long thread is cut into <SPAN CLASS="MATH">2<I>n</I></SPAN> <tex2html_verbatim_mark> threads with appropriate lengths. The threads are strained between <SPAN CLASS="MATH">(<I>a</I><SUB>i</SUB>, 0)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>b</I><SUB>i</SUB>, 1)</SPAN> <tex2html_verbatim_mark>, and between <SPAN CLASS="MATH">(0, <I>c</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(1, <I>d</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>i</I> = 1,..., <I>n</I>)</SPAN> <tex2html_verbatim_mark>.<P>You should write a program that reports the size of the largest mesh among the <SPAN CLASS="MATH">(<I>n</I> + 1)<SUP>2</SUP></SPAN> <tex2html_verbatim_mark> meshes of the fishnet made by fixing the threads at the pegs. You may assume that the thread he found is long enough to make the fishnet and that the wood-frame is thin enough for neglecting its thickness.<P><DIV ALIGN="CENTER"><IMG WIDTH="405" HEIGHT="291" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2402a.jpg ALT="\epsfbox{p2402a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="641" HEIGHT="434" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2402a.jpg ALT="\epsfbox{p2402b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="544" HEIGHT="446" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2402a.jpg ALT="\epsfbox{p2402c.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple subproblems followed by a line containing a zero that indicates the end of input. Each subproblem is given in the following format.<P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>a</I><SUB>1</SUB><I>a</I><SUB>2</SUB><SUP> ... </SUP><I>a</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>b</I><SUB>1</SUB><I>b</I><SUB>2</SUB><SUP> ... </SUP><I>b</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>c</I><SUB>1</SUB><I>c</I><SUB>2</SUB><SUP> ... </SUP><I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>d</I><SUB>1</SUB><I>d</I><SUB>2</SUB><SUP> ... </SUP><I>d</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR>An integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> followed by a newline is the number of pegs on each edge. <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB>,..., <I>b</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>,..., <I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>,..., <I>d</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> are decimal fractions, and they are separated by a space character except that <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB>, <I>b</I><SUB>n</SUB>, <I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> are followed by a new line. Each <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>i</I> = 1,..., <I>n</I>)</SPAN> <tex2html_verbatim_mark> indicates the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th peg on the bottom edge. Each <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>i</I> = 1,..., <I>n</I>)</SPAN> <tex2html_verbatim_mark> indicates the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th peg on the top edge. Each <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>i</I> = 1,..., <I>n</I>)</SPAN> <tex2html_verbatim_mark> indicates the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th peg on the left edge. Each <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>i</I> = 1,..., <I>n</I>)</SPAN> <tex2html_verbatim_mark> indicates the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th peg on the right edge. The decimal fractions are represented by 7 digits after the decimal point. In addition you may assume that <!-- MATH
 $0 < n \le 30$
 --><SPAN CLASS="MATH">0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2402a.jpg ALT="$ \le$">30</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 < a_{1} < a_{2} < \cdots < a_{n} < 1$
 --><SPAN CLASS="MATH">0 &lt; <I>a</I><SUB>1</SUB> &lt; <I>a</I><SUB>2</SUB> &lt; <SUP>... </SUP>&lt; <I>a</I><SUB>n</SUB> &lt; 1</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 < b_{1} < b_{2} < \cdots < b_{n} < 1$
 --><SPAN CLASS="MATH">0 &lt; <I>b</I><SUB>1</SUB> &lt; <I>b</I><SUB>2</SUB> &lt; <SUP>... </SUP>&lt; <I>b</I><SUB>n</SUB> &lt; 1</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 < c_{1} < c_{2} < \cdots < c_{n} < 1$
 --><SPAN CLASS="MATH">0 &lt; <I>c</I><SUB>1</SUB> &lt; <I>c</I><SUB>2</SUB> &lt; <SUP>... </SUP>&lt; <I>c</I><SUB>n</SUB> &lt; 1</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < d_{1} < d_{2} < \cdots < d_{n} < 1$
 --><SPAN CLASS="MATH">0 &lt; <I>d</I><SUB>1</SUB> &lt; <I>d</I><SUB>2</SUB> &lt; <SUP>... </SUP> &lt; <I>d</I><SUB>n</SUB> &lt; 1</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each subproblem, the size of the largest mesh should be printed followed by a new line. Each value should be represented by 6 digits after the decimal point, and it may not have an error greater than 0.000001.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
0.2000000 0.6000000
0.3000000 0.8000000
0.3000000 0.5000000
0.5000000 0.6000000
2
0.3333330 0.6666670
0.3333330 0.6666670
0.3333330 0.6666670
0.3333330 0.6666670
4
0.2000000 0.4000000 0.6000000 0.8000000
0.1000000 0.5000000 0.6000000 0.9000000
0.2000000 0.4000000 0.6000000 0.8000000
0.1000000 0.5000000 0.6000000 0.9000000
2
0.5138701 0.9476283
0.1717362 0.1757412
0.3086521 0.7022313
0.2264312 0.5345343
1
0.4000000
0.6000000
0.3000000
0.5000000
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.215657
0.111112
0.078923
0.279223
0.348958
</PRE><P>
______________________________________________________
2403||||||false||||||
<P>At the risk of its future, International Cellular Phones Corporation (ICPC) invests its resources in developing new mobile phones, which are planned to be equipped with Web browser, mailer, instant messenger, and many other advanced communication tools. Unless members of ICPC can complete this stiff job, it will eventually lose its market share.<P>You are now requested to help ICPC to develop intriguing text input software for small mobile terminals. As you may know, most phones today have twelve buttons, namely, ten number buttons from ``0" to ``9" and two special buttons ``<SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark>" and ``#". Although the company is very ambitious, it has decided to follow today's standards and conventions. You should not change the standard button layout, and should also pay attention to the following standard button assignment.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=HSIDES RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>button</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>letters</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>button</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>letters</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a, b, c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>m, n, o</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d, e, f</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>p, q, r, s</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>g, h, i</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t, u, v</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>j, k, l</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>w, x, y, z</TD></TR></TBODY></TABLE></DIV><P><P><BR>This means that you can only use eight buttons for text input.<P>Most users of current ICPC phones are rushed enough to grudge wasting time on even a single button press. Your text input software should be economical of users' time so that a single button press is sumcient for each character input. In consequence, for instance, your program should accept a sequence of button presses ``77377" and produce the word ``press". Similarly, it should translate ``77377843288866" into ``press the button".<P>Ummm... It seems impossible to build such text input software since more than one English letter is represented by a digit!. For instance, ``77377" may represent not only ``press" but also any one of 768 <SPAN CLASS="MATH">(= 4 <TT>x</TT> 4 <TT>x</TT> 3 <TT>x</TT> 4 <TT>x</TT> 4)</SPAN> <tex2html_verbatim_mark> character strings. However, we have the good news that the new model of ICPC mobile phones has enough memory to keep a dictionary. You may be able to write a program that filters out <SPAN CLASS="textit">false words</SPAN>, i.e., strings not listed in the dictionary.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple data sets, each of which represents a dictionary and a sequence of button presses in the following format.<P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>word</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/3402img3.png ALT="$ \vdots$"></SPAN><P><SPAN CLASS="MATH"><I>word</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>sequence</I></SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> in the first line is a positive integer, representing the number of words in the dictionary. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each representing a word in the dictionary, only contain lower case letters from `<TT>a</TT>' to `<TT>z</TT>'. The order ofwords in the dictionary is arbitrary (not necessarily in the lexicographic order). No words occur more than once in the dictionary. The last line, <EM>sequence</EM>, is the sequence of button presses, and only contains digits from `<TT>2</TT>' to `<TT>9</TT>'.<P>You may assume that a dictionary has at most one hundred words and that the length of each word is between one and fifty, inclusive. You may also assume that the number of input digits in the <SPAN CLASS="textit">sequence</SPAN> is between one and three hundred, inclusive.<P>A line containing a zero indicates the end of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, your program should print all sequences that can be represented by the input sequence of button presses. Each sequence should be a sequence of words in the dictionary, and should appear in a single line. The order of lines does not matter.<P>Two adjacent words in a line should be separated by a single space character and the last word should be followed by a single period (`<TT>.</TT>').<P>Following those output lines, your program should also print a terminating line consisting solely of two hyphens (`<TT>-</TT>'). If there are no corresponding sequences of words, your program should only print the terminating line.<P>You may assume that for each data set the number of output lines is at most twenty, excluding the terminating line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
push
press
the
button
bottom
77377843288866
4
i
am
going
go
42646464
3
a
b
c
333
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
press the button.
--
i am going.
i am go go i.
--
--
</PRE><P>
______________________________________________________
2404||||||false||||||
<P>Taro and Hanako, students majoring in biology, have been engaged long in observations of beehives. Their interest is in finding any egg patterns laid by queen bees of a specific wild species. A queen bee is said to lay a batch ofeggs in a short time. Taro and Hanako have never seen queen bees laying eggs. Thus, every time they find beehives, they find eggs just laid in hive cells.<P>Taro and Hanako have a convention to record an egg layout.. they assume the queen bee lays eggs, moving from one cell to an adjacent cell along a path containing no cycles. They record the path of cells with eggs. There is no guarantee in biology for them to find an acyclic path in every case. Yet they have never failed to do so in their observations.<P><DIV ALIGN="CENTER"><IMG WIDTH="799" HEIGHT="265" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2404a.jpg ALT="\epsfbox{p2404a.eps}"> <tex2html_verbatim_mark></DIV><P>There are only six possible movements from a cell to an adjacent one, and they agree to write down those six by letters <TT>a</TT>, <TT>b</TT>, <TT>c</TT>, <TT>d</TT>, <TT>e</TT>, and <TT>f</TT> ounterclockwise as shown in Figure 2. Thus the layout in Figure 1 may be written down as ``<TT>faafd</TT>".<P>Taro and Hanako have investigated beehives in a forest independently. Each has his/her own way to approach beehives, protecting oneself from possible bee attacks.<P>They are asked to report on their work jointly at a conference, and share their own observation records to draft a joint report. At this point they find a serious fault in their convention. They have never discussed which direction, in an absolute sense, should be taken as ``<TT>a</TT>", and thus Figure 2 might be taken as, e.g., Figure 3 or Figure 4. The layout shown in Figure 1 may be recorded differently, depending on the direction looking at the beehive and the path assumed: ``bcbdb" with combination of Figure 3 and Figure 5, or ``bccac" with combination of Figure 4 and Figure 6.<P>A beehive can be observed only from its front side and never from its back, so a layout cannot be confused with its mirror image.<P>Since they may have observed the same layout independently, they have to find duplicated records in their observations (Of course, they do not record the exact place and the exact time of each observation). Your mission is to help Taro and Hanako by writing a program that checks whether two observation records are made from the same layout.<P><DIV ALIGN="CENTER"><IMG WIDTH="716" HEIGHT="267" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2404a.jpg ALT="\epsfbox{p2404b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="830" HEIGHT="268" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2404a.jpg ALT="\epsfbox{p2404c.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input starts with a line containing the number of record pairs that follow. The number is given with at most three digits.<P>Each record pair consists of two lines of layout records and a line containing a hyphen. Each layout record consists of a sequence of letters <TT>a</TT>, <TT>b</TT>, <TT>c</TT>, <TT>d</TT>, <TT>e</TT>, and <TT>f</TT>. Note that a layout record may be an empty sequence if a queen bee laid only one egg by some reason. You can trust Taro and Hanako in that any of the paths in the input does not force you to visit any cell more than once. Any of lines in the input contain no characters other than those described above, and contain at most one hundred characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each pair of records, produce a line containing either ``<TT>true</TT>" or ``<TT>false</TT>": ``<TT>true</TT>" if the two records represent the same layout, and ``<TT>false</TT>" otherwise. A line should not contain any other characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
faafd
bcbdb
-
bcbdb
bccac
-
faafd
aafdd
-
aaafddd
aaaeff
-
aaedd
aafdd
-
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
true
true
false
false
false
</PRE><P>
______________________________________________________
2405||||||false||||||
<P>Ken and Keiko are young, poor and busy. Short explanation: they are students, and ridden with part-time jobs. To make things worse, Ken lives in Hakodate and Keiko in Tokyo. They want to meet, but since they have neither time nor money, they have to go back to their respective jobs immediately after, and must be careful about transportation costs. Help them find the most economical meeting point.<P>Ken starts from Hakodate, Keiko from Tokyo. They know schedules and fares for all trains, and can choose to meet anywhere including their hometowns, but they cannot leave before 8am and must be back by 6pm in their respective towns. Train changes take no time (one can leave the same minute he/she arrives), but they want to meet for at least 30 minutes in the same city. There can be up to 100 cities and 2000 direct connections, so you should devise an algorithm clever enough for the task.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of data sets.<P>The first line of a data set contains a single integer, the number of connections in the timetable. It is not greater than 2000.<P>Connections are given one on a line, in the following format.<P><P><BR><SPAN CLASS="MATH"><I>Start</I><IMG WIDTH="40" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2405img1.png ALT="$ \_city$"><I>HH</I> : <I>MMArrival</I><IMG WIDTH="40" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2405img1.png ALT="$ \_city$"><I>HH</I> : <I>MMprice</I></SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>Start</I><IMG WIDTH="40" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2405img1.png ALT="$ \_city$"></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Arrival</I><IMG WIDTH="40" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2405img1.png ALT="$ \_city$"></SPAN> <tex2html_verbatim_mark> are composed of up to 16 alphabetical characters, with only the first one in upper case. Departure and arrival times are given in hours and minutes (two digits each, separated by ``<TT>:</TT>") from <TT>00:00</TT> to <TT>23:59</TT>. Arrival time is strictly after departure time. The <EM>price</EM> for one connection is an integer between 1 and 10000, inclusive. Fields are separated by spaces.<P>The end of the input is marked by a line containing a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should contain one integer for each data set, the lowest cost possible. This is the total fare of all connections they use.<P>If there is no solution to a data set, you should output a zero.<P>The solution to each data set should be given in a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
Hakodate 08..15 Morioka 12..30 2500
Morioka 14..05 Hakodate 17..30 2500
Morioka 15..30 Hakodate 18..OO 3000
Morioka 14..30 Tokyo 17..50 3000
Tokyo 08..30 Morioka 13..35 3000
4
Hakodate 08..15 Morioka 12..30 2500
Morioka 14..04 Hakodate 17..30 2500
Morioka 14..30 Tokyo 17..50 3000
Tokyo 08..30 Morioka 13..35 3000
18
Hakodate 09..55 Akita 10..53 3840
Hakodate 14..14 Akita 16..09 1920
Hakodate 18..36 Akita 19..33 3840
Hakodate 08..OO Morioka 08..53 3550
Hakodate 22..40 Morioka 23..34 3550
Akita 14..23 Tokyo 14..53 2010
Akita 20..36 Tokyo 21..06 2010
Akita 08..20 Hakodate 09..18 3840
Akita 13..56 Hakodate 14..54 3840
Akita 21..37 Hakodate 22..35 3840
Morioka 09..51 Tokyo 10..31 2660
Morioka 14..49 Tokyo 15..29 2660
Morioka 19..42 Tokyo 20..22 2660
Morioka 15..11 Hakodate 16..04 3550
Morioka 23..03 Hakodate 23..56 3550
Tokyo 09..44 Morioka 11..04 1330
Tokyo 21..54 Morioka 22..34 2660
Tokyo 11..34 Akita 12..04 2010
O
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
11000
0
11090
</PRE><P>
______________________________________________________
2406||||||false||||||
<P>
Let's play a traditional game Nim. You and I are seated across a table and we have a hundred
stones on the table (we know the number of stones exactly). We play in turn and at each turn,
you or I can remove one to four stones from the heap. You play first and the one who removed
the last stone loses.

<P>
In this game, you have a winning strategy. To see this, you first remove four stones and leave
96 stones. No matter how I play, I will end up with leaving 92-95 stones. Then you will in turn
leave 91 stones for me (verify this is always possible). This way, you can always leave <SPAN CLASS="MATH">5<I>k</I> + 1</SPAN>
<tex2html_verbatim_mark>
stones for me and finally I get the last stone, sigh. If we initially had 101 stones, on the other
hand, I have a winning strategy and you are doomed to lose.

<P>
Let's generalize the game a little bit. First, let's make it a team game. Each team has n players
and the <SPAN CLASS="MATH">2<I>n</I></SPAN>
<tex2html_verbatim_mark> players are seated around the table, with each player having opponents at both
sides. Turns round the table so the two teams play alternately. Second, let's vary the maximum
number ofstones each player can take. That is, each player has his/her own maximum number
ofstones he/she can take at each turn (The minimum is always one). So the game is asymmetric
and may even be unfair.

<P>
In general, when played between two teams of experts, the outcome of a game is completely
determined by the initial number ofstones and the minimum number of stones each player can
take at each turn. In other words, either team has a winning strategy.

<P>
You are the head-coach of a team.  In each game, the umpire shows both teams the initial
number of stones and the maximum number of stones each player can take at each turn. Your
team plays first. Your job is, given those numbers, to instantaneously judge whether your team
has a winning strategy.

<P>
Incidentally, there is a rumor that Captain Future and her officers of Hakodate-maru love this
game, and they are killing their time playing it during their missions. You wonder where the
stones are?. Well, they do not have stones but do have plenty of balls in the fuel containers!.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input is a sequence of lines, followed by the last line containing a zero. Each line except
the last is a sequence of integers and has the following format.

<P>

<P>
<BR>

<!-- MATH
 $n \ S \ M_{1} \ M_{2} \ \cdots \ M_{2n}$
 -->
<SPAN CLASS="MATH"><I>n</I>&nbsp;<I>S</I>&nbsp;<I>M</I><SUB>1</SUB>&nbsp;<I>M</I><SUB>2</SUB>&nbsp;<SUP> ... </SUP>&nbsp;<I>M</I><SUB>2n</SUB></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of players in a team, <SPAN CLASS="MATH"><I>S</I></SPAN>
<tex2html_verbatim_mark> the initial number of stones, and <SPAN CLASS="MATH"><I>M</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> the maximum
number of stones <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>th player can take. 1st, 3rd, 5th, <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> players are your team's players and 2nd,
4th, 6th, <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> the opponents. Numbers are separated by a single space character. You may
assume <!-- MATH
 $1 \le n \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2406img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2406img1.png
 ALT="$ \le$">10</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le M_{i} \le 16$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2406img1.png
 ALT="$ \le$"><I>M</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2406img1.png
 ALT="$ \le$">16</SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $1 \le S < 2^{13}$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2406img1.png
 ALT="$ \le$"><I>S</I> &lt; 2<SUP>13</SUP></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The out put should consist of lines each containing either a one, meaning your team has a winning 
strategy, or a zero otherwise.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 101 4 4
1 100 4 4
3 97 8 7 6 5 4 3
O
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
O
1
1
</PRE> 

<P>

______________________________________________________
2407||||||false||||||
<P>
During a voyage of the starship Hakodate-maru (see Problem A), researchers found strange
synchronized movements of stars. Having heard these observations, Dr. Extreme proposed a
theory of ``super stars". Do not take this term as a description of actors or singers. It is a
revolutionary theory in astronomy.

<P>
According to this theory, stars we are observing are not independent objects, but only small
portions of larger objects called super stars. A super star is filled with invisible (or transparent)
material, and only a number of points inside or on its surface shine. These points are observed
as stars by us.

<P>
In order to verify this theory, Dr. Extreme wants to build motion equations of super stars and
to compare the solutions ofthese equations with observed movements ofstars. As the first step,
he assumes that a super star is sphere-shaped, and has the smallest possible radius such that
the sphere contains all given stars in or on it. This assumption makes it possible to estimate
the volume of a super star, and thus its mass (the density of the invisible material is known).

<P>
You are asked to help Dr. Extreme by writing a program which, given the locations ofa number
of stars, finds the smallest sphere containing all of them in or on it. In this computation, you
should ignore the sizes of stars. In other words, a star should be regarded as a point. You may
assume the universe is a Euclidean space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple data sets. Each data set is given in the following format.

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>

<P>

<!-- MATH
 $x_{1} \ y_{1} \ z_{1}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>z</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>

<P>

<!-- MATH
 $x_{2} \ y_{2} \ z_{2}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB>&nbsp;<I>z</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>

<P>

<SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark>

<P>

<!-- MATH
 $x_{n} \ y_{n} \ z_{n}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>n</SUB>&nbsp;<I>y</I><SUB>n</SUB>&nbsp;<I>z</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
The first line of a data set contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, which is the number of points. It satisfies the
condition <!-- MATH
 $4 \le n \le 30$
 -->
<SPAN CLASS="MATH">4<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2407img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2407img1.png
 ALT="$ \le$">30</SPAN>
<tex2html_verbatim_mark>.

<P>
The locations of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> points are given by three-dimensional orthogonal coordinates: <!-- MATH
 $(x_{i}, y_{i}, z_{i})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>, <I>z</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark>
<!-- MATH
 $(i= 1,\ldots, n)$
 -->
<SPAN CLASS="MATH">(<I>i</I> = 1,..., <I>n</I>)</SPAN>
<tex2html_verbatim_mark>. Three coordinates of a point appear in a line, separated by a space character.

<P>
Each value is given by a decimal fraction, and is between 0.0 and 100.0 (both ends inclusive).
Points are at least 0.01 distant from each other.

<P>
The end of the input is indicated by a line containing a zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, the radius ofthe smallest sphere containing all given points should be printed,
each in a separate line. The printed values should have 5 digits after the decimal point. They
may not have an error greater than 0.00001.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
10.00000 10.00000 10.00000
20.00000 10.00000 10.00000
20.00000 20.00000 10.00000
10.00000 20.00000 10.00000
4
10.00000 10.00000 10.00000
10.00000 50.00000 50.00000
50.00000 10.00000 50.00000
50.00000 50.00000 10.00000
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
7.07107
34.64102
</PRE> 


______________________________________________________
2408||||||false||||||
<P>Determine when the world will end<P>The Towers of Hanoi is a classic recursion problem:<P><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> disks, of size <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> through 1, are stacked in order on the left post of three posts, so the largest disk is on the bottom.<P>The game is to move the stack of disks from the first post to the third post under the following constraints:<P><UL><LI>You may only move one disk at a time. </LI><LI>The disks on each post remain sorted from large (bottom) to small (top). </LI></UL><P>This can be accomplished recursively: to move <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> disks from post A to post C, first move <SPAN CLASS="MATH"><I>K</I> - 1</SPAN> <tex2html_verbatim_mark> disks to the remaining post, B, then move the one remaining disk from post A to post C. Moving the <SPAN CLASS="MATH"><I>K</I> - 1</SPAN> <tex2html_verbatim_mark> disks from post B to C is a reduced version of the original problem where the posts have been relabeled.<P>Legend has it that the Order of the Andes-Chilean Monks, also known as the Order of the ACM, have started the work of moving a 60-disk tower. When they finish, the world will end. Using the above recursive algorithm, this will take 1,152,921,504,606,846,975 moves.<P>You are to determine, to within a year, when the world will end.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain a sequence of starting times and rates in the format:<P><P><BR><SPAN CLASS="MATH"><I>YYYY</I>&nbsp;<I>MM</I>&nbsp;<I>DD</I>&nbsp;<I>TMOVE</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Here <SPAN CLASS="MATH"><I>YYYY</I>&nbsp;<I>MM</I>&nbsp;<I>DD</I></SPAN> <tex2html_verbatim_mark> is the year, month, and day, using the Gregorian calendar, when the tower game began. <SPAN CLASS="MATH"><I>TMOVE</I></SPAN> <tex2html_verbatim_mark> is the number of seconds it takes to move one disk, and is an integer value in the range <!-- MATH
 $0 < TMOVE < 60$
 --><SPAN CLASS="MATH">0 &lt; <I>TMOVE</I> &lt; 60</SPAN> <tex2html_verbatim_mark>. Since the Gregorian calendar system would introduce a significant phase error over this time span, use the following convention:<P><UL><LI>Use Gregorian calendar conventions to convert the starting date to decimal year. </LI><LI>Use the estimate that there are 365.242199 days in a year to determine the ending date of the world. </LI><LI>Report your result using decimal year notation with one digit of precision after the decimal point. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be in decimal year format, with one digit of precision after the the decimal point. The answer must be correct to with a year.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
1721 10 19 23
2001 11 17 59
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
840297140021.6
2192079493218.6
</PRE><P>
______________________________________________________
2409||||||false||||||
<P>Determine the time for filling a vacuum injection mold with resin.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains a sequence of models for rectangular resin molds, approximated as a matrix of cells which are either solid or void. Two cells serve the special purpose of the injection (source) point for the resin, and another is the drain (sink).<P>The number of rows and columns of cells in the mold is given before each mold in the input file, with row and column dimension of 0 denoting the end of the input file. Here are things you can count on for each mold:<P><UL><LI>Each mold is enclosed by solid (<TT>#</TT> symbols). </LI><LI>Each mold contains at least one void (blank), exactly one resin source (<TT>+</TT>) and exactly one resin sink (<TT>-</TT>). </LI><LI>All interior void cells are connected to the sink and source cells. That is, you may reach, through horizontal or vertical movements in void cells only, from any one void cell to either the source or sink. </LI><LI>No mold will consist of more than 100 horizonal or 100 vertical cells. </LI></UL><P><P><BR>Below there is an example input file representing two molds: there, column 20 of line 3 is a <TT>-</TT> (minus or hyphen) symbol. The <TT>[EOL]</TT> denotes the system end-of-line marker, and <TT>[EOF]</TT> denotes the end of the file.<P><P><BR><SPAN CLASS="textbf">MODEL</SPAN><P>The discrete model for resin flow is the following:<P><DL COMPACT><DT>(1)</DT><DD>On each discrete time step, enough resin is injected into the source (<TT>+</TT>) to fill a single cell.</DD><DT>(2)</DT><DD>At <SPAN CLASS="MATH"><I>t</I> = 0</SPAN> <tex2html_verbatim_mark>, this completely fills the source cell with resin, and there is no overflow for the next time step.</DD><DT>(3)</DT><DD>For <SPAN CLASS="MATH"><I>t</I> = 1</SPAN> <tex2html_verbatim_mark> and later, things are a little more complicated:<P><DL COMPACT><DT>(3.1)</DT><DD>The boundary cells are all the void cells which are adjacent (either vertically or horizontally) to completely filled cells, but which are not completely filled themselves. The sink (<TT>-</TT>) cell is always effectively empty. If the sink cell is adjacent to a full cell, then it will be a boundary cell.</DD><DT>(3.2)</DT><DD>Each cell on the boundary is filled by an equal fraction of the injected resin, plus any overflow from the previous injection: if there are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> cells on the boundary, and <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> amount of overflow from the previous time step, then each is filled with <SPAN CLASS="MATH">(1 + <I>A</I>)/<I>N</I></SPAN> <tex2html_verbatim_mark> fraction of resin (in addition to whatever resin currently resided there)</DD><DT>(3.3)</DT><DD>Any cell, except the resin sink (<TT>-</TT>), which is filled to more than capacity by this step is instead filled exactly to capacity. Because of roundoff errors, consider ``full" to be a fill ratio of greater than 0.999999. The overflow resin is added to what will be injected on the next time step.</DD></DL></DD><DT>(4)</DT><DD>After any time step, the sink cell (<TT>-</TT>) is empty, even though some resin may have flowed into it.</DD></DL><P>Here is pseudo-code for advancing the resin configuration for one generic time step. The <TT>overflow</TT> variable is considered to persist between steps, since it is the previously computed value (which should be initially zero) that is used to determine the amount of fill for this step.<P><PRE> 
subroutine move_forward_in_time
    determine number of boundary cells
    fill=(1+overflow)/number_of_boundary_cells
    overflow=0
    loop through all (i,j) which label boundary cells:
        fullness(i,j)=fullness(i,j) + fill
        if (fullness(i,j) &gt; 0.999999) then
            overflow = overflow + (fullness(i,j)-1)
            fullness(i,j)=1
        end if
    end loop
    fullness(sink_i,sink_j)=0
end subroutine
</PRE><P><TT>Fullness(i,j)</TT> is the double precision floating point number representing the fill ratio (0 for empty, 1 for full) of the cell at row <TT>i</TT> and column <TT>j</TT>.<P><P><BR><SPAN CLASS="textbf">NUMERICAL ACCURACY NOTES:</SPAN> Do all floating-point computations using (at least) double precision arithmetic.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each of the mold representations in the input file, your program should determine how long (discrete time units) the injection should occur before the mold completely fills every void. These numbers should be printed on separate lines with no blanks.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
10 21
#####################
#+                 -#
# ##### ##### #######
#    ##    ##       #
# ## ## ##### ## ## #
# ## ## ##### ## ## #
#    ## ##### ## ## #
# ## ## ##### ## ## #
# ## ##    ## ## ## #
#####################
3 5
#####
#+ -#
#####
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
79
2
</PRE><P>
______________________________________________________
2410||||||false||||||
<P>Determine the network prefix and host suffix for an IPV4 address<P>Version 4 of the Internet Protocol (IP) defines class A, class B, and class C addresses. The following table shows an example of each of the three classes of addresses. In the familiar ``dotted decimal" notation, each of the four numerical fields of the address is a non-negative integer not exceeding 255. In the binary form, each field of the address is expressed in base 2 as an 8-bit ``octet". For example, the number 200, written as a sum of powers of 2, equals 128+64+8 = 2 <code>^</code>7 + 2<code>^</code>6 + 2<code>^</code>3 = 11001000 binary.<P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Class</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>IP address in ``dotted decimal" notation</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>IP address in binary</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>64.200.128.3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>01000000.11001000.10000000.00000011</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>160.200.128.3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>10100000.11001000.10000000.00000011</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>202.200.128.3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>11001010.11001000.10000000.00000011</TD></TR></TBODY></TABLE></DIV><P><P><BR><SPAN CLASS="textbf">Definitions:</SPAN><P><P><BR><B>Class A address:</B> The leftmost bit of the leftmost field of the binary representation is 0.<P><B>Class B address:</B> The leftmost two bits of the leftmost field of the binary representation are 10.<P><B>Class C address:</B> The leftmost three bits of the leftmost field of the binary representation are 110.<P><P><BR><SPAN CLASS="textbf">Components of a Class A address:</SPAN><P>The leftmost bit is used only to identify the type of address, therefore it is not part of the actual address. The remaining bits of the leftmost field (in the above example, 1000000) constitute the network prefix (which identifies a particular subnet within the Internet). The remaining fields (11001000.10000000.00000011) are concatenated to form the host suffix (which identifies a particular computer within a subnet).<P><P><BR>Therefore, in the above example,<P><P><BR>Network prefix = 1000000 binary = 64 decimal<P>Host Suffix = 110010001000000000000011 binary = 13139971 decimal<P><P><BR><SPAN CLASS="textbf">Components of a Class B address:</SPAN><P>The leftmost two bits are used only to identify the type of address, therefore they are not part of the actual address. The remaining bits of the leftmost field (in the above example, 100000), concatenated with the second-leftmost field (11001000) constitute the network prefix. The remaining fields (10000000.00000011) are concatenated to form the host suffix.<P><P><BR>Therefore, in the above example,<P><P><BR>Network prefix = 10000011001000 binary = 8392 decimal<P>Host Suffix = 1000000000000011 binary = 32771 decimal<P><P><BR><SPAN CLASS="textbf">Components of a Class C address:</SPAN><P>The leftmost three bits are used only to identify the type of address, therefore they are not part of the actual address. The remaining bits of the leftmost field (in the above example, 01010), concatenated with the second- and third-leftmost fields (11001000.10000000) constitute the network prefix. The remaining field (00000011) forms the host suffix.<P><P><BR>Therefore, in the above example,<P><P><BR>Network prefix = 010101100100010000000 binary = 706688<P>Host Suffix = 00000011 binary = 3<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>One or more IP-addresses in dotted decimal form, like in the sample below. Note:<P><UL><LI>Each line of the input will contain exactly one IP address. </LI><LI>There will be no leading, trailing, or embedded spaces or tabs. </LI><LI>Each IP address will contain four numerical fields. Adjacent fields will be separated by one period (``dot"). </LI><LI>Each numerical field will be a non-negative integer, not exceeding 255. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each line of input will give rise to one line of output, containing the network prefix and host suffix, in the format illustrated by the sample output below (which comes from the sample input):<P>Note, in particular, that each numerical quantity is right-justified in a field of width 9 following the equals sign. Each equals sign is also preceded by one blank space, and the word ``suffix" is preceded by two blank spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
64.200.128.3
160.200.128.3
202.200.128.3
127.255.255.255
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
prefix =       64  suffix = 13139971
prefix =     8392  suffix =    32771
prefix =   706688  suffix =        3
prefix =      127  suffix = 16777215
</PRE><P>
______________________________________________________
2411||||||false||||||
<P>Make do without an OR gate<P>Your cousin Bill has a patented process that produces AND and NOT circuits very efficiently. Unfortunately, OR logic is very expensive. He offers to wash your laundry for the next year if you can fix the problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>A sequence of logical expressions, one per line, which conform to the following grammar:<P><P><BR><TT><B>E :=</B> '!' <B>E</B> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> '(' <B>E</B> '&amp;' <B>E</B> ')' <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> '(' <B>E</B> '<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>' <B>E</B> ')' <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <B>V</B></TT><P><P><BR><TT><B>V :=</B> 'a' <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> 'b' <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> 'z'</TT><P><P><BR>Here the <TT><B>bold</B></TT> are nonterminals or parts of the BNF grammar, while the <TT>'teletype'</TT> are terminals. Of course '<TT>!</TT>' is unary NOT, '<TT>&amp;</TT>' is binary AND, and '<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>' is binary OR.<P>Other than end-of-line terminators marking the end of each expression, there will be no white space in the input file. See an example below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each expression in the input, you are to produce an equivalent expression in the output, i.e., one that gives the same truth value for all possible combinations of the input, but without using the '<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>' OR operation.<P>The generated expression must conform to the same grammar, with the same white space restrictions. A correct output for the sample input would be the sample output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
x
(x&!(y|!z))
!(x|y)
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
x
(x&amp;(!y&amp;z))
(!x&amp;!y)
</PRE><P>
______________________________________________________
2412||||||false||||||
<P>Using the telephone pad for alphabetic input.<P>A telephone set has 12 buttons, as shown in the figure below (and some additional buttons, which are not relevant to this problem). On certain occasions (for example, when the user wishes to add a new name to the private phone directory stored in the telephone set) the telephone set is in alphabetical entry mode. In alphabetical entry mode, the user can enter a certain letter by pressing the corresponding digit key as many times as the position (in left-to-right order) of the desired letter on that particular key. For example, pressing the key 7 once means a 'P', whereas pressing the same key four times means an 'S'. The # key is used to separate successive letters. However, as shown by the examples to be given, pressing the # key between two letters may be omitted when it is clear where one letter ends and the next one begins.<P><P><BR><DIV ALIGN="CENTER"><B>Telephone Keypad</B></DIV><P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>ABC</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>DEF</TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>GHI</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>JKL</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>MNO</TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PQRS</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>TUV</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>WXYZ</TD></TR></TBODY></TABLE></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><UL><LI>The input, contains one or more lines, and each line contains one or more characters. </LI><LI>The only characters (in addition to end-of-line and end-of-file) that may appear in the input are the digits `<TT>2</TT>' through `<TT>9</TT>' and the pound character `<TT>#</TT>'. There will not be leading or trailing blank spaces or tabs in the input. </LI><LI>The first character of every line will be a digit. The last character (except for end-of-line) of every line will also be a digit. </LI><LI>The last line of the input will be terminated by end-of-line. </LI><LI>Each digit or `<TT>#</TT>' in the input will be interpreted by your program as a keystroke on the above telephone set in alphabetical entry mode. </LI><LI>The input will not contain two or more consecutive separators (<TT>#</TT>). </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><UL><LI>Every line of input will produce one line of output, consisting of the alphabetical interpretation of the input line (in upper case letters). </LI><LI>The end-of-line (in addition to the `<TT>#</TT>' character) will also be interpreted by your program as a separator between letters. In other words, the encoding of a letter will not cross a line boundary in the input. </LI><LI>The separator `<TT>#</TT>' between letters may be omitted between two digits that are different. For example, in the first line of the above input, the separator between 222 and 6 has been omitted, inserting a separator at this point would not affect the output. On the other hand, in the second line of input, you see a redundant separator between 66 and 8. Removing this separator will not affect the output. </LI><LI>The separator `<TT>#</TT>' between letters may also be omitted in the case of a "long" stream of the same digit: a stream of more than four occurrences of 7, more than four occurrences of 9, or a stream of more than three occurrences of one of the other digits. For example, in the third line of the above input, there is a stream of five 6's. Inserting a separator after the first three 6's would not affect the output. Similarly, in the fourth line of the above input, removing the separator between the three 6's and the two 6's would not affect the output. More generally, in case of a long stream of 6's (or of any other digit other than 7 or 9) a separator could be inserted after every third 6 (starting from the left), without affecting the output. For example, 99996666666666666666 is equivalent to 9999666#666#666#666#666#6, which would produce the output ZOOOOOM. The same rule applies to long streams of 7's or 9's, with "three" replaced by "four." </LI><LI>The output will not contain blank lines. Each line of output will contain only upper case letters. </LI></UL><P>With the sample input below, your program should create the corresponding sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
2#2226
777666222559996#6668866#8244466
777334#444666662555
7#777666477726#6444664222666#6683377778
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
ACM
ROCKYMOUNTAIN
REGIONAL
PROGRAMMINGCONTEST
</PRE><P>
______________________________________________________
2413||||||false||||||
<P>As junior member of the Computer Algebra System group, you get to work on arithmetic of integer polynomials.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains a sequence of polynomial addition and multiplication problems. Each problem has the form:<P><P><BR><SPAN CLASS="MATH"><I>operator</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>operand</I>1</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>operand</I>2</SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>operator</I></SPAN> <tex2html_verbatim_mark> can be either `<TT>+</TT>' (add) or `<TT>*</TT>' (multiply). Each <SPAN CLASS="MATH"><I>operand</I></SPAN> <tex2html_verbatim_mark> is a sequence of lines of the form<P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>C</I>(1)&nbsp;<I>P</I>(1)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>C</I>(2)&nbsp;<I>P</I>(2)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>C</I>(3)&nbsp;<I>P</I>(3)</SPAN> <tex2html_verbatim_mark><BR>.<BR>.<BR>.<BR><SPAN CLASS="MATH"><I>C</I>(<I>N</I>)&nbsp;<I>P</I>(<I>N</I>)</SPAN> <tex2html_verbatim_mark><P><P><BR>This represents the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>-term polynomial<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>C</I>(1) <TT>*</TT> <I>x</I><SUP>P(1)</SUP> + <I>C</I>(2) <TT>*</TT> <I>x</I><SUP>P(2)</SUP> + <I>C</I>(3) <TT>*</TT> <I>x</I><SUP>P(3)</SUP> +...+ <I>C</I>(<I>N</I>) <TT>*</TT> <I>x</I><SUP>P(N)</SUP></DIV><P><tex2html_verbatim_mark></P><P>Each polynomial will have at least one term, each term will have an integer coefficient, with <EM>no restriction</EM> on magnitude. The powers will be non-negative, but also without restriction on magnitude. While the powers may repeat or be in any order in the input file, the powers must appear in strictly decreasing order in the output file. For example, the polynomial sum <SPAN CLASS="MATH">(<I>x</I> + 3) + (- 2<I>x</I><code>^</code>2 - 5)</SPAN> <tex2html_verbatim_mark>, followed by the product <SPAN CLASS="MATH">(2<I>x</I> + 3) <TT>*</TT> 0</SPAN> <tex2html_verbatim_mark> would be represented in the input file as shown in the sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be the corresponding sums and products, in the same format as the input. For the example below, the correct output would be the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
+
2
1 1
3 0
2
-2 2
-5 0

*
2
2 1
3 0
1
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
3
-2 2
1 1
-2 0

1
0 0
</PRE><P><P><P><BR><B>Normalization note:</B> The only time a zero will appear as a coefficient in the output is when the polynomial is exactly zero. In this case, the polynomial will be represented as:<P><PRE> 
    1
    0 0
</PRE><P>
______________________________________________________
2414||||||false||||||
<P>Simulate the gopher-hole game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>A sequence of blank-line-separated board configurations for the gopher-hole game. Each board configuration in the input file has the format<P><P><BR><SPAN CLASS="MATH"><I>NROWS</I>&nbsp;<I>NCOLUMNS</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>NHOLES</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>HOLE</I><IMG WIDTH="57" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2414img1.png ALT="$ \_ROW$">(1)&nbsp;<I>HOLE</I><IMG WIDTH="98" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2414img1.png ALT="$ \_COLUMN$">(1)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>HOLE</I><IMG WIDTH="57" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2414img1.png ALT="$ \_ROW$">(2)&nbsp;<I>HOLE</I><IMG WIDTH="98" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2414img1.png ALT="$ \_COLUMN$">(2)</SPAN> <tex2html_verbatim_mark><BR>.<BR>.<BR>.<BR><SPAN CLASS="MATH"><I>HOLE</I><IMG WIDTH="57" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2414img1.png ALT="$ \_ROW$">(<I>N</I>)&nbsp;<I>HOLE</I><IMG WIDTH="98" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2414img1.png ALT="$ \_COLUMN$">(<I>N</I>)</SPAN> <tex2html_verbatim_mark><P><P><BR>The upper left corner of the board is row 1 column 1. No playing field will be larger than 100 rows by 100 columns. This is the number of patches in the field. Immediately following this are a sequence of picks listed by row and column, one per line. For example, an input file containing two games would be as the sample below.<P>This represents two games. In game 1, there are 3 holes at (1,1), (1,3) and (2,1). The player makes one play, inspecting patch (5,5). In game 2, there are 2 holes at (2,1) and (1,2). The player inspects patch (5,5), followed by (1,1), and finally (2,1). Patch coordinates are given row-first.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Views of the board after the player makes each of the listed sequence of moves:<P><DL COMPACT><DT>(1)</DT><DD>The playing field is surrounded by a "fence." This is depicted in the output file with a leading row of the form `<TT>+---+</TT>', where the number of hyphens match the number of columns on the field. Each row is preceded and succeeded by a <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> (pipe) character. A final line of the form `<TT>+---+</TT>' is printed to mark the bottom of the field. Within the field, each patch is represented by an ASCII character. Initially, all patches are uninspected and are marked by a pound (<TT>#</TT>) symbol.</DD><DT>(2)</DT><DD>If a move is not a gopher hole, then the inspected patch is "cleared" to reveal the sum of gopher holes adjacent (horizontally, vertically, or diagonally) to this hole. A sum of zero is represented as a blank, while other sums are represented by the corresponding digit. If an inspected patch has no adjacent gopher holes, then all adjacent patches are inspected. This last rule is applied recursively.</DD><DT>(3)</DT><DD>If a player inspects the location of one of the holes, the game ends because the player "fell in a hole." In this case, the board configuration is printed with the same information as before the losing play was made, with these two execptions:<UL><LI>A `<TT>*</TT>' marks the location of each gopher hole, except the actual hole which was inspected by the player. </LI><LI>A `<TT>!</TT>' marks the location of the hole inspected by the player. </LI></UL></DD></DL><P>The players view after each move is printed in the output file, separated by blanks. For the following sample input, the corresponding output should be as the sample output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
10 10
3
1 1
1 3
2 1
5 5

10 10
2
2 1
1 2
5 5
1 1
2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
+----------+
|###1      |
|#311      |
|11        |
|          |
|          |
|          |
|          |
|          |
|          |
|          |
+----------+

+----------+
|##1       |
|#21       |
|11        |
|          |
|          |
|          |
|          |
|          |
|          |
|          |
+----------+

+----------+
|2#1       |
|#21       |
|11        |
|          |
|          |
|          |
|          |
|          |
|          |
|          |
+----------+

+----------+
|2*1       |
|!21       |
|11        |
|          |
|          |
|          |
|          |
|          |
|          |
|          |
+----------+
</PRE><P>
______________________________________________________
2415||||||false||||||
<P>Be a gopher-hole player's assistant.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>A sequence of player's views of gopher hole games, formatted as in the output of GOPHER HOLE I. The games are not necessarily successive nor even from the same field. None of the views will be after the player picked a hole.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output will look the same as the input, except for the uncleared locations next to (horizontally, vertically, or diagonally) cleared locations. These are printed with the following notation:<P>A `<TT>*</TT>' is printed if it can be logically concluded that a hole is at this location.<P>A `<TT>$</TT>' is printed if it can be logically concluded that a hole is not at this location.<P>A `<TT>?</TT>' if no deterministic conclusion can be drawn about the existence of a hole at this location.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
+----------+
|###1      |
|#311      |
|11        |
|          |
|          |
|          |
|          |
|          |
|          |
|          |
+----------+

+----------+
|##1       |
|#21       |
|11        |
|          |
|          |
|          |
|          |
|          |
|          |
|          |
+----------+
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
+----------+
|*$*1      |
|*311      |
|11        |
|          |
|          |
|          |
|          |
|          |
|          |
|          |
+----------+

+----------+
|$*1       |
|*21       |
|11        |
|          |
|          |
|          |
|          |
|          |
|          |
|          |
+----------+
</PRE><P>
______________________________________________________
2416||||||false||||||
<P>Play to win the 100's game. This is a children's math game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>A sequence of 100's game deals. Each card is marked with a single digit. The first line lists six cards. Each subsequent deal is four cards until the end of the game, marked by a blank line or the end-of-file. A typical input file would look like the Sample Input below.<P><P><P><BR><SPAN CLASS="textbf">GAME</SPAN><P>After each deal, you have six cards in your hands. You play by choosing two pairs of cards so they represent numbers between 00 and 99. Your goal is to pick them so that the sum of the two numbers is as close as possible to 100. Your score (a penalty) is how close to 100 your sum is.<P>Even though the sequence of cards is represented in the input file, in actual play you are not aware of which cards will come next. Therefore, your algorithm must be greedy: choosing one of the best plays of the given hand irrespective of how that may benefit or cost the value of a later hand.<P>After you play, the cards you play are discarded, but the two remaining are left for the next round of cards.<P>Your score is the sum of penalties for each hand.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each round, you should generate a line of output corresponding to (one of the) closest picks available from your hand. The format for this is<P><P><BR><TT><SPAN CLASS="MATH"><I>number</I></SPAN> <tex2html_verbatim_mark>+<SPAN CLASS="MATH"><I>number</I></SPAN> <tex2html_verbatim_mark>=<SPAN CLASS="MATH"><I>sum</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where there are no intervening spaces. Leading zeros are printed for each number on the left.<P>After a game, the total penalty should be printed, in the form:<P><P><BR><TT>score: <SPAN CLASS="MATH"><I>SCORE</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>For the sample input file, the sample output below would be a correct output sequence. Note that there are potentially many correct optimal plays corresponding to a given game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
675356
2912
7093
6062
6187

202375
9228
9736
1293
1947
8450
3610
6320
6155
4765
6937
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
65+35=100
79+21=100
07+93=100
66+26=92
20+81=101
score: 9
23+75=98
02+98=100
22+79=101
31+69=100
21+79=100
43+58=101
40+60=100
33+62=95
51+50=101
46+56=102
61+39=100
score: 12
</PRE>
______________________________________________________
2417||||||false||||||
<P>Hart is engaged in playing an interesting game, Gnome Tetravex, these days. In the game, at the beginning, the player is given <SPAN CLASS="MATH"><I>n</I>*<I>n</I></SPAN> <tex2html_verbatim_mark> squares. Each square is divided into four triangles marked four numbers (range from 0 to 9). In a square, the triangles are the left triangle, the top triangle, the right triangle and the bottom triangle. For example, Fig. 1 shows the initial state of <SPAN CLASS="MATH">2*2</SPAN> <tex2html_verbatim_mark> squares.<P><DIV ALIGN="CENTER"><IMG WIDTH="358" HEIGHT="294" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2417a.jpg ALT="\epsfbox{p2417a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig. 1 The initial state with <SPAN CLASS="MATH">2*2</SPAN> <tex2html_verbatim_mark> squares</DIV><P>The player is required to move the squares to the termination state. In the termination state, any two adjoining squares should make the adjacent triangle marked with the same number. Fig. 2 shows one of the termination states of the above example.<P><DIV ALIGN="CENTER"><IMG WIDTH="358" HEIGHT="294" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2417a.jpg ALT="\epsfbox{p2417b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig. 2 One termination state of the above example</DIV><P>It seems the game is not so hard. But indeed, Hart is not accomplished in the game. He can finish the easiest game successfully. When facing with a more complex game, he can find no way out.<P>One day, when Hart was playing a very complex game, he cried out, ``The computer is making a goose of me. It's impossible to solve it." To such a poor player, the best way to help him is to tell him whether the game could be solved. If he is told the game is unsolvable, he needn't waste so much time on it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several game cases. The first line of each game case contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2417a.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2417a.jpg ALT="$ \le$">5</SPAN> <tex2html_verbatim_mark>, indicating the size of the game.<P>The following <SPAN CLASS="MATH"><I>n</I> <TT>*</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> lines describe the marking number of these triangles. Each line consists of four integers, which in order represent the top triangle, the right triangle, the bottom triangle and the left triangle of one square.<P>After the last game case, the integer <TT>0</TT> indicates the termination of the input data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>You should make the decision whether the game case could be solved. For each game case, print the game number, a colon, and a white space, then display your judgment. If the game is solvable, print the string ``<TT>Possible</TT>". Otherwise, please print ``<TT>Impossible</TT>" to indicate that there's no way to solve the problem.<P>Print a blank line between each game case.<P><P><BR><B>Note:</B> Any unwanted blank lines or white spaces are unacceptable.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
5 9 1 4
4 4 5 6
6 8 5 4
0 4 4 3
2
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Game 1: Possible

Game 2: Impossible
</PRE><P>
______________________________________________________
2418||||||false||||||
<P>In World War II, Germany once used an electronic encryption machine called Enigma, which played a decisive role in the initial victories of Nazi Germany. It was proved to be one of the most reliable encryption systems in history. However, it was the blind trust on the reliability of the machine that brought about the doom of its user.<P>The structure of a one-rotor Enigma is shown as follows (the Enigma has only six keys):<P><DIV ALIGN="CENTER"><IMG WIDTH="484" HEIGHT="214" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2418a.jpg ALT="\epsfbox{p2418a.eps}"> <tex2html_verbatim_mark></DIV><P>The key element of the Enigma is the rotor, as shown in the second figure, which uses electronic circuits to transform plaintext (input from keyboard) into cryptograph (output on screen). When one key on the keyboard is pressed, the corresponding cryptograph is shown on screen. Then the rotor will automatically revolve a one-letter-step to a different position. The following figures illustrate how the rotor works when letter ``b" is pressed three successively times:<P><DIV ALIGN="CENTER"><IMG WIDTH="440" HEIGHT="588" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2418a.jpg ALT="\epsfbox{p2418b.eps}"> <tex2html_verbatim_mark></DIV><P>When letter ``b" is pressed for the first time, the signal goes through the circuit and ``A" is shown on screen. When the key is released, the rotor revolves one-letter-step to a different position that changes all the corresponding circuits so that each letter now has a different cryptograph. When letter ``b" is pressed for the second time, the corresponding cryptograph is ``C". So when letter ``b" is pressed for the third time, the cryptograph is ``E" according to the principle specified above.<P>Now the following figure shows the structure of a two-rotor Enigma.<P><DIV ALIGN="CENTER"><IMG WIDTH="770" HEIGHT="203" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2418a.jpg ALT="\epsfbox{p2418c.eps}"> <tex2html_verbatim_mark></DIV><P>The difference is that when a key is released, the second rotor won't revolve a step until the first one has finished one circle and returns to the original position. This is also the same in the case of three-rotor Enigma. That is: Only after the first rotor has finished one circle and return to the initial status, the second rotor will revolve a step.<P>And only after the second rotor has finish one circle, the third rotor will revolve a step.<P>However, how did the Allied Forces obtain the information encrypted by Enigma? A person named Hans-Thilo Schimdt was very essential. He acted as a spy and provided the initial status of the three rotors in each Enigma to the Allied Forces once a month. The Allied Forces thus got everything they wanted by deciphering the intercepted cryptograph using the information offered by the spy.<P>Now, please design a program to obtain the plaintexts using the information offered by the Allied Forces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases representing several three-rotor Enigmas. The last test case in the input file is followed by a line containing a number 0.<P>Each case begins with a line containing an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2418a.jpg ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2418a.jpg ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark> which indicates the number of sequential letters each rotor has. The first letter will always be A. (for example, <SPAN CLASS="MATH"><I>m</I> = 6</SPAN> <tex2html_verbatim_mark> tells each rotor has 6 keys from A to F). The following three lines describe the initial status of the three rotors respectively. Each of them contains a string consisting of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> capital character. For instance, a rotor with the initial status ``BADFEC" indicates that the initial encrypt mechanism is to convert ``abcdef" to ``BADFEC", that is, original letter ``a" corresponding to cryptograph letter ``B", ``b" to ``A", ``c" to ``D", ``d" to ``F", ``e" to ``E" and ``f" to ``C". The forth line of each case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> which tells the number of cryptographs generated by the above Enigma. Then the following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines are the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> cryptographs respectively, which consist of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> capital characters each.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the output should consist of two parts. The first line is the number of Enigma and a colon. The following lines are the plaintexts deciphered from the corresponding cryptographs. Each plaintext should be printed in one line.<P>Insert a blank line between test cases.<P><P><BR><B>Note:</B> The characters in the plaintext should be converted to the corresponding lowercases before they are printed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
BADFEC
ABCDEF
ABCDEF
1
ACE
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Enigma 1:
bbb
</PRE><P>
______________________________________________________
2419||||||false||||||
<P>Jerry, a middle school student, addicts himself to mathematical research. Maybe the problems he has thought are really too easy to an expert. But as an amateur, especially as a 15-year-old boy, he had done very well. He is so rolling in thinking the mathematical problem that he is easily to try to solve every problem he met in a mathematical way. One day, he found a piece of paper on the desk. His younger sister, Mary, a four-year-old girl, had drawn some lines. But those lines formed a special kind of concave polygon by accident as Fig. 1 shows.<P><DIV ALIGN="CENTER"><IMG WIDTH="164" HEIGHT="128" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2419a.jpg ALT="\epsfbox{p2419a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig. 1 The lines his sister had drawn</DIV><P>``Great!" he thought, ``The polygon seems so regular. I had just learned how to calculate the area of triangle, rectangle and circle. I'm sure I can find out how to calculate the area of this figure." And so he did. First of all, he marked the vertexes in the polygon with their coordinates as Fig. 2 shows. And then he found the result-0.75 effortless.<P><DIV ALIGN="CENTER"><IMG WIDTH="230" HEIGHT="216" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2419a.jpg ALT="\epsfbox{p2419b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig.2 The polygon with the coordinates of vertexes</DIV><P>Of course, he was not satisfied with the solution of such an easy problem. ``Mmm, if there's a random polygon on the paper, then how can I calculate the area?" he asked himself. Till then, he hadn't found out the general rules on calculating the area of a random polygon. He clearly knew that the answer to this question is out of his competence. So he asked you, an erudite expert, to offer him help. The kind behavior would be highly appreciated by him.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input data consists of several figures. The first line of the input for each figure contains a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of vertexes in the figure. <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2419a.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2419a.jpg ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>.<P>In the following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each contain a pair of real numbers, which describes the coordinates of the vertexes, <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>. The figure in each test case starts from the first vertex to the second one, then from the second to the third, ...and so on. At last, it closes from the nth vertex to the first one.<P>The input ends with an empty figure (<SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark>). And this figure not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>As shown below, the output of each figure should contain the figure number and a colon followed by the area of the figure or the string ``<TT>Impossible</TT>".<P>If the figure is a polygon, compute its area (accurate to two fractional digits). According to the input vertexes, if they cannot form a polygon (that is, one line intersects with another which shouldn't be adjoined with it, for example, in a figure with four lines, the first line intersects with the third one), just display ``<TT>Impossible</TT>", indicating the figure can't be a polygon. If the amount of the vertexes is not enough to form a closed polygon, the output message should be ``<TT>Impossible</TT>" either.<P>Print a blank line between each test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
0 0
0 1
0.5 0.5
1 1
1 0
4
0 0
0 1
1 0
1 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Figure 1: 0.75

Figure 2: Impossible
</PRE><P>
______________________________________________________
2420||||||false||||||
<P>
The NTA (Non-deterministic Tree Automata) is a kind of tree structure device. The device is built in a set of operating rules. With these rules the device can produce several signals, which will form a signal system. In such a system, one signal is the starting signal, several signals are the acceptable signals, and the others are the auxiliary ones. A pair of signals is said to be an acceptable pair if both two signals of the pair are acceptable.

<P>
The trees discussed here are all binary trees. Every non-leaf node has two successors. In any finite tree, each node has a signal-transmitting element. When a signal arrives at one node, the signal meets the signal transmitting substance, and triggers off signal reactions, which will produce several pairs of signals. Then the device selects a pair of signals non-deterministically and sends them to its successors. The first signal in the signal pair is sent to the left successive node and the second one is sent to the right successive node. 

<P>
The whole operation for an NTA is as follows:

<P>
The device first sends the starting signal to the root node. According to the signal transmitting substance at the root node, the device selects a pair of signals non-deterministically and sends the first to the left son and the second to the right son. Each of the two signals then meets the signal transmitting substance at the corresponding node and produces another two signals. The course proceeds down until the signals arrive at the leaves. 

<P>
If a signal reaches one leaf and the leaf can produce a pair of acceptable signals, we say the leaf is ``shakable". A transmission of signals from the root to leaves is said to be valid if all leaves are ``shakable". A tree structure with signal transmitting substance is valid if there exists such a valid transmission. A tree is invalid if all the transmissions are invalid.

<P>
For simplicity, we denote the signal transmitting elements by consecutive lowercase letters ``a", ``b", ``c", etc.. The signals of an NTA are consecutive numbers <!-- MATH
 $0,1,2, \ldots$
 -->
<SPAN CLASS="MATH">0, 1, 2,...</SPAN>
<tex2html_verbatim_mark>, and so on. The first signal 0 is always a starting signal. Thus the signals for a 4-signal NTA are ``0" ``1" ``2" and ``3". Accepting signals are arranged at the end of the number sequence so that if a 4-signal NTA has two accepting signals, the accepting signals are ``2" and ``3". The transition rules of signals are based on a transition table. For example, the following table describes a transition table with four signals ``0", ``1", ``2", ``3" and with three signal transmitting elements ``a", ``b" and ``c".

<P>

<P>
<BR>

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
T </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> a </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> b </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> c </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (1,2) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (2,1) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (1,0) </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (2,2) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (0,2)(1,0) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (3,2) </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (2,2) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (2,3) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (1,2) </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (1,2) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (2,1) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> (3,2) </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
In this transition table some reactions of signals on certain signal transmitting elements are deterministic, and others are non-deterministic. In the example above, if signal ``1" reaches the node with the transmitting element ``b", the reaction is non-deterministic.

<P>
Now your task is to write a program to judge if a tree structure with certain signal transmitting substance is valid.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several cases. Each case describes a sequence of NTA descriptions and some initial tree configurations. The first line for each case consists of three integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>. The integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of signals, <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> indicates the number of accepting signals, and <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> is number of signal transmitting elements. The following <!-- MATH
 $n \times k$
 -->
<SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>k</I></SPAN>
<tex2html_verbatim_mark> lines describe the transition table in row-major order. Each transition of a signal on signal transmitting element is given on a separate line. On such line every two numbers represent a possible transition.

<P>
This is followed by the description of tree structures. For every tree structure a number <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> is given on a separate line to indicate the level of the tree. The following <SPAN CLASS="MATH"><I>L</I> + 1</SPAN>
<tex2html_verbatim_mark> lines containing a sequence of letters describe the tree structure. Each level is described in one line. There exist one space between two successive letters. The 0-th level begins firstly. In the tree structure, the empty nodes are marked by ``<TT>*</TT>". The tree structure with <SPAN CLASS="MATH"><I>L</I> = - 1</SPAN>
<tex2html_verbatim_mark> terminates the configurations of tree structures for that NTA, and this structure should not be judged.

<P>
The input is terminated by a description starting with <SPAN CLASS="MATH"><I>n</I> =</SPAN>
<tex2html_verbatim_mark><TT>0</TT>, <SPAN CLASS="MATH"><I>m</I> =</SPAN>
<tex2html_verbatim_mark><TT>0</TT> and <SPAN CLASS="MATH"><I>k</I> =</SPAN>
<tex2html_verbatim_mark><TT>0</TT>. This description should not be processed.

<P>

<P>
<BR>

<B>Note:</B> In each case, NTA will have at most l5 signals and 10 characters. The level of each tree will be no more than 10.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each NTA description, print the number of the NTA (NTAl, NTA2, etc.) followed by a colon. Then for each initial tree configuration of the NTA print the word ``<TT>Valid</TT>" or ``<TT>Invalid</TT>". 

<P>
Print a blank line between NTA cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 2 3
1 2
2 1
1 0
2 2
0 2 1 0
3 2
2 2
2 3
1 2
1 2
2 1
3 2
3
a
b c
a b c b
b a b a c a * *
2
b
a b
b c * *
-1
0 0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
NTA1:
Valid
Invalid
</PRE> 

<P>

______________________________________________________
2421||||||false||||||
<P>
Mr. Ronald is responsible for the administration of the mainframe in ACM (Agent on Computing of Mathematics). The agent undertakes the mathematical computing jobs from some companies, and gain the rewards after has fulfilled the jobs on the mainframe. So the mainframe is very valuable to ACM. Mr. Ronald is required to arrange the order of those jobs running on mainframe. Once a job is to run, he examines the free resources for the job. If the resources meet the job's requirement, he assigns those resources to the job. Otherwise, the job will be suspended until there are enough resources.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2421.eps}$
 -->
<IMG
 WIDTH="460" HEIGHT="191" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2421.jpg
 ALT="\epsfbox{p2421.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Because of unfamiliar with the task at first, he turned everything upside down. As time went by, he became competent on it. Moreover, he had concluded a set of byelaw as following:

<P>

<OL>
<LI>The mainframe has <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> CPUs and <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> memories can be assigned.
</LI>
<LI>There exists a queue for the jobs waiting to be executed. You may assume the queue is large enough to hold all the waiting jobs.
</LI>
<LI>A job <SPAN CLASS="MATH"><I>J</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> which need Ai CPUs and <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> memories, reaches the queue on time <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. The job is required to be accomplished before time <SPAN CLASS="MATH"><I>U</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. After successfully completed, ACM may get<SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>($) as the reward. If it finishes before the timeline, the extra bonus is <SPAN CLASS="MATH"><I>W</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>($) per hour. If the job is late, the punishment is <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>($) per hour. For example, we may assume that a job's value is 10$, its timeline is 8, and the punishment is 2$ per hour. If the job is completed at time 10, ACM will get <!-- MATH
 $10-(10-8)\ast 2=6$
 -->
<SPAN CLASS="MATH">10 - (10 - 8) <TT>*</TT> 2 = 6</SPAN>
<tex2html_verbatim_mark>$.
</LI>
<LI>When the job start executing, the required CPUs and memories are seized by this job, and couldn't be assigned again for the other job to be executed simultaneously. After completing the job, those resources will be released. If the resources are enough, more jobs could be executed simultaneously.
</LI>
<LI>For the sake of the share in the mainframe's computing capability, each job will be finished just in an hour from the start of executing. You may assume each job costs exactly one hour.
</LI>
<LI>When there are no jobs to be executed, the mainframe will be idle until a job arrives at the job queue.
</LI>
<LI>If there are more than one jobs arrive at the queue, the more valuable job will be executed first. You may assume the values of the jobs are always unequal <!-- MATH
 $(V_{i} \neq V_{j})$
 -->
<SPAN CLASS="MATH">(<I>V</I><SUB>i</SUB> <IMG
 WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2421.jpg
 ALT="$ \neq$"> <I>V</I><SUB>j</SUB>)</SPAN>
<tex2html_verbatim_mark>.
</LI>
<LI>If the free CPUs or memories couldn't satisfy the requirement of the job, the job will be suspended for an hour without occupying any resources. An hour later, the resources will be examined again for this job, regardless the other jobs in the queue. If the requirement unsatisfied again, it remains suspended for the next hour, and other jobs in the queue will try to be assigned the resources. Otherwise the job will seize the required CPUs and memories and start executing.
</LI>
<LI>When more than one jobs are suspended, the earlier arrived will try to be assigned first.
</LI>
</OL>

<P>
Using the byelaw, Mr. Ronald may deal with the routines very well. But now, besides the routines, ACM ask him to compute the income according to the job list. Given the timeline <SPAN CLASS="MATH"><I>F</I></SPAN>
<tex2html_verbatim_mark>, he has to calculate the jobs that had been executed or should be executed. Of course, according to job <SPAN CLASS="MATH"><I>J</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, if <SPAN CLASS="MATH"><I>U</I><SUB>i</SUB> &gt; <I>F</I></SPAN>
<tex2html_verbatim_mark> and the job hadn't been executed, it shouldn't been taken into account; but those which had been executed or <!-- MATH
 $U_{i} \le F$
 -->
<SPAN CLASS="MATH"><I>U</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2421.jpg
 ALT="$ \le$"><I>F</I></SPAN>
<tex2html_verbatim_mark> should been counted. If the job hadn't been executed, it will not bring ACM any value, which means only punishment to the timeline should be calculated
Indeed, his programming ability is not good enough, and he does not like to compute manually. So he is uneasy about it. Could you help him to solve this problem?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several test cases, each of which describes the mainframe's resources and the job list. Each test case begins with a line containing a single integer <SPAN CLASS="MATH"><I>F</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le F \le 10000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2421.jpg
 ALT="$ \le$"><I>F</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2421.jpg
 ALT="$ \le$">10000</SPAN>
<tex2html_verbatim_mark>, the time line. The following line consists of three integers <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(M, N, L \ge 0)$
 -->
<SPAN CLASS="MATH">(<I>M</I>, <I>N</I>, <I>L</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2421.jpg
 ALT="$ \ge$">0)</SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> is the number of CPU in the mainframe, and <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the memory size. <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> represents the number of jobs in the job list. There will be 10000 jobs at most.

<P>
The subsequent <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> lines in the test case describe the information of the jobs. The data which describing job <SPAN CLASS="MATH"><I>J</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> consist of 7 integers <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>U</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>W</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> indicate the requirements on CPU and memory <!-- MATH
 $(A_{i}, B_{i} \ge 0)$
 -->
<SPAN CLASS="MATH">(<I>A</I><SUB>i</SUB>, <I>B</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2421.jpg
 ALT="$ \ge$">0)</SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>U</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> indicate the job's arriving time and the timeline <!-- MATH
 $(0 \le T_{i}<U_{i})$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2421.jpg
 ALT="$ \le$"><I>T</I><SUB>i</SUB> &lt; <I>U</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark>. <!-- MATH
 $V_{i}, W_{i}, X_{i}$
 -->
<SPAN CLASS="MATH"><I>V</I><SUB>i</SUB>, <I>W</I><SUB>i</SUB>, <I>X</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are the reward, bonus and punishment of the job <!-- MATH
 $(V_{i}, W_{i}, X_{i} \ge 0)$
 -->
<SPAN CLASS="MATH">(<I>V</I><SUB>i</SUB>, <I>W</I><SUB>i</SUB>, <I>X</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2421.jpg
 ALT="$ \ge$">0)</SPAN>
<tex2html_verbatim_mark>.
The input file ends with an empty test case (<SPAN CLASS="MATH"><I>F</I> = 0</SPAN>
<tex2html_verbatim_mark>). And this case should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program must compute the total income of the mainframe according to the job list. For each test case, print the case number, a colon, and a white space, then the income.

<P>
Print a blank line after each test case.

<P>

<P>
<BR>

<B>Note:</B> Don't count the jobs which hadn't been executed, and their timelines are later than <SPAN CLASS="MATH"><I>F</I></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10
4 256 3
1 16 2 3 10 5 6
2 128 2 4 30 10 5
2 128 2 4 20 10 5
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1: 74
</PRE> 

<P>

______________________________________________________
2422||||||false||||||
<P>
Once upon a time, there lived Catherine Ironfist, the Queen of Enroth. One day, she received the news of her father's death. So she sailed for Erathia to attend her father's funeral. Fearing the worst, she assembled a military fleet as her escort. On reaching the coast of Erathia, Catherine found an allied wizard's tower, devastated from battle and abandoned. There she learned that a black-hearted knight poisoned her father using a goblet of wine, and Erathia was falling to the enemies. And then, she mustered local armies, and marched to Erathia's castle, restoring lost land along the way.

<P>
During the battles, she found that the equipments for the soldiers were in urgent need. And she knew clearly that the best equipments were made by the battle dwarf's workshop in the world. The workshop's equipments were well known for the firmness and top-quality. ``Cloak of the Undead King", ``Armor of the Damned", ``Angelic Helm" are the nonesuch ones. But unfortunately, the workshop was seated at the Erathia's castle, the territory under the enemy's control. So she sent a brave volunteer to come into the castle and asked for the workshop's help.

<P>
``It's our pleasure to help the righteous heroine." Rion, the leader of the workshop sent the message to Catherine, `` We haven't enough resources to build the nonesuch equipments. So we'll try to offer the ordinary equipments as more as possible. Still, those ones are much better the equipments made by other workshops. But we have faced a difficult problem. The castle is in a state of siege. The guards prohibited the equipments to be carried away from the castle. We have to ask for the trade caravans' help. As you know, each trade caravan's capability of carrying equipments is limited. If they had carried a little more, they would be detected by the guards, which would lead them into the prison. So you have to arrange how to carry these equipments."

<P>
The workshop would offer helms, armors and boots. These three ones had different defend capabilities. Also, their weight and size were different from each other. What's more, Rion had told Catherine that if armed with those three ones together, they would form a set of equipments, which might provide much more defend capability. As far as the trade caravan was concerned, each one had its special weight limitation and size limitation. Catherine had to make the decision on how to arrange the transportation plan to provide her soldiers as more defend capabilities as possible. Could you help her to finish the plan?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input describes several test cases. The first line of input for each test case contains a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, the number of trade caravans <!-- MATH
 $(0 \le n \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2422img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2422img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>.

<P>
The following four lines describe the information of those equipments. The first line contains three integers <SPAN CLASS="MATH"><I>w</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, indicating the weight, size and defend capabilities of the helm. The integers <SPAN CLASS="MATH"><I>w</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> in the second line represent the weight, size and defend capabilities of the armor. Also, in the third line, <SPAN CLASS="MATH"><I>w</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> are the weight, size and defend capabilities of the boot. The fourth line contains four integers <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark>. Among those integers, <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> are the number of helms, armors and boots in a set of equipments, d4 is the capability of this set.

<P>
In the test case, following those data are <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines, describing the carrying capabilities of the trade caravans. Each line contains two integers, <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, indicating the weight limit and size limit of a trade caravan.

<P>
The input is terminated by a description starting with <SPAN CLASS="MATH"><I>n</I> =</SPAN>
<tex2html_verbatim_mark> <TT>0</TT>. This description should not be processed.

<P>

<P>
<BR>

<B>Note:</B> Because of the trade caravans' carrying capabilities, you may assume the quantities of the helms, armors and boots will not exceed 500 respectively.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program must compute the defend capability of the best carrying plan. That is, after having performed the carrying plan, the defend capability of the equipments which have been carried away from the castle should be the largest. For each test case in the input file, print the case number and a colon, and then the defend capability of those equipments.

<P>
Print a blank line between test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
1 1 3
5 6 10
2 1 2
1 1 1 50
1 1
5 6
2 1
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 50
</PRE> 

<P>

______________________________________________________
2423||||||false||||||
<P>Professor Maple teaches mathematics in a university. He have invented a function for the purpose of obtaining the operands from an expression. The function named <SPAN CLASS="MATH"><I>op</I>(<I>i</I>, <I>e</I>)</SPAN> <tex2html_verbatim_mark> can be described as follows:<P>The expression <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> may be divided into sub-expression(s) by the operator, which has the lowest priority in the expression. For example, the expression `` <SPAN CLASS="MATH"><I>a</I>*<I>b</I> + <I>b</I>*<I>c</I> + <I>c</I>*<I>d</I></SPAN> <tex2html_verbatim_mark>" should be divided into three sub-expressions ``<SPAN CLASS="MATH"><I>a</I>*<I>b</I></SPAN> <tex2html_verbatim_mark>", ``<SPAN CLASS="MATH"><I>b</I>*<I>c</I></SPAN> <tex2html_verbatim_mark>" and ``<SPAN CLASS="MATH"><I>c</I>*<I>d</I></SPAN> <tex2html_verbatim_mark>", because the operator ``<SPAN CLASS="MATH">+</SPAN> <tex2html_verbatim_mark>" has the lowest priority. The purpose of this function is to extract the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th sub-expression as the result. So, in the example above, <SPAN CLASS="MATH"><I>op</I>(2, <I>e</I>) = <I>b</I>*<I>c</I></SPAN> <tex2html_verbatim_mark>.<P>If we regard the sub-expression as the main expression, it might be divided again and again. Obviously, the dividing process is recursive. As you see, the following example is much more complex:<P><P><BR>Let <SPAN CLASS="MATH"><I>p</I> : = <I>a</I></SPAN> <tex2html_verbatim_mark><code>^</code> <SPAN CLASS="MATH"><I>b</I>*<I>c</I> + (<I>d</I>*<I>c</I>)</SPAN> <tex2html_verbatim_mark><code>^</code><SPAN CLASS="MATH"><I>f</I>*<I>z</I> + <I>b</I></SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>op</I>(1, <I>op</I>(1, <I>op</I>(2, <I>p</I>))) = (<I>d</I>*<I>c</I>)</SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>op</I>(1, <I>op</I>(1, <I>op</I>(1, <I>op</I>(2, <I>p</I>)))) = <I>d</I>*<I>c</I></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>op</I>(2, <I>op</I>(2, <I>p</I>)) = <I>z</I></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>op</I>(3, <I>p</I>) = <I>b</I></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>op</I>(1, <I>op</I>(3, <I>p</I>)) = <I>b</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Professor Maple is so lazy that he would leave the work to computer rather than do it himself, when the expression is long and complicated. Of course, without your program, the computer won't work out the result automatically.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. The last test case in the input file is followed by a line containing a symbol `<TT>*</TT>', indicating the end of the input data. Each test case consists of two parts. The first part describes the expression, while the second part contains several questions, which should be calculated according to the expression. The first line of each test case contains an expression consists of the expression name, `<TT>:=</TT>' and the content of the expression. The expression name is a lowercase. And the content is composed by lowercases and operators `<TT>+</TT>', `<TT>(</TT>', `<TT>)</TT>', `<TT>*</TT>' and `<code>^</code>'. For example, here is a valid expression, `<TT>p:=a<code>^</code>b*c+(d*c)<code>^</code>f*z+b</TT>'. Among those operators, `<TT>(</TT>' and `<TT>)</TT>' have the highest priority. The operator `<code>^</code>' has a lower priority, and then `<TT>*</TT>'. The priority of the operator `<TT>+</TT>' is the lowest.<P>The second line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> questions based on the above expression. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines. Each of them contains the description of one question, which consists of integers. For example, the question with three integers `<TT>2 1 1</TT>' describes the function <SPAN CLASS="MATH"><I>op</I>(1, <I>op</I>(1, <I>op</I>(2, <I>e</I>)))</SPAN> <tex2html_verbatim_mark>. To compute this function, we have to keep to the following sequence: First, according to the first integer 2, divide the expression and extract the 2-nd sub-expression. Then, according to the second integer 1, divide the sub-expression and extract the 1-st one. Finally, according to the third integer 1, divide the outcome again, and extract the result.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, display the expression name and a colon on the first line. Then display the result of each question on a line. The layout of the output is shown in the sample output.<P>You may assume that all expressions and functions are always valid.<P>Display a blank line between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
p:=a^b*c+(d*c)^f*z+b
4
2 1 1
2 2
3
3 1
a:=(x+y)
3
1
1 2
1 2 1
*
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Expression p:
op(1,op(1,op(2,p)))=(d*c)
op(2,op(2,p))=z
op(3,p)=b
op(1,op(3,p))=b

Expression a:
op(1,a)=x+y
op(2,op(1,a))=y
op(1,op(2,op(1,a)))=y
</PRE><P>
______________________________________________________
2424||||||false||||||
<P>In a highly modernized fishing village, inhabitants there make a living on fishery. Their major tools, fishing nets, are produced and fixed by computer. After catching fishes each time, together with plenty of fishes, they will bring back the shabby fishing nets, which might be full of leaks. Then they have to inspect those nets. If there exist large leaks, they have to repair them before launching out again.<P>Obviously, the smaller the leaks in the fishing nets are, the more fishes they will catch. So after coming back, those fishermen will input the information of the fishing nets into the computer to check whether the nets have leaks. The checking principle is very simple: The computer regards each fishing net as a simple graph constructed by nodes and edges. In the graph, if any circle whose length (the number of edges) is larger than 3 must has at least one chord, the computer will output ``<TT>Perfect</TT>" indicating that the fishnet has no leaks. Otherwise, ``<TT>Imperfect</TT>" will be displayed and the computer will try to repair the net.<P><P><BR><B>Note:</B> A circle is a closed loop, which starts from one node, passes through other distinct nodes and back to the starting node. A chord is an edge, which connects two different nodes on the circle, but it does not belong to the set of edges on the circle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases representing different fishing nets. The last test case in the input file is followed by a line containing <TT>0 0</TT>.<P>The first line of each test case contains two integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, indicating the number of nodes and edges on the net respectively, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2424img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2424img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>. It is followed by <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines accounting for the details of the edges. Each line consists of two integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, indicating there is an edge between node <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and node <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, display its checking results. The word ``<TT>Imperfect</TT>" suggests that the corresponding fishing net is leaking, while the word ``<TT>Perfect</TT>" stands for a fishing net in good condition.<P>Follow the output for each net with a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 4
1 2
2 3
3 4
4 1
3 3
1 2
2 3
3 1
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Imperfect

Perfect

______________________________________________________
2425||||||false||||||
<P>A set of laboratory mice is being trained to escape a maze. The maze is made up of cells, and each cell is connected to some other cells. However, there are obstacles in the passage between cells and therefore there is a time penalty to overcome the passage Also, some passages allow mice to go one-way, but not the other way round.<P>Suppose that all mice are now trained and, when placed in an arbitrary cell in the maze, take a path that leads them to the exit cell in minimum time.<P>We are going to conduct the following experiment: a mouse is placed in each cell of the maze and a count-down timer is started. When the timer stops we count the number of mice out of the maze.<P>Write a program that, given a description of the maze and the time limit, predicts the number of mice that will exit the maze. Assume that there are no bottlenecks is the maze, i.e. that all cells have room for an arbitrary number of mice.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><P>The maze cells are numbered <b><i>1,2,...,N</b></i> , where <b><i>N</b></i> is the total number of cells. You can assume that <b><i>N &le; 100</b></i>.<P>The first three input lines contain <b><i>N</b></i> , the number of cells in the maze, <b><i>E</b></i>, the number of the exit cell, and the starting value <b><i>T</b></i> for the count-down timer (in some arbitrary time unit).<P>The fourth line contains the number <b><i>M</b></i> of connections in the maze, and is followed by <b><i>M</b></i> lines, each specifying a connection with three integer numbers: two cell numbers <b><i>a</b></i> and <b><i>b</b></i> (in the range <b><i>1,..,N</b></i> ) and the number of time units it takes to travel from <b><i>a</b></i> to <b><i>b</b></i>.<P>Notice that each connection is one-way, i.e., the mice can't travel from <b><i>b</b></i> to <b><i>a</b></i> unless there is another line specifying that passage. Notice also that the time required to travel in each direction might be different.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><P>The output consists of a single line with the number of mice that reached the exit cell <b><I>E</i></b> in at most <I><b>T</i></b> time units.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

4 
2 
1
8
1 2 1
1 3 1
2 1 1
2 4 1
3 1 1
3 4 1
4 2 1
4 3 1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
3
</PRE><P>
______________________________________________________
2426||||||false||||||
<P>Before the digital age, the most common ``binary'' code for radio communication was the <I>Morse code</I>. In Morse code, symbols are encoded as sequences of short and long pulses (called <I>dots</I> and <I>dashes</I>, respectively). The following table reproduces the Morse code for the alphabet, where dots and dashes are represented by ASCII&nbsp;characters ``<TT>.</TT>'' and ``<TT>-</TT>'':<P><DIV ALIGN="CENTER"><TABLE CELLPADDING=3 BORDER="1"><TR><TD ALIGN="LEFT">A</TD><TD ALIGN="LEFT"><TT>.-</TT></TD><TD ALIGN="LEFT">B</TD><TD ALIGN="LEFT"><TT>-...</TT></TD><TD ALIGN="LEFT">C</TD><TD ALIGN="LEFT"><TT>-.-.</TT></TD><TD ALIGN="LEFT">D</TD><TD ALIGN="LEFT"><TT>-..</TT></TD></TR><TR><TD ALIGN="LEFT">E</TD><TD ALIGN="LEFT"><TT>.</TT></TD><TD ALIGN="LEFT">F</TD><TD ALIGN="LEFT"><TT>..-.</TT></TD><TD ALIGN="LEFT">G</TD><TD ALIGN="LEFT"><TT>--.</TT></TD><TD ALIGN="LEFT">H</TD><TD ALIGN="LEFT"><TT>....</TT></TD></TR><TR><TD ALIGN="LEFT">I</TD><TD ALIGN="LEFT"><TT>..</TT></TD><TD ALIGN="LEFT">J</TD><TD ALIGN="LEFT"><TT>.---</TT></TD><TD ALIGN="LEFT">K</TD><TD ALIGN="LEFT"><TT>-.-</TT></TD><TD ALIGN="LEFT">L</TD><TD ALIGN="LEFT"><TT>.-..</TT></TD></TR><TR><TD ALIGN="LEFT">M</TD><TD ALIGN="LEFT"><TT>--</TT></TD><TD ALIGN="LEFT">N</TD><TD ALIGN="LEFT"><TT>-.</TT></TD><TD ALIGN="LEFT">O</TD><TD ALIGN="LEFT"><TT>---</TT></TD><TD ALIGN="LEFT">P</TD><TD ALIGN="LEFT"><TT>.--.</TT></TD></TR><TR><TD ALIGN="LEFT">Q</TD><TD ALIGN="LEFT"><TT>--.-</TT></TD><TD ALIGN="LEFT">R</TD><TD ALIGN="LEFT"><TT>.-.</TT></TD><TD ALIGN="LEFT">S</TD><TD ALIGN="LEFT"><TT>...</TT></TD><TD ALIGN="LEFT">T</TD><TD ALIGN="LEFT"><TT>-</TT></TD></TR><TR><TD ALIGN="LEFT">U</TD><TD ALIGN="LEFT"><TT>..-</TT></TD><TD ALIGN="LEFT">V</TD><TD ALIGN="LEFT"><TT>...-</TT></TD><TD ALIGN="LEFT">W</TD><TD ALIGN="LEFT"><TT>.--</TT></TD><TD ALIGN="LEFT">X</TD><TD ALIGN="LEFT"><TT>-..-</TT></TD></TR><TR><TD ALIGN="LEFT">Y</TD><TD ALIGN="LEFT"><TT>-.--</TT></TD><TD ALIGN="LEFT">Z</TD><TD ALIGN="LEFT"><TT>--..</TT></TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR></TABLE></DIV><P>Notice that in the absence of pauses between letters there might be multiple interpretations of a Morse sequence. For example, the sequence ``<TT>-.-..--</TT>'' can be decoded both as ``CAT'' or ``NXT'' (among others). A human Morse operator would use other context information (such as a language dictionary) to decide the appropriate decoding.<P>Write a program that reads a Morse code string and a list of words (a <I>dictionary</I>) and attempts to parse the Morse code into a phrase using words that occur in the dictionary. The program's output should be the number of distinct phrases that can be obtained.<P>Notice that we are interested in <I>full matches</I>, i.e. the complete Morse string must be matched to words in the dictionary.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><P>The input starts with the Morse code string, made up of characters ``<TT>.</TT>'' and ``<TT>-</TT>'', with no spaces between them, and terminated by the end-of-line character.<P>The next line consists of the number <i><b>N</i></b> of words in the dictionary, and is followed by <i><b>N</i></b> dictionary words, one in each line. Each word consists of upper-case characters from ``A'' to ``Z'' only.<P>The number of words in the dictionary is less than or equal to 10000 and the Morse code string is at most 1000 characters long.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><P>The output should be a single integer number representing the count of distinct phrases into which the Morse code can be parsed. You may assume that this number is at most <i><b>2 &times; 10<sup>9</sup></i></b>.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

.---.--.-.-.-.---...-.---.
6
AT
TACK
TICK
ATTACK
DAWN
DUSK
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2
</PRE><P>
______________________________________________________
2427||||||false||||||
<P>The classical Maya civilization prospered in what today is southern Mexico, Guatemala, Belize and northern Honduras. During the height of the Maya civilization they developed a sophisticated system for time keeping used both to record history and for divinatory rituals. Their calendar consisted of three components: the Tzolkin, the Haab and the Long Count.<P>For divinatory purposes the Maya used the Tzolkin which was composed of 20 day names to which a numeric coefficient from 1 to 13 was attached, giving a total of 260 distinct combinations. This is the size of the Tzolkin, or ritual year. From Spanish colonial sources, we know the names of the days:<BLOCKQUOTE><B>Day names</B>: I<SMALL>MIX, </SMALL>I<SMALL>K, </SMALL>A<SMALL>KBAL, </SMALL>K<SMALL>AN, </SMALL>C<SMALL>HIKCHAN, </SMALL>K<SMALL>IMI, </SMALL>M<SMALL>ANIK, </SMALL>L<SMALL>AMAT, </SMALL>M<SMALL>ULUK, </SMALL>O<SMALL>K, </SMALL>C<SMALL>HUEN, </SMALL>E<SMALL>B, </SMALL>B<SMALL>EN, </SMALL>I<SMALL>X, </SMALL>M<SMALL>EN, </SMALL>K<SMALL>IB, </SMALL>K<SMALL>ABAN, </SMALL>E<SMALL>TZNAB, </SMALL>K<SMALL>AWAK, </SMALL>A<SMALL>JAW</SMALL></BLOCKQUOTE><P>For example, the sequence of days starting at 9.I<SMALL>MIX</SMALL> is: 9.I<SMALL>MIX&nbsp;/ 10.</SMALL>I<SMALL>K&nbsp;/ 11.</SMALL>A<SMALL>KBAL&nbsp;/ 12.</SMALL>K<SMALL>AN&nbsp;/ 13.</SMALL>C<SMALL>HIKCHAN&nbsp;/ 1.</SMALL>K<SMALL>IMI&nbsp;/ 2.</SMALL>M<SMALL>ANIK&nbsp;/...</SMALL><P>The Haab calendar was used for astronomy. It had 365 days divided into 19 months each with 20 days, except the last one which had only 5. In a manner similar to the Tzolkin each month name has a number from 1 to 20 indicating the day number within the month. Again, from Spanish colonial sources, we know the names of the months:<BLOCKQUOTE><B>Month names</B>: P<SMALL>OHP, </SMALL>W<SMALL>O, </SMALL>S<SMALL>IP, </SMALL>Z<SMALL>OTZ, </SMALL>S<SMALL>EK, </SMALL>X<SMALL>UL, </SMALL>Y<SMALL>AXKIN, </SMALL>M<SMALL>OL, </SMALL>C<SMALL>HEN, </SMALL>Y<SMALL>AX, </SMALL>S<SMALL>AK, </SMALL>K<SMALL>EH, </SMALL>M<SMALL>AK, </SMALL>K<SMALL>ANKIN, </SMALL>M<SMALL>UAN, </SMALL>P<SMALL>AX, </SMALL>K<SMALL>AYAB, </SMALL>K<SMALL>UMKU, </SMALL>W<SMALL>AYEB</SMALL></BLOCKQUOTE><P>The month W<SMALL>AYEB</SMALL> had just 5 days and was considered an unlucky time of the year.<P>The Tzolkin and Haab were combined in the inscriptions to create the so called Calendar Round, combining the 260 day cycle of the Tzolkin and the 365 day cycle of the Haab. A typical Calendar Round date in the inscriptions might be: ``3.L<SMALL>AMAT 6.</SMALL>P<SMALL>AX</SMALL>''. Note that not all of the combination of days, months and coefficients are possible. How many days does it take to repeat a Calendar Round?<P>A typical sequence of days in the Calendar Round starting for example at ``3.L<SMALL>AMAT 6.</SMALL>P<SMALL>AX</SMALL>'':<BLOCKQUOTE>3.L<SMALL>AMAT&nbsp;6.</SMALL>P<SMALL>AX&nbsp;/ 4.</SMALL>M<SMALL>ULUK&nbsp;7.</SMALL>P<SMALL>AX&nbsp;/ 5.</SMALL>O<SMALL>K&nbsp;8.</SMALL>P<SMALL>AX&nbsp;/ 6.</SMALL>C<SMALL>HUEN&nbsp;9.</SMALL>P<SMALL>AX&nbsp;/ 7.</SMALL>E<SMALL>B&nbsp;10.</SMALL>P<SMALL>AX&nbsp;/ 8.</SMALL>B<SMALL>EN&nbsp;11.</SMALL>P<SMALL>AX&nbsp;/ 9.</SMALL>I<SMALL>X&nbsp;12.</SMALL>P<SMALL>AX&nbsp;/ 10.</SMALL>M<SMALL>EN&nbsp;13.</SMALL>P<SMALL>AX&nbsp;/ 11.</SMALL>K<SMALL>IB&nbsp;14.</SMALL>P<SMALL>AX&nbsp;/ 12.</SMALL>K<SMALL>ABAN&nbsp;15.</SMALL>P<SMALL>AX&nbsp;/ 13.</SMALL>E<SMALL>TZNAB&nbsp;16.</SMALL>P<SMALL>AX&nbsp;/ 1.</SMALL>K<SMALL>AWAK&nbsp;17.</SMALL>P<SMALL>AX&nbsp;/ 2.</SMALL>A<SMALL>JAW&nbsp;18.</SMALL>P<SMALL>AX&nbsp;/ 3.</SMALL>I<SMALL>MIX&nbsp;19.</SMALL>P<SMALL>AX&nbsp;/ 4.</SMALL>I<SMALL>K&nbsp;20.</SMALL>P<SMALL>AX&nbsp;/ 5.</SMALL>A<SMALL>KBAL&nbsp;1.</SMALL>K<SMALL>AYAB&nbsp;/ 6.</SMALL>K<SMALL>AN&nbsp;2.</SMALL>K<SMALL>AYAB&nbsp;/ ...</SMALL></BLOCKQUOTE><P>Finally, at the beginning of the Classic Period (AD 200-900) the Maya developed an absolute calendar called Long Count which counted the number of days starting from a fixed date. Currently, most researchers agree that this zero date was August&nbsp;13, 3114&nbsp;BC. According to Maya belief this was the date of creation of our world. Dates in the Long Count are written (for simplicity) in 5-tuples of the form: ``9.2.3.4.5''. Such a date reads ``9 baktuns 2 katuns 3 tuns 4 winals 5 kin since the zero date''. A ``kin'' is just one day. A ``winal'' is a group of 20 days. A ``tun'' is a group of 18 winals (thus a tun has <i><b>20&times; 18</i></b> = 360 days, 5 days short of a year). From here on all units come in multiples of 20. Thus a ``katun'' is 20 tuns (almost 20 years) and a ``baktun'' is 20 katuns (almost 400 years). Thus the date ``9.2.3.4.5'' means `` <i><b>9&times; 144000 + 2&times; 7200 + 3&times; 360 + 4&times; 20 + 5</i></b> days after the zero date''.<P>Given the periodicity of the Calendar Round, a legal date such as ``3.L<SMALL>AMAT 6.</SMALL>P<SMALL>AX</SMALL>'' has multiple occurrences in the Long Count. Thus, one difficulty in reading Maya inscriptions is establishing the correspondence between a date given only in the Calendar Round and the absolute date in the Long Count. In this case, we must compute all the possible Long Count dates associated with the particular Calendar Round and deduce which one applies based on context information (for example, using references to a king whose lifespan is known).<P>Write a program that computes all possible Long Count dates corresponding to a given Calendar Round date. Only the Long Count dates in the Baktuns 8 and 9 are of interest to us (they cover all the Classic Period).<P>As a starting point, you are given the information that the Long Count date 8.0.0.0.0 occurred on the Calendar Round ``9.A<SMALL>JAW&nbsp;3.</SMALL>S<SMALL>IP</SMALL>''.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><P>The input consists of one Calendar Round date in the following format:<PRE>
dayNumber.dayName dayNumber.monthName
</PRE>The day and month names are written with an upper-case first letter and lower-case letters afterwards.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><P>Your output should be the corresponding sequence of Long Count dates in the Classic Period, in ascending order, each displayed with the format ``<TT>baktun.katun.tun.winal.kin</TT>'', separated by newlines.<P>If there are no corresponding Long Count date for the given Calendar Round date, your output should be ``<TT>NO SOLUTION</TT>''.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3.Lamat 6.Pax
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1

8.0.17.17.8
8.3.10.12.8
8.6.3.7.8 
8.8.16.2.8 
8.11.8.15.8
8.14.1.10.8
8.16.14.5.8
8.19.7.0.8 
9.1.19.13.8 
9.4.12.8.8  
9.7.5.3.8   
9.9.17.16.8 
9.12.10.11.8 
9.15.3.6.8 
9.17.16.1.8
</PRE><P>
______________________________________________________
2428||||||false||||||
<P>During the next century certain regions on earth will experience severe water shortages. The old town of Uqbar has already started to prepare itself for the worst. Recently they created a network of pipes connecting the cisterns that distribute water in each neighborhood, making it easier to fill them at once from a single source of water. But, in case of water shortage, the cisterns above a certain level will be empty since the water will flow to the cisterns bellow.<DIV ALIGN="CENTER"><IMG WIDTH="451" HEIGHT="356" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2428.gif ALT="\includegraphics[width=10cm]{pipes}"></DIV><P>You have been asked to write a program to compute the level to which cisterns will be filled with a certain volume of water, given the dimensions and position of each cistern. To simplify we will neglect the volume of water in the pipes.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><P>As input you receive the number of cisterns, followed by one line per cistern with 4 floating point values: its base level, height, width and depth in meters. The last input line gives you the volume in cubic meters to be injected into the network.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><P>Your program must output the level that the water will reach, in meters, truncated to two fractional digits. If the volume of water exceeds the total capacity of the cisterns then your program must write ``<TT>OVERFLOW</TT>''.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

4
11.0 7.0 5.0 1.0
15.0 6.0 4.0 1.0
 5.0 8.0 5.0 1.0
19.0 4.0 8.0 1.0
78.0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
17.00
</PRE><P>
______________________________________________________
2429||||||false||||||
<P>This is a puzzle game to be played by two persons, Alice and Bob. Alice draws an <i><b>n</i></b>-vertex convex polygon and numbers its vertices with integers <i><b>1,2,...,n</i></b> in an arbitrary way. Then she draws a number of non-crossing diagonals (the vertices of the polygon are not considered to be crossing points). She keeps the drawing secret and tells Bob the polygon's sides and diagonals, without revealing which are which. Each side or diagonal is specified by its endpoints. Bob has to guess the order of the vertices on the border of the polygon. Help him solve the puzzle.<p><b>Example:</b></p><P>If <i><b>n=4</i></b> and (1,3), (4,2), (1,2), (4,1), (2,3) are the endpoints of the four sides and one diagonal then the ordering of the vertices on the border of the polygon is 1, 3, 2, 4 (up-to shifting and reversing).<P align="justify">Write a program that reads the description of sides and diagonals given to Bob by Alice, computes the order of vertices on the border of the polygon and writes the result.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><P>The first two lines of the input contain two integers <i><b>n</i></b> and <i><b>m</i></b>, such that <i><b>4 &le; n &le; 10 000</i></b> and <i><b>0 &le; m &le; n-3</i></b>. Integer <i><b>n</i></b> is the number of vertices of the polygon and integer <i><b>m</i></b> is the number of its diagonals, respectively.<P>The third line contains exactly <i><b>2(m+n)</i></b> integers separated by single spaces, specifying all sides and some diagonals of the polygon. Integers on positions <i><b>2j-1</i></b> and <i><b>2j</i></b>, <i><b>1 &le; j &le; m+n</i></b>, specify the two endpoints of a side or a diagonal. The sides and the diagonals can be given in an arbitrary order. There are no duplicates.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><P>The output should consist of a single line containing a permutation of <i><b>1,2,..., n</i></b> separated by spaces. This sequence corresponds to the numbers of vertices on the border of the polygon; the sequence should always start with vertex number 1 and its second element should be the smaller vertex of the two neighbor vertices of vertex 1.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

4
1
1 3 4 2 1 2 4 1 2 3
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1 3 2 4
</PRE><P>
______________________________________________________
2430||||||false||||||
<P>Consider a machine with <i><b>n</i></b> integer registers <i><b>r<sub>1</sub>, r<sub>2</sub>, ..., r<sub>n</sub></i></b> and a single type of <I>compare-exchange instruction</I>, CE (<i><b>i,j</i></b>) defined as follows, where <!-- MATH
 $1 \le i < j \le n$
 --><i><b>1 &le; i &lt; j &le; n</i></b> are the register indices:<br><br>CE(<i><b>i,j</i></b>) : if content(<i><b>r<sub>i</sub></i></b>) &gt; content(<i><b>r<sub>j</sub></i></b>) then exchange the contents of registers <i><b>r<sub>i</sub></i></b> and <i><b>r<sub>j</sub></i></b>.<br><br><P>A compare-exchange program (shortly CE-program) is any finite sequence of compare-exchange instructions. A CE-program is called <I>minimum-finding</I> if after its execution the register <i><b>r<sub>1</sub></i></b> always contains the minimum value among all the initial values in the registers. Furthermore, such program is called <I>reliable</I> if it remains a minimum-finding program after removing any single compare-exchange instruction.<P>Given a CE-program <i><b>P</i></b>, what is the minimum number of instructions that should be added at the end of program <i><b>P</i></b> in order to make it reliable?<p><b>Example:</b></p><P>Consider the following 3-register CE-program: CE(1,2); CE(2,3); CE(1,2).<BR>In order to make this program reliable it suffices to add only two extra instructions, namely CE(1,3) and CE(1,2).<P>Write a program that reads the description of a CE-program, and determines the minimum number of CE-instructions that should be added to make this program reliable.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><P>The first line of input contains the number of registers <i><b>n</i></b>, where <i><b>0 &le; n &le; 1000</i></b>, followed by the number of program instructions <i><b>m</i></b>, where <i><b>0 &le; m &le; 3000</i></b>.<P>The next line contains the program itself: a sequence of <i><b>2m</i></b> integers, separated by spaces, where each CE-instruction consists of two consecutive integers on positions <i><b>2j-1</i></b> and <i><b>2j</i></b>, with <i><b>1 &le; j &le; m</i></b>.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><P>The output consists of a single integer: the minimal number of instructions that should be added to the input program in order to make this program reliable.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

3 3
1 2 2 3 1 2
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2
</PRE><P>
______________________________________________________
2431||||||false||||||
<P>The Stirling number of the second kind S(n, m) stands for the number of ways to partition a set of n things into m nonempty subsets. For example, there are seven ways to split a four-element set into two parts:<p><center>{1, 2, 3} U {4}, {1, 2, 4} U {3}, {1, 3, 4} U {2}, {2, 3, 4} U {1}<br>{1, 2} U {3, 4}, {1, 3} U {2, 4}, {1, 4} U {2, 3}.</center><p>There is a recurrence which allows to compute S(n, m) for all m and n.<p><center>S(0, 0) = 1; S(n, 0) = 0 for n > 0; S(0, m) = 0 for m > 0;<br>S(n, m) = m S(n - 1, m) + S(n - 1, m - 1), for n, m > 0.</center><p>Your task is much "easier". Given integers n and m satisfying 1 <= m <= n, compute the parity of S(n, m), i.e.
S(n, m) mod 2.

<p>
<b>Example</b>

<p>S(4, 2) mod 2 = 1.

<p>
<b>Task</b>

<p>
Write a program which for each data set:
<blockquote>
<li>reads two positive integers n and m,
<li>computes S(n, m) mod 2,
<li>writes the result.
</blockquote>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>
The first line of the input contains exactly one positive integer d equal to the number of data sets,
1 &le; d &le; 200. The data sets follow.

<p>
Line i + 1 contains the i-th data set - exactly two integers n<sub>i</sub> and m<sub>i</sub> separated by a single
space, 1 &le; m<sub>i</sub> &le; n<sub>i</sub> &le; 10<sup>9</sup>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output should consist of exactly d lines, one line for each data set. Line i, 1 &le; i &le; d, should contain 0
or 1, the value of S(n<sub>i</sub>, m<sub>i</sub>) mod 2.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
4 2
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1
</PRE>

<P>

______________________________________________________
2432||||||false||||||
<P>Project managers, such as the UNIX utility <TT>make</TT>, are used to maintain large software projects made up from many components. Users write a <I>project file</I> specifying which components (called <I>tasks</I>) depend on others and the project manager can automatically update the components in the correct order.<P>Write a program that reads a project file and outputs the order in which the tasks should be performed.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><P>For simplicity we represent each task by an integer number from <i><b>1,2,...,N</i></b> (where <i><b>N</i></b> is the total number of tasks). The first line of input specifies the number <i><b>N</i></b> of tasks and the number <i><b>M</i></b> of rules, such that <i><b>N &le; 100</i></b>, <i><b>M &le; 100</i></b>.<P>The rest of the input consists of <i><b>M</i></b> <I>rules</I>, one in each line, specifying dependencies using the following syntax:<br><br><i><b>T<sub>0</sub> &nbsp;&nbsp;&nbsp;&nbsp; k &nbsp;&nbsp;&nbsp;&nbsp; T<sub>1</sub> &nbsp;&nbsp;&nbsp;&nbsp; T<sub>2</sub> &nbsp;&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;&nbsp;&nbsp; T<sub>k</sub></i></b><br><br>This rule means that task number <i><b>T<sub>0</sub></i></b> depends on <i><b>k</i></b> tasks <i><b>T<sub>1</sub>, T<sub>2</sub>, ..., T<sub>k</sub></i></b> (we say that task <i><b>T<sub>0</sub></i></b> is the <I>target</I> and <i><b>T<sub>1</sub>,...,T<sub>k</sub></i></b> are <I>dependents</I>).<P>Note that tasks numbers are separated by single spaces and that rules end with a newline. Rules can appear in any order, but each task can appear as target only once.<P>Your program can assume that there are no circular dependencies in the rules, i.e. no task depends directly or indirectly on itself.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><P>The output should be a single line with the permutation of the tasks <i><b>1 ... N</i></b> to be performed, ordered by dependencies (i.e. no task should appear before others that it depends on).<P>To avoid ambiguity in the output, tasks that do not depend on each other should be ordered by their number (lower numbers first).<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

5 4
3 2 1 5
2 2 5 3
4 1 3
5 1 1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1 5 3 2 4
</PRE><P>
______________________________________________________
2433||||||false||||||
<P>Though it might be hard to imagine, the inhabitants of a small country Additivia do not know of such thing as change, which probably has to do with them not knowing subtraction either. When they buy something, they always need to have the exact amount of addollars, their currency. The only other option, but not a really attractive one, is over-paying.<P>Professor Adem, one of the Additivian mathematicians came up with an algorithm for keeping a balanced portfolio. The idea is the following. Suppose you have more coins of value <i><b>v<sub>1</sub></i></b> than coins of value <i><b>v<sub>2</sub></i></b>. In this case you should try to spend at least as many coins of value <i><b>v<sub>1</sub></i></b> as those of value <i><b>v<sub>2</sub></i></b> on any buy you make. Of course spending too many <i><b>v<sub>1</sub></i></b> coins is not a good idea either, but to make the algorithm simpler professor Adem decided to ignore the problem. The algorithm became an instant hit and professor Adem is now designing a kind of ``electronic portfolio'' with built-in Adem's algorithm. All he needs now is a software for these machines, that will decide whether a given amount of addollars can be paid using a given set of coins according to the rules of Adem's algorithm. Needless to say, you are his chosen programmer for the task.<P>Write a program that reads the description of a set of coins and an amount of addollars to be paid, and determines whether you can pay that amount according to Professor Adem's rules.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><P>The input starts with the amount of addollars to be paid <i><b>x</i></b>, where <i><b>1 &le; x &le; 100 000</i></b>. The number of different coin values <i><b>k</i></b> follows, where <i><b>1 &le; k &le; 5</i></b>. The values of the coins <i><b>v<sub>1</sub>,...,v<sub>k</sub></i></b> follow, where <i><b>1 &le; v<sub>i</sub> &le; 10 000</i></b>.<P>Notice that the order among coin values is significant: you need to spend at least as many coins of value <i><b>v<sub>1</sub></i></b> as coins of value <i><b>v<sub>2</sub></i></b>, at least as many coins of value <i><b>v<sub>2</sub></i></b>"> as those of value <i><b>v<sub>3</sub></i></b>, and so on. You may assume that you have a sufficiently large number of coins of each value.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><P>Your program should output either a single word ``<tt>YES</tt>'', if the given amount can be paid according to the rules, or a single word ``<tt>NO</tt>'' otherwise.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

13 3 9 2 1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
NO
</PRE><P>
______________________________________________________
2434||||||false||||||
<P>Mrs Brown is teaching her pupils about money. At the moment, they are using dummy $5, $10 and $20 notes. Before a lesson starts, Mrs Brown arranges piles of different notes for the pupils so that each one has the same amount of money. The total number of notes in each pile does not exceed 100 notes. Then she takes one, and only one, note from one pupil's pile and puts it in the pile of another pupil. The pupils then have to work out which one has the most money, and which one has the least. Sometimes, Mrs Brown does not move a note so that each pupil has exactly the same amount of money - the pupils have to be able to tell when this happens. Your task is to write a program to calculate the correct answer that Mrs Brown's pupils ought to report.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a series of scenarios for a number of lessons. The first line in each scenario consists of a positive integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, which represents the number of pupils in the class that day <!-- MATH
 $(2 < N < 30000)$
 --><SPAN CLASS="MATH">(2 &lt; <I>N</I> &lt; 30000)</SPAN> <tex2html_verbatim_mark>. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contains the data for one pupil. The lines contain four items, the name of the pupil (a single series of between 2 and 10 letters, lower case except for the first) followed by the number of $5, $10 and $20 notes (in that order) allocated to that pupil. Items are separated by single spaces. Input is terminated by a scenario where N equals -1. This scenario should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output consists of one line for each scenario. It will be in one of the following two formats:<P><P><BR><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> <TT>has most,</TT> <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> <TT>has least money.</TT><BR><TT>All have the same amount.</TT><P><P><BR><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> are student names.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
Andrew 0 0 2 
Brenda 0 4 0 
Chen 8 1 0 
David 2 0 1 
Eloise 0 2 1 
3 
Xerxes 0 3 0 
Yolanda 0 1 1 
Zebedee 4 1 0 
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Chen has most, David has least money. 
All have the same amount.
</PRE><P>
______________________________________________________
2435||||||false||||||
<P>You have been chosen to appear on a certain game show. One of the events in this game show requires you to discover a way in which to combine up to six different numbers, using simple arithmetic, to arrive at a target value. For example, you will be given the sequence<P><P><BR><TT>75 50 9 7 6 3</TT><P><P><BR>from which you have to form the target value of 234.<P><P><BR>One possible solution to this particular sequence would be <SPAN CLASS="MATH">3 <TT>*</TT> 75 + 9 = 234</SPAN>. The following rules are used to evaluate this expression:<P><OL><LI>Each input number may be used once, at most. </LI><LI>Evaluation is cumulative, and strictly left-to-right; there is no operator precedence. </LI><LI>You may use addition (+), subtraction (-), multiplication (<SPAN CLASS="MATH"><TT>*</TT></SPAN>), and division (/). </LI><LI>Subtraction is only allowed if the result is non-negative. </LI><LI>Division is only allowed if the remainder is zero. </LI></OL><P>Using these rules, another possibility would have been <SPAN CLASS="MATH">6 <TT>*</TT> 7 - 3 <TT>*</TT> 9 <TT>*</TT> 50/75 = 234</SPAN>. Note that in conventional arithmetic, this translates into <SPAN CLASS="MATH">((((6 <TT>*</TT> 7) - 3) <TT>*</TT> 9) <TT>*</TT> 50)/75</SPAN>. This is the only valid evaluation order for this sequence.<P>You have to develop a program that will give you an advantage in this game, however, you are not a complete cheat. Thus, your program must work out what the fewest number of input numbers is that can be used to form an expression that yields the target value.<P>Note that the number of mathematical operators you require will always be one less than the number of input numbers you use.<P>For the example above, we already know of two solutions: one using only 3 input numbers, and the other using all 6 input numbers. Incidentally, the shortest possible solution for this sequence requires only 3 numbers, thus the output of your algorithm will be the number 3.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input contains an arbitrary number of records, each record consisting of exactly 7 integers. The format is as follows:<P><P><BR><P><!-- MATH
 $<target> \ <number\_1> \ <number\_2> \ldots <number\_6>$
 --><SPAN CLASS="MATH">&lt; <I>target</I> &gt; &nbsp; &lt; <I>number</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2435img1.png ALT="$ \_$">1 &gt; &nbsp; &lt; <I>number</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2435img1.png ALT="$ \_$">2 &gt;...&lt; <I>number</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2435img1.png ALT="$ \_$">6 &gt;</SPAN><P><P><BR>The end of input is indicated by line containing a single `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input record, you must print out a single integer, indicating the minimum number of input numbers required to build an equation that results in the target number. Each such output corresponding to an input record should appear on its own line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
234 75 50 9 7 6 3 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3

______________________________________________________
2436||||||false||||||

<P>
Marico, an eccentric explorer of the orient, wrote an extensive diary of his trips. He did not mean to encrypt them, but that is what people thought due to his unusual writing style. Marico's writings proceeded from left to right but wrote each word vertically, and used the 26 letters of the alphabet (upper case) only. For example, he wrote the following: 

<P>

<P>
<BR>
<PRE>
THIS IS MY FIRST TRIP TO THE ORIENT I FOUND 
THEIR WRITING SO BEAUTIFUL THAT I ADOPTED INTO 
MY OWN
</PRE> 

<P>

<P>
<BR>
as 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=7 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
T </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> M </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>H </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> S </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Y </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> H </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> S </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> S </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> U </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> W </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> N </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> H </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> W </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> U </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> N </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>T </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> N </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> U </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>T </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> I </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> L </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>H </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> N </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> M </TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Y </TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>T </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Marico's diary has been digitized for the sake of preserving it, but its content remained a mystery until his unique writing style was understood. The process of converting a large number of pages back was found to be tedious and risky for error-prone human volunteers, and the decision was taken to develop a software tool to perform the task instead.

<P>
Your task is to write a program for the purpose of converting pages of Marico's diary into the familiar way of writing such that: 

<P>

<OL>
<LI>words on the same line are separated by exactly one blank space, 
</LI>
<LI>width of the output text does not exceed a specified value,
</LI>
<LI>words are not to be broken between output lines, even if that means breaking the previous rule
</LI>
</OL>

<P>

<P>
<BR>
For example, your program should convert the page of Marico's diary shown on the left to the text shown on the right when the width is bounded by 10 places. 

<P>

<P>
<BR>

<TABLE>
<TR><TD>
<PRE>
TIMFTTT 
HSYIROH 
I  RI E 
SIFSPS 
  OT OB 
OIU W E 
R NTROA 
I DHIWU 
E  ETNT 
N AII I 
T DRN F 
  O G U 
T PI  L 
H TNM 
A ETY 
T DO
</PRE></TD></TR>
</TABLE>
   converts into    <TABLE>
<TR><TD>
<PRE>
THIS IS MY 
FIRST TRIP 
TO THE 
ORIENT I 
FOUND 
THEIR 
WRITING SO 
BEAUTIFUL 
THAT I 
ADOPTED 
INTO MY 
OWN
</PRE></TD></TR>
</TABLE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists on several test cases. The first line of the test case consists of the two positive integers <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>W</I></SPAN>
<tex2html_verbatim_mark>, separated by a single space. <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> is the maximum possible number of lines on each page of Marico's diary, and <SPAN CLASS="MATH"><I>W</I></SPAN>
<tex2html_verbatim_mark> is the desired width of the output text. <!-- MATH
 $40 \ge L > 0$
 -->
<SPAN CLASS="MATH">40<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2436img1.png
 ALT="$ \ge$"><I>L</I> &gt; 0</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $40 \ge W > 0$
 -->
<SPAN CLASS="MATH">40<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2436img1.png
 ALT="$ \ge$"><I>W</I> &gt; 0</SPAN>
<tex2html_verbatim_mark>. The rest of the input for a test case consists of a series of one or more page descriptions. 

<P>
The first line in each page description consists of a positive integer, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le N \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2436img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/2436img1.png
 ALT="$ \le$">20</SPAN>
<tex2html_verbatim_mark>, which represents the number of columns. Each of the following lines, if any, contains exactly <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> characters. None of the pages completely consists of blank characters, and none of the pages end with a blank line; that is, the last line contains at least one character that is not blank. The page description is terminated with a line that contains only a single `<code>#</code>' character, and should not be formatted. 

<P>
The test case is terminated with a line that contains only the string ``<code>##</code>" (that is, two `<code>#</code>' characters), and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each page the output consists of number of lines. The first line contains the page number starting with the value of one (1), as shown in the ``Sample output" below, and then followed by 

<P>

<OL>
<LI>the lines of the formatted text, or 
</LI>
<LI>the sentence ``<TT>This page is empty.</TT>" on the next line.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
40 10 
7 
TIMFTTT 
HSYIROH 
I  RI E 
SIFSPS 
  OT OB 
OIU W E 
R NTROA 
I DHIWU 
E  ETNT 
N AII I 
T DRN F 
  O G U 
T PI  L 
H TNM 
A ETY 
T DO 
# 
8 
# 
2 
AL 
FU 
TN 
EC 
RH 

WL 
EE 
 F
 T 
# 
##
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Page number 1 
THIS IS MY 
FIRST TRIP 
TO THE 
ORIENT I 
FOUND 
THEIR 
WRITING SO 
BEAUTIFUL 
THAT I 
ADOPTED 
INTO MY 
OWN 
Page number 2 
This page is empty. 
Page number 3 
AFTER 
LUNCH WE 
LEFT
</PRE>

<P>

______________________________________________________
2437||||||false||||||
<P>A number pattern is a sequence of two or more numbers that satisfies a certain rule. For instance, the sequence `` <SPAN CLASS="MATH">3, 5, 7, 9,...</SPAN> <tex2html_verbatim_mark>" is a number pattern that starts with three and jumps by twos. In primary school, number patterns are used as a tool for learning basic arithmetic and problem-solving skills. Finding a number pattern in a grid of integers is Mrs Brown's favourite challenge for her pupils.<P>Mrs Brown's number pattern challenge for her <SPAN CLASS="MATH">2<SUP>nd</SUP></SPAN> <tex2html_verbatim_mark> grade pupils is to find a number pattern in a grid of integers. The number pattern must start at the smallest value, jumps to an adjacent cell in the grid by adding a fixed positive value, and terminates at the largest value. Two cells are considered adjacent if they share the same row or share the same column.<P><P><BR><IMG WIDTH="282" HEIGHT="145" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2437img1.png ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert c...
... 9 &amp; 10 &amp; 12 \\
\hline
12 &amp; 14 &amp; 12 &amp; 14 \\
\hline
\end{tabular}\end{center}}$"><IMG WIDTH="277" HEIGHT="145" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2437img1.png ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert ...
... 9 &amp; 10 &amp; 12 \\
\hline
15 &amp; 14 &amp; 12 &amp; 14 \\
\hline
\end{tabular}\end{center}}$"><P><P><BR>For instance, the grid on the left has a pattern that starts at 4 and jumps by 2 and terminates at the largest value of 14, but no pattern can be found in the grid on the right.<P>Mrs Brown has a large number of these grids, but she does not have the time to find the correct answer for each one. Your task is to help by writing a program to check the existence of a pattern of the required form in a given grid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a series of scenarios. The first line in each scenario consists of two positive integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> that represent the number of rows and columns in a grid. <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2437img1.png ALT="$ \le$"><I>N</I>, <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2437img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> integers that represent the integers in a single row in the grid. The integers are separated by single spaces, and have values that does not exceed 30000.<P>Input is terminated by a challenge where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> equal <TT>-1</TT>.<P>This challenge should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output consists of one line for each grid. It will be in one of the following two formats:<P><P><BR><TT>At least one pattern exists.</TT><BR><TT>No pattern can be found.</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
28 
77 78 79 77 77 77 77 77 
78 79 80 81 82 83 84 85 
-1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
At least one pattern exists.
</PRE><P>
______________________________________________________
2438||||||false||||||
<P>Takeshi Castle was a Japanese game show that aired from 1986 to 1989 on the Tokyo Broadcasting System. It featured the esteemed Japanese actor Takeshi Kitano as a count who owns a castle and sets up impossible challenges for a volunteer army to get to him. The show has become a television hit around the world. An old fan of the show asked us for help with the design of a challenge, called <SPAN CLASS="textbf">Lily Pads</SPAN> (The <B>Lily Pads</B> challenge is to cross a body of cold water by jumping between circular discs, with legs tied together, without falling into the water.), to use as a game following the upcoming ICPC Finals. As a challenge cannot be suitable for a Takeshi Castle game unless it is biased against the volunteer army, your task is to write a program to <SPAN CLASS="textit">verify</SPAN> that a given placement of the discs will cause the majority of the volunteer army members to fail the challenge. The maximum distance that each member of the army can leap, to jump from one disc to another, has been collected by Takeshi spies and will be made available to us.<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="1021" HEIGHT="604" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2438.png ALT="\epsfbox{p2438.eps}"> <tex2html_verbatim_mark></DIV><P>For example: the above setting with each grid cell being of size <SPAN CLASS="MATH">1&#215;1</SPAN> <tex2html_verbatim_mark>, is a suitable challenge against a volunteer army of five members with three members capable of jumping a maximum distance of two units and two members capable of jumping a maximum of three units as the majority of volunteers will fail the challenge. Note that the distance between two discs is defined to be the length of the line connecting their centers. In the plane, the distance between points <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> is given by<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">((<I>x</I><SUB>1</SUB> - <I>x</I><SUB>2</SUB>)<SUP>2</SUP> + (<I>y</I><SUB>1</SUB> - <I>y</I><SUB>2</SUB>)<SUP>2</SUP>)<SUP>1/2</SUP></DIV><P><tex2html_verbatim_mark></P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a series of challenges. The first line in each challenge consists of the positive integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, separated by one space. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of the volunteers and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the number of discs in the lily pad pond, where <SPAN CLASS="MATH">30000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2438.png ALT="$ \ge$"><I>N</I> &gt; 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">50<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2438.png ALT="$ \ge$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2438.png ALT="$ \ge$">2</SPAN> <tex2html_verbatim_mark>. The second line consists of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> positive integers that represent the maximum distances that the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> members of the volunteer army can leap. The third line consists of 4 positive integers that represent the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinates of the <SPAN CLASS="textit">start</SPAN> and <SPAN CLASS="textit">finish</SPAN> discs (The <SPAN CLASS="textit">start</SPAN> and <SPAN CLASS="textit">finish</SPAN> discs are shown striped in the example.). Each of the following M-2 lines contains two positive integers that represent the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinates of the remaining discs. The integers are separated by single spaces. The values of all <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinates do not exceed 500.<P>Input is terminated by a challenge where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> equal <TT>-1</TT>. This challenge should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output consists of one line for each challenge. It will be in one of the following two formats:<P><PRE>
NOT valid 
valid
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 18 
3 3 3 3 3 
1 5 17 5 
3 5 
3 3 
10 5 
13 5 
16 5 
5 3 
5 7 
7 3 
8 2 
8 7 
10 2 
12 1 
12 2 
14 1 
15 3 
15 6 
6 18 
1 2 1 3 1 2 
1 5 17 5 
3 5 
3 3 
10 5 
13 5 
16 5 
5 3 
5 7 
7 3 
8 2 
8 7 
10 2 
12 1 
12 2 
14 1 
15 3 
15 6 
-1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
NOT valid
valid
</PRE><P>
______________________________________________________
2439||||||false||||||
<P>The organizing committee of a popular charity fair in a small town wants to include walking races that can be run in a competitive format. The idea is that competitiveness will make the races more entertaining, attract more viewers and thus more contributions. The proposed new format is to divide the walkers into heats that are competitive; that is, the time difference between the first and last participants to arrive at finish line in each heat is as small as possible. The heats are then scheduled to run independently through the day of the fair. The organizers will provide us with information about the number of registered walkers along with the best available estimate of the times they take to finish the race course, the number of heats they can schedule and the maximum number of participants allowed in each heat. Your task is to read the provided information and then organize the participants into heats that satisfy the given constraints and minimizes over all the heats the maximum time difference within a heat, or warn the organizers that their constraints cannot be satisfied.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a series of races. The first line in each race description consists of three positive integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> that are separated by single spaces. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> represents the largest number of walkers allowed to participate in each heat, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> represents the largest number of heats that the organizers can schedule and <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> is the number of walkers registered in the race. Each of the following <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> lines contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 < T \le 10000$
 --><SPAN CLASS="MATH">0 &lt; <I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2439img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>, that represents the known time for one of the registered walkers to finish the race course. <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2439img1.png ALT="$ \le$"><I>N</I>, <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2439img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2439img1.png ALT="$ \le$"><I>Q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2439img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>.<P>Input is terminated by a race with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> equal to <TT>-1</TT>. This race should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each race the output consists of a single line that contains the race number starting with the value of one (1), followed by a ``<TT>:</TT> ", as shown in the ``Sample Output" below, and then followed by one of the following formats:<P><OL><LI><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> </LI><LI><TT>Organization Fault!</TT> </LI></OL><P><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the minimum, over all the heats, of maximum difference of finish times within each heat.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 3 
21 
20 
13 
3 3 12 
21 
18 
10 
16 
10 
10 
89 
11 
11 
6 
8 
3 
-1 -1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Race 1: 1 
Race 2: Organization Fault!
</PRE><P>
______________________________________________________
2440||||||false||||||
<P>
In contemporary VLSI chip industry, the software tools used by electrical engineers perform many optimizations.
Your task is to implement one specific optimization of some chip design. Your tool is given an acyclic net of NAND
gates (NAND gate computes the negated conjunction of its inputs, i.e. the output value of the gate is 0 if and only
if its both input values are 1). The net is a part of already synthesized component and cannot be changed. All the
inputs of the net are connected to one signal x. The objective is to disconnect x from some inputs and to assign
constant signals 0 and/or 1 to those inputs in such a way that the function implemented by the design remains unchanged.

<p>
We say that an assignment of x's and/or 0's and/or 1's to the inputs of the net is optimal if the number of inputs
connected to x is the smallest possible but the net still computes the same function as if all the inputs were
connected to x.


<p>
<b>Example</b>

<p>
Look at the following design.

<P>
<center>
<IMG SRC="http://livearchive.onlinejudge.org/external/24/p2440a.jpg>
</center>

<p>
We can change it to the design with only one variable input, for example: 

<P>
<center>
<IMG SRC="http://livearchive.onlinejudge.org/external/24/p2440a.jpg>
</center>

<p>
(Observe that there are other ways of connecting the inputs to just one x and to some number of 0's and 1's that
implement the same function).


<p>
<b>Task</b>

<p>
Write a program which for each data set:
<blockquote>
<li>reads the description of the net,
<li>computes an optimal assignment of x's and/or 0's and/or 1's to the inputs of the net,
<li>writes the result.
</blockquote>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>
The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 &le; d &le; 20.
The data sets follow.

<p>
Each data set consists of two consecutive lines. The rst of those lines contains exactly two positive integers n
and m separated by single space, 1 &le; n &le; 100.000, 1 &le; m &le; 200.000. Integer n is the number of the net inputs
and integer m is the number of the gates in the net.

<p>
The second of those lines contains exactly 2m nonzero integers, separated by single spaces. The numbers on
positions 2j - 1 and 2j describe the signal sources for the inputs to gate j. The positive number s means the
output of gate s. The negative number s means the (-s)-th input to the net. The gates and the net inputs are
numbered starting from one. The input of each gate is connected to an input of the net or to an output of a gate
whose description occurred earlier in the sequence. Each net input is connected to at least one gate input. Each
gate output is connected to at least one gate input except the output of the last gate that is connected to the
output of the net.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>
The output should consist of exactly d lines, one line for each data set. The line number i should contain the answer
to the i-th data set.

<p>
The answer to one data set should consist of a sequence of exactly k characters terminated by the end of line (with
no spaces in between). Each of those characters should be 0 (the digit `zero' ) or 1 (the digit `one') or x
(lower-case letter `x' ). The i-th symbol of the sequence denotes the assignment to the i-th input of the net.

<p>
If there are more than one optimal assignment then your program should output any of them (but only one).
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
3 6
-1 -3 -1 -2 1 2 1 2 4 3 5 5
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
10x
</PRE>

<P>

______________________________________________________
2441||||||false||||||
<P>There is a number of disjoint vertical line segments in the plane. We say that two segments are horizontally visible if they can be connected by a horizontal line segment that does not have any common points with other vertical segments. Three different vertical segments are said to form a triangle of segments if each two of them are horizontally visible. How many triangles can be found in a given set of vertical segments?<p><b>Task</b><p>Write a program which for each data set:<blockquote><li>reads the description of a set of vertical segments, <li>computes the number of triangles in this set, <li>writes the result.</blockquote><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 &le; d &le; 20. The data sets follow.<p>The first line of each data set contains exactly one integer n, 1 &le; n &le; 8.000, equal to the number of vertical line segments.<p>Each of the following n lines consists of exactly 3 nonnegative integers separated by single spaces: y<sub>i</sub>', y<sub>i</sub>'', x<sub>i</sub> - y-coordinate of the beginning of a segment, y-coordinate of its end and its x-coordinate, respectively. The coordinates satisfy 0 &le; y<sub>i</sub>' &lt; y<sub>i</sub>'' &le; 8.000, 0 &le; x<sub>i</sub> &le; 8.000. The segments are disjoint.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output should consist of exactly d lines, one line for each data set. Line i should contain exactly one integer equal to the number of triangles in the i-th data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
5
0 4 4
0 3 1
3 4 2
0 2 2
0 2 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1
</PRE><P>
______________________________________________________
2442||||||false||||||
<P>It is well known that <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \pi$"> <IMG WIDTH="18" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \approx$"> <IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{22}}{{7}}}$"></SPAN> <tex2html_verbatim_mark>. You can verify that for all integers <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> satisfying <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \le$"><I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \le$">7</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{p}}{{q}}}$"> <IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \neq$"> <IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{22}}{{7}}}$"></SPAN> <tex2html_verbatim_mark>, we have <!-- MATH
 $|22-7 \pi| < |p-q \pi|$
 --><SPAN CLASS="MATH">| 22 - 7<IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \pi$">| &lt; | <I>p</I> - <I>q</I><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \pi$">|</SPAN> <tex2html_verbatim_mark>. Furthermore, <SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{355}}{{113}}}$"></SPAN> <tex2html_verbatim_mark> is another good approximation of <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \pi$"></SPAN> <tex2html_verbatim_mark> . You can also verify that for all integers <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> satisfying <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \le$"><I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \le$">113</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{p}}{{q}}}$"> <IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \neq$"> <IMG WIDTH="28" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{355}}{{113}}}$"></SPAN> <tex2html_verbatim_mark>, we have <!-- MATH
 $|355 - 113 \pi | < |p - q \pi |$
 --><SPAN CLASS="MATH">| 355 - 113<IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \pi$">| &lt; | <I>p</I> - <I>q</I><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \pi$">|</SPAN> <tex2html_verbatim_mark>.<P><P><BR>Let <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> be integers, <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> be a real number and <SPAN CLASS="MATH"><I>q</I> &gt; 0</SPAN> <tex2html_verbatim_mark>. We say that <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{x}}{{y}}}$"></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="textit">d-closer</SPAN> to <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> than <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{y_{1}}}{{x_{1}}}}$"></SPAN> <tex2html_verbatim_mark> if <!-- MATH
 $|y -x \alpha | < |y_{1} - x_{1} \alpha |$
 --><SPAN CLASS="MATH">| <I>y</I> - <I>x</I><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">| &lt; | <I>y</I><SUB>1</SUB> - <I>x</I><SUB>1</SUB><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">|</SPAN> <tex2html_verbatim_mark>. Notice that if <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> is also a rational number <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{p}}{{q}}}$"></SPAN> <tex2html_verbatim_mark> then the inequality <!-- MATH
 $|yq - xp| < |y_{1}q - x_{1}p|$
 --><SPAN CLASS="MATH">| <I>yq</I> - <I>xp</I>| &lt; | <I>y</I><SUB>1</SUB><I>q</I> - <I>x</I><SUB>1</SUB><I>p</I>|</SPAN> <tex2html_verbatim_mark> is equivalent to <!-- MATH
 $|y - x \alpha| < |y_{1} - x_{1} \alpha |$
 --><SPAN CLASS="MATH">| <I>y</I> - <I>x</I><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">| &lt; | <I>y</I><SUB>1</SUB> - <I>x</I><SUB>1</SUB><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">|</SPAN> <tex2html_verbatim_mark>. This can be used to avoid floating point operations. If <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{y}}{{x}}}$"></SPAN> <tex2html_verbatim_mark> is d-closer to <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> than any other rational number <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{y_{1}}}{{x_{1}}}}$"></SPAN> <tex2html_verbatim_mark> with denominator <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> in the range from 1 to <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{y}}{{x}}}$"></SPAN> <tex2html_verbatim_mark> is called a <SPAN CLASS="textit">good approximation</SPAN> of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark>. Let <SPAN CLASS="MATH"><I>G</I>(<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">)</SPAN> <tex2html_verbatim_mark> be the set of all good approximations of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">| <I>G</I>(<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">)|</SPAN> <tex2html_verbatim_mark> be the cardinality of <SPAN CLASS="MATH"><I>G</I>(<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">)</SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="textit">cardinality</SPAN> of a set <SPAN CLASS="MATH"><I>G</I>(<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">)</SPAN> <tex2html_verbatim_mark> is the number of elements in <SPAN CLASS="MATH"><I>G</I>(<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">)</SPAN> <tex2html_verbatim_mark>. We use an example to illustrate these symbols. Let <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"> = <IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{37}}{{13}}}$"></SPAN> <tex2html_verbatim_mark>. The good approximations of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> are , <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{3}}{{1}}}$">,<IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{17}}{{6}}}$"></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{37}}{{13}}}$"></SPAN> <tex2html_verbatim_mark>. The rational number <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{3}}{{1}}}$"></SPAN> <tex2html_verbatim_mark> is a good approximation of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> since no other rational number with denominator 1 and an integer numerator is d-closer to <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> than <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{3}}{{1}}}$"></SPAN> <tex2html_verbatim_mark>. The rational number <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{17}}{{6}}}$"></SPAN> <tex2html_verbatim_mark> is a good approximation of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> since no other rational number with denominator in the range from 1 to 6 and an integer numerator is d-closer to <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> than <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{17}}{{6}}}$"></SPAN> <tex2html_verbatim_mark>. A similar reason holds for <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{37}}{{13}}}$"></SPAN> <tex2html_verbatim_mark>. It is clear that no rational number with denominator greater than 6 and an integer numerator is d-closer to <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> than <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{37}}{{13}}}$"></SPAN> <tex2html_verbatim_mark> since <SPAN CLASS="MATH">| 37 - 13<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">| = 0</SPAN> <tex2html_verbatim_mark>. Therefore, <SPAN CLASS="MATH"><I>G</I>(<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">) = {<IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{3}}{{1}}}$">,<IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{17}}{{6}}}$">,<IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{37}}{{13}}}$">}</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">| <I>G</I>(<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">)| = 3</SPAN> <tex2html_verbatim_mark>. Similarly, you can find that <SPAN CLASS="MATH"><I>G</I>(<IMG WIDTH="28" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{237}}{{113}}}$">) = {<IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{2}}{{1}}}$">,<IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{21}}{{10}}}$">,<IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{65}}{{31}}}$">,<IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{86}}{{41}}}$">,<IMG WIDTH="28" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{237}}{{113}}}$">}</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">| <I>G</I>(<IMG WIDTH="28" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{237}}{{113}}}$">)| = 5</SPAN> <tex2html_verbatim_mark>.<P><P><BR>Given a rational number <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark>, you are asked to design a program for finding <SPAN CLASS="MATH">| <I>G</I>(<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \alpha$">)|</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \le$">5</SPAN> <tex2html_verbatim_mark>, which represents the number of test cases. Then, the cases are listed line by line. In each line, there are two integers <SPAN CLASS="MATH"><I>p</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> separated by a space which are the numerator and denominator, respectively, of test case <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I> = 1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark>. Note that <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \le$"><I>p</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I><SUB>k</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>List the value of <SPAN CLASS="MATH">| <I>G</I>(<IMG WIDTH="22" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2442img1.png ALT="$ {\frac{{p_{k}}}{{q_{k}}}}$">)|</SPAN> <tex2html_verbatim_mark> in line <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>k</I> = 1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
37 13
237 113
175 29
1432 6578
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
5
2
10
</PRE><P>
______________________________________________________
2443||||||false||||||
<P>The downtown of city T consists of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2443img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2443img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>, tall commercial buildings that have basements. The buildings are numbered from 0 through <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>. The electricity of each building is provided by the City Electrical Power Company that puts all of its <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2443img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2443img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>, power cables underground. In order for a building to have electricity, a power line must be connected from one of the underground cables to a power converter inside the building. Because of technical reasons, each power cable is a <SPAN CLASS="textit">loop</SPAN>, meaning that it is a long cable line that originates from a mini power station, runs through some regions in the city and then comes back to the same power station. It is known that each power cable connects to at least 2 and at most 500 buildings. A building may be connected to zero, one or more than one power cable. The electricity of a building connected to more than one power cable can be provided by any one power cable by properly setting its power converter. To have a better city view, it is required by the law that power converters can only be built inside the basements.<P><P><BR>During a <SPAN CLASS="textit">Typhoon</SPAN>, the local rain storm, the downtown of city T is flooded. The basements of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2443img1.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2443img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>, buildings are filled with water. Fortunately, none of the mini power stations are damaged. Once a basement is flooded with rain water, its power converter is damaged and the building is out of electricity. Before fixing the power converter, we need to drain the water in the basement, which takes at least a long time. To make the situation worse, the power cables of city T are designed with the constraint that for each power cable, if it is connected with a damaged power converter, then none of the power converters connected to this power cable can be turned on. It is also impossible to disconnect the damaged power converts from the power cables. However, it is possible to properly set a power convert to get electricity from a power cable that carries electricity. After Typhoon, the City Electrical Power Company needs to know the total number of buildings that are out of electricity. Since the flood has made the traffics inside the city bad, the company cannot send people to survey. Fortunately, it is known by the company the buildings that are flooded in Typhoon since people from those buildings telephoned the company for help. Giving the original power line connection floor plans and the buildings that are flooded, your task is to calculate the total number of buildings that are currently out of electricity, including the ones that are originally not connecting to any power cable.<P><P><BR>For example, each circle in Figure 1 represents a building. Two concentric circles represents a flooded building. There are 9 buildings. Buildings 7 and 8 are flooded. Solid straight lines are power cables. There are 3 power cable lines. One connects buildings 0, 1 and 6. One connects buildings 1, 2, 3 and 7. The last one connects buildings 0, 1, 4, 5 and 8. Buildings 2, 3, 4, 5, 7 and 8 do not have electricity currently in this example.<P><DIV ALIGN="CENTER"><IMG WIDTH="626" HEIGHT="639" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2443img1.png ALT="\epsfbox{p2443.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. In each test case, the first line consists of three integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> separated by a single space. Each of the following <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines represents in a power cable by beginning with the number of buildings in this power cable and then a list of buildings in this cable in clockwise order. It then followed by a line of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> integers, each separated by a space, representing the buildings that are flooded. A line with three <TT>0</TT>'s separates two test cases. The end of the file is a line with three <TT>-1</TT>'s.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the total number of buildings that are out of electricity in a line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 3 2
3 0 1 6
4 1 7 3 2
5 0 4 5 8 1
7 8
0 0 0
5 2 1
3 0 2 1
3 1 4 3
4
-1 -1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6
2
</PRE><P>
______________________________________________________
2444||||||false||||||
<P>Priority-driven scheduling approach is commonly used in modern computer opera- tion systems where the systems always execute the task with the highest priority. In priority-driven scheduling, a task with lower priority may be preempted by a ready task with a higher priority and resume later. A <SPAN CLASS="textit">ready task</SPAN> is a task ready to run as long as it gets the right to use CPU. A <SPAN CLASS="textit">periodic task</SPAN> is executed exactly once in every constant interval which is called a <SPAN CLASS="textit">period</SPAN>. For simplicity, we assume a periodic task is ready at the beginning of a period and the deadline is at the end of each period. It will be ready again at the beginning of the next period. Static-priority assignment states that the priorities of tasks are assigned in advance and do not change during task execution. A set of periodic tasks is said to be <SPAN CLASS="textit">feasible</SPAN> if every task finishes ex- ecution before its deadline. <SPAN CLASS="textit">Rate-Monotonic algorithm</SPAN> assigns a higher priority for a task with shorter period and is an optimal scheduling algorithm using static-priority assignment. It can also find a feasible schedule if there exists any scheduler using static-priority assignment that can find one. Given a set of periodic tasks with known constant execution times and periods, we are interested to know whether the set of task is feasible by a Rate-Monotonic scheduler and how many times the tasks are pre- empted before the schedule first repeats at the <SPAN CLASS="textit">hyperperiod</SPAN> which is defined to be the least common multiple of all task periods. Note that it may be too large to calculate the hyperperiod, <SPAN CLASS="MATH">&lt; 2<SUP>64</SUP></SPAN> <tex2html_verbatim_mark>, in advance and too slow to check feasibility on every time unit. It would be easier and faster to simulate the problem using two priority queues, one for the ready and preempted tasks and the other for the tasks not ready. All tasks will become ready again at the beginning of next hyperperiod.<P><DIV ALIGN="CENTER"><IMG WIDTH="698" HEIGHT="268" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2444.jpg ALT="\epsfbox{p2444.eps}"> <tex2html_verbatim_mark></DIV><P>Figure 2 shows that tasks <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> with execution times 1, 2, 3 and periods 3, 5, 15 respectively are feasible using the Rate-Monotonic scheduling algorithm since <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> finish execution at time 1, 3, 14 respectively. <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is preempted by <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> at time 6 and resume at time 7, <SPAN CLASS="MATH"><I>T</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> is preempted by <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> at time 5 and resume at time 8, preempted again by task <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> at time 9 and resume at time 13. Therefore, the total number of preemption times for this task set is 3.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>All the input numbers are positive integers, <SPAN CLASS="MATH">&lt; 500000</SPAN> <tex2html_verbatim_mark>, separated by a space or new line. The first line is the number of task sets. Then, the task sets are listed set by set. All the task sets are feasible. Each task set is listed by a line of the number of tasks, <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2444.jpg ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, and lines of task execution time and period pairs, execution time <SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark> period. The periods are not sorted and are different in a task set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each task set, each line shows the hyperperiod of the task set followed by the number of total preemption times.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
3
1 3
2 5
3 15
2
1 2
1 3
2
123 123456
456 456123
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
15 3
6 0
18770373696 151
</PRE><P>
______________________________________________________
2445||||||false||||||
<P>Given an <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> matrix <SPAN CLASS="MATH"><I>A</I> = [<I>a</I><SUB>ij</SUB>]</SPAN> <tex2html_verbatim_mark>, the objective of the problem is to find a (consecutive) submatrix of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> with size at least <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> rows and at least <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> cloumns such that the average value of the numbers in the submatrix is maximized.<P>Let <SPAN CLASS="MATH"><I>A</I> = [<I>a</I><SUB>ij</SUB>]</SPAN> <tex2html_verbatim_mark> be an <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> matrix. Then a <SPAN CLASS="MATH"><I>p</I> <TT>x</TT> <I>q</I></SPAN> <tex2html_verbatim_mark> matrix <SPAN CLASS="MATH"><I>B</I> = [<I>b</I><SUB>ij</SUB>]</SPAN> <tex2html_verbatim_mark> is a (consecutive) submatrix of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> if there exists a fixed ordered pair <SPAN CLASS="MATH">(<I>k</I>, <I>l</I> )</SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>b</I><SUB>ij</SUB> = <I>a</I><SUB>i+k, j+l</SUB></SPAN> <tex2html_verbatim_mark> for each <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> pair; note that <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \le$"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \le$"><I>q</I></SPAN> <tex2html_verbatim_mark>. For example,<P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">[7],<IMG WIDTH="16" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \left[\vphantom{\begin{array}{c} 3 \\  9 \end{array} }\right.$"><IMG WIDTH="29" HEIGHT="61" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \begin{array}{c} 3 \\  9 \end{array}$"><IMG WIDTH="16" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \left.\vphantom{\begin{array}{c} 3 \\  9 \end{array} }\right]$">,<IMG WIDTH="16" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \left[\vphantom{ \begin{array}{cc} 1 &amp; 9 \\  7 &amp; 3 \end{array} }\right.$"><IMG WIDTH="54" HEIGHT="61" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \begin{array}{cc} 1 &amp; 9 \\  7 &amp; 3 \end{array}$"><IMG WIDTH="16" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \left.\vphantom{ \begin{array}{cc} 1 &amp; 9 \\  7 &amp; 3 \end{array} }\right]$"></SPAN> <tex2html_verbatim_mark> are submatrices of <SPAN CLASS="MATH"><IMG WIDTH="17" HEIGHT="84" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \left[\vphantom{\begin{array}{ccc} 2 &amp; 3 &amp; 5 \\  1 &amp; 9 &amp; 6 \\  7 &amp; 3 &amp; 4 \end{array} }\right.$"><IMG WIDTH="78" HEIGHT="82" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \begin{array}{ccc} 2 &amp; 3 &amp; 5 \\  1 &amp; 9 &amp; 6 \\  7 &amp; 3 &amp; 4 \end{array}$"><IMG WIDTH="17" HEIGHT="84" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \left.\vphantom{\begin{array}{ccc} 2 &amp; 3 &amp; 5 \\  1 &amp; 9 &amp; 6 \\  7 &amp; 3 &amp; 4 \end{array} }\right]$"></SPAN> <tex2html_verbatim_mark></DIV><P>but<P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">[8],[2&nbsp; 5],<IMG WIDTH="16" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \left[\vphantom{\begin{array}{cc} 9 &amp; 6 \\  7 &amp; 3 \end{array} }\right.$"><IMG WIDTH="54" HEIGHT="61" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \begin{array}{cc} 9 &amp; 6 \\  7 &amp; 3 \end{array}$"><IMG WIDTH="16" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \left.\vphantom{\begin{array}{cc} 9 &amp; 6 \\  7 &amp; 3 \end{array} }\right]$"></SPAN> <tex2html_verbatim_mark> are not submatrices of <SPAN CLASS="MATH"><IMG WIDTH="17" HEIGHT="84" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \left[\vphantom{\begin{array}{ccc} 2 &amp; 3 &amp; 5 \\  1 &amp; 9 &amp; 6 \\  7 &amp; 3 &amp; 4 \end{array} }\right.$"><IMG WIDTH="78" HEIGHT="82" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \begin{array}{ccc} 2 &amp; 3 &amp; 5 \\  1 &amp; 9 &amp; 6 \\  7 &amp; 3 &amp; 4 \end{array}$"><IMG WIDTH="17" HEIGHT="84" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \left.\vphantom{\begin{array}{ccc} 2 &amp; 3 &amp; 5 \\  1 &amp; 9 &amp; 6 \\  7 &amp; 3 &amp; 4 \end{array} }\right]$"></SPAN> <tex2html_verbatim_mark></DIV><P>The density of an <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> matrix <SPAN CLASS="MATH"><I>A</I> = [<I>a</I><SUB>ij</SUB>]</SPAN> <tex2html_verbatim_mark> is the average value of all elements of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>. That is <SPAN CLASS="MATH">(<IMG WIDTH="44" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \sum_{{i=1}}^{{m}}$"><IMG WIDTH="45" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$ \sum_{{j=1}}^{{n}}$"><I>a</I><SUB>ij</SUB>)/(<I>mn</I>)</SPAN> <tex2html_verbatim_mark>. Note that finding the densest submatrix of a given matrix is easy. It is just the largest element within the matrix. On the other hand, the problem becomes interesting when we are asked to find the submatrix with at least <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> rows and at least <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> columns such that the density of the submatrix is maximized.<P>Write a program to find the densest submatrix of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> with size <SPAN CLASS="textit">at least</SPAN> <SPAN CLASS="MATH"><I>R</I> <TT>x</TT> <I>C</I></SPAN> <tex2html_verbatim_mark>. A naive method of calculating the densest submatrix of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> considers <SPAN CLASS="MATH"><I>O</I>(<I>mn</I>)</SPAN> <tex2html_verbatim_mark> possible upper left corner elements, together with another <SPAN CLASS="MATH"><I>O</I>(<I>mn</I>)</SPAN> <tex2html_verbatim_mark> possible lower right corners, while calculating the density of the proposed submatrix takes <SPAN CLASS="MATH"><I>O</I>(<I>mn</I>)</SPAN> <tex2html_verbatim_mark> time. What resulted is a very time-consuming <SPAN CLASS="MATH"><I>O</I>(<I>m</I><SUP>3</SUP><I>n</I><SUP>3</SUP>)</SPAN> <tex2html_verbatim_mark> time algorithm. For a modest sized <SPAN CLASS="MATH">100 <TT>x</TT> 100</SPAN> <tex2html_verbatim_mark> matrix, the term becomes <SPAN CLASS="MATH">10<SUP>12</SUP></SPAN> <tex2html_verbatim_mark>, not easily finished in reasonable time. A somehow cleverer way of computing the densest submatrix is expected.<P>Given an <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> matrix <SPAN CLASS="MATH"><I>A</I> = [<I>a</I><SUB>ij</SUB>]</SPAN> <tex2html_verbatim_mark>, we denote <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>) - <I>prefix</I>&nbsp;<I>sum</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> by the sum<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>P</I>(<I>x</I>, <I>y</I>) = <IMG WIDTH="27" HEIGHT="63" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$\displaystyle \sum_{{i=1}}^{{x}}$"><IMG WIDTH="28" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$\displaystyle \sum_{{j=1}}^{{y}}$"><I>a</I><SUB>ij</SUB>.</DIV><P><tex2html_verbatim_mark></P>It follows that the sum of submatrix with upper left corner <SPAN CLASS="MATH">(<I>i</I><SUB>1</SUB>, <I>j</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and lower right corner <SPAN CLASS="MATH">(<I>i</I><SUB>2</SUB>, <I>j</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>, can be quickly computed by 4 prefix sums; that is,<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="31" HEIGHT="70" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$\displaystyle \sum_{{i=i_{1}}}^{{i_{2}}}$"><IMG WIDTH="33" HEIGHT="71" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2445img1.png ALT="$\displaystyle \sum_{{j=j_{1}}}^{{j_{2}}}$"><I>a</I><SUB>ij</SUB> = <I>P</I>(<I>i</I><SUB>2</SUB>, <I>j</I><SUB>2</SUB>) - <I>P</I>(<I>i</I><SUB>1</SUB> -1, <I>j</I><SUB>2</SUB>) - <I>P</I>(<I>i</I><SUB>2</SUB>, <I>j</I><SUB>1</SUB> -1) + <I>P</I>(<I>i</I><SUB>1</SUB> -1, <I>j</I><SUB>1</SUB> - 1)</DIV><P><tex2html_verbatim_mark></P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><SPAN CLASS="textit">Several</SPAN> sets of integral matrices. The inputs are just a list of integers. Within each set, the first 4 integers (in a single line) represent the size of the matrix, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, indicating an <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> matrix, and the constrained submatrix size, <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>. Note that each of them <SPAN CLASS="MATH">(<I>m</I>, <I>n</I>, <I>R</I>, <I>C</I>)</SPAN> <tex2html_verbatim_mark>, can be as large as 200. After the four integers, there will be <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines representing the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> rows of the matrix; each line (row) contains exactly n integers which are the elements in the row. The value of each element in a matrix is in the range from 0 to 800 and most of them are less than 100. Thus, there are totally <SPAN CLASS="MATH"><I>mn</I></SPAN> <tex2html_verbatim_mark> integers for the particular matrix.<P>These matrices will occur repeatedly in the input as the pattern described above.<P>An integer <SPAN CLASS="MATH"><I>m</I> = 0</SPAN> <tex2html_verbatim_mark> (zero) signifies the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each matrix of the input, find the densest submatrix with size <SPAN CLASS="MATH"><I>atleastR</I></SPAN> <tex2html_verbatim_mark> rows and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> columns. Output the submatrix by specifying the upper left corner and the lower right corner by printing four indices. For example, a line<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>r</I><SUB>1</SUB>&nbsp;<I>c</I><SUB>1</SUB>&nbsp;<I>r</I><SUB>2</SUB>&nbsp;<I>c</I><SUB>2</SUB></DIV><P><tex2html_verbatim_mark></P><P>represents a submatrix with the upper left corner <SPAN CLASS="MATH">(<I>r</I><SUB>1</SUB>, <I>c</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and the lower right corner <SPAN CLASS="MATH">(<I>r</I><SUB>2</SUB>, <I>c</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>. Output a single star `<TT>*</TT>' to signify the end of outputs.<P>For the uniqueness of the answer, if two submatrices have the same density, only print the matrix whose four indices of corners <SPAN CLASS="MATH">(<I>r</I><SUB>1</SUB>, <I>c</I><SUB>1</SUB>, <I>r</I><SUB>2</SUB>, <I>c</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> with smaller <SPAN CLASS="textit">lexicographical order</SPAN>. For example, if the two sets of indices are (4, 3, 18, 9) and (7, 1, 14, 8), then just output the first submatrix since its indices of the corners has smaller lexicographical order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
  3    4     2    1
150  500    150 800
  1  200    100 300
400  800     80 400
  4    2     3    2
400  800
200  500
100  200
600  600
  0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 4 2 4
1 1 4 2
*
</PRE><P>
______________________________________________________
2446||||||false||||||
<P>In decades, people have realized the significance of data communication. Most of the designs and analysis of communication networks usually model their topologies as graphical representations because many relevant problems of networks can be solved by using graph theoretic results. As usual, a communication network is modeled by a graph that nodes and edges in a graph correspond to the communication sites and links, respectively. A network <SPAN CLASS="MATH"><I>G</I> = (<I>N</I>, <I>E</I>)</SPAN> <tex2html_verbatim_mark> consists of a set <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> of nodes together with a set <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> of edges, representing pairs of nodes. If the pairs are considered to be unordered, then we have an <SPAN CLASS="textit">undirected</SPAN> network and the edge joining two nodes <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> is represented by <SPAN CLASS="MATH">(<I>u</I>, <I>v</I>)</SPAN> <tex2html_verbatim_mark>. For example, Figure 3 depicts a network <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> which contains 10 nodes and 16 edges.<P><DIV ALIGN="CENTER"><IMG WIDTH="715" HEIGHT="485" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2446.jpg ALT="\epsfbox{p2446.eps}"> <tex2html_verbatim_mark></DIV><P>In a network <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, the <SPAN CLASS="textit">distance</SPAN> between two nodes <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>, denoted by <SPAN CLASS="MATH"><I>d</I><SUB>G</SUB>(<I>u</I>, <I>v</I>)</SPAN> <tex2html_verbatim_mark>, is the number of edges of a shortest path from <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>. A sequence of vertices <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>,..., <I>v</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> is a <SPAN CLASS="textit">path</SPAN> from <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>v</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> of length <SPAN CLASS="MATH"><I>k</I> - 1</SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> provided that there is an edge between <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>i+1</SUB></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>k</I> - 1</SPAN> <tex2html_verbatim_mark>. If no path exists between nodes <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>d</I><SUB>G</SUB>(<I>u</I>, <I>v</I>) = <IMG WIDTH="22" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2446.jpg ALT="$ \infty$"></SPAN> <tex2html_verbatim_mark> . A path is a <SPAN CLASS="textit">shortest path</SPAN> between nodes <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> if its length is minimum among all of the paths between <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>. A network is <SPAN CLASS="textit">connected</SPAN> if there exists a path between any two nodes. The failure of a node <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> means that <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> and all its incident edges are removed from <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, and the remaining subnetwork is denoted by <SPAN CLASS="MATH"><I>G</I> - <I>w</I></SPAN> <tex2html_verbatim_mark>. A node <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> is called a <SPAN CLASS="textit">hinge node</SPAN> if there exist two other nodes <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>d</I><SUB>G-w</SUB>(<I>u</I>, <I>v</I>) &gt; <I>d</I><SUB>G</SUB>(<I>u</I>, <I>v</I>)</SPAN> <tex2html_verbatim_mark>. It means that the distance between <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> is increased after <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> is removed from <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>. Thus, a hinge node can be viewed as a critical node of the corresponding network and the failure of such a node will increase the communication cost to the remaining subnetwork. For example, we consider the network <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> in Figure 3. The node <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is a hinge node since <SPAN CLASS="MATH"><I>d</I><SUB>G-v<SUB>2</SUB></SUB>(<I>v</I><SUB>8</SUB>, <I>v</I><SUB>9</SUB>) = 3 &gt; <I>d</I><SUB>G</SUB>(<I>v</I><SUB>8</SUB>, <I>v</I><SUB>9</SUB>) = 2</SPAN> <tex2html_verbatim_mark>. Indeed, the set of hinge nodes contained in <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH">{<I>v</I><SUB>2</SUB>, <I>v</I><SUB>3</SUB>, <I>v</I><SUB>4</SUB>, <I>v</I><SUB>7</SUB>, <I>v</I><SUB>8</SUB>, <I>v</I><SUB>10</SUB>}</SPAN> <tex2html_verbatim_mark>.<P><P><BR>Suppose that we have several networks. Each network is connected and contains at most <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> nodes, where <!-- MATH
 $3 \le n \le 100$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2446.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2446.jpg
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>. Assume now that you are hired to serve as
a network administrator and you should analyze the communication cost. For this
reason, you will be interested in finding all hinge nodes in a network. In particular,
you should design a program that can efficiently calculate the total number of hinge
nodes for each of the given networks.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file consists more than one and less than six networks (cases).
Each test case starts with a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, where <!-- MATH
 $3 \le n \le 100$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2446.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2446.jpg
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>
lines represents the adjacency matrix of a network <SPAN CLASS="MATH"><I>G</I></SPAN>
<tex2html_verbatim_mark>. The last case is followed by a
Â´Â´<TT>0</TT>" to indicate ``end of input." An <SPAN  CLASS="textit">adjacency matrix</SPAN> of a network <SPAN CLASS="MATH"><I>G</I></SPAN>
<tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> nodes,
denoted by <!-- MATH
 $A(G) = [a_{u,v}]$
 -->
<SPAN CLASS="MATH"><I>A</I>(<I>G</I>) = [<I>a</I><SUB>u, v</SUB>]</SPAN>
<tex2html_verbatim_mark>, is an <!-- MATH
 $n \times n$
 -->
<SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN>
<tex2html_verbatim_mark> 0, 1-matrix such that <!-- MATH
 $a_{u,v} = 1$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>u, v</SUB> = 1</SPAN>
<tex2html_verbatim_mark> if <!-- MATH
 $(u, v) \in  E$
 -->
<SPAN CLASS="MATH">(<I>u</I>, <I>v</I>) <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2446.jpg
 ALT="$ \in$"> <I>E</I></SPAN>
<tex2html_verbatim_mark>, and
<!-- MATH
 $a_{u,v} = 0$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>u, v</SUB> = 0</SPAN>
<tex2html_verbatim_mark> otherwise. Note that there is not any delimiter between any two elements in
each line of a 0, 1-matrix. For example, the adjacency matrix of the graph in Figure 3
is shown in test case 3 of the sample input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case, output the total number of hinge nodes in a line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
010
101
010
3
011
101
110
10
0110001000
1001000111
1000001100
0100010101
0000000101
0001000001
1010000010
0111100000
0100001000
0101110000
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1
0
6
</PRE> 

<P>

______________________________________________________
2447||||||false||||||
<P>There are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2447img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2447img1.png ALT="$ \le$">1, 000</SPAN> <tex2html_verbatim_mark> rectangles in the 2-D <SPAN CLASS="MATH"><I>xy</I></SPAN> <tex2html_verbatim_mark>-plane. The four sides of a rectangle are horizontal or vertical line segments. Rectangles are defined by their lower-left and upper-right corner points. Each corner point is a pair of two non- negative integers in the range of 0 through 50,000 indicating its <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates. Assume that the contour of their union is defined by a set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> of segments. We can use a subset of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> to construct simple polygon(s). Please report the total area of the polygon(s) constructed by the subset of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. The area should be as large as possible. In a 2-D xy-plane, a polygon is defined by a finite set of segments such that every segment extreme (or endpoint) is shared by exactly two edges and no subsets of edges has the same property. The segments are edges and their extremes are the vertices of the polygon. A polygon is <SPAN CLASS="textit">simple</SPAN> if there is no pair of nonconsecutive edges sharing a point. Notice that the area of a polygon includes the holes inside the polygon.<P><P><BR>Example: Consider the following three rectangles:<P><DIV ALIGN="CENTER">rectangle 1: <!-- MATH
 $< (0, 0) (4, 4) >$
 --><SPAN CLASS="MATH">&lt; (0, 0)(4, 4) &gt;</SPAN> <tex2html_verbatim_mark>,<BR>rectangle 2: <!-- MATH
 $< (1, 1) (5, 2) >$
 --><SPAN CLASS="MATH">&lt; (1, 1)(5, 2) &gt;</SPAN> <tex2html_verbatim_mark>,<BR>rectangle 3: <!-- MATH
 $< (1, 1) (2, 5) >$
 --><SPAN CLASS="MATH">&lt; (1, 1)(2, 5) &gt;</SPAN> <tex2html_verbatim_mark>.<BR></DIV><P>The total area of all simple polygons constructed by these rectangles is 18.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. A line of 4 <TT>-1</TT>'s separates each test case. An extra line of 4 <TT>-1</TT>'s marks the end of the input. In each test case, the rectangles are given one by one in a line. In each line for a rectangle, 4 non-negative integers are given. The first two are the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the lower-left corner. The next two are the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the upper-right corner.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the total area of all simple polygons in a line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0 4 4
1 1 5 2
1 1 2 5
-1 -1 -1 -1
0 0 2 2
1 1 3 3
2 2 4 4
-1 -1 -1 -1
-1 -1 -1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
18
10
</PRE><P>
______________________________________________________
2448||||||false||||||
<P>To build a complex system, software engineering methods suggest building a design or prototype first before programming the real system. System correctness can be tested or verified on such a design (or a model) so that serious errors can be found in an earlier stage. As a result, software development cost and time can be significantly reduced.<P><P><BR>A design is often the abstract behaviors of the real system. Some representations, such as finite-state machines (FSM), are suitable for describing the abstract behaviors of a system. For example, if we want to build an oven system, we can first design a FSM in Figure 4 to represent the oven we intend to build. Then, we can check system correctness on the FSM.<P><P><BR>To define the correctness, we label every state of the machine with propositions {<SPAN CLASS="textbf">start,close,heat</SPAN>}. Each proposition at a state is either true or false. For instance, at state 1, all propositions are false, which means at this state the start button is not pressed, oven door is not closed, and oven is not heated. At state 3, proposition <SPAN CLASS="textbf">close</SPAN> is true, which means at the state, oven door is closed.<P><P><BR>An interesting problem is to ask if the FSM satisfies some properties. For example, we may want to ask ``<SPAN CLASS="textit">Can the oven <SPAN CLASS="textbf">never</SPAN> heat up after start button is pressed?</SPAN>" Let it be property A. If the FSM satisfies property A, we know the oven is a bad design and it must be fixed before being made into a product. To check if the FSM satisfies property A, it is equivalent to ask ``<SPAN CLASS="textit">if there exist some states that <SPAN CLASS="textbf">start</SPAN> is true and <SPAN CLASS="textbf">heat</SPAN> is never true along an infinite run which begins from the states.</SPAN>" In order to express the properties formally, we need the following notation.<P><P><BR>An <SPAN CLASS="textit">infinite sequence</SPAN> of states is a cycle or a path which finally goes into a cycle in a FSM. For example, see Figure 4. States 1, 2, 5 and 3 form a cycle and constitute an infinite sequence. States 7 and 4 constitute another infinite sequence since the path starts from state 7 and finally goes into the cycle which only contains state 4. Let <SPAN CLASS="MATH"><I>EG</I>(<I>p</I>)</SPAN> <tex2html_verbatim_mark> denote the states which constitute some infinite sequences with proposition p being true along the sequences. For example, <SPAN CLASS="MATH"><I>EG</I></SPAN> <tex2html_verbatim_mark>(<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \sim$"></SPAN> <tex2html_verbatim_mark><SPAN CLASS="textbf">heat</SPAN>) contains states 1, 2, 5 and 3. However, state 6 is not in <SPAN CLASS="MATH"><I>EG</I></SPAN> <tex2html_verbatim_mark>(<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \sim$"></SPAN> <tex2html_verbatim_mark><SPAN CLASS="textbf">heat</SPAN>) since it cannot constitute an infinite sequence with other states satisfying <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>EG</I></SPAN> <tex2html_verbatim_mark>(<SPAN CLASS="textbf">heat</SPAN>) contains states 7 and 4 which constitute an infinite sequence with <SPAN CLASS="textbf">heat</SPAN> being true along the sequence.<P><DIV ALIGN="CENTER"><IMG WIDTH="685" HEIGHT="773" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="\epsfbox{p2448.eps}"> <tex2html_verbatim_mark></DIV><P>Therefore, property A can be expressed by a formula (<SPAN CLASS="textbf">start</SPAN><SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \wedge$"> <I>EG</I></SPAN> <tex2html_verbatim_mark>(<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \sim$"></SPAN> <tex2html_verbatim_mark><SPAN CLASS="textbf">heat</SPAN>)) which contains states 2 and 5, where <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \wedge$"></SPAN> <tex2html_verbatim_mark> is the ``AND" relation of two propostions. The reason is as follows: The states which satisfy propostion <SPAN CLASS="textbf">start</SPAN> are 2, 5, 6 and 7. The stats which belong to <SPAN CLASS="MATH"><I>EG</I></SPAN> <tex2html_verbatim_mark>(<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \sim$"></SPAN> <tex2html_verbatim_mark><SPAN CLASS="textbf">heat</SPAN>) are 1, 2, 3 and 5. Thus, only states 2 and 5 satisfy the formula (<SPAN CLASS="textbf">start</SPAN><SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \wedge$"> <I>EG</I></SPAN> <tex2html_verbatim_mark>(<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \sim$"></SPAN> <tex2html_verbatim_mark><SPAN CLASS="textbf">heat</SPAN>)).<P><P><BR><B>Your goal</B>. Given a FSM and a property formula, please write a program to determine if the FSM satisfies the property. If it can be satisfied, please output the states which satisfy the property.<P>Note that the property formula is limited to the form <SPAN CLASS="MATH">(<I>term</I><SUB>1</SUB> <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \wedge$"> <I>term</I><SUB>2</SUB> <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \wedge$">...<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \wedge$"> <I>term</I><SUB>n</SUB>)</SPAN> <tex2html_verbatim_mark>, where each term is either a proposition <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>EG</I>(<I>p</I>)</SPAN> <tex2html_verbatim_mark>. Between terms in a formula, we always have the "AND" relation.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input begins with a number of test data which is less than 10. Each test data contains the following: A test data begins with the names of propositions. The first line begins with <SPAN CLASS="MATH">(<I>m</I>&nbsp;<I>prop</I><SUB>1</SUB>&nbsp;<I>prop</I><SUB>2</SUB>...<I>prop</I><SUB>m</SUB>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">&lt; 10</SPAN> <tex2html_verbatim_mark>, is the number of propositions, <SPAN CLASS="MATH"><I>prop</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the name of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th proposition and each name contains less than 6 characters.<P>The second part is the information of a FSM. A FSM begins with <SPAN CLASS="MATH">(<I>s</I>&nbsp;<I>t</I>&nbsp;<I>i</I>)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>s</I> &lt; 50</SPAN> <tex2html_verbatim_mark> is the number of states, <SPAN CLASS="MATH"><I>t</I> &lt; 100</SPAN> <tex2html_verbatim_mark> is the number of transitions and <SPAN CLASS="MATH"><I>i</I> &lt; 100</SPAN> <tex2html_verbatim_mark> is the index of initial state. The index of states starts from 1. Next is <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> lines of data to describe the states. Each state is of the form <SPAN CLASS="MATH">(<I>si</I>&nbsp;<I>p</I><SUB>1</SUB>&nbsp;<I>p</I><SUB>2</SUB>...<I>p</I><SUB>m</SUB>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>si</I></SPAN> <tex2html_verbatim_mark> is the index of the state and <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the boolean value of <SPAN CLASS="MATH"><I>prop</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. It can be either <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> . After the state information is <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> lines of transition information. Each transition is described by <SPAN CLASS="MATH">(<I>st</I>&nbsp;<I>ed</I> )</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>st</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>ed</I></SPAN> <tex2html_verbatim_mark> are the source and destination states of the transition. Note that the label of transition is ignored because it is not a concern to our problem.<P>The final part is the property formula information. It is of the form <SPAN CLASS="MATH">(<I>k</I>&nbsp;<I>term</I><SUB>1</SUB>&nbsp;<I>term</I><SUB>2</SUB>...<I>term</I><SUB>k</SUB>)</SPAN> <tex2html_verbatim_mark> , where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the length of the formula and <SPAN CLASS="MATH"><I>term</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> can be either a proposition name <SPAN CLASS="MATH"><I>prop</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> (with or without <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2448img1.png ALT="$ \sim$"></SPAN> <tex2html_verbatim_mark> ) or <SPAN CLASS="MATH"><I>EG</I>(<I>prop</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The states which satisfy the property formula. If there are no states satisfying the formula, please output `<TT>NO</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
   23 start close heat
   7 12 1
   1 F F F
   2 T F F
   3 F T F
   4 F T T
   5 T T F
   6 T T F
   7 T T T
   1 2
   2 5
   5 2
   5 3
   1 3
   3 1
   3 6
   6 7
   7 4
   4 3
   4 4
   4 1
   2 start EG~heat
   2 a b
   3 4 1
   1 T T
   2 F F
   3 T F
   1 2
   2 3
   1 3
   3 3
   2 EGa EG~b
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
   2 5
   3
</PRE><P>
______________________________________________________
2449||||||false||||||
<P>Professor T. T. Moh has invented a new public key cryptosystem. The new cryptosystem is called TTM, and it is based on the composition of functions.<P>TTM is a block cipher. Assume that the block size is 100 bytes. Thus, a block of message can be represented by <SPAN CLASS="MATH"><I>m</I> = (<I>m</I><SUB>1</SUB>, <I>m</I><SUB>2</SUB>,..., <I>m</I><SUB>100</SUB>)</SPAN> <tex2html_verbatim_mark>.<P>A sequence of invertible transformations <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{1}}^{}$">,<IMG WIDTH="22" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{2}}^{}$">,...,<IMG WIDTH="24" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{n}}^{}$"></SPAN> <tex2html_verbatim_mark> are designed to convert a block of message into cipher. Each transformation, <SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{i}}^{}$"></SPAN> <tex2html_verbatim_mark>, contains 100 functions, <SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{i}}^{}$"> = (<I>f</I><SUP>i</SUP><SUB>1</SUB>, <I>f</I><SUP>i</SUP><SUB>2</SUB>,..., <I>f</I><SUP>i</SUP><SUB>100</SUB>)</SPAN> <tex2html_verbatim_mark>, where each <SPAN CLASS="MATH"><I>f</I><SUP>i</SUP><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> is a polynomial. Thus, each transformation can convert a block of 100 bytes into another block of 100 bytes.<P>After these functions are determined, the cipher <SPAN CLASS="MATH"><I>c</I> = (<I>c</I><SUB>1</SUB>, <I>c</I><SUB>2</SUB>,..., <I>c</I><SUB>100</SUB>)</SPAN> <tex2html_verbatim_mark> can be computed by<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>c</I> = <IMG WIDTH="24" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$\displaystyle \phi_{{n}}^{}$"><TT>o</TT><IMG WIDTH="41" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$\displaystyle \phi_{{n-1}}^{}$"><TT>o</TT><SUP> . </SUP><TT>o</TT><IMG WIDTH="22" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$\displaystyle \phi_{{1}}^{}$">(<I>m</I>).</DIV><P><tex2html_verbatim_mark></P><P>The public key of the TTM cryptosystem is the composition of the transformations <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi$"> = <IMG WIDTH="24" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{n}}^{}$"><TT>o</TT><IMG WIDTH="41" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{n-1}}^{}$"><TT>o</TT><SUP> . </SUP><TT>o</TT><IMG WIDTH="22" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{1}}^{}$"></SPAN> <tex2html_verbatim_mark>, and the private key is the transformations <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{1}}^{}$">,<IMG WIDTH="22" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{2}}^{}$">,...,<IMG WIDTH="24" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2449img1.png ALT="$ \phi_{{n}}^{}$"></SPAN> <tex2html_verbatim_mark>. The TTM cryptosystem is secure if the decomposition of functions is difficult,<P>Note that TTM does not treat a block of message as a large number. All computations in TTM is based on bytes. This is why the encryption and the decryption speed can be very fast.<P>To implement the TTM cryptosystem, we first need to select a field which has <SPAN CLASS="MATH">2<SUP>8</SUP></SPAN> <tex2html_verbatim_mark> elements. We shall denote this field by <SPAN CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN> <tex2html_verbatim_mark>, the addition operation by ``+" and the multiplication operation by ``<SPAN CLASS="MATH"><SUP> . </SUP></SPAN><tex2html_verbatim_mark>".<P>An element of <SPAN CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN> <tex2html_verbatim_mark> can be represented by an 8-bit binary number <SPAN CLASS="MATH"><I>b</I><SUB>8</SUB><I>b</I><SUB>7</SUB><SUP> ... </SUP><I>b</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> or by a 2-digit hexadecimal number <SPAN CLASS="MATH"><I>h</I><SUB>1</SUB><I>h</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>.<P>To define ``+" and ``<SPAN CLASS="MATH"><SUP> . </SUP></SPAN><tex2html_verbatim_mark>" operation in <SPAN CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN> <tex2html_verbatim_mark>, we identify each element in <SPAN CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I><SUB>7</SUB><I>b</I><SUB>6</SUB><SUP> ... </SUP><I>b</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>, with a polynomial<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>b</I><SUB>7</SUB><I>x</I><SUP>7</SUP> + <I>b</I><SUB>6</SUB><I>x</I><SUP>6</SUP> + <SUP>... </SUP>+ <I>b</I><SUB>0</SUB>.</DIV><P><tex2html_verbatim_mark></P><P>For example, 01010111 is the polynomial <SPAN CLASS="MATH"><I>x</I><SUP>6</SUP> + <I>x</I><SUP>4</SUP> + <I>x</I><SUP>2</SUP> + <I>x</I> + 1</SPAN> <tex2html_verbatim_mark>.<P>The addition of two elements in <SPAN CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN> <tex2html_verbatim_mark> is the addition of the two corresponding polynomials. For example 01010111 + 10000011 = 11010100, since <!-- MATH
 $(x^{6} + x^{4} + x^{2} + x +
1) + (x^{7} + x + 1) = x^{7} + x^{6} + x^{4} + x^{2}$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUP>6</SUP> + <I>x</I><SUP>4</SUP> + <I>x</I><SUP>2</SUP> + <I>x</I> + 1) + (<I>x</I><SUP>7</SUP> + <I>x</I> + 1) = <I>x</I><SUP>7</SUP> + <I>x</I><SUP>6</SUP> + <I>x</I><SUP>4</SUP> + <I>x</I><SUP>2</SUP></SPAN>
<tex2html_verbatim_mark>.

<P>
To define ``<SPAN CLASS="MATH"><SUP> . </SUP></SPAN>
<tex2html_verbatim_mark>" in <SPAN  CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN>
<tex2html_verbatim_mark>, we need an irreducible polynomial of degree 8. In this
problem, we assume that the irreducible polynomial is

<P>
<P><!-- MATH
 \begin{displaymath}
m(x) = x^{8} + x^{4} + x^{3} + x + 1.
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>m</I>(<I>x</I>) = <I>x</I><SUP>8</SUP> + <I>x</I><SUP>4</SUP> + <I>x</I><SUP>3</SUP> + <I>x</I> + 1.
</DIV><P>
<tex2html_verbatim_mark></P>

<P>
Multiplication of two elements in <SPAN  CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN>
<tex2html_verbatim_mark> is the product of the two polynomials modular
the irreducible polynomial <SPAN CLASS="MATH"><I>m</I>(<I>x</I>)</SPAN>
<tex2html_verbatim_mark>. That is, first multiply the two polynomials and
then divide the resulting polynomial by <SPAN CLASS="MATH"><I>m</I>(<I>x</I>)</SPAN>
<tex2html_verbatim_mark> and find the remainder. For example,
01010111  10000011 = 11000001, since <!-- MATH
 $(x^{6} + x^{4} + x^{2} + x + 1)$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUP>6</SUP> + <I>x</I><SUP>4</SUP> + <I>x</I><SUP>2</SUP> + <I>x</I> + 1)</SPAN>
<tex2html_verbatim_mark> ï¿½<!-- MATH
 $(x^{7} + x + 1) =
x^{13} + x^{11} + x^{9} + x^{8} + x^{6} + x^{5} + x^{4} + x^{3} + 1$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUP>7</SUP> + <I>x</I> + 1) = <I>x</I><SUP>13</SUP> + <I>x</I><SUP>11</SUP> + <I>x</I><SUP>9</SUP> + <I>x</I><SUP>8</SUP> + <I>x</I><SUP>6</SUP> + <I>x</I><SUP>5</SUP> + <I>x</I><SUP>4</SUP> + <I>x</I><SUP>3</SUP> + 1</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $x^{13} + x^{11} + x^{9} + x^{8} + x^{6} + x^{5} + x^{4} + x^{3} + 1$
 -->
<SPAN CLASS="MATH"><I>x</I><SUP>13</SUP> + <I>x</I><SUP>11</SUP> + <I>x</I><SUP>9</SUP> + <I>x</I><SUP>8</SUP> + <I>x</I><SUP>6</SUP> + <I>x</I><SUP>5</SUP> + <I>x</I><SUP>4</SUP> + <I>x</I><SUP>3</SUP> + 1</SPAN>
<tex2html_verbatim_mark> modulo <!-- MATH
 $x^{8} + x^{4} + x^{3} + x + 1$
 -->
<SPAN CLASS="MATH"><I>x</I><SUP>8</SUP> + <I>x</I><SUP>4</SUP> + <I>x</I><SUP>3</SUP> + <I>x</I> + 1</SPAN>
<tex2html_verbatim_mark> equals <!-- MATH
 $x^{7} + x^{6} + 1$
 -->
<SPAN CLASS="MATH"><I>x</I><SUP>7</SUP> + <I>x</I><SUP>6</SUP> + 1</SPAN>
<tex2html_verbatim_mark>.

<P>
Note that, in the addition and multiplication of the polynomials, the operation
of the coefficients is in <SPAN  CLASS="textbf">Z</SPAN><SPAN CLASS="MATH"><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>, not in the field <SPAN  CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN>
<tex2html_verbatim_mark>. That is, <!-- MATH
 $0 + 0 = 1 + 1 = 0$
 -->
<SPAN CLASS="MATH">0 + 0 = 1 + 1 = 0</SPAN>
<tex2html_verbatim_mark>,
<!-- MATH
 $0 + 1 = 1 + 0 = 1$
 -->
<SPAN CLASS="MATH">0 + 1 = 1 + 0 = 1</SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $0 \times 0 = 0 \times 1 = 1 \times 0 = 0, 1 \times 1 = 1$
 -->
<SPAN CLASS="MATH">0 <TT>x</TT> 0 = 0 <TT>x</TT> 1 = 1 <TT>x</TT> 0 = 0, 1 <TT>x</TT> 1 = 1</SPAN>
<tex2html_verbatim_mark>.

<P>
Although subtraction and division in <SPAN  CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN>
<tex2html_verbatim_mark> are not needed in this problem, the
following facts can help you better understand the operations of the field. It is easy to
verify that 00000000 is the zero and 00000001 is the unit of the field <SPAN  CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN>
<tex2html_verbatim_mark>. Observe
that subtraction in this field is the same as addition. They are all equivalent to the
exclusive-or of the corresponding binary bits.

<P>
In this problem, we are going to design a simplified tool to generate keys for TTM.
Your program needs only do two types of operations: (1) create a function, and (2)
compute the composition of functions.

<P>
Creating a function means to read a function definition from the input file and
store it properly. A function is defined in the input file as

<P>
<P><!-- MATH
 \begin{displaymath}
f_{i} = t_{1} + t_{2} + \cdots + t_{m}.
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>f</I><SUB>i</SUB> = <I>t</I><SUB>1</SUB> + <I>t</I><SUB>2</SUB> + <SUP> ... </SUP> + <I>t</I><SUB>m</SUB>.
</DIV><P>
<tex2html_verbatim_mark></P>

<P>
In the above definition, <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> is the function number. Each function has a unique number.
Each term <SPAN CLASS="MATH"><I>t</I><SUB>j</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $j = 1, 2, \ldots , m$
 -->
<SPAN CLASS="MATH"><I>j</I> = 1, 2,..., <I>m</I></SPAN>
<tex2html_verbatim_mark> is a product of the form

<P>
<P><!-- MATH
 \begin{displaymath}
c \ xi_{1}\verb!^!j_{1} \ xi_{2}\verb!^!j_{2}\cdots xi_{r}\verb!^!j_{r},
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>c</I>&nbsp;<I>xi</I><SUB>1</SUB><code>^</code><I>j</I><SUB>1</SUB>&nbsp;<I>xi</I><SUB>2</SUB><code>^</code><I>j</I><SUB>2</SUB><SUP> ... </SUP><I>xi</I><SUB>r</SUB><code>^</code><I>j</I><SUB>r</SUB>,
</DIV><P>
<tex2html_verbatim_mark></P>
where <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> is an element in <SPAN  CLASS="textbf">F</SPAN><SPAN CLASS="MATH">(2<SUP>8</SUP>)</SPAN>
<tex2html_verbatim_mark>, and each <!-- MATH
 $xi_{k}\verb!^!j_{k}$
 -->
<SPAN CLASS="MATH"><I>xi</I><SUB>k</SUB><code>^</code><I>j</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $k = 1, 2, \ldots , r$
 -->
<SPAN CLASS="MATH"><I>k</I> = 1, 2,..., <I>r</I></SPAN>
<tex2html_verbatim_mark>, means <!-- MATH
 $(x_{i_{k}})^{jk}$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>i<SUB>k</SUB></SUB>)<SUP>jk</SUP></SPAN>
<tex2html_verbatim_mark>. The value of each <SPAN CLASS="MATH"><I>i</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> is an integer in <SPAN CLASS="MATH">[1, 100]</SPAN>
<tex2html_verbatim_mark>. We shall adopt the following conventions in
defining a term. If <SPAN CLASS="MATH"><I>c</I> = 1</SPAN>
<tex2html_verbatim_mark>, the constant is omitted, except it is the only one in the term.

<P>
We assume that <SPAN CLASS="MATH"><I>j</I><SUB>k</SUB> &gt; 0</SPAN>
<tex2html_verbatim_mark>, and if the exponent <SPAN CLASS="MATH"><I>j</I><SUB>k</SUB> = 1</SPAN>
<tex2html_verbatim_mark>, only <SPAN CLASS="MATH"><I>xi</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> will be shown. Note that
the exponent <SPAN CLASS="MATH"><I>j</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> will be less than 256.

<P>

<P>
<BR>
For example, ``<!-- MATH
 $f1 = x1 + x2\verb!^!3 x3$
 -->
<SPAN CLASS="MATH"><I>f</I>1 = <I>x</I>1 + <I>x</I>2<code>^</code>3<I>x</I>3</SPAN>
<tex2html_verbatim_mark>" and ``<!-- MATH
 $f2 = 3f x10 x2 + x5 7 + fe$
 -->
<SPAN CLASS="MATH"><I>f</I>2 = 3<I>fx</I>10<I>x</I>2 + <I>x</I>57 + <I>fe</I></SPAN>
<tex2html_verbatim_mark>" are valid
function definitions, but ``<!-- MATH
 $f3 = 256 x1 + 320$
 -->
<SPAN CLASS="MATH"><I>f</I>3 = 256<I>x</I>1 + 320</SPAN>
<tex2html_verbatim_mark>" is not valid. Constants must be in the
range <SPAN CLASS="MATH">[0, 255]</SPAN>
<tex2html_verbatim_mark> and expressed by at most two hexadecimal digits. To make it simple, no
parenthesis can be used in defining a function. For example, ``<!-- MATH
 $f4 = (x1 + x2) x3$
 -->
<SPAN CLASS="MATH"><I>f</I>4 = (<I>x</I>1 + <I>x</I>2)<I>x</I>3</SPAN>
<tex2html_verbatim_mark>" is
not allowed.

<P>
The composition of functions is also considered as a definition of a function and it
is expressed as

<P>
<P><!-- MATH
 \begin{displaymath}
fi = fj(arguments)
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>fi</I> = <I>fj</I>(<I>arguments</I>)
</DIV><P>
<tex2html_verbatim_mark></P>
where <SPAN CLASS="MATH"><I>fj</I></SPAN>
<tex2html_verbatim_mark> is a function define before, and the <SPAN  CLASS="textit">arguments</SPAN> is a list of functions <!-- MATH
 $f_{k_{1}} , f_{k_{2}} ,\ldots, f_{k_{r}}$
 -->
<SPAN CLASS="MATH"><I>f</I><SUB>k<SUB>1</SUB></SUB>, <I>f</I><SUB>k<SUB>2</SUB></SUB>,..., <I>f</I><SUB>k<SUB>r</SUB></SUB></SPAN>
<tex2html_verbatim_mark> . each function in the list must be define before. Each occurrence of <SPAN CLASS="MATH"><I>x</I><SUB>l</SUB></SPAN>
<tex2html_verbatim_mark>
in the function <SPAN CLASS="MATH"><I>fj</I></SPAN>
<tex2html_verbatim_mark> will be substituted by <SPAN CLASS="MATH"><I>f</I><SUB>k<SUB>l</SUB></SUB></SPAN>
<tex2html_verbatim_mark> We need not list 100 functions, but enough functions must be listed to do the substitution.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains a sequence of function definitions and function compositions.
Each function definition and each function composition will be written in a line. A
line will be very long, but no more than 900 characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each function definition, store the function properly. No outputs are needed
for function definitions. For each function composition, compute and simplify the
function and then print the results. You can either have a space or no space between
terms. The polynomial printed must be simplified in ``sum of product" format, without
parenthesis, and two terms which differ in only the constants must be added together.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
f1 = x1^2
f2 = x1 + x2
f3 = f1(f2)
f10 = x1^2 + x2^2
f11 = f10(f2, f2)
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
f3 = x1^2 + x2^2
f11 = 0

______________________________________________________
2450||||||false||||||
<p>Your task is to divide a number of persons into two teams, in such a way, that:</p><ul><li>everyone belongs to one of the teams;</li> <li>every team has at least one member;</li> <li>every person in the team knows every other person in his team;</li> <li>teams are as close in their sizes as possible.</li></ul><p>This task may have many solutions. You are to find and output any solution, or to report that the solution does not exist.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><p>For simplicity, all persons are assigned a unique integer identifier from 1 to N.</p><p>The first line in the input file contains a single integer number N (2 &le; N &le; 100) - the total number of persons to divide into teams, followed by N lines - one line per person in ascending order of their identifiers. Each line contains the list of distinct numbers A<sub>ij</sub> (1 &le; A<sub>ij</sub> &le; N, A<sub>ij</sub> &ne; i) separated by spaces. The list represents identifiers of persons that i<sup>th</sup> person knows. The list is terminated by 0.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><p>If the solution to the problem does not exist, then write a single message &quot;No solution&quot; (without quotes) to the output file. Otherwise write a solution on two lines. On the first line of the output file write the number of persons in the first team, followed by the identifiers of persons in the first team, placing one space before each identifier. On the second line describe the second team in the same way. You may write teams and identifiers of persons in a team in any order.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2

5
3 4 5 0
1 3 5 0
2 1 4 5 0
2 3 5 0
1 2 3 4 0

5
2 3 5 0
1 4 5 3 0
1 2 5 0
1 2 3 0
4 3 2 1 0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
No solution

3 1 3 5
2 2 4
</pre>
______________________________________________________
2451||||||false||||||
<p>Let us define a regular brackets sequence in the following way:</p><ol><li>Empty sequence is a regular sequence.</li> <li>If S is a regular sequence, then (S) and [S] are both regular sequences.</li> <li>If A and B are regular sequences, then AB is a regular sequence.</li></ol><p>For example, all of the following sequences of characters are regular brackets sequences:</p><p><tt>()</tt>, <tt>[]</tt>, <tt>(())</tt>, <tt>([])</tt>, <tt>()[]</tt>, <tt>()[()]</tt></p><p>And all of the following character sequences are not:</p><p><tt>(</tt>, <tt>[</tt>, <tt>)</tt>, <tt>)(</tt>, <tt>([)]</tt>, <tt>([(]</tt></p><p>Some sequence of characters '(', ')', '[', and ']' is given. You are to find the shortest possible regular brackets sequence, that contains the given character sequence as a subsequence. Here, a string a<sub>1</sub>a<sub>2</sub>...a<sub>n</sub> is called a subsequence of the string b<sub>1</sub>b<sub>2</sub>...b<sub>m</sub>, if there exist such indices 1 &le; i<sub>1</sub> &lt; i<sub>2</sub> &lt; ... &lt; i<sub>n</sub> &le; m, that a<sub>j</sub>=b<sub>i<sub>j</sub></sub> for all 1 &le; j &le; n.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><p>The input file contains at most 100 brackets (characters '(', ')', '[' and ']') that are situated on a single line without any other characters among them.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><p>Write to the output file a single line that contains some regular brackets sequence that has the minimal possible length and contains the given sequence as a subsequence.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1

([(]
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
()[()]
</pre>
______________________________________________________
2452||||||false||||||
<p>Inhabitants of the Wonderland have decided to hold a regional programming contest. The Judging Committee has volunteered and has promised to organize the most honest contest ever. It was decided to connect computers for the contestants using a &quot;star&quot; topology - i.e. connect them all to a single central hub. To organize a truly honest contest, the Head of the Judging Committee has decreed to place all contestants evenly around the hub on an equal distance from it.</p><p>To buy network cables, the Judging Committee has contacted a local network solutions provider with a request to sell for them a specified number of cables with equal lengths. The Judging Committee wants the cables to be as long as possible to sit contestants as far from each other as possible.</p><p>The Cable Master of the company was assigned to the task. He knows the length of each cable in the stock up to a centimeter, and he can cut them with a centimeter precision being told the length of the pieces he must cut. However, this time, the length is not known and the Cable Master is completely puzzled.</p><p>You are to help the Cable Master, by writing a program that will determine the maximal possible length of a cable piece that can be cut from the cables in the stock, to get the specified number of pieces.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><p>The first line of the input file contains two integer numbers N and K, separated by a space. N (1 &le; N &le; 10000) is the number of cables in the stock, and K (1 &le; K &le; 10000) is the number of requested pieces. The first line is followed by N lines with one number per line, that specify the length of each cable in the stock in meters. All cables are at least 1 meter and at most 100 kilometers in length. All lengths in the input file are written with a centimeter precision, with exactly two digits after a decimal point.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><p>Write to the output file the maximal length (in meters) of the pieces that Cable Master may cut from the cables in the stock to get the requested number of pieces. The number must be written with a centimeter precision, with exactly two digits after a decimal point.</p><p>If it is not possible to cut the requested number of pieces each one being at least one centimeter long, then the output file must contain the single number &quot;0.00&quot; (without quotes).</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1

4 11
8.02
7.43
4.57
5.39
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
2.00
</pre>
______________________________________________________
2453||||||false||||||
<p><img alt="Sample wall picture" src="http://livearchive.onlinejudge.org/external/24/p2453.gif style="float:right"></img> Once upon a time there was a greedy King who ordered his chief Architect to build a wall around the King's castle. The King was so greedy, that he would not listen to his Architect's proposals to build a beautiful brick wall with a perfect shape and nice tall towers. Instead, he ordered to build the wall around the whole castle using the least amount of stone and labor, but demanded that the wall should not come closer to the castle than a certain distance. If the King finds that the Architect has used more resources to build the wall than it was absolutely necessary to satisfy those requirements, then the Architect will loose his head. Moreover, he demanded Architect to introduce at once a plan of the wall listing the exact amount of resources that are needed to build the wall.</p><p>Your task is to help poor Architect to save his head, by writing a program that will find the minimum possible length of the wall that he could build around the castle to satisfy King's requirements.</p><p>The task is somewhat simplified by the fact, that the King's castle has a polygonal shape and is situated on a flat ground. The Architect has already established a Cartesian coordinate system and has precisely measured the coordinates of all castle's vertices in feet.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><p>The first line of the input file contains two integer numbers N and L separated by a space. N (3 &le; N &le; 1000) is the number of vertices in the King's castle, and L (1 &le; L &le; 1000) is the minimal number of feet that King allows for the wall to come close to the castle.</p><p>Next N lines describe coordinates of castle's vertices in a clockwise order. Each line contains two integer numbers X<sub>i</sub> and Y<sub>i</sub> separated by a space (-10000 &le; X<sub>i</sub>, Y<sub>i</sub> &le; 10000) that represent the coordinates of i<sup>th</sup> vertex. All vertices are different and the sides of the castle do not intersect anywhere except for vertices.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><p>Write to the output file the single number that represents the minimal possible length of the wall in feet that could be built around the castle to satisfy King's requirements. You must present the integer number of feet to the King, because the floating numbers are not invented yet. However, you must round the result in such a way, that it is accurate to 8 inches (1 foot is equal to 12 inches), since the King will not tolerate larger error in the estimates.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1

9 100
200 400
300 400
300 300
400 300
400 400
500 400
500 200
350 200
200 200
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
1628
</pre>
______________________________________________________
2454||||||false||||||
<p>Bill teaches chemistry in the school and has prepared a number
of tests for his students. Each test has a chemical formula and a number
of possible reaction outcomes that his students are to choose one
correct from. However, Bill wants to make sure that he has not
made any typos while entering his tests into a computer and that his
students won't easily throw away wrong answers simply by counting
a number of chemical elements on the left and on the right side of
the equation, which should be always equal in a valid reaction.</p>

<p>You are to write a program that will help Bill. The program
shall read the description of the test for the students that
consists of the given left side of the equation and a number of
possible right sides, and determines if the number of chemical
elements on each right side of the equation is equal to the
number of chemical elements on the given left side of the
equation.</p>

<p>To help you, poor computer folks, that are unaware of the
complex world of chemistry, Bill has formalized your task. Each side
of the equation is represented by a string of characters without
spaces, and consists of one or more chemical sequences separated
by a '+' (plus) characters. Each sequence has an optional
preceding integer multiplier that applies to the whole sequence
and a number of elements. Each element is optionally followed by an
integer multiplier that applies to it. An element in this equation
can be either distinct chemical element or a whole sequence
that is placed in round parenthesis.
Every distinct chemical element is represented by either one
capital letter or a capital letter that is followed by a small
letter.</p>

<p>Even more formally, using notation that is similar to BNF, we can write:</p>
<ul>
<li>&lt;formula&gt; ::= [&lt;number&gt;] &lt;sequence&gt; { '+' [&lt;number&gt;] &lt;sequence&gt; }</li>
<li>&lt;sequence&gt; ::= &lt;element&gt; [&lt;number&gt;] { &lt;element&gt; [&lt;number&gt;] }</li>
<li>&lt;element&gt; ::= &lt;chem&gt; | '(' &lt;sequence&gt; ')'</li>
<li>&lt;chem&gt; ::= &lt;uppercase_letter&gt; [ &lt;lowercase_letter&gt; ]</li>
<li>&lt;uppercase_letter&gt; ::= 'A'..'Z'</li>
<li>&lt;lowercase_letter&gt; ::= 'a'..'z'</li>
<li>&lt;number&gt; ::= '1'..'9' { '0'..'9' }</li>
</ul>

<p>Every distinct chemical element is said to occur in the given formula
for some total number X, if X is the sum of all separate occurrences
of this chemical element multiplied to all numbers that apply to it.
For example, in the following chemical formula:</p>

<p><tt>C2H5OH+3O2+3(SiO2)</tt></p>

<ul>
<li><tt>C</tt> occurs for a total of 2 times.</li>
<li><tt>H</tt> occurs for a total of 6 times (5 + 1).</li>
<li><tt>O</tt> occurs for a total of 13 times (1 + 3*2 + 3*2).</li>
<li><tt>Si</tt> occurs for a total of 3 times.</li>
</ul>

<p>All multipliers in the formula are integer numbers that are at least 2 if
explicitly specified and are 1 by default. Each chemical formula is at most 100
characters long, and every distinct chemical element is guaranteed to occur
for a total of no more than 10000 times in each formula.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<b>
The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</b>
<p>
<p>
<p>The first line of the input file represents a chemical formula that is to
be tested as the left side of the equation. The second line of the input file
contains a single integer number N (1 &le; N &le; 10), which is the number of right
sides of the equation that are to be tested. Each one of the following
N lines represents one such formula.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<b>
For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</b>
<p>
<p>
<p>You are to write to the output file N lines - one line per each possible
answer of the chemical test for Bill's students that is given in the
input file. For each right-hand side formula that is encountered in the
input file, write to the output file:</p>

<p><tt>&lt;left_formula&gt;==&lt;right_formula&gt;</tt></p>

<p>if the total number of occurrences of each distinct chemical element on the
left-hand side equals to the total number of occurrences of this
chemical element on the right-hand side.
Otherwise write:</p>

<p><tt>&lt;left_formula&gt;!=&lt;right_formula&gt;</tt></p>

<p>Here <tt>&lt;left_formula&gt;</tt> must be replaced exactly (character by
character) with the original left-hand side formula as it is given in the first line
of the input file, and <tt>&lt;right_formula&gt;</tt> must be replaced exactly
with each right-hand side formula as they are given in the input file. Do not
place any spaces in the lines you write to the output file.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>
1

C2H5OH+3O2+3(SiO2)
7
2CO2+3H2O+3SiO2
2C+6H+13O+3Si
99C2H5OH+3SiO2
3SiO4+C2H5OH
C2H5OH+3O2+3(SiO2)+Ge
3(Si(O)2)+2CO+3H2O+O2
2CO+3H2O+3O2+3Si
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
C2H5OH+3O2+3(SiO2)==2CO2+3H2O+3SiO2
C2H5OH+3O2+3(SiO2)==2C+6H+13O+3Si
C2H5OH+3O2+3(SiO2)!=99C2H5OH+3SiO2
C2H5OH+3O2+3(SiO2)==3SiO4+C2H5OH
C2H5OH+3O2+3(SiO2)!=C2H5OH+3O2+3(SiO2)+Ge
C2H5OH+3O2+3(SiO2)==3(Si(O)2)+2CO+3H2O+O2
C2H5OH+3O2+3(SiO2)!=2CO+3H2O+3O2+3Si
</pre>

<b>Note</b>

<p>The sample input and output do not contain digit '0'
because it looks the same as the symbol for the chemical element oxygen.
The actual tests may contain any allowed characters.</p>


______________________________________________________
2455||||||false||||||
<p>Your team was hired by the international corporation ACM (Analytical Calculation Maxims). Every year ACM creates and conducts various surveys. Surveys themselves are simple forms with a list of questions and a list of possible answers for every question. Surveys are distributed around the globe, where field agents question the target group of people. All the answers are gathered in the ICPC (International Computation and Processing Center), where teams of well-paid analysts mine raw data in search for relevant correlations. The raw data for each individual survey consists of lots of lines of answers. Each line corresponds to every questioned person and for every question lists answers that the person has made on that particular survey.</p><p>The first step of analysis that your team was hired to automate is to create cross tables that correlate answers on interesting pairs of questions. In its most simple way, given a pair of questions, cross table has a row for every possible answer on the first question, and has a column for every possible answer on the second question. Each cell of the cross table contains a number of lines in the raw data that has both answers for the corresponding questions at the same time.</p><p>However, your task is complicated by the fact that you are to compute and output not only simple cross table values, but also total values for every row and column in the cross table (that is the sum of values in the corresponding row and column) that are placed in an additional last column and last row, as well as a percentage distributions for every row and column. Percentage distribution for a row is an additional number in every cell in that row that shows percent ratio of the value in that cell to the total value for that row, unless the total value is zero (in that case percentage distribution for this row is not defined). The same applies to the percentage distributions of columns. Thus, the cross table in your output will have at most three values in every cell (the value itself, row-wise percent, and column-wise percent). Please note, that percentage distributions also apply to totals. For example, in the total column for every row the row-wise percent will be always 100%, unless the total value for the row is zero (in that case row-wise percents are not defined), and column-wise percent shows percents ratio of the total value for this row to the total number of lines in the raw data (which is the value that can be found in the last column of the last row).</p><p>Percents are rounded to integers on output. Percent that has a non-zero fractional part is rounded to either the smallest integer number greater than the resulting percent, or the largest integer number smaller than the resulting percent, in such a way, that the sums of all corresponding row-wise percents by row (without row totals) or column-wise percents by column (without column totals) are equal to 100% unless they are undefined. There are various rounding algorithms that produce results satisfying the above constraints. You are free to use any rounding algorithm as long as the above constraints are satisfied.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><p>The input file consists of 3 sections: survey description, survey results, and cross table descriptions.</p><p>The first line of the input file contains the name of the survey, which is at most 100 characters long. Subsequent lines describe all the questions in the survey. On the first line of every question there is a 3-character question code (capital letters and digits only) followed by a space, and followed by the question name, which is at most 80 characters long. Each subsequent line for a question describes one possible answer on the question and starts with a space, followed by a single-character code for the answer (capital letter, digit, or character '.', '*', or '@'), followed by a space and followed by an answer description, which is at most 40 characters long. The list of questions is terminated by the line with a single character '#'. All answer codes are unique within the question, and all question codes are unique within the input file. There are at least 2 and at most 10 possible answers per question and at least 2 and at most 100 questions.</p><p>Next lines in the input file describe survey results. Every line contains a character per question (in the order they appear in the input file) that gives the answer code for the corresponding question. The characters follow one another without any delimiters. This section is terminated by the line with a single character '#'. There is at least one line with answers in the section and at most 10000 answers in total (the number of lines times the number of questions).</p><p>Next lines in the input file describe cross tables that are to be created. Each cross table description occupies one line. That line contains the code for the first question, followed by a space, followed by the different code for the second question, followed by a space, and followed by the cross table name, which is at most 100 characters long. This section is terminated by the line with a single character '#'. There are at most 100 cross table descriptions in the input file.</p><p>The input file has no trailing spaces on any line. All names do not start or end with a space, but may contain spaces.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><p>Write to the output file a cross table for every cross table description in the input file in the order they appear in the input file. On the first line of the cross table write the survey name, followed by a space, followed by a '-' (dash) character, followed by a space, followed by the cross table name. Then write the description of the first question, and the description of the second question exactly as they appear in the input file and in the same format. Then write an empty line, followed by the table itself. The table contains exactly <tt>1+3*(N1+1)</tt> lines and exactly <tt>6*(N2+2)</tt> characters on every line, where <tt>N1</tt> is the number of possible answers for the first question, and <tt>N2</tt> is the number of possible answers for the second question.</p><p>The table has one line for column headings, and <tt>N1+1</tt> rows (3 lines per row). The first <tt>N1</tt> of these rows correspond to the answers on the first question in the order they appear in the input file, and the last row is for column totals. The table also has <tt>N2+2</tt> columns, where each column is 6 characters wide. The first column is for row headings; the subsequent <tt>N2</tt> columns correspond to the answers on the second question in the order they appear in the input file, and the last column is for row totals. All information in the cells (including headings) is aligned to the right and is padded on the left with spaces to become 6 characters wide.</p><p>The heading for the first column is empty. The headings for the subsequent <tt>N2</tt> columns are composed from the second question code, followed by a ':' (colon) character, and followed by the corresponding answer code. The heading for the last column is the string &quot;TOTAL&quot; (without quotes). The headings for the first <tt>N1</tt> 3-line rows of the cross table are composed from the first question code, followed by a ':' (colon) character, and followed by the corresponding answer code. The heading for the last row is the string &quot;TOTAL&quot; (without quotes). Row headings are situated on the first line of the corresponding row. The subsequent 2 lines in the heading column of every row must be blank.</p><p>All non-heading cells in the table contain computed values and percents. On the first line of every cell the corresponding cross table integer value is situated. The second line contains properly rounded to integers row-wise percent, with a mandatory trailing '%' (percent) character, or a single '-' (dash) character if the corresponding row-wise percent is not defined. The third line contains column-wise percent in the same format. All cross tables in the output file must be separated by a single empty line.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1

New Year Phone Survey for ACM ICPC
Q01 Hello!
 H Hello!
 Y Yes!
 * Uhm...
 . (silence)
 @ (other)
Q02 How are you?
 H Hello!
 Y Yes!
 F Fine!
 Q Who are you?
 @ (other)
BYE Happy New Year!
 Y You too.
 * (censored)
 @ (other)
 . (hang up)
#
.@.
HH@
.@.
YFY
HQ*
H@.
YYY
.H@
HFY
HH@
#
Q01 Q02 Health vs greeting style
Q02 BYE Politeness matrix
#
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
New Year Phone Survey for ACM ICPC - Health vs greeting style
Q01 Hello!
 H Hello!
 Y Yes!
 * Uhm...
 . (silence)
 @ (other)
Q02 How are you?
 H Hello!
 Y Yes!
 F Fine!
 Q Who are you?
 @ (other)

       Q02:H Q02:Y Q02:F Q02:Q Q02:@ TOTAL
 Q01:H     2     0     1     1     1     5
         40%    0%   20%   20%   20%  100%
         66%    0%   50%  100%   33%   50%
 Q01:Y     0     1     1     0     0     2
          0%   50%   50%    0%    0%  100%
          0%  100%   50%    0%    0%   20%
 Q01:*     0     0     0     0     0     0
           -     -     -     -     -     -
          0%    0%    0%    0%    0%    0%
 Q01:.     1     0     0     0     2     3
         33%    0%    0%    0%   67%  100%
         34%    0%    0%    0%   67%   30%
 Q01:@     0     0     0     0     0     0
           -     -     -     -     -     -
          0%    0%    0%    0%    0%    0%
 TOTAL     3     1     2     1     3    10
         30%   10%   20%   10%   30%  100%
        100%  100%  100%  100%  100%  100%

New Year Phone Survey for ACM ICPC - Politeness matrix
Q02 How are you?
 H Hello!
 Y Yes!
 F Fine!
 Q Who are you?
 @ (other)
BYE Happy New Year!
 Y You too.
 * (censored)
 @ (other)
 . (hang up)

       BYE:Y BYE:* BYE:@ BYE:. TOTAL
 Q02:H     0     0     3     0     3
          0%    0%  100%    0%  100%
          0%    0%  100%    0%   30%
 Q02:Y     1     0     0     0     1
        100%    0%    0%    0%  100%
         33%    0%    0%    0%   10%
 Q02:F     2     0     0     0     2
        100%    0%    0%    0%  100%
         67%    0%    0%    0%   20%
 Q02:Q     0     1     0     0     1
          0%  100%    0%    0%  100%
          0%  100%    0%    0%   10%
 Q02:@     0     0     0     3     3
          0%    0%    0%  100%  100%
          0%    0%    0%  100%   30%
 TOTAL     3     1     3     3    10
         30%   10%   30%   30%  100%
        100%  100%  100%  100%  100%
</pre>
______________________________________________________
2456||||||false||||||
<p>Castaway Robinson Crusoe is living alone on a remote island. One day a ship carrying a royal library has wrecked nearby. Usually Robinson brings any useful stuff from the shipwreck to his island, and this time he has brought a big chest with books.</p><p><img alt="Sample library picture" src="http://livearchive.onlinejudge.org/external/24/p2456.gif style="float:right"></img> Robinson has decided to build a bookcase for these books to create his own library. He cut a rectangular niche in the rock for that purpose, hammered in wooden pegs, and placed wooden planks on every pair of pegs that have the same height, so that all planks are situated horizontally and suit to act as shelves.</p><p>Unfortunately, Robinson has discovered that one especially old and big tome does not fit in his bookcase. He measured the height and width of this tome and has decided to redesign his bookcase in such a way, as to completely fit the tome on one of the shelves, taking into account locations of other shelves and the dimensions of the niche. With each shelf in the bookcase, one of the following operations should be made:</p><ol><li>Leave the shelf on its original place.</li> <li>Move the shelf to the left or to the right.</li> <li>Shorten the shelf by cutting off a part of the plank and optionally move it to the left or to the right.</li> <li>Move one of the pegs to a different place at the same height and move the shelf to the left or to the right.</li> <li>Shorten the shelf by cutting off a part of the plank, move one of the pegs to a different place at the same height, and optionally move the shortened shelf to the left or to the right.</li> <li>Remove the shelf from the bookcase along with both supporting pegs.</li></ol><p>We say that the shelf is properly supported by its pegs, if exactly two distinct pegs support the shelf and the center of the shelf is between its pegs or coincides with one of the pegs. The original design of Robinson's library has all the shelves properly supported by their pegs and lengths of all shelves are integer number of inches. The Robinson may only cut an integer number of inches from the planks, because he has no tools for more precise measurements. All remaining shelves after the redesign must be properly supported by their pegs.</p><p>You are to find the way to redesign Robinson's library to fit the special old tome without changing original design too much. You have to minimize the number of pegs that are to be removed from their original places during the redesign (operations 4 and 5 remove one peg, and operation 6 removes two pegs). If there are different ways to solve the problem, then you are to find the one that minimizes the total length of planks that are to be cut off (operations 3 and 5 involve cutting something from the planks, and operation 6 counts as if cutting off the whole plank). Width of planks and diameter of pegs shall be considered zero.</p><p>The tome may not be rotated. The tome should completely (to all its width) stand on one of the shelves and may only touch other shelves, their pegs or niche's edge.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><p>The first line of the input file contains four integer numbers XN, YN, XT, and YT, separated by spaces. They are, correspondingly, width and height of the niche, and width and height of the old tome in inches (1 &le; XN, YN, XT, YT &le; 1000).</p><p>The second line of the input file contains a single integer number N (1 &le; N &le; 100) that represents the number of the shelves. Then N lines follow. Each line represents a single shelf along with its two supporting pegs, and contains five integer numbers y<sub>i</sub>, x<sub>i</sub>, l<sub>i</sub>, x1<sub>i</sub>, x2<sub>i</sub>, separated by spaces, where:</p><ul><li>y<sub>i</sub> (0 &lt; y<sub>i</sub> &lt; YN) - the height of the i<sup>th</sup> shelf above the bottom of the niche in inches.</li> <li>x<sub>i</sub> (0 &le; x<sub>i</sub> &lt; XN) - the distance between the left end of the i<sup>th</sup> shelf and the left edge of the niche in inches.</li> <li>l<sub>i</sub> (0 &lt; l<sub>i</sub> &le; XN - x<sub>i</sub>) - the length of the i<sup>th</sup> shelf in inches.</li> <li>x1<sub>i</sub> (0 &le; x1<sub>i</sub> &le; l<sub>i</sub>/2) - the distance between the left end of the i<sup>th</sup> shelf and its leftmost supporting peg in inches.</li> <li>x2<sub>i</sub> (l<sub>i</sub>/2 &le; x2<sub>i</sub> &le; l<sub>i</sub>; x1<sub>i</sub> &lt; x2<sub>i</sub>) - the distance between the left end of the i<sup>th</sup> shelf and its rightmost supporting peg in inches.</li></ul><p>All shelves are situated on different heights and are properly supported by their pegs. The problem is guaranteed to have a solution for the input data.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><p>The output file shall contain two integer numbers separated by a space. The first one is the minimal number of pegs that are to be removed by Robinson from their original locations to place the tome. The second one is the minimal total length of planks in inches that are to be cut off during the redesign that removes the least number of pegs.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2

11 8 3 4
4
1 1 7 1 4
4 3 7 1 6
7 2 6 3 4
2 0 3 0 3

11 8 4 6
4
1 1 7 1 4
4 3 7 1 6
7 2 6 3 4
2 0 3 0 3
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
0 0

1 3
</pre>
______________________________________________________
2457||||||false||||||
<p>You are to find all pairs of integers such that their sum is equal to the given integer number N and the second number results from the first one by striking out one of its digits. The first integer always has at least two digits and starts with a non-zero digit. The second integer always has one digit less than the first integer and may start with a zero digit.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p><p><p>The input file consists of a single integer N (10 &le; N &le; 10<sup>9</sup>).</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><p>On the first line of the output file write the total number of different pairs of integers that satisfy the problem statement. On the following lines write all those pairs. Write one pair on a line in ascending order of the first integer in the pair. Each pair must be written in the following format:</p><p><tt>X + Y = N</tt></p><p>Here X, Y, and N, must be replaced with the corresponding integer numbers. There should be exactly one space on both sides of '+' and '=' characters.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1

302
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
5
251 + 51 = 302
275 + 27 = 302
276 + 26 = 302
281 + 21 = 302
301 + 01 = 302
</pre>
______________________________________________________
2458||||||false||||||
<P>Say you are the founder and sole employee of your own e-business start-up. Hours before delivering an e-commerce solution to your very first client, you realize to your horror that you have forgotten to include encryption features for sensitive information.<P>Faced with a very tight deadline, you decide to incorporate a simple encryption routine and later sell a security upgrade to your client at a tidy sum. After looking through possible methods that you can implement quickly, you finally settle on the following scheme known as a Vigenere cipher.<P>First, you determine a small repeated <SPAN CLASS="textit">key</SPAN> that is the length of your plaintext (unencrypted) message. Next, you align the plaintext message such that the first letter of the message is aligned to the first letter of the key. Finally, each key letter index is added to its corresponding plaintext letter index to produce the <SPAN CLASS="textit">ciphertext</SPAN> (encrypted) letter index. These combined ciphertext letter indices will form the final encrypted message. Your task is to write such a program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of pairs of lines. The first line of each pair will contain the key while the second line will contain the plaintext message. Only letters of the alphabet (<TT>A</TT>-<TT>Z</TT>) plus a space will be used. These may be in upper- or lower-case and you will have to convert them into upper-case if necessary.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output file consists of one line of upper-case text for each pair of lines in the input file. Each line will contain the encrypted message.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ABCABCABCABCAB 
Attack at dawn 
shineshines 
How are you
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
BVWBENACWAFDXP 
AWFNFKMIMTN
</PRE><P>
______________________________________________________
2459||||||false||||||
<P>
In a polygon tiling game, you are required to fill a polygon with a set of basic shapes 
called ``tiles". This is equivalent to cutting up the entire polygon into a number of small 
pieces; each piece must have exactly the same shape as one of the provided tiles. Let us 
consider a simple version of the game. Two types  of rectangular tiles are given as 
shown in Figure 2.1. Their width/height are 1/3 and 3/1 respectively. You are asked to 
use these two types of tiles to tile a rectilinear polygon (that is, a polygon with only 
vertical or horizontal edges). For instance, Figure 2.2(a) shows such a polygon and 
Figure 2.2(b) shows how it can be properly tiled with three 3<SPAN CLASS="MATH"><TT>x</TT></SPAN>1 tiles and one 1<SPAN CLASS="MATH"><TT>x</TT></SPAN>3 tile. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2459a.eps}$
 -->
<IMG
 WIDTH="497" HEIGHT="268" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2459a.jpg
 ALT="\epsfbox{p2459a.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 2.1: 1<SPAN CLASS="MATH"><TT>x</TT></SPAN>3 tile and 3<SPAN CLASS="MATH"><TT>x</TT></SPAN>1 tile 

</DIV>

<P>
The coordinate system used in this game is described by the following rules:  

<P>
<DL COMPACT>
<DT>(1)</DT>
<DD>A polygon is always positioned in such a way that its lowest edge is on the 
         <SPAN CLASS="MATH"><I>x</I></SPAN>-axis and its leftmost edge is on the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis, as shown in Figure 2.2. 
</DD>
<DT>(2)</DT>
<DD>A polygon is represented by an ordered list of points that enumerates all of its 
         vertices. The enumeration starts from the lower-left vertex and proceeds 
         counter-clockwise. For instance, the polygon in Figure 2.2(a) is represented 
         by the set of points {A, B, C, D, E, F, G, H}. 
</DD>
<DT>(3)</DT>
<DD>A grid (a rectangle whose width and height are both 1) is represented by a pair 
         <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>, where <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate of its top-right 
         vertex. In Figure 2.2(a), the coordinate of every grid is indicated inside the 
         grid. 
</DD>
<DT>(4)</DT>
<DD>A tile is designated by a triple <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN>, where <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are the coordinates of 
the middle grid of the tile and <SPAN CLASS="MATH"><I>z</I></SPAN> represents the orientation of the tile. If the tile is 
horizontal, then <SPAN CLASS="MATH"><I>z</I> = 0</SPAN>; otherwise, <SPAN CLASS="MATH"><I>z</I> = 1</SPAN>. Figure 2.3 gives two examples. 
</DD>
</DL>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2459b.eps}$
 -->
<IMG
 WIDTH="802" HEIGHT="424" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2459a.jpg
 ALT="\epsfbox{p2459b.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">
</DIV>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2459c.eps}$
 -->
<IMG
 WIDTH="801" HEIGHT="425" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2459a.jpg
 ALT="\epsfbox{p2459c.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">
</DIV>

<P>
Your task is to write a program that finds a way to tile a given polygon. The polygon 
is known to be tillable. If there is more than one ways of tiling; you are only required to 
find one of them.   

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file describes a polygon to be tiled. The first line is the number of vertices of 
the polygon. The subsequent lines specify the vertices of the polygon in the order stated 
above; one line per vertex. A vertex is specified as an <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate followed by its 
<SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate, separated by a white space. 

<P>
The sample input following shows what the input file looks like if the polygon in Figure 2.2(a) is to 
be tiled.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output produces a list of tiles that tiles the polygon specified in the input file. A tile 
is specified as a triple <SPAN CLASS="MATH"><I>x</I></SPAN> <SPAN CLASS="MATH"><I>y</I></SPAN> <SPAN CLASS="MATH"><I>z</I></SPAN> as described above, separated by a white space; one tile per 
line.  The tiles may appear in any order. 

<P>
The sample output following shows what your output may look like if you want to represent the 
solution as shown in Figure 2.2(b).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>  

<P>
<PRE>
8 
1 0 
4 0 
4 4 
3 4 
3 3 
0 3 
0 1 
1 1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 3 0 
2 2 0 
3 1 0 
4 3 1
</PRE> 

<P>

______________________________________________________
2460||||||false||||||
<P>Molecular biologists frequently compare bio-sequences to see if any similarities can be found in the hope that what is true of one sequence is also true of its analogue. In this problem, we focus on nucleic acid sequences that are composed of four symbols `A', `C', `G' or `T'. Generally, such comparisons involve aligning sections of the two sequences in a way that exposes the similarities between them. Given a query sequence and a set of sequences stored in a database, you are asked to write a program that searches the database and finds the sequence having the largest similarity score with the query sequence.<P>The similarity score between the query sequence and a database sequence is the sum of the alignment scores of the aligned pairs of symbols from an alignment of the two sequences. Two identical symbols that are aligned are given a score of +5 while a mismatched pair of symbols is assigned a score of -4. A gap is introduced into an alignment if one symbol in one sequence is not aligned with symbols in the other. The penalty for a gap is a score of -7. For example, given a query sequence <SPAN CLASS="MATH"><I>m</I></SPAN>=`<TT>GAAGGCA</TT>' and a database sequence <SPAN CLASS="MATH"><I>n</I></SPAN>=`<TT>GCAGAGCA</TT>', the following alignment between them (aligned pairs of symbols are written one above the other) has a similarity score of 5+(-4)+5+5+(-7)+5+5+5=21.<P><PRE><TT>
    Sequence <SPAN CLASS="MATH"><I>m</I></SPAN>: <TT>G A A G - G C A</TT> 
<BR>
Sequence <SPAN CLASS="MATH"><I>n</I></SPAN>: 		 <TT>G C A G A G C A</TT>
</TT></PRE><P>Note that a gap in the above alignment is represented by the symbol `<TT>-</TT>'. The dynamic programming algorithm provides a rigorous mathematical approach towards this alignment problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists a query sequence (on the first two lines) and a set of data sequences (each occupying two lines). Each sequence has the following format:<P><P><BR><TT>&gt; <SPAN CLASS="MATH"><I>sequence</I>&nbsp;<I>name</I></SPAN></TT><BR><TT><SPAN CLASS="MATH"><I>sequence</I>&nbsp;<I>data</I></SPAN></TT><P><P><BR>There is a blank line between two adjacent sequences.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output indicates the sequence having the highest similarity score with the query sequence. The result should be printed out in the following format:<P><P><BR><TT>The query sequence is:</TT><BR>(the query sequence data)<BR><BR><TT>The most similar sequences are:</TT><BR><BR>(sequence 1 data)<BR><TT>The similarity score is: <SPAN CLASS="MATH">(<I>similarity</I>&nbsp;<I>score</I>)</SPAN></TT><BR><BR>(sequence 2 data)<BR><TT>The similarity score is: <SPAN CLASS="MATH">(<I>similarity</I>&nbsp;<I>score</I>)</SPAN></TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
&gt;query 
ACGGG 
 
&gt;seq1 
ACGGT 
 
&gt;seq2 
ACGGGG 
 
&gt;seq3 
TCCGGTT 
 
&gt;seq4 
TCGGG 
 
&gt;seq5 
AACGGG
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The query sequence is: 
ACGGG 
 
The most similar sequences are: 
 
ACGGGG 
The similarity score is: 18 
 
AACGGG 
The similarity score is: 18
</PRE><P>
______________________________________________________
2461||||||false||||||
<P>
You work on a submarine and have just received an updated version of the submarine's 
manual, which is several gigabytes in size. The captain does not want the crew to waste 
time leafing through the new version to figure out how it differs from the one they read 
in training. On the other hand, she would hate to accidentally launch a missile when 
trying to turn on the microwave. As the expert programmer on board, you are assigned 
the task of comparing the old and new versions and marking how they differ from each 
other. For this task, the captain graciously provides you with a highlighter and lots of 
coffee. 

<P>
You have a better idea.  Since both versions are available in electronic form, you 
think of writing a program to compare them automatically.  The manual is organized 
hierarchically in volumes, chapters, sections, subsections, paragraphs, etc., so you 
model it using a tree structure.  All you need to do now is to write a program that takes 
two trees and produces a description of how they differ. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2461a.eps}$
 -->
<IMG
 WIDTH="816" HEIGHT="444" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2461a.jpg
 ALT="\epsfbox{p2461a.eps}">
</DIV>

<P>
We use the term tree to mean a rooted, ordered, labeled tree, such as those 
depicted in Figure 4a.  The node number in the figure is used to identify a node and is 
indicated within the circle representing the node. Each node in a tree also has a label, 
which is indicated next to that node in the figure (numbers which are not bold and 
enclosed in parentheses or square brackets).  For this problem, we assume that labels 
are real numbers.  For example, the label of node 4 is 4.4. Note that the numbers, 
which are bold and enclosed in parentheses and square brackets in T1 and T2, are 
<SPAN  CLASS="textit">deletion</SPAN> and <SPAN  CLASS="textit">insertion</SPAN> costs of the nodes respectively and shall be explained later.  
Each node except the root also has a unique parent node.  In the figure, we connect a 
node to its parent (depicted above the node) using a line. For example, the parent of 
node 7 is node 1. The children of each interior node are ordered, and the figure depicts 
the children of each node left-to-right in this order. For example, the children of node 2, 
in order, are 3, 4, and 6.  

<P>
All the nodes that lie on the path (of length zero or more) from a node to the root 
are called the node's <SPAN  CLASS="textit">ancestors</SPAN>. Note that every node is its own ancestor. If a node <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> 
is the ancestor of node <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN>, then <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> is called a <SPAN  CLASS="textit">descendant</SPAN> of <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN>. The tree 
consists of all the 
descendants of a node <SPAN CLASS="MATH"><I>n</I></SPAN> is called its <SPAN  CLASS="textit">subtree</SPAN>. The length of the path from a node to the 
root is called the node's <SPAN  CLASS="textit">depth</SPAN>. Thus, the depth of the root is always 0. In our example, 
the depth of node 4 is 2. 

<P>
The <SPAN  CLASS="textit">preorder list</SPAN> of a tree consists of the root followed by the preorder list of the 
subtrees rooted at its children, in order. For example, the preorder list of tree T1 is (1, 2, 
3, ..., 9). The preorder list of tree T2 is (13, 11, 14, 15, 19, 12, 16, 17, 18). 

<P>
Given such a tree, we can  <SPAN  CLASS="textit">edit</SPAN> (modify) it using the following three kinds of <SPAN  CLASS="textit">edit 
operations</SPAN>: 

<P>

<UL>
<LI>An <SPAN  CLASS="textit">update operation</SPAN> can be used to change the label of a node. For example, we 
        can change the label of node 3 to 3.41 by using the operation <!-- MATH
 $upd(3, 3.41)$
 -->
<SPAN CLASS="MATH"><I>upd</I> (3, 3.41)</SPAN>. That 
        is, the operation <SPAN CLASS="MATH"><I>upd</I> (<I>n</I>, <I>l</I> )</SPAN> changes the label of node <SPAN CLASS="MATH"><I>n</I></SPAN> to <SPAN CLASS="MATH"><I>l</I></SPAN>.  
</LI>
<LI>A  <SPAN  CLASS="textit">delete operation</SPAN> can be used to remove any subtree from a given tree. For 
        example, we can remove the subtree rooted at node 4 by using the operation 
        <SPAN CLASS="MATH"><I>del</I> (4)</SPAN>. That is, the operation  <SPAN CLASS="MATH"><I>del</I> (<I>n</I>)</SPAN> applied to any tree containing all of  <SPAN CLASS="MATH"><I>n</I></SPAN>'s 
        descendants (including <SPAN CLASS="MATH"><I>n</I></SPAN>) from the tree. 
</LI>
<LI>An <SPAN  CLASS="textit">insert operation</SPAN> can be used to attach one tree to another tree. Refer to the 
        trees T* and T3 in Figure 4b. T* can be attached as the second child of the node 
       2 in T3 by using the <!-- MATH
 $ins(T*, 2, 2)$
 -->
<SPAN CLASS="MATH"><I>ins</I>(<I>T</I>*, 2, 2)</SPAN>. That is, the operation <!-- MATH
 $ins(T, n, i)$
 -->
<SPAN CLASS="MATH"><I>ins</I>(<I>T</I>, <I>n</I>, <I>i</I>)</SPAN> makes T the 
        <SPAN  CLASS="textit">ith</SPAN> child of node <SPAN CLASS="MATH"><I>n</I></SPAN>. 
</LI>
</UL>

<P>
An <SPAN  CLASS="textit">edit script</SPAN> is a sequence of such edit operations. An edit script is applied to a 
tree by applying the operations one after another in the order they are listed.  Figure 4b 
depicts the edit script <!-- MATH
 $(upd(1, 1.12)$
 -->
<SPAN CLASS="MATH">(<I>upd</I> (1, 1.12)</SPAN>, <!-- MATH
 $upd(3, 3.41)$
 -->
<SPAN CLASS="MATH"><I>upd</I> (3, 3.41)</SPAN>, <SPAN CLASS="MATH"><I>del</I> (4)</SPAN>, <!-- MATH
 $ins(T*, 2, 2)$
 -->
<SPAN CLASS="MATH"><I>ins</I>(<I>T</I>*, 2, 2)</SPAN>, <!-- MATH
 $upd(7, 7.77)$
 -->
<SPAN CLASS="MATH"><I>upd</I> (7, 7.77)</SPAN>, 
<!-- MATH
 $upd(8, 8.20))$
 -->
<SPAN CLASS="MATH"><I>upd</I> (8, 8.20))</SPAN> applied to tree T1 from Figure 4a. Note that the resulting tree is identical 
to tree T2 (except for node identifiers). We say that our <SPAN  CLASS="textit">edit script transforms</SPAN> T1 to T2. 

<P>
Each edit operation has a cost associated with it as described below: 

<P>

<UL>
<LI>The <SPAN  CLASS="textit">cost of an update operation</SPAN> is simply the absolute value of the difference 
             between the old and new labels. Thus, updating a label 1.11 to 1.12 costs 0.01 
             units and updating a label 9.99 to 99.9 costs 89.91 units. 
</LI>
<LI>Each node has a <SPAN  CLASS="textit">deletion cost</SPAN> that depends on its label and that is specified as 
             part of the input. In Figure 4a (T1), the deletion cost of a node is indicated in 
             parentheses next to the node. If no such number appears next to a node, its 
     deletion cost is 1 unit by default. The <SPAN  CLASS="textit">cost of a delete operation</SPAN> is the sum of the 
             costs of deleting all the nodes in the deleted subtree. For example, the operation 
             <SPAN CLASS="MATH"><I>del</I> (4)</SPAN> in our example costs 0.4 + 0.1 = 0.5 units.  
</LI>
<LI>Similarly, each node has an <SPAN  CLASS="textit">insertion cost</SPAN> that depends on its label and that is 
             specified as part of the input. In Figure 4a (T2), the insertion cost of a node is 
             indicated in square brackets next to the node. If no such number appears next 
     to a node, its insertion cost is 1 unit by default. The <SPAN  CLASS="textit">cost of an insert operation</SPAN> 
is the sum of the insertion costs of all the nodes in the inserted subtree. For example, using the costs indicated in Figure 4a, the cost of the operation <!-- MATH
 $ins(T*2, 2)$
 -->
<SPAN CLASS="MATH"><I>ins</I>(<I>T</I>*2, 2)</SPAN> in earlier example is 4.4 + 0.13 = 4.53 units. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2461b.eps}$
 -->
<IMG
 WIDTH="840" HEIGHT="391" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2461a.jpg
 ALT="\epsfbox{p2461b.eps}">
</DIV>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2461c.eps}$
 -->
<IMG
 WIDTH="757" HEIGHT="885" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2461a.jpg
 ALT="\epsfbox{p2461c.eps}">
</DIV>

<P>
</LI>
<LI>The cost of inserting or deleting a node whose label does not appear in any of 
       the input trees is 1 unit by default. Note that to avoid cluttering the insertion 
       and deletion costs of the nodes are not displayed in Figure 4b. 
</LI>
<LI>The <SPAN  CLASS="textit">cost of an edit script</SPAN> is the sum of the costs of the operations it contains.  
</LI>
</UL>

<P>
Your goal is to write a program that takes as input two trees (and the node 
insertion and deletion costs) and produces as output the cost of a minimum-cost edit 
script that transforms one tree to another. (You need not compute such a 
minimum-cost edit script; you only need its cost.) As was the case for the trees in 
Figure 4a, there is no correspondence between the node identifiers in the two trees; 
thus they are not specified in the input. You are also required to pretty-print the input 
trees as described below. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file first lists the nodes in the first tree in preorder, one per line. For each 
node, the input file contains a line with three numbers that are separated using spaces. 
The first number is the depth of the node. The second is the node's label. The third is 
that node's deletion cost. After all the nodes in the first tree are listed in this manner, 
the input file contains a line <TT>"-1 0 0"</TT> to denote the end of the tree's listing.  

<P>
Next, the input contains a blank line followed by a listing of the second tree. The 
second tree is listed using the method described above, the only difference being that 
the third number on each line is now the node's insertion cost. This listing of the nodes 
in the second tree is also followed by a line <TT>"-1 0 0"</TT> to denote the end of the listing. 

<P>
Assume that all real numbers in the input are in the range [0, 99.99] (inclusive).  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output consists of two parts. First, you pretty-print the two input trees. Second, 
you report the cost of a minimum-cost edit script that transforms the first tree to the 
second.  

<P>
You must first output the first tree by listing one node per line, in preorder. Each 
such line must begin with 4d space characters, where d is the depth of the node. Next, it 
contains the node's label, with two digits before and two digits after the decimal point. 
If the label is less than 10, include a leading space character. Thus, 9.87 is output as 
`<TT>?9.87</TT>' where `<TT>?</TT>' denotes the ASCII space character.  This label is followed by a 
single space character, followed by the node's deletion cost listed in the same format as that 
used for the label. 

<P>
Next, you must output a blank line, followed by the listing of the second tree in the 
above format (with the deletion cost replaced by the insertion cost). 

<P>
Finally, you output a blank line followed by a line containing the string 
`<TT>Distance:</TT>' followed by a space character followed by the cost of the minimum-cost 
edit script. For outputting this cost, use the same format you used for the tree labels. 
(You can assume that the cost will always be a real number in the range [0, 99.99].) 

<P>
Do not include anything else in your output, not even blank lines. 

<P>

<P><P>
<BR>

<B>Note:</B> For the tree depicted in Figure 4a, the input and output are shown below. (For clarity, 
we use the `<TT>?</TT>' symbol to denote the ASCII space character.) Note that the space 
characters at the beginning of lines in the input are optional; your program should 
work whether or not they occur in the input. As it turns out, the edit script depicted in 
Figure 4b is a minimum-cost edit script for this input, and its cost is 6.28, as reported 
in the output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>  

<P>
<PRE>
0?1.11?1.01
??1?2.56?3.29
????2?3.14?1
????2?4.4?0.4
??????3?13?0.1
????2?6.18?0.11
??1?7?1
????2?8?1
????2?99.99?1
-1?0?0

0?1.12?1.20
??1?2.56?2.39
????2?3.41?2.9
????2?44.44?4.4
??????3?13.13?0.13
????2?6.18?11.0
??1?7.77?1
????2?8.2?1
????2?99.99?1
-1?0?0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
?1.11??1.01
?????2.56??3.29
?????????3.14??1.00
?????????4.40??0.40
????????????13.00??0.10
?????????6.18??0.11
?????7.00??1.00
?????????8.00??1.00
????????99.99??1.00

?1.12??1.20
?????2.56??2.39
?????????3.41??2.90
????????44.44??4.40
????????????13.13??0.13
?????????6.18?11.00
?????7.77??1.00
?????????8.20??1.00
????????99.99??1.00

Distance:??6.28
</PRE>

<P>

______________________________________________________
2462||||||false||||||
<P>A company consists of <SPAN CLASS="MATH"><I>D</I></SPAN> departments. Each department consists of groups of members as illustrated in the figure below. As part of his strategic planning, the company's CEO would like to select a cross-department team consisting of <SPAN CLASS="MATH"><I>x</I></SPAN> members from a group in a department and <SPAN CLASS="MATH"><I>y</I></SPAN> members from a group in another department to work directly with him on new business strategies.<P><DIV ALIGN="CENTER"><IMG WIDTH="847" HEIGHT="250" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2462.jpg ALT="\epsfbox{p2462.eps}"></DIV><P>In this problem, you are requested to develop a program that generates a listing of all possible cross-department teams. A cross-department team is represented by its <SPAN CLASS="MATH">(<I>x</I> + <I>y</I>)</SPAN> members, each globally identified by a concatenation of his/her department id, group id and member id. For example, the member <SPAN CLASS="MATH"><I>m</I>3</SPAN> from group <SPAN CLASS="MATH"><I>g</I>2</SPAN> in department <SPAN CLASS="MATH"><I>d</I>1</SPAN> is identified by <SPAN CLASS="MATH"><I>d</I>1<I>g</I>2<I>m</I>3</SPAN>. For simplicity, we assume that every department consists of <SPAN CLASS="MATH"><I>G</I></SPAN> groups, and every group consists of <SPAN CLASS="MATH"><I>N</I></SPAN> members <SPAN CLASS="MATH">(<I>N</I> &lt; 30)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of the number of departments, the number of groups per department, the number of members per group, <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of a listing of unique cross-department teams that can be formed. The global ids of the members of each team are listed on an output line. The teams should be sorted by the department and group ids of their members.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3 3 2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
d0g0m0 d0g0m1 d1g0m0 
d0g0m0 d0g0m1 d1g0m1 
d0g0m0 d0g0m1 d1g0m2 
d0g0m0 d0g0m2 d1g0m0  
... 
d2g2m2 d3g2m0 d3g2m2 
d2g2m2 d3g2m1 d3g2m2
</PRE><P>
______________________________________________________
2463||||||false||||||
<P>
To facilitate the shipping of certain hazardous materials, a shipping company has come 
up with the idea of introducing variable sized containers. The volume of each container 
is an integer in some unit and because of the nature of the content, each container must 
be completely filled before it can be used to transport the goods. The company has 
determined that since the handling cost of each container is the same irrespective of 
the size, it will charge the customers according to the number of containers hired. This 
policy then provides an incentive for the customer to choose the minimum possible 
number of containers for a given volume of goods.   

<P>
To make the task of choosing the minimum number easier, the shipping company 
is looking into selecting a set of container sizes such that the minimum number of 
containers for any given volume can be obtained by choosing the largest possible sizes 
first.  Any set of container sizes that satisfies this property will be designated as 
acceptable; otherwise, it is unacceptable.  For example, the set 10, 6, 3, 1 is 
unacceptable because for a volume of 12 units, choosing the largest possible sizes first 
will result in the combination 10+1+1 with a count of 3 containers; whereas, the 
combination 6+6 requires 2 containers only.  Your task is to write a program that will 
determine whether a given set of container sizes is acceptable or not acceptable. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input format will be one line per container set. Each line will contain the number 
of container sizes in the set, followed by each size value in descending order. The 
maximum number of container sizes will be 20, and the minimum 1.  The smallest size 
will be 1 and the largest is 200. Your algorithm should be valid for any integral volume 
of goods without any upper limit.  The end of file is denoted by a container size set with 
zero sizes. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output will be a single line listing the sizes in the set with a single space between 
the sizes and ending with the word ``<TT>Acceptable</TT>" or the words ``<TT>Not Acceptable</TT>". 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
6 6 5 4 3 2 1 
6 100 40 20 9 5 1 
5 20 10 5 2 1 
0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
6 5 4 3 2 1 Acceptable 
100 40 20 9 5 1 Not Acceptable 
20 10 5 2 1 Acceptable
</PRE> 

<P>

______________________________________________________
2464||||||false||||||
<P>In a treasure house, there are <SPAN CLASS="MATH">2<I>N</I></SPAN> caskets in a row. All the caskets are filled with either golden or silver balls except two adjacent caskets, which are empty. There are altogether <SPAN CLASS="MATH">(<I>N</I> - 1)</SPAN> golden balls and <SPAN CLASS="MATH">(<I>N</I> - 1)</SPAN> silver balls; there is only one ball per casket. An example of a row configuration is shown below where <SPAN CLASS="MATH"><I>N</I> = 5</SPAN>, G represents a golden ball and S represents a silver ball:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=10 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>G</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>G</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>G</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>G</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD></TR></TABLE></DIV><P><P><BR>Any two adjacent caskets can be moved into the two empty caskets without changing the order of the two adjacent caskets. Your task is to write a program that makes all gold balls located to the left of all silver balls using a minimal sequence of moves.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists a number of initial row configurations as indicated by a number at the beginning of the input file. Each configuration consists of a number representing <SPAN CLASS="MATH"><I>N</I></SPAN> on one line, and an initial state of <SPAN CLASS="MATH">2<I>N</I></SPAN> caskets on the second line. Each empty casket is represented by a space character. Each configuration is separated by a blank line from the next configuration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of a set of row configurations illustrating the sequence of moves; there is a set of row configurations per input row configuration. Each set of row configurations is preceded by the initial row configuration; each configuration is preceded by an ordinal number on the same line represent the step count; the initial configuration is preceded by <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
 
5 
abba  abab 

6 
ababab  baba
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 abba  abab 
1 abbabaa  b 
2 a  abaabbb 
3 aaaab  bbb 
 
0 a  babbababa 
1 aabbabbab  a 
2 aabbab  bbaa 
3 aa  abbbbbaa 
4 aaaaabbbbb
</PRE><P>
______________________________________________________
2465||||||false||||||
<P>Given a set of <SPAN CLASS="MATH"><I>m</I></SPAN> points on a <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> grid, we want to find its neighbourhood size, which is the number of grid points that are at a distance at most <SPAN CLASS="MATH"><I>t</I></SPAN> from any of the <SPAN CLASS="MATH"><I>m</I></SPAN> input points. Let <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB> = (<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>, <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB> = (<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>, ..., <SPAN CLASS="MATH"><I>p</I><SUB>m</SUB> = (<I>x</I><SUB>m</SUB>, <I>y</I><SUB>m</SUB>)</SPAN> be the set of <SPAN CLASS="MATH"><I>m</I></SPAN> input points. We treat the input points as points from a <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> grid. This grid is labeled in such a way that the bottom left corner is (0, 0) and the upper right corner is <SPAN CLASS="MATH">(<I>N</I> - 1, <I>N</I> - 1)</SPAN>. Thus, <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> are integers satisfying <!-- MATH
 $0 \le  xi <N$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2465img1.png ALT="$ \le$"><I>xi</I> &lt; <I>N</I></SPAN> and <!-- MATH
 $0 \le  yi < N$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2465img1.png ALT="$ \le$"><I>yi</I> &lt; <I>N</I></SPAN>, for each <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>m</I></SPAN>. The input points are already sorted so that for any <SPAN CLASS="MATH"><I>i</I> &lt; <I>j</I></SPAN>, we have either <!-- MATH
 $x_{i} < x_{j}$
 --><SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> &lt; <I>x</I><SUB>j</SUB></SPAN> or <SPAN CLASS="MATH">((<I>x</I><SUB>i</SUB> = <I>x</I><SUB>j</SUB>)</SPAN> and <SPAN CLASS="MATH">(<I>y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2465img1.png ALT="$ \le$"><I>y</I><SUB>j</SUB>))</SPAN>.<P>In this problem, the distance between two points is measured by the <EM>infinity norm</EM>; that is, the distance between two points <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> and <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> is <SPAN CLASS="MATH">|(<I>x</I>, <I>y</I>) - (<I>a</I>, <I>b</I>)|<SUB><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2465img1.png ALT="$\scriptstyle \infty$"></SUB> = max{| <I>x</I> - <I>a</I>|,| <I>y</I> - <I>b</I>|}</SPAN>. We want to find the total number of grid points, whose distance from the nearest input point is less than or equal to <SPAN CLASS="MATH"><I>t</I></SPAN>. To be precise, let us define the function <SPAN CLASS="MATH"><I>D</I></SPAN> on the grid points as <SPAN CLASS="MATH"><I>D</I>(<I>x</I>, <I>y</I>) = <I>min</I><SUB>{i=1, 2,..., m}</SUB>|(<I>x</I>, <I>y</I>) - (<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)|<SUB><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2465img1.png ALT="$\scriptstyle \infty$"></SUB></SPAN>. The size of the neighbourhood is the number of grid points <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> such that <SPAN CLASS="MATH"><I>D</I>(<I>x</I>, <I>y</I>)<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2465img1.png ALT="$ \le$"><I>t</I></SPAN> for each grid configuration. (Note that because <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> is a grid point, we have <!-- MATH
 $0 \le  x < N$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2465img1.png ALT="$ \le$"><I>x</I> &lt; <I>N</I></SPAN> and <!--$0 \le y < N.$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2465img1.png ALT="$ \le$"><I>y</I> &lt; <I>N</I>.</SPAN>)<P><PRE>
                            (0,8)                           (8,8)
                                  *  *  *  *  *  *  *  *  *
                                  *  *  *  *  *  *  *  *  *
                                  *  *  ?  ?  ?  ?  ?  *  *
                                  *  *  ?  ?  ?  ?  ?  *  *
                                  *  *  ?  ?  I  ?  ?  *  *
                                  *  *  ?  ?  I  ?  ?  ?  ?
                                  *  *  ?  ?  ?  ?  ?  ?  ?
                                  *  *  ?  ?  ?  ?  ?  I  ?
                                  *  *  *  *  *  ?  ?  ?  ?
                            (0,0)                           (8,0)

                         Figure 8: Illustration of the sample input.
</PRE><P>As an example, consider the grid in Figure 8. In this figure, a `<TT>*</TT>'is a grid point, `<TT>I</TT>' is an input point and `<TT>?</TT>' is a grid point that is within a distance of 2 from the nearest input point. The output is the number of `<TT>I</TT>' and `<TT>?</TT>', which is 40.<P>Your program should be efficient enough to handle large point set. In particular, your program should take less than 5 minutes system time on the provided machine.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of two configurations of points. Each configuration is represented by 3 integers which correspond to <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>t</I></SPAN>, and <SPAN CLASS="MATH"><I>m</I></SPAN>, and follows by a sequences of <SPAN CLASS="MATH"><I>m</I></SPAN> pairs which correspond to the <SPAN CLASS="MATH"><I>m</I></SPAN> input points <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB> = (<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>, <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB> = (<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>, ..., <SPAN CLASS="MATH"><I>p</I><SUB>m</SUB> = (<I>x</I><SUB>m</SUB>, <I>y</I><SUB>m</SUB>)</SPAN>. The second configuration follows immediately after the first configuration in the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is the neighbourhood size of the two configurations.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 2 3 
4 3 
4 4 
7 1
5 1 1 
2 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
the first configuration  has 40 neighbouring points. 
the second configuration has  9 neighbouring points.

______________________________________________________
2466||||||false||||||
<P>Leaders of <SPAN CLASS="MATH"><I>N</I></SPAN> political parties agree to have a round table conference to resolve a political issue through discussion. However due to animosity between parties and leaders some / all leaders may dislike sitting next to leaders specified by them. The problem is to determine, if possible, sitting arrangements around the round table so that a leader is not required to sit next to another leader disliked by him / her.<P>Leaders are identified by integers <SPAN CLASS="MATH">1, 2,...<I>N</I></SPAN>. It may be noted that if a leader <SPAN CLASS="MATH"><I>I</I></SPAN> dislikes sitting next to another leader <SPAN CLASS="MATH"><I>J</I></SPAN> then the leader <SPAN CLASS="MATH"><I>J</I></SPAN> may not necessarily dislike sitting next to <SPAN CLASS="MATH"><I>I</I></SPAN>. However in such a case <SPAN CLASS="MATH"><I>I</I></SPAN> and <SPAN CLASS="MATH"><I>J</I></SPAN> can not sit next to each other because <SPAN CLASS="MATH"><I>I</I></SPAN> dislikes <SPAN CLASS="MATH"><I>J</I></SPAN>. Further, clock-wise and anti clock-wise arrangements are considered identical.<P>An arrangement is represented by a sequence of <SPAN CLASS="MATH"><I>N</I></SPAN> integers <SPAN CLASS="MATH">1, 2,...<I>N</I></SPAN> indicating the relative positions of each leader beginning with leader 1. It is assumed that the last integer in the sequence and the integer 1 appearing in the first position are next to each other in the sitting arrangement. The arrangements are to be printed in lexicographic order.<P>Write a program to print all possible sitting arrangements for the round table conference.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>The first line of each test case contains the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number of leaders <SPAN CLASS="MATH"><I>N</I>( &lt; 100)</SPAN>.<P>Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains <SPAN CLASS="MATH"><I>N</I></SPAN> zeros / ones.<P>If <SPAN CLASS="MATH"><I>d</I><SUB>ij</SUB></SPAN> denotes the <SPAN CLASS="MATH"><I>j</I></SPAN>-th entry in the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line then <SPAN CLASS="MATH"><I>d</I><SUB>ij</SUB></SPAN> is equal to 1 if leader <SPAN CLASS="MATH"><I>i</I></SPAN> dislikes leader <SPAN CLASS="MATH"><I>j</I></SPAN>, otherwise <SPAN CLASS="MATH"><I>d</I><SUB>ij</SUB></SPAN> is equal to 0. It is assumed that <SPAN CLASS="MATH"><I>d</I><SUB>ii</SUB></SPAN> is equal to 1. This is true for all <SPAN CLASS="MATH"><I>i</I>, <I>j</I> = 1, 2,..., <I>N</I></SPAN>.<P>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, first print, in a line, the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(<I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2466img1.png ALT="$ \ge$">0)</SPAN> of possible arrangements as shown in sample output.<P>Each of the next <SPAN CLASS="MATH"><I>k</I></SPAN> lines prints an arrangement in lexicographic order.<P>Print a blank line between two successive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 5 
1 1 0 1 0 
0 1 0 0 1 
0 0 1 0 0 
1 0 0 1 0 
0 1 0 1 1 
2 6 
1 0 1 1 0 0 
0 1 0 0 0 1 
1 0 1 0 0 0 
1 0 0 1 1 0 
0 0 1 0 1 1 
0 1 0 0 1 1 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 0

2 2
1 5 2 3 4 6
1 5 2 4 3 6
</PRE><P>
______________________________________________________
2467||||||false||||||
<P>A doctor has a great reputation for his treatments. However his prescriptions are illegible. He alone and only his own chemist can read his prescriptions. Sometimes it is difficult even to identify the same medicine written in two different prescriptions.<P>The doctor has a standard pattern of prescribing medicines. He has a standard set of <SPAN CLASS="MATH"><I>N</I></SPAN> pet medicines outside which he never prescribes any medicine. For every pet medicine there is a set of related successor pet medicines. A pet medicine may appear in one or more sets of successor pet medicines.<P>The doctor prescribes medicines in the form of a list. If he prescribes a medicine then he never repeats it in the same prescription. Further, when he prescribes a medicine then the next medicine, if any, in the prescription is one of the successor pet medicines and none of these successor pet medicines appears in the prescription subsequently.<P>A team of handwriting experts and medical practitioners analyzed a large number of prescriptions of the doctor and made a possible list of his pet medicines. The medicines in this list are identified by <SPAN CLASS="MATH"><I>N</I></SPAN> integers <SPAN CLASS="MATH">1, 2,..., <I>N</I></SPAN>. For each pet medicine in the list, they also prepared a list of successor pet medicines one of which possibly succeeds the medicine in every prescription.<P>A prescription has a list of p medicines. If some of the medicines in a prescription are identified then it is required to identify the unidentified medicines in the prescription.<P>Write a program that will identify the unidentified medicines if one or more medicines in the list are given as identified.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases with data from one or more expert teams.<P>For each test case, the first line contains the expert team number <SPAN CLASS="MATH"><I>n</I></SPAN> and the number <SPAN CLASS="MATH"><I>N</I>( &lt; 500)</SPAN>, of pet medicines identified by the team.<P>Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains a set of integers: the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line identifies the successor pet medicines of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th pet medicine.<P>Each test case is related to a given prescription. There is a line that gives the number <SPAN CLASS="MATH"><I>p</I></SPAN>. Next <SPAN CLASS="MATH"><I>p</I></SPAN> lines identify some of the <SPAN CLASS="MATH"><I>p</I></SPAN> medicines in the prescription. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line contains <SPAN CLASS="MATH"><I>j</I></SPAN> if the <SPAN CLASS="MATH"><I>i</I></SPAN>-th medicine in the prescription is identified as <SPAN CLASS="MATH"><I>j</I></SPAN>. If the <SPAN CLASS="MATH"><I>i</I><SUP>th</SUP></SPAN> medicine is unidentified then <SPAN CLASS="MATH"><I>j</I></SPAN> is equal to 0.<P>The entire input set terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>n</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, print a line containing the expert team number <SPAN CLASS="MATH"><I>n</I></SPAN> and the total number <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(<I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2467img1.png ALT="$ \ge$">0)</SPAN> of possible solutions. Each of the next <SPAN CLASS="MATH"><I>k</I></SPAN> lines contains a complete sequence of p possible medicines in lexicographic order.<P>Print a blank line between two successive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 5
2 4 5
1 3
5
2 3
1 2 4
4 
0
3
0
0
2 6
3 4
1 5 6
2 4 6
1 3
2 6
2 4 5
4
4
0
2
1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2
2 3 5 4
4 3 5 1

2 0
</PRE><P>
______________________________________________________
2468||||||false||||||
<P>A community named DAMPU lives in the twenty first century. However it still follows some of its old outdated traditional community customs very strictly, even though its members are used to modern way of life and use modern gadgets including computers for its activities and recreations.<P>The DAMPU community is closed in the sense that marriages take place according to the old custom between a male and a female member of the community. A member of the community is not permitted to marry outside the community. Further, members of the community are monogamous. Each unmarried living member having a specified marriageable age is eligible for marriage. An eligible member of the community can marry another eligible member of opposite sex if and only if, at least one of them is separated from the nearest common ancestor by at least <SPAN CLASS="MATH"><I>k</I></SPAN> generations, <SPAN CLASS="MATH"><I>k</I></SPAN> being an integer specified by the community council from time to time. The integer <SPAN CLASS="MATH"><I>k</I></SPAN> is called the <SPAN CLASS="textit">generation gap</SPAN>. For example if <SPAN CLASS="MATH"><I>k</I> = 2</SPAN> then the nearest common ancestor should be either grand parents of at least one of the two members who wish to marry or ancestors of grand parents. It may be noted that the members who are already married may or may not have a <SPAN CLASS="textit">generation gap</SPAN> of <SPAN CLASS="MATH"><I>k</I></SPAN> generations because a different criterion was possibly applicable at the time when they were married.<P>The DAMPU community wants to develop a computer program for computer based match making so that a member eligible for marriage may easily get a list of eligible members of the opposite sex with whom there is a possibility of marriage. It is known that the DAMPU community maintains a register for births, deaths and marriages and the records are available for every member of the community.<P>Can you help the DAMPU community by writing a program for the purpose stated above?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case, the first line contains three integers <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN>. The integer <SPAN CLASS="MATH"><I>n</I></SPAN> is the case number, while <!-- MATH
 $N ( < 5000)$
 --><SPAN CLASS="MATH"><I>N</I>( &lt; 5000)</SPAN> is the total number of members of the community for whom data are given and <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(<I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2468img1.png ALT="$ \ge$">100)</SPAN> is the specification fixed by the community council for the <SPAN CLASS="textit">generation gap</SPAN> to be used for match making.<P>Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains relevant data (viz., Sex, Father, Mother) on members of the community selected for testing the program. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line gives data for the <SPAN CLASS="MATH"><I>i</I></SPAN>-th member. The members of the community for whom data are given are identified by integers <SPAN CLASS="MATH">1, 2,..., <I>N</I></SPAN>. These members include all living members who are eligible for marriage and also some ancestors of eligible members so that the eligibility for match making can be verified. Integers 1 and 0 are used to denote the sex of a member: `<TT>1</TT>', if male and `<TT>0</TT>', if female. A parent of a member is denoted by the integer `<TT>0</TT>' if the <SPAN CLASS="textit">generation gap</SPAN> between the parent and every eligible member, other than his/her descendents, is known to be <SPAN CLASS="MATH"><I>k</I></SPAN> or more.<P>The entire input set terminates with an input `<TT>0 0 0</TT>' for <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, first print in one line, the test case number <SPAN CLASS="MATH"><I>n</I></SPAN> and the total number <SPAN CLASS="MATH"><I>m</I></SPAN> of possible matches. Print a line for each possible match in the form: <SPAN CLASS="MATH"><I>i</I></SPAN> <SPAN CLASS="MATH"><I>j</I></SPAN> where <SPAN CLASS="MATH"><I>i</I></SPAN> is a male member and <SPAN CLASS="MATH"><I>j</I></SPAN> is a female member eligible for marriage. The list of matches should be printed in lexicographic order of <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN>.<P>Keep a blank line before printing the output for the next test case, as shown in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 9 2
1 0 0
1 0 0
0 2 0
1 1 5
0 2 0
1 1 5
0 2 0
1 6 3
0 1 5
2 18 3
1 0 0
1 0 0
1 1 6
0 0 0
0 3 4
0 0 0
0 2 14
1 12 13
0 15 7
1 15 7
1 3 4
1 2 14
0 3 4
0 0 0
1 12 13
0 12 13
1 15 7
0 15 7
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3
4 7
8 7
8 9

2 4
10 5
11 9
11 18
17 5
</PRE><P>
______________________________________________________
2469||||||false||||||
<P>A new township has been built over a rectangular plot of land dividing the whole area by a grid. The grid divides the whole plot into <SPAN CLASS="MATH">(<I>m</I> - 1) <TT>x</TT> (<I>n</I> - 1)</SPAN> big square plots for use as residential / commercial / industrial areas. Each square plot is divided into smaller plots and these are well connected by internal road network. However, the major road links in the township connecting all big square plots are the avenues running along the grid with <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> junctions. The junctions are assumed to be arranged in <SPAN CLASS="MATH"><I>m</I></SPAN> rows and <SPAN CLASS="MATH"><I>n</I></SPAN> columns and are denoted by <SPAN CLASS="MATH">(<I>p</I>, <I>q</I>), <I>p</I> = 1, 2,..., <I>m</I></SPAN>, <SPAN CLASS="MATH"><I>q</I> = 1, 2,..., <I>n</I></SPAN>. For an internal junction <SPAN CLASS="MATH">(<I>p</I>, <I>q</I>)</SPAN>, the neighboring junction <SPAN CLASS="MATH">(<I>p</I> - 1, <I>q</I>)</SPAN> is assumed to be at the north of <SPAN CLASS="MATH">(<I>p</I>, <I>q</I>)</SPAN>. In addition to the road network of the township there is a rectangular perimeter road that runs around the township with connections from each road junction located at the boundary of the township. An outline of the road links in the township is shown below where the perimeter road is indicated by the rectangle drawn around the network and a road junction at <SPAN CLASS="MATH">(<I>p</I>, <I>q</I>)</SPAN> with directions to four roads going out of the junction are indicated by<P><DIV ALIGN="CENTER"><IMG WIDTH="139" HEIGHT="102" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2469a.jpg ALT="\epsfbox{p2469a.eps}"></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="767" HEIGHT="548" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2469a.jpg ALT="\epsfbox{p2469b.eps}"></DIV><P>The traffic control department of the township enforces static traffic control rules that either permit or do not permit traffic out of a road junction in a given direction. At each road junction there are four traffic signals, one facing each of the four roads connected at the junction. Each of these signals is lighted either Green or Red according to whether traffic is or is not permitted <SPAN CLASS="textit">out of the junction</SPAN>. A traffic in the perimeter road is permitted to enter the township through a road junction connecting the perimeter road if the traffic signal at the junction facing the perimeter road, is lighted Green.<P>It is generally believed that moving along the perimeter road is more risky than moving along the township avenues. It is also believed that the risk while moving from a source junction to a neighboring destination junction in the township avenues is same whatever be the location of the junctions. Let this risk be <SPAN CLASS="MATH"><I>R</I></SPAN>. The risk is additive in the sense that if one moves from a source junction to a destination junction through the township avenues, passing through <SPAN CLASS="MATH"><I>k</I> - 1</SPAN> other junctions then the risk is equal to <SPAN CLASS="MATH"><I>kR</I></SPAN>. When the perimeter road is used to move from a junction to another junction separated by <SPAN CLASS="MATH"><I>k</I> - 1</SPAN> other junctions ion the boundary of the township then the risk increases by a constant factor <SPAN CLASS="MATH"><I>f</I></SPAN> and the risk is equal to <SPAN CLASS="MATH"><I>fkR</I></SPAN>, where f is a real constant that depends on the time of journey. In addition, for moving along the corners of the perimeter road there is an additional risk, it is estimated to be <SPAN CLASS="MATH">2<I>fR</I></SPAN> for each corner. Let the total risk in moving along a rout be denoted by <SPAN CLASS="MATH"><I>FR</I></SPAN>. The factor <SPAN CLASS="MATH"><I>F</I></SPAN> is called the risk factor of the rout.<P>As an illustration it may be pointed out that the risk for moving from (1,2) to (2,1) is <SPAN CLASS="MATH">2<I>R</I></SPAN> if the movement is through the rout (1,2), (1,1), (2,1). So the risk factor <SPAN CLASS="MATH"><I>F</I></SPAN> of this rout is equal to 2. However, the risk becomes <SPAN CLASS="MATH">4<I>fR</I></SPAN> <SPAN CLASS="MATH">(= 2<I>fR</I> + 2<I>fR</I>)</SPAN> if one moves along the rout (1,2), perimeter, (2,1) crossing the corner of the perimeter road once. In this case if <SPAN CLASS="MATH"><I>f</I></SPAN> is defined to be 2.5 then the risk factor <SPAN CLASS="MATH"><I>F</I></SPAN> is equal to 10.0.<P>Given a source junction <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> and a destination junction <SPAN CLASS="MATH">(<I>c</I>, <I>d</I> )</SPAN> when certain traffic control rules are under operation and the constant <SPAN CLASS="MATH"><I>f</I></SPAN> is known, the problem is to find the total number s of the safest routs to move from the source to the destination and determine the risk factor <SPAN CLASS="MATH"><I>F</I></SPAN> associated with the safest routs.<P>Write a program to solve this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case, the first line contains the case number <SPAN CLASS="MATH"><I>c</I></SPAN>, the total number of rows <SPAN CLASS="MATH"><I>m</I></SPAN>, and columns <SPAN CLASS="MATH"><I>n</I></SPAN>, the total number <SPAN CLASS="MATH"><I>r</I></SPAN> of source, destination pair for each of which the safest routs are to be found and the constant factor <SPAN CLASS="MATH"><I>f</I></SPAN>.<P>Each of the next <SPAN CLASS="MATH"><I>r</I></SPAN> lines gives <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I></SPAN> indicating the {source <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> , destination <SPAN CLASS="MATH">(<I>c</I>, <I>d</I> )</SPAN>} pair for which the safest routs are to be found.<P>The traffic signals at <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> junctions are given in row major order of the junctions in the next <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> lines. The traffic signals at a junction are represented by a string of four 0's and 1's, `<TT>0</TT>' representing a Green signal and `<TT>1</TT>' representing a Red signal. The signals are given in clock-wise order starting from the signal at the north. Thus if `<TT>0011</TT>' represents the four signals at a junction then the signal at the north is Green, the signal at the east is also Green while two other signals are Red.<P>The entire input set terminates with an input `<TT>0</TT>' for the case number <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print the test case number c in one line. For each given {source <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN>, destination <SPAN CLASS="MATH">(<I>c</I>, <I>d</I> )</SPAN>} pair, print <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>, <I>s</I></SPAN> and <SPAN CLASS="MATH"><I>F</I></SPAN> as shown in the sample output. Print a blank line before printing output for the next test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 4 5 2 1.5
2 2 1 1
1 1 4 1
0101
1001 
0011 
0011 
1100
1010 
1010 
1001 
1100 
0110
0110 
0011 
1100 
0011 
0110
1010 
0110 
0110 
0101 
0101
2 4 6 1 2
2 1 3 5
0011
0011
1101
1011
1001
1101
0011
0111
0100
0110
1011
0101
1100
0110
1110
0110
0110
1000
1011
0001
0011
0101
0110
1110 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
2 2 1 1 1 5.5
1 1 4 1 1 4.0

2
2 1 3 5 6 19.0
</PRE><P>
______________________________________________________
2470||||||false||||||
<P>
The successful launching of third-generation (3G) mobile phone by the Japanese giant
DoCoMo marked the beginning of an era in real-time multi-media inter-net communications at
affordable cost. The F-TV or the Future TV has the reputation to venture into innovative TV
programs that might attract large number of viewers in near future. In order to remain ahead in
the race to have the largest number of viewers during a prime time slot in comparison to other TV
channels, the management of F-TV plans to produce a TV program that will provide a large
number of viewers with an opportunity to chat with a celebrity either in person or in real-time
virtually using mobile phones and get cash prizes in the process. 

<P>
The planned TV program consists in having a celebrity on each show as the anchor of
the chat show and a selected number of viewers as 'real' participants. Any number of remote
viewers may also join the program during the show as 'virtual' participants using their 3G mobile
phones from anywhere in the world. Each participant, male or female, real or virtual, is enrolled
for the show and is given a unique token serial number on first come first served basis. Towards
the end of the show the anchor runs a computer program that selects participants from among
the enrolled participants and announces cash prizes for the selected participants. There is a
possibility that no participant is selected for a prize; in such a case the anchor announces the
decision accordingly.

<P>
The computer program selects the participants to get prizes in a simple way. Let n be the
total number of participants, real or virtual. Each participant is given a token serial number <SPAN CLASS="MATH"><I>p</I></SPAN>, <!-- MATH
 $p=1,
2, \ldots, n$
 -->
<SPAN CLASS="MATH"><I>p</I> = 1, 2,..., <I>n</I></SPAN>. Let <SPAN CLASS="MATH"><I>x</I><SUB>p</SUB></SPAN>, be equal to 0 if the participant having the token serial number <SPAN CLASS="MATH"><I>p</I></SPAN>, is female,
otherwise <SPAN CLASS="MATH"><I>x</I><SUB>p</SUB></SPAN> is equal to 1. The input to the program is the string <!-- MATH
 $x=(x_{1}, x_{2}, \ldots, x_{n})$
 -->
<SPAN CLASS="MATH"><I>x</I> = (<I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>n</SUB>)</SPAN> of length <SPAN CLASS="MATH"><I>n</I></SPAN> on the alphabet {0,1}. The program finds the longest palindromes contained in <SPAN CLASS="MATH"><I>x</I></SPAN> ( i.e. the longest
sub-strings made up of elements of <SPAN CLASS="MATH"><I>x</I></SPAN> each of which reads the same backward as forward). Let
there be <SPAN CLASS="MATH"><I>k</I></SPAN> such palindromes and let <SPAN CLASS="MATH"><I>U</I></SPAN> be the union of all these palindromes. The program
deletes <SPAN CLASS="MATH"><I>U</I></SPAN> from <SPAN CLASS="MATH"><I>x</I></SPAN>. It repeats the process with the reduced string <SPAN CLASS="MATH"><I>x</I></SPAN> successively until there is no
palindrome of length 3 or more. Finally it finds the elements of <SPAN CLASS="MATH"><I>x</I></SPAN>, if any, which are retained in the
process.

<P>
For example, let <SPAN CLASS="MATH"><I>n</I> = 37</SPAN> and <!-- MATH
 $x=( 0110 \ 1110 \ 1101 \ 1011 \ 0111 \ 0101 \ 1101 \ 0010 \ 0101 \ 1 )$
 -->
<SPAN CLASS="MATH"><I>x</I> = (0110&nbsp;1110&nbsp;1101&nbsp;1011&nbsp;0111&nbsp;0101&nbsp;1101&nbsp;0010&nbsp;0101&nbsp;1)</SPAN>
where the elements of <SPAN CLASS="MATH"><I>x</I></SPAN> are written in groups of four followed by a blank character, for easy
readability. The sub-string <!-- MATH
 $(x_{3}, \dots, x_{22})=( 10 \ 1110 \ 1101 \ 1011 \ 0111 \ 01 )$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>3</SUB>,..., <I>x</I><SUB>22</SUB>) = (10&nbsp;1110&nbsp;1101&nbsp;1011&nbsp;0111&nbsp;01)</SPAN> is of length 20 and is the
longest palindromes in <SPAN CLASS="MATH"><I>x</I></SPAN>. If this sub-string is deleted then the string <SPAN CLASS="MATH"><I>x</I></SPAN> is reduced to <!-- MATH
 $( x_{1}, x_{2}, x_{23},
x_{24}, \dots, x_{37} )$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>x</I><SUB>23</SUB>, <I>x</I><SUB>24</SUB>,..., <I>x</I><SUB>37</SUB>)</SPAN> with elements <!-- MATH
 $( 0101 \ 1101 \ 0010 \ 0101 \ 1 )$
 -->
<SPAN CLASS="MATH">(0101&nbsp;1101&nbsp;0010&nbsp;0101&nbsp;1)</SPAN> which when reduced further gives <!-- MATH
 $( x_{1}, x_{2}, x_{23},x_{24} )$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>x</I><SUB>23</SUB>, <I>x</I><SUB>24</SUB>)</SPAN> with elements <SPAN CLASS="MATH">(0101)</SPAN>. Finally, since the longest palindromes in <SPAN CLASS="MATH">(0101)</SPAN> are <SPAN CLASS="MATH">(010)</SPAN> and <SPAN CLASS="MATH">(101)</SPAN> , each of which is of length 3 and their union is the entire string under consideration, all the
four elements are deleted. Hence, no element of <SPAN CLASS="MATH"><I>x</I></SPAN> is selected.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input may contain multiple test cases.

<P>
For each test case, the first line contains two integers the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the length
<SPAN CLASS="MATH"><I>n</I></SPAN> of the given string. 

<P>
The string <SPAN CLASS="MATH"><I>x</I></SPAN> is given in one or more lines in groups of four elements separated by a blank
character; the last group in the string may contain less than four elements. The string is
terminated with the character <SPAN CLASS="MATH">$</SPAN> which is not considered as a part of the string.

<P>
The entire input set terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.   

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case in the input, print the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the number <SPAN CLASS="MATH"><I>k</I></SPAN> of
participants selected for the prize. In next <SPAN CLASS="MATH"><I>k</I></SPAN> lines, print the token serial numbers of the
participants selected for the prize in ascending order.

<P>
Print a blank line before printing the output of  the next test case. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1  37
0110  1110 1101  1011  0111  0101  1101  0010  0101 1 $
2  62
1011 0001 1110 1010 1111 0010 1010 0111 1101 1010 0110 0011 0110 0011 0111 10 $
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 0

2 1
1
</PRE> 

<P>

______________________________________________________
2471||||||false||||||
<P>Mr. Paisawalla died at the age of 79. He was a rich man. He left behind lots of immovable property. Before his death, he made a will for disposition of his property to his wife, three sons and a daughter. The directions in the will were as follows:<P><DL COMPACT><DT>1.</DT><DD>The property should be disposed of impartially and equally to his wife, three sons and the daughter according to current valuation of property and practical limitations.</DD><DT>2.</DT><DD>As far as practicable equality in shares should be maintained. However, if complete equality is not feasible, then the largest difference between shares of any two members should be the least. In such a case the disposal should be in decreasing order of shares to wife, son1, son2, son3 and the daughter.</DD><DT>3.</DT><DD>The impartiality in valuation is to be ensured by an impartial committee for valuation.</DD><DT>4.</DT><DD>The equality and impartiality in disposition are to be ensured by entrusting the job to a software professional who should write a program for taking computer-based decisions.</DD></DL><P>As an illustration let the property of late Mr. Paisawalla be as indicated in the table below:<P><DIV ALIGN="CENTER"><TABLE COLS=10 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Property No</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Valuation in lakhs</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>49</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>78</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>83</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>35</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>109</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>95</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>23</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>62</TD></TR></TBODY></TABLE></DIV><P><P><BR>The disposition should be as follows:<P><DIV ALIGN="CENTER"><TABLE COLS=6 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Members:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Wife</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Son1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Son2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Son3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Daughter</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Property No</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2, 4</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1, 9</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3, 8</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5, 7</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Share</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>113</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>111</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>109</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>106</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>105</TD></TR></TBODY></TABLE></DIV><P><P><BR>Are you prepared to write a computer program for disposition of the property of late Mr. Paisawalla? The program should be able to provide solutions to other similar cases.<P>Assume that the total number of receivers to whom the property is to be distributed is <SPAN CLASS="MATH"><I>m</I></SPAN> and the receivers are represented by integers <SPAN CLASS="MATH">1, 2,..., <I>m</I></SPAN>. In case equality in disposition is not feasible the disposition should be such that share of property decreases as the number representing a receiver increases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases for testing the program.<P>For each test case, the first line contains three integers, the case number <SPAN CLASS="MATH"><I>c</I></SPAN>, the total number <SPAN CLASS="MATH"><I>n</I></SPAN> of property and the total number <SPAN CLASS="MATH"><I>m</I></SPAN> of receivers to whom the property is to be distributed.<P>For simplicity, properties are identified by integers <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN>. The valuations of property are given in <SPAN CLASS="MATH"><I>n</I></SPAN> lines, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line gives the valuation of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th property.<P>The entire input set terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, print the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the difference between the largest and the smallest allocation of shares.<P>Write shares of the property allocated to <SPAN CLASS="MATH"><I>m</I></SPAN> receivers in the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line contains the total valuation of shares received by the <SPAN CLASS="MATH"><I>i</I></SPAN>-th receiver, together with the list of property in increasing order of the number representing the property, as shown in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 9 5
49
78
83
35
10
109
95
23
62
2 11 4
83
142
75
93
43
5271812962120
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 8
113 2 4
111 1 9   
109 6
106 3 8
105 5 7

2  1
173  3  4  6
172  5  9
172  1  7 10
172  2  8 11
</PRE><P>
______________________________________________________
2472||||||false||||||
<P>Modern writers do not use pens to write books. They enter the text directly on to the home PCs using MS Word and edit the text when necessary.<P>After entering the text for a new book, a famous novelist desires to have a major rearrangement of the text he has prepared. He has identified passages in the text and numbered these passages. However the passages are not in proper sequence. He wants to use the minimum number of <SPAN CLASS="textbf">cut</SPAN> and <SPAN CLASS="textbf">paste</SPAN> operations of MS Word to edit the text and put the passages in proper order. He may do the operation either with one passage or with a number of passages occurring in a sequence. He needs a program for this purpose.<P>The following example illustrates his problem. In order to edit the text containing 6 passages in the sequence P2, P4, P1, P5, P3, P6 so that the passages appear in the text in the proper sequence viz., P1, P2, P3, P4, P5, P6 he needs at least 2 <SPAN CLASS="textbf">cut</SPAN> and <SPAN CLASS="textbf">paste</SPAN> operations:<P><PRE><TT>
		 1. <SPAN  CLASS="textbf">cut</SPAN> P1 and <SPAN  CLASS="textbf">paste</SPAN> before P2 to get P1, P2, P4, P5, P3, P6 
<BR>
and 		 2. <SPAN  CLASS="textbf">cut</SPAN> P3 and <SPAN  CLASS="textbf">paste</SPAN> after P2 to get P1, P2, P3, P4, P5, P6.
</TT></PRE><P>Can you write a program for him?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case, the first line contains two integers, the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number <SPAN CLASS="MATH"><I>n</I></SPAN> of passages.<P>For simplicity, passages are represented by integers <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN>. The input sequence of passages is given in <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each line containing one integer in the order in which the passages appear in the text before editing.<P>The entire input set terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, print the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number <SPAN CLASS="MATH"><I>k</I></SPAN> of <B>cut</B> and <B>paste</B> operations needed for the rearrangement of passages.<P>Print the given sequence in one line. In the next <SPAN CLASS="MATH"><I>k</I></SPAN> lines print successive changes in the sequence of passages due to application of <SPAN CLASS="MATH"><I>k</I></SPAN> <B>cut</B> and <B>paste</B> operations.<P>Print a blank line between outputs of two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 6
2 
4
1
5
3
6
2 15
12
6
7
2
3
4
9
10
11
1
5
8
13
14
15
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2
2 4 1 5 3 6
1 2 4 5 3 6
1 2 3 4 5 6

2 4
12 6 7 2 3 4 9 10 11 1 5 8 13 14 15
12 6 7 9 10 11 1 2 3 4 5 8 13 14 15
12 9 10 11 1 2 3 4 5 6 7 8 13 14 15
12 1 2 3 4 5 6 7 8 9 10 11 13 14 15
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
</PRE><P>
______________________________________________________
2473||||||false||||||
<P>There is a search around the world for the most wanted man (MWM) in the history of mankind. He is believed to have an extraordinary quality, either superior or inferior, compared to a normal person. He is likely to be present any where in the world. If he is spotted precisely then he may be captured without much difficulty. However the problem is in spotting him because a number of look-alikes are known to exist at different parts of the world.<P>Apart from conventional resources, modern satellite communication and surveillance systems that can precisely identify, measure, record and monitor the physical, social, cultural and behavioral characteristics of a person, are available for collecting data on the MWM. In addition, the services of competent professionals in different disciplines are available to analyze and interpret data collected from all sources.<P>Professional Psychologists and Statisticians admit that it is difficult for them to distinguish precisely between two persons using physical and behavioral data. However, by analyzing and interpreting group data, they claim that they can differentiate precisely between a group of normal persons and a similar group of same size that includes a person of extraordinary quality even if it is <SPAN CLASS="textbf">not known</SPAN> in advance whether the extraordinary quality is superior or inferior to that of a normal person. In such a case for a reliable comparison it is necessary that the number of persons in each group is 3 or more.<P>In other words, let A, B be two groups of equal number of persons, the number being 3 or more. An unidentified person <SPAN CLASS="MATH"><I>x</I></SPAN> having an extraordinary quality classified either superior or inferior, may or may not be present in any of the groups. It is possible to perform a <SPAN CLASS="textbf">special compare operation on A, B</SPAN> and state precisely by data analysis and interpretation, one of the following:<P><DL COMPACT><DT>(a)</DT><DD>A<SPAN CLASS="MATH">=</SPAN>B indicating <SPAN CLASS="MATH"><I>x</I></SPAN> is neither in A nor in B,</DD><DT>(b)</DT><DD>A<SPAN CLASS="MATH">&gt;</SPAN>B indicating either <SPAN CLASS="MATH"><I>x</I></SPAN> is in A and he is superior or <SPAN CLASS="MATH"><I>x</I></SPAN> is in B and he is inferior,</DD><DT>(c)</DT><DD>A<SPAN CLASS="MATH">&lt;</SPAN>B indicating either <SPAN CLASS="MATH"><I>x</I></SPAN> is in A and he is inferior or <SPAN CLASS="MATH"><I>x</I></SPAN> is in B and he is superior.</DD></DL><P>The outcome of the special compare operation may be denoted by <TT>E</TT>, <TT>H</TT> and <TT>L</TT> representing the cases (a), (b) and (c) respectively.<P><P><BR>Since collection, analysis and interpretation of data are considered costly and the total number <SPAN CLASS="MATH"><I>n</I></SPAN> of look-alikes including the MWM is small, <SPAN CLASS="MATH">8<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2473img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2473img1.png ALT="$ \le$">12</SPAN>, it is decided that only three special compare operations on selected groups could be performed successively to spot the MWM and determine his qualitative characteristic. However it is required to select groups <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>i</I> = 1, 2, 3</SPAN>, before each special compare operation. The groups may depend on the outcome of the previous special compare operations.<P>Write a program that selects the groups to be compared by the professionals in three stages. For each stage, you may assume that the outcomes of special compare operations are known for all previous stages. After selection of groups the program should spot the MWM when successive outcomes of special compare operations are known.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>The data for a test case are given in a single line. The line contains two integers, the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number <SPAN CLASS="MATH"><I>n</I></SPAN> of look-alikes, <SPAN CLASS="MATH">8<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2473img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2473img1.png ALT="$ \le$">12</SPAN>. It also contains a string <SPAN CLASS="MATH"><I>S</I></SPAN> of three letters <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>, <I>s</I><SUB>3</SUB></SPAN> representing the successive outcomes of three special compare operations to be used by your program to form the groups for comparison and to spot the MWM.<P>The look-alikes, including the MWM <SPAN CLASS="MATH"><I>w</I></SPAN>, are identified by integers <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> and each of the outcomes <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>, <I>s</I><SUB>3</SUB></SPAN> of the special compare operations is represented by the letters `<TT>E</TT>', `<TT>H</TT>' or `<TT>L</TT>'.<P>The <SPAN CLASS="MATH"><I>i</I></SPAN>-th letter si in the string <SPAN CLASS="MATH"><I>S</I></SPAN> represents the outcome of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th special compare operation, <SPAN CLASS="MATH"><I>i</I> = 1, 2, 3</SPAN>.<P>The entire input set terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, print four lines.<P>The first line contains the input data, viz., <SPAN CLASS="MATH"><I>c</I>, <I>n</I>, <I>S</I></SPAN>, together with an integer <SPAN CLASS="MATH"><I>w</I></SPAN> that spots the MWM and a letter <SPAN CLASS="MATH"><I>q</I></SPAN> that identifies his quality. If MWM is spotted then <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2473img1.png ALT="$ \le$"><I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2473img1.png ALT="$ \le$"><I>n</I></SPAN> and the letter <SPAN CLASS="MATH"><I>q</I></SPAN> is either `<TT>s</TT>' or `<TT>i</TT>' depending on whether the quality of MWM is identified as superior or inferior. If MWM is not among the look-alikes then <SPAN CLASS="MATH"><I>w</I></SPAN> is equal to zero and the letter <SPAN CLASS="MATH"><I>q</I></SPAN> is equal to `<TT>m</TT>', representing 'MWM missing'. In case the comparisons reveal that the claims of the professionals are faulty, then <SPAN CLASS="MATH"><I>w</I></SPAN> is equal to `<TT>-1</TT>' and <SPAN CLASS="MATH"><I>q</I></SPAN> is equal to `<TT>f</TT>' representing ``faulty comparisons and claims are not tenable''.<P>The next three lines contain <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>i</I> = 1, 2, 3</SPAN> where <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN> are the groups for comparison at the <SPAN CLASS="MATH"><I>i</I></SPAN>-th stage and <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> is the given outcome of the special compare operation.<P>Print a blank line between outputs of two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 8 HHH
2 8 HHE
3 8 HHL
4 8 HEH
5 8 HEE
6 8 HEL
7 8 HLH
8 8 EEE
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 8 HHH 1 s 
1 2 3 H 4 5 6
1 4 7 H 2 5 8
1 5 6 H 2 7 8

2 8 HHE -1 f
1 2 3 H 4 5 6
1 4 7 H 2 5 8
1 5 6 E 2 7 8

3 8 HHL  5 i 
1 2 3 H 4 5 6
1 4 7 H 2 5 8
1 5 6 L 2 7 8

4 8 HEH -1 f
1 2 3 H 4 5 6
1 4 7 E 2 5 8
1 5 6 H 2 7 8

5 8 HEE  3 s 
1 2 3 H 4 5 6
1 4 7 E 2 5 8
1 5 6 E 2 7 8

6 8 HEL  6 i 
1 2 3 H 4 5 6
1 4 7 E 2 5 8
1 5 6 L 2 7 8

7 8 HLH -1 f
1 2 3 H 4 5 6
1 4 7 L 2 5 8
1 5 6 H 2 7 8

8 8 EEE  0 m 
1 2 3 E 4 5 6
1 4 7 E 2 5 8
1 5 6 E 2 7 8

______________________________________________________
2474||||||false||||||
<P>You must write a program that simulates placing spherical balloons into a rectangular box.</p><p>The simulation scenario is as follows. Imagine that you are given a rectangular box and a set of points. Each point represents a position where you might place a balloon. To place a balloon at a point, center it at the point and inflate the balloon until it touches a side of the box or a previously placed balloon. You may not use a point that is outside the box or inside a previously placed balloon. However, you may use the points in any order you like, and you need not use every point. Your objective is to place balloons in the box in an order that maximizes the total volume occupied by the balloons.</p><p>You are required to calculate the volume within the box that is not enclosed by the balloons.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of several test cases. The first line of each test case contains a single integer n that indicates the number of points in the set (1 <= n<= 6). The second line contains three integers
that represent the (x, y, z) integer coordinates of a corner of the box, and the third line contains the
(x, y, z) integer coordinates of the opposite corner of the box. The next n lines of the test case contain
three integers each, representing the (x, y, z) coordinates of the points in the set. The box has
non-zero length in each dimension and its sides are parallel to the coordinate axes. </p>

<p>The input is terminated by the number zero on a line by itself. </p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case print one line of output consisting of the test case number followed by the volume
of the box not occupied by balloons. Round the volume to the nearest integer. Follow the format in the
sample output given below. </p>

<p>Place a blank line after the output of each test case. </p>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2 
0 0 0 
10 10 10 
3 3 3 
7 7 7 
0 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Box 1: 774 
</PRE>

<P>

______________________________________________________
2475||||||false||||||
<P>Phil Oracle has a unique ability that makes him indispensable at the National Spying Agency. His colleagues can bring him any new binary code and he can tell them immediately whether the code is uniquely decodable or not. A code is the assignment of a unique sequence of characters (a codeword) to each character in an alphabet. A binary code is one in which the codewords contain only zeroes and ones. For example, here are two possible binary codes for the alphabet {a,c,j,l,p,s,v}.<p><table align=center cellspacing=0 border=1 cellpadding=3><tr><td>&nbsp;</td><td>Code 1</td><td>Code 2</td></tr><tr><td>a</td><td>1</td><td>010</td></tr><tr><td>c</td><td>01</td><td>01</td></tr><tr><td>j</td><td>001</td><td>001</td></tr><tr><td>l</td><td>0001</td><td>10</td></tr><tr><td>p</td><td>00001</td><td>0</td></tr><tr><td>s</td><td>000001</td><td>1</td></tr><tr><td>v</td><td>0000001</td><td>101</td></tr></table><p>The encoding of a string of characters from an alphabet (the cleartext) is the concatenation of the codewords corresponding to the characters of the cleartext, in order, from left to right. A code is uniquely decodable if the encoding of every possible cleartext using that code is unique. In the example above, Code 1 is uniquely decodable, but Code 2 is not. For example, the encodings of the cleartexts "pascal" and "java" are both 001010101010. Even shorter encodings that are not uniquely decodable are 01 and 10.</p><p>While the agency is very proud of Phil, he unfortunately gives only "yes" or "no" answers. Some members of the agency would prefer more tangible proof, especially in the case of codes that are not uniquely decodable. For this problem you will deal only with codes that are not uniquely decodable. For each of these codes you must determine the single encoding having the minimum length (measured in bits) that is ambiguous because it can result from encoding each of two or more different cleartexts. In the case of a tie, choose the encoding which comes first lexicographically.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>One or more codes are to be tested. The input for each code begins with an integer m, (1<= m<=20),
 on a line by itself, where m is the number of binary codewords in the code. This is followed by m lines
 each containing one binary codeword string, with optional leading and trailing whitespace. No codeword 
will contain more than 20 bits. </p>

<p>The input is terminated by the number zero on a line by itself.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each code, display the sequential code number (starting with 1), the length of the shortest encoding
 that is not uniquely decodable, and the shortest encoding itself, with ties broken as previously described.
 The encoding must be displayed with 20 bits on each line except the last, which may contain fewer than 20 
bits. Place a blank line after the output for each code. Use the format shown in the samples below. </p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 
0 
01 
10 
5 
0110 
00 
111 
001100 
110 
5 
1 
001 
0001 
00000000000000000001
10000000000000000000 
0 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Code 1: 3 bits 
010
 
Code 2: 9 bits 
001100110 
 
Code 3: 21 bits 
10000000000000000000 
1 
</PRE>

<P>

______________________________________________________
2476||||||false||||||
<P>In this problem, you will compute how much food you need to purchase for a trip across the desert on foot.</p><p>At your starting location, you can purchase food at the general store and you can collect an unlimited amount of free water. The desert may contain oases at various locations. At each oasis, you can collect as much water as you like and you can store food for later use, but you cannot purchase any additional food. You can also store food for later use at the starting location. You will be given the coordinates of the starting location, all the oases, and your destination in a two-dimensional coordinate system where the unit distance is one mile.</p><p>For each mile that you walk, you must consume one unit of food and one unit of water. Assume that these supplies are consumed continuously, so if you walk for a partial mile you will consume partial units of food and water. You are not able to walk at all unless you have supplies of both food and water. You must consume the supplies while you are walking, not while you are resting at an oasis. Of course, there is a limit to the total amount of food and water that you can carry. This limit is expressed as a carrying capacity in total units. At no time can the sum of the food units and the water units that you are carrying exceed this capacity.</p><p>You must decide how much food you need to purchase at the starting location in order to make it to the destination. You need not have any food or water left when you arrive at the destination. Since the general store sells food only in whole units and has only one million food units available, the amount of food you should buy will be an integer greater than zero and less than or equal to one million.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of input in each trial data set contains n (2 <= n <= 20), which is the total number
 of significant locations in the desert, followed by an integer that is your total carrying capacity in
 units of food and water. The next n lines contain pairs of integers that represent the coordinates of 
the n significant locations. The first significant location is the starting point, where your food supply
 must be purchased; the last significant location is the destination; and the intervening significant 
locations (if any) are oases. You need not visit any oasis unless you find it helpful in reaching your 
destination, and you need not visit the oases in any particular order. </p>

<p>The input is terminated by a pair of zeroes. </p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each trial, print the trial number followed by an integer that represents the number of units of 
food needed for your journey. Use the format shown in the example. If you cannot make it to the destination 
under the given conditions, print the trial number followed by the word "Impossible." </p>

<p>Place a blank line after the output of each test case.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 100 
10 -20 
-10 5 
30 15 
15 35 
2 100 
0 0 
100 100 
0 0 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Trial 1: 136 units of food

Trial 2: Impossible 
</PRE>

<P>

______________________________________________________
2477||||||false||||||
<P>Millions of years ago massive fields of ice carved deep grooves in the mountains of Norway. The sea filled these grooves with water. The Norwegian people call them fjords. This landscape of mountains and water is beautiful, but it makes traveling difficult. The usual scheme is: drive some kilometers, wait for a ferry, cross a fjord with the ferry, drive some more kilometers, and so on until the destination has been reached. To reach a destination as early as possible, most people have the following strategy: drive as fast as allowed (the maximum speed is 80 km/h) to the next ferry, and wait until it goes. Repeat until the destination has been reached.</p><p>Since driving fast requires more fuel than driving slow, this strategy is both expensive and harmful to the environment. The new generation of cruise control systems is designed to help. Given the route you want to go, these systems will gather information about the ferries involved, calculate the earliest possible time of arrival at the final destination, and calculate a driving scheme that avoids driving faster than needed. The systems will calculate your road speed so that you board the next ferry the moment it leaves.</p><p>Given a route (a sequence of road-pieces and crossings with ferries), you must write a program to calculate the minimal time it takes to complete this route. Moreover, your program must find a driving scheme such that the maximal driving speed at any point during the trip is as small as possible.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains one or more test cases. Each test case describes a route. A route consists of several sections, each section being either a piece of road or a crossing. The first line in the description contains a single number s (s > 0), which is the number of sections in the route. The next s lines contain the descriptions of the sections. Every line describing a section starts with two names: the place of departure and the place of arrival, followed by either the word road or the word ferry indicating what kind of section it is. If the section is a road, its length (a positive integer) is given in km. For example: </p>
 
<blockquote><p>Dryna Solholmen road 32 </p></blockquote>
 
<p>Lines describing ferry sections have more information. Following the word ferry, the duration of the ferry crossing, in minutes (a positive integer) is given. This is followed by the frequency f (f > 0) of the ferry, that is, the number of times the ferry departs in a single hour. The next f integers give the departure times of the ferry, in ascending order. For example: </p>
 
<blockquote><p>Manhiller Fodnes ferry 20 2 15 35 </p></blockquote>
 
<p>The ferry travels from Manhiller to Fodnes in 20 minutes, and it leaves twice an hour (on 0h15, 0h35, 1h15, 1h35,). The beginning of the entire trip always starts at a full hour. The sections in a route are consecutive, that is, if a section goes from A to B then the next section starts at B. Every route in the input can be traveled in no more than 10 hours. </p>
 
<p>The input is terminated by the number zero on a line by itself. </p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>Output for each test case is a single line containing three items. The first item is the test case number.
 The second is the total travel time for an optimal scheme in the form hh:mm:ss. The third item is the maximal
 road speed in an optimal scheme rounded to two digits to the right of the decimal point. </p>

<p>Place a blank line after the output of each test case.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 
Bygd Bomvei road 7 
2 
Ferje Overfarten ferry 20 2 5 25 Overfarten Havneby ferry 30 3 10 30 50 
5 
Begynnelse Brygge road 30 
Brygge Bestemmelse ferry 15 4 10 25 40 55 Bestemmelse Veiskillet road 20 
Veiskillet Grusvei road 25 
Grusvei Slutt ferry 50 1 10 
0 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Test Case 1: 00:05:15 80.00 

Test Case 2: 01:00:00 0.00 

Test Case 3: 03:00:00 45.00 

</PRE>

<P>

______________________________________________________
2478||||||false||||||
<p>The company Pacific Island Net (PIN) has identified several small island groups in the Pacific that do not have a fast internet connection. PIN plans to tap this potential market by offering internet service to the island inhabitants. Each groups of islands already has a deep-sea cable that connects the main island to the closest internet hub on the mainland (be it America, Australia or Asia). All that remains to be done is to connect the islands in a group to each other. You must write a program to help them determine a connection procedure.</p><p align=center><img src="http://livearchive.onlinejudge.org/external/24/p2478a.jpg><p>For each island, you are given the position of its router and the number of island inhabitants. In the figure, the dark dots are the routers and the numbers are the numbers of inhabitants. PIN will build connections between pairs of routers such that every router has a path to the main island. PIN has decided to build the network such that the total amount of cable used is minimal. Under this restriction, there may be several optimal networks. However, it does not matter to PIN which of the optimal networks is built.</p><p>PIN is interested in the average time required for new customers to access the internet, based on the assumption that construction on all cable links in the network begins at the same time. Cable links can be constructed at a rate of one kilometer of cable per day. As a result, shorter cable links are completed before the longer links. An island will have internet access as soon as there is a path from the island to the main island along completed cable links. If mi is the number of inhabitants of the ith island and ti is the time when the island is connected to the internet, then the average connection time is:</p><p align=center><img src="http://livearchive.onlinejudge.org/external/24/p2478a.jpg><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of several descriptions of groups of islands. The first line of each description contains a single positive integer n, the number of islands in the group (n <= 50). Each of the next n lines has three 
integers x<sub>i</sub>, y<sub>i</sub>, m<sub>i</sub>, giving the position of the router (x<sub>i</sub>, y<sub>i</sub>)
and number of inhabitants m<sub>i</sub> (m<sub>i</sub> > 0) of the 
islands. Coordinates are measured in kilometers. The first island in this sequence is the main island. </p>

<p>The input is terminated by the number zero on a line by itself. </p>






<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each group of islands in the input, output the sequence number of the group and the average number
 of days until the inhabitants are connected to the internet. The number of days should have two digits to
 the right of the decimal point. Use the output format in the sample given below. </p>

<p>Place a blank line after the output of each test case. </p>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
7 
11 12 2500 
14 17 1500 
9 9 750 
7 15 600 
19 16 500 
8 18 400 
15 21 250 
0 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Island Group: 1 Average 3.20 
</PRE>

<P>

______________________________________________________
2479||||||false||||||
<p>Prospecting for new sources of oil has become a high-technology industry. With improved drilling technology it has become economically viable to seek out ever smaller and harder to reach deposits of oil. However, using exploratory drilling to locate these deposits is not cost-efficient, so researchers have developed methods to detect oil indirectly.</p><p>One such method to detect oil is sonar, which uses reflected sound waves to locate caves in underground rock formations. Determining how much oil can be contained in such a cave is a difficult problem.</p><p align=center><img src="http://livearchive.onlinejudge.org/external/24/p2479.jpg></p><p>In this problem, you will be given some cross-sections of underground caves, represented by polygons such as the ones shown in the figure. Some of the points bounding the polygon may be holes through which oil can seep out into the surrounding rock (represented by black circles in the figure). Given the polygonal shape of the cave and the positions of the holes, you must compute the maximum amount of oil that could be in the cave (shown as gray shaded areas in the figure). This amount is limited by the fact that, in any connected body of oil, the oil level can never be above a hole, since it would drain into the surrounding rock instead.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input contains several cave descriptions, each in the form of a polygon that specifies a cross-section of a cave. The first line of each description contains a single integer n, representing the number of points on the polygon (3 <=  n <= 100). </p>

<p>Each of the following n lines contains three integers x<sub>i</sub>, y<sub>i</sub>, h<sub>i</sub>. The values (x<sub>i</sub>, y<sub>i</sub>) give
 the positions of the points on the boundary of the polygon in counterclockwise order. The 
polygon is simple-that is, it does not cross or touch itself. The value of h<sub>i</sub> is equal to 
1 if the point is a hole through which oil can seep out, and 0 otherwise. The "upward"
 direction in each case is the positive y-axis. </p>

<p>The input is terminated by a zero on a line by itself. </p>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>For each cave description, print its sequence number (starting with 1) followed by its oil capacity.
 Approximate the oil capacity by the area within the given cross-section that may contain oil, rounded 
to the nearest integer. Use the format in the example output given below. </p>

<p>Place a blank line after each test case. </p>





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 
10 0 0 
5 10 1 
0 20 0 
-10 0 0 
11 
0 6 0 
1 5 1 
6 0 0 
10 4 0 
8 6 0 
6 4 0 
4 6 0 
8 10 0 
10 8 0 
12 10 0 
8 14 1 
0 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Cave 1: Oil capacity = 150 

Cave 2: Oil capacity = 27 

</PRE>

<P>

______________________________________________________
2480||||||false||||||
<p>A partition of a rectangle is a subdivision of the rectangle into a set of smaller, non-overlapping 
sub-rectangles. Figure 1 shows several examples of partitions. </p>

<p align=center><img src="http://livearchive.onlinejudge.org/external/24/p2480a.jpg></p>

<p>Figure 2 shows three equal sized rectangles, partitioned into sub-rectangles. Partition B is
 obtained from partition A by partitioning two of the sub-rectangles of A. Generally, if a partition
 B is obtained from A by partitioning one or more of its sub-rectangles, we say that B is finer than
 A, or that A is coarser than B. This relation is partial: partition C is neither coarser nor finer
 than A or B. </p>

<p align=center><img src="http://livearchive.onlinejudge.org/external/24/p2480a.jpg></p>

<p>Given two partitions D and E of the same rectangle, infinitely many partitions exist that are finer 
than both D and E. In Figure 3 both F and G are finer than D and E. Among the partitions that are finer
 than both D and E, a unique one exists that is coarsest. This partition is called the infimum of D 
and E. In Figure 3, partition F is the infimum of D and E. </p>
 
<p align=center><img src="http://livearchive.onlinejudge.org/external/24/p2480a.jpg></p>

<p>In Figure 4, both H and J are coarser than D and E. Here J is the finest partition that is coarser
 than D and E. Then J is the supremum of D and E. </p>

<p align=center><img src="http://livearchive.onlinejudge.org/external/24/p2480a.jpg></p>

<p>Write a program that, given two partitions of the same rectangle, finds the infimum and the 
supremum of these partitions. </p>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input file contains one or more test cases. The first line of each test case gives the
 width w and height h of the rectangle (0 < w, h < 21). In the next h+1 lines the two partitions
 are given, as in the sample. Each of these lines contains 4*w+3 characters. The first 2*w+1 
of these belong to the first partition; the last 2*w+1 of these belong to the second partition.
 A space separates the two partitions. Horizontal lines are created using underscores _, 
vertical lines using |. </p>

<p>The input is terminated by a pair of zeroes. </p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For every case in the input file the output contains a single line containing the case number 
(in the format shown in the sample), followed by the infimum and the supremum of the two partitions,
 using the same format as the input. </p>

<p>Place a blank line after the output of each test case.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 3 
 _ _ _ _   _ _ _ _ 
|_ _ _ _| |_|_ _ _| 
| | | | | |       |     
|_ _|_ _| |_ _ _ _| 
3 4 
 _ _ _   _ _ _ 
| |   | | |   |
| |   | |_|_ _|
|_|_ _| |   | |
|_ _|_| |_ _|_| 
0 0 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1: 
 _ _ _ _   _ _ _ _ 
|_|_ _ _| |_ _ _ _| 
|   |   | |       |    
|_ _|_ _| |_ _ _ _| 
 
Case 2: 
 _ _ _   _ _ _ 
| |   | |     | 
|_|_ _| |     | 
|_|_|_| |     | 
|_ _|_| |_ _ _| 
</PRE>

<P>

______________________________________________________
2481||||||false||||||
<P>Your younger brother has an assignment and needs some help. His teacher gave him a sequence of numbers to be sorted in ascending order. During the sorting process, the places of two numbers can be interchanged. Each interchange has a cost, which is the sum of the two numbers involved.</p><p>You must write a program that determines the minimal cost to sort the sequence of numbers.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains several test cases. Each test case consists of two lines. The first line contains a single integer n (n >1), representing the number of items to be sorted. The second line contains n different integers (each positive and less than 1000), which are the numbers to be sorted.</p><p>The input is terminated by a zero on a line by itself.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case, the output is a single line containing the test case number and the minimal cost of sorting the numbers in the test case.</p><p>Place a blank line after the output of each test case.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 
3 2 1 
4 
8 1 2 4 
5 
1 8 9 7 6 
6 
8 4 5 3 2 7 
0 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1: 4 

Case 2: 17 

Case 3: 41 

Case 4: 34 

</PRE><P>
______________________________________________________
2482||||||false||||||
<P>One method used to measure the length of a path is to roll a wheel (similar to a bicycle wheel) along the
 path. If we know the radius of the wheel and the number of revolutions it makes as it travels along the path,
 the length of the path can be computed. 

<p>This method works well if the path is smooth. But when there are curbs or other abrupt elevation changes
 in the path, the path distance may not be accurately determined, because the wheel may rotate around a point
 (like the edge of a curb), or the wheel may roll along a vertical surface. In this problem you are to 
determine the distance moved by the center of such a wheel as it travels along a path that includes only 
horizontal and vertical surfaces. 

<p>To measure a path, the wheel is placed with its center directly above the origin of the path. The wheel
 is then moved forward over the path as far as possible, always remaining in contact with the surface,
 ending with its center directly above the end of the path. 

<p>Consider the path shown in the illustration on the left below, and assume the wheel has a radius of 2. 
The path begins and ends with horizontal segments of length 2 at the same elevation. Between these there
 is a horizontal segment of length 2.828427 at 2 units below the elevation of the other two horizontal
 segments. To measure this path, the wheel is placed at position 1. It then moves horizontally to position
 2, rotates 45 degrees to position 3, rotates another 45 degrees to position 4, and finally rolls
 horizontally to position 5. The center of the wheel moved a distance of 7.1416, not 6.8284. 

<p>In the illustration on the right below, the path begins and ends with horizontal segments of length 3,
 separated by a 7-unit wide region placed 7 units below the surface. If the wheel has a radius of 1, then
 it will move 26.142 units before reaching the end of the path. 

<p align=center><img src="http://livearchive.onlinejudge.org/external/24/p2482.jpg>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>For this problem there are multiple input cases. Each case begins with a positive real number
 specifying the radius of the wheel and an integer n, which is at least 1 but not greater than 50.
 There then follow n pairs of real numbers. The first number in each pair gives the horizontal
 distance along the path to the next vertical surface. The second number in each pair gives the
 signed change in the elevation of the path at the vertical surface, with positive numbers representing
 an increase in elevation. The vertical surfaces are always perpendicular to the horizontal surfaces. 
The elevation change in the nth pair will always be 0. 


<p>The input is terminated by a pair of zeroes. 


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each case, display the case number and the distance moved by the center of the wheel with 3
 digits to the right of the decimal point. 

<p>Place a blank line after the output of each test case.




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2.0 3 
2.0 -2.0 
2.828427 2.0 
2.0 0.0 
1.0 3 
3.0 -7.0 
7.0 7.0 
3.0 0.0 
1.0 3 
1.0 -4.0 
2.0 4.0 
1.0 0.0 
0 0 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1: Distance = 7.142
 
Case 2: Distance = 26.142
 
Case 3: Distance = 5.142
</PRE>

<P>

______________________________________________________
2483||||||false||||||
<P>The government of Acmonia has decided that henceforth all house numbers should be given in binary instead of decimal notation. Householders will now have to purchase <TT>0</TT> and <TT>1</TT> binary digits to display on their houses. For reasons much too complicated to discuss here it seems that the cost to a householder of a <TT>0</TT> binary digit and of a <TT>1</TT> binary digit may well differ. Your task is to write a program which will report to householders the cost of their new numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input text consists of a number of sets of problems. The first line of a set is of the form `<TT>COST <SPAN CLASS="MATH"><I>a</I></SPAN> <SPAN CLASS="MATH"><I>b</I></SPAN></TT>'. For that set:<P><UL><LI><SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are both integers, <SPAN CLASS="MATH">0 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2483img1.gif ALT="$ \leq$"> <I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2483img1.gif ALT="$ \leq$"> 1000</SPAN>, </LI><LI>a <TT>0</TT> binary digit costs <SPAN CLASS="MATH"><I>a</I></SPAN> dollars, </LI><LI>a <TT>1</TT> binary digit costs <SPAN CLASS="MATH"><I>b</I></SPAN> dollars. </LI></UL><P>The first line is followed by one or more lines each consisting of a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>.<P><UL><LI><SPAN CLASS="MATH">0 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2483img1.gif ALT="$ \leq$"> <I>n</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2483img1.gif ALT="$ \leq$"> 2000000</SPAN>, </LI><LI><SPAN CLASS="MATH"><I>n</I></SPAN> indicates a house number, expressed as a standard decimal number. </LI></UL><P>A single <TT>#</TT> on a line indicates the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each set of output data must begin with a single output line showing consisting of the word `<TT>Set</TT>', followed by a space (` '), and the current set number (counted from 1). This is followed by the cost of the binary digits for each house number, each cost being displayed as a decimal number on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
COST 1 1
1
34
15
COST 1 10
1
34
15
COST 10 1
1
34
15
COST 0 5
1
16
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Set 1
1
6
4
Set 2
10
24
40
Set 3
1
42
4
Set 4
5
5
</PRE><P>
______________________________________________________
2484||||||false||||||
<P>For the purposes of this problem, we will assume that every page in an Acmonian book is numbered sequentially, and that the first page is numbered 1.<P>How many digits would you need to use to number the pages of a 10 page book? Pages 1 to 9 would require 1 digit each (total 9), and page 10 would require 2 digits. This makes 11 digits. Similarly, a book of 34 pages would require 59 digits.<P>Can we work backwards? If you are told that a book requires 13 digits to number its pages, can you work out how many pages the book has? I hope so, because that is all you have to do for this problem. Each line in the input file represents the number of digits used in numbering a book. Your answer will be the number of pages the book has. If the number supplied cannot possibly be valid, your answer should be `<TT>Impossible!</TT>'. Beware that Acmonian books can be quite large, and the number of digits required for a given Acmonian book can reach 2000000000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each line in the input file contains a single integer, between 1 and 2000000000, representing a number of digits used in numbering the pages of a book. A single <TT>#</TT> on a line indicates the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Output for each input number must be on a single line. If the input value is valid, output the number of pages in the book. Otherwise, output `<TT>Impossible!</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
11
13
59
60
1999999998
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
10
11
34
Impossible!
234567900
</PRE><P>
______________________________________________________
2485||||||false||||||
<P>The English alphabet consists of 26 letters. Five of these (<TT>a</TT>, <TT>e</TT>, <TT>i</TT>, <TT>o</TT> and <TT>u</TT>) are classified as vowels, the remaining 21 as consonants. Almost every English word contains at least one vowel (<EM>rhythm</EM> is one of the few exceptions).<P>In this problem you will be given a number of pieces of English text. Your task is to determine the frequency of each vowel that is found in the piece, and to display the answers sorted by frequency, highest frequency first. Where two vowels are equally frequent, they are to be displayed in alphabetical order.<P>As you can see from the examples below, upper case and lower case letters are considered to be the same letter in this problem. Use lower case in your output. As you can see from the second example, a frequency of zero must still be displayed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each piece of text to be analysed is on a separate line of the input file. Each line has at most 200 characters. A single `<TT>#</TT>' on a line indicates the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output for a problem must be on a single line. Each vowel must be output in lower case, followed by a colon, followed by the frequency of that vowel. There must be one space before the next letter, and a dot at the end.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
This piece of text was written in the city of Auckland.
ACM Programming Contest.
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
e:5 i:5 a:3 o:2 u:1.
a:2 o:2 e:1 i:1 u:0.
</PRE><P>
______________________________________________________
2486||||||false||||||
<P>The Acme company has an hierarchical organization, i.e., a tree-like structure with the <I CLASS="sans">CEO</I> at the root and each other employee a child node of his/her manager. In addition to his/her position in the organization, each employee has a unique employee id (a string with no particular meaning) and a sociability measure (an integer number).<P>The <I CLASS="sans">CEO</I> of the Acme company wants to organize a party for their employees. To make the party agreeable the <I CLASS="sans">CEO</I> wants to make invitations such that:<P><UL><LI>the <I CLASS="sans">CEO</I> attends the party, </LI><LI>an employee can be invited only if his/her direct manager is absent, </LI><LI>the sum of the sociability measures of all who attend is a maximum. </LI></UL><P>Write a program that will determine the maximum sociability sum under these conditions for a given company structure.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input text consists of a number of company structures. The first line of a set is a title giving the company name. The company name may contain any printable non-space characters; and embedded spaces are also permitted. A single `<TT>#</TT>' on a line indicates the end of input.<P>The <EM>name</EM> line is followed by one line consisting of a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2486img1.gif ALT="$ \leq$"> <I>n</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2486img1.gif ALT="$ \leq$"> 100000</SPAN>, that indicates the number of employees in this company. This line is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> further lines, one line for each employee.<P>Each <EM>employee</EM> line consists of three items separated by single spaces:<P><UL><LI>an <SPAN CLASS="MATH"><I>employeeid</I></SPAN>, which is a sequence of 1 to 10 letters and/or digits, </LI><LI>a <SPAN CLASS="MATH"><I>sociabilitymeasure</I></SPAN>, which is an integer number between 0 and 100, </LI><LI>a <SPAN CLASS="MATH"><I>managerid</I></SPAN>, which is the employee id of the current employee's direct manager, or the character `<TT>-</TT>' for the <I CLASS="sans">CEO</I>. </LI></UL><P>The <SPAN CLASS="MATH"><I>employeeid</I></SPAN> is a unique identifier within the company. The order in which the employees appear is arbitrary, i.e., not related to their employee or manager ids.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There is a single output line for each company. Each output line consists of the company title, followed by a colon and a space, and finally the maximum attainable sociability measure under the above conditions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ACME 1
1
ID0 10 -
ACME II
2
ID0 10 -
ID1 21 ID0
ACME, INC.
8
ID4 20 ID3
ID5 1 ID4
ID6 1 ID3
ID7 10 ID6
ID0 10 -
ID1 21 ID0
ID2 10 ID1
ID3 11 ID0
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ACME 1: 10
ACME II: 10
ACME, INC.: 50
</PRE><P>
______________________________________________________
2487||||||false||||||
<P>Every day on his way home, little Billy passes by his great aunt Clara Mitchum's house. Generally he stops in for a chat with the great ACM (as he lovingly refers to her) and sometimes he asks for some lollies. When he does, she generally gives him some, but then adds <EM>now don't be asking for any more for another <SPAN CLASS="MATH"><I>N</I></SPAN> days</EM> where <SPAN CLASS="MATH"><I>N</I></SPAN> is some positive integer. If <SPAN CLASS="MATH"><I>N</I> = 1</SPAN> that means he can ask for some on the next day, but for example if it is April 6 and <SPAN CLASS="MATH"><I>N</I> = 4</SPAN> then he must wait until April 10 or later before asking for more lollies.<P>One day Billy happened to catch sight of the great ACM's calendar, and noted that each day was marked with two integers. He also noted that the first of these referred to the number of lollies the great ACM would give him on a particular day, and the second to the delay that would then be required before making another request. He copied down as much of the information as he could, and has passed it to you to analyse. His objective, of course, is to get as many lollies as he can.<P>Your task is to write a program which will report the total number of lollies that can be obtained by Billy, and provide a schedule for obtaining that amount. In the event that there are two or more ways to obtain the maximum number of lollies, Billy will choose the one where his first collection is as late as possible, and among all collections with that first date, his second collection is as late as possible, and so on.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input text consists of a number of sets of unrelated problems. The first line of a set is a problem title consisting of a string of 1 to 20 letters. A single `<TT>#</TT>' on a line indicates the end of input.<P>The <EM>title</EM> line is followed by a sequence of <EM>day</EM> lines. Each problem set contains between 1 and 100 days, including the limits. In the given order, the first <EM>day</EM> line corresponds to day number 1, the second line to day number 2, the <SPAN CLASS="MATH"><I>n</I></SPAN>-th line to day number <SPAN CLASS="MATH"><I>n</I></SPAN>. Each <EM>day</EM> line consists of two integers separated by a single space:<P><UL><LI>an integer <SPAN CLASS="MATH"><I>L</I></SPAN>, which is the number of lollies available on that day ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \leq$"> <I>L</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \leq$"> 100</SPAN>), </LI><LI>an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, which is the associated delay ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \leq$"> <I>N</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \leq$"> 100</SPAN>). </LI></UL><P>Conventionally, a delay <SPAN CLASS="MATH"><I>N</I></SPAN> pointing to a day beyond the end of the current problem refers to a day with zero lollies and zero further delays ( <SPAN CLASS="MATH"><I>L</I> = 0, <I>N</I> = 0</SPAN>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each report must follow the following format (use single spaces for spacing):<P><P><BR><TT>In <SPAN CLASS="MATH"><I>problem</I><IMG WIDTH="43" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \_title$"></SPAN> <SPAN CLASS="MATH"><I>total</I><IMG WIDTH="70" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \_amount$"></SPAN> <SPAN CLASS="MATH"><I>lollies</I></SPAN> can be obtained:</TT><P><TT>On day <SPAN CLASS="MATH"><I>day</I><IMG WIDTH="70" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \_number$"></SPAN> collect <SPAN CLASS="MATH"><I>day</I><IMG WIDTH="70" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \_amount$"></SPAN> <SPAN CLASS="MATH"><I>lollies</I></SPAN>.</TT><P><TT>On day <SPAN CLASS="MATH"><I>day</I><IMG WIDTH="70" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \_number$"></SPAN> collect <SPAN CLASS="MATH"><I>day</I><IMG WIDTH="70" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \_amount$"></SPAN> <SPAN CLASS="MATH"><I>lollies</I></SPAN>.</TT><P>...<P><P><BR>In this notation, <SPAN CLASS="MATH"><I>problem</I><IMG WIDTH="43" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \_title$"></SPAN> represents the actual problem title, <SPAN CLASS="MATH"><I>total</I><IMG WIDTH="70" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \_amount$"></SPAN>, <SPAN CLASS="MATH"><I>day</I><IMG WIDTH="70" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \_amount$"></SPAN>, and <SPAN CLASS="MATH"><I>day</I><IMG WIDTH="70" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2487img1.gif ALT="$ \_number$"></SPAN> are numbers with self-described meaning, and <SPAN CLASS="MATH"><I>lollies</I></SPAN> stands for either `<TT>lolly</TT>' or `<TT>lollies</TT>', as required by the context (the singular and plural forms must be used appropriately). Days must be given in increasing sequence numbers. Each group report should be separated from the next by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
January
1 1
2 2
3 3
February
10 3
7 1
5 2
1 1
March
2 3
1 1
3 7
2 7
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
In January 4 lollies can be obtained:
On day 1 collect 1 lolly.
On day 3 collect 3 lollies.

In February 12 lollies can be obtained:
On day 2 collect 7 lollies.
On day 3 collect 5 lollies.

In March 4 lollies can be obtained:
On day 2 collect 1 lolly.
On day 3 collect 3 lollies.
</PRE><P>
______________________________________________________
2488||||||false||||||
<P>You have been placed somewhere in a maze and you wish to escape by the shortest possible route. Fortunately you have been given a map of the maze. Before setting off, you wish to calculate the distance you need to travel. Your task is to write a program that will calculate the shortest distance to leave the maze. Note that there may be more than one exit and the specified start position could be at any location within the maze.<P>The maze is set on a grid that has <SPAN CLASS="MATH"><I>M</I></SPAN> columns and <SPAN CLASS="MATH"><I>N</I></SPAN> rows, with <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2488img1.gif ALT="$ \leq$"> <I>M</I>, <I>N</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/2488img1.gif ALT="$ \leq$"> 100</SPAN>. Some squares of this grid have impenetrable walls of negligible thickness between them (or on their outside border). You may move from any square to a horizontally or vertically adjacent square (possibly outside the maze, thus escaping) provided that there is no wall between them. Each single move between squares adds 1 meter to the distance travelled.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input involves a series of scenarios. Within each of the scenarios the first line has the size of the maze. This is given as two numbers <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>. Then the maze is drawn on <SPAN CLASS="MATH">2*<I>N</I> + 1</SPAN> lines and <SPAN CLASS="MATH">2*<I>M</I> + 1</SPAN> columns using the printable characters `<TT>-</TT>', `<TT>|</TT>', `<TT>+</TT>', `<TT>.</TT>', ` ' (space), and `<TT>s</TT>':<P><UL><LI>`<TT>|</TT>' is used for <EM>vertical</EM> walls, </LI><LI>`<TT>-</TT>' is used for <EM>horizontal</EM> walls, </LI><LI>`<TT>+</TT>' is used to indicate boundaries between rows and columns (there are always <SPAN CLASS="MATH">(<I>N</I> + 1)*(<I>M</I> + 1)</SPAN> of these), </LI><LI>`<TT>.</TT>' is used for wall openings, </LI><LI>` ' (space) is used for empty squares, </LI><LI>`<TT>s</TT>' is used to show your start location (there is exactly one `<TT>s</TT>'). </LI></UL><P>A line with `<TT>0 0</TT>' indicates the end of the scenarios.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output a single line for each of the scenarios. This line should contain either `<TT>Maze <SPAN CLASS="MATH"><I>i</I></SPAN>: <SPAN CLASS="MATH"><I>d</I></SPAN></TT>' or `<TT>Maze <SPAN CLASS="MATH"><I>i</I></SPAN>: No escape!</TT>', where <SPAN CLASS="MATH"><I>i</I></SPAN> is the scenario number (counting from 1) and <SPAN CLASS="MATH"><I>d</I></SPAN> is the minimum distance (in meters) needed to escape (use single spaces for spacing).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1
+-+
|s.
+-+
3 2
+-+-+.+
| .s| |
+-+.+-+
| . . .
+-+-+-+
5 6
+-+-+-+-+-+
| . . . . |
+-+-+.+-+-+
| |s. . . |
+.+-+-+-+.+
| | . . . |
+.+-+-+-+.+
| | . . . |
+.+-+.+-+.+
| . . | | |
+-+-+.+.+.+
. . . | . |
+-+-+-+-+-+
3 2
+-+-+.+
| .s| |
+-+-+-+
| . . .
+-+-+-+
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Maze 1: 1
Maze 2: 3
Maze 3: 12
Maze 4: No escape!
</PRE><P>
______________________________________________________
2489||||||false||||||
<P>We have a remote village with <SPAN CLASS="MATH"><I>n</I>&le;</SPAN>20 houses ( <SPAN CLASS="MATH"><I>h</I><SUB>0</SUB>, <I>h</I><SUB>1</SUB>, <I>h</I><SUB>2</SUB>,..., <I>h</I><SUB>n - 1</SUB></SPAN>) and several secure telephone lines linking neighbouring houses (there is exactly one line between each pair of neighbouring houses). For any pair of houses <SPAN CLASS="MATH"><I>h</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>h</I><SUB>j</SUB></SPAN> there is at least one path of telephone lines connecting them (this can be viewed as an undirected connected g raph with houses as vertices and lines as edges).<P>Gossip can travel over telephone lines. Each house can call at most one neighbour house at a time. Calls may begin at the beginning of each hour (e.g., 9 am, 1 pm, 6 pm, etc), and last for exactly one hour. The local telephone company charges a fortune for each call, but has a quirk that any number of calls can be made in parallel at the same price as any single call.<P>Given this scenario, we want to find the minimum total price (minimum number of used hours) to disseminate some gossip from house <SPAN CLASS="MATH"><I>h</I><SUB>0</SUB></SPAN> to all other houses.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input involves a series of scenarios. Within each scenario the first line has an integer number <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of houses. This first line is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> other lines, one for each house, in the order <SPAN CLASS="MATH"><I>h</I><SUB>0</SUB>, <I>h</I><SUB>1</SUB>, <I>h</I><SUB>2</SUB>,..., <I>h</I><SUB>n - 1</SUB></SPAN>. Each <EM>house</EM> line contains a list of indices of its neighbouring houses (in no particular order), separated by single spaces.<P>The series is terminated by a scenario with <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>, which isn't processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output must be `<TT>Village <SPAN CLASS="MATH"><I>s</I></SPAN>: <SPAN CLASS="MATH"><I>p</I></SPAN></TT>', where <SPAN CLASS="MATH"><I>s</I></SPAN> is the scenario sequence number starting at 1 and <SPAN CLASS="MATH"><I>p</I></SPAN> is the answer for each input village (use single spaces as separators, i.e., one space after the word `<TT>Village</TT>' and another space after the colon `<TT>:</TT>').<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
1 2
0 3
3 0
1 2
7
1 2 3
0 2
0 1 3 4
0 2
6 2 5
4 6
4 5
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Village 1: 2
Village 2: 4
</PRE><P>
______________________________________________________
2490||||||false||||||
<P>Consider a set of <SPAN CLASS="MATH"><I>C</I></SPAN> clocks. Each clock has a single hour hand that can only point to one of the following hours: 3, 6, 9 or 12. These clocks can be moved in <SPAN CLASS="MATH"><I>B</I></SPAN> different ways called block moves. Each block move applies to a specified subset of clocks, and consists of moving the hand of each clock in the subset clockwise by 3 hours. Your task is to find a minimal sequence of block moves that sets all clocks to 12 hours. Multiple repetitions of a single block move are allowed. If two solutions of the same length exist, then give the lesser one in dictionary order. If there is no solution then write `<TT>No solution.</TT>'. If no move is required then write `<TT>No moves required.</TT>'.<P>For example, consider a set of 9 clocks (<SPAN CLASS="MATH"><I>C</I> = 9</SPAN>) with initial positions as shown in the following table, and 9 available block moves (<SPAN CLASS="MATH"><I>B</I> = 9</SPAN>), where ticks indicate the clocks affected by each block move:<p align=center><img src="http://livearchive.onlinejudge.org/external/24/p2490a.gif><P>With clocks in the initial positions shown in the above table, applying block move 3 would result in the following updated clock positions (clocks 0, 3, and 6 have been moved clockwise by 3 hours):<p align=center><img src="http://livearchive.onlinejudge.org/external/24/p2490a.gif><P>Further applying block moves 4, 7, and 8 would result in all clocks being set to 12 hours. The move sequence 3, 4, 7, 8 is actually the required solution in this case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of a number of scenarios. Each scenario starts with a line containing a scenario title, which is a string of 1 to 20 letters, digits, and underscores (with no intervening spaces). A single `<TT>#</TT>' on a line indicates the end of input.<P>The <EM>title</EM> line is followed by one line consisting of two integers <SPAN CLASS="MATH"><I>C</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN>, separated by a single space:<P><UL><LI><SPAN CLASS="MATH"><I>C</I></SPAN> is the number of clocks, <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" src="http://livearchive.onlinejudge.org/external/24/p2490a.gif ALT="$ \leq$"> <I>C</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" src="http://livearchive.onlinejudge.org/external/24/p2490a.gif ALT="$ \leq$"> 11</SPAN>, where the clocks are numbered sequentially starting with 0 (i.e., <SPAN CLASS="MATH">0, 1, 2, 3,..., <I>C</I> - 1</SPAN>), </LI><LI><SPAN CLASS="MATH"><I>B</I></SPAN> is the number of blocks, <SPAN CLASS="MATH">0 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" src="http://livearchive.onlinejudge.org/external/24/p2490a.gif ALT="$ \leq$"> <I>B</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" src="http://livearchive.onlinejudge.org/external/24/p2490a.gif ALT="$ \leq$"> 11</SPAN>, where the blocks are numbered sequentially starting with 0 (i.e., <SPAN CLASS="MATH">0, 1, 2, 3,..., <I>B</I> - 1</SPAN>). </LI></UL><P>This line is followed by one line representing the starting positions of our clocks. This line consists of C clock positions separated by single spaces, each position being an integer number in the set {3, 9, 6, 12}.<P>This <EM>clocks</EM> line is followed by <SPAN CLASS="MATH"><I>B</I></SPAN> other lines, one line for each block move operation. Each <EM>block</EM> line consists of 1 or more clock numbers (in no particular order), separated by single spaces, representing the clocks that will advance together by 3 hours in this block.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each set of output data consists of a single output line showing in order: the problem title, a colon `<TT>:</TT>', a space ` ', and one of the following answers:<P><UL><LI>the text `<TT>No moves required.</TT>', if no moves are required to solve the problem, </LI><LI>the text `<TT>No solution.</TT>', if the problem doesn't have any solution, </LI><LI>the block numbers making up the minimal solution (in the required length/dictionary order), separated by single spaces. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Test_1_0
1 0
12
Test_1_1
1 1
12
0
Test_3_3
3 3
9 9 9
0 1
1 2
0 2
Test_9_9
9 9
9 9 12 6 6 6 6 3 6
1 3 4 0
0 1 2
2 4 5 1
0 3 6
4 5 7 1 3
2 5 8
3 4 6 7
8 7 6
8 7 4 5
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Test_1_0: No moves required.
Test_1_1: No moves required.
Test_3_3: No solution.
Test_9_9: 3 4 7 8
</PRE><P>
______________________________________________________
2491||||||false||||||
<P>A rectangle is to be cut by a sequence of one or more straight line segments joining a start node to an end node, both on the rectangle border.<P>Write a program that will read in details of the rectangle and the dividing line and determine whether the cut produces exactly two parts that could slide apart while remaining in the same plane.<P>The following sample diagrams contain:<P><OL><LI>several cases where the answer is `<TT>Yes</TT>', i.e., the cutting line produces exactly two parts that can slide away as required (1 - 5), and </LI><LI>several cases where the answer is `<TT>No</TT>', i.e., the cutting line doesn't produce exactly two parts as required (6 - 10). </LI></OL><P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2491.gif ALT="\epsfbox{p2491.eps}"></DIV><P>Diagram (6) shows two interlocked parts that cannot slide apart. Diagrams (7 - 10) show cuttings that produce three parts instead of the required two. Diagram (7) shows two intersecting segments. Diagram (8) shows a node that touches another segment. Diagram (9) shows two duplicate nodes that overlap (on the thicker spot). Diagram (10) shows two segments that overlap (along the thicker line). This overlapping will be more obvious in the sample input section below (where the grid size is assumed to be 10).<P>The programmer that initially received this task noticed that if the two parts can slide apart then they can always slide apart along the slope of at least one of the given line segments. However, he was unable to put this idea to work. Your task is to help him and write the required program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of a number of scenarios. Each scenario starts with a <EM>title</EM> line containing a scenario title followed by three integers <SPAN CLASS="MATH"><I>X</I><SUB>MAX</SUB></SPAN>, <SPAN CLASS="MATH"><I>Y</I><SUB>MAX</SUB></SPAN>, and <SPAN CLASS="MATH"><I>N</I></SPAN>, separated by single spaces. The scenario title is a string of 1 to 20 letters, digits, and underscores (with no intervening spaces). It is assumed that our rectangle is aligned with the axes with the origin at the bottom-left corner, and that <SPAN CLASS="MATH"><I>X</I><SUB>MAX</SUB></SPAN> and <SPAN CLASS="MATH"><I>Y</I><SUB>MAX</SUB></SPAN> specify the top-right corner, where <SPAN CLASS="MATH">10 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2491.gif ALT="$ \leq$"> <I>X</I><SUB>MAX</SUB>, <I>Y</I><SUB>MAX</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2491.gif ALT="$ \leq$"> 1000000</SPAN>. <SPAN CLASS="MATH"><I>N</I></SPAN> represents the number of nodes of the cutting line, <SPAN CLASS="MATH">2 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2491.gif ALT="$ \leq$"> <I>N</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2491.gif ALT="$ \leq$"> 200000</SPAN>. A single `<TT>#</TT>' on a line indicates the end of input.<P>This <EM>title</EM> line is followed by one or more lines, as needed to describe all nodes of the cutting line, in succession, <SPAN CLASS="MATH">0, 1, 2,..., <I>N</I> - 1</SPAN>. Each <EM>nodes</EM> line contains one or more pairs of non-negative integers, each giving the <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of the corresponding node.<P>You can assume that:<P><UL><LI>the start and the end nodes are distinct and lie on the rectangle borders, </LI><LI>all other nodes lie within the interior area of the rectangle, </LI><LI>there are no successive duplicate nodes (i.e., no 0 length segments), </LI><LI>there are no successive overlapping segments (such as `<TT>0 0 4 4 2 2</TT>'). </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT> </H2><P>Output consists of one line for each scenario. There are two cases:<P><OL><LI>The cutting line meets all our requirements and produces exactly two parts that can slide apart. In this case assume that ( <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>, <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>) is the first of the line segments whose slope can be used for sliding apart the two parts. Output the scenario title, followed by a colon (`<TT>:</TT>'), a space (` '), the word `<TT>Yes</TT>', another space (` '), and then the four integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>, separated by single spaces (these coordinates must appear in their input sequence). </LI><LI>Otherwise output the scenario title, followed by a colon (`<TT>:</TT>'), a space (` '), and the word `<TT>No</TT>'. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Case_1 30 40 2
0 20 30 20
Case_2 30 40 3
30 20 20 20 0 20
Case_3 30 40 4
0 10 20 20 10 30 10 40
Case_4 30 40 6
20 40 10 20 10 10
20 20 20 10 10 0
Case_5 30 40 4
20 40 20 20 10 20 10 40
Case_6 30 40 6
10 0 10 10 20 10 20 30 10 20 10 40
Case_7 30 40 6
10 0 10 10 20 20 20 10 10 20 10 40
Case_8 30 40 5
10 0 10 25 20 10 20 20 0 30
Case_9 30 40 6
10 0 10 20 20 10 20 20 10 20 10 40
Case_10 30 40 7
10 40 10 20 20 20 20 10 10 10 10 30 0 30
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case_1: Yes 0 20 30 20
Case_2: Yes 30 20 20 20
Case_3: Yes 0 10 20 20
Case_4: Yes 10 10 20 20
Case_5: Yes 20 40 20 20
Case_6: No
Case_7: No
Case_8: No
Case_9: No
Case_10: No
</PRE><P>
______________________________________________________
2492||||||false||||||
<P>The Great Sand Council (GSC) of the planet Phleebutt (apologies to Sierra) have devised a base 3 number system to suit their physiology. The symbols used to represent the three valid digits of their number system are `<TT>0</TT>', `<TT>1</TT>', and `<TT>-</TT>', following the unusual configuration of their `hands' (don't ask). The decimal counterparts of the three symbols are, respectively, 0, 1 and -1.<P>Each position in a number has a value three times greater than the position immediately to its right. For example, the number `<TT>10-</TT>' has the value 8 in decimal, since <SPAN CLASS="MATH">1 <TT>*</TT> 9 + 0 <TT>*</TT> 3 + -1 <TT>*</TT> 1 = 8</SPAN> <tex2html_verbatim_mark>. Similarly, the number `<TT>-1</TT>' has the decimal value -2, since <SPAN CLASS="MATH">-1 <TT>*</TT> 3 + 1 = - 2</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will receive a list of integers as input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>You have to write a program that can convert 32-bit signed decimal integers into their equivalent Great Sand Council (GSC) representations.<P>You have to echo the input numbers, followed by their GSC representations (include all extra symbols, as shown below)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 
2 
-17 
42 
1024
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 = 101 GSC 
2 = 1- GSC 
-17 = -1-0- GSC 
42 = 1---0 GSC 
1024 = 111-0-1 GSC
</PRE><P>
______________________________________________________
2493||||||false||||||
<P>
You have obtained a set of pentagonal titanium plates, formerly used in the heat-exchanger of 
a nuclear power station. From this you want to construct cubic boxes (small safes?), for which 
you will need square plates. The problem is that you don't have the equipment to forge the 
pentagonal plates into neat squares. The best you can do is to try and cut the largest possible 
square from each of the pentagonal plates.  

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2493.eps}$
 -->
<IMG
 WIDTH="255" HEIGHT="313" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2493.jpg
 ALT="\epsfbox{p2493.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Thus, given the side length of the pentagon, <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>, you must compute the side length of the 
largest square that will fit inside it. You may assume that the one corner of the square always 
coincides with one of the corners of the pentagon, as shown in the diagram. (Clearly the 
square shown in the diagram is not the largest possible one.)  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input will be a list of pentagon side-lengths, one per line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your output must be the maximal square side-length, one per line. Your answers must be 
rounded to 10 decimal places (after the decimal period). The following results were obtained 
from the input listed above.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
0.237788 
0.291066 
0.845814 
0.152208 
0.585537
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
0.2538138844 
0.3106825915 
0.9028182111 
0.1624661619 
0.6249996653
</PRE>  

<P>

______________________________________________________
2494||||||false||||||
<P>Our intrepid adventurer, Miss Croft, has stumbled across a difficult puzzle while exploring an ancient Mayan temple. The puzzle comprises a grid of trampolines contained in a rectangular room. Each trampoline can be represented by a square on a grid, as shown below. The difficulty in crossing the room lies in the fact that each trampoline has a different degree of elasticity, so that some trampolines will propel you only one square, while others may propel you several squares.<P><P><BR>To safely reach the exit, Lara has to jump on the trampolines in the correct sequence in order to reach the `end' square. To simplify matters, the `Begin' square will always be at position (0,0) on the grid, while the `End' square will be at the diagonally opposite corner of the grid, e.g. at (2,2) in the diagram below. The coordinates are listed in pairs of the form (horizontal, vertical).<P>Several rules apply:<P><OL><LI>You may only jump along the major axes of the grid, i.e. in the diagram you may only jump horizontally or vertically, not diagonally. </LI><LI>You must jump the exact number of squares indicated by the trampoline's strength. Using the grid shown below, you can (for example) jump from (1,0) to (1,2). </LI><LI>You shouldn't jump into the walls at the edge of the grid. For example, you cannot try to jump from (1,0) in the direction of (2,0), since you would hit the wall. The (1,0) square forces you to jump a distance of 2 squares, the wall is only one square away in that direction. </LI><LI>You may visit each square once at most. </LI></OL><P><DIV ALIGN="CENTER"><IMG WIDTH="415" HEIGHT="444" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2494.jpg ALT="\epsfbox{p2494.eps}"> <tex2html_verbatim_mark></DIV><P>Your task is to list the shortest possible route from the starting trampoline (square) to the end trampoline (square). The shortest possible route is defined as the route requiring the fewest jumps.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each block of input consists of a line containing the dimensions of the grid, followed by the grid itself.<P>The input may contain several such blocks (each one a different puzzle). The grid dimensions are given in the same order as all the other coordinates, i.e. horizontal dimension first. All problems you receive will have a valid solution.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program must output the shortest route from the `Begin' square to the `End' square for each puzzle. The solutions must be listed one per line as a sequence of coordinates in the order that they were visited.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 
1 2 1 
2 1 2 
2 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
(0,0) (1,0) (1,2) (2,2)
</PRE><P>
______________________________________________________
2495||||||false||||||
<P>
You have been asked to design a security system for protecting the crown jewels. After careful 
consideration (and watching numerous Remington Steele episodes), you have decided to set 
up a laser tripwire alarm system. The system works by bouncing a laser beam off mirror strips 
fitted to the walls of the room.  Since the beam will follow a fixed path through the room, you 
can place a single sensor at the end of the laser's path. If anyone breaks the beam at any 
point along the path that the laser follows, the light will not reach the sensor, setting off the 
alarm. The diagram below illustrates a how a beam originating at P0 is reflected off the walls, 
eventually reaching the point P3 (this is a top-down view of the room).  

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2495.eps}$
 -->
<IMG
 WIDTH="331" HEIGHT="268" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="\epsfbox{p2495.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Your task is to calculate the path that the beam will take through the room so that you know 
where you have to place the sensor. Your input will be the geometry of the room, and the 
origin of the laser beam. Note that the problem domain is restricted to two dimensions.  

<P>
The laser beam is reflected in a direction so that the angle of reflection (with respect to the 
wall) is equal to the angle of incidence. You don't have to worry about hitting corners; test 
cases will never have beams hitting the corner exactly.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Your input consists of the following elements:  

<P>

<P>
<BR>

<!-- MATH
 $number\_of\_reflections$
 -->
<SPAN CLASS="MATH"><I>number</I><IMG
 WIDTH="29" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_of$"><IMG
 WIDTH="98" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_reflections$"></SPAN>
<tex2html_verbatim_mark> 

<P>

<!-- MATH
 $laser\_x \ laser\_y$
 -->
<SPAN CLASS="MATH"><I>laser</I><IMG
 WIDTH="21" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_x$">&nbsp;<I>laser</I><IMG
 WIDTH="20" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_y$"></SPAN>
<tex2html_verbatim_mark> 

<P>

<!-- MATH
 $laser\_direction\_x \ laser\_direction\_y$
 -->
<SPAN CLASS="MATH"><I>laser</I><IMG
 WIDTH="81" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_direction$"><IMG
 WIDTH="21" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_x$">&nbsp;<I>laser</I><IMG
 WIDTH="81" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_direction$"><IMG
 WIDTH="20" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_y$"></SPAN>
<tex2html_verbatim_mark> 

<P>

<!-- MATH
 $number\_of\_walls$
 -->
<SPAN CLASS="MATH"><I>number</I><IMG
 WIDTH="29" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_of$"><IMG
 WIDTH="52" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_walls$"></SPAN>
<tex2html_verbatim_mark> 

<P>

<!-- MATH
 $wall\_start\_x \ wall\_start\_y \ wall\_stop\_x \ wall\_stop\_y$
 -->
<SPAN CLASS="MATH"><I>wall</I><IMG
 WIDTH="49" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_start$"><IMG
 WIDTH="21" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_x$">&nbsp;<I>wall</I><IMG
 WIDTH="49" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_start$"><IMG
 WIDTH="20" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_y$">&nbsp;<I>wall</I><IMG
 WIDTH="42" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_stop$"><IMG
 WIDTH="21" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_x$">&nbsp;<I>wall</I><IMG
 WIDTH="42" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_stop$"><IMG
 WIDTH="20" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_y$"></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
All the values are real numbers, except the <!-- MATH
 $number\_of\_reflections$
 -->
<SPAN CLASS="MATH"><I>number</I><IMG
 WIDTH="29" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_of$"><IMG
 WIDTH="98" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_reflections$"></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $number\_of\_walls$
 -->
<SPAN CLASS="MATH"><I>number</I><IMG
 WIDTH="29" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_of$"><IMG
 WIDTH="52" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_walls$"></SPAN>
<tex2html_verbatim_mark> 
parameters, which are integers.  

<P>
You have to follow the path of the beam originating at position <!-- MATH
 $(laser\_x, laser\_y)$
 -->
<SPAN CLASS="MATH">(<I>laser</I><IMG
 WIDTH="21" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_x$">, <I>laser</I><IMG
 WIDTH="20" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_y$">)</SPAN>
<tex2html_verbatim_mark> 
travelling in direction <!-- MATH
 $(laser\_direction\_x, laser\_direction\_y)$
 -->
<SPAN CLASS="MATH">(<I>laser</I><IMG
 WIDTH="81" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_direction$"><IMG
 WIDTH="21" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_x$">, <I>laser</I><IMG
 WIDTH="81" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_direction$"><IMG
 WIDTH="20" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_y$">)</SPAN>
<tex2html_verbatim_mark>.  Note that the laser 
direction is a vector, not a point.  

<P>
Each problem will have <!-- MATH
 $number\_of\_walls$
 -->
<SPAN CLASS="MATH"><I>number</I><IMG
 WIDTH="29" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_of$"><IMG
 WIDTH="52" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_walls$"></SPAN>
<tex2html_verbatim_mark> wall specifications; only the first one is shown 
above. Your input may contain several problem specifications, each following the format 
defined above.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
Your output will be the coordinates (accurate to 2 decimal places) of the point where the 
beam strikes on its <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>-th reflection, where <!-- MATH
 $n = number\_of\_reflections$
 -->
<SPAN CLASS="MATH"><I>n</I> = <I>number</I><IMG
 WIDTH="29" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_of$"><IMG
 WIDTH="98" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_reflections$"></SPAN>
<tex2html_verbatim_mark>. For example, in the 
diagram above, your output will be the coordinates of point P3, with 
<!-- MATH
 $number\_of\_reflections = 3$
 -->
<SPAN CLASS="MATH"><I>number</I><IMG
 WIDTH="29" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_of$"><IMG
 WIDTH="98" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/24/p2495.jpg
 ALT="$ \_reflections$"> = 3</SPAN>
<tex2html_verbatim_mark> (thus the endpoint is treated as part of the reflection count). 
Repeat this for every problem specified in the input.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
0 0 
1 0.5 
4 
-1 -1  1 -1 
 1 -1  1  1 
-1  1  1  1 
-1  1 -1 -1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0.00 -1.00
</PRE> 

<P>

______________________________________________________
2496||||||false||||||
<P>You've all seen this type of puzzle before: two numbers and their sum are expressed as letters of the alphabet, and you have to find their numeric values. For example<P><PRE>
  hello 
+ there 
------- 
  world
</PRE><P>can be solved to yield<P><PRE>
  56442  
+ 15606 
------- 
  72048
</PRE><P>In other words, to each letter of the alphabet found in the original puzzle you must assign a digit 0 through 9 so that the resulting sum is correct. The following rules apply:<P><OL><LI>Each number (0-9) may only be assigned to a single letter, i.e. if 5 is assigned to `<TT>a</TT>', then no other letter may have the value 5. </LI><LI>The leading digit of any of the three terms may not be zero. </LI><LI>All values you are presented with will fit in a 32-bit variable, i.e. the longest word will have less than 10 letters. </LI></OL><P>Some of the puzzles may have more than one solution. In these cases, you have to give preference to the solution with the smallest digit in the least significant position of the first addend. If there's more than one such solution, you must prefer the one with the smallest digit in the least significant position of the second addend. Should there still be more than one solution, you pick the one with the smallest digit in the second least significant (10s) position of the first addend, and so on.<P>Return only one solution, that is, the one complying with the above constraints.<P>Some sums will have no valid solutions. In these cases, simply print out the phrase `<TT>No solution</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each set of three words defines a puzzle which you must solve.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>You have to echo the input words, followed by the solution, using the format shown below (including the arrow and the other symbols)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
hello there world 
i am nuts
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
hello + there = world -&gt; 56442 + 15606 = 72048 
i + am = nuts -&gt; No solution
</PRE><P><P><P><BR><SPAN CLASS="textbf">Note:</SPAN> that the first example (hello there world) has many solutions. The one shown above conforms to the constraints specified above.<P>
______________________________________________________
2497||||||false||||||
<P>As part of a new encryption algorithm that you are designing, you are required to find a way of uniquely numbering all possible words. Your alphabet is restricted to the lowercase letters ``<TT>a</TT>" through ``<TT>z</TT>". The system that you have designed ranks the words first by length, and then alphabetically. For example:<P><PRE>
a 1 
b 2 
z 26 
aa 27 
ab 28 
zz 702 
... 
physics 5,049,467,949
</PRE><P>Your task is to write a program that, given a word, prints out the numeric representation of this word. All words will be shorter than 41 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input will consist of a sequence of words, one per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>You have to echo each input word, followed by its numeric representation. The numbers must be printed in the format shown below, with a comma separating each set of three digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
snowfall  
elementary  
transcendental  
superstructural
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
snowfall 157,118,051,752 
elementary 29,697,684,282,993 
transcendental 51,346,529,199,396,181,750 
superstructural 1,279,341,593,224,884,122,582
</PRE>
______________________________________________________
2498||||||false||||||
<P>The Enthusiasts of Reptiles and Alligators United (ERAU) is a fun-loving group that wants to use special ``club-names" for its members. Instead of relying on things like physical features for these names (which might be insulting to someone who earned a club name like ``Stinky"), they've decided to use a permutation of the person's real name as the club name. To create a club name, they will first reverse the order of all of the vowels in the person's name and then reverse the order of the consonants in the name. For example, for the name WALDO, the vowels are A and O. Reversing their order gives WOLDA. The consonants W, L, and D are then reversed, giving the club name of DOLWA.<P>ERAU has asked for your help creating club names. They consider the letters A, E, I, O, and U to be the only vowels. Write a program to take a list of names and print the corresponding club name for each.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of one or more names, one per line. Each name will consist of 1 to 80 upper case letters. There will be no other characters on the line.<P>The last line of input will be a line with just the word `<TT>LAST</TT>'. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each line of input should generate a line with the original name, followed by a colon (`<TT>:</TT>') and the club name.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
WALDO
MARYANNE
LINUS
MARGARET
GEORGE
SARAH
LAST
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
WALDO:DOLWA
MARYANNE:NENYARMA
LINUS:SUNIL
MARGARET:TERGARAM
GEORGE:GEORGE
SARAH:HARAS
</PRE><P>
______________________________________________________
2499||||||false||||||
<P>The head of the Expanded River Access Unit (ERAU) in Florida has initiated a state bridge- building program on the Stinky-Muddy river to make the river navigable by barges. Over the years, each town on the river built its own bridge system in an impromptu manner as needed. Since the river is wide with many islands, some of the towns have rather complex sets of bridges. Before constructing new, barge-friendly bridges at each town, all the old bridges must be dismantled. You are to write a program to determine the minimum cost for transporting the bridge removal equipment.<P>In each town, the dismantling equipment is dropped off at some location (locations will be denoted by upper-case letters, A-Z) and each bridge is dismantled as the equipment moves across it. Finally, the equipment is picked up.<P>Moving equipment from location to location using existing bridges is free but destroys the bridge used. If the equipment is dropped off and picked up at the same location, the pick-up cost is $10,000, otherwise it is $15,000. If the equipment gets stranded before it has removed all the bridges, it must be airlifted to a new location. The cost of each airlift operation is $25,000.<P><DIV ALIGN="CENTER"><IMG WIDTH="537" HEIGHT="511" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2499.jpg ALT="\epsfbox{p2499.eps}"> <tex2html_verbatim_mark></DIV><P>In the example above, the minimum transportation cost would be $40,000. One of the ways this can be accomplished by dropping off the equipment at C; removing in order the bridges from C to D, D to C, C to A, A to B, and B to D; airlifting the equipment to F; removing the bridge from F to E; and picking the equipment up at E. The airlift from D to F, incurs a charge of $25,000, and, since the drop-off and pick-up locations (C and F respectively) are different, a $15,000 pick-up charge is added.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>For each town in the data set, the first line of input will be the name of the town (consisting of one or more characters with no spaces), followed by the number of bridges, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 \le n <1000)$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/24/p2499.jpg ALT="$ \le$"><I>n</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark>. The following line(s) contain <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> bridge descriptions separated by white space. A bridge is denoted by a single pair of different upper-case characters in arbitrary order, being the locations that are connected. In the example above, the list of bridges might be given as `<TT>AB EF DC CD BD</TT>'. There may be up to 100 bridges between any pair of locations. The end of the dataset is marked by a town named `<TT>Last</TT>', which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input town, there should be one line of output. The line should contain the name of the town followed by the minimum transportation cost for the town, formatted as in the example output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Swampville 6
AB EF DC CD BD AC
Boggytown 6
AB AB BD CD DC AC
Smallville 3
AB BC AC
Riverbend 5
AB BD AC CD DC
Mireville 7
AB CD
DE DE EF AZ
BZ
Last 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Swampville: $40000
Boggytown: $40000
Smallville: $10000
Riverbend: $15000
Mireville: $65000
</PRE><P>
______________________________________________________
2500||||||false||||||
<P>
Every 4 years, FIFA organizes the World Cup Tournament to determine the Soccer (Football)
Champion of the World. The tournament is divided into multiple phases.  First, the teams have to
participate in a round of matches against the other nations in their geographical region. Each
regional tournament produces a number of qualified teams. In the ``first round of the final phase,"
the qualified teams are divided into groups of four, and they play a round-robin tournament
against the other teams in the same group. The two teams out of each group with the highest
relative ranking qualify for the next phase of the tournament. You must write a program that,
given the teams in each group, and the results of the round-robin matches, will determine which
two teams will move on to the next phase.

<P>

<P>
<BR>

<B>Rules:</B>

<P>
The relative ranking of any pair of teams within the group is determined by the sequential
application of the following rules.

<P>

<OL>
<LI>Total points: each team is assigned 3 points for each match it won, 1 point for each match it
     drew, and 0 points for each match it lost. The team with the higher total points has the higher
     ranking.
</LI>
<LI>Goal Differential: the sum of goals scored by the team, minus the sum of goals scored against
     the team, in all of the matches it played during the round. If the two teams have the same
     total points, the team with the higher goal differential has the higher ranking.
</LI>
<LI>Goals scored: the number of goals scored by the team in all the matches played during this
     round of the tournament. If the two teams have the same total points, and goal differential,
     the team with the higher number of goals has the higher ranking.
</LI>
<LI>Seed: a number reflecting the official FIFA placement of the team before the current phase of
     the tournament. The teams are listed in the input data set in order of their placement within
     each group, from first to last seed. When two teams have the same total points, goal
     differential, and number of goals scored, a team with lower seed has the higher ranking than
     a team with a higher seed.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file will contain one or more data sets.  Each data set begins with a line containing the
group name, followed by the name of the 4 teams in the group. This line has the format:

<P>

<P>
<BR>

<TT>Group <!-- MATH
 $<group\_name>$
 -->
<SPAN CLASS="MATH">&lt; <I>group</I><IMG
 WIDTH="54" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2500img1.png
 ALT="$ \_name$"> &gt;</SPAN>
<tex2html_verbatim_mark>: <SPAN CLASS="MATH">&lt; <I>team</I>1 &gt;</SPAN>
<tex2html_verbatim_mark>,<SPAN CLASS="MATH">&lt; <I>team</I>2 &gt;</SPAN>
<tex2html_verbatim_mark>,<SPAN CLASS="MATH">&lt; <I>team</I>3 &gt;</SPAN>
<tex2html_verbatim_mark>,<SPAN CLASS="MATH">&lt; <I>team</I>4 &gt;</SPAN>
<tex2html_verbatim_mark></TT>

<P>

<P>
<BR>
There is a single space after the word group and the colon. The length of this line is at most 80
characters. The group name, denoted by <!-- MATH
 $<group\_name>$
 -->
<SPAN CLASS="MATH">&lt; <I>group</I><IMG
 WIDTH="54" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2500img1.png
 ALT="$ \_name$"> &gt;</SPAN>
<tex2html_verbatim_mark>, is a sequence of one or more characters.
Each team name, denoted by <SPAN CLASS="MATH">&lt; <I>teamN</I> &gt;</SPAN>
<tex2html_verbatim_mark> (where <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is 1, 2, 3, or 4), is a sequence of alphabetic
characters (`<TT>a</TT>'-`<TT>z</TT>', `<TT>A</TT>'-`<TT>Z</TT>') that begins with a letter and includes only alphabetical characters, and
embedded spaces.

<P>
This is followed by 6 lines, each describing a match result for each pairing of teams in the form:

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH">&lt; <I>teamX</I> &gt;</SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $<teamX\_score>$
 -->
<SPAN CLASS="MATH">&lt; <I>teamX</I><IMG
 WIDTH="51" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2500img1.png
 ALT="$ \_score$"> &gt;</SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $<teamY\_score>$
 -->
<SPAN CLASS="MATH">&lt; <I>teamY</I><IMG
 WIDTH="51" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2500img1.png
 ALT="$ \_score$"> &gt;</SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH">&lt; <I>teamY</I> &gt;</SPAN>
<tex2html_verbatim_mark></TT>

<P>

<P>
<BR>
There is exactly one space between the team name and its score.  The <!-- MATH
 $<teamN\_score>$
 -->
<SPAN CLASS="MATH">&lt; <I>teamN</I><IMG
 WIDTH="51" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2500img1.png
 ALT="$ \_score$"> &gt;</SPAN>
<tex2html_verbatim_mark>s are
integers in the range [0..42]. There will be one blank line after each data set.  The end of input is
marked by end-of-file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, the output should begin with a line of the form 
`<TT>Group <!-- MATH
 $<group\_name>$
 -->
<SPAN CLASS="MATH">&lt; <I>group</I><IMG
 WIDTH="54" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2500img1.png
 ALT="$ \_name$"> &gt;</SPAN>
<tex2html_verbatim_mark>:</TT>',
where <!-- MATH
 $<group\_name>$
 -->
<SPAN CLASS="MATH">&lt; <I>group</I><IMG
 WIDTH="54" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2500img1.png
 ALT="$ \_name$"> &gt;</SPAN>
<tex2html_verbatim_mark> is as found in the input data set.

<P>
This should be followed by two lines listing the two teams that will pass to the next round in the
following format:

<P>

<P>
<BR>

<TT><!-- MATH
 $<team\_name>$
 -->
<SPAN CLASS="MATH">&lt; <I>team</I><IMG
 WIDTH="54" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2500img1.png
 ALT="$ \_name$"> &gt;</SPAN>
<tex2html_verbatim_mark> (<SPAN CLASS="MATH">&lt; <I>tp</I> &gt;</SPAN>
<tex2html_verbatim_mark>,<SPAN CLASS="MATH">&lt; <I>gd</I> &gt;</SPAN>
<tex2html_verbatim_mark>,<SPAN CLASS="MATH">&lt; <I>sg</I> &gt;</SPAN>
<tex2html_verbatim_mark>,<SPAN CLASS="MATH">&lt; <I>ps</I> &gt;</SPAN>
<tex2html_verbatim_mark>)</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH">&lt; <I>tp</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the team's total points, <SPAN CLASS="MATH">&lt; <I>gd</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the team's signed (i.e., starting with `<TT>+</TT>' or `<TT>-</TT>', with
0 being positive) goal differential, <SPAN CLASS="MATH">&lt; <I>sg</I> &gt;</SPAN>
<tex2html_verbatim_mark> are the team's scored points, and <SPAN CLASS="MATH">&lt; <I>ps</I> &gt;</SPAN>
<tex2html_verbatim_mark> are the points
scored against the team. The two teams must be listed in the order of their ranking at the end of
the round-robin round (the team that ranks first before the team that ranks second). The output
for each data set should be followed by a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Group 1 first example: A,B,C,D
A 0:0 B
C 0:0 D
B 0:0 C
D 0:0 A
A 0:0 C
D 0:0 B

Group A: Senegal,France,Germany,Brazil
France 0:1 Senegal
Germany 0:0 Brazil
Senegal 2:2 Germany
Brazil 1:0 France
Brazil 1:2 Senegal
France 1:1 Germany


Group Odd Name: Genoa,Sampdoria,Int Milano,Juventus
Genoa 3:1 Sampdoria
Int Milano 1:1 Juventus
Juventus 1:2 Genoa
Sampdoria 0:0 Int Milano
Genoa 1:0 Int Milano
Sampdoria 1:1 Juventus
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Group 1 first example:
A (3,+0,0,0)
B (3,+0,0,0)

Group A:
Senegal (7,+2,5,3)
Brazil (4,+0,2,2)

Group Odd Name:
Genoa (9,+4,6,2)
Juventus (2,-1,3,4)
</PRE>

<P>

______________________________________________________
2501||||||false||||||
<P>You are given an initial and a final square of a knight on a standard <SPAN CLASS="MATH">8 <TT>x</TT> 8</SPAN> <tex2html_verbatim_mark> chess board. Some of the squares might be blocked. Your task is to find the minimum number of moves the knight needs to move from the initial square to the final square without ever using the blocked squares.<P>The game of chess is played on an <SPAN CLASS="MATH">8 <TT>x</TT> 8</SPAN> <tex2html_verbatim_mark> checkerboard. The squares of the board can be uniquely identified by labeling the rows 1 through 8, and the columns `a' through `h.' Thus the square with an <TT>n</TT> in it in the adjacent figure is called ``d4" (note there is no space between the `d' and the `4').<P><DIV ALIGN="CENTER"><IMG WIDTH="537" HEIGHT="486" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2501a.jpg ALT="\epsfbox{p2501a.eps}"> <tex2html_verbatim_mark></DIV><P>One of the pieces in the game of chess is called a knight. In chess the moves of the knight are in the shape of an ``L"-two squares one direction, one the other. So if a knight is in the middle of the board at square ``d4" it can move to positions c2, b3, b5, c6, e6, f5, f3, and e2 (indicated by the <TT>x</TT>'s in the figure above). A knight cannot move off the board.<P>Not all the squares on the checkerboard are free for the knight to use in reaching the final square. As many as 62 of the 64 squares can be designated as blocked and the knight is not ever permitted to move into those squares.<P><DIV ALIGN="CENTER"><IMG WIDTH="537" HEIGHT="498" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2501a.jpg ALT="\epsfbox{p2501b.eps}"> <tex2html_verbatim_mark></DIV><P>The figure above shows an example. Given an initial square for the knight (indicated by <TT>n</TT>), a final square (indicated by <TT>N</TT>), and a set of blocked squares (indicated by the <TT>b</TT>'s), one possible sequence of moves is indicated by the numbers in the figure. The knight moves first to b3, and then to a5, then c6, e5, g4, h2, and finally f1. The number of moves needed is 7. This, in fact, is the minimum number of moves required to reach square f1 without using any of the blocked squares.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain 1 or more data sets. The first line of each data set will contain a single integer <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">-1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2501a.jpg ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2501a.jpg ALT="$ \le$">62</SPAN> <tex2html_verbatim_mark>, representing the number of blocked squares on the board. A value of `<TT>-1</TT>' flags the last data set, which should not be processed. The next line gives <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> unique positions (using the notation described above), separated by one blank. The third line contains the initial square of the knight, followed by a blank, and then the final square. You may assume that the initial square and the final square are different and that neither are blocked.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each data set should generate a line looking like `<TT>Board <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> moves</TT>', where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of the data set (starting at 1), and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the minimum number of moves. If it is impossible to reach the final square, generate the line `<TT>Board <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>: not reachable</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10
c1 d1 d5 c2 c3 c4 d2 d3 d4 c5
a1 f1
0

c1 b3
2
b3 c2
a1 b2
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Board 1: 7 moves
Board 2: 1 moves
Board 3: not reachable
</PRE><P>
______________________________________________________
2502||||||false||||||
<P>Modern buildings often have lights controlled by 3-way switches in more than one location. The light switches are collected into groups called <SPAN CLASS="textit">banks</SPAN> of switches at different places in the building. Light switches can be either 'up' or 'down' and lights can be either 'on' or 'off.' 3-way switches work by toggling the light status whenever they are changed between the up and down position, so if a switch controlling a light were up when the light were on, changing the switch to down would turn off the light. A light may be controlled by any number of 3-way switches.<P><P><BR>Consider the situation below, with three lights-Light A, Light B, and Light C-and three banks of lights-Bank 1 with two switches, one controlling Light A (in the down position in the illustration below) and one controlling Light B (down), Bank 2 with two switches, one controlling Light C (up) and one controlling Light A (up), and Bank 3 with two switches, one controlling Light B (up) and one controlling Light A (down).<P><DIV ALIGN="CENTER"><IMG WIDTH="770" HEIGHT="444" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2502.jpg ALT="\epsfbox{p2502.eps}"> <tex2html_verbatim_mark></DIV><P>A lighting configuration is considered to be <SPAN CLASS="textit">aesthetically pleasing</SPAN> when either:<P><UL><LI>all switches in all banks are up and all lights are on, or </LI><LI>all switches in all banks are down and all lights are off. </LI></UL><P>Of course, in some cases, both combinations are possible. Consider the example above. If all three lights are initially on, flipping the B switch down in Bank 3 will turn off light B, and flipping both switches in Bank 2 down will turn off lights C and A. At this point, all switches are in the down position and all lights are off, so this lighting configuration is aesthetically pleasing in the ``off" position. No matter how you flip the switches, you cannot make this configuration aesthetically pleasing in the ``on" position.<P>Your program should read in a variety of light and switch configurations and tell whether either or both of the aesthetically pleasing cases can occur.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more test cases. Each test case will consist a description line with two integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2502.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2502.jpg ALT="$ \le$">26</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2502.jpg ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2502.jpg ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, the number of lights and the number of switch banks, respectively.<P>The next line will describe the initial configuration of the lights. The lights are assumed to be named A, B, C, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> The line will have <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> digits, each 0 or 1, where 0 represents the light is off and 1 represents the light is on. The first digit will describe light A, the second light B, etc.<P>The next <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> lines will have information about the switch banks, one line per switch bank. The line will begin with an integer <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2502.jpg ALT="$ \le$"><I>s</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2502.jpg ALT="$ \le$">26</SPAN> <tex2html_verbatim_mark>, telling how many lights are controlled by the bank. There will then be <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> pairs of characters, an upper case letter telling which light is controlled by the switch and a lower case character `<TT>u</TT>' or `<TT>d</TT>' telling whether the switch is up or down originally with exactly one blank before each pair. All lights referenced will exist, so, for example, if there are 4 lights, switches will control only lights `<TT>A</TT>', `<TT>B</TT>', `<TT>C</TT>', or `<TT>D</TT>'.<P>The end of input is marked with a pair of integers <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print, in the format shown below, the number of the case (preceded by the word `<TT>Case </TT>'), and whether the switches can be manipulated to give an `<TT>aesthetic on only</TT>', `<TT>aesthetic off only</TT>', `<TT>both</TT>', or `<TT>neither</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1
0
1 Au
1 1
1
1 Au
3 3
111
2 Ad Bd
2 Cu Au
2 Bu Ad
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: neither
Case 2: both
Case 3: aesthetic off only
</PRE><P>
______________________________________________________
2503||||||false||||||
<P>
Polly creates patterns for designs given by her customers.  Her pattern material is expensive,
so she wants to take advantage of symmetries in the designs and not cut a whole pattern if
she doesn't have to.  Consider the design:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2503a.eps}$
 -->
<IMG
 WIDTH="110" HEIGHT="102" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2503a.jpg
 ALT="\epsfbox{p2503a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Polly realizes the design has <SPAN  CLASS="textit">horizontal symmetry</SPAN>; that is, if a vertical line is drawn which
bisects the design, the points on the left are a reflection of the points on the right.  Similarly,
the design:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2503b.eps}$
 -->
<IMG
 WIDTH="104" HEIGHT="102" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2503a.jpg
 ALT="\epsfbox{p2503b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
has <SPAN  CLASS="textit">vertical symmetry</SPAN> since if a horizontal line bisects it, the points on the top are a reflection
of the points on the bottom.  Finally, the image:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2503c.eps}$
 -->
<IMG
 WIDTH="102" HEIGHT="102" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2503a.jpg
 ALT="\epsfbox{p2503c.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
is both horizontally and vertically symmetric.

<P>
Polly receives her designs from her customers as a rectangular bi-level raster (pixels are
either black or white). The set of all <SPAN  CLASS="textbf">black</SPAN> pixels defines a pattern. There may be any number
of white extra rows and columns around the pattern that should not be considered as part of
the pattern (since her customers work on different sized grids and may want a pattern smaller
than the grid they have).  You are to determine whether the pattern is symmetrical
horizontally, or vertically, or both.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of one or more data sets.  The first line of each data set is respectively
the number of columns in the current raster <!-- MATH
 $(0 \le c \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2503a.jpg
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2503a.jpg
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>, and the number of rows in the
current raster <!-- MATH
 $(0 \le r \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2503a.jpg
 ALT="$ \le$"><I>r</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2503a.jpg
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>.

<P>
The following <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> lines contain <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> characters, each either `<TT>b</TT>' or `<TT>w</TT>', where `<TT>b</TT>' represents black,
and `<TT>w</TT>' represents white.  There will be at least 1 black pixel in every raster.

<P>
The last data set is signaled by <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> both being equal 0, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Each data set should generate a line looking like one of

<P>

<OL>
<LI>`<TT>Pattern <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is asymmetrical</TT>',
</LI>
<LI>`<TT>Pattern <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is horizontally symmetrical</TT>',
</LI>
<LI>`<TT>Pattern <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is vertically symmetrical</TT>',
</LI>
<LI>`<TT>Pattern <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is both horizontally and vertically symmetrical</TT>',
</LI>
</OL>

<P>
where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the current data set (starting at 1).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 4
wwwwbbbbbw
wwwwbwwwbw
wwwwbwbwbw
wwwwbwbwbw
5 3
bbwbw
bwbww
wbbwb
7 6
wwwwwww
wwwwbbw
wwwbbbb
wwwwbbw
wwwwwww
wwwwwww
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Pattern 1 is horizontally symmetrical
Pattern 2 is asymmetrical
Pattern 3 is both horizontally and vertically symmetrical
</PRE>

<P>

______________________________________________________
2504||||||false||||||
<P><SPAN CLASS="textit">This problem is dedicated to National Squirrel Awareness Week, October 7 to 13, 2002.</SPAN><P>You may think that squirrels running around are just running at random, but in fact, they're involved in a very detailed version of hide and seek. One squirrel searches for the nut that the others have hidden as the others give the seeker hints about where the nut is. Rocky is smarter than the average squirrel, so has decided to write a program to play this game. He's asked for your help.<P><P><BR>Write a program to simulate a treasure hunt game. Rocky decides to simplify the problem so it takes place in a long narrow stretch of the forest. At the beginning of each game, a nut is placed in the corridor and Rocky starts from the end of the corridor. Rocky attempts to find the nut. He does this by moving to another point in the corridor, whereupon the computer tells him whether he is ``warmer" (he has moved closer to the nut than his last position), ``colder" (he has moved farther away from the nut than his last position), ``same" (he has not moved closer or farther away from the nut) or he has reached the nut. Rocky continues until he exactly reaches the location of the nut, which always happens within 20 moves.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each input line represents a new game. Each input line contains at least two and at most 21 integers separated by whitespace. The integers represent locations along the corridor, expressed in units of feet. Rocky begins each game at location 0 feet. The first integer on an input line is the location of the nut. This integer is guaranteed to be different from 0. The remaining integers represent locations Rocky moves to, in order. Rocky will never move more than 5280 feet away from his original location. Rocky will always reach the nut in each game, and this will be the last move on the input line. Your program should stop processing input lines when the nut is located at 5280 feet (a mile is way too far for Rocky to go for only one nut).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each location that Rocky moves to, determine whether he is warmer, colder, the same, or has reached the nut. Have a blank line between the output for different input lines. Follow the format in the Sample Output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5  10 11 12  3 4 5
3   10  10 7  3
12  5  -3  1   4  6 7 8 9 12
5280 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Moving from 0 to 10: same.
Moving from 10 to 11: colder.
Moving from 11 to 12: colder.
Moving from 12 to 3: warmer.
Moving from 3 to 4: warmer.
Moving from 4 to 5: found it!

Moving from 0 to 10: colder.
Moving from 10 to 10: same.
Moving from 10 to 7: warmer.
Moving from 7 to 3: found it!

Moving from 0 to 5: warmer.
Moving from 5 to -3: colder.
Moving from -3 to 1: warmer.
Moving from 1 to 4: warmer.
Moving from 4 to 6: warmer.
Moving from 6 to 7: warmer.
Moving from 7 to 8: warmer.
Moving from 8 to 9: warmer
Moving from 9 to 12: found it!
</PRE><P>
______________________________________________________
2505||||||false||||||
<P>The Florida Expressways and Roadways Accounting Unit (ERAU) has learned just enough math to realize they can determine if some drivers have been speeding on their roads and have decided to add speeding fines onto the tolls if the speeding is excessive. They've decided the speeding is excessive if the average speed is more than 1.00 MPH above the speed limit of the road. For example, if a driver gets on the highway at MM (Mile Marker) 190 at 2:10 PM and off at MM 230 at 2:40 PM, the driver covered 40 miles in 30 minutes, and had an average speed of 80 MPH. If the speed limit on the road was 75 MPH, this driver would have the fine added onto the toll. If another driver got on the road at MM 300 at 11:05 PM and got off at MM 149 at 1:05 AM, that driver would have an average speed of 75.5 MPH and would not be penalized if the speed limit were 75 MPH.<P><P><BR>They've asked you to come up with a program to compute the tolls for their roads, including the fine. To simplify the problem, you should assume all exits and entrances are positioned exactly at the mile markers (so no vehicle will enter at MM 190.4).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more test cases. Each test case begins with a line describing the road containing three integers, <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> represents the toll rate per mile in cents, <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> is an integer representing the speed limit for the road, and <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> represents the amount of the speeding fine, again in cents. After the information about the road will be data for 1 or more vehicles. Each vehicle's data will be represented by four nonnegative integers, <SPAN CLASS="MATH"><I>sm</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>st</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>em</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>et</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>sm</I></SPAN> <tex2html_verbatim_mark> represents the starting mile marker, <SPAN CLASS="MATH"><I>st</I></SPAN> <tex2html_verbatim_mark> represents the starting time, <SPAN CLASS="MATH"><I>em</I></SPAN> <tex2html_verbatim_mark> represents the ending mile marker, and <SPAN CLASS="MATH"><I>et</I></SPAN> <tex2html_verbatim_mark> represents the ending time. Times are represented using a twenty four hour clock, so 730 will represents 7:30 AM and 1930 represents 7:30 PM. The last line of the vehicles will be a line with 4 0's. This line should not be processed.<P>The last test case will have a speed limit of 0. This case will have no vehicle data and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print, in the format shown below, the number of the case (preceded by the word `<TT>Road</TT>'), and the total amount to be collected for each vehicle on the road. Each vehicle should be on its own line, with the number of the vehicle in the test case first, as shown in the sample output below. You should print the amount of the toll rounded to the nearest cent.<P>You should assume no trip takes 24 hours or more, although a trip can certainly span two days, starting before midnight of one day and ending the next day. You may assume no trip takes 0 time or covers 0 distance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 75 1000
300 2305 149 105
250 2200 42 30
0 0 0 0
7 55 4575
0 1410 40 1540
0 0 0 0
7 0 4575
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Road 1
     Vehicle 1: $15.10
     Vehicle 2: $30.80

Road 2
     Vehicle 1: $2.80
</PRE><P>
______________________________________________________
2506||||||false||||||
<P>
The Every Recording Authentication Union has contracted you to write a program to detect if
copyrighted music files are being distributed on the Internet. Checking the names of the songs
does not work, since it is too easily defeated by using minor spelling variations. Instead, they
want to be able to see if the sound-waves of a suspect music sample approximately matches one
or more predetermined copyrighted works.

<P>

<P>
<BR>
The music samples you are to check all encode music as a sequence of sound-wave amplitudes
sampled at 44.1 kHz (i.e., 44,100 times per second.)  The amplitudes (sample points) are
measured in units of micro-decibels (1,000,000 micro-decibels equals 1 decibel.)

<P>

<P>
<BR>
Checking music for exact matching amplitudes will detect only exact copies, and will leave
similar recordings of the same music undetected.  In order to match music more intelligently, a
sound-wave is converted to a rough indication of its shape. To do this, the change in amplitude is
computed between every two consecutive sample points, and the change is placed into one of six
discrete categories labeled `A' through `F'.  The categories are defined based on the rate of
change measured in decibels per second, and is converted to an "angle".  Each character
represents a range of angles as follows:

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<!-- MATH
 $\begin{array}{ccccc}
& &A&\ge&60.0 \\
          60.0&>&B&\ge&30.0 \\
          30.0&>&C&\ge&  0.0 \\
          0.0 &>&D&\ge&-30.0 \\
         -30.0&>&E&\ge&-60.0 \\
         -60.0&>&F&\ge&-90.0
\end{array}$
 -->
<SPAN CLASS="MATH"><TABLE>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>&nbsp;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>&nbsp;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>A</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \ge$"></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>60.0</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>60.0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>&gt;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>B</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \ge$"></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>30.0</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>30.0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>&gt;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>C</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \ge$"></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.0</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>&gt;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>D</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \ge$"></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-30.0</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-30.0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>&gt;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>E</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \ge$"></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-60.0</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-60.0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>&gt;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>F</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \ge$"></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-90.0</TD></TR>
</TABLE></SPAN>
<tex2html_verbatim_mark>
</DIV>

<P>

<P>
<BR>
For example, a change of 1 decibel in 1 second is a 45 degree angle, and falls in category `B'.
The music sample consisting of 10 sample points

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<code>12.34   0.00   43.72   0.00   -19.34   0.00   4.32   -2.97   1.26   1.26</code>

</DIV>

<P>

<P>
<BR>
is characterized by the pattern of 9 characters:

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<code>D      A      F      E      B      C      D      C      C</code>

</DIV>

<P>

<P>
<BR>
You must read a set of patterns corresponding to fragments of copyrighted songs, and a
collection of music samples to be authenticated, and finally print out all the matches (if any) in
each music sample.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input will consist of the single word `<TT>Patterns</TT>'.  This will be followed by
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le n \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark> lines, each containing information about a copyrighted work: first, the
copyrighted work's name (which has less than 80 characters, and contains no colons) followed by
a colon; second, the copyrighted work's pattern which is a string of <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(5 \le p \le 100)$
 -->
<SPAN CLASS="MATH">(5<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \le$"><I>p</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark> consecutive
characters from the range `<TT>A</TT>' .. `<TT>F</TT>'.  Any spaces after the colon should be ignored.  Each work will have a different name.

<P>

<P>
<BR>
The information for copyrighted works is terminated by a line consisting of the single
word `<TT>Music</TT>'. This line will be followed by <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 < k \le 1000)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> music samples to check.  Each
music sample will start with a single line having the music sample's name (which has less than
80 characters, and contains no colons) followed by a colon, and finally a single integer <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>
<!-- MATH
 $(5 \le s \le 1000)$
 -->
<SPAN CLASS="MATH">(5<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \le$"><I>s</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2506img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> being the number of sample points in the music sample. After this line will be one
or more lines with the <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> values for the sample points (each in the range from -100.0 to +100.0,
with at most five digits to the right of the decimal point.) The last music sample will be followed
by a line consisting of the single word `<TT>End</TT>'.  Each sample will have a different name.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each music sample, output the name of the music sample, followed by a colon, two spaces,
and the name of the copyrighted work whose pattern is contained anywhere in the music sample
(i.e., a match.) If more than one match is found in the music sample, output the matches on
separate lines in alphabetical order of the copyrighted work's name.  If no match is found for a
music sample, output a similar line having `<TT>(no matches)</TT>' (see sample output).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Patterns
Brandy -- Lookingglass:             CCBCCE
SOS -- ABBA:                        CCCCB
YMCA -- Village People:             FACAFACBC
I Get a Kick Out of You -- Sinatra: FACBCBFA
Music
Sample 1:  11
  -12.987 -11.234 -11.123 -10.1 -8.123 2.548 17.1
  2.3 9.8 -0.0001 8.769
Sample 2:         20
  90.0 -90.0 0.0 0.0 100.0 -90.0 0.0 12.34 45.6 56.0
  90.0 -90.0 0.0 0.0 100.0 -90.0 0.0 12.34 45.6 56.0
Last Sample:  10
  11.3 9.4 9.2 10.9 11.2 11.1 10.5 8.8 8.9 9.7
End
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Sample 1:  SOS -- ABBA
Sample 2:  I Get a Kick Out of You -- Sinatra
Sample 2:  YMCA -- Village People

Last Sample:  (no matches)
</PRE>

<P>

______________________________________________________
2507||||||false||||||
<P>There is a strange small village in country of East Royal Area Union where people do not tell their ages, but they have generated a collection of hearsay facts of the form ``<SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is older than <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> years" (mathematically expressed <SPAN CLASS="MATH"><I>A</I> - <I>B</I> = <I>n</I></SPAN> <tex2html_verbatim_mark>). Since understatement is commonplace in this village, this ``fact" actually means that <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is older than <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> by at least <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> years <SPAN CLASS="MATH">(<I>A</I> - <I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \ge$"><I>n</I>)</SPAN> <tex2html_verbatim_mark>.<P>We are told that folks over the age of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> leave the village to find their fortunes elsewhere (i.e., the oldest inhabitant has an age <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \le$"><I>m</I></SPAN> <tex2html_verbatim_mark>). Bill, the local discrete (but not discreet) mathematician wants to use all these facts to figure out the set of legal combinations of ages: i.e., ones that fit the facts, but he knows at least one person is aged <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and people in the village are oldest possible as long as the ``facts" are possible. You are to write a program to make Bill's job easier.<P><P><BR>As an example, if we suppose there are 5 people in the town, named A, B, C, D and E, the maximum age is 20, and we have the following facts.<P><P><BR>A - E <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \ge$"></SPAN> <tex2html_verbatim_mark> 2 (So A is at least 2 years older than E)<P>E - D <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \ge$"></SPAN> <tex2html_verbatim_mark> 3<P>D - B <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \ge$"></SPAN> <tex2html_verbatim_mark> 2<P>A - C <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \ge$"></SPAN> <tex2html_verbatim_mark> 4<P>C - B <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \ge$"></SPAN> <tex2html_verbatim_mark> 4<P>C - D <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \ge$"></SPAN> <tex2html_verbatim_mark> 3<P><P><BR><P>The oldest possible ages for people are as follow:<P><P><BR>A : 20<P>B : 11<P>C : 16<P>D : 13<P>E : 18<P><P><BR><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be one or more data sets in the input. The first line of each data set contains three integers: the number of people in the village <!-- MATH
 $(0 < n \le 26)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark>, the number of facts <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \le$"><I>f</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \le$">500)</SPAN> <tex2html_verbatim_mark>, and the maximum age <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2507img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>. The values of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> are completely independent of each other. A data set having <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> equal to 0 represents the last data set, which should not be processed. The following <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> lines each contain a fact, encoded in the form `<TT><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>-<SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>&gt;=<SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark></TT>', where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> indicate person X and Y, and <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark> is a non-negative integer. You may assume the values in the facts refer to people who exist in the village (so if there are just 5 people in the village, the facts will only refer to A, B, C, D, and E).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each data set should generate a first line like `<TT>Dataset <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>:</TT>' where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the current data set (starting at 1). Following this should be a list of ages of A, B, C... in the following format:<P><P><BR><TT>A : <!-- MATH
 $<age \ of \ person \ A>$
 --><SPAN CLASS="MATH">&lt; <I>age</I>&nbsp;<I>of</I>&nbsp;<I>person</I>&nbsp;<I>A</I> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR><TT>B : <!-- MATH
 $<age \ of \ person \ B>$
 --><SPAN CLASS="MATH">&lt; <I>age</I>&nbsp;<I>of</I>&nbsp;<I>person</I>&nbsp;<I>B</I> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR><TT>C : <!-- MATH
 $<age \ of \ person \ C>$
 --><SPAN CLASS="MATH">&lt; <I>age</I>&nbsp;<I>of</I>&nbsp;<I>person</I>&nbsp;<I>C</I> &gt;</SPAN> <tex2html_verbatim_mark></TT> <P><P><BR>And so on. (Check the sample output for the format required). If there is no solution or if the facts indicate a negative age for anyone, `<TT>No solution</TT>' should be indicated in the output file and no ages should be given. Have one blank line after each data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 0 100
5 6 20
A-E&gt;=2
E-D&gt;=3
D-B&gt;=2
A-C&gt;=4
C-B&gt;=4
C-D&gt;=3
4 2 20
A-B&gt;=10
B-C&gt;=10
4 2 20
A-B&gt;=10
B-C&gt;=11
0 10 20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Dataset 1:
A : 100
B : 100
C : 100
D : 100
E : 100

Dataset 2:
A : 20
B : 11
C : 16
D : 13
E : 18

Dataset 3:
A : 20
B : 10
C : 0
D : 20

Dataset 4:
No solution
</PRE><P>
______________________________________________________
2508||||||false||||||
<P>
Pat and Chris have invented a new game based on the Prisoner's Dilemma.  Each of them
gets to select a horizontally aligned rectangle on a grid by specifying two corners, diagonally
opposite from each other.  (Horizontally aligned means the sides are parallel to the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>- and
<SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-axes.) If the rectangles have a no area in their intersection, Pat and Chris each get to add the
area of their rectangle to their scores, but if the rectangles have an intersection of more than
zero area, they have to subtract the area of their rectangle from their score.  Suppose Pat
selected the corners (0, 1) and (3, 3) and Chris selected (6, 2) and (3, 6), defining the
rectangles:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2508a.eps}$
 -->
<IMG
 WIDTH="499" HEIGHT="485" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2508a.jpg
 ALT="\epsfbox{p2508a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Since the intersection between the two rectangles has zero area, Pat would add 6 to her score
and Chris would add 12 to his score.  If Pat had selected the rectangle with corners (0, 3) and
(3, 1) and Chris had selected (5, 2) and (0, 0), there is a non-zero overlap, so Pat would lose
6 points and Chris would lose 10 points.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2508b.eps}$
 -->
<IMG
 WIDTH="498" HEIGHT="460" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2508a.jpg
 ALT="\epsfbox{p2508b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
They have asked for your help with this game.  Given a sequence of rectangle pairs, your
program should calculate whether there is non-zero overlap for each of the pairs, and the
final score assuming the score starts with 0 for both players.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the (single) data set has the number of rectangle pairs <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> (no greater than 100)
in the game between Pat and Chris.

<P>
The following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines -each representing one pair of rectangles- contain 8 integer numbers
in the range from -100 to +100, being respectively

<P>

<OL>
<LI>the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinates of one corner of Pat's rectangle,
</LI>
<LI>the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinates of the diagonally opposite corner of Pat's rectangle,
</LI>
<LI>the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinates of one corner of Chris's rectangle,
</LI>
<LI>the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinates of the diagonally opposite corner of Chris's rectangle.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Each pair of rectangles should generate a line looking like

<P>

<P>
<BR>

<TT>Rectangle pair <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> has zero overlap</TT> 
<BR><TT>Rectangle pair <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> has non-zero overlap</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the current data set (starting at 1) and the line correctly describes the overlap.
There should be a blank line after the last pair. The final two lines of output should look like

<P>

<P>
<BR>

<TT>Pat's score = <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark></TT> 
<BR><TT>Chris's score = <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> are Pat and Chris's final scores respectively.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
0 1 3 3 6 2 3 6
0 3 3 1 5 2 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Rectangle pair 1 has zero overlap
Rectangle pair 2 has non-zero overlap

Pat's score = 0
Chris's score = 2

______________________________________________________
2509||||||false||||||
A Bank plans to install a machine for cash withdrawal. The machine is able to deliver
appropriate <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN> (<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN> is the symbol of the currency delivered by the machine.
For instance, <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN> may stand for dollar, euro, pound etc.)
bills for a requested cash amount. The machine uses exactly <SPAN CLASS="MATH"><I>N</I></SPAN> distinct
bill denominations, say <SPAN CLASS="MATH"><I>D</I><SUB>k</SUB></SPAN>, <!-- MATH
 $k=1,\dots,N$
 -->
<SPAN CLASS="MATH"><I>k</I> = 1,..., <I>N</I></SPAN>, and for each denomination <SPAN CLASS="MATH"><I>D</I><SUB>k</SUB></SPAN> the machine has a supply
of <SPAN CLASS="MATH"><I>n</I><SUB>k</SUB></SPAN> bills. For example,
<!-- MATH
 \begin{displaymath}
N=3, n_1=10, D_1=100, n_2=4, D_2=50, n_3=5, D_3=10
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>N</I> = 3, <I>n</I><SUB>1</SUB> = 10, <I>D</I><SUB>1</SUB> = 100, <I>n</I><SUB>2</SUB> = 4, <I>D</I><SUB>2</SUB> = 50, <I>n</I><SUB>3</SUB> = 5, <I>D</I><SUB>3</SUB> = 10
</DIV><P></P>
means the machine has a supply of 10 bills of <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>100 each, 4 bills of <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>50 each,
and 5 bills of <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>10 each.

Call <SPAN CLASS="MATH"><I>cash</I></SPAN> the requested amount of cash the machine should deliver and write a program
that computes the maximum amount of cash less than or equal to <SPAN CLASS="MATH"><I>cash</I></SPAN> that can be
effectively delivered according to the available bill supply of the machine.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The program input is from a text file. Each data set in the file stands for a
particular transaction and has the format:
<!-- MATH
 \begin{displaymath}
cash\ N\ n_1\ D_1\ n_2\ D_2\ \dots\ n_N\ D_N
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>cash</I>&nbsp;<I>N</I>&nbsp;<I>n</I><SUB>1</SUB>&nbsp;<I>D</I><SUB>1</SUB>&nbsp;<I>n</I><SUB>2</SUB>&nbsp;<I>D</I><SUB>2</SUB>&nbsp;...&nbsp;<I>n</I><SUB>N</SUB>&nbsp;<I>D</I><SUB>N</SUB>
</DIV><P></P>
where <!-- MATH
 $0 \le cash \le 100000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \le$"><I>cash</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \le$">100000</SPAN> is the amount of cash requested, <!-- MATH
 $0 \le N \le 10$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \le$">10</SPAN> is the number of bill
denominations and <!-- MATH
 $0 \le n_k \le 1000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \le$"><I>n</I><SUB>k</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \le$">1000</SPAN> is the number of available bills for the <SPAN CLASS="MATH"><I>D</I><SUB>k</SUB></SPAN> denomination,
<!-- MATH
 $1 \le D_k \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \le$"><I>D</I><SUB>k</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \le$">1000</SPAN>, <!-- MATH
 $k=1,\dots,N$
 -->
<SPAN CLASS="MATH"><I>k</I> = 1,..., <I>N</I></SPAN>. White spaces can occur freely between the numbers in the input.
The input data are correct.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each set of data the program prints the result to the
standard output on a separate line as shown in the samples below.

The first data set designates a transaction where the amount of cash requested is <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>735.
The machine contains 3 bill denominations: 4 bills of <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>125, 6 bills of <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>5,
and 3 bills of <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>350.
The machine can deliver the exact amount of requested cash
(<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>735=1*<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>350+3*<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>125+2*<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>5).

In the second case the bill supply of the machine does not fit the exact amount of cash
requested. The maximum cash that can be delivered is <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>630
(<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>630=6*<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>100+1*<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>30 or 21*<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>30).  Notice that there can be
several possibilities to combine the bills in the machine for matching the delivered cash.

In the third case the machine is empty and no cash is delivered. In the fourth case the
amount of cash requested is <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2509img1.gif
 ALT="$ \clubsuit$"></SPAN>0 and, therefore, the machine delivers no cash.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
735 3  4 125  6 5  3 350
633 4  500 30  6 100  1 5  0 1
735 0
0 3  10 100  10 50  10 10
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
735
630
0
0
</PRE>


<P>

______________________________________________________
2510||||||false||||||
 King ACM 2002 received some clear ground and some money through inheritance.
 Terms of the will and testament require the heir to build <SPAN CLASS="MATH"><I>n</I></SPAN> towns.
 He was also required to build the least quantity of two-way roads between
 the towns such that one could travel from any town to any other town <B>even
 if one road was closed under repair</B>.  Carefully, all such roads must be
 constructed as geometrically straight lines.  Further, the condition that
 a traveller be able to get from one town to another (even with one road closed)
 needs to be satisfied by traversing the roads as straight lines in their
 entirety -- not stopping partway along one road to switch to another.

 Because of rich soil in those lands, the future inhabitants of the place
 have decided to produce beer. On the crossroads (a crossroad is merey the
 intersection of two or more roads) the king plans to build beer stands
 (one stand per a crossroad). So, if three or four (or twenty) roads intersect
 in a single point, theres still only one appropriate place for a beer stand.
 The King must choose locations for the towns and the roads. You need to advise
 him so that he builds as many beer stands as possible.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The first line of input contains the number of test cases. For each case
there is a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 32767$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2510img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2510img1.gif
 ALT="$ \le$">32767</SPAN>).  This represents
the number of towns to be built.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each <SPAN CLASS="MATH"><I>n</I></SPAN>, print a line containing the maximum number of beer stands
possible to build.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
3
4
5
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0
1
5
</PRE>


<P>

______________________________________________________
2511||||||false||||||
You are the owner of a very nice boat. You have many requests to rent your
beautiful boat during the summer time and you decided to maximize your profit.
For each client you know the number of days he wants to rent the boat and a
list of choices, where a choice means an amount of money and a deadline.
The deadline is the number of days counted from a time origin. You get the
money for a given deadline (when the holiday must end) only if you are able
to rent the boat before that deadline.

For example your friend Jack wants to travel on the Mediterranean Sea for 20
days and has the following choices:

<UL>
<LI>if the holiday deadline is 60 days you can get 1000 EUR provided
the boat is rented in between 0 and 41 (60days-20days+1) for 20
days;
</LI>
<LI>if the holiday deadline is 70 days you can get 800 EUR.
</LI>
</UL>

If a client does not contribute to the maximization of your profit you can drop
that client. You know all the clients and their choices and you must rent the
boat according to the order in which the clients submit their requests.

Write a program that, given the clients, computes the largest profit you can get.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The program input is from a text file. Each data set in the input has the
following format:

<UL>
<LI><SPAN CLASS="MATH"><I>n</I></SPAN> - the number of clients (<SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2511img1.gif
 ALT="$ \le$">100</SPAN>)
</LI>
<LI>on <SPAN CLASS="MATH"><I>n</I></SPAN> separate lines the number of days (at most 100) each client wishes to rent the boat;
</LI>
<LI>the total number of choices for all clients;
</LI>
<LI>the list of choices in the format <!-- MATH
 $client\_id,\ deadline,\ amount\_of\_money$
 -->
<SPAN CLASS="MATH"><I>client</I><IMG
 WIDTH="26" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2511img1.gif
 ALT="$ \_id$">,&nbsp;<I>deadline</I>,&nbsp;<I>amount</I><IMG
 WIDTH="30" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2511img1.gif
 ALT="$ \_of$"><IMG
 WIDTH="62" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2511img1.gif
 ALT="$ \_money$"></SPAN> where the
<!-- MATH
 $client\_id$
 -->
<SPAN CLASS="MATH"><I>client</I><IMG
 WIDTH="26" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2511img1.gif
 ALT="$ \_id$"></SPAN> is a positive integer in the range <SPAN CLASS="MATH">1...<I>n</I></SPAN> and <!-- MATH
 $deadline \le 100$
 -->
<SPAN CLASS="MATH"><I>deadline</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2511img1.gif
 ALT="$ \le$">100</SPAN>.
</LI>
</UL>
An empty line separates the input data sets.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each data set the program must print (from the beginning of a
line) the maximum profit for that set. The results must be printed
on the standard output. An empty line separates the results of
different data sets.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3
2
2
4
4
1 2 14
3 4 25
2 4 12
3 3 10
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
26
</PRE>


<P>

______________________________________________________
2512||||||false||||||
The art galleries of the new and very futuristic building of the
Center for Balkan Cooperation have the form of polygons (not
necessarily convex). When a big exhibition is organized, watching
over all of the pictures is a big security concern. Your task is
that for a given gallery to write a program which finds the
surface of the area of the floor, from which each point on the
walls of the gallery is visible. On the first figure a map of a
gallery is given in some co-ordinate system. The area wanted is
shaded on the second figure.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2512.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2512.gif
 ALT="\epsfbox{p2512.eps}">
</DIV>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The number of tasks <SPAN CLASS="MATH"><I>T</I></SPAN> that your program have to solve will be on
the first row of the input file. Input data for each task start
with an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $5 \le N \le 1500$
 -->
<SPAN CLASS="MATH">5<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2512.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2512.gif
 ALT="$ \le$">1500</SPAN>. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> rows of the input
will contain the co-ordinates of a vertex of the polygon  two
integers that fit in 16-bit integer type, separated by a single
space. Following the row with the co-ordinates of the last vertex
for the task comes the line with the number of vertices for the
next test and so on.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test you must write on one line the required surface - a
number with exactly two digits after the decimal point (the number
should be rounded to the second digit after the decimal point).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
7
0 0
4 4
4 7
9 7
13 -1
8 -6
4 -4
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
80.00
</PRE>


<P>

______________________________________________________
2513||||||false||||||
Recently, there was an international volleyball championship. Speaking of
volleyball, we are interested in the probability of winning of one or another
team, if we know some information about the teams. Here are the rules of the
game and the necessary information:

<UL>
<LI>the match is played by two teams: A and B;
</LI>
<LI>the first team to win <SPAN CLASS="MATH"><I>K</I></SPAN> games in a match, wins the match;
</LI>
<LI>each game consists of rounds; each round is won by one of the teams, and the
team adds one point to its score for the current game;
</LI>
<LI>the first team to win <SPAN CLASS="MATH"><I>L</I></SPAN> points in a game, wins the game;
</LI>
<LI>if team A serves the ball in a round, it has <SPAN CLASS="MATH"><I>Pa</I>%</SPAN> chance to win the round
(and <!-- MATH
 $(100-Pa)\%$
 -->
<SPAN CLASS="MATH">(100 - <I>Pa</I>)%</SPAN> to loose it);
</LI>
<LI>if team B serves the ball in a round, it has <SPAN CLASS="MATH"><I>Pb</I>%</SPAN> chance to win the round
(and <!-- MATH
 $(100-Pb)\%$
 -->
<SPAN CLASS="MATH">(100 - <I>Pb</I>)%</SPAN> to loose it);
</LI>
<LI>if a round is not the first in a game, the ball in the round is served by
the team that won the last round;
</LI>
<LI>if a game is not the first in a match, the ball in the first round of the
game is served by the team that did not served the ball in the first round
of the previous game;
</LI>
<LI>both teams have an equal chance to serve the ball in the first round of the
very first game of a match.
</LI>
</UL>

So, for given values of <SPAN CLASS="MATH"><I>Pa</I></SPAN>, <SPAN CLASS="MATH"><I>Pb</I></SPAN>, <SPAN CLASS="MATH"><I>K</I></SPAN>, and <SPAN CLASS="MATH"><I>L</I></SPAN>, you have to compute the probability,
    as a percent, for team A to win the match.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
There is one number in the first line  the number of data sets.
   Each data set consists of a single line with four integers on
   it: <SPAN CLASS="MATH"><I>Pa</I></SPAN>, <SPAN CLASS="MATH"><I>Pb</I></SPAN>, <SPAN CLASS="MATH"><I>K</I></SPAN>, and <SPAN CLASS="MATH"><I>L</I></SPAN> (<!-- MATH
 $1 \le K \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2513img1.gif
 ALT="$ \le$"><I>K</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2513img1.gif
 ALT="$ \le$">100</SPAN>, <!-- MATH
 $1 \le L \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2513img1.gif
 ALT="$ \le$"><I>L</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2513img1.gif
 ALT="$ \le$">100</SPAN>).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test you must write on one line the required result with
   exactly one digit after the decimal point (the number should be rounded to
   the first digit after the decimal point).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
100 50 1 3
100 1 1 1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
93.8
99.5
</PRE>


<P>

______________________________________________________
2514||||||false||||||
One of the programming paradigm in parallel processing is the
producer/consumer
paradigm that can be implemented using a system with a ``manager" process and
several ``client" processes. The clients can be producers, consumers, etc.
The manager keeps a trace of client processes. Each process is identified
by its cost that is a strictly positive integer in the range <!-- MATH
 $1 \dots 10000$
 -->
<SPAN CLASS="MATH">1...10000</SPAN>.
The number of processes with the same cost cannot exceed 10000. The queue
is managed according to three types of requests, as follows:

<UL>
<LI><TT>a</TT> <SPAN CLASS="MATH"><I>x</I></SPAN> - add to the queue the process with the cost <SPAN CLASS="MATH"><I>x</I></SPAN>;
</LI>
<LI><TT>r</TT> - remove a process, if possible, from the queue according to the current
manager policy;
</LI>
<LI><TT>p</TT> <SPAN CLASS="MATH"><I>i</I></SPAN> - enforce the policy <SPAN CLASS="MATH"><I>i</I></SPAN> of the manager, where <SPAN CLASS="MATH"><I>i</I></SPAN> is 1 or 2. <B>The default
manager policy is 1</B>
</LI>
<LI><TT>e</TT> - ends the list of requests.
</LI>
</UL>

There are two manager policies:
<DL COMPACT>
<DT>1</DT>
<DD>- remove the minimum cost process
</DD>
<DT>2</DT>
<DD>- remove the maximum cost process
</DD>
</DL>

The manager will print the cost of a removed process only if the
ordinal number of the removed process is in the <B>removal list</B>.

Your job is to write a program that simulates the manager process.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input is from a text file. Each data set in the input has the
following format:

<UL>
<LI>the maximum cost of the processes
</LI>
<LI>the length of the removal list
</LI>
<LI>the removal list - the list of ordinal numbers of the removed processes that
will be displayed; for example 1 4 means that the cost of the first and fourth
removed processes will be displayed
</LI>
<LI>the list of requests each on a separate line.
</LI>
</UL>

Each data set ends with an e request. The data sets are separated
by empty lines.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The program prints on standard output the cost of each process
that is removed, provided that the ordinal number of the remove
request is in the list and the queue is not empty at that moment.
If the queue is empty the program prints <TT>-1</TT>. The results are
printed on separate lines. An empty line separates the results of
different data sets.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
2
1 3
a 2
a 3
r
a 4
p 2
r
a 5
r
e
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
2
5
</PRE>


<P>

______________________________________________________
2515||||||false||||||
You are assigned to design network connections between certain
points in a wide area. You are given a set of points in the area,
and a set of possible routes for the cables that may connect pairs
of points. For each possible route between two points, you are
given the length of the cable that is needed to connect the points
over that route. Note that there may exist many possible routes
between two given points. It is assumed that the given possible
routes connect (directly or indirectly) each two points in the
area.

Your task is to design the network for the area, so that
there is a connection (direct or indirect) between every two
points (i.e., all the points are interconnected, but not
necessarily by a direct cable), and that the total length of the
used cable is minimal.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file consists of a number
of data sets. Each data set defines one required network. The
first line of the set contains two integers: the first defines the
number <SPAN CLASS="MATH"><I>P</I></SPAN> of the given points, and the second the number <SPAN CLASS="MATH"><I>R</I></SPAN> of given
routes between the points. The following <SPAN CLASS="MATH"><I>R</I></SPAN> lines define the given
routes between the points, each giving three integer numbers: the
first two numbers identify the points, and the third gives the
length of the route. The numbers are separated with white spaces.
A data set giving only one number <SPAN CLASS="MATH"><I>P</I> = 0</SPAN> denotes the end of the
input. The data sets are separated with an empty line.

The maximal
number of points is 50. The maximal length of a given route is
100. The number of possible routes is unlimited. The nodes are
identified with integers between 1 and <SPAN CLASS="MATH"><I>P</I></SPAN> (inclusive). The routes
between two points <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN> may be given as <SPAN CLASS="MATH"><I>i</I>&nbsp;<I>j</I></SPAN> or as <SPAN CLASS="MATH"><I>j</I>&nbsp;<I>i</I></SPAN>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each data set, print one number on a separate line that gives
the total length of the cable used for the entire designed
network.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 0

2 3
1 2 37
2 1 17
1 2 68

3 7
1 2 19
2 3 11
3 1 7
1 3 5
2 3 89
3 1 91
1 2 32

5 7
1 2 5
2 3 7
2 4 8
4 5 11
3 5 10
1 5 6
4 2 12

0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
0
17
16
26
</PRE>


<P>

______________________________________________________
2516||||||false||||||
Let's consider so called ``sly number" which is given as an array <SPAN CLASS="MATH"><I>A</I></SPAN>
of <SPAN CLASS="MATH"><I>N</I></SPAN> integers from set {0,1,2}. For example <SPAN CLASS="MATH"><I>A</I>[0] = 1</SPAN>, <SPAN CLASS="MATH"><I>A</I>[1] = 1</SPAN>, <SPAN CLASS="MATH"><I>A</I>[2] = 0</SPAN>
and <SPAN CLASS="MATH"><I>A</I>[3] = 2</SPAN>. A sly number is called `<SPAN CLASS="MATH"><I>ONE</I></SPAN>', if <SPAN CLASS="MATH"><I>A</I>[0] = 1</SPAN> and <SPAN CLASS="MATH"><I>A</I>[<I>I</I>] = 0</SPAN> for
<!-- MATH
 $I=1, 2, \dots ,N-1$
 -->
<SPAN CLASS="MATH"><I>I</I> = 1, 2,..., <I>N</I> - 1</SPAN>.

Consider following operation with two sly numbers <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN> called
`Star Multiplication':
<!-- MATH
 \begin{displaymath}
C[k] = \sum_{i=0}^k   A[i] * B[k-i] + \sum_{i=k+1}^{N-1} A[i] * B[N+k-i].
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>C</I>[<I>k</I>] = <IMG
 WIDTH="27" HEIGHT="69" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2516img1.gif
 ALT="$\displaystyle \sum_{i=0}^{k}$"><I>A</I>[<I>i</I>]*<I>B</I>[<I>k</I> - <I>i</I>] + <IMG
 WIDTH="44" HEIGHT="69" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2516img1.gif
 ALT="$\displaystyle \sum_{i=k+1}^{N-1}$"><I>A</I>[<I>i</I>]*<I>B</I>[<I>N</I> + <I>k</I> - <I>i</I>].
</DIV><P></P>
here <SPAN CLASS="MATH"><I>C</I></SPAN> - the result of the operation, even also presented in an
array - not necessarily sly number. This operation we will denote
by `<TT>*</TT>' symbol.

Moreover, there is also module operation over the results of `Star
Multiplication':
<!-- MATH
 \begin{displaymath}
(C \bmod Q) [i]     =     C[i] \bmod Q,
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
(<I>C</I> mod<I>Q</I>)[<I>i</I>] = <I>C</I>[<I>i</I>] mod <I>Q</I>,
</DIV><P></P>
where <SPAN CLASS="MATH"><I>Q</I></SPAN> is a positive integer.

We are given a sly number <SPAN CLASS="MATH"><I>A</I></SPAN> and a module <SPAN CLASS="MATH"><I>Q</I></SPAN>. We need to find such inverse sly number <SPAN CLASS="MATH"><I>B</I></SPAN>:
<!-- MATH
 \begin{displaymath}
(A * B) \bmod Q   =   ONE.
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
(<I>A</I>*<I>B</I>) mod <I>Q</I> = <I>ONE</I>.
</DIV><P></P>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file contains <SPAN CLASS="MATH"><I>K</I></SPAN> data sets in text format. The first line of this file
contains the number <SPAN CLASS="MATH"><I>K</I></SPAN> of test cases. Each test consists of two lines. First line
contains two integers separated by spaces: <SPAN CLASS="MATH"><I>Q</I></SPAN> (<!-- MATH
 $2 \le Q \le 100$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2516img1.gif
 ALT="$ \le$"><I>Q</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2516img1.gif
 ALT="$ \le$">100</SPAN>) and <SPAN CLASS="MATH"><I>N</I></SPAN> (<!-- MATH
 $5 \le N \le 50$
 -->
<SPAN CLASS="MATH">5<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2516img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2516img1.gif
 ALT="$ \le$">50</SPAN>).

Second line contains <SPAN CLASS="MATH"><I>N</I></SPAN> integers from set {0,1,2} separated by spaces, which present
sly number <SPAN CLASS="MATH"><I>A</I></SPAN>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

The output should be printed on the standard output. It should
contain <SPAN CLASS="MATH"><I>K</I></SPAN> lines - one line for each test case. If a solution
exists, the line should contain the string `<TT>A solution can be
found</TT>' (In the first sample one possible inverse sly number could be `<TT>0 0 1 1 1</TT>').
In case there is no solution, the line should consist of
string `<TT>No solution</TT>'.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2 5
1 0 1 0 1
65 8
1 2 2 2 1 1 2 2
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
A solution can be found
No solution
</PRE>

<P>

______________________________________________________
2517||||||false||||||
<P>There are many scenarios in which we need to know how fast an object is moving. For example, the air-traffic controller in an airport would like to know the speed of a descending plane and give warning if it's too fast or too slow. The speed detection cameras have helped the police to catch the speeding drivers, and so on.<P>In this problem, you are supposed to write a program to recognize the speed of a moving object.<P>Assume that an object is moving on a two dimensional plane, with a constant speed and direction. A camera is taking a shot every second. Assume the camera can record the real situation of the plain - you don't need to worry about the view-angle.<P>The background is black and the only object is white, except some noise introduced by the camera. Anyway, you can assume that the largest continuous white area is always the object. There is always only one largest continuous white area in this problem.<P>Given several pictures taken by the camera, calculate the speed of the object. Output the speed of the object.<P>A picture is represented by a matrix which contains `<TT>.</TT>' or `<TT>x</TT>' only, where `<TT>.</TT>' in the matrix means a black block and `<TT>x</TT>' means a white block. There are at least two pictures.<P>Here are some detailed definitions:<P><UL><LI>The edge of each block is 1 mm (That is, each `<TT>.</TT>' or `<TT>x</TT>' in the matrix represents one 1mm <SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark> 1mm block.) </LI><LI>``The speed of the object" is defined by the moving speed of the center of the object as geometric center :<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="20" HEIGHT="100" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle \left(\vphantom{\frac{\displaystyle \int_{(x,y)\in Object}xdxdy}{...
...\int_{(x,y)\in Object}ydxdy}{\displaystyle \int_{(x,y)\in Object}dxdy} }\right.$"><IMG WIDTH="146" HEIGHT="100" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle {\frac{{\displaystyle \int_{(x,y)\in Object}xdxdy}}{{\displaystyle \int_{(x,y)\in Object}dxdy}}}$">,<IMG WIDTH="145" HEIGHT="100" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle {\frac{{\displaystyle \int_{(x,y)\in Object}ydxdy}}{{\displaystyle \int_{(x,y)\in Object}dxdy}}}$"><IMG WIDTH="20" HEIGHT="100" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle \left.\vphantom{\frac{\displaystyle \int_{(x,y)\in Object}xdxdy}{...
...\int_{(x,y)\in Object}ydxdy}{\displaystyle \int_{(x,y)\in Object}dxdy} }\right)$">.</DIV><P><tex2html_verbatim_mark></P>Anyway, all the objects are made of square blocks. The geometric center of a single square block is the center of the block. So the geometric center of the object can be calculated as:<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="20" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle \left(\vphantom{ \frac{\displaystyle \sum_{i \in Object'sBlock}X[i]}{N}, \frac{\displaystyle \sum_{i\in Object'sBlock}Y[i]}{N} }\right.$"><IMG WIDTH="141" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle {\frac{{\displaystyle \sum_{i \in Object'sBlock}X[i]}}{{N}}}$">,<IMG WIDTH="139" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle {\frac{{\displaystyle \sum_{i\in Object'sBlock}Y[i]}}{{N}}}$"><IMG WIDTH="20" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle \left.\vphantom{ \frac{\displaystyle \sum_{i \in Object'sBlock}X[i]}{N}, \frac{\displaystyle \sum_{i\in Object'sBlock}Y[i]}{N} }\right)$">.</DIV><P><tex2html_verbatim_mark></P>Where <SPAN CLASS="MATH">(<I>X</I>[<I>i</I>], <I>Y</I>[<I>i</I>])</SPAN> <tex2html_verbatim_mark> is the coordinates of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th box's center and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of blocks in the object. </LI><LI>A white area is a set of white blocks. </LI><LI>A white area is called ``continuous white area" if and only if there is always a path connecting two arbitrary blocks in this area. All the blocks in the path are within this area. And each pair of sequential blocks along this path shares a common edge. </LI><LI>The average speed is calculated as described in the physics textbook:<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>AvgSpeed</I> = <IMG WIDTH="188" HEIGHT="125" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle {\frac{{\displaystyle \sum_{t=0}^{T-1}\frac{pos(t+T)-pos(t)}{T}}}{{T}}}$"></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> is over all the discrete observation time from 0 to <SPAN CLASS="MATH"><I>T</I> - 1</SPAN> <tex2html_verbatim_mark>. In this problem, we define <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> as half of the number of observation points. (There are always even number observation points in the test suit.) <SPAN CLASS="MATH"><I>pos</I>(<I>t</I>)</SPAN> <tex2html_verbatim_mark> is defined as the observed position of the object's center in time <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, that is,<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="20" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle \left(\vphantom{ \frac{\displaystyle \sum_{i \in Object'sBlock}X[i]}{N}, \frac{\displaystyle \sum_{i\in Object'sBlock}Y[i]}{N} }\right.$"><IMG WIDTH="141" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle {\frac{{\displaystyle \sum_{i \in Object'sBlock}X[i]}}{{N}}}$">,<IMG WIDTH="139" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle {\frac{{\displaystyle \sum_{i\in Object'sBlock}Y[i]}}{{N}}}$"><IMG WIDTH="20" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2517img1.png ALT="$\displaystyle \left.\vphantom{ \frac{\displaystyle \sum_{i \in Object'sBlock}X[i]}{N}, \frac{\displaystyle \sum_{i\in Object'sBlock}Y[i]}{N} }\right)$"></DIV><P><tex2html_verbatim_mark></P>calculated from the <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>-th image. </LI><LI>The positive direction of <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> axle is from the left to the right; the positive direction of <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> axle is from the top to the bottom. </LI></UL><P>Note that you may get different shape of an object in different pictures.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a file containing several data cases. Each case begins with a line, with only two numbers: <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>. Then follows by several <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>k</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> columns, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> rows) matrices. Each matrix represents one picture taken by the camera. There are at least two pictures. There is always a separator line between each matrix inside a data set. The separator line is a line with <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> `<TT>-</TT>'s. The last matrix of a data set is followed by a terminating line - a line with <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> `<TT>=</TT>'s.<P>A line with two zeros presents the end of the input file.<P>The picture size is at most 256 <SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark> 256. There are at most 256 pictures in one test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line with two numbers which represent the speed of the object in <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> direction respectively. The accuracy is up to 2 digits after decimal point. The speeds of the objects are in mm/s.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 5
.........x
.....xxx.x
....xxx...
.....xxx..
x.........
----------
.........x
.........x
...xxx....
..xxx.....
x..xxx....
==========
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
-2.00 1.00
</PRE><P>
______________________________________________________
2518||||||false||||||
<P>Random Algorithms are very popular now. For example, it's widely used in cryptography (primality test and etc.).<P>Different from the normal definite algorithms, random algorithms may not have a definite running trace. Sometimes, it comes to some point, flips a coin, and decides where to go according to the result of the coin flipping.<P>The following command may be such a point:<P><DL COMPACT><DT></DT><DD><TT>x=random(1); // random(1) returns a random number from [0..1) uniformly</TT></DD><DT></DT><DD><TT>IF x &gt; 0.3 GOTO ...</TT></DD></DL><P>When the random program comes here, it generates a random number and assigns it to <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, if <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is greater than 0.3 it goes to somewhere; otherwise, it goes straight ahead. So, the program goes somewhat like a drunk man walking a long the street. You can't predict where the program should go beforehand.<P>Your task in this problem is to create a simple Random Program Evaluator, which can calculate the expected running time of some random algorithms.<P>A simple random program is described as follows:<P><OL><LI>There are several reserved words: ``<TT>NOP</TT>", ``<TT>IF</TT>", ``<TT>GOTO</TT>", ``<TT>END</TT>", ``<TT>PROC</TT>", ``<TT>PROG_START</TT>", and ``<TT>PROG_END</TT>", case is sensitive. </LI><LI>A program starts with ``<TT>PROG_START</TT>" and ends with ``<TT>PROG_END</TT>". </LI><LI>A program may have one or more procedures. </LI><LI>Each procedure starts with ``<TT>PROC</TT> <SPAN CLASS="MATH">[<I>name</I>]</SPAN> <tex2html_verbatim_mark>". <SPAN CLASS="MATH">[<I>name</I>]</SPAN> <tex2html_verbatim_mark> is the name of this procedure. It can be any string that only contains characters or numbers, except reserved words. </LI><LI>A procedure ends with ``<TT>END;</TT>" </LI><LI>A procedure may have one or more commands (``<TT>END;</TT>" is not a command). It takes one time unit to execute one command. </LI><LI>A command is of one of the following formats:<UL><LI>``<TT>NOP;</TT>" The program will go to execute the next line in the next time unit. </LI><LI>``<TT>IF x&gt; <SPAN CLASS="MATH">[<I>threshold</I>]</SPAN> <tex2html_verbatim_mark> GOTO <SPAN CLASS="MATH">[<I>line</I>&nbsp;<I>number</I>]</SPAN> <tex2html_verbatim_mark>;</TT>". The program takes a value <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> from [0..1) randomly. If <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is larger than the <SPAN CLASS="MATH">[<I>threshold</I>]</SPAN> <tex2html_verbatim_mark>, the program will execute the <SPAN CLASS="MATH">[<I>line</I>&nbsp;<I>number</I>]</SPAN> <tex2html_verbatim_mark> in the next time unit, otherwise, the program execute the next line in the next time unit. </LI><LI>``<TT>IF x&lt; <SPAN CLASS="MATH">[<I>threshold</I>]</SPAN> <tex2html_verbatim_mark> GOTO <SPAN CLASS="MATH">[<I>line</I>&nbsp;<I>number</I>]</SPAN> <tex2html_verbatim_mark>;</TT>". The program takes a value <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> from [0..1) randomly. If <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is smaller than the <SPAN CLASS="MATH">[<I>threshold</I>]</SPAN> <tex2html_verbatim_mark>, the program will execute the <SPAN CLASS="MATH">[<I>line</I>&nbsp;<I>number</I>]</SPAN> <tex2html_verbatim_mark> in the next time unit, otherwise, the program execute the next line in the next time unit. </LI><LI>``<TT>IF x&gt; <SPAN CLASS="MATH">[<I>threshold</I>]</SPAN> <tex2html_verbatim_mark> PROC <SPAN CLASS="MATH">[<I>procedure</I>&nbsp;<I>name</I>]</SPAN> <tex2html_verbatim_mark>;</TT>". The program takes a value <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> from [0..1) randomly. If <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is larger than the <SPAN CLASS="MATH">[<I>threshold</I>]</SPAN> <tex2html_verbatim_mark>, the program will execute the procedure with <SPAN CLASS="MATH">[<I>procedure</I>&nbsp;<I>name</I>]</SPAN> <tex2html_verbatim_mark>, then come back to the next line after the current command in this procedure. </LI><LI>``<TT>IF x&lt; <SPAN CLASS="MATH">[<I>threshold</I>]</SPAN> <tex2html_verbatim_mark> PROC <SPAN CLASS="MATH">[<I>procedure</I>&nbsp;<I>name</I>]</SPAN> <tex2html_verbatim_mark>;</TT>". The program takes a value <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> from [0..1) randomly. If <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is smaller than the <SPAN CLASS="MATH">[<I>threshold</I>]</SPAN> <tex2html_verbatim_mark>, the program will execute the procedure with <SPAN CLASS="MATH">[<I>procedure</I>&nbsp;<I>name</I>]</SPAN> <tex2html_verbatim_mark>, then come back to the next line after the current command in this procedure. </LI></UL></LI><LI>The program finishes one procedure whenever it sees the ``<TT>END;</TT>". </LI><LI>In each procedure, the line number starts with 1. That is, the first command in a procedure is ``line 1", the second is ``line 2". ``<TT>END;</TT>" is the last line in a procedure. </LI></OL><P>The Evaluator takes one random program as input; return the expected runtime of some procedures upon requests, with an accuracy of 3 digits after the decimal point.<P>To make your lives easier, we have the following simplification:<P><OL><LI>The condition of ``<TT>IF</TT>" is always a comparison between a random variable and a constant threshold. </LI><LI>Random Variables in different ``<TT>IF</TT>" clause are independent. Even there may be more than one ``<TT>IF x&gt;0.5</TT>" in one procedure, the `<SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>'s in different commands are independent. </LI><LI>There is no loop-reference (including indirect loop reference) between different procedures. </LI><LI>For each command, the probability that the program starts from this command and ends at the end of the procedure is positive. That means, you can finally reach the end of a procedure from any command. </LI><LI>There are more than 1 and less than 100 procedures in a program </LI><LI>All the strings in this problem are within 100 characters. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains one random program described as above with one or more random procedures, and one or more requests. The requests are following the program. Each request is a line with one string, which is the name of the requested procedure. The request list ends with a line containing ``<TT>REQUEST_END</TT>" (there is no procedure with a name as ``<TT>REQUEST_END</TT>")<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each request, output a line with a number presents the expected running time of the requested procedure. The accuracy is up to 3 digits after decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
PROG_START
PROC A
IF x&gt;0.5 GOTO 3;
NOP;
END;
PROC B
IF x&lt;0.5 PROC A;
NOP;
END;
PROG_END
B
A
REQUEST_END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2.750
1.500
</PRE><P>
______________________________________________________
2519||||||false||||||
<P>Assume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>.<P>We use Cartesian coordinate system, defining the coasting is the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-axis. The sea side is above <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-<SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates.<P><DIV ALIGN="CENTER"><IMG WIDTH="602" HEIGHT="364" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2519.gif ALT="\epsfbox{p2519.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of each case contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2519.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2519.gif ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of islands in the sea and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> is the distance of coverage of the radar installation. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines each containing two integers representing the coordinate of the position of each island. Then a blank line follows to separate the cases.<P>The input is terminated by a line containing pair of zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output one line consisting of the test case number followed by the minimal number of radar installations needed. `<TT>-1</TT>' installation means no solution for that case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 2
1 2
-3 1
2 1

1 2
0 2

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2
Case 2: 1
</PRE><P>
______________________________________________________
2520||||||false||||||
<P>During winter, the most hungry and severe time, Holedox sleeps in its lair. When spring comes, Holedox wakes up, moves to the exit of its lair, comes out, and begins its new life.<P>Holedox is a special snake, but its body is not very long. Its lair is like a maze and can be imagined as a rectangle with <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>m</I></SPAN> <tex2html_verbatim_mark> squares. Each square is either a stone or a vacant place, and only vacant places allow Holedox to move in. Using ordered pair of row and column number of the lair, the square of exit located at (1,1).<P>Holedox's body, whose length is <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, can be represented block by block. And let <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB>(<I>r</I><SUB>1</SUB>, <I>c</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>B</I><SUB>2</SUB>(<I>r</I><SUB>2</SUB>, <I>c</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> .. <SPAN CLASS="MATH"><I>B</I><SUB>L</SUB>(<I>r</I><SUB>L</SUB>, <I>c</I><SUB>L</SUB>)</SPAN> <tex2html_verbatim_mark> denote its <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> length body, where <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is adjacent to <SPAN CLASS="MATH"><I>B</I><SUB>i+1</SUB></SPAN> <tex2html_verbatim_mark> in the lair for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>L</I> - 1</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is its head, <SPAN CLASS="MATH"><I>B</I><SUB>L</SUB></SPAN> <tex2html_verbatim_mark> is its tail.<P>To move in the lair, Holedox chooses an adjacent vacant square of its head, which is neither a stone nor occupied by its body. Then it moves the head into the vacant square, and at the same time, each other block of its body is moved into the square occupied by the corresponding previous block.<P>For example, in the Figure 2, at the beginning the body of Holedox can be represented as <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB>(4, 1)<I>B</I><SUB>2</SUB>(4, 2)<I>B</I><SUB>3</SUB>(3, 2)<I>B</I><SUB>4</SUB>(3, 1)</SPAN> <tex2html_verbatim_mark>. During the next step, observing that <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB>'(5, 1)</SPAN> <tex2html_verbatim_mark> is the only square that the head can be moved into, Holedox moves its head into <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB>'(5, 1)</SPAN> <tex2html_verbatim_mark>, then moves <SPAN CLASS="MATH"><I>B</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>B</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>B</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>B</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>. Thus after one step, the body of Holedox locates in <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB>(5, 1)<I>B</I><SUB>2</SUB>(4, 1)<I>B</I><SUB>3</SUB>(4, 2)<I>B</I><SUB>4</SUB>(3, 2)</SPAN> <tex2html_verbatim_mark> (see the Figure 3).<P>Given the map of the lair and the original location of each block of Holedox's body, your task is to write a program to tell the minimal number of steps that Holedox has to take to move its head to reach the square of exit (1,1).<P><IMG WIDTH="377" HEIGHT="339" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=3.25in
\epsfbox{p2520a.eps}
\end{center}}$"><IMG WIDTH="377" HEIGHT="339" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=3.25in
\epsfbox{p2520b.eps}
\end{center}}$"><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of each case contains three integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$">8)</SPAN> <tex2html_verbatim_mark>, representing the number of rows in the lair, the number of columns in the lair and the body length of Holedox, respectively. The next <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> lines contain a pair of row and column number each, indicating the original position of each block of Holedox's body, from <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB>(<I>r</I><SUB>1</SUB>, <I>c</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>B</I><SUB>L</SUB>(<I>r</I><SUB>L</SUB>, <I>c</I><SUB>L</SUB>)</SPAN> <tex2html_verbatim_mark> orderly, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>r</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>c</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>L</I></SPAN> <tex2html_verbatim_mark>. The next line contains an integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, representing the number of squares of stones in the lair. The following <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> lines contain a pair of row and column number each, indicating the location of each square of stone. Then a blank line follows to separate the cases.<P>The input is terminated by a line with three zeros.<P><P><BR><B>Note:</B> <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is always adjacent to <SPAN CLASS="MATH"><I>B</I><SUB>i+1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \le$"><I>L</I> - 1)</SPAN> <tex2html_verbatim_mark> and exit square (1,1) will never be a stone.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output one line containing the test case number followed by the minimal number of steps Holedox has to take. `<TT>-1</TT>' means no solution for that case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 6 4
4 1
4 2
3 2
3 1
3
2 3
3 3
3 4

4 4 4
2 3
1 3
1 4
2 4
4
2 1
2 2
3 4
4 2

0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 9
Case 2: -1
</PRE><P><P><BR><B>Note:</B> In the above sample case, the head of Holedox can follows <SPAN CLASS="MATH">(4, 1) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \rightarrow$"> (5, 1) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \rightarrow$"> (5, 2) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \rightarrow$"> (5, 3) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \rightarrow$"> (4, 3) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \rightarrow$"> (4, 2) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \rightarrow$"> (4, 1) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \rightarrow$"> (3, 1) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \rightarrow$"> (2, 1) <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2520img1.png ALT="$ \rightarrow$"> (1, 1)</SPAN> <tex2html_verbatim_mark> to reach the square of exit with minimal number of step, which is nine.<P>
______________________________________________________
2521||||||false||||||
<P>Suppose there are <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> people, including you, playing a special card game. At the beginning, each player receives <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> cards. The pip of a card is a positive integer which is at most <SPAN CLASS="MATH"><I>N</I>*<I>M</I></SPAN> <tex2html_verbatim_mark>. And there are no two cards with the same pip. During a round, each player chooses one card to compare with others. The player whose card with the biggest pip wins the round, and then the next round begins. After <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> rounds, when all the cards of each player have been chosen, the player who has won the most rounds is the winner of the game.<P>Given your cards received at the beginning, write a program to tell the maximal number of rounds that you may at least win during the whole game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of each case contains two integers <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2521img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2521img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2521img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2521img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark>, representing the number of players and the number of cards each player receives at the beginning of the game, respectively. This followed by a line with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> positive integers, representing the pips of cards you received at the beginning. Then a blank line follows to separate the cases.<P>The input is terminated by a line with two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line consisting of the test case number followed by the number of rounds you will at least win during the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 5
1 7 2 10 9

6 11
62 63 54 66 65 61 57 56 50 53 48

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2
Case 2: 4
</PRE><P>
______________________________________________________
2522||||||false||||||
<P>In 2100, ACM chocolate will be one of the favorite foods in the world.<P>``Green, orange, brown, red <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>", colorful sugar-coated shell maybe is the most attractive feature of ACM chocolate. How many colors have you ever seen? Nowadays, it's said that the ACM chooses from a palette of twenty-four colors to paint their delicious candy bits.<P>One day, Sandy played a game on a big package of ACM chocolates which contains five colors (green, orange, brown, red and yellow). Each time he took one chocolate from the package and placed it on the table. If there were two chocolates of the same color on the table, he ate both of them. He found a quite interesting thing that in most of the time there were always 2 or 3 chocolates on the table.<P>Now, here comes the problem, if there are <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> colors of ACM chocolates in the package (colors are distributed evenly), after <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> chocolates are taken from the package, what's the probability that there is exactly <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> chocolates on the table? Would you please write a program to figure it out?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file for this problem contains several test cases, one per line.<P>For each case, there are three non-negative integers: <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2522img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>N</I>, <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2522img1.png ALT="$ \le$">1000000)</SPAN> <tex2html_verbatim_mark>.<P>The input is terminated by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be one real number per line, shows the probability for each case, round to three decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 100 2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.625
</PRE><P>
______________________________________________________
2523||||||false||||||
<P>As we all know, machine scheduling is a very classical problem in computer science and has been studied for a very long history. Scheduling problems differ widely in the nature of the constraints that must be satisfied and the type of schedule desired. Here we consider a 2-machine scheduling problem.<P>There are two machines <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>. Machine <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> has <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> kinds of working modes, which is called <SPAN CLASS="MATH"><I>mode</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>mode</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>mode</I><SUB>n-1</SUB></SPAN> <tex2html_verbatim_mark>, likewise machine <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> has <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> kinds of working modes, <SPAN CLASS="MATH"><I>mode</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>mode</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>mode</I><SUB>m-1</SUB></SPAN> <tex2html_verbatim_mark>. At the beginning they are both work at <SPAN CLASS="MATH"><I>mode</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>.<P>For <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> jobs given, each of them can be processed in either one of the two machines in particular mode. For example, job 0 can either be processed in machine <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> at <SPAN CLASS="MATH"><I>mode</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> or in machine <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> at <SPAN CLASS="MATH"><I>mode</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark>, job 1 can either be processed in machine <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> at <SPAN CLASS="MATH"><I>mode</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> or in machine <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> at <SPAN CLASS="MATH"><I>mode</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark>, and so on. Thus, for job i, the constraint can be represent as a triple <SPAN CLASS="MATH">(<I>i</I>, <I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark>, which means it can be processed either in machine <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> at <SPAN CLASS="MATH"><I>mode</I><SUB>x</SUB></SPAN> <tex2html_verbatim_mark>, or in machine <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> at <SPAN CLASS="MATH"><I>mode</I><SUB>y</SUB></SPAN> <tex2html_verbatim_mark>.<P>Obviously, to accomplish all the jobs, we need to change the machine's working mode from time to time, but unfortunately, the machine's working mode can only be changed by restarting it manually. By changing the sequence of the jobs and assigning each job to a suitable machine, please write a program to minimize the times of restarting machines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file for this program consists of several configurations. The first line of one configuration contains three positive integers: <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(n, m < 100)$
 --><SPAN CLASS="MATH">(<I>n</I>, <I>m</I> &lt; 100)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(k < 1000)$
 --><SPAN CLASS="MATH">(<I>k</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines give the constrains of the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> jobs, each line is a triple: <SPAN CLASS="MATH"><I>i</I>, <I>x</I>, <I>y</I></SPAN> <tex2html_verbatim_mark>.<P>The input will be terminated by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be one integer per line, which means the minimal times of restarting machine.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 5 10
0 1 1
1 1 2
2 1 3
3 1 4
4 2 1
5 2 2
6 2 3
7 2 4
8 3 3
9 4 3
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
</PRE><P>
______________________________________________________
2524||||||false||||||
<P>Mileage program of ACM (Airline of Charming Merlion) is really nice for the travelers flying frequently. Once you complete a flight with ACM, you can earn ACMPerk miles in your ACM Mileage Bank depended on mileage you actual fly. In addition, you can use the ACMPerk mileage in your Mileage Bank to exchange free flight ticket of ACM in future.<P>The following table helps you calculate how many ACMPerk miles you can earn when you fly on ACM.<P><P><BR><P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>When you fly ACM</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Class Code</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>You'll earn</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>First Class</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Actual mileage + 100% mileage Bonus</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Business Class</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Actual mileage + 50% mileage Bonus</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Economy Class</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Y</TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-500 miles</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>500 miles</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>500+ miles</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Actual mileage</TD></TR></TBODY></TABLE></DIV><P><P><BR>It's shown that your ACMPerk mileage consists of two parts. One is your actual flight mileage (the minimum ACMPerk mileage for Economy Class for one flight is 500 miles), the other is the mileage bonus (its accuracy is up to 1 mile) when you fly in Business Class and First Class. For example, you can earn 1329 ACMPerk miles, 1994 ACMPerk miles and 2658 ACMPerk miles for Y, B or F class respectively for the fly from Beijing to Tokyo (the actual mileage between Beijing and Tokyo is 1329 miles). When you fly from Shanghai to Wuhan, you can earn ACMPerk 500 miles for economy class and ACMPerk 650 miles for business class (the actual mileage between Shanghai and Wuhan is 433 miles).<P>Your task is to help ACM build a program for automatic calculation of ACMPerk mileage.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several data cases. Each case has many flight records, each per line. The flight record is in the following format:<P><P><BR><SPAN CLASS="MATH"><I>OriginalCity</I>&nbsp;<I>DistanceCity</I>&nbsp;<I>ActualMiles</I>&nbsp;<I>ClassCode</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Each case ends with a line of one zero.<P>A line of one `<TT>#</TT>' presents the end of the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output the summary of ACMPerk mileages for each test case, one per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
Beijing Tokyo 1329 F
Shanghai Wuhan 433 Y
0
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3158

______________________________________________________
2525||||||false||||||
<P>A rooted tree is a well-known data structure in computer science and engineering. An example is shown below:<P><DIV ALIGN="CENTER"><IMG WIDTH="435" HEIGHT="384" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2525.jpg ALT="\epsfbox{p2525.eps}"> <tex2html_verbatim_mark></DIV><P>In the figure, each node is labeled with an integer from <SPAN CLASS="MATH">{1, 2,..., 16}</SPAN> <tex2html_verbatim_mark>. Node 8 is the root of the tree. Node <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is an <SPAN CLASS="textit">ancestor</SPAN> of node <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> if node <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is in the path between the root and node <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>. For example, node 4 is an ancestor of node 16. Node 10 is also an ancestor of node 16. As a matter of fact, nodes 8, 4, 10, and 16 are the ancestors of node 16. Remember that a node is an ancestor of itself. Nodes 8, 4, 6, and 7 are the ancestors of node 7. A node <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is called a <SPAN CLASS="textit">common ancestor</SPAN> of two different nodes <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> if node <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is an ancestor of node <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and an ancestor of node <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark>. Thus, nodes 8 and 4 are the common ancestors of nodes 16 and 7. A node <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is called the <SPAN CLASS="textit">nearest common ancestor</SPAN> of nodes <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is a common ancestor of <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> and nearest to <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> among their common ancestors. Hence, the nearest common ancestor of nodes 16 and 7 is node 4. Node 4 is nearer to nodes 16 and 7 than node 8 is.<P><P><BR>For other examples, the nearest common ancestor of nodes 2 and 3 is node 10, the nearest common ancestor of nodes 6 and 13 is node 8, and the nearest common ancestor of nodes 4 and 12 is node 4. In the last example, if <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> is an ancestor of <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark>, then the nearest common ancestor of <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>.<P>Write a program that finds the nearest common ancestor of two distinct nodes in a tree.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> <tex2html_verbatim_mark> is given in the first line of the input file. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> , the number of nodes in a tree, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2525.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2525.jpg ALT="$ \le$">10, 000</SPAN> <tex2html_verbatim_mark>. The nodes are labeled with integers <SPAN CLASS="MATH">1, 2,..., <I>N</I></SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> lines contains a pair of integers that represent an edge the first integer is the parent node of the second integer. Note that a tree with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> nodes has exactly <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> edges. The last line of each test case contains two distinct integers whose nearest common ancestor is to be computed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line should contain the integer that is the nearest common ancestor.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                
16                               
1 14                              
8 5 
10 16 
5 9 
4 6 
8 4 
4 10 
1 13 
6 15 
10 11 
6 7 
10 2 
16 3 
8 1 
16 12 
16 7 
5 
2 3 
3 4 
3 1 
1 5 
3 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
3
</PRE><P>
______________________________________________________
2526||||||false||||||
<P>`` <SPAN CLASS="MATH">6 <TT>x</TT> 9 = 42</SPAN> <tex2html_verbatim_mark>" is not true for base 10, but is true for base 13. That is, <SPAN CLASS="MATH">6<SUB>(13)</SUB> <TT>x</TT> 9<SUB>(13)</SUB> = 42<SUB>(13)</SUB></SPAN> <tex2html_verbatim_mark> because <SPAN CLASS="MATH">42<SUB>(13)</SUB> = 4 <TT>x</TT> 13<SUP>1</SUP> +2 <TT>x</TT> 13<SUP>0</SUP> = 54<SUB>(10)</SUB></SPAN> <tex2html_verbatim_mark>.<P><P><BR>You are to write a program which inputs three integers <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and determines the base <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2526img1.png ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2526img1.png ALT="$ \le$">16)</SPAN> <tex2html_verbatim_mark> for which <SPAN CLASS="MATH"><I>p</I> <TT>x</TT> <I>q</I> = <I>r</I></SPAN> <tex2html_verbatim_mark>. If there are many candidates for <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, output the smallest one. For example, let <SPAN CLASS="MATH"><I>p</I> = 11</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I> = 11</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>r</I> = 121</SPAN> <tex2html_verbatim_mark>. Then we have <SPAN CLASS="MATH">11<SUB>(3)</SUB> <TT>x</TT> 11<SUB>(3)</SUB> = 121<SUB>(3)</SUB></SPAN> <tex2html_verbatim_mark> because <SPAN CLASS="MATH">11<SUB>(3)</SUB> = 1 <TT>x</TT> 3<SUP>1</SUP> +1 <TT>x</TT> 3<SUP>0</SUP> = 4<SUB>(10)</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">121<SUB>(3)</SUB> = 1 <TT>x</TT> 3<SUP>2</SUP> +2 <TT>x</TT> 3<SUP>1</SUP> +1 <TT>x</TT> 3<SUP>0</SUP> = 16<SUB>(10)</SUB></SPAN> <tex2html_verbatim_mark>. For another base such as 10, we also have <SPAN CLASS="MATH">11<SUB>(10)</SUB> <TT>x</TT> 11<SUB>(10)</SUB> = 121<SUB>(10)</SUB></SPAN> <tex2html_verbatim_mark>. In this case, your program should output 3 which is the smallest base. If there is no candidate for <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, output 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> <tex2html_verbatim_mark> is given in the first line of the input file. Each test case consists of three integers <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> in a line. All digits of <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> are numeric digits and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2526img1.png ALT="$ \le$"><I>p</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2526img1.png ALT="$ \le$">1, 000, 000</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line should contain one integer which is the smallest base for which <SPAN CLASS="MATH"><I>p</I> <TT>x</TT> <I>q</I> = <I>r</I></SPAN> <tex2html_verbatim_mark>. If there is no such base, your program should output 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                                           
6 9 42                                      
11 11 121                                   
2 2 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
13 
3 
0
</PRE><P>
______________________________________________________
2527||||||false||||||
<P>There are <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2527img1.png ALT="$ \ge$">2</SPAN> <tex2html_verbatim_mark> people labeled as <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark> such that each of them is either a truth-teller or a liar, and the number of liars is less than or equal to <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> for some <SPAN CLASS="MATH"><I>t</I>(<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2527img1.png ALT="$ \le$"><I>n</I>)</SPAN> <tex2html_verbatim_mark>.<P>Each person <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> can test another person <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> in order to identify person <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> as truth-teller or liar by giving some question to person <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>. The outcome <SPAN CLASS="MATH"><I>a</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark> of the test applied by person <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to person <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is 1 (0) if person <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> identifies person <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> as a liar (truth-teller). The test outcome <SPAN CLASS="MATH"><I>a</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark> is reliable if and only if the testing person <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is a truth-teller. That is, the test outcome <SPAN CLASS="MATH"><I>a</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark> is unreliable if and only if the testing person <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is a liar. The following table shows the value of the test outcome <SPAN CLASS="MATH"><I>a</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark> when person <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> tests person <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>.<P><IMG WIDTH="231" HEIGHT="222" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2527img1.png ALT="$\textstyle \parbox{.33\textwidth}{
\begin{center}
\mbox{}
\epsfbox{p2527a.eps}
\end{center}}$"><IMG WIDTH="371" HEIGHT="168" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2527img1.png ALT="$\textstyle \parbox{.66\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert ...
...&amp; 0 or 1 \\
\hline
liar &amp; liar &amp; 0 or 1 \\
\hline
\end{tabular}\end{center}}$"><P><P><BR>Testing is performed circularly as follows: person 1 tests person 2, person 2 tests person 3, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> , person <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> tests person <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, and person <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> tests person 1. From the test outcomes, some persons are definitely liars, but some others may or may not be liars. From <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, and the test outcomes, determine the persons who are definitely liars.<P><P><BR>For example, let <SPAN CLASS="MATH"><I>n</I> = 5</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I> = 2</SPAN> <tex2html_verbatim_mark>, and the test outcomes <SPAN CLASS="MATH">(<I>a</I><SUB>1, 2</SUB>, <I>a</I><SUB>2, 3</SUB>, <I>a</I><SUB>3, 4</SUB>, <I>a</I><SUB>4, 5</SUB>, <I>a</I><SUB>5, 1</SUB>)</SPAN> <tex2html_verbatim_mark> be (0,1,1,0,0). In the following figure, each circle represents a person, and the label on the edge <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> represents the test outcome <SPAN CLASS="MATH"><I>a</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="330" HEIGHT="292" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2527img1.png ALT="\epsfbox{p2527b.eps}"> <tex2html_verbatim_mark></DIV><P>In this example, person 3 should be a liar because if not, person 4 is liar and persons 2 is liar, thus persons 1, 5, and 4 become liars, which contradicts the condition that the number of liars does not exceed <SPAN CLASS="MATH"><I>t</I> = 2</SPAN> <tex2html_verbatim_mark>. Therefore person 3 is determined as a definite liar. However, because both {person 3, person 4} and {person 3} can be sets of liars, we can't determine that person 4 is a liar.<P>Given <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (the number of persons), <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> (the maximum number of liars), and the set of test outcomes, write a program to find all the persons who are definitely liars. It is assumed that the given set of outcomes is one that results from some liars who are less than or equal to <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> <tex2html_verbatim_mark> is given in the first line of the input file. Each test case consists of two lines. The first line has two integers. The first integer is <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2527img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2527img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, the number of persons, and the second integer is <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2527img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2527img1.png ALT="$ \le$"><I>n</I>)</SPAN> <tex2html_verbatim_mark>, the maximum number of liars. The second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> 0 or 1's that represent <SPAN CLASS="MATH"><I>a</I><SUB>1, 2</SUB>, <I>a</I><SUB>2, 3</SUB>, <I>a</I><SUB>3, 4</SUB>,..., <I>a</I><SUB>(n-1), n</SUB>, <I>a</I><SUB>n, 1</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line should contain two integers. The first integer is the number of all the definite liars. The second integer is the smallest label of definite liars. In case that the number of definite liars is equal to 0, then the second integer should be 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                                 
5 2                               
0 1 1 0 0                         
7 2  
0 0 1 0 0 1 1 
9 8 
1 0 0 0 0 1 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3 
2 4                                      
0 0
</PRE><P>
______________________________________________________
2528||||||false||||||
<P>
A pleasant headache that parents have every year is preparing Christmas gifts for their children. Because each child 
envies each other having seen what others received, the parents have to prepare gifts so that no child should envy 
any other child. 

<P>
Before a husband and wife go for Christmas shopping, they announce to their children a fixed set of gift candidates 
and declare that each child will receive a subset of the candidates. The children then respond to the parents with 
conditions  for  them  to  be  happy.  Each  child's  condition  is  relatively  defined  in  terms  of  the  gifts  that  other siblings would have. The goal of the parents is to satisfy all their children's conditions with the smallest such gift set for each child. 

<P>

<P>
<BR>
Each child's condition is always expressed as a conjunction: 

<P>
<DIV ALIGN="CENTER">
I need at least ( <!-- MATH
 $\alpha_{1}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="23" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \alpha_{{1}}^{}$"></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $\alpha_{2}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="23" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \alpha_{{2}}^{}$"></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $\alpha_{k}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="24" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \alpha_{{k}}^{}$"></SPAN>
<tex2html_verbatim_mark>) 

</DIV>

<P>
where each <!-- MATH
 $\alpha_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="21" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \alpha_{{i}}^{}$"></SPAN>
<tex2html_verbatim_mark> is either 
<DL>
<DT><STRONG>[type 1]</STRONG></DT>
<DD>a constant subset of the gift candidates, or 
</DD>
<DT><STRONG>[type 2]</STRONG></DT>
<DD>one sibling's name (meaning his/her gifts), or 
</DD>
<DT><STRONG>[type 3]</STRONG></DT>
<DD>``common-things-of" two <!-- MATH
 $\alpha_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="21" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \alpha_{{i}}^{}$"></SPAN>
<tex2html_verbatim_mark>'s of type 1 or 2 (meaning the gifts that are common among the two), or 
</DD>
<DT><STRONG>[type 4]</STRONG></DT>
<DD>one sibling's name followed by ``except-for" a constant subset of the gift candidates (meaning the sibling's gifts excluding those in the constant subset).
</DD>
</DL>   

<P>
For example, for three children <SPAN CLASS="MATH">{<I>X</I>, <I>Y</I>, <I>Z</I>}</SPAN>
<tex2html_verbatim_mark> and for three candidates <!-- MATH
 $\{a, b, c\}$
 -->
<SPAN CLASS="MATH">{<I>a</I>, <I>b</I>, <I>c</I>}</SPAN>
<tex2html_verbatim_mark> for gifts, let the condition for each child be: 
<DL COMPACT>
<DT></DT>
<DD><SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> needs at least  (<SPAN CLASS="MATH">{<I>a</I>, <I>b</I>}</SPAN>
<tex2html_verbatim_mark> and common-things-of <SPAN CLASS="MATH">(<I>Y</I>, <I>Z</I>)</SPAN>
<tex2html_verbatim_mark>) 
</DD>
<DT></DT>
<DD><SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark> needs at least  (common-things-of <!-- MATH
 $(Z, \{b, c\})$
 -->
<SPAN CLASS="MATH">(<I>Z</I>,{<I>b</I>, <I>c</I>})</SPAN>
<tex2html_verbatim_mark>) 
</DD>
<DT></DT>
<DD><SPAN CLASS="MATH"><I>Z</I></SPAN>
<tex2html_verbatim_mark> needs at least  (<SPAN CLASS="MATH">{<I>a</I>}</SPAN>
<tex2html_verbatim_mark> and (<SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> except-for <SPAN CLASS="MATH">{<I>c</I>})</SPAN>
<tex2html_verbatim_mark>) 
</DD>
</DL>

<P>
Then the smallest gifts for each child that satisfy his/her condition are <SPAN CLASS="MATH">{<I>a</I>, <I>b</I>}</SPAN>
<tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH">{<I>b</I>}</SPAN>
<tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH">{<I>a</I>, <I>b</I>}</SPAN>
<tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>Z</I></SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN>
<tex2html_verbatim_mark> is given in the first line of the input file.

<P>
Gift candidates are numbered from  1 to  <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>. Children are numbered from 1 to <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le m \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>. 

<P>
The input is a sequence of non-empty lines: 
<DL COMPACT>
<DT></DT>
<DD>The first line has the number <SPAN CLASS="MATH">(<I>T</I>)</SPAN>
<tex2html_verbatim_mark> of test cases. The sequence of test cases is from the second line. 
</DD>
<DT></DT>
<DD>The first line of each test case has two integers, the number <SPAN CLASS="MATH">(<I>n</I>)</SPAN>
<tex2html_verbatim_mark> of gift candidates followed by the number  <SPAN CLASS="MATH">(<I>m</I>)</SPAN>
<tex2html_verbatim_mark> of children. 
</DD>
<DT></DT>
<DD>The next lines show the sequence of children's conditions in the order of child 1's, child 2's, <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark>, child <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>'s. 
</DD>
<DT></DT>
<DD>Each child's condition is expressed as follows:  
<DL COMPACT>
<DT>--</DT>
<DD>The first line has two integers, the child's identification and the number of <!-- MATH
 $\alpha_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="21" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \alpha_{{i}}^{}$"></SPAN>
<tex2html_verbatim_mark>'s.  
</DD>
<DT>--</DT>
<DD>From the second line, one line represents one part (the  <!-- MATH
 $\alpha_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="21" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \alpha_{{i}}^{}$"></SPAN>
<tex2html_verbatim_mark>) of the child's condition. Each line for   <!-- MATH
 $\alpha_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="21" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2528img1.png
 ALT="$ \alpha_{{i}}^{}$"></SPAN>
<tex2html_verbatim_mark> starts with its type: `<TT>-1</TT>' for type 1, `<TT>-2</TT>' for type 2, `<TT>-3</TT>' for type 3, and `<TT>-4</TT>' for type 4.
<DL>
<DT><STRONG>[type 1]</STRONG></DT>
<DD>`<TT>-1</TT>' is followed by a number <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> and a sequence of integers for the gift elements. The <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> is the number of integers in the sequence. It represents a constant set of gift candidates. For example, 

<P>

<P>
<BR>

<TT>-1 2 1 2</TT>

<P>

<P>
<BR>
represents a set {1, 2} of gifts. 

<P>
</DD>
<DT><STRONG>[type 2]</STRONG></DT>
<DD>`<TT>-2</TT>' is followed by a single integer for a sibling's identification. For example, 

<P>

<P>
<BR>

<TT>-2 2</TT> 

<P>

<P>
<BR>
represents sibling 2's gifts.

<P>
</DD>
<DT><STRONG>[type 3]</STRONG></DT>
<DD>`<TT>-3</TT>' is followed by a sequence of two formats of type 1 or 2. For example,  

<P>

<P>
<BR>

<TT>-3 -2 3 -1 2 2 3</TT>

<P>

<P>
<BR>
represents the common-things-of sibling 3's gifts and set {2, 3}. As another example, 

<P>

<P>
<BR>

<TT>-3 -2 2 -2 3</TT>

<P>

<P>
<BR>
represents the common-things-of sibling 2's and 3's gifts.  

<P>
</DD>
<DT><STRONG>[type 4]</STRONG></DT>
<DD>`<TT>-4</TT>' is followed by type 2 followed by type 1. For example, 

<P>

<P>
<BR>

<TT>-4 -2 1 -1 1 3</TT>

<P>

<P>
<BR>
represents sibling 1's gifts except-for {3}. 
</DD>
</DL>
</DD>
</DL>
</DD>
</DL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output is the sequence of solutions for the given test cases. The solutions are printed in the order of the test 
cases. Each solution is the sequence of  lines, one line per child, in the increasing order of children's identification 
numbers. Each  line starts with the child's identification number followed by his/her gift identification numbers in 
the increasing order. For an empty gift, only the child number is printed.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3                                             
2 2                                           
1 1                                           
-1 1 1                                        
2 1                                           
-4 -2 1 -1 1 1                                  
1 1 
1 1 
-3 -1 1 1 -1 1 1 
3 3 
1 2              
-1 2 1 2      
-3 -2 2 -2 3 
2 1   
-3 -2 3 -1 2 2 3          
3 2              
-1 1 1 
-4 -2 1 -1 1 3
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 1 
2 
1 1                                      
1 1 2  
2 2   
3 1 2
</PRE>   

<P>

______________________________________________________
2529||||||false||||||
<P>
Two mountain climbers are located at opposite ends of a mountain range, at the same elevation. The two 
climbers want to walk along the mountain range and reach each other's starting place, while always staying at 
the same elevation. The climbers may move forward or backward to assure that they stay at the same elevation. 
It is well known that it is always possible for the two climbers to reach each other's starting place if the mountain range never drops below the starting elevation. Given a mountain range, compute the minimum sum 
of the two walk lengths of the two climbers to reach each other's starting place from their own starting place.  

<P>

<P>
<BR>
Mountain range is represented as a polygonal line <!-- MATH
 $P=( p_{1},p_{2}, \ldots ,p_{n})$
 -->
<SPAN CLASS="MATH"><I>P</I> = (<I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>n</SUB>)</SPAN>
<tex2html_verbatim_mark> in the plane with point set 
<!-- MATH
 $\{p_{i} = (x_{i} , y_{i} ) : i = 1, \ldots ,n\}$
 -->
<SPAN CLASS="MATH">{<I>p</I><SUB>i</SUB> = (<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>) : <I>i</I> = 1,..., <I>n</I>}</SPAN>
<tex2html_verbatim_mark> and edge set <!-- MATH
 $\{( p_{i} , p_{i+1}) : i = 1, \ldots ,n - 1\}$
 -->
<SPAN CLASS="MATH">{(<I>p</I><SUB>i</SUB>, <I>p</I><SUB>i+1</SUB>) : <I>i</I> = 1,..., <I>n</I> - 1}</SPAN>
<tex2html_verbatim_mark>. The polygonal  line <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> modeling a mountain range is monotone with respect to the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinate axis, i.e., <!-- MATH
 $x_{i} < x_{i+1}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> &lt; <I>x</I><SUB>i+1</SUB></SPAN>
<tex2html_verbatim_mark> for <!-- MATH
 $i = 1, \ldots ,n -1$
 -->
<SPAN CLASS="MATH"><I>i</I> = 1,..., <I>n</I> - 1</SPAN>
<tex2html_verbatim_mark>(see the following figure).  

<P>
A walk of a climber along a mountain range <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> is a sequence <!-- MATH
 $W =(w_{1},w_{2}, \ldots ,w_{m})$
 -->
<SPAN CLASS="MATH"><I>W</I> = (<I>w</I><SUB>1</SUB>, <I>w</I><SUB>2</SUB>,..., <I>w</I><SUB>m</SUB>)</SPAN>
<tex2html_verbatim_mark> of points <!-- MATH
 $w_{j} \in P$
 -->
<SPAN CLASS="MATH"><I>w</I><SUB>j</SUB> <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2529img1.png
 ALT="$ \in$"> <I>P</I></SPAN>
<tex2html_verbatim_mark> such that every line-segment of a walk must be on <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> , i.e., <!-- MATH
 $(w_{j} , w_{j+1}) \subset P$
 -->
<SPAN CLASS="MATH">(<I>w</I><SUB>j</SUB>, <I>w</I><SUB>j+1</SUB>) <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2529img1.png
 ALT="$ \subset$"> <I>P</I></SPAN>
<tex2html_verbatim_mark> for  <!-- MATH
 $j = 1, \ldots ,m -1$
 -->
<SPAN CLASS="MATH"><I>j</I> = 1,..., <I>m</I> - 1</SPAN>
<tex2html_verbatim_mark>. We compute the length of a walk along a line-segment <!-- MATH
 $(w_{j} , w_{j+1})$
 -->
<SPAN CLASS="MATH">(<I>w</I><SUB>j</SUB>, <I>w</I><SUB>j+1</SUB>)</SPAN>
<tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>W</I></SPAN>
<tex2html_verbatim_mark> as the difference of the  <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinates of  <SPAN CLASS="MATH"><I>w</I><SUB>j</SUB></SPAN>
<tex2html_verbatim_mark> and  <SPAN CLASS="MATH"><I>w</I><SUB>j+1</SUB></SPAN>
<tex2html_verbatim_mark>, i.e., the distance is <!-- MATH
 $|y_{i}-y_{i+1}|$
 -->
<SPAN CLASS="MATH">| <I>y</I><SUB>i</SUB> - <I>y</I><SUB>i+1</SUB>|</SPAN>
<tex2html_verbatim_mark> where  <!-- MATH
 $y_{i}(y_{i+1})$
 -->
<SPAN CLASS="MATH"><I>y</I><SUB>i</SUB>(<I>y</I><SUB>i+1</SUB>)</SPAN>
<tex2html_verbatim_mark> is the <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinate of <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $( w_{i+1})$
 -->
<SPAN CLASS="MATH">(<I>w</I><SUB>i+1</SUB>)</SPAN>
<tex2html_verbatim_mark> , respectively. The length of a walk <SPAN CLASS="MATH"><I>W</I></SPAN>
<tex2html_verbatim_mark> is the sum of the lengths of the line-segments of <SPAN CLASS="MATH"><I>W</I></SPAN>
<tex2html_verbatim_mark>.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2529.eps}$
 -->
<IMG
 WIDTH="1031" HEIGHT="311" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2529img1.png
 ALT="\epsfbox{p2529.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
For example, in the above figure, the walk of the left climber is (a, d, c, e, g, f, h, j, i, l, o, p, r, p, o, m, o, p, s), and the sum of walk lengths for the two climbers is 120. We can see that the length is the shortest length of
walks by the climbers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN>
<tex2html_verbatim_mark> is given in the first line of the input file. The 
first line of each test case contains an integer  <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(3 \le n \le 1000)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2529img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2529img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> , which is the number of points in a polygonal line <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> representing a mountain range. In the following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines, coordinates of points in <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> come in the order of <!-- MATH
 $p_{1}, p_{2}, \ldots , p_{n}$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark>. Each line contains two integers <SPAN CLASS="MATH"><I>n</I><SUB>x</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I><SUB>y</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le n_{x},n_{y} \le 10000 )$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2529img1.png
 ALT="$ \le$"><I>n</I><SUB>x</SUB>, <I>n</I><SUB>y</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2529img1.png
 ALT="$ \le$">10000)</SPAN>
<tex2html_verbatim_mark> , where <SPAN CLASS="MATH"><I>n</I><SUB>x</SUB></SPAN>
<tex2html_verbatim_mark> is the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinate and <SPAN CLASS="MATH"><I>n</I><SUB>y</SUB></SPAN>
<tex2html_verbatim_mark> is the <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinate of a point of <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>. One mountain  climber starts at <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, and the other starts at <SPAN CLASS="MATH"><I>p</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark>. Therefore, the <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinates of <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> must be the same. You may assume that for each input test case, the mountain range never drops below the starting elevation  and the <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinate of <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>,<!-- MATH
 $1 \le i \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2529img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2529img1.png
 ALT="$ \le$"><I>n</I></SPAN>
<tex2html_verbatim_mark>, is unique. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, your program reports, on each line, the minimum length of walks by the two climbers.  

<P>
The following sample input and corresponding correct output represents three test cases. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>                              

<P>
<PRE>
3                                         
3                                         
0 0                                       
5 5                                        
10 0 
5 
0 0 
2 10 
3 5 
4 15 
5 0 
7 
5 10 
6 15 
7 11 
8 20
9 12 
11 14 
13 10
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
20 
100  
120
</PRE>  

<P>

______________________________________________________
2530||||||false||||||
<P>``Digital Onion (DO, for short)" consists of parentheses. Null parenthesis (no parentheses) is a DO, and ``<TT>( )</TT>" is also a DO. Then, all DOs can be formally defined recursively as follows:<P><DL><DT><STRONG>(1) Definition:</STRONG></DT><DD>Null parenthesis is a DO. Especially, we call this the Null DO.</DD><DT><STRONG>(2) Definition:</STRONG></DT><DD>``<TT>( )</TT>" is a DO. Especially, we call this the primitive DO.</DD><DT><STRONG>(3) Definition:</STRONG></DT><DD>If both <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are DOs, then the combined form of ``<TT>(<SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>) <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark></TT>" is also a DO, where we call <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> the inside of the DO and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> the outside of the DO.</DD></DL><P>For example, ``<TT>(())()</TT>" is a DO and ``<TT>((()))(()()())</TT>" is a DO, but ``<TT>()())((</TT>" and ``<TT>(()))</TT>" cannot be a DO. Let us define the <SPAN ID="txt93"><SPAN CLASS="textit">weight</SPAN></SPAN> of a DO. The weight of a DO is defined as the number of `<TT>(</TT>' symbols, or equivalently the number of `<TT>)</TT>' symbols in it. Thus, the weight of the null DO is 0, and the weight of the primitive DO ``<TT>( )</TT>" is 1. Also, it is easy to see that the weight of ``<TT>((()))(()()())</TT>" is 7.<P>Also, if <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> = <TT>((()))(()()())</TT> , the inside of <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is <TT>(( ))</TT>, and the outside of <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is <TT>(()()())</TT>. When <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> = <TT>(()(()))</TT>, the inside DO of <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is <TT>()(())</TT>, and the outside DO of <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> should be the Null DO.<P><P><BR>Then, we define the price order of all DO objects. The ordering rules are simple, so we can sort all DOs according to their prices. This means that we can always determine which one is the more expensive between two different DOs given.<P><DL><DT><STRONG>[Rule1]:</STRONG></DT><DD>The more weight, the more expensive.</DD><DT><STRONG>[Rule2]:</STRONG></DT><DD>If the weights of two DOs are equal, then the price depends on the inside DO of the two DOs.</DD><DT><STRONG>[Rule3]:</STRONG></DT><DD>If the weights of two DOs are the same and the prices of the inside DOs are equal, then the price depends on the outside DO of the two DOs.</DD></DL><P>Let us explain these rules. There are two DOs, <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>. We denote <SPAN CLASS="MATH"><I>A</I> &lt; <I>B</I></SPAN> <tex2html_verbatim_mark> to show that <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> is more expensive than <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>. It is easy to see <TT>()<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark>(())</TT> and <TT>(())()<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark>((()))()</TT> by Rule 1, <TT>(())(())<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark> ((()))()</TT> by Rule 2, and <TT>(())()() <SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark> (())(())</TT> by Rule 3.<P>Given a DO <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>, your task is to write the ``Next More Expensive DO (NMED)" which is a more expensive DO than <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>, and there is no DO whose price is between NMED and X. That means that NMED is the next rank DO to a given DO when we sort all possible DOs according to their prices.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> <tex2html_verbatim_mark> is given in the first line of the input file. Each test case DO is written in a single line. `<TT>$</TT>' is placed at the end of each line to denote the end of each input DO representation, and there is at least one blank space to separate `<TT>(</TT>'s and `<TT>)</TT>'s and `<TT>$</TT>'. Note that the minimum weight of input DO is 1, and the maximum weight is 30.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line should contain the Next More Expensive DO (NMED) with an ending mark `<TT>$</TT>'. As was specified in the input format, there is at least one blank space to separate `<TT>(</TT>'s and `<TT>)</TT>'s and `<TT>$</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                                                 
( ) $                                             
( ) ( ) $                                          
( ( ) ( ( ) ) ) ( ( )( ) ) $
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
( ) ( ) $ 
( ( ) ) $                                      
( ( ) ( ( ) ) ) ( ( ( ) ) ) $
</PRE><P>
______________________________________________________
2531||||||false||||||
<P>Supporters for the professional soccer clubs participating in the K-League, formerly the Korea Professional Soccer League, hold orderly and organized cheering, as did the Red Devils, the official supporters for the Korean national soccer team during the 2002 Korea-Japan World Cup. After many games of this season have been played, the supporters may wonder whether the team <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> they are backing can still win the championship. In other words, can winners be assigned for the remaining games so that no team ends with more victories than <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>? Two or more teams can win the championship jointly.<P><P><BR>You are given the current number of wins and defeats, <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, for every team <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2531img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2531img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>, and the remaining number, <SPAN CLASS="MATH"><I>a</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark>, of games to be played between every pair of teams <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2531img1.png ALT="$ \le$"><I>i</I>, <I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2531img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of teams. The teams are numbered <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark> . You are to find all teams that have a possibility of winning the championship. Every team has to play the same number games during the season. For simplicity, we assume that there are no draws, that is, every game has a winner and a loser.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> <tex2html_verbatim_mark> is given in the first line of the input file.<P><P><BR>Each test case consists of three lines: the first line has an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2531img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2531img1.png ALT="$ \le$">25</SPAN> <tex2html_verbatim_mark>), that represents the number of teams in the test case; the second line contains <SPAN CLASS="MATH">2<I>n</I></SPAN> <tex2html_verbatim_mark> nonnegative integers <SPAN CLASS="MATH"><I>w</I><SUB>1</SUB>, <I>d</I><SUB>1</SUB>, <I>w</I><SUB>2</SUB>, <I>d</I><SUB>2</SUB>,..., <I>w</I><SUB>n</SUB>, <I>d</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, each at most 100, where <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> are the current numbers of wins and defeats for team <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, respectively; the third line contains <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> nonnegative integers <SPAN CLASS="MATH"><I>a</I><SUB>1, 1</SUB>, <I>a</I><SUB>1, 2</SUB>,..., <I>a</I><SUB>1, n</SUB>, <I>a</I><SUB>2, 1</SUB>, <I>a</I><SUB>2, 2</SUB>,..., <I>a</I><SUB>2, n</SUB>,<SUP> ... </SUP>, <I>a</I><SUB>n, 1</SUB>, <I>a</I><SUB>n, 2</SUB>,..., <I>a</I><SUB>n, n</SUB></SPAN> <tex2html_verbatim_mark>, each at most 10, where <SPAN CLASS="MATH"><I>a</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark> is the remaining number of games to be played between teams <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>. For all <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark> is equal to <SPAN CLASS="MATH"><I>a</I><SUB>j, i</SUB></SPAN> <tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>i</I> = <I>j</I></SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>a</I><SUB>i, j</SUB> = 0</SPAN> <tex2html_verbatim_mark>. The integers given in a line are delimited by one or more spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line should contain all teams that have a possibility of winning the championship, in an increasing order of team numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                                                   
3                                                   
2 0 1 1 0 2                                         
0 2 2 2 0 2 2 2 0 
3 
4 0 2 2 0 4 
0 1 1 1 0 1 1 1 0 
4 
0 3 3 1 1 3 3 0 
0 0 0 2 0 0 1 0 0 1 0 0 2 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 3 
1 2 
2 4
</PRE><P>
______________________________________________________
2532||||||false||||||
<P>
There is a worker who may lack the motivation to perform at his peak level of efficiency because he is lazy.
He wants to minimize the amount of work he does (he is ``lazy"), but he is subject to a constraint that he must 
be busy when there is work that he can do.

<P>

<P>
<BR>
We consider a set of jobs <!-- MATH
 $1, 2, \ldots , n$
 -->
<SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN>
<tex2html_verbatim_mark> having processing times <!-- MATH
 $t_{1}, t_{2}, \ldots , t_{n}$
 -->
<SPAN CLASS="MATH"><I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>,..., <I>t</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> respectively. Job <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> arrives at time <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and has its deadline at time <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. We assume that <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> have nonnegative integral values. The jobs have hard deadlines, meaning that each job <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> can only be executed during its allowed interval <!-- MATH
 $I_{i}=[a_{i}, d_{i}]$
 -->
<SPAN CLASS="MATH"><I>I</I><SUB>i</SUB> = [<I>a</I><SUB>i</SUB>, <I>d</I><SUB>i</SUB>]</SPAN>
<tex2html_verbatim_mark>. The jobs are executed by the worker, and the worker executes only one job at a time. Once a job is begun, it must be completed without interruptions. When a job is completed, another job must begin immediately, if one exists to be executed. Otherwise, the worker is idle and begins executing a job as soon as one arrives. You should note that for each job <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>, the length of <SPAN CLASS="MATH"><I>I</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $d_{i} - a_{i}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>i</SUB> - <I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, is greater than or equal to <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, but less than <SPAN CLASS="MATH">2<I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. 

<P>
Write a program that finds the minimized total amount of time executed by the worker. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN>
<tex2html_verbatim_mark> is given in the first line of the input file. The 
number of jobs <!-- MATH
 $(0 \le n \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2532img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2532img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark> is given in the first line of each test case, and the following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines have each 
job's processing time <!-- MATH
 $(1 \le t_{i} \le 20)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2532img1.png
 ALT="$ \le$"><I>t</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2532img1.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark>, arrival time <!-- MATH
 $(0 \le a_{i} \le 250)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2532img1.png
 ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2532img1.png
 ALT="$ \le$">250)</SPAN>
<tex2html_verbatim_mark>, and deadline time <!-- MATH
 $(1 \le d_{i} \le 250)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2532img1.png
 ALT="$ \le$"><I>d</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2532img1.png
 ALT="$ \le$">250)</SPAN>
<tex2html_verbatim_mark> as three integers. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Print exactly one line for each test case. The output should contain the total amount of time spent working by 
the worker. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>                                    

<P>
<PRE>
3                                               
3                                               
15 0 25                                         
50 0 90 
45 15 70 
3 
15 5 20 
15 25 40 
15 45 60 
5 
3 3 6 
3 6 10 
3 14 19 
6 7 16 
4 4 11
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
50 
45 
15

______________________________________________________
2533||||||false||||||
<p>Implement a ranking program similar to the one used for this programming contest.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains one or more contests followed by a line containing only zero that signals the end of the file. Each contest begins with a line containing a positive integer <i>c</i> no greater than 20 indicating the number of teams in the contest, and is followed by <i>c</i> lines that contain a team name and the solution times for seven problems, separated by spaces. Team names consist of between one and ten letters. All team names within a contest are unique. Times are nonnegative integers no greater than 500.<p>As described in the "Notes to Teams", teams are ranked first by greatest number of problems solved, then by least total time, then by least geometric mean of all nonzero times. Teams that are still tied are given the same numeric ranking and are listed in alphabetical order, using case-sensitive string comparison. The numeric ranking for a team is always one more than the number of teams ranked ahead of (not tied with) that team. For this problem all geometric means will be rounded to an integer as described below, and only the rounded value will be used when computing rankings and displaying results.<p>If all times are zero, then the geometric mean is also zero. Otherwise, if there are <i>n</i> nonzero times <i>t</i><sub><small>1</small></sub>, ..., <i>t</i><sub><small><i>n</i></small></sub>, then the geometric mean is defined to be<p align=center>exp ((ln <i>t</i><sub><small>1</small></sub> + ln <i>t</i><sub><small>2</small></sub> + ... + ln <i>t</i><sub><small><i>n</i></small></sub>) / <i>n</i>)</p><p>where exp <i>x</i> means <i>e</i><sup><small><i>x</i></small></sup> and ln <i>x</i> means the natural logarithm of <i>x</i>. (There are other mathematically equivalent definitions of the geometric mean, but they may produce slightly different answers due to roundoff and/or overflow problems. Use this definition to get the same answers as the judges.) After computing the geometric mean, round it to an integer by adding 0.5 and truncating any fractional digits. (C/C++ and Java automatically truncate fractions when casting a floating-point type to an integral type. In Pascal use the <tt>trunc</tt> function.)<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each contest you must output the rankings in a table. All tables will have the same width, with the length equal to the number of teams entered in the contest. Use the <i>exact</i> format shown in the examples. Each contest has a numbered header followed by a table with one team entry per line. Each entry contains the ranking, team name, problems solved, total time, geometric mean, and then the individual solution times in the same order they appeared in the input. In the first example all values completely fill their fields. In general you may need to pad values with spaces (never tabs) so that they have the correct field width. The team name is left-justified, and all other fields are right-justified. The ranking always has two digits, including a leading zero if necessary. Spaces will never appear at the beginning or end of lines.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>1
Plutonians 123 234 345 456 167 278 389
4
Xap 0 0 0 0 0 0 0
Foo 20 30 0 50 40 0 10
Bar 0 50 20 0 10 40 30
Baz 0 0 0 0 0 0 0
3
Venus 213 0 0 57 0 0 0
Neptune 0 0 0 117 153 0 0
Mars 0 150 0 0 0 0 120
0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>CONTEST 1
01 Plutonians 7 1992 261 123 234 345 456 167 278 389
CONTEST 2
01 Bar        5  150  26   0  50  20   0  10  40  30
01 Foo        5  150  26  20  30   0  50  40   0  10
03 Baz        0    0   0   0   0   0   0   0   0   0
03 Xap        0    0   0   0   0   0   0   0   0   0
CONTEST 3
01 Venus      2  270 110 213   0   0  57   0   0   0
02 Mars       2  270 134   0 150   0   0   0   0 120
02 Neptune    2  270 134   0   0   0 117 153   0   0
</pre><p>
______________________________________________________
2534||||||false||||||
<p align=center><img src=p2534.gif><p><p>David Hilbert proved the existence of a very counter-intuitive curve that fills space. The construction of the Hilbert curve is based on a sequence of curves, H<small><sub>1</sub></small>, H<small><sub>2</sub></small>, H<small><sub>3</sub></small>, H<small><sub>4</sub></small>, ... composed of horizontal and vertical segments. Each curve lies in the unit square <tt>[0, 1]</tt> &times; <tt>[0, 1]</tt>. H<sub><small>1</small></sub> contains just three segments, connecting the points (&frac14;, &frac34;) to (&frac14;, &frac14;) to (&frac34;, &frac14;) to (&frac34;, &frac34;). H<i><small><sub>n</sub></small></i> is defined recursively in terms of H<small><sub><i>n</i>-1</sub></small>, for <i>n</i> = 2, 3, ... by four transformations:<ol><li>Halve all coordinates in H<small><sub><i>n</i>-1</sub></small>.</li> <li>Add a copy rotated 90 degrees counterclockwise about the point (<tt>0</tt>, &frac12;).</li> <li>Add the reflection across the line <i>x</i> = &frac12;.</li> <li>Let <i>m</i> = &frac12;<sup><small><i>n</i>+1</small></sup>. Add segments connecting endpoints (&frac12; - <i>m</i>, &frac12; - <i>m</i>) to (&frac12; + <i>m</i>, &frac12; - <i>m</i>), (<i>m</i>, &frac12; - <i>m</i>) to (<i>m</i>, &frac12; + <i>m</i>), and (<tt>1</tt> - <i>m</i>, &frac12; - <i>m</i>) to (<tt>1</tt> - <i>m</i>, &frac12; + <i>m</i>).</li></ol>Your job is to count the number of intersections of horizontal line segments with these curves. For example, consider Figures 1 and 2, which illustrate the first two example input data sets below.<br><table BORDER=0 CELLSPACING=10 WIDTH="90%"><tr ALIGN=CENTER VALIGN=MIDDLE><td ALIGN=CENTER VALIGN=MIDDLE>Figure 1</td><td>Figure 2</td></tr><tr ALIGN=CENTER><td ALIGN=CENTER><img SRC="http://livearchive.onlinejudge.org/external/25/p2534u.gif BORDER=0 height=130 width=130 alt="h3line"></td><td ALIGN=CENTER><img SRC="http://livearchive.onlinejudge.org/external/25/p2534u.gif height=130 width=130 alt="h4line"></td></tr><tr ALIGN=CENTER><td>Segment from (<tt>2/8</tt>, <tt>7/8</tt>) to (<tt>7/8</tt>, <tt>7/8</tt>)<br>crossing H<small><sub>3</sub></small> three times.</td><td>Segment from (<tt>0/16</tt>, <tt>1/16</tt>) to (<tt>16/16</tt>, <tt>1/16</tt>)<br>crossing H<small><sub>4</sub></small> sixteen times.</td></tr></table><p>The coordinates of vertices of H<small><sub><i>n</i></sub></small> are odd multiples of &frac12;<small><sup><i>n</i>+1</sup></small>. The coordinates of horizontal segment endpoints will always be multiples of &frac12;<small><sup><i>n</i></sup></small>. Hence the specified horizontal segment can only cross vertical segments in H<small><sub><i>n</i></sub></small>.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input consists of one to 100 data sets, one per line, followed by a final line containing only 0. Each data set consists of four integers separated by blanks in the form<p><center><i>n</i> <i>x</i><small><sub>1</sub></small> <i>x</i><small><sub>2</sub></small> <i>y</i></center><p>which represents H<small><sub><i>n</i></sub></small> and the segment from (<i>x</i><small><sub>1</sub></small>/<tt>2</tt><i><small><sup>n</sup></small></i>, <i>y</i>/<tt>2</tt><i><small><sup>n</sup></small></i>) to (<i>x</i><small><sub>2</sub></small>/<tt>2</tt><i><small><sup>n</sup></small></i>, <i>y</i>/<tt>2</tt><i><small><sup>n</sup></small></i>), where 0 &lt; <i>n</i> &lt; 31, <i>x</i><small><sub>1</sub></small> &lt; <i>x</i><small><sub>2</sub></small>, and each of <i>x</i><small><sub>1</sub></small>, <i>x</i><small><sub>2</sub></small>, and <i>y</i> lie in the range 0 to 2<i><small><sup>n</sup></small></i>, inclusive.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output is one integer per line for each data set: the number of intersections of H<i><small><sub>n</sub></small></i> with the segment. <b>Caution</b>: A brute force solution that computes each intersection individually will not finish within the one minute time limit. As you can see below, there may be more than one billion intersections for any data set.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><p><PRE>3 2 7 7
4 0 16 1
30 1 1073741823 1
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>3
16
1073741822
</PRE><p>
______________________________________________________
2535||||||false||||||
<P>Sam and Ella run a catering service. They like to put on a show when serving meatballs to guests seated at round tables. They march out of the kitchen with pots of meatballs and start serving adjacent guests. Ella goes counterclockwise and Sam goes clockwise, until they both plop down their last meatball, at the same time, again at adjacent guests. This impressive routine can only be accomplished if they can divide the table into two sections, each having the same number of meatballs. You are to write a program to assist them.</P><P>At these catering events, each table seats 2 &lt;= <I>N</I> &lt;= 30 guests. Each guest orders at least one and at most nine meatballs. Each place at the table is numbered from 1 to <I>N</I>, with the host at position 1 and the host's spouse at position <I>N</I>. Sam always serves the host first then proceeds to serve guests in increasing order. Ella serves the spouse first, then serves guests in decreasing order. The figures illustrate the first two example input cases.</P><center><img src="http://livearchive.onlinejudge.org/external/25/p2535.gif alt="Two dinner tables"></center><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of one or more test cases. Each test case contains the number of guests <I>N</I> followed by meatballs ordered by each guest, from guest 1 to guest <I>N</I>. The end of the input is a line with a single zero.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each table, output a single line with the ending positions for Sam and Ella, or the sentence indicating an equal partitioning isn't possible. Use the exact formatting shown below.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>5 9 4 2 8 3
5 3 9 4 2 8
6 1 2 1 2 1 2
6 1 2 1 2 1 1
0</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>Sam stops at position 2 and Ella stops at position 3.
No equal partitioning.
No equal partitioning.
Sam stops at position 3 and Ella stops at position 4.</PRE><p>
______________________________________________________
2536||||||false||||||
<p><tt>=== Op tech briefing, 2002/11/02 06:42 CST ===</tt><p>"The item is locked in a Klein safe behind a painting in the second-floor library. Klein safes are extremely rare; most of them, along with Klein and his factory, were destroyed in World War II. Fortunately old Brumbaugh from research knew Klein's secrets and wrote them down before he died. A Klein safe has two distinguishing features: a combination lock that uses letters instead of numbers, and an engraved quotation on the door. A Klein quotation always contains between five and twelve distinct uppercase letters, usually at the beginning of sentences, and mentions one or more numbers. Five of the uppercase letters form the combination that opens the safe. By combining the digits from all the numbers in the appropriate way you get a numeric <i>target</i>. (The details of constructing the target number are classified.) To find the combination you must select five letters <i>v</i>, <i>w</i>, <i>x</i>, <i>y</i>, and <i>z</i> that satisfy the following equation, where each letter is replaced by its ordinal position in the alphabet (A=1, B=2, ..., Z=26). The combination is then <i>vwxyz</i>. If there is more than one solution then the combination is the one that is lexicographically greatest, <i>i.e.</i>, the one that would appear last in a dictionary."<p align=center><i>v</i> - <i>w</i><sup><small>2</small></sup> + <i>x</i><sup><small>3</small></sup> - <i>y</i><sup><small>4</small></sup> + <i>z</i><sup><small>5</small></sup> = <i>target</i></p><p>"For example, given target 1 and letter set ABCDEFGHIJKL, one possible solution is FIECB, since 6 - 9<sup><small>2</small></sup> + 5<sup><small>3</small></sup> - 3<sup><small>4</small></sup> + 2<sup><small>5</small></sup> = 1. There are actually several solutions in this case, and the combination turns out to be LKEBA. Klein thought it was safe to encode the combination within the engraving, because it could take months of effort to try all the possibilities even if you knew the secret. But of course computers didn't exist then."<p><tt>=== Op tech directive, computer division, 2002/11/02 12:30 CST ===</tt><p>"Develop a program to find Klein combinations in preparation for field deployment. Use standard test methodology as per departmental regulations."<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input consists of one or more lines containing a positive integer target less than twelve million, a space, then at least five and at most twelve distinct uppercase letters. The last line will contain a target of zero and the letters <tt>END</tt>; this signals the end of the input.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each line output the unique Klein combination, or '<tt>no solution</tt>' if there is no correct combination. Use the exact format shown below.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>1 ABCDEFGHIJKL
11700519 ZAYEXIWOVU
3072997 SOUGHT
1234567 THEQUICKFROG
0 END
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>LKEBA
YOXUZ
GHOST
no solution
</PRE><p>
______________________________________________________
2537||||||false||||||
<p>Rocky Oil owns several rectangular oil fields in which it is drilling new wells. It wants to connect all wells in a field to a single East-West pipeline using straight North-South pipes. Your task is to write a program that first finds the location of the E-W pipeline such that the total length of the N-S pipes in the field is minimal; then it must draw a map of the oil field, if possible.</p><p>Each rectangular oil field is a grid 94 units long in the E-W direction and 73 units long in the N-S direction. The grid uses integer coordinates, with the SW corner at (1,1) and the NE corner at (94,73). Oil wells may be at any integer coordinates within the grid, and all wells will appear at different positions. The E-W pipeline will stretch across the entire field at an integer N-S coordinate. Wells with the same E-W coordinate share the same pipe. In case there are multiple positions for the E-W pipeline giving the same minimal length, always choose the one furthest south (i.e., with the lowest N-S coordinate).</p><p>Consider the first input example below. With the E-W pipeline at 11, the well at E-W position 1 is on the pipeline and has length zero. The two wells at E-W position 69 can share a single pipe of length 18. The total length for all three wells is 18. If the E-W pipeline were at 20 there would be two N-S pipes, one of length 9 at position 1 and another of length 9 at position 69, again with a total length of 18. In fact, any E-W pipeline located from 11 to 20 results in a total length of 18, which is minimal. Since there is more than one position for the pipeline that minimizes the length, choose the southernmost position, which is 11.</p><p>Any map drawn must occupy at most 69 columns and 19 rows (not counting borders and labels) so it fits on a standard-sized display. The map must include the E-W pipeline, all wells, and all N-S pipes. Only that portion of the field actually containing wells should be drawn, using the smallest bounding rectangle whose edges are multiples of 5. The E-W pipeline will always stretch across the entire map, regardless of its width. Wells must be inside the bounding rectangle, not on any of its edges. These constraints may make it impossible to draw some oil fields. The first input example shows the largest map possible.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of data for one or more oil fields, followed by a line containing 0 0 which signals the end of the input. Data for each oil field consists of one or more pairs of positive integers, one pair per line, representing the positions of oil wells in the field. The pair -1 -1 indicates the end of the data for a field.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each oil field, output a line with a numbered header. Then output the map of the oil field, if possible. Otherwise, output a sentence with the location of the pipeline. Use the exact format shown below.</p><p>Use '<tt>@</tt>' to represent an oil well, '<tt>*</tt>' to represent a pipe, and '<tt>.</tt>' (a period) to represent an empty grid location. Wells take precedence over pipes, so if a well and a pipe occupy the same location, use '<tt>@</tt>'. Draw a border around the mapped oil field, using '<tt>|</tt>' (a vertical bar) for N-S edges and '<tt>-</tt>' (a dash) for E-W edges, but mark every 5th grid position with '<tt>+</tt>', as shown in the examples. Label each '<tt>+</tt>' with its position in the oil field. The label for each N-S '<tt>+</tt>' comes immediately before the '<tt>+</tt>' sign. The label for the northernmost '<tt>+</tt>' must start at the beginning of the first line of output. Labels for an E-W '<tt>+</tt>' must always have the most significant digit immediately below the '<tt>+</tt>'. Contrary to the usual output conventions, some of the lines in the map <I>will</i> have leading blanks.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>1 11
69 29
69 20
-1 -1
35 35
-1 -1
1 1
94 73
1 73
94 1
-1 -1
2 2
3 7
4 4
6 1
-1 -1
0 0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>OIL FIELD 1
30+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |....................................................................@|
  |....................................................................*|
  |....................................................................*|
  |....................................................................*|
25+....................................................................*+
  |....................................................................*|
  |....................................................................*|
  |....................................................................*|
  |....................................................................*|
20+....................................................................@+
  |....................................................................*|
  |....................................................................*|
  |....................................................................*|
  |....................................................................*|
15+....................................................................*+
  |....................................................................*|
  |....................................................................*|
  |....................................................................*|
  |@********************************************************************|
10+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  0    5    10   15   20   25   30   35   40   45   50   55   60   65   70
OIL FIELD 2
40+----+----+
  |.........|
  |.........|
  |.........|
  |.........|
35+****@****+
  |.........|
  |.........|
  |.........|
  |.........|
30+----+----+
  30   35   40
OIL FIELD 3
Map is too big to draw for pipeline at 1
OIL FIELD 4
10+----+----+
  |.........|
  |.........|
  |..@......|
  |..*......|
 5+..*......+
  |..*@.....|
  |..**.....|
  |*@*******|
  |.....@...|
 0+----+----+
  0    5    10
</pre><p>
______________________________________________________
2538||||||false||||||
<p>Tan Your Hide, Inc., owns several coin-operated tanning salons. Research has shown that if a customer arrives and there are no beds available, the customer will turn around and leave, thus costing the company a sale. Your task is to write a program that tells the company how many customers left without tanning.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of data for one or more salons, followed by a line containing the number 0 that signals the end of the input. Data for each salon is a single line containing a positive integer, representing the number of tanning beds in the salon, followed by a space, followed by a sequence of uppercase letters. Letters in the sequence occur in pairs. The first occurrence indicates the arrival of a customer, the second indicates the departure of that same customer. No letter will occur in more than one pair. Customers who leave without tanning always depart before customers who are currently tanning. There are at most 20 beds per salon.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each salon, output a sentence telling how many customers, if any, walked away. Use the exact format shown below.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>2 ABBAJJKZKZ
3 GACCBDDBAGEE
3 GACCBGDDBAEE
1 ABCBCA
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>All customers tanned successfully.
1 customer(s) walked away.
All customers tanned successfully.
2 customer(s) walked away.
</PRE><p>
______________________________________________________
2539||||||false||||||
<center><p><img SRC="http://livearchive.onlinejudge.org/external/25/p2539.gif height=350 width=530 alt="Road network"></center>The Head Elder of the tropical island of Lagrishan has a problem. A burst of foreign aid money was spent on extra roads between villages some years ago. But the jungle overtakes roads relentlessly, so the large road network is too expensive to maintain. The Council of Elders must choose to stop maintaining some roads. The map above on the left shows all the roads in use now and the cost in aacms per month to maintain them. Of course there needs to be some way to get between all the villages on maintained roads, even if the route is not as short as before. The Chief Elder would like to tell the Council of Elders what would be the smallest amount they could spend in aacms per month to maintain roads that would connect all the villages. The villages are labeled A through I in the maps above. The map on the right shows the roads that could be maintained most cheaply, for 216 aacms per month. Your task is to write a program that will solve such problems.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of one to 100 data sets, followed by a final line containing only 0. Each data set starts with a line containing only a number <i>n</i>, which is the number of villages, 1 &lt; <i>n</i> &lt; 27, and the villages are labeled with the first <i>n</i> letters of the alphabet, capitalized. Each data set is completed with <i>n</i>-1 lines that start with village labels in alphabetical order. There is no line for the last village. Each line for a village starts with the village label followed by a number,<i>k</i>, of roads from this village to villages with labels <i>later</i> in the alphabet. If <i>k</i> is greater than 0, the line continues with data for each of the <i>k</i> roads. The data for each road is the village label for the other end of the road followed by the monthly maintenance cost in aacms for the road. Maintenance costs will be positive integers less than 100. All data fields in the row are separated by single blanks. The road network will always allow travel between all the villages. The network will never have more than 75 roads. No village will have more than 15 roads going to other villages (before or after in the alphabet). In the sample input below, the first data set goes with the map above.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output is one integer per line for each data set: the minimum cost in aacms per month to maintain a road system that connect all the villages. <b>Caution</b>: A brute force solution that examines every possible set of roads will not finish within the one minute time limit.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>9
A 2 B 12 I 25
B 3 C 10 H 40 I 8
C 2 D 18 G 55
D 1 E 44
E 2 F 60 G 38
F 0
G 1 H 35
H 1 I 35
3
A 2 B 10 C 40
B 1 C 20
0</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>216
30</pre><p>
______________________________________________________
2540||||||false||||||
<p>Julius Caesar lived in a time of danger and intrigue. The hardest situation Caesar ever faced was keeping himself alive. In order for him to survive, he decided to create one of the first ciphers. This cipher was so incredibly sound, that no one could figure it out without knowing how it worked.<p>You are a sub captain of Caesar's army. It is your job to decipher the messages sent by Caesar and provide to your general. The code is simple. For each letter in a plaintext message, you shift it five places to the right to create the secure message (i.e., if the letter is '<tt>A</tt>', the cipher text would be '<tt>F</tt>'). Since you are creating plain text out of Caesar's messages, you will do the opposite:<p><pre>
Cipher text
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

Plain text
V W X Y Z A B C D E F G H I J K L M N O P Q R S T U 
</pre><p>Only letters are shifted in this cipher. Any non-alphabetical character should remain the same, and all alphabetical characters will be upper case.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input to this problem will consist of a (non-empty) series of up to <tt>100</tt> data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets. All characters will be uppercase.<p><ol>A single data set has <tt>3</tt> components: <li><i>Start line</i> - A single line, "<tt>START</tt>" <li><i>Cipher message</i> - A single line containing from one to two hundred characters, inclusive, comprising a single message from Caesar <li><i>End line</i> - A single line, "<tt>END</tt>"</ol><p>Following the final data set will be a single line, "<tt>ENDOFINPUT</tt>".<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each data set, there will be exactly one line of output. This is the original message by Caesar.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><p><pre>
START
NS BFW, JAJSYX TK NRUTYFSHJ FWJ YMJ WJXZQT TK YWNANFQ HFZXJX
END
START
N BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ
END
START
IFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ
END
ENDOFINPUT
</pre><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><p><pre>
IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES
I WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME
DANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE
</pre><p>
______________________________________________________
2541||||||false||||||
<p>The Rubik's Cube was invented by Enro Rubik in <tt>1974</tt>. It is a <tt>3</tt>-dimensional puzzle made up of <tt>26</tt> smaller cubes. Each smaller cube has from one to three sides exposed for a total of <tt>54</tt> exposed sides. Each of these sides is assigned one of six colors, and each color is assigned to precisely nine exposed sides. The cube is manipulated by rotating any side of the cube by <tt>90</tt> degrees. It is considered solved when each side of the Rubik's Cube is entirely covered by one of the six colors.<p>You are a researcher at the Rubik's University and are working on an algorithm to solve a Rubik's Cube in the least possible number of moves from any starting position. To aid in your research, you need a program that will read in various Rubik's Cube configurations, perform operations on those configurations, and determine if the resulting cube is solved.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input to this problem will consist of a starting configuration for the Rubik's Cube and then one or more operations to perform on the cube.<p><table cellpadding=2 align=center><tr><td align=center>The input configuration will look like:</td><td>&nbsp;</td><td align=center>Which follows this layout:</td></tr><tr><td><pre>
      G W O
      G R R
      G B R
B R B R G Y W W W Y G O
G W B O G B Y B O W Y O
W R Y O Y B R Y R G O O
      B R Y
      B O W
      G Y W </pre></td><td>&nbsp;</td><td><img src="http://livearchive.onlinejudge.org/external/25/p2541.gif></td></tr></table><p>Each character in this grid represents the color of the piece of the cube. There is one space between each character in the grid and possibly many spaces before the first character on a line. The grid represents the cube as is if it were unfolded and flattened out. Each group of <tt>9</tt> characters (<tt>3 x 3</tt> array) represents one side of the grid. The top of the cube is represented by the first <tt>3</tt> lines of input. The next <tt>3</tt> lines of input represent the left, front, right, and back sides in that order. The last <tt>3</tt> lines represent the bottom of the cube.<p>Following the initial configuration will be <tt>1</tt> more operations to perform on the cube. There are <tt>12</tt> possible operations that can be performed, each being a <tt>90</tt> degree rotation of one of the cube's '<i>faces</i>' of <tt>9</tt> smaller cubes. Note that this results in the movement of <tt>20</tt> colored squares (<tt>8</tt> on the face being rotated and <tt>12</tt> on the sides of the smaller cubes that make up that face). All <tt>12</tt> possible operations are listed in the table below with a description of how to perform that operation.<p><table border=1><tr><th>Operation</th><th>Description</th></tr><tr><td>front left</td><td>Performed by rotating the front side counter-clockwise when viewing from the front</td></tr><tr><td>front right</td><td>Performed by rotating the front side clockwise when viewing from the front</td></tr><tr><td>left left</td><td>Performed by rotating the left side counter-clockwise when viewing from the left</td></tr><tr><td>left right</td><td>Performed by rotating the left side clockwise when viewing from the left</td></tr><tr><td>right left</td><td>Performed by rotating the right side counter-clockwise when viewing from the right</td></tr><tr><td>right right</td><td>Performed by rotating the right side clockwise when viewing from the right</td></tr><tr><td>back left</td><td>Performed by rotating the back side counter-clockwise when viewing from the back</td></tr><tr><td>back right</td><td>Performed by rotating the back side clockwise when viewing from the back</td></tr><tr><td>top left</td><td>Performed by rotating the top side counter-clockwise when viewing from the top</td></tr><tr><td>top right</td><td>Performed by rotating the top side clockwise when viewing from the top</td></tr><tr><td>bottom left</td><td>Performed by rotating the bottom side counter-clockwise when viewing from the bottom</td></tr><tr><td>bottom right</td><td>Performed by rotating the bottom side clockwise when viewing from the bottom</td></tr></table><p>Input to this problem will consist of a (non-empty) series of up to <tt>100</tt> data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.<p><ol>There will be one or more data sets. A single data set has <tt>2</tt> components: <li><i>Start line</i> - A single line, "<tt>START</tt>". <li>An initial configuration of the cube (<tt>9</tt> lines total) <li>One or more operations each on a separate line <li><i>End line</i> - A single line, "<tt>END</tt>".</ol><p>Following the final data set will be a single line, "<tt>ENDOFINPUT</tt>".<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each data set, there will be exactly one line of output. If the cube is solved, then the word "<tt>Yes</tt>" is output on a line. If the cube remains unsolved, then the word "<tt>No</tt>" is output on a line.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><p><pre>
START
      O O O
      O O O
      O G W
W W W Y B G R B B G G G
B Y W Y B G R G G W W R
B Y Y B O O B W W Y Y R
      R Y Y
      B R R
      G R R
front right
top right
left left
bottom right
END
START
      Y B B
      O G B
      G R B
W W B R Y Y R G G O O O
R O O G B R G R O Y W W
Y G Y O R G W B G O Y W
      B B R
      W Y Y
      R W W
back left
top right
left right
right right
front left
bottom right
right left
END
ENDOFINPUT
</pre><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><p><pre>
Yes
No
</pre><p>
______________________________________________________
2542||||||false||||||
<p>You are a intrepid 2-dimensional explorer located at the northern polar reaches of a distant 2-dimensional planet. Unfortunately, you have been assigned to explore the most boring planet in the known universe (due primarily to your lack of social skills and aggressive body odor). Having a perfectly circular surface, your planet holds no surprises for a would-be explorer.<p>However, you have recently received a distress call from an alien ship which has crash-landed somewhere on the surface of your planet. Unfortunately, you designed your own equipment, and the only information it will give you is an angle (measured from the center of the planet) separating you from the crash site.<p>Using this information along with how much gasoline is available for your planet-rover (which gets a measley 5 miles per gallon), you have to determine if you can possibly get to the crash site and back without running out of fuel.<p><center><img src="http://livearchive.onlinejudge.org/external/25/p2542.gif width=135 height=125 alt=globe></center><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.<p><ol>A single data set has <tt>3</tt> components: <li>Start line - A single line, "<tt>START</tt>". <li>Input line - A single line, "<tt>X Y Z</tt>", where:<ul><tt>X</tt> : <tt>(1 <= X <= 100)</tt> is the radius of your planet in integer miles<br>
		<tt>Y</tt> : <tt>(0 <= Y <= 100)</tt> is the amount of gasoline in your planet-rover in integer gallons<br>
		<tt>Z</tt> : <tt>(0 <= Z <= 360)</tt> is an angle separating you from the crash site in integer degrees<br>
	</ul>
	<li>End line - A single line, "<tt>END</tt>".
</ol>
<p>
Following the final data set will be a single line, "<tt>ENDOFINPUT</tt>".
<p>
<ul>Take note of the following:
	<li>The circumference of a circle in terms of its radius, <tt>r</tt>, is known to be <tt>2&pi;r</tt>
	<li>Assume that <tt>&pi; = 3.14159</tt>
</ul>
<p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each data set, there will be exactly one line of output.  If you have enough fuel to get to the crash site and back, the line will read, "YES X", where X is the amount of fuel you will have left expressed as an integer number of gallons (truncate any fractional gallons).  If you do not have sufficient fuel, the line will read, "NO Y", where Y is the distance you can travel expressed as an integer number of miles.
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<p>
<pre>
START
1 100 0
END
START
10 0 1
END
START
100 50 90
END
START
100 50 270
END
ENDOFINPUT
</pre>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<p>
<pre>
YES 100
NO 0
NO 250
NO 250
</pre>
<p>

______________________________________________________
2543||||||false||||||
<p>
You are a butler in a large mansion.  This mansion has so many 
rooms that they are merely referred to by number (room <tt>0</tt>, 
<tt>1</tt>, <tt>2</tt>, <tt>3</tt>, etc...).  Your master is a 
particularly absent-minded lout and continually leaves doors 
open throughout a particular floor of the house.  Over the 
years, you have mastered the art of traveling in a single 
path through the sloppy rooms and closing the doors behind 
you.  Your biggest problem is determining whether it is 
possible to find a path through the sloppy rooms where you:
<p>
<ol>
	<li>Always shut open doors behind you immediately after passing through
	<li>Never open a closed door
	<li>End up in your chambers (room <tt>0</tt>) with all doors closed
</ol>
<p>
In this problem, you are given a list of rooms and open doors between 
them (along with a starting room).  It is not needed to determine a 
route, only if one is possible.
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>
Input to this problem will consist of a (non-empty) series of up to 
<tt>100</tt> data sets.  Each data set will be formatted according
to the following description, and there will be no blank lines 
separating data sets.
<p>
<ol>A single data set has <tt>3</tt> components:
	<li><i>Start line</i> - A single line, "<tt>START M N</tt>", 
where M indicates the butlerÕs starting room, and N 
indicates the number of rooms in the house 
(<tt>1 &le; N &le; 20</tt>).
	<li><i>Room list</i> - A series of <tt>N</tt> lines.  Each line 
lists, for a single room, every open door that leads to 
a room of higher number.  For example, if room <tt>3</tt> had open 
doors to rooms <tt>1</tt>, <tt>5</tt>, and <tt>7</tt>, the line for room <tt>3</tt> would 
read "<tt>5 7</tt>".  The first line in the list represents room 
<tt>0</tt>. The second line represents room <tt>1</tt>, and so on until 
the last line, which represents room (<tt>N - 1</tt>).  It is 
possible for lines to be empty (in particular, the last 
line will always be empty since it is the highest 
numbered room).  On each line, the adjacent rooms 
are always listed in ascending order. It is possible 
for rooms to be connected by multiple doors!
	<li><i>End line</i> - A single line, "<tt>END</tt>"
</ol>
<p>
Following the final data set will be a single line, "<tt>ENDOFINPUT</tt>".
<p>
Note that there will be no more than <tt>100</tt> doors in any single data set.
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>
For each data set, there will be exactly one line of output.  
If it is possible for the butler (by following the rules in 
the introduction) to walk into his chambers and close the 
final open door behind him, print a line "<tt>YES X</tt>", where <tt>X</tt> 
is the number of doors he closed.  Otherwise, print "<tt>NO</tt>".
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<p>
<pre>
START 1 2
1

END
START 0 5
1 2 2 3 3 4 4




END
START 0 10
1 9
2
3
4
5
6
7
8
9

END
ENDOFINPUT
</pre>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<p>
<pre>
YES 1
NO
YES 10
</pre>
<p>

______________________________________________________
2544||||||false||||||
<p>
"Forget it," Garret complained, throwing down the controller to
his PlayStation VIII, "this level is impossible."  He had just
"died" for the 17th time on level 54 of the game "Lemmings 9:
Lost in Space".
<p>
"No it isn't," his brother Ferret replied, "and I can prove it."
Ferret pulled his PlaySkool PDA from the back pocket of his
Levi's Huggies.
<p>
"First, picture the level as a rectangular grid."  Ferret 
punched a few of the buttons on his PDA and a rectangle 
appeared as he described.  "Your character, a Lemming holding 
an umbrella, starts at the top of this rectangle.  His goal 
is to reach the bottom without dying."
<p>
"I know that, you weasel, but what about the laser guns?" Garret 
whined.
<p>
"The name is Ferret, and I was just getting to that.  If we 
represent the level as a rectangular grid, then the Lemming
can occupy one square and each laser gun can occupy a square.  
Remember the laser guns are cyclic: they all shoot up the first 
turn, right the second turn, down the third turn, left the 
fourth turn, and then repeat the sequence."
<p>
"But you're forgetting the pits of lava!" Garret exclaimed.
<p>
"You didn't let me finish.  Each pit of lava also occupies a 
square.  And each plot of grass, the Lemming's destination, 
can also occupy a square.  Then, it's just a matter of 
manipulating the Lemming and laser beams in a series of 
turns to determine if it is possible for the Lemming to 
reach the bottom without 'dying'."
<p>
"You think you're so smart, Ferret, let's see if you can 
explain that again in a clear, concise way."
<p>
"Certainly":
<p>
The level will consist of a grid of squares.  The way each 
laser beam and the Lemming moves can be described in "turns".  
To determine if the Lemming can reach the bottom of the level 
without dying, Ferret devised some rules:
<p>
<ol>
	<li>Each turn will consist of two steps:
	<ol>
		<li>First, the laser guns will "fire" and 
maintain until the end of the turn, a beam in a direction 
dependent on the number of the turn.  On the first turn, 
each laser gun will shoot up (all squares directly above a 
laser gun are "unsafe" and cannot be occupied by the Lemming); 
on the second turn, each laser gun will shoot right; on the 
third turn, each laser gun will shoot down; on the fourth turn, 
each laser gun will shoot left; on the fifth turn, the sequence 
will repeat.
<p>
<pre>
Example:
    Column
    01234
R 0|  L  |&lt;- The Lemming will always start in a column on row 0
o 1|     | In this example, on the first turn, the laser beam
w 2|   S | will occupy squares (3,0),(3,1); second turn, (4,2);
  3|     | third turn, (3,3),(3,4),(3,5),(3,6); fourth turn, 
  4|     | (0,2),(1,2),(2,2); fifth turn (repeating), (3,0),(3,1), etc.  
  5|     | (squares are represented using (column,row) notation)
  6|GPPGG|&lt;- The pits of lava and grass squares will always be
             in the last row
</pre>
		<li>Second, the Lemming will always move one row 
down, but to any one of three columns: one column to the left, 
one column to the right, or remain in the same column.  In the 
above example, on the first turn the Lemming <tt>(L)</tt> could move to 
square <tt>(1,1)</tt>, <tt>(2,1)</tt>, or <tt>(3,1)</tt> (if he moved to <tt>(3,1)</tt>, though, 
he would die because of the laser beam).  However, on any turn 
the Lemming cannot move outside of the grid (i.e., he cannot 
move to column <tt>-1</tt>, or to a column number equal to the number 
of columns).
	</ol>
	<li>The level is considered "possible" if the Lemming 
can reach any "grass" square without dying after a series of 
turns.

	<li>The Lemming will die if at any point he occupies 
the same square as a laser gun, its beam, or a pit of lava.  
This includes:
	<ol>
	<li>The Lemming moving into a square a pit of lava occupies,	
	<li>The Lemming moving into a square a laser gun occupies,
	<li>The Lemming moving into a square a laser beam occupies 
(even if it is a grass square!),
	<li>A laser gun firing a beam into a square the Lemming occupies
	</ol>
</ol>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>
Input to this problem will consist of a (non-empty) series of up to 
<tt>100</tt> data sets.  Each data set will be formatted according 
to the following description, and there will be no blank lines 
separating data sets.  Each data set will describe the starting 
conditions of the level.  A single data set has the following components:
<p>
<ol>
	<li><i>Start line</i> - A single line, "<tt>START x y</tt>", where 
<tt>0 &lt; x &lt; 10</tt> and <tt>x</tt> is the number of columns in the 
grid representing the level and <tt>1 &lt; y &lt; 10</tt> and <tt>y</tt> 
is the number of rows in the grid representing the level.

	<li>The next y lines will represent the rows of the level, 
starting with row <tt>0</tt> (the top).  Each line will consist of 
<tt>x</tt> letters.  The letters will represent components of the 
level as follows:
	<ul>
		<li>L - Lemming (there will only be one '<tt>L</tt>' per
data set, and it will always be in row <tt>0</tt>)
		<li>S - laser gun (these squares will never be in the final row)
		<li>P - pit of lava (these squares will always be in the final row)
		<li>G - grass (these squares will also always be in the final row)
		<li>O - "empty" square of air
	</ul>
	<li><i>End line</i> -- A single line, "<tt>END</tt>".
</ol>
<p>
Following the final data set will be a single line, "<tt>ENDOFINPUT</tt>".
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>
Output for each data set will be exactly one line.  The line will either 
be "<tt>FERRET</tt>" or "<tt>GARRET</tt>" (both all caps with no whitespace 
leading or following).
<p>
"<tt>FERRET</tt>" will appear if the Lemming can make it safely (without dying) 
to any grass square at the bottom of the level after a series of turns.
<p>
"GARRET" will be output for a data set if it fails to meet the criteria 
for a "<tt>FERRET</tt>" line.
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<p>
<pre>
START 5 7
OOLOO
OOOOO
OOOSO
OOOOO
OOOOO
OOOOO
GPPGG
END
START 3 3
OLO
OSO
GGG
END
START 5 8
LOOOS
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
OOOOO
PPPPG
END
ENDOFINPUT
</pre>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<p>
<pre>
FERRET
GARRET
GARRET
</pre>
<p>

______________________________________________________
2545||||||false||||||
<p>
Inspired by IBM's Blue Gene project, the CEO of Universal
Biological Machinery (UBM), has called on you, UBM's top
software engineer, to develop a program that will calculate
the mutation of the Areopagus-virus, a virus discovered on
Mars by your company's privately-subsidized (top-secret)
space program.
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>
Input to this problem will consist of a (non-empty) series 
of up to <tt>100 data sets</tt>.  Each data set will be 
formatted according to the following description, and 
there will be <b>no blank lines</b> separating data sets.
<p>
A single data set has <tt>3</tt> components:
<p>
<ol>
	<li><i>Start line</i> - A single line, "<tt>START N</tt>", 
where <tt>1 &le; N &le; 20</tt>.
	<li><i>Viral code</i> - A sequence of <tt>N</tt>
alphanumeric characters.  Alphanumeric characters will 
consist of an uppercase letter (<tt>A-Z</tt>) or a digit 
(<tt>0-9</tt>).
	<li><i>End line</i> - A single line, "<tt>END</tt>"
</ol>
<p>
Following the final data set will be a single line, "<tt>ENDOFINPUT</tt>".
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>
For each data set, there will be exactly one output set, and 
there will be no blank lines separating output sets.
<p>
A single output set consists of a single line of the viral code 
after it has stabilized (through mutating).
<p>
The viral code will mutate according to the following rules:
<p>
<ol>
	<li>Initially the first viral segment to mutate begins 
with the first alphanumeric character of the viral code and 
ends with the rightmost alphanumeric character of the code.
	<li>If the first alphanumeric character of a viral 
segment is a letter (<tt>A-Z</tt>), that alphanumeric character
is considered "<tt>unstable</tt>", and will mutate into <tt>n</tt>, 
where <tt>n</tt> is the number of mutations that occur to the viral 
segment immediately to the unstable alphanumeric character's right 
(see #5), unless <tt>n</tt> is greater than <tt>9</tt>, in which 
case the unstable alphanumeric character will mutate into 
<tt>n % 10</tt>.  Also, if there is no viral segment immediately 
to the right of the unstable alphanumeric character, the unstable 
alphanumeric character will mutate into <tt>0</tt>.
	<li>If the first alphanumeric character of a viral segment, 
<tt>n</tt>, is a positive number (<tt>1-9</tt>), that alphanumeric 
character is also considered "<tt>unstable</tt>", and will mutate 
into <tt>n-1</tt>.  It also causes the viral segment beginning with 
the alphanumeric character <tt>n</tt> alphanumeric characters to its 
right and ending with the rightmost alphanumeric character of the 
viral code to mutate.  If there is no alphanumeric character 
<tt>n</tt> alphanumeric characters to its right, then the viral 
segment immediately to its right (see #5), if one exists, will 
mutate.
	<li>If the first alphanumeric character of a viral 
segment is <tt>0</tt>, that alphanumeric character is 
considered "<tt>stable</tt>", and will not mutate (the 
alphanumeric character will remain a <tt>0</tt> and a 
mutation will not be considered to have occurred).
	<li>A viral segment immediately to the right of an
alphanumeric character begins with the alphanumeric character 
one position to its right and ending with the rightmost 
alphanumeric character of the viral code.
</ol>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<p>
<pre>
START 1
A
END
START 4
A1B2
END
START 15
A3B2CCC4AD1232R
END
START 15
0ABCDEFGHIJKLMN
END
START 11
ABCDEFGHIJK
END
START 10
9AAAAAAAAA
END
ENDOFINPUT
</pre>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<p>
<pre>
0
3011
82B26543AD11310
0ABCDEFGHIJKLMN
09876543210
8AAAAAAAA0
</pre>
<p>

______________________________________________________
2546||||||false||||||
<p>
You are a dealer at The One, the first all-binary casino in Las Vegas.
What makes The One special is that its blackjack tables donÕt use cards;
they use bytes (an 8-bit sequence representing a number from 0 to 255)
and nibbles (a 4-bit sequence representing a number from 0 to 15).
<p>
All day long, you play the houseÕs hand against individual opponents.
Of course, the casino owners know their statistics, and they have devised
a strategy for you that gives gamblers just less than even odds.
<p>
<ol>Here are the rules of binary blackjack:
	<li>The goal of the game is to be the player closest to <tt>510</tt> points
without going over.
	<li>Each player is dealt two bytes, one face up and one face down.
	<li>The players then have the opportunity to take more bytes (by saying, 
"<tt>Byte Me!</tt>") or more nibbles (by saying, "<tt>Nibble Me!</tt>") until he 
reaches his limit of <tt>4</tt> hits or has more than <tt>510</tt> points showing.
	<li>All hits are played face up.
	<li>If a player goes over <tt>510</tt>, he immediately <i>busts</i> and loses the hand.
	<li>The dealer hits last.
	<li>The dealer wins any ties (this includes a <i>tie</i> where everyone busts).
</oL>
<p>
<ol>The rules for the dealer are (in order of precedence, where lower numbered 
rules override higher numbered ones):
	<li>Never hit when it is certain that youÕve won by simply looking at 
your hand and what is showing of other peopleÕs hands.
	<li>If your total is strictly less than <tt>382</tt> take a byte hit.
	<li>If your total is less than or equal to <tt>500</tt> take a nibble hit.
	<li>Take no hits
</ol>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>
Input to this problem will consist of a (non-empty) series of up to <tt>100</tt> 
data sets.  Each data set will be formatted according to the following
description, and there will be no blank lines separating data sets.
<p>
<ol>A single data set has <tt>6</tt> components:
	<li><i>Start line</i> Ð A single line, "<tt>START N</tt>", where <tt>N</tt> is the 
number of players playing this hand (not including the dealer).  There will 
never be more than <tt>10</tt> non-dealer players, and the dealer never plays 
by himself.
	<li><i>Dealer Line</i> Ð A single line containing <tt>2</tt> binary strings of 
exactly eight digits separated by exactly one space.  These two strings 
represent the two cards in the dealerÕs hand.
	<li><i>Player Line</i> Ð A single line containing <tt>N 8</tt>-digit binary strings, 
each separated from the others by a single space.  These represent the face-up 
cards of all of the non-dealer players.
	<li><i>Byte Line</i> Ð A single line containing <tt>4 8</tt>-digit binary strings, 
each separated from the others by a single space.  These represent the next <tt>4</tt> 
bytes in the byte deck, in the order they will be drawn.
	<li><i>Nibble Line</i> Ð A single line containing <tt>4 4</tt>-digit binary strings, 
each separated from the others by a single space.  These represent the next <tt>4</tt> 
nibbles in the nibble deck, in the order they will be drawn.
	<li><i>End line</i> Ð A single line, "<tt>END</tt>".
</ol>
<p>
Following the final data set will be a single line, "<tt>ENDOFINPUT</tt>".
<p>
<ul>Here are some other useful facts:
	<li>Oddly enough, each non-dealer player is always dealt a face-down card 
<tt>11111111</tt>, value <tt>255</tt>, but the dealer has no knowledge of this.
	<li>Players other than the dealer never hit (they arenÕt too bright).
</ul>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>
Calculate the actions taken by the dealer and how the dealer fares with the 
resulting hand.
<p>
<ol>For each data set, there will be exactly one output set, consisting 
of the following components:
	<li><i>Hand Line</i> Ð A single line, "<tt>HAND N</tt>", where 
<tt>N</tt> is the number of players playing this hand (not including the 
dealer).
	<li><i>Dealer Hit List</i> Ð A single line will be printed for 
each hit the dealer takes on his turn.  For a byte hit, print a line 
"<tt>Byte me!</tt>", and for a nibble hit print, "<tt>Nibble me!</tt>"
	<li><i>Outcome Line</i> Ð A single line containing "<tt>Win!</tt>" 
if the dealer wins, "<tt>Bust!</tt>" if the dealer loses by busting, and 
"<tt>Lose!</tt>" if the dealer loses without busting.
</ol>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<p>
<pre>
START 1
11111111 11111111
00000001
10101010 01010101 11110000 00001111
1010 0101 1100 0011
END
START 1
10111110 10111111 
11111110
00010010 10101010 01010101 11110000
0001 1010 1100 0011
END
START 8
11111111 00001000
00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 
00010010 10101010 01010101 11110000
0001 1010 1100 0011
END
ENDOFINPUT
</pre>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<p>
<pre>
HAND 1
Win!
HAND 1
Byte me!
Nibble me!
Nibble me!
Nibble me!
Lose!
HAND 8
Win!
</pre>

______________________________________________________
2547||||||false||||||
<p>
You are a very impatient person, and hate to be kept waiting.
You are on your way to visit a relative all the way in New Orleans.
The problem is that the bus station you are at has the world's worst
bus schedule!  There are no arrival or departure times listed, only
route durations for each bus running.  Being the impatient person you
are, you whip out your laptop and attempt to write a program that will
determine how long you will have to wait before the next bus comes.
Hey, you have nothing better to do, right?
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>
Input to this problem will consist of a (non-empty) series of up to 
<tt>100</tt> data sets.  Each data set will be formatted according 
to the following description, and there will be <b>no blank lines</b> 
separating data sets.
<p>
<ol>A single data set has <tt>3</tt> components:
	<li><i>Start line</i> - A single line, "<tt>START N</tt>", 
where <tt>N</tt> is the number of buses running and <br>
                                        <tt>1 &le; N &le; 20</tt>.

	<li><i>Route Duration line</i> - There will be <tt>N</tt> 
of these lines, and each line will consist of <tt>M</tt> route 
durations (where <tt>1 &le; M &le; 10</tt>), which will signify 
how long it will take each bus to return to the bus station after 
completing a particular route.  A route duration will be 
represented as an integer between <tt>1</tt> and <tt>1000</tt> 
(inclusive).

	<li><i>Arrival Time</i> - There will only be one of these 
lines per data set.  This line represents the time that you arrived 
at the bus station and began waiting.  This is simply the number of 
time units that you arrived at the bus station after the buses began 
running (all buses begin running at time <tt>0</tt>).  This number 
is represented as a positive integer (yes, it can be <tt>0</tt> as 
well, this would signify arriving at the bus station as the buses 
begin running).  

	<li><i>End line</i> - A single line, "<tt>END</tt>".
</ol>
<p>
Following the final data set will be a single line, "<tt>ENDOFINPUT</tt>".
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>
For each data set, there will be exactly one line of output.  
This line will simply be the number of time units you will 
have to wait before the next bus comes after you arrive.  
You hate waiting so much that you will just get on the 
first bus that returns to the station.  Let's hope this 
is the bus to New Orleans!  
<p>
<h3>Notes</h3>
<p>
<ol>
	<li>All buses continuously go on their routes, 
starting back up with their first route after their 
last route is done.
	<li>If the passenger's arrival time coincides 
with any of the bus' route departure times, he/she 
catches the bus at that time.
</ol>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<p>
<pre>
START 3
100 200 300
400 500 600
700 800 900
1000
END
START 3 
100 200 300 4 3 2 4 2 22 
800
10 1000
32767
END
ENDOFINPUT
</pre>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<p>
<pre>
200
20
</pre>
<p>

______________________________________________________
2548||||||false||||||
<P>Two words are said to be <SPAN CLASS="textit">anagrams</SPAN> if one can be formed by permuting the letters of the other. For example: <TT>"pots"</TT>, <TT>"tops"</TT>, and <TT>"stop"</TT> are anagrams. An <SPAN CLASS="textit">anagram chain</SPAN> is a list of words that are all anagrams to each other. The shortest anagram chain has the length two. We're interested in calculating the length of the longest anagram chain in a given list of words. For example, the following nine words: <TT>rates, pots, tops, along, aster, stop, stare, tears,</TT> and <TT>long</TT> has two anagram chains where the longest includes the four words: <TT>rates, aster, stare,</TT> and <TT>tears</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on a number of test cases. The first line of the input file contains an integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> representing the number of test cases in the input file.<P>Each test case contains one or more words, but no more than 20,000 words, with no duplicates.<P>Each word appears on a separate line. All words are in small letters, and in no particular order. No word will be longer than 10 characters. Each test case ends with a string made of one or more `<TT>-</TT>' characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write, on a separate line, the length (number of words) of the longest anagram chain found in the given list of words.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                                
rates                                            
pots
tops
along
aster
stop
stare
tears
long
-----
north
fresher
refresh
thorn
bye
--
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
2
</PRE><P>
______________________________________________________
2549||||||false||||||
<P>Yasmeen loves solving crossword puzzles. A crossword puzzle is a puzzle in which words are filled into a pattern of numbered squares (the grid) in answer to correspondingly numbered clues and in such a way that the words read across (left to right,) and down.<P><DIV ALIGN="CENTER"><IMG WIDTH="185" HEIGHT="408" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2549a.jpg ALT="\epsfbox{p2549a.eps}"> <tex2html_verbatim_mark></DIV><P>Yasmeen normally solves a puzzle by writing the answers on a separate sheet of paper rather than on the puzzle itself. Once the puzzle is solved, she then neatly copies the solution on the grid.<P>But today Yasmeen has a problem, she lost the page of the clues (which describes where the words go on the puzzle.) All what she has is the puzzle grid and the list of words that constitutes the answers to the clues. She needs your help in reconstructing the solution to the puzzle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file is an integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> representing the number of test cases in the input file.<P>The first line of each test case specifies three integers: <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is the number of rows in the grid, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is the number of columns in the grid, and <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> is the number of words. Note that <!-- MATH
 $0 < R < 50$
 --><SPAN CLASS="MATH">0 &lt; <I>R</I> &lt; 50</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < C < 50$
 --><SPAN CLASS="MATH">0 &lt; <I>C</I> &lt; 50</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < W < 1000$
 --><SPAN CLASS="MATH">0 &lt; <I>W</I> &lt; 1000</SPAN> <tex2html_verbatim_mark>.<P>Starting at the second line of each test case are <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines describing the grid. The grid is described using two characters: A `<TT>.</TT>' indicates a square that should be eventually filled with a letter, while a `<TT>#</TT>' means the corresponding square ``is blocked" (it doesn't receive any letter.)<P>The list of words appears on the last line of each test case. Words are separated by exactly one space character. All words are small letters and there are no duplicates.<P>The sample input describes two test cases: The first is a <SPAN CLASS="MATH">4 <TT>x</TT> 5</SPAN> <tex2html_verbatim_mark> grid with 10 words. The second test case starts at line #8 and describes a <SPAN CLASS="MATH">7 <TT>x</TT> 7</SPAN> <tex2html_verbatim_mark> grid with 15 words.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the grid with the solution filled in. There should be a blank line after each grid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4 5 10
.....
..#..
....#
#....
he stood no ones else so she tell do lost
7 7 15
..#....
.#....#
.#.###.
.......
.#.#.#.
##.....
.......
egypt arab africa pyramid cairo dr ad nb ri ia ed maid addon ding aladdin
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
stood
he#no
else#
#lost

ed#ding
g#arab#
y#f###a
pyramid
t#i#a#d
##cairo
aladdin
</PRE><P><P><P><BR><DIV ALIGN="CENTER"><IMG WIDTH="230" HEIGHT="243" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2549a.jpg ALT="\epsfbox{p2549b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Sample CrossWord #2</DIV><P>
______________________________________________________
2550||||||false||||||
<P>In recognition to the number of famous mathematicians of its residents, the City of Flatland has decided to rename all its streets as numbers (positive integers to be more precise.) The streets of Flatland are organized as a grid. The city decided to number all its North-South streets using powers of two <SPAN CLASS="MATH">(1, 2, 4, 8,...)</SPAN> <tex2html_verbatim_mark> and all its East-West streets using odd numbers <SPAN CLASS="MATH">(1, 3, 5,...)</SPAN> <tex2html_verbatim_mark>. The city also decided to re-number all its buildings so that the number of each building is the result of multiplying the numbers of the two streets the building is on. For example, building #40 is at the intersection of streets 5 and 8.<P><DIV ALIGN="CENTER"><IMG WIDTH="818" HEIGHT="345" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2550.jpg ALT="\epsfbox{p2550.eps}"> <tex2html_verbatim_mark></DIV><P>The problem with this numbering scheme is that it is not easy for the residents to determine the distance between buildings. The distance between any two buildings is the number of buildings one needs to cross to go from one building to another. One can only move parallel to the streets (no diagonals or any other shortcuts.) For example, to go from building #6 to building #40, one has to travel one building north and two buildings east, so the distance is 3. Similarly, the distance from building #80 to building #88 is 4.<P>Help the residents of Flatland by writing a program that calculates the distance between any two given buildings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is made of one or more pairs of building numbers. Each pair <SPAN CLASS="MATH">&lt; <I>S</I>, <I>T</I> &gt;</SPAN> <tex2html_verbatim_mark> appears on a single line with a single space between the two numbers. Note that <!-- MATH
 $S,T < 1,000,000,000$
 --><SPAN CLASS="MATH"><I>S</I>, <I>T</I> &lt; 1, 000, 000, 000</SPAN> <tex2html_verbatim_mark>. The end of the input is identified by the pair <SPAN CLASS="MATH">&lt; 0, 0 &gt;</SPAN> <tex2html_verbatim_mark> (which is not part of the test cases.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input pair <SPAN CLASS="MATH">&lt; <I>S</I>, <I>T</I> &gt;</SPAN> <tex2html_verbatim_mark>, the output file should include a line of the form:<P><P><BR><TT>The distance between</TT> <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> <TT>and</TT> <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <TT>is</TT> <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR>The output file should be in the same order as the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
12 14                        
20 30                        
40 50                        
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The distance between 12 and 14 is 3.
The distance between 20 and 30 is 6.
The distance between 40 and 50 is 12.
</PRE><P>
______________________________________________________
2551||||||false||||||
<P>
Lamees works at the delivery zone in a plant. Carts arrive to the delivery zone on the [IN] track, and it is Lamees's responsibility to make sure the carts are sorted before leaving the delivery zone. The carts are heavy, so they must remain on the tracks at all times. The carts can be temporarily pushed to either of the two side bays. The exchange at the center can be configured to move the carts in the following seven directions:       

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2551b.eps}$
 -->
<IMG
 WIDTH="511" HEIGHT="153" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="\epsfbox{p2551b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Initially, the exchange is set to [IN <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> OUT]. The exchange can be reconfigured from the control room which is a bit far from the delivery zone. Normally, there is an operator at the control room to configure the exchange while Lamees remains at the delivery zone. But today the operator has called in sick, and Lamees has to do both tasks herself. Every time the exchange is to be reconfigured, Lamees has to make a trip to the control room. Help Lamees by writing a program to compute the minimum number of times the exchange must be reconfigured to complete the job.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2551a.eps}$
 -->
<IMG
 WIDTH="460" HEIGHT="431" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="\epsfbox{p2551a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
For example, the carts <TT>D-C-A-B</TT> can be sorted in three exchanges (see figure on next page.) First set the exchange to [IN  <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> LEFT], push <TT>D</TT> and <TT>C</TT>, then set the exchange to [IN <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> OUT], push <TT>A</TT>, <TT>B</TT>, finally set the exchange to [LEFT <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> OUT] and push <TT>C</TT>, <TT>D</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file includes a number of test cases. Each test case is described using a string of capital letters appearing on a separate line. The end of the test cases is indicated by a string starting with the letter `<TT>Z</TT>' (which is not part of the test cases.)

<P>
Each test case specifies the order in which the carts arrive to the [IN] track. For example, the string ``<TT>DCAB</TT>" says that <TT>D</TT> arrives first, then <TT>C</TT>, then <TT>A</TT>, and finally <TT>B</TT>. The proper order of the carts is a lexicographic ordering (i.e. ``<TT>ABCD</TT>"). There will be no ``missing" letters in any test case, and no duplicates. There will be no more than 26 carts in any test string.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, write on a separate line, the minimum number of exchanges needed to sort the carts.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
DCAB                                           
EDACB                                          
ZaEnd
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
4
</PRE> 

<P>

<P><P>
<BR>

<B>Illustrations</B>

<P>
How the first test case was solved in 3 moves:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2551c.eps}$
 -->
<IMG
 WIDTH="805" HEIGHT="319" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="\epsfbox{p2551c.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<P><P>
<BR>
How the second test case was solved in 4 moves:

<P>
<DIV ALIGN="CENTER">
 =6.5in
<!-- MATH
 $\epsfbox{p2551d.eps}$
 -->
<IMG
 WIDTH="898" HEIGHT="277" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="\epsfbox{p2551d.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

______________________________________________________
2552||||||false||||||
<P>
A palindrome is a word that reads the same forward or backward. For example, ``noon", ``civic", and ``rotator" are all palindromes. We can extend the definition of palindromes to include integers too. For example, ``5", ``22", and ``10701" are all palindromes. As for negative integers, we'll say that a negative integer is a palindrome only if its positive counterpart is a palindrome.

<P>
Write a program that computes how many palindrome integers there are between any two given integers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file is made of a number of test cases. Each test case specifies a range of integers using a pair of integers <SPAN CLASS="MATH">&lt; <I>L</I>, <I>U</I> &gt;</SPAN>
<tex2html_verbatim_mark> where <!-- MATH
 $-1,000,000 < L \le U < 1,000,000$
 -->
<SPAN CLASS="MATH">-1, 000, 000 &lt; <I>L</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2552img1.png
 ALT="$ \le$"><I>U</I> &lt; 1, 000, 000</SPAN>
<tex2html_verbatim_mark>. Each test case is specified on a separate line, with at least one space character between <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>U</I></SPAN>
<tex2html_verbatim_mark>.

<P>
The set of test cases ends with the pair <SPAN CLASS="MATH">&lt; -1, -1 &gt;</SPAN>
<tex2html_verbatim_mark>, which is not part of the test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case <SPAN CLASS="MATH">&lt; <I>L</I>, <I>U</I> &gt;</SPAN>
<tex2html_verbatim_mark>, your program should print how many palindromes there are within the range <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>U</I></SPAN>
<tex2html_verbatim_mark> (inclusive).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
101 202                                          
11 30                                            
-202 -101                                        
-1 -1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
11
2
11
</PRE> 

<P>

______________________________________________________
2553||||||false||||||
<P>Poor Johnny; He can hardly count. Johnny needs a program to ``spell out" numbers into their equivalent English text. For example, the number 109210 is read in English as: ``<SPAN CLASS="textit">one hundred and nine thousand, two hundred and ten</SPAN>". To make the program easier, Johnny is willing to accept the following compromises:<P><OL><LI>The program will be given positive integers less than a million. </LI><LI>No need to print any punctuation marks. </LI><LI>Use singular words, not plural. For example: ``<SPAN CLASS="textit">thousand</SPAN>" rather than ``<SPAN CLASS="textit">thousands</SPAN>". </LI><LI>Don't use the word ``<SPAN CLASS="textit">and</SPAN>" in the phrase. For example, instead of converting the number 102 into ``one hundred and two", all you need to do is convert it to ``<SPAN CLASS="textit">one hundred two</SPAN>". Similarly, 109210 would be spelled out as: ``<SPAN CLASS="textit">one hundred nine thousand two hundred ten</SPAN>". </LI></OL><P>On the other hand, Johnny requires the following:<P><OL><LI>Johnny hates spelling mistakes. The output should be spelled correctly and using only small letters. The list of allowable words in the output is:<P><TT>zero, one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, thirty, forty, fifty, sixty, seventy, eighty, ninety, hundred, thousand</TT>. </LI><LI>Johnny requires that the output be sorted in a non-decreasing order to make it easier for him to locate the numbers. </LI><LI>For an unclear reason, there will be duplicates in the input file, and Johnny insists that each instance be printed. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is made of one or more positive integers terminated by a negative number (which is not part of the input data.) Each number appears on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each number, you should print exactly one line showing the number and its equivalent phrase as shown in the sample output. Use a single space character as a separator. Note the colon character `<TT>:</TT>' after the number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
199
123456
14
199
421000
112
999999
199
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
14: fourteen
112: one hundred twelve
199: one hundred ninety nine
199: one hundred ninety nine
199: one hundred ninety nine
123456: one hundred twenty three thousand four hundred fifty six
421000: four hundred twenty one thousand
999999: nine hundred ninety nine thousand nine hundred ninety nine
</PRE><P>
______________________________________________________
2554||||||false||||||
<P>Snakes and ladders is a board game played on an <SPAN CLASS="MATH"><I>N</I> <TT>*</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> squares grid (see the figure on the next page.) The squares are numbered from 1 up to <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>. Players start by placing their counters at square #1. Players take turns by throwing a dice and moving their counter the number of spaces shown on the dice. The board includes a number of snakes and ladders. If a player's counter lands on the mouth of a snake, the counter must move down to the tail of the snake. If a player's counter lands at the bottom of a ladder then the counter must climb to the top. The winner is the first player to reach square #<SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>. The following points are worth knowing about the layout of the board:<P><OL><LI>There are no ladders or snakes that start or end at the first or last square. </LI><LI>Snakes and ladders can't be adjacent. There is at least one ``regular" square between any two squares that are the starting or ending points of either snakes or ladders. </LI></OL><P>Your friend Fadi wants you to write a program to help him win the game of Snake and Ladders. See, Fadi is a professional cheater. He can throw the dice and let it show any number he desires. Fadi wants a program to determine the minimum number of throws needed to win the game.<P><P><BR>For example, given the ``example one" board shown on the next page, Fadi can win in three moves as follows: On the first throw he gets a 4, moving him to square 5, up the ladder to square 16. Then another 4 on the second throw taking him to square 20, up the ladder to square 33. A 3 on the third throw wins him the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file is an integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> representing the number of test cases in the input file.<P>Each test case is described using three lines. The first line includes three integers: <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the size of the board, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is the number of snakes on the board, <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> is the number of ladders. Note that <!-- MATH
 $0 < N \le 20$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2554img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < S < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>S</I> &lt; 100</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < T < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>T</I> &lt; 100</SPAN> <tex2html_verbatim_mark>.<P>The second line of a test case includes <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> integer pairs. Each pair describes a particular snake. The first integer is the starting square of the snake (its mouth) and the second integer is the ending square (the tail.) Remember, squares are numbered starting at 1.<P>The third line is the same as the second but for ladders. It includes <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> integer pairs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write, on a separate line, the minimum number of dice throws required to win the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                                        
6 1 3                                                    
35 25
3 23 5 16 20 33
5 1 1
16 14
9 11
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
4
</PRE><P><P><P><BR><B>Illustrations of Example One and Example Two</B><P><DIV ALIGN="CENTER"><IMG WIDTH="869" HEIGHT="421" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2554img1.png ALT="\epsfbox{p2554.eps}"> <tex2html_verbatim_mark></DIV><P>
______________________________________________________
2555||||||false||||||
<P>Back in 1963, while doodling during a boring talk at a scientific meeting, a Polish-American mathematician named Stanislaw Ulman came up with what is now known as the <SPAN CLASS="textit">Prime Spiral</SPAN>. While drawing a grid of lines, he decided to number the intersections according to a spiral pattern as you see in the adjacent figure. He then began circling the numbers in the spiral that were primes. Surprisingly, the circled primes appeared to fall along a number of diagonal straight lines.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>17</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>16</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>18</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>19</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>22</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>23</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>24</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>25</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Prime Spiral of Size <SPAN CLASS="MATH"><I>N</I> = 5</SPAN> <tex2html_verbatim_mark></DIV><P><P><BR>In this problem, we're interested in finding the largest sum of primes along any diagonal straight line for any given grid of size <SPAN CLASS="MATH"><I>N</I> &lt; 100</SPAN> <tex2html_verbatim_mark> . For example, inspecting the prime spiral for <SPAN CLASS="MATH"><I>N</I> = 5</SPAN> <tex2html_verbatim_mark>, the largest sum of primes on a diagonal line is <SPAN CLASS="MATH">19 + 7 + 23 = 49</SPAN> <tex2html_verbatim_mark>. Similarly the largest sum of primes for <SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark> is 10.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line in the input file contains a single integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> which represents how many data sets are used to test your program.<P>Each data set contains exactly one integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, representing the size of the grid, on a separate line. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is always an odd number in the range <!-- MATH
 $0 < N < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 100</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the largest sum on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                                 
5                                                 
3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
49
10
</PRE>
______________________________________________________
2556||||||false||||||
<P><EM>Four Quarters</EM> is a game of chance played with, well, four quarters. Two people, called A and B, each flip two quarters each round. They each gain or lose points each round based on the following tables:<P><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=RHS RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=3>Player B</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HH</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>TT</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Player</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HH</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>TT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><B>Player A's payoff</B></DIV><P><DIV ALIGN="CENTER"></DIV><P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=RHS RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=3>Player B</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HH</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>TT</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Player</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HH</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>TT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><B>Player B's payoff</B></DIV><P><DIV ALIGN="CENTER"></DIV><P><P><P><BR>There is no difference between Heads/Tails and Tails/Heads. As you can see, the odds are stacked in Player A's favor. At the beginning of the game, each player has 0 points, and points accumulate as the game progresses. At the end of the game, whichever player has the most points wins.<P>You must write a program that determines the probability that Player A will win, Player B will win, or they will tie, after a certain number of rounds. Assume that the coins are fair, i.e. that heads and tails are equally likely.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is no input file for this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output a table that lists the probability that Player A will win, B will win, or they will tie, after each round for 1 to 20 rounds. The output for rounds 1 through 3 is given below.<P>Probabilities must be expressed as a percent, with 4 places after the decimal.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P>There is no sample input for this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Round   A wins    B wins    Tie
    1   43.7500%  18.7500%  37.5000%
    2   56.6406%  22.2656%  21.0938%
    3   62.3535%  22.7051%  14.9414%
</PRE><P>
______________________________________________________
2557||||||false||||||
<P>A certain prison contains a long hall of <SPAN CLASS="MATH"><I>n</I></SPAN> cells, each right next to each other. Each cell has a prisoner in it, and each cell is locked.<P>One night, the jailer gets bored and decides to play a game. For round 1 of the game, he takes a drink of whiskey, and then runs down the hall unlocking each cell. For round 2, he takes a drink of whiskey, and then runs down the hall locking every other cell (cells 2, 4, 6, ...). For round 3, he takes a drink of whiskey, and then runs down the hall. He visits every third cell (cells 3, 6, 9, ...). If the cell is locked, he unlocks it; if it is unlocked, he locks it. He repeats this for <SPAN CLASS="MATH"><I>n</I></SPAN> rounds, takes a final drink, and passes out.<P>Some number of prisoners, possibly zero, realizes that their cells are unlocked and the jailer is incapacitated. They immediately escape.<P>Given the number of cells, determine how many prisoners escape jail.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single positive integer. This is the number of lines that follow. Each of the following lines contains a single integer between 5 and 100, inclusive, which is the number of cells <SPAN CLASS="MATH"><I>n</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line, you must print out the number of prisoners that escape when the prison has <SPAN CLASS="MATH"><I>n</I></SPAN> cells.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
5
100
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
10
</PRE><P>
______________________________________________________
2558||||||false||||||
<P>A new TV game show requires contestants to deduce a five letter word based on hints obtained by guessing other five letter words. The way the game is played is as follows: a secret five letter word is selected by the production staff of the game show. The object of the game is for the contestant to guess the secret word. The first letter of the secret word is revealed. The contestant will then guess a five letter word that may match the secret word. A computer then provides feedback to the contestant on the accuracy of the guess. Feedback consists of a report indicating if any letters in the guessed word are correct and in the same position in the secret word, if any letters in the guessed word are correct but not in the correct position in the secret word, and any letters in the guessed word that do not appear in the secret word.<P>As an example, the production staff chooses the secret word: ``<TT>HELLO</TT>". The contestant is told the first letter of the word is ``<TT>H</TT>". The contestant then guesses what the word could be, knowing it begins with the letter ``<TT>H</TT>". Let's say the contestant guesses the word: ``<TT>HOLES</TT>". The game show computer would report that the ``<TT>H</TT>" and ``<TT>L</TT>" are in the secret word and in the correct position. In addition, the ``<TT>O</TT>" and ``<TT>E</TT>" are in the secret word, but in the incorrect position, and the ``<TT>S</TT>" is not in the secret word. This is conveyed to the contestant by a single line report:<P><P><BR><BIG CLASS="HUGE"><TT>HoLe.</TT></BIG><P><P><BR>The upper case letters (``<TT>H</TT>" and ``<TT>L</TT>") indicate correct letter and position. The lower case letters (``<TT>o</TT>" and ``<TT>e</TT>") indicate correct letter, wrong position. The period (``<TT>.</TT>") indicates a wrong letter (not in the secret word). Letters from the word to guess should only be referenced once per try. If a single letter is guessed twice in the wrong position in the same try, only the first one should be reported. <P>You will write a program that evaluates the contestant guesses, and prints out the single line report for each guess. If the contestant guesses the secret word exactly, then the five capital letters of the secret word will be displayed in the report.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input data file consists of datasets for one or more games. A blank line marks the beginning of the next dataset (game). The line after the blank line contains the secret word. The remaining lines in the dataset represent the contestant's guesses; there may be too few or too many guesses than are necessary to guess the secret word. The secret word will contain exactly five upper case letters. The contestant's guesses, however, have to be checked for validity: valid guesses consist of exactly five upper case letters. Input is terminated by a dataset with the secret word: `<TT>LINGO</TT>' (that is, game play is stopped at that point, the program terminates, and no further guessing occurs).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each game's output should be preceded by a single blank line (except for the terminating case). The first single line status report should be printed, which consists of the first letter of the secret word, followed by four periods. For each guess, print the single line status report for that guess. For an invalid guess, repeat the previous single line status report. If the guess exactly matches the secret word, that game ends and you should move on to the next one. The contestant may guess a maximum of six times; after the sixth guess, if the contestant did not guess the secret word, or you run out of guesses (the contestant gives up) print out the secret word in lower case letters and move on to the next game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>

HELLO
HOLES
HAPPY
HELMS
HELLO
HELPS

PARTY
PARKS
PARES
PARIS
PONDER
PATTY
PUNTS
PARTY

HELIX
HeLIX
HELIX

HELIX
HAELL

LINGO
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>

H....
HoLe.
H....
HEL..
HELLO

P....
PAR..
PAR..
PAR..
PAR..
PA.TY
party

H....
H....
HELIX

H....
H.el.
helix
</PRE><P>
______________________________________________________
2559||||||false||||||
<P>Write a program to convert numbers in one base to numbers in a second base. There are 62 different <EM>digits</EM>:<P><P><BR>{ 0-9,A-Z,a-z }<P><P><BR><B>HINT:</B> If you make a sequence of base conversions using the output of one conversion as the input to the next, when you get back to the original base, you should get the original number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single positive integer. This is the number of lines that follow. Each of the following lines will have a (decimal) input base followed by a (decimal) output base followed by a number expressed in the input base. Both the input base and the output base will be in the range from 2 to 62. That is (in decimal) A = 10, B = 11, ..., Z = 35, a = 36, b = 37, ..., z = 61 (0-9 have their usual meanings).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output of the program should consist of three lines of output for each base conversion performed. The first line should be the input base in decimal followed by a space then the input number (as given expressed in the input base). The second output line should be the output base followed by a space then the input number (as expressed in the output base). The third output line is blank.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8
62 2 abcdefghiz
10 16 1234567890123456789012345678901234567890
16 35 3A0C92075C0DBF3B8ACBC5F96CE3F0AD2
35 23 333YMHOUE8JPLT7OX6K9FYCQ8A
23 49 946B9AA02MI37E3D3MMJ4G7BL2F05
49 61 1VbDkSIMJL3JjRgAdlUfcaWj
61 5 dl9MDSWqwHjDnToKcsWE1S
5 10 42104444441001414401221302402201233340311104212022133030
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
62 abcdefghiz
2 11011100000100010111110010010110011111001001100011010010001

10 1234567890123456789012345678901234567890
16 3A0C92075C0DBF3B8ACBC5F96CE3F0AD2

16 3A0C92075C0DBF3B8ACBC5F96CE3F0AD2
35 333YMHOUE8JPLT7OX6K9FYCQ8A

35 333YMHOUE8JPLT7OX6K9FYCQ8A
23 946B9AA02MI37E3D3MMJ4G7BL2F05

23 946B9AA02MI37E3D3MMJ4G7BL2F05
49 1VbDkSIMJL3JjRgAdlUfcaWj

49 1VbDkSIMJL3JjRgAdlUfcaWj
61 dl9MDSWqwHjDnToKcsWE1S

61 dl9MDSWqwHjDnToKcsWE1S
5 42104444441001414401221302402201233340311104212022133030

5 42104444441001414401221302402201233340311104212022133030
10 1234567890123456789012345678901234567890
</PRE><P>
______________________________________________________
2560||||||false||||||
<P>A sequence of positive integers is <EM>Palindromic</EM> if it reads the same forward and backward. For example:<P><PRE>
     23 11 15 1 37 37 1 15 11 23

     1 1 2 3 4 7 7 10 7 7 4 3 2 1 1
</PRE><P>A <EM>Palindromic</EM> sequence is <EM>Unimodal Palindromic</EM> if the values do not decrease up to the middle value and then (since the sequence is palindromic) do not increase from the middle to the end For example, the first example sequence above is <B>NOT</B> <EM>Unimodal Palindromic</EM> while the second example is.<P>A <EM>Unimodal Palindromic</EM> sequence is a <EM>Unimodal Palindromic Decomposition</EM> of an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, if the sum of the integers in the sequence is <SPAN CLASS="MATH"><I>N</I></SPAN>. For example, all of the <EM>Unimodal Palindromic Decompositions</EM> of the first few integers are given below:<P><PRE>
1:  (1)
2:  (2), (1 1)
3:  (3), (1 1 1)
4:  (4), (1 2 1), (2 2), (1 1 1 1)
5:  (5), (1 3 1), (1 1 1 1 1)
6:  (6), (1 4 1), (2 2 2), (1 1 2 1 1), (3 3),
          (1 2 2 1), (1 1 1 1 1 1)
7:  (7), (1 5 1), (2 3 2), (1 1 3 1 1), (1 1 1 1 1 1 1)
8:  (8), (1 6 1), (2 4 2), (1 1 4 1 1), (1 2 2 2 1),
          (1 1 1 2 1 1 1), (4 4), (1 3 3 1), (2 2 2 2),
          (1 1 2 2 1 1), (1 1 1 1 1 1 1 1)
</PRE><P>Write a program, which computes the number of <EM>Unimodal Palindromic Decompositions</EM> of an integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of a sequence of positive integers, one per line ending with a `<TT>0</TT>' (zero) indicating the end.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input value except the last, the output is a line containing the input value followed by a space, then the number of <EM>Unimodal Palindromic Decompositions</EM> of the input value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
4
5
6
7
8
10
23
24
131
213
92
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 2
3 2
4 4
5 3
6 7
7 5
8 11
10 17
23 104
24 199
131 5010688
213 1055852590
92 331143
</PRE><P>
______________________________________________________
2561||||||false||||||
<P>In an extended version of the game <EM>Lights Out</EM>&#169;, is a puzzle with 5 rows of 6 buttons each (the actual puzzle has 5 rows of 5 buttons each). Each button has a light. When a button is pressed, that button and each of its (up to four) neighbors above, below, right and left, has the state of its light reversed. (If on, the light is turned off; if off, the light is turned on.) Buttons in the corners change the state of 3 buttons; buttons on an edge change the state of 4 buttons and other buttons change the state of 5. For example, if the buttons marked <B>X</B> on the left below were to be pressed, the display would change to the image on the right.<P><DIV ALIGN="CENTER"><IMG WIDTH="629" HEIGHT="188" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2561a.gif ALT="\epsfbox{p2561a.eps}"></DIV><P>The aim of the game is, starting from any initial set of lights on in the display, to press buttons to get the display to a state where all lights are off. When adjacent buttons are pressed, the action of one button can undo the effect of another. For instance, in the display below, pressing buttons marked X in the left display results in the right display. Note that the buttons in row 2 column 3 and row 2 column 5 both change the state of the button in row 2 column 4, so that, in the end, its state is unchanged.<P><DIV ALIGN="CENTER"><IMG WIDTH="639" HEIGHT="188" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2561a.gif ALT="\epsfbox{p2561b.eps}"></DIV><P><P><BR><B>Note:</B><P><OL><LI>It does not matter what order the buttons are pressed. </LI><LI>If a button is pressed a second time, it exactly cancels the effect of the first press, so no button ever need be pressed more than once. </LI><LI>As illustrated in the second diagram, all the lights in the first row may be turned off, by pressing the corresponding buttons in the second row. By repeating this process in each row, all the lights in the first four rows may be turned out. Similarly, by pressing buttons in columns 2, 3 ..., all lights in the first 5 columns may be turned off. </LI></OL><P>Write a program to solve the puzzle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input is a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> which is the number of puzzles that follow. Each puzzle will be five lines, each of which has six <TT>0</TT>'s or <TT>1</TT>'s separated by one or more spaces. A `<TT>0</TT>' indicates that the light is off, while a `<TT>1</TT>' indicates that the light is on initially.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each puzzle, the output consists of a line with the string: `<TT>PUZZLE #<SPAN CLASS="MATH"><I>m</I></SPAN></TT>', where <SPAN CLASS="MATH"><I>m</I></SPAN> is the index of the puzzle in the input file. Following that line, is a puzzle-like display (in the same format as the input) . In this case, <TT>1</TT>'s indicate buttons that must be pressed to solve the puzzle, while <TT>0</TT>'s indicate buttons, which are not pressed. There should be exactly one space between each `<TT>0</TT>' or `<TT>1</TT>' in the output puzzle-like display.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
0 1 1 0 1 0
1 0 0 1 1 1
0 0 1 0 0 1
1 0 0 1 0 1
0 1 1 1 0 0
0 0 1 0 1 0
1 0 1 0 1 1
0 0 1 0 1 1
1 0 1 1 0 0
0 1 0 1 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Ouput</A>&nbsp;</FONT></H2><P><PRE>
PUZZLE #1
1 0 1 0 0 1
1 1 0 1 0 1
0 0 1 0 1 1
1 0 0 1 0 0
0 1 0 0 0 0
PUZZLE #2
1 0 0 1 1 1
1 1 0 0 0 0
0 0 0 1 0 0
1 1 0 1 0 1
1 0 1 1 0 1
</PRE><P>
______________________________________________________
2562||||||false||||||
<P>A certain data compression technique involves creating a table of variable-length binary codes where one or more binary digits are used to represent a single letter of an alphabet. Usually, letters that occur most frequently in words generated using this alphabet will have shorter binary codes than those used less frequently. For example, in an alphabet consisting of the letters A through Z, in general the letter E appears in more words than the letter Q; therefore it would be expected that E would have a shorter binary code than does Q.<P>Given a sample string using at least one of each letter in an alphabet, along with the entire binary encoding of that sample string, you should be able to generate at least one binary code table for each letter in the alphabet. For example, consider the sample string: ``<TT>CAB</TT>" which contains each letter of the alphabet {A,B,C}. If the binary encoding of ``<TT>CAB</TT>" is ``<TT>01011</TT>" then the (only) binary code table is:<P><PRE>
   C = 0
   A = 10
   B = 11
</PRE><P>The binary codes for each character are <EM>prefix</EM> codes in that no code in the set can be the initial binary string for any other code (so <TT>A = 01</TT>, <TT>B = 011</TT> would not be allowed). For this problem, you will write a program that determines binary code tables for sample strings and their binary encodings. If there is a single binary code table solution, then you will print it out (sorted). If more than one binary code table can be generated from the given set of data, you will print `<TT>MULTIPLE TABLES</TT>'.<P><P><BR><B>Note:</B> For a given alphabet, the entire code space will be used; that is, there will be no unused codes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of a single line consisting of an integer value <SPAN CLASS="MATH"><I>N</I></SPAN> representing the number of datasets that follow. Each dataset consists of two lines. The first line is the sample string that contains at least one of each letter (or space) in the alphabet. The second line is the binary encoding of the sample string.<P><P><BR><B>Note:</B> Sample strings may only contain upper case letters and spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, print a line that identifies the dataset in the format: `<TT>DATASET #<SPAN CLASS="MATH"><I>n</I></SPAN></TT>' where <SPAN CLASS="MATH"><I>n</I></SPAN> is the dataset number (1 through <SPAN CLASS="MATH"><I>N</I></SPAN>). If more than one binary code table can be generated to represent the alphabet, print `<TT>MULTIPLE TABLES</TT>' on a new line and move onto the next dataset. If only one binary code table can be generated, for each character in the alphabet, display the letter, a space, and equal sign `<TT>=</TT>', a space and the binary code for that letter. Display the table in order sorted by the ASCII value of each character of the alphabet.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
CAB
01011
HELLO WORLD
111011011110111101111100111111111111011111101111010
ABCDEFGHI
010110111011110111110111111011111110001011111111
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
DATASET #1
A = 10
B = 11
C = 0
DATASET #2
  = 0
D = 10
E = 110
H = 1110
L = 11110
O = 111110
R = 1111110
W = 1111111
DATASET #3
MULTIPLE TABLES
</PRE><P>
______________________________________________________
2563||||||false||||||
<P>One type of picture puzzle consists of nine square pieces, each of which has one-half of a picture on each edge. The pictures on each piece are either the left or the right half of one of four pictures designated B, C, K and P for this problem. The picture halves are aligned along the edges so that, if the left half is on one piece and the right on another, when the two pieces are aligned the pictures match. The purpose of the puzzle is to place the nine pieces into a three by three grid so that all the pictures along the adjacent edges match. Note that some of the pieces may need to be rotated to match.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2563.gif ALT="\epsfbox{p2563.eps}"></DIV><P>Write a program to solve one or more instances of the puzzle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a sequence of problems. Each problem begins with the problem number on a line by itself. The end of the data is indicated by a problem number of `<TT>0</TT>'. Following the problem number line will be nine lines describing the pieces. Each of these lines begins with the piece number (1 through 9) followed by the picture on the top, right side, bottom and left side of the piece, in that order and separated by spaces. The picture halves are BL, BR, CL, CR, KL, KR, PL and PR. BL matches with BR, CL matches with CR, KL matches with KR and PL matches with PR. (For example, BL is the <EM>left</EM> half and BR is the <EM>right</EM> half of the picture designated B)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each problem is to be: A line with the problem number followed by a colon `<TT>:</TT>'. If the problem has no solution, the next line should be `<TT>No Solution</TT>'. If there is a solution, that solution should be displayed as follows:<P>Since any solution may be rotated 90, 180 or 270 degrees to obtain another, the center square should be in the orientation given in the input and other squares aligned accordingly. Each row of pieces is displayed on three lines with a blank line between rows. The format for a single piece is:<P><P><BR><SPAN CLASS="MATH">&lt;</SPAN>3 spaces<SPAN CLASS="MATH">&gt; &lt;</SPAN>2 char top picture<SPAN CLASS="MATH">&gt; &lt;</SPAN>3 spaces<SPAN CLASS="MATH">&gt;</SPAN><P><SPAN CLASS="MATH">&lt;</SPAN>2 char left picture<SPAN CLASS="MATH">&gt; &lt;</SPAN>sp<SPAN CLASS="MATH">&gt; &lt;</SPAN>1 digit piece number<SPAN CLASS="MATH">&gt; &lt;</SPAN>sp<SPAN CLASS="MATH">&gt; &lt;</SPAN>2 char right picture<SPAN CLASS="MATH">&gt; &lt;</SPAN>sp<SPAN CLASS="MATH">&gt;</SPAN><P><SPAN CLASS="MATH">&lt;</SPAN>3 spaces<SPAN CLASS="MATH">&gt; &lt;</SPAN>2 char bottom picture<SPAN CLASS="MATH">&gt; &lt;</SPAN>3 spaces<SPAN CLASS="MATH">&gt;</SPAN><P><P><BR>A single blank line should follow the output for each problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
1 BR KR PL CR
2 CL PR BL KR
3 KR PR CR BL
4 PL KR BL CL
5 PL BR CL KR
6 PR CL BR PL
7 CR KL BL PR
8 BL CR KL PL
9 KL CL PR BL
2
1 PR PR BL CR
2 BR KL CR PR
3 CR BL PL KR
4 KL PL BL CL
5 BR CR PL KR
6 KL BR PL CR
7 CL PL BL KR
8 KR KL CR BL
9 CR KL PR BL
3
1 PL KL CL BR
2 PL CR KL BL
3 PR BR CL KR
4 CR PL BR KR
5 PR CL BR KR
6 BL KL CR PR
7 PL BL CL KR
8 PR CR KL BR
9 KL BL CL PL
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1:
   CL      KR      KL
PR 6 BR BL 2 CL CR 7 BL
   PL      PR      PR

   PR      PL      PL
KR 3 CR CL 4 KR KL 8 BL
   BL      BL      CR

   BR      BR      CL
PL 5 CL CR 1 KR KL 9 PR
   KR      PL      BL

2:
No Solution

3:
   KL      BR      BL
BL 6 CR CL 5 KR KL 9 CL
   PR      PR      PL

   PL      PL      PR
KR 7 BL BR 1 KL KR 3 BR
   CL      CL      CL

   CR      CR      CR
PL 2 KL KR 4 PL PR 8 KL
   BL      BR      BR
</PRE><P>
______________________________________________________
2564||||||false||||||
<P>Two triangles ABC and XYZ are <EM>Similar</EM> if their corresponding sides are proportional (or, equivalently if their corresponding angles are equal. We will say that ABC and XYZ are <EM>Similar In Order</EM>, if A corresponds to X, B corresponds to Y and C corresponds to Z. That is:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">| <I>AB</I>|/| <I>XY</I>| = | <I>BC</I>|/| <I>YZ</I>| = | <I>AC</I>|/| <I>XZ</I>|,</DIV><P></P>where <SPAN CLASS="MATH">| <I>MN</I>|</SPAN> denotes the length of the line from M to N.<P>Triangle XYZ is <EM>Strictly Inscribed in</EM> triangle ABC, if each vertex of XYZ lies in the interior (not at a vertex) of a different edge of ABC. This means that no edge of XYZ can be contained in an edge of ABC. If XYZ is similar in order to ABC and strictly inscribed in ABC, we say that XYZ is a <EM>Strictly Inscribed Similar Triangle</EM> to ABC.<P>If the line through X and Y makes an angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN> with the line through A and B, there are four possible orientations illustrated in the figures below. X and Y may be at either end of the segment and the third vertex, Z, may be on either side of the line. In the figures, the line through X and Y makes an angle of 30<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> with the line through A and B.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="\epsfbox{p2564.eps}"></DIV><P>Depending on the shape of the outside triangle, ABC, and the angle, <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN>, between the line through X and Y and the line through A and B, there may be 0, 1, 2, 3 or 4 strictly inscribed similar triangles to ABC with angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN>.<P>Write a program, which takes as input the vertices of the triangle ABC and an angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN>, and computes the vertices of all strictly inscribed similar triangles to ABC for which the line through X and Y makes an angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN> with the line through A and B.<P><P><BR><B>Note:</B> Use the value: 3.14159253 as the value for <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \pi$"></SPAN>, should you need it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input is a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> which is the number of triangle datasets that follow. Each triangle dataset consists of four lines. The first line has the <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of vertex A, the second line has the <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of vertex B and the third line has the <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of vertex C. The last line has the angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN> in degrees between the line through X and Y and the line through A and B.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, you will output the number of strictly inscribed similar triangles to ABC satisfying the input conditions. Then, for each such triangle, print a blank line, followed by a line containing the coordinates of vertex X (corresponding to A); a line containing the coordinates of vertex Y (corresponding to B); a line containing the coordinates of vertex Z (corresponding to C); and another blank line. Each coordinate should be given to four decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
0 0
21 0
14 6
30
0 0
21 0
14 6
50
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2

15.6030 4.6260
7.5905 0.0000
8.9396 3.8313

8.1575 0.0000
15.8312 4.4304
12.0075 5.1461

1
10.0510 0.0000
14.6315 5.4587
11.5450 4.9479
</PRE><P>
______________________________________________________
2565||||||false||||||
<P>A message from humans to extraterrestrial inteIigence was sent through the Arecibo radio telescope in Puerto Rico on the afternoon of Saturday November l6, l974. The message consisted of l679 bits and was meant to be translated to a rectangular picture with <SPAN CLASS="MATH">23 <TT>x</TT> 73</SPAN> <tex2html_verbatim_mark> pixels. Since both 23 and 73 are prime numbers, <SPAN CLASS="MATH">23 <TT>x</TT> 73</SPAN> <tex2html_verbatim_mark> is the unique possible size of the translated rectangular picture each edge of which is longer than l pixel. Of course, there was no guarantee that the receivers would try to translate the message to a rectangular picture. Even if they would, they might put the pixels into the rectangle incorrectly. The senders of the Arecibo message were optimistic.<P><P><BR>We are planning a similar project. Your task in the project is to find the most suitable width and height of the translated rectangular picture. The term ``most suitable'' is defined as follows. An integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> greater than 4 is given. A positive fraction <SPAN CLASS="MATH"><I>a</I>/<I>b</I></SPAN> <tex2html_verbatim_mark> less than or equal to 1 is also given. The area of the picture should not be greater than <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. Both of the width and the height of the translated picture should be prime numbers. The ratio of the width to the height should not be less than <SPAN CLASS="MATH"><I>a</I>/<I>b</I></SPAN> <tex2html_verbatim_mark> nor greater than 1. You should maximize the area of the picture under these constraints.<P><P><BR>In other words, you will receive an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and a haction <SPAN CLASS="MATH"><I>a</I>/<I>b</I></SPAN> <tex2html_verbatim_mark>. It holds that <SPAN CLASS="MATH"><I>m</I> &gt; 4</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < a/b \le 1$
 --><SPAN CLASS="MATH">0 &lt; <I>a</I>/<I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$">1</SPAN> <tex2html_verbatim_mark>. You should find the pair of prime numbers <SPAN CLASS="MATH"><I>p</I>, <I>q</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>pq</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>a</I>/<I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$"><I>p</I>/<I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$">1</SPAN> <tex2html_verbatim_mark>, and furthermore, the product <SPAN CLASS="MATH"><I>pq</I></SPAN> <tex2html_verbatim_mark> takes the maximum value among such pairs of two prime numbers. You should report <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> as the ``most suitable'' width and height of the translated picture.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of at most 2000 triplets of positive integers, delimited by a space character in between. Each line contains a single triplet. The sequence is followed by a triplet of zeros, <TT>0 0 0</TT>, which indicates the end of the input and should not be treated as data to be processed.<P><P><BR>The integers of each input triplet are the integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, the numerator <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, and the denominator <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> described above, in this order. You may assume <!-- MATH
 $4 < m \le 100000$
 --><SPAN CLASS="MATH">4 &lt; <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$"><I>a</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is a sequence of pairs of positive integers. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th output pair corresponds to the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th input triplet. The integers of each output pair are the width <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and the height <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> described above, in this order.<P><P><BR>Each output line contains a single pair. A space character is put between the integers as a delimiter. No other characters should appear in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 1 2
99999 999 999
1680 5 16
1970 1 1
2002 4 11
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 2
313 313
23 73
43 43
37 53
</PRE><P>
______________________________________________________
2566||||||false||||||
<P>
Mr. Simpson got up with a slight feeling of tiredness. It was the start of another day of hard work.
A bunch of papers were waiting for his inspection on his desk in his omce. The papers contained his
students' answers to questions in his Math class, but the answers looked as if they were just stains of ink.

<P>
His headache came from the ``creativity'' of his students. They provided him a variety of ways to answer
each problem. He has his own answer to each problem, which is correct, of course, and the best hom his
aesthetic point of view.

<P>
Some of his students wrote algebraic expressions equivalent to the expected answer, but many of them
look quite different from Mr. Simpson's answer in terms of their literal forms. Some wrote algebraic
expressions not equivalent to his answer, but they look quite similar to it. Only a few of the students'
answers were exactly the same as his.

<P>
It is his duty to check if each expression is mathematicaly equivalent to the answer he has prepared.
This is to prevent expressions that are equivalent to his hom being marked as ``incorrect'', even if they
are not acceptable to his aesthetic moral.

<P>
He had now spent five days checking the expressions. Suddenly, he stood up and yelled, ``I've had enough!
I must call for help.''

<P>

<P>
<BR>
Your job is to write a program to help Mr. Simpson to judge if each answer is equivalent to the ``correct''
one. Algebraic expressions written on the papers are multi-variable polynomials over variable symbols
<!-- MATH
 $a,b,\ldots, z$
 -->
<SPAN CLASS="MATH"><I>a</I>, <I>b</I>,..., <I>z</I></SPAN>
<tex2html_verbatim_mark> with integer coefficients, e.g., 
<P><!-- MATH
 \begin{displaymath}
(a+ b^{2})(a - b^{2}), \ ax^{2} + 2bx + c \mbox{ and } (x^{2} + 5x +4)(x^{2} + 5x + 6) + 1.
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
(<I>a</I> + <I>b</I><SUP>2</SUP>)(<I>a</I> - <I>b</I><SUP>2</SUP>),&nbsp;<I>ax</I><SUP>2</SUP> +2<I>bx</I> + <I>c</I> and (<I>x</I><SUP>2</SUP> +5<I>x</I> + 4)(<I>x</I><SUP>2</SUP> + 5<I>x</I> + 6) + 1.
</DIV><P>
<tex2html_verbatim_mark></P>

<P>
Mr. Simpson will input every answer expression as it is written on the papers; he promises you that
an algebraic expression he inputs is a sequence of tenns separated by additive operators `<TT>+</TT>' and `<TT>-</TT>',
representing the sum of the terms with those operators, if any; a term is a juxtaposition of multiplicands,
representing their product; and a multiplicand is either (a) a non-negative integer as a digit sequence
in decimal, (b) a variable symbol (one of the lowercase letters `<TT>a</TT>' to `<TT>z</TT>'), possibly followed by a symbol `<code>^</code>' and a non-zero digit, which represents the power of that variable, or (c) a parenthesized algebraic
expression, recursively. Note that the operator `<TT>+</TT>' or `<TT>-</TT>' appears only as a binary operator and not as a unary operator to specify the sing of its operand.

<P>
He says that he will put one or more space characters before an integer if it immediately follows another
integer or a digit following the symbol `<code>^</code>'. He also says he may put spaces here and there in an expression
as an attempt to make it readable, but he will never put a space between two consecutive digits of an
integer. He remarks that the expressions are not so complicated, and that any expression, having its `<TT>-</TT>'s
replaced with `<TT>+</TT>'s, if any, would have no variable raised to its lOth power, nor coefficient more than a
billion, even if it is fully expanded into a form of a sum of products of coefficients and powered variables.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to your program is a sequence of blocks of lines. A block consists of lines, each containing an
expression, and a terminating line. After the last block, there is another terminating line. A terminating
line is a line solely consisting of a period symbol.

<P>
The first expression of a block is one prepared by Mr. Simpson; all that follow in a block are answers by
the students. An expression consists of lowercase letters, digits, operators `<TT>+</TT>', `<TT>-</TT>' and `<code>^</code>', parentheses `<TT>(</TT>' and `<TT>)</TT>', and spaces. A line containing an expression has no more than 80 characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program should produce a line solely consisting of ``<TT>yes</TT>'' or ``<TT>no</TT>'' for each answer by the students corresponding to whether or not it is mathematically equivalent to the expected answer. Your program
should produce a line solely containing a period symbol after each block.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
a+b+c
(a+b)+c
a- (b-c)+2
.
4ab
(a - b) (0-b+a) - 1a ^ 2 - b ^ 2
2 b 2 a
.
108 a
2 2 3 3 3 a
4 a^1 27
.
.
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
yes
no
.
no
yes
.
yes
yes
.
</PRE> 

<P>

______________________________________________________
2567||||||false||||||
<P>
Following FIFA World Cup, a larger competition called ``GIGA Universe Cup'' is taking place somewhere
in our universe. Both FIFA World Cup and GIGA Universe Cup are two rounds competitions that consist
of the first round, also known as ``group league,'' and the second called ``final tournament.'' In the first
round, participating teams are divided into groups of four teams each. Each team in a group plays a
match against each of the other teams in the same group. For example, let's say we have a group of the
foIowing four teams, ``Engband, Swedon, Argontina, and Nigerua.'' They play the following six matches:
Engband - Swedon, Engband - Argontina, Engband - Nigerua, Swedon - Argontina, Swedon - Nigerua,
and Argontina - Nigerua.

<P>

<P>
<BR>
The result of a single match is shown by the number of goals scored by each team, like ``Engband 1 -
0 Argontina,'' which says Engband scored one goal whereas Argontina zero. Based on the result of a
match, <EM>points</EM> are given to the two teams as follows and used to rank teams. If a team wins a match (i.e.,
scores more goals than the other), three points are given to it and zero to the other. If a match draws
(i.e., the two teams score the same number of goals), one point is given to each.

<P>
The <EM>goal difference</EM> of a team in given matches is the total number of goals it scored minus the total
number of goals its opponents scored in these matches. For example, if we have three matches ``Swedon
1 - 2 Engband,'' ``Swedon 3 - 4 Nigerua,'' and ``Swedon 5 - 6 Argontina,'' then the goal diference of
Swedon in these three matches is (1 + 3 + 5) - (2 + 4+ 6) = -3.

<P>

<P>
<BR>
Given the results of all the six matches in a group, teams are ranked by the following criteria, listed in
the order of priority (that is, we first apply (a) to detennine the ranking, with ties broken by (b), with
ties broken by (c), and so on).

<P>
<DL COMPACT>
<DT>(a)</DT>
<DD>greater number of points in all the group matches;
</DD>
<DT>(b)</DT>
<DD>greater goal difference in all the group matches;
</DD>
<DT>(c)</DT>
<DD>greater number of goals scored in all the group matches.
</DD>
</DL>

<P>
If two or more teams are equal on the basis of the above three criteria, their place shoul be determined
by the following criteria, applied in this order:

<P>
<DL COMPACT>
<DT>(d)</DT>
<DD>greater number of points obtained in the group matches between the teams concerned;
</DD>
<DT>(e)</DT>
<DD>greater goal difference resulting from the group matches between the teams concerned;
</DD>
<DT>(f)</DT>
<DD>greater number of goals scored in the group matches between the teams concerned;
</DD>
</DL>

<P>
If two or more teams are stiIl equal, apply (d), (e), and (f) as necessary to each such group. Repeat this
until those three rules to equal teams do not make any further resolution. FinaIy, teams that still remain
equal are ordered by:

<P>
<DL COMPACT>
<DT>(g)</DT>
<DD>drawing lots by the Organizing Committee for the GIGA Universe Cup.
</DD>
</DL>

<P>
The two teams coming first and second in each group qualify for the second round.

<P>

<P>
<BR>
Your job is to write a program which, given the results of matches played so far in a group and one team
specified in the group, calculates the probability that the specified team will qualify for the second round.
You may assume each team has played exactly two matches and has one match to play. In total, four
matches have been played and two matches are to be played.

<P>
Assume the probability that any team scores (exactly) <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> goals in any match is:

<P>
<P><!-- MATH
 \begin{displaymath}
\frac{8!}{p!(8-p)!}\left(\frac{1}{4}\right)^{p}\left(\frac{3}{4}\right)^{8-p},
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<IMG
 WIDTH="79" HEIGHT="56" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle {\frac{{8!}}{{p!(8-p)!}}}$"><IMG
 WIDTH="18" HEIGHT="55" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle \left(\vphantom{\frac{1}{4}}\right.$"><IMG
 WIDTH="17" HEIGHT="55" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle {\frac{{1}}{{4}}}$"><IMG
 WIDTH="26" HEIGHT="56" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle \left.\vphantom{\frac{1}{4}}\right)^{{p}}_{}$"><IMG
 WIDTH="18" HEIGHT="55" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle \left(\vphantom{\frac{3}{4}}\right.$"><IMG
 WIDTH="17" HEIGHT="55" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle {\frac{{3}}{{4}}}$"><IMG
 WIDTH="43" HEIGHT="62" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle \left.\vphantom{\frac{3}{4}}\right)^{{8-p}}_{}$">,
</DIV><P>
<tex2html_verbatim_mark></P>
for <SPAN CLASS="MATH"><I>p</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \le$">8</SPAN>
<tex2html_verbatim_mark>, and zero for <SPAN CLASS="MATH"><I>p</I> &gt; 8</SPAN>
<tex2html_verbatim_mark>. Assume the lot in the step (g) is fair.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input is an integer, less than 1000, that indicates the number of subsequent records.

<P>
The rest of the input is the indicated number of records. A single record has the following format:

<P>

<P>
<BR>
<TABLE COLS=9>
<COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle team \rangle_{1}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{1}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle team \rangle_{2}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{2}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle team \rangle_{3}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{3}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_\rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle team \rangle_{4}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{4}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<!-- MATH
 $\langle team \rangle_{1}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{1}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{12}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{12}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{13}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{13}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{14}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{14}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<!-- MATH
 $\langle team \rangle_{2}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{2}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{23}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{23}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{24}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{24}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<!-- MATH
 $\langle team \rangle_{3}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{3}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{34}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{34}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<!-- MATH
 $\langle team \rangle_{4}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{4}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TABLE>

<P>

<P>
<BR>
In the above, <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> is a single underscore (<code>_</code>) and <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> a sequence of exactly four underscores (<code>____</code>).
Each of <!-- MATH
 $\langle team \rangle_{1}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{1}}^{}$"></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> , <!-- MATH
 $\langle team \rangle 4$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$">4</SPAN>
<tex2html_verbatim_mark> is either an asterisk character (<TT>*</TT>) followed by exactly three uppercase letters
(e.g., <TT>*ENG</TT>), or an underscore followed by exactly three uppercase letters (e.g., <TT>_SWE</TT>). The former indicates that it is the team you are asked to calculate the probabiIty of the second round qualification for. You
may assume exactly one of <!-- MATH
 $\langle team \rangle_{1}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{1}}^{}$"></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> , <!-- MATH
 $\langle team \rangle_{4}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{4}}^{}$"></SPAN>
<tex2html_verbatim_mark> is marked with an asterisk. Each <!-- MATH
 $\langle m \rangle_{ij}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="23" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{ij}}^{}$"></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(l \le j < j \le 4)$
 -->
<SPAN CLASS="MATH">(<I>l</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \le$"><I>j</I> &lt; <I>j</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \le$">4)</SPAN>
<tex2html_verbatim_mark> is
a match result between the <!-- MATH
 $\langle team \rangle_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="17" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{i}}^{}$"></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $\langle team \rangle_{j}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="18" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{j}}^{}$"></SPAN>
<tex2html_verbatim_mark>. Each match result is either <code>__-_</code> (i.e., two underscores, hyphen, and another underscore) or of the form <TT>_</TT><SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark><TT>-</TT><SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> where each of <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is a single digit <SPAN CLASS="MATH">(<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \le$">8)</SPAN>
<tex2html_verbatim_mark>. The former indicates that the corresponding match has not been played, whereas the latter that the result of the match was <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> goals by <!-- MATH
 $\langle team \rangle_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="17" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{i}}^{}$"></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> goals by <!-- MATH
 $\langle team \rangle_{j}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="18" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{j}}^{}$"></SPAN>
<tex2html_verbatim_mark>. Since each team has played exactly two matches, exactly two match results are in the former format.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output should consist of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of records in the input. The <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>th line should
show the probability that the designated team (marked with an asterisk) will qualify for the second round
in the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>th record.

<P>
Numbers should be printed with exactly seven digits after the decimal point. Each number should not
contain an error geater than <SPAN CLASS="MATH">10<SUP>-7</SUP></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
_____*AAA__BBB__CCC__DDD
*AAA_______0-0__0-0___-_
_BBB_____________-___0-0
_CCC_________________0-0
_DDD____________________
_______CHN__CRC__TR_*BRA
_CHN_______0-2___-___0-4
_CRC____________1-1___-_
_TUR_________________1-2
*BRA____________________
______CMR_*KSA__GER___RL
_CMR_______1-0___-___1-1
*KSA____________0-8___-_
_GER_________________1-1
_IRL____________________
______TUN__JPN_*BEL__RUS
_TUN________-___1-1__0-2
_JPN____________2-2__1-0
*BEL__________________-_
_RUS____________________
______MEX__CRO_*ECU__ITA
_MEX_______1-0__2-1___-_
_CRO_____________-___2-1
*ECU_________________0-2
_ITA____________________
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0.5000000
1.0000000
0.0000000
0.3852746
0.0353304
</PRE> 

<P>

______________________________________________________
2568||||||false||||||
<P>
Let's play a new board game ``Life Line''.

<P>
The number of the players is greater than 1 and less than 10.

<P>
In this game, the board is a regular triangle in which many small regular triangles are arranged (See
Figure l). The edges of each small triangle are of the same length.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2568a.eps}$
 -->
<IMG
 WIDTH="536" HEIGHT="285" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="\epsfbox{p2568a.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1: The board

</DIV>

<P>
The size of the board is expressed by the number of vertices on the bottom edge of the outer triangle.

<P>
For example, the size of the board in Figure 1 is 4.

<P>
At the beginning of the game, each player is assigned his own identification number between 1 and 9,
and is given some stones on which his identification number is written.

<P>
Each player puts his stone in turn on one of the ``empty'' vertices. An ``empty vertex'' is a vertex that
has no stone on it.

<P>
When one player puts his stone on one of the vertices during his turn, some stones might be removed
from the board. The player gains points which is equal to the number of the removed stones of others,
but loses points which is equal to the number of the removed stones of himself. The points of a player
for a single turn is the points he gained minus the points he lost in that turn.

<P>

<P>
<BR>
The conditions for removing stones are as follows:

<P>

<UL>
<LI>The stones on the board are divided into groups. Each group contains a set of stones whose numbers
are the same and placed adjacently. That is, if the same numbered stones are placed adjacently,
they belong to the same group.

<P>
</LI>
<LI>If none of the stones in a group is adjacent to at least one ``empty'' vertex, all the stones in that
group are removed from the board.
</LI>
</UL>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2568b.eps}$
 -->
<IMG
 WIDTH="442" HEIGHT="268" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="\epsfbox{p2568b.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 2: The groups of stones

</DIV>

<P>
Figure 2 shows an example of the groups of stones.

<P>
Suppose that the turn of the player `4' comes now. If he puts his stone on the vertex shown in Figure
3a, the conditions will be satisfied to remove some groups of stones (shadowed in Figure 3b). The player
gains 6 points, because the 6 stones of others are removed hom the board (See Figure 3c).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2568c.eps}$
 -->
<IMG
 WIDTH="909" HEIGHT="239" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="\epsfbox{p2568c.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figures 3a, 3b and 3c

</DIV>

<P>
As another example, suppose that the turn of the player `2' comes in Figure 2. If the player puts his
stone on the vertex shown in Figure 4a, the conditions will be satisfied to remove some groups of stones
(shadowed in Figgue 4b). The player gains 4 points, because the 4 stones of others are removed. But, at
the same time, he loses 3 points, because his 3 stones are removed. As the result, the player's points of
this turn is 4 - 3 = 1 (See Figure 4c).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2568d.eps}$
 -->
<IMG
 WIDTH="897" HEIGHT="248" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="\epsfbox{p2568d.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figures 4a, 4b and 4c

</DIV>

<P>
When each player puts all of his stones on the board, the game is over. The total score of a player is the
summation of the points of all of his turns.

<P>
Yourjob is to write a program that tells you the maximum points a player can get (i.e., the points he
gains - the points he loses) in his current turn.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple data. Each data represents the state of the board of the game still in
progress.

<P>
The fonnat of each data is as follows.

<P>

<P>
<BR>
<!-- MATH
 $\ \ N \ \ C$
 -->
<SPAN CLASS="MATH">&nbsp; <I>N</I>&nbsp; <I>C</I></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\ \ \ \ \ \ \ \ \ \ S_{1,1}$
 -->
<SPAN CLASS="MATH">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <I>S</I><SUB>1, 1</SUB></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\ \ \ \ \ \ \ S_{2,1}\ \ S_{2,2}$
 -->
<SPAN CLASS="MATH">&nbsp; &nbsp; &nbsp; &nbsp;<I>S</I><SUB>2, 1</SUB>&nbsp; <I>S</I><SUB>2, 2</SUB></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\ \ \ \ S_{3,1}\ \ S_{3,2} \ \ S_{3,3}$
 -->
<SPAN CLASS="MATH">&nbsp; &nbsp; <I>S</I><SUB>3, 1</SUB>&nbsp; <I>S</I><SUB>3, 2</SUB>&nbsp; <I>S</I><SUB>3, 3</SUB></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\ \ \ \ \ \ \ \ \ \ \cdots$
 -->
<SPAN CLASS="MATH">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\ \ S_{N,1}\ \ \ \cdots \ \ \ S_{N,N}$
 -->
<SPAN CLASS="MATH">&nbsp; <I>S</I><SUB>N, 1</SUB>&nbsp; &nbsp;<SUP> ... </SUP>&nbsp; &nbsp;<I>S</I><SUB>N, N</SUB></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the size ofthe board <!-- MATH
 $(3 \le N \le 10)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$">10)</SPAN>
<tex2html_verbatim_mark>.

<P>
<SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> is the identification number ofthe player whose turn comes now <!-- MATH
 $(1 \le C \le 9)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$"><I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$">9)</SPAN>
<tex2html_verbatim_mark>. That is, your program
must calculate his points in this turn.

<P>
<SPAN CLASS="MATH"><I>S</I><SUB>i, j</SUB></SPAN>
<tex2html_verbatim_mark> is the state of the vertex on the board <!-- MATH
 $(0 \le S_{i,j} \le 9)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$"><I>S</I><SUB>i, j</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$">9)</SPAN>
<tex2html_verbatim_mark>. If the value of <SPAN CLASS="MATH"><I>S</I><SUB>i, j</SUB></SPAN>
<tex2html_verbatim_mark> is positive, it means that there is the stone numbered by <SPAN CLASS="MATH"><I>S</I><SUB>i, j</SUB></SPAN>
<tex2html_verbatim_mark> there. If the value of <SPAN CLASS="MATH"><I>S</I><SUB>i, j</SUB></SPAN>
<tex2html_verbatim_mark> is 0, it means that the vertex is ``empty''.

<P>
Two zeros in a line, i.e., <TT>0 0</TT>, represents the end of the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data, the maximum points the player can get in the turn should be output, each in a separate
line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 4
   2
  2 3
 1 0 4
1 1 4 0
4 5
   2
  2 3
 3 0 4
1 1 4 0
4 1
   2
  2 3
 3 0 4
1 1 4 0
4 1
   1
  1 1
 1 1 1
1 1 1 0
4 2
   1
  1 1
 1 1 1
1 1 1 0
4 1
   0
  2 2
 5 0 7
0 5 7 0
4 2
   0
  0 3
 1 0 4
0 1 0 4
4 3
   0
  3 3
 3 2 3
0 3 0 3
4 2
   0
  3 3
 3 2 3
0 3 0 3
6 1
     1
    1 2
   1 1 0
  6 7 6 8
 0 7 6 8 2
6 6 7 2 2 0
5 9
    0
   0 0
  0 0 0
 0 0 0 0
0 0 0 0 0
5 3
    3
   3 2
  4 3 2
 4 4 0 3
3 3 3 0 3
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6
5
1
-10
8
-1
0
1
-1
5
0
5
</PRE> 

<P>

______________________________________________________
2569||||||false||||||
<P>An old document says that a Ninja House in Kanazawa City was in fact a defensive fortress, which was designed like a maze. Its rooms were connected by hidden doors in a complicated manner, so that any invader would become lost. Each room has at least two doors.<P>The Ninja House can be modeled by a graph, as shown in Figure l. A circle represents a room. Each line connecting two circles represents a door between two rooms.<P><DIV ALIGN="CENTER">=6.5in <IMG WIDTH="881" HEIGHT="356" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2569.jpg ALT="\epsfbox{p2569.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure l. Graph Model of Ninja House. <B>and</B> Figure 2. Ninja House exploration.</DIV><P>I decided to draw a map, since no map was available. Your mission is to help me draw a map hom the record of my exploration.<P>I started exploring by entering a single entrance that was open to the outside. The path I walked is schematically shown in Figure 2, by a line with arrows. The rules for moving between rooms are described below.<P><P><BR><BLOCKQUOTE>After entering a room, I first open the rightmost door and move to the next room. However, if the next room has already been visited, I close the door without entering, and open the next rightmost door, and so on. When I have inspected all the doors of a room, I go back through the door I used to enter the room.</BLOCKQUOTE><P><P><BR>I have a counter with me to memorize the <EM>distance</EM> from the first room. The counter is incremented when I enter a new room, and decremented when I go back hom a room. In Figure 2, each number in parentheses is the value of the counter when I have entered the room, i.e., the distance hom the first room. In contrast, the numbers not in parentheses represent the order of my visit.<P>I take a record of my exploration. Every time I open a door, I record a single number, acording to the following rules.<P><OL><LI>If the opposite side of the door is a new room, I record the number of doors in that room, which is a positive number. </LI><LI>If it is an already visited room, say R, I record ``<EM>the distance of R from the first room</EM>'' minus ``<EM>the distance of the current room from the first room</EM>'', which is a negative number. </LI></OL><P>In the example shown in Figure 2, as the first room has three doors connecting other rooms, I initialy record ``3''. Then when I move to the second, third, and fourth rooms, which all have three doors, I append ``3 3 3'' to the record. When I skip the entry from the fourth room to the first room, the distance difference ``-3'' (minus three) will be appended, and so on. So, when I finish this exploration, its record is a sequence of numbers ``3 3 3 3 -3 3 2 -5 3 2 -5 -3''.<P>There are several dozens of Ninja Houses in the city. Given a sequence of numbers for each of these houses, you should produce a graph for each house.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input is a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, indicating the number of records of Ninja Houses I have visited. You can assume that <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is less than 100. Each of the foIowing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> records consists of numbers recorded on one exploration and a zero as a terminator. Each record consists of one or more lines whose lengths are less than 1000 characters. Each number is delimited by a space or a newline. You can assume that the number of rooms for each Ninja House is less than 100, and the number of doors in each room is less than 40.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each Ninja House of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> rooms, the output should consist of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines. The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th line of each such <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines should look as follows:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>i</I>&nbsp;<I>r</I><SUB>1</SUB>&nbsp;<I>r</I><SUB>2</SUB>&nbsp;<SUP> ... </SUP><I>r</I><SUB>k<SUB>i</SUB></SUB></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB>,<SUP> ... </SUP>, <I>r</I><SUB>k<SUB>i</SUB></SUB></SPAN> <tex2html_verbatim_mark> should be rooms adjoining room <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> should be the number of doors in room <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. Numbers should be separated by exactly one space character. The rooms should be numbered from 1 in visited order. <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB>, <I>r</I><SUB>2</SUB>,<SUP> ... </SUP>, <I>r</I><SUB>k<SUB>i</SUB></SUB></SPAN> <tex2html_verbatim_mark> should be in ascending order. Note that the room <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> may be connected to another room through more than one door. In this case, that room number should appear in <SPAN CLASS="MATH"><I>r</I>1,<SUP> ... </SUP>, <I>r</I><SUB>k<SUB>i</SUB></SUB></SPAN> <tex2html_verbatim_mark> as many times as it is connected by different doors.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3 3 3 3 -3 3 2 -5 3 2 -5 -3 0
3 5 4 -2 4 -3 -2 -2 -1 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 4 6
2 1 3 8
3 2 4 7
4 1 3 5
5 4 6 7
6 1 5
7 3 5 8
8 2 7
1 2 3 4
2 1 3 3 4 4
3 1 2 2 4
4 1 2 2 3
</PRE><P>
______________________________________________________
2570||||||false||||||
<P>You have just been put in charge of developing a new shredder for the Shredding Company. Although a ``normal'' shredder would just shred sheets of paper into little pieces so that the contents would become unreadable, this new shredder needs to have the following unusual basic characteristics.<P><UL><LI>The shredder takes as input a <EM>target number</EM> and a sheet of paper with a number written on it. </LI><LI>It shreds (or cuts) the sheet into pieces each of which has one or more digits on it. </LI><LI>The sum of the numbers written on each piece is the closest possible number to the target number, without going over it. </LI></UL><P>For example, suppose that the target number is 50, and the sheet of paper has the number 12346. The shredder would cut the sheet into four pieces, where one piece has 1, another has 2, the third has 34, and the fourth has 6. This is because their sum 43 (= 1 + 2 + 34 + 6) is closest to the target number 50 of all possible combinations without going over 50. For example, a combination where the pieces are 1, 23, 4, and 6 is not valid, because the sum of this combination 34 (= 1 + 23 + 4 + 6) is less than the above combination's 43. The combination of 12, 34, and 6 is not valid either, because the sum 52 (= 12+34+6) is greater than the target number of 50.<P><DIV ALIGN="CENTER"><IMG WIDTH="496" HEIGHT="392" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2570.jpg ALT="\epsfbox{p2570.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1. Shredding a sheet ofpaper having the number 12346 when the target number is 50</DIV><P>There are also three special rules:<P><UL><LI>If the target number is the same as the number on the sheet of paper, then the paper is not cut. For example, if the target number is 100 and the number on the sheet of paper is also 100, then the paper is not cut. </LI><LI>If it is not possible to make any combination whose sum is less than or equal to the target number, then <EM>error</EM> is printed on a display. For example, if the target number is 1 and the number on the sheet ofpaper is 123, it is not possible to make any valid combination, as the combination with the smallest possible sum is 1, 2, 3. The sum for this combination is 6, which is greater than the target number, and thus <EM>error</EM> is printed. </LI><LI>If there is more than one possible combination where the sum is closest to the target number without going over it, then <EM>rejected</EM> is printed on a display. For example, if the target number is 15, and the number on the sheet of paper is 111, then there are two possible combinations with the highest possible sum of 12: (a) 1 and 11 and (b) 11 and 1; thus <EM>rejected</EM> is printed. </LI></UL><P>In order to develop such a shredder, you have decided to first make a simple program that would simulate the above characteristics and rules. Given two numbers, where the first is the target number and the second is the number on the sheet of paper to be shredded, you need to figure out how the shredder should ``cut up'' the second number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases, each on one line, as foIows:<P><SPAN CLASS="MATH"><I>t</I><SUB>1</SUB>&nbsp;<I>num</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>t</I><SUB>2</SUB>&nbsp;<I>num</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>t</I><SUB>n</SUB>&nbsp;<I>num</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><P><TT>0 0</TT><P>Each test case consists of the following two positive integers, which are separated by one space: (1) the first integer (<SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> above) is the target number; (2) the second integer (<SPAN CLASS="MATH"><I>num</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> above) is the number that is on the paper to be shredded.<P>Neither integers may have a 0 as the first digit, e.g., 123 is aIowed but 0123 is not. You may assume that both integers are at most 6 digits in length. A line consisting of two zeros signals the end of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, the corresponding output takes one of the following three types:<P><UL><LI><SPAN CLASS="MATH"><I>sum</I>&nbsp;<I>part</I><SUB>1</SUB>&nbsp;<I>part</I><SUB>2</SUB>&nbsp;<SUP> ... </SUP></SPAN><tex2html_verbatim_mark> </LI><LI><TT>rejected</TT> </LI><LI><TT>error</TT> </LI></UL><P>In the first type, <SPAN CLASS="MATH"><I>part</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>sum</I></SPAN> <tex2html_verbatim_mark> have the following meaning:<P><UL><LI>Each <SPAN CLASS="MATH"><I>part</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> is a number on one piece of shredded paper. The order of <SPAN CLASS="MATH"><I>part</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> corresponds to the order of the original digits on the sheet of paper. </LI><LI><SPAN CLASS="MATH"><I>sum</I></SPAN> <tex2html_verbatim_mark> is the sum ofthe numbers after being shredded, i.e., <SPAN CLASS="MATH"><I>sum</I> = <I>part</I><SUB>1</SUB> + <I>part</I><SUB>2</SUB> + <SUP>... </SUP></SPAN><tex2html_verbatim_mark>. </LI></UL><P>Each number should be separated by one space.<P>The message `<TT>error</TT>' is printed if it is not possible to make any combination, and `<TT>rejected</TT>' if there is more than one possible combination.<P>No extra characters including spaces are allowed at the beginning of each line, nor at the end of each line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
50 12346
376 144139
927438 927438
18 3312
9 3142
25 1299
111 33333
103 862150
6 1104
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
43 1 2 34 6
283 144 139
927438 927438
18 3 3 12
error
21 1 2 9 9
rejected
103 86 2 15 0
rejected
</PRE><P>
______________________________________________________
2571||||||false||||||
<P>
After having drifted about in a small boat for a couple of days, Akira Crusoe Maeda was finally cast
ashore on a foggy island. Though he was exhausted and despaired, he was still fortunate to remember a
legend of the foggy island, which he had heard from patriarchs in his childhood. This must be the island
in the legend.

<P>
In the legend, two tribes have inhabited the island, one is divine and the other is devilish; once members
of the divine tribe bless you, your future is bright and promising, and your soul will eventually go to
Heaven; in contrast, once members of the devilish tribe curse you, your future is bleak and hopeless, and
your soul will eventually fall down to Hell.

<P>
In order to prevent the worst-case scenario, Akira should distinguish the devilish from the divine. But
how? They looked exactly alike and he could not distinguish one from the other solely by their appearances. 
He still had his last hope, however. The members of the divine tribe are truth-tellers, that is, they
always tell the truth and those of the devilish tribe are liars, that is, they always tell a lie.

<P>
He asked some of the whether or not some are divine. They knew one another very much and always
responded to him ``faithfully'' according to their individual natures (i.e., they always tell the truth or
always a lie). He did not dare to ask any other forms of questions, since the legend says that a devilish
member would curse a person forever when he did not like the question. He had another piece of useful
information: the legend tells the populations of both tribes. These numbers in the legend are trustworthy
since everyone living on this island is immortal and none have ever been born at least these millennia.

<P>
You are a good computer programmer and so requested to help Akira by writing a program that classifies
the inhabitants according to their answers to his inquiries.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple data sets, each in the following fonnat:

<P>

<P>
<BR>
<TABLE COLS=3>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TABLE>

<P>

<P>
<BR>
The first line has three non-negative integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of questions Akira asked.
<SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> are the populations of the divine and devilish tribes, respectively, in the legend. Each of the
following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines has two integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and one word <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are the identification numbers of inhabitants, each of which is between 1 and <!-- MATH
 $p_{1} +p_{2}$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>1</SUB> + <I>p</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>, inclusive. <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is either `<TT>yes</TT>', if the inhabitant <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> said that the inhabitant <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> was a member of the divine tribe, or `<TT>no</TT>', otherwise. Note that <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> can be the same number since ``are you a member of the divine tribe?'' is a valid question. Note also that two lines may have the same <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>'s and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>'s since Akira was very upset and might have asked the same question to the same one more than once.

<P>

<P>
<BR>
You may assume that <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is less than 1000 and that <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> are less than 300. A line with three zeros,
i.e., `<TT>0 0 0</TT>', represents the end of the input. You can assume that each data set is consistent and no
contradictory answers are included.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, if it includes sumffient information to classify all the inhabitants, print the identification
numbers of all the divine ones in ascending order, one in a line. In addition, following the output numbers,
print `<TT>end</TT>' in a line. Otherwise, i.e., if a given data set does not include sufficient information to identify
all the divine members, print `<TT>no</TT>' in a line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 1 1
1 2 no
2 1 no
3 2 1
1 1 yes
2 2 yes
3 3 yes
2 2 1
1 2 yes
2 3 no
5 4 3
1 2 yes
1 3 no
4 5 yes
5 6 yes
6 7 no
0 0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
no
no
1
2
end
3
4
5
6
end
</PRE> 

<P>

______________________________________________________
2572||||||false||||||
<P>Do you know <EM>confetti</EM>? They are small discs of colored paper, and people throw them around during parties or festivals. Since people throw lots of confetti, they may end up stacked one on another, so there may be hidden ones underneath.<P>A handful of various sized confetti have been dropped on a table. Given their positions and sizes, can you tell us how many of them you can see?<P>The following figure represents the disc configuration for the first sample input, where the bottom disc is still visible.<P><DIV ALIGN="CENTER"><IMG WIDTH="434" HEIGHT="230" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2572.jpg ALT="\epsfbox{p2572.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is composed of a number of configurations of the following form.<P><P><BR><TABLE COLS=3><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2572.jpg ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>y</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>r</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark></TD></TR></TABLE><P><P><BR>The first line in a configuration is the number of discs in the configuration (a positive integer not more than 100), followed by one Ine descriptions of each disc: coordinates of its center and radius, expressed as real numbers in decimal notation, with up to 12 digits after the decimal point. The imprecision margin is <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2572.jpg ALT="$ \pm$">5 <TT>x</TT> 10<SUP>-13</SUP></SPAN> <tex2html_verbatim_mark>. That is, it is guaranteed that variations of less than <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2572.jpg ALT="$ \pm$">5 <TT>x</TT> 10<SUP>-13</SUP></SPAN> <tex2html_verbatim_mark> on input values do not change which discs are visible. Coordinates of all points contained in discs are between -10 and 10.<P>Confetti are listed in their stacking order, <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> being the bottom one and <SPAN CLASS="MATH"><I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>r</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> the top one. You are observing from the top.<P>The end of the input is marked by a zero on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each configuration you should output the number of visible confetti on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
0 0 0.5
-0.9 0 1.00000000001
0.9 0 1.00000000001
5
0 1 0.5
1 1 1.00000000001
0 2 1.00000000001
-1 1 1.00000000001
0 -0.00001 1.00000000001
5
0 1 0.5
1 1 1.00000000001
0 2 1.00000000001
-1 1 1.00000000001
0 0 1.00000000001
2
0 0 1.0000001
0 0 1
2
0 0 1
0.00000001 0 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
5
4
2
2
</PRE>
______________________________________________________
2573||||||false||||||
<P>Suppose you are given many poker cards. As you have already known, each card has points ranging from 1 to 13. Using these poker cards, you need to play a game on the cardboard in Figure 1. The game begins with a place called START. From START, you can walk to left or right to a rectangular box. Each box is labeled with an integer, which is the distance to START.<P><DIV ALIGN="CENTER"><IMG WIDTH="310" HEIGHT="191" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2573a.jpg ALT="\epsfbox{p2573a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: The poker card game cardboard.</DIV><P>To place poker cards on these boxes, you must follow the rules below:<P><DL COMPACT><DT>(1)</DT><DD>If you put a card with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points on a box labeled <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, you got <SPAN CLASS="MATH">(<I>n</I> <TT>*</TT> <I>i</I>)</SPAN> <tex2html_verbatim_mark> points.</DD><DT>(2)</DT><DD>Once you place a card on a box <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, you block the paths to the boxes behind <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>.</DD></DL><P>For example, in Figure 2, a player places a queen on the right box of distance 1, he gets <SPAN CLASS="MATH">1 <TT>*</TT> 12</SPAN> <tex2html_verbatim_mark> points but the queen also blocks the paths to boxes behind it; i.e., it is not allowed to put cards on boxes behind it anymore.<P><DIV ALIGN="CENTER"><IMG WIDTH="243" HEIGHT="191" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2573a.jpg ALT="\epsfbox{p2573b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 2: Placing a queen.</DIV><P><SPAN CLASS="textbf">Your goal:</SPAN> Given a number of poker cards, find a way to place them so that you will get the <EM>minimum points</EM>. For example, suppose you have 3 cards 5, 10, and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. To get the minimum points, you can place cards like Figure 3, where the total points are <SPAN CLASS="MATH">1 <TT>*</TT> 13 + 2 <TT>*</TT> 5 + 2 <TT>*</TT> 10 = 43</SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="294" HEIGHT="204" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2573a.jpg ALT="\epsfbox{p2573c.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 3: An example to place cards.</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2573a.jpg ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, which represents the number of test cases. In each test case, it begins with an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2573a.jpg ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>, which represents the number of poker cards. Next, each card represented by its number are listed consecutively. Note that, the numbers of ace, <SPAN CLASS="MATH">2, 3,..., <I>K</I></SPAN> <tex2html_verbatim_mark> are given by integers <SPAN CLASS="MATH">1, 2, 3,..., 13</SPAN> <tex2html_verbatim_mark>, respectively. The final minimum point in each test case is less than 5000000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>List the minimum points of each test case line by line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
3
5 10 13
4
3 4 5 5
5
7 7 10 11 13
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
43
34
110
</PRE><P>
______________________________________________________
2574||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> be a weighted graph, i.e., every edge in <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> is associated with a nonnegative integer weight. The <EM>length</EM> of a path is the sum of edge weights in the path. A <EM>shortest path</EM> between vertices <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, denoted by <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>, is defined as a path with the shortest length from <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>. The <EM>distance</EM> between vertices <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, denoted by <SPAN CLASS="MATH"><I>d</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>, is the length of the shortest path <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>. For two vertices in a connected graph, there exists at least one shortest path between them. Let <SPAN CLASS="MATH"><I>e</I> = (<I>u</I>, <I>v</I>)</SPAN> <tex2html_verbatim_mark> be an edge in <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> closer to <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> than <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> may be <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>). Let <SPAN CLASS="MATH"><I>G</I> - <I>e</I></SPAN> <tex2html_verbatim_mark> denote the subgraph obtained by removing edge <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> from <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>. A <EM>detour</EM> from <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> is the shortest path from <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>G</I> - <I>e</I></SPAN> <tex2html_verbatim_mark>, or <SPAN CLASS="MATH"><I>P</I><SUB>G-e</SUB>(<I>u</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>. Edge <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> is a <EM>detour-critical edge</EM> in <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark> if the removal of <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> results in the maximum distance increment from <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>. In other words, if <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> is a detour-critical edge in <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>d</I><SUB>G-e</SUB>(<I>u</I>, <I>s</I>) - <I>d</I><SUB>G</SUB>(<I>u</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark> is maximum among all edges in <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>. The <EM>longest detour problem</EM> is to find the maximum distance increment of a shortest path.<P><DIV ALIGN="CENTER"><IMG WIDTH="479" HEIGHT="391" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2574.jpg ALT="\epsfbox{p2574.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 4: A weighted graph G.</DIV><P>For example, see Figure 4. <!-- 1) = < 4, 3, 2, 1 >$
 --><SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(4, 1) = &lt; 4, 3, 2, 1 &gt;</SPAN> <tex2html_verbatim_mark> is the shortest path from vertex 4 to vertex 1. Path <!-- MATH
 $< 4, 6, 1 >$
 --><SPAN CLASS="MATH">&lt; 4, 6, 1 &gt;</SPAN> <tex2html_verbatim_mark> is the detour from vertex 4 to vertex 1 if edge <SPAN CLASS="MATH">(4, 3)</SPAN> <tex2html_verbatim_mark> is removed. Path <!-- MATH
 $< 3, 5, 1 >$
 --><SPAN CLASS="MATH">&lt; 3, 5, 1 &gt;</SPAN> <tex2html_verbatim_mark> is the detour from vertex 3 to vertex 1 if edge <SPAN CLASS="MATH">(3, 2)</SPAN> <tex2html_verbatim_mark> is removed. Path <!-- MATH
 $< 2, 5, 1 >$
 --><SPAN CLASS="MATH">&lt; 2, 5, 1 &gt;</SPAN> <tex2html_verbatim_mark> is the detour from vertex 2 to vertex 1 if edge <SPAN CLASS="MATH">(2, 1)</SPAN> <tex2html_verbatim_mark> is removed. The detour-critical edge in <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(4, 1)</SPAN> <tex2html_verbatim_mark> is not edge <SPAN CLASS="MATH">(4, 3)</SPAN> <tex2html_verbatim_mark> or edge <SPAN CLASS="MATH">(2, 1)</SPAN> <tex2html_verbatim_mark> but edge <SPAN CLASS="MATH">(3, 2)</SPAN> <tex2html_verbatim_mark> since <SPAN CLASS="MATH"><I>d</I><SUB>G-(3, 2)</SUB>(3, 1) - <I>d</I><SUB>G</SUB>(3, 1) = 600 - 200 = 400</SPAN> <tex2html_verbatim_mark> is greater than <SPAN CLASS="MATH"><I>d</I><SUB>G-(4, 3)</SUB>(4, 1) - <I>d</I><SUB>G</SUB>(4, 1) = 500 - 300 = 200</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>G-(2, 1)</SUB>(2, 1) - <I>d</I><SUB>G</SUB>(2, 1) = 200 - 100 = 100</SPAN> <tex2html_verbatim_mark>.<P>The algorithm for finding detours, as well as determining the detour-critical edges, is important from the viewpoint of network management. Due to a sudden edge failure from some vertex, the message must be retransmitted through a detour from the vertex adjacent to the faulty edge.<P>Suppose that we have several networks. Each network is connected and contains at most <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> vertices, where <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2574.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2574.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. Assume now that you are hired to serve as a network administrator and have to determine the maximum distance increment caused by a detour-critical edge of a given shortest path for each network.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. The first line contains an integer indicating the number of test cases. Each test case starts with a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2574.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2574.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines represent the adjacency matrix of a network. An <EM>adjacency matrix</EM> of a network <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> vertices, denoted by <SPAN CLASS="MATH"><I>A</I>(<I>G</I>) = [<I>w</I><SUB>u, v</SUB>]</SPAN> <tex2html_verbatim_mark>, is an <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> matrix such that <SPAN CLASS="MATH"><I>w</I><SUB>u, v</SUB> &gt; 0</SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH">(<I>u</I>, <I>v</I>)</SPAN> <tex2html_verbatim_mark> is an edge of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>w</I><SUB>u, v</SUB> = 0</SPAN> <tex2html_verbatim_mark> otherwise, where <SPAN CLASS="MATH"><I>w</I><SUB>u, v</SUB></SPAN> <tex2html_verbatim_mark> in a nonnegative integer. Note that any two elements in each line of an adjacency matrix are separated by a space. The last line of each test case represents the sequence of vertices in a given shortest path in which there is also a space between two vertices. Note that the first and the last vertices denote the source and the destination vertices, respectively. For example, the adjacency matrix of the graph in Figure 4 is shown in test case 3 of the sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the maximum distance increment caused by the detour-critical edge of the given shortest path in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
3
0 10 20
10 0 10
20 10 0
3 2 1
4
0 10 10 30
10 0 30 0
10 30 0 10
30 0 10 0
4 3 1 2
6
0 100 0 0 100 200
100 0 100 0 100 400
0 100 0 100 500 0
0 0 100 0 500 300
100 100 500 500 0 0
200 400 0 300 0 0
4 3 2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
20
30
400
</PRE><P>
______________________________________________________
2575||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> be an array of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $1 < N \le 50000$
 --><SPAN CLASS="MATH">1 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$">50000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is even, integers. We use <SPAN CLASS="MATH"><I>A</I>[<I>i</I>]</SPAN> <tex2html_verbatim_mark> to denote the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th element of the array. Hence the array contains elements <SPAN CLASS="MATH"><I>A</I>[0], <I>A</I>[1],..., <I>A</I>[<I>N</I> - 1]</SPAN> <tex2html_verbatim_mark>. Each element of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is a nonnegative integer in the range of 0 through 9972. Given two integers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, let (<SPAN CLASS="MATH"><I>x</I> mod <I>y</I></SPAN> <tex2html_verbatim_mark>) be the integer that is the remainder of <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> dividing <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. It happens that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I>[<I>i</I>] = (<I>a</I>1 <TT>*</TT> <I>i</I><SUP>2</SUP> + <I>a</I><SUB>2</SUB> <TT>*</TT> <I>i</I> + <I>a</I><SUB>3</SUB>) mod 9973</DIV><P><tex2html_verbatim_mark></P>for some integers <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>a</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>. We know <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$">50000</SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>i</I> = 1, 2, 3</SPAN> <tex2html_verbatim_mark>.<P>For example, if <SPAN CLASS="MATH"><I>N</I> = 6</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB> = 1</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>a</I><SUB>3</SUB> = 1</SPAN> <tex2html_verbatim_mark>, then we have the following:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=7 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>i</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A[i]</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>31</TD></TR></TBODY></TABLE></DIV><P><P><BR>There are three additional arrays <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>. Each of the three arrays has <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$">50000</SPAN> <tex2html_verbatim_mark>, integers. We know <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>S</I>[<I>i</I>]<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>E</I>[<I>i</I>]<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>. It happens that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>S</I>[<I>i</I>] = (<I>s</I><SUB>1</SUB> <TT>*</TT> <I>i</I><SUP>2</SUP> + <I>s</I><SUB>2</SUB> <TT>*</TT> <I>i</I> + <I>s</I><SUB>3</SUB>) mod(<I>N</I>/2)</DIV><P><tex2html_verbatim_mark></P>and<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>E</I>[<I>i</I>] = <I>S</I>[<I>i</I>] + [(<I>e</I><SUB>1</SUB> <TT>*</TT> <I>i</I><SUP>2</SUP> + <I>e</I><SUB>2</SUB> <TT>*</TT> <I>i</I> + <I>e</I><SUB>3</SUB>) mod(<I>N</I>/2)].</DIV><P><tex2html_verbatim_mark></P><P>Assume <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>s</I><SUB>i</SUB>, <I>e</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$">50000</SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>i</I> = 1, 2, 3</SPAN> <tex2html_verbatim_mark>. We also know<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>R</I>[<I>i</I>] = min{<I>A</I>[<I>S</I>[<I>i</I>]], <I>A</I>[<I>S</I>[<I>i</I>] + 1],..., <I>A</I>[<I>E</I>[<I>i</I>]]}</DIV><P><tex2html_verbatim_mark></P>for each <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>M</I> - 1</SPAN> <tex2html_verbatim_mark>. Your task is to find the smallest <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> such that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>R</I>[<I>j</I>] = max{<I>R</I>[0], <I>R</I>[1],..., <I>R</I>[<I>M</I> - 1]}.</DIV><P><tex2html_verbatim_mark></P><P>For example, if <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is given as the above example, <SPAN CLASS="MATH"><I>M</I> = 3</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>e</I><SUB>1</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>e</I><SUB>2</SUB> = 1</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>e</I><SUB>3</SUB> = 1</SPAN> <tex2html_verbatim_mark>, then we have the following:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>i</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S[i]</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E[i]</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R[i]</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY></TABLE></DIV><P><P><BR>Hence max <SPAN CLASS="MATH">{<I>R</I>[0], <I>R</I>[1], <I>R</I>[2]} = 3</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I>[0]</SPAN> <tex2html_verbatim_mark> has the smallest index with its value equaling 3. Thus we output 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number of test cases <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark>. Then the <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> test cases are listed one by one. Each test case is listed as follows in one line with a space between two integers: <SPAN CLASS="MATH"><I>N</I>, <I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB>, <I>M</I>, <I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>, <I>s</I><SUB>3</SUB>, <I>e</I><SUB>1</SUB>, <I>e</I><SUB>2</SUB>, <I>e</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the smallest value <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>R</I>[<I>j</I>] = max{<I>R</I>[0], <I>R</I>[1], <I>R</I>[2],..., <I>R</I>[<I>M</I> - 1]}</SPAN> <tex2html_verbatim_mark> in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
6 1 1 1 3 1 1 1 1 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
</PRE><P>
______________________________________________________
2576||||||false||||||
<P>Referring Figure 5, a tag tree is a hierarchical representation of a 2-dimensional array ( <SPAN CLASS="MATH">2<SUP>k</SUP> <TT>x</TT> 2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is an integer and <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>) of nonnegative values, where successively reduced resolutions form a tree. Note that, for an <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> array, the indices of this array are from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>. The value <SPAN CLASS="MATH"><I>q</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> at every created node of the tree is the minimum value of its four children <SPAN CLASS="MATH"><I>q</I><SUB>l+1</SUB>(2<I>i</I>, 2<I>j</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I><SUB>l+1</SUB>(2<I>i</I>, 2<I>j</I> + 1)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I><SUB>l+1</SUB>(2<I>i</I> + 1, 2<I>j</I>)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>q</I><SUB>l+1</SUB>(2<I>i</I> + 1, 2<I>j</I> + 1)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="$ \le$"><I>l</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="$ \le$"><I>k</I></SPAN> <tex2html_verbatim_mark>, is the level index and <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> are the indices of the 2-dimensional array. The 2-dimensional array at the lowest level is the input array.<P><DIV ALIGN="CENTER"><IMG WIDTH="851" HEIGHT="344" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="\epsfbox{p2576a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 5: A tag tree.</DIV><P>The tag tree will be coded into a sequence of bits using the rules described below. Once a tag tree is constructed, we associate each node with an <EM>upgrading</EM> value, <SPAN CLASS="MATH"><I>c</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark>, which is initialized to zero. The upgrading value of a node is updated while the node is coded. Coding starts at the top node, i.e., the one with the level index 0, and a child cannot be coded until its parent is coded. While coding a node, a zero bit is output to indicate that its upgrading value <SPAN CLASS="MATH"><I>c</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> is less than its <SPAN CLASS="MATH"><I>q</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> and then <SPAN CLASS="MATH"><I>c</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> is increased by one. A one bit is output to indicate that <SPAN CLASS="MATH"><I>q</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> are equal.<P>After a node is coded, the upgrading values of all its descendent nodes which have smaller upgrading values are changed to the upgrading value of the coded node. The coding process will be continued until all nodes in the tag tree are coded.<P>For example, in the following coding is started from the top node which has <SPAN CLASS="MATH"><I>q</I><SUB>0</SUB>(0, 0) = 1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I><SUB>0</SUB>(0, 0) = 0</SPAN> <tex2html_verbatim_mark>. Since <!-- MATH
 $c_{0}(0, 0) < q_{0}(0, 0)$
 --><SPAN CLASS="MATH"><I>c</I><SUB>0</SUB>(0, 0) &lt; <I>q</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>, we output a zero bit. Next, we increase <SPAN CLASS="MATH"><I>c</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> by 1 and find that <SPAN CLASS="MATH"><I>c</I><SUB>0</SUB>(0, 0) = <I>q</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>, so we output a one bit. Thus, the output bits result from coding top node are 01. Once <SPAN CLASS="MATH"><I>q</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> is coded, the upgrading values of all its descendent nodes with smaller upgrading values are changed to 1 as in Figure 6(a).<P><DIV ALIGN="CENTER"><IMG WIDTH="909" HEIGHT="455" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="\epsfbox{p2576b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 6: An example of coding a tag tree.</DIV><P>We mark the coded nodes in Figure 6(b)-(f) by an ``<SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark>". Next, we code <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>. We have <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>(0, 0) = <I>q</I><SUB>1</SUB>(0, 0) = 1</SPAN> <tex2html_verbatim_mark>. A one bit is output and <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> is coded. The associated upgrading values of its descendant nodes are updated again according to the updating rule (see Figure 6(b)). We continue coding <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>. A one bit is output for the node because <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB>(0, 0) = <I>q</I><SUB>2</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> (see Figure 6(c)). So, till now, we code <SPAN CLASS="MATH"><I>q</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> with 0111.<P>Next, that we code <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(1, 0)</SPAN> <tex2html_verbatim_mark> which is 3. It is not necessary to code its ancestors again. Its ancestors <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> have already been coded. Thus, we can code <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(1, 0)</SPAN> <tex2html_verbatim_mark> directly. Its output code will be 001 since <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB>(1, 0)</SPAN> <tex2html_verbatim_mark> is increased twice before equal to <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(1, 0)</SPAN> <tex2html_verbatim_mark> (see Figure 6(d)).<P>Continue this example. Assume that we are going to code <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(2, 0)</SPAN> <tex2html_verbatim_mark> which is 2. We have to code its parent <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>(1, 0)</SPAN> <tex2html_verbatim_mark> first since it is not coded yet. Its output code is 01 and the related upgrading values are updated as in Figure 6(e). Back to code <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(2, 0)</SPAN> <tex2html_verbatim_mark>, only a one bit is output (see Figure 6(f)).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, indicating the number of test cases. In each test case, the first line contains an integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> indicating that the array size is <SPAN CLASS="MATH">2<SUP>k</SUP> <TT>x</TT> 2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark>. Then, the following <SPAN CLASS="MATH">2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark> lines represent a <SPAN CLASS="MATH">2<SUP>k</SUP> <TT>x</TT> 2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark> array. The rows of this <SPAN CLASS="MATH">2<SUP>k</SUP> <TT>x</TT> 2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark> array are listed line by line. Each row contains <SPAN CLASS="MATH">2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark> nonnegative integers separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The number of bits used to code the input array in one line for each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
2
1 3 2 3
2 2 2 4
2 2 2 2
2 3 4 4
2
2 1 1 4
1 3 2 3
1 1 3 2
2 1 3 5
3
4 1 3 2 5 2 1 2
1 1 3 4 1 1 3 2
3 3 2 1 2 4 1 2
4 2 4 1 2 3 4 1
1 2 3 2 4 4 1 2
3 2 3 2 4 4 2 4
4 5 1 1 1 1 3 3
3 1 2 3 2 3 4 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
37
38
155
</PRE><P>
______________________________________________________
2577||||||false||||||
<P>Isomorphism is the problem of testing whether two graphs are really the same. Suppose we are given a collection of graphs and must perform some operation on each of them. If we can identify which of the graphs are duplicate, they can be discarded so as to avoid redundant work.<P>First we have to explain what is meant when we say two graphs are the same. Two labeled graphs <SPAN CLASS="MATH"><I>G</I><SUB>1</SUB> = (<I>V</I><SUB>1</SUB>, <I>E</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>G</I><SUB>2</SUB> = (<I>V</I><SUB>2</SUB>, <I>E</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> are identical when we can find a mapping <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> of the vertices of <SPAN CLASS="MATH"><I>G</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> to the vertices of <SPAN CLASS="MATH"><I>G</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> is an edge of <SPAN CLASS="MATH"><I>G</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> if and only if <SPAN CLASS="MATH">(<I>f</I> (<I>x</I>), <I>f</I> (<I>y</I>))</SPAN> <tex2html_verbatim_mark> is an edge of <SPAN CLASS="MATH"><I>G</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. Such a mapping is called an <EM>isomorphism</EM>.<P>No efficient algorithm is known for the general graph isomorphism problem, but the problem is easier to determine whether two trees are isomorphic to each other. In Figure 7, it is not hard to verify that tree <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is isomorphic to tree <SPAN CLASS="MATH"><I>T</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, but <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is not isomorphic to <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="874" HEIGHT="174" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2577.jpg ALT="\epsfbox{p2577.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 7: Three nonrooted root trees.</DIV><P>You are given a collection of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> trees <SPAN CLASS="MATH"><I>C</I> = {<I>T</I><SUB>1</SUB>, <I>T</I><SUB>2</SUB>,..., <I>T</I><SUB>k</SUB>}</SPAN> <tex2html_verbatim_mark> such that each <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> has exactly <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> nodes. The objective of the problem is to partition these trees into isomorphic (equivalent) classes such that any two trees within the same isomorphic class are isomorphic to each other.<P>A naive method of enumerating all possible mapping functions would require generating all possible <SPAN CLASS="MATH"><I>n</I>!</SPAN> <tex2html_verbatim_mark> different mappings. What resulted is a very time-consuming <SPAN CLASS="MATH"><I>O</I>(<I>n</I>!)</SPAN> <tex2html_verbatim_mark> time algorithm just to test two trees. You need to figure out a somehow clever way for solving the problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>A collection of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-node) trees <SPAN CLASS="MATH"><I>C</I> = {<I>T</I><SUB>1</SUB>, <I>T</I><SUB>2</SUB>,..., <I>T</I><SUB>k</SUB>}</SPAN> <tex2html_verbatim_mark>. The inputs are just a list of integers. The first 2 integers (in a single line) represent the number of trees, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, and the size of each tree, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Note that <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> can be as large as 150 and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> can be as large as 100. After the two integers, there will be <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines representing the edge sets for each tree <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>; each line contains exactly <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> pairs of integers, representing the <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> (directed) edges of each tree. Thus, there are totally <SPAN CLASS="MATH">2<I>n</I> - 2</SPAN> <tex2html_verbatim_mark> integers for each tree, and the total input will be <SPAN CLASS="MATH">2<I>k</I>(<I>n</I> - 1)</SPAN> <tex2html_verbatim_mark> integers except the first two parameters. Each tree is indexed by their appearance ordering; that is, the first line represents the tree <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, the second line is <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB>,...</SPAN> <tex2html_verbatim_mark>, etc, and the last (<SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>th) line is just <SPAN CLASS="MATH"><I>T</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For the given collection of trees, partition these trees into isomorphic (equivalent) classes such that any two trees within the same isomorphic class are isomorphic to each other. For each isomorphic class, output the indices of these isomorphic trees in a line. Suppose that there are <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> isomorphic classes, you need to print out <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines. For example, a line<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>t</I><SUB>1</SUB> = <I>t</I><SUB>2</SUB> = <SUP>... </SUP>= <I>t</I><SUB>l</SUB>;</DIV><P><tex2html_verbatim_mark></P>represents an isomorphic class of size <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> such that two trees <SPAN CLASS="MATH"><I>T</I><SUB>t<SUB>i</SUB></SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I><SUB>t<SUB>j</SUB></SUB></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2577.jpg ALT="$ \le$"><I>i</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2577.jpg ALT="$ \le$"><I>l</I></SPAN> <tex2html_verbatim_mark>, are isomorphic to each other. For each line, output indices of those isomorphic trees in <EM>increasing order</EM>; that is, <!-- MATH
 $t_{1} < t_{2} < \cdots < t_{l}$
 --><SPAN CLASS="MATH"><I>t</I><SUB>1</SUB> &lt; <I>t</I><SUB>2</SUB> &lt; <SUP>... </SUP>&lt; <I>t</I><SUB>l</SUB></SPAN> <tex2html_verbatim_mark> . Further, print out these <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> isomorphic classes by their increasing lexical ordering; that is, by the ordering of their first indices. For example, suppose that there are 4 isomorphic classes <SPAN CLASS="MATH">{4, 2, 7}</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">{5, 1, 3}</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">{8, 9}</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">{6}</SPAN> <tex2html_verbatim_mark>.<P><P><BR>The output shall be<P><PRE>
1 = 3 = 5 ;
2 = 4 = 7 ;
6 ;
8 = 9 ;
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 7
7 2 7 1 7 6 2 3 1 4 6 5
7 2 7 1 2 3 1 4 1 5 5 6
4 3 3 2 4 1 1 7 5 6 4 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 = 3 ;
2 ;
</PRE><P>
______________________________________________________
2578||||||false||||||
<P>Trees are used to represent the evolutionary relationship of species. An <EM>evolutionary tree</EM> is a edge-weighted tree with each leaf representing one species. The distance between two leaves on the tree represents the dissimilarity of these two species. An important issue in computational biology is to construct the evolutionary tree from the observed dissimilarities.<P>Let <SPAN CLASS="MATH"><I>N</I> = {1..<I>n</I>}</SPAN> <tex2html_verbatim_mark>. An <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> matrix <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is a metric over <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> if it is symmetric, nonnegative, and <SPAN CLASS="MATH"><I>M</I>[<I>i</I>, <I>j</I>] + <I>M</I>[<I>j</I>, <I>k</I>]<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="$ \le$"><I>M</I>[<I>i</I>, <I>k</I>]</SPAN> <tex2html_verbatim_mark> for any <SPAN CLASS="MATH"><I>i</I>, <I>j</I>, <I>k</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="$ \in$"> <I>N</I></SPAN> <tex2html_verbatim_mark> (i.e., triangle inequality). A metric is a <EM>tree metric</EM> if it can be realized by a tree, i.e., there exists an edge-weighted tree <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> such that<P><OL><LI>the leaf set is <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>; </LI><LI>the weight of each edge is nonnegative; </LI><LI>and <SPAN CLASS="MATH"><I>d</I><SUB>T</SUB>(<I>i</I>, <I>j</I>) = <I>M</I>[<I>i</I>, <I>j</I>]</SPAN> <tex2html_verbatim_mark> for any <SPAN CLASS="MATH"><I>i</I>, <I>j</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="$ \in$"> <I>N</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>d</I><SUB>T</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> is the shortest path length between <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> on the tree <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> . </LI></OL><P>For example, the following matrix is a tree metric. The corresponding tree is given in Figure 8.<P><P><BR><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>M</I> = <IMG WIDTH="20" HEIGHT="125" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="$\displaystyle \left(\vphantom{ \begin{tabular}{ccccc}
0 &amp; 5 &amp; 9 &amp; 12 &amp; 8 \\  ...
... \\
12 &amp; 11 &amp; 5 &amp; 0 &amp; 4 \\
8 &amp; 7 &amp; 1 &amp; 4 &amp; 0 \\
\end{tabular} }\right.$"><TABLE COLS=5><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0 <tex2html_col_mark> 5 <tex2html_col_mark> 9 <tex2html_col_mark> 12 <tex2html_col_mark> 8 <tex2html_row_mark> 5 <tex2html_col_mark> 0 <tex2html_col_mark> 8 <tex2html_col_mark> 11 <tex2html_col_mark> 7 <tex2html_row_mark> 9 <tex2html_col_mark> 8 <tex2html_col_mark> 0 <tex2html_col_mark> 5 <tex2html_col_mark> 1 <tex2html_row_mark> 12 <tex2html_col_mark> 11 <tex2html_col_mark> 5 <tex2html_col_mark> 0 <tex2html_col_mark> 4 <tex2html_row_mark> 8 <tex2html_col_mark> 7 <tex2html_col_mark> 1 <tex2html_col_mark> 4 <tex2html_col_mark> 0 <tex2html_row_mark></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TABLE><IMG WIDTH="20" HEIGHT="125" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="$\displaystyle \left.\vphantom{ \begin{tabular}{ccccc}
0 &amp; 5 &amp; 9 &amp; 12 &amp; 8 \\  ...
... \\
12 &amp; 11 &amp; 5 &amp; 0 &amp; 4 \\
8 &amp; 7 &amp; 1 &amp; 4 &amp; 0 \\
\end{tabular} }\right)$"></DIV><P><tex2html_verbatim_mark></P><P><P><BR>The <EM>size</EM> of a tree is defined to be the total weight of the tree edges. For a tree metric, it has been shown that the tree size is unique, i.e., it is impossible to find two trees of different sizes realizing the same tree metric. Your task is to design a program to compute the tree sizes of the given tree metrics. The following simple example may be helpful. For the case of only two species, the tree has only one edge and the tree<P><DIV ALIGN="CENTER"><IMG WIDTH="371" HEIGHT="203" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="\epsfbox{p2578.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 8: An evolution tree.</DIV><P>size is just the distance between the two species. Let us consider the case of three species <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. Let <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> be the corresponding tree. Since <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> has three leaves, there is an internal node <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. By definition, the path length <SPAN CLASS="MATH"><I>d</I><SUB>T</SUB>(<I>a</I>, <I>b</I>) = <I>M</I>[<I>a</I>, <I>b</I>]</SPAN> <tex2html_verbatim_mark>. Since <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is a vertex on the path between <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, all we need to do is to determine the weight (length) of edge <SPAN CLASS="MATH">(<I>x</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark>. Let <SPAN CLASS="MATH"><I>w</I>(<I>x</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark> denote the weight of edge <SPAN CLASS="MATH">(<I>x</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark>. We have<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>w</I>(<I>x</I>, <I>c</I>) + <I>w</I>(<I>x</I>, <I>a</I>)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP WIDTH="50%"><I>M</I>[<I>a</I>, <I>c</I>],</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>w</I>(<I>x</I>, <I>c</I>) + <I>w</I>(<I>x</I>, <I>b</I>)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP WIDTH="50%"><I>M</I>[<I>b</I>, <I>c</I>],</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT">and <I>w</I>(<I>x</I>, <I>a</I>) + <I>w</I>(<I>x</I>, <I>b</I>)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP WIDTH="50%"><I>M</I>[<I>a</I>, <I>b</I>].</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P>Therefore, <SPAN CLASS="MATH"><I>w</I>(<I>x</I>, <I>c</I>) = (<I>M</I>[<I>a</I>, <I>c</I>] + <I>M</I>[<I>b</I>, <I>c</I>] - <I>M</I>[<I>a</I>, <I>b</I>])/2</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. The first line of each test case is a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $2 < n < 30$
 --><SPAN CLASS="MATH">2 &lt; <I>n</I> &lt; 30</SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> lines represent the upper triangle of the tree metric, but the diagonal is not included. Each line is for one row, and elements are separated by spaces. All the elements are nonnegative integers less than 100. The last case is followed by a ``<TT>0</TT>" to indicate the end of input. You may assume that the test data are all tree metrics, and it is not necessary to check them. Furthermore, the size of a tree is the sum of all integers in the test case except the integers in the first line of the test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the tree size in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
5 9 12 8
8 11 7
5 1
4
4
15 36 60
31 55
36
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
15
71
</PRE><P>
______________________________________________________
2579||||||false||||||
<P>
In a mobile Packet Radio (PR) network, intermediate PR's are used to repeat a message so that it can be transferred from a source to its destination. Each PR has a limited broadcasting range whose boundary is a circle. Each PR moves at a constant speed in the plane. The speed of a moving object in the plane is given by a vector <!-- MATH
 $(v_{1}, v_{2})$
 -->
<SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark>. Here <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> is the speed in the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinate direction, and <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> is the speed in the <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinate direction. One unit of time is a second, one unit of length is a meter. For example, if an object is at position <SPAN CLASS="MATH">(1, 2)</SPAN>
<tex2html_verbatim_mark> at time 0, and the speed of the object is <SPAN CLASS="MATH">(- 2, 3)</SPAN>
<tex2html_verbatim_mark>, then after 1 second the object is at position <!-- MATH
 $(1+(-2) \times 1, 2+3 \times 1) = (-1, 5)$
 -->
<SPAN CLASS="MATH">(1 + (- 2) <TT>x</TT> 1, 2 + 3 <TT>x</TT> 1) = (- 1, 5)</SPAN>
<tex2html_verbatim_mark>, and after 2 seconds the object is at position <!-- MATH
 $(1 + (-2) \times 2, 2 + 3 \times 2) = (-3, 8)$
 -->
<SPAN CLASS="MATH">(1 + (- 2) <TT>x</TT> 2, 2 + 3 <TT>x</TT> 2) = (- 3, 8)</SPAN>
<tex2html_verbatim_mark>.

<P>
Once a PR broadcasts a message, the message reaches all the PR's within its broadcasting range (including the broadcasting PR itself) immediately (i.e., with 0 time delay). Once a PR receives a message, it can either ignore the message, or broadcast the message, according to instructions. If the PR broadcasts the message, it will do it exactly 1 second after receiving it.

<P>
Given a set of PR's, and a request to transfer a message from a source PR to a destination PR, you are asked to design a program to find a quickest way to transfer the message from the source to its destination. Suppose the request is made at time <SPAN CLASS="MATH"><I>t</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark>. Then the source PR can broadcast the message at time <SPAN CLASS="MATH"><I>t</I><SUB>0</SUB> + 1</SPAN>
<tex2html_verbatim_mark>. Each broadcasting is counted as 1 step. In particular, if a PR broadcasts the message <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> times, then it is counted as <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> steps. Your program should calculate how many steps are needed (in an quickest way) to transfer the message from the source PR to its destination PR.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The first line of the input file contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2579img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, which represents the number of test cases.

<P>
Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $2 \le m \le 100$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2579img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2579img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, which represents the number of PR's in this test case. The next <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines are information of these <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> PR's. The PR's are numbered <!-- MATH
 $1, 2, \ldots , m$
 -->
<SPAN CLASS="MATH">1, 2,..., <I>m</I></SPAN>
<tex2html_verbatim_mark>, and the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>th line are information of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>th PR. The information for each PR is a sequence of 5 real numbers: <!-- MATH
 $a, b, c, d, e$
 -->
<SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>, <I>e</I></SPAN>
<tex2html_verbatim_mark>, and each of the 5 numbers is in the range from -100000 to 100000 and has at most 8 digits after the decimal point. The meaning of the reals are as follows: At time 0, the PR lies at point <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN>
<tex2html_verbatim_mark>. The speed of the PR is <SPAN CLASS="MATH">(<I>c</I>, <I>d</I> )</SPAN>
<tex2html_verbatim_mark>. The broadcasting range of the PR is a disk of radius <SPAN CLASS="MATH"><I>e</I></SPAN>
<tex2html_verbatim_mark>. After the <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines, which contain information of the PR's, the next line contains three integers <SPAN CLASS="MATH"><I>u</I>, <I>v</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark>. It means that the request is to transfer a message from the <SPAN CLASS="MATH"><I>u</I></SPAN>
<tex2html_verbatim_mark>th PR to the <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark>th PR, and the request is made at time <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark>. There is a space between any two numbers in the same line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
If the message can be transferred to its destination in <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> steps, then the output is the integer <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>. If the message can never be transferred to its destination, then the output is the letter <TT>E</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
2
0 0 1 1 5
1000 0 -1 1 10
1 2 0
3
0 0 1 1 15
1000 500 -1 0 20
-100 -100 0 1 25
1 3 3
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
498
E
</PRE> 

<P>

______________________________________________________
2580||||||false||||||
<P>A <SPAN CLASS="MATH">(<I>m</I>, <I>n</I>)</SPAN> <tex2html_verbatim_mark> threshold scheme is a method which allows a secret information <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> to be divided into <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> shadows <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark> in such a way that any <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>, or more shadows can recover the secret information <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, but <SPAN CLASS="MATH"><I>m</I> - 1</SPAN> <tex2html_verbatim_mark> or fewer shadows can not. Threshold schemes have the advantage of distributing an important privilege in many applications, such as access control, launching a missile, opening a bank vault, or even opening a deposit box. A well-known threshold scheme, Shamir's <SPAN CLASS="MATH">(<I>m</I>, <I>n</I>)</SPAN> <tex2html_verbatim_mark> threshold scheme, works as follows:<P><P><BR>Without loss of generality, we assume that <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is a positive integer which is smaller than <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> , where <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is a prime number. To divide <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> shadows <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>, we pick a random <SPAN CLASS="MATH"><I>m</I> - 1</SPAN> <tex2html_verbatim_mark> degree polynomial <SPAN CLASS="MATH"><I>f</I> (<I>x</I>) = <I>a</I><SUB>m-1</SUB><I>x</I><SUP>m-1</SUP> + <I>a</I><SUB>m-2</SUB><I>x</I><SUP>m-2</SUP> +...+ <I>a</I><SUB>1</SUB><I>x</I> + <I>K</I>(<I>mod</I>, <I>P</I>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>,..., <I>a</I><SUB>m-2</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>a</I><SUB>m-1</SUB></SPAN> <tex2html_verbatim_mark> are random integers which are larger than or equal to 0, and less than <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>. Note that <SPAN CLASS="MATH"><I>a</I><SUB>m-1</SUB> <IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \neq$"> 0</SPAN> <tex2html_verbatim_mark>. These <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> shadows are computed by <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB> = <I>f</I> (1)(<I>mod</I>, <I>P</I>),..., <I>S</I><SUB>i</SUB> = <I>f</I> (<I>i</I>)(<I>mod</I>, <I>P</I>),..., <I>S</I><SUB>n</SUB> = <I>f</I> (<I>n</I>)(<I>mod</I>, <I>P</I>)</SPAN> <tex2html_verbatim_mark>. It is obvious that any <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> shadows can uniquely determine the <SPAN CLASS="MATH"><I>f</I> (<I>x</I>)</SPAN> <tex2html_verbatim_mark> and hence obtain the secret information <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR>Consider, for example, a rich man with nine sons kept his property in a strong room from stealing. The strong room was controlled by a digital master key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 < K < 65521$
 --><SPAN CLASS="MATH">0 &lt; <I>K</I> &lt; 65521</SPAN> <tex2html_verbatim_mark>. When he was alive, he used Shamir's <SPAN CLASS="MATH">(5, 9)</SPAN> <tex2html_verbatim_mark> threshold scheme with <SPAN CLASS="MATH"><I>P</I> = 65521</SPAN> <tex2html_verbatim_mark> to share the master key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> with his nine sons. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th son was given the shadow <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB> = <I>f</I> (<I>i</I>)(<I>mod</I>, 65521)</SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$">9</SPAN> <tex2html_verbatim_mark>.<P><P><BR>After the rich man died, all of his sons met and decided whether they should open their father's strong room or not. They inputted their shadows to a computer in which a program is responsible for recovering the master key. If one agrees to open, he inputs his correct shadow; otherwise, he inputs a forged shadow (a random number) instead of the correct shadow. Assume that the number of forged shadows is less than or equal to 2. Now, you are asked to design a program for computing the master key and showing who agrees to open.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$">5</SPAN> <tex2html_verbatim_mark>, which represents the number of test cases. Then, the cases are listed line by line. In each line, there are nine integers, separated by a space, which are the shadows inputted to the program in the order of <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>&nbsp;<I>S</I><SUB>2</SUB>&nbsp;<I>S</I><SUB>3</SUB>&nbsp;<I>S</I><SUB>4</SUB>&nbsp;<I>S</I><SUB>5</SUB>&nbsp;<I>S</I><SUB>6</SUB>&nbsp;<I>S</I><SUB>7</SUB>&nbsp;<I>S</I><SUB>8</SUB>&nbsp;<I>S</I><SUB>9</SUB></SPAN> <tex2html_verbatim_mark>, respectively, of test case <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I> = 1, 2,..., <I>q</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print the master key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> and who agrees to open in increasing order, separated by a space, in line <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>t</I> = 1,..., <I>q</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
15581 8818 43370 1705 557 63321 54532 7470 58639
49653 16589 16052 43258 50121 10785 52661 63302 18008
38759 25341 45629 54400 5123 42161 29892 11356 11692
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
22331 1 2 3 4 5 6 7 8 9
11220 2 4 5 6 7 8 9
55555 1 3 4 5 6 7 8 9

______________________________________________________
2581||||||false||||||
Classmates stand in a circle facing inward, each with the direction <EM>left</EM>
or <EM>right</EM> in mind. One of the
students has a ball and begins by tossing it to another student. (It
doesn't really matter which one.)
When one catches the ball and is thinking <EM>left</EM>, she throws it back
across the circle one place to the
left (from her perspective) of the person who threw her the ball. Then
she switches from thinking <EM>left</EM>
to thinking <EM>right</EM>. Similarly, if she is thinking <EM>right</EM>, she throws the
ball to the right of the person who
threw it to her and then switches from thinking <EM>right</EM> to thinking <EM>left</EM>.

<P>
There are two exceptions to this rule: If one catches the ball from the
classmate to her immediate left
and is also thinking <EM>left</EM>, she passes the ball to the classmate to her
immediate right, and then switches to
thinking <EM>right</EM>. Similarly, if she gets the ball from the classmate to her
immediate right and is thinking
<EM>right</EM>, she passes the ball to the classmate to her immediate left, and
then switches to thinking <EM>left</EM>.
(Note that these rules are given to avoid the n of tossing the ball to
oneself.)

<P>
No matter what the initial pattern of left and right thinking is and who
first gets tossed the ball,
everyone will get tossed the ball eventually! In this problem, you will
figure out how long it takes.

<P>
You'll be given the initial directions of n classmates (numbered clockwise),
and the classmate to whom
classmate 1 initially tosses the ball. (Classmate 1 will always have the
ball initially.)

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
There will be multiple problem instances. Each problem instance will be of the form

<P>

<P>
<BR>

<!-- MATH
 $n\ k\ t_1\ t_2\ t_3 \dots t_n$
 -->
<SPAN CLASS="MATH"><I>n</I>&nbsp;<I>k</I>&nbsp;<I>t</I><SUB>1</SUB>&nbsp;<I>t</I><SUB>2</SUB>&nbsp;<I>t</I><SUB>3</SUB>...<I>t</I><SUB>n</SUB></SPAN>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $2 \le  n \le  30$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2581img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2581img1.gif
 ALT="$ \le$">30</SPAN>) is the number of classmates, numbered 1 through <SPAN CLASS="MATH"><I>n</I></SPAN>
clockwise around the circle,
<SPAN CLASS="MATH"><I>k</I></SPAN> (<SPAN CLASS="MATH">&gt; 1</SPAN>) is the classmate to whom classmate 1 initially tosses the ball, and
<SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN> (<!-- MATH
 $i = 1, 2, \dots , n$
 -->
<SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>n</I></SPAN>) are each
either `<TT>L</TT>' or `<TT>R</TT>', indicating the initial direction thought by classmate
<SPAN CLASS="MATH"><I>i</I></SPAN>. (<SPAN CLASS="MATH"><I>n</I> = 0</SPAN> indicates end of input.)

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each problem instance, you should generate one line of output of the form:

<P>

<P>
<BR>

<TT>Classmate <SPAN CLASS="MATH"><I>m</I></SPAN> got the ball last after <SPAN CLASS="MATH"><I>t</I></SPAN> tosses.</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> are for you to determine. You may assume that <SPAN CLASS="MATH"><I>t</I></SPAN> will be no
larger than 100,000.

<P>

<P>
<BR>

<B>Note</B> that classmate number 1 initially has the ball and tosses it to classmate <SPAN CLASS="MATH"><I>k</I></SPAN>.
Thus, number 1 has
not yet been tossed the ball and so does not switch the direction he is thinking.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 2 L L L L
4 3 R L L R
10 4 R R L R L L R R L R
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Classmate 3 got the ball last after 4 tosses.
Classmate 2 got the ball last after 4 tosses.
Classmate 9 got the ball last after 69 tosses.
</PRE>

<P>

______________________________________________________
2582||||||false||||||
After ruling a large chunk of the Milky Way for millennia, the Cosmic OBsolescent
OLigarchy is finally
breaking up into a collection of independent monarchies. COBOL is a very
organized empire and takes
the shape of a gigantic cube with dimensions <SPAN CLASS="MATH"><I>n</I></SPAN> by <SPAN CLASS="MATH"><I>m</I></SPAN> by <SPAN CLASS="MATH"><I>k</I></SPAN> parsecs.
(COBOL is also very secretive, so
only a few know the exact values of <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN>.) To facilitate the control
of the empire it is partitioned
into <SPAN CLASS="MATH"><I>nmk</I></SPAN> smaller dominions, each 1 cubic parsec in size. These dominions are
numbered as follows:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2582.eps}$
 -->
<IMG
 WIDTH="569" HEIGHT="570" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2582.gif
 ALT="\epsfbox{p2582.eps}">
</DIV>

<P>
Each independent monarchy is a connected collection of one or more dominions
(a dominion is connected
to another if they share a face) and over a period of several imperial months,
one monarchy per month
will secede from the empire. Each secession begins at the first day of the month.
One concern of
COBOL is that during the breakup, various parts of the remaining empire may become
disconnected
from one another, which could hamper the administration of what's left of the empire.
Your job is to
determine the number of months of the breakup during which the empire is disconnected.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of multiple problem instances. The first line will contain a positive
integer indicating
the number of problem instances to follow. The first line of each problem instance
will contain four
integers: <!-- MATH
 $n\ m\ k\ l$
 -->
<SPAN CLASS="MATH"><I>n</I>&nbsp;<I>m</I>&nbsp;<I>k</I>&nbsp;<I>l</I></SPAN>, where <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> are as described above,
with <!-- MATH
 $1 \le  n, m, k \le 30$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2582.gif
 ALT="$ \le$"><I>n</I>, <I>m</I>, <I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2582.gif
 ALT="$ \le$">30</SPAN>, and <SPAN CLASS="MATH"><I>l</I></SPAN> is the number
of independent monarchies which the empire is being divided into. Following this
will be <SPAN CLASS="MATH"><I>l</I></SPAN> lines defining
the monarchies. Each will have the form <!-- MATH
 $p\ d_1\ d_2\ d_3 \dots d_p$
 -->
<SPAN CLASS="MATH"><I>p</I>&nbsp;<I>d</I><SUB>1</SUB>&nbsp;<I>d</I><SUB>2</SUB>&nbsp;<I>d</I><SUB>3</SUB>...<I>d</I><SUB>p</SUB></SPAN>, where <SPAN CLASS="MATH"><I>p</I></SPAN> is
the number of dominions making
up the monarchy (<!-- MATH
 $1 \le  p \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2582.gif
 ALT="$ \le$"><I>p</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2582.gif
 ALT="$ \le$">20</SPAN>), and <!-- MATH
 $d_1,\dots , d_p$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>,..., <I>d</I><SUB>p</SUB></SPAN> are the dominions.
The monarchies are listed in the order
in which they will secede from the empire.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output for each problem instance should consist of a single integer on a line,
indicating the number of
months which the empire was disconnected.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2 2 3 9
2 4 5
3 6 8 10
1 7
1 2
1 11
1 9
1 1
1 0
1 3
2 2 3 3
4 0 1 2 3
4 4 5 6 7
4 8 9 10 11
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
4
0
</PRE>

<P>

______________________________________________________
2583||||||false||||||
Given a string of digits, insert commas to create a sequence of strictly increasing
numbers so as to
minimize the magnitude of the last number. For this problem, leading zeros are
allowed in front of a number.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of multiple test cases. Each case will consist of one line,
containing a string of digits
of maximum length 80. A line consisting of a single `<TT>0</TT>' terminates input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each instance, output the comma separated strictly increasing sequence,
with no spaces between
commas or numbers. If there are several such sequences, pick the one which has
the largest first value;
if there's a tie, the largest second number, etc.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3456
3546
3526
0001
100000101
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3,4,5,6
35,46
3,5,26
0001
100,000101
</PRE>

<P>

______________________________________________________
2584||||||false||||||
We are all familiar with pre-order, in-order and post-order traversals of binary
trees. A common problem
in data structure classes is to find the pre-order traversal of a binary tree
when given the in-order and
post-order traversals. Alternatively, you can find the post-order traversal when
given the in-order and
pre-order. However, in general you cannot determine the in-order traversal of
a tree when given its
pre-order and post-order traversals. Consider the four binary trees below:

<P>
<PRE>
                    a         a       a         a
                   /         /         \         \
                  b         b           b         b
                 /           \         /           \
                c             c       c             c
</PRE>

<P>
All of these trees have the same pre-order and post-order traversals. This phenomenon
is not restricted
to binary trees, but holds for general m-ary trees as well.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of multiple problem instances. Each instance will consist of a
line of the form

<P>

<P>
<BR>

<!-- MATH
 $m\ s_1\ s_2$
 -->
<SPAN CLASS="MATH"><I>m</I>&nbsp;<I>s</I><SUB>1</SUB>&nbsp;<I>s</I><SUB>2</SUB></SPAN>

<P>

<P>
<BR>
indicating that the trees are <SPAN CLASS="MATH"><I>m</I></SPAN>-ary trees, <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> is the pre-order traversal and
<SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> is the post-order traversal.
All traversal strings will consist of lowercase alphabetic characters. For all input
instances, <!-- MATH
 $1 \le  m \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2584img1.gif
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2584img1.gif
 ALT="$ \le$">20</SPAN>
and the length of <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> will be between 1 and 26 inclusive. If the length
of <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> is <SPAN CLASS="MATH"><I>k</I></SPAN> (which is the
same as the length of <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>, of course), the first <SPAN CLASS="MATH"><I>k</I></SPAN> letters of the alphabet will
be used in the strings. An input line of `<TT>0</TT>' will terminate the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each problem instance, you should output one line containing the number of
possible trees which
would result in the pre-order and post-order traversals for the instance. All output
values will be within
the range of a 32-bit signed integer. For each problem instance, you are
guaranteed that there is at least one tree with the given pre-order and post-order traversals.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2 abc cba
2 abc bca
10 abc bca
13 abejkcfghid jkebfghicda
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
4
1
45
207352860
</PRE>

<P>

______________________________________________________
2585||||||false||||||
In a knockout tournament there are <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN> players. One loss and a player is out of the
tournament. Winners
then play each other with the new winners advancing until there is only one winner left.
If we number
the players <!-- MATH
 $1, 2, 3, \dots, 2^n$
 -->
<SPAN CLASS="MATH">1, 2, 3,..., 2<SUP>n</SUP></SPAN>, with the first round pairings <SPAN CLASS="MATH">2<I>k</I> - 1</SPAN> vs <SPAN CLASS="MATH">2<I>k</I></SPAN>,
for <!-- MATH
 $k = 1, 2, \dots, 2^{n-1}$
 -->
<SPAN CLASS="MATH"><I>k</I> = 1, 2,..., 2<SUP>n - 1</SUP></SPAN>, then we could
give the results of the tournament in a complete binary tree. The winners are
indicated in the interior
nodes of the tree. Below is an example of a tournament with <SPAN CLASS="MATH"><I>n</I> = 3</SPAN>.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2585.eps}$
 -->
<IMG
 WIDTH="578" HEIGHT="278" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2585.gif
 ALT="\epsfbox{p2585.eps}">
</DIV>

<P>
After the tournament, some reporters were arguing about the relative ranking of the
players, as determined by the tournament results. It's assumed that if player A beats
player B who in turn beats player
C, that player A will also beat player C; that is, winning is transitive. Now there
is no doubt who the
best player is. The question is what is the highest ranking a player can reasonably
claim as a result of
the tournament and what is the worst ranking a player can have, as a result of the
tournament? For
example, in the above tournament player 2, having lost to the eventual winner, could
claim to be the
2nd best player in the field, but could well be the worst (ranked 8th). Player 5
could claim to be as high
as 3rd (having lost to someone who could be 2nd) but no worse than 7th (having beaten
one player in he 1st round).

<P>
You are to determine the highest and lowest possible rankings of a set of
players in the field, given the results of the tournament.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
There will be multiple input instances. The input for each instance consists of
three lines. The first
line will contain a positive integer <SPAN CLASS="MATH"><I>n</I> &lt; 8</SPAN>, indicating there are <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN> players in
the tournament, numbered
1 through <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN>, paired in the manner indicated above. A value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> indicates end
of input. The next
line will contain the results of each round of the tournament (listed left-to-right)
starting with the 1st
round. For example, the tournament above would be given by

<P>

<P>
<BR>

<TT>1 3 5 8 1 8 1</TT>

<P>

<P>
<BR>
The final line of input for each instance will be a positive integer <SPAN CLASS="MATH"><I>m</I></SPAN> followed
by integers <!-- MATH
 $k_1, \dots, k_m$
 -->
<SPAN CLASS="MATH"><I>k</I><SUB>1</SUB>,..., <I>k</I><SUB>m</SUB></SPAN>, where each <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> is a player in the field.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN>, issue one line of output of the form:

<P>

<P>
<BR>

<TT>Player <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> can be ranked as high as <SPAN CLASS="MATH"><I>h</I></SPAN> or as low as <SPAN CLASS="MATH"><I>l</I></SPAN>.</TT>

<P>

<P>
<BR>
where you supply the appropriate numbers. These lines should appear in the same
order as the <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> did
in the input. Output for problem instances should be separated with a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
1 3 5 8 1 8 1
2 2 5
4
2 3 6 7 9 11 14 15 3 6 9 15 6 9 6
4 1 15 7 6
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Player 2 can be ranked as high as 2 or as low as 8.
Player 5 can be ranked as high as 3 or as low as 7.

Player 1 can be ranked as high as 4 or as low as 16.
Player 15 can be ranked as high as 3 or as low as 13.
Player 7 can be ranked as high as 2 or as low as 15.
Player 6 can be ranked as high as 1 or as low as 1.
</PRE>

<P>

______________________________________________________
2586||||||false||||||
<P>
The designers of the new NentindoBoxStation game system want to provide interactive
input from many
different sources. Using a special sensor-lined ``electronic cocoon" users should be
able to do things such
as control simulated laser cannons by moving their eyebrows, accelerate/decelerate
by wiggling their
ears, steer in three-dimensional space by rotating their ankles ... the possibilities
are endless.

<P>
The connections between the sensors in the cocoon and the simulated actions in
the computer are to
be made using a special square plug with <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN> pins (the value of <SPAN CLASS="MATH"><I>n</I></SPAN> has not yet
been determined). Each
pin can carry the output from one sensor, although for some applications not all
pins will be active.
The plug fits into a square socket containing <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN> holes that is attached to the
various game inputs;
again, for some games, not all input holes will be used. The socket can be
flipped over and rotated to
achieve different matchings between sensor pins and game inputs. Pins and socket
holes are numbered
consecutively in row major order (as shown below for the value <SPAN CLASS="MATH"><I>n</I> = 4</SPAN>).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2586.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2586.gif
 ALT="\epsfbox{p2586.eps}">
</DIV>

<P>
Clearly pin 1 can be connected only to holes 1', 4', 13', or 16' (depending on
how the plug is rotated
with respect to the socket). Pin 2 can be connected only to holes
2', 3', 5', 8', 9', 12', 14', or 15' (if we
consider all rotations and connections in both the back and front of the plug).

<P>
Most games require extra wiring to achieve connections because there is no way
to match pins directly
to their corresponding sockets (for instance, connecting pin 1 to hole 11' in the
figure). This wiring
will be achieved with a special game-specific ``wiring block" that will be placed
between the plug and
the socket. The lengths of these wires will depend on the orientation of the
socket with respect to the
plug. Given a list of connections that must be made, you are going to help the
designers determine the
<!-- MATH
 $minimum average wire length$
 -->
<SPAN CLASS="MATH"><I>minimumaveragewirelength</I></SPAN> that is needed for the connections in the wiring block.
Wires always run
parallel to the grid lines, so the amount of wire between a pin in the plug and a
hole in the socket is 1
plus the length of a shortest grid path between the nodes (the extra ``1" is due
to the thickness of the
wiring block itself). Thus, one unit of wire is the minimum required
(when a pin is positioned directly
over the hole it is supposed to connect to).

<P>
For instance, if we are given the set (1,3'), (5,7'), (2,6') for the plug and socket
above, the average
distance for this set of pairs is 2.6667 if we put the plug into the front of the
socket without rotating
the socket, but is only 2.3333 if we rotate the socket 180 degrees and then
flip it horizontally, placing the plug in the back of the socket.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of a set of scenarios. Each scenario consists of a positive
integer <SPAN CLASS="MATH"><I>n</I></SPAN>, the side length of
the plug and socket (less than or equal to 100) on a line by itself, followed by a
positive integer <SPAN CLASS="MATH"><I>m</I></SPAN> (less
than or equal to <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN>) on a line by itself, followed by <SPAN CLASS="MATH"><I>m</I></SPAN> lines, each containing
a pair of positive integers
in the range <!-- MATH
 $1, \dots, n^2$
 -->
<SPAN CLASS="MATH">1,..., <I>n</I><SUP>2</SUP></SPAN>. You may assume that no two pairs will have either a
common first element or
a common second element. The first integer represents a pin position in the plug,
the second is a hole
position in the socket. The final scenario is followed by `<TT>0</TT>' on a line by itself.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each scenario, output the scenario number (starting with 1), followed by the
smallest average distance achievable between the <SPAN CLASS="MATH"><I>m</I></SPAN> pin/socket pairs after rotations
and reflections are considered (assuming
an appropriate routing box is used), in a line of the form:

<P>

<P>
<BR>

<TT>Scenario <SPAN CLASS="MATH"><I>n</I></SPAN>: smallest average = <SPAN CLASS="MATH"><I>avg</I></SPAN></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>avg</I></SPAN> is the average is rounded, and displayed, to four decimal places.
Separate lines of output by a single blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
3
1 3
5 7
2 6
2
3
1 4
2 2
4 1
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Scenario 1: smallest average = 2.3333

Scenario 2: smallest average = 1.0000
</PRE>

<P>

______________________________________________________
2587||||||false||||||
In the game show ``The Price is Right", a number of players (typically 4) compete
to get on stage by
guessing the price of an item. The winner is the person whose guess is the closest
one not exceeding the
actual price. Because of the popularity of the one-person game show
``Who Wants to be a Millionaire",
the American Contest Management (ACM) would like to introduce a one-person version
of the ``The Price is Right". In this version, each contestant is allowed
<SPAN CLASS="MATH"><I>G</I></SPAN> (<!-- MATH
 $1 \le  G \le  30$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2587img1.gif
 ALT="$ \le$"><I>G</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2587img1.gif
 ALT="$ \le$">30</SPAN>) guesses and <SPAN CLASS="MATH"><I>L</I></SPAN> (<!-- MATH
 $0 \le  L  \le 30$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2587img1.gif
 ALT="$ \le$"><I>L</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2587img1.gif
 ALT="$ \le$">30</SPAN>)
lifelines. The contestant makes a number of guesses for the actual price. After each
guess, the contestant
is told whether it is correct, too low, or too high. If the guess is correct, the
contestant wins. Otherwise,
he uses up a guess. Additionally, if his guess is too high, a lifeline is also lost.
The contestant loses
when all his guesses are used up or if his guess is too high and he has no lifelines
left. All prices are positive integers.

<P>
It turns out that for a particular pair of values for <SPAN CLASS="MATH"><I>G</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN>, it is possible
to obtain a guessing strategy
such that if the price is between 1 and <SPAN CLASS="MATH"><I>N</I></SPAN> (inclusive) for some <SPAN CLASS="MATH"><I>N</I></SPAN>, then the
player can guarantee a win.
The ACM does not want every contestant to win, so it must ensure that the actual
price exceeds <SPAN CLASS="MATH"><I>N</I></SPAN>.
At the same time, it does not want the game to be too difficult or there will
not be enough winners to
attract audience. Thus, it wishes to adjust the values of <SPAN CLASS="MATH"><I>G</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN> depending on
the actual price. To
help them decide the correct values of <SPAN CLASS="MATH"><I>G</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN>, the ACM has asked you to solve
the following problem.
Given <SPAN CLASS="MATH"><I>G</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN>, what is the largest value of <SPAN CLASS="MATH"><I>N</I></SPAN> such that there is a strategy to
win as long as the price is between 1 and <SPAN CLASS="MATH"><I>N</I></SPAN> (inclusive)?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a number of cases. Each case is specified by one line containing
two integers <SPAN CLASS="MATH"><I>G</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN>, separated by one space. The end of input is specified by a
line in which <SPAN CLASS="MATH"><I>G</I> = <I>L</I> = 0</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, print a line of the form:

<P>

<P>
<BR>

<TT>Case <SPAN CLASS="MATH"><I>c</I></SPAN>: <SPAN CLASS="MATH"><I>N</I></SPAN></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>c</I></SPAN> is the case number (starting from 1) and <SPAN CLASS="MATH"><I>N</I></SPAN> is the number computed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 0
3 1
10 5
7 7
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1: 3
Case 2: 6
Case 3: 847
Case 4: 127
</PRE>

<P>

______________________________________________________
2588||||||false||||||
The International Betting Machine company has just issued a new type of slot machine.
The machine
display consists of a set of identical circles placed in a triangular shape. An
example with four rows is
shown below. When the player pulls the lever, the machine places a random letter
in the center of each
circle. The machine pays off whenever any set of identical letters form the vertices
of an equilateral
triangle. In the example below, the letters `<TT>a</TT>' and `<TT>c</TT>' satisfy this condition.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2588.eps}$
 -->
<IMG
 WIDTH="256" HEIGHT="236" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2588.gif
 ALT="\epsfbox{p2588.eps}">
</DIV>

<P>
In order to prevent too many payoffs, the electronics in the machine ensures that no
more than 3 of any
letter will appear in any display configuration.

<P>
IBM is manufacturing several models of this machine, with varying number of rows in
the display, and
they are having trouble writing code to identify winning configurations.
Your job is to write that code.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of multiple problem instances. Each instance will start with an
integer <SPAN CLASS="MATH"><I>n</I></SPAN> indicating
the number of rows in the display. The next line will contain <!-- MATH
 $n(n + 1)/2$
 -->
<SPAN CLASS="MATH"><I>n</I>(<I>n</I> + 1)/2</SPAN> letters of
the alphabet (all
lowercase) which are to be stored in the display row-wise, starting from the top.
For example, the display above would be specified as

<P>
<PRE>
4
abccddadca
</PRE>

<P>
The value of <SPAN CLASS="MATH"><I>n</I></SPAN> will be between 1 and 12, inclusive. A line with a single `<TT>0</TT>'
will terminate input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each problem instance, output all letters which form equilateral triangles
on a single line, in alphabetical order. If no such letters exist,
output `<TT>LOOOOOOOOSER!</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
abccddadca
6
azdefccrhijrrmznzocpq
2
abc
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
ac
crz
LOOOOOOOOSER!
</PRE>

<P>

______________________________________________________
2589||||||false||||||
<P>
In the game of ``twenty questions"  I think of an item (like a
fish) from a set of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> items, and you get to ask me at most twenty
questions that can only be answered ``yes" or ``no" to identify the item.  For example, you might ask ``Is it
living?"  If I answer ``yes", then you might ask, ``Does it have fur?"  If I
answer ``no", then you might then ask, ``Does it have fins?"  This continues until you either guess the
item (in which case you win), or youve asked twenty questions without identifying
the item (in which case I win).

<P>
With just 20 questions you
could identify any one of 524,288 items, assuming you can distinguish among
them by asking 19 ``yes/no" questions and then with your 20<SPAN CLASS="MATH"><SUP>th</SUP></SPAN>
<tex2html_verbatim_mark>
question ask, ``Is it X?"  Of course it
might take fewer than 20 questions if you have a good idea about the identity
of the item, but in this problem well assume all the questions are used.

<P>
Suppose you could ask
questions that could be answered with more than just a ``yes" or ``no".  For example, suppose you could ask, ``Does it
weight less than, equal to, or greater than 10 pounds?"  This question has three possible
answers.  Then how many questions would you need to ask in order to distinguish among <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> items?

<P>
In this problem you will
be told how many different answers can be given to each of your questions, and
the number of items in the set of possible choices for the item.  All you need to do is determine the maximum
number of questions that must be asked to identify the item.  This assumes that your questions are chosen
in such a way as to divide the remaining candidates for the item into suitably
sized groups.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple cases to consider.  For each case there will be two integers in the input.  The
first integer, <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>,  is the number of possible answers to each question (no larger than 10).  
The second integer, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, is the number
of items in the set of possible choices (no larger than 2,147,483,647).  A pair of zeroes will follow the last case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case,
display a single line that looks like this:

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <TT>items,</TT> <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> <TT>answers per question,</TT> <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <TT>questions</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> are the values from the input, and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> is the maximum number of questions required.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 524288
3 524288
4 524288
3 9
10 1000
0 0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
524288 items, 2 answers per question, 20 questions
524288 items, 3 answers per question, 13 questions
524288 items, 4 answers per question, 11 questions
9 items, 3 answers per question, 3 questions
1000 items, 10 answers per question, 4 questions
</PRE> 

<P>

______________________________________________________
2590||||||false||||||
<P>Most modern computers use one or more levels of cache memory between the processor and the main memory to minimize the time the processor has to wait for information from main memory. Each cache level is characterized as having some number of memory blocks, each of which has a fixed size (measured in bytes, and always a power of 2); the total size of a cache level is just the number of blocks in that cache level times the size of a block. The address of the lowest-numbered byte in each block is always a integral multiple of the block size, and the bytes in a block have contiguous addresses. For example, with a block size of 16, the bytes in a block might possibly be numbered 16 though 31, or 32 through 47, or 160 through 175.<P><DIV ALIGN="CENTER"><IMG WIDTH="217" HEIGHT="358" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2590.jpg ALT="\epsfbox{p2590.eps}"> <tex2html_verbatim_mark></DIV><P>The processor in this problem only reads single bytes, and it does so by issuing a request that specifies the address of the desired byte. If the byte is in the cache closest to the processor (known as the ``level 1 cache"), then that cache delivers the byte to the processor; the length of time required for this operation is called the ``level 1 access time". If the byte desired by the processor is not in the level 1 cache, but is in the level 2 cache (which is just below the level 1 cache), then the (level 1 size) block containing that byte is delivered from the level 2 cache to the level 1 cache, and then the desired byte is delivered from the level 1 cache to the processor. The total time required in this case is the time required by the level 2 cache to deliver the block to the level 1 cache (naturally called the ``level 2 access time"), plus the level 1 access time for the single byte. This pattern continues through all lower cache levels (if present) to the main memory, if necessary. Thus, if a byte requested by the processor isnt in any of the cache levels, the total access time required is the sum of the access times of each cache level plus that of the main memory. The figure to the left illustrates the flow of information in a system with two cache levels.<P>Each cache is initially empty. When a block is retrieved from a lower-level cache or main memory, it is placed in an empty block in the cache. When no empty blocks are available, and a new block is requested, it will replace an existing block. The particular block it replaces is that block that has been least recently used.<P>In this problem you will be given the number of caches in a system (between 1 and 3), the block size and total size of each cache, and the access time for each cache and the main memory. Times will be in integral numbers of nanoseconds (nsec). You will then be given a list of the addresses of bytes requested by the processor, and are to compute the time the processor must wait for all of the bytes to be delivered.<P>As a simple (but unreaslistic) example, suppose the system has two caches. The level 1 cache has 16 byte blocks, a total size of 32 bytes (that is, 2 blocks), and an access time of 4 nanoseconds. The level 2 cache has 32 byte blocks, a total size of 64 bytes (2 blocks), and an access time of 10 nanoseconds. Main memory has an access time of 50 nanoseconds. Suppose the processor requests, in order, bytes from locations 10, 20, 30, 40, and 50. (Cache blocks are numbered here for reference.)<P><UL><LI>Since both levels are initially empty, 32 bytes from main memory locations 0 through 31 will be placed in level 2 block 0 (50 nsec), then 16 bytes from that block (addresses 0 through 15) will be placed in level 1 block 0 (10 nsec). Finally, the byte with address 10 will be delivered to the processor (4 nsec). Total time to access the first byte is 64 nsec. </LI><LI>The byte with address 20 isnt found in level 1, but is found in level 2 in block 0. The 16 bytes containing address 20 (16 to 31) are placed in level 1 block 1 (10 nsec), and the byte with address 20 is delivered to the processor (4 nsec), for a total time of 14 nsec. Note that both blocks in the level 1 cache are now in used. </LI><LI>Next, the byte with address 30 is sought. Since it is found in the level 1 cache, that byte is simply delivered to the processor (4 nsec). </LI><LI>Now address 40 is issued by the processor. The byte at this location is not in either cache level, so the corresponding 32 byte block (addresses 32 to 63) is delivered to the level 2 cache and placed there in block 1 (which was previously unused), taking 50 nsec. Then the 16 bytes containing address 40 (32 to 47) are delivered to the level 1 cache (10 nsec more). These 16 bytes are placed in block 0 of the level 1 cache, since it is the least recently used (block 1 of the level 1 cache was used to satisfy the processors request for address 30). Finally, the byte is delivered to the processor, for a total time of 64 nsec. </LI><LI>Finally address 50 is requested. Found in the level 2 cache in block 1, the appropriate 16 bytes (48 to 63) are delivered to the level 1 cache (10 nsec). These bytes are placed in block 1 of the level 1 cache, since block 0 was just used. The selected byte is delivered to the processor (4 nsec), for a total time requirement of 14 nsec. </LI></UL><P>The total time for the bytes at this sequence of addresses to be delivered to the processor is 64 + 14 + 4 + 64 + 14 = 160 nsec.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple input cases. For each case, the input begins with an integer that specifies the number of cache levels (between 1 and 3). For each cache level, starting with level 1, the input then contains integers giving the block size, total size, and access time for the cache level. Each cache level has mo more than 100 blocks, and a block size that is no larger than the next (lower level) cache. Next there appears an integer giving the access time for the main memory. Finally, there appears an integer specifying the number of addresses requested by the processor (no more than 1,000) followed by those addresses in the order they were requested; each address is in the range 0 to 65535. A single `<TT>0</TT>' follows the input for the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display a single line containing the case number <SPAN CLASS="MATH">(1, 2,...)</SPAN> <tex2html_verbatim_mark> and the total time required for all of the bytes requested by the processor to be delivered.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
  16 32 4
  32 64 10
  50
  5 10 20 30 40 50

2
  8 48 4
  32 64 10
  50
  5 10 20 30 40 50

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: total time = 160 nanoseconds
Case 2: total time = 170 nanoseconds
</PRE><P>
______________________________________________________
2591||||||false||||||
<P>Given two binary search trees, A and B, with nodes identified by (that is, having keys equal to) positive, non-zero integers, and the use of commands ``delete <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>" and ``add <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>" (defined below), what is the smallest number of commands that can be used to transform tree A into tree B?<P>Recall that in a binary search tree, the keys of all nodes in the left subtree of a node with key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> must be less than <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. Similarly, the keys of all nodes in the right subtree of a node with key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> must be greater than <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. There are no duplicate nodes.<P>The ``delete <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>" command will delete the tree (or subtree) with its root at the node with the key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. Deleting the root of the entire tree leaves an empty tree. The ``add <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>" command will add a new node identified by the integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. This node will naturally be a leaf node.<P>Since we seek to transform tree A into tree B, it follows that commands will be applied only to tree A; tree B is ``read only".<P>It is easy to see that it should never require more than <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> <tex2html_verbatim_mark> commands to achieve the transformation of A into B, since deletion of the root node of tree A followed by the addition of one node for each of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> nodes in B (in the proper order) will achieve the desired goal. Equally easy to determine is the minimum number of commands required: if A and B are identical, then zero commands are required.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple input cases. For each case, the input contains the description of tree A followed by the description of tree B. Each tree description consists of an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that specifies the number of nodes in the tree, following by the keys of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> nodes in an order such that <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> ``add" commands would create the tree. The last case is followed by the integer `<TT>-1</TT>'. No node will have a key larger than 10<SPAN CLASS="MATH"><SUP>9</SUP></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> will be no larger than 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display a single line containing the input case number <SPAN CLASS="MATH">(1, 2,...)</SPAN> <tex2html_verbatim_mark> and the number of commands required to transform tree A into tree B, formatted as shown in the examples below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 5 2 7 4 6 5 3 7 1 4 9
0 0
1 100 0
0 1 100
3 100 49 37 2 200 152
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 5 commands.
Case 2: 0 commands.
Case 3: 1 command.
Case 4: 1 command.
Case 5: 3 commands.
</PRE><P>
______________________________________________________
2592||||||false||||||
<P>A fence builder has been given a strange task. Provided with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (between 3 and 100) pieces of straight fencing, each having an arbitrary length, the builder is to enclose as large a region as possible. The customer wants to know the area of the region that can be enclosed by the fence before it is built. There is only one constraint on the construction: each piece of fencing is connected only at its endpoints to exactly two other different pieces of fencing. That is, after completion, the fence will look like a (possibly irregular) polygon with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> sides. The customer has guaranteed the builder that the fencing provided will allow for a region with a non-zero area to be enclosed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases in the input. For each case, the input begins with the number of pieces of fencing (an integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>). There then follow <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> positive, non-zero real numbers giving the lengths of the fence pieces. A single integer zero follows the last case in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (starting with 1) and the maximum area that can be enclosed by the provided fencing materials. Show three fractional digits in each answer. Use the format shown below in displaying the results.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2.0 2.0 2.0
4 1.0 1.0 1.0 1.0
4 5.0 5.0 3.0 11.0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: maximum area = 1.732
Case 2: maximum area = 1.000
Case 3: maximum area = 21.000
</PRE><P>
______________________________________________________
2593||||||false||||||
<P>Life has been found on Phobos, one of the satellites of Mars! Unfortunately, the life forms there arent quite as advanced as those on Earth, and they dont have modern communications (at least by Earth standards). The Advanced Communication Management Company (ACM) has decided to build a central office and connect the Phobosians homes for communication (telephone, television, Internet, and so forth). They naturally want to minimize their capital outlay in this effort, and they need to decide how to lay fiber optic cable (essentially on the surface) so the smallest amount is used. Since ACM uses digital broadband technology, it is only necessary that there be a cable path that connects every subscriber and the central office. That is, there does not necessarily need to be a separate cable from the central office to each subscribers home.<P><DIV ALIGN="CENTER"><IMG WIDTH="535" HEIGHT="358" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2593.jpg ALT="\epsfbox{p2593.eps}"> <tex2html_verbatim_mark></DIV><P>We know the precise location of each Phobosians home and the planned ACM central office on the surface. These are given using longitude and latitude. Longitude is measured from an arbitrary meridian on the surface of Phobos, and has values in the range -180 degrees to +180 degrees. Latitude is measured from the equator, and has values in the range -90 degrees to +90 degrees. For planning purposes we assume Phobos is perfectly spherical, exactly 16.7 miles in diameter. The figure to the left illustrates one possible location (+80<SPAN CLASS="MATH"><SUP><TT>o</TT></SUP></SPAN> <tex2html_verbatim_mark> longitude, +30<SPAN CLASS="MATH"><SUP><TT>o</TT></SUP></SPAN> <tex2html_verbatim_mark> latitude).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be one or more sets of input data. Each set will contain, in order, an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> no larger than 100, but at least 2, followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> pairs of real numbers, each pair giving the unique longitude and latitude, in degrees, of a Phobosians home or the central office. A single integer zero will follow the last data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input data set print a single line containing the data set number <SPAN CLASS="MATH">(1, 2,...)</SPAN> <tex2html_verbatim_mark> and the number of miles of cable required to connect all the Phobosians homes and the central office; show two fractional digits in the distance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
0 0    0 90    0 -90

3
0 0    0 90    90 0

3
0 0    90 0    45 0

6
-10 10   -10 -10   0 0   90 0   80 20 100 -10

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 26.23 miles
Case 2: 26.23 miles
Case 3: 13.12 miles
Case 4: 21.16 miles
</PRE><P>
______________________________________________________
2594||||||false||||||
<P>A psychologist tests <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> different individuals. The score for each individual is a pair of real numbers, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, that the psychologist treats as points in a plane. The psychologist then wants to separate the individuals into at least 2 groups, with at least 2 individuals in each group, based on the proximity of their scores. The decision is made to use the Euclidian distance between two scores as a measure of their proximity. That is, for two scores <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>, their proximity is defined by the value of the expression<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="194" HEIGHT="51" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2594img1.png ALT="$\displaystyle \sqrt{{(x_{1}-x_{2})^{2}+(y_{1}-y_{2})^{2}}}$">.</DIV><P><tex2html_verbatim_mark></P><P>To place the individuals in groups, the psychologist decides to use the following steps. (1) The two individuals whose scores are closest together are placed in group 1; call them A and B. (2) The next two individuals (not in group 1) with the closest scores are placed in group 2; call them C and D. (Clearly at least four individuals must be tested.) (3) The next ungrouped individual, called E, to be included in a group is the one closest to any individual already in a group or any other ungrouped individual. If E is closer to A or B than to C, D, or any other ungrouped individual, then E joins group 1. Likewise, if E is closer to C or D than to A, B, or any other ungrouped individual, then E joins group 2. Finally, if E is closer to another ungrouped individual, say F, than A, B, C, or D, then a new group is formed from E and F. If the shortest distance to an existing group is within 0.001 of the shortest distance to an ungrouped individual, or doesnt uniquely identify the group in which E should be placed, then E is placed in the existing group created earliest that has a member closest to E. This step (3) is repeated for all remaining ungrouped individuals.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases. For each case there appears an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> specifying the number of individuals tested; <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> will be at least 4, but no larger than 100. There will then follow <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> pairs of real <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> values, one for each individual. The first pair is for individual 1, the second pair is for individual 2, and so forth.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, first display the case number (theyre numbered sequentially starting with 1) on a line by itself. Then display the identity of the individuals in each group, one line per group. Use the format shown in the samples below. Specifically, output lines must be no longer than 79 characters, indentation (as shown in the samples) is required, and commas are required between the individual identity numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
  0.0 0.0 0.0 3.0 4.0 0.0 3.0 5.0
6
  0.0 0.0 0.0 3.0 4.0 0.0 3.0 5.0 2.0 6.0 3.0 1.0
25
  1 0 1 1 100 100 100 101 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9
  1 10 1 11 1 12 1 13 1 14 1 15 1 16 1 17 1 18 1 19 1 20 1 21 1 22
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
  Group 1: 1, 2
  Group 2: 3, 4
Case 2:
  Group 1: 3, 6
  Group 2: 4, 5
  Group 3: 1, 2
Case 3:
  Group 1: 1, 2, 5, 6, 7, 8, 9, 10, 11, 12,13, 14, 15, 16, 17, 18, 19, 20,
           21, 22, 23, 24, 25
  Group 2: 3, 4
</PRE><P>
______________________________________________________
2595||||||false||||||
<P>Integers in bases larger than 10 are usually represented using letters to represent the digits which have values larger than 9. For example, hexadecimal (base 16) integers are written using the digits 0 through 9 (to represent themselves) and the letters A through F to represent the digits with values 10 through 15, respectively. In a similar manner, the remaining letters in the alphabet could be used to represent the digits with values 16 through 35. This allows for easy display of values in any base from 2 through 36.<P>In rummaging through a collection of files on an old reel of magnetic tape, a computer archeologist came across a file containing a sequence of what appeared to be arithmetic formulas. The expressions were of the form<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>number</I> - 1&nbsp;<I>operator</I>&nbsp;<I>number</I> - 2&nbsp; = &nbsp;<I>number</I> - 3</DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>number</I> - 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>number</I> - 2</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>number</I> - 3</SPAN> <tex2html_verbatim_mark> are formed from the digits `<TT>0</TT>-<TT>9</TT>' and the letters `<TT>A</TT>-<TT>Z</TT>', and <EM>operator</EM> is one of `<TT>+</TT>' or `<TT>-</TT>' presumably meaning addition or subtraction. The archeologist would like to know if these expressions really do represent valid expressions, and if so, in what base the numbers were written. The assumption is made that the ``digits" `<TT>A</TT>' through `<TT>Z</TT>' (upper case only) do represent digits with values 10 through 35, none of the numbers are negative, and none of the numbers contain more than 50 digits.<P>You volunteer to help. At the outset, you know that examining a single number is insufficient to determine its base. For example, the number 77 could be written using any base greater than 7. If, however, you should see the expression<P>77 + 22 = 99<P>then you can easily tell than 10 is the smallest base that could have been used. On the other hand, if the expression was<P>77 + 22 = 121<P>then you can determine that the numbers were written in base 8. Your problem is to write a program that will assist the archeologist in determining the smallest base used to represent the numbers in each expression, and to also identify those expressions that couldnt have been expressed using a number base in the range 2 to 36.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases. For each case there will be a single line containing an expression. Blanks may appear before or after any of the numbers, the operator, or the equal sign, but they are not required. An empty line (that is, one containing only zero or more blanks) will follow the expression for the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (starting with 1) and the smallest base that could have been used if the expression is correct. If the expression could not be correct using any of the possible bases, then display the case number and the statement `<TT>expression is invalid.</TT>'<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
77 + 22 = 99
115 + 26 = 143
2K3 - 1A1 = 1J2
2N + M = 3I
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: minimum base is 10
Case 2: minimum base is 8
Case 3: expression is invalid.
Case 4: minimum base is 27
</PRE><P>
______________________________________________________
2596||||||false||||||
<P>A deterministic finite automaton has a finite set of states, with directed edges leading from one state to another. Each edge is labeled with a symbol. In this problem, we are only concerned about automata (the plural of automaton) that use the binary digits 0 and 1 as symbols. Each edge is thus labeled with 0 or 1. One state is identified as the start state, and one or more states are identified as final states.<P>A finite automaton is usually represented by a graph. For example, consider the finite automaton represented by the graph shown below; the states are shown as circles, and are named 1 and 2 for ease of identification. In this automaton, state 1 is the start state, and state 2 is the final state.<P><DIV ALIGN="CENTER"><IMG WIDTH="243" HEIGHT="140" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2596.jpg ALT="\epsfbox{p2596.eps}"> <tex2html_verbatim_mark></DIV><P>Each automaton in this problem accepts or rejects a string as follows. Beginning in the start state, for each symbol (0 or 1) in the input string (working from left to right in sequence), the automaton follows the one edge labeled with the input symbol from the current state to the next state. After making the transition associated with the last symbol in the input string, if the automaton is in a final state, then the input is accepted. Otherwise (that is, if the automaton is not in a final state), the input is rejected.<P>For the string 0101 and the automaton shown above, we start in state 1 (the start state). Since the first input symbol is 0, the edge labeled 0 from state 1 back to state 1 is followed, leaving us in state 1. The next input symbol, 1, causes a transition to state 2. The next symbol, 0, moves us back to state 1. The last input symbol, 1, causes the last transition, from state 1 to state 2. Since state 2 is a final state, the automaton accepts the string 0101. Note that the string 010 would have been rejected, since the automaton would have been in state 1 (which is not a final state) at the end of the input. This automaton happens to accept all binary strings that end with 1.<P>In this problem you will be given one or more automata and an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. For each of these, you are to find the number of binary strings having each length less than or equal to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that are accepted by the automaton. For example, for <SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark> with the automaton above, the output would specify 0 strings of length 0 (since state 1 is not a final state), 1 string of length 1 (1), 2 strings of length 2 (01 and 11), and 4 strings of length 3 (001, 011, 101, and 111).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple input cases. For each case the input begins with three integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (no larger than 10) specifies the maximum length of the strings that are sought. <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> (no larger than 100) specifies the number of states in the automaton. <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> (no larger than 10) specifies the number of final states. Following these three integers are <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> pairs of integers. Each pair specifies the labels on the edges from the states, in order, starting with state 1. The first integer in each pair specifies the state to which the edge labeled 0 connects; the second integer specifies the state to which the edge labeled 1 connects. Finally, the last <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> integers identify the final states. State 1 will always be the start state. The input for the last case is followed by three zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (they are numbered sequentially, and start with 1). Then display the number of strings of each length (from 0 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>) accepted by the automaton, using a separate line for each length. The output must be identical in format to that shown in the examples below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 1
1 1
1 1
2

3 2 1
1 2
1 2
2

10 7 1
2 2
3 3
4 4
5 5
6 6
7 7
7 7
6

0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
    Length = 0, 0 strings accepted.
    Length = 1, 0 strings accepted.
    Length = 2, 0 strings accepted.
    Length = 3, 0 strings accepted.
Case 2:
    Length = 0, 0 strings accepted.
    Length = 1, 1 string accepted.
    Length = 2, 2 strings accepted.
    Length = 3, 4 strings accepted.
Case 3:
    Length = 0, 0 strings accepted.
    Length = 1, 0 strings accepted.
    Length = 2, 0 strings accepted.
    Length = 3, 0 strings accepted.
    Length = 4, 0 strings accepted.
    Length = 5, 32 strings accepted.
    Length = 6, 0 strings accepted.
    Length = 7, 0 strings accepted.
    Length = 8, 0 strings accepted.
    Length = 9, 0 strings accepted.
    Length = 10, 0 strings accepted.

______________________________________________________
2597||||||false||||||
<P>A polynomial of degree <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> has the following form: <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB><I>x</I><SUP>n</SUP> + <I>a</I><SUB>n-1</SUB><I>x</I><SUP>n-1</SUP> +...+ <I>a</I><SUB>1</SUB><I>x</I> + <I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB>, <I>a</I><SUB>1</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> are numeric constants called the coefficients of the polynomial and <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB><IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2597img1.png ALT="$ \ne$"> 0</SPAN> <tex2html_verbatim_mark>.<P>For example, <SPAN CLASS="MATH">5<I>x</I><SUP>4</SUP> -7<I>x</I><SUP>3</SUP> + 3<I>x</I> + 1</SPAN> <tex2html_verbatim_mark> is a polynomial of degree 4 with integer coefficients.<P>For purposes of this problem, all polynomials will have integer coefficients.<P>You are to create a polynomial package with operations to add, subtract, multiply, evaluate, and find the derivative of a single variable polynomial of degree <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Commands are as follows:<P><DIV ALIGN="CENTER"><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>evaluate <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark></TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>evaluate the polynomial on the next line</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>at the value <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark>.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>add</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>followed by any number of polynomials to be</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>summed, on successive lines.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>subtract</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>followed by <SPAN CLASS="MATH"><I>polynomial</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>polynomial</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> on</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>successive lines. The program will compute</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>polynomial</I><SUB>1</SUB> - <I>polynomial</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>multiply</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>followed by any number of multiplicands on</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>successive lines</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>derivative</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>followed by a line that contains a polynomial</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>last</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>A signal that the previous problem was the last one.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>The program terminates and no additional output is</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>produced.</TD></TR></TABLE></DIV><P>A blank line will always separate successive commands in the input. For the purposes of this problem you may assume that the input to your program will always be valid. No guarantees are given regarding spacing of the polynomial terms. The caret `<code>^</code>' will be used to represent exponentiation within a polynomial. The variable in the polynomial will always be <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and the terms of the polynomial will always be given in decreasing order. If an <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is equal to 1, the coefficient 1 may not be included in the data line (e.g. <code>x^2+x+7</code>). The input to your program will always be lowercase.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output from your program will include the example number followed by a colon and the answer. Spacing is not important. Coefficients that are 1 should not be shown (except in the case <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB> = 1</SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
evaluate 4 
3x^2+5 

add 
2x^3+7x^2+2x 
4x^9+10x^2 
x+2 

subtract 
5x^4 + 3x^2  + 5 
2x^6  -  2  x^2 + 3 

multiply 
2x + 1 
3x^2 + x 
x 

derivative 
5x^4+3x^3+2x+5 

last
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1: 53 
2: 4x^9 + 2x^3+17x^2+3x+2 
3: -2x^6+5x^4+5x^2+2 
4: 6x^4+5x^3+x^2 
5: 20x^3+9x^2+2
</PRE><P>
______________________________________________________
2598||||||false||||||
<P>Space ships in the <SPAN CLASS="MATH">25<SUP>th</SUP></SPAN> <tex2html_verbatim_mark> century are driven by ``warp" drive. Unfortunately, if two warp drives operate simultaneously within 10 light years of each other both space ships blow up leaving a really nasty mess that has to be cleaned up. You are to implement software for space traffic control (STC) to insure the safe operation of space ships using warp drive. All space ships must file a flight plan with STC. STC reviews each request in the order it was received and issues flight clearance to the space ship if its operation will not interfere with any previously cleared space ships. If the space ship interferes with another cleared space ship then clearance is denied and the space ship is not allowed to operate. A space ship that starts moving at the exact same instance when another space ship stops operation does not cause a problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read a number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of clearance requests followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> clearance requests, one per line. A clearance request consists of a string space ship name followed by <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> coordinates of the origination point in space-time followed by <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> coordinates of the destination coordinates. All distances are in light years and time is given in minutes. <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is always greater than <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>. The proposed flight plan starts at <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> at time <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and moves at constant velocity to <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, arriving at <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to consider the clearance requests in order and to print for each one the name of the space ship followed by the word `<TT>granted</TT>' if the flight will never come within 10 light years of any previously cleared flight or the word `<TT>denied</TT>' if the proposed flight plan will come within 10 light years of another operating space ship.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9
ship1 0 0 0 0 15 0 0 1 
ship2 0 15 0 0 0 0 0 1 
ship3 0 0 0 0 14 0 0 1 
ship4 0 14 0 0 0 0 0 1 
ship5 0 0 0 0 14 0 0 1 
ship6 0 14 0 0 0 0 0 1 
ship7 0 14 0 0 0 15 0 1  
ship8 0 0 0 0 0 0 0 1 
ship9 11 0 0 0 11 0 0 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ship1 granted 
ship2 granted 
ship3 granted 
ship4 denied 
ship5 granted 
ship6 denied 
ship7 granted 
ship8 granted 
ship9 granted
</PRE><P>
______________________________________________________
2599||||||false||||||
<P>A biological computing system uses strings consisting of the letters `A', `G', `C', and `U' to represent numbers. The strings are converted to the corresponding number by processing the letters in the string from left to right in groups of three letters. The three letter groups in the string are translated to the digits in the number as shown in the table given below.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Triplet</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Digit</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GCA, GCC, GCG, GCU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>UGC, UGU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GAC, GAU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GAA, CAG</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GGA, GGC, GGG, GGU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>AUG</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>AAC, AAU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>7</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>AGA, AGG, CGA, CGC, CGG, CGU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>8</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>UGG</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>UAA, UAG, UGA</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Stop</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR>The number of characters in an input string is always a multiple of three and will always end with `UAA', `UAG', or `UGA'. For example, the string `GCAUGUUGGUAA' translates to the string `129'. Note that there is not a one-to-one relationship between a number and the strings that encode it. For example, the strings `GCAUGUUGGUAA', `GCCUGCUGGUAG', and `GCUUGCUGGUGA' all encode the number 129.<P>Researchers in the laboratory can isolate several copies of a string, and the number that it encodes, but because of the extraction process, each of the copies of the string is chopped up into an arbitrary number of fragments of arbitrary length. Not all of the copies are chopped up in the same way. The process guarantees that it will always be possible to reconstitute a complete string from the fragments it produces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Write a program that will accept as input a number and an arbitrary number of fragments of copies of a string that encodes the number (the word `<TT>end</TT>' signifies the end of the input).<P>The input file has several test cases, separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case in the input file, the program will produce as output a list of fragments required to reconstruct the string that encodes the number. Each line of the output will contain a fragment, and the index of the first and last character in the fragment that identifies the portion of the fragment to use to reconstruct the string. The indices are zero-based (i.e., the first letter in the fragment is at index 0). The fragments must be listed in the order they appear in the reconstituted string.<P>Separate the output of two diferent cases by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
129 
GCUUGCUGGUGA 
end 

129 
GCUUGCU 
GCUGGUGA 
GCU 
end 

129 
GCUUGC 
CUG 
CUG 
UG 
GU 
GA 
end
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
GCUUGCUGGUGA 0 11 

GCUUGCU 0 6 
GCUGGUGA 3 7 

GCUUGC 0 5 
UG 0 1 
GU 0 1 
GA 0 1
</PRE><P>
______________________________________________________
2600||||||false||||||
<P>We say that integer <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0 &lt; <I>x</I> &lt; <I>p</I></SPAN> <tex2html_verbatim_mark>, is a primitive root modulo odd prime <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> if and only if the set <SPAN CLASS="MATH">{(<I>x</I><SUP>i</SUP> mod<I>p</I>)| 1 = <I>i</I> = <I>p</I> - 1}</SPAN> <tex2html_verbatim_mark> is equal to <SPAN CLASS="MATH">1,..., <I>p</I>-1</SPAN> <tex2html_verbatim_mark>. For example, the consecutive powers of 3 modulo 7 are 3, 2, 6, 4, 5, 1, and thus 3 is a primitive root modulo 7.<P>Write a program which given any odd prime <!-- MATH
 $3= p < 65536$
 --><SPAN CLASS="MATH">3 = <I>p</I> &lt; 65536</SPAN> <tex2html_verbatim_mark> outputs the number of primitive roots modulo <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file has several lines with an odd primer number <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line in the input, the output of your program should consist of a line containing a single number that gives the number of primitive roots.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
23
31
79
107
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 
8 
24 
52
</PRE><P>
______________________________________________________
2601||||||false||||||
<P>
The United States Constitution requires that the number of representatives each state has 
in the House of Representatives must be proportional to the population of the various 
states.  However, this causes a problem because you cannot have fractional 
representatives. 

<P>
For example, assume there are only three states with populations of 12431, 9471, and 
10282 and the House has only 10 representatives (the numbers are deliberately small).  
Then the first state should have 3.86 representatives, the second state 2.94 
representatives, and the third state should have 3.19 representatives.  In this case, the 
solution is obviously is to round these to 4, 3, and 3 respectively and fortunately that adds 
up to 10 representatives. However, rounding does not always give the correct number of 
representatives and it also has other undesirable properties. 

<P>
One method that has been used is this:  choose a number of representatives so that the 
sum of the absolute values of the deviations is as small as possible, subject to the 
Constitutional requirement that each state must have at least one representative.  The 
deviation is the number of representatives given (integer) minus the number of 
representatives calculated by proportion (decimal).  Deviations are calculated as 
accurately as necessary.  The deviations for the data above would be 0.14, 0.06, and -0.19 
to two decimal places.  If two or more solutions give exactly the same sum of the 
absolute values of the deviations, either is acceptable. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to your program will contain several cases, each of them consists of three lines. The
first line will give the number 
of states, the second line specifies the number of representatives in the House, and the 
third line gives the populations of each state.  The third line of input will consist of a 
series of numbers (state populations) separated by white space.  The population for state 
1 is given first, followed by the population for state 2, and so on up to the population for 
state <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> (where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of states).

<P>
Populations will be no more than 32,767.  The number of states will not exceed 50.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input test case, your program will produce one line of output for each state that gives the
state number followed by the number of representatives for that state.  The states must be listed in 
numerical order.   

<P>
If the number of representatives is less than the number of states, your program should print the 
message `<TT>The number of representatives is too small</TT>' and terminate without producing 
any additional output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
10 
12431 9471 10282 
5 
3 
10 20 50 9 12
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 4 
2 3 
3 3 
The number of representatives is too small
</PRE>      

<P>

______________________________________________________
2602||||||false||||||
<P>You are a proud owner of a rectangular piece of land in the city of Flatland. The edges of all pieces of property in Flatland are arranged to be horizontal and vertical in the coordinate system. The city identifies the boundaries of your property by specifying the coordinates of the top left and bottom right corners of your property. To make things simple the coordinates are always specified using positive integer values.<P>The city is in the process of expanding and has decided to build a number of roads. Roads in flatland are straight lines extending forever. The location of a road is given by specifying the coordinates of any two distinct points on the road. The city has published a list of the roads it wishes to build and will build the roads, one at a time, in the order they are listed.<P>If a road crosses your property the city will divide a portion of your property into two rectangles. The rectangles can overlap and they must share three edges with your current land as shown in the diagrams below:<P><DIV ALIGN="CENTER"><IMG WIDTH="826" HEIGHT="207" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2602.jpg ALT="\epsfbox{p2602.eps}"> <tex2html_verbatim_mark></DIV><P>After the town has subdivided your property into rectangles you will be allowed to retain ownership of one of the rectangles, but you must turn over the ownership of the rest of your property to the good citizens of Flatland. The process of dividing the property into rectangles will be repeated every time another road is built.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Write a program that accepts as input one line that contains four numbers that give the coordinates of a piece of property in flatland. This line will be followed by a series of lines that give the coordinates of the roads the town is planning to build, in the order they will be built. The last line of input will consist of four negative ones.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The program will produce as output the coordinates of the successive rectangles you should retain so that in the end you retain the maximum possible area.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0 5 5 
0 1 5 1 
-1 -1 -1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 1 5 5
</PRE><P>
______________________________________________________
2603||||||false||||||
<P>
Every year after all of the crops have been harvested the Swabian people celebrate the 
end of summer and the start of winter with Octoberfest.  The Swabian people love 
puzzles and have developed an interesting game that is used to distribute beer down a 
table.  An arbitrary number of mugs of different sizes are lined up on a table.  The first 
mug on the table is filled to capacity and all the other mugs are emptied.  The goal of the 
game is to determine the shortest number of moves required to transfer a specified 
amount of beer from the first mug on the table to some other mug on the table (note that 
the destination mug may be the first mug). 

<P>
During one move the contents of one mug is poured into another.  You may pour some, 
or all of the beer, into another mug regardless of its size, however you must fill the mug.  
Therefore it is possible, and may be desirable, to overfill a mug resulting in a nasty spill.  
So, for example, pouring the entire contents of a mug that contains 3 units of beer into a 
mug that holds 2 units of beer will result in 1 unit of beer spilling on the floor.  It is also 
possible to pour only 2 units of beer from the first mug into the second leaving 1 unit of 
beer in the first and 2 units of beer in the second.  You are not allowed to pour only 1 unit 
of beer from the first mug into the second.  Beer is poured in whole units only. 

<P>
There are two variations to the game.  In the first variation it is possible during a move to 
refill the first mug on the table.  Note that a refill counts as a move.  The second variation 
does not allow refills. 

<P>

<P>
<BR>
Write a program that will print out a shortest sequence of moves required to transfer the 
beer in the first mug on a table to some other mug. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several test cases, each of them consists of three lines.

<P>
The first line of input will contain 
either the word `<TT>yes</TT>' or `<TT>no</TT>' to indicate whether or not refills are allowed.  
The second 
line will contain a series of numbers separated by white space.  Each number gives the 
capacity of a mug on the table.  The mugs are numbered starting at 1, so the first number 
gives the capacity of the first mug, the second number gives the capacity of the second 
mug and so on.  The third line will contain two numbers.  The first number specifies the 
mug the beer is to be transferred to and the second number specifies the amount of beer 
that should be in that mug at the end of the game. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, the output of your program will consist of one line for each move in the game.
The line will contain one number for each mug on the table.  The number gives the amount of beer 
in the corresponding mug at the end of a turn.  The letter `<TT>r</TT>' will be printed at the end of 
a line to indicate if the first mug was refilled during that move.  Taken together the lines 
will give a shortest sequence of moves required to move the beer from the first mug to 
the mug specified in the input.  

<P>
If it is impossible to move the beer as indicated, your 
program should simply print the message `<TT>not possible</TT>'. 

<P>
Separate the output of two consecutive cases by a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
no 
10 4 6 
3 2 
yes 
2 7 4 
3 4  
no 
2 3 8 
3 4
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 0 0 
4 0 6 
4 4 2 

2 0 0 
0 0 2 
2 0 2 r 
0 0 4 

not possible
</PRE> 

<P>

______________________________________________________
2604||||||false||||||
<P>The countries on the planet of Fozbot have decided to adopt the language Babble as the official language of the planet. The leaders of this planet have decided that in the year 2010 all Fozbotians will be required to speak only the language Babble.<P><P><BR>Sentences in all languages spoken on the planet, including Babble, are written as a single line terminated by a new line character. A sentence consists of a sequence of words, where a word is defined as a sequence of lower case letters (a, b, c, ... z) delimited by one or more white space characters (spaces, tabs, or a new line character). Each country has been assigned the task of defining a set of rules that define how words in their native language can be translated to words in Babble. A translation rule can take one of two forms:<P><P><BR><TT><SPAN CLASS="MATH"><I>word</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> -&gt; <SPAN CLASS="MATH"><I>word</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TT><BR><TT><SPAN CLASS="MATH"><I>j</I>[<I>c</I><SUB>1</SUB><I>c</I><SUB>2</SUB><I>c</I><SUB>3</SUB>...<I>c</I><SUB>n</SUB>]</SPAN> <tex2html_verbatim_mark> -&gt; <SPAN CLASS="MATH"><I>k</I>[<I>d</I><SUB>1</SUB><I>d</I><SUB>2</SUB><I>d</I><SUB>3</SUB>...<I>d</I><SUB>m</SUB>]</SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <SPAN CLASS="MATH"><I>word</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>word</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> are words in a language, <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> are characters in a language, and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> are integers greater than zero.<P><P><BR>The first rule specifies that any occurrences of <SPAN CLASS="MATH"><I>word</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> may be replaced by <SPAN CLASS="MATH"><I>word</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. For example, the rule `<TT>gray -&gt; grau</TT>' specifies that any occurrences of the word `<TT>gray</TT>' may be translated to the word `<TT>grau</TT>'. Note that the quotes are not part of the rule or the words they have been used to separate the rule from the text in this document.<P><P><BR>The second rule states that <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> consecutive occurrences of letters <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB><I>c</I><SUB>2</SUB><I>c</I><SUB>3</SUB>...<I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> can be replaced by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> consecutive occurrences of the letters <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB><I>d</I><SUB>2</SUB><I>d</I><SUB>3</SUB>...<I>d</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark>. For example, the rule `<TT>2[ab]-&gt;1[xyz]</TT>' would allow `<TT>ab</TT>', `<TT>aa</TT>', `<TT>bb</TT>', or `<TT>ba</TT>' to be replaced by `<TT>x</TT>', `<TT>y</TT>', or `<TT>z</TT>'. It is valid for one set of characters, but not both, to be omitted. For example, `<TT>2[ab]-&gt;1[]</TT>' and `<TT>1[]-&gt;3[xyz]</TT>' are valid rules. The first rule states that `<TT>aa</TT>', `<TT>ab</TT>', `<TT>ba</TT>', or `<TT>bb</TT>' may be replaced by nothing (i.e., they can be removed).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>You are to write a program that accepts two sentences on separate lines followed by a series of translation rules (each on a separate line). The last translation rule will be followed by a line that contains a single `<TT>.</TT>'. Your program will determine if it is possible to translate the first sentence to the second using the rules given.<P>The input file consists of several test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the output is as follows:<P>If translation is possible your program will print the first sentence on a single line followed by steps required to perform the translation. Each line will contain the number of the rule used, followed by a colon, followed by the result of applying the rule to the current string. The rules are numbered based on their order in the input. The first rule is rule 1, the next is rule 2, and so on. If a translation is not possible your program will print `<TT>No translation possible</TT>'.<P>Separate the output of two different cases by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ich bin da 
i am here 
ich  -&gt; i 
3[bin]  -&gt; 2[am] 
1[a] -&gt; 3[here] 
1[d] -&gt; 1[h] 
.
Elefanten sind grau 
it worked 
2[en] -&gt; [] 
Elefan -&gt; I 
.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ich bin da 
1: i bin da 
3: i bin dere  
4: i bin here 
2: i am here 

No translation possible
</PRE>
______________________________________________________
2605||||||false||||||
<P>
WhereNow Vacations agency provides a vacation brokerage service, connecting travelers with unsold spots on similarly-priced vacations to a variety of locations.  Each week, travel agencies provide WhereNow with a list of the locations still needing travelers as well as the number of travelers needed for each location.  We will refer to each such traveler opening as an `unsold seat.'  WhereNow accepts no more than 35 unsold seats (combined total, across all agencies) in a given week.

<P>
During the same week, frugal travelers log into the WhereNow Vacations web site to pay a deposit and indicate which locations (at least 1, but up to 10) they'd be willing to travel to.  If WhereNow is unable to match a customer to a vacation in one of their requested locations, his or her deposit will be refunded with interest. Travelers' flexibility as to where they will travel is rewarded with ultra bargain-basement prices.  The site accepts deposits from no more than 20 customers per week.  

<P>
Normally, the owner allows the computer to customers to the most appropriate available vacations as part of the weekend batch processing.  To keep a human touch in WhereNow's service, however, she would like a ``3pm Early Warning" report run each Friday afternoon.  The report's sole purpose will be to indicate if it will not be possible to match all of this week's customers with a vacation package.  (On the rare event this occurs the owner will review the requests that Friday evening and handle the matching personally.)  

<P>
You will write a program to provide this report.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file will contain multiple weeks' tour and customer information as shown in the sample below.

<P>

<UL>
<LI>The first line of the file indicates the number of weeks to process, followed by a blank line before the first week's data.  
</LI>
<LI>The first line of a week's data contains the number of open seats available for the first week.  All weeks will have at least one open seat.
</LI>
<LI>The next line of input lists each available tour location and the number of unsold seats for each location.  
</LI>
<LI>The subsequent line indicates the number of customers, followed by one line per customer.  All weeks will have at least one customer.
</LI>
<LI>Each customer's line of information begins with a count of how many countries the customer is willing to visit followed by the list of country names.  
</LI>
<LI>A blank line separates each week's input.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output will consist of one line per week, with each week separated by a blank line.  Print each week's number and whether all customers will be able to be matched with a vacation as shown in the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2

6
Zimbabwe 1 Egypt 2 England 3
5
3 Egypt Zimbabwe Mexico 
1 France
1 Zimbabwe
2 France Egypt
2 Zimbabwe Egypt

4
France 1 Mexico 3
3
3 France Jamaica Brazil
3 England Mexico France
3 Mexico Canada France
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Week #1:  Warning!  

Week #2:  All is well.
</PRE> 

<P>

______________________________________________________
2606||||||false||||||
<P>Write a program that evaluates a set of poker dice ``hands" and displays the ordered results.<P>Here are the evaluation rules, taken from <SPAN CLASS="textbf">Hoyle's Rules of Games</SPAN>, ed. by Albert H. Morehead and Geoffrey Mott-Smith (The New American Library of World Literature, 1963), pp. 227-28.<P><UL><LI>Five dice are used. These <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> [are] standard dice, marked with numbers [1 through 6] <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> . </LI><LI>Theoretically any number may play, but actually the game is played by groups of two to five people, usually in a restaurant or bar to decide which pays the check. </LI><LI>Each player has three rolls. His object is to make the best possible poker hand, ranking: Five of a kind, high; four of a kind; full house; three of a kind; two pair; pair; high "card." Aces (1s) rank above sixes <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> Straights do not count. </LI><LI><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> </LI></UL><P>Here are the evaluation rules for potentially ambiguous <SPAN ID="txt53">poker hands</SPAN>, taken from a playing card included in a ``Mohawk"-brand deck of poker cards:<P><UL><LI>Full house: three of a kind and two of a kind. Ex.: 8, 8, 8, and 6, 6. Hand with the highest three cards wins over any other full house. </LI><LI>Two Pair: Ex.: Q, Q, and 10, 10. Hand with the highest pair wins. If there is a tie, hand with the highest remaining (or fifth) card wins. </LI><LI>One Pair: if two are playing, hand with the highest value wins. Ex.: two 4's beats two 3's. Highest remaining card in-hand breaks a tie. </LI></UL><P>With poker dice it is possible for hands to tie. If multiple hands tie, they are given the <EM>same</EM> position number, and the position of the next lower hand shows a gap. If, for instance, there are three players and there is a tie for first, the final position vector would be 1, 1, 3 : there are two winners; there is no second-place player; and there is a third-place player.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Program input is read from a file that observes the following specifications:<P><UL><LI>The first record contains the number of games, which is greater than or equal to 1. This record is followed by one or more blank lines. </LI><LI>The rest of the records specify the details for each game, as follows: </LI><LI>The first game record contains the number of players, which will be between 2 and 10 inclusive. </LI><LI>Subsequent game records contain information on those individual hands; specifically: </LI><LI>five integers giving the face values of the five dice, separated by blanks </LI><LI>one <EM>or more</EM> blanks </LI><LI>the remainder of the line contains the player's name, with an unspecified amount of embedded white space. <B>Warning:</B> the player's name must not <EM>begin</EM> with any white-space characters. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Program output will be a table of results for each game, labeled by game number, beginning at 1, formatted as seen below. Each line of results will begin with the player's position (right aligned in two spaces), followed by 6 spaces, followed by the face values of the dice (with one space between each value), followed by 3 spaces and the players name. Separate game tables by a blank line for readability. <B>Note:</B> While the sample output displays each hand's dice in input order, your output may list each hand's dice in any order.<P>Each game table is to be sorted by player position (from first place to last place). In case of ties, the entries are to be alphabetized by the players' names.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

8
3 5 1 1 2  John Doe
3 2 2 2 3  Michelle Midlen
2 2 3 3 2  Jane Roe
1 3 4 5 6  Aaron Aardvark
3 4 4 4 1  Zoltan Zwingli
3 5 1 2 2  Jeffrey Walter
3 3 2 2 3  Al Gore Rythm
6 5 4 3 2  Macguiver
4
1 2 3 4 5  John Doe
2 2 2 2 4  Michelle Midlen
3 3 4 4 1  Jane Roe
6 6 3 3 2  Aaron Aardvark
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Game #1:
 1      3 3 2 2 3   Al Gore Rythm
 2      2 2 3 3 2   Jane Roe
 2      3 2 2 2 3   Michelle Midlen
 4      3 4 4 4 1   Zoltan Zwingli
 5      3 5 1 1 2   John Doe
 6      3 5 1 2 2   Jeffrey Walter
 7      1 3 4 5 6   Aaron Aardvark
 8      6 5 4 3 2   Macguiver

Game #2:
 1      2 2 2 2 4   Michelle Midlen
 2      6 6 3 3 2   Aaron Aardvark
 3      3 3 4 4 1   Jane Roe
 4      1 2 3 4 5   John Doe
</PRE><P>
______________________________________________________
2607||||||false||||||
<P>The USS N-terprise is trapped in a two-dimensional space. This space contains points of deadly Alpha Chi Mu (ACM) radiation. If living tissue is exposed to more than 42 rads of ACM radiation, for more than 20 seconds, it will die. The effect of the rads is cumulative, with the exposure at each point being added to the total exposure as they travel through this space. If the cumulative rads remains at or below 42 until they escape, they will survive. They could also survive if they were exposed to more than 42 rads, but this exposure lasted no more than 20 seconds.<P>You must write a computer program that, given a starting location, plots a course through this space, without killing everyone on board, and that also minimizes the total exposure to the ACM radiation. If multiple paths out of the space have the same radiation exposure, choose the shortest. If multiple paths out of space have the same radiation exposure and the same length, any one will satisfy the problem.<P>Due to the Interspacial Borealis Mechanism (IBM), the N-terprise is restricted in its ability to travel in this area. The N-terprise can only move in 4 directions in this space (<TT>N</TT>, <TT>S</TT>, <TT>E</TT>, <TT>W</TT>). The N-terprise cannot ``skip over" any locations, but must move along the plane of this space. Further, its speed is such that it takes 10 seconds to pass each point in the plane.<P>Sensors have mapped the space, including measuring values of the radiation at each. A ``map" of the space is an <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> grid, <SPAN CLASS="MATH"><I>n</I> &gt; 0</SPAN>. Amounts of the deadly ACM radiation are listed at each map point as integer values, greater than or equal to 0. The total amount of radiation at each map point is the sum of the radiation at that point, plus a percentage of the amounts at the neighboring points. (A neighboring point is a coordinate, if it exists, to the <TT>N</TT>, <TT>S</TT>, <TT>E</TT>, <TT>W</TT>, <TT>NW</TT>, <TT>NE</TT>, <TT>SW</TT> and <TT>SE</TT> of the current location.) The radiation effect is more pronounced at the four cardinal neighbors (<TT>N</TT>, <TT>S</TT>, <TT>E</TT>, <TT>W</TT>), at 50%. The other four coordinates contribute 25% of their actual effect.<P>When the N-terprise is first trapped in this region of space, they were instantaneously placed somewhere on the map, thus they begin accumulating rads with the effect as computed for this starting point. (That is, they did not ``travel" to their starting point, accumulating rads along the way.)<P>Note that this is truly ``flat" space, in that the map does not ``wrap" - there are truly edges to this space. That is how the N-terprise will escape: by going to an ``edge" point and proceeding out of the space.<P>For example, given a 3 <SPAN CLASS="MATH"><TT>x</TT></SPAN> 3 space (coordinates begin at 0,0 in the upper left corner):<P><PRE>
2 4 5
6 3 2
4 5 7
</PRE><P>The total exposure to the ACM radiation at point 1,1 would be 16 (3 + (.5*4) +(.5*2) + (.5*6) + (.5*5) + (.25*2) + (.25*5) + (.25*7) + (.25*4)). The time of exposure at this point is 10 seconds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file will consist of a series of ``maps". Each map begins with a single integer, <SPAN CLASS="MATH"><I>n</I></SPAN>, where <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2607img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2607img1.png ALT="$ \le$">80</SPAN>, which gives the dimensions of the space. (The space is square.) This will be followed by two integers denoting the starting position of the N-terprise. (Remember that numbering begins at 0 0 in the upper left corner.) Following the starting position will be n rows of n integers, each of which denotes the amount of radiation at that point. Data ends when the given map size (<SPAN CLASS="MATH"><I>n</I></SPAN>) is 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Output is as shown below. Successful paths out are shown with the coordinates of the path beginning at the starting point of the N-terprise and ending with the last point before they escape the space, showing the cumulation of the ACM rads along the path. For maps that contain no safe path out of the space, the only output, after the heading, is `<TT>We're dead, Jim!</TT>'. Note the blank line between maps.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
1 1
2  4  5
6  3  2
4  5  7
3
1 1
60 70 80
90 50 100
110 120 130
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
MAP #1:
1,1: 16.00
0,1: 27.00

MAP #2:
1,1: 335.00
0,1: 547.50
</PRE><P>
______________________________________________________
2608||||||false||||||
<P>
In his August 1986 column for <EM>Isaac Asimov's Science Fiction Magazine</EM> (p.100), Martin Gardner presented an interesting problem:

<P>

<P>
<BR>
<EM>Now for a curious little combinatorial puzzle involving the twelve numbers on the face of a clock.  Can you rearrange the numbers (keeping them in a circle) so no triplet of adjacent numbers has a sum higher than 21?  This is the smallest value that the highest sum of a triplet can have.</EM>

<P>
<EM>I know of no procedure for finding such a permutation, but there must be a way to write a computer program that will print all such permutations in a reasonable time.</EM>

<P>

<P>
<BR>
For our purposes, we will not print all such permutations, but simply count them.  Also, to allow for a variety of cases, we will accept as input (1) how many numbers (<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>) there are on our ``clock face" (meaning that we will have numbers in the range from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>), and (2) the largest allowed triplet sum.  Hence, for the problem as posed by Martin Gardner, the input would be

<P>

<P>
<BR>

<TT>12 21</TT>

<P>

<P>
<BR>
A number of clock faces will be equivalent based on rotations of a circular permutation - for 
instance, ``123", ``231", and ``312" are all equivalent, differing only in the starting point.  
Consequently you are to eliminate this duplication.  There are also permutations whose equivalence is 
based on mirror images (such as ``123" and ``321").  Eliminate that duplication as well.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Write a program that will accept a number of problems from input file.  The first file entry will 
specify the number of problems posed in the file.  Subsequent entries will be pairs of numbers: (1) 
how many entries there are on a ``clock face" (up to 13), and (2)the largest allowed triplet sum. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The program will report the number of <EM>unique</EM> circular permutations (eliminating permutations 
equivalent on rotation and/or reflection) meeting the constraint that no triplet found in the 
circular permutation sums to more than the specified maximum triplet sum.

<P>

<P>
<BR>

<B>Note:</B>  judging will be based on number pairs that either have no permutations meeting the criterion or have the minimum non-zero number of permutations meeting it.

<P>
Specifically, the program will read one integer, followed by pairs of integers from the file, as 
described above.  It will output to the screen its results (echoing back the input data and giving 
the number of unique permutations meeting the constraint) as three lines of text.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
6 11
12 21
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Permutation size:    6
Maximum triplet sum: 11
Valid permutations:  1

Permutation size:    12
Maximum triplet sum: 21
Valid permutations:  261
</PRE> 

<P>

______________________________________________________
2609||||||false||||||
<P>
It is the 23rd century. You are currently employed at the leading interstellar hospital, where scientists are conducting genetic research on all of the various species encountered during space travel. Each species has a specific number of nucleic acids that make up their genes. For instance, humans have 4. Some species have as many as 8, some as few as 1. 

<P>
One interesting characteristic of some species is that they have ``duplicate" nucleic acids. That is, in most cases, a species with 4 nucleic acids would have them identified as `<TT>abcd</TT>', but some species with 4 would have them labeled `<TT>abcc</TT>'.

<P>
Scientists at the hospital are able to determine the nucleic acids that make up each species' genes, but need a listing of all UNIQUE permutations, in order to search the genome for specific targets.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>

<P>
Write a program that reads in a series of strings, one per line, and then displays the total number of UNIQUE permutations followed by an ASCII-ordered listing of the permutations. Input will be terminated by a string containing a single, lower-case `<TT>x</TT>'.

<P>
Output format is as shown below.

<P>
Each string represents the nucleic acids which make up the genes of one species. Each nucleic acid will be represented by a letter of the alphabet. Note that a gene named `<TT>A</TT>' is NOT a duplicate of a gene named `<TT>a</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
abc
abb
Bab
x
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
There are 6 permutations for abc:
abc
acb
bac
bca
cab
cba
There are 3 permutations for abb:
abb
bab
bba
There are 6 permutations for Bab:
Bab
Bba
aBb
abB
bBa
baB
</PRE> 


______________________________________________________
2610||||||false||||||
<P>
Modern grocery stores now often have a ``U-Scan" checkout lane - allowing the customer to scan and check out his/her own groceries, without the need of a human checker. These lanes require that change be provided automatically, after the customer enters his/her cash. You are to write a program that computes the bills and coins to be dispensed, minimizing the total number of bills and coins. (That is, for change totaling $5.50, you should not dispense 5 ones and 50 pennies, but a $5 bill and a 50-cent piece.)

<P>

<P>
<BR>
The bills and coins available for you to dispense are as follows:

<P>
$50 bill,

<P>
$20 bill,

<P>
$10 bill,

<P>
$5 bill,

<P>
$1 bill,

<P>
50-cent coin,

<P>
25-cent coin,

<P>
10-cent coin,

<P>
5-cent coin,

<P>
1-cent coin.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file  will consist of two numbers per line, each constituting a transaction. The first number is the amount of the purchase, and the second one is the amount tendered by the customer. You may assume that the amount tendered is greater than or equal to the amount of purchase. Input will be terminated by a line with both numbers being 0.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output for each transaction will be a series of lines showing the amount of change returned and detailing the number of bills and coins that will be dispensed as change, in descending order of monetary amount, one unit per line. If a bill/coin is not needed in the change returned, no output is produced for that bill/coin. (In other words, do not display `<TT>0 $1 bills</TT>'.) Proper use of plurals is required, as shown below. Separate transactions by a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
42.15 50.00
2.07 5.00
99.99 100.00
0.0 0.0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
TRANSACTION #1:
$7.85
1 $5 bill
2 $1 bills
1 50-cent coin
1 25-cent coin
1 10-cent coin

TRANSACTION #2:
$2.93
2 $1 bills
1 50-cent coin
1 25-cent coin
1 10-cent coin
1 5-cent coin
3 1-cent coins

TRANSACTION #3:
$0.01
1 1-cent coin

______________________________________________________
2611||||||false||||||
<P>A very well-known toy/pastime, called Rubik's cube, consists of a cube as shown in Figure 1a, where letters stand for colors (e.g. `<TT>B</TT>' for blue, `<TT>R</TT> for red,...). The goal of the game is to rotate the faces of the cube in such a way that at the end each face has a different color, as shown in Figure 1b. Notice that,<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2611a.gif ALT="\epsfbox{p2611a.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 1: RubikCube</DIV><P>when a face is rotated, the configuration of colors in all the adjacent faces changes. Figure 2 illustrates a rotation of one of the faces. Given a scrambled configuration, reaching the final position can be quite challenging, as you may know.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2611a.gif ALT="\epsfbox{p2611b.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 2: Rotation Example</DIV><P>But your grandpa has many years of experience, and claims that, given any configuration of the Rubik cube, he can come up with a sequence of rotations leading to a winning configuration.<P>In order to show all faces of the cube we shall represent the cube as in Figure 3a. The six colors are Yellow, Red, Blue, Green, White and Magenta (represented by their first letters).<P>You will be given an initial configuration and a list of rotations. A rotation will be represented by an integer number, indicating the face to be rotated and the direction of the rotation (a positive value means clockwise rotation, negative value means counter-clockwise rotation). Faces of the cube are numbered as shown in Figure 3b. You must write a program that checks whether the list of rotations will lead to a winning configuration.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2611a.gif ALT="\epsfbox{p2611c.eps}"> </DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 3: Representation of the cube</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of the input is an integer which indicates the number of tests. Each test description consists of ten lines of input. The first nine lines of a test will describe an initial configuration, in the format shown in Figure 3a. The next line will contain a list of rotations, ending with the value `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program should print one line. If your grandpa is correct, print `<TT>Yes, grandpa!</TT>', otherwise print `<TT>No, you are wrong!</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
      G Y Y
      G Y Y
      G Y Y
W W W Y R R M M M G G B
W W W Y R R M M M G G B
W W W Y R R M M M G G B
      R B B
      R B B
      R B B
-1 0
      G Y Y
      G Y Y
      G Y Y
W W W Y R R M M M G G B
W M W Y R R M W M G G B
W W W Y R R M M M G G B
      R B B
      R B B
      R B B
-1 0
      M W M
      W W G
      W W Y
G Y Y M M B M B G W R B
B Y Y M M B M G G W R R
Y M G W B B R R G R R W
      R Y Y
      G B Y
      R G B
+4 +6 -2 +3 -4 +2 -3 -6 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Yes, grandpa!
No, you are wrong!
Yes, grandpa!
</PRE><P>
______________________________________________________
2612||||||false||||||
<P>The court of King Xeon 2.4 is plagued with intrigue and conspiracy. A document recently discovered by the King's Secret Service is thought to be part of some mischievous scheme. The document contains simply a set of sentences which state the truth or falsehood of each other. Sentences have the form ``Sentence X is true/false" where <SPAN CLASS="MATH"><I>X</I></SPAN> identifies one sentence in the set. The King's Secret Service suspects the sentences in fact refer to another, yet uncovered, document.<P>While they try to establish the origin and purpose of the document, the King ordered you to find whether the set of sentences it contains is consistent, that is, if there is a valid truth assignment for the sentences. If the set is consistent, the King wants you to determine the maximum number of sentences which can be made true in a valid truth assignment for the document.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several instances of documents. Each document starts with a line containing a single integer, <SPAN CLASS="MATH"><I>N</I></SPAN>, which indicates the number of sentences in the document ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2612img1.gif ALT="$ \leq$"> <I>N</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2612img1.gif ALT="$ \leq$"> 1000</SPAN>). The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contain each a sentence. Sentences are numbered sequentially, in the order they appear in the input (the first is sentence 1, the second is sentence 2, and so on). Each sentence has the form `<TT>Sentence X is true.</TT>' or `<TT>Sentence X is false.</TT>', where <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2612img1.gif ALT="$ \leq$"> <I>X</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2612img1.gif ALT="$ \leq$"> <I>N</I></SPAN>. The value <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> indicates the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each document in the input your program should output one line. If the document is consistent, your program should print the maximum number of sentences in a valid truth assignment for the document. Otherwise your program should print the word `<TT>Inconsistent</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample input</A>&nbsp;</FONT></H2><P><PRE>
1
Sentence 1 is false.
1
Sentence 1 is true.
5
Sentence 2 is false.
Sentence 1 is false.
Sentence 3 is true.
Sentence 3 is true.
Sentence 4 is false.
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Inconsistent
1
3
</PRE><P>
______________________________________________________
2613||||||false||||||
<P>Indiana Jones is in a deserted city, annihilated during a war. Roofs of all houses have been destroyed and only portions of walls are still standing. The ground is so full of mines that the only safe way to move around the city is walking over the remaining walls. The mission of our hero is to save a person who is trapped in the city. In order to move between two walls which are not connected Indiana Jones thought of taking with him a wooden board which he could place between the two walls and then cross from one to the other.<P><DIV ALIGN="CENTER"><IMG WIDTH="548" HEIGHT="297" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif ALT="\epsfbox{p2613.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Fig. 1: City map with route used by Indiana Jones</DIV><P>Initial positions of Indiana Jones and the trapped person are both on some section of the walls. Besides, walls are either in the direction South-North or West-East.<P>You will be given a map of the city remains. Your mission is to determine the minimum length of the wooden board Indiana Jones needs to carry in order to get to the trapped person.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should process several test cases. Each test case starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> indicating the number of wall sections remaining in the city ( <SPAN CLASS="MATH">2 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif ALT="$ \leq$"> <I>N</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif ALT="$ \leq$"> 1000</SPAN>). Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines describes a wall section. The first wall section to appear is the section where Indiana Jones stands at the beginning. The second section to appear is the section where the trapped person stands. Each wall section description consists of three integers <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN> <!-- MATH
 $(­10000 \leq X, Y, L \leq 10000)$
 -->
<SPAN CLASS="MATH">(­10000 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif
 ALT="$ \leq$"> <I>X</I>, <I>Y</I>, <I>L</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif
 ALT="$ \leq$"> 10000)</SPAN>,
where <SPAN CLASS="MATH"><I>X</I></SPAN> an <SPAN CLASS="MATH"><I>Y</I></SPAN> define either the southernmost point of a wall section (for South-North
sections) or the westernmost point (for West-East wall sections). The value of <SPAN CLASS="MATH"><I>L</I></SPAN>
determines the length and direction of the wall: if <SPAN CLASS="MATH"><I>L</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif
 ALT="$ \geq$"> 0</SPAN>, the section is West-East,
with length <SPAN CLASS="MATH"><I>L</I></SPAN>; if <SPAN CLASS="MATH"><I>L</I> &lt; 0</SPAN>, the section is North-South, with length <SPAN CLASS="MATH">| <I>L</I>|</SPAN>.
The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input your program should produce one line of output,
containing a real value representing the length of the wooden board Indiana Jones
must carry. The length must be printed as a real number with two-digit precision,
and the last decimal digit must be rounded. The input will not contain test cases
where differences in rounding are significant.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
14
1 1 5
6 8 2
7 2 -2
5 3 3
2 5 2
2 3 2
2 3 -2
4 3 -2
0 7 1
1 8 2
3 6 -2
4 7 2
6 6 1
6 6 -2
3
-10 0 20
-5 1 10
50 50 100
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1.41
1.00
</PRE>

<P>

______________________________________________________
2614||||||false||||||
<P>
Pedro travelled to Europe to take part in the International Olympiad in Informatics
and is coming back home. Since all his friends asked him to bring them some gift,
he bought two big bags of chocolates (one of Mindt and one of Lilka). Each of these
two bags contains a certain number of small chocolates. Buying those two bags was
much less expensive than buying smaller, individual boxes of chocolates. At home,
Pedro has some empty chocolate boxes that he kept from other trips. Pedro intends
to distribute the chocolates he just bought into these smaller boxes, to give them
to his friends.

<P>
As soon as Pedro begins filling the small boxes, he realizes he has a big problem:
since he has two different brands of chocolates, if he mixes chocolates of different
brands into one small box, the friend who receives this small box will discover
Pedro's trick to save money, and will not be pleased with him.

<P>
You must help poor Pedro distribute the chocolates into the small boxes in such a way
that every small box is completely full, and contains only one brand of chocolates.
A number of chocolates may however be left unassigned to any box (Pedro will keep
these chocolates to himself).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several instances of the problem. Each instance consists of
three lines. The first line contains two integers <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN> that indicate respectively
the number of chocolates Mindt and Lilka Pedro bought (<SPAN CLASS="MATH">0 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2614img1.gif
 ALT="$ \leq$"> <I>M</I></SPAN>, <!-- MATH
 $L \leq 1000$
 -->
<SPAN CLASS="MATH"><I>L</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2614img1.gif
 ALT="$ \leq$"> 1000</SPAN>).
The next line contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> representing the number of small boxes Pedro
has (<!-- MATH
 $N \leq M+L)$
 -->
<SPAN CLASS="MATH"><I>N</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2614img1.gif
 ALT="$ \leq$"> <I>M</I> + <I>L</I>)</SPAN>. The third line contains <SPAN CLASS="MATH"><I>N</I></SPAN> integers indicating the capacity
<SPAN CLASS="MATH"><I>C</I><SUB>i</SUB> &gt; 0</SPAN> of box number <SPAN CLASS="MATH"><I>i</I></SPAN> (that is, the number of chocolates needed to fill that box).
The end of input is indicated by <SPAN CLASS="MATH"><I>M</I> = <I>L</I> = 0</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each instance of the input your program must produce one line of output. If it
is possible to distribute the chocolates as defined in the problem statement, print
the number of boxes to be filled with Mindt chocolate, followed by a space,
followed by the list of box numbers, in ascending order. Each box number in the
list should be followed by a space. If it is impossible to distribute the chocolates,
print `<TT>Impossible to distribute</TT>'. If more than one solution exists, print any one.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
12 9
4
5 2 8 5
100 120
5
21 32 110 54 3
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 1 2 4
Impossible to distribute
</PRE>

<P>

______________________________________________________
2615||||||false||||||
<P>Nails and Rubber Bands. That is the suggestive name of a game played by a group of children (all of them offspring of geometry teachers). The children fix a number of nails on a plank of wood, randomly placed. Then they choose one of the nails to be the Origin, and a number <SPAN CLASS="MATH"><I>B</I></SPAN> of rubber bands. The challenge is to use the <SPAN CLASS="MATH"><I>B</I></SPAN> rubber bands to wrap the nails so that:<P><DL COMPACT><DT>(i).</DT><DD>each rubber band wraps a subset of the nails</DD><DT>(ii).</DT><DD>all nails are inside some wrapping</DD><DT>(iii).</DT><DD>wrappings do not overlap each other except at the Origin nail, which is touched by all rubber bands</DD><DT>(iv).</DT><DD>rubber bands must form wrappings which are convex polygons with at least three corners</DD><DT>(v).</DT><DD>the total area inside the wrappings is the smallest among all possible ways of wrapping the nails.</DD></DL><P>An instance of the game is shown in Figure 1.<P><DIV ALIGN="CENTER"><IMG WIDTH="423" HEIGHT="335" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif ALT="\epsfbox{p2615.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 1: A game with 19 nails and 2 rubber bands</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should solve several instances of the game. Each game description starts with a line containing two integers <SPAN CLASS="MATH"><I>B</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>, indicating respectively the number of rubber bands and the number of nails ( <SPAN CLASS="MATH">2 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif ALT="$ \leq$"> <I>B</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif ALT="$ \leq$"> 50</SPAN> and <SPAN CLASS="MATH">2<I>B</I> + 1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif
 ALT="$ \leq$"> <I>N</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif
 ALT="$ \leq$"> 101</SPAN>).
The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines describe the position of the nails, each line containing two
integers <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> (<!-- MATH
 $­10000 \leq X, Y \leq 10000$
 -->
<SPAN CLASS="MATH">­10000 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif
 ALT="$ \leq$"> <I>X</I>, <I>Y</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif
 ALT="$ \leq$"> 10000</SPAN>). The origin is the first nail
in the input. The end of input is indicated by <SPAN CLASS="MATH"><I>B</I> = <I>N</I> = 0</SPAN>.

<P>
In all instances in the input:

<P>

<UL>
<LI>no two nails are in the same point
</LI>
<LI>no three nails are in the same line
</LI>
<LI>the origin nail does not belong to the convex hull of all nails (that is, if you
use one rubber band to wrap all nails, it does not touch the origin nail)
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each game in the input your program should output one line, describing the smallest
total area inside the wrappings. The area must be printed as a real number with two-digit
precision, and the last decimal digit must be rounded. The input will not contain test
cases where differences in rounding are significant.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 5
0 0
9 4
-8 8
-10 -2
4 -8
2 6
0 0
3 6
-5 7
-4 -6
10 -10
3 5
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
92.00
74.00
</PRE>

<P>

______________________________________________________
2616||||||false||||||
<P>Nowadays, unfortunately, SPAM messages are becoming more and more common. Some of them may have a multiplicative effect since they ask you to forward them to all your friends. Some SPAM messages wish good luck, others promise you will become rich, and others just remind you how important it is to tell your friends that you care for their friendship. Here is an example of a SPAM:<P><PRE>
  From: Alice
  To: Bob, Mary, Julia, Paul

  Hi, this is a good luck email. I wish you become a millionaire,
  but that is up to you. If you
  * send this email to 10 or more people you will be a millionaire
  * send this email to 5 or more people you will be rich
  * send this email to less than 5 people you will be poor
  As I said, it is up to you. Write your email and be rich! :-)

  Alice
</PRE><P>People usually react in two different ways when they receive a SPAM:<P><UL><LI>They discard the message immediately without even reading it (they hate SPAM) </LI><LI>They forward the message to everyone they know (they love SPAM) </LI></UL><P>For this problem, we will assume everyone loves SPAM, but one never forwards the same message twice. Each SPAM message has a different effect based on the number of friends you forward the message to. For example: a SPAM message could tell that you will be poor if you send the message to 5 friends, but you will be the rich if you send to 10, and you will be the richest man in the world if you send it to 20 friends, and so on.<P>We will consider only SPAM messages similar to the example above. More specifically, a SPAM message will define two threshold values <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> and three attributes <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN>. A person acquires one of the three attributes depending on the number of messages forwarded for that specific SPAM. If a person forwards <SPAN CLASS="MATH"><I>T</I></SPAN> messages and <SPAN CLASS="MATH"><I>T</I> &lt; <I>T</I><SUB>1</SUB></SPAN> then her/his attribute is <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN>, if <!-- MATH
 $T_1 \leq T < T_2$
 --><SPAN CLASS="MATH"><I>T</I><SUB>1</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>T</I> &lt; <I>T</I><SUB>2</SUB></SPAN> then her/his attribute is <SPAN CLASS="MATH"><I>A</I><SUB>2</SUB></SPAN>, otherwise her/his attribute is <SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN>.<P>You will be given the names of a group of people, and for each person in the group, the set of friends she/he knows the email address. You will also be given a set of distinct SPAM messages, and for each SPAM message its threshold values and attributes, and the information about which person started it. You have to write a program that determines, for each person in the given group, which attributes she/he acquired, based on all the SPAM they forward.<P>You may assume that the SPAM originator will have at least one friend (in other words, she/he will send at least one message), and a person will not send messages to herself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should process several test cases. The first line of a test case contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> indicating the number of persons in the group ( <SPAN CLASS="MATH">2 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>N</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> 20</SPAN>). In the input, a person is identified by an integer from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>. The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contain each a list of friends of each person (the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line contains the list of friends of person number <SPAN CLASS="MATH"><I>i</I></SPAN>). The list of friends of person <SPAN CLASS="MATH"><I>i</I></SPAN> describes the friends person <SPAN CLASS="MATH"><I>i</I></SPAN> knows the email address, and consists of a list of integers <SPAN CLASS="MATH"><I>F</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>F</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>N</I></SPAN>, <SPAN CLASS="MATH"><I>F</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \neq$"> <I>i</I></SPAN>) terminated by the value `<TT>0</TT>' (zero). Following the list of friends comes the description of the SPAM messages (there will be at most 100 messages). Each description appears in a different line. The description consists of an integer <SPAN CLASS="MATH"><I>P</I></SPAN> identifying the person who is the SPAM originator ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>P</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>N</I></SPAN>); two integers <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> representing the threshold values; and the three attributes <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN> (each attribute is a word of no more than 20 letters). The SPAM list ends with a line containing only the value 0 (zero). The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contain each a name, which is single word with no more than 20 letters. The name in the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line is the name of person number <SPAN CLASS="MATH"><I>i</I></SPAN>. The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>. <P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program should output a list of names followed by the attributes they acquired. Your program should write the persons names in the order they appear in the input, followed by `<TT>:</TT>' and by a space, followed by their attributes according to the SPAM they sent. Attributes should be written in the order they appear in the input; each attribute should be followed by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample input</A>&nbsp;</FONT></H2><P><PRE>
5
2 3 0
1 3 5 4 0
5 0
0
4 1 0
1 2 4 poor rich millionaire
5 3 10 sad normal happy
0
Bob
Paul
Mary
Alice
Julia
6
2 0
1 3 0
1 2 4 0
1 2 3 5 0
1 2 3 4 0
1 3 4 0
1 2 4 red green blue
1 2 4 dumb normal smart
6 3 5 ugly bad good
0
Peter
Paul
Victoria
John
Julia
Anne
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Bob: rich sad
Paul: millionaire normal
Mary: poor sad
Alice: poor sad
Julia: rich sad
Peter: red dumb ugly
Paul: green normal ugly
Victoria: green normal bad
John: blue smart bad
Julia: blue smart bad
Anne: red dumb bad
</PRE><P>
______________________________________________________
2617||||||false||||||
<P>Cheap small industrial scanners can only acquire images on gray scale, which are images where the pixels have intensity values in the integer range <SPAN CLASS="MATH">[0...255]</SPAN>. A company that builds automatic vending machines wants to use these small scanners to validate the tokens used in its machines. Tokens are small square chips of metal with holes strategically pierced. Tokens with different holes are used for different values.<P><DIV ALIGN="CENTER"><IMG WIDTH="321" HEIGHT="278" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2617.gif ALT="\epsfbox{p2617.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Fig. 1: Token for a vending machine</DIV><P>A scanner will produce an image of the token introduced by the client and a computer program will validate it. In the scanner image, metal appears as dark pixels (values near 0) and holes appear as light pixels (values near 255). There are two problems that must be solved in the validation process. The first problem is that, since the token is square, a client can introduce it in the machine slot in several possible ways. The second problem is due to the poor quality of the image generated by those cheap scanners, which will contain <EM>noise</EM> (errors). To validate the token, the machine will compare the scanner output to a <EM>standard image</EM> of the token, previously produced using a high quality scanner.<P>You must write a program which, given the standard image of a token and an image produced by the machine scanner, determines the confidence degree that the token introduced is a valid one. The confidence degree is the percentage of pixels in the scanner image whose intensity value differ by 100 or less from corresponding pixels in the standard image. As the token may have been introduced in several ways, we are interested in the highest possible confidence degree, considering all possible token positions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should process several test cases. Each test case specifies the size of the token image and the pixel values for the standard and scanned images. The first line of a test case contains an integer <SPAN CLASS="MATH"><I>L</I></SPAN> that indicates the size, in pixels, of the image ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2617.gif ALT="$ \leq$"> <I>L</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2617.gif ALT="$ \leq$"> 400</SPAN>). The next <SPAN CLASS="MATH"><I>L</I></SPAN> lines will contain <SPAN CLASS="MATH"><I>L</I></SPAN> integers each, representing the pixel values for the rows of the standard image. Following that, the next <SPAN CLASS="MATH"><I>L</I></SPAN> lines will contain the pixel values for the rows of the scanned image.<P>The end of input is indicated by <SPAN CLASS="MATH"><I>L</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program should output a single line containing the confidence degree for the corresponding image. The confidence degree must be printed as a real number with two-digit precision, and the last decimal digit must be rounded. The input will not contain test cases where differences in rounding are significant.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
250 251 249 250
251 120 245 248
248 5 190 247
5 5 180 246
0 1 240 240
250 2 250 254
244 251 255 253
230 250 250 252
3
250 250 250
150 0 150
250 2 250
253 150 253
0 2 248
251 150 250
5
255 255 255 255 255
255 0 255 0 0
255 0 0 255 255
255 255 0 255 255
255 255 255 255 0
255 0 255 255 0
255 0 255 255 255
255 255 0 0 255
255 0 0 255 255
154 154 255 255 255
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
93.75
100.00
92.00
</PRE><P>
______________________________________________________
2618||||||false||||||
<P>
Mr. Jones is an exemplary husband. Every Saturday morning Mrs. Jones gives him a
list of goods to be bought from the supermarket and he buys exactly what he has
been asked for, always choosing the brands with lowest prices. But Mr. Jones hates
going to the supermarket on a Saturday, since its aisles are packed with shoppers.
He wants to change the way he does his shopping. Instead of going to and fro to buy
the products on his wife's list, he will try to get the goods on the list going
through each aisle only once, picking up the products in the exact order given
in the list. So he asked you to write a program to help him with his new style of shopping.

<P>
Given the information about products available in the supermarket together with
their prices in the order in which they appear in Mr. Jones' way and the list of
products given by his wife, your program must determine the least cost that he would pay.

<P>
Mr. Jones buys the products in the order in which they appear in Mrs. Jones' list
and he never goes back as he walks down the aisles. Therefore, if he buys the <SPAN CLASS="MATH"><I>i</I></SPAN>-th
product on his way as the <SPAN CLASS="MATH"><I>j</I></SPAN>-th item on the list, the next product to be bought
is the <SPAN CLASS="MATH">(<I>j</I> + 1)</SPAN>-th item of the list --and it must be bought from the products
that come after <SPAN CLASS="MATH"><I>i</I></SPAN> in his path. The figure below shows an example where products
are identified by integers. Note that different brands of the same product may
appear separately. In the example Mr. Jones must buy products 1,1,2,20 (notice
that product 1 appears twice in the list). For the example, the least cost for
Mr. Jones following his constraints is 21.30. Notice that with this new way of
shopping it may be impossible for Mr. Jones to buy all the goods on Mrs. Jones
list; in that case, your program should warn Mr. Jones.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2618.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="\epsfbox{p2618.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program should process data for several shopping sessions. The first line in
the description of a shopping session contains two integers <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>; <SPAN CLASS="MATH"><I>M</I></SPAN>
indicates the number of items in Mrs. Jones' list (<!-- MATH
 $1 \leq M \leq 100$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>M</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> 100</SPAN>) and <SPAN CLASS="MATH"><I>N</I></SPAN>
represents the total number of products available in the supermarket
(<!-- MATH
 $1 \leq N \leq 100000$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>N</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> 100000</SPAN>). The next line contains <SPAN CLASS="MATH"><I>M</I></SPAN> integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> representing
the list of products in Mrs. Jones' list (<!-- MATH
 $1 \leq X_i \leq 100000$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>X</I><SUB>i</SUB> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> 100000</SPAN>, <!-- MATH
 $1 \leq i \leq M$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>i</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>M</I></SPAN>).
Then <SPAN CLASS="MATH"><I>N</I></SPAN> lines follow, representing the supermarket products in the order in which
they appear in Mr. Jones' way. Each of those lines contains an integer <SPAN CLASS="MATH"><I>K</I></SPAN> and a
real <SPAN CLASS="MATH"><I>P</I></SPAN> which represent respectively a product identifier and its price
(<!-- MATH
 $1 \leq K \leq 100000$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>K</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> 100000</SPAN>). The end of input is indicated by <SPAN CLASS="MATH"><I>M</I> = <I>N</I> = 0</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each shopping session in the input, your program should produce one line of
output, containing the least cost that Mr. Jones would pay. If it is not possible
to buy all the goods for the session, print the word <TT>impossible</TT>. The cost
must be printed as a real number with two-digit precision, and the last decimal
digit must be rounded. The input will not contain test cases where differences in
rounding are significant.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 8
1 1 2 20
2 0.29
1 0.30
20 0.15
1 1.00
5 0.05
2 10.00
20 20.00
20 10.00
2 5
1 2
3 1.00
4 1.00
2 0.01
1 1.00
2 1.50
2 3
1 2
2 0.05
1 10.00
1 3.00
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
21.30
2.50
Impossible
</PRE>

<P>

______________________________________________________
2619||||||false||||||
<p align="left">Consider a set of <b>n</b> different elements that can be permuted in <b>n</b>! different ways. Such permutations can be first, ordered lexicographically and then they can numbered. For example, the set {a, b, c} admits six permutations that can be ordered as follows:</p><div align="center"><table width="53" border="0" cellspacing="0" cellpadding="0"><tr><td><div align="center">1</div></td><td><div align="center">abc</div></td></tr><tr><td><div align="center">2</div></td><td><div align="center">acb</div></td></tr><tr><td colspan="2"><div align="center">...</div></td></tr><tr><td><div align="center">6</div></td><td><div align="center">cba</div></td></tr></table></div><p align="left">This example shows the 1<sup><font size="-1">st</font></sup> , 2<sup><font size="-1">nd</font></sup> and 6<sup><font size="-1">th</font></sup> permutation. Write a program that can compute the <b>k</b><font size="-1"><sup>th</sup></font> permutation of a set of <b>n</b> elements. The elements of such a set are that character <b>c</b> and the <b>n</b>-<i>1</i> ASCII characters that follow it.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The program must read a text file where each line is of the form: <b>k</b> <b>n</b> <b>c</b>, where <b>k</b> and <b>n</b> are integers: 0 &lt; <b>n</b> &#8804; 20, 0 &lt; <b>k</b> &#8804; <b>n</b>!, and <b>c</b> is an ASCII character.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each line of the file read by the program, give the corresponding permutation.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1 3 a
2 3 a
6 3 A
1 4 a
1 4 C
24 4 1
1 20 a
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
abc
acb
CBA
abcd
CDEF
4321
abcdefghijklmnopqrst
</PRE><P>
______________________________________________________
2620||||||false||||||
<p align="left">A small boy named Tommy has some toy centipedes that are a series of 1 centimeter segments. Tommy assembles his centipedes to any length he likes and places them on a 30&times;30 centimeter board that allows the centipedes to travel in 1 centimeter wide tracks that criss-cross the board. The centipedes travel only parallel to either the <b>x</b> or <b>y</b> axis on the board. Centipede segments of the same centipede advance at the same time and centipedes advance in cyclic numerical order (all of centipede <i>0</i> first, then <i>1</i>, etc.). When more than one segment of two or more centipedes occupy the same <b>x</b>, <b>y</b> coordinate, there is a centipede collision. Anytime a collision occurs, all segments arriving at the collision site are retained at this point like a black hole. All remaining segments on a centipede detach from the segment involved in the collision and continue their march until another collision occurs or an existing collision site is encountered or until the segments fall off the edge of the board. Anytime a segment enters a collision site, it becomes part of the collision.<br>Since Tommy left home without his centipede set, his mother has hired you to write a simulation program for his entertainment. Your program will simulate his board with a text printout of his grids. For example, Tommy may simulate 5 centipedes on his board that start out as shown on the grid on the left and finish as shown on the grid on the right (note the example grid is only 10&times;10 whereas Tommy's is 30&times;30).</p><p align="center"><img src="http://livearchive.onlinejudge.org/external/26/p2620a.gif></p><p align="left"><br>Where:<br><i>0</i> represents a centipede segment traveling from top to bottom,<br><i>1</i> represents a centipede segment traveling from left to right,<br><i>2</i> represents a centipede segment traveling from bottom to top,<br><i>3</i> represents a centipede segment traveling from bottom to top,<br><i>4</i> represents a centipede segment traveling from right to left, and<br><i>X</i> represents a collision site involving 2 or more segments.</p><p align="left">Your program will simulate up to 10 centipedes that travel on a 30&times;30 board. Tommy has 100 segments that he may use in his simulation. Of course, no centipede can be longer than 30 segments.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input to your program will consist of a series of simulation sets. The first line of each input set will be a single integer (0 &lt; <b>n</b> &lt; 11) representing the number of centipedes in the simulation. (Centipedes are numbered <i>0</i> through <b>n</b> -<i>1</i> in the same order as the input.) The next <b>n</b> lines will each represent one centipede and will contain a single direction character followed by 3 integers. The direction character can be '<i>U</i>', '<i>D</i>', '<i>L</i>', or '<i>R</i>' for &quot;<i>Up</i>&quot;, &quot;<i>Down</i>&quot;, &quot;<i>Left</i>&quot;, or &quot;<i>Right</i>&quot; respectively and indicate the direction of travel. The next integer (0 &lt; <b>L</b>&lt; 31) indicates the length of the centipede in segments. The second and third integers indicate the <b>x</b>, <b>y</b> coordinates of the lead segment (0 &#8804; <b>x</b>, <b>y</b> &lt; 30). The next <b>L</b> -<i>1</i> segments of the centipede occupy the <b>L</b> -<i>1</i> board positions extending in the opposite direction from the direction of travel starting adjacent to the lead segment. You can be assured that no centipede segment will originate off the board nor will the original configuration involve any collisions. The input ends when <b>n</b> = -<i>1</i>.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each input simulation set, you should print (exactly) the following lines as the first two lines of output (starting in column 4):<br>000000000011111111112222222222<br>012345678901234567890123456789</p><p><br>The next 30 lines represent the state of the board after the simulation has completed (all centipede segments have entered a collision site or fallen off the edge of the board). Columns 1 and 2 should contain the row number (rows are numbered 29 down to 00) with leading zeroes. Columns between 4 and 33 (inclusive) represent the contents of the board cells. Board cells can contain either an <i>X</i> or a period. A period represents an empty cell and <i>X</i> represents a cell that contains 2 or more centipede segments involved in a collision. The last line of each output set is a blank line. Follow the Sample Output for the exact format of the expected output.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
10
R 9 11 23
U 8 11 17
U 5 15 15
U 5 15 8
D 9 23 13
U 6 23 6
R 9 8 9
L 13 17 0
U 12 13 11
L 5 20 9
-1 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
   000000000011111111112222222222
   012345678901234567890123456789
29 ..............................
28 ..............................
27 ..............................
26 ..............................
25 ..............................
24 ..............................
23 ...........X...X..............
22 ..............................
21 ..............................
20 ..............................
19 ..............................
18 ..............................
17 ..............................
16 ..............................
15 ..............................
14 ..............................
13 ..............................
12 ..............................
11 ..............................
10 ..............................
09 .............X.X.......X......
08 ..............................
07 ..............................
06 ..............................
05 ..............................
04 ..............................
03 ..............................
02 ..............................
01 ..............................
00 ..............................
</PRE><P>
______________________________________________________
2621||||||false||||||
<p>&nbsp;</p><p align="left">You have a programmable mobil cyclop robot with a camera mounted on itself . It has the ability to identify different areas in a building, using the numbers assigned to each one of them in a four-neighborhood (by example, if the robot is in area 8, it can visualize his neighbors areas 7, 4, 9 and 14). You have to design a program for the robot, in such a way that the robot can find the shortest length path, between any two data points without visiting twice any area. The length of the path is calculated with the number of visited areas, including the starting and the final areas. In case of no possible path, the program should show the message: &#147;<i>There is not possible path</i>&#148;.<br>Taking into account that the maximum number of areas is 99 and the minimum 2.</p><p align="center"><img src="http://livearchive.onlinejudge.org/external/26/p2621a.gif width="641" height="560"></p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains several tests. The first line of each test contains an integer <b>n</b> representing the number of areas. The next <b>n</b> lines will have positive integers. The first one representing the area and the others, the neighborhoods. The last line will have two integers representing the start and final areas. A -<i>1</i> indicates that there will be no further tests on the file..</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>An integer representing the length of the shortest path or the string &#148;<i>There is not possible path</i>&#148;.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
21
1 4
2 5
3 6
4 1 8
5 2 10
6 3 12
7 8
8 4 7 9 14
9 8 10
10 5 9 11
11 10 12
12 6 11 13 15
13 12
14 8 17
15 12 19
16 17
17 14 16 18 21
18 17 19
19 15 18 20
20 19
21 17
21 3
-1 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
8
</PRE><P>
______________________________________________________
2622||||||false||||||
          <p align="left">Juan lives in the mountains. He waits all the year for 
            the town&#146;s party, because tradesmen from all over the country 
            will come to show and sell their merchandise like baskets, mud pots 
            and a lot of craftsmanship. This year he is planning to buy some baskets. 
            All the baskets are round, having diameter, thickness and colors that 
            make them different from each other. Nevertheless, the problem is 
            how are they going to be carried, because the only truck he owns is 
            small. He also has time restrictions because the stands do not have 
            their own parking space, so he is planning to park in front of the 
            chosen stand, buy the selected basket (only one) and quickly put it 
            in the truck.<br>
            To do this, Juan has decided to cross the stand&#146;s street walking 
            with the idea of looking for the merchandise and choose the baskets 
            he would like to buy. He had planned to measure the diameters of all 
            the baskets he would like to buy and write them in his notebook. In 
            this way when he had walked all the stand&#146;s street, he would 
            have gotten all the diameter information to decide where he is going 
            to stop his truck to buy. Each basket he buys must keep inside the 
            previous one bought making a stack like is shown in the figure (which 
            means they are in strict decending order when put into stack). Suppose 
            the basket&#146;s thickness despicable and no baskets rearrangements 
            can be made because the time restriction.<br>
            In his walk by the stand&#146;s street, Juan had picked up the following 
            diameters of baskets he would like to buy. The diameters are: </p>
          <p align="center"><img src="http://livearchive.onlinejudge.org/external/26/p2622a.gif></p>
          <p align="left">In his walk by the stand&#146;s street, Juan had picked 
            up the following diameters of baskets he would like to buy. The diameters 
            are :</p>
          <p align="center">Walking Path through the stands selecting baskets 
            and picking up the data<br>
            <img src="http://livearchive.onlinejudge.org/external/26/p2622a.gif><br>
            Truck Path through the stands buying pieces </p>
          <p align="left">To this diameters list Juan has realized that the maximum 
            amount of baskets he can buy is 7.</p>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


          <p> Input contains several cases. Each test case consists of a line 
            containing a single integer <b>n</b> (<b>n</b> &lt; 10000), representing 
            the amount of baskets in the list. In the next <b>n</b> lines, integers 
            representing the diameters of each one of the <b>n</b> baskets. A 
            line containing a &#150;<i>1</i> follows the last test case.</p>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

          <p>An integer representing the maximum amount of baskets Juan can buy.</p>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
12
200
1300
1800
1000
100
2000
2500
2900
1100
3000
1200
2400
5
200
300
500
100
3000
4
1000
700
500
200
-1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
7
4
1
</PRE>

<P>

______________________________________________________
2623||||||false||||||
          <p align="left">Efficient Developments ships a product which requires 
            some database features. Since the company can&#146;t assume an existing 
            DBM installed in the client system and their distribution must be 
            as small as possible. Their solution is to create a Simple Transaction 
            Manager.<br>
            This Simple Transaction Manager must be able to retain information 
            through its executions and to avoid several client processes to access 
            the same data at the same time. Client process will be identified, 
            on the test file, as a three uppercase letter string followed by a 
            colon, the command the client is requesting with its corresponding 
            parameters, if any. The commands that can be issue to the STM are:<br>
            STARTSERVER<br>
            SHUTDOWN<br>
            CRASH<br>
            STARTTRANSACTION<br>
            COMMIT<br>
            ROLLBACK<br>
            READ Record<br>
            UPDATE Record Value<br>
            CREATEDATABASE Size<br>
            <br>
            The database has at most 500 registers but it must support to read 
            a four digits size number (such as 0500) in what can be thought of 
            as a single table. All values and all record keys have the four digits, 
            left zero padded numbers are used.<br>
            In order to access the server, it must be running. The server will 
            support only one transaction per client at the same time, and all 
            records accessed (read or write) while the transaction is open will 
            be locked for the other clients. When an operation which requires 
            a running server is performed against an stopped server (all except 
            crash, createdatabase and startserver) the response: &#147;ERROR: 
            NO SERVER UP&#148; is generated.<br>
            The database can only be created when the server is not running.<br>
            The server cannot be started while running, nor shutted down if it 
            not running.<br>
            The database must be started before it can be shutted down. <br>
            To shutdown a database there must be no pending transactions.<br>
            The server can be &#147;crashed&#148; at any time: it is stopped, 
            regardless of its status or pending transactions.<br>
            When a transaction is committed, changes are made permanent. The information 
            should exist between calls to the STM. A CREATEDATABASE statement 
            will destroy all existing data and initialize all records to &#147;0000&#148;. 
            A record update outside a transaction is permanent. When a Transaction 
            is rolledback, all updates to records within that transaction are 
            discarded.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

          <p> Input contains several cases. Each case consists of a succession 
            of commands to be processed, on per line. Tests are separated by one 
            empty space. Process all cases until you reach end of file.</p>





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

          <p align="left"> The STM outputs to a file, the client who issued a 
            command, and the command output:<br>
            Please see sample output files.<br>
            The following table shows the possible message the STM systems should 
            produce. </p>
          <div align="center">
            <table width="600" border="1" cellspacing="0" cellpadding="0">
              <tr> 
                <td> 
                  <div align="center"><i>Command</i></div>
                </td>
                <td> 
                  <div align="center"><i>Success</i></div>
                </td>
                <td> 
                  <div align="center"><i>Error Message</i></div>
                </td>
                <td> 
                  <div align="center"><i>Error Message</i></div>
                </td>
              </tr>
              <tr> 
                <td height="38">STARTSERVER</td>
                <td height="38">OK</td>
                <td height="38">ERROR:<br>
                  SERVER UP</td>
                <td height="38">&nbsp;</td>
              </tr>
              <tr> 
                <td>SHUTDOWN</td>
                <td>OK</td>
                <td>ERROR: <br>
                  NO SERVER UP<br>
                </td>
                <td>ERROR: <br>
                  OPEN TRANSACTIONS</td>
              </tr>
              <tr> 
                <td>CRASH</td>
                <td>OK</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>STARTTRANSACTION</td>
                <td>OK</td>
                <td>ERROR: <br>
                  A TRANSACTION<br>
                  IS ALREADY OPEN</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>COMMIT</td>
                <td>OK</td>
                <td>ERROR: <br>
                  NO OPEN TRANSACTION</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>ROLLBACK</td>
                <td>OK</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>READ Record</td>
                <td>Value</td>
                <td>ERROR:<br>
                  RECORD IS LOCKED</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>UPDATE Record Value</td>
                <td>OK</td>
                <td>ERROR:<br>
                  RECORD IS LOCKED</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>CREATEDATABASE Size</td>
                <td>Value</td>
                <td>ERROR:<br>
                  SERVER UP</td>
                <td>&nbsp;</td>
              </tr>
            </table>
          </div>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
YYY: CREATEDATABASE 500
XXX: STARTSERVER
AAA: READ 0001
AAA: UPDATE 0001 1222
AAA: STARTTRANSACTION
AAA: UPDATE 0001 1500
BBB: STARTTRANSACTION
AAA: READ 0001
BBB: UPDATE 0315 0123
CCC: STARTTRANSACTION
DDD: UPDATE 0316 0456
CCC: STARTTRANSACTION
CCC: READ 0001
BBB: COMMIT
XXX: SHUTDOWN
CCC: UPDATE 0317 0789
CCC: COMMIT
XXX: CRASH
AAA: UPDATE 0001 1300
DDD: READ 0245

AAA: READ 0001
BBB: READ 0315
DDD: READ 0316
CCC: READ 0317
DDD: READ 0245

XXX: STARTSERVER
AAA: READ 0001
BBB: READ 0315
DDD: READ 0316
CCC: READ 0317
DDD: READ 0245
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
YYY: OK
XXX: OK
AAA: 0000
AAA: OK
AAA: OK
AAA: OK
BBB: OK
AAA: 1500
BBB: OK
CCC: OK
DDD: OK
CCC: ERROR: A TRANSACTION IS ALREADY OPEN
CCC: ERROR: RECORD IS LOCKED
BBB: OK
XXX: ERROR: OPEN TRANSACTIONS
CCC: OK
CCC: OK
XXX: OK
AAA: ERROR: NO SERVER UP
DDD: ERROR: NO SERVER UP

AAA: ERROR: NO SERVER UP
BBB: ERROR: NO SERVER UP
DDD: ERROR: NO SERVER UP
CCC: ERROR: NO SERVER UP
DDD: ERROR: NO SERVER UP

XXX: OK
AAA: 1222
BBB: 0123
DDD: 0456
CCC: 0789
DDD: 0000
</PRE>

<P>

______________________________________________________
2624||||||false||||||
<P>
If Pythagoras knew what Mathematics teachers and contest-question makers kept doing to his theorem, he'd probably be rolling in his grave.  Then again, that would mean that he would probably have to have ears that could hear all the way from Croton, and he probably wouldn't have minded, being a sect leader and all.  (And being dead for over fifteen centuries would mean that all these discussions of the Pythagorean Theorem would fall on very dead ears.)  In fact, to some now, numbers still meant everything.  

<P>
Other than the fact that he had almost killed himself over irrational numbers, Pythagoras probably never foresaw anyone daring to ask this question: given a line segment of integral length, how many non-congruent right triangles can have this segment as a side, assuming that all three sides of the triangle are of integral length?

<P>
Since Pythagoras probably never foresaw the computer, who could blame him?  Perhaps you can blame this problem's writer, because this question is what he poses you. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input contains integers, one integer per line.  The first integer will signify the number of cases, and will 
be from 1 to 20.  Each of the lines following will contain one case, which is one integer, the integral length 
of a particular segment in length units. The value of the given segment length is not greater than 100. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output consists of lines, each line consisting of a pair of integers, the integers indicating the lengths of 
the other two sides of the right triangle in length units.  All the lengths are counting numbers, and the pairs 
of integers must be sorted with the larger number first.  In between cases, one blank line should be inserted. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>                                             

<P>
<PRE>
2                                                         
20                                                        
12
</PRE>                                                         

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>                                                         

<P>
<PRE>
101, 99                                                           
52, 48                                                           
29, 21                                                           
25, 15                                                           
16, 12  
 
37, 35 
20, 16 
15, 9 
13, 5
</PRE>  

<P>

______________________________________________________
2625||||||false||||||
<P>You must write a program that chooses the second word and its position on a 5-by-5 board that will yield in the highest score.<P>The first word, five letters long and consisting only of lower-case letters, will be placed horizontally with the first letter at square (2,0) marked by the asterisk on Figure 1. Assume that <SPAN CLASS="MATH">(<I>R</I>, <I>C</I>)</SPAN> <tex2html_verbatim_mark> refers to the square in row <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and column <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>; and, the upper left square is (0,0).<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>T</TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>T</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>T</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 1. Structure of the 5-by-5 board.</DIV><P><P><BR>The second word should be chosen from the following three-letter words: <SPAN CLASS="textit"><SPAN CLASS="textbf">get, the, top, has, shy, max, axe, boy, hog</SPAN></SPAN>. It should be placed on the board at a right angle to the first word and must use one of the letters of the first word.<P>Scoring of the second word is based on following rules:<P><UL><LI>All letters are worth 1 point except `<SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark>' (2 points), `<SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>' (2 points), `<SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>' (4 points), and `<SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>' (5 points). </LI><LI>Squares on Figure 1 that are marked with D earn double letter points while those marked with T earn triple letter points. For example, placing `<SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>' on the (1,3) square equals 8 points; placing `<SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark>' on the (4,2) square equals 6 points. </LI><LI>The score for the word is the sum of points earned by the three squares occupied by the three-letter word. </LI></UL><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>s</TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>h</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>s</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>y</TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 2.</DIV><P><P><BR>In Figure 2, for example, given that the five-letter word is the word `these', then the three-letter word should be `shy' placed in square (1,1) earning 11 points.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each line contains the five-letter word for each test case. Only lowercase letters shall be used.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For every case in the input file, the output contains a single line containing the five-letter word, the three-letter word, the row position of the first letter of the three-letter word, the column position of the three-letter word and the score earned by the three-letter word delimited by colons. In test cases where it is not possible to place a three-letter word then the output should be one line containing the five-letter word and the message `<TT>No play.</TT>' delimited by a colon. In cases where the three-letter word that earns the highest score is not unique then the output should be a single line containing the five-letter word and the message `<TT>Not unique.</TT>' delimited by a colon.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
these                         
cloud                         
nnnnn
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
these:shy:1:1:11 
cloud:boy:1:2:6 
nnnnn:No play.
</PRE><P>
______________________________________________________
2626||||||false||||||
<P>``Read Out Loud" is a sequence generator where the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>th term is obtained from the <SPAN CLASS="MATH">(<I>n</I> - 1)</SPAN> <tex2html_verbatim_mark>st term by reading aloud the <SPAN CLASS="MATH">(<I>n</I> - 1)</SPAN> <tex2html_verbatim_mark>st term. This sequence has applications with molecular and atomic chemistry, with the length of each element in the sequence having an asymptotic rate of growth of around 1.3.<P><P><BR>For example, if the first element of the Read Out Loud sequence is ``1"; then:<UL><LI>The second element is ``11" since we read the first element as ``One 1". </LI><LI>The third element is ``21" since we read the second element as ``Two 1". </LI><LI>The fourth element is ``1211" since we read the third element as ``One 2 Two 1". </LI><LI>The fifth element is ``111221" since we read the fourth element as ``One 1 One 2 Two 1". </LI><LI>The sixth element is ``312211" since we read the fifth element as ``Three 1 Two 2 One 1". </LI></UL><P>Here is the same sequence in linear form:<P><SPAN CLASS="MATH">1, 11, 21, 1211, 111221, 312211...</SPAN> <tex2html_verbatim_mark><P><P><BR>Your goal is to write a ``Read Out Loud" sequence generator.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. Each test case consists of a single line containing the first term of the ``Read Out Loud" sequence, <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and a term number, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. Both numbers are non-negative integers, delimited by a white space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the output is a single line containing the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>th term of the ``Read Out Loud" sequence based on the first term <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 6                                                               
9 7                                                               
14344 6                                                            
6386469 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
312211 
311311222119 
31131122211411131221232112132114
6386469
</PRE><P>
______________________________________________________
2627||||||false||||||
<P>
In the Journal of Recreational Mathematics for July 1968, L.D. Yarbrough introduced a new variant on the 
classic problem of the knight's tour. In addition to the rule that a knight touring a chessboard cannot visit 
the same cell twice (except for a final re-entrant move that in certain tours allows the knight to return to the 
starting square), the knight is also not permitted to cross its own path. (The path is taken to be a series of 
straight lines joining the centers of the beginning and ending squares of each leap).  

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2627a.eps}$
 -->
<IMG
 WIDTH="345" HEIGHT="281" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2627a.jpg
 ALT="\epsfbox{p2627a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The Knight moves in an L shape in any direction. It either moves two squares sideways and then one 
square up or down, or two squares up or down, and then one square sideways. The figure above illustrates 
valid squares (shaded) where the knight, K, can move. 

<P>

<P>
<BR>
A Knight tour starts from any square on the board and visits the most number of unique squares within the board without crossing its own path. In the figure below (where the chess board is 3-by-3), the Knight, 
starting on square K, can move to square 1 and then square 2, without crossing its path. Square 3 might be the next valid knight move but it crosses the path from K to square 1. Hence, the length of the uncrossed knight's tour is 2. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2627b.eps}$
 -->
<IMG
 WIDTH="153" HEIGHT="127" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2627a.jpg
 ALT="\epsfbox{p2627b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Given a square board of order <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, determine the longest uncrossed knight's tour. The starting point can be any point within the square. The square is divided into two axes, X (horizontal, increasing to the right) and 
Y (vertical, increasing downwards) with (0,0) on the upper-left corner of the square. Board squares are 
defined as an ordered pair <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN>
<tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> refers to the row while <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark> refers to the column. The maximum order 
of the square is 8. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input shall be in the form of: 

<P>
<PRE><TT>
<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <SPAN  CLASS="textit">Order of the square board (always integral)</SPAN> 
<BR><TT>.</TT> 		 
<BR><TT>.</TT> 		 
<BR><TT>.</TT> 		 
<BR><TT>END</TT> 		     <SPAN  CLASS="textit">End of input data</SPAN> 
</TT></PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The order of the square board followed by the length of the tour and the path the knight took presented in 
the format shown below. See sample output format. Note that the solutions may not necessarily be unique. 
In cases of non-unique solutions, show only one. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>                            

<P>
<PRE>
3                                       
4                                       
END
</PRE>                                      

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Order: 3                                          
Length: 2  
Path: (0,0), (1,2), (2,0) 
Order: 4 
Length: 5 
Path: (0,1), (2,0), (3,2), (1,3), (2,1), (0,2)
</PRE> 

<P>

______________________________________________________
2628||||||false||||||
<P>
Love is a many-splendored thing, or so they say. Many stories present such entangled love relations that it 
sickens anyone who tries to understand it. If one would study such entanglings (though one couldn't think 
of a reason why one would want to), a person can be in any of the 7 possible states: (assuming omniscience 
of all concerned)  

<P>
<DL COMPACT>
<DT>1.</DT>
<DD>Happy: if A loves B and only B, and B loves A and only A, <SPAN  CLASS="textit">then both A and B are happy</SPAN>.  
</DD>
<DT>2.</DT>
<DD>Loveless: if A loves no one, <SPAN  CLASS="textit">then A is loveless</SPAN>.  
</DD>
<DT>3.</DT>
<DD>Martyr: if A loves B and only B, and B loves A and one or more others, <SPAN  CLASS="textit">then A is a martyr</SPAN>.  
</DD>
<DT>4.</DT>
<DD>Philanderer: if A loves B and is loved back by B, and A also loves one or more others, <SPAN  CLASS="textit">then A is a        philanderer</SPAN>.  
</DD>
<DT>5.</DT>
<DD>Broken-hearted: if A loves B, and B is happy (see definition #1) or a philanderer (see definition #4), a martyr (see definition #3) or a narcissist (see definition #7), <SPAN  CLASS="textit">then A is broken-hearted</SPAN>.  
</DD>
<DT>6.</DT>
<DD>Hoping: if A loves B, and B is not loved back by the others B loves, and B does not love A, <SPAN  CLASS="textit">then A is hoping</SPAN>. 
</DD>
<DT>7.</DT>
<DD>Narcissist: if A loves oneself, <SPAN  CLASS="textit">then A is a narcissist</SPAN>.  
</DD>
</DL>

<P>
Precedence is decreasing from top to bottom (i.e. broken-heartedness takes precedence over hoping, and being a philanderer takes precedence over broken-heartedness). This means that a person cannot be in more than one state. 

<P>
Given a certain configuration of love relations, determine the people who are in each state.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input contains one or more test cases. In each test case, the first line contains the number of people, <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, and number of relations, <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>, involved. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines are the names of the people involved. The <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines following these shows the love relations. Love relation definitions are in the form `<TT><SPAN CLASS="MATH">&lt; <I>name</I>1 &gt;</SPAN>
<tex2html_verbatim_mark> loves <SPAN CLASS="MATH">&lt; <I>name</I>2 &gt;</SPAN>
<tex2html_verbatim_mark></TT>'. The number of people involved will not exceed 100. The input will be terminated by <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I> = 0</SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output for each case displays the states of each person, which will be of the form:  

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH">&lt; <I>name</I>1 &gt;</SPAN>
<tex2html_verbatim_mark> is <!-- MATH
 $<state \ of \ name1>$
 -->
<SPAN CLASS="MATH">&lt; <I>state</I>&nbsp;<I>of</I>&nbsp;<I>name</I>1 &gt;</SPAN>
<tex2html_verbatim_mark></TT> 
<BR><TT><SPAN CLASS="MATH">&lt; <I>name</I>2 &gt;</SPAN>
<tex2html_verbatim_mark> is <!-- MATH
 $<state \ of \ name2>$
 -->
<SPAN CLASS="MATH">&lt; <I>state</I>&nbsp;<I>of</I>&nbsp;<I>name</I>2 &gt;</SPAN>
<tex2html_verbatim_mark></TT> 
<BR>. 
<BR>. 
<BR>.

<P>

<P>
<BR>
An empty line should separate the output for each test case. Output is to be sorted alphabetically ascending by name by set of output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>                                               

<P>
<PRE>
8,8                                                        
A                                                          
B                                                          
C                                                          
D                                                          
E                                                          
F                                                          
G                                                          
H                                                          
A loves B                                                  
B loves A  
B loves C  
C loves D  
D loves C  
E loves D  
F loves G  
H loves H 
1,1 
A 
A loves A 
0,0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
A is Martyr 
B is Philanderer 
C is Happy 
D is Happy 
E is Broken-hearted 
F is Hoping 
G is Loveless 
H is Narcissist 
 
A is Narcissist
</PRE>  

<P>

______________________________________________________
2629||||||false||||||
<P>In graph theory, a graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> is a set of vertices <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> and a set of edges <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>. The edge set <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> contains ordered pairs of vertices <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> are in the vertex set <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>. The presence of an edge <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> in the edge set denotes that <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is adjacent to <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>.<P><P><BR>In an <SPAN CLASS="textbf">undirected</SPAN> graph, the presence of the edge <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> denotes that <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is adjacent to <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and that <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is also adjacent to <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>. An edge is a <SPAN CLASS="textbf">loop</SPAN> if both its vertices are identical (i.e. <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark>). A <SPAN CLASS="textbf">simple</SPAN> graph contains no loops. A <SPAN CLASS="textbf">path</SPAN> is a set of vertices and edges <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>e</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>, <I>e</I><SUB>2</SUB>, <I>v</I><SUB>3</SUB>, <I>e</I><SUB>3</SUB>,...<I>e</I><SUB>n</SUB>, <I>v</I><SUB>(n+1)</SUB>)</SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB>...<I>v</I><SUB>(n+1)</SUB></SPAN> <tex2html_verbatim_mark> are in the vertex set <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> of a graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>; <SPAN CLASS="MATH"><I>e</I><SUB>1</SUB>...<I>e</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> are in the edge set <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>e</I><SUB>1</SUB> = (<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>e</I><SUB>2</SUB> = (<I>v</I><SUB>2</SUB>, <I>v</I><SUB>3</SUB>),..., <I>e</I><SUB>n</SUB> = (<I>v</I><SUB>n</SUB>, <I>v</I><SUB>n+1</SUB>)</SPAN> <tex2html_verbatim_mark>. A graph is <B>connected</B> if there exists a path from vertex <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> to another vertex <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> for any two distinct vertices <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> in the vertex set of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR>Given a simple, undirected and connected graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, determine the maximum number of edges that can be removed from <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> given that <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> should remain connected.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains one or more test cases. For each case, the first line contains the number of vertices, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, and the number of edges, <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark>, in the graph. The following <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> lines contain vertex pairs <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>, which denote the edges connecting the vertices, labeled as <SPAN CLASS="MATH">1, 2, 3,..., <I>n</I></SPAN> <tex2html_verbatim_mark>. The input will be terminated by <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>e</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The program should return the maximum number of edges that can be removed from graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, one line per output. Leading or trailing white space characters are not allowed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4,6                                                               
1,2                                                               
1,3  
1,4  
2,3  
2,4  
3,4 
3,3 
1,2 
1,3 
2,3 
0,0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
1
</PRE><P>
______________________________________________________
2630||||||false||||||
<P>Aviabotics Inc. is a company that specializes in smart electronic toys. For this coming Christmas season, Aviabotics plans to rollout its latest electronic pet parrot toy named Yappie.<P><P><BR>Yappie basically repeats English sentences that it hears, as real parrots would do. For the cheaper version of the toy, only the following English grammar rules are allowed:<P><OL><LI>Subject + Verb To Be (i.e., IS or ARE) + Adjective or Adjective Verb<P><PRE><TT>
		 Examples: 		 A perfume is fragrant. 
<BR>
Belle is smiling. 
<BR>
The rock band members are adulated. 
</TT></PRE><P></LI><LI>Subject + Intransitive Verb<P><PRE><TT>
		 Examples: 		 The cat purrs. 
<BR>
The snake swallows.  
<BR>
A dog barks. 
</TT></PRE><P></LI><LI>Subject + Transitive Verb + Object<P><PRE><TT>
		 Examples: 		 The python swallows the cow. 
<BR>
The butcher cuts the meat. 
<BR>
The cat eats the rat. 
</TT></PRE><P></LI><LI>Subject or Object may contain an adjective and/or an adjective phrase that starts with THAT.<P><PRE><TT>
		 Example: 		 The black cat that purrs eats the rat that stinks.  
<BR>
</TT></PRE><P></LI><LI>The articles THE, A, AN may or may not be used. </LI></OL><P>When a person speaks multiple sentences, Yappie tries to combine statements as much as it can. Sentence combination takes place according to the following rules in decreasing priority:<P><DL><DT><STRONG>Rule 1.</STRONG></DT><DD>Statements of the form Subject-IS/ARE-Adjective are added into the statement of the form Subject-Transitive Verb-Object. (The order of the adjectives in the combined statement follows the order of the statements from where they come from).<P><PRE><TT>
Example: 		 		 The python is humongous. 
<BR>
The cow is spotted. 
<BR>
The python swallows the cow. 
<BR>
Yappie's Response: The humongous python swallows the spotted cow. 
</TT></PRE><P></DD><DT><STRONG>Rule 2.</STRONG></DT><DD>Statements of the form Subject-IS/ARE-Adjective are added into the statement of the form Subject-Intransitive Verb. (The order of the adjectives in the combined statement follows the order of the statements from where they come from).<P><PRE><TT>
Example: 		 		 The computer is old. 
<BR>
The computer crashes. 
<BR>
The computer is idiot. 
<BR>
Yappie's Response: The old idiot computer crashes. 
</TT></PRE><P></DD><DT><STRONG>Rule 3.</STRONG></DT><DD>When all statements with common Subject or Object are only of the form Subject-IS/ARE- Adjective, they are all combined into Subject-IS/ARE-Adjective with the last adjective preceded by ``AND". (The order of the adjectives in the combined statement follows the order of the statements from where they come from).<P><PRE><TT>
Example: 		 		 The cat is furry. 
<BR>
The cat is fat. 
<BR>
The cat is dirty. 
<BR>
Yappie's Response: The cat is furry, fat, and dirty. 
</TT></PRE><P></DD><DT><STRONG>Rule 4.</STRONG></DT><DD>When statements are of the form Subject-Transitive Verb-Object, they are combined such that one statement becomes the main sentence, and the other modifies the common Subject or Object by ``THAT". (The first statement that appears becomes the main sentence).<P><PRE><TT>
Example: 		 		 The big fish eats the medium fish. 
<BR>
The medium fish eats the small fish. 
<BR>
The small fish bites the big fish. 
<BR>
Yappie's Response:  The big fish eats the medium fish that eats the small fish that bites 
<BR>
the big fish. 
</TT></PRE><P></DD><DT><STRONG>Rule 5.</STRONG></DT><DD>Statements of the form Subject-Intransitive Verb are combined into any other statement form by using THAT<P><PRE><TT>
Example: 		 		 The dog bites the cat. 
<BR>
The cat purrs. 
<BR>
The dog barks. 
<BR>
Yappie's Response:  The dog that barks bites the cat that purrs. 
</TT></PRE><P></DD><DT><STRONG>Rule 6.</STRONG></DT><DD>Combinations of statements not stated above are simply repeated.<P><PRE><TT>
Example: 		 		 The snake slithers. 
<BR>
The snake swallows. 
<BR>
Yappie's Response: 		 		 The snake slithers. 
<BR>
The snake swallows. 
</TT></PRE><P></DD></DL><P>Write a program firmware that can be embedded in Yappie's memory, in time for the Christmas season.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains only one test case. A series of any number of statements each of which can be either of two types. The first type starts with the keyword `<TT>VERBS</TT>' followed by a colon (`<TT>:</TT>') and a list of transitive or intransitive verbs other than ``IS" or ``ARE". The verbs are delimited by a comma (`<TT>,</TT>'). The second type contains one or more ordinary English statements, terminated by periods (`<TT>.</TT>'), whose format is as described in the 5 grammar rules. The input always terminates with the word ``END".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>A combined sentence or a group of combined sentences (in any order) whose form follows the results of applying the 6 indicated combination rules.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
VERBS: bites,crashes,purrs 
VERBS: barks 
The dog is long-eared. 
The cat is furry. The computer is idiot. Snakes slither. 
The rat is small. 
VERBS: slither 
The cat is fat. 
The rat is gray. 
The dog bites the cat. The rat is stinking. 
The cat purrs. The computer crashes. 
The dog barks. 
The rat is stinking. 
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The long-eared dog that barks bites the furry fat cat that purrs. 
The idiot computer crashes. 
The rat is small, gray, and stinking. 
Snakes slither.
</PRE><P>
______________________________________________________
2631||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="819" HEIGHT="367" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2631.jpg ALT="\epsfbox{p2631.eps}"> <tex2html_verbatim_mark></DIV><P>Two polygons are similar if you can obtain the second polygon by a combination of scaling, rotating and flipping operations on the first polygon.<P>Your task is to determine if two given polygons are similar.<P>You are given two polygons whose sides are all horizontal and vertical lines. You are to determine if the two polygons are similar.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains one or more test cases. Each case contains two polygon definitions. A polygon definition is the number of the vertices of the polygon in the first line, followed by an ordered pair <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> of the vertices for the following lines. Format for each test case is shown below:<P><P><BR><!-- MATH
 $<number \ of \ vertices \ (n) \ of \ polygon \ 1>$
 --><SPAN CLASS="MATH">&lt; <I>number</I>&nbsp;<I>of</I>&nbsp;<I>vertices</I>&nbsp;(<I>n</I>)&nbsp;<I>of</I>&nbsp;<I>polygon</I>&nbsp;1 &gt;</SPAN> <tex2html_verbatim_mark><BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>1</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>2</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR>.<BR>.<BR>.<BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>n</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR><!-- MATH
 $<number \ of \ vertices \ (m) \ of \ polygon \ 2>$
 --><SPAN CLASS="MATH">&lt; <I>number</I>&nbsp;<I>of</I>&nbsp;<I>vertices</I>&nbsp;(<I>m</I>)&nbsp;<I>of</I>&nbsp;<I>polygon</I>&nbsp;2 &gt;</SPAN> <tex2html_verbatim_mark><BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>1</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>2</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR>.<BR>.<BR>.<BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>m</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><P><P><BR>Input is terminated by `<TT>0</TT>'.<P><P><BR>You can assume that the polygon resulting from connecting the vertices in sequence has only horizontal and vertical lines, and that the polygon formed is simple (i.e. it has no intersecting or overlapping edges).<P>All vertex coordinates are integers, ranging from -30000 to +30000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output `<TT>YES</TT>' if the polygons are similar; `<TT>NO</TT>', if otherwise -- one line per test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6                                                           
0,0                                                         
0,2  
1,2  
1,1  
2,1  
2,0  
6  
0,0  
0,2  
-1,2  
-1,1  
-2,1  
-2,0  
4  
0,0  
1,0  
1,1  
0,1  
4  
0,0  
2,0  
2,1  
0,1 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
YES 
NO
</PRE><P>
______________________________________________________
2632||||||false||||||
<P>
From her San Francisco flat, Zoe just received an email from her brother, Echo, who lives in Manila. She wanted to send an urgent reply but knows that Echo is often doing his rounds in the hospital. She needs a service to convert email to a message that can be sent via short-messaging service (SMS) to Echo's mobile phone. You need to write a program that shall convert email to SMS. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file contains one or more cases and each one is of the form: 

<P>

<P>
<BR>

<TT>TO</TT> 
<BR><!-- MATH
 $<email \ address>$
 -->
<SPAN CLASS="MATH">&lt; <I>email</I>&nbsp;<I>address</I> &gt;</SPAN>
<tex2html_verbatim_mark> 
<BR>. 
<BR>. 
<BR>. 
<BR><TT>MESSAGE</TT> 
<BR><SPAN CLASS="MATH"><I>text</I></SPAN>
<tex2html_verbatim_mark> 
<BR><TT>END</TT>

<P>

<P>
<BR>
where <!-- MATH
 $<email \ address>$
 -->
<SPAN CLASS="MATH">&lt; <I>email</I>&nbsp;<I>address</I> &gt;</SPAN>
<tex2html_verbatim_mark> refers to a recipient of the message and <SPAN CLASS="MATH"><I>text</I></SPAN>
<tex2html_verbatim_mark> refers to the message itself. 

<P>
There can be more than one recipient for each case. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each case, show the equivalent SMS message(s). Each SMS message is of the form: 

<P>

<P>
<BR>

<!-- MATH
 $cellphone \ number$
 -->
<SPAN CLASS="MATH"><I>cellphone</I>&nbsp;<I>number</I></SPAN>
<tex2html_verbatim_mark> 
<BR><SPAN CLASS="MATH"><I>smsc</I></SPAN>
<tex2html_verbatim_mark> 
<BR><SPAN CLASS="MATH"><I>message</I></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
where <!-- MATH
 $cellphone \ number$
 -->
<SPAN CLASS="MATH"><I>cellphone</I>&nbsp;<I>number</I></SPAN>
<tex2html_verbatim_mark> is the destination cellphone number, <SPAN CLASS="MATH"><I>smsc</I></SPAN>
<tex2html_verbatim_mark> is the SMS Center, which is the email address domain, and <SPAN CLASS="MATH"><I>message</I></SPAN>
<tex2html_verbatim_mark> is a fifty (50) character message.

<P>

<P>
<BR>
Note that each SMS message can only accommodate fifty (50) characters of data, exclusive of the 
<!-- MATH
 $cellphone \ number$
 -->
<SPAN CLASS="MATH"><I>cellphone</I>&nbsp;<I>number</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>smsc</I></SPAN>
<tex2html_verbatim_mark>. Email messages are subdivided into smaller messages of fifty (50) 
characters each before sending it via SMS. Words, however, cannot be split. 

<P>
An empty line separates the output of the test cases. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
TO 
&lt;+639199202002@manilatel.com&gt; 
MESSAGE 
Hello Echo! Please tell Oz to send me money asap. 
I need it to pay for plane fare from NY to London on a 
Concorde. Tell me when he already wired it. Thanks. 
END 
TO 
&lt;+669178408040@thaitel.com&gt; 
&lt;+852435123100@telhk.com&gt; 
&lt;+639199292299@cebutel.net&gt; 
MESSAGE 
Happy New Year! 
END
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
+639199202002 
manilatel.com 
Hello Echo! Please tell Oz to send me money asap. 
+639199202002 
manilatel.com 
I need it to pay for plane fare from NY to London 
+639199202002 
manilatel.com 
on a Concorde. Tell me when he already wired it. 
+639199202002 
manilatel.com 
Thanks. 

+669178408040 
thaitel.com 
Happy New Year! 
+852435123100 
telhk.com 
Happy New Year! 
+639199292299 
cebutel.net 
Happy New Year!
</PRE>  


______________________________________________________
2633||||||false||||||
From our previous contest, we know that Kamran the Believer inherited many of his grandpa's belongings. Apparently,
his grandpa had been a mathematician in his life with interests in puzzle solving, since he has made Kamran solve
another programming problem!

<P>
Grandpa had a big garden with many valuable walnut trees. He has written in his will that Kamran can inherit one
piece of square shaped land of a given size in the garden, such that its sides be parallel to the x and y axes.
Taking advantage of the fact that no other restrictions have been mentioned in the will, Kamran wants to choose
the land in which the most number of trees lie. Kamran is too wealthy now and thus too lazy to spend time and solve
another algorithmic problem. He has hired you to solve this problem for him.

<P>
You are given the location of all trees in the big garden and the size of the land to choose. You are to write a
program to find out where to choose the land so that the most number of trees lie in it. You may consider trees
as points in the plane and the land as a square. You are to find the position of the square such that it includes
as many points as possible. Note that the points on the border of the square are considered to be inside it.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by
the input data for each test case. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$">100</SPAN>), the
number of trees, and an integer <SPAN CLASS="MATH"><I>r</I></SPAN> (<!-- MATH
 $1 \le r \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$"><I>r</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$">1000</SPAN>), the length of the land's side, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each
containing two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>
(<!-- MATH
 $0 \le x, y \le 100,000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$">100, 000</SPAN>) representing the coordinates of a walnut tree. Note that all coordinates are pairwise distinct.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing the maximum number of trees that Kamran can own.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
3 1
1 2
2 1
4 3
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
2
</PRE>

<P>

______________________________________________________
2634||||||false||||||
cAfshung-Pizza chain, a door-to-door pizza delivery service for Hamedung, a Sildavya district, needs your help for
fastest possible pizza delivery plan. With a GIS device that shows all streets of the Hamedung, each delivery boy
can find a fast route to deliver the pizza to the place of order. The Elyasung Company that sells and supports
this GIS device needs your help to reprogram the device to provide even a faster route plan.

<P>

<P>
<BR>
Hamedung is a rectangular shape district with many two-way streets that are all rectilinear.  To show the map,
the GIS device uses text characters as shown in the sample test data. In this format, each one kilometer of a
street is shown by a dash (<TT>-</TT>) or a pipe (<TT><code>|</code></TT>) showing that the street is either in west-east or
in north-south
direction.  A plus (<TT>+</TT>) on the map indicates a sharp 90 degree turn (with length zero) on that position without
any traffic light. All such turns are marked with `<TT>+</TT>'. An intersection is shown by an integer <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \tau$"></SPAN> on that position.
<SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \tau$"></SPAN> is the timing of the traffic light at that intersection which can be either three or four way. To have a smooth
and accident-free district, the municipality of Hamedung has forced that every traffic light has only one green
light and two or three red lights for three or four intersections respectively. One of the lights in that
intersection remains green for <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \tau$"></SPAN> minutes (i.e., during <!-- MATH
 $[x, x + \tau)$
 -->
<SPAN CLASS="MATH">[<I>x</I>, <I>x</I> + <IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \tau$">)</SPAN> time for some <SPAN CLASS="MATH"><I>x</I></SPAN>) and others are red. In
the next <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \tau$"></SPAN> minutes, one other direction turns green as if the green light turns counter clockwise. This rule
is observed in all intersections.

<P>

<P>
<BR>
The time is set to zero at the beginning when the delivery boy starts moving. At this time, all traffic signals
are set such that only the southern light (or the northern light if no southern light exists) of each intersection
is set to green, and other lights at this intersection are set to red.

<P>
Note that the only positions that the driver can change his direction are: a turn (<TT>+</TT>), or an intersection
(represented by a digit). As an example, if we have a pattern like `<TT>-<code>|</code>-</TT>' in the map, the driver cannot cross
the pipe if he is moving from left to right or right to left, neither can he turn left or right, since there
is no intersection at this location.

<P>

<P>
<BR>
Given the complete map described above, the location of an Afshung-Pizza branch, marked by <TT>S</TT>, and the location
of the final delivery place, marked by <TT>D</TT>, you are to write a program for GIS device to automatically find the
fastest possible route to deliver pizza from <TT>S</TT> to <TT>D</TT>. Note the following assumptions:

<P>

<UL>
<LI><TT>S</TT> and <TT>D</TT> are parts of a street (replacing either a <TT>-</TT> or <TT><code>|</code></TT>)
</LI>
<LI><TT>S</TT> and <TT>D</TT> are not adjacent to any intersection or turn.
</LI>
<LI><TT>S</TT> and <TT>D</TT> are not adjacent to each other.
</LI>
<LI>Intersections and/or turns are at least one kilometer apart.
</LI>
<LI>`<TT>S</TT>', `<TT>D</TT>', `<TT>+</TT>', and each digit have zero kilometer length.
</LI>
<LI>Speed of delivery boy is one kilometer per minute.
</LI>
<LI>Traffic that faces a green light can move in all directions. No straight move or turns are allowed at red light.
</LI>
<LI>There is no traffic jam or other obstacles on the way.
</LI>
<LI>Asterisk characters (<TT>*</TT>) show the border of the district.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by the
input data for each test case. The first line of each test case contains two integer numbers: <SPAN CLASS="MATH"><I>N</I></SPAN> (<!-- MATH
 $1 \le N \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$">100</SPAN>) the
number of rows of the map, and <SPAN CLASS="MATH"><I>M</I></SPAN> (<!-- MATH
 $2 \le M \le 100$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$">100</SPAN>) the number of columns of the map. Followed by the first line,
there will be <SPAN CLASS="MATH"><I>N</I></SPAN> lines, each containing a string of length <SPAN CLASS="MATH"><I>M</I></SPAN>, consisting of `<TT>-</TT>', `<TT><code>|</code></TT>', `<TT>+</TT>',
 `', `<TT>*</TT>', `<TT>S</TT>', `<TT>D</TT>' or
digits from `<TT>1</TT>' to `<TT>9</TT>'. Also, assume that the total number of intersections and turns (<TT>+</TT>) is at most 100.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line in the output per test case containing a single number, the minimum time to drive
from <TT>S</TT> to <TT>D</TT>, if there exists, otherwise the word `<TT>impossible</TT>' (with lower-case letters).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
10 10
**********
*-D-3---+*
*   |   |*
*   | +-+*
*   |-|  *
*---4-1- *
*   | |  *
*   | |  *
*S--2-+  *
**********
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
15
</PRE>

<P>

______________________________________________________
2635||||||false||||||
The Ministry of housing is planning a huge construction project of several housing complexes. Each complex
includes several apartments to be sold to government employees at reasonable prices. The ministry has located
several big m×n pieces of land that can potentially be used for such construction project; one complex in each
land. The lands are all rectangular, each with <!-- MATH
 $m \times n$
 -->
<SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN> number of <!-- MATH
 $1 \times 1$
 -->
<SPAN CLASS="MATH">1&#215;1</SPAN> square blocks.
All housing complexes are <!-- MATH
 $h \times w$
 -->
<SPAN CLASS="MATH"><I>h</I>&#215;<I>w</I></SPAN> rectangles covering exactly <!-- MATH
 $h \times w$
 -->
<SPAN CLASS="MATH"><I>h</I>&#215;<I>w</I></SPAN> blocks of each containing land.

<P>

<P>
<BR>
The problem is that there are originally some old buildings, each covering exactly one block of a land, making
it impossible to locate enough free space for all the complexes in order to start the project. Therefore, the
ministry has to buy some of these buildings, and demolish them to free the needed space. The old buildings
belong to certain number of people. These people are angry of the possibility that their building may be bought
and demolished, especially because the government usually pays much less for their buildings compared to the
open market prices.

<P>

<P>
<BR>
In response to the protests, the ministry announces a ``fair" decision that if it buys some buildings in one
land, it will only choose those that belong only to one owner, and will buy all of them at reasonable price.
And, it promises not to buy buildings belonging to the same owner in other lands. Note that with this constraint,
there may be some lands in which building a complex is impossible. Trying to keep its promises, the ministry has
asked you to write a program to see how many housing complexes can be constructed at most with these conditions.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by
the input data for each test case. The first line of each test case contains five integers <SPAN CLASS="MATH"><I>k</I></SPAN> (<!-- MATH
 $1 \le k \le 30$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$">30</SPAN>), the
number of lands, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le m, n \le 50$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$"><I>m</I>, <I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$">50</SPAN>), the number of rows and columns in each land respectively, and <SPAN CLASS="MATH"><I>h</I></SPAN>
and <SPAN CLASS="MATH"><I>w</I></SPAN> (<!-- MATH
 $1 \le h, w \le 50$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$"><I>h</I>, <I>w</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$">50</SPAN>), the number of rows and columns a complex occupies. After the first line, there are
<!-- MATH
 $k \times m$
 -->
<SPAN CLASS="MATH"><I>k</I>&#215;<I>m</I></SPAN> lines in the input, representing <SPAN CLASS="MATH"><I>k</I></SPAN> lands, each by an <!-- MATH
 $m \times n$
 -->
<SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN> matrix. Each line contains a string of
length <SPAN CLASS="MATH"><I>n</I></SPAN> with no leading or trailing spaces. Each character in the strings represents a block in the land and may be an
upper case alphabetic character `<TT>A</TT>'..`<TT>Z</TT>', indicating the owner of the block, or the character `<TT>0</TT>'
indicating the block is free.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing the maximum number of housing complexes that can be
constructed for that test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
3 4 3 3 2
A0B
000
0A0
00B
AA0
00B
0B0
000
A0A
000
B00
B00
3 4 3 3 2
A0B
000
0A0
00B
AA0
00B
0B0
000
A0A
000
0B0
B00
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3
2
</PRE>

<P>

______________________________________________________
2636||||||false||||||
It is said that court intrigues started with people lying about other people, and then lying about other
people's lying, and so it went. The intriguers constantly looked for scapegoat who inevitably proved to
be someone with the least power, though not always the least morality.

<P>
We have faced a similar problem, but this time, in our malfunctioning spacecraft! There are a number of units
in the spacecraft. The units are so reliable that it would surprise us very much if more than one unit were
faulty. If more than one is faulty, we would lose the probe, so we are sure that exactly one unit is faulty
in our spacecraft.

<P>

<P>
<BR>
We know that each unit checks exactly two others, and each unit will be checked by at least one other unit.
A good unit will give accurate diagnosis of the units it checks. For example, if unit X is good and it says
that Y is faulty and Z is good, then, in fact, Y is faulty and Z is good. However, a bad unit is unreliable.
So, if unit X is faulty and makes the same statements, then Y may or may not be good, and Z may or may not be
good either. Note that a unit cannot check itself.

<P>
Now suppose that you have the reports from all units and your duty is to find which unit is indeed faulty.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2636img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2636img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by
the input data for each test case. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $3 \le n \le 100$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2636img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2636img1.gif
 ALT="$ \le$">100</SPAN>), the
number of units, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines each describing a unit and the result of its checks. The line starts with
a positive integer number which shows the identification number of the unit. After the id number, there are two
pairs of checked unit id's and check results. A check result is a single character which is either `<TT>Y</TT>' or `<TT>N</TT>',
showing whether the result of checking is good or faulty respectively. As an example, the fourth line in the Sample Input
section shows that <EM>unit 16 has checked unit 8 saying it is good, and has checked unit 32 saying it is faulty</EM>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing either the id number of the faulty unit, or the word
`<TT>impossible</TT>' (with lower-case letters), if it is impossible to find the faulty unit from the input data.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
5
2 16 Y 32 N
16 8 Y 32 N
32 8 N 4 Y
8 4 Y 2 Y
4 2 Y 16 Y
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
32
</PRE>

<P>

______________________________________________________
2637||||||false||||||
The RB Company is one of the pioneering companies in making electronic boards. This company has recently
faced a difficult problem to solve in designing its special power boards. Each power board is a flat plastic
plate with special red and/or blue colored plugs on it. The blue plugs are recognized as null poles, and the
red ones are phase poles. This company's special design requires that all the blue plugs should be
inter-connected with straight lines to make a simple blue polygon. All vertices of the resulting polygon
should be blue plugs, and any blue plug should be a vertex of this polygon. With similar conditions, all
the red plugs should make a red polygon. You may assume that no three plugs of the same color are co-linear,
i.e. lie on one line.

<P>

<P>
<BR>
The design problem is that safety precautions require that there should be no red and blue polygon intersections;
otherwise a disastrous explosion would be inevitable. This happens when the two polygons have non-empty intersection.
The RB engineers have realized that some configurations of red and blue plugs makes it impossible to have
non-intersecting red and blue polygons. They consider such configurations disastrous. Your task is to write
a program to help the RB engineers recognize and reject the disastrous configurations.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 5$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2637img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2637img1.gif
 ALT="$ \le$">5</SPAN>), the number of test cases, followed
by the input data for each test case. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>r</I></SPAN> (<!-- MATH
 $3 \le b, r < 10$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2637img1.gif
 ALT="$ \le$"><I>b</I>, <I>r</I> &lt; 10</SPAN>),
the number of blue and red plugs respectively, followed by <SPAN CLASS="MATH"><I>b</I></SPAN> lines, each containing two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> representing
the coordinates of a blue plug followed by <SPAN CLASS="MATH"><I>r</I></SPAN> lines, each containing two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> representing the coordinates
of a red plug. Note that all coordinates are pairwise distinct and are in range 0 to 100,000 inclusive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing `<TT>YES</TT>' if there exist non-intersecting polygons or `<TT>NO</TT>'
otherwise.
The output is considered to be case-sensitive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
4 4
2 2
4 2
2 4
1 1
2 5
2 6
3 3
1 3
3 3
1 1
3 1
2 3
2 2
1 4
3 4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
YES
NO
</PRE>

<P>

______________________________________________________
2638||||||false||||||
``Sigh! Where are those good old bloody days?" Pondered Bob, the old shark, the former slayer of the deep blue
waters, with his tears joining the infinite water of the ocean. Butchering for years, Bob's teeth has lost their
regular shape, and the poor old shark is now in trouble closing his jaws. He wants to program his PDA to help him
find the shape of his teeth when his jaws are closed and we want to help him write this program!

<P>
We name the sequence of Bob's lower teeth as LT and the sequence of his upper teeth as UT. For the sake of simplicity,
consider LT as a sequence of adjacent equilateral triangles (i.e., with equal sides). All bases of the triangles
lie on the same horizontal straight line. UT has a similar structure, except that the triangles are upside-down (Figure 1).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2638.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="\epsfbox{p2638.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1. Snapshot of Bob's teeth!

</DIV>

<P>
Assume the left endpoint of the base of the leftmost tooth in LT has the coordinates <SPAN CLASS="MATH">(0, 0)</SPAN>, so the bases of
all triangles in LT lie on the <SPAN CLASS="MATH"><I>x</I></SPAN> axis. We name the left end point of the base of the leftmost tooth in UT,
the <EM>reference point</EM>. Initially, the coordinates of the reference point is given such that:

<P>

<UL>
<LI>The tip of no two teeth in LT and UT have the same <SPAN CLASS="MATH"><I>x</I></SPAN> coordinates,
</LI>
<LI>UT is above LT, i.e. the <SPAN CLASS="MATH"><I>y</I></SPAN> coordinate of the reference point is greater than zero,
</LI>
<LI>LT and UT do not overlap at any point.
</LI>
</UL>

<P>
Given a placement of UT and LT conforming to the above conditions, UT starts falling downward such that the base
of the triangles remain horizontal during its fall, i.e. UT does not rotate. UT continues to fall, until it
touches some point in LT. At this time, UT slides downward (to the left or right) over LT until it cannot slide
any further. During this motion, LT is fixed and UT never rotates. Note that UT may have an initial position such
that it slides downward either from left or right, and falls below LT (Imagine the old shark in that state!).
Also it is possible that the tips of some upper teeth finally pass the line <SPAN CLASS="MATH"><I>y</I> = 0</SPAN> (the Dracula-style!).
Your program should determine whether UT falls down from left or right, or otherwise, finds the final position
of the reference point after it stops moving.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by
the input data for each test case. The first line of each test case contains integer <SPAN CLASS="MATH"><I>L</I></SPAN> (<!-- MATH
 $1 \le L \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$"><I>L</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$">10</SPAN>) the number of
triangles in LT, followed by <SPAN CLASS="MATH"><I>L</I></SPAN> lines each describing a triangle in LT, containing one integer number
<SPAN CLASS="MATH"><I>b</I></SPAN> (<!-- MATH
 $1 \le b \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$"><I>b</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$">100</SPAN>),
the side of the triangle. The next line of the input consists of three numbers <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, and <SPAN CLASS="MATH"><I>U</I></SPAN>. The first two numbers
are the initial <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates of the reference point and are arbitrary real numbers. <SPAN CLASS="MATH"><I>U</I></SPAN> is the number of
triangles in UT (<!-- MATH
 $1 \le U \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$"><I>U</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$">10</SPAN>). After this line, there are <SPAN CLASS="MATH"><I>U</I></SPAN> lines each describing a triangle in LT, containing
one integer number <SPAN CLASS="MATH"><I>b</I></SPAN> (<!-- MATH
 $1 \le b \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$"><I>b</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$">100</SPAN>), the side of the triangle.

<P>
In order to avoid floating-point arithmetic errors, you may assume that the input has the property that during
the motion of UT, the distance between tips of any two triangles in LT and UT is never less than 0.1.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing a pair of real numbers, rounded to three digits after decimal
point, which are <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of the reference point after UT stops moving. If UT falls down from left
of LT, the output line should contain the word `<TT>WM</TT>', and if it falls down from the right of LT, it should be `<TT>MW</TT>'.
The output is considered to be case-sensitive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2
10
10
2 20 2
10
10
1
10
50 50 1
10
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
5.000 8.660
MW
</PRE>

<P>

______________________________________________________
2639||||||false||||||
It had been a year since Swamp County Computing established a functional programming group. Your
(non-functional programming) group is going to throw a surprise party for the anniversary. Now the functional
folks really like skew binary numbers for some reason. ``Easy to increment and decrement!" they say. Your task
is to write a program to convert decimal integers to skew binary in the format they like. This will help in making
banners and other party material.

<P>

<P>
<BR>
Number representations are made up of a list of digits. Call the lowest order digit the rank 0 digit, the next,
rank 1, etc. For example, in decimal representation, digits are 0-9,  the rank 0 digit has weight 1, the rank 1
digit has weight 10, and the rank <SPAN CLASS="MATH"><I>i</I></SPAN> digit has weight <SPAN CLASS="MATH">10<SUP>i</SUP></SPAN>. In binary representation, the digits are 0 and 1, and
the rank <SPAN CLASS="MATH"><I>i</I></SPAN> digit has weight <SPAN CLASS="MATH">2<SUP>i</SUP></SPAN>. In skew binary representation, the digits are 0, 1, and 2, and the rank <SPAN CLASS="MATH"><I>i</I></SPAN> digit
has weight <SPAN CLASS="MATH">2<SUP>i + 1</SUP> - 1</SPAN>.

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER RULES=GROUPS>
<COL ALIGN=CENTER><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
Rank  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  Weight </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
1    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
2    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
3    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 15 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
4    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 31 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
5    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 63 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
6    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 127 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
7    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 255 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2639img1.gif
 ALT="$ \vdots$"></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2639img1.gif
 ALT="$ \vdots$"></SPAN></TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>
Allowing the digit 2 in the skew binary means there may be several ways to represent a given number. However the
convention is that the digit 2 may only appear as the lowest rank non-zero digit. This makes the representation unique.

<P>
In this problem, you should use a special way to write skew binary numbers as a list of ranks of non-zero digits
in the number. The digit 2 is represented by the rank of the digit appearing twice in the list. Note that this
means that <EM>only</EM> the first two ranks in the list may be equal.

<P>
Each rank is a decimal integer, and is separated from the next rank by a comma (`<TT>,</TT>'). A list is started by a `<TT>[</TT>'
and ended by a `<TT>]</TT>'. For example, the decimal number 5, which has the skew representation 12, should be written
as <TT>[0,0,1]</TT>. Decimal 0 is an empty list: <TT>[]</TT>.

<P>
Input consists of decimal numbers, one per line,

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2639img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2639img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed
by <SPAN CLASS="MATH"><I>t</I></SPAN> lines, each containing a single decimal number with no leading or trailing white space. Each number will
be in the range 0 ...100663270 (inclusive).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing the input decimal number, with no leading zeros or spaces,
a single space, and the skew binary equivalent in list format with no leading or trailing spaces. Within the
list each rank should have no extra leading zeros or leading or trailing spaces.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
0
1
2
3
4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0 []
1 [0]
2 [0,0]
3 [1]
4 [0,1]
</PRE>

<P>

______________________________________________________
2640||||||false||||||
<P>Your chemistry lab instructor is a very enthusiastic graduate student who clearly has forgotten what their undergraduate Chemistry 101 lab experience was like. Your instructor has come up with the brilliant idea that you will monitor the temperature of your mixture every minute for the entire lab. You will then plot the rate of change for the entire duration of the lab.<P>Being a promising computer scientist, you know you can automate part of this procedure, so you are writing a program you can run on your laptop during chemistry labs. (Laptops are only occasionally dissolved by the chemicals used in such labs.) You will write a program that will let you enter in each temperature as you observe it. The program will then calculate the difference between this temperature and the previous one, and print out the difference. Then you can feed this input into a simple graphing program and finish your plot before you leave the chemistry lab.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input is a series of temperatures, one per line, ranging from -10 to 200. The temperatures may be specified up to two decimal places. After the final observation, the number 999 will indicate the end of the input data stream. All data sets will have at least two temperature observations.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Your program should output a series of differences between each temperature and the previous temperature. There is one fewer difference observed than the number of temperature observations (output nothing for the first temperature). Differences are always output to two decimal points, with no leading zeroes (except for the ones place for a number less than 1, such as 0.01) or spaces.<P>After the final output, print a line with `<TT>End of Output</TT>'<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10.0
12.05
30.25
20
999
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2.05
18.20
-10.25
End of Output
</PRE><P>
______________________________________________________
2641||||||false||||||

<P>
The recent improvements in robotics have allowed archaeologists to
explore previously unknown areas of the pyramids in Egypt.  You have
been commissioned to write a program to help one of these robots
navigate.  To deal with some of the winding passages and the thick
stone that absorbs radio waves, the robot will need its own
autonomous navigation.  You must develop a way for the robot to
navigate itself out of mazes it may find itself in using only its
vision of nearby walls.

<P>
Your solution will be a program that selects a path to navigate the
robot out of a maze.  The challenging part of this problem is that
your program must be interactive.  At each step the program will be
given a description of the spaces surrounding the robot.  Your program
must then decide the direction in which to move, send the command to
the robot, and read in the description of the spaces around the robot
after the move.

<P>
For convenience, the maze is a Cartesian grid.  Each space on the grid
is empty space (` '), a stone wall (<code>X</code>), or a space outside the
maze (<code>O</code>) (the letter, not the digit).  The description of the
space your robot receives will be a 3x3 grid, with your robot in the
center denoted by a <code>+</code>.  The maze is at most <!-- MATH
 $100\times 100$
 -->
<SPAN CLASS="MATH">100&#215;100</SPAN>
squares.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Example</A>&nbsp;</FONT>
</H2>
As an example, consider the following maze that your robot is
currently in (your robot will not receive this as input):
<PRE>
OOOOOOOOOO
OXXXXXXXXO
OXXXX XXXO
O      +XO
OXXXX XXXO
OXXXXXXXXO
OOOOOOOOOO
</PRE>
The first input your program receives is the area surrounding its
starting location:
<PRE>
XXX
 +X
XXX
</PRE>
Your program issues a direction to move, by outputting one of
<code>N</code>, <code>S</code>, <code>E</code>, or <code>W</code> followed by a newline.  You
may only move in one of these four directions.  Your program outputs
its movement and then receives the next set of surrounding squares (your
program's output is indicated by <code>&gt;</code> and its input indicated by
<code>&lt;</code>.  You should not expect or generate these characters.  They
are for illustration in this example only.)
<PRE>
&gt;W
&lt; XX
&lt; +
&lt; XX
&gt;W
&lt;X X
&lt; +
&lt;X X
</PRE>

<P>
Your program must continue until it issues the instruction that moves
the robot onto an <code>O</code> square.  There will be a valid path from
your robot's start position to an O square.  An invalid move into a
wall (<code>X</code>) will result in an ``Incorrect Output'' judgment.

<P>
Your robot may be started at any empty position inside the maze.


______________________________________________________
2642||||||false||||||
<P>It's a simple requirement your company has, really--every document should be spell-checked before it's sent out to a customer. Unfortunately, while word processing documents are easily spell-checked, your employees have not been checking email every time they send out a message. So you've come up with a little improvement. You are going to write a program that will check email on its way out. You will spell-check each message, and if you find any spelling errors, it will be returned to the sender for correction.<P>When you announced this plan, one of your coworkers fell off their chair laughing, saying that you couldn't possibly anticipate every name, technical acronym, and other terms that might appear in an email. Undaunted, however, you are going to test-run your code with an online dictionary and some sample emails you have collected.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of two sections, the dictionary and the emails. The first line of input specifies the number of words in the dictionary, followed by that many lines, with one word per line. There is no whitespace before, after, or in any words, although there may be apostrophes or hyphens in the words, which are considered part of the word (i.e.&nbsp;``<TT>bobs</TT>'' is different than ``<TT>bob's</TT>''. There will be no duplicate words. All words will be in lower case.<P>Following that are the emails. The first line of this section has the number of emails in the input. Following that line begins the first email. It has been preprocessed, so it consists of one word per line, with no punctuation (other than apostrophes and hyphens) or whitespace, and all words are in lower case. The last word in the email is followed by a line with only `<TT>-1</TT>'. Each email will have at least one word.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each email, you must either print:<P><P><BR><TT>Email <SPAN CLASS="MATH"><I>X</I></SPAN> is spelled correctly.</TT><P><P><BR>where <SPAN CLASS="MATH"><I>X</I></SPAN> begins with 1 and counts up. Or, if a word is found that is not in the dictionary, print out:<P><P><BR><TT>Email <SPAN CLASS="MATH"><I>X</I></SPAN> is not spelled correctly.</TT><P><P><BR>followed by a list of unknown words in the order that you find them, one per line. If an unknown word is found multiple times, it should be printed multiple times.<P>There are no spaces between datasets. Following the output for the final dataset, print a line stating `<TT>End of Output</TT>'<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
alice
am
bitterly
i
leaving
you
1
dear
bob
i
am
leaving
you
bitterly
alice
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Email 1 is not spelled correctly.
dear
bob
End of Output
</PRE><P>
______________________________________________________
2643||||||false||||||
<P>Many techniques for compressing digital graphics focus on identifying and describing regions of a single uniform character. Here is a simple technique for compressing black-and-white images (which could be easily extended to color). The basic idea is to repeatedly split the original picture in half, either vertically or horizontally, until each of the resulting sub-pictures contains only a single color.<P>A rectangular digital graphic is described by a ``compression-expression,'' defined as follows:<P><BLOCKQUOTE>Each compression-expression begins with a two-bit tag, which may be followed by additional compression-expressions depending upon the tag value. The tag values are interpreted as follows:</BLOCKQUOTE><P><DL><DT><STRONG>00</STRONG></DT><DD>A square region that consists entirely of black pixels. This region may be a single pixel, a 2<SPAN CLASS="MATH">&#215;</SPAN>2 square, a 3<SPAN CLASS="MATH">&#215;</SPAN>3 square, etc., depending upon context.<P></DD><DT><STRONG>11</STRONG></DT><DD>A square region that consists entirely of white pixels. This region may be a single pixel, a 2<SPAN CLASS="MATH">&#215;</SPAN>2 square, a 3<SPAN CLASS="MATH">&#215;</SPAN>3 square, etc., depending upon context.<P></DD><DT><STRONG>10</STRONG></DT><DD>A horizontal split. This is followed by two compression expressions. The picture produced by a split is formed by taking the pictures denoted by each of those two expressions and placing them along-side one another, the first picture to the left and the second to the right.<P>Horizontal splits are only possible between two pictures of the same height.<P></DD><DT><STRONG>01</STRONG></DT><DD>A vertical split. This is followed by two compression expressions. The picture produced by a split is formed by taking the pictures denoted by each of those two expressions and placing them along-size one another, the first picture on the top and the second underneath it.<P>Vertical splits are only possible between two pictures of the same width.</DD></DL><P>When interpreting splits, it may be necessary to change the scale of the components to make them compatible. For example, given a 2:6 picture A (i.e., 2 pixels wide, 6 pixels high) and a 3:4 picture B:<UL><LI>A vertical split involving these two is possible only if we scale A by a factor of 3, making it 6:18, and scale B by a factor of 2, making it 6:8. The resulting combined picture would have size 6:26.<P></LI><LI>A horizontal split involving these two is possible only if we scale A by a factor of 2, making it 4:12, and scale B by a factor of 3, making it 9:12. The resulting combined picture would have size 13:12. </LI></UL><P>For example, using <code>X</code>'s and ` 's to denote black and white pixels, respectively, the expression `<TT>00</TT>' denotes the picture<P><PRE>
     ---
     |X|
     ---
</PRE>and the expression `<TT>1000010011</TT>' denotes<PRE>
    -----
    |XXX|
    |XX |
    -----
</PRE><P>Examination of this format will show that for any given compression-expression, there is some smallest picture that can be denoted by that expression, but the same expression can also denote pictures twice the size of the smallest one, three times the size, etc.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each line of the input will contain a compression-expression, presented as a single line containing an arbitrary number of <TT>0</TT>'s and <TT>1</TT>'s. The input ends following the line with the final compression-expression.<P>All input sets used in this problem will be valid compression-expressions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each line of input, your should print the smallest black-and-white picture denoted by that expression, drawn in <code>X</code>'s (black) and ` 's (white), as above, and framed in <code>-</code> and <code>|</code> characters as shown in the examples. There should be no characters or whitespace outside your frame except for the newlines terminating each line.<P>There should be no blank lines in your output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
00
10001011100100101110111101111000100011
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
---
|X|
---
----------------
|XXXX    XXX   |
|XXXX    XXX   |
|XXXX    XXX   |
|XXXX       XX |
----------------
</PRE><P>
______________________________________________________
2644||||||false||||||
<P>
After a successful military campaign, the King decided to reward his
two most able commanders with a title and a portion of the newly
conquered territory. Each of the newly appointed Barons will be
allowed to construct a castle in the new territory and to collect
taxes from the surrounding lands.

<P>
The King has commissioned a map of the new territory, marked off in a
grid. Each square on the grid is approximately the distance a man on
horseback could ride in one day. Each Baron will choose a square in
which to build his castle. As the senior commander, you will choose first.

<P>
For the sake of this selection, castles will be presumed to lie at the
center of the selected square. The two castles must be built in
squares whose centers are more than three days' ride from one another.

<P>
Each Baron will be allowed to collect taxes from the peasants in any
square whose center is 6 days' ride or less from that Baron's castle
and that is closer to that Baron's castle than to the other Baron's.
Squares that are equidistant from the two castles do not contribute
taxes to either castle.

<P>
Tensions had been rising between you and your fellow commander
throughout the military campaign. You are certain that, eventually,
the two of you will be fighting for control of the entire
territory. Until then, the collection of taxes is crucial to your
military build-up. You must make sure that you collect more tax money
than your rival, and that you outstrip him by as much as possible.

<P>
Your advisor has studied the records kept by the scribes of the former
King of this territory, and so has been able to estimate the tax
revenue that can be expected from each square. Based on this, you want
to select the site for your own castle that guarantees the best
possible advantage taxes no matter what space your rival baron may
select.

<P>

<P>
<BR>

<B>NOTE:</B> Distances are Euclidean (distance between the center of two
squares as the crow flies).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
   The first line of the input will contain an integer indicating the number of test cases to process. Each test case will be preceded by a blank line.
   The first line of each test case will contain two integers, <SPAN CLASS="MATH"><I>w</I></SPAN>, and <SPAN CLASS="MATH"><I>h</I></SPAN>,
   denoting the width and height (in numbers of squares) of the
   map. <SPAN CLASS="MATH"><I>w</I></SPAN> and <SPAN CLASS="MATH"><I>h</I></SPAN> will be in the range 1-50, inclusive.

<P>
This is followed by <!-- MATH
 $w \times h$
 -->
<SPAN CLASS="MATH"><I>w</I>&#215;<I>h</I></SPAN> integers distributed across an
   arbitrary number of subsequent lines. Each of these represents the
   expected tax collection (in gold pieces per year) for one map
   square. They occur in the order:
     <!-- MATH
 \begin{displaymath}
(0,0) (1, 0), \ldots, (w-1, 0) (0,1) (1, 1), \ldots, (w-1,h-1)
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
(0, 0)(1, 0),...,(<I>w</I> - 1, 0)(0, 1)(1, 1),...,(<I>w</I> - 1, <I>h</I> - 1)
</DIV><P></P>
Each item will be in the range 0-40, inclusive. A value of 0
   denotes water or land that is otherwise uninhabitable--castles cannot
   be built on those squares.

<P>
All maps used as input in this problem will be large enough to
   guarantee that both castles can be placed on a non-zero square, no
   matter where the first one is placed (i.e., you cannot crowd your
   rival entirely off the map).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
   Output from for each dataset consists of a single line of the form:

<P>

<P>
<BR>

<TT>Place your castle at: <SPAN CLASS="MATH"><I>X</I></SPAN> <SPAN CLASS="MATH"><I>Y</I></SPAN></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> are two integers, separated by a single space,
   denoting the optimal placement of your castle, indexed from 0.

<P>
If there is more than one location on the map that may be chosen to
   achieve the same maximal advantage over your rival, any one of those
   positions will be an acceptable answer. Print a blank line between test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

7 7
3 4 1 0 0 0 0
2 1 1 0 0 0 0
1 1 1 1 0 0 0
1 1 1 0 1 1 1
0 0 0 1 1 1 2
0 0 0 0 1 2 1
0 0 0 0 1 3 4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Place your castle at: 3 4
</PRE>

<P>

______________________________________________________
2645||||||false||||||
<P>
It's said that ``Necessity is the mother of invention,'' but some people
think that ``Laziness'' is a more likely parent.

<P>
Hubert Greenthumb hated digging fence posts. But he knew that, without
a fence around his garden, deer from the nearby woods would eat his
vegetables before he could harvest them.

<P>
Being something of a tinkerer, he retired to his workshop with a small
garden tractor, some out-of-date computer chips, and a couple of robot
arms he had picked up at a bankruptcy auction from a failed ``.com''
high-tech company. After two days of work, he emerged as the proud
inventor of the Greenthumb Automatic Garden Fence Layer
(pat. pending).

<P>
To his skeptical wife (who observed that he could easily have built
the fence in half the time it took to construct this machine), he
explained that he needed only to program in the desired fence shape,
and the machine would proceed to chug around the yard, laying down a
fence in 1-foot sections until the job had been completed.

<P>
Hubert proceeded to key in instructions to enclose a square area, 25
feet on a side, of his 100' by 100' yard. He set the machine to
operating and went inside for a celebratory drink.

<P>
When he emerged, he discovered that the machine had laid down fence in
an elaborate, possibly random walk about his lawn. Unwilling to
actually admit that anything had gone wrong, he announced his
intention to plant within the garden actually laid out by the machine,
as if he had wanted it that way all along. Any section of the yard
that was no longer accessible to the deer (enclosed by the fence)
would be considered as garden space.

<P>
``Fine,'' sighed his wife, ``but we'll need to know just how many square
feet of garden we have so that we can buy an appropriate amount of
seeds.''  Hubert gamely began to trace out the fence laid down by the
machine. ``Let's see, it went North for 5 feet, then West for 3 feet, ...''

<P>
Note: Hubert's yard can be divided into a grid of <!-- MATH
 $100 \times 100$
 -->
<SPAN CLASS="MATH">100&#215;100</SPAN> feet, with
each grid box being 1 foot by 1 foot.  The robot moves along the edges
of the boxes.  As the robot moves, it builds a fence from vertex to
vertex of the grid (intersections of the lines).

<P>

<P>
<BR>

<B>Note:</B> Because the robot moves along the edges of the grid, you can
ignore the amount of space the fence occupies.  For example, if the
robot moves North one, East one, South one, and West one, it has
enclosed one square foot of garden space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input will contain the number of data sets.  The
are no blank lines before or after each data set.

<P>
The first line of each data set will contain three integers (<SPAN CLASS="MATH"><I>X</I></SPAN> <SPAN CLASS="MATH"><I>Y</I></SPAN> <SPAN CLASS="MATH"><I>Z</I></SPAN>),
indicating the <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> position of the starting point on the grid, and
the number of moves the robot makes.  (<SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN>, and <SPAN CLASS="MATH"><I>Z</I></SPAN> are all
non-negative integers, <SPAN CLASS="MATH"><I>X</I></SPAN> is the number of feet from the western edge,
<SPAN CLASS="MATH"><I>Y</I></SPAN> is the number of feet from the southern edge of the yard).  (<SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN>
range from 0 to 100, inclusive.)

<P>
The next <SPAN CLASS="MATH"><I>Z</I></SPAN> lines will contain a character <SPAN CLASS="MATH"><I>D</I></SPAN> and an integer <SPAN CLASS="MATH"><I>F</I></SPAN>,
separated by a space.  The character will indicate the direction
(<code>N</code>, <code>S</code>, <code>E</code>, <code>W</code>) and the integer will indicate
how far in that direction the robot traveled.

<P>
The path will never leave the 100' by 100' yard. The path may or may
not be closed. It may cross itself or retrace its steps (walk along
lines in the grid it previously laid fence).  It automatically stops
building fence until it moves onto an edge without fence on it.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each data set, output a single line of the form

<P>

<P>
<BR>

<TT>Data Set <SPAN CLASS="MATH"><I>N</I></SPAN>: <SPAN CLASS="MATH"><I>Q</I></SPAN> square feet.</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>N</I></SPAN> is the data set number (from 1) and <SPAN CLASS="MATH"><I>Q</I></SPAN> is the number of square
feet that are enclosed so they may be used for the garden.

<P>
After the last line of output, print `<TT>End of Output</TT>' on a line by
itself.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
0 0 8
N 25
E 25
N 25
E 25
S 25
W 25
S 25
W 25
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Data Set 1: 1250 square feet.
End of Output
</PRE>

<P>

______________________________________________________
2646||||||false||||||
<P>The Cantor set was discovered by Georg Cantor. It is one of the simpler fractals. It is the result of an infinite process, so for this program, printing an approximation of the whole set is enough.<P>The following steps describe one way of obtaining the desired output for a given order Cantor set:<OL><LI>Start with a string of dashes, with length <SPAN CLASS="MATH">3<SUP>order</SUP></SPAN> </LI><LI>Replace the middle third of the line of dashes with spaces. You are left with two lines of dashes at each end of the original string. </LI><LI>Replace the middle third of each line of dashes with spaces. Repeat until the lines consist of a single dash. </LI></OL><P>For example, if the order of approximation is 3, start with a string of 27 dashes:<PRE>
    ---------------------------
</PRE>Remove the middle third of the string:<PRE>
    ---------         ---------
</PRE>and remove the middle third of each piece:<PRE>
    ---   ---         ---   ---
</PRE>and again:<PRE>
    - -   - -         - -   - -
</PRE>The process stops here, when the groups of dashes are all of length 1. You should not print the intermediate steps in your program. Only the final result, given by the last line above, should be displayed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each line of input will be a single number between 0 and 12, inclusive, indicating the order of the approximation. The input stops when end-of-file is reached.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>You must output the approximation of the Cantor set, followed by a newline. There is no whitespace before or after your Cantor set approximation. The only characters that should appear on your line are `<code>-</code>' and ` '. Each set is followed by a newline, but there should be no extra newlines in your output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
0
1
3
2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
-
- -
- -   - -         - -   - -
- -   - -
</PRE><P>
______________________________________________________
2647||||||false||||||
<P>The Chambers Construction Company has a major contract to deliver a tile floor on schedule for its largest customer (Moneybags to Spare Inc). Unfortunately, the clerk who ordered tiles won the lottery just after ordering the tiles for this room, and did not write down where to place each tile to make the room fit. Normally this would not be a problem, except the tiles that were ordered are not all squares. They are each made up of 4 square segments, but will take on all possible shapes shown here:<PRE>
XXXX    XX      XX       XX     X       XXX      X
        XX       XX     XX      XXX     X       XXX
</PRE>Given that the project is under an extremely tight schedule, it is not possible to reorder the tiles in a more standard manner. Instead when the 9 tiles come in, you will need to figure out how to place the tiles (or if there is no way to set the pieces correctly). The tiles in the box are ordered from A to I. The room that needs to be tiled is 6 segments on each side.<P><P>A middle-manager at CCC has come up with an algorithm that they will give to the tiler to tile the room. The tiler has come to you to write a program to determine what pattern will be successful without having to try all of them with the physical tiles. The tiler will always start with the top left corner of the room. After placing the first tile, they will work their way from left to right and from top to bottom, placing the next tile such that it will fill the leftmost open space on the top line with an open space.<P>For instance, if the layout currently had the following tiles (A and B) placed:<PRE>
AABBBZ
 AA B
</PRE>The next tile to place would be placed such that position Z is filled.<P>To make matters easiest, the tiler will always place the earliest tile in the box that could successfully fill that position. For instance, if either tile B or C could fill that position, the tiler will choose B. Furthermore, they will always place the tile as they are oriented above if possible. They will then attempt to rotate the tile 90 degrees clockwise and place it (possibly doing this 3 times).<P><P><BR><B>NOTE:</B> Remember the tiles may be rotated, but they may not be flipped.<P><P><BR>A tile may not extend outside the 6<SPAN CLASS="MATH">&#215;</SPAN>6 room, or overlap with another tile. A room is considered successfully tiled if the given set of tiles completely tile the room using the above algorithm.<P>The tiler will continue laying tiles according to this algorithm until finishing the room, or discovering that the room cannot be finished using the previous choices. If the room cannot be finished, the tiler will backtrack, considering the remaining rotations of the previous tile, and then the remaining tile. The tiler will continue to backtrack, one tile at a time, until all combinations have been tried or the room cannot be successfully tiled.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Input</A>&nbsp;</FONT></H2>The first line of input will indicate how many data sets are included. (<SPAN CLASS="MATH"><I>N</I></SPAN>)<P>The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines will each contain 9 numbers. These numbers indicate the shape of each tile The first entry on the line will correspond to tile A, the second to tile B, ..., the 9th for tile I. Each number will reflect the layout of a tile as specified above (the left most layout is 1, the rightmost is 7).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, the first line of output should indicate the index of the data set, starting with 1. (`<TT>Data Set 1</TT>')<P>The next line of input will indicate the floor may or may not be tiled successfully. (`<TT>The floor may be tiled.</TT>' or `<TT>The floor may not be tiled.</TT>').<P>The next 6 lines would then display the graph of floor illustrating the final layout. To make it easy to understand, each tile set should be marked A-I corresponding to the order they were in the input line. Each line will have exactly 6 characters indicating the tile segment, followed by a newline.<P>A blank line should appear after each data set.<P>The line stating `<TT>End of Output</TT>' should appear after the last data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
2 2 2 2 2 2 2 2 3
1 1 2 1 1 2 1 1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Data Set 1
The floor may not be tiled.

Data Set 2
The floor may be tiled.
AAAABD
CCEGBD
CCEGBD
FFEGBD
FFEGII
HHHHII

End of Output
</PRE><P>
______________________________________________________
2648||||||false||||||
<P>Determine water allocations.<P>Capitalists prefer to know who owns things, and water is no exception. Nature recycles a random amount of water each year and places it in various sources (lakes, rivers, and underground aquifers). Contracts for various portions of that water are written.<P>Unfortunately, there may not be enough water available in a drought year to fulfill each contract. The resolution to this is via priorities. The highest priority contracts are fulfilled before the next tier of priorities. If there is insufficient water to fulfill the requirements of all the contracts of a given priority, what remains of the water source is divided proportionally among all the contracts of that priority.<P><P><BR>For example, suppose a water source has 1,000,000 (one million) cubic feet of water available in a given year. That water source has the following requirements:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Name</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Priority</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Requirement</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>500,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>250,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>700,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>300,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>100,000</TD></TR></TABLE></DIV><P><P><BR>The allocation for that year would be that contract A and B get full allotments. Contracts C and D divide the remainder proportionally: C's contract represents 70% of the contracts with priority 2, and D's contract represents the other 30%. Thus C would obtain 70% of the remaining 250,000 cubic feet of water, or 175,000 cubic feet of water, and D would be allocated the remainder (30% of 250,000 cubic feet, or 75,000 cubic feet). The lower priority contract E would be allocated no water.<P>In this problem you are to calculate water allocations for various sources.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain a sequence of one or more allocation problems. Each allocation problem will have a first line describing the source, followed by one or more lines describing the contracts on that source.<P>The first line of an allocation problem has the form<P><P><BR><TT>" <SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark>", <SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="97" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_VOLUME$"></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>The <SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark> will be a string of no more than 80 printable ASCII characters. It will be enclosed by double quotes but not contain any double quotes. The <SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="97" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_VOLUME$"></SPAN> <tex2html_verbatim_mark> will be an integer no more than 1 trillion: 1000000000000. White space may appear on the line, and, unless inside the quoted name, should be ignored. If <SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark> is <TT>"END"</TT>, then this indicates no more allocation problems are present in the input file and your program should not process any further data.<P>Following a line indicating another source, there will be zero or more allocations of that source. These are lines of the form<P><P><BR><TT>" <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark>", <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="109" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_PRIORITY$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="97" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_VOLUME$"></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>The <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark> will be a string of no more than 80 printable ASCII characters. It will be enclosed by double quotes but not contain any double quotes. The <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="109" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_PRIORITY$"></SPAN> <tex2html_verbatim_mark> will be a positive integer with magnitude no larger than 1000. The <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="97" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_VOLUME$"></SPAN> <tex2html_verbatim_mark> will be a non-negative integer no more than 1 trillion. White space may appear on the line, and, unless inside the double quotes, should be ignored. If <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark> is <TT>"END"</TT>, then this indicates no more contracts are present for this source.<P>Note that <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="109" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_PRIORITY$"></SPAN> <tex2html_verbatim_mark> will be a non-decreasing sequence for each allocation problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output file has a format similar to the input file. The differences are that<P><UL><LI>No additional whitespace is allowed. </LI><LI>In the place of <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="97" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_VOLUME$"></SPAN> <tex2html_verbatim_mark>, you should instead report <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="84" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_AWARD$"></SPAN> <tex2html_verbatim_mark>, which is the actual volume awarded to the contract (truncated to its integer part). </LI><LI>The end of a list of contracts is indicated by the line<P><P><BR><TT>"END",0,0</TT> </LI><LI>The end of the list of allocation problems is indicated by the line<P><P><BR><TT>"END",0</TT> </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
"Le River",1000000
  "People",1,500000
  "Farms",1,250000
  "Mine",2,700000
  "Golf Course",2,300000
  "Car Wash",3,100000
  "END",0,0
"Le Lake",1000000
  "A",1,500000
  "B",1,250000
  "D",2,300000
  "E",3,100000
  "END",-1,0
"END",0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
"Le River",1000000
"People",1,500000
"Farms",1,250000
"Mine",2,175000
"Golf Course",2,75000
"Car Wash",3,0
"END",0,0
"Le Lake",1000000
"A",1,500000
"B",1,250000
"D",2,250000
"E",3,0
"END",0,0
"END",0
</PRE><P>
______________________________________________________
2649||||||false||||||
<P>Determine the right or left handedness of some dice.<P>Imagine looking at a six-sided die so two sides face east-west, two face north-south, and the last two sides face up-down. You could write down the number of dots on each side in the order: east, west, north, south, up, down.<P>Normal dice are labeled so that the sum of opposing sides sum to seven. This constraint is sufficient to reduce dice into two categories, ``Left handed" and ``Right handed." Left handed dice can be oriented so that the east face is 1, the north face is 2, and the <SPAN CLASS="textit">down</SPAN> face is 3. Right handed dice can be oriented so that the east face is 1, the north face is 2, and the <SPAN CLASS="textit">up</SPAN> face is 3.<P>In this problem, given the face values of a sequence of dice, you are to determine the handedness of the dice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain a sequence of one or more face descriptions of a dice. These will be written as six digits (not separated by white space) on a single line. The numbers will represent (in order) the face values of the east, west, north, south, up, and down faces of the given dice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Other than the standard leader and trailer, the output file simply has the word `<TT>left</TT>' or `<TT>right</TT>' for each dice in the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
162534
162543
526134
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
right
left
left
</PRE><P>
______________________________________________________
2650||||||false||||||
<P>Be a match maker.<P>The dating service MatchMaker.com has a list of men and a list of women. The number of men is equal to the number of women. In addition to their names, MatchMaker.com keeps track of two attributes about each of their clients: the person's IQ (intelligence quotient) and the person's height. MatchMaker.com wishes to match each man with a woman in an optimal way, so that the deviations of the two attributes in the resulting man / woman pairs are minimized.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of one or more data sets of the form<P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(1)&nbsp;<I>WOMAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(1)&nbsp;<I>WOMAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(1)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(2)&nbsp;<I>WOMAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(2)&nbsp;<I>WOMAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(2)</SPAN> <tex2html_verbatim_mark><BR>.<BR>.<BR>.<BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(<I>N</I>)&nbsp;<I>WOMAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(<I>N</I>)&nbsp;<I>WOMAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(<I>N</I>)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>MAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(1)&nbsp;<I>MAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(1)&nbsp;<I>MAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(1)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>MAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(2)&nbsp;<I>MAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(2)&nbsp;<I>MAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(2)</SPAN> <tex2html_verbatim_mark><BR>.<BR>.<BR>.<BR><SPAN CLASS="MATH"><I>MAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(<I>N</I>)&nbsp;<I>MAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(<I>N</I>)&nbsp;<I>MAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(<I>N</I>)</SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> will be a positive integer not larger than 13. The <SPAN CLASS="MATH"><I>NAME</I></SPAN> <tex2html_verbatim_mark> of men and women will consist of no more than 11 lower case alphanumeric characters (a-z, 0-9). The <SPAN CLASS="MATH"><I>IQ</I></SPAN> <tex2html_verbatim_mark> will be an integer in the range 10..199. The <SPAN CLASS="MATH"><I>HEIGHT</I></SPAN> <tex2html_verbatim_mark> will be an integer in the range 145..189. One or more blank spaces will separate the <SPAN CLASS="MATH"><I>NAME</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>IQ</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>HEIGHT</I></SPAN> <tex2html_verbatim_mark> values, but there will be no leading or trailing white space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> man-woman pairs in the input data set, there will be <SPAN CLASS="MATH"><I>N</I> + 2</SPAN> <tex2html_verbatim_mark> lines of output in the format:<P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(1)&nbsp;<I>MAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(1)&nbsp;<I>PAIR</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$">(1)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(2)&nbsp;<I>MAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(2)&nbsp;<I>PAIR</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$">(2)</SPAN> <tex2html_verbatim_mark><BR>.<BR>.<BR>.<BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(<I>N</I>)&nbsp;<I>MAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(<I>N</I>)&nbsp;<I>PAIR</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$">(<I>N</I>)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>TOTAL</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$"></SPAN> <tex2html_verbatim_mark><P><P><BR>Each woman-man pair name is separated by exactly one blank space. The <SPAN CLASS="MATH"><I>PAIR</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$"></SPAN> <tex2html_verbatim_mark> is defined as the absolute value of the difference in IQ, plus the absolute value of the difference in height of the pair.<P>The <SPAN CLASS="MATH"><I>TOTAL</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$"></SPAN> <tex2html_verbatim_mark> is the sum of the <SPAN CLASS="MATH"><I>PAIR</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$"></SPAN> <tex2html_verbatim_mark>. The crucial constraint on the output is that the pairing should minimize the <SPAN CLASS="MATH"><I>TOTAL</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$"></SPAN> <tex2html_verbatim_mark> compared to all possible man-woman pairings. Note that there may be more than one such minimal configuration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7
mindy    70 145
jennifer 80 155
kathy    90 165
allison 100 175
alice   105  156
jenna   110  158
mary    115  160
john   110   175
jack   85    170
steve  115   170
bill   105   149
bob     80   155
thomas  75   179
mike   120   168
3
mindy 100   180
jenny 120   155
kathy 105   168
jack 104    169
bob  119    156
bill  99    179
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>    

<P>
<PRE>
7
mindy thomas 39
jenna mike 20
allison john 10
kathy jack 10
mary steve 10
alice bill 7
jennifer bob 0
96
3
jenny bob 2
kathy jack 2
mindy bill 2
6
</PRE><P>
______________________________________________________
