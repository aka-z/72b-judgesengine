2651||||||false||||||
<P>Compute the checksum digit for ISBN codes.<P>Practically every book that has been published during the past thirty years can be uniquely identified by its International Standard Book Number (ISBN). An example of an ISBN is<P><P><BR><TT>963-10-0604-2</TT>.<P><UL><LI>An ISBN has 13 characters. </LI><LI>Exactly three of the 13 characters are hyphens.<UL><LI>The first (leftmost) character of the ISBN is not a hyphen. </LI><LI>The next-to-last character of the ISBN is a hyphen. </LI><LI>No two hyphens occupy adjacent positions. </LI></UL></LI><LI>The last (rightmost) character is either a decimal digit (<TT>0</TT>..<TT>9</TT>) or an upper case <TT>X</TT>. </LI><LI>The nine characters which are not in the rightmost position and are not hyphens are decimal digits. </LI></UL><P>The rightmost character is known as the <SPAN CLASS="textit">check digit</SPAN>. It can actually be calculated from the other digits, according to the following steps (as each step is stated, it will be illustrated using the example <TT>963-10-0604-2</TT>).<P><OL><LI>Assign numbers 10,9,8,... as the respective ``weights" to the first, second, third, ... digit:<P><P><BR><TABLE COLS=10 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Digit</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Weight</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD></TR></TBODY></TABLE><P></LI><LI>Calculate the <EM>weighted sum</EM> by adding the products obtained by multiplying each of the first nine digits by its weight:<P><DIV ALIGN="CENTER">10*9 + 9*6 + 8*3 + 7*1 + 6*0 + 5*0 + 4*6 + 3*0 + 2*4 = 207.</DIV><P></LI><LI>The check digit is the smallest non-negative number that can be added to the weighted sum in order to get a number that is divisible by 11. The check digit is always in the range 0..10. If it is equal to 10, we denote it by an upper case <TT>X</TT>. In the given example, the check digit is 2, because 207 + 2 = 209, which is divisible by 11. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain one or more lines. Each line will contain the first 11 characters of an ISBN, starting in column 1.<P>The input will not contain any white spaces, except for the end-of-line characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>In the output, each incomplete ISBN from the input will be completed: the third hyphen and the check digit will have been added. The output will contain one ISBN per line, starting at column 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0-07-109219
0-534-95054
963-10-0604
3-462-01666
1-890880-01
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0-07-109219-6
0-534-95054-X
963-10-0604-2
3-462-01666-0
1-890880-01-9
</PRE><P>
______________________________________________________
2652||||||false||||||
<P>Pseudo-drive an LED display.<P><DIV ALIGN="CENTER"><IMG WIDTH="378" HEIGHT="661" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2652.gif ALT="\epsfbox{p2652.eps}"> <tex2html_verbatim_mark></DIV><P>A standard digital LED display is <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> blocks (digits) of the device in the figure. There are eight wires tied to the microcontroller for each of the eight led segments in the block. You are to write the conversion of decimal numbers to a format suitable for driving such a display.<P>The convention for an LED driver is to write a logical 1 when the corresponding segment is <SPAN CLASS="textit">off</SPAN>, and to write a 0 when the segment is <SPAN CLASS="textit">on</SPAN>.<P>The basic digit formats corresponding to the segment labels in the figure are as follows:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=10 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Digit</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=8><SPAN CLASS="textbf">Segment</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Hex</SPAN></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">7</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">6</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">5</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">4</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">3</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">2</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">1</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">0</SPAN></TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x88</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0xDB</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0xA2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x92</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0xD1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x94</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x84</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0xDA</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0x80</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0xD0</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR>The hex column comes from considering each segment value as one bit of a byte, with segment 7 the most significant bit and segment 0 as the least significant bit. This is the byte written to the control port for the LED segment to conform to the corresponding digit.<P>Turning off bit 7 (the most significant bit) enables the display of the decimal point. For example, displaying a ``0". on an LED block corresponds to writing binary 0000 1000, or hexademcimal 08, to the segment driver port.<P>In this problem, you are to generate the byte values to be written to an led display driver to display decimal numbers in various fixed point formats.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain a sequence of decimal formatting problems. These will be written as three comma-separated numbers on a line:<P><P><BR><TT><SPAN CLASS="MATH"><I>WIDTH</I></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>PRECISION</I></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>VALUE</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>The <SPAN CLASS="MATH"><I>WIDTH</I></SPAN> <tex2html_verbatim_mark> will be the width of the display, which will be between 1 and 12 digits. The <SPAN CLASS="MATH"><I>PRECISION</I></SPAN> <tex2html_verbatim_mark> will be the number of decimal places after the decimal point which should be displayed. <SPAN CLASS="MATH"><I>PRECISION</I></SPAN> <tex2html_verbatim_mark> will always be non-negative and smaller than <SPAN CLASS="MATH"><I>WIDTH</I></SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="MATH"><I>VALUE</I></SPAN> <tex2html_verbatim_mark> is the value to be displayed, which will always be non-negative with magnitude less than <SPAN CLASS="MATH">10<SUP>WIDTH</SUP> - 1</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>VALUE</I></SPAN> <tex2html_verbatim_mark> will have fewer than 64 digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Here are the general display rules:<P><UL><LI>The padding will always be on the left with blanks (byte 0xFF). </LI><LI>The decimal value will be rounded to the precision defined. If the magnitude of the number does not allow for the display of all the requested digits of precision, then the value will be rounded to the available digits on the display. A value exactly between two rounding choices should be rounded so that the last digit of the rounded value is even. For example, 0.0015 would round to 0.002 with three digits of precision, while 0.0045 would round to 0.004. </LI><LI>Values with magnitude less than 1 will be displayed with a leading `<TT>0.</TT>'(byte 0x08) </LI><LI>The decimal point is always displayed. </LI></UL><P>Other than the standard leader an trailer, the output file simply has the bytes to be written to the display driver in hexadecimal format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8,0,0.15707963267948966192313216916398
8,1,0.15707963267948966192313216916398
8,2,0.15707963267948966192313216916398
8,3,0.15707963267948966192313216916398
8,0,1.5707963267948966192313216916398
8,1,1.5707963267948966192313216916398
8,2,1.5707963267948966192313216916398
8,3,1.5707963267948966192313216916398
8,4,1.5707963267948966192313216916398
8,5,1.5707963267948966192313216916398
8,6,1.5707963267948966192313216916398
8,7,1.5707963267948966192313216916398
8,1,15.707963267948966192313216916398
8,1,157.07963267948966192313216916398
8,1,1570.7963267948966192313216916398
8,1,15707.963267948966192313216916398
8,1,157079.63267948966192313216916398
8,1,1570796.3267948966192313216916398
8,1,15707963.267948966192313216916398
1,0,0
1,0,1
1,0,2
1,0,3
1,0,4
1,0,5
1,0,6
1,0,7
1,0,8
1,0,9
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
FF FF FF FF FF FF FF 08
FF FF FF FF FF FF 08 A2
FF FF FF FF FF 08 DB 84
FF FF FF FF 08 DB 94 DA
FF FF FF FF FF FF FF 22
FF FF FF FF FF FF 5B 84
FF FF FF FF FF 5B 94 DA
FF FF FF FF 5B 94 DA DB
FF FF FF 5B 94 DA 88 80
FF FF 5B 94 DA 88 80 88
FF 5B 94 DA 88 DA D0 84
5B 94 DA 88 DA D0 84 92
FF FF FF FF FF DB 14 DA
FF FF FF FF DB 94 5A DB
FF FF FF DB 94 DA 08 80
FF FF DB 94 DA 88 00 88
FF DB 94 DA 88 DA 50 84
DB 94 DA 88 DA D0 04 92
DB 94 DA 88 DA D0 84 12
08
5B
22
12
51
14
04
5A
00
50
</PRE><P>
______________________________________________________
2653||||||false||||||
<P>Determine the validity of a sequence of triominos plays.<P><DIV ALIGN="CENTER"><IMG WIDTH="605" HEIGHT="615" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2653a.gif ALT="\epsfbox{p2653a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig. 1: Triominos board layout. N1 is the location for the first play. Grey triangles are considered ``upward" and white triangles are considered ``downward".</DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="601" HEIGHT="613" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2653a.gif ALT="\epsfbox{p2653b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig. 2: Board after seven legal plays. Note that all pieces have adjacent edges and matching values on vertices. The turn of the play is written as 'a', 'b', 'c', ..., 'g' on the center of the piece.</DIV><P>The game of triominos is played on a board of infinite extent which follows the pattern shown in figure 1. There are 76 triangular play pieces with a digit on each vertex. The digits are in the range 0 through 5 with possible repetition on a given game piece. The 76 pieces represent all possible vertex labels up to a rotation of the piece.<P><P><BR>Some example pieces, reading the vertex values clockwise would be ``000", ``010" and ``025". Note, however, that ``250" and ``502" are simply rotations of the single piece ``025". This means that ``250" and ``502" cannot both be played in the same game: they are the same piece.<P>Play proceeds as follows: The first piece is drawn at random and placed on the board at location ``N1." After this, play proceeds in turns. Each player places a piece so that:<P><DL COMPACT><DT>(1)</DT><DD>The piece has at least one edge adjacent to the edge of another piece already on the board.</DD><DT>(2)</DT><DD>The piece matches all vertex values of adjacent vertices.</DD></DL><P>We can ignore the particulars of the remaining rules of the game.<P>The point of this problem is, given a sequence of plays, you are to determine if they represent valid plays of the game in three respects:<P><DL COMPACT><DT>(1)</DT><DD>The placement of pieces follows the above rules.</DD><DT>(2)</DT><DD>No piece is used more than once</DD><DT>(3)</DT><DD>No space is occupied more than once.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain one or more sequences of plays. Each sequence of plays will be separated by a single blank line. Each particular play is written in the form:<P><P><BR><SPAN CLASS="MATH"><I>LOCATION</I>&nbsp;<I>PIECE</I></SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>LOCATION</I></SPAN> <tex2html_verbatim_mark> is the label for the location where the piece is played. For example, the first play should always be ``N1" (without the quotes). The offset values in the location name will never exceed 100. For example, neither <TT>S1E107</TT> nor <TT>N223W33</TT> will appear in the input file.<P><P><BR><SPAN CLASS="MATH"><I>PIECE</I></SPAN> <tex2html_verbatim_mark> is the listing of the digits of the vertices of the piece written in clockwise order. The first vertex written is the top-most vertex for an ``upward" triangle, and the bottom-most vertex for a ``downward" triangle.<P><P><BR>For example, an input file representing the plays given in figure 2, followed by the same pieces with plays 'c' and 'd' transposed is given at the sample input section. Note that the first sequence of plays represents a legal sequence of plays, while the second one does not. This is because the third move in the second sequence is not edge-adjacent to any previous play.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Other than the standard leader and trailer, the output file simply has the word `<TT>valid</TT>' or `<TT>invalid</TT>' on separate lines for each play sequence in the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
N1 403
S1 230
N1E1 044
N1E2 430
N1E3 341
S1E2 203
S1E1 022

N1 403
S1 230
N1E2 430
N1E1 044
N1E3 341
S1E2 203
S1E1 022
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
valid
invalid
</PRE><P>
______________________________________________________
2654||||||false||||||
<P>Find trucking routes between two terminal stations.<P>The Truckee Freight Company has a network consisting of a number of <EM>terminal stations</EM> and <EM>transfer stations</EM>.<P><UL><LI>At the terminal stations, the company deals with its customers, i.e., they accept cargo from senders and deliver cargo to recipients. When a cargo is shipped from a particular terminal station (the ``source") to another terminal station (the ``destination"), it must pass through one or more transfer stations. </LI><LI>The company's stations are ordered into a tree-like hierarchy. </LI><LI>The main transfer station is at the highest level of the hierarchy (the root of the tree). </LI><LI>Every station (be it a terminal station or a transfer station), except the main transfer station, is connected to exactly one station on the next higher level of the hierarchy, called the parent station. A terminal station is not connected to any other station except for its parent. A transfer station is connected to one or more stations on the next lower level of the hierarchy; its children. </LI><LI>The entire network will have at least two terminal stations. </LI><LI>Every station appears only once in the shipping network, and is labeled by a unique upper case letter. </LI></UL><P>Consider the example shown in the figure. The main transfer station is T, and its children are B, W, D, and E. The terminal stations are F, H, R, J, K, W, L, and E. The transfer stations are T, B, M, and D.<P><DIV ALIGN="CENTER"><IMG WIDTH="559" HEIGHT="334" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="\epsfbox{p2654.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Graph representation of the trucking network <TT>T(B(FHM(RJK))WD(L)E)</TT></DIV><P>Given the particular arrangement of routes for the Truckee Freight Company, you are to determine routes for transporting a list of customer packages.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain a sequence of routing problems separated by a single blank line. A given routing problem will have the form:<P><P><BR><SPAN CLASS="MATH"><I>NETWORK</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="119" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_TERMINAL$"><IMG WIDTH="99" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_STATION$">(1)&nbsp;<I>DEST</I><IMG WIDTH="119" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_TERMINAL$"><IMG WIDTH="99" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_STATION$">(1)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="119" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_TERMINAL$"><IMG WIDTH="99" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_STATION$">(2)&nbsp;<I>DEST</I><IMG WIDTH="119" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_TERMINAL$"><IMG WIDTH="99" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_STATION$">(2)</SPAN> <tex2html_verbatim_mark><BR>.<BR>.<BR>.<BR><SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="119" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_TERMINAL$"><IMG WIDTH="99" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_STATION$">(<I>N</I>)&nbsp;<I>DEST</I><IMG WIDTH="119" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_TERMINAL$"><IMG WIDTH="99" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_STATION$">(<I>N</I>)</SPAN> <tex2html_verbatim_mark><P><UL><LI><SPAN CLASS="MATH"><I>NETWORK</I></SPAN> <tex2html_verbatim_mark> is a parenthesized expression version of the routing network. For example, the network in figure 1 would be appear as<P><P><BR><TT>T(B(FHM(RJK))WD(L)E)</TT><P><P><BR>In this notation, the children of a node are listed in parenthesis after the node itself. A valid grammar for such expressions is<P><PRE><TT>
		 <SPAN  CLASS="textbf">main-transfer-station ::= transfer-station</SPAN> 
<BR><P>
		 <SPAN  CLASS="textbf">transfer-station ::= letter ``(" children ``)"</SPAN> 
<BR><P>
		 <SPAN  CLASS="textbf">terminal-station ::= letter</SPAN> 
<BR><P>
		 <SPAN  CLASS="textbf">children ::= child <SPAN CLASS="MATH">|</SPAN>
<tex2html_verbatim_mark> child children</SPAN> 
<BR><P>
		 <SPAN  CLASS="textbf">child ::= transfer-station <SPAN CLASS="MATH">|</SPAN>
<tex2html_verbatim_mark> terminal-station</SPAN> 
<BR><P>
		 <SPAN  CLASS="textbf">letter ::= ``A" <SPAN CLASS="MATH">|</SPAN>
<tex2html_verbatim_mark> ``B" <SPAN CLASS="MATH">|</SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH">|</SPAN>
<tex2html_verbatim_mark> ``Z"</SPAN>
</TT></PRE><P>Here , the vertical bar means a logical ``or" and the quoted items mean those literal symbols.<P></LI><LI><SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="119" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_TERMINAL$"><IMG WIDTH="99" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_STATION$">(<I>k</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>DEST</I><IMG WIDTH="119" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_TERMINAL$"><IMG WIDTH="99" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2654.gif ALT="$ \_STATION$">(<I>k</I>)</SPAN> <tex2html_verbatim_mark> are the single uppercase characters representing which distinct terminal stations a customer package starts and where it should end. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Other than the standard leader and trailer, the output file has a line of output for each line of input:<P><UL><LI>The network configuration is echoed to the output file in the same format as the input. </LI><LI>For each route in a given sequence of routes, the package path is written on a single line in the form:<P><P><BR><TT><SPAN CLASS="MATH"><I>STATION</I>(1)</SPAN> <tex2html_verbatim_mark>-&gt; <SPAN CLASS="MATH"><I>STATION</I>(2)</SPAN> <tex2html_verbatim_mark>-&gt;<SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>-&gt; <SPAN CLASS="MATH"><I>STATION</I>(<I>N</I>)</SPAN> <tex2html_verbatim_mark></TT><P><P><BR>The route with the fewest number of transfers is always chosen. </LI><LI>Like the input file, multiple routing problems are separated by single blank line. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
T(B(FHM(RJK))WD(L)E)
F H
R H
H R
J E
L F

M(AB)
A B
B A
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
T(B(FHM(RJK))WD(L)E)
F-&gt;B-&gt;H
R-&gt;M-&gt;B-&gt;H
H-&gt;B-&gt;M-&gt;R
J-&gt;M-&gt;B-&gt;T-&gt;E
L-&gt;D-&gt;T-&gt;B-&gt;F

M(AB)
A-&gt;M-&gt;B
B-&gt;M-&gt;A
</PRE><P>
______________________________________________________
2655||||||false||||||
<P>
Be hated by the free world.

<P>
You never had any friends, and don't really want any anyways, and so you have decided to collect email addresses from web pages for direct e-mail advertising.

<P>
The text delivered to a web browser is usually marked up HTML, which may contain email addresses of the form:

<P>

<P>
<BR>

<TT>user&#64;server</TT>

<P>

<UL>
<LI>Both <TT>user</TT> and <TT>server</TT> are of the form <TT>alpha.numeric.with.dots</TT>. 

<P>
By  <TT>alpha.numeric.with.dots</TT>, we mean a sequence of one or more characters which are alphabetic (<TT>A</TT>-<TT>Z</TT>,<TT>a</TT>-<TT>z</TT>), numeric (<TT>0</TT>-<TT>9</TT>), hyphens (<TT>-</TT>), underbars (<TT>_</TT>) and/or periods (<TT>.</TT>), with the following restrictions on periods:

<UL>
<LI>The sequence neither starts nor ends with a period.
</LI>
<LI>No periods are adjacent. 
</LI>
</UL>
</LI>
<LI>Email addresses are preceded by the beginning of the file, or some character other than a letter (<TT>A</TT>-<TT>Z</TT>,<TT>a</TT>-<TT>z</TT>), digit (<TT>0</TT>-<TT>9</TT>), hyphen (<TT>-</TT>), or underbar (<TT>_</TT>).
</LI>
<LI>Email addresses are succeeded by the end of the file, or some character other than a letter (<TT>A</TT>-<TT>Z</TT>,<TT>a</TT>-<TT>z</TT>), digit (<TT>0</TT>-<TT>9</TT>), hyphen (<TT>-</TT>), or underbar (<TT>_</TT>).
</LI>
<LI>If the scanned text contains a sequence of the form

<P>

<P>
<BR>

<TT>first&#64;second&#64;third</TT>

<P>

<P>
<BR>
Then the output should contain <TT>first&#64;second</TT> and <TT>second&#64;third</TT> as email addresses.  In a longer run, each pair split by an -sign should appear as an email address in the output.
</LI>
</UL>

<P>
The point of this problem is to extract and record the email addresses embedded in other text.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file will contain zero or more lines of ASCII text.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Other than the standard leader and trailer, the output file has each email address found in the input file in the order it was found (duplicates not removed).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
bob@banks.com wrote:
&gt;&gt; What does &lt;tt&gt;x=7&lt;/tt&gt; mean for this problem?  For
&gt;&gt; example,
&gt;&gt;
&gt;&gt;   ..a@a@aa@aaa@aaa..a@a@aa@aaa@aaa..a@a..@a...a@..@..
&gt;&gt;
&gt;&gt; this scrolling @-example from jim@jones.com.
&gt;&gt;
&gt;&gt; &lt;a href="mailto:Bobby@mail.bobsbanks.com"&gt;Bob&lt;/a&gt;
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
bob@banks.com
a@a
a@aa
aa@aaa
aaa@aaa
a@a
a@aa
aa@aaa
aaa@aaa
a@a
jim@jones.com
Bobby@mail.bobsbanks.com
</PRE>

______________________________________________________
2656||||||false||||||
<P>The Swamp Count Sheriff's Department has captured several computers which they think contain important evidence. But there are thousands of files on them and the data in question may be encrypted. The task of your team is to write a program that will analyze each file and produce a report of the distribution of byte values in the file. This, along with other information, will be used to select files to be investigated further.<P>Consider a file to be made up of 8-bit bytes (0..255). A compact way of representing a group of byte values is a bitmap. That is, for a given character, say `A' which has decimal value 65, bit 65 in the bit map will be on. It can be printed conveniently in hexadecimal with 64 characters. For example, a group consisting only of the so-called printing characters (32..126) plus newline (10) looks like:<P><DIV ALIGN="CENTER"><TT>00200000FFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000</TT></DIV><P>A Chi<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> test is a measure of how a group of numbers are distributed. In this case, the numbers are the byte values.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">Chi<SUP>2</SUP> = <IMG WIDTH="126" HEIGHT="61" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2656img1.png ALT="$\displaystyle {\frac{{\sum(f_{i}-(N/r))^{2}}}{{(N/r)}}}$"></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>i</I> = 0..255</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>f</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the count of bytes with value <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of bytes in the file, and <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> is 256. Also of interest is the distribution using only the values found in the file. In this case, <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is a list consisting of all <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>f</I><SUB>j</SUB> <IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2656img1.png ALT="$ \neq$"> 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> is the length of that list.<P>Also calculate a measure of the `compressed' length of the file. Considering each byte value to be a symbol, the number of bits needed can be measured by<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">- <IMG WIDTH="27" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2656img1.png ALT="$\displaystyle \sum$"><I>f</I><SUB>i</SUB>log<SUB>2</SUB>(<I>f</I><SUB>i</SUB>/<I>N</I>)</DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH">log<SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH">log</SPAN> <tex2html_verbatim_mark> to the base 2. Report the answer in bytes, which is the least integer greater or equal to the above divided by 8.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is standard input terminated by end-of-file. Note that the file is <EM>binary</EM>, that is, all characters, including newlines, are significant.<P><P><BR><B>Note:</B> The Sample Input below is a hex dump of the sample binary file. Use the UNIX command ``<TT>od -A x -t x1 filename</TT>" to display the contents of a binary file as hexadecimal byte values.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The report has two fields. The first field is of fixed length 15 and contains a label or an integer, each left adjusted. Any integer should have no leading zeros. The second field can be an integer (again with no leading zeros), a bitmap, or a floating point number, all left adjusted. Use uppercase when printing bitmaps. The format of a floating point number is one digit before the decimal point and three after, with a power-of-ten exponent using a lower case `<TT>e</TT>', a sign, and two digits.<P>The first line has the label `<TT>length</TT>' and the length of the file. The second line has the label `<TT>all</TT>' and the bitmap of all byte values that appear in the file.<P>The next 1-to-5 lines detail the most commonly occuring byte values in the file. The first field is an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and, the second is the bitmap of all byte values that occur <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> times in the file. Print the five highest values of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> in decending order. If a file has fewer than five values of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, print only those. Note that there will always be at least one line, because, you will not be given a zero length file.<P>Next print a line with the label `<TT>chisq</TT>' and the floating point value of the Chi<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> test, followed by a line with the label `<TT>nzchisq</TT>' and the floating point value of the Chi<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> test using only the values found in the file. Finally, print the label `<TT>minlen</TT>' and the estimate of the compressed length of the file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
000000 20 60 31 32 33 34 35 36 37 38 39 30 2d 3d 5c 7e
000010 21 40 23 24 25 5e 26 2a 28 29 5f 2b 7c 0a 71 77
000020 65 72 74 79 75 69 6f 70 5b 5d 51 57 45 52 54 59
000030 55 49 4f 50 7b 7d 0a 61 73 64 66 67 68 6a 6b 6c
000040 3b 27 41 53 44 46 47 48 4a 4b 4c 3a 22 0a 7a 78
000050 63 76 62 6e 6d 2c 2e 2f 5a 58 43 56 42 4e 4d 3c
000060 3e 3f 0a 65 65 65 65 65 65 65 65 65 65 0a
00006e
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
length              110
all                 00200000FFFFFFFFFFFFFFFFFFFFFFFE00000000000000000000000000000000
11                  0000000000000000000000000400000000000000000000000000000000000000
5                   0020000000000000000000000000000000000000000000000000000000000000
1                   00000000FFFFFFFFFFFFFFFFFBFFFFFE00000000000000000000000000000000
chisq               4.485e+02
nzchisq             9.945e+01
minlen              88
</PRE><P>
______________________________________________________
2657||||||false||||||
<P>A Personal Video Recorder (PVR) is similar to a VCR in that that it records and plays back TV shows. However, the PVR records shows to disk rather than tape. You have been hired by the startup company, Potato++, to develop the show recording scheduler software module for their prototype PVR. One of the most useful features of a PVR is the ability to select shows and series to record by show title from an on-screen guide. You don't have to look up and keep track of show start/end date/time and channel. If a show moves to a different day, time or channel, you don't have to reprogram, because the PVR keeps track of the schedule updates.<P>The PVR receives data that allows it to maintain a guide database for all shows in the upcoming two weeks. The received data contains information such as title, description, start date/time, duration, and channel. From an on-screen guide, the user creates a prioritized want-list of show titles to record. The PVR, rather than the user, determines the channel and start/end times of the recordings based on the want-list and guide database. The prototype PVR has the following recording specifications:<P><UL><LI>The PVR only records entire shows. </LI><LI>The PVR can only record one show at a time. </LI><LI>A lower priority show will not be recorded when its broadcast time overlaps the recording of a higher priority show. </LI><LI>If the same episode of a show is broadcast multiple times, it is only recorded once. </LI><LI>Shows will be recorded at the earliest opportunity given the above constraints even if doing so prevents a lower priority show from ever being recorded. (The marketing department believes people want to be able to watch a show soon after its first broadcast.) </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Given a prioritized want-list of shows and the program guide, your program will determine which shows to record. The want-list (in decreasing priority order) contains one show title per line. One blank line separates the want-list and program guide. The program guide data contains one show per line in increasing chronological order. Each line contains channel, start date/time, duration, episode number, and title. See <B>Ranges, Formatting, and Assumptions</B> for details regarding the fields.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output the list of shows to record, one per line, in increasing chronological order. For each show, print channel, start date and time, and show title, exactly as they occur in the program guide, separated by one space.<P><P><BR><DIV ALIGN="CENTER"><B>Ranges, Formatting, and Assumptions</B></DIV><P>All want-list and program guide inputs begin in column 1.<P>Program guide fields are separated by a single space.<P>The title includes all remaining characters until end-of-line, and may contain embedded spaces.<P>The title will never contain trailing spaces.<P>The channel is a decimal integer [2-69].<P>The start date/time is in <SPAN CLASS="MATH"><I>JJJHHMM</I></SPAN> <tex2html_verbatim_mark> format, where <SPAN CLASS="MATH"><I>JJJ</I></SPAN> <tex2html_verbatim_mark>=day of year [001-366], <SPAN CLASS="MATH"><I>HH</I></SPAN> <tex2html_verbatim_mark>=hour [00-23], <SPAN CLASS="MATH"><I>MM</I></SPAN> <tex2html_verbatim_mark>=minute [00-59].<P>The duration is a decimal number of minutes [1-1440].<P>The episode number [1-9999] uniquely identifies different episodes of the same series.<P>All shows in the program guide start and end within the same year.<P>The same show will not be broadcast on two different channels at the same time.<P>There is at least one and at most 100 titles in the want list.<P>There is at least one and at most 15000 shows in the program guide.<P>The input will produce at least one show to record.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Enterprise
Buffy the Vampire Slayer
Stargate SG-1
Smallville
Gilmore Girls
Andromeda

13 0240000 60 1003 Buffy the Vampire Slayer
5 0242000 60 1601 Gilmore Girls
11 0242000 30 2021 That 70s Show
13 0242000 60 1004 Buffy the Vampire Slayer
11 0242030 30 9101 Grounded for Life
5 0242100 60 8003 Smallville
11 0242100 60 3218 Celebrity Daredevils
13 0242100 60 2376 Haunted
5 0252000 60 9101 Blade
11 0252000 60 3208 The Bernie Mac Show
13 0252000 60 2002 Enterprise
5 0291700 60 8003 Smallville
5 0291800 60 7652 Everwood
5 0291900 60 1601 Gilmore Girls
13 0292000 60 2002 Enterprise
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
13 0240000 Buffy the Vampire Slayer
13 0242000 Buffy the Vampire Slayer
5 0242100 Smallville
13 0252000 Enterprise
5 0291900 Gilmore Girls
</PRE><P>
______________________________________________________
2658||||||false||||||
<P>Telemetry is often sent as pulse code modulated (PCM) data. The sensed values are digitized into binary words, then sent as a stream of ones and zeros. This stream of binary data is broken up into repeating frames. Within a frame, the stream is conceptualized as a series of subframes containing one or more words of data. Hence a frame is a rectangular table of words, where the subframe is viewed as a row address, and the word within a subframe is the column address. See Figure 3-1. Even to this day, the construction of the frame (that is, the assignment of measured values to particular subframe and word locations) is often done by hand. Your team is to write a program that constructs a PCM frame.<P>Given a list of parameters (digitized, measured values) and their frequency of updates (in updates per frame), you are to assign these parameter updates to subframe and word locations to produce the smallest possible frame. Each parameter update consumes exactly one word. The number of subframes must be equal to the highest update rate. All parameter update frequencies will be integer divisors of the highest update rate.<P>While assigning parameter updates to subframes and words, the update rate must be uniform. Another way of viewing uniform updates is to think of all updates for a single parameter, <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, as starting at a particular word offset into the whole frame. The updates repeat with a stride of<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="60" HEIGHT="56" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2658img1.png ALT="$\displaystyle {\frac{{S \times W}}{{r_{i}}}}$"></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is the number of subframes per frame, <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> is the number of words per subframe, and <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the update rate of <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. Figure 3-1 contains one possible frame construction for the sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to the program consists of one or more lines containing parameter name and update frequency pairs. The first token on the line is the parameter name, which contains only letters and numbers, and does not exceed 16 characters. The update frequency is a decimal integer, separated by one or more blank spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output is two values, separated by a single space, followed by end-of-line. The first value is the number of subframes and the second value is the number words per subframe.<P><DIV ALIGN="CENTER"><IMG WIDTH="741" HEIGHT="651" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2658img1.png ALT="\epsfbox{p2658.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 3-1. One possible smallest frame produced from the sample input.</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Y            3
X            6
Acceleration 1
Z 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6 3
</PRE><P>
______________________________________________________
2659||||||false||||||
<P>A Sudoku grid is a <SPAN CLASS="MATH">16 <TT>x</TT> 16</SPAN> grid of cells grouped in sixteen <SPAN CLASS="MATH">4 <TT>x</TT> 4</SPAN> squares, where some cells are filled with letters from <TT>A</TT> to <TT>P</TT> (the first 16 capital letters of the English alphabet), as shown in figure 1a. The game is to fill all the empty grid cells with letters from <TT>A</TT> to <TT>P</TT> such that each letter from the grid occurs once only in the line, the column, and the <SPAN CLASS="MATH">4 <TT>x</TT> 4</SPAN> square it occupies. The initial content of the grid satisfies the constraints mentioned above and guarantees a unique solution.<P><DIV ALIGN="CENTER">Figure 1. Sudoku</DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=16 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT> </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER">a) Sudoku grid</DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=16 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER">b) Solution</DIV><P>Write a Sudoku playing program that reads data sets from a text file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each data set encodes a grid and contains 16 strings on 16 consecutive lines as shown in figure 2. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th string stands for the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line of the grid, is 16 characters long, and starts from the first position of the line. String characters are from the set <SPAN CLASS="MATH">{</SPAN><TT>A</TT>,<TT>B</TT>,<SPAN CLASS="MATH">...</SPAN>,<TT>P</TT>,<TT>-</TT><SPAN CLASS="MATH">}</SPAN>, where `<TT>-</TT>' (minus) designates empty grid cells. The data sets are separated by single empty lines and terminate with an end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The program prints the solution of the input encoded grids in the same format and order as used for input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
--A----C-----O-I 
-J--A-B-P-CGF-H-
--D--F-I-E----P-
-G-EL-H----M-J--
----E----C--G---
-I--K-GA-B---E-J 
D-GP--J-F----A--
-E---C-B--DP--O-
E--F-M--D--L-K-A 
-C--------O-I-L-
H-P-C--F-A--B---
---G-OD---J----H 
K---J----H-A-P-L 
--B--P--E--K--A-
-H--B--K--FI-C--
--F---C--D--H-N-
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
FPAHMJECNLBDKOGI 
OJMIANBDPKCGFLHE 
LNDKGFOIJEAHMBPC 
BGCELKHPOFIMAJDN 
MFHBELPOACKJGNID 
CILNKDGAHBMOPEFJ 
DOGPIHJMFNLECAKB 
JEKAFCNBGIDPLHOM 
EBOFPMIJDGHLNKCA 
NCJDHBAEKMOFIGLP 
HMPLCGKFIAENBDJO 
AKIGNODLBPJCEFMH 
KDEMJIFNCHGAOPBL 
GLBCDPMHEONKJIAF 
PHNOBALKMJFIDCEG 
IAFJOECGLDPBHMNK
</PRE><P>
______________________________________________________
2660||||||false||||||
<P>Cribbage is a card game for two or more players that has several distinct phases of play, among them are <EM>the play</EM> and <EM>the show</EM>, sometimes called <EM>pegging</EM> and <EM>counting</EM>, respectively. The show is a wonderful example of combinatorics, and makes an excellent programming contest problem. In 1999, the judges of the Southern California Region posed just such a problem, and therefore already have dozens of cribbage hand counting programs to choose from when verifying their hands during a game. To assist the judges in scoring during the play, your team is to write a program that evaluates the points earned for given plays in a deal.<P>Pegging starts with the player to the dealer's left, who lays down one card face up and announces its value. All face cards (Jack, Queen, and King) are ten points, each number card takes its value, and Ace is always one. Proceeding clockwise, all players take turns playing one card face up, adding its value to the running sum and announcing the sum as they play. The object is twofold: to get the sum as close to 31 without exceeding 31, and to play cards that result in scoring points along the way.<P>Play continues until the sum hits 31 or no one can play cards that don't exceed 31. At this point, the cards played so far are turned face down and the sum is reset to zero. Pegging resumes using the unplayed cards, starting with the player <EM>following</EM> the one who played the most recent card. During the play, if a player cannot lay down a card (either because the lowest unplayed card in his hand would force the sum to exceed 31, or all his cards are played), that player states ``go" and the turn proceeds to the next player. If a player <EM>can</EM> lay down a card without exceeding 31, he <EM>must</EM> play.<P><P><BR>Scoring during the play is based on the face-up cards only. Scoring opportunities are:<P><P><BR><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=JUSTIFY WIDTH="5in"><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">If the running sum hits exactly 15, the player to make 15 pegs two points.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>31</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">If the running sum hits exactly 31, the player to make 31 pegs two points. The <EM>go</EM> and hitting 31 are exclusive.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>go</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">The <EM>go</EM> is named for the point scored by the player who forces all others to state ``go." The player who lays down the card that sums closest to 31 (but not hitting 31) when no one else can play scores one point. The <EM>go</EM> and hitting 31 are exclusive.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>pair</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">(Two-of-a-kind) If the player pairs (in rank) the previously played card, the player making the pair scores two points.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>pair royal</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">(Three-of-a-kind) If the player pairs (in rank) the previously played card, which itself formed a pair, the player making the pair royal scores six points.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>double pair royal</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">(Four-of-a-kind) If the player pairs (in rank) the previously played card, which itself formed a pair royal, the player making the double pair royal scores 12 points.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>run</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">If the player lays down a card that, when taken with the previous 2 or more cards, forms an unbroken sequence of three or more consecutive ranks (a <EM>run</EM>), the player scores one point for each card in the run. The actual order of play is not important--only that the previous cards form a run.</TD></TR></TABLE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to the program is a list of successive independent (not from the same game) deals. A deal starts with a single integer on a line indicating <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> , the number of players, followed by all the card plays for the deal, each play per line. Because a cribbage hand contains four cards, a deal must contain <SPAN CLASS="MATH">4<I>n</I></SPAN> <tex2html_verbatim_mark> plays. A card play consists of the player number (1 through <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>), a single space, a card specification, then end-of-line. Player 1 is always to the dealer's left; the dealer is always player <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. A card specification contains two characters: the rank followed by the suit. The rank in ascending order is <TT>A</TT>=Ace, <TT>2</TT> through <TT>9</TT>, <TT>T</TT>=10, <TT>J</TT>=Jack, <TT>Q</TT>=Queen, <TT>K</TT>=King. The suit is <TT>C</TT>=Clubs, <TT>D</TT>=Diamonds, <TT>H</TT>=Hearts, <TT>S</TT>=Spades. It is possible that as the sum approaches 31, some players may not be able to play, and that some player might end up playing several cards in a row. The input will have only legal plays. The last deal is terminated by end-of-file.<P><P><BR><B>Note:</B> Here you are the Sample Input below with commentaries for better understanding.<P><P><BR><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1 JD</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2 QH</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1 JC</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>player 2 states ``go" and player 1 pegs a one-point go; the sum resets to 0</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2 9S</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1 KD</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2 6C</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>player 1 states "go" after player 2 plays the Six of Clubs</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2 6H</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>player 2 pairs himself for two points and pegs two more points for hitting 31; sum=0</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1 KS</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>player 2 states ``go" (no more cards to play), player 1 pegs a one-point go</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>4</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1 4C</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2 6C</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3 5D</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>player 3 gets two points for hitting 15, and pegs three more points for the 4-5-6 run</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>4 7C</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>player 4 pegs four points for the 4-5-6-7 run</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1 9H</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>player 1 gets two points for hitting 31; sum=0</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2 7D</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3 7H</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>player 3 makes two points for pairing the Seven of Diamonds</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>4 7S</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>player 4 pegs six points by forming a pair royal upon the existing pair of Sevens</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1 9S</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>players 2, 3, and 4 state "go", player 1 gets a one-point go; sum=0</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2 8C</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3 6D</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>4 3H</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1 2H</TT></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2 8D</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>player 3 states ``go"</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>4 2S</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>players 1, 2, and 3 state ``go", player 4 pegs a one-point go; sum=0</EM></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3 JS</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><EM>players 4, 1, and 2 state ``go", player 3 pegs a one-point go</EM></TD></TR></TABLE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Ouput</A>&nbsp;</FONT></H2><P>Output is a list of the results for each deal, one deal per line. Each deal contains the player numbers and their scores, in increasing order of player number. For each player, print the player number, a colon, and that player's total pegged points for the deal. Separate each player's results by a single space. The output lines should <EM>not</EM> contain any trailing spaces. See the Sample Output for examples.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
1 JD
2 QH
1 JC
2 9S
1 KD
2 6C
2 6H
1 KS
4
1 4C
2 6C
3 5D
4 7C
1 9H
2 7D
3 7H
4 7S
1 9S
2 8C
3 6D
4 3H
1 2H
2 8D
4 2S
3 JS
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1:2 2:4
1:3 2:0 3:8 4:11
</PRE><P>
______________________________________________________
2661||||||false||||||
<P>
Character strings on a computer are handled by a mapping between characters and numbers as well as a scheme
for representing the sequence of numbers as a stream of bytes on the computer. The Unicode standard mapping (also
known as ISO 10646) is designed to provide a universal mapping between characters and numbers for essentially all
characters for all writing systems for all history. This mapping has the capability to make all other mappings obsolete,
and is in widespread use throughout the world.

<P>
There are many different ways of representing a sequence of numbers as a stream of bytes. One scheme, known
as UTF-16LE, uses pairs of bytes in little endian order to represent unsigned integers. Unwilling to use two bytes per
character, your customer paid a high priced consulting firm to compress their UTF-16LE data.

<P>
Falling memory prices and the difficulties of manipulating compressed data has convinced your customer to convert
the compressed Unicode data back to UTF-16LE. Your task is to write a program that inputs a sequence of Compressed
Unicode strings, and outputs UTF-16LE. The Unicode Line Feed character (mapped to the number 10) indicates the
end of a string. Each string was compressed individually. The high priced consulting firm did a competent job, so you
can assume all input strings are well formed and well defined.

<P>
The compression scheme operates by providing two compression modes: single byte mode and Unicode mode.
Sequences of control bytes switch between compression modes and alter the interpretation of subsequent bytes. The
compression scheme uses <EM>windows</EM> into the Unicode mapping. There are 16 windows used for interpretation of
compressed strings: eight static windows (SW0 - SW7) and eight dynamic windows (DW0 - DW7). Each window
includes 128 sequential characters from the Unicode map. Different windows can have different starting positions.

<P>
A window is completely determined with respect to Unicode by its starting character. SW0 starts with the character
mapped to 0, so the value 65 with respect to SW0 is the character mapped to Unicode at 65. SW1 starts with the character
that maps to 128, so the value 65 with respect to SW1 is the character mapped to Unicode at 193. SW2 starts at 256,
SW3 at 768, SW4 at 8192, SW5 at 8320, SW6 at 8448, and SW7 at 12288. DW0 <EM>initially</EM> starts at 128, DW1 at 192,
DW2 at 1024, DW3 at 1536, DW4 at 2304, DW5 at 12352, DW6 at 12448, and DW7 at 65280. Dynamic windows can
be repositioned via control sequences.

<P>
Single byte mode has each byte representing a character. The byte values 0, 9, 10, 13, as well as 32 through 127
are interpreted as Unicode (e.g., the byte with value 10 is interpreted as Line Feed). The byte values 128 through 255
are interpreted as the characters numbered 0 through 127 in the current window (initially DW0). All other byte values
indicate control bytes explained later. Values 11 and 12 are not used in this problem.

<P>
Unicode mode has pairs of bytes in <EM>big</EM> endian form, interpreted as Unicode. For example, the two-byte sequence 0, 10 is interpreted as Line Feed. The first byte of a byte pair is not allowed to have values from 224 through 242. Such
bytes are control bytes explained later. Values 241 and 242 are not used for this problem.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to the program is a <EM>binary</EM> file that contains Compressed Unicode strings, terminated by end-of-file. When
interpreting a compressed string, interpretation begins in single byte mode with DW0 as the current window, and all
dynamic windows begin with their <EM>initial</EM> starting positions as described above. Interpretation changes only when a
control byte is encountered.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output is a <EM>binary</EM> file that contains (little endian) UTF-16LE.

<P>

<P>
<BR>

<B>Note:</B> The notation that follows includes mnemonics consisting of two uppercase characters followed by a digit. In this
context, the use of these same two characters followed by a lower case `n' indicates any of those mnemonics. However,
the digit indicated by `n' is fixed for subsequent usage within the same paragraph.

<P>

<P>
<BR>
Control bytes for single byte mode:

<P>

<P>
<BR>
<TABLE COLS=3>
<COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=JUSTIFY WIDTH="4in">
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<EM>Mnemonic</EM> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <EM>Byte Value(s)</EM> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288"> <EM>Function</EM> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
SQ0-SQ7   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 1-8   </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288">    Let <SPAN CLASS="MATH"><I>Vbyte</I></SPAN>
<tex2html_verbatim_mark> be the value of the byte following the SQn. 
If <!-- MATH
 $0 \le Vbyte \le 127$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2661img1.png
 ALT="$ \le$"><I>Vbyte</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2661img1.png
 ALT="$ \le$">127</SPAN>
<tex2html_verbatim_mark>, then this represents character Vbyte in SWn.
If <!-- MATH
 $128 \le  Vbyte \le  255$
 -->
<SPAN CLASS="MATH">128<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2661img1.png
 ALT="$ \le$"><I>Vbyte</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2661img1.png
 ALT="$ \le$">255</SPAN>
<tex2html_verbatim_mark>, then this represents the character <!-- MATH
 $Vbyte - 128$
 -->
<SPAN CLASS="MATH"><I>Vbyte</I> - 128</SPAN>
<tex2html_verbatim_mark> in DWn. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
SQU       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  14   </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288">    The pair of bytes following SQU should be interpreted as big endian Unicode. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
SCU       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  15   </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288">    Enter Unicode mode. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
SC0-SC7   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 16-23 </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288">    SCn changes the current window to DWn </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
SD0-SD7   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 24-31 </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288">    The byte following SDn is used to define the starting position of DWn 
            (See window offset table). DWn becomes the current window. 
</TD></TR>
</TABLE>

<P>

<P>
<BR>
Control bytes for Unicode mode:

<P>

<P>
<BR>
<TABLE COLS=3>
<COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=JUSTIFY WIDTH="4in">
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<EM>Mnemonic</EM> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <EM>Byte Value(s)</EM> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288"> <EM>Function</EM> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
UC0-UC7 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 224-231 </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288"> UCn changes the current window to DWn  and enters single byte mode. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
UD0-UD7 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 232-239 </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288"> The byte following UDn is used to  define the starting position of DWn 
           (See window offset table). DWn becomes  the current window and single byte mode
           is entered. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
UQU    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      240 </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288">    The pair of bytes following UQU should be evaluated as big endian Unicode. 
</TD></TR>
</TABLE>

<P>

<P>
<BR>
Window offset table:

<P>

<P>
<BR>
<TABLE COLS=2>
<COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<EM>Byte Value(s)</EM> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <EM>Offset</EM> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
0     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>             Not to be used  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
1103   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>           Byte value multiplied by 128 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
104167  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>          Byte value multiplied by 128, added to 44032 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
     168248 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>           Not to be used </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
     249     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>           192  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
     250      </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>          592  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
     251       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>         880  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
     252        </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>        1328  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
     253         </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       12352 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
     254          </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      12448 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
     255           </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>     65376 
</TD></TR>
</TABLE>

<P>

<P>
<BR>

<B>Note:</B> The Sample Input and Sample Output are unsigned decimal dumps of the sample binary files. Use the UNIX command
``<TT>od -A x -t u1 filename</TT>" to display the contents of a binary file as unsigned decimal byte values.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0000000 065 194 010 001 001 010 014 078 010 078 010 015 078 010 078 010
0000010 000 010 018 001 194 194 010 026 251 001 194 194 018 194 014 078
0000020 010 194 010 194 010
0000025
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0000000 065 000 194 000 010 000 001 000 010 000 010 078 078 000 010 000
0000010 010 078 010 078 010 000 194 000 066 004 010 000 194 000 178 003
0000020 178 003 010 078 178 003 010 000 194 000 010 000
000002c
</PRE> 


______________________________________________________
2662||||||false||||||
We want to find out how much are the members of a family of monsters related. Each monster has
the same number of genes but the genes themselves may differ from monster to monster. It would be nice
to know how many genes any two given monsters have in common. However this is impossible, because
the number of genes is very large. Fortunately, we do know the family tree (well, not actually a tree, but
you cannot really blame them, after all they are monsters, right?) and we do know how the genes are
inherited so we can estimate the number of common genes quite well.

<P>
The inheritance rule is very simple: if a monster C is a child of monsters A and B then each gene
of C is identical to the corresponding gene of either A or B, each with probability 50%. Every gene of
every monster is inherited independently.

<P>
Let us define the degree of relationship of monsters X and Y as the expected number of common
genes. For example consider a family consisting of two completely unrelated (i.e. having no common
genes) monsters A and B and their two children C and D. How much are C and D related? Well, each
of C's genes comes either from A or from B, both with probability 50%. The same is true for D. Thus,
the probability of a given gene of C being the same as the corresponding gene of D is 50%. Therefore
the degree of relationship of C and D (the expected number of common genes) is equal to 50% of all the
genes. Note that the answer would be different if A and B were related. If A and B have common genes
they will be always inherited by both C and D.

<P>
Your task is to write a program that, when given a family graph and a list of pairs of monsters,
computes the degree of relationship for each of these pairs.

<P>

<P>
<BR>
Write a program that:

<P>

<UL>
<LI>reads the description of a family and a list of pairs of its members from the standard input,
</LI>
<LI>computes the degree of relationship (in percentages) for each pair on the list,
</LI>
<LI>writes the result to the standard output.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input contains an integer indicating the number of data sets, followed by a blank line.
The first line of each dataset contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> separated by a single space. Integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $2 \le n \le
300$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2662img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2662img1.png
 ALT="$ \le$">300</SPAN>) is the number of members of a family. Family members are indexed arbitrarily from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. Integer
<SPAN CLASS="MATH"><I>k</I></SPAN> (<!-- MATH
 $0 \le k \le n-2$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2662img1.png
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2662img1.png
 ALT="$ \le$"><I>n</I> - 2</SPAN>) is the number of monsters that do have parents (all the other monsters were created
by Gods and are completely unrelated to each other).

<P>
Each of the next <SPAN CLASS="MATH"><I>k</I></SPAN> lines contains three different integers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN> separated by single spaces. The triple
<SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN> means that the monster <SPAN CLASS="MATH"><I>a</I></SPAN> is a child of monsters <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN>.

<P>
The next input line contains an integer <SPAN CLASS="MATH"><I>m</I></SPAN> (<!-- MATH
 $1 \le m \le n^2$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2662img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2662img1.png
 ALT="$ \le$"><I>n</I><SUP>2</SUP></SPAN>) - the number of pairs of monsters on the
list. Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines contains two integers separated by a single space - these are the indices of two monsters.
Datasets are separated by a blank line.

<P>
You may assume that no monster is its own ancestor. You should not make any additional assumptions
on the input data. In particular, you should not assume that there exists any valid sex assignment.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each dataset consists of <SPAN CLASS="MATH"><I>m</I></SPAN> lines. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line corresponds to the <SPAN CLASS="MATH"><I>i</I></SPAN>-th pair on the input list and should
contain single number followed by the percentage sign. The number should be the exact degree of
relationship (in percentages) of the monsters in the <SPAN CLASS="MATH"><I>i</I></SPAN>-th pair. Unsignificant zeroes are not allowed in the
output (please note however that there must be at least one digit before the period sign so for example
the leading zero in number 0.1 is significant and you cannot print it as .1). Confront the example output for the
details of the output format. Print a blank line between data sets.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

7 4
4 1 2
5 2 3
6 4 5
7 5 6
4
1 2
2 6
7 5
3 3
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0%
50%
81.25%
100%
</PRE>

<P>

______________________________________________________
2663||||||false||||||
You are given <SPAN CLASS="MATH"><I>n</I></SPAN> closed, integer intervals <!-- MATH
 $[a_i , b_i]$
 -->
<SPAN CLASS="MATH">[<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>]</SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> integers <!-- MATH
 $c_1, \dots, c_n$
 -->
<SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>,..., <I>c</I><SUB>n</SUB></SPAN>.

<P>

<P>
<BR>
Write a program that:

<UL>
<LI>reads the number of intervals, their endpoints and integers
<!-- MATH
 $c_1, \dots, c_n$
 -->
<SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>,..., <I>c</I><SUB>n</SUB></SPAN> from the standard input,
</LI>
<LI>computes the minimal size of a set <SPAN CLASS="MATH"><I>Z</I></SPAN> of integers which has at least <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> common elements with
interval <!-- MATH
 $[a_i , b_i]$
 -->
<SPAN CLASS="MATH">[<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>]</SPAN>, for each <!-- MATH
 $i = 1, 2, \dots, n$
 -->
<SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>n</I></SPAN>,
</LI>
<LI>writes the answer to the standard output.

<P>
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input cointains an integer indicating the number of datasets. It's followed by a blank line.
The first line of each dataset contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 50 000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2663img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2663img1.png
 ALT="$ \le$">50000</SPAN>) - the number of intervals. The
following <SPAN CLASS="MATH"><I>n</I></SPAN> lines describe the intervals. The line <SPAN CLASS="MATH"><I>i</I> + 1</SPAN> of the dataset contains three integers <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN>
separated by single spaces and such that <!-- MATH
 $0 \le a_i \le b_i \le 50 000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2663img1.png
 ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2663img1.png
 ALT="$ \le$"><I>b</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2663img1.png
 ALT="$ \le$">50000</SPAN> and <!-- MATH
 $1 \le c_i \le b_i - a_i + 1$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2663img1.png
 ALT="$ \le$"><I>c</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2663img1.png
 ALT="$ \le$"><I>b</I><SUB>i</SUB> - <I>a</I><SUB>i</SUB> + 1</SPAN>. There is a blank line between datasets.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each dataset contains exactly one integer equal to the minimal size of a set <SPAN CLASS="MATH"><I>Z</I></SPAN> sharing at least <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> elements
with interval <!-- MATH
 $[a_i , b_i]$
 -->
<SPAN CLASS="MATH">[<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>]</SPAN>, for each <!-- MATH
 $i = 1, 2, \dots, n$
 -->
<SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>n</I></SPAN>. Print a blank line between datasets.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

5
3 7 3
8 10 3
6 8 1
1 3 1
10 11 1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6
</PRE> 

<P>

______________________________________________________
2664||||||false||||||
In a certain town there are <SPAN CLASS="MATH"><I>n</I></SPAN> intersections connected by two- and one-way streets. The town is very
modern so a lot of streets run through tunnels or viaducts. Of course it is possible to travel between any
two intersections in both ways, i.e. it is possible to travel from an intersection <SPAN CLASS="MATH"><I>a</I></SPAN> to an intersection <SPAN CLASS="MATH"><I>b</I></SPAN> as
well as from <SPAN CLASS="MATH"><I>b</I></SPAN> to <SPAN CLASS="MATH"><I>a</I></SPAN> without violating traffic rules. Because one-way streets are safer, it has been decided
to create as much one-way traffic as possible. In order not to make too much confusion it has also been
decided that the direction of traffic in already existing one-way streets should not be changed.

<P>
Your job is to create a new traffic system in the town. You have to determine the direction of traffic
for as many two-way streets as possible and make sure that it is still possible to travel both ways between
any two intersections.

<P>

<P>
<BR>
Write a program that:

<UL>
<LI>reads a description of the street system in the town from the standard input,
</LI>
<LI>for each two-way street determines one direction of traffic or decides that the street must remain
two-way,
</LI>
<LI>writes the answer to the standard output.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>, where <!-- MATH
 $2 \le n \le 2000$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2664img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2664img1.png
 ALT="$ \le$">2000</SPAN> and <!-- MATH
 $n-1 \le m \le n(n-1)/2$
 -->
<SPAN CLASS="MATH"><I>n</I> - 1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2664img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2664img1.png
 ALT="$ \le$"><I>n</I>(<I>n</I> - 1)/2</SPAN>.
Integer <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of intersections in the town and integer <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of streets.

<P>
Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines contains three integers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN>, where <!-- MATH
 $1 \le a \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2664img1.png
 ALT="$ \le$"><I>a</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2664img1.png
 ALT="$ \le$"><I>n</I></SPAN>, <!-- MATH
 $1 \le b \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2664img1.png
 ALT="$ \le$"><I>b</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2664img1.png
 ALT="$ \le$"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>a</I><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2664img1.png
 ALT="$ \ne$"><I>b</I></SPAN> and
<SPAN CLASS="MATH"><I>c</I></SPAN> belongs to {1, 2}. If <SPAN CLASS="MATH"><I>c</I> = 1</SPAN> then intersections <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are connected by an one-way street from <SPAN CLASS="MATH"><I>a</I></SPAN> to
<SPAN CLASS="MATH"><I>b</I></SPAN>. If <SPAN CLASS="MATH"><I>c</I> = 2</SPAN> then intersections <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are connected by a two-way street. There is at most one street
connecting any two intersections.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output contains exactly the same number of lines as the number of two-way streets in the input.
For each such street (in any order) the program should write three integers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN> meaning, the new
direction of the street from <SPAN CLASS="MATH"><I>a</I></SPAN> to <SPAN CLASS="MATH"><I>b</I></SPAN> (<SPAN CLASS="MATH"><I>c</I> = 1</SPAN>) or that the street connecting <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> remains two-way (<SPAN CLASS="MATH"><I>c</I> = 2</SPAN>).
If there are more than one solution with maximal number of one-way streets then your program should
output any of them but just one.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 4
4 1 1
4 2 2
1 2 1
1 3 2
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
2 4 1
3 1 2
</PRE>

<P>

______________________________________________________
2665||||||false||||||
An unbounded triangular grid is a plane covered by equilateral triangles:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2665a.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2665a.jpg
 ALT="\epsfbox{p2665a.eps}">
</DIV>

<P>
Two neighboring triangles in the grid form a rhomb. There are 3 types of such rhombs:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2665b.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2665a.jpg
 ALT="\epsfbox{p2665b.eps}">
</DIV>

<P>
A grid polygon is a simple polygon which sides consist entirely of sides of triangles in the grid. We
say that a grid polygon is rhombastic if it can be partitioned into internally disjoint rhombs of types A, B and C.

<P>
As an example let's consider the following grid hexagon:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2665c.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2665a.jpg
 ALT="\epsfbox{p2665c.eps}">
</DIV>

<P>
This hexagon can be partitioned into 4 rhombs of type A, 4 rhombs of type B and 4 rhombs of type C:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2665d.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2665a.jpg
 ALT="\epsfbox{p2665d.eps}">
</DIV>

<P>
For a given rhombastic grid polygon P compute the numbers of rhombs of types A, B and C in some correct partition.

<P>

<P>
<BR>
Write a program that:

<UL>
<LI>reads a description of a rhombastic grid polygon from the standard input,
</LI>
<LI>computes the numbers of rhombs of types A, B and C in some correct partition of the polygon,
</LI>
<LI>writes the results to the standard output.

<P>
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>The first line of the input cointains an integer indicating the number of datasets. It's followed by a blank line.
The first line of each dataset contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $3 \le n \le 50 000$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2665a.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2665a.jpg
 ALT="$ \le$">50000</SPAN>) - the number of sides of a rhombastic
grid polygon. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains a description of one side of the polygon. The sides are
given one by one in the clockwise order. No two consecutive sides of the polygon lie on the same straight
line. The description of a side consists of two integers <SPAN CLASS="MATH"><I>d</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN>. Integer <SPAN CLASS="MATH"><I>d</I></SPAN> says what is the direction of
the side according to the following figure:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2665e.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2665a.jpg
 ALT="\epsfbox{p2665e.eps}">
</DIV>

<P>
Integer <SPAN CLASS="MATH"><I>k</I></SPAN> is the length of the polygon side measured in the number of sides of grid triangles. Sum of
all numbers <SPAN CLASS="MATH"><I>k</I></SPAN> is not larger than 100 000. Datasets are separated by a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The first and only line of each dataset contains three integers separated by single spaces denoting the
number of rhombs of type A, B and C respectively, in some partition of the input polygon. Print a blank line between datasets.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

6
1 2
2 2
3 2
4 2
5 2
6 2
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
4 4 4
</PRE>

<P>

______________________________________________________
2666||||||false||||||
The Kingdom of Byteland decided to develop a large computer network of servers offering various
services.

<P>
The network is built of n servers connected by bidirectional wires. Two servers can be directly
connected by at most one wire. Each server can be directly connected to at most 10 other servers
and every two servers are connected by some path in the network. Each wire has a fixed positive data
transmission time measured in milliseconds. The distance (in milliseconds) <!-- MATH
 $\delta(V, W)$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \delta$">(<I>V</I>, <I>W</I>)</SPAN> between two servers
<SPAN CLASS="MATH"><I>V</I></SPAN> and <SPAN CLASS="MATH"><I>W</I></SPAN> is defined as the length of the shortest (according to transmission time) path connecting <SPAN CLASS="MATH"><I>V</I></SPAN>
and <SPAN CLASS="MATH"><I>W</I></SPAN> in the network. For convenience we let <!-- MATH
 $\delta(V, V) = 0$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \delta$">(<I>V</I>, <I>V</I>) = 0</SPAN> for all <SPAN CLASS="MATH"><I>V</I></SPAN>.

<P>
Some servers offer more services than others. Therefore each server <SPAN CLASS="MATH"><I>V</I></SPAN> is marked with a natural
number <SPAN CLASS="MATH"><I>r</I>(<I>V</I>)</SPAN>, called a rank. The bigger the rank the more powerful a server is.

<P>
At each server, data about nearby servers should be stored. However, not all servers are interesting.
The data about distant servers with low ranks do not have to be stored. More specifically, a server <SPAN CLASS="MATH"><I>W</I></SPAN> is
interesting for a server <SPAN CLASS="MATH"><I>V</I></SPAN> if for every server <SPAN CLASS="MATH"><I>U</I></SPAN> such that <!-- MATH
 $\delta(V, U) \le \delta(V, W)$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \delta$">(<I>V</I>, <I>U</I>)<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$"><IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \delta$">(<I>V</I>, <I>W</I>)</SPAN> we have <!-- MATH
 $r(U) \le r(W)$
 -->
<SPAN CLASS="MATH"><I>r</I>(<I>U</I>)<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$"><I>r</I>(<I>W</I>)</SPAN>.

<P>
For example, all servers of the maximal rank are interesting for all servers. If a server <SPAN CLASS="MATH"><I>V</I></SPAN> has the
maximal rank, then exactly the servers of the maximal rank are interesting for <SPAN CLASS="MATH"><I>V</I></SPAN>. Let <SPAN CLASS="MATH"><I>B</I>(<I>V</I>)</SPAN> denote the
set of servers interesting for a server <SPAN CLASS="MATH"><I>V</I></SPAN>.

<P>
We want to compute the total amount of data about servers that need to be stored in the network
being the total sum of sizes of all sets <SPAN CLASS="MATH"><I>B</I>(<I>V</I>)</SPAN>. The Kingdom of Byteland wanted the data to be quite
small so it built the network in such a way that this sum does not exceed <SPAN CLASS="MATH">30<I>n</I></SPAN>.

<P>

<P>
<BR>
Write a program that:

<UL>
<LI>reads the description of a server network from the standard input,
</LI>
<LI>computes the total amount of data about servers that need to be stored in the network,
</LI>
<LI>writes the result to the standard output.
</LI>
</UL> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input cointains an integer indicating the number of datasets. It's followed by a blank line.
The first line of each dataset contains two natural numbers <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN>, where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of servers in the network
(<!-- MATH
 $1 \le n \le 30 000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$">30000</SPAN>) and <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of wires (<!-- MATH
 $1 \le m \le 5n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$">5<I>n</I></SPAN>). The numbers are separated by single
space.

<P>
The ranks of the servers are given in the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines. Line <SPAN CLASS="MATH"><I>i</I></SPAN> contains one integer <SPAN CLASS="MATH"><I>r</I>(<I>i</I>)</SPAN> (<!-- MATH
 $1 \le r(i) \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$"><I>r</I>(<I>i</I>)<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$">10</SPAN>) - the rank of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th server.

<P>
The wires are described in the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines. Each wire is described by three numbers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le
1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$">1000</SPAN>, <!-- MATH
 $1 \le a, b \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$"><I>a</I>, <I>b</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \le$"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>a</I><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2666img1.png
 ALT="$ \ne$"><I>b</I></SPAN>), where <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are numbers of the servers connected by the wire and <SPAN CLASS="MATH"><I>t</I></SPAN> is the
transmission time of the wire in milliseconds.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each dataset consists of a single integer equal to the total amount of data about servers that need to be stored in the network.
Print a blank line between datasets.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

4 3
2
3
1
1
1 4 30
2 3 20
3 4 20
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
9
</PRE>

<P>

<P><P>
<BR>

<B>Note:</B> Because <!-- MATH
 $B(1) = \{1, 2\}$
 -->
<SPAN CLASS="MATH"><I>B</I>(1) = {1, 2}</SPAN>, <!-- MATH
 $B(2) = \{2\}$
 -->
<SPAN CLASS="MATH"><I>B</I>(2) = {2}</SPAN>, <!-- MATH
 $B(3) = \{2, 3\}$
 -->
<SPAN CLASS="MATH"><I>B</I>(3) = {2, 3}</SPAN>, <!-- MATH
 $B(4) = \{1, 2, 3, 4\}$
 -->
<SPAN CLASS="MATH"><I>B</I>(4) = {1, 2, 3, 4}</SPAN>.

<P>

______________________________________________________
2667||||||false||||||
Solitaire is a game played on a chessboard 8x8. The rows and columns of the chessboard are numbered
from 1 to 8, from the top to the bottom and from left to right, respectively.

<P>
There are four identical pieces on the board. In one move it is allowed to:

<UL>
<LI>move a piece to an empty neighboring field (up, down, left or right),
</LI>
<LI>jump over one neighboring piece to an empty field (up, down, left or right).
</LI>
</UL>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2667.eps}$
 -->
<IMG
 WIDTH="473" HEIGHT="485" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2667.jpg
 ALT="\epsfbox{p2667.eps}">
</DIV>

<P>
Exactly 4 moves are allowed for each piece in the figure above. As an example let's consider a piece
placed in the row 4, column 4. It can be moved one row up, two rows down, one column left or two
columns right.

<P>

<P>
<BR>
Write a program that:

<UL>
<LI>reads two chessboard configurations from the standard input,
</LI>
<LI>verifies whether the second one is reachable from the first one in at most 8 moves,
</LI>
<LI>writes the result to the standard output.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input contains several datasets, each of two input lines contains 8 integers <!-- MATH
 $a_1, a_2, \dots, a_8$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>8</SUB></SPAN> separated by single spaces and describes one
configuration of pieces on the chessboard. Integers <SPAN CLASS="MATH"><I>a</I><SUB>2j - 1</SUB></SPAN> and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB><I>j</I></SPAN> (<!-- MATH
 $1 \le j \le 4$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2667.jpg
 ALT="$ \le$"><I>j</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2667.jpg
 ALT="$ \le$">4</SPAN>) describe the position of
one piece - the row number and the column number respectively.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each dataset should contain one word `<TT>YES</TT>' if the configuration described in the second input line is
reachable from the configuration described in the first input line in at most 8 moves, and one word `<TT>NO</TT>' otherwise.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 4 4 5 5 4 6 5
2 4 3 3 3 6 4 6
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
YES
</PRE>

<P>

______________________________________________________
2668||||||false||||||
You are the owner of a railway system between n cities, numbered by integers from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. Each train
travels from the start station to the end station according to a very specific timetable (always on time),
without stopping anywhere between. A departure timetable is available on each station. Unfortunately
each timetable contains only direct connections. A passenger that wants to travel from city <SPAN CLASS="MATH"><I>p</I></SPAN> to city <SPAN CLASS="MATH"><I>q</I></SPAN>
is not limited to direct connections - he or she can change trains. Each change takes zero time, but
a passenger cannot change from one train to the other if it departs before the first one arrives. People
would like to have a timetable of all optimal connections. A connection departing from city <SPAN CLASS="MATH"><I>p</I></SPAN> at <SPAN CLASS="MATH"><I>A</I></SPAN>
o'clock and arriving in city <SPAN CLASS="MATH"><I>q</I></SPAN> at <SPAN CLASS="MATH"><I>B</I></SPAN> o'clock is called optimal if there is no connection that begins in <SPAN CLASS="MATH"><I>p</I></SPAN> not
sooner than at <SPAN CLASS="MATH"><I>A</I></SPAN> and ends in <SPAN CLASS="MATH"><I>q</I></SPAN> not later than at <SPAN CLASS="MATH"><I>B</I></SPAN>. We are only interested in connections that can be
completed during the same day.

<P>

<P>
<BR>
Write a program that:

<UL>
<LI>reads the number of cities <SPAN CLASS="MATH"><I>n</I></SPAN> and timetables from the standard input,
</LI>
<LI>creates a timetable of optimal connections from city 1 to city <SPAN CLASS="MATH"><I>n</I></SPAN>,
</LI>
<LI>writes the answer to the standard output.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input contains several datasets. The first line of each dataset contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $2 \le n \le 100 000$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2668img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2668img1.png
 ALT="$ \le$">100000</SPAN>). The following lines contain <SPAN CLASS="MATH"><I>n</I></SPAN>
timetables for cities <!-- MATH
 $1, 2, \dots, n$
 -->
<SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> respectively.

<P>
The first line of the timetable description contains only one integer <SPAN CLASS="MATH"><I>m</I></SPAN>. Each of the following <SPAN CLASS="MATH"><I>m</I></SPAN> lines
corresponds to one position in the timetable and contains: departure time <SPAN CLASS="MATH"><I>A</I></SPAN>, arrival time <SPAN CLASS="MATH"><I>B</I></SPAN> (<SPAN CLASS="MATH"><I>A</I> &lt; <I>B</I></SPAN>)
and destination city number <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2668img1.png
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2668img1.png
 ALT="$ \le$"><I>n</I></SPAN>) separated by single spaces. Departure time <SPAN CLASS="MATH"><I>A</I></SPAN> and arrival
time <SPAN CLASS="MATH"><I>B</I></SPAN> are written in format <SPAN CLASS="MATH"><I>hh</I> : <I>mm</I></SPAN>, where <SPAN CLASS="MATH"><I>hh</I></SPAN> are two digits representing full hours (<!-- MATH
 $00 \le hh \le 23$
 -->
<SPAN CLASS="MATH">00<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2668img1.png
 ALT="$ \le$"><I>hh</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2668img1.png
 ALT="$ \le$">23</SPAN>)
and <SPAN CLASS="MATH"><I>mm</I></SPAN> are two digits representing minutes (<!-- MATH
 $00 \le mm \le 59$
 -->
<SPAN CLASS="MATH">00<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2668img1.png
 ALT="$ \le$"><I>mm</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2668img1.png
 ALT="$ \le$">59</SPAN>). Positions in the timetable are given in
non-decreasing order according to the departure times. The number of all positions in all timetables
does not exceed 1 000 000.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The first line of each dataset contains an integer <SPAN CLASS="MATH"><I>r</I></SPAN> - the number of positions in the timetable being the
solution. Each of the following <SPAN CLASS="MATH"><I>r</I></SPAN> lines contains a departure time <SPAN CLASS="MATH"><I>A</I></SPAN> and an arrival time <SPAN CLASS="MATH"><I>B</I></SPAN> separated
by single space. The time format should be like in the input and positions in the timetable should be
ordered increasingly according to the departure times. If there is more then one optimal connection with
the same departure and arrival time, your program should output only one of them.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
3
09:00 15:00 3
10:00 12:00 2
11:00 20:00 3
2
11:30 13:00 3
12:30 14:00 3
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
2
10:00 14:00
11:00 20:00
</PRE>

<P>

______________________________________________________
2669||||||false||||||
Steve and Digit bought a box containing a number of donuts. In order to divide them between
themselves they play a special game that they created. The players alternately take a certain, positive
number of donuts from the box, but no more than some fixed integer. Each player's donuts are gathered
on the player's side. The player that empties the box eats his donuts while the other one puts his donuts
back into the box and the game continues with the ``looser" player starting. The game goes on until all
the donuts are eaten. The goal of the game is to eat the most donuts. How many donuts can Steve, who
starts the game, count on, assuming the best strategy for both players?

<P>

<P>
<BR>
Write a program that:

<UL>
<LI>reads the parameters of the game from the standard input,
</LI>
<LI>computes the number of donuts Steve can count on,
</LI>
<LI>writes the result to the standard output.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input contains several datasets. The first and only line of each dataset contains exactly two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> separated by a single space,
<!-- MATH
 $1 \le m \le n \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2669img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2669img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2669img1.png
 ALT="$ \le$">100</SPAN> - the parameters of the game, where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of donuts in the box at the
beginning of the game and <SPAN CLASS="MATH"><I>m</I></SPAN> is the upper limit on the number of donuts to be taken by one player in one move.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each dataset contains exactly one integer equal to the number of donuts Steve can count on.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5 2
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3
</PRE>

<P>

______________________________________________________
2670||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="503" HEIGHT="187" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2670.gif ALT="\epsfbox{p2670.eps}"></DIV><P>On January 1st 2002, The Netherlands, and several other European countries abandoned their national currency in favour of the Euro. This changed the ease of paying, and not just internationally.<P>A student buying a 68 guilder book before January 1st could pay for the book with one 50 guilder banknote and two 10 guilder banknotes, receiving two guilders in change. In short: <SPAN CLASS="MATH">50 + 10 + 10 - 1 - 1 = 68</SPAN>. Other ways of paying were: <SPAN CLASS="MATH">50 + 25 - 5 - 1 - 1</SPAN>, or <SPAN CLASS="MATH">100 - 25 - 5 - 1 - 1</SPAN>. Either way, there are always 5 units (banknotes or coins) involved in the payment process, and it could not be done with less than 5 units.<P>Buying a 68 Euro book is easier these days: <SPAN CLASS="MATH">50 + 20 - 2 = 68</SPAN>, so only 3 units are involved. This is no coincidence; in many other cases paying with euros is more efficient than paying with guilders. On average the Euro is more efficient. This has nothing to do, of course, with the value of the Euro, but with the units chosen. The units for guilders used to be: 1, 2.5, 5, 10, 25, 50, whereas the units for the Euro are: 1, 2, 5, 10, 20, 50.<P>For this problem we restrict ourselves to amounts up to 100 cents. The Euro has coins with values 1, 2, 5, 10, 20, 50 eurocents. In paying an arbitrary amount in the range [1, 100] eurocents, on average 2.96 coins are involved, either as payment or as change. The Euro series is not optimal in this sense. With coins 1, 24, 34, 39, 46, 50 an amount of 68 cents can be paid using two coins. The average number of coins involved in paying an amount in the range [1, 100] is 2.52.<P>Calculations with the latter series are more complex, however. That is, mental calculations. These calculations could easily be programmed in any mobile phone, which nearly everybody carries around nowadays. Preparing for the future, a committee of the European Central Bank is studying the efficiency of series of coins, to find the most efficient series for amounts up to 100 eurocents. They need your help.<P>Write a program that, given a series of coins, calculates the average and maximum number of coins needed to pay any amount up to and including 100 cents. You may assume that both parties involved have sufficient numbers of any coin at their disposal.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Input</A>&nbsp;</FONT></H2>The first line of the input contains the number of test cases. Each test case is described by 6 different positive integers on a single line: the values of the coins, in ascending order. The first number is always 1. The last number is less than 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Output</A>&nbsp;</FONT></H2>For each test case the output is a single line containing first the average and then the maximum number of coins involved in paying an amount in the range [1, 100]. These values are separated by a space. As in the example, the average should always contain two digits behind the decimal point. The maximum is always an integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
1 2 5 10 20 50
1 24 34 39 46 50
1 2 3 7 19 72
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2.96 5
2.52 3
2.80 4
</PRE><P>
______________________________________________________
2671||||||false||||||

Business is not going well for the Dutch Railway Company <B>NS</B>. Due to technical problems,
they are forced to cancel many train services without advance notice. This is, of course,
extremely frustrating for students who travel from home to school by train.

<P>
The worst thing about the whole situation is the randomness of the cancellations. Nobody knows
in advance whether a train service will be cancelled; a cancellation is not announced until the
official departure time. Since there is usually more than one possible route from home to school,
people are often left with an `<EM>if I had known this in advance I would have taken the
other route</EM>' sort of feeling.

<P>
Recently, the statistics department of the <B>NS</B> found a revolutionary solution to
this problem.
They noticed that some train services are cancelled more often than others. In order to help the
passengers, they decided to publish this information. The new timetables will state not just the
time of departure and arrival of each service, but also its <EM>probability of cancellation</EM>.

<P>
The travel-planner software from the <B>NS</B>, which normally finds the fastest route between
stations,
must be updated to find the route which gives the best chance of arriving in time. This helps
passengers to avoid trains that are likely to cause problems, instead taking a slightly longer, but
more reliable route to school.

<P>

Given the new timetables, a departure station and time, a destination station and a desired arrival
time, find the route which gives the best chance of arriving at the destination in time.

<P>
A route in this case is simply an ordered list of stations visited by the passenger, starting with
the departure station and ending with the destination. The passenger will stick to the route, each
time taking the first possible train to the next station. If a train is cancelled, he will just wait for
the next train to that station.

<P>
The chance of arriving in time is taken to be the probability that the passenger, when following
the route as described above, arrives at the destination station before or at the desired arrival time.
When calculating this probability, we assume that train services are cancelled independently of
each other and according to the probabilities stated in the timetable.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input contains a single positive integer indicating the number of runs. For
each run, the input is as follows:

<P>

<UL>
<LI>A line with a single positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of trains in the timetable (<SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2671img1.gif
 ALT="$ \le$">100</SPAN>).
</LI>
<LI><SPAN CLASS="MATH"><I>n</I></SPAN> lines describing the timetable. Each line describes one train, stating its
departure station
<SPAN CLASS="MATH"><I>x</I></SPAN>, the time of departure <SPAN CLASS="MATH"><I>t</I><SUB>x</SUB></SPAN>, its destination station <SPAN CLASS="MATH"><I>y</I></SPAN> (<SPAN CLASS="MATH"><I>x</I><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2671img1.gif
 ALT="$ \ne$"><I>y</I></SPAN>), the time of
arrival <SPAN CLASS="MATH"><I>t</I><SUB>y</SUB></SPAN> (<SPAN CLASS="MATH"><I>t</I><SUB>x</SUB> &lt; <I>t</I><SUB>y</SUB></SPAN>) and its probability of cancellation <SPAN CLASS="MATH"><I>p</I></SPAN>.

<P>
Stations are identified by capital letters in the range `<TT>A</TT>' ...`<TT>L</TT>'.
Times are in the format
`<TT>hh:mm</TT>' with <!-- MATH
 $00 \le hh < 24$
 -->
<SPAN CLASS="MATH">00<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2671img1.gif
 ALT="$ \le$"><I>hh</I> &lt; 24</SPAN> and <!-- MATH
 $00 \le mm < 60$
 -->
<SPAN CLASS="MATH">00<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2671img1.gif
 ALT="$ \le$"><I>mm</I> &lt; 60</SPAN>. The probability <SPAN CLASS="MATH"><I>p</I></SPAN> is a decimal real number
with <!-- MATH
 $0.0 \le p < 1.0$
 -->
<SPAN CLASS="MATH">0.0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2671img1.gif
 ALT="$ \le$"><I>p</I> &lt; 1.0</SPAN>. Input elements are separated by spaces.
</LI>
<LI>line with a departure station <SPAN CLASS="MATH"><I>a</I></SPAN>, earliest departure time <SPAN CLASS="MATH"><I>t</I><SUB>a</SUB></SPAN>, destination
station <SPAN CLASS="MATH"><I>b</I></SPAN> (<SPAN CLASS="MATH"><I>a</I><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2671img1.gif
 ALT="$ \ne$"><I>b</I></SPAN>) and
desired arrival time <SPAN CLASS="MATH"><I>t</I><SUB>b</SUB></SPAN> (<SPAN CLASS="MATH"><I>t</I><SUB>a</SUB> &lt; <I>t</I><SUB>b</SUB></SPAN>). Station identifiers and times are like those
in the timetable.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output consists of two lines for each run. The first line of each run contains the best possible
route for the passenger as a list of station identifiers separated by spaces. The second line
contains the probability that the passenger, when following the given route, arrives on time.
The probability must be formatted as a decimal real number with exactly one digit before the
decimal point, and exactly 4 digits after. The usual rules for rounding apply: round up if the next
digit would be <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2671img1.gif
 ALT="$ \ge$">5</SPAN>, otherwise round down.

<P>

<P>
<BR>

<B>Notes</B>

<UL>
<LI>When changing trains at an intermediate station, the earliest possible departure time is one
minute after the time of arrival.
</LI>
<LI>All times are on the same day; the journey does not cross midnight.
</LI>
<LI>It never happens that two or more trains depart from the same station at the same time to
the same destination station.
</LI>
<LI>The input is such that there is a unique route with maximum probability.
</LI>
<LI>The passenger will stick to his route, always taking the <EM>first available</EM> train to the next
station. If a train is cancelled he will wait for the next train to that station. He will never
try to be smart by taking faster trains or different routes.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
3
A 12:00 B 12:15 0.1
A 12:10 B 12:14 0.23
A 12:20 B 12:30 0.456
A 12:00 B 12:30
4
A 12:00 B 12:15 0.1
A 12:05 B 12:13 0.15
B 12:20 C 12:35 0.12
A 12:15 C 12:33 0.4
A 12:00 C 13:00
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
A B
0.9895
A B C
0.8668
</PRE>

<P>

______________________________________________________
2672||||||false||||||

On a warm summer afternoon, Hansel and Grethel are walking together in the fields. It is getting
late and, to be honest, they are lost. Grethel is a little scared, still vividly remembering the last
time they got lost in the forest. That time, an evil witch had locked them inside a house built of
gingerbread and sugar! But Hansel can reassure her: this time they are well prepared. Hansel
has taken a map and a compass with him!

<P>
Hansel picks two clearly outstanding features in the landscape, and uses the compass to measure
the direction towards both objects. Grethel locates the objects on the map, and writes down
the corresponding map coordinates. Based on this information, they will be able to accurately
determine their own position on the map.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2672.eps}$
 -->
<IMG
 WIDTH="616" HEIGHT="688" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2672.gif
 ALT="\epsfbox{p2672.eps}">
</DIV>

<P>

The coordinates of two marker objects, and the direction (angle from the North) towards these
objects are known. Write a program which uses this data to calculate the coordinates of Hansel
and Grethel's current location.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input contains one positive number: the number of situations in which a
position must be determined. Following are two lines per situation, describing the two marker
objects. Each marker object is described by a line containing three integer numbers:

<P>

<UL>
<LI>the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate of the object on the map (<!-- MATH
 $0 \le x \le 100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2672.gif
 ALT="$ \le$"><I>x</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2672.gif
 ALT="$ \le$">100</SPAN>);
the <SPAN CLASS="MATH"><I>x</I></SPAN>-axis runs West-to-East on the map, with increasing values towards the East.
</LI>
<LI>the <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate of the object on the map (<!-- MATH
 $0 \le y \le 100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2672.gif
 ALT="$ \le$"><I>y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2672.gif
 ALT="$ \le$">100</SPAN>);
the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis runs South-to-North on the map, with increasing values towards the North.
</LI>
<LI>the direction <SPAN CLASS="MATH"><I>d</I></SPAN> of the object in degrees (<!-- MATH
 $0 \le d < 360$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2672.gif
 ALT="$ \le$"><I>d</I> &lt; 360</SPAN>);
with 0<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> = North, 90<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> = East, 180<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> = South, and so on.
</LI>
</UL>

<P>
To keep the position calculations accurate, Hansel makes sure that the directions of the two
objects are not exactly equal, and do not differ by exactly 180<SPAN CLASS="MATH"><SUP>o</SUP></SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
One line per situation, containing the result of the position calculation: two numbers, separated
by a space, each having exactly 4 digits after the decimal point. These numbers represent the <SPAN CLASS="MATH"><I>x</I></SPAN>
and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of the position of Hansel and Grethel (<!-- MATH
 $0 \le x, y \le 100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2672.gif
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2672.gif
 ALT="$ \le$">100</SPAN>). Round the numbers as
usual: up if the next digit would be <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2672.gif
 ALT="$ \ge$">5</SPAN>, down otherwise.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
30 50 90
20 40 180
30 40 96
20 20 150
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
20.0000 50.0000
7.0610 42.4110
</PRE>

<P>

______________________________________________________
2673||||||false||||||

The new highway promised a better and faster connection between A and B and a considerable
reduction of congestion. Unfortunately there was an obstacle: the old mansion. This conflict was
soon resolved in favor of the highway.

<P>
Shortly before the demolition of the mansion was about to start, a lover of old mansions found out
that the colorfully tiled floors in the mansion were designed by the famous painter Mondriaan,
and therefore had great cultural value. They should be saved. They should be removed from the
mansion before the mansion will be demolished.

<P>
A floor moving expert was hired to accomplish the job. He decided to cut each floor into smaller
pieces, in order to make it more tractable. He possessed a fine floor cutting tool which enabled
him to cut a rectangular piece of floor into two smaller rectangular pieces, cutting parallel to
one of the sides. Of course the cutting should be between tiles; cutting through a tile was not
an option. This way the floor in Figure 1 could easily be cut into 9 tiles. The floor in Figure 2
however can not be cut into smaller pieces. The floor in Figure 3 can be cut into six pieces, but
one of the parts will consist of several tiles.

<P>
<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2673.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2673.gif
 ALT="\epsfbox{p2673.eps}">
</DIV>

<P>
While preparing for the job, the floor moving expert was anxious to know how large the remaining
pieces could be: would they be heavy, very heavy or extremely heavy? What kind of floor lifting
tool should be hired? Because the floors have a fixed thickness, and a fixed density, the weight
of a piece of floor only depends upon its area.

<P>

Given a rectangular floor covered with rectangular tiles, find the area of the largest piece, after
the floor is cut into the smallest possible pieces. The words smallest and largest refer to the area
of the pieces. Cutting through a tile is not allowed. A cut through a rectangle is always parallel
to one of the sides, and through the full length (or width) of the rectangle.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input contains several floors. The first line of the input gives the number of floors.

<P>
Each floor is described in several lines. The first line contains two positive integers: the length
and width of the floor, in millimeters. A floor is at most 40000 mm long or wide. The next line
contains a single number: the number <SPAN CLASS="MATH"><I>t</I></SPAN> of tiles (<!-- MATH
 $1 \le t \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2673.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2673.gif
 ALT="$ \le$">100</SPAN>). The following <SPAN CLASS="MATH"><I>t</I></SPAN> lines each contain
the description of a tile. A tile is given as four integers:

<P>

<P>
<BR>

<!-- MATH
 $x_l\ y_l\ x_h\ y_h$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>l</SUB>&nbsp;<I>y</I><SUB>l</SUB>&nbsp;<I>x</I><SUB>h</SUB>&nbsp;<I>y</I><SUB>h</SUB></SPAN>

<P>

<P>
<BR>
where <!-- MATH
 $(x_l, y_l)$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>l</SUB>, <I>y</I><SUB>l</SUB>)</SPAN> are the coordinates of the lower left corner of the tile, and <!-- MATH
 $(x_h, y_h)$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>h</SUB>, <I>y</I><SUB>h</SUB>)</SPAN>
are the coordinates
of the upper rightmost corner of the tile. A tile always has a positive area. The order of the
coordinates of the floor and those of the tile coincide, of course.

<P>
You may assume that the tiles are mutually disjoint, and cover the floor, the whole floor, and
nothing but the floor.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case (each floor) the output contains a number, on a single line: the area of the
largest piece of floor (in square millimeters), after cutting the floor into the smallest pieces
possible, with the given restrictions.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
300 400
3
0 0 300 200
0 200 200 400
200 200 300 400
300 300
5
0 0 200 100
200 0 300 200
0 100 100 300
100 200 300 300
100 100 200 200
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
60000
90000
</PRE>

<P>

______________________________________________________
2674||||||false||||||

The annual picnic of the Zeron company will take place tomorrow. This year they have agreed on
the Gloomwood park as the place to be. The girl responsible for the arrangement, Lilith, thinks
it would be nice if everyone is able to watch everyone else during the occasion. From geometry
class she remembers that a region in the plane with the property that a straight line between any
two points in the region, lies entirely in the region, is called convex. So that is what she is looking
for. Unfortunately, this seems hard to fulfil, since Gloomwood has many opaque obstacles, such
as large trees, rocks, and so on.

<P>
Owing to the fact that the staff of the Zeron company is pretty large, Lilith has a rather intricate
problem to solve: finding a location to hold them all. Therefore, some of her friends help her
to draw a map of the whereabouts of the largest obstacles. To mark out the place, she will use
a ribbon stretched around the obstacles on the circumference of the chosen region. The opaque
obstacles should be thought of as points of zero extension.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2674.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2674.gif
 ALT="\epsfbox{p2674.eps}">
</DIV>

<P>
<DIV ALIGN="CENTER">
</DIV>
<P>
<DIV ALIGN="CENTER"><EM>The Gloomwood park from above with black dots representing obstacles. 
<BR>
The picnic area is the
region whose circumference is dashed.</EM>

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input contains a single positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>, specifying the number of test
scenarios to follow. Each test scenario begins with a line containing an integer <SPAN CLASS="MATH"><I>m</I></SPAN>, the number of
obstacles in the park (<!-- MATH
 $2 < m < 100$
 -->
<SPAN CLASS="MATH">2 &lt; <I>m</I> &lt; 100</SPAN>). The next line contains the coordinates of the <SPAN CLASS="MATH"><I>m</I></SPAN> obstacles,
in the order <!-- MATH
 $x_1\ y_1\ x_2\ y_2\ x_3\ y_3 \dots$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB>&nbsp;<I>x</I><SUB>3</SUB>&nbsp;<I>y</I><SUB>3</SUB>...</SPAN>. All coordinates are integers in the
range [0, 1000]. Each
scenario has at least three obstacles that are not on a straight line, and no two obstacles have the
same coordinates.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test scenario, one line of output should be generated, stating the area with one decimal
of the largest convex polygon having obstacles as corners, but no enclosed obstacles.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
11
3 3 8 4 12 2 22 3 23 5 24 7 27 12 18 12 13 13 6 10 9 6
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
129.0
</PRE>

<P>

______________________________________________________
2675||||||false||||||

In Pearlania everybody is fond of pearls. One company, called <EM>The Royal Pearl</EM>, produces a lot
of jewelry with pearls in it. <EM>The Royal Pearl</EM> has its name because it delivers to the royal family
of Pearlania. But it also produces bracelets and necklaces for ordinary people. Of course the
quality of the pearls for these people is much lower then the quality of pearls for the royal family.
In Pearlania pearls are separated into 100 different quality classes. A quality class is identified
by the price for one single pearl in that quality class. This price is unique for that quality class
and the price is always higher then the price for a pearl in a lower quality class.

<P>
Every month the stock manager of <EM>The Royal Pearl</EM> prepares a list with the number of pearls
needed in each quality class. The pearls are bought on the local pearl market. Each quality class
has its own price per pearl, but for every complete deal in a certain quality class one has to pay
an extra amount of money equal to ten pearls in that class. This is to prevent tourists from buying
just one pearl.

<P>
Also <EM>The Royal Pearl</EM> is suffering from the slow-down of the global economy. Therefore the
company needs to be more efficient. The CFO (chief financial officer) has discovered that he
can sometimes save money by buying pearls in a higher quality class than is actually needed.
No customer will blame <EM>The Royal Pearl</EM> for putting better pearls in the bracelets, as long as the
prices remain the same.

<P>
For example 5 pearls are needed in the 10 Euro category and 100 pearls are needed in the 20
Euro category. That will normally cost: <!-- MATH
 $(5 +10) \times 10+ (100+10) \times 20 =2350$
 -->
<SPAN CLASS="MATH">(5 + 10)&#215;10 + (100 + 10)&#215;20 = 2350</SPAN> Euro.
Buying all 105 pearls in the 20 Euro category only costs: <!-- MATH
 $(5 +100+10) \times 20 =2350$
 -->
<SPAN CLASS="MATH">(5 + 100 + 10)&#215;20 = 2350</SPAN> Euro.

<P>
The problem is that it requires a lot of computing work before the CFO knows how many pearls
can best be bought in a higher quality class. You are asked to help <EM>The Royal Pearl</EM> with a
computer program.

<P>

Given a list with the number of pearls and the price per pearl in different quality classes, give the
lowest possible price needed to buy everything on the list. Pearls can be bought in the requested,
or in a higher quality class, but not in a lower one.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input contains the number of test cases. Each test case starts with a line
containing the number of categories <SPAN CLASS="MATH"><I>c</I></SPAN> (<!-- MATH
 $1 \le c \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2675img1.gif
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2675img1.gif
 ALT="$ \le$">100</SPAN>). Then, <SPAN CLASS="MATH"><I>c</I></SPAN> lines follow, each with two numbers
<SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>. The first of these numbers is the number of pearls <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> needed in a
class (<!-- MATH
 $1 \le a_i \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2675img1.gif
 ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2675img1.gif
 ALT="$ \le$">1000</SPAN>).
The second number is the price per pearl <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> in that class (<!-- MATH
 $1 \le p_i \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2675img1.gif
 ALT="$ \le$"><I>p</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2675img1.gif
 ALT="$ \le$">1000</SPAN>).
The qualities of the
classes (and so the prices) are given in ascending order. All numbers in the input are integers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case a single line containing a single number: the lowest possible price needed to
buy everything on the list.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
2
100 1
100 2
3
1 10
1 11
100 12
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
330
1344
</PRE>

<P>

______________________________________________________
2676||||||false||||||

A relatively simple method for compressing data works by creating a so-called <EM>Huffman tree</EM>
for a file and using it to compress and decompress the data it contains. For most applications,
binary Huffman trees are used (i.e., each node is either a leaf or has exactly two sub-nodes). One
can, however, construct Huffman trees with an arbitrary number of sub-trees (i.e, ternary or, in
general, <SPAN CLASS="MATH"><I>N</I></SPAN>-ary trees).

<P>
A Huffman tree for a file containing <SPAN CLASS="MATH"><I>Z</I></SPAN> different characters has <SPAN CLASS="MATH"><I>Z</I></SPAN> leaves. The path from the root
to a leaf that represents a certain character determines its encoding; each step towards the leaf
determines an encoding character (which can be <!-- MATH
 $0, 1, \dots , (N-1)$
 -->
<SPAN CLASS="MATH">0, 1,...,(<I>N</I> - 1)</SPAN>). By placing often-occurring
characters closer to the root, and less often occurring characters further away from the root, the
desirable compression is achieved. Strictly speaking, such a tree is a Huffman tree only if the
resulting encoding takes the minimal number of <SPAN CLASS="MATH"><I>N</I></SPAN>-ary symbols to encode the complete file.

<P>
For this problem, we only consider trees where each node is either an internal node, or a leaf
encoding a character; there are no <EM>dangling leaves</EM> that do not encode for a character.

<P>
The figure below shows a sample ternary Huffman tree; the characters `<TT>a</TT>' and `<TT>e</TT>' are encoded
using one ternary symbol; the less frequently occurring characters `<TT>s</TT>' and `<TT>p</TT>' are encoded using
two ternary symbols; and the very rare symbols `<TT>x</TT>', `<TT>q</TT>' and `<TT>y</TT>' are encoded using three ternary
symbols each.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2676.eps}$
 -->
<IMG
 WIDTH="401" HEIGHT="433" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2676.gif
 ALT="\epsfbox{p2676.eps}">
</DIV>

<P>
<DIV ALIGN="CENTER">
<EM>Sample ternary Huffman tree</EM>

</DIV>

<P>
Of course, if we want to decompress a list of <SPAN CLASS="MATH"><I>N</I></SPAN>-ary symbols later on, it is important to know
which tree was used to compress the data. This can be done in several ways. In this problem
we use the following method: the stream of data will be preceded by a header consisting of the
encoded versions of the <SPAN CLASS="MATH"><I>Z</I></SPAN> characters occurring in the original file, in lexicographical order.

<P>

Given the number of source symbols <SPAN CLASS="MATH"><I>Z</I></SPAN>, a value <SPAN CLASS="MATH"><I>N</I></SPAN> denoting the `<EM>arity</EM>' of the Huffman tree, and a
header, give the mapping from source symbols to encoded symbols.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input starts with a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> on a separate line, denoting the number of test cases that
follow. Next, for each of the <SPAN CLASS="MATH"><I>T</I></SPAN> test cases, three lines follow:

<P>

<UL>
<LI>The number of different characters in the file (<!-- MATH
 $2 \le Z \le 20$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2676.gif
 ALT="$ \le$"><I>Z</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2676.gif
 ALT="$ \le$">20</SPAN>);
</LI>
<LI>The number <SPAN CLASS="MATH"><I>N</I></SPAN>, denoting the `<EM>arity</EM>' of the Huffman tree (<!-- MATH
 $2 \le N \le 10$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2676.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2676.gif
 ALT="$ \le$">10</SPAN>);
</LI>
<LI>A string representing the header of the received message; each character will be a digit in
the range <!-- MATH
 $[0, (N-1)]$
 -->
<SPAN CLASS="MATH">[0,(<I>N</I> - 1)]</SPAN>. This string will contain less than 200 characters.
</LI>
</UL>

<P>

<P>
<BR>

<B>Note:</B> Although rare, it is possible for a header to have multiple interpretations
(e.g., the header
`<TT>010011101100</TT>' with <SPAN CLASS="MATH"><I>Z</I> = 5</SPAN> and <SPAN CLASS="MATH"><I>N</I> = 2</SPAN>). It is guaranteed that <EM>all cases in the test input have
a unique solution</EM>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each of the <SPAN CLASS="MATH"><I>T</I></SPAN> test-cases, print <SPAN CLASS="MATH"><I>Z</I></SPAN> lines giving the encoded version of each of the <SPAN CLASS="MATH"><I>Z</I></SPAN> characters
in the testcase in ascending order. Use the format <SPAN CLASS="MATH"><I>original</I></SPAN> <TT>-&gt;</TT> <SPAN CLASS="MATH"><I>encoding</I></SPAN>,
where <SPAN CLASS="MATH"><I>original</I></SPAN> is
a decimal value in the range <!-- MATH
 $[0, (Z-1)]$
 -->
<SPAN CLASS="MATH">[0,(<I>Z</I> - 1)]</SPAN>, and <SPAN CLASS="MATH"><I>encoding</I></SPAN> is the string of encoding digits for this
symbol (each digit is <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2676.gif
 ALT="$ \ge$"> 0</SPAN> and <SPAN CLASS="MATH">&lt; <I>N</I></SPAN>).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
3
2
10011
4
2
000111010
19
10
01234678950515253545556575859
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0-&gt;10
1-&gt;0
2-&gt;11
0-&gt;00
1-&gt;011
2-&gt;1
3-&gt;010
0-&gt;0
1-&gt;1
2-&gt;2
3-&gt;3
4-&gt;4
5-&gt;6
6-&gt;7
7-&gt;8
8-&gt;9
9-&gt;50
10-&gt;51
11-&gt;52
12-&gt;53
13-&gt;54
14-&gt;55
15-&gt;56
16-&gt;57
17-&gt;58
18-&gt;59
</PRE>

<P>

______________________________________________________
2677||||||false||||||

In a recent programming contest, one of the problems was about tiling floors with rectangular
tiles. The input specification reads like this:

<P>
<BLOCKQUOTE>
The input contains several floors. The first line of the input gives the number of floors.
Each floor is described in several lines. The first line contains two positive integers: the
length and width of the floor, in millimeters. A floor is at most 40000 mm long or wide.
The next line contains a single number: the number <SPAN CLASS="MATH"><I>t</I></SPAN> of tiles (<!-- MATH
 $1 \le t \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2677img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2677img1.gif
 ALT="$ \le$">100</SPAN>). The following
<SPAN CLASS="MATH"><I>t</I></SPAN> lines each contain the description of a tile. A tile is given as four integers:
</BLOCKQUOTE>
<P>
<P>
<BR>
<BLOCKQUOTE>
<!-- MATH
 $x_l\ y_l\ x_h\ y_h$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>l</SUB>&nbsp;<I>y</I><SUB>l</SUB>&nbsp;<I>x</I><SUB>h</SUB>&nbsp;<I>y</I><SUB>h</SUB></SPAN>
</BLOCKQUOTE>
<P>
<P>
<BR>
<BLOCKQUOTE>
where <!-- MATH
 $(x_l, y_l)$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>l</SUB>, <I>y</I><SUB>l</SUB>)</SPAN> are the coordinates of the lower left corner of the tile, and <!-- MATH
 $(x_h, y_h)$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>h</SUB>, <I>y</I><SUB>h</SUB>)</SPAN> are the
coordinates of the upper rightmost corner of the tile. A tile always has a positive area. The
order of the coordinates of the floor and those of the tile coincide, of course.
</BLOCKQUOTE>
<P>
<BLOCKQUOTE>You may assume that the tiles are mutually disjoint, and cover the floor, the whole floor,
and nothing but the floor.

</BLOCKQUOTE>

<P>
The last line of this specification raised some problems. Not for the contestants, but for the
judges. Some of the test cases consist of many tiles. How can we be sure that our input file meets
this condition? What we need is a checking program that verifies this condition.

<P>

Given an input file in the above format, find out for each floor whether the tiles

<P>

<OL>
<LI>are disjoint,
</LI>
<LI>do not lie outside the floor,
</LI>
<LI>do cover the floor.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input contains several floors. The first line of the input gives the number of floors. Each
floor is described in several lines. The first line contains two positive integers: the length and
width of the floor, in millimeters. A floor is at most 40000 mm long or wide. The next line
contains a single number: the number <SPAN CLASS="MATH"><I>t</I></SPAN> of tiles (<!-- MATH
 $1 \le t \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2677img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2677img1.gif
 ALT="$ \le$">100</SPAN>). The following <SPAN CLASS="MATH"><I>t</I></SPAN> lines each contain
the description of a tile. A tile is given as four integers:

<P>

<P>
<BR>

<!-- MATH
 $x_l\ y_l\ x_h\ y_h$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>l</SUB>&nbsp;<I>y</I><SUB>l</SUB>&nbsp;<I>x</I><SUB>h</SUB>&nbsp;<I>y</I><SUB>h</SUB></SPAN>

<P>

<P>
<BR>
where <!-- MATH
 $(x_l, y_l)$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>l</SUB>, <I>y</I><SUB>l</SUB>)</SPAN> are the coordinates of the lower left corner of the tile, and <!-- MATH
 $(x_h, y_h)$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>h</SUB>, <I>y</I><SUB>h</SUB>)</SPAN> are the coordinates
of the upper rightmost corner of the tile. A tile always has a positive area. The order of the
coordinates of the floor and those of the tile coincide, of course.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each floor the output contains a single line, containing one of the following words:

<P>
<PRE><TT>
<TT>NONDISJOINT</TT> 		 if overlapping tiles occur; 
<BR><TT>NONCONTAINED</TT> 		 if no overlapping tiles occur, 
<BR>
but some tiles go outside the floor; 
<BR><TT>NONCOVERING</TT> 		 if no overlapping tiles occur, 
<BR>
and no tiles go outside the floor, 
<BR>
but some parts of the floor are not covered; 
<BR><TT>OK</TT> 		 if none of these is true.
</TT></PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
4 3
2
0 0 2 2
1 1 5 5
4 3
2
0 0 2 2
-2 2 5 5
4 3
2
0 0 2 2
2 0 4 2
4 3
3
0 0 2 2
2 0 4 2
0 2 4 3
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
NONDISJOINT
NONCONTAINED
NONCOVERING
OK
</PRE>

<P>

______________________________________________________
2678||||||false||||||
<P>A sequence of <SPAN CLASS="MATH"><I>N</I></SPAN> positive integers <!-- MATH
 $(10 < N < 100 \ 000)$
 --><SPAN CLASS="MATH">(10 &lt; <I>N</I> &lt; 100&nbsp;000)</SPAN>, each of them less than or equal 10000, and a positive integer <SPAN CLASS="MATH"><I>S</I></SPAN> <!-- MATH
 $(S < 100 \ 000 \ 000)$
 --><SPAN CLASS="MATH">(<I>S</I> &lt; 100&nbsp;000&nbsp;000)</SPAN> are given. Write a program to find the minimal length of the subsequence of consecutive elements of the sequence, the sum of which is greater than or equal to <SPAN CLASS="MATH"><I>S</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Many test cases will be given. For each test case the program has to read the numbers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>S</I></SPAN>, separated by an interval, from the first line. The numbers of the sequence are given in the second line of the test case, separated by intervals. The input will finish with the end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each the case the program has to print the result on separate line of the output file. If there isn't such a subsequence, print 0 on a line by itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 15 
5 1 3 5 10 7 4 9 2 8 
5 11 
1 2 3 4 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
3
</PRE><P>
______________________________________________________
2679||||||false||||||
<BLOCKQUOTE>"The instructions to turn always to the left reminded me that such was the common procedure for discovering the central courtyard of certain labyrinths."</BLOCKQUOTE>in <I>The garden of forking paths</I> by Jorge Luis Borges.<P>A fellow librarian has exhumed in the Library of Babel a vast catalogue of labyrinths. It is our duty to classify them all and we count on your assistance. The plans of the labyrinths are already digitized and we need you to write a program to decide if the central courtyard of a given labyrinth can be reached following the simple procedure of always turning left at any intersection, and thus be called a <I>left labyrinth</I>.<P>The digitalization process reduces the plan of a labyrinth to a grid of cells, being each cell either a block of wall or just floor. Walls are sequences of contiguous blocks, forming either horizontal or vertical corridors between them. Each labyrinth has a single entrance, a hole in its exterior walls, and a single central courtyard. The courtyard differs from the corridors in the shape: a floor cell in a corridor has at least 2 block of wall on each side. You can assume that each plan has a single labyrinth and its outside walls can be contoured within the plan.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p>The first two input lines are the integers, smaller than 100,<BLOCKQUOTE><P><it>n</it> - the number of lines in the map, and<P><it>m</it> - the number of characters per line in the map.</BLOCKQUOTE><P>The following <it>n</it> lines, each with <it>m</it> characters, have only two valid character values:<BLOCKQUOTE><P><tt>#</tt> - (sharp) representing a block of a wall;<P><tt>.</tt> - (dot) representing part of the floor.</BLOCKQUOTE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p>Your program must write either <TT>YES</TT> if the given labyrinth is a left labyrinth or <TT>NO</TT> otherwise<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

30
50
..................................................
..................................................
..................................................
.....##############..............############.....
.....#.........#..#..............#..........#.....
.....#.#######.#.##..............#.########.#.....
.....#.#.....#....#..............#.#......#.#.....
.....#.#.#####.####..............#.#.####.#.#.....
.....#.#.....#...#################.#.##.#...#.....
.....#.#####.###........................#.#.#.....
.....#.........#.###############.#.##########.....
.....#########.#.#.#...........#.#..#.............
.............#.#.#.#...........###.##.............
.............#.#.#.#...........#....#.............
.............#.#...#...........#.##.#.............
.............#######...........#.##.#.............
.............#.................#.#..#.............
.............#.#################.####.............
.....#########...#.................##########.....
.....#.........###.#.#.##########.#######.#.#.....
.....#.#########.....#.#..........#.....#.#.#.....
.....#.#.........#####.##########.#.###.#.#.#.....
.....#.######.#####...........#.#.#.#.#.#.#.#.....
.....#......#.....#...........#.....#.#.#.#.#.....
.....#.##########.#...........#####.#.#.#.#.#.....
.....#............#...........#...........#.#.....
.....##############...........###############.....
..................................................
..................................................
..................................................
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
YES
</PRE><p>
______________________________________________________
2680||||||false||||||
<P>Many people like to solve hard puzzles some of which may lead them to madness. One such puzzle could be finding a hidden prime number in a given text. Such number could be the number of different substrings of a given size that exist in the text. As you soon will discover, you really need the help of a computer and a good algorithm to solve such a puzzle.<P>Your task is to write a program that given the size, N, of the substring, the number of different characters that may occur in the text, NC, and the text itself, determines the number of different substrings of size N that appear in the text.<P>As an example, consider N=3, NC=4 and the text "daababac". The different substrings of size 3 that can be found in this text are: "daa"; "aab"; "aba"; "bab"; "bac". Therefore, the answer should be 5.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><b>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </b><p>The first line of input consists of two numbers, N and NC, separated by exactly one space. This is followed by the text where the search takes place. You may assume that the maximum number of substrings formed by the possible set of characters does not exceed 16 Millions.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p>The program should output just an integer corresponding to the number of different substrings of size N found in the given text.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

3 4
daababac
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
5
</PRE><p>
______________________________________________________
2681||||||false||||||
<P>
It's hard to construct a problem that's so easy that everyone will get it, yet still difficult enough to be worthy of some respect. Usually, we err on one side or the other. How simple can a problem really be? 

<P>
Here, as in Celebrity Jepoardy, questions and answers are a bit confused, and, because the participants are celebrities, there's a real need to make the challenges simple. Your program needs to prepare a question to be solved -- an equation to be solved -- given the answer. Specifically, you have to write a program which finds the <SPAN  CLASS="textit">simplest</SPAN> possible equation to be solved given the answer, considering all possible equations using the standard mathematical symbols in the usual manner. In this context, simplest can be defined unambiguously several different ways leading to the same path of resolution. For now, find the equation whose transformation into the desired answer requires the least effort. 

<P>
For example, given the answer <TT>X = 2</TT>, you might create the equation <TT>9 - X = 7</TT>. Alternately, you could build the system <code>X &gt; 0; X^2 = 4</code>. These may not be the simplest possible equations. Solving these mind-scratchers might be hard for a celebrity. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each input line contains a solution in the form <SPAN CLASS="MATH">&lt; <I>symbol</I> &gt;</SPAN> <TT>=</TT> <SPAN CLASS="MATH">&lt; <I>value</I> &gt;</SPAN> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input line, print the simplest system of equations which would to lead to the provided solution, respecting the use of space exactly as in the input. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Y = 3 
X=9
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Y = 3 
X=9
</PRE> 

<P>

______________________________________________________
2682||||||false||||||
<P>Sherlock Holmes, the well known detective, must solve a puzzling situation. He has <SPAN CLASS="MATH"><I>n</I></SPAN> boxes <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB>, <I>B</I><SUB>2</SUB>,..., <I>B</I><SUB>n</SUB></SPAN> , where <SPAN CLASS="MATH"><I>n</I></SPAN> is even, each containing <SPAN CLASS="MATH"><I>m</I></SPAN> balls. The balls are white and black. Let <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB> = (<I>W</I><SUB>i</SUB>, <I>B</I><SUB>i</SUB>)</SPAN> denote a box with <SPAN CLASS="MATH"><I>W</I><SUB>i</SUB></SPAN> white balls and <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN> black balls. He must partition the boxes into two sets, each consisting of <SPAN CLASS="MATH"><I>n</I>/2</SPAN> boxes, such that either the white balls or the black balls hold a majority in both sets. If there is such a majority, let <SPAN CLASS="MATH"><I>m</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>m</I><SUB>2</SUB></SPAN> denote the percentage of the majority balls in each set. Holmes must find very quickly the <SPAN CLASS="textbf">maximum</SPAN> possible value of <SPAN CLASS="MATH">min(<I>m</I><SUB>1</SUB>, <I>m</I><SUB>2</SUB>)</SPAN>. Can you help Holmes?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The program input is from a text file. Each data set in the file stands for a particular set of boxes. A data set starts with the number <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(n < 10000)$
 --><SPAN CLASS="MATH">(<I>n</I> &lt; 10000)</SPAN> of boxes. Follows the number <SPAN CLASS="MATH"><I>m</I></SPAN> <!-- MATH
 $(m < 10000)$
 --><SPAN CLASS="MATH">(<I>m</I> &lt; 10000)</SPAN> of balls, and for each box the number <SPAN CLASS="MATH">( &lt; 10000)</SPAN> of white and black balls in this specific order.<P>The program prints the color (<TT>W</TT> or <TT>B</TT>) of the balls that hold the majority followed by the maximum value - if there is such a majority, or ``<TT>No solution</TT>" if no majority can be obtained.<P>White spaces can occur freely in the input. The input data are correct and terminate with an end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of data the program prints the result to the standard output from the beginning of a line.<P>An input/output sample is below. There is a single data set that contains 4 boxes each containing 30 balls. The first box, for example, contains 17 white balls and 13 black balls. There is only one possible partition of the boxes <SPAN CLASS="MATH">(<I>B</I><SUB>1</SUB>, <I>B</I><SUB>4</SUB>)</SPAN>, <SPAN CLASS="MATH">(<I>B</I><SUB>2</SUB>, <I>B</I><SUB>3</SUB>)</SPAN>, the white balls holding majority. The result for the data set is the identifier <TT>W</TT> and the maximum value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
30 
17 13
12 18
20 10
14 16
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
W 51.67
</PRE><P>
______________________________________________________
2683||||||false||||||
<P>The payment system in the University of Mineral Water Production is completely automated (written entirely in Tomato Programming Language) and lets you input the amount of money you want to withdraw. Due to the high payment rates of the professors they may input the amounts in exponential forms. So if you want to withdraw 16 MWU (mineral water units) you can enter <TT>16</TT>, <code>2^4</code> or <code>2^2^2</code>.<P>One day, Stanescu tried to withdraw some money from his account which had balance of 80MWU. He mistakenly entered <code>2^3^2</code> and for his surprise he got 512MWU, although he should not be able to take more than 80. The system was composed of two main modules - the first module checks whether the account has enough money to execute the transaction and the second module gives the money to the user. It turned out that the first module has a problem with the `<code>^</code>' operator. It evaluates it from left to right, while the second evaluates them from right to left (the correct way). Thus for the first module <code>2^3^2=(2^3)^2=64</code> while for the second it's <code>2^3^2=2^(3^2)=512</code>.<P>You have to write program which helps Stanescu get as much as he can from the university system. If you think it's not legal or something, be sure that the University of Mineral Water Production is bad and evil.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>In the input file the amounts of the accounts of Stanescu will be given. Each amount is given on a separate line and is an integer between 2 and <SPAN CLASS="MATH">10<SUP>100</SUP> - 1</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each given amount, your program should print to the standard output what Stanescu should enter to get maximal number of money. The output should:<P><UL><LI>consists only of integers and the `<code>^</code>' operator between them. </LI><LI>pass the check of the first module and be as much as possible for the second. </LI><LI>not contain the number 1 (it is useless anyway). </LI></UL><P>If more than one answers exist, output the one whose first number is minimal, if still more exist, choose the one whose second number is minimal and so on.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
16 
80 
49 
1025 
12341234 
12345678901234567890
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2^2^2 
2^3^2 
7^2 
2^2^5 
2^2^2^5 
2^2^2^2^3^2
</PRE><P>
______________________________________________________
2684||||||false||||||
<P>
Word puzzles are usually simple and very entertaining for all ages.
They are so entertaining that Pizza-Hut company started using table
covers with word puzzles printed on them, possibly with the intent to
minimise their client's perception of any possible delay in bringing
them their order.

<P>
Even though word puzzles may be entertaining to solve by hand, they
may become boring when they get very large. Computers do not yet get
bored in solving tasks, therefore we thought you could devise a
program to speedup (hopefully!) solution finding in such puzzles.

<P>
The following figure illustrates the PizzaHut puzzle. The names of the
pizzas to be found in the puzzle are: <FONT SIZE="-1">MARGARITA, ALEMA,
  BARBECUE, TROPICAL, SUPREMA, LOUISIANA, CHEESEHAM, EUROPA, HAVAIANA,
  CAMPONESA</FONT>.  

<P>

<DIV ALIGN="CENTER"><TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1">
 </FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">0</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">1</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">2</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">3</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">4</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">5</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">6</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">7</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">8</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">9</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">10</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">11</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">12</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">13</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">14</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">15</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">16</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">17</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">18</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">19</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 

0</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
1</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
2</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Z</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
3</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Z</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Z</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
4</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
5</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
6</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
7</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Z</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
8</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
9</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
10</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
11</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
12</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">D</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Z</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
13</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
14</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
15</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">D</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
16</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
17</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">D</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
18</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
19</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
</TR>
</TABLE></DIV>

<P>
Your task is to produce a program that given the word puzzle and words
to be found in the puzzle, determines, for each word, the position of
the first letter and its orientation in the puzzle.

<P>
You can assume that the left upper corner of the puzzle is the origin,
<it>(0,0)</it>. Furthemore, the orientation of the word is marked clockwise
starting with letter <TT>A</TT> for north (note: there are 8 possible
directions in total).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<b>
The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</b>
<p>
The first line of input consists of three positive numbers, the
number of lines, <it>0 < L &le; 1000</it>, the number of columns,
<it>0 < C &le; 1000</it>, and the number of words to be found, 
<it>0 < W &le; 1000</it>. The following <it>L</it> input lines, each
 one of size <it>C</it> characters, contain
the word puzzle. Then at last the <it>W</it> words are input one per line.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<b>
For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</b>
<p>
Your program should output, for each word (using the same order as the
words were input) a triplet defining the coordinates, line and column,
where the first letter of the word appears, followed by a letter
indicating the orientation of the word according to the rules define
above. Each value in the triplet must be separated by one space only.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
1

20 20 10
QWSPILAATIRAGRAMYKEI
AGTRCLQAXLPOIJLFVBUQ
TQTKAZXVMRWALEMAPKCW
LIEACNKAZXKPOTPIZCEO
FGKLSTCBTROPICALBLBC
JEWHJEEWSMLPOEKORORA
LUPQWRNJOAAGJKMUSJAE
KRQEIOLOAOQPRTVILCBZ
QOPUCAJSPPOUTMTSLPSF
LPOUYTRFGMMLKIUISXSW
WAHCPOIYTGAKLMNAHBVA
EIAKHPLBGSMCLOGNGJML
LDTIKENVCSWQAZUAOEAL
HOPLPGEJKMNUTIIORMNC
LOIUFTGSQACAXMOPBEIO
QOASDHOPEPNBUYUYOBXB
IONIAELOJHSWASMOUTRK
HPOIYTJPLNAQWDRIBITG
LPOINUYMRTEMPTMLMNBO
PAFCOPLHAVAIANALBPFS
MARGARITA
ALEMA
BARBECUE
TROPICAL
SUPREMA
LOUISIANA
CHEESEHAM
EUROPA
HAVAIANA
CAMPONESA
</PRE>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
0 15 G
2 11 C
7 18 A
4 8 C
16 13 B
4 15 E
10 3 D
5 1 E
19 7 C
11 11 H
</PRE>

<p>

______________________________________________________
2685||||||false||||||
<P>River polution control is a major challenge that authorities face in order to ensure future clean water supply. Sewage treatment plants are used to clean-up the dirty water comming from cities before being discharged into the river.<P>As part of a coordinated plan, a pipeline is setup in order to connect cities to the sewage treatment plants distributed along the river. It is more efficient to have treatment plants running at maximum capacity and less-used ones switched off for a period. So, each city has its own treatment plant by the river and also a pipe to its neighbouring city upstream and a pipe to the next city downstream along the riverside. At each city's treatment plant there are three choices:<UL><LI><B>either</B> process any water it may receive from one neighbouring city, together with its own dirty water, discharging the cleaned-up water into the river; </LI><LI><B>or</B> send its own dirty water, plus any from its downstream neighbour, along to the upstream neighbouring city's treatment plant (provided that city is not already using the pipe to send it's dirty water downstream); </LI><LI><B>or</B> send its own dirty water, plus any from the upstream neighbour, to the downstream neighbouring city's plant, if the pipe is not being used. </LI></UL><DIV ALIGN="CENTER"><IMG BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2685.jpg></DIV><P>The choices above ensure that:<UL><LI>every city must have its water treated somewhere and </LI><LI>at least one city must discharge the cleaned water into the river. </LI></UL><P>Let's represent a city discharging water into the river as "<TT>V</TT>" (a downwards flow), passing water onto its neighbours as "<TT>&gt;</TT>" (to the next city on its right) or else "<TT>&lt;</TT>" (to the left). When we have several cities along the river bank, we assign a symbol to each (<TT>V</TT>, <TT>&lt;</TT> or <TT>&gt;</TT>) and list the cities symbols in order. For example, <B>two</B> cities, <TT>A</TT> and <TT>B</TT>, can<UL><LI>each treat their own sewage and each discharges clean water into the river. So <TT>A</TT>'s action is denoted <TT>V</TT> as is <TT>B</TT>'s and we write "<TT>VV</TT>" ; </LI><LI>or else city <TT>A</TT> can send its sewage along the pipe (to the right) to <TT>B</TT> for treatment and discharge, denoted "<TT>&gt;V</TT>"; </LI><LI>or else city <TT>B</TT> can send its sewage to (the left to) <TT>A</TT>, which treats it with its own dirty water and discharges (<TT>V</TT>) the cleaned water into the river. So <TT>A</TT> discharges (<TT>V</TT>) and <TT>B</TT> passes water to the left (<TT>&lt;</TT>), and we denote this situation as "<TT>V&lt;</TT>". </LI></UL><P>We could not have "<TT>&gt;&lt;</TT>" since this means <TT>A</TT> sends its water to <TT>B</TT> and <TT>B</TT> sends its own to <TT>A</TT>, so both are using the same pipe and this is not allowed. Similarly "<TT>&#171;</TT>" is not possible since <TT>A</TT>'s "<TT>&lt;</TT>" means it sends its water to a non-existent city on its left.<P>So we have just <B>3</B> possible set-ups that fit the conditions:<PRE>
         A    B       A &gt; B       A &lt; B 
         V    V           V       V             
  RIVER~ ~ ~ ~ ~     ~ ~ ~ ~ ~   ~ ~ ~ ~ ~RIVER
          "VV"        "&gt;V"         "V&lt;"
</PRE><P>If we now consider <B>three</B> cities, we can determine <B>8</B> possible set-ups.<P>Your task is to produce a program that given the number of cities <it>NC</it> (or treatment plants) in the river bank, determines the number of possible set-ups, <it>NS</it>, that can be made according to the rules define above.<P>You need to be careful with your design as the number of cities can be as large as 100.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a sequence of values, one per line, where each value represents the number of cities.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your output should be a sequence of values, one per line, where each value represents the number of possible set-ups for the corresponding number of cities read in the same input line.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
3
20
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
3
8
102334155
</PRE><p>
______________________________________________________
2686||||||false||||||
<P>
``A Long Time Ago, in a Galaxy Far, Far Away..." one advanced civilization discovered a manner of instant traveling between solar systems. Since that moment, they have devoted all their efforts to constructing pairs of stargates that connect distant planets. Soon enough communication network became so complex that they require help to maintain information about the connected worlds. 

<P>
Write a program that will help them maintain information about the connected systems and we will make sure that the best of your solutions will be forwarded to their space-time continuum. 

<P>
Planets A and B are connected if there is a direct stargate connection between them, or there is a planet sequence <!-- MATH
 $P_{1}, P_{2}, \ldots P_{n}$
 -->
<SPAN CLASS="MATH"><I>P</I><SUB>1</SUB>, <I>P</I><SUB>2</SUB>,...<I>P</I><SUB>n</SUB></SPAN> where <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB> = <I>A</I></SPAN>, <SPAN CLASS="MATH"><I>P</I><SUB>n</SUB> = <I>B</I></SPAN> and there is a direct stargate connection between <SPAN CLASS="MATH"><I>P</I><SUB>k</SUB></SPAN> and <!-- MATH
 $P_{k-1}, k \in \{2 \ldots n\}$
 -->
<SPAN CLASS="MATH"><I>P</I><SUB>k-1</SUB>, <I>k</I> <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2686img1.png
 ALT="$ \in$"> {2...<I>n</I>}</SPAN> . Connections are bidirectional. There can be multiple connection paths between two planets. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input file consist of multiple data sets. Each data set occupies one or more lines. There are no empty lines in the input file. Each line starts with a single letter `<TT>D</TT>', `<TT>C</TT>' or `<TT>Q</TT>' (upper or lower case) followed by 1 to 5 integers with following meaning: 

<P>
`<TT>D</TT>' <SPAN  CLASS="textbf">(define)</SPAN> has only one argument which defines number of planets <SPAN CLASS="MATH"><I>N</I></SPAN> considered in following data set (<!-- MATH
 $N \le 6000000$
 -->
<SPAN CLASS="MATH"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2686img1.png
 ALT="$ \le$">6000000</SPAN>, planets are numerated from <SPAN CLASS="MATH">1..<I>N</I></SPAN>). 

<P>
`<TT>C</TT>' <SPAN  CLASS="textbf">(connect)</SPAN> creates a connection between a given pair(s) of planets. 

<P>
`<TT>Q</TT>' <SPAN  CLASS="textbf">(query)</SPAN> examines if a given pair(s) of planets are connected. 

<P>
Both `<TT>C</TT>' and `<TT>Q</TT>' command (`<SPAN CLASS="MATH"><I>X</I></SPAN>' in following text) share the same syntax: 

<P>
<SPAN CLASS="MATH"><I>X</I></SPAN> <SPAN CLASS="MATH"><I>src</I></SPAN> <SPAN CLASS="MATH"><I>dst</I></SPAN> - Creates a connection (or query) between given pair of planets <!-- MATH
 $(src, dst)$
 -->
<SPAN CLASS="MATH">(<I>src</I>, <I>dst</I>)</SPAN>. 

<P>
<SPAN CLASS="MATH"><I>X</I></SPAN> <SPAN CLASS="MATH"><I>src</I></SPAN> <SPAN CLASS="MATH"><I>dst</I></SPAN> <SPAN CLASS="MATH"><I>nnn</I></SPAN> - Creates a connection (or query) between src planet and nnn consecutive planets numerated from <SPAN CLASS="MATH"><I>dst</I></SPAN>. 

<P>
<SPAN  CLASS="textbf">Example:</SPAN> <SPAN CLASS="MATH"><I>X</I></SPAN> <TT>1 100 3</TT> creates following links (1,100), (1,101), (1,102). 

<P>
<!-- MATH
 $X \ src \ dst \ nnn \ step$
 -->
<SPAN CLASS="MATH"><I>X</I>&nbsp;<I>src</I>&nbsp;<I>dst</I>&nbsp;<I>nnn</I>&nbsp;<I>step</I></SPAN> - Creates a connection (or query) between <SPAN CLASS="MATH"><I>src</I></SPAN> planet and <SPAN CLASS="MATH"><I>nnn</I></SPAN> planets numerated from <SPAN CLASS="MATH"><I>dst</I></SPAN> with given step. 

<P>
<SPAN  CLASS="textbf">Example:</SPAN> <SPAN CLASS="MATH"><I>X</I></SPAN> <TT>1 100 3 5</TT> creates following links (1,100), (1,105), (1,110). 

<P>
<!-- MATH
 $X \ src \ dst \ nnn \ dststep \ srcstep$
 -->
<SPAN CLASS="MATH"><I>X</I>&nbsp;<I>src</I>&nbsp;<I>dst</I>&nbsp;<I>nnn</I>&nbsp;<I>dststep</I>&nbsp;<I>srcstep</I></SPAN> - Creates a connection (or query) between <SPAN CLASS="MATH"><I>nnn</I></SPAN> pairs of planets numerated from <SPAN CLASS="MATH"><I>src</I></SPAN> with <SPAN CLASS="MATH"><I>srcstep</I></SPAN> and <SPAN CLASS="MATH"><I>dst</I></SPAN> with <SPAN CLASS="MATH"><I>dststep</I></SPAN> respectively. 

<P>
<SPAN  CLASS="textbf">Example:</SPAN> <SPAN CLASS="MATH"><I>X</I></SPAN> <TT>1 100 3 5 15</TT> creates following links (1,100), (16,105), (31,110). 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output file contains one line pre each query (`<TT>Q</TT>') line in the input file. Each line contains two numbers separated by space dash space sequence. First value represents number of connected planet pairs from appropriate query while second represents number of disconnected planet pairs. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
d 5 
C 1 3 
D 20 
q 1 3 
c 1 10 10 
Q 1 2 18 1 1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 - 1 
9 - 9
</PRE> 

<P>

______________________________________________________
2687||||||false||||||
<P>Let us consider the set of integer numbers between 1 and <SPAN CLASS="MATH"><I>N</I></SPAN> inclusive. Let us order them lexicographically (i. e. like in the vocabulary), for example, for <SPAN CLASS="MATH"><I>N</I> = 11</SPAN> the order would be: 1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9.<P>Let us denote the position of the number <SPAN CLASS="MATH"><I>K</I></SPAN> in this ordering as <SPAN CLASS="MATH"><I>Q</I><SUB>N, K</SUB></SPAN>. For example, <SPAN CLASS="MATH"><I>Q</I><SUB>11, 2</SUB> = 4</SPAN>. Given numbers <SPAN CLASS="MATH"><I>K</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> find the smallest <SPAN CLASS="MATH"><I>N</I></SPAN> such that <SPAN CLASS="MATH"><I>Q</I><SUB>N, K</SUB> = <I>M</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input file contains several test cases, one per line. Each of them consists of two integer numbers <SPAN CLASS="MATH"><I>K</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2687img1.gif ALT="$ \le$"><I>K</I>, <I>M</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2687img1.gif ALT="$ \le$">10<SUP>9</SUP></SPAN>) separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case write a different output line. If such <SPAN CLASS="MATH"><I>N</I></SPAN> that <SPAN CLASS="MATH"><I>Q</I><SUB>N, K</SUB> = <I>M</I></SPAN> exists then write the smallest such <SPAN CLASS="MATH"><I>N</I></SPAN>, otherwise write `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2 4
2 1
100000001 1000000000
1000000000 11
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
11
0
100000000888888879
0
</PRE><P>
______________________________________________________
2688||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="345" HEIGHT="315" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2688.gif ALT="\epsfbox{p2688.eps}"></DIV><P>The prisoner of the ``IF" castle has decided to run away by disassembling the brick wall in his prison cell. To hide his work from his jailors he shall get rid of the bricks that he removes from the wall. All bricks have a shape of rectangular parallelepiped with the size of <SPAN CLASS="MATH"><I>A</I>&#215;<I>B</I>&#215;<I>C</I></SPAN> inches and are so strong that they are impossible to break. However, there's a small rectangular sewer hole in the cell's floor with the size of <SPAN CLASS="MATH"><I>D</I>&#215;<I>E</I></SPAN> inches that goes deep down as a rectangular well of the same size (so deep it is, that its depth could not be measured and can be neglected). The prisoner have precisely (up to a tenth of an inch!) measured all the sizes <SPAN CLASS="MATH"><I>A</I>, <I>B</I>, <I>C</I>, <I>D</I>, <I>E</I></SPAN> and wants to know if it is possible to dispose of the castle's bricks through the hole in the floor. Please, answer this question for him.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input file contains several test cases, one per line. Each of them consists of a single line with 5 numbers <SPAN CLASS="MATH"><I>A</I></SPAN>, <SPAN CLASS="MATH"><I>B</I></SPAN>, <SPAN CLASS="MATH"><I>C</I></SPAN>, <SPAN CLASS="MATH"><I>D</I></SPAN>, and <SPAN CLASS="MATH"><I>E</I></SPAN> separated by spaces. <SPAN CLASS="MATH"><I>A</I></SPAN>, <SPAN CLASS="MATH"><I>B</I></SPAN>, <SPAN CLASS="MATH"><I>C</I></SPAN> are the lengths of brick's sides, and <SPAN CLASS="MATH"><I>D</I></SPAN>, <SPAN CLASS="MATH"><I>E</I></SPAN> are the lengths of hole's sides. All lengths are at least 1 and at most 10 inches and have at most 1 digit after decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case write a different output line. Write just a single word `<TT>YES</TT>' if it is possible to dispose of the bricks through the hole or `<TT>NO</TT>' otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1.0 2.0 1.5 1.4 1.0
1.0 2.0 1.5 1.5 1.0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
NO
YES
</PRE><P>
______________________________________________________
2689||||||false||||||
<DIV ALIGN="CENTER"><IMG WIDTH="403" HEIGHT="257" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2689.gif ALT="\epsfbox{p2689.eps}"></DIV><P>Once upon a time there was a greedy King who ordered his chief Architect to build a field for royal cricket inside his park. The King was so greedy, that he would not listen to his Architect's proposals to build a field right in the park center with pleasant patterns of trees specially planted around and beautiful walks inside tree alleys for spectators. Instead, he ordered neither to cut nor to plant even a single tree in his park, but demanded to build the largest possible cricket field for his pleasure. If the Kind finds that the Architect has dared to touch even a single tree in his park or designed a smaller field that it was possible, then the Architect will loose his head. Moreover, he demanded his Architect to introduce at once a plan of the field with its exact location and size.<P>Your task is to help poor Architect to save his head, by writing a program that will find the maximum possible size of the cricket field and its location inside the park to satisfy King's requirements.<P>The task is somewhat simplified by the fact, that King's park has a rectangular shape and is situated on a flat ground. Moreover, park's borders are perfectly aligned with North-South and East-West lines. At the same time, royal cricket is always played on a square field that is also aligned with North-South and East-West lines. Architect has already established a Cartesian coordinate system and has precisely measured the coordinates of every tree. This coordinate system is, of course, aligned with North-South and East-West lines. Southwestern corner of the park has coordinates (0, 0) and Northeastern corner of the part has coordinates <SPAN CLASS="MATH">(<I>W</I>, <I>H</I>)</SPAN>, where <SPAN CLASS="MATH"><I>W</I></SPAN> and <SPAN CLASS="MATH"><I>H</I></SPAN> are the park width and height in feet respectively.<P>For this task, you may neglect the diameter of the trees. Trees cannot be inside the cricket field, but may be situated on its side. The cricket field may also touch park's border, but shall not lie outside the park.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR><P>The first line of the input file contains three integer numbers <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>W</I></SPAN>, and <SPAN CLASS="MATH"><I>H</I></SPAN>, separated by spaces. <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2689.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2689.gif ALT="$ \le$">100</SPAN>) is the number of trees in the park. <SPAN CLASS="MATH"><I>W</I></SPAN> and <SPAN CLASS="MATH"><I>H</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2689.gif ALT="$ \le$"><I>W</I>, <I>H</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2689.gif ALT="$ \le$">10000</SPAN>) are the park width and height in feet respectively.<P>Next <SPAN CLASS="MATH"><I>N</I></SPAN> lines describe coordinates of trees in the park. Each line contains two integer numbers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN> separated by a space ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2689.gif ALT="$ \le$"><I>X</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2689.gif ALT="$ \le$"><I>W</I></SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2689.gif ALT="$ \le$"><I>Y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2689.gif ALT="$ \le$"><I>H</I></SPAN>) that represent coordinates of <SPAN CLASS="MATH"><I>i</I></SPAN>-th tree. All trees are located at different coordinates.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>Write to the output file a single line with three integer numbers <SPAN CLASS="MATH"><I>P</I></SPAN>, <SPAN CLASS="MATH"><I>Q</I></SPAN>, and <SPAN CLASS="MATH"><I>L</I></SPAN> separated by spaces, where <SPAN CLASS="MATH">(<I>P</I>, <I>Q</I>)</SPAN> are coordinates of the cricket field Southwestern corner, and <SPAN CLASS="MATH"><I>L</I></SPAN> is a length of its sides. If there are multiple possible field locations with a maximum size, then output any one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

7 10 7
3 2
4 2
7 0
7 3
4 5
2 4
1 7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
4 3 4
</PRE><P><P><P><BR><B>Note:</B> This is a sample input and output that corresponds to the park plan that is shown on the picture.<P>
______________________________________________________
2690||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="230" HEIGHT="194" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2690.gif ALT="\epsfbox{p2690.eps}"></DIV><P>In the near future any research and publications about cryptography are outlawed throughout the world on the grounds of national security concerns. The reasoning for this is clear and widely accepted by all governments - if cryptography literature is public like in the old times, then everybody (even criminals and terrorists) could easily use it to hide their malicious plans from the national and international security forces. Consequently, public cryptographic algorithms and systems have ceased to exist, and everybody who needs strong protection for their secrets is forced to invent proprietary algorithms.<P><P><BR>The ACM Corporation has lots of competitors who are eager to learn its trade secrets. Moreover, the job to protect their secrets is complicated by the fact, that they are forced to use intercontinental communication lines which are easy to eavesdrop on, unlike internal lines of the ACM Corporation which are well guarded. Therefore, the ACM Corporation have invented the Intercontinental Cryptographic Protection Code (ICPC) which they are very proud of, and which is considered unbreakable - nobody has even tried to break it yet, but that is about to change.<P><P><BR>The group of hackers was hired by the rival company, which does not disclose its name to them, to break ICPC. As the first step, they have bribed one of the programmers who implemented the software for ICPC and have learned how ICPC works. It turns out, the ICPC uses very long key which is a sequence of bytes generated by some sophisticated and random physical process. This key is changed weekly and is used to encrypt all messages that are sent over intercontinental communication lines during the week. This programmer has also proudly told them, that ICPC is the fastest code in the world, because (having the benefit of highly sophisticated code generation) they simply perform bitwise exclusive OR (<TT>XOR</TT>) operation between the bytes of the message and the key. That is, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th byte of the encrypted message <SPAN CLASS="MATH"><I>E</I><SUB>i</SUB> = <I>K</I><SUB>i</SUB>&nbsp;<IMG WIDTH="32" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2690.gif ALT="$ \tt XOR$">&nbsp;<I>C</I><SUB>i</SUB></SPAN>, where <SPAN CLASS="MATH"><I>K</I><SUB>i</SUB></SPAN> is the <SPAN CLASS="MATH"><I>i</I></SPAN>-th byte of the key and <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> is the <SPAN CLASS="MATH"><I>i</I></SPAN>-th byte of the original clear-text message.<P><P><BR>Having learned how ICPC works, they have started to look for the way to reliably obtain the key every week, which is the only thing that is still missing to listen for all intercontinental communications of the ACM Corporation (eavesdropping on the intercontinental lines themselves has indeed turned out to be an easy task). An attempt to bribe the security officers who guard and distribute the key has failed, because the security officers (having the profession with one the highest salaries of that time) have turned out to be too expensive to bribe.<P><P><BR>During the search for alternative solutions, they have stumbled upon a clerk, who sends weekly newsletters to various employees and departments. Fortunately, these newsletters are being sent just after the change of the key and the messages are usually long enough to recover sufficient portions of the key by studying original newsletters and their encoded forms. However, they could not covertly find anyone who will disclose the newsletter contents on a weekly basis, because all the employees were bound by a Non-Disclosure Agreement (NDA) and the penalty for the disclosure of any corporate message according to this NDA is death.<P><P><BR>Yet they were able to convince this clerk (for a small reward) to do a seemingly innocent thing. That is, while sending the copies of newsletter throughout the corporation, he was instructed to insert an extra space character in the beginning of some messages but send other copies in their original form. Now the task to recover the key is straightforward and it is you, who shall create a program for this. The program is given two ICPCed messages where the first message is <SPAN CLASS="MATH"><I>N</I></SPAN> bytes, and the second one is <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> bytes and is the result of encoding the same clear-text messages as the first one, but with one extra space character (represented by the byte with the decimal value of 32) in the beginning. The program shall find the first <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> bytes of the key that was used to encode the messages.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input file contains several test cases. Each of them consists of two lines. The first line consists of <SPAN CLASS="MATH">2<I>N</I></SPAN> characters and represents the encoded message <SPAN CLASS="MATH"><I>N</I></SPAN> bytes long. The second line consists of <SPAN CLASS="MATH">2<I>N</I> + 2</SPAN> characters and represents the encoded message <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> bytes long. Here <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2690.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2690.gif ALT="$ \le$">10000</SPAN>. Each message is written on a single line in a hexadecimal form byte by byte without spaces. Each byte of the message is represented by two characters `<TT>0</TT>'-`<TT>9</TT>', `<TT>A</TT>'-`<TT>F</TT>' that represent the hexadecimal value of the corresponding byte.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case write a single different output line, that represents <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> bytes of the recovered key in the same hexadecimal format as in the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
05262C5269143F314C2A69651A264B
610728413B63072C52222169720B425E
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
41434D2049435043204E454552432732
</PRE><P>
______________________________________________________
2691||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="345" HEIGHT="350" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="\epsfbox{p2691.eps}"></DIV><P>The City has a number of municipal buildings and a number of fallout shelters that were build specially to hide municipal workers in case of a nuclear war. Each fallout shelter has a limited capacity in terms of a number of people it can accommodate, and there's almost no excess capacity in The City's fallout shelters. Ideally, all workers from a given municipal building shall run to the nearest fallout shelter. However, this will lead to overcrowding of some fallout shelters, while others will be half-empty at the same time.<P><P><BR>To address this problem, The City Council has developed a special evacuation plan. Instead of assigning every worker to a fallout shelter individually (which will be a huge amount of information to keep), they allocated fallout shelters to municipal buildings, listing the number of workers from every building that shall use a given fallout shelter, and left the task of individual assignments to the buildings' management. The plan takes into account a number of workers in every building - all of them are assigned to fallout shelters, and a limited capacity of each fallout shelter - every fallout shelter is assigned to no more workers then it can accommodate, though some fallout shelters may be not used completely.<P><P><BR>The City Council claims that their evacuation plan is optimal, in the sense that it minimizes <EM>the total time to reach fallout shelters</EM> for all workers in The City, which is the sum for all workers of the time to go from the worker's municipal building to the fallout shelter assigned to this worker.<P>The City Mayor, well known for his constant confrontation with The City Council, does not buy their claim and hires you as an independent consultant to verify the evacuation plan. Your task is to either ensure that the evacuation plan is indeed optimal, or to prove otherwise by presenting another evacuation plan with the smaller total time to reach fallout shelters, thus clearly exposing The City Council's incompetence.<P><P><BR>During initial requirements gathering phase of your project, you have found that The City is represented by a rectangular grid. The location of municipal buildings and fallout shelters is specified by two integer numbers and the time to go between municipal building at the location <SPAN CLASS="MATH">(<I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB>)</SPAN> and the fallout shelter at the location <SPAN CLASS="MATH">(<I>P</I><SUB>j</SUB>, <I>Q</I><SUB>j</SUB>)</SPAN> is <SPAN CLASS="MATH"><I>D</I><SUB>i, j</SUB> = | <I>X</I><SUB>i</SUB> - <I>P</I><SUB>j</SUB>| + | <I>Y</I><SUB>i</SUB> - <I>Q</I><SUB>j</SUB>| + 1</SPAN> minutes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR><P>The input file consists of The City description and the evacuation plan description. The first line of the input file consists of two numbers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> separated by a space. <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$">100</SPAN>) is a number of municipal buildings in The City (all municipal buildings are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>). <SPAN CLASS="MATH"><I>M</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$">100</SPAN>) is a number of fallout shelters in The City (all fallout shelters are numbered from 1 to <SPAN CLASS="MATH"><I>M</I></SPAN>).<P>The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines describe municipal buildings. Each line contains there integer numbers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN>, and <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN> separated by spaces, where <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH">-1000<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$"><I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$">1000</SPAN>) are the coordinates of the building, and <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$"><I>B</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$">1000</SPAN>) is the number of workers in this building.<P>The description of municipal buildings is followed by <SPAN CLASS="MATH"><I>M</I></SPAN> lines that describe fallout shelters. Each line contains three integer numbers <SPAN CLASS="MATH"><I>P</I><SUB>j</SUB></SPAN>, <SPAN CLASS="MATH"><I>Q</I><SUB>j</SUB></SPAN>, and <SPAN CLASS="MATH"><I>C</I><SUB>j</SUB></SPAN> separated by spaces, where <SPAN CLASS="MATH"><I>P</I><SUB>j</SUB></SPAN>, <SPAN CLASS="MATH"><I>Q</I><SUB>j</SUB></SPAN> ( <SPAN CLASS="MATH">-1000<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$"><I>P</I><SUB>j</SUB>, <I>Q</I><SUB>j</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$">1000</SPAN>) are the coordinates of the fallout shelter, and <SPAN CLASS="MATH"><I>C</I><SUB>j</SUB></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$"><I>C</I><SUB>j</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$">1000</SPAN>) is the capacity of this shelter.<P>The description of The City Council's evacuation plan follows on the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines. Each line represents an evacuation plan for a single building (in the order they are given in The City description). The evacuation plan of <SPAN CLASS="MATH"><I>i</I></SPAN>-th municipal building consists of <SPAN CLASS="MATH"><I>M</I></SPAN> integer numbers <SPAN CLASS="MATH"><I>E</I><SUB>i, j</SUB></SPAN> separated by spaces. <SPAN CLASS="MATH"><I>E</I><SUB>i, j</SUB></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$"><I>E</I><SUB>i, j</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2691.gif ALT="$ \le$">1000</SPAN>) is a number of workers that shall evacuate from the <SPAN CLASS="MATH"><I>i</I></SPAN>-th municipal building to the <SPAN CLASS="MATH"><I>j</I></SPAN>-th fallout shelter.<P>The plan in the input file is guaranteed to be <EM>valid</EM>. Namely, it calls for an evacuation of the exact number of workers that are actually working in any given municipal building according to The City description and does not exceed the capacity of any given fallout shelter.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>If The City Council's plan is optimal, then write to the output file the single word `<TT>OPTIMAL</TT>'. Otherwise, write the word `<TT>SUBOPTIMAL</TT>' on the first line, followed by <SPAN CLASS="MATH"><I>N</I></SPAN> lines that describe your plan in the same format as in the input file. Your plan need not be optimal itself, but must be valid and better than The City Council's one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2

3 4
-3 3 5
-2 -2 6
2 2 5
-1 1 3
1 1 4
-2 -2 7
0 -1 3
3 1 1 0
0 0 6 0
0 3 0 2

3 4
-3 3 5
-2 -2 6
2 2 5
-1 1 3
1 1 4
-2 -2 7
0 -1 3
3 0 1 1
0 0 6 0
0 4 0 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
SUBOPTIMAL
3 0 1 1
0 0 6 0
0 4 0 1

OPTIMAL
</PRE><P><P><P><BR><B>Note:</B> These are sample inputs and outputs that correspond to the city plan that is shown on the picture - buildings are denoted with Bx, shelters are denoted with Sx. Number of working people and capacities are shown in parentheses. The first sample is suboptimal, but the proposed alternative plan turns out to be optimal as shown in the second sample.<P>
______________________________________________________
2692||||||false||||||
<P>Bill is trying to compactly represent sequences of capital alphabetic characters from `<TT>A</TT>' to `<TT>Z</TT>' by folding repeating subsequences inside them. For example, one way to represent a sequence `<TT>AAAAAAAAAABABABCCD</TT>' is `<TT>10(A)2(BA)B2(C)D</TT>'. He formally defines folded sequences of characters along with the unfolding transformation for them in the following way:<UL><LI>A sequence that contains a single character from `<TT>A</TT>' to `<TT>Z</TT>' is considered to be a folded sequence. Unfolding of this sequence produces the same sequence of a single character itself. </LI><LI>If <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>Q</I></SPAN> are folded sequences, then <SPAN CLASS="MATH"><I>SQ</I></SPAN> is also a folded sequence. If <SPAN CLASS="MATH"><I>S</I></SPAN> unfolds to <SPAN CLASS="MATH"><I>S'</I></SPAN> and <SPAN CLASS="MATH"><I>Q</I></SPAN> unfolds to <SPAN CLASS="MATH"><I>Q'</I></SPAN>, then <SPAN CLASS="MATH"><I>SQ</I></SPAN> unfolds to <SPAN CLASS="MATH"><I>S'Q'</I></SPAN>. </LI><LI>If <SPAN CLASS="MATH"><I>S</I></SPAN> is a folded sequence, then <SPAN CLASS="MATH"><I>X</I>(<I>S</I>)</SPAN> is also a folded sequence, where <SPAN CLASS="MATH"><I>X</I></SPAN> is a decimal representation of an integer number greater than 1. If <SPAN CLASS="MATH"><I>S</I></SPAN> unfolds to <SPAN CLASS="MATH"><I>S'</I></SPAN>, then <SPAN CLASS="MATH"><I>X</I>(<I>S</I>)</SPAN> unfolds to <SPAN CLASS="MATH"><I>S'</I></SPAN> repeated <SPAN CLASS="MATH"><I>X</I></SPAN> times. </LI></UL><P>According to this definition it is easy to unfold any given folded sequence. However, Bill is much more interested in the reverse transformation. He wants to fold the given sequence in such a way that the resulting folded sequence contains the least possible number of characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input file contains several test cases, one per line. Each of them contains a single line of characters from `<TT>A</TT>' to `<TT>Z</TT>' with at least 1 and at most 100 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case write a different output line. This must be a single line that contains the shortest possible folded sequence that unfolds to the sequence that is given in the input file. If there are many such sequences then write any one of them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
AAAAAAAAAABABABCCD
NEERCYESYESYESNEERCYESYESYES
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
9(A)3(AB)CCD
2(NEERC3(YES))
</PRE><P>
______________________________________________________
2693||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="345" HEIGHT="393" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2693.gif ALT="\epsfbox{p2693.eps}"></DIV><P>The famous Ghost Busters team has decided to upgrade their Ectomobile (aka Ecto-1) with a powerful proton gun and an advanced targeting system. Egon has designed and built all the hardware which consists of ectoplasmic scanner and a proton gun that has two degrees of freedom and can automatically rotate and fire in a 90 degrees trihedral angle. You have been hired to write a prototype for the targeting software.<P><P><BR>Ghosts are detected by ectoplasmic scanner and are represented as floating spheres. The coordinates of their centers and radii are delivered from the ectoplasmic scanner to the targeting software. The coordinate system is aligned is such a way, that the proton gun fires from the point (0, 0, 0) anywhere into <SPAN CLASS="MATH"><I>X</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2693.gif ALT="$ \ge$"> 0</SPAN>, <SPAN CLASS="MATH"><I>Y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2693.gif ALT="$ \ge$"> 0</SPAN>, <SPAN CLASS="MATH"><I>Z</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2693.gif ALT="$ \ge$"> 0</SPAN> trihedral angle. The gun fires a proton ray in a straight line and is so powerful, that even a touch of its ray is enough to kill a ghost. The ray of the proton gun is able to kill a virtually unlimited number of ghosts on its way.<P><P><BR>For the first prototype for the targeting software, you are asked to write a program that determines the maximal number of ghosts that can be killed with a single shot of the proton gun.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR><P>On the first line of the input file there is a single integer number <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2693.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2693.gif ALT="$ \le$">100</SPAN>) - the number of ghosts detected by the ectoplasmic scanner of Ecto-1. The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines describe detected ghosts - one ghost per line. The description of <SPAN CLASS="MATH"><I>i</I></SPAN>-th ghost (ghosts are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>) consists of 4 integer numbers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>Z</I><SUB>i</SUB></SPAN>, and <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN>, separated by spaces. <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>Z</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2693.gif ALT="$ \le$"><I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB>, <I>Z</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2693.gif ALT="$ \le$">10000</SPAN>) are the coordinates of the ghost's center, and <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2693.gif ALT="$ \le$"><I>R</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2693.gif ALT="$ \le$">min(<I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB>, <I>Z</I><SUB>i</SUB>)</SPAN>) is the ghost's radius. Because ghosts are ectoplasmic, they can be arbitrarily placed in respect to each others. They can intersect, fit inside each other, coincide with each other, etc.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>On the first line of the output file write a single integer number - the maximal number of ghosts that can be killed with a single shot of the proton gun. On the second line of the output file write the identifying numbers of the ghosts to be killed in an arbitrary order separated by spaces. If there are multiple ways to kill this number of ghosts then write any one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2

2
1200 1200 3900 300
160 160 820 60

13
1200 1200 3900 300
160 160 820 60
100 10 10 10
10 100 10 10
10 10 100 10
10 10 10 10
50 50 50 10
100 100 75 20
100 75 100 20
75 100 100 20
3000 4000 7000 2600
100 1000 1000 50
1000 100 1000 100
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2
1 2

5
6 7 9 10 11
</PRE><P><P><P><BR><B>Notes:</B><DL COMPACT><DT>a)</DT><DD>It is possible to kill both ghosts in the first sample only because the proton gun is so powerful that it kills ghosts by mere touch.<P></DD><DT>b)</DT><DD>The second sample has 11 more ghosts (for a total of 13). Picture shows the view of these ghosts through the ectoplasmic scope sight that Egon has attached to proton gun to calibrate it and to debug your targeting software. Outlines show ghosts as seen through the scope.</DD></DL><P>
______________________________________________________
2694||||||false||||||
<P>
In the new version of the famous game ``Heroes of Might and Magic" heroes
themselves take active part in battles. More of that, hero can defeat some
monsters alone, without any supporting army. In this problem you are asked
to develop the program which would find the strategy for a mage hero
fighting face to face with a pack of monsters.

<P>

<P>
<BR>
Each hero initially has <SPAN CLASS="MATH"><I>HP</I><SUB>H</SUB></SPAN> hit points and <SPAN CLASS="MATH"><I>MP</I><SUB>H</SUB></SPAN> mana points.
Heroes can use different spells. Your hero knows three spells: <EM>Lighting Bolt</EM>,
<EM>Teleport</EM> and <EM>Heal</EM>. Each spell costs one mana point.

<P>
Each monster has <SPAN CLASS="MATH"><I>HP</I><SUB>M</SUB></SPAN> hit points. Pack of monsters is a single
group of several monsters who act as one. Therefore if initially the pack
consists of <SPAN CLASS="MATH"><I>N</I><SUB>M</SUB></SPAN> monsters, they have <!-- MATH
 $N_M \times HP_M$
 -->
<SPAN CLASS="MATH"><I>N</I><SUB>M</SUB>&#215;<I>HP</I><SUB>M</SUB></SPAN> hit
points. As the battle proceeds, monsters' number of hit points decreases. If
monsters have <SPAN CLASS="MATH"><I>H</I></SPAN> hit points, that means that the group consists of
ceiling(<SPAN CLASS="MATH"><I>H</I>/<I>HP</I><SUB>M</SUB></SPAN>) monsters (ceiling is a function that
returns the smallest integer number not less its argument).

<P>

<P>
<BR>
The battle runs on a one-dimensional battlefield consisting of <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> squares,
numbered starting from 0. Your hero resides on the square number 0 and does not
move. Monsters initially reside on <SPAN CLASS="MATH"><I>N</I></SPAN>-th square and can move.
Monsters can move at most <SPAN CLASS="MATH"><I>V</I></SPAN> squares a turn.

<P>
The battle consists of turns. First your hero makes a turn, then the monsters,
and so on. Monsters' strategy is very easy - they move in the direction of your
hero <!-- MATH
 $\min(V, P - 1)$
 -->
<SPAN CLASS="MATH">min(<I>V</I>, <I>P</I> - 1)</SPAN> squares where <SPAN CLASS="MATH"><I>P</I></SPAN> is the square number where they were
in the beginning of their turn. If the monsters are on the square number 1 in the end
of the movement, then they strike your hero. If there are K monsters left in a pack,
their strike decreases hit points of the hero by <SPAN CLASS="MATH"><I>K</I></SPAN>. If your hero has non-positive
hit points, then the hero is defeated.

<P>

<P>
<BR>
Your hero's turn is always the casting of some spell. <EM>Lighting Bolt</EM> spell
removes <SPAN CLASS="MATH"><I>L</I><SUB>P</SUB></SPAN> hit points from a pack of monsters, where <SPAN CLASS="MATH"><I>P</I></SPAN> is the
square number on which the monsters reside. <EM>Teleport</EM> spell moves monsters to any
desired square (except 0 where your hero resides). <EM>Heal</EM> spell adds <SPAN CLASS="MATH"><I>dH</I></SPAN> hit
points to hero. However, his hit points never exceed <SPAN CLASS="MATH"><I>HP</I><SUB>H</SUB></SPAN>, so if
after using <EM>Heal</EM> spell his hit points are greater than <SPAN CLASS="MATH"><I>HP</I><SUB>H</SUB></SPAN>, they
are decreased to <SPAN CLASS="MATH"><I>HP</I><SUB>H</SUB></SPAN>. If your hero has zero mana points and
there is at least one monster left in the pack, then the hero is defeated.

<P>
Find the strategy which would allow your hero to defeat monsters. Monsters are
defeated if their hit points are non-positive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<B>The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</B>

<P>

<P><P>
<BR>

<P>
The first line of the input file contains positive integer numbers
separated by spaces in the following order:
<SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>HP</I><SUB>H</SUB></SPAN>, <SPAN CLASS="MATH"><I>MP</I><SUB>H</SUB></SPAN>, <SPAN CLASS="MATH"><I>HP</I><SUB>M</SUB></SPAN>, <SPAN CLASS="MATH"><I>N</I><SUB>M</SUB></SPAN>, <SPAN CLASS="MATH"><I>V</I></SPAN>, <SPAN CLASS="MATH"><I>dH</I></SPAN>.
(<!-- MATH
 $1 \le N \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$">10</SPAN>,
<!-- MATH
 $2 \le HP_H \le 100$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$"><I>HP</I><SUB>H</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$">100</SPAN>,
<!-- MATH
 $1 \le MP_H \le 50$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$"><I>MP</I><SUB>H</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$">50</SPAN>,
<!-- MATH
 $1 \le HP_M \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$"><I>HP</I><SUB>M</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$">10</SPAN>,
<!-- MATH
 $1 \le N_M \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$"><I>N</I><SUB>M</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$">10</SPAN>,
<!-- MATH
 $1 \le V \le N$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$"><I>V</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$"><I>N</I></SPAN>,
<!-- MATH
 $1 \le dH < HP_H$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$"><I>dH</I> &lt; <I>HP</I><SUB>H</SUB></SPAN>).

<P>
The second line of the input file contains <SPAN CLASS="MATH"><I>N</I></SPAN> integer numbers
<!-- MATH
 $L_1, L_2, \dots, L_N$
 -->
<SPAN CLASS="MATH"><I>L</I><SUB>1</SUB>, <I>L</I><SUB>2</SUB>,..., <I>L</I><SUB>N</SUB></SPAN> (<!-- MATH
 $1 \le L_P \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$"><I>L</I><SUB>P</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2694img1.gif
 ALT="$ \le$">10</SPAN>), separated by spaces.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<B>For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>

<P>
If the hero cannot win the battle, write the word `<TT>DEFEATED</TT>' on the first
line of the output file. In the other case write the word `<TT>VICTORIOUS</TT>' on the
first line of the output file and then write any sequence of hero's actions
that leads to victory, where each line of the output file starting from the
second one must correspond to one hero's turn. The first character of the
line must be one of the following:

<UL>
<LI><TT>L</TT> - Cast <EM>Lighting Bolt</EM> spell.
</LI>
<LI><TT>T</TT> - Cast <EM>Teleport</EM> spell.
</LI>
<LI><TT>H</TT> - Cast <EM>Heal</EM> spell.
</LI>
</UL>

<P>
If the hero casts <EM>Teleport</EM> spell then `<TT>T</TT>' character must be
followed by a space and an integer number from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> - the square number
where the monsters should be teleported to.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4

2 3 2 1 2 1 1
1 1

2 3 2 3 1 1 1
1 1

4 4 3 1 4 1 1
3 1 1 1

1 6 5 1 4 1 3
1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
VICTORIOUS
L
L

DEFEATED

VICTORIOUS
L
T 2
L

VICTORIOUS
L
L
H
L
L
</PRE>

<P>

______________________________________________________
2695||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="345" HEIGHT="426" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2695.gif ALT="\epsfbox{p2695.eps}"></DIV><P>The factory cuts rectangular <SPAN CLASS="MATH"><I>M</I>&#215;<I>N</I></SPAN> granite plates into pieces using a special machine that is able to perform cuts in 4 different directions: vertically, horizontally, and diagonally at the angle of 45 degrees to the sides of the plate. Every cut is a straight line that starts and ends on the side of the plate.<P>The factory has been ordered to produce tiles for the inlay, each tile of which is a 45 degrees right triangle. To reduce the time to deliver the tiles it was decided to take all triangles from the already cut plates. Information about all performed cuts is available and your task is to compute the number of triangles of any size that were produced.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR><P>The input file describes the cuts that were performed on a single rectangular plate. The first line of the input file contains three integer numbers <SPAN CLASS="MATH"><I>M</I></SPAN>, <SPAN CLASS="MATH"><I>N</I></SPAN>, and <SPAN CLASS="MATH"><I>K</I></SPAN>, separated by spaces. <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2695.gif ALT="$ \le$"><I>M</I>, <I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2695.gif ALT="$ \le$">50</SPAN>) are the dimensions of the plate, and <SPAN CLASS="MATH"><I>K</I></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2695.gif ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2695.gif ALT="$ \le$">296</SPAN>) is the number of cuts. Next <SPAN CLASS="MATH"><I>K</I></SPAN> lines describe the cuts. <SPAN CLASS="MATH"><I>i</I></SPAN>-th cut is described by four integer numbers <SPAN CLASS="MATH"><I>X</I><SUB>i, 1</SUB></SPAN>, <SPAN CLASS="MATH"><I>Y</I><SUB>i, 1</SUB></SPAN>, <SPAN CLASS="MATH"><I>X</I><SUB>i, 2</SUB></SPAN>, and <SPAN CLASS="MATH"><I>Y</I><SUB>i, 2</SUB></SPAN>, separated by spaces, that represent the starting and ending point of the cut. Both starting <SPAN CLASS="MATH">(<I>X</I><SUB>i, 1</SUB>, <I>Y</I><SUB>i, 1</SUB>)</SPAN> and ending <SPAN CLASS="MATH">(<I>X</I><SUB>i, 2</SUB>, <I>Y</I><SUB>i, 2</SUB>)</SPAN> points of the cut are situated on the plate's border. Both points of the cut are different and the cut goes through the plate. Here, the coordinates by the <SPAN CLASS="MATH"><I>X</I></SPAN> axis run from 0 to <SPAN CLASS="MATH"><I>M</I></SPAN>, and the coordinates by the <SPAN CLASS="MATH"><I>Y</I></SPAN> axis run from 0 to <SPAN CLASS="MATH"><I>N</I></SPAN>. All cuts are different.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>Write to the output file a single integer number - the number of triangles that were produced by the cuts.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Inputs</A>&nbsp;</FONT></H2><PRE>
2

4 4 4
1 4 1 0
0 4 4 0
0 0 4 4
0 2 4 2

7 4 6
6 0 7 1
1 4 1 0
0 4 4 0
0 0 4 4
0 2 7 2
7 0 3 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
6

8
</PRE><P><P><P><BR><B>Note:</B> These are sample inputs and outputs that correspond to the cuts that are shown on the picture.<P>
______________________________________________________
2696||||||false||||||
<P>Consider a town where all the streets are one-way and each street leads from one intersection to another. It is also known that starting from an intersection and walking through town's streets you can never reach the same intersection i.e. the town's streets form no cycles.<P>With these assumptions your task is to write a program that finds the minimum number of paratroopers that can descend on the town and visit all the intersections of this town in such a way that more than one paratrooper visits no intersection. Each paratrooper lands at an intersection and can visit other intersections following the town streets. There are no restrictions about the starting intersection for each paratrooper.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should read sets of data. The first line of the input file contains the number of the data sets. Each data set specifies the structure of a town and has the format:<P><P><BR><SPAN CLASS="MATH"><I>no</I><IMG WIDTH="30" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_of$"><IMG WIDTH="113" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_intersections$"></SPAN><BR><SPAN CLASS="MATH"><I>no</I><IMG WIDTH="30" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_of$"><IMG WIDTH="64" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_streets$"></SPAN><BR><SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>&nbsp;<I>E</I><SUB>1</SUB></SPAN><BR><SPAN CLASS="MATH"><I>S</I><SUB>2</SUB>&nbsp;<I>E</I><SUB>2</SUB></SPAN><BR><SPAN CLASS="MATH">..............</SPAN><BR><SPAN CLASS="MATH"><I>S</I><SUB>no<IMG WIDTH="25" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$\scriptstyle \_of$"><IMG WIDTH="52" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$\scriptstyle \_streets$"></SUB>&nbsp;<I>E</I><SUB>no<IMG WIDTH="25" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$\scriptstyle \_of$"><IMG WIDTH="52" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$\scriptstyle \_streets$"></SUB></SPAN><BR><P><P><BR>The first line of each data set contains a positive integer <SPAN CLASS="MATH"><I>no</I><IMG WIDTH="30" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_of$"><IMG WIDTH="113" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_intersections$"></SPAN> (greater than 0 and less or equal to 120), which is the number of intersections in the town. The second line contains a positive integer <SPAN CLASS="MATH"><I>no</I><IMG WIDTH="30" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_of$"><IMG WIDTH="64" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_streets$"></SPAN>, which is the number of streets in the town. The next <SPAN CLASS="MATH"><I>no</I><IMG WIDTH="30" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_of$"><IMG WIDTH="64" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_streets$"></SPAN> lines, one for each street in the town, are randomly ordered and represent the town's streets. The line corresponding to street <SPAN CLASS="MATH"><I>k</I></SPAN> ( <SPAN CLASS="MATH"><I>k</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \leq$"> <I>no</I><IMG WIDTH="30" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_of$"><IMG WIDTH="64" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_streets$"></SPAN> ) consists of two positive integers, separated by one blank: <SPAN CLASS="MATH"><I>S</I><SUB>k</SUB></SPAN> ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \leq$"> <I>S</I><SUB>k</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \leq$"> <I>no</I><IMG WIDTH="30" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_of$"><IMG WIDTH="113" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_intersections$"></SPAN>) -- the number of the intersection that is the start of the street, and <SPAN CLASS="MATH"><I>E</I><SUB>k</SUB></SPAN> ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \leq$"> <I>E</I><SUB>k</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \leq$"> <I>no</I><IMG WIDTH="30" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_of$"><IMG WIDTH="113" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_intersections$"></SPAN>) -- the number of the intersection that is the end of the street. Intersections are represented by integers from 1 to <SPAN CLASS="MATH"><I>no</I><IMG WIDTH="30" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_of$"><IMG WIDTH="113" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2696img1.gif ALT="$ \_intersections$"></SPAN>.<P>There are no blank lines between consecutive sets of data. Input data are correct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The result of the program is on standard output. For each input data set the program prints on a single line, starting from the beginning of the line, one integer: the minimum number of paratroopers required to visit all the intersections in the town.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4
3
3 4
1 3
2 3
3
3
1 3
1 2
2 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
1
</PRE><P>
______________________________________________________
2697||||||false||||||
<P>In many applications very large integers numbers are required. Some of these applications are using keys for secure transmission of data, encryption, etc. In this problem you are given a number, you have to determine the number of digits in the factorial of the number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several lines of integer numbers. The first line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, which is the number of cases to be tested, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines, one integer <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2697img1.gif ALT="$ \leq$"> <I>n</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2697img1.gif ALT="$ \leq$"> 10<SUP>7</SUP></SPAN> on each line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains the number of digits in the factorial of the integers appearing in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
10
20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7
19
</PRE><P>
______________________________________________________
2698||||||false||||||
<P>Suppose there are a number of good users using an Internet chat room, which is a shared text chat space. Now there are some bad guys in the Internet who would come to this room and would have no respect or interest in the topic of discussion in the group. They would start typing strings of garbage characters, start unsolicited advertisements of certain URLs or businesses, or paste same string again and again just to disturb others in the room.<P>When I asked about this problem to Prof Banku (naturally not as smart as Prof Shanku) he suggested the following scheme. Let us define consonants to be all letters in a-z and A-Z except a, e, i, o, u, y, A, E, I, O, U and Y.<P>A user should be able to send a line to the chat room unless<P><UL><LI>the line has more than 5 consecutive consonants, or </LI><LI>the line contains at least one word which has more than 4 consecutive consonants and the user sent more than 2 such lines (containing more than four consonants) in last 10 lines sent, or </LI><LI>the user sent the same line more than once in last 10 sentences sent.</LI></UL>where "last 10 lines sent" means last 10 lines (acceptable or not) sent by user, excluding the current line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several lines. The first line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, which is the number of lines in the shared text space. Then follow <SPAN CLASS="MATH"><I>n</I></SPAN> lines each consisting of not more than 200 ASCII characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input print `<TT>y</TT>' if the line is acceptable according to the criteria set above and `<TT>n</TT>' otherwise in separate lines. See the sample output for example.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>12
hello
how r u?
where r u from?
kjhh kh kgkjhg jhg
where r u from?
i am from London, Ontario, Canada
how r you nxw?
now
where r u from?
kjhh kh kgkjhg jhg
very good
it is very cold here.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>y
y
y
n
y
y
y
y
n
n
y
y
</PRE><P>
______________________________________________________
2699||||||false||||||
<P>Consider a planer grid of <SPAN CLASS="MATH"><I>M</I></SPAN> rows and <SPAN CLASS="MATH"><I>N</I></SPAN> columns. This grid has exactly <SPAN CLASS="MATH"><I>MN</I></SPAN> intersections, each of which is denoted by a pair of coordinates <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> where <SPAN CLASS="MATH"><I>i</I> = 0, 1,...<I>N</I> - 1</SPAN> and <SPAN CLASS="MATH"><I>j</I> = 0, 1,...<I>M</I> - 1</SPAN>.<P>Suppose <SPAN CLASS="MATH"><I>K</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2699img1.gif ALT="$ \leq$"> <I>MN</I></SPAN> points are now placed on <SPAN CLASS="MATH"><I>K</I></SPAN> distinct grid intersections.<P>Consider a diamond shaped area <SPAN CLASS="MATH"><I>D</I>(<I>i</I>, <I>j</I>, <I>r</I>)</SPAN> such that the centre of the area is at intersection <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> and the shape itself is a square of diagonal length <SPAN CLASS="MATH">2<I>r</I></SPAN>, rotated 45 degree clockwise, where <SPAN CLASS="MATH"><I>i</I> = 0, 1,...<I>N</I> - 1</SPAN>, <SPAN CLASS="MATH"><I>j</I> = 0, 1,...<I>M</I> - 1</SPAN>, and <SPAN CLASS="MATH"><I>r</I></SPAN>, the radius of the diamond shape, is any integer greater than 0.<P>Manoranjan is interested in finding the minimum radius, <SPAN CLASS="MATH"><I>R</I><SUB>min</SUB>(<I>P</I><SUB>min</SUB>)</SPAN>, of such a diamond shape that would guarantee of covering at least <SPAN CLASS="MATH"><I>P</I><SUB>min</SUB></SPAN> points no matter at which grid intersection the centre of the shape resides, where <SPAN CLASS="MATH"><I>P</I><SUB>min</SUB> = 1, 2,...<I>K</I></SPAN>. Let <SPAN CLASS="MATH"><I>P</I><SUB>max</SUB>(<I>P</I><SUB>min</SUB>)</SPAN> be the maximum number of points that can be covered by a diamond shape of radius <SPAN CLASS="MATH"><I>R</I><SUB>min</SUB>(<I>P</I><SUB>min</SUB>)</SPAN>.<P>Consider the example in the figure below. Five points at intersections <SPAN CLASS="MATH">(0, 0)</SPAN>, <SPAN CLASS="MATH">(4, 0)</SPAN>, <SPAN CLASS="MATH">(2, 2)</SPAN>, <SPAN CLASS="MATH">(0, 4)</SPAN>, and <SPAN CLASS="MATH">(4, 4)</SPAN> are placed on a planer grid of 5 rows and 7 columns. The diamond shape <SPAN CLASS="MATH"><I>D</I>(2, 4, 1)</SPAN> covers none of the points, <SPAN CLASS="MATH"><I>D</I>(2, 1, 2)</SPAN> covers one point, and <SPAN CLASS="MATH"><I>D</I>(3, 3, 4)</SPAN> covers four points.<P><DIV ALIGN="CENTER"><IMG WIDTH="274" HEIGHT="243" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2699img1.gif ALT="\epsfbox{p2699.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The number of rows, <SPAN CLASS="MATH"><I>M</I></SPAN>, and columns, <SPAN CLASS="MATH"><I>N</I></SPAN>, of the grid are given in line 1. <SPAN CLASS="MATH"><I>K</I></SPAN> number of points are then given in the next one or more lines, where <SPAN CLASS="MATH"><I>K</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2699img1.gif ALT="$ \leq$"> <I>MN</I></SPAN>. You may assume that <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2699img1.gif ALT="$ \leq$"> <I>M</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2699img1.gif ALT="$ \leq$"> 100</SPAN> and <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2699img1.gif ALT="$ \leq$"> <I>N</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2699img1.gif ALT="$ \leq$"> 100</SPAN>. A pair of integers, representing <SPAN CLASS="MATH"><I>x</I> -</SPAN> and <SPAN CLASS="MATH"><I>y</I> -</SPAN>coordinates of the point respectively, denotes each point.<P>All the values given in any of the input lines are separated from each other by one or more white spaces including tabs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Any given point outside the grid is discarded as `<EM>invalid</EM>' entries, e.g., the last point given in the sample input is discarded. For each possible <SPAN CLASS="MATH"><I>P</I><SUB>min</SUB></SPAN> value, corresponding <SPAN CLASS="MATH"><I>R</I><SUB>min</SUB>(<I>P</I><SUB>min</SUB>)</SPAN> and <SPAN CLASS="MATH"><I>P</I><SUB>max</SUB>(<I>P</I><SUB>min</SUB>)</SPAN> values are written in a separate line as per the format shown in the sample output. However, a line of output should only be generated if a diamond shape of radius <SPAN CLASS="MATH"><I>R</I><SUB>min</SUB>(<I>P</I><SUB>min</SUB>)</SPAN> guarantees to cover exactly <SPAN CLASS="MATH"><I>P</I><SUB>min</SUB></SPAN> points. In the sample output, no line is generated for <SPAN CLASS="MATH"><I>P</I><SUB>min</SUB> = 2</SPAN> as <SPAN CLASS="MATH"><I>R</I><SUB>min</SUB>(2) = <I>R</I><SUB>min</SUB>(3) = 6</SPAN>.<P>All values are written right aligned to their column headings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5      7
0      0 0     4
4 0
4 4           2 2
       0 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Pmin  Rmin(Pmin)  Pmax(Pmin)
   1           4           5
   3           6           5
   4           8           5
   5          10           5
</PRE><P>
______________________________________________________
2700||||||false||||||
<P>Suhan and Laina live in an <SPAN CLASS="MATH"><I>n</I></SPAN>-dimensional city where there are <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> locations. Any two locations (consider these locations as points) are equidistant from each other and connected by only one bi-directional road. They love to roam together around the city on their favourite bi-verbal (A kind of vehicle). Kiri, a tenth generation robot also lives in the same city and wants to kill Suhan out of jealousy. That is why Suhan and Laina are very careful about keeping their thoughts and plans secret. Therefore nobody knows:<P><DL COMPACT><DT>a)</DT><DD>Where Suhan and Laina lives.</DD><DT>b)</DT><DD>What their destination location is.</DD><DT>c)</DT><DD>Which roads will they use?</DD></DL><P>So their journey can start from any location, ends in another location and they may use any road sequence they like. Their destination location may be same or different than the source location. For example when their tour is guaranteed to be a simple cycle their source and destination location are same.<P>Given the number of locations in the city (<SPAN CLASS="MATH"><I>L</I></SPAN>) you will have to find the expected cost (often considered as average) of one of their single travelling. You can assume that the cost of travelling from one location to another through the direct (also shortest) path is 1 universal joule.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several lines of input. Each line contains a single integer <SPAN CLASS="MATH"><I>L</I></SPAN> <SPAN CLASS="MATH">(15 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2700img1.gif ALT="$ \geq$"> <I>L</I> &gt; 2)</SPAN> that indicates the number of locations in the city. Input is terminated by a line where value of <SPAN CLASS="MATH"><I>L</I></SPAN> is zero. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input produce one line of output. This line contains three floating-point numbers <SPAN CLASS="MATH"><I>F</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>F</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>F</I><SUB>3</SUB></SPAN>. Here <SPAN CLASS="MATH"><I>F</I><SUB>1</SUB></SPAN> is the expected cost when they travel along a path, <SPAN CLASS="MATH"><I>F</I><SUB>2</SUB></SPAN> is the expected cost when it is guaranteed that they travel along a simple path and <SPAN CLASS="MATH"><I>F</I><SUB>3</SUB></SPAN> is the expected cost when it is guaranteed that they travel along a simple cycle. All the floating point numbers should be rounded up to four digits after the decimal point. You must assume that their travelling cost is not greater than <SPAN CLASS="MATH"><I>L</I></SPAN>. Travelling cost is always expressed in universal joule.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
4
5
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2.4286 1.5000 3.0000
3.5500 2.2000 3.5000
4.6716 3.0625 4.2000
</PRE><P>
______________________________________________________
2701||||||false||||||
<P>Given a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>, write a program to find out a nonzero multiple <SPAN CLASS="MATH"><I>m</I></SPAN> of <SPAN CLASS="MATH"><I>n</I></SPAN> whose decimal representation contains only the digits 0 and 1. You may assume that <SPAN CLASS="MATH"><I>n</I></SPAN> is not greater than 200 and there is a corresponding <SPAN CLASS="MATH"><I>m</I></SPAN> containing no more than 100 decimal digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file may contain multiple test cases. Each line contains a value of <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2701img1.gif ALT="$ \leq$"> <I>n</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2701img1.gif ALT="$ \leq$"> 200</SPAN>). A line containing a zero (<TT>0</TT>) terminates the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each value of <SPAN CLASS="MATH"><I>n</I></SPAN> in the input print a line containing the corresponding value of <SPAN CLASS="MATH"><I>m</I></SPAN>. The decimal representation of <SPAN CLASS="MATH"><I>m</I></SPAN> must not contain more than 100 digits. If there are multiple solutions for a given value of <SPAN CLASS="MATH"><I>n</I></SPAN>, any one of them is acceptable.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
6
19
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10
100100100100100100
111111111111111111
</PRE><P>
______________________________________________________
2702||||||false||||||
<P>In order to ensure that the contestants find it easy to reach the regional contest site, the authority has prepared some robot-driven vehicles. The vehicles would visit <SPAN CLASS="MATH"><I>n</I></SPAN> predetermined junctions and carry the contestants waiting there to the contest. There is a computer controlled Transportation Center (TC) that determines the number of seats of each vehicle and the time each vehicle leaves the contest site for the first time.<P>When a new vehicle is needed, a request is made to the TC. Every new vehicle has fewer number of seats than the last vehicle if it is more than 3: the <SPAN CLASS="MATH"><I>i</I></SPAN>-th vehicle has <SPAN CLASS="MATH">max(<I>s</I> - (<I>i</I> - 1)*<I>t</I>, 3)</SPAN> seats ( <SPAN CLASS="MATH"><I>i</I> = 1, 2,...</SPAN>). The first vehicle leaves the contest site just at 8:00am. When TC gets a request for a new vehicle, it prepares a new vehicle and right after 2 seconds of getting the request, the new vehicle leaves the contest site. If multiple requests are made at the same time, only one is considered.<P>At the junction <SPAN CLASS="MATH"><I>j</I></SPAN>, each vehicle does the following tasks. If there are more than one vehicle at <SPAN CLASS="MATH"><I>j</I></SPAN> at the same time, they perform the tasks in order of their service times: the one with the longest service time goes first. Service time of a vehicle is the difference between current time and the time the vehicle left the contest site (which is at junction 0) for the first time.<P><OL><LI>If <SPAN CLASS="MATH"><I>j</I> = 0</SPAN> (the contest site), all the contestants in the vehicle gets down. Otherwise, the vehicle picks up as many contestants as it can (i.e. until the vehicle is full or there are no contestants left at junction <SPAN CLASS="MATH"><I>j</I></SPAN>). </LI><LI>If, after that, there are any contestant left at junction <SPAN CLASS="MATH"><I>j</I></SPAN> (<SPAN CLASS="MATH"><I>j</I> &gt; 0</SPAN>), the vehicle sends a request for a new vehicle to the TC. </LI><LI>Finally the vehicle starts moving towards the next junction <SPAN CLASS="MATH"><I>k</I></SPAN>, which is selected by the robot-driver in the following way (even at junction 0):<UL><LI>If the vehicle is full, <SPAN CLASS="MATH"><I>k</I> = 0</SPAN>. </LI><LI>Otherwise, if no other vehicle has left junction <SPAN CLASS="MATH"><I>j</I></SPAN> yet, <SPAN CLASS="MATH"><I>k</I> = (<I>j</I> + 1) mod <I>n</I></SPAN>. </LI><LI>Otherwise, <SPAN CLASS="MATH"><I>k</I></SPAN> is ( <SPAN CLASS="MATH">(<I>k</I><SUB>0</SUB> + 1) mod <I>n</I></SPAN>) if it is different from <SPAN CLASS="MATH"><I>j</I></SPAN>. </LI><LI>Otherwise, <SPAN CLASS="MATH"><I>k</I></SPAN> is ( <SPAN CLASS="MATH">(<I>k</I><SUB>0</SUB> + 2) mod <I>n</I></SPAN>).<BR>Here, <SPAN CLASS="MATH"><I>k</I><SUB>0</SUB></SPAN> is the `<EM>next junction</EM>' selected by the last vehicle leaving junction <SPAN CLASS="MATH"><I>j</I></SPAN>. </LI></UL></LI></OL><P>Vehicles do the above 3 tasks instantly (i.e. in 0 seconds). Time needed to go from each junction to any other junction is known. All the contestants reach a suitable junction by 8:00am and don't go away until they are picked up by any vehicle. Given the number of contestants waiting at each junction and a time limit, you are to determine when everyone reaches the contest or how many have reached the contest by the time limit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. Each dataset consists of the followings:<P><UL><LI>A line containing the name of the set (which has 2 to 20 alphanumeric characters). </LI><LI>A line containing 3 positive integers <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $2 < n < 11$
 --> <SPAN CLASS="MATH">2 &lt; <I>n</I> &lt; 11</SPAN>). </LI><LI>Each of next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> integers each. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line ( <SPAN CLASS="MATH"><I>i</I> = 1, 2, 3...</SPAN>) contains the time (in seconds) needed to go from the junction <SPAN CLASS="MATH"><I>i</I> - 1</SPAN> to all other junctions (except the <SPAN CLASS="MATH">(<I>i</I> - 1)<SUP>th</SUP></SPAN>) in order <SPAN CLASS="MATH">0, 1, 2...<I>n</I></SPAN>. </LI><LI>Next <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> lines each contain a non-negative integer. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line ( <SPAN CLASS="MATH"><I>i</I> = 1, 2, 3...</SPAN>) contains the number of contestants waiting at the <SPAN CLASS="MATH"><I>i</I></SPAN>-th junction. </LI><LI>The last line of the dataset contains the time limit (in seconds, less than 10000000). </LI></UL><P>All integers on a single line are separated by exactly one space. Total number of contestants is at most 1000.<P>The end of input is marked with a line consisting of `<TT>TheEnd</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set, print 2 lines. The first line contains the name of the set as it appears in the input. The second line contains the time (in seconds) needed to bring all the contestants to the contest, if the time is not more than the given time limit. Otherwise, print the number of contestants reached the contest by the time limit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Dhaka2000
3 22 4
30 8
10 30
28 8
20
20
100
Dhaka2001
3 22 4
30 8
10 30
28 8
20
20
90
Dhaka2002
3 22 2
30 8
10 30
28 8
20
20
100
TheEnd
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Dhaka2000
98 seconds needed
Dhaka2001
22 contestants reached
Dhaka2002
88 seconds needed
</PRE><P>
______________________________________________________
2703||||||false||||||
<P>Hermes, the Greek God of Speed, has created a two-dimensional colony Massilia in space. The colony, consisting of one or more provinces, can be represented by a linear equation in 3-dimensional space. In each province there are 3 or 4 cities, each being on their convex hull. Now, citizens of each province want to create road network connecting cities of their own province. Unfortunately, materials for road construction are not available in the colony, and can only be transported from Earth. Total material required to construct the roads will be proportional to their length. This is why they are interested to build road networks of shortest length connecting different cities of a province. In order to minimize length of each network they are also ready to make junctions away from cities, if so required.<P>Unfortunately creatures of the colony are pretty weak in mathematics and algorithms. They have, therefore, decided to take services of `<EM>homo sapiens</EM>' of earth, who are believed to be good in mathematics and algorithms. Accordingly the chief of Massilia sent an email to Academy of Computers and Mathematics (ACM) with Head Quarters at Dhaka to solve the problem. ACM has now asked you to help out our friends in Massilia.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The colony is described by an equation <SPAN CLASS="MATH"><I>ax</I> + <I>by</I> + <I>cz</I> = <I>d</I></SPAN>. There are <SPAN CLASS="MATH"><I>N</I></SPAN> provinces in the colony. A city in a province can be described by a point in 3-dimension like <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN>. All the <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN> and <SPAN CLASS="MATH"><I>z</I></SPAN> coordinates will be within <SPAN CLASS="MATH">-100.00</SPAN> and <SPAN CLASS="MATH">100.00</SPAN>. The first line of input will contain <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN> and <SPAN CLASS="MATH"><I>d</I></SPAN>. Then the number of provinces (<SPAN CLASS="MATH"><I>N</I></SPAN>) in the colony will be given in the second line. The remaining lines will describe each province one by one.<P>The description of a province starts with the number of cities <SPAN CLASS="MATH"><I>M</I></SPAN> ( <SPAN CLASS="MATH">3 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2703img1.gif ALT="$ \leq$"> <I>M</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2703img1.gif ALT="$ \leq$"> 4</SPAN>) in the province in a line followed by <SPAN CLASS="MATH"><I>M</I></SPAN> lines. Each line contains 3 numbers describing respectively the <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN> and <SPAN CLASS="MATH"><I>z</I></SPAN> coordinates of a city in that province.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>You should print one line for each province in the input data as follows:<P><P><BR><TT>Province # <SPAN CLASS="MATH"><I>p</I></SPAN> : <SPAN CLASS="MATH"><I>L</I></SPAN></TT><P><P><BR>Where <SPAN CLASS="MATH"><I>p</I></SPAN> is the serial number of the province as they appear in the input. <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2703img1.gif ALT="$ \leq$"> <I>p</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2703img1.gif ALT="$ \leq$"> <I>N</I></SPAN>, and <SPAN CLASS="MATH"><I>L</I></SPAN> is the minimum length of the road network for that province. <SPAN CLASS="MATH"><I>L</I></SPAN> should contain two digits after the decimal point and should be exact up to 2 decimal points.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
-0.126826 -0.780330 0.612372 3.000000
2
3
11.593475 -0.702393 6.405027
-43.361881 -34.677124 -48.269711
-0.380480 -2.340990 1.837117
4
-15.033179 6.549108 10.130860
-13.950171 -53.592907 -66.282234
49.017246 0.979824 16.299353
46.824024 12.971205 31.125420
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Province # 1 : 86.43
Province # 2 : 175.15
</PRE><P>
______________________________________________________
2704||||||false||||||
<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input any five positive integral numbers <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><SUB>5</SUB></SPAN> <tex2html_verbatim_mark>, such that <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2704img1.png ALT="$ \le$"><I>n</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2704img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2704img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2704img1.png ALT="$ \le$">5</SPAN> <tex2html_verbatim_mark>. To the first four positive integral numbers <SPAN CLASS="MATH">(<I>n</I><SUB>1</SUB>, <I>n</I><SUB>2</SUB>, <I>n</I><SUB>3</SUB>, <I>n</I><SUB>4</SUB>)</SPAN> <tex2html_verbatim_mark> the arithmetic operation, such as addition (+), subtraction (-), multiplication (*), or division (/) may be freely applied, but in the arithmetic expression formed with these numbers and operations, every one of the four integral numbers should be used once and only once.<P><P><BR><B>Note:</B> Input data read from standard input, the file ends with `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Write a program for finding an arithmetic expression that satisfies the above requirement and equals <SPAN CLASS="MATH"><I>n</I><SUB>5</SUB></SPAN> <tex2html_verbatim_mark>. If the program finds out the expression for these four arbitrary input numbers, then it gives out the output `<TT>Ok!</TT>';On the contrary, if the program could not get the result of <SPAN CLASS="MATH"><I>n</I><SUB>5</SUB></SPAN> <tex2html_verbatim_mark> by any arithmetic operations to the four input numbers, it gives output `<TT>No!</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 2 3 4 50
2 3 10 1 61
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 3 4 50 No!
2 3 10 1 61 Ok!
</PRE><P>
______________________________________________________
2705||||||false||||||
<P>Write a program that gives us the ordinal position <SPAN CLASS="MATH"><I>d</I> (<I>P</I>)</SPAN> <tex2html_verbatim_mark> of any rank-<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> permutation <SPAN CLASS="MATH"><I>P</I> = (<I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>n</SUB>)</SPAN> <tex2html_verbatim_mark> in the dictionary without producing all the rank-<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> permutations in order, where <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2705img1.png ALT="$ \in$"> {1, 2, 3,..., <I>n</I>}</SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2705img1.png ALT="$ \le$">50</SPAN> <tex2html_verbatim_mark>. When <SPAN CLASS="MATH"><I>n</I> = 4</SPAN> <tex2html_verbatim_mark>, the whole rank-4 permutation in lexicographical order and the code is shown in the following figure.<P><SPAN CLASS="textbf">For example:</SPAN> if <SPAN CLASS="MATH"><I>P</I> = (2, 3, 4, 1)</SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>d</I> (<I>P</I>) = 10</SPAN> <tex2html_verbatim_mark>; if <SPAN CLASS="MATH"><I>P</I> = (4, 2, 1, 3)</SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>d</I> (<I>P</I>) = 21</SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="754" HEIGHT="635" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2705img1.png ALT="\epsfbox{p2705.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Rank-4</DIV><P><DIV ALIGN="CENTER">Dictational Permutation</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><SPAN CLASS="MATH"><I>n</I>, <I>P</I></SPAN> <tex2html_verbatim_mark>. For more than one input in the input file, one line is for each input, with `<TT>-1</TT>' at the end. <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is in the form of list.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><SPAN CLASS="MATH"><I>d</I> (<I>P</I>)</SPAN> <tex2html_verbatim_mark>. It should be in the form of a line with the outputs separated by commas.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
(4,(3,2,1,4))
(5,(3,5,1,2,4))
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
15,67
</PRE><P>
______________________________________________________
2706||||||false||||||
<P>Please write the program to realize the algorithm below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>If we input a number formed by 4 digits and these digits are not all of one same value, then it obeys the following law. Let us operate the number in the following way:<DL COMPACT><DT>(1)</DT><DD>Arrange the digits in the way from bigger to smaller, such that it forms the biggest number that could be made from these 4 digits;</DD><DT>(2)</DT><DD>Arrange the digits in the way from smaller to bigger, such that it forms the smallest number that could be made from these 4 digits (If there is 0 among these 4 digits, the number obtained may be less than four digits);</DD><DT>(3)</DT><DD>Find the difference of these two numbers that is a new four digital number.</DD></DL><P>Repeat the above process, we can finally always get the result 6174 or 0.<P><P><BR><B>Note:</B> Input data read from standard input, the file ends with `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output from the program should show the procedure for finding this number and the number of repetition times.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5364
2221
4444
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
N=5364:
6543-3456=3087
8730-378=8352
8352-2358=6174
Ok!! 3 times
N=2221:
2221-1222=999
999-999=0
Ok!! 2 times
N=4444:
No!!
</PRE><P>
______________________________________________________
2707||||||false||||||
<P>In certain factory a kind of spring locks is manufactured. There are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> slots (<SPAN CLASS="MATH">1 &lt; <I>n</I> &lt; 17</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is a natural number.) for each lock. The height of each slot may be any one of the 4 values in {1,2,3,4 } ( neglect unit ). Among the slots of a lock there are at least one pair of neighboring slots with their difference of height equal to 3 and also there are at least 3 different height values of the slots for a lock. If a batch of locks is manufactured by taking all over the 4 values for slot height and meet the two limitations above, find the number of the locks produced.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is one given data <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (number of slots) on every line. At the end of all the input data is `<TT>-1</TT>', which means the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>According to the input data, count the number of locks. Each output occupies one line. Its fore part is a repetition of the input data and then followed by a colon and a space. The last part of it is the number of the locks counted.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2: 0
3: 8
</PRE><P>
______________________________________________________
2708||||||false||||||
<P>Beads of red, blue or green colors are connected together into a circular necklace of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> beads <!-- MATH
 $( n < 24 )$
 --><SPAN CLASS="MATH">(<I>n</I> &lt; 24)</SPAN> <tex2html_verbatim_mark>. If the repetitions that are produced by rotation around the center of the circular necklace or reflection to the axis of symmetry are all neglected, how many different forms of the necklace are there?<P><DIV ALIGN="CENTER"><IMG WIDTH="839" HEIGHT="460" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2708.jpg ALT="\epsfbox{p2708.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains the input data separated by commas and with <TT>-1</TT> at the end of the file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Number of different forms<P>The output should contain several output data separated by commas.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4,5,-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
21,39
</PRE><P>
______________________________________________________
2709||||||false||||||
<P>There is a species of white mouse to be used in experiments. The mice keep alive only <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> months after their birth (<SPAN CLASS="MATH">9 &lt; <I>n</I> &lt; 13</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is natural number, the month to be calculated from the mice's birth, for example, the mice born in Jan have been existed 4 months in Apr.). They begin giving birth to new mice from the 7-th month. In the period of the 7-th and 8-th months every pair of the parent mice give birth to one pair of mice. From the 9-th month in a period of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> months (<SPAN CLASS="MATH">0 &lt; <I>m</I> &lt; 3</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is natural number) every pair of the parent mice give birth to two pairs of mice. Thereafter, they stop giving birth and live to the end of their life; they die at the beginning of <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark>-th month. (The <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark>-th month doesn't be calculated as exist time of the mice), and the died mice will be took out from this lab. In each month, the number of living mice from previous month is countered first. If the number of the living mice from the previous month is less than or equal to 100 pairs, the new born mice of this month will stay in this lab, if the number of living mice exceeds 100 pairs, the new born mice of this month will be moved to another laboratory. Let there be only one pair of newborn mice at the beginning. How many pairs of mice in the k-th month in this lab (<SPAN CLASS="MATH">0 &lt; <I>k</I> &lt; 37</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is a natural number)?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>On every line, a group of data is given. In each group there are three natural number <SPAN CLASS="MATH"><I>n</I>, <I>m</I>, <I>k</I>,</SPAN> <tex2html_verbatim_mark> separated by commas. After all data are given there is `<TT>-1</TT>' as the symbol of termination.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Find the number of white mice according to the input data in each group. One line is for every output. Its fore part is a repetition of the input data and then it follows a colon and a space. The last part of it is the computed number of the white mice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10,1,6
10,1,7
10,1,9
10,1,10
10,1,11
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10,1,6: 1
10,1,7: 2
10,1,9: 5
10,1,10: 5
10,1,11: 4
</PRE><P>
______________________________________________________
2710||||||false||||||
<P>Assume that there are lots of two colors of black and white Go Game Pieces in a box, we take out <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> Go Game Pieces (<SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 129</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is a natural number) each time from the box, among which all the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> pieces taken out earlier are white and the latter pieces are all black. Place all pieces around a circle in sequence uniformly. Thereafter according to the distributing of color of these pieces of this circle, taking out other pieces from this box and placing another circle in sequence uniformly, namely putting a new piece between two piece from head to end of this circle, put a black piece between every two white pieces; put a white between every white and black pieces; put a black between every two black pieces; put a white between every black and white pieces. In such way, there are also <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> pieces in the new circle. After that the original pieces are all taken off. Then repeat the above process. Doing in such way, that the original set of the pieces on the circle is taken away as soon as new set of the pieces has being placed on, how many white pieces are on the circle after the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-th time of repetition (<SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is a natural number, <SPAN CLASS="MATH"><I>k</I> &lt; 10001</SPAN> <tex2html_verbatim_mark>)?<P>For example, when <SPAN CLASS="MATH"><I>n</I> = 8</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I> = 2</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I> = 2</SPAN> <tex2html_verbatim_mark>, the situation is as following:<P><DIV ALIGN="CENTER"><IMG WIDTH="498" HEIGHT="217" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2710.jpg ALT="\epsfbox{p2710.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>On every line a group of data is given. In each group there are three natural number <SPAN CLASS="MATH"><I>n</I>, <I>m</I>, <I>k</I>,</SPAN> <tex2html_verbatim_mark> separated by commas. After all data are given there is `<TT>-1</TT>' as the symbol of termination.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Find the number of white pieces corresponding to the input data of each group. One line is for every output. Its fore part is a repetition of the input data and then it follows a colon and a space. The last part of it is the computed number of the white pieces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8,2,2
3,1,1234
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8,2,2: 4
3,1,1234: 2
</PRE><P>
______________________________________________________
2711||||||false||||||
<P>Assume that there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2711img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2711img1.png ALT="$ \le$">200)</SPAN> <tex2html_verbatim_mark> boxes identified by <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB>, <I>A</I><SUB>2</SUB>,..., <I>A</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> , and each box <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is configured a lock which is different from the others. Now put <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> keys to the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> locks into the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> boxes, each box can only hold a key. After locking all the boxes, unclench the boxes named <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>A</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and fetch out the keys in them to unlock the locked boxes. If the two keys can open some box, fetch out the key in the box to unlock other locked boxes again. If we can open all the boxes finally, we call the placement of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> keys good placement. How many are there different good placements of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> keys?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file, ending with <TT>-1</TT>, contains several data, each of which holds a line containing a integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (the number of keys).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>According to every input datum, compute the number of different good placements. Each output data hold two lines, the first line is held by the input datum, followed by a colon, which follows an equal mark before which is an <TT>N</TT>; the second is held by the number of different good placement of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> keys.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
8
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
N=6:
240
N=8:
10080
</PRE><P>
______________________________________________________
2712||||||false||||||
<P>In order to improve teaching quality, one school decides to select ten optimal teaching fiends from <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2712img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark> teachers by means of secret ballot among the students.<P>According to the order of <SPAN CLASS="MATH">1, 2, 3...</SPAN> <tex2html_verbatim_mark> the teachers are numbered continuously. Each No. has two characters, for example, <SPAN CLASS="MATH">01, 02, 03,...</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The information of the teachers and votes is stored in the file <SPAN CLASS="textit">fiend.in</SPAN> according to the following format:<P><DL COMPACT><DT>1)</DT><DD>The first line of the file consists of the number of teachers (<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>) and the number of students (<SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>), separated by a blank;</DD><DT>2)</DT><DD>The lines from the second to <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> contain the information of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> teachers; each line contains the information of a teacher. The information of teachers makes up No., name, department, which are separated by a blank;</DD><DT>3)</DT><DD>The lines from the <SPAN CLASS="MATH"><I>n</I> + 2</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>n</I> + <I>m</I> + 1</SPAN> <tex2html_verbatim_mark> contain the information of votes; each line contains a string representing a vote;</DD><DT>4)</DT><DD>The end of the file is `<TT>-1</TT>'.</DD></DL><P><P><BR>Every vote consists of the No. of the ten selected teachers. The position of the No represents place in the selection. The corresponding place in the selection can be vacant, but it must be expressed as 00. The vote in which the No. is outside the range stipulated, or appears repeatedly will be deserted. Score the teachers listed according to the order of teaching Fiends in the votes according to the following standards.<P><P><BR><TABLE COLS=11><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Order</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>First</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Second</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Third</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Forth</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Fifth</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Sixth</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Seventh</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Eighth</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Ninth</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Tenth</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Score</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TABLE><P><P><BR><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Sort the teachers from high to low according of the score each teacher gains, and list the table of the first ten optimal teaching Fiends:<P><P><BR>Place No. Name Department Total score Sum of votes Detail of votes<P><P><BR>If the score is the same, the one who gains more votes is ahead; if the score and the number of votes are the same, the one who's No. is smaller is ahead.<P><P><BR><SPAN CLASS="textbf">Detail of the format of the output:</SPAN><P><TABLE COLS=6><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1st column</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Place</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Width</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aline Way</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Left Aline</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2ndcolumn</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>No.</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Width</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aline Way</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Left Aline</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3rd column</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Name</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Width</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aline Way</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Left Aline</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4th column</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Department</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Width</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>35</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aline Way</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Left Aline</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5th column</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Total Score</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Width</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aline Way</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Right Aline</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6th column</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Sum of votes</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Width</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aline Way</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Right Aline</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7th column</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Sum of "First"</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Width</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aline Way</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Right Aline</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8th column</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Sum of "Second"</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Width</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aline Way</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Right Aline</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15th column</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Sum of "Ninth"</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Width</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aline Way</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Right Aline</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>16th column</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Sum of "Tenth"</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Width</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aline Way</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Right Aline</TD></TR></TABLE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
15 30
08 Christopher Power&amp;EnergyEngineering
02 Amanda MaterialsScience&amp;Engineering
13 Matthew Chemistry&amp;ChemicalTechnology
15 Sarah LifeScience&amp;Biotechnology
05 Joshua Power&amp;EnergyEngineering
06 Brittany ElectricPowerEngineering
07 Andrew HumanitiesandSocialScience
01 Megan MaterialsScience&amp;Engineering
09 Daniel Management
04 Jennifer CivilEngineering&amp;Mechanics
03 Justin Electronics&amp;InformationTechnology
12 Nicole Chemistry&amp;ChemicalTechnology
10 David Power&amp;EnergyEngineering
14 Stephanie Chemistry&amp;ChemicalTechnology
11 Ryan LifeScience&amp;Biotechnology
01060503130412020009
07020905071308081015
01000000000000000000
00000200000112000006
12031301110402071306
15021413091211100603
15110314030406011412
03011110030312120114
08010409140206120513
08121206020601141214
11131506040914021402
05040711140506041413
09020204011009120214
07050613151209040414
10010410030309040514
11090113111114090110
06100307030808131510
09131505030801150611
15060509120610100111
11030613130909050701
12130409091402121402
03111411041508110909
01130112061109090408
12140507060809151314
12150811060915040702
11130607071007111408
12050714010205071214
09030603090108101313
15040615061107020608
02050202111309080506
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1   01  Megan        MaterialsScience&amp;Egineering     47  4  2  1  0  0  0  1  0  0  0  0 
2   02  Amanda       MaterialsScience&amp;Egineering     29  4  0  1  1  0  0  1  0  1  0  0
3   06  Brittany     ElectricPowerEngineering        19  4  0  1  0  0  0  0  1  0  1  1  
4   12  Nicole       Chemistry&amp;ChemicalTechnology    16  4  0  0  0  0  0  1  2  1  0  0
5   14  Stephanie    Chemistry&amp;ChemicalTechnology    15  2  0  0  1  0  1  0  0  0  0  0
6   08  Chistopher   Power&amp;EnergyEngineering         15  1  1  0  0  0  0  0  0  0  0  0   
7   15  Sarah        LifeScience&amp;Biotechnology       15  1  1  0  0  0  0  0  0  0  0  0
8   09  Daniel       Management                      14  3  0  0  0  1  1  0  0  0  0  1 
9   13  Matthew      Chemistry&amp;ChemicalTechnology    14  3  0  0  0  1  1  0  0  0  0  1         
10  04  Jennifer     CivilEngineering&amp;Mechanics      14  2  0  0  1  0  0  1  0  0  0  0

______________________________________________________
2713||||||false||||||
<P>A mail order company is in great trouble. It maintains a file containing records of address of its customers. Due to mishandling the file is corrupted and there is no back up of the file. The company needs a program to recover the addresses. You are required to develop a program for the company. The company provides you with the following information:<P><OL><LI>Generally a record in the file contains five fields: Id-no, Name, Location, Post-office, and Area. However the field named Area may or may not be present in an address. Hence the total number of fields in a record is either 4 or 5. Initially the fields are arranged in the order, called the normal order, in which they are mentioned above. But due to mishandling, the order of the fields (but not the contents) might have changed. </LI><LI>Each record begins with the begin-record-line containing the character <TT>@</TT> followed by an integer representing the record number. The file ends with the end-file-line containing the character <TT>$</TT> followed by an integer representing the total number of records in the file. </LI><LI>A field has one or more lines. Id-no, Name and Post-office contain only one line each while Location has at least one line and Area, if present, may have one or more lines. </LI><LI>A line is a sequence of words terminated by a semi-colon. The blank character is used freely to separate words in a line. Sometimes a comma may also be used to separate words in Name, Location and Area. Likewise a hyphen may be present between two words in Id-no and Post-office. </LI><LI>A word may be alphabetic (string of letters a-z, A-Z), numeric (string of digits 0-9) or alphanumeric (string of letters a-z, A-Z and/or digits 0-9). </LI><LI>Id-no may contain any type of word. In addition to the blank character, at least one hyphen is used to separate words in Id-no. </LI><LI>Words in Name are alphabetic. A Name has two parts: a name-part and a surname-part. Normally the surname-part appears at the end. However if it appears at the beginning then a comma separates it from the name-part. </LI><LI>Like Id-no, Location may contain any type of words. However hyphen is never used in Location. </LI><LI>Post-office contains a pin-code represented by a six-digit numeric word. The pin-code is preceded by one or more alphabetic words identifying the name of the post-office. In addition to the blank character a hyphen may also be used to separate the pin-code from the name of the post office. </LI><LI>Area, when present, contains only alphabetic words. However each word in Area begins with a capital letter and may end up with a comma. </LI></OL><P>Due to imprecise information stated above, a line of the corrupted file may appear to belong to more than one field. As a result it may not be always possible to recover a record uniquely or recover it at all. In case more than one option is available, all possible options for recovering the record should be identified and reported. In each recovered record the name-part of Name should always appear before the surname-part.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to the program is a corrupted address file described above and illustrated in the sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output of the program is the recovered address file with all possible options for recovering the corrupted input file. The structure of the output file is based on the input file structure.<P>The beginning of a record is identified by the begin-record-line that contains in addition to the `<TT>@</TT>' character and the record number, a number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> denoting the number of options for recovering the record. A blank character precedes the number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. In case a record cannot be recovered due to any contradiction between the information contained in the record and the information provided by the company, the option number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is set equal to zero.<P>The begin-record-line is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> options for recovering the record. Each option begins with a begin-option-line that contains a number of slash character (<TT>/</TT>) pertinent to the option number, e.g., the second option will begin with a line containing two slashes (<TT>//</TT>). Each option for recovering a record contains fields in the normal order.<P>The file ends with the end-file-line that contains in addition to the character `<TT>$</TT>' and the total number of records in the file, a number <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> denoting the total number of records recovered. A blank character precedes the number <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. The output file structure is illustrated in sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
@1                                                                       
gamma 436502;                                                            
Beta Alpha;                                                              
Nu5 321902;                                                              
Epsilon, Theta;                                                          
eta 123206;                                                              
Sigma Kappa, Lambda;                                                     
Zeta Delta;                                                              
@2                                                                       
Alpha, Beta;                                                             
eta 123206;                                                              
Sigma Kappa, Lambda;                                                     
Nu5 321902;                                                              
gamma 436-502;                                                           
Epsilon, Theta;                                                          
$2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
@1 0 
@2 2 
/  
gamma 436-502; 
Beta Alpha; 
Sigma Kappa, Lambda; 
Nu5 321902; 
eta 123206; 
Epsilon, Theta; 
// 
gamma 436-502; 
Theta Epsilon; 
Sigma Kappa, Lambda; 
Nu5 321902; 
eta 123206; 
Alpha, Beta; 
$2 1
</PRE><P>
______________________________________________________
2714||||||false||||||
<P>Meetings of board of directors of a company are held in a specially designed room. The room contains a central table in the form of a ring around which revolving chairs are placed. There is an entry to approach the center of the ring where there is a single revolving chair. An outline of the arrangement inside the room is shown in the figure below.<DIV ALIGN="CENTER"><IMG WIDTH="447" HEIGHT="306" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2714.jpg ALT="\epsfbox{p2714.eps}"> <tex2html_verbatim_mark></DIV><P>The following protocol is maintained during the meeting:<P><OL><LI>The total number of members present in any meeting is an even number, say, <SPAN CLASS="MATH">2<I>N</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">5 &lt; 2<I>N</I> &lt; 25</SPAN> <tex2html_verbatim_mark>. The members are identified by integers <SPAN CLASS="MATH">1, 2,..., 2<I>N</I></SPAN> <tex2html_verbatim_mark>. </LI><LI>Around the table <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> blue and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> red chairs are placed alternately for the members to sit. Arrangements of blue and red chairs are considered circular. Thus the entry path does not affect the proximity of chairs on two sides of the path. At the start of the meeting <SPAN CLASS="MATH">2<I>N</I></SPAN> <tex2html_verbatim_mark> members sit on <SPAN CLASS="MATH">2<I>N</I></SPAN> <tex2html_verbatim_mark> chairs around the table. </LI><LI>In addition to the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> blue and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> red chairs one white chair is placed at the center of the table. When the white chair is vacant a member occupying a red chair only, may vacate the red chair and sit on the white chair to address the meeting. </LI><LI>During an address one blue / red chair always remains vacant. A member seated on either side of the vacant chair may vacate her / his chair and occupy the vacant chair. This type of change of chairs may be made by members any number of times during an address. </LI><LI>After completion of an address a member vacates the white chair and occupies the blue / red chair vacant at that time. </LI></OL><P>Reporters are briefed at the beginning and at the end of the meeting. However they are not supplied with all the details they wish to know. A reporter is curious to know the total number of addresses delivered in the meeting. He notes down the relative positions of members in anticlockwise order with respect to the member identified by the integer 1, at the beginning as well as at the end of the meeting.<P>You are required to write a computer program to find the minimum number of addresses delivered during the meeting.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case here are three input lines. The first line contains two integers, the case number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> and the total number of member <SPAN CLASS="MATH">2<I>N</I></SPAN> <tex2html_verbatim_mark>.<P>The next two lines consist of two strings giving the relative position of members at the beginning and at the end of the meeting, in anticlockwise order with respect to the member 1.<P>Each input string starts with a letter-integer combination (without any blank between the letter and the integer) either <SPAN CLASS="MATH"><I>B</I>1</SPAN> <tex2html_verbatim_mark> (if member 1 is on a blue chair) or <SPAN CLASS="MATH"><I>R</I>1</SPAN> <tex2html_verbatim_mark> (if member 1 is on a red chair) and is followed by a permutation of integers <SPAN CLASS="MATH">2, 3,..., 2<I>N</I></SPAN> <tex2html_verbatim_mark>. A blank character precedes each integer appearing in the string, with the exception of 1. The input is illustrated in sample input.<P><P><BR>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input print in one line two integers <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> separated by a blank character. The integer <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is the test case number and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the minimum number of addresses delivered in the meeting.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 6                                                     
B1 3 6 5 4 2                                            
R1 3 6 5 4 2                                              
2 6                                                       
B1 3 6 5 4 2                                              
R1 3 4 6 5 2                                              
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1  
2 2
</PRE><P>
______________________________________________________
2715||||||false||||||
<P>The ABC class of 2003 consists of all outgoing students of ABC Institute of Information Technology of the year 2003. The class is engaged in developing a web site that aims to provide free services of various kinds. Considering the fact that people often lose contact with their old classmates and are eager to establish the lost contact after long years of separation a link has been kept in the web site for users to register and provide information about last school/college/university they attended and classmates they remember. Information gathered from users is included in a database that is used to process personalized queries related to information about classmates.<P><P><BR>In order to attract users, the site aims to display, while responding to personalized queries, some statistical information related to the database. In particular it is of interest for the users to know the largest number of classmates that exists in the database, who studied together in the same institution/institutions, viz.,<P><OL><LI>the same school (S), </LI><LI>the same college (C), </LI><LI>the same university (U), </LI><LI>the same school and the same college (SC), </LI><LI>the same school and the same university (SU), </LI><LI>the same college and the same university (CU), and </LI><LI>the same school, the same college and the same university (SCU). </LI></OL><P>The ABC class of 2003 seeks your help in writing a program to compute the seven statistics stated above. Assume that all registered users and classmates for whom information is given by a user are recorded in the database by name and associated school, college, university and years. However each one of them is also identified uniquely by an integer assigned arbitrarily. The integer representation is used in input/output.<P>It should be noted that when a user A is listed as a classmate by another user B the user A may or may not list B as classmate. Further if A and B are classmates at a given level (school/college/university) then all classmates of A (or B) are classmates of B (or A) and A, B and their classmates attended the same institution at that level.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case the first line contains two integers <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. The integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is the case number and <!-- MATH
 $N (< 5000)$
 --><SPAN CLASS="MATH"><I>N</I>( &lt; 5000)</SPAN> <tex2html_verbatim_mark> is the total number of users who have registered at the site and provided information voluntarily.<P>Data from each of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> users appear in four lines. The first line identifies the user who has registered and provided information about classmates. The second, the third and the fourth lines list classmates of the user in school, college and university respectively. The input is illustrated in sample input.<P><P><BR>The entire input set terminates with an input `<TT>0</TT>' for each of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input print two lines. The first line contains the test case number <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> and the next line contains the seven statistics mentioned above in the order in which they are listed, viz., S, C, U, SC, SU, CU and SCU. The output is illustrated in sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 3                   
31                     
42 90 18 19            
34 15 19               
42 13                  
42                     
26 80 90               
53 17 20               
31 79                  
11                     
14 15 19               
79 80                  
34 80 19 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
10 4 4 3 3 2 2
</PRE><P>
______________________________________________________
2716||||||false||||||
<P>Data compression is the process of transforming a body of data consisting of a character stream to a smaller size using certain codes, from which the original data can be restored by decompression. There exist many complex data compression algorithms that can sometimes achieve phenomenal compression. A simple dictionary-based compression technique is stated below. The technique is based on the concept of a dictionary that stores repeating code sequences as words. You are required to write a program to compress a given body of data using the technique and decompress the data when required. Assume that the complete set of distinct characters present in the body of data (including the blank character if present) is also given as a string of characters.<P><P><BR>The dictionary is organized as an indexed list of words. A word in the dictionary is associated with its index (a distinct nonnegative integer), its coded representation (an ordered pair of integers) and its length (the number of characters in the word). Initially each character in the given string is stored in the dictionary as a word in the order in which it appears in the string. The index of the first entry in the dictionary is assumed to be 0. If the index of an entry in the dictionary is <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> then the index of the next entry is <SPAN CLASS="MATH">(<I>n</I> + 1)</SPAN> <tex2html_verbatim_mark>. The entire body of data is encoded replacing each character by its index in the dictionary.<P><P><BR>The encoded data is compressed successively creating a new word in the dictionary by concatenating two existing words and encoding each appearance of the new word in the body of encoded data by its index until no further compression is possible. Since a new word is created by concatenating two existing words, each word in the dictionary is encoded as an ordered pair of integers <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> are respectively the indexes of the two existing words, which appear in the left and in the right, to form the word by concatenation. Each distinct character stored initially in the dictionary, say with index <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, is encoded as <SPAN CLASS="MATH">(- 1, <I>k</I>)</SPAN> <tex2html_verbatim_mark>.<P><P><BR>The process of successive compression is stated below:<P><OL><LI>Scan the encoded data from left to right and select the most frequently occurring word W. If there are two or more such words then the tie is broken first by selecting words having the largest length and then by selecting the word having the smallest index. </LI><LI>Let w be a new word that can be formed by concatenating an existing word, say E, to the left or to the right of W, i.e., the word w is either EW or WE and it may also be the word WW. Find the number of times each w occurs while scanning the encoded data from left to right. </LI><LI>Select the most frequently occurring new word w with frequency two or more. If there are two or more such words then the tie is broken first by selecting words w having the largest length, then selecting E with the smallest index and finally if necessary selecting the prefix EW instead of the postfix WE. </LI><LI>Add the selected new word w in the dictionary. Let its index be n. Scan the body of encoded data from left to right and replace each occurrence of w by its index n. </LI><LI>In case no w exists, consider the next possible W and repeat the process until no new word can be created. </LI></OL><P>At the termination of the process the body of encoded data represents the given body of data in compressed form and the dictionary contains all words used in the compressed data. The compressed data may be decompressed using the dictionary and the given string of characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case, the first line contains the test case number <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and the option number <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, which is either 1 (for compression) or 2 (for decompression). The second line gives a string of complete set of distinct characters that appear in the body of data. The string terminates with the character `<TT>$</TT>'.<P>For data compression the body of data follows the second line in one or more lines and is terminated by the character `<TT>$</TT>'.<P>For decompression the dictionary and the body of encoded data follow the second line. A blank line separates the dictionary and the body of encoded data. Each word in the dictionary is given in a single line in the order it appears in the dictionary. The line contains the ordered pair of integers representing the word in encoded form. The body of encoded data appears in one or more lines as a sequence of integers. The character `<TT>$</TT>' terminates the body of encoded data.<P><P><BR>The entire input set terminates with an input `<TT>0</TT>' for each of <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>. The input is illustrated in sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case the first output line contains the test case number <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and the option number <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>. If the option is data compression then the  output is in the form of input for decompression. For decompression the body of decompressed data terminated by the character `<TT>$</TT>', follows the first output line.<P>The output is illustrated in sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1                                                      
abc$                                                     
abcbaacbabbcaccabca$                                     
2 2                                                      
01 $                                                     
-1 0                                                     
-1 1                                                     
-1 2                                                     
0 1                                                      
3 2                                                      
0 2                                                      
                                                         
4 1 0 5 1 3 1 2 5 2 4 0 $                                
3 1                                                      
01 $                                                     
01 100 1011 0  01 0$                                     
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1 
abc$ 
-1 0 
-1 1 
-1 2 
0 1 
3 2 
0 2 
 
4 1 0 5 1 3 1 2 5 2 4 0 $ 
2 2 
01 100 1011 0  01 0$ 
3 1 
01 $ 
-1 0 
-1 1 
-1 2 
0 1 
3 2 
0 2 
 
4 1 0 5 1 3 1 2 5 2 4 0 $
</PRE><P>
______________________________________________________
2717||||||false||||||
<P>An earthquake management software collects and interprets bits of disparate data from emergency calls, news broadcasts, satellite imagery, reading from remote sensors attached to roadways or buildings, estimates the damage caused to road links connecting major towns in a state and produces a report on the condition of road links giving an estimate of the maximum average speed in km/hr (the speed is 0 km/hr if a road link is unusable) with which rescue operations can be executed through each of the existing road links. The information produced by the earthquake management software is to be used to find a set <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> of fastest independent priority routes from a given set of source towns where adequate resources are available to a given destination town that is affected severely. You are required to write a program to find <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR>Assume that towns are identified by integers. If a town <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> has better resources than another town <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> then <SPAN CLASS="MATH"><I>p</I> &lt; <I>q</I></SPAN> <tex2html_verbatim_mark>. A route from a source to the destination is represented by a sequence of distinct integers representing towns en route. The first integer on a route is a source while the last integer is the destination. If an integer <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> appears next to an integer <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> on a route then the road link from town <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> to town <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> belongs to the route. A route is associated with the operation time and the covering distance. The operation time of a route is the time required to execute rescue operations at the estimated maximum average speed on each road link on the route. The covering distance of a route is the distance covered to reach the destination from the source following the route.<P><P><BR>A fastest route is a route through which rescue operations can be executed in least operation time. If there is more than one fastest route then a fastest route that has shortest covering distance is selected and the route is called a fastest compact route. Again if there are two fastest compact routes then priority is given to the fastest compact route that has better resources en route to the destination. For example if <SPAN CLASS="MATH"><I>R</I>1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I>2</SPAN> <tex2html_verbatim_mark> are two fastest compact routes containing town <SPAN CLASS="MATH"><I>p</I>1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I>2</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>p</I>1 &lt; <I>p</I>2)</SPAN> <tex2html_verbatim_mark> respectively, and town <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> appears next to <SPAN CLASS="MATH"><I>p</I>1</SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>R</I>1</SPAN> <tex2html_verbatim_mark> and next to <SPAN CLASS="MATH"><I>p</I>2</SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>R</I>2</SPAN> <tex2html_verbatim_mark> then <SPAN CLASS="MATH"><I>R</I>1</SPAN> <tex2html_verbatim_mark> is given priority over <SPAN CLASS="MATH"><I>R</I>2</SPAN> <tex2html_verbatim_mark>. The fastest priority route is the fastest compact route with highest priority.<P><P><BR>The set <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> of fastest independent priority routes is defined recursively. The fastest priority route has the priority one to be in <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>. The fastest independent priority route with priority <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the fastest priority route obtained after removal of all road links appearing in the first <SPAN CLASS="MATH"><I>k</I> - 1</SPAN> <tex2html_verbatim_mark> fastest independent priority routes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case the first input line gives the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. The second input line gives a sequence of integers representing the source towns while the third input line gives an integer representing the destination town.<P>In addition to the first three input lines mentioned above the input contains a set of lines defining existing road links and their condition after the disaster. The lines are given in an arbitrary order. Each of these lines contains two integers and two real numbers. The integers represent two towns between which there is an existing road link. The first one of the two real numbers is the distance in km between the towns and the second real number is the estimated maximum average speed with which rescue operations can be executed over the road link.<P><P><BR>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. The input is illustrated in sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input first print in one line, the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> and the total number of routes in the set <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>. Print each route in <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> in two lines. The first line gives the priority number, the operation time and the covering distance while the second line gives the route as a sequence of integers.<P>Print a blank line between outputs of two successive test cases. The output is illustrated in sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1                                                                          
3                                                                          
4                                                                          
1 3 20 20                                                                  
1 2 10 10                                                                  
1 4 40 20                                                                  
1 5 20 0                                                                   
2 3 30 15                                                                  
2 4 30 30                                                                  
2 5 10 5                                                                   
3 5 40 20                                                                  
4 5 20 20                                                                  
2                                                                          
4 5                                                                        
3                                                                          
1 3 20 20                                                                   
1 2 10 10                                                                   
1 4 40 20                                                                   
1 5 20 0                                                                    
2 3 30 15                                                                   
2 4 30 30                                                                   
2 5 10 5                                                                    
3 5 40 20                                                                   
4 5 20 20 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3 
1 3.0 60.0 
3 1 4  
2 3.0 60.0 
3 2 4  
3 3.0 60.0 
3 5 4  
 
2 3 
1 2.0 40.0 
5 3  
2 3.0 60.0 
4 2 1 3  
3 4.0 40.0 
5 2 3
</PRE><P>
______________________________________________________
2718||||||false||||||
<P>Normally for a given problem you are asked to find the solution. Here you are required to write a program to find the problem for which the solution is given.<P>Let <SPAN CLASS="MATH"><I>f</I> = <I>m</I>/<I>n</I></SPAN> <tex2html_verbatim_mark> be a proper fraction and <SPAN CLASS="MATH"><I>F</I> = {<I>f</I><SUB>1</SUB>, <I>f</I><SUB>2</SUB>,..., <I>f</I><SUB>k</SUB>}</SPAN> <tex2html_verbatim_mark> be a set of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> distinct unit fractions <SPAN CLASS="MATH"><I>f</I><SUB>i</SUB> = 1/<I>n</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>k</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> (not equal to 1 or <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>) is a factor of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is a suitable integer. Recall that a proper fraction <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> is a number of the form <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ \alpha$">/<IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ \beta$"></SPAN> <tex2html_verbatim_mark>, where the numerator <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> and the denominator <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ \beta$"></SPAN> <tex2html_verbatim_mark> are positive integers and <!-- MATH
 $1 \le \alpha < \beta$
 --><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ \le$"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ \alpha$"> &lt; <IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ \beta$"></SPAN> <tex2html_verbatim_mark>. A unit fraction is a proper fraction with <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ \alpha$"> = 1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ \beta$"> &gt; 1</SPAN> <tex2html_verbatim_mark>. Since the numerator of each element of <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> is 1, the set <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> may be identified also by the set <SPAN CLASS="MATH"><I>D</I> = <I>n</I><SUB>1</SUB>, <I>n</I><SUB>2</SUB>,..., <I>n</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> of denominators appearing in the elements of <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>.<P>Consider the problem: given the set <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>, find the sum of elements of <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> and its solution: the sum <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is a nonnegative integer as large as possible.<P>Given a solution <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> you are required to write a program to find <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> or equivalently find <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>. It should be noted that for a given solution there may exist no problem, exactly one problem or more than one distinct problem. Let <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> be the total number of distinct problems for a given solution.<P><P><BR>For example if <SPAN CLASS="MATH"><I>f</I> = <IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ {\frac{{13}}{{24}}}$"></SPAN> <tex2html_verbatim_mark> then <SPAN CLASS="MATH"><I>p</I> = 2</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>F</I> = {<IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ {\frac{{1}}{{3}}}$">,<IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ {\frac{{1}}{{8}}}$">,<IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ {\frac{{1}}{{12}}}$">}</SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH">{<IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ {\frac{{1}}{{4}}}$">,<IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ {\frac{{1}}{{6}}}$">,<IMG WIDTH="15" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ {\frac{{1}}{{8}}}$">}</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I> = {3, 8, 12}</SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH">{4, 6, 8}</SPAN> <tex2html_verbatim_mark>.<P><P><BR>Again if <SPAN CLASS="MATH"><I>f</I> = <IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2718img1.png ALT="$ {\frac{{13}}{{18}}}$"></SPAN> <tex2html_verbatim_mark> then <SPAN CLASS="MATH"><I>p</I> = 0</SPAN> <tex2html_verbatim_mark> since no <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> exists for the given <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case there are two input lines. The first line contains the case number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> and the second line gives the numerator <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and the denominator <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. The input is illustrated in sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> in one line, where <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is the test case number, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the largest possible number of distinct unit fractions in <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> is the total number of distinct problems.<P>In each of the next <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> lines, print a problem represented by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> elements of <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>. The elements of <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> are printed in increasing order of magnitude. The problems are to be arranged in lexicographic order of the elements of <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>.<P>Print a blank line between two successive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1                                                              
13 18                                                          
2                                                              
13 24                                                          
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 0 0                                                                 
                                                                 
2 3 2                                                                 
3 8 12                                                                 
4 6 8
</PRE><P>
______________________________________________________
2719||||||false||||||
<P>In World Cup soccer 2002 player No. 10 of Team A scored a memorable goal against Team B. The goal was scored so fast that on the spur of a moment the ball passed into the goal, through direct passes between players of Team A keeping the defenders of Team B spellbound and helpless near the goal. A reporter reported the event with a sketch depicting positions of players near the goal at that instant. The sketch was like the one shown below.<P><DIV ALIGN="CENTER"><IMG WIDTH="732" HEIGHT="303" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2719a.jpg ALT="\epsfbox{p2719.eps}"> <tex2html_verbatim_mark></DIV><P>In the sketch numbers identify players of either team. The character <SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark> indicates positions of attackers i.e., players of Team A. Around each defender i.e., a player of team B, there is a circle. The defender is positioned at the center of the circle. The circle or the portion of it lying on the playground demarcates the playground under the control of the defender. The radius of a circle is estimated on the basis of skill and reputation of the defender. A defender does not allow the ball to pass through the playground under his control. The defender No. 1 is the goalkeeper. The sketch illustrates the fact that player No. 11 of Team A initiated the pass and player No. 8 &amp; 10 were in positions to score a goal.<P><BR>A software firm is engaged currently in upgrading its existing software that is being used by TV commentators of soccer matches. After reading the report mentioned above the management of the firm decides to include a tool that will enable commentators to have a sketch like the one made by the reporter with a click of the mouse. Commentators can then illustrate different possibilities of the game at a given critical instant.<P>Assume that the project has been assigned to a team of software professionals to which you belong. You are required to write a program that identifies players of the attacking team who are in positions to score a goal.<P>It is assumed that the goal, if scored at all, is scored simply through a series of quick direct passes, originating from a specified player of the attacking team, to players of the same team without giving any opportunity to defenders to touch the ball. It is assumed further that positions of players of both the teams near the goalpost are known and the playground under the control of each defender is specified.<P><P><BR>In order to represent an instant of the game near a goal consider a two dimensional coordinate system with the goal line as the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-axis. The <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-axis is the line passing through the center of the playground (or the middle point of the straight line joining the feet of the two goal posts) and perpendicular to the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-axis. A player on the playground is represented by a point <SPAN CLASS="MATH">(<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2719a.jpg ALT="$ \alpha$">,<IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2719a.jpg ALT="$ \beta$">)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2719a.jpg ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> is nonnegative. A circle with nonzero radius or the portion of it lying on the playground represents the ground under the control of a defender. The defender is positioned at the center of the circular ground that he controls. The radius of the circle may be different for different players according to his skill and reputation. The position of a player of the attacking team is at the center of a circle with radius zero. Assume that the goal is of length 6m.<P><P><BR>You may need certain basic results from Coordinate Geometry for your computation. A list of results is given below. The list is neither exclusive nor exhaustive. You may or may not use any of these results:<P><OL><LI>The distance between two points <SPAN CLASS="MATH">(<I>h</I><SUB>1</SUB>, <I>k</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>h</I><SUB>2</SUB>, <I>k</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> is equal to <SPAN CLASS="MATH"><IMG WIDTH="205" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2719a.jpg ALT="$ \sqrt{{[(h_{1}-h_{2})^{2} + (k_{1}-k_{2})^{2}]}}$"></SPAN> <tex2html_verbatim_mark>. </LI><LI>The equation of the straight line passing through points <SPAN CLASS="MATH">(<I>h</I><SUB>1</SUB>, <I>k</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>h</I><SUB>2</SUB>, <I>k</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH">(<I>y</I> - <I>k</I><SUB>1</SUB>) = <I>m</I>(<I>x</I> - <I>h</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>m</I> = (<I>k</I><SUB>2</SUB> - <I>k</I><SUB>1</SUB>)/(<I>h</I><SUB>2</SUB> - <I>h</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark>. </LI><LI>The equation of the straight line passing through <SPAN CLASS="MATH">(<I>h</I>, <I>k</I>)</SPAN> <tex2html_verbatim_mark> and perpendicular to <SPAN CLASS="MATH"><I>y</I> = <I>mx</I> + <I>c</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH">(<I>y</I> - <I>k</I>) = <I>m'</I>(<I>x</I> - <I>h</I>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>m'</I> = - 1/<I>m</I></SPAN> <tex2html_verbatim_mark>. </LI><LI>The length of perpendicular from <SPAN CLASS="MATH">(<I>h</I>, <I>k</I>)</SPAN> <tex2html_verbatim_mark> on the straight line <SPAN CLASS="MATH"><I>y</I> = <I>mx</I> + <I>c</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH">|(<I>k</I> - <I>mh</I> - <I>c</I>)|/<IMG WIDTH="87" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2719a.jpg ALT="$ \sqrt{{(1+m^{2})}}$"></SPAN> <tex2html_verbatim_mark>. </LI><LI>The equation of a circle with center <SPAN CLASS="MATH">(<I>h</I>, <I>k</I>)</SPAN> <tex2html_verbatim_mark> and radius <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH">(<I>x</I> - <I>h</I>)<SUP>2</SUP> + (<I>y</I> - <I>k</I>)<SUP>2</SUP> = <I>r</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>. </LI><LI>The straight line <SPAN CLASS="MATH">(<I>y</I> - <I>k</I>) = <I>m</I>(<I>x</I> - <I>h</I>) + <I>c</I></SPAN> <tex2html_verbatim_mark> is a tangent to the circle <SPAN CLASS="MATH">(<I>x</I> - <I>h</I>)<SUP>2</SUP> + (<I>y</I> - <I>k</I>)<SUP>2</SUP> = <I>r</I></SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>c</I><SUP>2</SUP> = <I>r</I><SUP>2</SUP>(1 + <I>m</I><SUP>2</SUP>)</SPAN> <tex2html_verbatim_mark>. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case, the first line contains two integers, the test case number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and the player number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> of the attacking team who initiates the passes leading to a possible goal. Each of the following lines contains input data related to a player near the goal post. The data consist of an integer <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and three real numbers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. The integer <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> is the player number, the coordinate <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> <tex2html_verbatim_mark> is of the position of the player and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is the radius of the circular playground that the player controls. Recall that <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is equal to <TT>0</TT> if the player is an attacker.<P><P><BR>The entire input set terminates with an input `<TT>0 0</TT>' for <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. The input is illustrated in sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case the first output line gives the test case number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and the number of possibilities <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> of a goal. If there is no possibility of a goal <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> is equal to 0.<P>For each possibility print in one line, a sequence of player number that begins with the player who initiates the pass and ends with the player who scores the goal. A player <SPAN CLASS="MATH"><I>J</I></SPAN> <tex2html_verbatim_mark> appears next to a player <SPAN CLASS="MATH"><I>I</I></SPAN> <tex2html_verbatim_mark> in the sequence if <SPAN CLASS="MATH"><I>J</I></SPAN> <tex2html_verbatim_mark> receives a pass from <SPAN CLASS="MATH"><I>I</I></SPAN> <tex2html_verbatim_mark>.<P>The output is illustrated in sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 8                                                         
8 20 -20 0                                                  
10 10 -10 0                                                 
11 20 0 0                                                   
9 11 0 0                                                    
1 0 1 2                                                      
2 5 -5 2                                                     
3 5 -1 2                                                     
2 6                                                          
8 20 -20 0                                                   
10 10 -10 0                                                  
11 20 0 0                                                    
6 10 10 0                                                    
9 11 0 0                                                     
1 0 0 2                                                      
2 5 -5 2                                                     
6 10 0 1                                                     
3 5 -1 2                                                     
5 20 -10 1                                                   
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 0 
2 3 
6  
6 8 10 11  
6 11
</PRE><P>
______________________________________________________
2720||||||false||||||
<P>Hrip Van Winkle is a descendent of Rip Van Winkle about whom the late Diedrich Knickerbocker, an old gentleman of New York, wrote a famous tale long ago. Like his ancestor, Hrip Van Winkle is a simple good-natured lazy man and a daydreamer. However unlike his ancestor he lives in the modern society and is a computer literate. Often he dreams getting rich miraculously.<P><P><BR>In one of his dreams he finds himself wandering in a wonderland. He meets a kindhearted angel who likes him for his simplicity and good nature. The angel brings him near to a huge funny looking magical house. The outer boundary of the house as well as the inner boundary of the floor or the roof of every room in the house forms an equilateral triangle. The rooms are of the same size and are numbered serially, row wise. The angel can increase or decrease the number as well as the size of rooms magically. With <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> rows of rooms, the total number of rooms in the house is <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> being a positive integer. The row wise numbering of rooms is illustrated in Fig. 1 below.<P><DIV ALIGN="CENTER"><IMG WIDTH="546" HEIGHT="215" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2720a.jpg ALT="\epsfbox{p2720a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig. 1: Row wise numbering of rooms with 4 rows of rooms</DIV><P>There are four types rooms in the house:<P><OL><LI>Entry room: Entry to the house is possible through Room No. 1, the only room in the first row. The room has only one adjacent room. </LI><LI>Exit rooms: Exit from the house is possible through the first or the last room in the last row, e.g., Room 10 or 16 in Fig. 1. Like the entry room these two rooms have one adjacent room. </LI><LI>Side rooms: Rooms having no adjacent room on the side facing the outer boundary of the house. These rooms have two adjacent rooms one on each of the other two sides, e.g., Rooms 2, 4, 5, 9, 12 &amp; 14 in Fig. 1. </LI><LI>Inner rooms: Rooms having three adjacent rooms, one on each of the three sides e.g., Rooms 3, 6, 7,8, 11, 13, &amp; 15 in Fig. 1. </LI></OL><P>Each room has two or three doors. All entry/exit rooms as well as inner rooms have three doors while each side room has two doors. The doors, when present, are located at the middle of a side. In side rooms there is no door on the side facing the outer boundary of the house.<DIV ALIGN="CENTER"><IMG WIDTH="762" HEIGHT="166" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2720a.jpg ALT="\epsfbox{p2720b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig. 2: Positions of doors in a room (an arrow shows the location of a door)</DIV><P>At the center of each room there lies an open magical box. The box contains either a certain number of gold coins or a huge magical stone. The gold coins can be taken out from the box but the magical stone cannot be removed. The magical stone, if present in the box, changes the characteristic of coins brought to the room; gold coins are converted to iron coins and iron coins are converted to gold coins.<P>After giving details of the content of the magical box in each room the angel tells Hrip that he is pleased with him for his simplicity and good nature. If Hrip wishes to become a wealthy man then he can help him. He will let Hrip visit the magical house and collect as many coins as he can. However Hrip should follow the following conditions:<P><OL><LI>Entry/exit should be through entry/exit rooms, </LI><LI>A room should not be visited more than once, </LI><LI>All gold coins, if present, should be collected from the magical box, </LI><LI>All coins collected en route should be carried in person. </LI></OL><P>Hrip feels happy. Being a computer literate but a lazy man he ponders about the offer in his own way and requests the angel to allow him to take the help of a friend and a computer. His idea is to request a friend to write a program for him so that he can run the program on a computer and find the best possible route for him to get the maximum possible number of gold coins under the given conditions.<P>The angel agrees to the request but says that he will magically change the number of rooms in the house as well as the contents of the box in the rooms and let him know these just before he runs the program. He imposes one additional condition, viz., the exit from the house should be through a specified exit room. Would you like to be a friend of a simple good-natured man like Hrip and write a dream program for him?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases. For each test case the first input line gives the case number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, the total number of rows of rooms <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and the room number of the exit room.<P>The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines give contents of magical boxes in rooms arranged serially. The <SPAN CLASS="MATH"><I>k</I><SUP>th</SUP></SPAN> <tex2html_verbatim_mark> line gives contents of boxes in the <SPAN CLASS="MATH"><I>k</I><SUP>th</SUP></SPAN> <tex2html_verbatim_mark> row of rooms. The content of a box is represented by an integer. It is zero if the box contains the magical stone; otherwise it indicates the number of gold coins in the box.<P><P><BR>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case first print in one line, the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, the number of possible routes <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and the maximum number of gold coins <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> that can be collected.<P>In each of the next <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines print a route for him to collect the maximum number of gold coins from the magical house. The route consists of a sequence of room numbers of the rooms he visits starting from the entry room and ending with the specified exit room.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 3 5                                                            
1                                                                
2 0 1                                                            
1 0 1 0 0                                                        
2 4 10                                                            
1                                                                  
2 0 3                                                              
1 5 4 0 0                                                          
0 0 0 3 5 2 0                                                      
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 2 
1 3 2 6 5  
1 3 4 8 7 6 5  
2 1 23  
1 3 4 8 9 15 14 13 7 6 5 11 10

______________________________________________________
2721||||||false||||||
<P>
The City Council of New Altonville plans to build a system of bridges connecting all of its
downtown buildings together so people can walk from one building to another without going outside.
You must write a program to help determine an optimal bridge configuration.

<P>
New Altonville is laid out as a grid of squares. Each building occupies a connected set
of one or more squares. Two
occupied squares whose corners touch are considered to be a single building and
do not need a bridge. Bridges may
be built only on the grid lines that form the edges of the squares.
Each bridge must be built in a straight line and
must connect exactly two buildings.

<P>
For a given set of buildings, you must find the minimum number of bridges needed to
connect all the buildings. If
this is impossible, find a solution that minimizes the number of disconnected groups
of buildings. Among possible
solutions with the same number of bridges, choose the one that minimizes the
sum of the lengths of the bridges,
measured in multiples of the grid size. Two bridges may cross, but in this
case they are considered to be on separate
levels and do not provide a connection from one bridge to the other.

<P>
The figure below illustrates four possible city configurations. City 1 consists
of five buildings that can be connected
by four bridges with a total length of 4. In City 2, no bridges are possible,
since no buildings share a common grid
line. In City 3, no bridges are needed because there is only one building.
In City 4, the best solution uses a single
bridge of length 1 to connect two buildings, leaving two disconnected groups
(one containing two buildings and one containing a single building).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2721.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2721.gif
 ALT="\epsfbox{p2721.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input data set describes several rectangular cities. Each city description begins
with a line containing two
integers <SPAN CLASS="MATH"><I>r</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN>, representing the size of the city on the north-south and
east-west axes measured in grid lengths
(<!-- MATH
 $1 \le r \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2721.gif
 ALT="$ \le$"><I>r</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2721.gif
 ALT="$ \le$">100</SPAN> and <!-- MATH
 $1 \le c \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2721.gif
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2721.gif
 ALT="$ \le$">100</SPAN>). These numbers are followed by exactly <SPAN CLASS="MATH"><I>r</I></SPAN> lines,
each consisting of <SPAN CLASS="MATH"><I>c</I></SPAN> hash (`<TT>#</TT>') and dot
(`<TT>.</TT>') characters. Each character corresponds to one square of the grid.
A hash character corresponds to a square that
is occupied by a building, and a dot character corresponds to a square that
is not occupied by a building.

<P>
The input data for the last city will be followed by a line containing two zeros.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each city description, print two or three lines of output as shown below.
The first line consists of the city
number. If the city has fewer than two buildings, the second line is
the sentence `<TT>No bridges are needed.</TT>'. If the city
has two or more buildings but none of them can be connected by bridges,
the second line is the sentence `<TT>No
bridges are possible.</TT>'. Otherwise, the second line is `<TT><SPAN CLASS="MATH"><I>N</I></SPAN> bridges of total
length <SPAN CLASS="MATH"><I>L</I></SPAN></TT>' where <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of bridges
and <SPAN CLASS="MATH"><I>L</I></SPAN> is the sum of the lengths of the bridges of the best solution.
(If <SPAN CLASS="MATH"><I>N</I></SPAN> is 1, use the word `<TT>bridge</TT>' rather than
`<TT>bridges.</TT>') If the solution leaves two or more disconnected groups of buildings,
print a third line containing the number of disconnected groups.

<P>
Print a blank line between cases. Use the output format shown in the example.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 5
#...#
..#..
#...#
3 5
##...
.....
....#
3 5
#.###
#.#.#
###.#
3 5
#.#..
.....
....#
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
City 1
4 bridges of total length 4

City 2
No bridges are possible.
2 disconnected groups

City 3
No bridges are needed.

City 4
1 bridge of total length 1
2 disconnected groups
</PRE>

<P>


<P>

______________________________________________________
2722||||||false||||||
<P>
Hollywood's newest theater, the Atheneum of Culture and Movies, has a huge
computer-operated marquee
composed of thousands of light bulbs. Each row of bulbs is operated by a set
of switches that are electronically
controlled by a computer program. Unfortunately, the electrician installed
the wrong kind of switches, and tonight is
the ACM's opening night. You must write a program to make the switches perform correctly.

<P>
A row of the marquee contains <SPAN CLASS="MATH"><I>n</I></SPAN> light bulbs controlled by <SPAN CLASS="MATH"><I>n</I></SPAN> switches.
Bulbs and switches are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>,
left to right. Each bulb can either be ON or OFF. Each input case will contain
the initial state and the desired final
state for a single row of bulbs.

<P>
The original lighting plan was to have each switch control a single bulb.
However the electrician's error caused each
switch to control two or three consecutive bulbs, as shown in Figure 1.
The leftmost switch (<SPAN CLASS="MATH"><I>i</I> = 1</SPAN>) toggles the states
of the two leftmost bulbs (1 and 2); the rightmost switch (<SPAN CLASS="MATH"><I>i</I> = <I>n</I></SPAN>) toggles the
states of the two rightmost bulbs
(<SPAN CLASS="MATH"><I>n</I>­1</SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN>). Each remaining switch (<SPAN CLASS="MATH">1 &lt; <I>i</I> &lt; <I>n</I></SPAN>) toggles the states of the
three bulbs with indices <SPAN CLASS="MATH"><I>i</I>­1</SPAN>, <SPAN CLASS="MATH"><I>i</I></SPAN>, and <SPAN CLASS="MATH"><I>i</I> + 1</SPAN>.
(In the special case where there is a single bulb and a single switch, the
switch simply toggles the state of that bulb.)
Thus, if bulb 1 is ON and bulb 2 is OFF, flipping switch 1 will turn
bulb 1 OFF and bulb 2 ON. The minimum cost
of changing a row of bulbs from an initial configuration to a final
configuration is the minimum number of switches
that must be flipped to achieve the change.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2722.eps}$
 -->
<IMG
 WIDTH="599" HEIGHT="241" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2722.gif
 ALT="\epsfbox{p2722.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1

</DIV>

<P>
You can represent the state of a row of bulbs in binary, where 0 means the
bulb is OFF and 1 means the bulb is ON.
For instance, 01100 represents a row of five bulbs in which the second
and third bulbs are both ON. You could
transform this state into 10000 by flipping switches 1, 4, and 5, but it would
be less costly to simply flip switch 2.

<P>
You must write a program that determines the switches that must be flipped to
change a row of light bulbs from its
initial state to its desired final state with minimal cost. Some combinations
of initial and final states may not be
feasible. For compactness of representation, decimal integers are used instead of
binary for the bulb configurations.
Thus, 01100 and 10000 are represented by the decimal integers 12 and 16.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several test cases. Each test case consists of one line.
The line contains two non-negative
decimal integers, at least one of which is positive and each of which contains
at most 100 digits. The first integer
represents the initial state of the row of bulbs and the second integer
represents the final state of the row. The binary
equivalent of these integers represents the initial and final states of the bulbs,
where 1 means ON and 0 means OFF.

<P>
To avoid problems with leading zeros, assume that the first bulb in either
the initial or the final configuration (or
both) is ON. There are no leading or trailing blanks in the input lines,
no leading zeros in the two decimal integers,
and the initial and final states are separated by a single blank.

<P>
The last test case is followed by a line containing two zeros.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print a line containing the case number and a decimal
integer representing a minimum-cost set of
switches that need to be flipped to convert the row of bulbs from initial
state to final state. In the binary equivalent
of this integer, the rightmost (least significant) bit represents the
<SPAN CLASS="MATH"><I>n</I></SPAN>-th switch, 1 indicates that a switch has been
flipped, and 0 indicates that the switch has not been flipped.
If there is no solution, print `<TT>impossible</TT>'. If there is
more than one solution, print the one with the smallest decimal equivalent.

<P>
Print a blank line between cases. Use the output format shown in the example.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
12 16
1 1
3 0
30 5
7038312 7427958190
4253404109 657546225
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case Number 1: 8

Case Number 2: 0

Case Number 3: 1

Case Number 4: 10

Case Number 5: 2805591535

Case Number 6: impossible
</PRE>

<P>

______________________________________________________
2723||||||false||||||
<P>The latest research in reconfigurable multiprocessor chips focuses on the use of a single bus that winds around the chip. Processor components, which can be anywhere on the chip, are attached to <EM>connecting points</EM> on the bus so that they can communicate with each other.<P>Some research involves bus layout that uses recursively-defined ``SZ" curves, also known as ``S-shaped Peano curves." Two examples of these curves are shown below. Each curve is drawn on the unit square. The order-1 curve, shown on the left, approximates the letter ``S" and consists of line segments connecting the points (0,0), (1,0), (1,0.5), (0,0.5), (0,1), and (1,1) in order. Each horizontal line in an ``S" or ``Z" curve is twice as long as each vertical line. For the order-1 curve, the length of a vertical line, <SPAN CLASS="MATH"><I>len</I></SPAN>, is 0.5.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2723.gif ALT="\epsfbox{p2723.eps}"></DIV><P>The order-2 curve, shown on the right, contains 9 smaller copies of the order-1 curve (4 of which are reversed left to right to yield ``Z" curves). These copies are connected by line segments of length <SPAN CLASS="MATH"><I>len</I></SPAN>, shown as dotted lines. Since the width and height of the order-2 curve is <SPAN CLASS="MATH">8&#215;<I>len</I></SPAN>, and the curve is drawn on the unit square, <SPAN CLASS="MATH"><I>len</I> = 0.125</SPAN> for the order-2 curve.<P>The order-3 curve contains 9 smaller copies of the order-2 curve (with 4 reversed left to right), connected by line segments, as described for the order-2 curve. Higher order curves are drawn in a similar manner. The <EM>connecting points</EM> to which processor components attach are evenly spaced every <SPAN CLASS="MATH"><I>len</I></SPAN> units along the bus. The first connecting point is at (0,0) and the last is at (1,1). There are <SPAN CLASS="MATH">9<SUP>k</SUP></SPAN> connecting points along the order-<SPAN CLASS="MATH"><I>k</I></SPAN> curve, and the total bus length is <SPAN CLASS="MATH">(9<SUP>k</SUP> - 1)&#215;<I>len</I></SPAN> units.<P>You must write a program to determine the total distance that signals must travel between two processor components. Each component's coordinates are given as an <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN> pair, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2723.gif ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2723.gif ALT="$ \le$">1</SPAN> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2723.gif ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2723.gif ALT="$ \le$">1</SPAN>, where <SPAN CLASS="MATH"><I>x</I></SPAN> is the distance from the left side of the chip, and <SPAN CLASS="MATH"><I>y</I></SPAN> is the distance from the lower edge of the chip. Each component is attached to the closest connecting point by a straight line. If multiple connecting points are equidistant from a component, the one with the smallest <SPAN CLASS="MATH"><I>x</I></SPAN> coordinate and smallest <SPAN CLASS="MATH"><I>y</I></SPAN> coordinate is used. The total distance a signal must travel between two components is the sum of the length of the lines connecting the components to the bus, and the length of the bus between the two connecting points. For example, the distance between components located at (0.5, 0.25) and (1.0, 0.875) on a chip using the order-1 curve is 3.8750 units.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input contains several cases. For each case, the input consists of an integer that gives the order of the SZ curve used as the bus (no larger than 8), and then four real numbers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB></SPAN> that give the coordinates of the processor components to be connected. While each processor component should actually be in a unique location not on the bus, your program must correctly handle all possible locations.<P>The last case in the input is followed by a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each case, display the case number (starting with 1 for the first case) and the distance between the processor components when they are connected as described. Display the distance with 4 digits to the right of the decimal point.<P>Use the same format as that shown in the sample output shown below. Leave a blank line between the output lines for consecutive cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1 0.5 .25 1 .875
1 0 0 1 1
2 .3 .3 .7 .7
2 0 0 1 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1.  Distance is 3.8750

Case 2.  Distance is 4.0000

Case 3.  Distance is 8.1414

Case 4.  Distance is 10.0000
</PRE><P>
______________________________________________________
2724||||||false||||||
<P>
On January 1, 2002, twelve European countries abandoned their national currency for
a new currency, the euro. No
more francs, marks, lires, guldens, kroner,... only euros, all over the eurozone.
The same banknotes are used in all
countries. And the same coins? Well, not quite. Each country has limited freedom
to create its own euro coins:

<P>
<BLOCKQUOTE>
``Every euro coin carries a common European face. On the obverse, member states decorate the
coins with their own motif. No matter which motif is on the coin, it can be used anywhere in the 12
Member States. For example, a French citizen is able to buy a hot dog in Berlin using a euro coin
with the imprint of the King of Spain." (source: http://europa.eu.int/euro/html/entry.html)

</BLOCKQUOTE>

<P>
On January 1, 2002, the only euro coins available in Paris were French coins.
Soon the first non-French coins
appeared in Paris. Eventually, one may expect all types of coins to be evenly
distributed over the twelve
participating countries. (Actually this will not be true. All countries continue
minting and distributing coins with
their own motifs. So even in a stable situation, there should be an excess of
German coins in Berlin.) So, how long
will it be before the first Finnish or Irish coins are in circulation in the
south of Italy? How long will it be before
coins of each motif are available everywhere?

<P>
You must write a program to simulate the dissemination of euro coins throughout
Europe, using a highly simplified
model. Restrict your attention to a single euro denomination. Represent European
cities as points in a rectangular
grid. Each city may have up to 4 neighbors (one to the north, east, south and west).
Each city belongs to a country,
and a country is a rectangular part of the plane. The figure below shows a map
with 3 countries and 28 cities. The
graph of countries is connected, but countries may border holes that represent seas,
or non-euro countries such as
Switzerland or Denmark. Initially, each city has one million (1000000) coins in
its country's motif. Every day a
representative portion of coins, based on the city's beginning day balance,
is transported to each neighbor of the
city. A representative portion is defined as one coin for every full 1000 coins of a motif.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2724.eps}$
 -->
<IMG
 WIDTH="310" HEIGHT="280" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2724.gif
 ALT="\epsfbox{p2724.eps}">
</DIV>

<P>
A city is <EM>complete</EM> when at least one coin of each motif is present in that city.
A country is <EM>complete</EM> when all of its
cities are complete. Your program must determine the time required for each country
to become complete.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of several test cases. The first line of each test case
is the number of countries (<!-- MATH
 $1 \le c \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2724.gif
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2724.gif
 ALT="$ \le$">20</SPAN>). The
next <SPAN CLASS="MATH"><I>c</I></SPAN> lines describe each country. The country description has the format:
<!-- MATH
 $name\ x_l\ y_l\ x_h\ y_h$
 -->
<SPAN CLASS="MATH"><I>name</I>&nbsp;<I>x</I><SUB>l</SUB>&nbsp;<I>y</I><SUB>l</SUB>&nbsp;<I>x</I><SUB>h</SUB>&nbsp;<I>y</I><SUB>h</SUB></SPAN>, where <SPAN CLASS="MATH"><I>name</I></SPAN> is a single
word with at most 25 characters; <SPAN CLASS="MATH"><I>x</I><SUB>l</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>l</SUB></SPAN> are the lower left city coordinates of
that country (most southwestward city )
and <SPAN CLASS="MATH"><I>x</I><SUB>h</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>h</SUB></SPAN> are the upper right city coordinates of that country
(most northeastward city). <!-- MATH
 $1 \le x_l \le xh \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2724.gif
 ALT="$ \le$"><I>x</I><SUB>l</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2724.gif
 ALT="$ \le$"><I>xh</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2724.gif
 ALT="$ \le$">10</SPAN> and
<!-- MATH
 $1 \le y_l \le y_h \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2724.gif
 ALT="$ \le$"><I>y</I><SUB>l</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2724.gif
 ALT="$ \le$"><I>y</I><SUB>h</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2724.gif
 ALT="$ \le$">10</SPAN>.

<P>
The last case in the input is followed by a single zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print a line indicating the case number, followed by a line
for each country with the country
name and number of days for that country to become complete. Order the countries
by days to completion. If two
countries have identical days to completion, order them alphabetically by name.

<P>
Use the output format shown in the example.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
France  1 4 4 6
Spain          3 1 6 3
Portugal    1 1 2 2
1
Luxembourg  1 1 1 1
2
Netherlands 1 3 2 4
Belgium     1 1 2 2
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case Number 1
   Spain   382
   Portugal   416
   France   1325
Case Number 2
   Luxembourg   0
Case Number 3
   Belgium   2
   Netherlands   2
</PRE>

<P>

______________________________________________________
2725||||||false||||||
<P>Can you cover a round hole with a square cover? You can, as long as the square cover is big enough. It obviously will not be an exact fit, but it is still possible to cover the hole completely.<P>The Association of Cover Manufacturers (ACM) is a group of companies that produce covers for all kinds of holes - manholes, holes on streets, wells, ditches, cave entrances, holes in backyards dug by dogs to bury bones, to name only a few. ACM wants a program that determines whether a given cover can be used to completely cover a specified hole. At this time, they are interested only in covers and holes that are rectangular polygons (that is, polygons with interior angles of only 90 or 270 degrees). Moreover, both cover and hole are aligned along the same coordinate axes, and are not supposed to be rotated against each other - just translated relative to each other.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of several descriptions of covers and holes. The first line of each description contains two integers <SPAN CLASS="MATH"><I>h</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN> ( <SPAN CLASS="MATH">4<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2725img1.gif ALT="$ \le$"><I>h</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2725img1.gif ALT="$ \le$">50</SPAN> and <SPAN CLASS="MATH">4<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2725img1.gif ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2725img1.gif ALT="$ \le$">50</SPAN>), the number of points of the polygon describing the hole and the cover respectively. Each of the following <SPAN CLASS="MATH"><I>h</I></SPAN> lines contains two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>, which are the vertices of the hole's polygon in the order they would be visited in a trip around the polygon. The next <SPAN CLASS="MATH"><I>c</I></SPAN> lines give a corresponding description of the cover. Both polygons are rectangular, and the sides of the polygons are aligned with the coordinate axes. The polygons have positive area and do not intersect themselves.<P>The last description is followed by a line containing two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each problem description, print its number in the sequence of descriptions. If the hole can be completely covered by moving the cover (without rotating it), print `<TT>Yes</TT>' otherwise print `<TT>No</TT>'. Recall that the cover may extend beyond the boundaries of the hole as long as no part of the hole is uncovered. Follow the output format in the example given below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4 4
0 0
0 10
10 10
10 0
0 0
0 20
20 20
20 0
4 6
0 0
0 10
10 10
10 0
0 0
0 10
10 10
10 1
9 1
9 0
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Hole 1: Yes
Hole 2: No
</PRE><P>
______________________________________________________
2726||||||false||||||
<P>As the exchange of images over computer networks becomes more common, the problem of image compression takes on increasing importance. Image compression algorithms are used to represent images using a relatively small number of bits.<P>One image compression algorithm is based on an encoding called a ``Quad Tree." An image has a Quad Tree encoding if it is a square array of binary pixels (the value of each pixel is 0 or 1, called the ``color" of the pixel), and the number of pixels on the side of the square is a power of two.<P>If an image is homogeneous (all its pixels are of the same color), the Quad Tree encoding of the image is 1 followed by the color of the pixels. For example, the Quad Tree encoding of an image that contains pixels of color 1 only is 11, regardless of the size of the image.<P>If an image is heterogeneous (it contains pixels of both colors), the Quad Tree encoding of the image is 0 followed by the Quad Tree encodings of its upper-left quadrant, its upper-right quadrant, its lower-left quadrant, and its lower-right quadrant, in order.<P>The Quad Tree encoding of an image is a string of binary digits. For easier printing, a Quad Tree encoding can be converted to a Hex Quad Tree encoding by the following steps:<DL COMPACT><DT>a.</DT><DD>Prepend a 1 digit as a delimiter on the left of the Quad Tree encoding.</DD><DT>b.</DT><DD>Prepend 0 digits on the left as necessary until the number of digits is a multiple of four.</DD><DT>c.</DT><DD>Convert each sequence of four binary digits into a hexadecimal digit, using the digits 0 to 9 and capital A through F to represent binary patterns from 0000 to 1111.</DD></DL><P>For example, the Hex Quad Tree encoding of an image that contains pixels of color 1 only is 7, which corresponds to the binary string 0111.<P>You must write a program that reads the Hex Quad Tree encoding of two images, computes a new image that is the intersection of those two images, and prints its Hex Quad Tree encoding. Assume that both input images are square and contain the same number of pixels (although the lengths of their encodings may differ). If two images A and B have the same size and shape, their intersection (written as A &amp; B) also has the same size and shape. By definition, a pixel of A &amp; B is equal to 1 if and only if the corresponding pixels of image A and image B are both equal to 1.<P>The following figure illustrates two input images and their intersection, together with the Hex Quad Tree encodings of each image. In the illustration, shaded squares represent pixels of color 1.<P><DIV ALIGN="CENTER"><IMG WIDTH="557" HEIGHT="171" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2726.gif ALT="\epsfbox{p2726.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input data set contains a sequence of test cases, each of which is represented by two lines of input. In each test case, the first input line contains the Hex Quad Tree encoding of the first image and the second line contains the Hex Quad Tree encoding of the second image. For each input image, the number of hexadecimal digits in its Hex Quad Tree encoding will not exceed 100.<P>The last test case is followed by two input lines, each containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, print `<TT>Image</TT>' followed by its sequence number. On the next line, print the Hex Quad Tree encoding of the intersection of the two images for that test case. Separate the output for consecutive test cases with a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2FA
2BB
2FB
2EF
7
2FA
0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Image 1:
2BA

Image 2:
2EB

Image 3:
2FA
</PRE><P>
______________________________________________________
2727||||||false||||||
<P>An <EM>object module</EM> is produced by a compiler as a result of processing a source program. A <EM>linking loader</EM> (or just a <EM>linker</EM>) is used to combine the multiple object modules used when a program contains several separately compiled modules. Two of its primary tasks are to relocate the code and data in each object module (since the compiler does not know where in memory a module will be placed), and to resolve symbolic references from one module to another. For example, a main program may reference a square root function called <TT>sqrt</TT>, and that function may be defined in a separate source module. The linker will then minimally have to assign addresses to the code and data in each module, and put the address of the <TT>sqrt</TT> function in the appropriate location(s) in the main module's code.<P>An object module contains (in order) zero or more <EM>external symbol definitions</EM>, zero or more <EM>external symbol references</EM>, zero or more bytes of code and data (that may include references to the values of external symbols), and an end of module marker. In this problem, an object module is represented as a sequence of text lines, each beginning with a single uppercase character that characterizes the remainder of the line. The format of each of these lines is as follows. Whitespace (one or more blanks and/or tab characters) will appear between the fields in these lines. Additional whitespace may follow the last field in each line.<P><UL><LI>A line of the form `<TT>D <SPAN CLASS="MATH"><I>symbol</I></SPAN> <SPAN CLASS="MATH"><I>offset</I></SPAN></TT>' is an external symbol definition. It defines <SPAN CLASS="MATH"><I>symbol</I></SPAN> as having the address <SPAN CLASS="MATH"><I>offset</I></SPAN> bytes greater than the address where the first byte of code and data for the current object module is located by the linker. A <SPAN CLASS="MATH"><I>symbol</I></SPAN> is a string of no more than eight upper case alphabetic characters. The <SPAN CLASS="MATH"><I>offset</I></SPAN> is a hexadecimal number with no more than four digits (using only upper case alphabetic characters for the digits A through F). For example, in a module that is loaded starting at the address 100<SPAN CLASS="MATH"><SUB>16</SUB></SPAN>, the line `<TT>D START 5C</TT>' indicates that the symbol <TT>START</TT> is defined as being associated with the address 15C<SPAN CLASS="MATH"><SUB>16</SUB></SPAN>. The number of ``D" lines in a test case is at most 100.<P></LI><LI>A line of the form `<TT>E <SPAN CLASS="MATH"><I>symbol</I></SPAN></TT>' is an external symbol reference, and indicates that the value of <SPAN CLASS="MATH"><I>symbol</I></SPAN> (presumably defined in another object module) may be referenced as part of the code and data for the current module. For example, the line `<TT>E START</TT>' indicates that the value of the symbol <TT>START</TT> (that is, the address defined for it) may be used as part of the code and data for the module. Each of the ``E" lines for each module is numbered sequentially, starting with 0, so they can be referenced in the ``C" lines.<P></LI><LI>A line of the form `<TT>C <SPAN CLASS="MATH"><I>n</I>&nbsp;<I>byte</I><SUB>1</SUB>&nbsp;<I>byte</I><SUB>2</SUB>&nbsp;...<I>byte</I><SUB>n</SUB></SPAN></TT>' specifies the first or next <SPAN CLASS="MATH"><I>n</I></SPAN> bytes of code and data for the current module. The value <SPAN CLASS="MATH"><I>n</I></SPAN> is specified as a one or two digit hexadecimal number, and will be no larger than 10 hexadecimal. Each <SPAN CLASS="MATH"><I>byte</I></SPAN> is either a one or two digit hexadecimal number, or a dollar sign. The first byte following a dollar sign (always on the same line) gives the 0-origin index of an external symbol reference for this module, and identifies the symbol which is to have its 16-bit value inserted at the current point in the linked program (that is, in the location indicated by the dollar sign and the following byte). The high-order byte is placed in the location indicated by the dollar sign. The values specified for the other bytes (those not following a dollar sign) are loaded into sequential memory locations, starting with the first (lowest) unused memory location. For example, the line `<TT>C 4 25 $ 0 37</TT>' would cause the values 25<SPAN CLASS="MATH"><SUB>16</SUB></SPAN> 01<SPAN CLASS="MATH"><SUB>16</SUB></SPAN> 5C<SPAN CLASS="MATH"><SUB>16</SUB></SPAN> and 37<SPAN CLASS="MATH"><SUB>16</SUB></SPAN> to be placed in the next four unused memory locations, assuming the first ``E" line for the current module specified a symbol defined as having the address 15C<SPAN CLASS="MATH"><SUB>16</SUB></SPAN>. If the 0-origin index of the external symbol reference is an undefined symbol, the 16-bit value inserted at the current point in the linked program is 0000<SPAN CLASS="MATH"><SUB>16</SUB></SPAN>.<P></LI><LI>A line of the form `<TT>Z</TT>' marks the end of an object module. </LI></UL><P>You may assume that no address requires more than four hexadecimal digits. Lines are always given in the order shown above. There are no syntax errors in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>This problem has multiple input cases. The input for each case is one or more object modules, in sequence, that are to be linked, followed by a line beginning with a dollar sign. The first address at which code is to be loaded in each case is 100<SPAN CLASS="MATH"><SUB>16</SUB></SPAN>.<P>The last case will be followed by a line containing only a dollar sign.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each case, print the case number (starting with 1), the 16-bit checksum of the loaded bytes (as described below), and the load map showing the address of each externally defined or referenced symbol, in ascending order of symbol name. For undefined symbols, print the value as four question marks, but use zero as the symbol's value when it is referenced in ``C" lines. If a symbol is defined more than once, print `<TT>M</TT>' following the address shown in the load map, and use the value from the first definition encountered in any object module to satisfy external references. Format the output exactly as shown in the samples.<P>The 16-bit checksum is computed by first setting it to zero. Then, for each byte assigned to a memory location by the loader, in increasing address order, circularly left shift the checksum by one bit, and add the byte from the memory location, discarding any carry out of the low-order 16 bits.<P>Print a blank line between datasets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
D MAIN 0
D END 5
C 03 01 02 03
C 03 04 05 06
Z
$
D ENTRY 4
E SUBX
E SUBY
C 10 1 2 3 4 5 $ 0 6 7 8 9 A B C D E
C 8 10 20 30 40 50 60 70 80
C 8 90 A0 B0 C0 D0 E0 $ 1
C 5 $ 0 FF EE DD
Z
D SUBX 01
C 06 A B C D E F
Z
D SUBX 05
C 06 51 52 53 54 55 56
Z
$
$
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1: checksum = 0078
 SYMBOL   ADDR
--------  ----
END       0105
MAIN      0100

Case 2: checksum = 548C
 SYMBOL   ADDR
--------  ----
ENTRY     0104
SUBX      0126 M
SUBY      ????
</PRE><P>
______________________________________________________
2728||||||false||||||
<P>Secret agent Maria was sent to Algorithms City to carry out an especially dangerous mission. After several thrilling events we find her in the first station of Algorithms City Metro, examining the time table. The Algorithms City Metro consists of a single line with trains running both ways, so its time table is not complicated.<P>Maria has an appointment with a local spy at the last station of Algorithms City Metro. Maria knows that a powerful organization is after her. She also knows that while waiting at a station, she is at great risk of being caught. To hide in a running train is much safer, so she decides to stay in running trains as much as possible, even if this means traveling backward and forward. Maria needs to know a schedule with minimal waiting time at the stations that gets her to the last station in time for her appointment. You must write a program that finds the total waiting time in a best schedule for Maria.<P>The Algorithms City Metro system has <SPAN CLASS="MATH"><I>N</I></SPAN> stations, consecutively numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>. Trains move in both directions: from the first station to the last station and from the last station back to the first station. The time required for a train to travel between two consecutive stations is fixed since all trains move at the same speed. Trains make a very short stop at each station, which you can ignore for simplicity. Since she is a very fast agent, Maria can always change trains at a station even if the trains involved stop in that station at the same time.<P><DIV ALIGN="CENTER"><IMG WIDTH="635" HEIGHT="160" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="\epsfbox{p2728.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file contains several test cases. Each test case consists of seven lines with information as follows.<DL><DT><STRONG>Line 1.</STRONG></DT><DD>The integer <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$">50</SPAN>), which is the number of stations.</DD><DT><STRONG>Line 2.</STRONG></DT><DD>The integer <SPAN CLASS="MATH"><I>T</I></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$">200</SPAN>), which is the time of the appointment.</DD><DT><STRONG>Line 3.</STRONG></DT><DD><SPAN CLASS="MATH"><I>N</I> - 1</SPAN> integers: <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>,..., <I>t</I><SUB>N - 1</SUB></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif $args["Xmax"]=1*$i; $args["Xmax"]=1*$i; $args["Xmax"]=1*$i; $args["Xmax"]=1*$i; $args["Xmax"]=1*$i; $args["Xmax"]=1*$i; $args["Xmax"]=1*$i; ALT="$ \le$"><I>t</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$">70</SPAN>), representing the travel times for the trains between two consecutive stations: <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> represents the travel time between the first two stations, <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> the time between the second and the third station, and so on.</DD><DT><STRONG>Line 4.</STRONG></DT><DD>The integer <SPAN CLASS="MATH"><I>M</I>1</SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$"><I>M</I>1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$">50</SPAN>), representing the number of trains departing from the first station.</DD><DT><STRONG>Line 5.</STRONG></DT><DD><SPAN CLASS="MATH"><I>M</I>1</SPAN> integers: <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>, <I>d</I><SUB>2</SUB>,..., <I>d</I><SUB>M1</SUB></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$"><I>d</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$">250</SPAN> and <!-- MATH
 $d_i < d_{i+1}$
 --><SPAN CLASS="MATH"><I>d</I><SUB>i</SUB> &lt; <I>d</I><SUB>i + 1</SUB></SPAN>), representing the times at which trains depart from the first station.</DD><DT><STRONG>Line 6.</STRONG></DT><DD>The integer <SPAN CLASS="MATH"><I>M</I>2</SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$"><I>M</I>2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$">50</SPAN>), representing the number of trains departing from the <SPAN CLASS="MATH"><I>N</I></SPAN>-th station.</DD><DT><STRONG>Line 7.</STRONG></DT><DD><SPAN CLASS="MATH"><I>M</I>2</SPAN> integers: <SPAN CLASS="MATH"><I>e</I><SUB>1</SUB>, <I>e</I><SUB>2</SUB>,..., <I>e</I><SUB>M2</SUB></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$"><I>e</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2728.gif ALT="$ \le$">250</SPAN> and <!-- MATH
 $e_i < e_{i+1}$
 --><SPAN CLASS="MATH"><I>e</I><SUB>i</SUB> &lt; <I>e</I><SUB>i + 1</SUB></SPAN>) representing the times at which trains depart from the <SPAN CLASS="MATH"><I>N</I></SPAN>-th station.</DD></DL><P>The last case is followed by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, print a line containing the case number (starting with 1) and an integer representing the total waiting time in the stations for a best schedule, or the word `<TT>impossible</TT>' in case Maria is unable to make the appointment. Use the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
55
5 10 15
4
0 5 10 20
4
0 5 10 15
4
18
1 2 3
5
0 3 6 10 12
6
0 3 5 7 12 15
2
30
20
1
20
7
1 3 5 7 11 13 17
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case Number 1: 5
Case Number 2: 0
Case Number 3: impossible
</PRE><P>
______________________________________________________
2729||||||false||||||
<P>
It is common knowledge that the Solar System consists of the sun at its center and
nine planets moving around the
sun on elliptical orbits. Less well known is the fact that the planets' orbits are
not at all arbitrary. In fact, the orbits
obey three laws discovered by Johannes Kepler. These laws, also called
``The Laws of Planetary Motion," are the following.

<OL>
<LI>The orbits of the planets are ellipses, with the sun at one focus of the ellipse.
(Recall that the two foci of an
ellipse are such that the sum of the distances to them is the same for all points on the ellipse.)
</LI>
<LI>The line joining a planet to the sun sweeps over equal areas during equal time
intervals as the planet travels around the ellipse.
</LI>
<LI>The ratio of the squares of the revolutionary periods of two planets is equal
to the ratio of the cubes of their semi major axes.
</LI>
</OL>

<P>
By Kepler's first law, the path of the planet shown in the
figure on the left is an ellipse. According to Kepler's second
law, if the planet goes from M to N in time <SPAN CLASS="MATH"><I>t</I><SUB>A</SUB></SPAN> and from P to Q
in time <SPAN CLASS="MATH"><I>t</I><SUB>B</SUB></SPAN> and if <SPAN CLASS="MATH"><I>t</I><SUB>A</SUB> = <I>t</I><SUB>B</SUB></SPAN>, then area A equals area B. Kepler's
third law is illustrated next.

<P>

<IMG
 WIDTH="377" HEIGHT="221" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2729a.gif
 ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=3.25in
\epsfbox{p2729a.eps}
\end{center}}$"><IMG
 WIDTH="377" HEIGHT="309" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2729a.gif
 ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=3.25in
\epsfbox{p2729b.eps}
\end{center}}$">
<P>
Consider an ellipse whose center is at the origin
0 and that is symmetric with respect to the two
coordinate axes. The <SPAN CLASS="MATH"><I>x</I></SPAN>-axis intersects the
ellipse at points A and B and the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis
intersects the ellipse at points C and D. Set
<!-- MATH
 $a = {1 \over 2}|AB|$
 -->
<SPAN CLASS="MATH"><I>a</I> = <IMG
 WIDTH="15" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2729a.gif
 ALT="$ {1 \over 2}$">| <I>AB</I>|</SPAN> and <!-- MATH
 $b = {1 \over 2}|CD|$
 -->
<SPAN CLASS="MATH"><I>b</I> = <IMG
 WIDTH="15" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2729a.gif
 ALT="$ {1 \over 2}$">| <I>CD</I>|</SPAN>. Then the ellipse is
defined by the equation <!-- MATH
 ${x^2 \over a^2} + {y^2 \over b^2} = 1$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="43" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2729a.gif
 ALT="$ {x^2 \over a^2}$"> + <IMG
 WIDTH="22" HEIGHT="45" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2729a.gif
 ALT="$ {y^2 \over b^2}$"> = 1</SPAN>. If <SPAN CLASS="MATH"><I>a</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2729a.gif
 ALT="$ \ge$"><I>b</I></SPAN>,
AB is called the major axis, CD the minor
axis, and OA (with length <SPAN CLASS="MATH"><I>a</I></SPAN>) is called the semi
major axis. When two planets are revolving
around the sun in times <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> respectively,
and the semi major axes of their orbits have
lengths <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN>, then according to Kepler's
third law <!-- MATH
 $({t_1 \over t_2})^2 = ({a_1 \over a_2})^3$
 -->
<SPAN CLASS="MATH">(<IMG
 WIDTH="20" HEIGHT="37" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2729a.gif
 ALT="$ {t_1 \over t_2}$">)<SUP>2</SUP> = (<IMG
 WIDTH="22" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2729a.gif
 ALT="$ {a_1 \over a_2}$">)<SUP>3</SUP></SPAN>.

<P>

<P>
<BR>
In this problem, you are to compute the location of a planet using Kepler's laws.
You are given the description of
one planet in the Solar System (i.e., the length of its semi-major axis, semi-minor axis,
and its revolution time) and
the description of a second planet (its semi-major axis and semi-minor axis).
Assume that the second planet's orbit
is aligned with the coordinate axes (as in the above figure), that it moves
in counter clockwise direction, and that the
sun is located at the focal point with non-negative <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate.
You are to compute the position of the second
planet a specified amount of time after it starts at the point with
maximal <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate on its orbit (point B in the
above figure).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several descriptions of pairs of planets. Each line contains
six integers <!-- MATH
 $a_1, b_1, t_1, a_2, b_2, t$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>b</I><SUB>1</SUB>, <I>t</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>b</I><SUB>2</SUB>, <I>t</I></SPAN>. The
first five integers are positive, and describe two planets as follows:

<P>

<P>
<BR>
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> = semi major axis of the first planet's orbit

<P>
<SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> = semi minor axis of the first planet's orbit

<P>
<SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> = period of revolution of the first planet (in days)

<P>
<SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> = semi major axis of the second planet's orbit

<P>
<SPAN CLASS="MATH"><I>b</I><SUB>2</SUB></SPAN> = semi minor axis of the second planet's orbit

<P>

<P>
<BR>
The non-negative integer <SPAN CLASS="MATH"><I>t</I></SPAN> is the time (in days) at which you have to
determine the position of the second planet,
assuming that the planet starts in position <SPAN CLASS="MATH">(<I>a</I><SUB>2</SUB>, 0)</SPAN>.

<P>
The last description is followed by a line containing six zeros.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each pair of planets described in the input, produce one line of output.
For each line, print the number of the test
case. Then print the <SPAN CLASS="MATH"><I>x</I></SPAN>- and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates of the position of the second
planet after <SPAN CLASS="MATH"><I>t</I></SPAN> days. These values must be
exact to three digits to the right of the decimal point. Follow the format of
the sample output provided below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
10 5 10 10 5 10
10 5 10 20 10 10
0 0 0 0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Solar System 1: 10.000 0.000
Solar System 2: -17.525 4.819
</PRE>

<P>

______________________________________________________
2730||||||false||||||
<P>Sindbad the Sailor sold 66 silver spoons to the Sultan of Samarkand. The selling was quite easy; but delivering was complicated. The items were transported over land, passing through several towns and villages. Each town and village demanded an entry toll. There were no tolls for leaving. The toll for entering a <EM>village</EM> was simply one item. The toll for entering a <EM>town</EM> was one piece per 20 items carried. For example, to enter a town carrying 70 items, you had to pay 4 items as toll. The towns and villages were situated strategically between rocks, swamps and rivers, so you could not avoid them.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2730a.gif ALT="\epsfbox{p2730a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: To reach Samarkand with 66 spoons, traveling through a town followed by two villages, you must start with 76 spoons.</DIV><P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2730a.gif ALT="\epsfbox{p2730b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2: The best route to reach X with 39 spoons, starting from A, is A <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2730a.gif ALT="$ \rightarrow$"></SPAN>b <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2730a.gif ALT="$ \rightarrow$"></SPAN>c <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2730a.gif ALT="$ \rightarrow$"></SPAN>X, shown with arrows in the figure on the left. The best route to reach X with 10 spoons is A <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2730a.gif ALT="$ \rightarrow$"></SPAN>D <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2730a.gif ALT="$ \rightarrow$"></SPAN>X, shown in the figure on the right. The figures display towns as squares and villages as circles.</DIV><P>Predicting the tolls charged in each village or town is quite simple, but finding the best route (the cheapest route) is a real challenge. The best route depends upon the number of items carried. For numbers up to 20, villages and towns charge the same. For large numbers of items, it makes sense to avoid towns and travel through more villages, as illustrated in Figure 2.<P>You must write a program to solve Sindbad's problem. Given the number of items to be delivered to a certain town or village and a road map, your program must determine the total number of items required at the beginning of the journey that uses a cheapest route.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of several test cases. Each test case consists of two parts: the roadmap followed by the delivery details.<P>The first line of the roadmap contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, which is the number of roads in the map (<SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2730a.gif ALT="$ \le$"><I>n</I></SPAN>). Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains exactly two letters representing the two endpoints of a road. A capital letter represents a town; a lower case letter represents a village. Roads can be traveled in either direction.<P>Following the roadmap is a single line for the delivery details. This line consists of three things: an integer <SPAN CLASS="MATH"><I>p</I></SPAN> (<!-- MATH
 $0 < p \le 1000$
 --> <SPAN CLASS="MATH">0 &lt; <I>p</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2730a.gif ALT="$ \le$">1000</SPAN>) for the number of items that must be delivered, a letter for the starting place, and a letter for the place of delivery. The roadmap is always such that the items can be delivered.<P>The last test case is followed by a line containing the number <TT>-1</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output consists of a single line for each test case. Each line displays the case number and the number of items required at the beginning of the journey. Follow the output format in the example given below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
a Z
19 a Z
5
A D
D X
A b
b c
c X
39 A X
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1: 20
Case 2: 44
</PRE><P>
______________________________________________________
2731||||||false||||||
In the supposedly uninhabited Wacmahara Desert, a tribe of unusual people has
been discovered. The Wacmians have only 2 fingers and a thumb on each hand,
and have invented their own numbering system. The digits they use and the
symbols they use for digits are quite unusual, but anthropologists have been able
to represent them as follows:

<UL>
<LI><code>%</code> represents 0
</LI>
<LI><code>)</code> represents 1
</LI>
<LI><code>~</code> represents 2
</LI>
<LI><code>@</code> represents 3
</LI>
<LI><code>?</code> represents 4
</LI>
<LI><code>\</code> represents 5
</LI>
<LI><code>$</code> represents <SPAN CLASS="MATH">-1</SPAN> (yes, they even have a negative digit)
</LI>
</UL>

As you may expect, their system is base 6 where each place value is 6 times the
value to its right, as in the following examples:

<UL>
<LI><code>)@% </code> is <!-- MATH
 $1*6^2+3*6+0 = 36+18+0 = 54$
 -->
<SPAN CLASS="MATH">1*6<SUP>2</SUP> + 3*6 + 0 = 36 + 18 + 0 = 54</SPAN>
</LI>
<LI><code>?$~~</code> is <!-- MATH
 $4*6^3+(-1)*6^2+2*6+2 = 864-36+12+2 = 842$
 -->
<SPAN CLASS="MATH">4*6<SUP>3</SUP> + (- 1)*6<SUP>2</SUP> + 2*6 + 2 = 864 - 36 + 12 + 2 = 842</SPAN>
</LI>
<LI><code>$~~ </code> is <!-- MATH
 $(-1)*6^2+2*6+2 = -36+12+2 = -22$
 -->
<SPAN CLASS="MATH">(- 1)*6<SUP>2</SUP> + 2*6 + 2 = - 36 + 12 + 2 = - 22</SPAN>
</LI>
</UL>

Your task is to take Wacmian numbers and represent them as standard base 10
numbers.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input consists of Wacmian numbers, one per line. Each number consists of a
sequence of 1 to 10 Wacmian digits. A single `<TT>#</TT>' on a line by itself indicates the
end of input.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output will be the corresponding decimal numbers, one per line.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
)@%
?$~~
$~~
%
#
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
54
842
-22
0
</PRE>


<P>

______________________________________________________
2732||||||false||||||
A keen photographer, I found my hard disk quickly filling up with snapshots and
videos. I decided to offload a lot of the files to CD. Each CD is in its own plastic
case, and the contents are clearly described on the front of the case. As the
number of CDs increased, I built myself a shelf on which the CDs stand vertically.

I need your help! I have written a title for each CD into a text file, but I need the
titles to appear vertically so that I can put them in the spine of the CD cases and
be able to read them easily from the shelf. I want you to write a program that will
output my titles vertically. I need lines between each title so that, when I print
them, I can easily cut along the lines.

I have worked out that I can fit 36 characters into the available space, so all
output titles must be 36 characters long, padded with spaces at the end where
necessary. If I accidentally make a title too long, only output the first 36
characters.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will be at most 50 titles, one to a line. Each title consists of 1 to 100 arbitrary
characters. A single `<TT>#</TT>' on a line by itself indicates the end of input.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output will be the same titles presented vertically, where the left to right order will
be the same as the order of the input. There will be a column of bar (`<code>|</code>')
characters at each end, and separating each title, and a row of minus (`<TT>-</TT>')
characters (1 per column) at the beginning and end.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
012345678901234567890123456789012345
David and Jane's wedding, March 2002, Alexandria
Bahamas Holiday August 2001
#
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
-------
|0|D|B|
|1|a|a|
|2|v|h|
|3|i|a|
|4|d|m|
|5| |a|
|6|a|s|
|7|n| |
|8|d|H|
|9| |o|
|0|J|l|
|1|a|i|
|2|n|d|
|3|e|a|
|4|'|y|
|5|s| |
|6| |A|
|7|w|u|
|8|e|g|
|9|d|u|
|0|d|s|
|1|i|t|
|2|n| |
|3|g|2|
|4|,|0|
|5| |0|
|6|M|1|
|7|a| |
|8|r| |
|9|c| |
|0|h| |
|1| | |
|2|2| |
|3|0| |
|4|0| |
|5|2| |
-------
</PRE>


<P>

______________________________________________________
2733||||||false||||||
Julia has decided to encrypt her notes so that nobody else could understand
them. The code is based on the so-called Caesar Cipher where each letter is
shifted a certain number of places left or right through the alphabet. In this
context, the alphabet is treated as being circular so that the first letter follows
after the last letter, and the last letter precedes the first letter.

Julia applies these ideas separately to uppercase letters, lower case letters, and
digits. For example, with a shift of 1, `<TT>A</TT>' becomes `<TT>B</TT>', `<TT>Z</TT>' becomes `<TT>A</TT>', `<TT>a</TT>' becomes
`<TT>b</TT>', `<TT>z</TT>' becomes `<TT>a</TT>', `<TT>0</TT>' becomes `<TT>1</TT>', `<TT>9</TT>' becomes `<TT>0</TT>'. Spaces, punctuation, and
any other symbols are not affected in this scheme.

Your task is to help Julia encrypt her notes.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Each line of input begins with a number representing the shift. The number will be
in the range <!-- MATH
 $-1,000,000,000$
 -->
<SPAN CLASS="MATH">-1, 000, 000, 000</SPAN> to <!-- MATH
 $1,000,000,000$
 -->
<SPAN CLASS="MATH">1, 000, 000, 000</SPAN>. The number is followed by a colon
(`<TT>:</TT>'). The rest of the line consists of a string of 1 to 200 arbitrary characters and
represents a fragment of the text to be encrypted. A single `<TT>#</TT>' on a line by itself
indicates the end of input.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output will be the corresponding encrypted text fragments, one per line.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
0:Clear text!
1:David and Jane's wedding, March 2002, Alexandria
-1:Bahamas Holiday August 2001
53:ACMZ, acmz, 0379!
26000000:ACMZ, acmz, 0379!
26000001:ACMZ, acmz, 0379!
#
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Clear text!
Ebwje boe Kbof't xfeejoh, Nbsdi 3113, Bmfyboesjb
Azgzlzr Gnkhczx Ztftrs 1990
BDNA, bdna, 3602!
ACMZ, acmz, 0379!
BDNA, bdna, 1480!
</PRE>


<P>

______________________________________________________
2734||||||false||||||
There are <SPAN CLASS="MATH"><I>n</I></SPAN> identical large cylindrical tanks for storing water.
The tanks are arranged in a circle on level ground. Each tank is
connected with its two neighbours by means of pipes situated at
its base. There is a valve between each adjacent pair of tanks
(tank <SPAN CLASS="MATH"><I>n</I></SPAN> is next to tank 1). All valves are initially closed. All
the outlets and the pipes are at the same level and are always
full of water, even if all the tanks are deemed to be ``empty''.

The volume in any tank is measured by the height of the surface of
the water above the level of the top of the outlets. If all valves
(or all valves but one) are opened so that water can flow between
the tanks, then the levels will eventually equalise. Conversely,
if all tanks are initially at the same level, no valves need be
opened to equalise the levels. Thus it may be necessary to only
open some of the valves to achieve this result.

For example, consider <SPAN CLASS="MATH"><I>n</I> = 4</SPAN> tanks each 5 metres high. Assume that
the water level in these tanks is at 4, 4, 3, and 3 meters
respectively. Their water level will equalise if we open the
valves between tanks #2 and #3 and between #4 and #1, as
suggested by the following diagram. Thus for this set we need to
open only two valves:

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2734.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2734.gif
 ALT="\epsfbox{p2734.eps}">
</DIV>
Given a set of initial heights, determine the minimum number of
valves to open so that the final water levels in all tanks is
equal.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of one or more scenarios, each scenario
consisting of two lines.

The first line contains a descriptive title, which is a string of
letters or spaces no more than 200 characters long, containing at
least 1 letter.

The second line starts with the number of basins <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(3 \le n \le
200)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2734.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2734.gif
 ALT="$ \le$">200)</SPAN>, a space, and then <SPAN CLASS="MATH"><I>n</I></SPAN> integers in the range 0 to 99,
separated by single spaces, representing the water levels in the
tanks.

The scenarios sequence is terminated by a single `<TT>#</TT>' character on
a line by itself.

<P>
<BR>

<B>Note:</B> The input data for this program may contain lines up to 600
characters long.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output one line for each input scenario. The line consists of the
first letter of each word in the descriptive title in upper case,
followed by a colon (`<TT>:</TT>'), a space, and then the minimum number of
valves that need to be open to achieve equal heights in all tanks.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
High four dude basins
4 4 4 3 3
The Australasian eight
8 2 1 1 2 2 1 1 6
#
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
HFDB: 2
TAE: 5
</PRE>


<P>

______________________________________________________
2735||||||false||||||
Painting tiles is hard work. John has convinced his two sons Raul and George to do a
painting job, by agreeing to pay one dollar per tile painted by each of them. Raul will
paint red tiles and George green tiles at the places indicated by their father.
However, they are still not convinced: how are they going to divide up the area to be
painted, what happens if both want to paint the same tile at the same time, what are
the rules, and, last, but not least, how much will they receive in the end?

To avoid arguments and to have some fun, John would like to show them a
simulation of the problem before the hard work begins. The simulation will start with
each son at opposite ends of a rectangular grid of width <SPAN CLASS="MATH"><I>N</I></SPAN> and height <SPAN CLASS="MATH"><I>M</I></SPAN> <!-- MATH
 $(N,M \ge 2)$
 -->
<SPAN CLASS="MATH">(<I>N</I>, <I>M</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2735img1.gif
 ALT="$ \ge$">2)</SPAN>,
Raul at (0,0) and George at <!-- MATH
 $(N-1, M-1)$
 -->
<SPAN CLASS="MATH">(<I>N</I> - 1, <I>M</I> - 1)</SPAN>. The two sons will begin by painting a spot in
their respective colours on their starting tiles. Next, Raul and George are each given
a series of individual instructions for moving to the next tile to paint. Each move can
be repeated one or more times and is defined by a pair of increments along the
horizontal x-axis and vertical y-axis, in this order; these increments can be positive,
negative, or zero.

For example, assume that Raul is on his initial tile (0,0) on a grid with <SPAN CLASS="MATH"><I>N</I> = 10</SPAN>, <SPAN CLASS="MATH"><I>M</I> = 5</SPAN>,
and receives the instructions to hop 2 times in the direction of (1,0) and then 3 times
in the direction of (2,1). He will begin by painting a red spot on the tile (0,0). Then,
according to these instructions, he will successively land on and paint red spots on
the following tiles: (1,0), (2,0), (4,1), (6,2), (8,3). The following diagram uses the letter
`R' to mark the tiles spotted in red by Raul according to his instructions:

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2735.eps}$
 -->
<IMG
 WIDTH="498" HEIGHT="195" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2735img1.gif
 ALT="\epsfbox{p2735.eps}">
</DIV>
At each simulation step the two sons move in lock-step, each hopping according to
his own instructions. To avoid conflicts, each time Raul and George are about to hop
to the next tile the simulation must check whether they would land on the same tile.
If so, the simulation ends without them moving, and the landing tile remains painted
in its previous colour, if any. Otherwise, the simulation will end as soon as one of the
sons ends his instructions.

Each tile can contain only one colour spot, either red or green. Since it is possible
that Raul and George land on the same tile at different times, the simulation should
only count the tile towards the son landing there last.

To avoid Raul and George falling off the edge of the tile grid, they are allowed to
wrap around, in all directions. For example, for a grid of the same size as above, one
hypothetical move from (8,3) in the direction (2,3) results in the tile (0,1).

Your task is to write a program that computes the results of such a simulation given
the grid size and the instructions for each son.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of one or more scenarios. Each scenario consists of 3 lines. The
first line contains two numbers separated by a space, <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN>, <SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2735img1.gif
 ALT="$ \le$"><I>N</I></SPAN>, <!-- MATH
 $M \le 1000$
 -->
<SPAN CLASS="MATH"><I>M</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2735img1.gif
 ALT="$ \le$">1000</SPAN>,
respectively representing the width and the height of the grid. The second line
contains the instructions for Raul and the third line the instructions for George. Each
instruction line starts with a number <SPAN CLASS="MATH"><I>C</I></SPAN>, in the range 1 to 100, followed by <SPAN CLASS="MATH"><I>C</I></SPAN> groups of
3 numbers. In each group the first number is a repetition count in the range 1 to
<!-- MATH
 $1,000,000,000$
 -->
<SPAN CLASS="MATH">1, 000, 000, 000</SPAN>, the second number is an increment along the x-axis, and the third
number an increment along the y-axis --both increments are in the range <SPAN CLASS="MATH">-1, 000</SPAN> to
1,000. All numbers are separated by single spaces. The end of the input is indicated
by a ``grid of size 0'', i.e., a `<TT>0</TT>' on a line by itself.

<P>
<BR>

<B>Note:</B> The input data for this program may contain lines up to 2000 characters long.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output one line for each input scenario. Each output line should show two numbers
separated by a single space, representing the earnings of Raul and George, in this
order.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
10 5
2 2 1 0 3 2 1
3 4 -2 0 1 0 -9 2 1 0
10 10
2 1 15 5 1 0 0
2 1 0 0 2 -4 -4
10 7
2 1000 2 -1 1000 0 -1
2 1000 -1 0 1000 -1 0
10 10
5 1000 2 -1 1000 1 0 2 5 5 3 1 1 10 1 1
5 1000 -1 0 1000 0 1 3 -4 -4 2 -1 -1 10 -1 -1
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
5 6
2 1
30 10
18 18
</PRE>


<P>

______________________________________________________
2736||||||false||||||
ACMIA mobile phones have a shortcut mode for typing text messages using the
numerical phone keypad. In this mode, the system uses a dictionary of known words.
After a sequence of digits is entered the system checks for and displays all possible
matches in the dictionary. The ACMIA phone keypad for the English alphabet is as
follows:

<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
  <TT>1</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>2 abc</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>3 def</TT> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>4 ghi</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>5 jkl</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>6 mno</TT> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>7 pqrs</TT>  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>8 tuv</TT>  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>9 wxyz</TT> </TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>0 (space)</TT> </TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>
<BR>
Your task is to write a program that displays all possible matches for given digit
sequences, using a given dictionary.

A digit sequence corresponds to a sequence of words, with zero digits (`<TT>0</TT>') indicating
spaces. Leading and trailing zeros are ignored, and multiple consecutive embedded
zeros are treated as a single zero. For each sequence of non-zero digits, display the
matching word from the dictionary. When more than one match is available, display
all matches in dictionary order between round parentheses and separated by bars
(`<code>|</code>'). If there is no matching word, display a sequence of asterisks (`<TT>*</TT>') of the same
length. For example, with a dictionary consisting solely of the words `<TT>i</TT>', `<TT>loud</TT>',
`<TT>love</TT>', `<TT>programming</TT>', the digit sequence
<BR>
<BR>
`<TT>0040568300077647266464077770</TT>'
<BR>
<BR>
will be displayed as the text
<BR>
<BR>
`<TT>i (loud<code>|</code>love) programming ****</TT>'

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of one or more scenarios, each scenario consisting of a
dictionary of permitted words and a series of digit sequences to be interpreted as text
messages.

The dictionary consists of 1 to 1,000 words, one word per line, in increasing
dictionary order, with no duplicates. Each word consists of 1 to 30 lowercase letters.
For any given non-zero digit sequence there will be no more than 10 matching words
in the dictionary. The end of the dictionary is indicated by a line consisting of a single
`<TT>#</TT>'.

The digit sequences to interpret as text messages follow the dictionary, one per line.
Each message line consists of 1 to 100 digits, with at least 1 non-zero digit. The end
of messages is indicated by a line consisting of a single `<TT>#</TT>'.

The end of input is indicated by an empty dictionary (a dictionary with zero words).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each scenario output a line consisting of the word `<TT>SET</TT>' (all uppercase) followed
by a space and then the scenario number, starting with 1. Following this output the
list of interpreted text messages, one message per line.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
i
loud
love
programming
#
0040568300077647266464077770
#
a
game
go
golf
good
hand
hold
hole
home
in
me
of
to
#
2046630426306304653
46086020466304663
#
#
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
SET 1
i (loud|love) programming ****
SET 2
a (good|home) (game|hand) (me|of) (golf|hold|hole)
(go|in) to a (good|home) (good|home)
</PRE>


<P>

______________________________________________________
2737||||||false||||||
You are given a number of plastic tiles, all of the same size, and a target pattern.
Your task is to assemble the tiles into a pile so that, looking from the top, it matches
the target pattern. Each tile is composed of 16 squares of transparent or coloured
plastic (opaque and identically coloured on both faces), arranged in a <!-- MATH
 $4 \times 4$
 -->
<SPAN CLASS="MATH">4&#215;4</SPAN> grid. The
target pattern is also a grid of colours, similar to a tile, but without transparencies.
The tiles can be rotated clockwise through multiples of <!-- MATH
 $90^{\circ}$
 -->
<SPAN CLASS="MATH">90<SUP><TT>o</TT></SUP></SPAN> and/or flipped about a
horizontal axis. This leads to 8 possible transformations --rotated 0, 1, 2 or 3 times,
or a flip followed by the same sequence of rotations. These transformations, in the
above order, are numbered 0 to 7. The following diagrams provide an example, with
colours denoted by upper case letters, and dots (`<TT>.</TT>') representing transparency:

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2737.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2737.gif
 ALT="\epsfbox{p2737.eps}">
</DIV>
Write a program that will read in a sequence of tiles and a target pattern and
determine whether the target pattern can be made by some arrangement of all or
some of the input tiles.

<UL>
<LI>If there are several ways of achieving the target, then choose the pile with
fewest tiles.
</LI>
<LI>If there are still several ways of achieving the target, then at every point in the
pile, in a top-down order, choose first the lowest numbered appropriate tile
and, if still needed, the lowest numbered appropriate transformation.
</LI>
</UL>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of one or more of problems. The first line of each problem
contains the title of the problem as a string of 1 to 30 characters other than space,
followed by a space, and the number of tiles <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2737.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2737.gif
 ALT="$ \le$">10</SPAN>). This is followed in turn by
<SPAN CLASS="MATH"><I>n</I> + 1</SPAN> lines, the first <SPAN CLASS="MATH"><I>n</I></SPAN> lines specifying the tiles (implicitly numbered 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>); and the
last line specifying the target pattern. Each of these <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> lines contains 4 blocks of 4
characters, either an upper case letter representing a colour, or a full stop (`<TT>.</TT>')
representing transparency. Blocks are separated by single spaces and represent grid
rows, in successive row order. Characters composing blocks represent grid cells, in
successive column order. The end of input is signified by a line consisting of a single
`<TT>#</TT>'.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output consists of one line for each problem, consisting of the title of the problem,
followed by a space, and either the word `<TT>noway</TT>' (all lowercase) if the target cannot
be achieved, or a description of the pile if the target can be achieved. The tiles in the
pile should be listed in order from the top of the pile downwards, in the form: tile
number (0 through <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>), slash (`<TT>/</TT>'), transformation number (0 through 7). Separate
descriptions of successive tiles by single spaces.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
OBVIOUS 1
RRGG RRGG YYBB YYBB
BBGG BBGG YYRR YYRR
EASY 2
BBBB BBBB ..BB ..BB
RRRR RRRR .... ....
RRRR RRRR BBBB BBBB
Is-this-possible? 2
BBBB BBBB ..BB ..BB
RRRR RRRR .... ....
RRBB RRBB BBRR BBRR
#
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
OBVIOUS 0/7
EASY 1/0 0/1
Is-this-possible? noway
</PRE>


<P>

______________________________________________________
2738||||||false||||||
A new suburb has been established with 4 avenues running West-East and <SPAN CLASS="MATH"><I>N</I></SPAN> streets
running North-South, where <!-- MATH
 $1 \le N \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2738img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2738img1.gif
 ALT="$ \le$">1000</SPAN>. On the map, the suburb is a rectangular
grid and the post office is at its North-West corner.

For example, the following diagram shows such a suburb with <SPAN CLASS="MATH"><I>N</I> = 5</SPAN> streets, with the
avenues depicted as horizontal lines, and the post office as a dark blob at the top-left
corner:

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2738a.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2738img1.gif
 ALT="\epsfbox{p2738a.eps}">
</DIV>
Each day the postal van leaves the post office, drives around the suburb and returns
to the post office, passing exactly once through every intersection (including those on
borders or corners). The executives from the post company want to know how many
distinct routes can be established for the postal van (of course, the route direction is
significant in this count).

For example, the following diagrams show 2 such routes for the above suburb:

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2738b.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2738img1.gif
 ALT="\epsfbox{p2738b.eps}">
</DIV>
As another example, the following diagrams show all the 4 possible routes for a
suburb with <SPAN CLASS="MATH"><I>N</I> = 3</SPAN> streets.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2738c.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2738img1.gif
 ALT="\epsfbox{p2738c.eps}">
</DIV>
Write a program that will determine the number of such distinct routes given the
number of streets.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input text consists of one or more lines, each containing a single number from 1
to 1000 inclusive --the number of parallel streets. A single `<TT>#</TT>' on a line by itself
indicates the end of input.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
There is a single line of output for each input value. Each output line consists of the
number of streets followed by a colon (`<TT>:</TT>') and a space, followed by the number of
possible distinct routes corresponding to that many streets. Each number is
displayed as a decimal number, with commas (`<TT>,</TT>') used as separators between
groups of 3 digits, counting from the right.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
2
3
4
10
30
#
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1: 0
2: 2
3: 4
4: 12
10: 3,034
30: 374,605,036,706
</PRE>


<P>

______________________________________________________
2739||||||false||||||
The stream of tourists passing through the enchanted forest of Acmagorn is drying
up because most people have seen it already and don't see the point of seeing it
again. This is worrying the custodians of the forest because they rely on the money
that tourists spend to manage the forest (and to pay their salaries). In an attempt to
bring the tourists back again, they have devised a plan to make the forest look a bit
different every day someone sees it. According to this plan, every night the trees
randomly rearrange the order of their branches. Although the rearrangement doesn't
change the structure of the trees, it can make their appearance quite different.

For example, images (a) and (b) below could show two possible rearrangements of
the same tree. Of course, trees that are structurally different trees will always look
different, no matter what rearrangement occurs. The trees in images (c) and (d) will
never look the same as each other, because they are structurally different --nor will
either (c) or (d) look the same as either (a) or (b).

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2739a.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2739a.gif
 ALT="\epsfbox{p2739a.eps}">
</DIV>
As another example, the images (e) and (f) below could also show two possible
rearrangements of the same tree.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p2739b.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2739a.gif
 ALT="\epsfbox{p2739b.eps}">
</DIV>
This plan is a great success and the tourists are flocking back to see the constantly
changing forest. Our friends Mary and Paul have been there several times and each
time they've brought home many good pictures. They have now decided to put a bit
of order in their collection of pictures, by identifying all matching tree images, i.e., all
images that could represent the same tree. To achieve this result, they intend to
associate a tag number with each image, such that images of trees are given the
same tag if, and only if, they match. For examples, the images (a), (b), (c), (d) above
could receive the tags 0, 0, 1, 2, in this order.

They have started by coding their collection of tree images. For each tree they
labelled each node, in no particular order, with a distinct number in the range 0 to <SPAN CLASS="MATH"><I>k</I> - 1</SPAN>, where <SPAN CLASS="MATH"><I>k</I></SPAN> is the number of the nodes in that tree.

Your task is to write a program that will allow them to identify matching tree images.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input consists of one or more scenarios, with each scenario consisting of a number of
tree images. Each scenario starts with a line containing a single number, <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le
100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2739a.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2739a.gif
 ALT="$ \le$">100</SPAN>) specifying the number of images in the scenario, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines containing
image descriptions. Each image description line has at most 5,000 characters and
consists of a number <SPAN CLASS="MATH"><I>k</I></SPAN> (<!-- MATH
 $1 \le k \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2739a.gif
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2739a.gif
 ALT="$ \le$">1000</SPAN>) specifying the number of nodes in the tree,
followed by <SPAN CLASS="MATH"><I>k</I></SPAN> numbers in the range <SPAN CLASS="MATH">-1</SPAN> to <SPAN CLASS="MATH"><I>k</I> - 1</SPAN>, specifying the parent of each node in
turn, using <SPAN CLASS="MATH">-1</SPAN> for the root node (which has no parent). The sequence of scenarios is
terminated by an ``empty scenario'', i.e., a line consisting of single zero (`<TT>0</TT>').

<P>
<BR>

<B>Note:</B> The input data for this program may contain lines up to 5000 characters long.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output consists of one line for each scenario, beginning with a scenario sequence
number (starting with 1), a colon (`<TT>:</TT>'), a space, and followed by a succession of tag
numbers, one for each image, in input order, and separated by single spaces. Tag
numbers are allocated successively in input image order, starting with 0, and
increased by 1 at the first occurrence of an image not matching any of the previous
images.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
7 -1 0 0 6 6 6 0
7 -1 3 3 0 3 0 0
7 -1 0 1 1 6 6 1
7 -1 3 3 0 5 0 0
2
13 -1 0 0 0 1 1 2 2 3 4 4 5 6
13 -1 0 0 0 1 1 2 3 3 5 7 8 8
5
2 -1 0
3 -1 0 0
2 1 -1
3 -1 0 1
3 2 2 -1
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1: 0 0 1 2
2: 0 0
3: 0 1 0 2 1
</PRE>


<P>

______________________________________________________
2740||||||false||||||
<P>Anu is a little girl who has an extraordinary skill in playing with numbers. You give her a set of nonzero positive integers with or without repetitions and tell her to generate all possible distinct nonzero positive integers by retaining / adding / subtracting any combination of the given integers. She can do so instantly.<P>For example if you give her the three integers 2, 8, 3 then in a moment she will tell you that a total of 11 integers can be generated. In fact, the 11 integers are the following: 1, 2, 3, 5, 6, 7, 8, 9, 10, 11 and 13.<P>You are required to write a program that equals the skill of Anu.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>The first line of each test case gives two integers: the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">( &lt; 15)</SPAN> of integers given to Anu. The next line gives <SPAN CLASS="MATH"><I>k</I></SPAN> integers in any order. A blank character separates two consecutive integers in input.<P>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print output in one line, giving the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number of integers that can be generated.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 2
2 3
2 3
2 3 8
3 4
2 5 5 4
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 4
2 11
3 14
</PRE><P>
______________________________________________________
2741||||||false||||||
<P>Mouli.com plans to implement a search engine that can list web sites/pages (SP) in order of anticipated preference of a user. It needs your service to write a program for this purpose.<P>When a visitor to Mouli.com registers as a user, the server creates on visitors hard disk, a small data file named Moulicookie. The file contains personal information and preferences of the user. The server exchanges information automatically between the server and the browser and tracks users actions and preferences. Using all these information the server categorizes a user into <SPAN CLASS="MATH"><I>k</I></SPAN> categories, <SPAN CLASS="MATH"><I>k</I></SPAN> being an integer. The number <SPAN CLASS="MATH"><I>k</I></SPAN> may be different for different user. The categories of a user are identified by integers <SPAN CLASS="MATH">1, 2,..., <I>k</I></SPAN>.<P>The server has a large database file named Moulicookbook that contains statistical information on visits to SP. The file also includes a grade A, B, C or D for anticipated preference of each SP with respect to each possible category of a user. The grade A is the highest possible grade while B, C and D are the other grades in decreasing order of preferences. The server updates the file after every visit to an SP.<P>When a user makes a search request the server selects all SP in Moulicookbook that correspond to the request. Let there be <SPAN CLASS="MATH"><I>n</I></SPAN> selected SP. Using statistical information, the server assigns a distinct identifying rank to each selected SP. It constructs a two-dimensional array <SPAN CLASS="MATH"><I>P</I></SPAN>, where the element <SPAN CLASS="MATH"><I>P</I>(<I>i</I>, <I>j</I>)</SPAN>, <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>n</I></SPAN>, <SPAN CLASS="MATH"><I>j</I> = 1, 2,..., <I>k</I></SPAN> contains the grade of the selected SP having rank <SPAN CLASS="MATH"><I>i</I></SPAN> with respect to category <SPAN CLASS="MATH"><I>j</I></SPAN> in Moulicookie.<P>Given two SP <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> has higher preference than <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> if the total number of categories having higher grades in <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> is greater than that in <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>. In case of a tie <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> is considered to have higher preference than <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> if <!-- MATH
 $s_{1} < s_{2}$
 --><SPAN CLASS="MATH"><I>s</I><SUB>1</SUB> &lt; <I>s</I><SUB>2</SUB></SPAN>. It is possible to have three SP: <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN> where <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> has higher preference than <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> has higher preference than <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN> but <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB></SPAN> has higher preference than <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN>. In such a case, the set of SP: <SPAN CLASS="MATH">{<I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>, <I>s</I><SUB>3</SUB>}</SPAN> forms an equivalent set. If an SP is equivalent to two or more SP in an equivalent set then it is equivalent to all SP belonging to the set. All SP in an equivalent set have the same anticipated preference.<P>Given <SPAN CLASS="MATH"><I>P</I></SPAN> corresponding to a search request as input, you are required to write a program to list all SP in order of anticipated preference.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>The first line of each test case contains the case number c, the total number <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">( &lt; 100)</SPAN> of selected SP from Moulicookbook and the total number <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">( &lt; 20)</SPAN> of categories in Moulicookie.<P>The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines give elements of <SPAN CLASS="MATH"><I>P</I></SPAN>. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line gives the <SPAN CLASS="MATH"><I>i</I></SPAN>-th row of <SPAN CLASS="MATH"><I>P</I></SPAN>. A blank character separates two consecutive elements in a row.<P>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, first print in one line, the test case number <SPAN CLASS="MATH"><I>c</I></SPAN>.<P>In the following lines, print identifying rank of SP in order of anticipated preference. Each line contains either rank of one SP or ranks of all SP belonging to an equivalent set in increasing order of ranks.<P>Print a blank line between two successive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 5 3
B C A
A C D
C A C
A B C
B A C
2 6 3
A C D
C A C
B A C
A B C
B C A
A B B
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
1 3 4 5
2

2
6
3
1 2 4 5
</PRE><P>
______________________________________________________
2742||||||false||||||
<P>Satabdi trains offer catering services to all its passengers. For convenience of catering services as well as for hygienic considerations, these trains use specially designed railway carriages. Each of these carriages has exclusive facilities for Catering services (<TT>C</TT>) at one end and Toilets (<TT>T</TT>) at the other end. Carriages are linked end to end so that ends on both sides of a link have the same kind of facilities, either `<TT>C</TT>' or `<TT>T</TT>'.<P>In factory carriages are linked end to end in random order to form assembly of carriages. An assembly of carriages has a front and a rear. Let `` <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN>" or `` <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Leftarrow$"> <I>A</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Leftarrow$"></SPAN>" denote an assembly <SPAN CLASS="MATH"><I>A</I></SPAN> where an arrow to <SPAN CLASS="MATH"><I>A</I></SPAN> indicates the front and an arrow from <SPAN CLASS="MATH"><I>A</I></SPAN> indicates the rear of the assembly. A carriage in an assembly has an orientation; it is the order of the two ends with respect to the front of the assembly viz., either `<TT>CT</TT>' or `<TT>TC</TT>'. It should be noted that two carriages linked to each other in a Satabdi train have opposite orientations, either `<TT>CT</TT>' followed by `<TT>TC</TT>' or `<TT>TC</TT>' followed by `<TT>CT</TT>'. An assembly `` <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN>" may be reversed changing front to rear and rear to front without altering any link. If `` <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Leftarrow$"> <I>r</I>(<I>A</I>) <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Leftarrow$"></SPAN>" denotes the reverse of `` <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN>" then the orientation of each carriage in `` <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Leftarrow$"> <I>r</I>(<I>A</I>) <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Leftarrow$"></SPAN>" is opposite to that of the same carriage in `` <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN>"; this is illustrated below.<P><P><BR><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Rightarrow$"> <I>A</I> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Rightarrow$"></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>:</TD><TD ALIGN="LEFT" NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Rightarrow$"> <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \tt CT$"> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Rightarrow$"> <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \tt TC$"> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Rightarrow$"> <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \tt CT$"> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Rightarrow$"> <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \tt CT$"> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Rightarrow$"> <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \tt CT$"> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Rightarrow$"></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Leftarrow$"> <I>r</I>(<I>A</I>) <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Leftarrow$"></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>:</TD><TD ALIGN="LEFT" NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Leftarrow$"> <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \tt CT$"> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Leftarrow$"> <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \tt TC$"> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Leftarrow$"> <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \tt CT$"> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Leftarrow$"> <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \tt CT$"> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Leftarrow$"> <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \tt CT$"> <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$\displaystyle \Leftarrow$"></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P><P><P><BR>An assembly <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN> may be considered to be an assembly of two or more sub-assemblies, e.g., <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>2</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN> or <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>2</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>3</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN>.<P>In railway yards an assembly of carriages is reassembled as per the requirement of Satabdi trains using certain shunting operations. The operations are based on de-linking a subassembly at one or two links, shunting a sub-assembly and attaching it to front/rear of another subassembly either with or without reversing. A list of feasible shunting operations performed at a railway yard is given below:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=RIGHT><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>OP</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Operations</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Assembly before</B></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><B>Assembly after</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Delink &amp; Attach</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>2</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>2</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Double Delink &amp; Attach</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>2</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>3</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>2</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>3</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>or <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>3</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>2</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Delink,Reverse &amp; Attach</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>2</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>r</I>(<I>A</I><SUB>1</SUB>) <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>2</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>or <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>2</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>r</I>(<I>A</I><SUB>1</SUB>) <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>or <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>r</I>(<I>A</I><SUB>2</SUB>) <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>or <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>r</I>(<I>A</I><SUB>2</SUB>) <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"> <I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2742img1.png ALT="$ \Rightarrow$"></SPAN></TD></TR></TBODY></TABLE></DIV><P><P><BR>Let <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>c</I><SUB>3</SUB></SPAN> be the cost of operations (OP) 1, 2 and 3 respectively, where <!-- MATH
 $c_{1} < c_{2} < c_{3}$
 --><SPAN CLASS="MATH"><I>c</I><SUB>1</SUB> &lt; <I>c</I><SUB>2</SUB> &lt; <I>c</I><SUB>3</SUB></SPAN>. You are required to write a program that will compute the minimum cost <SPAN CLASS="MATH"><I>c</I></SPAN> of reassembling a factory-assembled assembly of carriages into an assembly of carriages suitable for Satabdi trains.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>The first line of each test case gives an integer <SPAN CLASS="MATH"><I>k</I></SPAN> denoting the case number and three real numbers <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>c</I><SUB>3</SUB></SPAN>.<P>The next line gives the orientation of carriages in a factory-assembled assembly of carriages in the order in which they appear from front to rear in the assembly. A blank character separates orientations of two neighbouring carriages.<P>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>k</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in input, print output in one line, giving the test case number <SPAN CLASS="MATH"><I>k</I></SPAN> and the minimum cost <SPAN CLASS="MATH"><I>c</I></SPAN> of reassembling. In case an input does not conform to the requirements of Satabdi trains then print the comment `<TT>invalid</TT>' after case number <SPAN CLASS="MATH"><I>k</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1.5 3.5 7.5
CT TC TC CT CT TC TC
2 2.0 1.5 4.5
CT TC TC CT TT TC
3 1.0 4.0 8.0
TC TC TC TC TC CT TC
4 1.0 2.0 3.0
TC CT TC CT TC CT
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 5.0
2 invalid
3 13.0
4 0.0
</PRE><P>
______________________________________________________
2743||||||false||||||
<P>You have a plain and simple rectangle to find. Given a set of points <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN>, <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>n</I></SPAN>, you are required to write a program that finds the smallest rectangle, smallest in area, so that all given points are either inside or on the boundary of the rectangle and at least two of the points lie on any one of the sides of the rectangle. If there is more than one smallest rectangle then find any one of them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases. For each test case, the first line contains the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">( &lt; 50)</SPAN> of given points. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines gives the x-coordinate and the y-coordinate of a given point. A blank character separates two input values in a line.<P>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case first print in one line, the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the area of the smallest rectangle.<P>The next four lines contain coordinates of four vertices of any one of the possible smallest rectangles. The vertices are arranged in ascending order of x-coordinates. In case <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinates of any two vertices are equal then the two vertices are arranged in ascending order of <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates.<P>Retain two digits after the decimal point in each computed real value. Keep a blank line between outputs of two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 6
1.0 1.2
1.0 1.5
1.3 1.0
1.5 3.0
5.0 1.0
5.0 2.9
2 12
1.0 1.5
1.0 2.5
1.5 1.0
2.0 3.0
3.0 1.0
4.0 7.0
4.5 -1.0
5.0 6.5
5.5 9.0
6.0 1.0
6.5 8.5
8.0 8.0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 8.00
1.00 1.00
1.00 3.00
5.00 1.00
5.00 3.00

2 47.08
0.46 1.69
4.62 -1.08
5.69 9.54
9.85 6.77
</PRE><P>
______________________________________________________
2744||||||false||||||
<P>Consider a string <SPAN CLASS="MATH"><I>S</I></SPAN> of <SPAN CLASS="MATH"><I>n</I></SPAN> nonnegative integers and two sub-strings <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN> in <SPAN CLASS="MATH"><I>S</I></SPAN>, each of length <SPAN CLASS="MATH"><I>m</I></SPAN>. Let a string or a sub-string <SPAN CLASS="MATH"><I>T</I></SPAN> of length <SPAN CLASS="MATH"><I>k</I></SPAN> be represented by an array <SPAN CLASS="MATH"><I>T</I></SPAN> with elements <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>,..., <I>t</I><SUB>k</SUB></SPAN>. If the starting position of a sub-string <SPAN CLASS="MATH"><I>Z</I></SPAN> in <SPAN CLASS="MATH"><I>T</I></SPAN> is <SPAN CLASS="MATH"><I>i</I></SPAN> then <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB> = <I>z</I><SUB>1</SUB></SPAN>.<P>Sub-strings <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> match each other precisely, if <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> = <I>y</I><SUB>i</SUB></SPAN> for <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>m</I></SPAN>. They match each other imprecisely with imprecision index <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$ \alpha$"></SPAN>, where<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$\displaystyle \alpha$"> = <IMG WIDTH="38" HEIGHT="54" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$\displaystyle {\frac{1}{\sqrt{m}}}$">(<I>h</I> + <IMG WIDTH="13" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$\displaystyle \delta$">),&nbsp;&nbsp;&nbsp;&nbsp;<IMG WIDTH="13" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$\displaystyle \delta$"> = <IMG WIDTH="24" HEIGHT="54" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$\displaystyle {\frac{1}{m}}$"><IMG WIDTH="27" HEIGHT="62" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$\displaystyle \sum^{m}_{i=1}$">(| <I>x</I><SUB>i</SUB> - <I>y</I><SUB>i</SUB>|)</DIV><P></P>and <SPAN CLASS="MATH"><I>h</I></SPAN> is a predefined real number. The least imprecise pair of sub-strings in <SPAN CLASS="MATH"><I>S</I></SPAN> is defined to be the pair of sub-strings <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN> that has least value of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$ \alpha$"></SPAN>. If there is more than one pair of <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN> for which <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$ \alpha$"></SPAN> is least then the least imprecise pair satisfies the following conditions in order of priority:<P><OL><LI>The length <SPAN CLASS="MATH"><I>m</I></SPAN> is as large as possible, </LI><LI>The starting point of <SPAN CLASS="MATH"><I>X</I></SPAN> is closest to that of <SPAN CLASS="MATH"><I>S</I></SPAN>. </LI><LI>The starting point of <SPAN CLASS="MATH"><I>Y</I></SPAN> is furthest from that of <SPAN CLASS="MATH"><I>X</I></SPAN>. </LI></OL><P>You are required to write a program that finds the least imprecise pair of sub-strings <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN> for a given string <SPAN CLASS="MATH"><I>S</I></SPAN> and a given value fo <SPAN CLASS="MATH"><I>h</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases. The first line of each test case gives two integers and a real number: the case number <SPAN CLASS="MATH"><I>c</I></SPAN>, the length <SPAN CLASS="MATH"><I>n</I></SPAN> (<SPAN CLASS="MATH">&lt; 100</SPAN>) of <SPAN CLASS="MATH"><I>S</I></SPAN> and the value of <SPAN CLASS="MATH"><I>h</I></SPAN> respectively. The next line gives elements of <SPAN CLASS="MATH"><I>S</I></SPAN> separated by a blank character. The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print output in one line, giving the test case number <SPAN CLASS="MATH"><I>c</I></SPAN>, the length <SPAN CLASS="MATH"><I>m</I></SPAN> of the least imprecise pair of sub-strings <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN>, the starting position <SPAN CLASS="MATH"><I>i</I></SPAN> of <SPAN CLASS="MATH"><I>X</I></SPAN> in <SPAN CLASS="MATH"><I>S</I></SPAN>, the starting position <SPAN CLASS="MATH"><I>j</I></SPAN> of <SPAN CLASS="MATH"><I>Y</I></SPAN> in <SPAN CLASS="MATH"><I>S</I></SPAN> and the least value of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$ \alpha$"></SPAN>. Retain four digits after the decimal point in the least value of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2744img1.png ALT="$ \alpha$"></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 8 0.0
5 8 7 6 8 6 9 6
2 8 1.0
5 8 7 6 8 6 9 6
3 8 2.0
5 8 7 6 8 6 9 6
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3 4 6 0.1925
2 4 3 5 0.7500
3 6 1 3 1.2247
</PRE><P>
______________________________________________________
2745||||||false||||||
<P>Consider steps of multiplication of an unsigned decimal integer <SPAN CLASS="MATH"><I>X</I></SPAN> by another unsigned decimal integer <SPAN CLASS="MATH"><I>Y</I></SPAN>. If <SPAN CLASS="MATH"><I>Y</I></SPAN> is of <SPAN CLASS="MATH"><I>m</I></SPAN> digits and the digit in position <SPAN CLASS="MATH"><I>i</I></SPAN> of <SPAN CLASS="MATH"><I>Y</I></SPAN> is <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>i</I> = 0, 1,...,(<I>m</I> - 1)</SPAN> then steps of multiplication consist in finding <SPAN CLASS="MATH"><I>m</I></SPAN> intermediate products <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB> = <I>X</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2745img1.png ALT="$\scriptstyle \star$"></SUP><I>y</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>i</I> = 0, 1,...,(<I>m</I> - 1)</SPAN>, positioning them appropriately and adding them to get the product <SPAN CLASS="MATH"><I>Z</I> = <I>X</I>*<I>Y</I></SPAN>. The steps are illustrated below for a simple example.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>Steps with all</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>Steps in general</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>Steps with some</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>Steps with all</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>digits visible</TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>digits hidden</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>digits hidden</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>5 3 9 2</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>X</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>c 3 9 b</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>a b c d</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>4 3</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>Y</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>4 3</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>e b</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>-------</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>------</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>------</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>-------</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>1 6 1 7 6</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>P</I><SUB>0</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>a d a 7 d</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>f g f h g</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>2 1 5 6 8 </TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">......</SPAN></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>b a c d 8 </TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>d f a g i </TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>--------</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>P</I><SUB>(m - 1)</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>------</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>-------</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>2 3 1 8 5 6</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>------</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>b 3 a 8 c d</TT></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT>d b f i a g</TT></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>Z</I></SPAN></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><P><BR>Given steps of a multiplication with some or all digits hidden using letters, you are required to write a program that finds <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN> and <SPAN CLASS="MATH"><I>Z</I></SPAN>. Assume that each letter represents a hidden digit only and no visible digit is hidden in a letter. Assume further that no two letters represent the same digit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case, the first line contains the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the number <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2745img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2745img1.png ALT="$ \le$">10)</SPAN>, of digits in <SPAN CLASS="MATH"><I>Y</I></SPAN>.<P>The next <SPAN CLASS="MATH">(<I>m</I> + 3)</SPAN> lines give <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN>, <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>i</I> = 0, 1,...,(<I>m</I> - 1)</SPAN> and <SPAN CLASS="MATH"><I>Z</I></SPAN> respectively, with some or all digits hidden.<P>The input terminates with an input `<TT>0</TT>' for case number <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print in one line, the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number <SPAN CLASS="MATH"><I>k</I></SPAN> of possible sets of values of <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN>, <SPAN CLASS="MATH"><I>Z</I></SPAN>.<P>Each of next <SPAN CLASS="MATH"><I>k</I></SPAN> lines gives one set of values of <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN> and <SPAN CLASS="MATH"><I>Z</I></SPAN>. A blank character separates two values in a set. The <SPAN CLASS="MATH"><I>k</I></SPAN> lines are arranged in lexicographic order of <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN>.<P>Print a blank line between two successive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 2
9
a3
bc
de
dfc
2 3
9
a2x
x
bc
de
dfcx
3 2
c39b
43
ada7d
bacd8
b3a8cd
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 0

2 2
9 420 3780
9 720 6480

3 1
5392 43 231856
</PRE><P>
______________________________________________________
2746||||||false||||||
<P>Destruction of Weapons of Mass Destruction (WMD) was the only justification of war against a country Q by coalition forces of countries K &amp; S. However even after taking full control of country Q, coalition forces failed to uncover any significant WMD. The question is: where are the WMD?<P>A highly reliable intelligence source has the information that the previous Government of country Q has hidden the code of locations of WMD so cunningly that best efforts of the allies have failed to locate them. The same intelligence source has discovered the secret code and the clue to decipher them.<P>The code consists of a set of strings and a square grid, both of capital letters. Each letter used in the code represents a known geographical location in country Q. A string is said to appear on the grid if it is formed by reading letters on the grid, horizontally (row-wise, left to right), vertically (column-wise, top to bottom) or diagonally (upper left to lower right), starting from any position on the grid.<P>Locations of WMD are identified by the unique and minimal set of distinct letters on the grid satisfying the following conditions:<P><OL><LI>Each letter in the set is required to be replaced at a position on the grid by another letter so that all strings appear on the grid after the replacement. </LI><LI>A string appears on the grid with at most one changed letter in it. </LI></OL><P>If conditions stated above do not lead to identification of a unique and minimal set of distinct letters on the grid then there is no existence of WMD.<P>You are required to save the world from mass destruction by writing a program that deciphers the secret code and identifies the locations of WMD.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>K</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>M</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>H</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>K</TD></TR></TBODY></TABLE></DIV><P><P><BR>As an illustration, consider the grid of letters shown on the right. Strings `<TT>BDSC</TT>' and `<TT>KDMC</TT>' appear on the grid when each of two distinct letters `<TT>B</TT>' and `<TT>A</TT>' is replaced by `<TT>C</TT>'; `<TT>DMK</TT>', `<TT>MMS</TT>' and `<TT>IMD</TT>' all appear with the unique and minimal change: `<TT>N</TT>' to `<TT>M</TT>'; `<TT>BDND</TT>' appears in two ways, either vertically or diagonally, and the change required in each case is a unique one viz., `<TT>K</TT>' to `<TT>D</TT>' at a position on the grid. However both `<TT>BDNK</TT>' and `<TT>NIND</TT>' appear on the grid without any change of letters; to read `<TT>BDND</TT>' and `<TT>BSND</TT>' both, there exists no distinct set to change; both `<TT>NIND</TT>' and `<TT>SMKS</TT>' cannot be read making any change; and there exists no unique change to read `<TT>IMD</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P><P><BR>The first line of each test case gives three integers: the case number <SPAN CLASS="MATH"><I>c</I></SPAN>, the total number <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">( &lt; 50)</SPAN> of strings and the number <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH">( &lt; 15)</SPAN> that defines the size <SPAN CLASS="MATH"><I>m</I><SUP>2</SUP></SPAN> of the square grid.<P>The second line gives <SPAN CLASS="MATH"><I>n</I></SPAN> strings separated by blank character.<P>The next <SPAN CLASS="MATH"><I>m</I></SPAN> lines contain letters on the grid: the <SPAN CLASS="MATH"><I>i</I><SUP>th</SUP></SPAN> line gives letters in the <SPAN CLASS="MATH"><I>i</I><SUP>th</SUP></SPAN> row. A blank character separates two consecutive letters in a row.<P>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print in one line, the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number <SPAN CLASS="MATH"><I>k</I></SPAN>, of locations of WMD. If <SPAN CLASS="MATH"><I>k</I></SPAN> is equal to zero then there in no more output.<P>If <SPAN CLASS="MATH"><I>k</I></SPAN> is nonzero then print in one line, all <SPAN CLASS="MATH"><I>k</I></SPAN> letters representing locations of WMD in alphabetic order.&nbsp; Use blank character to separate two letters in the line.<P>Print a blank line between outputs of two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 5 4
BDSC KDMC DMK MMS IMD
B D S B
K D M A
N I N D
D H S K
2 5 4
BDNK NIND BDND BSND SMKS
B D S B
K D M A
N I N D
D H S K
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3
A B N

2 0
</PRE><P>
______________________________________________________
2747||||||false||||||
<P>After 50 years from now sociopolitical scenario on the earth is likely to be much different from what it is today. It is likely that UN will have to defend the earth against invaders from space.<P>Assume that a set of m invaders has taken up relatively stationary strategic positions in space with the intention to invade the earth. They have placed themselves in <SPAN CLASS="MATH"><I>m</I></SPAN> distinct positions in a relatively stationary 3D cubic mesh (3DCM) of size <SPAN CLASS="MATH"><I>n</I><SUP>3</SUP></SPAN>. Let a position <SPAN CLASS="MATH"><I>p</I></SPAN> in 3DCM be identified by a 3D index <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>, <I>k</I>)</SPAN> where each of the indices <SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>j</I></SPAN>, <SPAN CLASS="MATH"><I>k</I></SPAN> assumes values <SPAN CLASS="MATH">0, 1,...,(<I>n</I> - 1)</SPAN>. Armed with sophisticated laser beams an invader at a position p in 3DCM is capable of destroying a target at another position <SPAN CLASS="MATH"><I>q</I></SPAN> if two of the three indices of <SPAN CLASS="MATH"><I>q</I></SPAN> are identical to the corresponding indices of <SPAN CLASS="MATH"><I>p</I></SPAN>. For example an invader at (0, 5, 4) can destroy a target at (0, 1, 4). In such a case the position <SPAN CLASS="MATH"><I>q</I></SPAN> is exposed to an invader at <SPAN CLASS="MATH"><I>p</I></SPAN>.<P>For defense UN uses its advanced Satellite Robots System (SRS). Each robot in SRS is equipped with advanced nuclear missile technology and is capable of destroying targets from relatively stationary positions with respect to a set of relatively stationery objects in space. When placed at a position <SPAN CLASS="MATH"><I>p</I></SPAN> in 3DCM mentioned above a robot can destroy a target at another position <SPAN CLASS="MATH"><I>q</I></SPAN> if any of the following conditions is true:<P><OL><LI>At least one index of <SPAN CLASS="MATH"><I>q</I></SPAN> is identical to the corresponding index of <SPAN CLASS="MATH"><I>p</I></SPAN>, e.g., <SPAN CLASS="MATH"><I>p</I> = (0, 5, 4)</SPAN>, <SPAN CLASS="MATH"><I>q</I> = (1, 5, 2)</SPAN> or <SPAN CLASS="MATH">(0, 1, 4)</SPAN>. </LI><LI>Each index of <SPAN CLASS="MATH"><I>q</I></SPAN> differs from the corresponding index of <SPAN CLASS="MATH"><I>p</I></SPAN> by the same magnitude e.g., <SPAN CLASS="MATH"><I>p</I> = (0, 5, 4)</SPAN>, <SPAN CLASS="MATH"><I>q</I> = (3, 2, 1)</SPAN>. </LI></OL><P>In such a case the position <SPAN CLASS="MATH"><I>q</I></SPAN> is exposed to a robot at <SPAN CLASS="MATH"><I>p</I></SPAN>.<P>For defense UN decides to deploy maximum number of robots according to the following strategy:<P><OL><LI>Robots are deployed in groups of <SPAN CLASS="MATH"><I>n</I></SPAN> robots, </LI><LI>Each robot in a group occupies a distinct defensive position in 3DCM. The position is different from positions occupied by either invaders or other robots. </LI><LI>A robot is exposed neither to an invader nor to another robot of the same group. However robots belonging to different groups may be exposed to each other. </LI></OL><P>Given <SPAN CLASS="MATH"><I>m</I></SPAN> positions of invaders in 3DCM you are required to write a program that finds the maximum number of robots that can be deployed. The program should also identify distinct defensive positions for robots in each group.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P><P><BR>For each test case, the first line contains the case number <SPAN CLASS="MATH"><I>c</I></SPAN>, the size parameter <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">( &lt; 10)</SPAN> of 3DCM and the total number <SPAN CLASS="MATH"><I>m</I></SPAN> of invaders. Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines gives three integers <SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>j</I></SPAN>, <SPAN CLASS="MATH"><I>k</I></SPAN> identifying the position (<SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>j</I></SPAN>, <SPAN CLASS="MATH"><I>k</I></SPAN>) of an invader in 3DCM. The integers are separated by blank character.<P>The input terminates with an input `<TT>0</TT>' for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the first line contains the test case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number <SPAN CLASS="MATH"><I>g</I></SPAN>, of groups of robots that can be deployed. If <SPAN CLASS="MATH"><I>g</I></SPAN> is equal to zero then there is no more output.<P>In case <SPAN CLASS="MATH"><I>g</I></SPAN> is not equal to zero then print <SPAN CLASS="MATH"><I>n</I></SPAN> more lines as output. Each of these lines contains <SPAN CLASS="MATH"><I>g</I></SPAN> positions of robots. As in input a position <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>, <I>k</I>)</SPAN> in 3DCM is identified by integers <SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>j</I></SPAN>, <SPAN CLASS="MATH"><I>k</I></SPAN>. The <SPAN CLASS="MATH"><I>r</I></SPAN>-th position in the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line corresponds to the position <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>, <I>k</I>)</SPAN> of the robot belonging to the <SPAN CLASS="MATH"><I>r</I></SPAN>-th group for which the first index is <SPAN CLASS="MATH"><I>i</I></SPAN>, for <SPAN CLASS="MATH"><I>r</I> = 1, 2,..., <I>g</I></SPAN> and <SPAN CLASS="MATH"><I>i</I> = 0, 1,...,(<I>n</I> - 1)</SPAN>. One blank character separates integers identifying a position and two or more blank characters separate positions in a line.<P>Print a blank line between two successive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 3 2
0 2 1
1 0 1
2 4 6
0 2 0
0 3 3
2 0 3
2 2 2
3 0 0
3 1 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 0

2 2
0 0 1    0 0 2
1 2 3    1 1 0
2 1 0    2 3 1
3 3 2    3 2 3
</PRE><P>
______________________________________________________
2748||||||false||||||
<P>While performing a fairly complicated experiment involving a particle accelerator, a mislabeled 4.77MHz crystal oscillator and a rubber band, you are accidentally transported back to the 18th century. At least you still have your trusty palmtop computer, or the natives would have executed you on arrival. Anyway, their problem is this: they have a fairly decent cannon, but they have virtually no idea how to aim it to hit their intended target. You `offer' to write a simulation to help them.<P>Here's a diagram of the trajectory that they would like to fire their projectiles at:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2748.jpg ALT="\epsfbox{p2748.eps}"></DIV><P>Their intended target is the drawbridge catch, as indicated on the diagram. The projectile has to pass through the exact centre of the porthole, given the following parameters:<P><PRE><TT>
		 <SPAN CLASS="MATH"><I>h</I>1</SPAN> height of the porthole sill (measured from the ground) 
<BR><SPAN CLASS="MATH"><I>h</I>2</SPAN> height of the porthole opening                            
<BR><SPAN CLASS="MATH"><I>h</I>3</SPAN> height of the intended target                               
<BR><SPAN CLASS="MATH"><I>d</I>2</SPAN> distance from centre of wall to centre of target
</TT></PRE><P>You have the following information regarding the cannon:<P><PRE><TT>
		 <SPAN CLASS="MATH"><I>h</I>3</SPAN> height of the exit point of the barrel (same as height of target) 
<BR><SPAN CLASS="MATH"><I>m</I></SPAN> mass of projectile (kg)                                              
<BR><SPAN CLASS="MATH"><I>spd</I></SPAN> muzzle velocity (speed) of the projectile (<!-- MATH
 $m \cdot s^{-1}$
 -->
<SPAN CLASS="MATH"><I>m</I><SUP> . </SUP><I>s</I><SUP>-1</SUP></SPAN>)
</TT></PRE><P>You will have to calculate the following values:<P><PRE><TT>
		 <SPAN CLASS="MATH"><IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2748.jpg
 ALT="$ \theta$"></SPAN> angle between cannon barrel and the ground 
<BR><SPAN CLASS="MATH"><I>d</I>1</SPAN> the distance from the tip of the barrel to the centre of the wall
</TT></PRE><P>The tricky part is that you have to take into account the atmospheric friction that the cannonball will experience. Fortunately you still remember the differential equation for linear friction, so you derive the following formula (note: <SPAN CLASS="textbf">Bold Capital</SPAN> letters denote vectors):<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><B>Pos</B>(<I>t</I>) = <B>V</B><SUB>1</SUB><IMG WIDTH="24" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2748.jpg ALT="$\displaystyle {\frac{m}{k}}$"><I>e</I><SUP>k<SUP> . </SUP>t/m</SUP> - <B>G</B><IMG WIDTH="64" HEIGHT="53" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2748.jpg ALT="$\displaystyle {\frac{m \cdot g \cdot t}{k}}$"> + <B>P</B><SUB>1</SUB></DIV><P></P><P>where (note: square brackets [ ] are used to group vector components)<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><B>Pos</B>(<I>t</I>)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>a vector indicating the position (in meters) of object relative to its position at time 0</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>t</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>time in seconds, <I>t</I> = 0when projectile leaves the muzzle</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><B>V</B><SUB>1</SUB></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP><B>V</B><SUB>0</SUB> + <B>G</B><IMG WIDTH="45" HEIGHT="47" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2748.jpg ALT="$\displaystyle {\frac{m\cdot g}{k}}$"></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><B>V</B><SUB>0</SUB></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>[initial horizontal velocity, initial vertical velocity]</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><B>G</B></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>[0, - 1].This is the direction of gravity</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>m</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>mass of object, in kg</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>g</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>9.8<I>m</I><SUP> . </SUP><I>s</I><SUP>-2</SUP></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>k</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>viscosity coefficient = - 1.0</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><B>P</B><SUB>1</SUB></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP><B>P</B><SUB>0</SUB> - <B>V</B><SUB>1</SUB><IMG WIDTH="24" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2748.jpg ALT="$\displaystyle {\frac{m}{k}}$"></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><B>P</B><SUB>0</SUB></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>[initial horizontal position, initial vertical position]</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P><P>Note that the projectile leaves the muzzle of the cannon at <SPAN CLASS="textit">spd</SPAN> meters per second; this is the linear speed, so you must calculate the correct initial velocity ( <SPAN CLASS="MATH"><B>V</B><SUB>0</SUB></SPAN> above) using the angle of the barrel. The viscosity coefficient is determined by the surface area of the projectile, as well as the density of the atmosphere. Since you don't know the geometry of the projectile, nor the exact atmospheric conditions, the specified value of <SPAN CLASS="MATH"><I>k</I> = - 1.0</SPAN> should be used.<P>Your task is to compute the appropriate angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2748.jpg ALT="$ \theta$"></SPAN> that the cannon must be set to, as well as the corresponding distance from the wall <SPAN CLASS="MATH">(<I>d</I>1)</SPAN> that it must be placed at. The cannonball must pass through the exact centre of the porthole (at height <SPAN CLASS="MATH"><I>h</I>1 + 0.5<I>h</I>2</SPAN> from the ground) and hit the top of the drawbridge catch (the point <SPAN CLASS="MATH"><I>h</I>3</SPAN> from the ground, distance <SPAN CLASS="MATH"><I>d</I>2</SPAN> from the middle of the wall).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input is an arbitrary number of records, each record conforming to the format:<P><P><BR><SPAN CLASS="MATH"><I>h</I>1&nbsp;<I>h</I>2&nbsp;<I>h</I>3&nbsp;<I>d</I>2&nbsp;<I>m</I>&nbsp;<I>spd</I></SPAN><P><P><BR>using the definitions of these symbols as provided above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Your output must be the angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2748.jpg ALT="$ \theta$"></SPAN> (in degrees) followed by the distance <SPAN CLASS="MATH"><I>d</I>1</SPAN>.<P>All output values are to be rounded to one decimal place.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 1 1 3 10 150
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
22.9 884.4
</PRE><P>
______________________________________________________
2749||||||false||||||
<P>It is the year 2307.2, and you are designing a power network for distributing energy using obscuroton <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> particles (apologies to Gene Roddenberry). The basic principle behind the obscuroton <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> power distribution network is the same as building an electricity grid: you want to minimise the losses throughout the network. The power network consists of a number of distribution nodes placed in hyperspace (to overcome the speed-of-light problem). Due to the influence of gravity wells (stars and such), not all connections are possible, so you have a map showing all the possible connections between the nodes. Each connection is bi-directional, with a specified resistance, which is the same for both directions. The resistance of a link is a measure of how many of the obscuroton <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> particles will be lost due to scattering on that link, in other words, how much energy will be lost.<P>Your goal is to construct the network with the lowest cumulative resistance by selecting the most appropriate connections from your map. All nodes must remain connected to all other nodes. There must be exactly one path from any given node to any other node; if there's more than one path between two nodes the resulting sub-space anomalies will tear apart the entire network, leaving you to explain the black-out to billions of irate aliens. Aliens with nasty-looking guns.<P>The real catch, however, is that you have a couple of Dork <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> distribution nodes that fell off the back of a cube, somewhere (sorry, Gene). These Dork <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> nodes are of an inferior design, and will double the resistance on all direct connections from <I>and to</I> it. This is because the Dork <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> nodes have trouble remodulating the phase of their containment fields, resulting in more scattering (it appears that all problems are either caused, or can be solved, by containment field phase modulation). If node A is connected to node B with a resistance value of 3, then the effective resistance will be <SPAN CLASS="MATH">3&#215;2&#215;2 = 12</SPAN>, if both A and B are Dork <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> nodes. It would appear that resistance is expensive, rather than futile, as is commonly believed amongst the Dork <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN>.<P>In any case, you have <SPAN CLASS="MATH"><I>N</I></SPAN> nodes in total, with <SPAN CLASS="MATH"><I>D</I></SPAN> of them being Dork <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> nodes (you got them for free, so you have to use all of them). You have to place these Dork <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> nodes where they will do the least damage. Your output will be the total effective resistance of the most efficient network possible given the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input consists of an arbitrary number of records, where each record represents a network node map. Each network node map has the following structure:<P><P><BR><SPAN CLASS="MATH"><I>N</I>&nbsp;<I>D</I></SPAN><P><SPAN CLASS="MATH"><I>nodeA</I>1&nbsp;<I>nodeB</I>1&nbsp;<I>resistance</I></SPAN><P><SPAN CLASS="MATH"><I>nodeA</I>2&nbsp;<I>nodeB</I>2&nbsp;<I>resistance</I></SPAN><P><SPAN CLASS="MATH">...&nbsp;...&nbsp;...</SPAN><P><P><BR>The first number specifies the size of the network (number of nodes); the second specifies the number of Dork <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> nodes you have <SPAN CLASS="MATH">(<I>D</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2749img1.png ALT="$ \le$"><I>N</I>)</SPAN>. Each following line specifies the two nodes that are connected, and the resistance associated with that link, thus forming triples of the form <SPAN CLASS="MATH">(<I>nodeA</I>, <I>nodeB</I>, <I>resistance</I>)</SPAN><P>Sample input below has 3 nodes, one of which is a Dorktm node. On the second line we see that the node 1 is connected to node 2 with a resistance of 4. Line three tells us that node 1 is connected to node 3 with a resistance of 5, and so on. Nodes are numbered 1 through N. A `<TT>-1</TT>' signifies the end of the current record; another record may follow.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your output must be the sum of all the effective resistance values, with the Dork <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> nodes placed where they have the least impact on the cumulative network resistance. Note that the network configuration for which you report this value must satisfy the condition requiring that all nodes must be connected to all other nodes along exactly one path, so all redundant connections must be removed before computing the total resistance. For the example above, note that the cumulative resistance can be minimised by making node 2 the Dork <SPAN CLASS="MATH"><SUP><SMALL CLASS="FOOTNOTESIZE">tm</SMALL></SUP></SPAN> node. Sample input results in the corresponding output since <SPAN CLASS="MATH">5 + 2&#215;4 = 13</SPAN>, which is less than <SPAN CLASS="MATH">6 + 2&#215;4 + 2&#215;5</SPAN> and <SPAN CLASS="MATH">4 + 2&#215;5 + 2&#215;6</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 1
1 2 4
1 3 5
2 3 6
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
13
</PRE><P>
______________________________________________________
2750||||||false||||||
<P>Everyone knows that rabbits multiply like, well, rabbits! It has been suggested that Fibonacci numbers predict the number of rabbits you would have after a number of generations. For those of non-<SPAN CLASS="textit">leporine</SPAN> origin, here's a refresher on Fibonacci numbers:<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>F</I><SUB>0</SUB></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>1</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>F</I><SUB>1</SUB></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>1</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>F</I><SUB>n</SUB></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP><I>F</I><SUB>n - 2</SUB> + <I>F</I><SUB>n - 1</SUB>,for<I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2750img1.png ALT="$\displaystyle \le$">2</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P>thus the first 8 number of the sequence are<P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">1, 1, 2, 3, 5, 8, 13, 21</SPAN></DIV><P>The Fibonacci sequence has another useful property, other than the rabbit thing, that is. The sequence forms a (non-superadditive) base for a number system. This implies that any positive integer can be expressed as a combination of terms from the sequence, <SPAN CLASS="textit">e.g.</SPAN><P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">33 = 1 + 3 + 8 + 21</SPAN></DIV><P>More concisely, any positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> can be expressed as<P><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><I>n</I> = <I>B</I><SUB>1</SUB><SUP> . </SUP><I>F</I><SUB>1</SUB> + <I>B</I><SUB>2</SUB><SUP> . </SUP><I>F</I><SUB>2</SUB> + <I>B</I><SUB>3</SUB><SUP> . </SUP><I>F</I><SUB>3</SUB> + <I>B</I><SUB>4</SUB><SUP> . </SUP><I>F</I><SUB>4</SUB> + ... + <I>B</I><SUB>k</SUB><SUP> . </SUP><I>F</I><SUB>k</SUB></SPAN></DIV>where <SPAN CLASS="MATH"><I>F</I><SUB>k</SUB></SPAN> represents the Fibonacci number <SPAN CLASS="MATH"><I>k</I></SPAN>, and <SPAN CLASS="MATH"><I>B</I><SUB>j</SUB></SPAN> represents a binary digit (0 or 1). Clearly <SPAN CLASS="MATH"><I>B</I><SUB>j</SUB> = 0</SPAN> for all <SPAN CLASS="MATH"><I>j</I></SPAN> such that <SPAN CLASS="MATH"><I>F</I><SUB>j</SUB> &gt; <I>n</I></SPAN>, so we only have to keep the digits <SPAN CLASS="MATH"><I>B</I><SUB>1</SUB></SPAN> through <SPAN CLASS="MATH"><I>B</I><SUB>k</SUB></SPAN> where <!-- MATH
 $F_{k-1} < n \le F_{k}$
 --><SPAN CLASS="MATH"><I>F</I><SUB>k - 1</SUB> &lt; <I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2750img1.png ALT="$ \le$"><I>F</I><SUB>k</SUB></SPAN>. This means the number 33 can be expressed as follows:<P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">33 = 1<SUP> . </SUP>1 + 0<SUP> . </SUP>2 + 1<SUP> . </SUP>3 + 0<SUP> . </SUP>5 + 1<SUP> . </SUP>8 + 0<SUP> . </SUP>13 + 1<SUP> . </SUP>21</SPAN></DIV>or, more compactly<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Fib</I>(33) = 1010101</DIV><P></P><P>Some more examples:<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Fib</I>(18)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>000101</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Fib</I>(6)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>101</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P><P>This mapping is not unique, since the base is not superadditive. Every binary string maps to some integer, and every integer has at least one representation is the Fibonacci base. In summary, instead of using the usual powers of two as base (1,2,4,8,16,32, etc.), we just use the Fibonacci sequence.<P>The most fascinating thing about the binary Fibonacci representation is that there exists for every positive integer a binary sequence that never contains two consecutive `1' digits. These can be found by first decomposing the number using the largest suitable number from the Fibonacci sequence. For example, to compute <SPAN CLASS="MATH"><I>Fib</I>(<I>n</I>)</SPAN>, first find <SPAN CLASS="MATH"><I>k</I></SPAN> such that <!-- MATH
 $F_{k} \le n < F_{k+1}$
 --><SPAN CLASS="MATH"><I>F</I><SUB>k</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2750img1.png ALT="$ \le$"><I>n</I> &lt; <I>F</I><SUB>k + 1</SUB></SPAN>. Now we see that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Fib</I>(<I>n</I>) = <I>Fib</I>(<I>n</I> - <I>F</I><SUB>k</SUB>)&nbsp;|&nbsp;1</DIV><P></P>where `<SPAN CLASS="MATH">|</SPAN>' denotes concatenation. For example, note that <SPAN CLASS="MATH"><I>Fib</I>(3) = 001</SPAN>, and not 11. Anyway, note that the last digit is always `1', because we don't have to keep trailing zeros. This presents an interesting opportunity for constructing a variable-length code for use in a compression algorithm.<P>To see why, consider that you want to use the binary representation using the powers of two as a base for storing variable-length codes:<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Base</I><SUB>2</SUB>(33)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>100001</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Base</I><SUB>2</SUB>(18)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>01001</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Base</I><SUB>2</SUB>(6)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>011</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P><P>Note that the digits are written in the reverse order of what you may be used to. The reason for this will become clear shortly. If we simply concatenate the digits, we find that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Base</I><SUB>2</SUB>(33)<I>Base</I><SUB>2</SUB>(6)<I>Base</I><SUB>2</SUB>(18) = 10000101101001</DIV><P></P><P>It is impossible to uniquely decode this string, since we don't know where the one number ends and the next one begins.<P>Looking at the the Fibonacci-base representation, we see that by appending a `1' to every number's binary representation gives us a decodable sequence:<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Fib</I><SUB>1</SUB>(33)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>10101011</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Fib</I><SUB>1</SUB>(18)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>0001011</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Fib</I><SUB>1</SUB>(6)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>1011</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P>so that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Fib</I><SUB>1</SUB>(33)<I>Fib</I><SUB>1</SUB>(18)<I>Fib</I><SUB>1</SUB>(6) = 1010101100010111011</DIV><P></P><P>Now you can easily tell where one number ends and the next one begins: every time you find two consecutive 1's, you know that you have reached the end of the current number (keep in mind that this `extra' 1 digit does not form part of the value of the number, and is discarded after the end of the number has been determined). This trick won't work with the base-2 representation; try it if you like.<P>This scheme provides us with a way to use fewer bits for representing small numbers. Many compression algorithms use such variable-length codes to encode numbers whenever a smaller number is expected to occur more frequently than a large one, for example the run lengths in a run-length encoder.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will read in a contiguous stream of ASCII `<TT>0</TT>' and `<TT>1</TT>' characters (i.e. ASCII characters number 48 and 49). This stream will be a list of concatenated binary Fibonacci representations, complete with the extra `<TT>1</TT>' appended to each number (as shown above). Note that the input stream uses one byte to store each bit, so you won't see any real compression. The largest number you will be expected to decode will be smaller than 2 to the power 32.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>You must decode each number, and print out the corresponding decimal value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
0101100000011001110101111
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
7 21 3 12 1
</PRE><P>
______________________________________________________
2751||||||false||||||
<P>While working for a somewhat secret government branch involved in the SETI program, you are given a stream of numbers to decode. The colleague that handed you the data mentioned that they suspect the stream is a Frequency Shift Keyed (FSK) modulated signal. Your task is to write a demodulator, so that you can decode the message, and see what the ETs had to say.<P>FSK modulation is the simplest of all modulation techniques. The modulation consists of a number of tones (frequencies) that are used to represent the data that you wish to transmit. For example, if you have four different tones, you can carry two bits of information per tone. Each of the different tones is simply a sine wave of a specific frequency, so that the modulated signal is the concatenation of a number of short snippets of sine waves. The tones are always phase continuous so that there is no discontinuity from one tone to the next. Since you have been given a stream of numbers, we will be working exclusively in the digital domain.<P>The version of FSK that we will be using is somewhat simplified, chosen specifically to ensure that the modulated signal can easily be kept phase continuous. The first parameter that we have to specify is the number of samples used to represent each tone, <SPAN CLASS="MATH"><I>N</I><SUB>s</SUB></SPAN>. For simplicity, this value will be fixed at <SPAN CLASS="MATH"><I>N</I><SUB>s</SUB> = 32</SPAN>. This means that our base tone will complete one sinusoidal cycle in <SPAN CLASS="MATH"><I>N</I><SUB>s</SUB></SPAN> samples. The equation for computing the samples of a tone, <SPAN CLASS="MATH"><I>s</I><SUB>0</SUB><I>s</I><SUB>1</SUB>...<I>s</I><SUB>N<SUB>s</SUB> - 1</SUB></SPAN>, is given as<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>s</I><SUB>i</SUB> = <I>A</I>sin<IMG WIDTH="18" HEIGHT="56" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \left(\vphantom{\frac {2\pi fi}{N_{s}}}\right.$"><IMG WIDTH="44" HEIGHT="56" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle {\frac{2\pi fi}{N_{s}}}$"><IMG WIDTH="18" HEIGHT="56" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \left.\vphantom{\frac {2\pi fi}{N_{s}}}\right)$">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(1)</DIV><P></P>where <SPAN CLASS="MATH"><I>A</I></SPAN> represents the amplitude of the signal, and <SPAN CLASS="MATH"><I>f</I></SPAN> represents the frequency of the tone. To further simplify things, you may assume that <SPAN CLASS="MATH"><I>A</I> = 4096</SPAN>. Note that it becomes more difficult to decode the signal in the presence of noise for larger values of <SPAN CLASS="MATH"><I>f</I></SPAN>, so we will restrict ourselves to the set <SPAN CLASS="MATH"><I>f</I> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$ \in$"> {1, 2, 3, 4}</SPAN>, corresponding to tones 1 through 4. Here's what tone 1 looks like:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="\epsfbox{p2751.eps}"></DIV><P><PRE>
     0   799  1567  2275  2896
  3405  3784  4017  4096  4017
  3784  3405  2896  2275  1567
   799     0  -799 -1567 -2275
 -2896 -3405 -3784 -4017 -4096
 -4017 -3784 -3405 -2896 -2275
 -1567 -799
</PRE><P>The list of numbers above is the actual sample values <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> for tone 1, listed left-to-right, top-to-bottom. Note that the last sample is not zero. This is because equation (1) completes a cycle in <SPAN CLASS="MATH"><I>N</I><SUB>s</SUB> + 1</SPAN> samples, rather than only <SPAN CLASS="MATH"><I>N</I><SUB>s</SUB></SPAN> samples. This definition of equation (1) allows us to simply concatenate two tones while still maintaining phase continuity. The alternative would have required us to integrate the phase over the tone transition, which we'd just as soon avoid.<P>Having defined the tones, it is relatively straightforward to detect the presence of a tone in an arbitrary sequence of numbers. The normalised correlation coefficient is defined as<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>corr</I>(<B>a</B>,<B>b</B>) = <IMG WIDTH="99" HEIGHT="56" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle {\frac{\textbf{a} \cdot \textbf{b}}{\sqrt {\parallel \textbf{a} \parallel
\parallel \textbf{b} \parallel}}}$">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2)</DIV><P></P>where <SPAN CLASS="textbf">a</SPAN> and <SPAN CLASS="textbf">b</SPAN> are vectors. The samples of tone 1, <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN>, where <!-- MATH
 $0 \le i < N_{s}$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$ \le$"><I>i</I> &lt; <I>N</I><SUB>s</SUB></SPAN>, could be used as the vector <SPAN CLASS="textbf">a</SPAN>, while the vector <SPAN CLASS="textbf">b</SPAN> can be formed by taking <SPAN CLASS="MATH"><I>N</I><SUB>s</SUB></SPAN> consecutive values from the sequence that we are trying to decode. Note that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$ \le$"><I>corr</I>(<B>a</B>,<B>b</B>)<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$ \le$">1</SPAN>, with a value of 1 indicating that <B>a</B> and <B>b</B> are identical.<P>Let <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> denote the stream of input <SPAN CLASS="MATH"><I>N</I></SPAN> samples that you wish to decode, where <!-- i < N$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$ \le$"><I>i</I> &lt; <I>N</I></SPAN>. Let <SPAN CLASS="MATH"><IMG WIDTH="21" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$ \bf b_{i}^{}$"></SPAN> denote the subset of <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>, where<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><B>b</B><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \equiv$"> (<I>d</I><SUB>i</SUB>, <I>d</I><SUB>i</SUB> + 1,..., <I>d</I><SUB>i + N<SUB>s</SUB> - 1</SUB>)</DIV><P></P><P>Further, let <SPAN CLASS="MATH"><B>t</B><SUB>f</SUB></SPAN> denote the sequence<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><B>t</B><SUB>f</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \equiv$"> <IMG WIDTH="18" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \left(\vphantom{ A \sin \left(\frac {2\pi f \times (0)}{N_{s}}\ri...
...t), \dots,
A \sin \left( \frac{2\pi f \times (N_{s}-1)}{N_{s}} \right) }\right.$"><I>A</I> sin<IMG WIDTH="18" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \left(\vphantom{\frac {2\pi f \times (0)}{N_{s}}}\right.$"><IMG WIDTH="81" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle {\frac{2\pi f \times (0)}{N_{s}}}$"><IMG WIDTH="18" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \left.\vphantom{\frac {2\pi f \times (0)}{N_{s}}}\right)$">, <I>A</I> sin<IMG WIDTH="18" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \left(\vphantom{ \frac{2\pi f \times (1)} {N_{s}} }\right.$"><IMG WIDTH="81" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle {\frac{2\pi f \times (1)}{N_{s}}}$"><IMG WIDTH="18" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \left.\vphantom{ \frac{2\pi f \times (1)} {N_{s}} }\right)$">,..., <I>A</I> sin<IMG WIDTH="18" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \left(\vphantom{ \frac{2\pi f \times (N_{s}-1)}{N_{s}} }\right.$"><IMG WIDTH="124" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle {\frac{2\pi f \times (N_{s}-1)}{N_{s}}}$"><IMG WIDTH="18" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \left.\vphantom{ \frac{2\pi f \times (N_{s}-1)}{N_{s}} }\right)$"><IMG WIDTH="18" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$\displaystyle \left.\vphantom{ A \sin \left(\frac {2\pi f \times (0)}{N_{s}}\ri...
...t), \dots,
A \sin \left( \frac{2\pi f \times (N_{s}-1)}{N_{s}} \right) }\right)$"></DIV><P></P>so that <SPAN CLASS="MATH"><B>t</B><SUB>f</SUB></SPAN> represents the samples of tone <SPAN CLASS="MATH"><I>f</I></SPAN>. Note that the sequence <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> may start with an arbitrary number of ``non-coding" samples, i.e. samples that are not part of any tone. We have to detect the index where the first tone starts. Assuming that the input <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> represents a noise-free FSK modulated signal, the first tone starts at <SPAN CLASS="MATH"><I>d</I><SUB>k</SUB></SPAN> where <SPAN CLASS="MATH"><I>k</I></SPAN> is the smallest integer such that <SPAN CLASS="MATH"><I>corr</I>(<B>b</B><SUB>k</SUB>,<B>t</B><SUB>f</SUB>) = 1.0</SPAN> (for some <SPAN CLASS="MATH"><I>f</I> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2751img1.png ALT="$ \in$"> {1, 2, 3, 4}</SPAN>). Thus <SPAN CLASS="MATH"><I>k</I></SPAN> represents the index of the start of the first detected tone. From there on, we expect the next tone to be in the vicinity of <SPAN CLASS="MATH"><I>k</I> + <I>N</I><SUB>s</SUB></SPAN>, and the next at <SPAN CLASS="MATH"><I>k</I> + 2<I>N</I><SUB>s</SUB></SPAN>, and so on.<P>In the real world, however, the signal will not be noise-free. This means that the correlation coefficient will not likely be equal to 1.0, even though we are at the correct offset <SPAN CLASS="MATH"><I>k</I></SPAN>. The solution is to look for the maximum correlation value, rather than looking for a perfect correlation value of 1.0. To keep things simple, the first tone of any sequence of tones will be tone 1. This tone should be detected, but not reported, <SPAN CLASS="textit">i.e.</SPAN> the first tone is used as a synchronisation pattern and does not form part of the data payload of the signal.<P>You may assume that the signal consists of contiguous tones after the first tone, <SPAN CLASS="textit">i.e.</SPAN> there are no gaps in the signal. Finally, the signal may end with an arbitrary number of ``non-coding" samples.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input will consist of a sequence of integers, approximately in the range -4096 to 4096, representing the samples <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> of a noisy FSK encoded signal. Due to the noise you may have some values larger than 4096, but the normalisation part of the correlation function will compensate for this.<P><P><BR>Below's a sample input sequence, complete with some non-coding samples at the front and back. The sequence starts with a tone 1, like all signals will. This is followed by tones 2 1 3 2, thus encoding the letter `<TT>I</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>You must detect the position of the synchronisation tone (a tone 1), and decode all subsequent tones. Each tone will give you two bits of information. Thus, tone 1 encodes the binary value `00', tone 2 is `01', tone 3 is `10' and tone 4 is `11'. These bits must be grouped into bytes of 8 bits each (the most significant bit is transmitted first), which must then be displayed as an ASCII string. For this problem, the signal will always be strong compared to the noise component, so that the signal to noise ratio will be a factor of 8 or better.<P><P><BR>The output for the sample input given is the string consisting of the letter `<TT>I</TT>'. Longer input samples will yield more meaningful messages, assuming that the ETs have used the ASCII alphabet (well, they did in Independence Day!).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
     16   511  -458  -510   214           309   438   -46   393   634
    805   -67   363   -21   455          2084  2747  2342  2986  3596
   4118  4183  3993  3328  3600          2033  2346  1113   359  -346
    122 -1369 -2176 -3079 -3892         -4138 -2965 -3715 -4854 -3797
  -4148 -2975 -2469 -2051  -776          -284  1605  3798  4178  3496

   3545  2743  2169    35 -2518         -3921 -4354 -3858 -3664 -1764
  -2063  -335  1064  2881  3839          4313  4395  3415  1588  -452
  -1928 -3392 -3883 -5045 -3315         -3823 -1648   281  1372  1703
   2261  3736  3485  4095  4126          4203  3887  3149  3301  3652
   2648  2098   242   397  -660         -1948 -1339 -2904 -3184 -3992

  -3409 -3710 -3704 -4155 -3840         -2536 -2162 -1566  -586  -400
   2190  3290  4231  2740  1231         -1896 -2897 -4226 -3233  -679
    430  2201  3790  2973  2424          1041 -2005 -3737 -3105 -2457
   -227   834  2763  3490  3375          1749 -1591 -3703 -4251 -3652
  -2841  -520  1838  2493  2964          5059  3739  2899  1980  -305

  -2224 -2853 -3990 -3921 -2710         -3232 -2372   358  1467  2031
   3339  3968  3948  2354  1352           270 -2675 -2007 -4449 -4182
  -4781 -3523 -1299 -1095   618           841   129   266
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
I
</PRE><P>
______________________________________________________
2752||||||false||||||
<P>It is widely known that one-time pad encryption techniques are the only ones that are truly safe. At least, they are as safe as their key distribution mechanisms permit. The one time pad works by sharing a key between the sender and the receiver that is at least as long as the message; this means that if there is no repeating pattern in the key, then all statistical attacks will fail. It is called a one-time pad because any particular key is only ever used once (<SPAN CLASS="textit">i.e.</SPAN> on one message), and then discarded.<P>To illustrate, consider the following simple encryption scheme: Given a message <SPAN CLASS="MATH"><I>m</I>[0]...<I>m</I>[<I>n</I>]</SPAN> and a <SPAN CLASS="MATH"><I>keyk</I>[0]...<I>k</I>[<I>n</I>]</SPAN>, the cyphertext is constructed by adding <SPAN CLASS="MATH"><I>k</I>[<I>i</I>]</SPAN> to <SPAN CLASS="MATH"><I>m</I>[<I>i</I>]</SPAN>, or more accurately, adding <SPAN CLASS="MATH"><I>k</I>[<I>i</I>]</SPAN> to the ASCII code of <SPAN CLASS="MATH"><I>m</I>[<I>i</I>]</SPAN>, and converting the result back to an ASCII character. Here's an example (Note that each symbol of the key is simply a digit between 0 and 9. They represent integers, not ASCII characters):<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">plaintext</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP><texttt>helloworld</texttt></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">key</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP><IMG WIDTH="105" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2752img1.png ALT="$\displaystyle \tt 10362811345$"></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">cyphertext</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP><texttt>ieorq</texttt>(<texttt>xpupi</texttt></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P><P>As long as the key satisfies certain statistical properties, this method is unbreakable, unless the key leaks out. Which, of course, leaves us with the main problem, namely key distribution. What if you could devise a scheme that relied on one-time pad encryption, but that did not require the receiver to have the matching decryption key?<P>Well, someone once thought that they had solved the problem in the following way: Bob wants to send Alice a message, so he encrypts the message using his one-time pad. This is written as <SPAN CLASS="MATH"><I>E</I><SUB>B</SUB>(<I>m</I>)</SPAN>, where <SPAN CLASS="MATH"><I>E</I><SUB>B</SUB>(<SUP> . </SUP>)</SPAN> means Encrypt using Bob's key, and it was applied to the message <SPAN CLASS="MATH"><I>m</I></SPAN>. This means that Alice receives <SPAN CLASS="MATH"><I>E</I><SUB>B</SUB>(<I>m</I>)</SPAN>, but has no way to decode it. So Alice just encrypts the message using her own key by applying <SPAN CLASS="MATH"><I>E</I><SUB>A</SUB>(<SUP> . </SUP>)</SPAN>, and sends it back to Bob, that is, Bob receives <SPAN CLASS="MATH"><I>E</I><SUB>A</SUB>(<I>E</I><SUB>B</SUB>(<I>m</I>))</SPAN>, or <SPAN CLASS="MATH">(<I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>)</SPAN>. Now Bob removes his key by decrypting this message with his own decryption key, so that the result is <SPAN CLASS="MATH">(<I>D</I><SUB>B</SUB><TT>o</TT><I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>)</SPAN>, where <SPAN CLASS="MATH"><I>D</I><SUB>B</SUB>(<SUP> . </SUP>)</SPAN> means Decrypt using Bob's key. If a suitable encryption algorithm is used, these processes commute, thus<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">(<I>D</I><SUB>B</SUB><TT>o</TT><I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>) = (<I>D</I><SUB>B</SUB><TT>o</TT><I>E</I><SUB>B</SUB><TT>o</TT><I>E</I><SUB>A</SUB>)(<I>m</I>) = <I>E</I><SUB>A</SUB>(<I>m</I>)</DIV><P></P>because <SPAN CLASS="MATH"><I>D</I><SUB>B</SUB>(<SUP> . </SUP>)</SPAN> cancels the effect of <SPAN CLASS="MATH"><I>E</I><SUB>B</SUB>(<SUP> . </SUP>)</SPAN>. Now Bob has his own message back, but it is encrypted using Alice's key. This means it is safe for Bob to send it back to Alice, since only Alice can decrypt it. Thus, Alice receives <SPAN CLASS="MATH"><I>E</I><SUB>A</SUB>(<I>m</I>)</SPAN>, and applies her decryption key, so that she ends up with <SPAN CLASS="MATH">(<I>D</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>A</SUB>)(<I>m</I>) = <I>m</I></SPAN>, the original message that Bob sent.<P>There is a subtle flaw in this technique. Your task will be to spot the flaw, and exploit it to decrypt the message without explicitly being given the key. But first, here's two encryption algorithms with the desired commutative property:<P><DL><DT><STRONG><B>XOR encryption:</B></STRONG></DT><DD>Each cyphertext character <SPAN CLASS="MATH"><I>c</I>[<I>i</I>]</SPAN> is obtained by applying<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>c</I>[<I>i</I>] = <I>m</I>[<I>i</I>]&nbsp;XOR&nbsp;<I>k</I>[<I>i</I>].</DIV><P></P><P>Note that this can be done in C or Java using <SPAN CLASS="MATH"><texttt>c</texttt>[<texttt>i</texttt>] = <texttt>m</texttt>[<texttt>i</texttt>]&nbsp;<texttt>k</texttt>[<texttt>i</texttt>]</SPAN>. The XOR operation commutes with itself, so to decrypt the message we see that<BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>c</I>[<I>i</I>]&nbsp;XOR&nbsp;<I>k</I>[<I>i</I>]</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>(<I>m</I>[<I>i</I>]&nbsp;XOR&nbsp;<I>k</I>[<I>i</I>])&nbsp;XOR&nbsp;<I>k</I>[<I>i</I>]</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&nbsp;</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP><I>m</I>[<I>i</I>]&nbsp;XOR&nbsp;(<I>k</I>[<I>i</I>]&nbsp;XOR&nbsp;<I>k</I>[<I>i</I>])</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&nbsp;</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP><I>m</I>[<I>i</I>]</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P>since <SPAN CLASS="MATH"><I>a</I></SPAN> XOR <SPAN CLASS="MATH"><I>a</I> = 0</SPAN>, and <SPAN CLASS="MATH"><I>a</I></SPAN> XOR <SPAN CLASS="MATH">0 = <I>a</I></SPAN>. Thus we can decrypt a message by encrypting it a second time using the exact same key.<P></DD><DT><STRONG><B>Addition in <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2752img1.png ALT="$ \cal {Z}$"><SUB>256</SUB></SPAN>:</B></STRONG></DT><DD>Each cyphertext character <SPAN CLASS="MATH"><I>c</I>[<I>i</I>]</SPAN> is obtained by applying<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>c</I>[<I>i</I>] = (<I>m</I>[<I>i</I>] + <I>k</I>[<I>i</I>])&nbsp;modulo&nbsp;256</DIV><P></P><P>Note that this can be done in C or Java using <SPAN CLASS="MATH"><texttt>c</texttt>[<texttt>i</texttt>] = (<texttt>m</texttt>[<texttt>i</texttt>] + <texttt>k</texttt>[<texttt>i</texttt>])%<texttt>256</texttt></SPAN>. The decryption process works by subtracting the key, or, in <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2752img1.png ALT="$ \cal {Z}$"><SUB>256</SUB></SPAN>, adding its additive inverse, thus<BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">(<I>c</I>[<I>i</I>] + (256 - <I>k</I>[<I>i</I>]))modulo256</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>(<I>m</I>[<I>i</I>] + <I>k</I>[<I>i</I>] + (256 - <I>k</I>[<I>i</I>]))&nbsp;modulo&nbsp;256</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&nbsp;</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP>(<I>m</I>[<I>i</I>] + 256)&nbsp;modulo&nbsp;256</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&nbsp;</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP><I>m</I>[<I>i</I>]</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P><P>In other words, the decryption key <SPAN CLASS="MATH"><I>d</I></SPAN> is computed as <SPAN CLASS="MATH"><I>d</I>[<I>i</I>] = (256 - <I>k</I>[<I>i</I>])</SPAN> modulo 256. If this decryption key is added modulo 256 to encrypted message, the result is the original message.</DD></DL><P>You know that Bob and Alice always use one of these two algorithms. They will either both use XOR, or both use Addition in <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2752img1.png ALT="$ \cal {Z}$"><SUB>256</SUB></SPAN>. They have some external method for deciding which one they will use, and you simply don't have access to that information. All you can do is eavesdrop on all the messages that they exchange.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will receive three messages as input: <SPAN CLASS="MATH"><I>E</I><SUB>B</SUB>(<I>m</I>)</SPAN>, <SPAN CLASS="MATH">(<I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>)</SPAN>, and <SPAN CLASS="MATH">(<I>D</I><SUB>B</SUB><TT>o</TT><I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>)</SPAN>. You have to discover a way of decoding the original message <SPAN CLASS="MATH"><I>m</I></SPAN>. Since you don't know in advance which algorithm they used, you will have to determine that on the fly. The only thing that you do know is that the message <SPAN CLASS="MATH"><I>m</I></SPAN> consists only of letters of the alphabet, plus the punctuation symbols <!-- MATH
 $\texttt{<space>}$
 --><SPAN CLASS="MATH">&lt; <texttt>space</texttt> &gt;</SPAN>, `<TT>.</TT>' and `<TT>,</TT>'.<P>Ignoring white spaces, your input will consist of an arbitrary number of records, each record conforming to the following format:<P><P><BR><TABLE COLS=4><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>E</I><SUB>B</SUB>(<I>m</I>)[0]</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>E</I><SUB>B</SUB>(<I>m</I>)[1]</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>...</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>E</I><SUB>B</SUB>(<I>m</I>)[<I>n</I> - 1]</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>)[0]</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">(<I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>)[1]</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>...</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">(<I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>)[<I>n</I> - 1]</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">(<I>D</I><SUB>B</SUB><TT>o</TT><I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>)[0]</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">(<I>D</I><SUB>B</SUB><TT>o</TT><I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>)[1]</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>...</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">(<I>D</I><SUB>B</SUB><TT>o</TT><I>E</I><SUB>A</SUB><TT>o</TT><I>E</I><SUB>B</SUB>)(<I>m</I>)[<I>n</I> - 1]</SPAN></TD></TR></TABLE><P><P><BR>where <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN> denotes the length of the original message. This is followed by the three encrypted versions of the message, where each character is encoded as a decimal integer in the range 0-255.<P>The original messages have a maximum length of 4096 characters. The input may contain any number of records in this format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your output will be the decoded message, followed by a newline. You must convert the numeric values of the decoded message back into ASCII characters, so that the result is a printable string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
12
  28  13   5  31 79 73  4 79  16   3   6  93
 110 108 107 123 32 36 36 59 117 123 114 125
  26   4   2   8  0 77 87 27  23  20  16  14
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
hello world.
</PRE><P>
______________________________________________________
2753||||||false||||||
<P>
All educated people know that the answer to `Life, the universe, and Everything', is, of course, 42. The problem,
according to the late Douglas Adams, is to understand the question. You will now attempt to come up with a suitable
question to which the answer is 42. (Or the white mice will take your brain home in a jar.)

<P>
You will construct your questions by forming expressions using the first <SPAN CLASS="MATH"><I>N</I></SPAN> integers in sequence, such that your
expression will be of the form

<P>
<!-- MATH
 \begin{displaymath}
1 \ \Box \ 2 \ \Box \ 3 \ \Box \ 4 \ \Box \ \dots \ \Box \ N
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
1&nbsp;<IMG
 WIDTH="17" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2753img1.png
 ALT="$\displaystyle \Box$">&nbsp;2&nbsp;<IMG
 WIDTH="17" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2753img1.png
 ALT="$\displaystyle \Box$">&nbsp;3&nbsp;<IMG
 WIDTH="17" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2753img1.png
 ALT="$\displaystyle \Box$">&nbsp;4&nbsp;<IMG
 WIDTH="17" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2753img1.png
 ALT="$\displaystyle \Box$">&nbsp;...&nbsp;<IMG
 WIDTH="17" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2753img1.png
 ALT="$\displaystyle \Box$">&nbsp;<I>N</I>
</DIV><P></P>

<P>
Each of the boxes represent an operator, which can be any one of the following:

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
Symbol </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Meaning</TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">|</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    concatenate the digits, <SPAN  CLASS="textit">i.e.</SPAN> <TT>2 | 3 = 23</TT></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
   #   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    delete number immediately to the left, <SPAN  CLASS="textit">i.e.</SPAN> <TT>1 + 2 # 3 = 1 + 3</TT></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
   +   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    add left and right numbers, <SPAN  CLASS="textit">i.e.</SPAN> <TT>1 + 2 = 3</TT></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
   -   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    subtract right from left number, <SPAN  CLASS="textit">i.e.</SPAN> <TT>1 - 2 = -1</TT></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
   <SPAN CLASS="MATH"><TT>*</TT></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    multiply left and right numbers, <SPAN  CLASS="textit">i.e.</SPAN> <TT>3 * 4 = 12</TT>
</TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Operator precedence is as follows:

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
Priority </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Symbol(s) </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Associativity</TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>first    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>#</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   unary left</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
second   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    <TT>|</TT>, <TT>*</TT>   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    binary, left-to-right</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
third    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    <TT>+</TT>, <TT>-</TT>  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>     binary, left-to-right
</TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Here's an example sequence, illustrating the operator precedence. Parentheses are used to illustrate which
subexpression will be evaluated during this step:

<P>

<P>
<BR>

<P>
<TT>1 * 2 * 3 * 4 * 5 - (6 # 7) | 8</TT>

<P>

<P>
<BR>

<P>
First, the delete operators are applied, resulting in

<P>

<P>
<BR>

<P>
<TT>1 * 2 * 3 * 4 * 5 - 7 | 8</TT>

<P>

<P>
<BR>

<P>
Next, the multiplies and concatenation operators are evaluated, in left to right order, yielding

<P>

<P>
<BR>

<P>
<TT>  (1 * 2 * 3 * 4 * 5) - (7 | 8)</TT>

<P>
<TT>= 120 - 78</TT>

<P>

<P>
<BR>

<P>
Lastly, the addition and subtraction operators are evaluated, in left to right order, resulting in the desired answer, 42.

<P>
Here's another one, this time it doesn't result in an answer of 42.

<P>

<P>
<BR>
<TT>  1 - 2 # 3 * 4 + 5 | 6 - 7 # 8</TT>

<P>
<TT>= 1 - 3 * 4 + 5 | 6 - 8</TT>

<P>
<TT>= 1 - 12 + 56 - 8</TT>

<P>
<TT>= 37</TT>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input will consist of several integers <SPAN CLASS="MATH"><I>N</I></SPAN> such that <!-- MATH
 $2 \le N \le 12$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2753img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2753img1.png
 ALT="$ \le$">12</SPAN>. You must construct and evaluate all the
possible expressions (as defined above) using the first <SPAN CLASS="MATH"><I>N</I></SPAN> (inclusive) integers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your output will be the number of unique questions resulting in the answer 42.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 5
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0
1
</PRE>

<P>

______________________________________________________
2754||||||false||||||
<p>A very simple encryption scheme which represents a big improvement over a substitution cipher is a delta cipher. Here's how it works: The letters A through Z are given a numerical values starting with 0 and ending with 25. These values aren't necessarily given in that order, but the mapping is one to one. (The trivial mapping where A has value 0, B has value 1, etc. is the default cipher. It's what you use when you don't have anything better.)</p><p>In order to encrypt a message, the differences between successive values are used.<p><ol><li>All characters except letters are transferred to the encrypted message unchanged. <li>When one letter is preceeded by something other than a letter, it is treated as though it had been preceeded by an A. <li>Case both does and does not matter in this encryption scheme. If a letter is originally uppercase, the encrypted version should be uppercase. If it is lowercase, the encrypted version should be lowercase. However, A and a are the same letter. <li>When one letter is preceeded by another, the difference between the two values is the value of the first is subtracted from the second. The letter whose value is equivalent to this difference modulo 26 will replace the second letter in the new text.</ol><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input and Output</A>&nbsp;</FONT></H2><p>The input is merely a sequence of a commands, one per line, and is terminated by an EOF. No line contains more than 10000 characters. There are three command words: ENCRYPT, DECRYPT, and CIPHER. The case of the letters in these words is not important, and each word will be followed by at least one space. Any line which begins with any word other than one of these three commands requires the response "Command not understood."</p><p>The ENCRYPT and DECRYPT commands are self-explanatory. The encrypt command is followed by plain text which needs to be encrypted and the decrypt command is followed by encrypted text which must be put into plain text. Whatever follows one of these two command words should be either encrypted or decrypted using the current cipher. If no cipher has yet been given, you should use the default cipher.</p><p>The CIPHER command should be followed by the twenty-six letters of the alphabet. The order of these letters is important and that order determines the value for each character - the first letter has value 0; the second letter has value 1; etc. There may be spaces and punctuation; these should be ignored; however, this line must have exactly twenty-six letters on it with no repetitions. Any problem requires the response, "Bad cipher. Using default." (And, as indicated, you should actually use the default). If the cipher is understandable, you need to echo it back to the user as shown below, and then use it for all subsequent commands.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
ENCRYPT The quick brown fox leaped over the lazy dog.
CIPHER qwertyuiopasdfghjklzxcvbnm
ENCRYPT The quick brown fox leaped over the lazy dog.
DECRYPT Xsf juwgv fuyzb rcd oaomza nguw xsf olpd evu.
ENCRIPT This won't work!
CIPHER qAZwSXedCRfv   tgbyhnujmikolp
ENCRYPT The quick brown fox leaped over the lazy dog.
DECRYPT Vsh puwgb gibeb rgc ocilda kbiw vsh owag ehh.
CIPHER qwertyuopasdfghjklzxcvbnm
ENCRYPT The quick brown fox leaped over the lazy dog.
DECRYPT Tox qeoui bqxir fjj ltwppz ohjn tox lpzz dls.
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
RESULT:  Tox qeoui bqxir fjj ltwppz ohjn tox lpzz dls.
Good cipher.  Using QWERTYUIOPASDFGHJKLZXCVBNM.
RESULT:  Xsf juwgv fuyzb rcd oaomza nguw xsf olpd evu.
RESULT:  The quick brown fox leaped over the lazy dog.
Command not understood.
Good cipher.  Using QAZWSXEDCRFVTGBYHNUJMIKOLP.
RESULT:  Vsh puwgb gibeb rgc ocilda kbiw vsh owag ehh.
RESULT:  The quick brown fox leaped over the lazy dog.
Bad cipher.  Using default.
RESULT:  Tox qeoui bqxir fjj ltwppz ohjn tox lpzz dls.
RESULT:  The quick brown fox leaped over the lazy dog.
</pre><p>
______________________________________________________
2755||||||false||||||
<p>Some time the programmers have very strange ways to hide their passwords. See for example how Billy "Hacker" Geits hide his password. Billy chooses a string S composed of small Latin letters with length L. Then he makes all L- 1 one-letter left cyclic shifts of the string and takes as a password one prefix of the lexicographically first of the obtained strings (including S). For example let consider the string alabala. The cyclic one-letter left shifts (including the initial string) are:</p><pre>
            alabala
            labalaa
            abalaal
            balaala
            alaalab
            laalaba
            aalabal
</pre><p>and lexicographically first of them is the string aalabal. The first letter of this string is in position 6 in the initial string (the positions in the string are counted from 0).</p><p>Write a program that for given string S finds the start position of the smallest lexicographically one-letter left cyclic shift of this string. If the smallest lexicographically left shift appears more than once then the program have to output the smallest initial position.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Your program has to be ready to solve more than one test case. The first line of the input file will contains only the number T of the test cases. Each of the following T lines will describe one test case - first the length L of the string (5 &lt;= L &lt;= 100000) and then, separated by one space, the string S itself.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output file have to contain exactly T lines with a single number each - the initial position found by your program.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
6 baabaa
7 alabala
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
1
6
</pre><p>
______________________________________________________
2756||||||false||||||
<p>n participants of «crazy tea party» sit around the table.  Each  minute  one
pair of neighbors can  change  their  places.  Find  the  minimum  time  (in
minutes) required for all participants to sit  in  reverse  order  (so  that
left neighbors would become right, and right - left).</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The first line is the amount of tests. Each next  line  contains  one
integer n (1 &lt;= n &lt;= 32767) - the amount of crazy tea participants.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each number n of participants to crazy tea party  print  on  the
standard output, on a separate line,  the  minimum  time  required  for  all
participants to sit in reverse order.</p>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>
3
4
5
6
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
2
4
6
</pre>

<p>

______________________________________________________
2757||||||false||||||
<p>A supermarket has a set <i>Prod</i> of products on sale. It earns a profit p<sub>x</sub> for each product x in <i>Prod</i> sold by a deadline d<sub>x</sub> that is measured as an integral number of time units starting from the moment the sale begins. Each product takes precisely one unit of time for being sold. A selling schedule is an ordered subset of products <i>Sell</i> from <i>Prod</i> such that the selling of each product x in <i>Sell</i>, according to the ordering of Sell, completes before the deadline d<sub>x</sub> or just when d<sub>x</sub> expires. The profit of the selling schedule is <img src=p2757a.gif>. An optimal selling schedule is a schedule with a maximum profit.</p><p>For example, consider the products Prod={a,b,c,d} with (p<sub>a</sub>,p<sub>a</sub>=(50,2), (p<sub>b</sub>,p<sub>b</sub>=(10,1), (p<sub>c</sub>,p<sub>c</sub>=(20,2), and (p<sub>d</sub>,p<sub>d</sub>=(30,1). The possible selling schedules are listed in table 1. For instance, the schedule Sell={d,a} shows that the selling of product d starts at time 0 and ends at time 1, while the selling of product a starts at time 1 and ends at time 2. Each of these products is sold by its deadline. Sell is the optimal schedule and its profit is 80.</p><center><p><img src=p2757b.gif></p></center><p>Write a program that reads sets of products from an input text file and computes the profit of an optimal selling schedule for each set of products.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>A set of products starts with an integer 0 &lt;= n &lt;= 10000, which is the number of products in the set, and continues with n pairs pi di of integers, 1 &lt;= pi &lt;= 10000 and 1 &lt;= di &lt;= 10000, that designate the profit and the selling deadline of the i-th product. White spaces can occur freely in input. Input data terminate with an end of file and are guaranteed correct.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each set of products, the program prints on the standard output the profit of an optimal selling schedule for the set. Each result is printed from the beginning of a separate line.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
4  50 2  10 1   20 2   30 1

7  20 1   2 1   10 3  100 2   8
2
5 20  50 10
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
80
185
</pre>The sample input contains two product sets. The first set encodes the products from table 1. The second set is for 7 products. The profit of an optimal schedule for these products is 185.<p>
______________________________________________________
2758||||||false||||||
<p>Frodo must accomplish a noble and difficult mission, he must destroy a
magic and wicked ring. In this quest, he must travel to a dangerous place
called Modor and throw the ring into a crevice of fire. He has left home
for some time and is currently following a straight and quite long road
that has bushes from place to place. Being very tired Frodo thinks he would
better have some rest. The only safe place along the road is a bush the
position of which can be computed using a magic formula that uses the value
P that is the product of the distances between pairs of adjacent bushes
along the road. Unfortunately what Frodo knows are only the distances
between every pair of bushes along the road and the magic formula, but he
doesn't know the value of P. Can you help him in this respect?</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The program input is from a text file. Each data set in the file stands  for
a particular set of distances between pairs of bushes on the road  Frodo  is
traveling along. Each data set starts with the number of distances  followed
by the distances in nondecreasing order. White spaces can  occur  freely  in
the input.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each set of data the program computes the value of P  to  the
standard output from the beginning of  a  separate  line.  If  P  cannot  be
computed from the data set the output is "No solution".</p>

<p>It is known that there are at least two bushes and at most 1000 bushes
along the road. Moreover, the value of P cannot exceed 109.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>
6
1 2  2   3 3 5

3
1 2 2
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<pre>
4
No solution
</pre>

In sample the second data does not accept a solution. The bush positions
along the road cannot be deduced from the data and therefore the distances
between adjacent points cannot be computed.


<p>

______________________________________________________
2759||||||false||||||
<p>A subsequence of a given sequence is the given sequence with some elements (possible none) left out. Given a sequence X = &lt;x1, x2, ..., xm&gt; another sequence Z = &lt;z1, z2, ..., zk&gt; is a subsequence of X if there exists a strictly increasing sequence &lt;i1, i2, ..., ik&gt; of indices of X such that for all j = 1,2,...,k, xij = zj. For example, Z = &lt;a, b, f, c&gt; is a subsequence of X = &lt;a, b, c, f, b, c&gt; with index sequence &lt;1, 2, 4, 6&gt;. Given two sequences X and Y the problem is to find the length of the maximum-length common subsequence of X and Y.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The program input is from a text file. Each data set in the file contains two strings representing the given sequences. The sequences are separated by any number of white spaces. The input data are correct.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each set of data the program prints on the standard output the length of the maximum- length common subsequence from the beginning of a separate line.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
abcfbc         abfcab
programming    contest
abcd           mnp
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
4
2
0
</pre><p>
______________________________________________________
2760||||||false||||||
<p>A power network consists of nodes (power stations, consumers and dispatchers) connected by power transport lines. A node u may be supplied with an amount s(u) &gt;= 0 of power, may produce an amount 0 &lt;= p(u) &lt;= pmax(u) of power, may consume an amount 0 &lt;= c(u) &lt;= min(s(u),cmax(u)) of power, and may deliver an amount d(u)=s(u)+p(u)-c(u) of power. The following restrictions apply: c(u)=0 for any power station, p(u)=0 for any consumer, and p(u)=c(u)=0 for any dispatcher. There is at most one power transport line (u,v) from a node u to a node v in the net; it transports an amount 0 &lt;= l(u,v) &lt;= lmax(u,v) of power delivered by u to v. Let <img src=p2760a.gif> be the power consumed in the net. The problem is to compute the maximum value of Con.</p><center><p><img src=p2760b.gif></p></center><p>An example is in figure 1. The label x/y of power station u shows that p(u)=x and pmax(u)=y. The label x/y of consumer u shows that c(u)=x and cmax(u)=y. The label x/y of power transport line (u,v) shows that l(u,v)=x and lmax(u,v)=y. The power consumed is Con=6. Notice that there are other possible states of the network but the value of Con cannot exceed 6.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>There are several data sets in the input text file. Each data set encodes a power network. It starts with four integers: 0 &lt;= n &lt;= 100 (nodes), 0 np &lt;= n (power stations), 0 &lt;= nc &lt;= n (consumers), and 0 &lt;= m &lt;= n<super>2</super> (power transport lines). Follow m data triplets (u,v)z, where u and v are node identifiers (starting from 0) and 0(z(1000 is the value of lmax(u,v). Follow np doublets (u)z, where u is the identifier of a power station and 0 &lt;= z &lt;= 10000 is the value of pmax(u). The data set ends with nc doublets (u)z, where u is the identifier of a consumer and 0 &lt;= z &lt;= 10000 is the value of cmax(u). All input numbers are integers. Except the (u,v)z triplets and the (u)z doublets, which do not contain white spaces, white spaces can occur freely in input. Input data terminate with an end of file and are correct.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each data set from the input, the program prints on the standard output the maximum amount of power that can be consumed in the corresponding network. Each result has an integral value and is printed from the beginning of a separate line.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2 1 1 2 (0,1)20 (1,0)10 (0)15 (1)20
7 2 3 13 (0,0)1 (0,1)2 (0,2)5 (1,0)1 (1,2)8
(2,3)1 (2,4)7
(3,5)2 (3,6)5 (4,2)7 (4,3)5 (4,5)1 (6,0)5
(0)5 (1)2 (3)2 (4)1 (5)4
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
15
6
</h2>

<p>The sample input contains two data sets. The first data  set  encodes  a
network with 2 nodes, power station 0 with pmax(0)=15 and  consumer  1  with
cmax(1)=20, and 2 power transport lines with lmax(0,1)=20 and  lmax(1,0)=10.
The maximum value of Con is 15. The second  data  set  encodes  the  network
from figure 1.</p>

<p>
______________________________________________________
2761||||||false||||||
<p>A mathematician kept all his documents in a file cabinet near his desk. One day a fire set out in his office and most of his works were badly damaged. Luckily, some of the equations he had solved so many years during his long career were partially preserved. Each equation contained an expression in left side and result in the right. The preserved expressions consisted of all the numbers and brackets, but unfortunately, some of the operators between them were lost in the fire. Another problem was that the results of the equations were scattered and the mathematician was not sure if a certain answer is the result of a certain expression. Your task is to help the mathematician determine if the expressions and the results he was able to save from the fire match one another.</p><p>In order to do this, you are given an expression, containing the integer numbers between 1 and 999, simple mathematical operators (+, -, *, /), brackets, and question marks (?), representing the lost mathematical operators. For every expression given, your only task is to state if an expression can or cannot give the required result. In order to help you, the mathematician has chosen only expressions that have the following restrictions:</p><ol><li>The expressions contain no more than 100 symbols; <li>The brackets enclose no more than 1 operator with his two operands. However, every one of these operands can be an expression in brackets; <li>The constants in the expressions have no sign, i.e. there are no negative numbers in expressions; <li>The maximum number of question marks in the expressions (the lost operators) is less or equal to 10.</ol><p>The calculation should be performed using the following rules:</p><ol><li>The operators * and / are of higher priority than the operators + and -. Parentheses may change the priorities as usually; <li>The operators +, -, *, and / are left associative, meaning that they group from left to right. If a, b and c are numbers: a*b*c = (a*b)*c, a/b/c = (a/b)/c, a/b*c = (a/b)*c, a+b+c = (a+b)+c, a-b+c = (a-b)+c, etc. <li>When dividing two integers, you should ignore the decimal fraction, for example consider the following equations: 2/5=0, 9/5=1, 100/6=16.</ol><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input file contains an integer N - determining the number of equations. Next 2*N lines contain the equations. One equation is defined in two lines. The first line is the expression, defining the left side of the equation; second line is an integer result, defining the right side of the equation. The input lines do not have blanks. The strings representing expressions are guaranteed to have no syntax errors.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For every equation in the input file, write yes or no on separate lines on the standard output. If the expression can give the result, write yes. Otherwise, if the result cannot be achieved, write no.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
3
1?((2*(3*4))+(5+6))
35
1?2*3+4-14
0
1?3*4/5*6+12
11
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
yes
no
no
</pre><p>
______________________________________________________
2762||||||false||||||
<p>Each mapping f of the set {0,1}<super>n</super> of n-dimensional binary vectors to {0,1} is called Boolean function of n variables and denoted by f(x<sub>n</sub>,x<sub>n-1</sub>,...,x<sub>1</sub>). For cryptography some properties of the Boolean functions are interesting. Let denote by B(n,k) the set of n-dimensional binary vectors that have k 1's. The task is for given Boolean function f to find the number of vectors (b<sub>n</sub>,b<sub>n-1</sub>,...,b<sub>1</sub>) from B(n,k) such that f(b<sub>n</sub>,b<sub>n-1</sub>,...,b<sub>1</sub>)=1.</p><p>The Boolean function will be given by its (unique) polynomial modulo 2. In these polynomials the operations addition and multiplication modulo 2 are used, defined as shown in the tables of Fig. 1. In the polynomial of a function any product of m variables x<sub>i1</sub>x<sub>i2</sub>...x<sub>im</sub> could participate or not participate. So the general form of the polynomial for n variables is:</p><center><p>a<sub>0</sub>+a<sub>1</sub>x<sub>1</sub>+a<sub>2</sub>x<sub>2</sub>+a<sub>3</sub>x<sub>2</sub>x<sub>1</sub>+a<sub>4</sub>x<sub>3</sub>+a<sub>5</sub>x<sub>3</sub>x<sub>1</sub>+a<sub>6</sub>x<sub>3</sub>x<sub>2</sub>+a<sub>7</sub>x<sub>3</sub>x<sub>2</sub>x<sub>1</sub>+. . .+a<sub>n</sub>x<sub>n</sub>x<sub>n</sub>-<sub>1</sub>.x<sub>1</sub><p></center><p>where all coefficients a<sub>j</sub>, j=0,1,...,N=2<super>n</super>-1, are 0's or 1's and if the coefficient is equal to 0 we will omit the corresponding product and if it is equal to 1 we just will omit the coefficient. For example, the polynomial of the Boolean function disjunction of 2 variables given on Fig. 2 is 0+1.x<sub>1</sub>+1.x<sub>2</sub>+1.x<sub>2</sub>x<sub>1</sub>=x<sub>1</sub>+x<sub>2</sub>+x<sub>2</sub>x<sub>1</sub>.<center><img src=p2762.gif></center><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Your program has to be ready to solve more than one test case. The first line of the input file will contains only the number T of the test cases. Each of the following T lines will describe one function - first the numbers n and k separated by single space &lt;= 1 &lt;= n &lt;= 18,0 &lt;= k &lt;= n) and then, separated by one more space a string of 2<super>n</super> 0's and 1's that are the coefficients of the corresponding polynomial, ordered as in the general form of the polynomial given above.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output file have to contain T lines with a single number each - the number of vectors found by your program.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
3
2 1 0111
4 2 1000000000000000
5 3 00000000000000000000000000000001
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
2
6
0
</pre><p>
______________________________________________________
2763||||||false||||||
<P>Tim's Theatre is a small movie theatre associated with the global corporation Entertainment and Recreational Amphitheatres, United (ERAU). For years, all ERAU has wanted in Mike's monthly reports is the number of people attending each screening and the total spent on tickets for the screening.<P>Recently, ERAU has decided they want to know how many Adult and Child tickets were sold for each screening as well. Unfortunately, Tim's cashiers have not saved this information. But, since Tim knows he never sells a negative number of tickets and Adult tickets always cost $7 and Child tickets always cost $3, the number of tickets of each kind can be determined.<P>You need to write a program to determine how many Adult and Child tickets were sold for each screening.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input will consist of information for two or more screenings, one screening per line. Each screening's information will consist of two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2763img1.gif ALT="$ \le$"><I>n</I>, <I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2763img1.gif ALT="$ \le$">1000</SPAN>): the number of tickets sold and the total spent on tickets. There will be at least one blank between the numbers and possible blanks at the end of the line. There will be no other characters on the line, and the line length is limited to 80 characters.<P>The last line of input will be a line with just the values `<TT>0 0</TT>'. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Each line of input should generate a line with the screening number, starting with 1, followed by a colon (`<TT>:</TT>') and the number of Adult and Child tickets in the format shown in the sample output. If the number cannot be determined (because the cashier made a mistake), print a message stating `<TT>cannot determine count</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
20 100
6  30
7 61
100    700
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Screening 1: 10 Adult, 10 Child
Screening 2: 3 Adult, 3 Child
Screening 3: cannot determine count
Screening 4: 100 Adult, 0 Child
</PRE><P>
______________________________________________________
2764||||||false||||||
<P>While actors, directors, and screenwriters work to make good movies, engineers and computer scientists work to make movies look good. Jagged edges can result from problems when the edge of an object does not align perfectly with the edges of the pixels. Consider the group of pixels below with an edge of a polygon shown. If the pixels are just turned on or off, a jagged edge results.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2764a.jpg ALT="\epsfbox{p2764a.eps}"></DIV><P>To reduce the jagged effect, you can antialias the edges of a filled counter-clockwise oriented polygon, by using an appropriate gray-scale for the border pixels. To determine the gray-scale for these border pixels, we need to find the percentage of the area of the pixel falling inside the polygon.<P>We will consider a pixel as being a horizontally aligned, unit square. To simplify the problem, we assume that exactly one polygon edge-segment cuts a target pixel. We are given the coordinate of the point where the edge-segment enters the pixel (entry point), and the point where the edge- segment exits the pixel (exit point) in coordinates relative to the lower-left corner of the pixel. Thus, given these two points, we want to find the area of the pixel to the left of the edge-segment (looking in the direction of the edge-segment).<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2764a.jpg ALT="\epsfbox{p2764b.eps}"></DIV><P>In the diagram above, the entry point is at (0.0, 0.25) and the exit point is at (1.0, 0.5). Your task is to find the area of the pixel to the left of the edge-segment (i.e., the cross-hatched area), which, in this case, is 0.625. If the edge-segment had been specified as going in the opposite direction (i.e., entry and exit points reversed) the area of the pixel to the left of the edge-segment would be the unshaded area, equal to 0.375.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of a data set consists of the <SPAN CLASS="MATH"><I>x</I> -</SPAN> and <SPAN CLASS="MATH"><I>y</I> -</SPAN>coordinate of the entry point of the edge- segment. The second line contains the <SPAN CLASS="MATH"><I>x</I> -</SPAN> and <SPAN CLASS="MATH"><I>y</I> -</SPAN>coordinates of the exit point, which is guaranteed to be non-coincident with the entry point. All <SPAN CLASS="MATH"><I>x</I> -</SPAN> and <SPAN CLASS="MATH"><I>y</I> -</SPAN>coordinates are numbers in the range from 0 to 1, given to a precision of at most 4 decimal places. (Other than in the case of the end-of-data flag, at least one of the <SPAN CLASS="MATH"><I>x</I> -</SPAN> and the <SPAN CLASS="MATH"><I>y</I> -</SPAN>coordinate of each pixel will be either 0 or 1since the entry and exit points lie on the border of the pixel).<P>A coordinate value of (0.5, 0.5) for the entry point flags the end of data, and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each data set there is one line of output in the form<P><P><BR><TT>Pixel <SPAN CLASS="MATH"><I>n</I></SPAN> has area <SPAN CLASS="MATH"><I>a</I></SPAN> to the left of the edge-segment</TT><P><P><BR>where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of the data set (starting at 1), and <SPAN CLASS="MATH"><I>a</I></SPAN> is the calculated area rounded to 4 decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0.25
1 0.5
1 0.5 
0 0.25 
0.5 1 
1 0.5 
0.5 0.5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Pixel 1 has area 0.6250 to the left of the edge-segment 
Pixel 2 has area 0.3750 to the left of the edge-segment 
Pixel 3 has area 0.1250 to the left of the edge-segment
</PRE><P>
______________________________________________________
2765||||||false||||||
<P>
A minor cult, the Earthbound Research in Astrology Union, ERAU, has discovered a solar system 
in a distant galaxy. ERAU believes that on the day this solar system was created, from the 
viewpoint of the inhabitants of the capital city of its only inhabited planet, the sun and all of the 
other planets were perfectly aligned in the sky (making a straight line). ERAU also believes that 
this alignment of planets is very meaningful and that the next time that the sun and all of the 
planets appear to be perfectly aligned again, the universe will end. 

<P>
You must write a program that works out how long the universe has to live (assuming that ERAU's 
belief is correct). It will receive as input the time it takes (in earth days) for each planet to return to 
its original position as viewed from the capital city. (Fortunately, all of the planets take an integral 
number of days to return to their original apparent positions, and the sun appears to orbit the world 
exactly once per day). It should then determine the number of days it will take for the sun and 
planets to all return to their original aligned position. Unfortunately, ERAU isn't sure how many 
planets there are, so they've asked you to write a program to check a number of different possible 
configurations.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to the program will consist of a sequence of solar-system specifications. Each begins 
with a single line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>,  <!-- MATH
 $0 < n \le 50$
 -->
<SPAN CLASS="MATH">0 &lt; <I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2765img1.gif
 ALT="$ \le$">50</SPAN> , being the number of visible planets in 
that solar system. There will then be <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each containing a single integer
<SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN> , <!-- MATH
 $1 \le t_{i} \le 1,000,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2765img1.gif
 ALT="$ \le$"><I>t</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2765img1.gif
 ALT="$ \le$">1, 000, 000</SPAN> , which is the time it takes planet <SPAN CLASS="MATH"><I>i</I></SPAN> to complete one
apparent orbit about the world.

<P>
A solar-system specification with 0 planets is the indication of the end of the input. This line 
should not be processed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
If the planets will realign in 2,147,483,647 days or fewer, your program should print the line  

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH"><I>w</I></SPAN>: THE WORLD ENDS IN <SPAN CLASS="MATH"><I>d</I></SPAN> DAYS</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>w</I></SPAN> is replaced by the solar-system number (the first is 1), and <SPAN CLASS="MATH"><I>d</I></SPAN> is replaced by the number
days until the end of creation.

<P>
If the planets will not realign in the next 2,147,483,647 days, your program should print the line:

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH"><I>w</I></SPAN>: NOT TO WORRY</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>w</I></SPAN> is replaced by the solar-system number.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
10
5
15
3
2
1000
3
4
2029
777
6263
7559
1
1
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1: THE WORLD ENDS IN 30 DAYS
2: THE WORLD ENDS IN 3000 DAYS
3: NOT TO WORRY
4: THE WORLD ENDS IN 1 DAYS
</PRE>

<P>

______________________________________________________
2766||||||false||||||
<P>
The Election and Recall Accounting Unit (ERAU) is holding an election with many
candidates and has decided it would be unfair to list the candidates alphabetically, since
candidates earlier in the alphabet would be earlier on the ballot. Instead, they've adopted the
following listing strategy.

<P>
The candidate names will be ordered lexicographically based on the order of the letters A 
through Z. The order of the letters is not the usual order, but a randomly generated one. One 
such order of the letters might be R, W, Q, O, J, M, V, A, H, B, S, G, Z, X, N, T, C, I, E, K, 
U, P, D, Y, F, L.  Using this ordering, the name ROBERT would come before JOHN (since R 
is earlier in the new alphabet than J) and RHONDA would come before REBECCA (since H 
is earlier in the new alphabet than E). 

<P>
The new alphabetical listing would be used for District 1. But, in District 2, the first candidate 
would be moved to the end of the list and the others would move up one spot in the listing. 
Similarly, in District 3, the first candidate in District 2 would be moved to the end of the list, 
and the others would be moved up. This pattern of moving the first candidate to the bottom of 
the list would continue in all districts. So, if the candidates were ROBERT, JOHN, 
RHONDA, and REBECCA, they would appear on the ballots in the order given:

<P>

<P>
<BR>
District 1:  ROBERT, RHONDA, REBECCA, JOHN

<P>
District 2:  RHONDA, REBECCA, JOHN, ROBERT

<P>
District 3:  REBECCA, JOHN, ROBERT, RHONDA

<P>
District 4:  JOHN, ROBERT, RHONDA, REBECCA

<P>
District 5:  ROBERT, RHONDA, REBECCA, JOHN

<P>

<P>
<BR>
To assist voters in finding their choice, ERAU wants you to write a program to tell voters 
where to find their candidates. You will be given the new alphabet, a list of candidates, and 
then a list of candidate-district pairs, and you have to tell where on the ballot in the given 
district the candidate appears. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 
The input to this program will begin with a line of 26 uppercase letters, representing the new 
alphabet. Each letter will appear exactly one time. 

<P>
The next section will list the candidates. The first line will contain a single, non-negative 
integer, <SPAN CLASS="MATH"><I>c</I></SPAN>, <!-- MATH
 $1 \le c \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2766img1.gif
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2766img1.gif
 ALT="$ \le$">1000</SPAN>, representing the number of candidates. There will then be <SPAN CLASS="MATH"><I>c</I></SPAN> lines,
each with a candidate's name consisting of 1 to 80 uppercase characters. No two candidates 
will have the same name. 

<P>
The last section will consist of names the voters want to find (again, 1 to 80 uppercase 
characters), a semicolon, and an integer, being the district of the voter. The last name in the 
file will have district 0 and should not be processed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each name in the last section of input, tell which position the name will be in on the ballot 
of the given district. The first position is position number 1. If a name is not in the list of 
names, you should print a message that the name is not on the ballot. Use the wording and 
formatting in the sample output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
RWQOJMVAHBSGZXNTCIEKUPDYFL 
4 
ROBERT 
JOHN 
RHONDA 
REBECCA 
JOHN;1 
REBECCA;3 
ARNOLD;2 
ROBERT;21562 
SCHWARZENEGGER;0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
District 1: JOHN is candidate 4 
District 3: REBECCA is candidate 1 
District 2: ARNOLD is not on the ballot 
District 21562: ROBERT is candidate 4
</PRE>

<P>

______________________________________________________
2767||||||false||||||
<P>Starlet O'Hara is an up-and-coming actress. She believes it's not what you know but whom you know, and goes to numerous Hollywood parties to meet A-list people. Unfortunately, there are lots of other people at these parties and Starlet doesn't want to waste time meeting with them. Fortunately, Starlet has a friend who will get her copies of charts telling where each person will be most likely to be found at a party. She wants you to write a program to tell her how many groups of A-list people will be at each party.<P>The descriptions of the parties will be a rectangular grid, with a single character telling what type of person is expected to be in a place. These may be any uppercase letter. If no one is in a place, a period (`<TT>.</TT>') will be in the grid. Starlet is only interested in A-list celebrities, who are represented by the letter `<TT>A</TT>'. To decide which party to go to, she wants to know how many four-connected groups of <TT>A</TT>'s there are. A group of letters is four-connected if each cell in the group is a horizontal or vertical neighbor of another cell in the same group. Since Starlet wants to make the best use of her time, she does not want to count any group with fewer than 3 people.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of each data set is respectively the number of rows in the grid ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2767img1.gif ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2767img1.gif ALT="$ \le$">100</SPAN>) and the number of columns in the grid (<!-- MATH
 $0 < c \le 100$
 --> <SPAN CLASS="MATH">0 &lt; <I>c</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2767img1.gif ALT="$ \le$">100</SPAN>). The following <SPAN CLASS="MATH"><I>r</I></SPAN> lines contain c characters, either an uppercase letter or `<TT>.</TT>'. The last data set is signaled by <SPAN CLASS="MATH"><I>r</I></SPAN> being 0, and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each data set should generate a line looking like `<TT>Party <SPAN CLASS="MATH"><I>n</I></SPAN> has <SPAN CLASS="MATH"><I>m</I></SPAN> A-list groups</TT>' where <SPAN CLASS="MATH"><I>n</I></SPAN> is the current data set (starting at 1), and <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of 4-connected groups of <TT>A</TT>'s with 3 or more members found in the current grid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 5
AAABA
A..BA
A...A
ACA.A
5 5
AA.AA
ABA.A
BAA.A
CCC.A
BAAA.
0 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Party 1 has 2 A-list groups
Party 2 has 4 A-list groups
</PRE><P>
______________________________________________________
2768||||||false||||||
<P>
We all know how movies tend to follow trendsóone year may see lots of asteroid movies while
the next will have lots of alien attack movies. There are also trends in movie names. XXX<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> is 
scheduled for a 2005 release, so a Hollywood pundit has determined that the next trend in movies 
will be using equations as their names. But this causes a real problem for those loyal employees 
who have to create the marquees. You are to write a program to help them.

<P>
Programmers are used to seeing a single-line representation of an equation with the caret symbol 
indicating the elevation of some base to some power (e.g.,  <SPAN CLASS="MATH"><I>x</I></SPAN><code>^</code>2 for the base <SPAN CLASS="MATH"><I>x</I></SPAN> raised to the second
power). Marquee managers are not as familiar with this notation. Your program should transform
the single-line representation into a two-line form that are more amenable to putting on a movie
marquee. So, for example, if the movie title is a line like:

<P>

<P>
<BR>
<code>x^2+3y^2+r</code>

<P>

<P>
<BR>
It would be displayed on the marquee as the two lines:

<P align=center><img src=p2768a.gif>

<P>
That is, the `<code>^</code>' will be removed, and the exponent will be moved to the line above the rest of the
equation. All extra space will be removed from the equation, except that the operators will have
exactly one blank before and after them. Your program should take a movie title in the single line
format and produce the two-line format.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains one or more single-line expressions. Each expression is guaranteed to be
between 1 and 80 characters long. An expression is defined by the following BNF:

<P>
<BR>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<!-- MATH
 \begin{eqnarray*}
<expression> & \rightarrow &   <term>  \{ <operator>  <term> \} \\
<operator> &  \rightarrow  & \mbox{`{\tt +}'} \mid  \mbox{`{\tt *}'} \\
<term>  &  \rightarrow  &  <base>  [ \mbox{`{\tt\^{}}'}   <exponent> ] \\
<base>  &  \rightarrow  &  <unsigned \ integer> \mid [<unsigned \ integer>]  <character> \\
<exponent> &  \rightarrow &   [ \mbox{`{\tt -}'} \mid \mbox{`{\tt +}'} ]  <unsigned \ integer>
\end{eqnarray*}
 -->
<TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%">
<TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&lt; <I>expression</I> &gt;</TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG
 WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2768img1.gif
 ALT="$\displaystyle \rightarrow$"></TD>
<TD ALIGN="LEFT" NOWRAP>&lt; <I>term</I> &gt; { &lt; <I>operator</I> &gt; &lt; <I>term</I> &gt; }</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&lt; <I>operator</I> &gt;</TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG
 WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2768img1.gif
 ALT="$\displaystyle \rightarrow$"></TD>
<TD ALIGN="LEFT" NOWRAP>`<TT>+</TT>' | `<TT>*</TT>'</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&lt; <I>term</I> &gt;</TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG
 WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2768img1.gif
 ALT="$\displaystyle \rightarrow$"></TD>
<TD ALIGN="LEFT" NOWRAP>&lt; <I>base</I> &gt; [`<TT>^</TT>' &lt; <I>exponent</I> &gt; ]</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&lt; <I>base</I> &gt;</TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG
 WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2768img1.gif
 ALT="$\displaystyle \rightarrow$"></TD>
<TD ALIGN="LEFT" NOWRAP>&lt; <I>unsigned</I>&nbsp;<I>integer</I> &gt; | [ &lt; <I>unsigned</I>&nbsp;<I>integer</I> &gt; ] &lt; <I>character</I> &gt;</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&lt; <I>exponent</I> &gt;</TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG
 WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2768img1.gif
 ALT="$\displaystyle \rightarrow$"></TD>
<TD ALIGN="LEFT" NOWRAP>[`<TT>-</TT>' | `<TT>+</TT>'] &lt; <I>unsigned</I>&nbsp;<I>integer</I> &gt;</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
</TABLE></DIV>
<BR CLEAR="ALL"><P></P>

<P>
In English, an expression is a term, followed by zero or more operator/term pairs. An operator is
either `<TT>+</TT>' or `<TT>*</TT>'. A term is a base, followed optionally by a caret `<TT>^</TT>' and an exponent. An
exponent is an integer with an optional sign. A base is either an unsigned integer or an optional
unsigned integer, followed by a single character.

<P>
There may be blanks before or after any elements of an expression. A character is a single lower
case letter and an integer is any collection of 1 or more digits.

<P>
The end of the input data is marked by the end of the file. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 
For each single-line expression in the input, output a two-line representation of the expression. 
The first line will contain the <!-- MATH
 $<exponent>$
 -->
<SPAN CLASS="MATH">&lt; <I>exponent</I> &gt;</SPAN> elements, with a leading sign only if the exponent is
negative. The first character of the exponent should be aligned immediately to the right of the 
right-most character of its base. The last character of the exponent should be aligned immediately 
to the left of the blank in front of a following operator (if there is one). The second line will 
contain the <!-- MATH
 $<operator>$
 -->
<SPAN CLASS="MATH">&lt; <I>operator</I> &gt;</SPAN> and <SPAN CLASS="MATH">&lt; <I>base</I> &gt;</SPAN> elements. There should be a blank immediately before and
after each operator. There should be no blanks at the ends of lines. An empty line should be 
printed after each two-line representation. 

<P>
Since blanks cannot be read by the marquee manager, you should print a period (`<TT>.</TT>') everywhere
there should logically be a blank.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
x^2+y^2   +r
      x +  2 ^ 2  +0^1*  3^+3
123^2+12b^-12+c^+12
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
.2....2
x..+.y..+.r
 .....2....1....3
x.+.2..+.0..*.3
 ...2......-12....12
123..+.12b....+.c
</PRE>


<P>

______________________________________________________
2769||||||false||||||
<P>Yes, with <SPAN CLASS="textit">The Matrix Revolutions</SPAN> due in theaters next month, it's time to worry about the plot to The Matrix: 4. And what could be more exciting than computer programming? So, a scriptwriter has asked you to help create an interpreter for a new programming language, the Foo Language, or just FooL for short. Each FooL program will run on a 2 dimensional fixed-size matrix of cells. There is a single pointer, which moves over the matrix. At the beginning of every program, the array is initialized to all zeroes, and the pointer points at the element at the upper left, called position [0, 0]. A matrix with 2 rows and 4 columns would initially look like:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2769.jpg ALT="\epsfbox{p2769.eps}"></DIV><P>where the shaded cell indicates the location of the pointer. A FooL program is a sequence of one or more FooL instructions. There are a number of different types of FooL instructions.<P><P><BR><SPAN CLASS="textbf">Movement instructions</SPAN><P>The pointer can be moved using the following instructions:<P><PRE><TT>
<TT>&gt;</TT>          Move the pointer one cell to the right (do not change the row). 
<BR><TT>&lt;</TT>          Move the pointer one cell to the left (do not change the row). 
<BR><TT>^</TT>          Move the pointer to the cell above (do not change the column). 
<BR><TT>v</TT>          Move the pointer to the cell below (do not change the column).
</TT></PRE><P>Since there is no escaping the matrix, the pointer will wrap-around when it reaches the edge of the matrix. For example, in the matrix above, the instruction ^ will move the pointer to row 1, column 0 and the instruction <SPAN CLASS="MATH">&lt;</SPAN> after that would move it to row 1, column 3.<P><P><BR><SPAN CLASS="textbf">Data instructions</SPAN><P>FooL can access and change the data under the pointer:<P><PRE><TT>
<TT>+</TT>          Increment the content of the location at the pointer by 1. 
<BR><TT>-</TT>          Decrement the content of the location at the pointer by 1. 
<BR><TT>=(<SPAN CLASS="MATH"><I>r</I></SPAN>,<SPAN CLASS="MATH"><I>c</I></SPAN>)</TT>     Copy the value at location <SPAN CLASS="MATH">[<I>r</I>, <I>c</I>]</SPAN> to the location pointed to by the pointer. 
<BR>
You may assume the location <SPAN CLASS="MATH">[<I>r</I>, <I>c</I>]</SPAN> is within the bounds of the matrix. 
<BR>
</TT></PRE>

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Input and output instructions</SPAN>

<P>
FooL can do input and output to the location at the pointer:

<P>
<PRE><TT>
<TT>I</TT>          Store input to the location pointed by the pointer 
<BR><TT>O</TT>          Output the integer value of value in the location at the pointer 
<BR><TT>A</TT>          Output the value in the location at the pointer interpreted as an
           ASCII character. 
<BR>
If the value in the cell is less than 32 or greater than 126, print an underscore (`<TT>_</TT>').
</TT></PRE>

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Control structures</SPAN>

<P>
FooL has an if statement and while loop. The if statement has the structure:

<P>
<PRE><TT>
		  <TT>?</TT> <SPAN CLASS="MATH"><I>if</I> - <I>clause</I></SPAN> <TT>:</TT> <!-- MATH
 $else-clause$
 -->
<SPAN CLASS="MATH"><I>else</I> - <I>clause</I></SPAN> <TT>X</TT>
</TT></PRE>

<P>
If the location under the pointer is non-zero, the instructions between the `<TT>?</TT>' and `<TT>:</TT>' are executed,
and then control passes to the instruction following the `<TT>X</TT>'. If the location under the pointer is
zero, the instructions between the `<TT>:</TT>' and the `<TT>X</TT>' are executed. For example, if the location under
the pointer has the value 3,

<P>

<P>
<BR>

<TT>?O­:+OX</TT>

<P>

<P>
<BR>
will output 3 and subtract one from the location. If the value under the pointer is 0, then that
value would be incremented, and the program would output 1.

<P>
The while statement has the structure:

<P>
<PRE><TT>
		 <TT>W</TT> <!-- MATH
 $statements$
 -->
<SPAN CLASS="MATH"><I>statements</I></SPAN> <TT>X</TT>
</TT></PRE>

<P>
While the location under the pointer is non-zero, the statements between the `<TT>W</TT>' and `<TT>X</TT>' are
executed. The condition is checked before each iteration of the statements. For example, if the
value under the pointer is 3,

<P>

<P>
<BR>

<TT>WO­X</TT>

<P>

<P>
<BR>
will output successively 3, 2, 1, and the value 0 will be under the pointer.

<P>
An `<TT>X</TT>' will match with the nearest unmatched `<TT>?</TT>' or `<TT>W</TT>' preceding the `<TT>X</TT>'.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Syntax issues</SPAN>

<P>
Of course, there can be comments in a FooL program. Comments are included in pairs of
exclamation marks. Everything from the first exclamation point to the second, inclusive, will be
ignored by FooL. A FooL program may have any amount of embedded white space, so the FooL
instruction `<TT>?O-:+OX</TT>' could also be written:

<P>
<PRE>
?  ! if pointing at value not equal to 0 !
  O-  ! Print the value and subtract 1 !
:  ! otherwise !
  +
  O  ! Add first, then print !
X ! End the while statement !
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file for this program will contain one or more data sets. The first line of a data set
contain four integer values <SPAN CLASS="MATH"><I>R</I></SPAN>, <SPAN CLASS="MATH"><I>C</I></SPAN>, <SPAN CLASS="MATH"><I>P</I></SPAN>, <SPAN CLASS="MATH"><I>I</I></SPAN>, separated by white space, with  <SPAN CLASS="MATH">0 &lt; <I>R</I></SPAN>, <SPAN CLASS="MATH"><I>C</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2769.jpg
 ALT="$ \le$">50</SPAN> ,
<!-- MATH
 $0 < P \le 1000$
 -->
<SPAN CLASS="MATH">0 &lt; <I>P</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2769.jpg
 ALT="$ \le$">1000</SPAN> , and  <!-- MATH
 $0 \le I \le 1000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2769.jpg
 ALT="$ \le$"><I>I</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2769.jpg
 ALT="$ \le$">1000</SPAN> . <SPAN CLASS="MATH"><I>R</I></SPAN> and <SPAN CLASS="MATH"><I>C</I></SPAN> indicate the number of rows and columns of the matrix.
Integer <SPAN CLASS="MATH"><I>P</I></SPAN> indicates the length of the program in lines, and <SPAN CLASS="MATH"><I>I</I></SPAN> indicates the number of lines in the
input data. After the first line of each data set, there will be <SPAN CLASS="MATH"><I>P</I></SPAN> lines (each with fewer than 81
characters) containing the FooL program to be interpreted. The next <SPAN CLASS="MATH"><I>I</I></SPAN> lines will each contain one
input value, <SPAN CLASS="MATH"><I>n</I></SPAN>, with  <!-- MATH
 $0 \le n \le 200$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2769.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2769.jpg
 ALT="$ \le$">200</SPAN>.

<P>
The given FooL programs are guaranteed to reach termination, are syntactically correct, will not
generate erroneous conditions. There will always be enough input to run the program and there
might be more than is necessary for the program to reach its conclusion.

<P>
The end of the data sets is represented by the end of the input file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Each data set should produce a line looking like:

<P>

<P>
<BR>

<TT>Program</TT> <SPAN CLASS="MATH"><I>n</I></SPAN><TT>:</TT>

<P>

<P>
<BR>
Where <SPAN CLASS="MATH"><I>n</I></SPAN> is a sequential number (starting at 1 for the first input data set). This will be followed by
the FooL program output characters on a single line, without separators. You should include a
blank line after each data set.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 2 1 1
IWO-X
3
1 2 1 12
IW&gt;IA&lt;-X
11
72
101
108
108
111
32
87
111
114
108
100
2 2 13 1
! A program to compute the sum of 1 ..n !
I  !  Read n !
&gt;=(0,0)  ! Copy to counter !
W
-v&lt;      ! Decrement counter !
=(0,1)
   W      ! Add counter to sum !
     ^+^
     -
   X
&lt;v
X
&lt;O     ! Print results !
12
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Program 1:
321

Program 2:
Hello World

Program 3:
78
</PRE>

<P>

______________________________________________________
2770||||||false||||||
<P>
And that he did! Forrest Gump took off running one morning after his beloved Jenny left him and 
was gone for 3 years, 2 months, 14 days, and 16 hours. Those shoes of his were indeed magical 
as his Mama said, and they took him all over North America. When he got tired, he slept. When 
he got hungry, he ate. And when he had to go, well he went. When he was done, he stopped and 
announced "I'm pretty tired ... I think I'll go home now."

<P>
Upon returning home to Greenbow, Alabama, Forrest decided to calculate just exactly how far 
and fast he had run throughout his journey, as well as during each leg along the way. He wasnít 
stupid and had of course kept detailed records throughout because his Mama had always taught 
him that "stupid is as stupid does."

<P>
You will write a program that will let Forrest enter the distances and times of his runs on 
different legs of his journey, and will calculate and print out a summary of the miles, kilometers, 
time, and pace per mile and kilometer of each leg. In addition, the overall distance and time he 
ran will be shown. Since part of his journey was in Canada, the kilometers statistic is very 
important to him. Note that there are 1,609.34 meters in one mile and 1,000 meters in one 
kilometer.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to your program will contain at least one leg of distances and times. The last line in 
each leg is the line `<TT>LAST</TT>' and should not be processed. The end of all input is indicated by the
line `<TT>END</TT>' and should not be processed. All lines of data from a particular leg consist of one or
more distances followed by a single lowercase letter `<TT>m</TT>' or `<TT>k</TT>'. The letter `<TT>m</TT>' indicates miles,
and the letter `<TT>k</TT>' indicates kilometers. This is followed by a single space, and then the total time
in hours, minutes, and seconds (<TT><SPAN CLASS="MATH"><I>hh</I></SPAN>:<SPAN CLASS="MATH"><I>mm</I></SPAN>:<SPAN CLASS="MATH"><I>ss</I></SPAN></TT>). There will always be less than 100 total hours in
one leg.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The program should print a summary in tabular format as shown on the next page. Include
headings on the first line for the miles, kilometers, time, pace/mile, and pace/km of each leg. This
is followed by a blank line and then the label `<TT>Leg</TT>', followed by the leg number and
corresponding statistics for that particular leg. All pace output should be in the format
<TT><SPAN CLASS="MATH"><I>hh</I></SPAN>:<SPAN CLASS="MATH"><I>mm</I></SPAN>:<SPAN CLASS="MATH"><I>ss</I></SPAN></TT>. You may assume that all paces will be less than 100 hours. Lastly, print a blank line
followed by a line with the overall distance for all legs in miles and kilometers and a line with the
overall time spent running in days, hours, minutes, and seconds (<TT><SPAN CLASS="MATH"><I>dd</I></SPAN>:<SPAN CLASS="MATH"><I>hh</I></SPAN>:<SPAN CLASS="MATH"><I>mm</I></SPAN>:<SPAN CLASS="MATH"><I>ss</I></SPAN></TT>). You may
assume the total time will be less than 100 days.

<P>
All data output should be left justified. Output distances to two decimal points. All data output
should be lined up in columns, as shown in the sample output. (You don't need to use the exact
number of spaces, but you should have columns lined up along their left edges and at least one
space between data items.)  Your output should not be more than 80 columns wide.  Column
headers should be aligned above the data for their columns.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3.1m 00:24:44
LAST
8k 00:41:41
8k 00:39:53
8k 00:41:00
3.1m 00:24:14
3.1m 00:23:29
3.1m 00:23:50
8k 00:39:00
8k 00:39:09
LAST
42k 03:41:44
20m 02:34:11
52.4m 09:00:01
26.2m 04:15:59
100m 19:20:01
LAST
8k 00:30:52
8k 00:29:38
8k 00:30:35
8k 00:29:03
LAST
END
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
          Miles   Km      Time       Pace/mile       Pace/km

Leg1      3.10    4.99    00:24:44   00:07:58        00:04:57
Leg2      34.15   54.97   04:32:16   00:07:58        00:04:57
Leg3      224.70  361.61  38:51:56   00:10:22        00:06:26
Leg4      19.88   32.00   02:00:08   00:06:02        00:03:45

Overall Distance of 281.84 miles (453.57 km)
Overall Time of 01:21:49:04
</PRE>

<P>

______________________________________________________
2771||||||false||||||
<P>
The guys at Delta House are at it again. Theyíve decided to throw the ultimate toga party. Since
they want this to be the best party Faber College has ever seen, they've decided to match up the
men and women attending the party in such a way as to maximize the ìhappiness quotientî. The
happiness quotient contributed by a pairing is determined by the following sequence of rules:

<P>

<OL>
<LI>If a pairing has a man and a woman who like each other, a happiness quotient of 4 is
        contributed to the party.

<P>
</LI>
<LI>Otherwise, if a pairing has a man and a woman who at least tolerate each other, a
        happiness quotient contributed is 3.

<P>
</LI>
<LI>Otherwise, if the woman in a pairing at least tolerates the man, the happiness quotient
        contributed is 2.

<P>
</LI>
<LI>Otherwise, if the man in a pairing at least tolerates the woman, the happiness quotient
        contributed is 1.

<P>
</LI>
<LI>In all other cases, no happiness quotient is contributed.
</LI>
</OL>

<P>
So, if Fred, Bob, and Greg were at the party with Janet, Mary, Cindy, and Dianne, and the
following preference facts were known:

<P>

<UL>
<LI>  Fred likes Janet
</LI>
<LI>  Fred likes Mary
</LI>
<LI>  Fred tolerates Cindy
</LI>
<LI>  Bob tolerates Janet
</LI>
<LI>  Greg tolerates Mary
</LI>
<LI>  Janet likes Fred
</LI>
<LI>  Mary tolerates Fred
</LI>
<LI>  Janet tolerates Bob
</LI>
<LI>  Mary likes Bob
</LI>
<LI>  Mary tolerates Greg
</LI>
<LI>  Cindy tolerates Fred
</LI>
<LI>  Cindy likes Bob
</LI>
</UL>

<P>
the highest happiness quotient that the party could have would be 9, obtained by matching Fred
and Janet (4 points) and Greg and Mary (3 points), and Bob and Cindy (2 points).

<P>
Given a number of preference facts, you should determine the maximum happiness quotient that
is possible for a party. Each person can be matched with at most one other person at the party.
There may be a different number of men and women.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of each data set contains a non-negative integer <SPAN CLASS="MATH"><I>n</I></SPAN>, which is the number of rules for
that party. There will then be <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each with three letters on the line, <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB><I>Fc</I><SUB>2</SUB></SPAN>.
Within a rule, the men are identified by lowercase letters (`<TT>a</TT>'-`<TT>z</TT>') and the women are
identified by uppercase
letters  (`<TT>A</TT>'-`<TT>Z</TT>'). Character <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN> will
identify a man and woman (in either order). The <SPAN CLASS="MATH"><I>F</I></SPAN> is
either an `<TT>L</TT>' or `<TT>T</TT>', with `<TT>L</TT>' indicating <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN> likes <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN>,
and `<TT>T</TT>' indicating <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN> tolerates <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN>. (For
example, `<TT>aLB</TT>' represents ``<TT>a</TT> likes <TT>B</TT>" and `<TT>GTg</TT>' represents ``<TT>G</TT>
tolerates <TT>g</TT>".) Each combination <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN> will appear at most one time in the input, so you
do not need to be concerned with conflicting input (e.g., you will not have both `<TT>aLB</TT>' and `<TT>aTB</TT>'
in the same set, but you may have `<TT>aLB</TT>' and `<TT>BTa</TT>', since in the first <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN> = <TT>a</TT>
and in the second <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN> = <TT>B</TT>). There will always fewer than 9 men, and fewer than 9 women.

<P>
The last data set is flagged by the number of rules being zero. This set should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Each data set should generate a single line of output in the form

<P>

<P>
<BR>

<TT>Party <SPAN CLASS="MATH"><I>n</I></SPAN> has a maximum happiness quotient of <SPAN CLASS="MATH"><I>h</I></SPAN></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of the data set (starting at 1), and <SPAN CLASS="MATH"><I>h</I></SPAN> is the
maximum happiness quotient.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
12
fLJ
fLM
fTC
bTJ
gTM
JLf
MTf
JTb
MLb
MTg
CTf
CLb
4
ATa
ATb
aTA
bTA
6
ALa
CLa
CLb
aTA
aLC
bTC
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Party 1 has a maximum happiness quotient of 9
Party 2 has a maximum happiness quotient of 3
Party 3 has a maximum happiness quotient of 6
</PRE>

<P>

______________________________________________________
2772||||||false||||||
<P>Marketing of movies is a multi-million dollar industry. The Educational and Recreational Auxiliaries Unit (ERAU) creates word search puzzles with names of movie characters, actors, and other words to distribute to promote movies. Word search puzzles are grids of letters with words embedded horizontally, vertically, and diagonally. A word can be in the grid either forward or backward, but its letters must be contiguous. Consider the 9 by 9 grid below:<DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2772.jpg ALT="\epsfbox{p2772.eps}"></DIV><P>The words "EWOK," "HUTT," "JABBA," "JARJAR," "JEDI," "SKYWALKER," "WATTO", "YODA" are all in the puzzle (and are shaded).<P>ERAU has had complaints that some of the words they think are in the puzzle can't be found, so they want to find a way to speed up the verification of the puzzles they create. Your job is to write a program to verify the list of words that ERAU has created that can be found in a search puzzle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of a number of puzzle descriptions. The first line of a puzzle description will be an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2772.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2772.jpg ALT="$ \le$">20</SPAN> , being the number of search words. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines will each contain a search word of no more than 80 uppercase letters. The following line will contain two integers separated by white space, <SPAN CLASS="MATH"><I>r</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/p2772.jpg ALT="$ \le$"><I>r</I></SPAN>,<SPAN CLASS="MATH"><I>c</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2772.jpg
 ALT="$ \le$">20</SPAN> , being respectively the number of
rows and the number of columns. The following <SPAN CLASS="MATH"><I>r</I></SPAN> lines will each contain <SPAN CLASS="MATH"><I>c</I></SPAN> uppercase letters. The last
puzzle description has  <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> , and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The first output line for a puzzle should be `<TT>Puzzle number <SPAN CLASS="MATH"><I>n</I></SPAN>:</TT>' where <TT><SPAN  CLASS="textsl">n</SPAN></TT> is
the position of the puzzle in the list (starting at 1). This is followed by a list of the words (one
per line)in the word list that cannot be found in the puzzle, in the same order as they are in the word list.
If all the words on the list can be found in the puzzle, then `<TT>ALL WORDS FOUND</TT>' should be output.
A blank line should separate each puzzleís output from the next.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
9                 
SKYWALKER         
WATTO             
HUTT              
JABBA             
DARTHVADER        
JARJAR            
JEDI              
YODA               
EWOK 
9 9 
AEIOUBCHR 
JEDIODUFE 
AAGHJTKLK 
RQBPTNTML 
JRSBTVWAA 
AYZKAZYXW 
RXOWVADOY 
TWSRQPNMK 
EDFGHJKLS 
2 
ADD 
BAD 
4 4 
AADD 
BBBB 
CCCA 
DDDD 
3 
HELLO
GOODBYE 
NOTFOUND 
5 10 
NEXTLINEBA 
UOYOLLEHKC 
GOODBYEFOR 
NOWWASTHIS 
FUNFORYOUQ 
0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Puzzle number 1: 
DARTHVADER 
 
Puzzle number 2: 
ALL WORDS FOUND 
 
Puzzle number 3: 
NOTFOUND
</PRE> 

<P>

______________________________________________________
2773||||||false||||||
<P>
Little Omri has been playing with his magic cupboard again and has accidentally created a 
parallel universe, complete with stars, planets, people and everything. The people of the planet
Parallearth gazed up at the sky on their first night of existence, and noticed that the stars appear 
to be in groups, which they chose to call <SPAN  CLASS="textsl">constellations</SPAN>. Before the big vote to choose names for 
the constellations, they want to know how many there are, and thatís where you come in.

<P>
The Parallearthlings have taken a photograph of the night sky, which renders all the bright stars 
in a rectangular frame. They then put a regular grid on the photograph so they could determine 
the coordinates of all of the stars. These coordinates have been written down in a list. Your 
program should process that list of two-dimensional coordinates and print out how many 
constellations can be made from the visible stars. 

<P>
There are very simple rules for constructing constellations:

<P>

<OL>
<LI>Every star is in the same constellation as its closest neighbor.
</LI>
<LI>If a star doesnít have a unique closest neighbor-<SPAN  CLASS="textsl">i.e.</SPAN> two or more neighbors are
                  equally close and no others are closer-then it is in the same constellation as all
                  of those closest neighbors.
</LI>
<LI>If <SPAN  CLASS="textsl">A</SPAN> is in the same constellation as <SPAN  CLASS="textsl">B</SPAN>, then <SPAN  CLASS="textsl">B</SPAN> is in the same
              constellation as <SPAN  CLASS="textsl">A</SPAN>.
</LI>
<LI>If <SPAN  CLASS="textsl">A</SPAN> is in the same constellation as <SPAN  CLASS="textsl">B</SPAN>, and <SPAN  CLASS="textsl">B</SPAN> is in the same
              constellation as <SPAN  CLASS="textsl">C</SPAN>, then <SPAN  CLASS="textsl">A</SPAN> is in the same constellation as <SPAN  CLASS="textsl">C</SPAN>.
</LI>
</OL>

<P>
For example, if the following were the picture of the night sky:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2773.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="\epsfbox{p2773.eps}">
</DIV>

<P>
The first constellation consists of  <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \alpha$">1</SPAN>, <SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \beta$">1</SPAN>, <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \gamma$">1</SPAN>, <SPAN CLASS="MATH"><IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \delta$">1</SPAN>, and  <!-- MATH
 $\varepsilon1$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \varepsilon$">1</SPAN>.
Stars <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \alpha$">1</SPAN> and <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \gamma$">1</SPAN> are in the same constellation because <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \gamma$">1</SPAN> is the closest star
to <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \alpha$">1</SPAN> (i.e., by rule 1). Since <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \gamma$">1</SPAN> has three closest neighbors (<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \beta$">1</SPAN>, <SPAN CLASS="MATH"><IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \delta$">1</SPAN>,
and <!-- MATH
 $\varepsilon1$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \varepsilon$">1</SPAN>), all of these are in the same constellation as <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \gamma$">1</SPAN> (by rule 2).
Similarly, <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \alpha$">2</SPAN> is the closest neighbor of <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \gamma$">2</SPAN>, and <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \gamma$">2</SPAN> is the closest neighbor
to <SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \beta$">2</SPAN>, so they are all in the same constellation (by rule 4). Finally, <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \alpha$">3</SPAN> and <SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \beta$">3</SPAN> are
in a third constellation.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to the program will consist of a sequence of universe specifications. Each begins with a
single line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $0 < n \le 1000$
 -->
<SPAN CLASS="MATH">0 &lt; <I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \le$">1000</SPAN>), the number of stars in that universe.
There then follow n lines, each containing two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> (<!-- MATH
 $0 \le x, y \le 9999$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2773.jpg
 ALT="$ \le$">9999</SPAN>), which are the
coordinates of a star on the official photograph.

<P>
The last universe specification has  <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> , and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each universe specification, your program should print a single line that looks like:

<P>

<P>
<BR>

<TT>Universe <SPAN CLASS="MATH"><I>n</I></SPAN> contains <SPAN CLASS="MATH"><I>c</I></SPAN> constellations</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>n</I></SPAN> is replaced by the universe number (the first is 1), and <SPAN CLASS="MATH"><I>c</I></SPAN> is replaced by the number of
constellations.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10
0 1
16 2
1 0
2 6
9 0
4 1
2 2
8 1 
9 3 
15 4 
5 
10 10 
10 11 
20 10 
20 11 
15 5 
0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Universe 1 contains 3 constellations 
Universe 2 contains 1 constellations
</PRE> 

<P>

______________________________________________________
2774||||||false||||||
<P>David, a manager of a world top amazing park - TheBEST, plans to invest $100K to develop an automatic system to calculate the price of the park ticket under various conditions.<P><P><BR>The standard price of TheBEST is 100$ per entry normally. Moreover, to attract more and more tourists, TheBEST published many discounts for the entry ticket. So far, the discount policies include:<OL><LI>40% discount for booking the ticket 30 days in advance (including 30 days). For example, if the ticket of Nov.1 2003 is booked before Oct.3 2003, the price is 60$ </LI><LI>30% discount for booking the ticket 15 days in advance (including 15 days). For example, if the ticket of Nov.1 2003 is booked before Oct.18 2003, the price is 70$ </LI><LI>10% discount for booking the ticket 7 days in advance (including 7 days). For example, if the ticket of Nov.1 2003 is booked before Oct.26 2003, the price is 90$ </LI><LI>10%discount for booking by phone directly. </LI><LI>20% discount for booking by travel agency. </LI><LI>15% discount for booking by online booking system. </LI><LI>10% discount for booking 5-19 tickets per time. </LI><LI>20% discount for booking 20 tickets or above per time. </LI></OL>For one booking transaction, three discount types - advance booking (1, 2, 3), none window booking (4, 5, 6) and group booking (7, 8) can be applied for together. To illustrate the above discount policies, we have the following examples booking by today (Oct.26, 2003).<P><DL><DT><STRONG>Booking 1:</STRONG></DT><DD>1 ticket for Nov.2, 2003 by phone<P><SPAN CLASS="MATH">(1 - 10%)*(1 - 10%)*100 = 81</SPAN>$</DD><DT><STRONG>Booking 2:</STRONG></DT><DD>5 tickets for Dec.1, 2003 by travel agency <SPAN CLASS="MATH">&lt;</SPAN>China-Tour<SPAN CLASS="MATH">&gt;</SPAN><P><SPAN CLASS="MATH">(1 - 40%)*(1 - 20%)*(1 - 10%)*100 = 43.2</SPAN>$</DD><DT><STRONG>Booking 3:</STRONG></DT><DD>30 tickets for Oct.27, 2003 by online system<P><SPAN CLASS="MATH">(1 - 15%)*(1 - 20%)*100 = 68</SPAN>$</DD></DL><P>You task is to write a program to help TheBEST calculate the exact price per ticket for each booking transaction.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several booking transactions in the input file, each transaction per line.<P>A transaction is shown as following format (4 items):<P><P><BR><SPAN CLASS="MATH"><I>BookingDate</I>&nbsp;<I>EntryDate</I>&nbsp;<I>BookingWay</I>&nbsp;<I>Quantity</I></SPAN><P><P><BR>And then, the format for each item is:<P><P><BR><SPAN CLASS="MATH"><I>BookingDate</I></SPAN>: <SPAN CLASS="MATH"><I>MMM</I></SPAN>.<SPAN CLASS="MATH"><I>DD</I>&nbsp;<I>YYYY</I></SPAN><P><SPAN CLASS="MATH"><I>EntryDate</I></SPAN>: <SPAN CLASS="MATH"><I>MMM</I></SPAN>.<SPAN CLASS="MATH"><I>DD</I>&nbsp;<I>YYYY</I></SPAN><P><P><BR>where <SPAN CLASS="MATH"><I>MMM</I></SPAN> represents the month (`<TT>Jan</TT>', `<TT>Feb</TT>', `<TT>Mar</TT>', `<TT>Apr</TT>', `<TT>May</TT>', `<TT>Jun</TT>', `<TT>Jul</TT>', `<TT>Aug</TT>', `<TT>Sep</TT>', `<TT>Oct</TT>', `<TT>Nov</TT>' and `<TT>Dec</TT>'), <SPAN CLASS="MATH"><I>DD</I></SPAN> represents the 2 digits format of the day and <SPAN CLASS="MATH"><I>YYYY</I></SPAN> represents the 4 digits format of the year.<P><P><BR><SPAN CLASS="MATH"><I>Quantity</I></SPAN>: 3 digits from 001 to 999<P><SPAN CLASS="MATH"><I>BookingWay</I></SPAN>: `<TT>phone</TT>' or `<TT>online</TT>' or `<TT>agency <SPAN CLASS="MATH">&lt; <I>S</I> &gt;</SPAN></TT>', where <SPAN CLASS="MATH"><I>S</I></SPAN> is a string shows the agency information (length of <SPAN CLASS="MATH"><I>S</I></SPAN> is within 100).<P><P><BR>When Quantity equals to `<TT>000</TT>', the input file ends.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each booking transaction, output the final price per ticket, one per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Oct.26 2003 Nov.02 2003 phone 001
Oct.26 2003 Dec.01 2003 agency &lt;World Trade Reservation 207548&gt; 005
Oct.26 2003 Oct.27 2003 online 030
Oct.23 2003 Oct.23 2003 online 000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
81
43.2
68
</PRE><P>
______________________________________________________
2775||||||false||||||
<P>For a <SPAN CLASS="MATH"><I>n</I></SPAN>-sided simple polygon, if we know the coordinates of all its n vertices, for example counterclockwise <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>, <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>, ..., <SPAN CLASS="MATH">(<I>x</I><SUB>n</SUB>, <I>y</I><SUB>n</SUB>)</SPAN>, the area of this polygon can be computed by so-called the Surveyor's Formula :<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Area</I> = <IMG WIDTH="12" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left\vert\vphantom{ {1 \over 2} \left(
\left\vert \begin{array}{...
...gin{array}{cc} x_n &amp; x_1 \\  y_n &amp; y_1 \end{array} \right\vert
\right) }\right.$"><IMG WIDTH="17" HEIGHT="54" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle {1 \over 2}$"><IMG WIDTH="19" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left(\vphantom{
\left\vert \begin{array}{cc} x_1 &amp; x_2 \\  y_1 &amp;...
...vert \begin{array}{cc} x_n &amp; x_1 \\  y_n &amp; y_1 \end{array} \right\vert
}\right.$"><IMG WIDTH="12" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left\vert\vphantom{ \begin{array}{cc} x_1 &amp; x_2 \\  y_1 &amp; y_2 \end{array} }\right.$"><IMG WIDTH="71" HEIGHT="60" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \begin{array}{cc} x_1 &amp; x_2 \\  y_1 &amp; y_2 \end{array}$"><IMG WIDTH="12" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left.\vphantom{ \begin{array}{cc} x_1 &amp; x_2 \\  y_1 &amp; y_2 \end{array} }\right\vert$"> + <IMG WIDTH="12" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left\vert\vphantom{ \begin{array}{cc} x_2 &amp; x_3 \\  y_2 &amp; y_3 \end{array} }\right.$"><IMG WIDTH="71" HEIGHT="60" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \begin{array}{cc} x_2 &amp; x_3 \\  y_2 &amp; y_3 \end{array}$"><IMG WIDTH="12" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left.\vphantom{ \begin{array}{cc} x_2 &amp; x_3 \\  y_2 &amp; y_3 \end{array} }\right\vert$"> + <SUP>... </SUP>+ <IMG WIDTH="12" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left\vert\vphantom{ \begin{array}{cc} x_{n-1} &amp; x_n \\  y_{n-1} &amp; y_n \end{array} }\right.$"><IMG WIDTH="91" HEIGHT="60" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \begin{array}{cc} x_{n-1} &amp; x_n \\  y_{n-1} &amp; y_n \end{array}$"><IMG WIDTH="12" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left.\vphantom{ \begin{array}{cc} x_{n-1} &amp; x_n \\  y_{n-1} &amp; y_n \end{array} }\right\vert$"> + <IMG WIDTH="12" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left\vert\vphantom{ \begin{array}{cc} x_n &amp; x_1 \\  y_n &amp; y_1 \end{array} }\right.$"><IMG WIDTH="73" HEIGHT="60" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \begin{array}{cc} x_n &amp; x_1 \\  y_n &amp; y_1 \end{array}$"><IMG WIDTH="12" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left.\vphantom{ \begin{array}{cc} x_n &amp; x_1 \\  y_n &amp; y_1 \end{array} }\right\vert$"><IMG WIDTH="19" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left.\vphantom{
\left\vert \begin{array}{cc} x_1 &amp; x_2 \\  y_1 &amp;...
...vert \begin{array}{cc} x_n &amp; x_1 \\  y_n &amp; y_1 \end{array} \right\vert
}\right)$"><IMG WIDTH="12" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$\displaystyle \left.\vphantom{ {1 \over 2} \left(
\left\vert \begin{array}{cc} ...
...array}{cc} x_n &amp; x_1 \\  y_n &amp; y_1 \end{array} \right\vert
\right) }\right\vert$"></DIV><P></P><P>But what if we only know the lengths of all n edges of a polygon? In the case of <SPAN CLASS="MATH"><I>n</I> = 3</SPAN> (triangle), the area can be determined by the well-known Hero's Formula . However, when <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$ \ge$">4</SPAN>, things become complicated because the area could be greatly affected by the angles, which is illustrated in the following figure:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="\epsfbox{p2775.eps}"></DIV><P>Here comes our problem: given <SPAN CLASS="MATH"><I>n</I></SPAN> sticks of length 1, 2, 3, ...,<SPAN CLASS="MATH"><I>n</I></SPAN>, you are required to construct a <SPAN CLASS="MATH"><I>n</I></SPAN>-sided polygon using these <SPAN CLASS="MATH"><I>n</I></SPAN> sticks as the polygonal edges. And the objective is to arrange the sticks and choose the angles so that the area of this polygon is maximized.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input for this problem contains several configurations, one per line.<P>For each line, there is only one integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2775img1.png ALT="$ \le$">100)</SPAN>.<P>A line with a single `<TT>-1</TT>' indicates the end of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be one real number per line, shows the maximized area, correct to four decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
6
-1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4.8990
29.2490
</PRE><P>
______________________________________________________
2776||||||false||||||

<P>
This year, human being in the world won a tough fight with the new disease - Severe
Acute Respiratory Syndrome (SARS) after long time effort. From the fight, we learnt
the importance of the preparation for coming uncertain events. From the battle with
SARS, the face mask becomes one of the key items in people's mind. Everyone needs
face mask that results in the huge business market of face masks. Besides high quality
masks, their rapid delivery from the suppliers to consumers is required as well.

<P>

<P>
<BR>
Now there is a problem for you to help a transportation company to finish the delivery
task for face masks as soon as possible. Assume that all suppliers and consumers are
located in a linear line such as railway or ship route. Suppliers (or consumers) have
various supplying capacities (consuming requirements) for face mask.  We use
positive (or negative) integer to represent the capacity for supplier (or requirement for
consumer). Moreover, the company has only one vehicle (train or ship), starting in
location zero move back and force along the line to pick up and delivery all suppliers'
products to all consumers on their requirements. Finally, the vehicle should move
back to its initial location zero. In addition, the vehicle has a maximum capacity, so
that the total amount of the face masks on the vehicle can not exceed its maximum
capacity at any time.

<P>

<P>
<BR>
We illustrate an example in the following figure. There are three suppliers S1, S2 and
S3 that located in location -8, 0 and 2 respectively. The supplying capacity for each
supplier is 3, 3 and 2. On the other hand, there are three consumers C1, C2 and C3
that located in location -5, -2 and 9 with the requirements -4, -2 and -2.  The initial
location of the vehicle (assume its maximum capacity is 3) is location 0.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2776.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2776.jpg
 ALT="\epsfbox{p2776.eps}">
</DIV>

<P>
One possible route of the vehicle to finish the task is:

<P>
<DL COMPACT>
<DT>(1)</DT>
<DD>Pick up mask 3 at S2
</DD>
<DT>(2)</DT>
<DD>Move to C3, deliver mask 2 at C3
</DD>
<DT>(3)</DT>
<DD>Move to S3, pick up mask 2 at S3
</DD>
<DT>(4)</DT>
<DD>Move to C2, deliver mask 2 at C2
</DD>
<DT>(5)</DT>
<DD>Move to C1, deliver mask 1 at C1
</DD>
<DT>(6)</DT>
<DD>Move to S1, pick up mask 3 at S1
</DD>
<DT>(7)</DT>
<DD>Move to C1, delver mask 3 at C1
</DD>
<DT>(8)</DT>
<DD>Move back to initial location 0
</DD>
</DL>

<P>
The total distance of the above route is 34.

<P>

<P>
<BR>
If we input the locations, capacities (or requirements) of several suppliers (or
consumers), would you mind help to find an optimal route solution to minimize the
total distance of the route?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several test cases in the input file. Each test case has three parts. The first is
a line of three integers <SPAN CLASS="MATH"><I>S</I></SPAN>, <SPAN CLASS="MATH"><I>C</I></SPAN> and <SPAN CLASS="MATH"><I>P</I></SPAN> to represent the number of suppliers, the number of
consumers and the maximum capacity of the vehicle <!-- MATH
 $(1 \le  S \le 100, 1 \le  C \le 100, 1 \le P \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2776.jpg
 ALT="$ \le$"><I>S</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2776.jpg
 ALT="$ \le$">100, 1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2776.jpg
 ALT="$ \le$"><I>C</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2776.jpg
 ALT="$ \le$">100, 1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2776.jpg
 ALT="$ \le$"><I>P</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2776.jpg
 ALT="$ \le$">100)</SPAN>,
respectively. The second part includes <SPAN CLASS="MATH"><I>S</I></SPAN> lines with two integers each. The first integer
indicates the location of the supplier in the line, and the second one denotes its
supplying capacity. The third part includes <SPAN CLASS="MATH"><I>C</I></SPAN> lines with two integers each. The first
integer represents the location of the consumer in the line, and the second integer
indicates its requirement.

<P>

<P>
<BR>
The input file ends when <SPAN CLASS="MATH"><I>P</I></SPAN> equals zero.

<P>

<P>
<BR>

<B>Note:</B> Assume the sum of all supplying capacities is equal to the absolute value of the
total consumer requirements in all test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case in the input file, just output the minimum total distance of the optimal
solution your program finds in one separate line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 3 3
-8 3
0 3
2 2
-5 -4
-2 -2
9 -2
0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
34
</PRE>

<P>

______________________________________________________
2777||||||false||||||
<P>Finding the longest common subsequence between DNA/Protein sequences is one of the basic problems in modern computational molecular biology. We state the problem formally as follows:<P><P><BR>A sequence <SPAN CLASS="MATH"><I>x</I> = <I>x</I><SUB>1</SUB><I>x</I><SUB>2</SUB>...<I>x</I><SUB>n</SUB></SPAN> over finite set <SPAN CLASS="MATH"><I>P</I></SPAN>={A,B, C, ..., Z} may be any combination of <SPAN CLASS="MATH"><I>n</I></SPAN> characters from <SPAN CLASS="MATH"><I>P</I></SPAN>, e.g. <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> in <SPAN CLASS="MATH"><I>P</I></SPAN> and <SPAN CLASS="MATH"><I>x</I></SPAN> in <SPAN CLASS="MATH"><I>P</I>*</SPAN>. The length of <SPAN CLASS="MATH"><I>x</I></SPAN> is denoted as <SPAN CLASS="MATH">| <I>x</I>| = <I>n</I></SPAN>. Given a sequence <SPAN CLASS="MATH"><I>x</I></SPAN>, we call another sequence <SPAN CLASS="MATH"><I>y</I> = <I>y</I><SUB>1</SUB><I>y</I><SUB>2</SUB>...<I>y</I><SUB>m</SUB></SPAN> a subsequence of <SPAN CLASS="MATH"><I>x</I></SPAN>, if there exists an embedding I= <SPAN CLASS="MATH">(<I>i</I><SUB>1</SUB>, <I>i</I><SUB>2</SUB>,..., <I>i</I><SUB>m</SUB>)</SPAN> so that <!-- MATH
 $1 \le i_{1}<i_{2}<\dots<i_{m} \le |x|$
 --><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2777img1.png ALT="$ \le$"><I>i</I><SUB>1</SUB> &lt; <I>i</I><SUB>2</SUB> &lt; ... &lt; <I>i</I><SUB>m</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2777img1.png ALT="$ \le$">| <I>x</I>|</SPAN> and <SPAN CLASS="MATH"><I>x</I><SUB>ik</SUB> = <I>y</I><SUB>k</SUB></SPAN>, for all <SPAN CLASS="MATH"><I>k</I> = 1, 2,...<I>m</I></SPAN>. In addition, we define <SPAN CLASS="MATH"><I>s</I>(<I>x</I>) = {<I>y</I>| <I>y</I></SPAN> is a subsequence of <SPAN CLASS="MATH"><I>x</I>}</SPAN>.<P>The problem of <SPAN CLASS="MATH"><I>k</I></SPAN>-longest common sequence is that give <SPAN CLASS="MATH"><I>k</I></SPAN> sequences <SPAN CLASS="MATH"><I>x</I>(1), <I>x</I>(2),..., <I>x</I>(<I>k</I>)</SPAN>, find the longest common subsequence <SPAN CLASS="MATH"><I>y</I></SPAN> so that <SPAN CLASS="MATH"><I>y</I></SPAN> in <SPAN CLASS="MATH"><I>s</I>(<I>x</I>(<I>i</I>))</SPAN>, for all <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>k</I></SPAN> and <SPAN CLASS="MATH">| <I>y</I>|</SPAN> is maximized.<P><P><BR>To help you understand the <SPAN CLASS="MATH"><I>k</I></SPAN>-longest common sequence problem more clearly, there is an illustration. For two sequences ``<TT>ATTA</TT>" and ``<TT>CGGC</TT>", their 2-longest common sequence is none with length 0. For three sequences ``<TT>GAACCACGCG</TT>", ``<TT>ACCGAC</TT>" and ``<TT>GCCACCAAGC</TT>", their 3-longets common sequence is ``<TT>ACCAC</TT>" with length 5.<P>Your task is to write a program to help the scientist to find the length of the <SPAN CLASS="MATH"><I>k</I></SPAN>-longest common sequence of a given <SPAN CLASS="MATH"><I>k</I></SPAN> DNA/Protein sequences.<P><P><BR><B>Note:</B> one subsequence of <SPAN CLASS="MATH"><I>x</I></SPAN> may have several embeddings in <SPAN CLASS="MATH"><I>x</I></SPAN>. For example, ``<TT>AG</TT>" is a subsequence of ``<TT>AACGG</TT>", which has 4 embeddings: (1,4), (1,5), (2,4) and (2,5).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. In each case, the first line is an integer represents <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(1 &lt; <I>k</I> &lt; 100)</SPAN>. The following <SPAN CLASS="MATH"><I>k</I></SPAN> lines contain the <SPAN CLASS="MATH"><I>k</I></SPAN> sequences, one per line.<P>The maximal length of each sequence is 500.<P>The input file ends when <SPAN CLASS="MATH"><I>k</I></SPAN> is equal to 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case in the input file, simply output the length of the <SPAN CLASS="MATH"><I>k</I></SPAN>-longest common sequence, one per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
ATTA
CGGC
3
GAACCACGCG
ACCGAC
GCCACCAAGC
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
5
</PRE><P>
______________________________________________________
2778||||||false||||||
<P>An ironclad disk, named <SPAN CLASS="textsl">Holedox</SPAN>, planned to attack the Mars. It would move in a plane, under the control of an automated program. The automated program is a sequence of <SPAN CLASS="MATH">(<I>dx</I>, <I>dy</I>)</SPAN> pairs, indicating differences of <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinates and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates between two contiguous positions of the disk center in the plane. For each movement, say from <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> to <SPAN CLASS="MATH">(<I>x</I> + <I>dx</I>, <I>y</I> + <I>dy</I>)</SPAN>, the <SPAN CLASS="textsl">Holedox</SPAN> would keep still at <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> for a period, move to <SPAN CLASS="MATH">(<I>x</I> + <I>dx</I>, <I>y</I> + <I>dy</I>)</SPAN> rapidly, and then keep still again at <SPAN CLASS="MATH">(<I>x</I> + <I>dx</I>, <I>y</I> + <I>dy</I>)</SPAN> to wait for the next movements.<P>However, the <SPAN CLASS="textsl">Holedox</SPAN> would be detected by the Mars Security Bureau (MSB), who set up m sensors given by their coordinates <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> in the plane where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="$ \le$"><I>m</I></SPAN>. Because the <SPAN CLASS="textsl">Holedox</SPAN> moved incredibly fast, it could be detected only when it was keeping still. At that time, every sensor would activate its state to 1 when it was inside <SPAN CLASS="textsl">Holedox</SPAN>, deactivate its state to 0 when it was outside the <SPAN CLASS="textsl">Holedox</SPAN>, and set its state to 0 or 1 randomly when it was exactly on the <SPAN CLASS="textsl">Holedox</SPAN>.<P>On Sept. 11th of 3001, the attack began. However, after <SPAN CLASS="MATH"><I>t</I></SPAN> movements of the Holdedox, the MSB intercepted its automated program. Now, based on the program and the <SPAN CLASS="MATH"><I>t</I> + 1</SPAN> previous sensor states, could you please write a program to help the MSB to calculate the minimum possible radius of the <SPAN CLASS="textsl">Holedox</SPAN>?<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="\epsfbox{p2778.eps}"></DIV><P>To understand the problem clearly, let us consider the following instance described in the Sample Input. Suppose there were three sensors which are <SPAN CLASS="MATH"><I>A</I>(0, 0)</SPAN>, <SPAN CLASS="MATH"><I>B</I>(1, 0)</SPAN> and <SPAN CLASS="MATH"><I>C</I>(1, 1)</SPAN>. As shown in Figure 1, accordingly to the program of ``(1,0)(0,2)", a unit- radius disk moved from (0,0), to (1,0), and to (1,2) during the first three still periods. Therefore, the sensor states of <SPAN CLASS="MATH"><I>A</I></SPAN>, <SPAN CLASS="MATH"><I>B</I></SPAN> and <SPAN CLASS="MATH"><I>C</I></SPAN> might become (1,1,0), (1,1,1) and (0,0,1) respectively, consonant with the observations given in the input. Besides that, it is easy to verify that the unit size is the minimum possible radius for the sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. Each case begins with an integer m to indicate the number of sensors, whose coordinates, <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN>, are pairs of real numbers, given in the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="$ \le$">50</SPAN> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="$ \le$"><I>m</I></SPAN>. Then, an integer <SPAN CLASS="MATH"><I>t</I></SPAN>, where <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="$ \le$">500</SPAN>, is given to indicate the number of previous movements, followed by a line of m binaries representing the sensor states when the <SPAN CLASS="textsl">Holedox</SPAN> started to move. Among the next <SPAN CLASS="MATH">2<I>t</I></SPAN> lines, the <SPAN CLASS="MATH">(2<I>j</I> - 1)</SPAN>-th line gives <SPAN CLASS="MATH">(<I>dx</I><SUB>j</SUB>, <I>dy</I><SUB>j</SUB>)</SPAN> for the <SPAN CLASS="MATH"><I>j</I></SPAN>-th movement in the intercepted program, and the <SPAN CLASS="MATH">(2<I>j</I>)</SPAN>-th line gives <SPAN CLASS="MATH"><I>m</I></SPAN> binaries which is the sensor states after the <SPAN CLASS="MATH"><I>j</I></SPAN>-th movement of the <SPAN CLASS="textsl">Holedox</SPAN>, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2778img1.png ALT="$ \le$"><I>t</I></SPAN>. Finally, each case is terminated by an empty line, while the input file is terminated by <SPAN CLASS="MATH"><I>m</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line of a real number, rounded to the third place after the decimal point, to indicate the minimum possible radius of the <SPAN CLASS="textsl">Holedox</SPAN>. If no possible radius exits for a certain case, please output `<TT>-1.000</TT>' instead.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
0 0
1 0
1 1
2
1 1 0
1 0
1 1 1
0 2
0 0 1

0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1.000
</PRE><P>
______________________________________________________
2779||||||false||||||
<P>The Graph Coloring problem is a well-known NP hard problem in theoretical computer science society. Given a graph <SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN> with <SPAN CLASS="MATH">| <I>V</I>| = <I>n</I></SPAN>. <SPAN CLASS="MATH"><I>C</I></SPAN> is a coloring mapping i.e. <SPAN CLASS="MATH"><I>C</I> : <I>V</I> - &gt; 1, 2,..., <I>c</I></SPAN> satisfying <SPAN CLASS="MATH"><I>C</I>(<I>i</I>) <IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2779img1.png ALT="$ \neq$"> <I>C</I>(<I>j</I>)</SPAN> for all <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> in <SPAN CLASS="MATH"><I>E</I></SPAN>. The graph coloring problem is to find an optimal coloring solution to minimize the size of coloring mapping i.e. minimize <SPAN CLASS="MATH"><I>c</I></SPAN>. For example, in the graph in the following figure, there are 5 vertices and 7 edges. One possible optimal coloring for the graph is <SPAN CLASS="MATH"><I>C</I>(1) = 1</SPAN>, <SPAN CLASS="MATH"><I>C</I>(2) = <I>C</I>(3) = 2</SPAN>, <SPAN CLASS="MATH"><I>C</I>(4) = <I>C</I>(5) = 3</SPAN>. That means we can use just 3 kinds of colors to construct a coloring mapping for that graph so that two vertices in one edge are colored by different colors.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2779img1.png ALT="\epsfbox{p2779.eps}"></DIV><P>Now, we extend the above graph coloring problem into another version that for a given graph <SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN>, and a fixed number of colors - <SPAN CLASS="MATH"><I>c</I></SPAN>, find an optimal coloring mapping using these <SPAN CLASS="MATH"><I>c</I></SPAN> colors to minimize the following objective function:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>R</I>(<I>G</I>) = <IMG WIDTH="116" HEIGHT="63" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2779img1.png ALT="$\displaystyle \sum_{(i, j) \in \overline{E},C(i)=C( j )}^{}$">1</DIV><P></P><P>Where <SPAN CLASS="MATH"><I>C</I></SPAN> is a coloring mapping i.e. <SPAN CLASS="MATH"><I>C</I> : <I>V</I> - &gt; 1, 2,..., <I>c</I></SPAN> satisfying <SPAN CLASS="MATH"><I>C</I>(<I>i</I>)<IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2779img1.png ALT="$ \ne$"><I>C</I>(<I>j</I>)</SPAN> for all <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> in <SPAN CLASS="MATH"><I>E</I></SPAN>. <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2779img1.png ALT="$ \overline{E}$"></SPAN> represents the set of missing edges in original graph. For example, if the coloring mapping of <SPAN CLASS="MATH"><I>c</I> = 3</SPAN> is <SPAN CLASS="MATH"><I>C</I>(1) = 1</SPAN>, <SPAN CLASS="MATH"><I>C</I>(2) = <I>C</I>(3) = 2</SPAN>, <SPAN CLASS="MATH"><I>C</I>(4) = <I>C</I>(5) = 3</SPAN> for the graph in above figure, we have <SPAN CLASS="MATH"><I>R</I>(<I>G</I>) = 2</SPAN>.<P>You task is that calculate the minimal value of the objective function for a given graph configuration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several graph configurations. For each configuration, in the first line, there have two integers, <SPAN CLASS="MATH"><I>v</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN> representing the number of vertices and colors for mapping <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2779img1.png ALT="$ \le$"><I>v</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2779img1.png ALT="$ \le$">200, <I>c</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2779img1.png ALT="$ \le$"><I>v</I>)</SPAN>. Moreover, we describe the detail configuration in the following <SPAN CLASS="MATH"><I>v</I> - 1</SPAN> lines, where the <SPAN CLASS="MATH"><I>j</I></SPAN>-th integer of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line is set to `<TT>1</TT>' if <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> in <SPAN CLASS="MATH"><I>E</I></SPAN> <SPAN CLASS="MATH">(<I>i</I> &lt; <I>j</I>)</SPAN>, otherwise `<TT>0</TT>'.<P>When <SPAN CLASS="MATH"><I>v</I></SPAN> equals 0, it means the end of the input file.<P><P><BR><B>Assume:</B> There exists at least one feasible coloring mapping using <SPAN CLASS="MATH"><I>c</I></SPAN> kinds of colors for the graph given by each input configuration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each graph configuration, just output a single line including the minimal value of the objective function for the extended coloring problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 3
0 1 1 1 1
0 0 0 0 1
0 0 0 1 1
0 0 0 0 0
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
2780||||||false||||||
<P>CPCI/MCA is another type of team contest, different from ACM/ICPC that one team can only consist of three team members at maximum. In CPCI/MCA, there is no restriction for the number of team members. However, the more team members, the more effort on their communication in the teamwork.<P><P><BR>Now, you are asked to help the contest director to arrange the contest rooms. The host prepared several standard rooms on fixed capacity sized by number of people in. You should give a schedule to arrange all team members into contest rooms with the constraints that:<P><DL COMPACT><DT>(1)</DT><DD>All members from the same team should be arranged into the same room.</DD><DT>(2)</DT><DD>The number of peoples arranged into the same room should not exceed the fixed capacity of the standard room.</DD></DL><P>To save the budget, we must find the optimal solution with the minimum number of rooms to arrange all teams.<P><P><BR>For instance, suppose the capacity of the standard room is 10. Moreover, we have 5 teams totally. The numbers of team members of each team are 1, 4, 10, 5 and 2. So, one of the optimal solution is using 3 standard rooms that room 1 for team 3, room 2 for team 1 and team 2, and room 3 for team 4 and 5.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The format of input file is as follows:<P>The file line of the input file contains the number of test cases. For each test case, there have two parts:<P><DL COMPACT><DT>(1)</DT><DD>one line with two items: room capacity <SPAN CLASS="MATH"><I>C</I></SPAN> and the number of teams <SPAN CLASS="MATH"><I>T</I></SPAN>;</DD><DT>(2)</DT><DD><SPAN CLASS="MATH"><I>T</I></SPAN> lines for the number of members of each team <SPAN CLASS="MATH"><I>M</I><SUB>i</SUB></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2780img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2780img1.png ALT="$ \le$"><I>T</I>)</SPAN>, one team per line.</DD></DL><P><P><BR><B>Note:</B> <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2780img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2780img1.png ALT="$ \le$">1000</SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2780img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2780img1.png ALT="$ \le$">250</SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2780img1.png ALT="$ \le$"><I>M</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2780img1.png ALT="$ \le$">100</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, just output the result of the optimal solution, e.g. the minimum number of standard rooms to be used for that case. We give one line for the output of one case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
10 5
1
4
10
5
2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
</PRE><P>
______________________________________________________
2781||||||false||||||
<P>Today, facing the rapid development of business, ACM (Association of Calculator Management) recognizes that more powerful calculator should be studied, developed and appeared in future market shortly. ACM now invites you attending such amazing research and development work.<P>In most business application, the top three useful calculation operators are Addition (+), Subtraction (-) and Multiplication (*) between two given integers. Normally, you may think it is just a piece of cake. However, since some integers for calculation in business application may be very big, such as the GDP of the whole world, the calculator becomes harder to develop.<P><P><BR>For example, if we have two integers 20000000000000000 and 4000000000000000, the exact results of the addition, subtraction and multiplication are:<P><P><BR>20000000000000000 + 4000000000000000 = 24000000000000000<P>20000000000000000 - 4000000000000000 = 16000000000000000<P>20000000000000000 * 4000000000000000 = 80000000000000000000000000000000<P><P><BR><B>Note:</B> ACM prefers the exact format of the results rather than the float format or scientific remark format. For instance, we need ``24000000000000000" rather than <SPAN CLASS="MATH">2.4*10<SUP>16</SUP></SPAN>.<P><P><BR>As a programmer in ACM, your current task is to develop a program to obtain the exact results of the addition <SPAN CLASS="MATH">(<I>a</I> + <I>b</I>)</SPAN>, subtraction <SPAN CLASS="MATH">(<I>a</I> - <I>b</I>)</SPAN> and multiplication <SPAN CLASS="MATH">(<I>a</I>*<I>b</I>)</SPAN> between two given integers <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. Each case has two separate lines where the first line gives the integer <SPAN CLASS="MATH"><I>a</I></SPAN> and the second gives <SPAN CLASS="MATH"><I>b</I></SPAN> <!-- MATH
 $(|a| < 10^{200}$
 --><SPAN CLASS="MATH">(| <I>a</I>| &lt; 10<SUP>200</SUP></SPAN> and <!-- MATH
 $|b| <10^{200})$
 --><SPAN CLASS="MATH">| <I>b</I>| &lt; 10<SUP>200</SUP>)</SPAN>.<P>When both <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are equal to zero, the input file ends.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input file, output three separate lines showing the exact results of addition <SPAN CLASS="MATH">(<I>a</I> + <I>b</I>)</SPAN>, subtraction <SPAN CLASS="MATH">(<I>a</I> - <I>b</I>)</SPAN> and multiplication <SPAN CLASS="MATH">(<I>a</I>*<I>b</I>)</SPAN> of that case, one result per line.<P>Leaving a blank line between two successive test cases in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
20000000000000000
4000000000000000
0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
24000000000000000
16000000000000000
80000000000000000000000000000000
</PRE><P>
______________________________________________________
2782||||||false||||||
<p>
Ms. Terry is a pre-school art teacher who likes to have her students work
with clay. One of her assignments is to form a lump of clay into a block and
then measure the dimensions of the block.
However, in every class, there is always one child who insists on taking some
clay from some other child. Since Ms. Terry always gives every child in
a class the same amount of clay to begin with, you can write a program
that helps Ms. Terry find the bully and victim after she measures each 
child's finished block.
</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>There are one or more classes of students, followed by a final line
containing only the value -1. Each class starts with a line containing an 
integer, <i>n</i>, which is the number of students in the class, followed by 
<I>n</I> lines of student information. Each line of student information consists
of three positive integers, representing the dimensions of the clay block,
followed by the student's first name. There can never be more than 9 students
nor less than 2 students in any class. Each student's name is at most 8
characters. Ms. Terry always gives each student at most 250 cubic units
of clay. There is exactly one bully and one victim in each class.
</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each class print a single line exactly as shown in the 
sample output.
</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
10 10 2 Jill
5 3 10 Will
5 5 10 Bill
4
2 4 10 Cam
4 3 7 Sam
8 11 1 Graham
6 2 7 Pam
-1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Bill took clay from Will.
Graham took clay from Cam.
</PRE>

<P>

______________________________________________________
2783||||||false||||||
<p>Your company provides robots that can be used to pick up litter from fields after sporting events and concerts. Before robots are assigned to a job, an aerial photograph of the field is marked with a grid. Each location in the grid that contains garbage is marked. All robots begin in the Northwest corner and end their movement in the Southeast corner. A robot can only move in two directions, either to the East or South. Upon entering a cell that contains garbage, the robot will pick it up before proceeding. Once a robot reaches its destination at the Southeast corner it cannot be repositioned or reused. Since your expenses are directly proportional to the number of robots used for a particular job, you are interested in finding the minimum number of robots that can clean a given field. For example, consider the field map shown in Figure 1 with rows and columns numbered as shown and garbage locations marked with a '<tt>G</tt>'. In this scheme, all robots will begin in location 1,1 and end in location 6, 7.</p><center><img src="http://livearchive.onlinejudge.org/external/27/p2783a.gif alt="Field of garbage"></center><center>Figure 1 - A Field Map</center><p>Figure 2 below shows two possible solutions, the second of which is preferable since it uses two robots rather than three.</p><center><img src="http://livearchive.onlinejudge.org/external/27/p2783a.gif alt="Two solutions"></center><center>Figure 2 - Two Possible Solutions</center><p>Your task is to create a program that will determine the minimum number of robots needed to pick up all the garbage from a field.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>An input file consists of one or more field maps followed by a line containing -1 -1 to signal the end of the input data. A field map consists of one or more lines, each containing one garbage location, followed by a line containing 0 0 to signal the end of the map. Each garbage location consists of two integers, the row and column, separated by a single space. The rows and columns are numbered as shown in Figure 1. The garbage locations will be given in row-major order. No single field map will have more than 24 rows and 24 columns. The sample input below shows an input file with two field maps. The first is the field map from Figure 1.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output will consist of a single line for each field map containing the minimum number of robots needed to clean the corresponding field.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1 2
1 4
2 4
2 6
4 4
4 7
6 6
0 0
1 1
2 2
4 4
0 0
-1 -1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2
1
</PRE><P>
______________________________________________________
2784||||||false||||||
<center><table border="0" cellpadding="5"><tbody><tr><td><img src="http://livearchive.onlinejudge.org/external/27/p2784a.gif ALT="Bracelet 1"></td></tr><tr><td align="center">Bracelet 1</td></tr><tr><td></td></tr><tr><td><img src="http://livearchive.onlinejudge.org/external/27/p2784a.gif ALT="Bracelet 2"></td></tr><tr><td align="center">Bracelet 2</td></tr></tbody></table></center><p>Bracelets can be made from a collection of octagonal pieces, with two opposite sides of an octagon attached to octagons on either side. The colors of the edges of the octagons vary. The different colors are labeled with different letters in the diagrams. Bracelets only look good if the connecting sides of two adjacent octagons are the same color. Above are two possible bracelets. (The ends also get fastened together.) These two bracelets could be made from the same four octagons, reordered and rotated. Assume that the octagons are never flipped over.</p><p>It happens that the better selling bracelets are those with the darker colors on the edges connecting the bracelet. The brightness of each lettered color is a positive integer, with higher numbers being brighter. Suppose the brightness of the labeled colors are:</p><center><table border="1" cellpadding="2"><tbody><tr><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>G</td><td>H</td></tr><tr><td>70</td><td>90</td><td>10</td><td>50</td><td>60</td><td>30</td><td>20</td><td>40</td></tr></tbody></table></center><p>We can compare the desirability of these two arrangements of the octagons by adding the brightness of the colors at each joint (including the connection of the two ends). For Bracelet 1, colors A, A, E, and E have sum 70 + 70 + 60 + 60 = 260. For Bracelet 2, colors C, C, G, and E have sum 10 + 10 + 20 + 60 = 100. Bracelet 2 is preferable, having the smaller sum. In fact, Bracelet 2 provides the best possible result among all rearrangements and rotations of these four octagons.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>There are from one to 20 data sets, followed by a final line containing only 0. A data set starts with a line containing nine blank-separated integers. The first is the number, <i>n</i>, of octagons that form the bracelet, where 4 &le; <i>n</i> &le; 11. The remaining eight numbers are the brightness for colors A through H, in order. Each brightness is positive and less than 256.</p><p>The next <i>n</i> lines each contain eight letters, all in the range from A through H. Each gives the edge colors for one octagon, in clockwise order. Individual colors may appear zero or more times in the octagons. Different colors may have the same brightness, but that does not make them the same color.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output contains one line for each data set: If no bracelet can be constructed using all the octagons, the line contains "impossible". Otherwise the line contains the minimal sum of the brightness for the connections. <span style="font-weight: bold;">Caution</span>: If your solution considers all possible orderings and rotations individually, it will run out of time.<br></p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4 70 90 10 50 60 30 20 40
ACACACAC
ABCDEFGH
EEEEECCC
EECCAGGG
5 1 2 3 4 5 6 7 8
AAAABBBB
BBBBCCCC
CCCCDDDD
DDDDEEEE
EEEEAAAA
6 50 50 50 50 100 1 2 3
HHHHHHHH
BBBBCCCC
CDCDDDDD
DEDEEEEE
EFEFEFEF
FFFFFFFF
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
100
15
impossible 
</PRE><P>
______________________________________________________
2785||||||false||||||
<p>The You'reFat treadmill company has decided to enhance its treadmills to allow users to run workout programs from an audio program (either online streaming audio or from a CD). The program will have upbeat music and encouragement from an instructor. Chirps can be inserted into the audio program to indicate changes in speed and inclination. For example, when it is time to increase the treadmill speed, the music will temporarily stop while the treadmill gets the new speed from the chirp, and then the music resumes. The treadmill can handle speeds from 0 to 7 miles per hour, and inclinations of 0 to 7 degrees.</p><p>A program consists of a sequence of samples. Each sample will range from 0 (minimum value) to 9 (maximum value). There will be three samples per second. Each chirp consists of a sequence of bits. A 0 bit consists of two samples of either 4 or 5. A 1 bit consists of two samples, the first being either 0 or 1, and the second one being either 8 or 9. The chirp starts with the bits &quot;01&quot;. The next three bits represent the new speed (least significant bit first). This is followed by three bits for the new inclination (also least significant bit first). Note that every chirp includes both speed and inclination, even if one or the other doesn't change. A chirp representing a speed of 3 miles per hour, and an inclination of 6 degrees would look like:</p><p align=center><img src="http://livearchive.onlinejudge.org/external/27/p2785a.gif></p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file consists of one or more programs. Each program is implicitly numbered starting at 1. The first line contains a single integer <i>n</i>, which is the number of programs that follow. Each program is a sequence of samples. Each line of a program will contain exactly 30 samples, except the last line, which may contain fewer. The end of each program will be represented by a sample with the value 10.</p><p>Note that:</p><ul><li>Any value from 0 to 9 may be a sample in the background music, but the starting bit sequence for a chirp &quot;01&quot; (middle, middle, low, high) will not occur in the background music.</li> <li>Chirps consume time.</li> <li>Each workout is less than 60 minutes long.</li> <li>A chirp with speed 0 does not imply the end of the workout.</li> <li>A chirp may be preceded by one or more samples with the value 4 or 5.</li> <li>Chirps do not necessarily begin on an even second boundary.</li> <li>Each chirp is well-formed (only proper 0 or 1 bits will occur)</li></ul><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each audio program, you should first print a line &quot;<tt>Program <i>n</i></tt>&quot; where <i>n</i> is the program number. Then, you should print the time, speed and inclination of each chirp in that audio program. Each chirp should produce one line of output in the form &quot;<tt><i>mm:ss</i> Speed <i>S</i> Inclination <i>I</i></tt>&quot;. Both minutes and seconds should be printed with a leading zero (&quot;00&quot; to &quot;59&quot;). The time of a chirp is the time for the first sample of the start bits, ignoring any fractional seconds. Both speed <i>S</i> and inclination <i>I</i> should be printed as single decimal digits. There should be a single space between each item in the output.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
7 1 2 3 3 6 9 1 1 5 5 1 9 1 9 1 9 4 5 5 4 0 9 1 8 0 1 0 1 3
3 5 4 0 9 4 5 4 4 1 9 5 4 4 4 5 5 5 3 2 7 8 10
5 2 6 5 5 3 4 4 5 1 9 5 4 0 9 5 4 1 8 5 5 4 4 3 5 4 6 4 7 6
4 4 6 4 4 4 5 5 4 4 5 6 4 6 4 4 4 1 8 5 5 0 8 4 5 5 5 1 8 4
4 4 4 6 4 5 4 4 6 4 6 2 4 5 6 4 6 5 4 5 4 5 4 5 2 6 4 4 5 5
7 7 3 4 4 5 5 5 6 6 5 5 5 0 9 0 9 1 9 5 4 1 8 4 5 4 5 6 4 4
4 8 7 5 3 4 4 2 4 6 8 7 5 4 6 5 7 6 10
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Program 1
00:03 Speed 3 Inclination 6
00:10 Speed 4 Inclination 0
Program 2
00:02 Speed 2 Inclination 1
00:15 Speed 2 Inclination 2
00:33 Speed 3 Inclination 1
</PRE><P>
______________________________________________________
2786||||||false||||||
<p>A variation of the minesweeper game is available for almost every computer platform. Your employer wants to create yet another version that is targeted toward casual, as opposed to expert, players. Your task is to write a program that takes a minesweeper board and returns the minimum number of covered, unmined cells that remain after a casual player has tried his/her best. The details of the game and program are decribed below.</p><p>A minesweeper board consists of a rectangular grid of cells, with one or more cells containing a mine. The entire board is initially presented with all the cells covered, i.e., blank. The object of the game is to uncover all the cells that do not contain a mine. If a mine in uncovered, the game is over and the player loses. A cell can be in one of 3 states: <i>covered</i>, <i>cleared/uncovered</i>, or <i>flagged</i> as a mine.</p><p>When a player clears a cell that does not contain a mine, that cell displays the number of mines in cells that are adjacent to it. These numbers help the player determine where the mines are located. The adjacent cells are the cells that form a 3x3 square with the cleared cell in the center. Depending on a cell's location, it will have between 3 and 8 adjacent cells. The board in Figure 1 below shows two mines at locations (3,1) and (3,2), and the numbers of adjacent mines for each of the remaining cells.</p><!--
<pre>
0 0 0
2 2 1
M M 1
</pre>
--><p>A casual player makes use of this information in the following way. First the player selects one cell from a totally covered board. If it's a mine, the game is over. Otherwise, the player clears the cell and then applies the following two rules to cleared cells on the board until no further progress can be made. Let (<i>x</i>,<i>y</i>) be the location of a cleared cell, and let <i>f</i>, <i>c</i>, and <i>m</i> be the number of flagged, covered, and mined cells adjacent to (<i>x</i>,<i>y</i>).</p><OL><LI>If <i>f</i> = <i>m</i>, then clear all covered cells adjacent to (<i>x</i>,<i>y</i>). </LI> <LI>If <i>f</i> + <i>c</i> = <i>m</i>, then flag all covered cells adjacent to (<i>x</i>,<i>y</i>). </LI></OL><p>Note that after successfully clearing the first cell, a casual player never clears or flags a cell except as dictated by rule 1 or 2, which means that the player may get &quot;stuck&quot;. When a casual player is stuck, the game is over; no further guesses are made, and the player will not use more sophisticated rules that might allow him/her to safely clear additional cells.</p><p>Figure 2 below shows an application of these rules using the board from Figure 1.</p><p align=center><img src=p2786a.gif></p><p>Figure 2a shows the board after a player initially clears cell (1,2). Rule 1 applies, since (0 flagged = 0 mined neighbors), so the player clears the adjacent cells at (1,1), (1,3), (2,1), (2,2), and (2,3), which leads to Figure 2b.</P><p>From the board in Figure 2b, the player can consider cell (2,1) and apply rule 2 (0 flagged + 2 covered = 2 mined) to flag cells (3,1) and (3,2) as mines. This generates Figure 2c.</P><p>Finally, by looking at cell (2,3), the player can again apply rule 1 to clear cell (3,3), since cell (2,3) has exactly 1 adjacent mine, and cell (3,2) is already flagged as a mine. Now, all the cells without mines have been cleared, so the game stops with the player winning.</p><p>As indicated above, these two rules are not sufficient to solve every game board from every starting position, so the player might get stuck. Again, considering the board in Figure 1, if the player instead first cleared cell (2,2), the resulting board appears as Figure 3. <!--
</p>
<pre>
...
.2.
...
</pre>
<p>
-->The player cannot make any further progress, since neither rule 1 nor rule 2 clears or flags any new cells. In this case the player is stuck with 6 covered cells that do not contain mines.</p><p>You must write a program that looks at a game board and determines the smallest number of covered, unmined cells that could possibly remain when a casual player plays the game as described. For the game board in Figure 1, the answer is 0.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains one or more game boards, followed by a final line containing only two zeros. A game board starts with a line containing two integers, <i>r</i> and <i>c</i>, the number of rows and columns in the game board; <i>r</i> and <i>c</i> will always be at least 3. The total number of cells in any board will never be greater than 40. The rest of the data set consists of a graphical representation of the game board, where an upper case '<tt>M</tt>' represents a mine and a period '<tt>.</tt>' represents an empty cell. There will always be at least one '<tt>M</tt>' and at least one '<tt>.</tt>' on each game board.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each data set write one line with a single integer indicating the smallest number of covered, unmined cells for that board.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 3
...
...
MM.
3 4
M.M.
.M.M
M.M.
7 5
.....
.....
MMM..
M.M..
MMM..
.....
.....
4 4
...M
....
....
M...
0 0 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0
5
1
0 
</PRE><P>
______________________________________________________
2787||||||false||||||
<p>As part of an arithmetic competency program, your students will be given randomly generated lists of from 2 to 15 unique positive integers and asked to determine how many items in each list are twice some other item in the same list. You will need a program to help you with the grading. This program should be able to scan the lists and output the correct answer for each one. For example, given the list</p><center><pre>1 4 3 2 9 7 18 22</pre></center><p>your program should answer 3, as 2 is twice 1, 4 is twice 2, and 18 is twice 9.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file will consist of one or more lists of numbers. There will be one list of numbers per line. Each list will contain from 2 to 15 unique positive integers. No integer will be larger than 99. Each line will be terminated with the integer 0, which is not considered part of the list. A line with the single number -1 will mark the end of the file. The example input below shows 3 separate lists. Some lists may not contain any doubles.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output will consist of one line per input list, containing a count of the items that are double some other item.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1 4 3 2 9 7 18 22 0
2 4 8 10 0
7 5 11 13 1 3 0
-1 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
3
2
0
</PRE><P>
______________________________________________________
2788||||||false||||||
<p align=center><img src="http://livearchive.onlinejudge.org/external/27/p2788a.gif></p><p>A fax image is a rectangular array of dark and white pixels. Three small examples are shown above much magnified so individual pixels are clearly visible. Your task is to write a program that will count the connected dark components in fax images. We assume that two dark pixels that are directly adjacent vertically or horizontally are in the same component. Pixels along a diagonal, touching only at a corner, are not directly connected. The two components in Fax 1 and three components in Fax 2 are shown below in different shadings. In Fax 3, all 32 dark pixels are in separate components, because the dark pixels only touch at corners.</p><p align=center><img src="http://livearchive.onlinejudge.org/external/27/p2788a.gif></p><p>Fax images are encoded to save transmission bandwidth. If you imagine a blank row above the actual fax, then each pixel in the fax can be labeled as being the same (<tt>S</tt>) as the pixel above it or different (<tt>D</tt>) from the pixel above it, as illustrated below.</p><p align=center><img src="http://livearchive.onlinejudge.org/external/27/p2788a.gif></p><p>If the <tt>S</tt> and <tt>D</tt> labels are read in row major order (from left to right across rows and then down to further rows), then the labels for the pixels in the three faxes are</p><p style="margin-left: 0.75cm">Fax 1:<tt> SDDSDDSSSDDDSDD</tt><br>Fax 2:<tt>&nbsp;DDDDDDDSSDDDDSSSDSDSSSDSSDSSSSSSDSSSSSSSSSSSSSDSSSDSDDDS</tt><br>Fax&nbsp;3:<tt>&nbsp;DSDSDSDSDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD</tt></p><p>If we count the repetitions, always starting with <tt>S</tt>&#8217;s (even if there are 0 <tt>S</tt>&#8217;s at the beginning), then we get</p><p style="margin-left: 0.75cm">Fax 1:<tt> 1S 2D 1S 2D 3S 3D 1S 2D</tt><br>Fax 2:<tt> 0S 7D 2S 4D 3S 1D 1S 1D 3S 1D 2S 1D 6S 1D 13S 1D 3S 1D 1S 3D 1S</tt><br>Fax 3:<tt> 0S 1D 1S 1D 1S 1D 1S 1D 1S 56D</tt></p><p>Since the runs of <tt>S</tt> and <tt>D</tt> always alternate, we can omit the <tt>S</tt> and <tt>D</tt> labels, and get the final encodings.</p><p style="margin-left: 0.75cm">Fax 1:<tt> 1 2 1 2 3 3 1 2</tt><br>Fax 2:<tt> 0 7 2 4 3 1 1 1 3 1 2 1 6 1 13 1 3 1 1 3 1</tt><br>Fax 3:<tt> 0 1 1 1 1 1 1 1 1 56</tt></p><p>Starting from fax widths and encodings, your task is to calculate the number of components in the faxes. To make things more interesting, the faxes may be very large.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>There are from one to 24 data sets, followed by a final line containing only -1. A data set starts with a line containing three integers <i>w</i>, <i>r</i>, and <i>g</i>: the width of the fax in pixels, the total number of runs, and the number of run lengths grouped on one line, respectively. All three numbers are positive: <i>w</i> &lt;= 1,000,000,000, <i>r</i> &lt;= 1000, and <i>g</i> &lt;= 40. The rest of the dataset consists of <i>r</i> run lengths, with a new line starting after each group of <i>g</i> run lengths. The last line (possibly the only line) of run lengths may contain fewer than <i>g</i> run lengths. The numbers on each line are blank separated. The first run length may be 0. All others run lengths are positive. No run length may be greater than 1,000,000,000. The total number of pixels in each fax will be a multiple of <i>w</i>, so the pixels form a rectangle. Though commas are shown in the long numbers above for human readability, the integers in the input and output files include no commas.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each dataset the output contains a line with one integer: the number of components in the fax. No fax encoded in the input will have more than 1,000,000,000 components. <b>Caution</b>: a solution that examines each pixel individually will not finish within the one-minute time limit.<br></p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5 8 4
1 2 1 2
3 3 1 2 
7 21 8
0 7 2 4 3 1 1 1 
3 1 2 1 6 1 13 1
3 1 1 3 1
8 10 10
0 1 1 1 1 1 1 1 1 56
-1 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2
3
32
</PRE><P>
______________________________________________________
2789||||||false||||||
<p>Programmer's University (PU) sponsors a number of intramural sports tournaments throughout the year. The brackets showing the competing teams and the winners are displayed on a metal board using magnetic signs containing the team names. One such bracket is shown below. Every so often though, a prankster takes all the team names off the board, carefully laying them on the floor in pairs in column-major order, starting at the top of Round 1 and then progressing down through Round 1, then back to the top of Round 2, down that column, and so on. This prankster always leaves a taunting note saying any programmer ought to be able to recreate the exact tournament bracket with just this information. Your task is to write a program that takes as input the names of teams from a tournament bracket and draws that bracket using simple ASCII characters.</p><p>One factor complicating your task is that there may not be enough teams in any tournament to completely fill a bracket. This means that some teams don't have to play a first round match. It is your job to deduce which teams actually played in the first round.</p><Pre>Round    Round      Round       Winner
  1        2          3

_BIG__
      \_BIG_____
_DIGS_/         \
                 \_FIGURES_
                 /         \
       _FIGURES_/           \
                             \
                              \_TIGGER_
                              /
       _TIGGER__             /
                \           /
                 \_TIGGER__/
_WIG__           /
      \_WIG_____/
_ZIG__/
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains data for one or more touraments. Tournaments are implicitly numbered starting at 1. Each tournament begins with a line containing a positive odd integer <i>n</i>, 3 &le; <i>n</i> &le; 31, which is the total number of name signs in the tournament bracket. Following this are (<i>n</i> + 1)/2 lines of team pairings. All lines except the last one contain exactly two team names, separated by a single space. The first name is always immediately above the second name in the output. The last line contains a single team name, the winner of the tournament. All team names are between 3 and 7 upper case characters in the range (A-Z). A value of -1 for <i>n</i> signals the end of all the tournaments.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each tournament bracket, write a line indicating which bracket it is, "Tournament 1", "Tournament 2", etc., followed by the bracket itself. Team names are always printed left justified with one leading underscore '<tt>_</tt>' and one or more trailing underscores. The width of each round is the width of the longest team name in that round, plus a leading and trailing underscore. Teams that play in the first round are printed 2 lines apart. Those in the second, third and fourth rounds, if the bracket is so big, are 4, 8, and 16 lines apart, respectively. Contrary to our general guidelines, there will be spaces at the beginning of any line not containing a team playing in the first round. There will also be consecutive spaces in your output as necessary for formatting. However, there must <i>never</i> be trailing spaces at the end of any line, nor any lines with only spaces, nor any completely empty lines. The only special symbols you need to use to construct the bracket are the forward slash '<tt>/</tt>', the backward slash '<tt>\</tt>', and the underscore '<tt>_</tt>'. Note that the last example below shows the largest bracket possible for this problem.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
11
BIG DIGS
WIG ZIG
BIG FIGURES
TIGGER WIG
FIGURES TIGGER
TIGGER
5
LARGE RAGE
ZEN RAGE
RAGE
31
ANT BOA
COW DUCK
EEL FROG
GOOSE HEN
IGUANA JACKEL
KITE LLAMA
MOUSE NIT
OCTOPUS PIG
BOA COW
FROG GOOSE
IGUANA KITE
MOUSE OCTOPUS
COW GOOSE
IGUANA OCTOPUS
GOOSE OCTOPUS
OCTOPUS
-1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Tournament 1
_BIG__
      \_BIG_____
_DIGS_/         \
                 \_FIGURES_
                 /         \
       _FIGURES_/           \
                             \
                              \_TIGGER_
                              /
       _TIGGER__             /
                \           /
                 \_TIGGER__/
_WIG__           /
      \_WIG_____/
_ZIG__/
Tournament 2
        _ZEN__
              \
               \_RAGE_
_LARGE_        /
       \_RAGE_/
_RAGE__/
Tournament 3
_ANT_____
         \_BOA_____
_BOA_____/         \
                    \_COW_____
_COW_____           /         \
         \_COW_____/           \
_DUCK____/                      \
                                 \_GOOSE___
_EEL_____                        /         \
         \_FROG____             /           \
_FROG____/         \           /             \
                    \_GOOSE___/               \
_GOOSE___           /                          \
         \_GOOSE___/                            \
_HEN_____/                                       \
                                                  \_OCTOPUS_
_IGUANA__                                         /
         \_IGUANA__                              /
_JACKEL__/         \                            /
                    \_IGUANA__                 /
_KITE____           /         \               /
         \_KITE____/           \             /
_LLAMA___/                      \           /
                                 \_OCTOPUS_/
_MOUSE___                        /
         \_MOUSE___             /
_NIT_____/         \           /
                    \_OCTOPUS_/
_OCTOPUS_           /
         \_OCTOPUS_/
_PIG_____/
</PRE><P>
______________________________________________________
2790||||||false||||||

<P>
The King of a little Kingdom on a little island in the Pacific Ocean frequently has childish
ideas. One day he said, ``You shall make use of a message relaying game when you inform me
of something." In response to the King's statement, six servants were selected as messengers
whose names were Mr. J, Miss C, Mr. E, Mr. A, Dr. P, and Mr. M. They had to relay a message
to the next messenger until the message got to the King.

<P>
Messages addressed to the King consist of digits (`<TT>0</TT>'-`<TT>9</TT>') and alphabet characters
(`<TT>a</TT>'-`<TT>z</TT>', `<TT>A</TT>'-`<TT>Z</TT>'). Capital and small letters are distinguished in
messages. For example, ``<TT>ke3E9Aa</TT>" is a message.

<P>

<P>
<BR>
Contrary to King's expectations, he always received wrong messages, because each messenger
changed messages a bit before passing them to the next messenger. Since it irritated the King, he told
you who are the Minister of the Science and Technology Agency of the Kingdom, ``We don't want such a wrong
message any more. You shall develop software to correct it!" In response to the King's new statement, you
analyzed the messengers' mistakes with all technologies in the Kingdom, and acquired the following features
of mistakes of each messenger. A surprising point was that each messenger made the same mistake whenever
relaying a message. The following facts were observed.

<P>

<UL>
<LI>Mr. J rotates all characters of the message to the left by one. For example, he transforms
``<TT>aB23d</TT>" to ``<TT>B23da</TT>".

<P>
</LI>
<LI>Miss C rotates all characters of the message to the right by one. For example, she transforms
``<TT>aB23d</TT>" to ``<TT>daB23</TT>".

<P>
</LI>
<LI>Mr. E swaps the left half of the message with the right half. If the message has an odd number of characters,
the middle one does not move. For example, he transforms ``<TT>e3ac</TT>" to ``<TT>ace3</TT>",
and ``<TT>aB23d</TT>" to ``<TT>3d2aB</TT>".

<P>
</LI>
<LI>Mr. A reverses the message. For example, he transforms ``<TT>aB23d</TT>" to ``<TT>d32Ba</TT>".

<P>
</LI>
<LI>Dr. P increments by one all the digits in the message. If a digit is `<TT>9</TT>', it becomes `<TT>0</TT>'.
The alphabet characters do not change. For example, he transforms ``<TT>aB23d</TT>" to ``<TT>aB34d</TT>",
and ``<TT>e9ac</TT>" to ``<TT>e0ac</TT>".

<P>
</LI>
<LI>Mr. M decrements by one all the digits in the message. If a digit is `<TT>0</TT>', it becomes `<TT>9</TT>'.
The alphabet characters do not change. For example, he transforms ``<TT>aB23d</TT>" to ``<TT>aB12d</TT>",
and ``<TT>e0ac</TT>" to ``<TT>e9ac</TT>".
</LI>
</UL>

<P>
The software you must develop is to infer the original message from the final message, given the order of
the messengers. For example, if the order of the messengers is
A<!-- MATH
 $\longrightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="33" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2790img1.png
 ALT="$ \longrightarrow$"></SPAN>J<!-- MATH
 $\longrightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="33" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2790img1.png
 ALT="$ \longrightarrow$"></SPAN>M<!-- MATH
 $\longrightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="33" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2790img1.png
 ALT="$ \longrightarrow$"></SPAN>P and the message given to the King
is ``<TT>aB23d</TT>", what is the original message? According to the features of the messengers'
mistakes, the sequence leading to the final message is

<P>
<!-- MATH
 \begin{displaymath}
\mbox{``\texttt{32Bad}"} \stackrel {A}{\longrightarrow} \mbox{``\texttt{daB23}"}
\stackrel {J}{\longrightarrow} \mbox{``\texttt{aB23d}"} \stackrel {M}{\longrightarrow}
    \mbox{``\texttt{aB12d}"} \stackrel {P}{\longrightarrow} \mbox{``\texttt{aB23d}"}.
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
``<TT>32Bad</TT>"<IMG
 WIDTH="42" HEIGHT="47" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2790img1.png
 ALT="$\displaystyle \;\stackrel{A}{\longrightarrow}\;$">``<TT>daB23</TT>"<IMG
 WIDTH="42" HEIGHT="47" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2790img1.png
 ALT="$\displaystyle \;\stackrel{J}{\longrightarrow}\;$">``<TT>aB23d</TT>"<IMG
 WIDTH="42" HEIGHT="47" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2790img1.png
 ALT="$\displaystyle \;\stackrel{M}{\longrightarrow}\;$">``<TT>aB12d</TT>"<IMG
 WIDTH="42" HEIGHT="47" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2790img1.png
 ALT="$\displaystyle \;\stackrel{P}{\longrightarrow}\;$">``<TT>aB23d</TT>".
</DIV><P></P>

<P>
As a result, the original message should be ``<TT>32Bad</TT>".

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input format is as follows.

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>n</I></SPAN>

<P>

<SPAN  CLASS="textit">The order of messengers</SPAN>

<P>

<SPAN  CLASS="textit">The message given to the King</SPAN>

<P>
<SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/2790img1.png
 ALT="$ \vdots$"></SPAN>

<P>

<SPAN  CLASS="textit">The order of messengers</SPAN>

<P>

<SPAN  CLASS="textit">The message given to the King</SPAN> 
<P>

<P>
<BR>
The first line of the input contains a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>, which denotes the number of data sets.
Each data set is a pair of the order of messengers and the message given to the King. The number of
messengers relaying a message is between 1 and 6 inclusive. The same person may
not appear more than once in the order of messengers. The length of a message is between 1
and 25 inclusive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The inferred messages are printed each on a separate line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
AJMP
aB23d
E
86AE
AM
6
JPEM
WaEaETC302Q
CP
rTurnAGundam1isdefferentf
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
32Bad
AE86
7
EC302QTWaEa
TurnAGundam0isdefferentfr
</PRE>

<P>

______________________________________________________
2791||||||false||||||
<P>The fact that any positive integer has a representation as the sum of at most four positive squares (<SPAN CLASS="textit">i.e.</SPAN> squares of positive integers) is known as Lagrange's Four-Square Theorem. The first published proof of the theorem was given by Joseph-Louis Lagrange in 1770. Your mission however is not to explain the original proof nor to discover a new proof but to show that the theorem holds for some specific numbers by counting how many such possible representations there are.<P>For a given positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>, you should report the number of all representations of <SPAN CLASS="MATH"><I>n</I></SPAN> as the sum of at most four positive squares. The order of addition does not matter, e.g. you should consider <SPAN CLASS="MATH">4<SUP>2</SUP> + 3<SUP>2</SUP></SPAN> and <SPAN CLASS="MATH">3<SUP>2</SUP> + 4<SUP>2</SUP></SPAN> are the same representation.<P>For example, let's check the case of 25. This integer has just three representations <SPAN CLASS="MATH">1<SUP>2</SUP> + 2<SUP>2</SUP> + 2<SUP>2</SUP> + 4<SUP>2</SUP></SPAN>, <SPAN CLASS="MATH">3<SUP>2</SUP> + 4<SUP>2</SUP></SPAN>, and <SPAN CLASS="MATH">5<SUP>2</SUP></SPAN>. Thus you should report 3 in this case. Be careful not to count <SPAN CLASS="MATH">4<SUP>2</SUP> + 3<SUP>2</SUP></SPAN> and <SPAN CLASS="MATH">3<SUP>2</SUP> + 4<SUP>2</SUP></SPAN> separately.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is composed of at most 255 lines, each containing a single positive integer less than <SPAN CLASS="MATH">2<SUP>15</SUP></SPAN>, followed by a line containing a single zero. The last line is not a part of the input data.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be composed of lines, each containing a single integer. No other characters should appear in the output.<P>The output integer corresponding to the input integer <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of all representations of <SPAN CLASS="MATH"><I>n</I></SPAN> as the sum of at most four positive squares.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
25
2003
211
20007
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
3
48
7
738
</PRE><P>
______________________________________________________
2792||||||false||||||

<P>
Yoko's math homework today was to calculate areas of polygons in the <SPAN CLASS="MATH"><I>xy</I></SPAN>-plane. Vertices are all aligned
to grid points (<SPAN  CLASS="textit">i.e.</SPAN> they have integer coordinates).

<P>
Your job is to help Yoko, not good either at math or at computer programming, get her home-
work done. A polygon is given by listing the coordinates of its vertices. Your program should approximate
its area by counting the number of unit squares (whose vertices are also grid points) intersecting the polygon.
Precisely, a unit square ``intersects the polygon" if and only if the intersection of the two has non-zero area.
In the figure below, dashed horizontal and vertical lines are grid lines, and solid lines are edges of the polygon.
Shaded unit squares are considered intersecting the polygon. Your program should output 55 for this polygon
(as you see, the number of shaded unit squares is 55).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2792.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2792.jpg
 ALT="\epsfbox{p2792.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER">Figure 1: A polygon and unit squares intersecting it

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file describes polygons one after another, followed by a terminating line that only contains a single zero.

<P>
A description of a polygon begins with a line containing a single integer, <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH">(<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2792.jpg
 ALT="$ \ge$">3)</SPAN>, that gives the number
of its vertices. It is followed by <SPAN CLASS="MATH"><I>m</I></SPAN> lines, each containing two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>, the coordinates of a vertex.
The <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are separated by a single space. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th of these <SPAN CLASS="MATH"><I>m</I></SPAN> lines gives the coordinates of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th
vertex <!-- MATH
 $(i = 1, \dots, m)$
 -->
<SPAN CLASS="MATH">(<I>i</I> = 1,..., <I>m</I>)</SPAN>. For each <!-- MATH
 $i = 1,\dots, m - 1$
 -->
<SPAN CLASS="MATH"><I>i</I> = 1,..., <I>m</I> - 1</SPAN>, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th vertex and the <SPAN CLASS="MATH">(<I>i</I> + 1)</SPAN>-th vertex are
connected by an edge. The <SPAN CLASS="MATH"><I>m</I></SPAN>-th vertex and the first vertex are also connected by an edge (i.e., the curve is closed).
Edges intersect only at vertices. No three
edges share a single vertex (i.e., the curve is simple). The number of polygons is no more than 100. For each polygon,
the number of vertices <SPAN CLASS="MATH">(<I>m</I>)</SPAN> is no more than 100. All coordinates <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> satisfy <!-- MATH
 $-2000 \le x \le 2000$
 -->
<SPAN CLASS="MATH">-2000<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2792.jpg
 ALT="$ \le$"><I>x</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2792.jpg
 ALT="$ \le$">2000</SPAN>
and <!-- MATH
 $-2000 \le y \le 2000$
 -->
<SPAN CLASS="MATH">-2000<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2792.jpg
 ALT="$ \le$"><I>y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2792.jpg
 ALT="$ \le$">2000</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output should consist of as many lines as the number of polygons. The <SPAN CLASS="MATH"><I>k</I></SPAN>-th output line should print an
integer which is the area of the <SPAN CLASS="MATH"><I>k</I></SPAN>-th polygon, approximated in the way described above. No other characters,
including whitespaces, should be printed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
5 -3
1 0
1 7
-7 -1
3
5 5
18 5
5 10
3
-5 -5
-5 -10
-18 -10
5
0 0
20 2
11 1
21 2
2 0
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
55
41
41
23
</PRE>

<P>

______________________________________________________
2793||||||false||||||

<P>
You are the God of Wind.

<P>
By moving a big cloud around, you can decide the weather: it invariably rains under the cloud, and the sun
shines everywhere else.

<P>
But you are a benign God: your goal is to give enough rain to every field in the countryside, and sun to
markets and festivals. Small humans, in their poor vocabulary, only describe this as ``weather forecast".

<P>
You are in charge of a small country, called Paccimc. This country is constituted of <!-- MATH
 $4 \times 4$
 -->
<SPAN CLASS="MATH">4&#215;4</SPAN> square areas,
denoted by their numbers.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4  </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8  </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 10 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 11 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 12 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 14 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 15 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 16 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Your cloud is of size <!-- MATH
 $2 \times 2$
 -->
<SPAN CLASS="MATH">2&#215;2</SPAN>, and may not cross the borders of the country.

<P>
You are given the schedule of markets and festivals in each area for a period of time.

<P>
On the first day of the period, it is raining in the central areas (6-7-10-11), independently of the schedule.

<P>
On each of the following days, you may move your cloud by 1 or 2 squares in one of the four cardinal directions
(North, West, South, and East), or leave it in the same position. Diagonal moves are not allowed. All moves occur
at the beginning of the day.

<P>
You should not leave an area without rain for a full week (that is, you are allowed at most 6 consecutive days
without rain). You don't have to care about rain on days outside the period you were given: <SPAN  CLASS="textit">i.e</SPAN>. you
can assume it rains on the whole country the day before the period, and the day after it finishes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input is a sequence of data sets, followed by a terminating line containing only a zero.

<P>
A data set gives the number <SPAN CLASS="MATH"><I>N</I></SPAN> of days (no more than 365) in the period on a single line, followed by <SPAN CLASS="MATH"><I>N</I></SPAN> lines
giving the schedule for markets and festivals. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line gives the schedule for the <SPAN CLASS="MATH"><I>i</I></SPAN>-th day.
It is composed of 16 numbers, either `<TT>0</TT>' or `<TT>1</TT>', `<TT>0</TT>' standing for a normal day,
and `<TT>1</TT>' a market or festival day.
The numbers are separated by one or more spaces.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The answer is a `<TT>0</TT>' or `<TT>1</TT>' on a single line for each data set, `<TT>1</TT>' if you can satisfy everybody,
`<TT>0</TT>' if there is no way to do it.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
0 0 0 0  0 1 0 0  0 0 0 0  0 0 0 0
7
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0
1 0 0 0  0 0 1 0  0 0 0 1  1 0 0 1
0 0 0 0  0 0 0 0  1 0 0 0  0 1 0 1
0 0 0 0  0 0 0 0  0 1 0 1  0 0 0 0
0 1 0 1  0 0 0 0  0 0 0 0  0 0 0 0
1 0 0 1  0 0 0 0  0 0 0 0  0 0 0 1
0 0 0 0  0 1 0 0  1 0 0 0  0 0 0 0
7
0 0 0 0  0 0 0 0  1 0 0 0  0 0 0 0
0 0 1 0  0 0 0 1  0 0 0 0  0 1 0 0
0 0 0 1  0 0 0 0  0 0 1 0  1 0 0 0
0 1 0 0  0 0 0 1  0 0 0 0  1 0 0 0
0 0 0 0  0 0 0 0  1 0 0 0  0 0 0 0
0 0 0 0  0 0 0 1  1 0 1 0  0 0 0 1
0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0
15
0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0
0 0 0 0  0 0 0 0  1 0 0 0  0 0 0 0
0 0 0 0  0 0 0 0  1 1 0 0  0 0 0 0
0 0 0 0  0 0 0 0  1 0 0 0  0 0 0 0
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0
0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0
0 0 0 0  0 0 0 0  1 1 0 1  0 0 0 0
0 0 0 0  0 0 0 0  0 0 0 0  1 0 0 0
0 0 1 1  0 0 0 0  0 1 0 0  0 0 0 0
1 1 0 0  0 0 0 0  0 0 1 0  0 1 0 0
0 0 0 0  0 1 0 0  0 0 0 1  0 0 0 0
0 0 1 0  0 0 0 0  0 0 0 0  0 0 1 0
1 0 0 1  1 0 0 0  0 1 0 1  0 0 0 0
0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0
0 0 0 0  0 1 0 1  0 1 0 0  0 0 0 0
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0
1
0
1
</PRE>

<P>

______________________________________________________
2794||||||false||||||
<P>Your mission in this problem is to write a computer program that manipulates molecular formulae in <I>virtual chemistry</I>. As in real chemistry, each molecular formula represents a molecule consisting of one or more atoms. However, it may not have chemical reality.<P><P><BR>The following are the definitions of atomic symbols and molecular formulae you should consider.<UL><LI>An atom in a molecule is represented by an atomic symbol, which is either a single capital letter or a capital letter followed by a small letter. For instance H and He are atomic symbols. </LI><LI>A molecular formula is a non-empty sequence of atomic symbols. For instance, HHHeHHHe is a molecular formula, and represents a molecule consisting of four <TT>H</TT>'s and two <TT>H</TT>e's. </LI><LI>For convenience, a repetition of the same sub-formula <SPAN CLASS="MATH"><IMG WIDTH="65" HEIGHT="75" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$ \overbrace{X \dots X}^{n}_{}\,$"></SPAN>, where <SPAN CLASS="MATH"><I>n</I></SPAN> is an integer between 2 and 99 inclusive, can be abbreviated to <SPAN CLASS="MATH">(<I>X</I>)<I>n</I></SPAN>. Parentheses can be omitted if <SPAN CLASS="MATH"><I>X</I></SPAN> is an atomic symbol. For instance, <TT>HHHeHHHe</TT> is also written as <TT>H2HeH2He</TT>, <TT>(HHHe)2</TT>, <TT>(H2He)2</TT>, or even <TT>((H)2He)2</TT>. </LI></UL><P>The set of all molecular formulae can be viewed as a formal language. Summarizing the above description, the syntax of molecular formulae is defined as follows.<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Molecule</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \rightarrow$"></TD><TD ALIGN="LEFT" NOWRAP><I>Atom</I> | <I>Atom</I>&nbsp;<I>Number</I> | (<I>Molecule</I>)&nbsp;<I>Number</I> | <I>Molecule</I>&nbsp;<I>Molecule</I></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Atom</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \rightarrow$"></TD><TD ALIGN="LEFT" NOWRAP><I>CapitalLetter</I> | <I>CapitalLetter</I>&nbsp;<I>SmallLetter</I></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>Number</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \rightarrow$"></TD><TD ALIGN="LEFT" NOWRAP><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt 2$"> | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt 3$"> | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt 4$"> | ... | <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt 97$"> | <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt 98$"> | <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt 99$"></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>CapitalLetter</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \rightarrow$"></TD><TD ALIGN="LEFT" NOWRAP><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt A$"> | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt B$"> | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt C$"> | ... | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt X$"> | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt Y$"> | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt Z$"></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>SmallLetter</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \rightarrow$"></TD><TD ALIGN="LEFT" NOWRAP><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt a$"> | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt b$"> | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt c$"> | ... | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt x$"> | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt y$"> | <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2794img1.png ALT="$\displaystyle \tt z$"></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P><P>Each atom in our virtual chemistry has its own atomic weight. Given the weights of atoms, your program should calculate the weight of a molecule represented by a molecular formula. The molecular weight is defined by the sum of the weights of the constituent atoms. For instance, assuming that the atomic weights of the atoms whose symbols are <TT>H</TT> and <TT>He</TT> are 1 and 4, respectively, the total weight of a molecule represented by <TT>(H2He)2</TT> is 12.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of two parts. The first part, the Atomic Table, is composed of a number of lines, each line including an atomic symbol, one or more spaces, and its atomic weight which is a positive integer no more than 1000. No two lines include the same atomic symbol.<P>The first part ends with a line containing only the string `<TT>END_OF_FIRST_PART</TT>'.<P>The second part of the input is a sequence of lines. Each line is a molecular formula, not exceeding 80 characters, and contains no spaces. A molecule contains at most <SPAN CLASS="MATH">10<SUP>5</SUP></SPAN> atoms. Some atomic symbols in a molecular formula may not appear in the Atomic Table.<P>The sequence is followed by a line containing a single zero, indicating the end of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is a sequence of lines, one for each line of the second part of the input. Each line contains either an integer, the molecular weight for a given molecular formula in the corresponding input line if all its atomic symbols appear in the Atomic Table, or `<TT>UNKNOWN</TT>' otherwise. No extra characters are allowed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
H  1
He 4
C  12
O  16
F  19
Ne 20
Cu 64
Cc 333
END_OF_FIRST_PART
H2C
(MgF)2As
Cu(OH)2
H((CO)2F)99
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
14
UNKNOWN
98
7426
</PRE><P>
______________________________________________________
2795||||||false||||||

<P>
Let's play a card game called Gap.

<P>
You have 28 cards labeled with two-digit numbers. The first digit (from 1 to 4) represents the
suit of the card, and the second digit (from 1 to 7) represents the value of the card.

<P>
First, you shuffle the cards and lay them face up on the table in four rows of seven cards, leaving a space
of one card at the extreme left of each row. The following shows an example of initial layout.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=8 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 42 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 21 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 13 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 22 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 32 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 26 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 23</TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 16 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 43 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 47 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 14 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 24 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 34 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 36</TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 46 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 17 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 27 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 31 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 11 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 37 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 12</TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 35 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 41 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 44 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 25 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 15 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 33 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 45</TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Next, you remove all cards of value 1, and put them in the open space at the left end of the
rows: ``11" to the top row, ``21" to the next, and so on.

<P>
Now you have 28 cards and four spaces, called gaps, in four rows and eight columns. You start
moving cards from this layout.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=8 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
 11 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 42 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 13 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 22 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 32 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 26 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 23 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 16 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 43 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 47 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 14 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 24 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 34 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 36 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>31 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 46 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 17 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 27 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 37 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 12 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>41 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 35 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  44 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 25 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 15 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 33 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 45 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
At each move, you choose one of the four gaps and fill it with the successor of the left neighbor of the gap.
The successor of a card is the next card in the same suit, when it exists. For instance the successor of ``42"
is ``43", and ``27" has no successor.

<P>
In the above layout, you can move ``43" to the gap at the right of ``42", or ``36" to the gap at the right of ``35".
If you move ``43", a new gap is generated to the right of ``16". You cannot move any card to the right of a card of
value 7, nor to the right of a gap.

<P>
The goal of the game is, by choosing clever moves, to make four ascending sequences of the same suit, as follows.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=8 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
 11 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 12 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 13 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 14 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 15 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 16 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 17 </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 22 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 23 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 24 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 25 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 26 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 27 </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>31 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 32 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 33 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 34 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 35 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 36 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 37 </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>41 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 42 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 43 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 44 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 45 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 46 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 47 </TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Your task is to find the minimum number of moves to reach the goal layout.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input starts with a line containing the number of initial layouts that follow.

<P>
Each layout consists of five lines -- a blank line and four lines which represent initial layouts of four rows.
Each row has seven two-digit numbers which correspond to the cards.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each initial layout, produce a line with the minimum number of moves to reach the goal
layout. Note that this number should not include the initial four moves of the cards of value 1. If there is
no move sequence from the initial layout to the goal layout, produce `<TT>-1</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4

12 13 14 15 16 17 21
22 23 24 25 26 27 31
32 33 34 35 36 37 41
42 43 44 45 46 47 11

26 31 13 44 21 24 42
17 45 23 25 41 36 11
46 34 14 12 37 32 47
16 43 27 35 22 33 15

17 12 16 13 15 14 11
27 22 26 23 25 24 21
37 32 36 33 35 34 31
47 42 46 43 45 44 41

27 14 22 35 32 46 33
13 17 36 24 44 21 15
43 16 45 47 23 11 26
25 37 41 34 42 12 31
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0
33
60
-1
</PRE>

<P>

______________________________________________________
2796||||||false||||||
<P>You are appointed director of a famous concert hall, to save it from bankruptcy. The hall is very popular, and receives many requests to use its two fine rooms, but unfortunately the previous director was not very efficient, and it has been losing money for many years. The two rooms are of the same size and arrangement. Therefore, each applicant wishing to hold a concert asks for a room without specifying which. Each room can be used for only one concert per day.<P>In order to make more money, you have decided to abandon the previous fixed price policy, and rather let applicants specify the price they are ready to pay. Each application shall specify a period <SPAN CLASS="MATH">[<I>i</I>, <I>j</I>]</SPAN> and an asking price <SPAN CLASS="MATH"><I>w</I></SPAN>, where <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN> are respectively the first and last days of the period <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2796img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2796img1.png ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/27/2796img1.png ALT="$ \le$">365)</SPAN>, and <SPAN CLASS="MATH"><I>w</I></SPAN> is a positive integer in yen, indicating the amount the applicant is willing to pay to use a room for the whole period.<P>You have received applications for the next year, and you should now choose the applications you will accept. Each application should be either accepted for its whole period or completely rejected. Each concert should use the same room during the whole applied period.<P>Considering the dire economic situation of the concert hall, artistic quality is to be ignored, and you should just try to maximize the total income for the whole year by accepting the most profitable applications.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input has multiple data sets, each starting with a line consisting of a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of applications in the data set. Then, it is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each of which represents one application with a period <SPAN CLASS="MATH">[<I>i</I>, <I>j</I>]</SPAN> and an asking price <SPAN CLASS="MATH"><I>w</I></SPAN> yen in the following format.<P><P><BR><SPAN CLASS="MATH"><I>i</I>&nbsp;<I>j</I>&nbsp;<I>w</I></SPAN><P><P><BR>A line containing a single zero indicates the end of the input.<P>The maximum number of applications in a data set is one thousand, and the maximum asking price is one million yen.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, print a single line containing an integer, the maximum total income in yen for the data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
1 2 10
2 3 10
3 3 10
1 3 10
6
1 20 1000
3 25 10000
5 15 5000
22 300 5500
10 295 9000
7 7 6000
8
32 251 2261
123 281 1339
211 235 5641
162 217 7273
22 139 7851
194 198 9190
119 274 878
122 173 8640
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
30
25500
38595
</PRE><P>
______________________________________________________
2797||||||false||||||
                                                                                                           
<P>
Once upon a time when people still believed in magic, there was a great wizard Aranyaka Gondlir.
After twenty years of hard training in a deep forest, he had finally mastered ultimate magic, and
decided to leave the forest for his home.

<P>
Arriving at his home village, Aranyaka was very surprised at the extraordinary desolation. A
gloom had settled over the village. Even the whisper of the wind could scare villagers. It was a mere
shadow of what it had been.

<P>
What had happened? Soon he recognized a sure sign of an evil monster that is immortal. Even
the great wizard could not kill it, and so he resolved to seal it with magic. Aranyaka could cast a spell
to create a monster trap: once he had drawn a line on the ground with his magic rod, the line would function
as a barrier wall that any monster could not get over. Since he could only draw straight lines, he had to draw
several lines to complete a monster trap, i.e., magic barrier walls enclosing the monster. If there was a gap
between barrier walls, the monster could easily run away through the gap.

<P>
For instance, a complete monster trap without any gaps is built by the barrier walls in the left figure,
where ``M" indicates the position of the monster. In contrast, the barrier walls in the right figure have
a loophole, even though it is almost complete.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2797.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/27/p2797.jpg
 ALT="\epsfbox{p2797.eps}">
</DIV>

<P>
Your mission is to write a program to tell whether or not the wizard has successfully sealed the monster.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple data sets, each in the following format.

<P>

<P>
<BR>

<TABLE COLS=4>
<COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
       <SPAN CLASS="MATH"><I>n</I></SPAN> </TD><TD></TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
       <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>x'</I><SUB>1</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y'</I><SUB>1</SUB></SPAN></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
       <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>x'</I><SUB>2</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y'</I><SUB>2</SUB></SPAN> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH">...</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH">...</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH">...</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH">...</SPAN> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
       <SPAN CLASS="MATH"><I>x</I><SUB>n</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>n</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>x'</I><SUB>n</SUB></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y'</I><SUB>n</SUB></SPAN></TD></TR>
</TABLE>

<P>

<P>
<BR>
The first line of a data set contains a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>, which is the number of the line segments
drawn by the wizard. Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> input lines contains four integers <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, <SPAN CLASS="MATH"><I>x'</I></SPAN> , and <SPAN CLASS="MATH"><I>y'</I></SPAN> ,
which represent the <SPAN CLASS="MATH"><I>x</I></SPAN>- and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates of two points <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> and <SPAN CLASS="MATH">(<I>x'</I>, <I>y'</I>)</SPAN> connected by a line segment.
You may assume that all line segments have non-zero lengths. You may also assume that <SPAN CLASS="MATH"><I>n</I></SPAN> is less than or equal
to 100 and that all coordinates are between -50 and 50, inclusive.

<P>
For your convenience, the coordinate system is arranged so that the monster is always on the origin (0, 0).
The wizard never draws lines crossing (0, 0).

<P>
You may assume that any two line segments have at most one intersection point and that no
three line segments share the same intersection point. You may also assume that the distance between any two
intersection points is greater than <SPAN CLASS="MATH">10<SUP>-5</SUP></SPAN>.

<P>
An input line containing a zero indicates the end of the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, print `<TT>yes</TT>' or `<TT>no</TT>' in a line. If a monster trap is completed,
print `<TT>yes</TT>'. Otherwise, i.e., if there is a loophole, print `<TT>no</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8
-7 9 6 9
-5 5 6 5
-10 -5 10 -5
-6 9 -9 -6
6 9 9 -6
-1 -2 -3 10
1 -2 3 10
-2 -3 2 -3
8
-7 9 5 7
-5 5 6 5
-10 -5 10 -5
-6 9 -9 -6
6 9 9 -6
-1 -2 -3 10
1 -2 3 10
-2 -3 2 -3
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
yes
no
</PRE>

<P>

______________________________________________________
2798||||||false||||||
<P>Baby Hueys obsession for the week was circles. He would consistently go after all things round:
 Frisbees, plates,wheels, hubcaps, and even the occasional manhole cover. Being large and stubborn,
 Baby Huey had built up quite a collection in his sandbox.

<p>Today, Baby Huey discovered his Papas coin collection and his Mamas set of trays. Pleased at 
having uniformsets of disks to play with, Baby Huey started to devise different games to amuse himself.

<p>His favorite game, by far, was to arrange a circle of coins of the same type along the inner
 rim of one of his Mamas trays. He would do this without filling in the space formed by the circle
 of coins, like so:

<p><img src=2798a.gif>

<p>No one really knows why Baby Huey likes playing this game, but Mama and Papa were secretly
 pleased that Baby Huey had started to apply his counting skills. Baby Huey would try to guess 
the number of coins he could fit in the tray! Of course, they were hoping he wouldnt break their
 precious collections in the process.

<p>Play along with Baby Huey in his simple game. Use your computer to predict the number of coins
 he can fit into each tray.

<p>Write a program that will take in the radius t of a tray and the radius c of a coin (same units,
 both integers). The output of this program should be the number of coins that can line the inner
 rim of the tray.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input file consists of several test cases. Each test case consists of two lines. The first line
 is the radius of the tray, and the second line is the radius of the coins, both of which do not exceed
 4,294,967,296.



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>The output goes something like: "6 coins of size 2 will fit the inner rim of a tray of size 6." The
 number of coins is always an integer. If the coin happens to be too big to fit in a tray, output 
should be "Coin cannot fit in the tray.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
6

2

8

5

4

6

</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
6 coins of size 2 will fit the inner rim of a tray of size 6.

1 coin of size 5 will fit the inner rim of a tray of size 8.

Coin cannot fit in tray.
</PRE>

<P>

______________________________________________________
2799||||||false||||||
<p>Organic compounds are molecules mainly made up of carbon. The atoms and molecular bonds that comprise a certain organic compound molecule can be diagrammed in several ways. Two diagrams may look different but actually represent the same organic compound. These 2 diagrams describe the same molecule (CH<sub>3</sub>CHO).<p align=center><img src=2799a.gif><p>This is because they both have 2 carbon (C) atoms which have a single bond between them, and one carbon atom with a double bond with oxygen (O) and the rest of the bonds are with hydrogen (H). Without changing the atoms or breaking the molecular bonds, the atoms can be moved around so that 2 diagrams become identical.<p>These 2 diagrams are not equivalent, though they have the same chemical formula (C<sub>4</sub>H<sub>8</sub>)<p align=center><img src=2799b.gif><p>The 1st molecule has a double bond between the 1st and 2nd carbon atoms, and the 2nd molecule has a double bond between the 2nd and 3rd carbon atoms. The atoms of the 2nd diagram cannot be moved around so that the 2 diagrams become identical. In general, two diagrams are similar if 1.) the atoms in both can be labeled in such a way that for each pair of corresponding atoms, the 2 atoms are of the same element and 2.) they bond with the same number of other atoms of each type (element), and 3.) for each atom they bond with, they have the same type of bond. Create a program that determines whether 2 diagrams represent the same organic compound. This program does not have to handle molecules with rings (i.e. the molecular bonds form a ring anywhere inside the molecule).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The program accepts 1-3 test cases. Following the last test case is a single line containing "#".<p>For each test case, the 1st line contains 2 numbers, A (1 <= A <= 300) and b (0 <= b <= 299), where
 A equals the number of atoms, and b equals the number of bonds between atoms.

<p>The following lines contain the atomic symbols for each atom (length is 1 or 2) in the 1st molecule.
 Atomic symbols are entered in the normal case, i.e. upper-case 1st letter, and lower-case 2nd letter
 in the case of 2-letter symbols. The atoms are labeled 1, 2, 3, and so on, in the sequence they are 
entered. If less than A number of atoms have been read so far, read the next line until A atoms have
 been read.

<p>The next b lines represent the bonds between atoms in the 1st molecule, and each line has 3 numbers 
separated with single spaces. The 1st number is the label of one atom (as labeled in the atom symbol
 sequence), and the 2nd number is the label of another atom, and the 3rd number is the type of bond 
(1 = single bond, 2 = double bond, 3 = triple bond).

<p>The following line is the sequence of atomic symbols for the 2nd molecule. Again, read succeeding
 lines until A atoms are read. Then the last b lines represent the bonds between atoms in the 2nd 
molecule.

<p>Assume that the inputs follow the laws of chemical composition, such as the Octet Rule.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, the program should output "EQUAL" if the 2 representations represent the
same molecule and "NOT EQUAL" otherwise.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 2
H O H
1 2 1
2 3 1
H H O
1 3 1
2 3 1
8 7
C C O H H H O H
1 2 1
1 6 1
1 7 1
2 3 1
2 4 1
2 5 1
3 8 1
C H O H C H O H
1 2 1
1 3 1
1 4 1
5 1 2
5 6 1
5 7 1
3 8 1
#
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
EQUAL
NOT EQUAL
</PRE>

<P>

______________________________________________________
2800||||||false||||||
<p>On his way to save his damsel in distress, Prince Charming was delayed by the beguiling ways of Mab, 
the evil enchantress. Mab had managed to trap him in an underground dungeon, where the only way out was
 through a steel door. (It seems Prince Charming wont be doing any saving any time soon.)

<p>However, Mab was given orders (by the author of the fairytale, who else?) to give someone a chance to
 free Prince Charming. Upon hearing this, she cast a spell on the door such that when an outsider (like
 you) wrote the magic password on it, it would unlock to free the prince. To give you a chance to figure 
out the word, she left a cube full of letters and a list of words outside the door.

<p>The cube contains a jumble of letters arranged in such a way that there are as many layers as there are 
letters along the length and breadth of each layer of the cube. The words in the list contain the words 
you will need to find in the cube in order to figure out the magic password.

<p align=center><img src="http://livearchive.onlinejudge.org/external/28/2800a.gif>

<p>The words can be found arranged in a line in the cube. For the example above, they can be arranged like
 C-F-I, GM-S, or I-N-S.

<p>Once you have found a word, find the letter before the first letter of the word and keep it for later. 
For the example above, if the word is "MY", the letter to keep is "A". However, if the first letter is at
 the edge of the cube, you will need to find the letter after the last letter of the word. For example, if
 the word is "IN", the letter to keep is "S".

<p>Ordering the letters found according to the original list of words will form the magic password. Take 
note that not all words in the list are in the cube.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


<p>The input contains only one test case. The first line consists of integers n and m where n represents
 the number of words in the list, and m represents the number of layers in the cube. The next n lines are
 the words in the list. The m lines that follow these consist of one layer, with each row of a layer
 separated by a comma, read back to front. The maximum number of layers is 20. The maximum number of
 words is 100.



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>A group of letters ordered according to the list of words they are associated with. Leading or
 trailing white space characters are not allowed.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5,3
MY
SO
IN
WE
BE
CFI,BEH,ADG
LOR,KNQ,JMP
UXA,TWZ,SVY
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
ASH
</PRE>

<P>

______________________________________________________
2801||||||false||||||
<P>In the study of abstract algebra, a mathematical structure you are introduced to early in the
 subject is the GROUP. Technically, a group is a coordinate pair consisting of a set and a binary
 operator, although the set can also be referred to as a group under the binary operator. The binary 
operator of the group must have the following properties: 1.) it must be closed over the set of the
 group; 2.) it must be associative over the set of the group; 3.) the set must have an identity 
element under the binary operator; and, 4.) each element must have an inverse under the binary
 operator. For example, the set of integers is a group under addition, but is not a group under 
multiplication.

<p>Each group may, in turn, have subgroups, which consists as a subset of the group and the same
 binary operator. The subgroup, of course, is a group by itself. From the above example, the set
 of even integers is a subgroup of the group of integers under addition. 

<p>The study of groups underlies many self-contained deterministic mathematical structures, and 
the study of finite groups is a staple of abstract algebra. An example of a finite group is the 
remainder set of modulo 9 (that is, {0, 1, 2, 3, 4, 5, 6, 7, 8}) under addition modulo 9. It must
 be noted that each subgroup subdivides the parent group into exclusive equal-sized sets called
 equivalence classes, or cosets. For example, the set of even integers generates the equivalence
 classes of the set of even numbers and the set of odd numbers. For another example, the group of
 the remainder set of modulo 9 has a subgroup {0, 3, 6} which generates the equivalence classes
 {0, 3, 6}, {1, 4, 7} and {2, 5, 8}. You are asked to generate all of the subgroups of a given
 finite group.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>In the input file, the first line will contain the number of groups you will analyze, which
 will be a number from 1 to 5. This will be followed by blocks containing the groups themselves. 

<p>Each block for one group will start with a line with a number n from 1 to 24. This will be the
 size (number of elements) of (the set of) the group. The elements of (the set of) the group will
 be {0, 1, ..., n-1}. This will be followed by the group table, which is composed n lines, each
 of which should be a permutation of 0, 1, ... , n-1, the numbers separated by commas. The group 
table will determine the results of the binary operation of the group. To elaborate, if ~ denotes
 the binary operator of the group, the fifth number on the third line of a group table indicates
 the result of 2~4. In general, the result of m~n is the (n+1)th number on the (m+1)th line of the
 group table.

<p>Each group indicated thus can be assumed to follow the description of a group, and its implied 
binary operator will be closed over the set, be associative, have an identity element, and each
 element will have an inverse element.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>Output must contain the proper subgroups of each of the groups indicated in in the. Proper subgroups
 are proper subsets of the set of a group.

<p>The elements of each subgroup must be sorted in increasing order. For each group, the subgroups must
 be sorted by increasing size, and for subgroups of the same size, the subgroups must be sorted by
 increasing elements: {2, 4, 7, 8} will come before {2, 4, 7, 10} and {2, 5, 6, 7}.

<p>After listing the subgroups of each group, show a line starting with 3 asterisks and followed by a 
space and a number indicating the number of subgroups of that group.




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
9
0,1,2,3,4,5,6,7,8
1,2,3,4,5,6,7,8,0
2,3,4,5,6,7,8,0,1
3,4,5,6,7,8,0,1,2
4,5,6,7,8,0,1,2,3
5,6,7,8,0,1,2,3,4
6,7,8,0,1,2,3,4,5
7,8,0,1,2,3,4,5,6
8,0,1,2,3,4,5,6,7
4
2,3,0,1
3,2,1,0
0,1,2,3
1,0,3,2

</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0
0, 3, 6
*** 2
2
0, 2
1, 2
2, 3
*** 4
</PRE>

<P>

______________________________________________________
2802||||||false||||||
<P>Jill approached Jana and Pia. They agreed at an earlier time that they were supposed to study for a 
big exam in their Geometry class. Jill greeted them, "How are you, girls? Have you heard of the latest
 from Boy Abunda, that crazy TV showbiz host?" 

<p>"With the upcoming exam in Geometry, I'm not able to keep track of these things," Pia retorted. 
"Anyway, why don't we start the study group already?" 

<p>This was the best opportunity for Jana to bring up a problem. "I've been trying to hurdle this particular
 problem, regarding angle bisectors meeting at a certain point."

<p>Possessing wit beyond compare among her peers, Jill, with such overflowing confidence, exhorted,
 "Well, Jana, you prove that indirectly. Assume that they don't meet at a singular point ..."

<p>"No, no, no, we're figured that out just a while back," Pia cut in. "We're wondering how to get the
 coordinates of the intersection of angle bisectors of a triangle, given the three vertices of the same
 triangle."

<p>Jana and Jill started poring themselves over all available materials they had placed on their desk
 ... but to no avail. "I can't seem to find anything in here that could actually help us in this issue,"
 Jill rued, "That's so annoying, ha?" "Yahh, you're telling me," Jana concurred, doodling a diagram to
 help them visualize the problem.

<p align=center><img src="http://livearchive.onlinejudge.org/external/28/2802a.gif>

<p>As they were still engrossed over this problem, Pia somehow cranked up their intellectual juices
 and came up with a daring idea, "Why don't we program a solution for this?" Let's say you're in Pia's
 position. Your task is to create a solution that determines the coordinates of the intersection of the
 angle bisectors of a triangle, given the coordinates of the vertices.






<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The first line of the standard input indicates the number of triangles you need to resolve, which do
 not exceed 100 triangles. The following lines would contain the vertex sets that contain the coordinates
 of the triangle, devoting each line for every vertex. The numbers in the coordinates are separated only
 by a comma and are integers whose absolute value does not exceed 65,535.






<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>Each line would contain the coordinates of the vertices for a triangle and the coordinates of the 
intersection of their angle bisectors, following the format below: 

<p>(x1,y1)(x2,y2)(x3,y3):(x4,y4)

<p>where (x1,y1), (x2,y2), (x3,y3) refer to the coordinates of the vertices and (x4,y4) refer to the
 coordinates of the angle bisector intersection. When necessary, truncate up to 4 decimal places.




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
0,0
100,100
200,0
0,0
200,200
400,0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
(0,0)(100,100)(200,0):(100,41.4213)
(0,0)(200,200)(400,0):(200,82.8427)
</PRE>

<P>

______________________________________________________
2803||||||false||||||
<P>You've been asked to make a simple text-based database that can store any number of fields associated
 with records. IDs can contain letters, numbers, dashes (-), and slashes (/), and are case-sensitive. 
The standard data format for 

<p>input and output is:

<p><pre>record-id
field-id
some data here
terminated with
a single period
.
</pre>

<p>There are NO blank lines between entries.

<p>Some commands have lists of record IDs or field IDs. These are comma-separated lists of IDs (no spaces)
 that specify the order of the output. * can be specified instead of a list of IDs. If * is specified for
 the record IDs, treat it as a comma-separated lexicographically sorted list of all the record IDs with 
at least one field in the database. If * is specified for the field IDs, treat it as a comma-separated 
lexicographically sorted list of all the field IDs defined by at least one record in the database.

<p>The list of commands and their parameters follows:

<p align=center><img src="http://livearchive.onlinejudge.org/external/28/p2803a.gif></p>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>Read commands from the specified input file, one command per line. There will be at most 50,000 lines
 in the input (including any read files), a mix of commands and data. IDs will be at most 64 characters 
long. There will be at most 10,000 field IDs and 10,000 record IDs defined at any given time, although 
more may be defined after the old IDs have been deleted. Each line will be at most 255 characters long.
 Record field data will be at most 2,000 lines long.





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>Only the show command produces output. Print the output in the standard data format to the standard
 output stream. The program should finish the given input within 60 seconds. 




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
append team-bar prob-b
1400 Accepted.
.
append team-foo prob-a
1305 Wrong answer.
.
show team-foo,team-bar *
append team-foo prob-a
1402 Accepted.
.
rem Hmm...
delete team-bar *
.
show * *
done
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
team-foo
prob-a
1305 Wrong answer.
.
team-foo
prob-b
NO DATA
.
team-bar
prob-a
NO DATA
.
team-bar
prob-b
1400 Accepted.
.
*
team-foo
prob-a
1305 Wrong answer.
1402 Accepted.
.
*
</PRE>

<P>

______________________________________________________
2804||||||false||||||
<P>Every year, when the nights are at their longest, the menfolk of Baga set out at dawn to gather the
 elusive herb dimaquha for their midnight rites. Under the guidance of a seemingly erratic medicine man, 
they take with them the sacred platform mounted on runners (for none else may bear the elusive dimaquha),
 and for its sake they cut furrows through the plains and the woodlands as they wander at the medicine
 man's bidding. 

<p>Though seemingly erratic, their medicine man never fails, each year somehow finding the elusive herb
 . . . but cutting furrows is hard work, and the exhausted men of Baga would prefer to return using the
 tracks created by their initial wanderings.

<p align=center><img src="http://livearchive.onlinejudge.org/external/28/2804a.gif>
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


<p>Input will consist of a series of cartesian coordinates, delimited by a comma, one per line, that mark
 the initial path taken by the sacred platform. Each series of coordinates will consist of anywhere
 between 1 and 1,000 points, inclusive. As the file may contain more than one set of coordinates, 
the end of each set will be marked by a line containing a single period. Input will be terminated 
by an empty set - that is, two consecutive lines each containing a single period. Each
 coordinate will have at most 2 decimal places and, if necessary, will have a leading zero. 
The range of the coordinates is from -32,768 to 32,767 inclusive.






<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>The output for each set should be a series of Cartesian coordinates, one per line, that mark the
 shortest path from the last point to the first point. Note that this return path may contain points
 that are not present in the input set - one day is not enough to fill in the marks of their wanderings,
 and the menfolk of Baga may create new intersections when two of their furrows cross. Should one such
 intersection provide a shorter route home, the menfolk of Baga will not hesitate to use it to guide back
 the sacred platform.

<p>All values should be truncated to two decimal places. The end of each set should be followed by a line
containing a single period.




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
0, 0
.
0.25, -1
1, 15
.
0, 0
15, 0
10, 0
10, -5
5, -5
5, 5
.
.
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0.00, 0.00
.
1.00, 15.00
0.25, -1.00
.
5.00, 5.00
5.00, 0.00
0.00, 0.00
.
</PRE>

<P>

______________________________________________________
2805||||||false||||||
<P>Dominatrix is a game that uses 3-D domino pieces. The pieces are composed of blocks that fit in a
 3x3x3 matrix, and the facets of each block are either blank, or marked with a 1-, 2-, 3-, 4-, 5- or
 6-dot configuration. You are to create a program that determines if 2 Dominatrix pieces are the same. 
In other words, if one piece can be rotated and/or translated within the 3x3x3 matrix, the two pieces
 are identical. The data for 1 piece is encoded in the following manner: First, a series of 0's and 1's 
determines where a block exists in the 3x3x3 matrix. The blocks are laid out along the X-axis, Y-axis, and
 Z-axis. Representing the blocks in (x,y,z) coordinates, they are laid out (0,0,0), (0,0,1), (0,0,2),
 (0,1,0), ... (2,2,2).

<p align=center><img src="http://livearchive.onlinejudge.org/external/28/2805a.gif>

<p>The succeeding data is derived from scanning the dot configurations on each visible facet of each block,
 from each of the 6 sides of the 3x3x3 matrix containing the Dominatrix piece. The scanner scans first from
 the +Z (top) side of the matrix, then swivels down to the -Y (north) side, then round to the +X (east)
 side, then to the +Y (south) side, then to the -X (west) side, then finally to the -Z (bottom) side. 

<p>When the scanner reads each side of the 3x3x3 matrix, it scans from left to right, then from top to
 bottom. The number of dots for each facet for each block is encoded into the file. If there are less
than 9 facets scanned for each side of the matrix because some blocks are missing, only the dot configurations
 that are read are encoded. 

<p>Facets of blocks that cannot be reached by the scanner from any side are assumed to be blank.

<p align=center><img src="http://livearchive.onlinejudge.org/external/28/2805a.gif>


<p>There are 9 dot configurations that can be scanned from each block facet, since there are 2 possible 
orientations for the 2-, 3-, and 6-dot facets. The alternate configurations for these are encoded as 7,
 8 and 9 respectively.


<p align=center><img src="http://livearchive.onlinejudge.org/external/28/2805a.gif>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


<p>The input is composed of at most 10 test cases, each test case being 2 consecutive sequences of data for 2

<p>Dominatrix pieces. The line following the last test case contains "#".

<p>For each test case, first a sequence of 27 numbers, composed of 0's/1's, 1 for the existence of blocks at
 coordinates (0,0,0), (0,0,1), (0,0,2), (0,1,0), ... (2,2,2) is inputted. Following is a sequence of data
 representing the scanning of each side of the piece as described above. After the sequence of data for the
 1st Dominatrix piece, the sequence of data for the 2nd Dominatrix piece follows after a carriage return. 

<p>All numbers are delimited by any number of spaces and/or carriage returns.





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, the program should output a single line, containing "EQUAL" if the 2 pieces are equal,
 and "NOT EQUAL" if they are not.




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 1 1 1 1 1 1 1 1
1 1 1 1 0 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2
3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4
5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6
1 1 1 1 1 1 1 1 1
1 1 1 1 0 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 5 5 5 5 5 5 5 5 5
2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3
4 4 4 4 4 4 4 4 4 9 9 9 9 9 9 9 9 9
#
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
EQUAL
</PRE>

<P>

______________________________________________________
2806||||||false||||||
<P>
Among grandfather's papers a bill was found:

<P>
<DIV ALIGN="CENTER">
72 turkeys $<SPAN CLASS="MATH"><SUB><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2806img1.png
 ALT="$\scriptstyle \sqcup$"></SUB></SPAN>679<SPAN CLASS="MATH"><SUB><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2806img1.png
 ALT="$\scriptstyle \sqcup$"></SUB></SPAN>
</DIV>

<P>
The first and the last digits of the number that obviously represented the total price of those turkeys are
 replaced here by blanks (denoted <SPAN CLASS="MATH"><SUB><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2806img1.png
 ALT="$\scriptstyle \sqcup$"></SUB></SPAN>), for they are faded and are now illegible. What are the two faded digits
 and what was the price of one turkey?

<P>
We want to write a program that solves a general version of the above problem:

<P>
<DIV ALIGN="CENTER">
<SPAN CLASS="MATH"><I>N</I></SPAN> turkeys $<!-- MATH
 $_{\sqcup}XYZ_{\sqcup}$
 -->
<SPAN CLASS="MATH"><SUB><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2806img1.png
 ALT="$\scriptstyle \sqcup$"></SUB><I>XYZ</I><SUB><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2806img1.png
 ALT="$\scriptstyle \sqcup$"></SUB></SPAN>
</DIV>

<P>
The total number of turkeys, <SPAN CLASS="MATH"><I>N</I></SPAN>, is between 1 and 99, including both. The total price originally consisted of five
digits, but we can see only the three digits in the middle. We assume that the first digit is nonzero,  that the
price of one turkey is an integer number of dollars, and that all the turkeys cost the same price.

<P>
Given <SPAN CLASS="MATH"><I>N</I>, <I>X</I>, <I>Y</I></SPAN>, and <SPAN CLASS="MATH"><I>Z</I></SPAN>, write a program that guesses the two faded digits and the original price. In case that
 there is more than one candidate for the original price, the output should be the most expensive one. That is,
 the program is to report the two faded digits and the maximum price per turkey for the turkeys.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> is given on the first line of the input file.
The first line of each test case contains an integer <!-- MATH
 $N (0 < N < 100)$
 -->
<SPAN CLASS="MATH"><I>N</I>(0 &lt; <I>N</I> &lt; 100)</SPAN>, which represents the number of turkeys.
In the following line, there are the three decimal digits <SPAN CLASS="MATH"><I>X</I>, <I>Y</I></SPAN>, and <SPAN CLASS="MATH"><I>Z</I></SPAN>, separated by a space, of the original
price `$<!-- MATH
 $_{\sqcup}XYZ_{\sqcup}$
 -->
<SPAN CLASS="MATH"><SUB><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2806img1.png
 ALT="$\scriptstyle \sqcup$"></SUB><I>XYZ</I><SUB><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2806img1.png
 ALT="$\scriptstyle \sqcup$"></SUB></SPAN>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For  each  test  case,  your  program  has  to  do  the  following.  For  a  test  case,  there  may  be  more
than  one candidate for the original price or  there is none. In the latter case your program is to report `<TT>0</TT>'.
Otherwise,  if there is more than one candidate for the original price, the program is to report the two faded
digits and the maximum price per turkey for the turkeys. The following shows sample input and output for three test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
72
6 7 9
5
2 3 7
78
0 0 5
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3 2 511
9 5 18475
0
</PRE>

<P>

______________________________________________________
2807||||||false||||||
<P>There is an analog clock with two hands: an hour hand and a minute hand. The two hands form an angle. The angle is measured as the smallest angle between the two hands. The angle between the two hands has a measure that is greater than or equal to 0 and less than or equal to 180 degrees.<P>Given a sequence of five distinct times written in the format <SPAN CLASS="MATH"><I>hh</I></SPAN>:<SPAN CLASS="MATH"><I>mm</I></SPAN>, where <SPAN CLASS="MATH"><I>hh</I></SPAN> are two digits representing full hours <SPAN CLASS="MATH">(00<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2807img1.png ALT="$ \le$"><I>hh</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2807img1.png ALT="$ \le$">23)</SPAN> and <SPAN CLASS="MATH"><I>mm</I></SPAN> are two digits representing minutes <SPAN CLASS="MATH">(00<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2807img1.png ALT="$ \le$"><I>mm</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2807img1.png ALT="$ \le$">59)</SPAN> , you are to write a program that finds the median, that is, the third element of the sorted sequence of times in a nondecreasing order of their associated angles. Ties are broken in such a way that an earlier time precedes a later time.<P>For example, suppose you are given a sequence (06:05, 07:10, 03:00, 21:00, 12:55) of times. Because the sorted sequence is (12:55, 03:00, 21:00, 06:05, 07:10), you are to report 21:00.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> is given on the first line of the input file. Each test case is given on a single line, which contains a sequence of five distinct times, where times are given in the format `<TT><SPAN CLASS="MATH"><I>hh</I></SPAN>:<SPAN CLASS="MATH"><I>mm</I></SPAN></TT>' and are separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line is to contain the median in the format `<TT><SPAN CLASS="MATH"><I>hh</I></SPAN>:<SPAN CLASS="MATH"><I>mm</I></SPAN></TT>' of the times given. The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
00:00 01:00 02:00 03:00 04:00
06:05 07:10 03:00 21:00 12:55
11:05 12:05 13:05 14:05 15:05
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
02:00
21:00
14:05
</PRE><P>
______________________________________________________
2808||||||false||||||
<P>There is a billiard table with a square shape, where each side has a unit length, and there are pockets at the four corners. A billiard ball hit at some corner of the table moves along some direction. Whenever the ball hits the side of the table not at a corner, it is reflected in the mirror direction, and it continues to travel on the table until the ball reaches a corner and drops into a pocket.<P>We label the four sides of the billiard table with N(orth), S(outh), E(ast), and W(est) and label the four corners with 1, 2, 3, and 4 as in the following figure. Suppose the billiard table is located in a plane so that corner 1 matches the origin of the coordinate system, and sides S and W of the table are parallel with the <SPAN CLASS="MATH"><I>x</I></SPAN>- and the <SPAN CLASS="MATH"><I>y</I></SPAN>-axes, respectively. Given the slope of the line along which the ball starts at the origin, compute the sequence of sides of the billiard table which the ball bounces off and the corner in which the ball drops into a pocket.<P>For example, if the slope of the line along which the ball starts is <SPAN CLASS="MATH">3/5</SPAN>, then the trajectory of the ball until it drops into a pocket is shown in the figure below on the right. The ball leaves corner 1 and bounces off sides E, N, W, E, S, and W sequentially and finally drops into a pocket in corner 3.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2808.jpg ALT="\epsfbox{p2808.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> is given on the first line of the input file. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>p</I></SPAN>, <SPAN CLASS="MATH"><I>q</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2808.jpg ALT="$ \le$"><I>p</I>, <I>q</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2808.jpg ALT="$ \le$">100</SPAN>), where the quotient <SPAN CLASS="MATH"><I>p</I>/<I>q</I></SPAN> is the slope of the line along which the ball leaves corner 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program reports the sequence of sides of the billiard table which the ball bounces off and the corner in which the ball drops into a pocket. In the first line, your program reports the number of sides of the table the ball bounces off. In the second line, your program sequentially reports the sequence of sides of the table which the ball bounces off and the final corner in which the ball drops into a pocket. If the ball cannot drop into a pocket in some corner, your program is to report an integer `<TT>-1</TT>' on the first line. The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
3 5
1 2
2 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6
E N W E S W 3
1
E 4
0
3
</PRE><P>
______________________________________________________
2809||||||false||||||
<P>The students in Kim's class did a popularity vote to determine who were popular in the class. Each student was asked to write down the ID numbers of at most three students, except himself/herself, whom he or she liked.<P>After the vote was over and popular students were chosen, Kim, looking at the vote result, was curious to solve the following math question: What was the largest core?<P>A set of students is called a <SPAN CLASS="textit">core</SPAN> if every student in the set<P><UL><LI>voted, </LI><LI>liked some students in it but no one outside it, and </LI><LI>was liked by some one in it. </LI></UL><P>More formally, each student will be represented by his or her student ID number from, <SPAN CLASS="MATH">{1, 2,..., <I>N</I>}</SPAN>, where the class has <SPAN CLASS="MATH"><I>N</I></SPAN> students. For example, the table below shows the result of a vote by 12 students in Kim's class.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Student number</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>The numbers written down</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4, 8</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9, 12, 3</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1, 6</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8, 7, 6</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD></TR></TBODY></TABLE></DIV><P><P><BR>Students 3, 9, and 11 were absent from school and did not vote, so they do not appear in the left column of the table.<P>Kim found the set <SPAN CLASS="MATH">{1, 4, 5, 6, 8}</SPAN> to be a core; every student in it voted, liked some students in it but not outside it, and was liked by some one in it. More specifically, 1 liked <SPAN CLASS="MATH">{4, 8}</SPAN>, 4 liked <SPAN CLASS="MATH">{8}</SPAN>, 5 liked <SPAN CLASS="MATH">{1, 6}</SPAN>, 6 liked <SPAN CLASS="MATH">{5}</SPAN>, and 8 liked <SPAN CLASS="MATH">{1}</SPAN>. They collectively liked <SPAN CLASS="MATH">{4, 8, 1, 6, 5}</SPAN>, which are themselves. The number of students in this set is five. <SPAN CLASS="MATH">{1, 4, 8}</SPAN> is also a core, but it is smaller. As a matter of fact, no core with six or more students is possible from the table. Thus, the size of the largest core of the vote result above is five.<P>Write a program to find the size of the largest core of a vote result.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> is given on the first line of the input file. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN>, where <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2809img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2809img1.png ALT="$ \le$">10000</SPAN>) is the number of students in the class, and <SPAN CLASS="MATH"><I>M</I></SPAN> is the number of students who voted. Each of the following <SPAN CLASS="MATH"><I>M</I></SPAN> lines is to begin with an integer <SPAN CLASS="MATH"><I>i</I></SPAN> representing a student ID number in <SPAN CLASS="MATH">{1, 2,..., <I>N</I>}</SPAN>, which is to be followed by an integer <SPAN CLASS="MATH"><I>N</I><SUB>i</SUB></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2809img1.png ALT="$ \le$"><I>N</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2809img1.png ALT="$ \le$">3)</SPAN> representing the number of students written down by student <SPAN CLASS="MATH"><I>i</I></SPAN>, which is to be followed in turn by a sequence of <SPAN CLASS="MATH"><I>N</I><SUB>i</SUB></SPAN> integers representing the ID numbers written down by student <SPAN CLASS="MATH"><I>i</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line is to contain an integer that is the size of the largest core. The following shows sample input and output for two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
12 9
1 2 4 8
2 3 9 12 3
4 1 8
5 2 1 6
6 1 5
7 1 8
8 1 1
10 3 8 7 6
12 1 10
5 4
1 1 2
2 1 3
3 1 4
4 1 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5
0
</PRE><P>
______________________________________________________
2810||||||false||||||
<P>A team marathon (relay race) is held in Seoul. The team marathon rules are as follows:<P><UL><LI>Each team consists of exactly <SPAN CLASS="MATH"><I>N</I></SPAN> runners. </LI><LI>The winner is the team that runs the longest distance for <SPAN CLASS="MATH"><I>D</I></SPAN> days. </LI><LI>For each day, exactly one runner from each team should run. </LI><LI>If a team member runs on a particular day, that team member should run for the entire day. </LI><LI>That is, runner exchanges are only possible at the beginning of each day. </LI><LI>Each of the <SPAN CLASS="MATH"><I>N</I></SPAN> runners on a team should run for at least one day, but at most three days. </LI><LI>If a runner participates in running for a day or for a sequence of days, and then, is switched with another runner, he/she cannot participate in the marathon again. </LI></UL><P><P><BR>A team, called <SPAN CLASS="textit">chic-chic-pok-pok</SPAN>, joins the team marathon. The coach of the team has already determined the order in which his <SPAN CLASS="MATH"><I>N</I></SPAN> runners will run in <SPAN CLASS="MATH"><I>D</I></SPAN> days, but has not yet decided the exact number of days each runner should run. Now, he will make that determination by examining each runner's prior running record. The running record of each runner contains a list of three numbers. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th <SPAN CLASS="MATH">(<I>i</I> = 1, 2, 3)</SPAN> number indicates the distance (in kilometers) he/she can run for a period of <SPAN CLASS="MATH"><I>i</I></SPAN> consecutive day(s). For example, if the running record of a runner is (4,7,9), the coach assumes that the runner can run distances of 4 kilometers in one day, 7 kilometers in two days, and 9 kilometers in three days. Note that if <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>, <I>c</I>)</SPAN> is the running record of a runner, it should satisfy that <SPAN CLASS="MATH"><I>a</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2810img1.png ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2810img1.png ALT="$ \le$"><I>c</I></SPAN> .<P>Now, the coach wants to know the longest distance his team can run for <SPAN CLASS="MATH"><I>D</I></SPAN> days. For example, suppose <SPAN CLASS="MATH"><I>N</I> = 3</SPAN>, <SPAN CLASS="MATH"><I>D</I> = 4</SPAN>, and the running records of the first, second, and third runners on team <SPAN CLASS="textit">chic-chic-pok-pok</SPAN> are (4,7,8), (2,4,6), and (4,5,6), respectively. Then, the longest distance the team can run in 4 days is 13 kilometers; The first runner runs 7 km in two days (i.e., the first and the second days), the second runs 2 km in a single day (i.e., the third day), and the third runs 4 km in a single day (i.e., the fourth day).<P>Write a program that returns the longest distance the team can run in <SPAN CLASS="MATH"><I>D</I></SPAN> days.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> is given on the first line of the input file. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, the number of runners on team-<SPAN CLASS="textit">chic-chic-pok-pok</SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2810img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2810img1.png ALT="$ \le$">50</SPAN>. The next line contains an integer <SPAN CLASS="MATH"><I>D</I></SPAN>, the number of days in the marathon, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2810img1.png ALT="$ \le$"><I>D</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2810img1.png ALT="$ \le$">150</SPAN>. The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contain the runners' running records, one for each runner, from the first runner to the last runner.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line is to contain the integer that is the longest distance the team can run in <SPAN CLASS="MATH"><I>D</I></SPAN> days. If it is impossible to calculate the distance due to a lack of or an inconsistency in the running records, or if there is a violation of the marathon rules, the line is to contain `<TT>-1</TT>'. The following shows sample input and output for two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
4
4 7 8
2 4 6
4 5 6
2
7
2 3 5
3 6 8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
13
-1
</PRE><P>
______________________________________________________
2811||||||false||||||
<P>The genealogy of a family can be represented as a rooted tree, in which each node corresponds to a member of the family, and each edge connects a member to his/her parent. The root is the founder of the family and has no parent in the genealogy; leaf nodes correspond to those with no child. The distance between two members in a genealogy is called a <SPAN CLASS="textit">ChonSu</SPAN> in Korea, which is defined as the number of edges on the path between them. For example, in the genealogy shown below, the ChonSu between persons 1 and 3 is 3 while the ChonSu between persons 1 and 5 is 5. From now on, the ChonSu between person <SPAN CLASS="MATH"><I>i</I></SPAN> and person <SPAN CLASS="MATH"><I>j</I></SPAN> will be denoted by <SPAN CLASS="MATH"><I>ChonSu</I>(<I>i</I>, <I>j</I>)</SPAN> .<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2811.jpg ALT="\epsfbox{p2811.eps}"></DIV><P>A rooted tree in which each node, unless it is a leaf node, has exactly two children is a 2-<SPAN CLASS="textit">tree</SPAN>. In other words, a 2-tree is a binary tree in which each node has either two children or none. For example, the tree shown above is a 2-tree.<P>Consider a family whose complete genealogy is unknown. What is known about the genealogy of the family is that it is a 2-tree and it has <SPAN CLASS="MATH"><I>n</I></SPAN> leaf nodes. Assume that the leaf nodes are numbered from <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> in the left-to-right order as shown in the figure above. Also known about the genealogy is the ChonSu between every pair of leaf nodes whose numbers are consecutive; i.e., <SPAN CLASS="MATH"><I>ChonSu</I>(<I>i</I>, <I>i</I> + 1)</SPAN> for every <SPAN CLASS="MATH"><I>i</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2811.jpg ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2811.jpg ALT="$ \le$"><I>n</I> - 1</SPAN>) is known.<P>It is well known that only from the information about the family given above, the ChonSu between any two leaf nodes can be computed.<P>You are to write a program to compute the ChonSu between two leaf members <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN> (<!-- MATH
 $1 \le x < y \le n$
 --> <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2811.jpg ALT="$ \le$"><I>x</I> &lt; <I>y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2811.jpg ALT="$ \le$"><I>n</I></SPAN>) given as an input.<P><P><BR>For the example above, you are given as input, <SPAN CLASS="MATH"><I>n</I> = 6</SPAN>, <SPAN CLASS="MATH"><I>ChonSu</I>(1, 2) = 3</SPAN>, <SPAN CLASS="MATH"><I>ChonSu</I>(2, 3) = 2</SPAN>, <SPAN CLASS="MATH"><I>ChonSu</I>(3, 4) = 5</SPAN>, <SPAN CLASS="MATH"><I>ChonSu</I>(4, 5) = 3</SPAN>, and <SPAN CLASS="MATH"><I>ChonSu</I>(5, 6) = 2</SPAN>. From this information, you can compute <SPAN CLASS="MATH"><I>ChonSu</I>(1, 6)</SPAN>, that is, the ChonSu between <SPAN CLASS="MATH"><I>x</I> = 1</SPAN> and <SPAN CLASS="MATH"><I>y</I> = 6</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> is given on the first line of the input file. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2811.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2811.jpg ALT="$ \le$">1, 000)</SPAN> , the number of leaf nodes. The next line contains a sequence of <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> integers which are <SPAN CLASS="MATH"><I>ChonSu</I>(1, 2)</SPAN>, <SPAN CLASS="MATH"><I>ChonSu</I>(2, 3)</SPAN>, ..., <SPAN CLASS="MATH"><I>ChonSu</I>(<I>n</I> - 1, <I>n</I>)</SPAN>. The last line of each test case contains two distinct integers <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN> <!-- MATH
 $(1 \le x < y \le n)$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2811.jpg ALT="$ \le$"><I>x</I> &lt; <I>y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2811.jpg ALT="$ \le$"><I>n</I>)</SPAN> which are the numbers of the two leaf members between whom the ChonSu is to be computed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line is to contain an integer that is the <I>ChonSu</I> between two leaf nodes. The following shows sample input and output for two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
6
3 2 5 3 2
1 6
6
4 2 4 2 5
2 6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5
5
</PRE><P>
______________________________________________________
2812||||||false||||||
<P>
A union is an instance of playing the same pitch or of playing in octave. We want to arrange new polyphonic
   music with three different monophonic music scores of arbitrary length. Each monophonic music
score has only 7  tones, C(do), D(re), E(mi), F(fa), G(sol), A(la), B(si) with the same interval.

<P>
You can see  polyphonic music  X with  three monophonic music scores (Music1, Music2, Music3) in Figure 1.
           Note that the lengths of Music1, Music2, and Music3  are 12, 12, 11, respectively.  `&amp;' is the symbol of
           a  pause  and  means  that  no  tone  is  played  in  that  position.  Music  X  is  the  same  as
           playing  3  different
monophonic music scores (Music1, 2, 3) simultaneously.   The tones in each column of Figure-1 denote a set of
tones to be played simultaneously in  polyphonic music.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=13 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=10> Start</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP COLSPAN=2> end</TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Playing column</B>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>6</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 9 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>10</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 11 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>12</B> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Music1</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  A  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Music2</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  A </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Music3</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  &amp; </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Unison weight</B>   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  1 </TD></TR>
</TBODY>
</TABLE>

</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER">Figure 1: A newly arranged polyphonic music  X with unison weight  7.

</DIV>

<P>

<P>
<BR>
Let us define ``unison" in this problem.  A unison is  an instance where the same tones are played simultaneously
   in a score.  Thus, column1 =  { A, F, A } and  column2  = {C, C, F}  are not   unisons, so the music score X
   has only three unisons:  column6={B, B, B},   column10 = {D, D, D}, and column12 = {A, A, &amp; } . Formally,
   a column <!-- MATH
 $M = \{x, y, z\}$
 -->
<SPAN CLASS="MATH"><I>M</I> = {<I>x</I>, <I>y</I>, <I>z</I>}</SPAN> is a  unison, if <SPAN CLASS="MATH"><I>M</I></SPAN> has three of the same tones or two of the same tones plus `&amp;'.
   If <!-- MATH
 $x = y = z  \ne$
 -->
<SPAN CLASS="MATH"><I>x</I> = <I>y</I> = <I>z</I><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2812img1.png
 ALT="$ \ne$"></SPAN> &amp;, then the weight of  the unison is 3. If  <SPAN CLASS="MATH"><I>M</I></SPAN> has  two  of the same tones and a single `&amp;',
   then the weight of  the column is 1. The sum of all unisons in a score is called the total unison weight.
   The following table shows  the unison weight for each tone set.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<B>Tones in a column</B>            </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      <B>Unison weight</B> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>C  C  C            </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>                 3 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D  D  D             </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>                3 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E  E  E              </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>               3 </TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>              3 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
.........</TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B  B  B             </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>                3 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>C  C  &amp;             </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>                1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D  D  &amp;              </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>                1 </TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>              1 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
.........</TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B  B &amp;              </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>                1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>All others             </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>              0 </TD></TR>
</TBODY>
</TABLE>

</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER">Table 1:  Unison weight table for the tones in a column.

</DIV>

<P>

<P>
<BR>
The unison weight of score X in Figure-1 is 3 + 3 + 1 = 7. However, if we arrange X to get another music by
inserting  pause  symbols  smartly,  then  we  can  increase  the  total  unison  weight  significantly.
Figure  2 shows another arrangement Y with unison weight 25.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=17 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=14> Start</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP COLSPAN=2> end</TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Playing column</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    <B>1</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>2</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>3</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>5</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>6</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>7</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>9</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>10</B>
</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>11</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>12</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>13</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 14 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>15</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>16</B> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Music1</B>    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Music2</B>    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Music3</B>    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Unison weight</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY>
</TABLE>

</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER">Figure 2: Another polyphonic music Y with unison weight 25.

</DIV>

<P>

<P>
<BR>
You are asked to compute the maximal unison weight from three different music scores by optimally inserting `&amp;'
 symbols in each score. <SPAN  CLASS="textbf">One important constraint on inserting `&amp;' is that you should not insert more
 than one consecutive  `&amp;' in a music score.</SPAN> See  Figure 3 for this constraint. Also, you are not allowed to
 modify the tones (melody) or  to change the sequence of tones. Keep in mind that your arrangement can only
 insert &amp;'s separately to get  a maximal unison.

<P>
Write a program that finds the maximal unison weight  by using an optimal arrangement.

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=15 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
   <B>Playing</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 9 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 10 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 11 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 12 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 13 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 14 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Music1</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Music2</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Music3</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> F </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> C </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> &amp; </TD></TR>
</TBODY>
</TABLE>

</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER">  Figure 3: This arrangement is not allowed (infeasible arrangement) because Music2
                          includes more than one  &amp;.

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> is given  on the first line of the input file.
Each test case starts with three lines containing a string of monophonic music scores consisting of a symbol
set ={<TT>C</TT>,<TT>D</TT>,<TT>E</TT>,<TT>F</TT>,<TT>G</TT>,<TT>A</TT>,<TT>B</TT>}.
<SPAN  CLASS="textbf">There is a blank line between test cases.</SPAN> The maximal length of each monophonic
music score string is 100.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, your program reports only one number, the maximal total unison weight of each testing case
in a line.  If  there is no arrangement satisfying the constraint, then print `<TT>-1</TT>' as the output. The following
shows sample input and output for four test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
ABCDEF
BCDEFG
DEFGAB

GABBCDEACF
GAFGFCBBDEDD
AFAFGCEECDEDF

BCDEFGGADEF
BCDE
CDEFGABBA

GAGABDEDCGAFFAB
DAFFAGAEECCBA
GCBDAAEGEAGAFF
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
15
-1
14
</PRE>

<P>

______________________________________________________
2813||||||false||||||
<P>
Here is a game played on a cycle by two players. The rule of this game is as follows: At first, a cycle is given
  and each edge is assigned a non-negative integer. Among those integers, at least one is zero. Further a coin is
  put  on  a  vertex  of  the  cycle.  From  this  vertex,  the  game  starts  and  proceeds  with  two  players'
  alternating moves with the following series of choices:

<P>

<P>
<BR>
 <TABLE COLS=2>
<COL ALIGN=CENTER><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
 (1) </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Choose an edge  incident with the vertex having the coin, </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
 (2) </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Decrease the value of this edge to any non-negative integer strictly, </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
 (3) </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Move the coin to the adjacent vertex along this edge.
</TD></TR>
</TABLE>

<P>

<P>
<BR>
The game ends when a player on his turn cannot move because the value of each edge incident with the vertex
 having the coin is equal to zero. Then, that player is the loser.

<P>

<P>
<BR>
Figure 1 illustrates an actual game. In this game, Alice is the first player and Bob is the second player.
 In the starting position in Figure 1 (a), Alice cannot but choose the right edge of the vertex having the coin.
 Alice then decreases its value from 2 to 0, and moves the coin along this edge, which makes (a) into (b). Next,
 Bob cannot but choose the down edge of the vertex having the coin; he then decreases its value from 5 to 1,
 which makes (b) into (c). In Figure 1 (c), Alice chooses the up edge of the vertex having the coin and decreases
 its value  from  1  to  0,  which  makes  (c)  into  (d).  Finally,  in  Figure  1  (d),  Bob  has  no  move
 since  each  edge incident with the vertex having the coin is assigned to zero. Then, Alice wins this game.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2813.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/p2813.jpg
 ALT="\epsfbox{p2813.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER">Figure 1: An example of cycle game (A coin is put on the black vertex)

</DIV>

<P>
In fact, whenever the game starts as shown in Figure 1 (a), the first player can always win for any second
  player's move. In other words, in the starting position in Figure 1 (a), the first player has a winning strategy.

<P>
In this problem, you should determine whether or not the first player has a winning strategy from a given
 starting position.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> is given on the first line of the
input file. Each test case starts with a line containing an integer  <SPAN CLASS="MATH"><I>N</I></SPAN> <!-- MATH
 $(3 \le N \le  20 )$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/p2813.jpg
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/p2813.jpg
 ALT="$ \le$">20)</SPAN> , where  <SPAN CLASS="MATH"><I>N</I></SPAN> is
the number of vertices in a cycle. On the next line, there are the  <SPAN CLASS="MATH"><I>N</I></SPAN> non-negative integers assigned to the
edges of the cycle. The  <SPAN CLASS="MATH"><I>N</I></SPAN> integers  are  given  in  clockwise order starting  from  the vertex having  the
coin and  they  are  separated by  a single space. Note that at least one integer value among the  <SPAN CLASS="MATH"><I>N</I></SPAN> integers
must be zero and that the value of no integer can be larger than 30.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Print exactly one line for each test case. The line is to contain `<TT>YES</TT>' if the first player has a
winning strategy from  the  starting  position.  Otherwise,  the  line  is  to  contain  `<TT>NO</TT>'.
The  following  shows  sample  input  and output for two test cases. The following shows sample input and
output for two test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
4
2 5 3 0
3
0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
YES
NO
</PRE>

<P>

______________________________________________________
2814||||||false||||||
<P>We have a robot and an obstacle in a 2-dimensional plane. The robot is represented as a rectilinear square, and the obstacle as a rectilinear polygon. By rectilinear, we mean that the edges of a polygon are either horizontal or vertical. Initially, the robot is located outside the obstacle; that is, it does not intersect the boundary and is not in the interior of the obstacle. The robot wants to "escape" the obstacle by moving in horizontal or vertical directions without intersecting the obstacle. We say that the robot escapes the obstacle if it moves completely out of the smallest rectangle containing the obstacle (refer to Figure 1 and Figure 2). Note that the robot can be located outside of the smallest rectangle initially. You are to write a program for determining whether or not a robot can escape the obstacle.<P><P><BR>In Figure 1 the robot cannot escape the obstacle, but in Figure 2 it can escape the obstacle; <SPAN CLASS="MATH"><I>R</I></SPAN> represents a robot and <SPAN CLASS="MATH"><I>P</I></SPAN> represents an obstacle. Let <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> be the coordinate of a vertex of <SPAN CLASS="MATH"><I>P</I></SPAN>. Both <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are multiples of 10 and <SPAN CLASS="MATH">10<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2814img1.png ALT="$ \le$"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2814img1.png ALT="$ \le$">1, 000, 000</SPAN>. The length of an edge of <SPAN CLASS="MATH"><I>R</I></SPAN> is a natural number less than 1,000,000, and its lowest digit is always 2, e.g., 2, 12, 22, 32, etc.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2814img1.png ALT="\epsfbox{p2814.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> is given on the first line of the input file. The first line of each test case contains 3 integers <SPAN CLASS="MATH"><I>n</I><SUB>x</SUB></SPAN>, <SPAN CLASS="MATH"><I>n</I><SUB>y</SUB></SPAN>, and <SPAN CLASS="MATH"><I>w</I></SPAN> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2814img1.png ALT="$ \le$"><I>n</I><SUB>x</SUB>, <I>n</I><SUB>y</SUB>, <I>w</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2814img1.png ALT="$ \le$">1, 000, 000)</SPAN>, where <SPAN CLASS="MATH">(<I>n</I><SUB>x</SUB>, <I>n</I><SUB>y</SUB>)</SPAN> is the coordinate of the left-bottom corner of the robot <SPAN CLASS="MATH"><I>R</I></SPAN> and <SPAN CLASS="MATH"><I>w</I></SPAN> is the length of an edge of <SPAN CLASS="MATH"><I>R</I></SPAN> with the lowest digit of <SPAN CLASS="MATH"><I>w</I></SPAN> being fixed to 2. The second line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(4<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2814img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2814img1.png ALT="$ \le$">1, 000)</SPAN>, where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of vertices of a rectilinear polygon <SPAN CLASS="MATH"><I>P</I></SPAN>. The following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain the coordinates of the vertices of <SPAN CLASS="MATH"><I>P</I></SPAN> in counterclockwise order. Each line contains two integers <SPAN CLASS="MATH"><I>n</I><SUB>x</SUB></SPAN> and <SPAN CLASS="MATH"><I>n</I><SUB>y</SUB></SPAN> <SPAN CLASS="MATH">(10<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2814img1.png ALT="$ \le$"><I>n</I><SUB>x</SUB>, <I>n</I><SUB>y</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2814img1.png ALT="$ \le$">1, 000, 000</SPAN> and <SPAN CLASS="MATH"><I>n</I><SUB>x</SUB></SPAN> and <SPAN CLASS="MATH"><I>n</I><SUB>y</SUB></SPAN> are multiples of 10), where <SPAN CLASS="MATH"><I>n</I><SUB>x</SUB></SPAN> is the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate and <SPAN CLASS="MATH"><I>n</I><SUB>y</SUB></SPAN> is the <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate of a vertex of <SPAN CLASS="MATH"><I>P</I></SPAN>. A robot <SPAN CLASS="MATH"><I>R</I></SPAN> is outside of <SPAN CLASS="MATH"><I>P</I></SPAN> for every test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program reports `<TT>YES</TT>' if the robot can escape the obstacle or `<TT>NO</TT>' otherwise. The following shows sample input and output for two test cases. The following shows sample input and output for two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
30 30 12
12
10 10
90 10
90 60
80 60
80 20
20 20
20 70
50 70
50 50
70 50
70 90
10 90
200 200 52
12
450 500
100 500
100 100
450 100
450 250
350 250
350 150
150 150
150 300
250 300
250 400
450 400
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
NO
YES
</PRE><P>
______________________________________________________
2815||||||false||||||
<P>Michael The Kid receives an interesting game set from his grandparent as his birthday gift. Inside the game set box, there are n tiling blocks and each block has a form as follows:<P><DIV ALIGN="CENTER"><IMG WIDTH="511" HEIGHT="230" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2815.jpg ALT="\epsfbox{p2815.eps}"></DIV><P>Each tiling block is associated with two parameters <SPAN CLASS="MATH">(<I>l</I>, <I>m</I>)</SPAN>, meaning that the upper face of the block is packed with <SPAN CLASS="MATH"><I>l</I></SPAN> protruding knobs on the left and <SPAN CLASS="MATH"><I>m</I></SPAN> protruding knobs on the middle. Correspondingly, the bottom face of an <SPAN CLASS="MATH">(<I>l</I>, <I>m</I>)</SPAN>-block is carved with <SPAN CLASS="MATH"><I>l</I></SPAN> caving dens on the left and <SPAN CLASS="MATH"><I>m</I></SPAN> dens on the middle.<P>It is easily seen that an <SPAN CLASS="MATH">(<I>l</I>, <I>m</I>)</SPAN>-block can be tiled upon another <SPAN CLASS="MATH">(<I>l</I>, <I>m</I>)</SPAN>-block. However, this is not the only way for us to tile up the blocks. Actually, an <SPAN CLASS="MATH">(<I>l</I>, <I>m</I>)</SPAN>-block can be tiled upon another <SPAN CLASS="MATH">(<I>l'</I>, <I>m'</I>)</SPAN>-block if and only if <SPAN CLASS="MATH"><I>l</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2815.jpg ALT="$ \geq$"> <I>l'</I></SPAN> and <SPAN CLASS="MATH"><I>m</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2815.jpg ALT="$ \geq$"> <I>m'</I></SPAN> .<P>Now the puzzle that Michael wants to solve is to decide what is the tallest tiling blocks he can make out of the given n blocks within his game box. In other words, you are given a collection of <SPAN CLASS="MATH"><I>n</I></SPAN> blocks <SPAN CLASS="MATH"><I>B</I> = {<I>b</I><SUB>1</SUB>, <I>b</I><SUB>2</SUB>,..., <I>b</I><SUB>n</SUB>}</SPAN> and each block <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> is associated with two parameters <SPAN CLASS="MATH">(<I>l</I><SUB>i</SUB>, <I>m</I><SUB>i</SUB>)</SPAN>. The objective of the problem is to decide the number of tallest tiling blocks made from <SPAN CLASS="MATH"><I>B</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Several sets of tiling blocks. The inputs are just a list of integers. For each set of tiling blocks, the first integer <SPAN CLASS="MATH"><I>n</I></SPAN> represents the number of blocks within the game box. Following <SPAN CLASS="MATH"><I>n</I></SPAN>, there will be <SPAN CLASS="MATH"><I>n</I></SPAN> lines specifying parameters of blocks in <SPAN CLASS="MATH"><I>B</I></SPAN>; each line contains exactly two integers, representing left and middle parameters of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th block, namely, <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN>. In other words, a game box is just a collection of <SPAN CLASS="MATH"><I>n</I></SPAN> blocks <SPAN CLASS="MATH"><I>B</I> = {<I>b</I><SUB>1</SUB>, <I>b</I><SUB>2</SUB>,..., <I>b</I></SPAN>n<SPAN CLASS="MATH">}</SPAN> and each block <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> is associated with two parameters <SPAN CLASS="MATH">(<I>l</I><SUB>i</SUB>, <I>m</I><SUB>i</SUB>)</SPAN>.<P>Note that <SPAN CLASS="MATH"><I>n</I></SPAN> can be as large as 10000 and <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN> are in the range from 1 to 100. An integer <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> (zero) signifies the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of tiling blocks <SPAN CLASS="MATH"><I>B</I></SPAN>, output the number of the tallest tiling blocks can be made out of <SPAN CLASS="MATH"><I>B</I></SPAN>. Output a single star `<TT>*</TT>' to signify the end of outputs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
3 2
1 1
2 3
5
4 2
2 4
3 3
1 1
5 5
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
3
*
</PRE><P>
______________________________________________________
2816||||||false||||||
<P>A binary image, such as the one shown in Figure 2(a), is usually represented as an array of binary entries, i.e., each entry of the array has value 0 or 1. Figure 2(b) shows the array that represents the binary image in Figure 2(a). To store the binary image of Figure 2(b), the so-called <SPAN CLASS="textit">quad tree partition</SPAN> is usually used. For an <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> array, <SPAN CLASS="MATH"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2816img1.gif ALT="$ \le$">512</SPAN> and <SPAN CLASS="MATH"><I>N</I> = 2<SUP>i</SUP></SPAN> for some positive integer <SPAN CLASS="MATH"><I>i</I></SPAN>, if the entries do not have the same value, then it is partitioned into four <SPAN CLASS="MATH"><I>N</I>/2&#215;<I>N</I>/2</SPAN> arrays, as shown in Figure 2(c). If an <SPAN CLASS="MATH"><I>N</I>/2&#215;<I>N</I>/2</SPAN> array does not have the same binary value, such as the upper right and lower right <SPAN CLASS="MATH"><I>N</I>/2&#215;<I>N</I>/2</SPAN> arrays in Figure 2(c), then we can divide it into four <SPAN CLASS="MATH"><I>N</I>/4&#215;<I>N</I>/4</SPAN> arrays again. These <SPAN CLASS="MATH"><I>N</I>/4&#215;<I>N</I>/4</SPAN> arrays in turn can also, if needed, be divided into four <SPAN CLASS="MATH"><I>N</I>/8&#215;<I>N</I>/8</SPAN> arrays, etc.. The quad tree partition is completed when the whole array is partitioned into arrays of various size in which each array contains only one binary value. Figure 2(c) contains the arrays after the quad tree partition is completed.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2816img1.gif ALT="\epsfbox{p2816.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2: A binary image (a), its array representation (b), its quad tree partition (c), and its quad tree representation (d).</DIV><P>Instead of storing the binary image of Figure 2(a), we only need to store the quad tree in the form as Figure 2(d) which is encoded from Figure 2(c). In Figure 2(d), each node represents an array of Figure 2(c) in which the root node represents the original array. If the value of a node in the tree is 1, then it means that its corresponding array needs to be decomposed into four smaller arrays. Otherwise, a node will have a pair of values and the first one is 0. It means that its corresponding array is not necessary to decompose any more. In this case, the second value is 0 (respectively, 1) to indicate that all the entries in the array are 0 (respectively, 1). Thus, we only need to store the tree of Figure 2(d) to replace storing the binary image of Figure 2(a). The way to store the tree of Figure 2(d) can be represented by the following code: (1)(0,0)(1)(0,1)(1)(0,0)(0,1)(1)(0,0)(0,0)(0,0)(0,1)(0,1)(0,0)(0,1)(0,0)(0,1). This code is just to list the values of the nodes from the root to leaves and from left to right in each level. Deleting the parentheses and commas, we can obtain a binary number 100101100011000000010100010001 which is equal to 258C0511 in hexadecimal. You are asked to design a program for finding the resulting hexadecimal value for each given image.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is an integer number <SPAN CLASS="MATH"><I>k</I>, 1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2816img1.gif ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2816img1.gif ALT="$ \le$">100</SPAN>, in the first line to indicate the number of test cases. In each test case, the first line is also a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> indicating that the binary image is an <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> array, where <SPAN CLASS="MATH"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2816img1.gif ALT="$ \le$">512</SPAN> and <SPAN CLASS="MATH"><I>N</I> = 2<SUP>i</SUP></SPAN> for some positive integer <SPAN CLASS="MATH"><I>i</I></SPAN>. Then, an <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> binary array is followed in which at least one blank is between any two elements.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The bit stream (in hexadecimal) used to code each input array.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
2
0 0
0 0
4
0 0 1 1
0 0 1 1
1 1 0 0
1 1 0 0
8
0 0 0 0 0 0 1 1
0 0 0 0 0 0 1 1
0 0 0 0 0 1 0 0
0 0 0 0 0 1 0 0
1 1 1 1 0 0 0 0
1 1 1 1 0 0 0 0
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
114
258C0511
</PRE><P>
______________________________________________________
2817||||||false||||||
<P>Severe acute respiratory syndrome (SARS), an atypical pneumonia of unknown aetiology, was recognized as a global threat in mid-March 2003. To minimize transmission to others, the best strategy is to separate the suspects from others.<P>In the Not-Spreading-Your-Sickness University (NSYSU), there are many student groups. Students in the same group intercommunicate with each other frequently, and a student may join several groups. To prevent the possible transmissions of SARS, the NSYSU collects the member lists of all student groups, and makes the following rule in their standard operation procedure (SOP).<P><DIV ALIGN="CENTER">Once a member in a group is a suspect, all members in the group are suspects.</DIV><P>However, they find that it is not easy to identify all the suspects when a student is recognized as a suspect. Your job is to write a program which finds all the suspects.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several cases. Each test case begins with two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> in a line, where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of students, and <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of groups. You may assume that <!-- MATH
 $0 < n \le 30000$
 --><SPAN CLASS="MATH">0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2817img1.gif ALT="$ \le$">30000</SPAN> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2817img1.gif ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2817img1.gif ALT="$ \le$">500</SPAN>. Every student is numbered by a unique integer between 0 and <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>, and initially student 0 is recognized as a suspect in all the cases. This line is followed by <SPAN CLASS="MATH"><I>m</I></SPAN> member lists of the groups, one line per group. Each line begins with an integer <SPAN CLASS="MATH"><I>k</I></SPAN> by itself representing the number of members in the group. Following the number of members, there are <SPAN CLASS="MATH"><I>k</I></SPAN> integers representing the students in this group. All the integers in a line are separated by at least one space.<P>A case wit <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> and <SPAN CLASS="MATH"><I>m</I> = 0</SPAN> indicates the end of the input, and need not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, output the number of suspects in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100 4
2 1 2
5 10 13 11 12 14
2 0 1
2 99 2
200 2
1 5
5 1 2 3 4 5
1 0
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
1
1
</PRE><P>
______________________________________________________
2818||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN> be a connected graph without loops and multiple edges, where <SPAN CLASS="MATH"><I>V</I></SPAN> and <SPAN CLASS="MATH"><I>E</I></SPAN> are the vertex and edge, respectively, sets of <SPAN CLASS="MATH"><I>G</I></SPAN>. For any two vertices <SPAN CLASS="MATH"><I>u</I>, <I>v</I> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2818img1.gif ALT="$ \in$"> <I>V</I></SPAN> , the <EM>distance</EM> between vertices <SPAN CLASS="MATH"><I>u</I></SPAN> and <SPAN CLASS="MATH"><I>v</I></SPAN> in <SPAN CLASS="MATH"><I>G</I></SPAN> is the number of edges in a shortest <SPAN CLASS="MATH"><I>u</I> - <I>v</I></SPAN> path. A shortest path between <SPAN CLASS="MATH"><I>u</I></SPAN> and <SPAN CLASS="MATH"><I>v</I></SPAN> is called a <SPAN CLASS="MATH"><I>u</I> - <I>v</I></SPAN> <SPAN CLASS="textit">geodesic</SPAN>. Let <SPAN CLASS="MATH"><I>I</I>(<I>u</I>, <I>v</I>)</SPAN> denote the set of vertices such that a vertex is in <SPAN CLASS="MATH"><I>I</I>(<I>u</I>, <I>v</I>)</SPAN> if and only if it is in some <SPAN CLASS="MATH"><I>u</I> - <I>v</I></SPAN> geodesic of <SPAN CLASS="MATH"><I>G</I></SPAN> and, for a set <SPAN CLASS="MATH"><I>S</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2818img1.gif ALT="$ \subseteq$"> <I>V</I></SPAN> , <SPAN CLASS="MATH"><I>I</I>(<I>S</I>) = <IMG WIDTH="41" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2818img1.gif ALT="$\displaystyle \bigcup_{u,v\in S}^{}$"><I>I</I>(<I>u</I>, <I>v</I>)</SPAN>. A vertex set <SPAN CLASS="MATH"><I>D</I></SPAN> in graph <SPAN CLASS="MATH"><I>G</I></SPAN> is called a <SPAN CLASS="textit">geodetic set</SPAN> if <SPAN CLASS="MATH"><I>I</I>(<I>D</I>) = <I>V</I></SPAN> . The <EM>geodetic set problem</EM> is to verify whether <SPAN CLASS="MATH"><I>D</I></SPAN> is a geodetic set or not. We use Figure 3 as an example. In Figure 3, <SPAN CLASS="MATH"><I>I</I>(2, 5) = {2, 3, 4, 5}</SPAN> since there are two shortest paths between vertices 2 and 5. We can see that vertices 3 and 4 are lying on one of these two shortest paths respectively. However, <SPAN CLASS="MATH"><I>I</I>(2, 5)</SPAN> is not a geodetic set since <SPAN CLASS="MATH"><I>I</I>(2, 5) <IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2818img1.gif ALT="$ \neq$"> <I>V</I></SPAN> . Vertex set <SPAN CLASS="MATH">{1, 2, 3, 4, 5}</SPAN> is intuitively a geodetic set of <SPAN CLASS="MATH"><I>G</I></SPAN>. Vertex set <SPAN CLASS="MATH"><I>D</I> = {1, 2, 5}</SPAN> is also a geodetic set of <SPAN CLASS="MATH"><I>G</I></SPAN> since vertex 3 (respectively, vertex 4) is in the shortest path between vertices 1 and 5 (respectively, vertices 2 and 5). Thus, <SPAN CLASS="MATH"><I>I</I>(<I>D</I>) = <I>V</I></SPAN> . Besides, vertex sets <SPAN CLASS="MATH">{1, 3, 4}</SPAN> and <SPAN CLASS="MATH">{1, 4, 5}</SPAN> are also geodetic sets. However, <SPAN CLASS="MATH"><I>D</I> = {3, 4, 5}</SPAN> is not a geodetic set since vertex 1 is not in <SPAN CLASS="MATH"><I>I</I>(<I>D</I>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of a given graph and several test cases. The first line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> indicating the number of vertices in the given graph, where <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2818img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2818img1.gif ALT="$ \le$">40</SPAN>. The vertices of a graph are labeled from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. Each vertex has a distinct label. The following n lines represent the adjacent vertices of vertex <SPAN CLASS="MATH"><I>i</I>, <I>i</I> = 1, 2,..., <I>n</I></SPAN>. For example, the second line of the sample input indicates that vertex 1 is adjacent with vertices 2 and 3. Note that any two integers in each line are separated by at least one space. After these <SPAN CLASS="MATH"><I>n</I></SPAN> lines, there is a line which contains the number of test cases. Each test case is shown in one line and represents a given subset <SPAN CLASS="MATH"><I>D</I></SPAN> of vertices. You have to determine whether <SPAN CLASS="MATH"><I>D</I></SPAN> is a geodetic set or not.<P><DIV ALIGN="CENTER"><IMG WIDTH="191" HEIGHT="268" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2818img1.gif ALT="\epsfbox{p2818.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output `<TT>yes</TT>' in one line if it is a geodetic set or `<TT>no</TT>' otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
2 3
1 3 4
1 2 5
2 5
3 4
6
1 2 3 4 5
1 2 5
2 4
1 3 4
1 4 5
3 4 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
yes
yes
no
yes
yes
no
</PRE><P>
______________________________________________________
2819||||||false||||||
<P>
Afkiyia is a big mountain. Inside the mountain, there are many caves. These caves are connected by tunnels.
   Hidden in one of the caves is a terrorist leader. Each tunnel connects two caves. There could be more than
   one tunnels connect the same two caves. At the joint of a tunnel and a cave, there is a door. From time to
   time, the terrorists close a tunnel by shutting the two doors at the two ends, and ``clean" the tunnel.
   It is still a mystery how they clean the tunnel. However, we know that if a person (or any living creature)
   is trapped in the tunnel when it is being cleaned, then the person (or the living creature) will die.
   After a cleaning of the tunnel is finished, the door will open, and the tunnel can be used again.

<P>
Now the intelligence servicemen have found out which cave the leader is hiding, and moreover, they know
   the schedule of the cleaning of the tunnels. Jing Raider is going to go into the cave and catch the leader.
   You need to help him find a route so that he can get to that cave in the shortest time. Be careful not to be
   trapped in a tunnel when it is being cleaned.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of a number of test cases. The 1st line of a test case contains four positive
integers <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>s</I></SPAN>, <SPAN CLASS="MATH"><I>t</I></SPAN>, separated by at least one space, where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of caves
numbered <!-- MATH
 $1, 2, \dots , n)$
 -->
<SPAN CLASS="MATH">1, 2,..., <I>n</I>)</SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of tunnels (numbered <!-- MATH
 $1, 2, \dots , m)$
 -->
<SPAN CLASS="MATH">1, 2,..., <I>m</I>)</SPAN>, <SPAN CLASS="MATH"><I>s</I></SPAN> is the cave
where Jing is located at time 0, and <SPAN CLASS="MATH"><I>t</I></SPAN> is the cave where the terrorist leader is hiding.
<!-- MATH
 $(1 \le  s, t \le  n  \le 50 \mbox{\ and \ }  m \le  500)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2819img1.gif
 ALT="$ \le$"><I>s</I>, <I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2819img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2819img1.gif
 ALT="$ \le$">50 and <I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2819img1.gif
 ALT="$ \le$">500)</SPAN>.

<P>
The next <SPAN CLASS="MATH"><I>m</I></SPAN> lines are information of the <SPAN CLASS="MATH"><I>m</I></SPAN> tunnels: Each line is a sequence of at most 35 integers
   separated by at least one space. The first two integers are the caves that are the ends of the
   corresponding tunnel. The third integer is the time needed to travel from one end of the tunnel
   to the other. This is followed by an increasing sequence of positive integers (each integer is at most 10000)
   which are alternately the closing and the opening times of the tunnel. For example, if the line is

<P>

<P>
<BR>

<TT>10 14 5 6 7 8 9</TT>

<P>

<P>
<BR>
then it means that the tunnel connects cave 10 and cave 14, it takes 5 units of time to go from one end
to the other. The tunnel is closed at time 6, opened at time 7, then closed again at time 8, opened again
at time 9. Note that the tunnel is being cleaned from time 6 to time 7, and then cleaned again from time 8
to time 9. After time 9, it remains open forever.

<P>

<P>
<BR>
If the line is

<P>

<P>
<BR>

<TT>10 9 15 8 18 23</TT>

<P>

<P>
<BR>
then it means that the tunnel connects cave 10 and cave 9, it takes 15 units of time to go from one end
to the other. The tunnel is closed at time 8, opened at time 18, then closed again at time 23. After time 23,
it remains closed forever.

<P>
The next test case starts after the last line of the previous case. A `<TT>0</TT>' signals the end of the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output contains one line for each test case. Each line contains either an integer, which is the time
needed for Jing to get to cave <SPAN CLASS="MATH"><I>t</I></SPAN> or the symbol `<TT>*</TT>', which means that Jing can never get to cave <SPAN CLASS="MATH"><I>t</I></SPAN>.
Note that the starting time is 0. So if <SPAN CLASS="MATH"><I>s</I> = <I>t</I></SPAN>, i.e., Jing is at the same cave as the terrorist leader,
then the output is `<TT>0</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 2 1 2
1 2 5 4 10 14 20 24 30
1 2 6 2 10 22 30
6 9 1 6
1 2 6 5 10
1 3 7 8 20 30 40
2 4 8 5 13 21 30
3 5 10 16 25 34 45
2 5 9 22 32 40 50
3 4 15 2 8 24 34
4 6 10 32 45 56 65
5 6 3 2 5 10 15
2 3 5 2 9 19 25
2 2 1 2
1 2 7 6 9 12
1 2 9 8 12 19
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
16
55
*
</PRE>

<P>

______________________________________________________
2820||||||false||||||
<P>Consider two strings <SPAN CLASS="MATH"><I>X</I> = <I>x</I><SUB>1</SUB><I>x</I><SUB>2</SUB>...<I>x</I><SUB>m</SUB></SPAN> and <SPAN CLASS="MATH"><I>Y</I> = <I>y</I><SUB>1</SUB><I>y</I><SUB>2</SUB>...<I>y</I><SUB>n</SUB></SPAN> over an alphabet set <SPAN CLASS="MATH"><IMG WIDTH="21" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$ \sum$"> = {<I>A</I>, <I>G</I>, <I>C</I>, <I>T</I>}</SPAN>. Denote <SPAN CLASS="MATH"><IMG WIDTH="29" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$ \sum^{\star}_{}$"> = <IMG WIDTH="21" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$ \sum$"> <IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$ \cup$"> { - }</SPAN>, where ``<SPAN CLASS="MATH">-</SPAN>" (dash) is the symbol that represents a space (or blank) in strings. A <SPAN CLASS="textit">string alignment</SPAN> is to align <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> and form two strings <SPAN CLASS="MATH"><I>X</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$\scriptstyle \star$"></SUP>, <I>Y</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$\scriptstyle \star$"></SUP></SPAN> over the alphabet <SPAN CLASS="MATH"><IMG WIDTH="29" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$ \sum^{\star}_{}$"></SPAN> such that:<P><DL COMPACT><DT>1.</DT><DD>the two strings <SPAN CLASS="MATH"><I>X</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$\scriptstyle \star$"></SUP>, <I>Y</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$\scriptstyle \star$"></SUP></SPAN> have the same lengths, and</DD><DT>2.</DT><DD>ignoring dashes, the string <SPAN CLASS="MATH"><I>X</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$\scriptstyle \star$"></SUP></SPAN> is the same as the string <SPAN CLASS="MATH"><I>X</I></SPAN>, and the string <SPAN CLASS="MATH"><I>Y</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$\scriptstyle \star$"></SUP></SPAN> is the same as the string <SPAN CLASS="MATH"><I>Y</I></SPAN> .</DD></DL><P>As an example, an alignment of two strings `GATCCGA' and `GAAAGCAGA' is as follows:<P><P><BR><TT>G-A-TCCGA</TT><P><TT>GAAAG-CAGA.</TT><P><P><BR>There are three gaps in the above alignment; here a <SPAN CLASS="textit">gap</SPAN> is defined as a string of consecutive dashes. Now, let us consider the following alignment:<P><P><BR><TT>GA--TCCGA</TT><P><TT>GAAAG-CAGA.</TT><P><P><BR>Here are two gaps within this alignment. The rule of measuring the <SPAN CLASS="textit">intermittent gap punishment alignment score</SPAN> (abbreviated by GPS) is as follows:<P><UL><LI>If <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> is aligned with <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB></SPAN>, the score <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$ \sigma$">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>j</SUB>)</SPAN> is<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="15" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$\displaystyle \sigma$">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>j</SUB>) = <IMG WIDTH="19" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$\displaystyle \left\{\vphantom{ \begin{array}{ll}
2 &amp; \mbox{if $x_{i}=y_{j}$} \\
-1 &amp; \mbox{if $x_{i} \neq y_{j}$}
\end{array} }\right.$"><IMG WIDTH="129" HEIGHT="60" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$\displaystyle \begin{array}{ll}
2 &amp; \mbox{if $x_{i}=y_{j}$} \\
-1 &amp; \mbox{if $x_{i} \neq y_{j}$}
\end{array}$"></DIV><P></P><P></LI><LI>If a (consecutive) subsequence of <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>'s (or <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB></SPAN>'s) is aligned with a gap of length <SPAN CLASS="MATH"><I>k</I></SPAN>, the score is defined as <SPAN CLASS="MATH">- (4 + <I>k</I>)</SPAN>. </LI></UL><P>That is, in the first alignment example given above, its GPS is<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">2 - (4 + 1) + 2 - (4 + 2) - (4 + 1) + 2 - 1 + 2 + 2 = - 7.</DIV><P></P>For the second alignment, its GPS is<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">2 + 2 - (4 + 3) - (4 + 1) + 2 - 1 + 2 + 2 = - 3.</DIV><P></P><P>Given two strings, the problem we would like to solve is to find an alignment such that its GPS is maximized. Thus, in our example, the best alignment is<P><P><BR><TT>GA-TCCGA</TT><P><TT>GAAAGCAGA.</TT><P><P><BR>Its GPS is <SPAN CLASS="MATH">2 + 2 - (4 + 2) - 1 + 2 - 1 + 2 + 2 = 2</SPAN>.<P>In our problem, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> are at most 500. Furthermore, it is required that no space in one sequence is aligned with a space in another.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file format is as follows:<P><DIV ALIGN="LEFT"></DIV><DL COMPACT><DT><SPAN CLASS="textbf">1.</SPAN></DT><DD>The first line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> of sequence pairs; the number <SPAN CLASS="MATH"><I>n</I></SPAN> is at most 50.</DD><DT><SPAN CLASS="textbf">2.</SPAN></DT><DD>The 2nd line is the sequence <SPAN CLASS="MATH"><I>X</I></SPAN> of the first pair.</DD><DT><SPAN CLASS="textbf">3.</SPAN></DT><DD>The 3rd line is the other sequence <SPAN CLASS="MATH"><I>Y</I></SPAN> of the first pair.<P><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$ \vdots$"></SPAN><P></DD><DT><SPAN CLASS="textbf">2i.</SPAN></DT><DD>The <SPAN CLASS="MATH">(2<I>i</I>)</SPAN>-th line is the sequence <SPAN CLASS="MATH"><I>X</I></SPAN> of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th pair.</DD><DT><SPAN CLASS="textbf">2i+1.</SPAN></DT><DD>The <SPAN CLASS="MATH">(2<I>i</I> + 1)</SPAN>-th line is the other sequence <SPAN CLASS="MATH"><I>Y</I></SPAN> of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th pair.<P><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2820img1.gif ALT="$ \vdots$"></SPAN><P></DD><DT><SPAN CLASS="textbf">2n.</SPAN></DT><DD>The <SPAN CLASS="MATH">(2<I>n</I>)</SPAN>-th line is the sequence <SPAN CLASS="MATH"><I>X</I></SPAN> of the <SPAN CLASS="MATH"><I>n</I></SPAN>-th pair.</DD><DT><SPAN CLASS="textbf">2n+1.</SPAN></DT><DD>The <SPAN CLASS="MATH">(2<I>n</I> + 1)</SPAN>-th line is the other sequence <SPAN CLASS="MATH"><I>Y</I></SPAN> of the <SPAN CLASS="MATH"><I>n</I></SPAN>-th pair.</DD></DL><DIV ALIGN="LEFT"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each pair of sequences, output the <SPAN CLASS="textit">maximum</SPAN> GPS in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
ACGGCTTAGATCCGAGAGTTAGTAGTCCTAAGCTTGCA
AGCTTAGAAAGCAGACACTTGATCCTGACGGCTTGAA
TTGAGTAGTGTTTTAGTCCTACACGACACATCAAATTCGGACAAGGCCTAGCT
TTCAAGTCCTACAATGTGTGTCAAATTCGCTTGGCCGAAAGCC
TTTGGGAACGTGTGTAGACTTCCCCATGCGATGG
AACACACACGGACTTCATGCTGG
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
18
20
2
</PRE><P>
______________________________________________________
2821||||||false||||||
<P>The time is year 3000. Human beings have settled on planets in many solar systems and have a star war with an alien species called <SPAN CLASS="textit">Romulans</SPAN>. The human scientists design a new weapon called <SPAN CLASS="textit">AI bomb</SPAN> which is capable of space travel across the vast space. Before launching the weapons, humans send probes to collect Romulan's defense parameters. The data shows that <SPAN CLASS="textit">Romulans</SPAN> have set up shields in the routes to their home worlds. Fortunately, some secret information reveals that the shield can be penetrated using an ion beam with a particular range of frequency. It is possible to pass the shield if an AI bomb emits an ion beam within that frequency. Now, human scientists have plotted an interstellar map between several human planets and Romulan planets. The map is a directed graph like Figure 4. In the figure, human planets are drawn in boxes (denoted as <SPAN CLASS="MATH">H<I>x</I></SPAN>) and Romulan worlds are drawn in triangles (denoted as <SPAN CLASS="MATH">R<I>x</I></SPAN>), where <SPAN CLASS="MATH"><I>x</I></SPAN> is an integer number. A shield is drawn as a circle in the figure (denoted as <SPAN CLASS="MATH">S<I>x</I></SPAN>).<P><P><BR>Since humans only know where the shields are but do not know the frequency of each shield, they decide to launch a large number of AI bombs. Each bomb is configured to emit an ion beam at a particular frequency at first. Once an AI bomb passes a shield, it will modulate its frequency to a different value by increasing or decreasing a predefined value. For example, in Figure 4, an AI bomb B1 is launched from H3 with initial frequency 150 and an interval <SPAN CLASS="MATH">&#177;100</SPAN>. So, when B1 penetrates shield S5, it may modulate its frequency to 50, 250, or keep its previous frequency 150. After that, the bomb can choose any routes available in the star map. In the example, the bomb B1 is possible to reach Romulan homeworld R9 by penetrating S5 with the original frequency 150 and then passing S4 by changing its frequency to 250 and keeping frequency 250 to pass S5 again and by changing its frequency to 350 in order to penetrate S7 and then finally nuking Romulan planet R9.<P><DIV ALIGN="CENTER"><IMG WIDTH="306" HEIGHT="359" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2821.jpg ALT="\epsfbox{p2821.eps}"></DIV><P>Unfortunately, Romulans knows what humans are planning. Their spies got the map and the bomb parameters. Of course, Romulans have shield parameters at hand. <SPAN CLASS="textit">They want to know if there are any AI bombs which can reach their homeworlds under current shield settings</SPAN>. Please note that human AI bombs can choose any route to travel. If an AI bomb has any chance to reach a Romulan's home world, then the bomb must be reported.<P>Please write a program for the Romulan to defend vicious humans. To simplify the problem, we restrict the frequency values between 0 and 1000. When a bomb's new frequency is outside the range, the new frequency is invalid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The test data begins with a number <SPAN CLASS="MATH"><I>n</I></SPAN> in a line which is the number of test cases. In each test case, it begins with two numbers <SPAN CLASS="MATH"><I>v</I></SPAN> and <SPAN CLASS="MATH"><I>e</I></SPAN> in a line where <SPAN CLASS="MATH"><I>v</I></SPAN> is the number of vertices (including human planets, Romulan planets, and shields) and <SPAN CLASS="MATH"><I>e</I></SPAN> is the number of directed edges, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2821.jpg ALT="$ \le$"><I>v</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2821.jpg ALT="$ \le$">100000</SPAN> and <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2821.jpg ALT="$ \le$"><I>e</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2821.jpg ALT="$ \le$">500000</SPAN>. For convenience, the vertices are indexed starting with 1.<P>Next, a line beginning with `<TT>human</TT> <SPAN CLASS="MATH"><I>m</I></SPAN>' tells that there are <SPAN CLASS="MATH"><I>m</I></SPAN> human planets. Following the string are <SPAN CLASS="MATH"><I>m</I></SPAN> integers, which are the indices of human planets.<P>Same as above, a string `<TT>romulan</TT> <SPAN CLASS="MATH"><I>k</I></SPAN>' is used to tell the vertex indices of Romulan's planets.<P>A string `<TT>shield</TT> <SPAN CLASS="MATH"><I>x</I></SPAN>' begins the shield parameters, where <SPAN CLASS="MATH"><I>x</I></SPAN> is the number of shields. Each shield parameter is described by <SPAN CLASS="MATH">(<I>slu</I>)</SPAN>, where <SPAN CLASS="MATH"><I>s</I></SPAN> is the shield's index, <SPAN CLASS="MATH"><I>l</I></SPAN> is the lower bound of the range, and <SPAN CLASS="MATH"><I>u</I></SPAN> is the upper bound of the range. The values of <SPAN CLASS="MATH"><I>l</I></SPAN> and <SPAN CLASS="MATH"><I>u</I></SPAN> is between 0 and 1000.<P>A string `<TT>edge</TT> <SPAN CLASS="MATH"><I>u</I></SPAN>' begins the directed edge data, where <SPAN CLASS="MATH"><I>u</I></SPAN> is the number of edges. Each edge is described by <SPAN CLASS="MATH">(<I>sd</I> )</SPAN>, where <SPAN CLASS="MATH"><I>s</I></SPAN> is the index of the source vertex and <SPAN CLASS="MATH"><I>d</I></SPAN> is the index of end vertex.<P>A string `<TT>bomb</TT> <SPAN CLASS="MATH"><I>p</I></SPAN>' begins with the data of deployed AI bombs, where <SPAN CLASS="MATH"><I>p</I></SPAN> is the number of bombs and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2821.jpg ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2821.jpg ALT="$ \le$">10000</SPAN>. Each bomb is described by <SPAN CLASS="MATH">(<I>h</I>&nbsp;<I>f</I>&nbsp;<I>i</I>)</SPAN>, where <SPAN CLASS="MATH"><I>h</I></SPAN> is the index of a vertex (i.e., a human planets where the bomb is located), <SPAN CLASS="MATH"><I>f</I></SPAN> is the initial frequency, and <SPAN CLASS="MATH"><I>i</I></SPAN> is the interval to be increased/decreased.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Please output the number of bombs that can possibly reach any of the Romulan homeworlds in one line for each test case. Note that, a bomb may be able to reach more than one Romulan planets. In that case, it is still counted as 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
9 9
human 3 1 2 3
romulan 2 8 9
shield 4
4 200 400
5 100 300
6 100 200
7 350 500
edge 9
1 6
6 8
2 4
4 6
4 5
5 4
3 5
5 7
7 9
bomb 2
3 150 100
2 250 50
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
2822||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>S</I></SPAN> be a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> integers, where <SPAN CLASS="MATH"><I>S</I>[<I>k</I>]</SPAN> with <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \le$"><I>n</I></SPAN> denotes the <SPAN CLASS="MATH"><I>k</I></SPAN>-th number of <SPAN CLASS="MATH"><I>S</I></SPAN>. The <SPAN CLASS="textit">maximum prefix sum</SPAN> of <SPAN CLASS="MATH"><I>S</I></SPAN>, denoted <SPAN CLASS="MATH"><I>h</I>(<I>S</I>)</SPAN>, is defined to be<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>h</I>(<I>S</I>) = <IMG WIDTH="47" HEIGHT="38" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$\displaystyle \max_{0 \le j \le n}^{}$"><IMG WIDTH="46" HEIGHT="56" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$\displaystyle \sum_{1 \le k \le j}^{}$"><I>S</I>[<I>k</I>]</DIV><P></P><P>(Note that the range for <SPAN CLASS="MATH"><I>j</I></SPAN> starting from 0 is to ensure <SPAN CLASS="MATH"><I>h</I>(<I>S</I>) <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \geq$"> 0</SPAN>, because <SPAN CLASS="MATH"><IMG WIDTH="46" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$\displaystyle \sum_{1 \le k \le 0}^{}$"><I>S</I>[<I>k</I>]=0.)</SPAN> For example, if<P><P><BR><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><TABLE><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>W</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>-2, 1, - 3;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>X</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1, 2, 4, 3, - 1, - 5, 2, 0, - 1, 3, - 2;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>Y</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>-1, 2, 0, 1, 3, - 5, 3, 2, 4, - 2, - 1,</TD></TR></TABLE></SPAN></DIV><P><P><BR>then <SPAN CLASS="MATH"><I>h</I>(<I>W</I>) = 0</SPAN>, <SPAN CLASS="MATH"><I>h</I>(<I>X</I>) = 1 + 2 + 4 + 3 = 10</SPAN> and <SPAN CLASS="MATH"><I>h</I>(<I>Y</I>) = - 1 + 2 + 0 + 1 + 3 - 5 + 3 + 2 + 4 = 9.</SPAN><P>For each <SPAN CLASS="MATH"><I>i</I></SPAN> = 1, 2, <SPAN CLASS="MATH">...</SPAN> , <SPAN CLASS="MATH"><I>l</I></SPAN> , let <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> be a sequence of <SPAN CLASS="MATH"><I>n</I><SUB>i</SUB></SPAN> integers. We say that a sequence <SPAN CLASS="MATH"><I>S</I></SPAN> of <SPAN CLASS="MATH"><I>n</I></SPAN> numbers is a merged sequence of <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH">...</SPAN> , <SPAN CLASS="MATH"><I>S</I><SUB>l</SUB></SPAN> if the following conditions hold.<P><DL COMPACT><DT>1.</DT><DD><SPAN CLASS="MATH"><I>n</I> = <I>n</I><SUB>1</SUB> + <I>n</I><SUB>2</SUB> + ... + <I>n</I>.</SPAN></DD><DT>2.</DT><DD>There is a 1-1 mapping <SPAN CLASS="MATH"><I>f</I></SPAN> from <SPAN CLASS="MATH">{1, 2,..., <I>n</I>}</SPAN> to <SPAN CLASS="MATH">{(<I>i</I>, <I>j</I>)| 1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \le$"><I>l</I>&nbsp;and&nbsp;1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \le$"><I>n</I><SUB>i</SUB>}</SPAN> such that if <SPAN CLASS="MATH"><I>f</I> (<I>t</I>) = (<I>i</I>, <I>j</I>)</SPAN> then <SPAN CLASS="MATH"><I>S</I>[<I>t</I>] = <I>S</I><SUB>i</SUB>[<I>j</I>]</SPAN>.</DD><DT>3.</DT><DD>If <SPAN CLASS="MATH"><I>t</I> &lt; <I>t'</I></SPAN> , <SPAN CLASS="MATH"><I>f</I> (<I>t</I>) = (<I>i</I>, <I>j</I>)</SPAN> and <SPAN CLASS="MATH"><I>f</I> (<I>t'</I>) = (<I>i</I>, <I>j'</I>)</SPAN>, then <SPAN CLASS="MATH"><I>j</I> &lt; <I>j'</I></SPAN> .</DD></DL><P>For example, if we have<P><P><BR><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><TABLE><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>S</I>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1, 3, - 5, 2, - 2;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>S</I>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2, 4, - 1;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>S</I>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>-1, 0, 3,</TD></TR></TABLE></SPAN></DIV><P><P><BR>then both <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> above are merged sequences of <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>S</I><SUB>3</SUB></SPAN>. The following sequence, however, is not a merged sequence of <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>S</I><SUB>3</SUB></SPAN>.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Z</I> = 1, 3, - 5, 2, - 2, 2, 4, - 1, - 1, 3, 0.</DIV><P></P><P>(Clearly, if the last two numbers 3 and 0 in <SPAN CLASS="MATH"><I>Z</I></SPAN> are exchanged, then the resulting sequence is a merged sequence of <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>S</I><SUB>3</SUB></SPAN>.)<P>Your job is to produce a merged sequence <SPAN CLASS="MATH"><I>S</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$\scriptstyle \star$"></SUP></SPAN> of <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>, <I>S</I><SUB>2</SUB>,..., <I>S</I><SUB>l</SUB></SPAN> with minimum <SPAN CLASS="MATH"><I>h</I>(<I>S</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$\scriptstyle \star$"></SUP>)</SPAN>. For instance, the following sequence is a merged sequence for the above <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>, <I>S</I><SUB>2</SUB>, <I>S</I><SUB>3</SUB></SPAN> whose maximum prefix sum is minimized:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>S</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$\scriptstyle \star$"></SUP> = - 1, 1, 0, 3, - 5, 2, - 2, 2, 4, - 1, 3.</DIV><P></P><P>One can verify that <SPAN CLASS="MATH"><I>h</I>(<I>S</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$\scriptstyle \star$"></SUP>) = - 1 + 1 + 0 + 3 - 5 + 2 - 2 + 2 + 4 - 1 + 3 = 6.</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains a number <SPAN CLASS="MATH"><I>m</I></SPAN> with <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \le$">10</SPAN> indicating the number of test cases. Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines lists a test case. Each test case lists those <SPAN CLASS="MATH"><I>l</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \le$"><I>l</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$ \le$">5)</SPAN> input sequences separated by numbers 9999. Each test case ends with a number -9999. Two consecutive numbers in a sequence are separated by at least one single space. You may assume that each input sequence consists of at most 100 integers, each of which is between -100 and 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>, <I>S</I><SUB>2</SUB>,..., <I>S</I><SUB>l</SUB></SPAN> , output its <SPAN CLASS="MATH"><I>h</I>(<I>S</I><SUP><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2822img1.gif ALT="$\scriptstyle \star$"></SUP>)</SPAN> in a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
1 3 -5 2 -2 9999 2 4 -1 9999 -1 0 3 -9999
5 1 1 9999 -2 -2 -2 9999 10 -20 -9999
-2 1 -3 -9999
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6
4
0
</PRE><P>
______________________________________________________
2823||||||false||||||
<P>In real-time scheduling, predictability is very important, i.e., we would like to know the whole schedule before we really run the tasks. Rate-monotonic scheduling is very popular in real-time scheduling for periodic tasks, where tasks with shorter periods have higher priority. However, it is still difficult to know the start time and finish time of each task and they might be different in each period, especially for tasks with low priority, i.e. long period. The hyperperiod, the least common multiple of all periods, is usually too big to be practical to describe the whole schedule. However, if the task periods are harmonic, i.e. are multiples, it is possible to find the start time and finish time of each task quickly because the schedule becomes more regular.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2823.jpg ALT="\epsfbox{p2823.eps}"></DIV><P>Figure 1 shows that periodic tasks <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB>, <I>T</I><SUB>2</SUB>, <I>T</I><SUB>3</SUB>, <I>T</I><SUB>4</SUB></SPAN> with execution times 1, 1, 3, 1 and periods 2, 4, 16, 32 respectively are schedulable, each task finishes execution in its period, using the Rate-Monotonic scheduling algorithm since <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB>, <I>T</I><SUB>2</SUB>, <I>T</I><SUB>3</SUB>, <I>T</I><SUB>4</SUB></SPAN> finish execution at time 1, 2, 12, 16 respectively. <SPAN CLASS="MATH"><I>T</I><SUB>3</SUB></SPAN> is preempted by <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> at time 4 and time 8 and resume at time 7 and time 11.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>All the input numbers are positive integers, <SPAN CLASS="MATH">&lt; 500000</SPAN>, separated by a space or new line. The first line is the number of task sets. Then, the task sets are listed set by set. Each task set is listed by a line of the number of tasks, <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2823.jpg ALT="$ \le$">100</SPAN>, and lines of task execution time and period pairs, execution time <SPAN CLASS="MATH">&lt;</SPAN> period. The periods are harmonic, not sorted, and are different in a task set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each task set, find and print out the finish time of the task with the largest period using rate-monotonic scheduling, if schedulable; otherwise print out -1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
4
1 2
1 4
3 16
1 32
3
1 4
4 8
256 1024
3
1 2
3 8
1 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
16
1024
-1
</PRE><P>
______________________________________________________
2824||||||false||||||
<P>The columnar encryption scheme scrambles the letters in a message (or <SPAN CLASS="textit">plaintext</SPAN>) using a keyword as illustrated in the following example: Suppose <TT>BATBOY</TT> is the keyword and our message is <TT>MEET ME BY THE OLD OAK TREE</TT>. Since the keyword has 6 letters, we write the message (ignoring spacing and punctuation) in a grid with 6 columns, padding with random extra letters as needed:<P><PRE>
         MEETME
         BYTHEO
         LDOAKT
         REENTH
</PRE><P>Here, we've padded the message with <TT>NTH</TT>. Now the message is printed out by columns, but the columns are printed in the order determined by the letters in the keyword. Since <TT>A</TT> is the letter of the keyword that comes first in the alphabet, column 2 is printed first. The next letter, <TT>B</TT>, occurs twice. In the case of a tie like this we print the columns leftmost first, so we print column 1, then column 4. This continues, printing the remaining columns in order 5, 3 and finally 6. So, the order the columns of the grid are printed would be 2, 1, 4, 5, 3, 6, in this case. This output is called the <SPAN CLASS="textit">ciphertext</SPAN>, which in this example would be <TT>EYDEMBLRTHANMEKTETOEEOTH</TT>. Your job will be to recover the plaintext when given the keyword and the ciphertext.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple input sets. Each set will be 2 input lines. The first input line will hold the keyword, which will be no longer than 10 characters and will consist of all uppercase letters. The second line will be the ciphertext, which will be no longer than 100 characters and will consist of all uppercase letters. The keyword <TT>THEEND</TT> indicates end of input, in which case there will be no ciphertext1 to follow.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input set, output one line that contains the plaintext (with any characters that were added for padding). This line should contain no spacing and should be all uppercase letters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
BATBOY
EYDEMBLRTHANMEKTETOEEOTH
HUMDING
EIAAHEBXOIFWEHRXONNAALRSUMNREDEXCTLFTVEXPEDARTAXNAARYIEX
THEEND
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
MEETMEBYTHEOLDOAKTREENTH
ONCEUPONATIMEINALANDFARFARAWAYTHERELIVEDTHREEBEARSXXXXXX
</PRE><P>
______________________________________________________
2825||||||false||||||
<P>The Sultan of Sylvania loves throwing parties, because that gives him a reason to decorate the palace. He particularly likes decorations called <SPAN CLASS="textit">streamers</SPAN> made up of different beads strung together on a string and hung from the ceiling. Now, like most Sultans, he is very particular about everything, including these strung decorations. Specifically, he only likes certain combinations of beads to be used on the streamers. For example, if there are four different types of beads - <TT>A</TT>, <TT>B</TT>, <TT>C</TT> and <TT>D</TT> - the Sultan might say ``It pleases his highness that only the combinations <TT>ABB</TT>, <TT>BCA</TT>, <TT>BCD</TT>, <TT>CAB</TT>, <TT>CDD</TT> and <TT>DDA</TT> appear in the streamers at tonight's party". This, needless to say, puts a severe limit on the number of different streamers possible. For example, if the length of the streamers was 5, then the only possible streams of beads would be <TT>BCABB</TT> and <TT>BCDDA</TT> (strings such as <TT>ABBCA</TT> could not be used because <TT>BBC</TT> is not an approved combination). Since the Sultan likes variety, it is important to know the total number of streamers possible, given a length and the current bead combinations which tickle the Sultan's fancy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. Each case will consist of two lines. The first line will contain three positive integers <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>l</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>, where <SPAN CLASS="MATH"><I>n</I></SPAN> indicates the number of bead types, <SPAN CLASS="MATH"><I>l</I></SPAN> is the length of the streamers and m indicates the number of bead combinations which the Sultan likes. The maximum values for <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>l</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> will be 26, 100 and 600, respectively. The next line will contain the <SPAN CLASS="MATH"><I>m</I></SPAN> combinations. Each combination will be of the same length (between 1 and 10) and will be separated using a single space. All combinations will make use of only the uppercase letters of the alphabet. An input line of 0 0 0 will terminate input and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line indicating the number of possible streamers. All answers will be within the range of a 32-bit integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 5 6
ABB BCA BCD CAB CDD DDA
5 4 5
E D C B A
4 8 3
AA BB CC
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
625
3
</PRE><P>
______________________________________________________
2826||||||false||||||
<P>The EKG sequence is a sequence of positive integers generated as follows: The first two numbers of the sequence are 1 and 2. Each successive entry is the smallest positive integer not already used that shares a factor with the preceding term. So, the third entry in the sequence is 4 (being the smallest even number not yet used). The next number is 6 and the next is 3. The first few numbers of this sequence are given below.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">1, 2, 4, 6, 3, 9, 12, 8, 10, 5, 15, 18, 14, 7, 21, 24, 16, 20, 22, 11, 33, 27</DIV><P></P><P>The sequence gets its name from its rather erratic fluctuations. The sequence has a couple of interesting, but non-trivial, properties. One is that all positive integers will eventually appear in the sequence. Another is that all primes appear in increasing order. Your job here is to find the position in the sequence of a given integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of a number of test cases. Each case will be a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2826img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2826img1.gif ALT="$ \le$">300000</SPAN>. An input of 0 follows the last test case. Note that the portion of the EKG sequence that contains all integers <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2826img1.gif ALT="$ \le$">300, 000</SPAN> will not contain an integer <SPAN CLASS="MATH">&gt; 1, 000, 000</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each test case should produce one line of output of the form:<P><P><BR><TT>The number <SPAN CLASS="MATH"><I>n</I></SPAN> appears in location <SPAN CLASS="MATH"><I>p</I></SPAN>.</TT><P><P><BR>where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number given and <SPAN CLASS="MATH"><I>p</I></SPAN> is the position of n in the EKG sequence. You are guaranteed that <SPAN CLASS="MATH"><I>p</I></SPAN> will be no larger than 1,000,000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
12
21
2
33
100000
299977
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The number 12 appears in location 7.
The number 21 appears in location 15.
The number 2 appears in location 2.
The number 33 appears in location 21.
The number 100000 appears in location 97110.
The number 299977 appears in location 584871.
</PRE><P>
______________________________________________________
2827||||||false||||||
<P>When relay towers for mobile telephones communicate with the mobile phones in their area, there is always the possibility of interference. So, when assigning the transmission frequency, the FCC makes sure that nearby towers have frequencies that aren't too close. On the other hand, the FCC does not want to assign too many different frequencies; they want to save as many as possible for other uses.Your job is to find an optimal assignment of frequencies.<P>In this problem, the frequencies will be integers. Nearby towers must be assigned frequencies that differ by at least 2. You'll find an assignment using as few frequencies as possible. For example, consider the following two arrangements of towers. Two towers near each other are indicated by the connecting line.<P><DIV ALIGN="CENTER"><IMG WIDTH="677" HEIGHT="281" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2827a.jpg ALT="\epsfbox{p2827a.eps}"></DIV><P>Note that the following are legal frequency assignments to these two tower configurations. However, the second arrangement does not use the fewest number of frequencies possible, since the tower with frequency 5 could have frequency 1.<P><DIV ALIGN="CENTER"><IMG WIDTH="677" HEIGHT="268" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2827a.jpg ALT="\epsfbox{p2827b.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple test cases. Input for each test case will consist of two lines: the first line will contain the integer <SPAN CLASS="MATH"><I>n</I></SPAN>, indicating the number of towers. The next line will be of the form <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB><I>y</I><SUB>1</SUB><I>x</I><SUB>2</SUB><I>y</I><SUB>2</SUB>...<I>x</I><SUB>n</SUB><I>y</I><SUB>n</SUB></SPAN> where <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB><I>y</I><SUB>i</SUB></SPAN> are the coordinates of tower <SPAN CLASS="MATH"><I>i</I></SPAN>. A pair of towers are considered ``near" each other if the distance between them is no more than 20. There will be no more than 12 towers and no tower will have more than 4 towers near it. A value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> indicates end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you should print one line in the format:<P><P><BR><TT>The towers in case <SPAN CLASS="MATH"><I>n</I></SPAN> can be covered in <SPAN CLASS="MATH"><I>f</I></SPAN> frequencies.</TT><P><P><BR>where you determine the value for <SPAN CLASS="MATH"><I>f</I></SPAN>. The case numbers, <SPAN CLASS="MATH"><I>n</I></SPAN>, will start at 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
0 0 5 7.5 1 -3 10.75 -20.1 12.01 -22
6
0 1 19 0 38 1 38 21 19 22 0 21
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The towers in case 1 can be covered in 3 frequencies.
The towers in case 2 can be covered in 2 frequencies.
</PRE><P>
______________________________________________________
2828||||||false||||||
<P>The Avian Computation Mission of the International Ornithologists Union is dedicated to the study of intelligence in birds, and specifically the study of computational ability. One of the most promising projects so far is the ``Polly Nomial" project on parrot intelligence, run by Dr. Albert B. Tross and his assistants, Clifford Swallow and Perry Keet. In the ACM, parrots are trained to carry out simple polynomial computations involving integers, variables, and simple arithmetic operators.<P>When shown a formula consisting of a polynomial with non-negative integer coefficients and one variable <SPAN CLASS="MATH"><I>x</I></SPAN>, each parrot uses a special beak-operated PDA, or ``Parrot Digital Assistant," to tap out a sequence of operations for computing the polynomial. The PDA operates much like a calculator. It has keys marked with the following symbols: the digits from 0 through 9, the symbol `<SPAN CLASS="MATH"><I>x</I></SPAN>', and the operators `<SPAN CLASS="MATH">+</SPAN>', `<SPAN CLASS="MATH">&#215;</SPAN>', and `<SPAN CLASS="MATH">=</SPAN>'. (The <SPAN CLASS="MATH"><I>x</I></SPAN> key is internally associated with an integer constant by Al B. Tross for testing purposes, but the parrot sees only the `<SPAN CLASS="MATH"><I>x</I></SPAN>'.)<P>For instance, if the parrot were presented with the polynomial<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>x</I><SUP>3</SUP> + <I>x</I> + 11</DIV><P></P><P>the parrot might tap the following sequence of symbols:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>x</I>,&#215;, <I>x</I>,&#215;, <I>x</I>, + , <I>x</I>, + , 1, 1, =</DIV><P></P><P>The PDA has no extra memory, so each <SPAN CLASS="MATH">&#215;</SPAN> or <SPAN CLASS="MATH">+</SPAN> operation is applied to the previous contents of the display and whatever succeeding operand is entered. If the polynomial had been <P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>x</I><SUP>3</SUP> + 2<I>x</I><SUP>2</SUP> + 11</DIV><P></P><P>then the parrot would not have been able to ``save" the value of <SPAN CLASS="MATH"><I>x</I><SUP>3</SUP></SPAN> while calculating the value of <SPAN CLASS="MATH">2<I>x</I><SUP>2</SUP></SPAN>. Instead, a different order of operations would be needed, for instance:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>x</I>, + , 2,&#215;, <I>x</I>,&#215;, <I>x</I>, + , 1, 1, =</DIV><P></P><P>The cost of a calculation is the number of key presses. The cost of computing <SPAN CLASS="MATH"><I>x</I><SUP>3</SUP> + <I>x</I> + 11</SPAN> in the example above is 11 (four presses of the <SPAN CLASS="MATH"><I>x</I></SPAN> key, two presses of `<SPAN CLASS="MATH">&#215;</SPAN>', two presses of `<SPAN CLASS="MATH">+</SPAN>', two presses of the digit `1', and the `<SPAN CLASS="MATH">=</SPAN>' key). It so happens that this is the minimal cost for this particular expression using the PDA.<P>You are to write a program that finds the least costly way for a parrot to compute a number of polynomial expressions. Because parrots are, after all, just bird-brains, they are intimidated by polynomials whose high-order coefficient is any value except 1, so this condition is always imposed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of a sequence of lines, each containing a polynomial and an <SPAN CLASS="MATH"><I>x</I></SPAN> value. Each polynomial <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB><I>x</I><SUP>n</SUP> + <I>a</I><SUB>n</SUB> - 1<SUP>x<SUP>n - 1</SUP></SUP> + ... + <I>a</I><SUB>0</SUB></SPAN> is represented by its degree followed by the non-negative coefficients <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB>,..., <I>a</I><SUB>0</SUB></SPAN> of decreasing powers of <SPAN CLASS="MATH"><I>x</I></SPAN>, where an is always 1. Degrees are between 1 and 100. The coefficients are followed on the same line by an integer value for the variable <SPAN CLASS="MATH"><I>x</I></SPAN>, which is always either 1 or -1. The input is terminated by a single line containing the values 0 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each polynomial, print the polynomial number followed by the value of the polynomial at the given integer value <SPAN CLASS="MATH"><I>x</I></SPAN> and the minimum cost of computing the polynomial; imitate the formatting in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 1 0 1 11 1
3 1 0 2 11 -1
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Polynomial 1: 13 11
Polynomial 2: 8 11
</PRE><P>
______________________________________________________
2829||||||false||||||
<P>Scrap cars in a junk yard are crushed in a device that pushes the car in from the sides, from the front and back, and from the top and bottom. The result is a compact little chunk of metal. In this problem you're going to model a device that works in a similar manner, but doesn't crush anything, only pushes boxes around in two dimensions. The boxes are all square with unit length on a side and are situated on the floor of a room. Each wall of the room can be programmed to move inward a certain amount, pushing any boxes it may bump into. Unlike the car-crusher, this device is sensitive and if it senses that boxes are stacked up against a wall and that it might crush them if pressed any farther, it will stop.<P>For example, suppose we have boxes arranged in a 12-by-16 room as shown below. The upper left-hand corners of the boxes (which is how we will locate them in this problem) are at coordinates (1,13) (box A below), (3,2), (6,2), (6,4), (6,6), (7,6) and (8,9) (box G), where the first coordinate indicates distance from the top wall and the second coordinate indicates distance from the left wall.<P><DIV ALIGN="CENTER"><IMG WIDTH="357" HEIGHT="243" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2829a.jpg ALT="\epsfbox{p2829a.eps}"></DIV><P>Suppose the top wall is programmed to move down 3 units (then retreats, as the walls always will) and then the right wall is programmed to move left 14 units. The first operation can be performed with no problem, but the second one can not be carried out without crushing some boxes. Therefore, the right wall will move only 13 units, the maximum distance it can move until boxes are packed tightly between it and the left wall. The boxes will then be in the configuration shown in the following figure. The locations of the boxes are (3,1), (3,2), (6,0), (6,1), (6,2), (7,2), (8,2).<P><DIV ALIGN="CENTER"><IMG WIDTH="357" HEIGHT="243" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2829a.jpg ALT="\epsfbox{p2829b.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple data sets for this problem. The first line of each data set will be two integers giving the height and width of the room. (We'll visualize the room as if on a piece of paper, as drawn above.) Each dimension will be no more than 20. The next line will contain an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(0 < n \le  10)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2829a.jpg ALT="$ \le$">10)</SPAN> followed by <SPAN CLASS="MATH"><I>n</I></SPAN> pairs of integers, each pair giving the location of a box as the distances from the top and the left walls of the room. The following lines will be of the form <TT>direction <SPAN CLASS="MATH"><I>m</I></SPAN></TT>, where <TT>direction</TT> is either <TT>down</TT>, <TT>left</TT>, <TT>up</TT>, <TT>right</TT>, or <TT>done</TT> and <SPAN CLASS="MATH"><I>m</I></SPAN> is a positive integer. For example, <TT>left 2</TT> would mean to try to move the right wall 2 spaces to the left. The ``direction" <TT>done</TT> indicates that you are finished pushing this set of boxes around. There will be no integer <SPAN CLASS="MATH"><I>m</I></SPAN> following the direction <TT>done</TT>, of course. The data sets are followed by a line containing 0 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set you are to produce one line of output of the form:<P><P><BR><TT>Data set <SPAN CLASS="MATH"><I>d</I></SPAN> ends with boxes at locations <SPAN CLASS="MATH">(<I>r</I><SUB>1</SUB>, <I>c</I><SUB>1</SUB>)(<I>r</I><SUB>2</SUB>, <I>c</I><SUB>2</SUB>)...(<I>r</I><SUB>n</SUB>, <I>c</I><SUB>n</SUB>)</SPAN>.</TT><P><P><BR>where the <SPAN CLASS="MATH">(<I>r</I><SUB>i</SUB>, <I>c</I><SUB>i</SUB>)</SPAN> are the locations of the boxes given from top-to-bottom, left-to-right, (separated by one space) and <SPAN CLASS="MATH"><I>d</I></SPAN> is the data set number (starting at 1).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
12 16
7 1 13 3 2 6 2 6 4 6 6 7 6 8 9
down 3
left 14
done
4 4
3 1 0 2 1 2 3
right 3
up 2
left 1
done
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Data set 1 ends with boxes at locations (3,1) (3,2) (6,0) (6,1) (6,2) (7,2) (8,2).
Data set 2 ends with boxes at locations (0,2) (1,1) (1,2).
</PRE><P>
______________________________________________________
2830||||||false||||||
<P>Quadtrees are data structures used to store digital images. For our purposes, the images will be simple bitmaps, where every pixel is either a 1 (black) or a 0 (white). A quadtree representation of a bitmap is obtained as follows: first, associate the root node with the entire image. If the entire image is either all 1's or all 0's, then store that value in the node and you're done. Otherwise divide the region into four equal size quadrants, add four children to the root, and assign each child one of the four regions in the following order: the first child gets the upper left quadrant, the second the upper right, the third the lower left and the fourth the lower right. Then recursively apply the above rules to each of the children. For example, the <SPAN CLASS="MATH">4&#215;4</SPAN> image on the left would be represented by the quadtree on the right:<P><DIV ALIGN="CENTER"><IMG WIDTH="623" HEIGHT="153" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2830a.jpg ALT="\epsfbox{p2830a.eps}"></DIV><P>Note that this procedure only works as stated if the image is a square and has a side length equal to a power of 2. For those images which do not meet those requirements, we pad the rows and columns with 0's (on the right and on the bottom, respectively) until we have a bitmap of the appropriate size. For example, a <SPAN CLASS="MATH">5&#215;13</SPAN> image would be converted to a <SPAN CLASS="MATH">16&#215;16</SPAN> bitmap (with the original image residing in the upper left portion, and the remainder of the image filled with 0's).<P>While quadtrees can result in a significant savings in space over the original image, even more savings can be achieved if we identify repeated subtrees. For example, in the tree above, the first and third subtrees of the root are identical, so we could replace the root of the third subtree with a reference to the first subtree, obtaining something that symbolically looks like the following:<P><DIV ALIGN="CENTER"><IMG WIDTH="574" HEIGHT="196" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2830a.jpg ALT="\epsfbox{p2830b.eps}"></DIV><P>We will call these compressed quadtrees <SPAN CLASS="textit">super quadtrees</SPAN>, or <SPAN CLASS="textit">squadtrees</SPAN>. For our purposes the use of a reference saves space only when the tree it replaces has height of at least 1. Thus, while we could replace 5 of the nodes which contain a B with references to the first node with a B, this would not in practice save any space in the compression. Using this rule, our squadtree contains only 12 nodes, as opposed to 17 in the original quadtree. Your job for this problem is to take a set of images and determine the number of nodes in both the resulting quadtrees and squadtrees.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple problem instances. Each instance will start with a single line containing two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>, indicating the number of rows and columns in the image. The maximum values for these integers is 128. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines will each contain <SPAN CLASS="MATH"><I>m</I></SPAN> characters representing the image to process. A black pixel will be represented by a `1', and a white pixel will be represented by a `0'. The input line 0 0 will terminate input and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, output two integers separated by a single space. The first value is the number of nodes in the quadtree for the problem instance, and the second is the number of nodes in the squadtree.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 4
1011
0111
1010
0111
6 7
1110111
1010101
0000000
0100010
1011101
1010101
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
17 12
61 24
</PRE><P>
______________________________________________________
2831||||||false||||||
<P>In the kingdom of Polygonia the royal family consists of the king, the queen, and the 10-year-old twins, Prince Obtuse and Prince Trisect. The twins are fiercely competitive, and on their birthday they always vie with each other for the biggest portion of the cake. The wise king and queen have devised the following way to prevent squabbles over the cake. One prince is allowed to cut the cake into two pieces, then the other prince gets to choose which of the two pieces he wants.<P>Cakes in Polygonia are always in the shape of a convex quadrilateral (a four-sided polygon with each internal angle less than 180 degrees). Furthermore, local custom dictates that all cake cutting must be done using a straight cut that joins two vertices, or two midpoints of the sides of the cake, or a vertex and a midpoint. For instance, the following figure shows all the possible legal cuts in a typical cake.<P><DIV ALIGN="CENTER"><IMG WIDTH="396" HEIGHT="166" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2831.jpg ALT="\epsfbox{p2831.eps}"></DIV><P>Your problem is to determine, for a number of different cakes, the best cut, i.e., the one that divides the cake into two pieces whose areas (we are disregarding the thickness of the cake) are as nearly equal as possible. For instance, given a cake whose vertices (when the cake is viewed from above) are located, in counterclockwise order, at the points (0, 1), (6, 0), (5, 2) and (2, 3), the best possible cut would divide the cake into two pieces, one with area 4.375, the other with area 5.125; the cut joins the points (1, 2) and (5.5, 1) (the midpoints of two of the sides).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of a sequence of test cases, each consisting of four <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> values giving the counterclockwise traversal of the cake's vertices as viewed from directly above the cake; the final test case is followed by a line containing eight zeros. No three points will be collinear, all quadrilaterals are convex, and all coordinates will have absolute values of 10000 or less.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each cake, the cake number followed by the two areas, smaller first, to three decimal places of precision.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 1 6 0 5 2 2 3
0 0 100 0 100 100 0 100
0 0 0 0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Cake 1: 4.375 5.125
Cake 2: 5000.000 5000.000
</PRE><P>
______________________________________________________
2832||||||false||||||
<P>Judging a programming contest is hard work, with demanding contestants, tedious decisions, and monotonous work. Not to mention the nutritional problems of spending 12 hours with only donuts, pizza, and soda for food. Still, it can be a lot of fun.<P>Software that automates the judging process is a great help, but the notorious unreliability of some contest software makes people wish that something better were available. You are part of a group trying to develop better, open source, contest management software, based on the principle of modular design.<P>Your component is to be used for calculating the scores of programming contest teams and determining a winner. You will be given the results from several teams and must determine the winner.<P><P><BR><SPAN CLASS="textbf">Scoring</SPAN><P>There are two components to a team's score. The first is the number of problems solved. The second is penalty points, which reflects the amount of time and incorrect submissions made before the problem is solved. For each problem solved correctly, penalty points are charged equal to the time at which the problem was solved plus 20 minutes for each incorrect submission. No penalty points are added for problems that are never solved.<P>So if a team solved problem one on their second submission at twenty minutes, they are charged 40 penalty points. If they submit problem 2 three times, but do not solve it, they are charged no penalty points. If they submit problem 3 once and solve it at 120 minutes, they are charged 120 penalty points. Their total score is two problems solved with 160 penalty points.<P>The winner is the team that solves the most problems. If teams tie for solving the most problems, then the winner is the team with the fewest penalty points.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>For the programming contest your program is judging, there are four problems. You are guaranteed that the input will not result in a tie between teams after counting penalty points.<P><P><BR><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=JUSTIFY WIDTH="5.25in"><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Line</B> 1</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378"><SPAN CLASS="MATH">&lt; <I>nTeams</I> &gt;</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Line</B> 2..<SPAN CLASS="MATH"><I>n</I> + 1</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378"><SPAN CLASS="MATH">&lt; <I>Name</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>p</I>1<I>Sub</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>p</I>1<I>Time</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>p</I>2<I>Sub</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>p</I>2<I>Time</I> &gt;</SPAN> ...<SPAN CLASS="MATH">&lt; <I>p</I>4<I>Time</I> &gt;</SPAN><P>The first element on the line is the team name, which contains no whitespace. Following that, for each of the four problems, is the number of times the team submitted a run for that problem and the time at which it was solved correctly (both integers). If a team did not solve a problem, the time will be zero. The number of submissions will be at least one if the problem was solved.</TD></TR></TABLE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of a single line listing the name of the team that won, the number of problems they solved, and their penalty points.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
Stars 2 20 5 0 4 190 3 220
Rockets 5 180 1 0 2 0 3 100
Penguins 1 15 3 120 1 300 4 0
Marsupials 9 0 3 100 2 220 3 80
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Penguins 3 475
</PRE><P>
______________________________________________________
2833||||||false||||||
<P>
You've decided that the time is right for the next Internet map startup. Your inspiration for this
    venture is your directionally impaired spouse, who doesn't care for the shortest or quickest routes
generated by current online map systems-instead, easier is better.

<P>
The backbone of your operation is, of course, your algorithm for calculating directions. Your algorithm
    must accept the map from your massive database of the entire country and produce the best route that
    meets the customer's query. Queries consist of an origin, destination, and the optimization goal,
    which can be for the shortest route, fastest route, or route with the fewest turns. You are guaranteed
    that there will be a path between source and destination for any query asked.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<B>The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</B>

<P>

<P><P>
<BR>

<P>
There are three sections in the input file, the first lists the cities, the second lists the roads,
and the third lists the queries.

<P>
The first line of input is the number of cities, <SPAN CLASS="MATH"><I>c</I></SPAN>, followed by <SPAN CLASS="MATH"><I>c</I></SPAN> lines each containing the
    name of a city. There is no whitespace in a city name.

<P>
The next line is the number of roads, <SPAN CLASS="MATH"><I>r</I></SPAN>, followed by <SPAN CLASS="MATH"><I>r</I></SPAN> lines describing a road. Each road
    description has the following form:

<P>

<P>
<BR>

<!-- MATH
 $<RoadName>$
 -->
<SPAN CLASS="MATH">&lt; <I>RoadName</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>CityA</I> &gt;</SPAN> <!-- MATH
 $<ABDistance>$
 -->
<SPAN CLASS="MATH">&lt; <I>ABDistance</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>ABTime</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>CityB</I> &gt;</SPAN> [<SPAN CLASS="MATH">&lt; <I>BCDist</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>BCTime</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>CityC</I> &gt;</SPAN> [...]]

<P>

<P>
<BR>
There is no whitespace in a road's name. Roads may pass through any number of cities. The cities
    appear in the order the road passes through them. No road passes through the same city multiple
    times. Roads are bidirectional. The distance and time (both real numbers) it takes to
follow a road between each pair of cities is the distance and time listed between those two names.
When following a road between multiple cities (A to C, for example), the distance and time is cumulative
for all steps along the path.

<P>
The remainder of the lines in the file each list one query. Queries are of the form:

<P>

<P>
<BR>

<!-- MATH
 $<querytype>$
 -->
<SPAN CLASS="MATH">&lt; <I>querytype</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>origin</I> &gt;</SPAN> <!-- MATH
 $<destination>$
 -->
<SPAN CLASS="MATH">&lt; <I>destination</I> &gt;</SPAN>

<P>

<P>
<BR>
Querytype is one of `<TT>time</TT>', `<TT>distance</TT>', or `<TT>turns</TT>' and the origin and destination
are the names of cities.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<B>For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>

<P>
For each query, your output will begin with a line:

<P>

<P>
<BR>

<TT>from <SPAN CLASS="MATH">&lt; <I>origin</I> &gt;</SPAN></TT>

<P>
Each following line will be of the form:

<P>

<P>
<BR>

<TT><!-- MATH
 $<roadName>$
 -->
<SPAN CLASS="MATH">&lt; <I>roadName</I> &gt;</SPAN> to <!-- MATH
 $<cityname>$
 -->
<SPAN CLASS="MATH">&lt; <I>cityname</I> &gt;</SPAN></TT>

<P>
which lists the road to turn onto from the previous city, and the city to take that road to.
If a single road is followed between multiple cities, only the final city reached on that road before
turning onto another road is listed. The final city listed will be the destination city.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

5
Chicago
DesMoines
OklahomaCity
Dallas
LosAngeles
4
I80 Chicago 300 4 DesMoines
I35 DesMoines 550 7.3 OklahomaCity 205 3 Dallas
I40 OklahomaCity 1330 20.5 LosAngeles
Rt66 Chicago 2448 46 LosAngeles
time Chicago LosAngeles
turns Chicago LosAngeles
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
from Chicago
I80 to DesMoines
I35 to OklahomaCity
I40 to LosAngeles
from Chicago
Rt66 to LosAngeles
</PRE>

<P>

______________________________________________________
2834||||||false||||||
<P>
Let's face it, most students who do a good job on programming contest problems aren't the best writers.
   However, there is no artistic process that a good programmer can't improve with a little program to automate
   the process.

<P>
In this case, your writing problem is a tendency to use words too often. To help check for this, you are going
   to write a program that will search your papers for the word or words you use most often.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<B>The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</B>

<P>

<P><P>
<BR>

<P>
The input consists entirely of your paper. Each line will be under 80 characters and will contain words,
punctuation, and numbers. Words consist of the characters {<TT>a</TT>­<TT>z</TT>,<TT>A</TT>­<TT>Z</TT>,<TT>0</TT>­<TT>9</TT>}.
Words are separated by whitespace, end-of-line, and punctuation. The punctuation that may be found includes
the characters <TT>,.;'"()/:-</TT>. No other characters will be found in the input.

<P>
Word comparisons are case-insensitive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<B>For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>

<P>
Your output begins with the line:

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN> occurrences</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of times the most frequently appearing word occurs.

<P>
Following that line will be the words that occurred <SPAN CLASS="MATH"><I>n</I></SPAN> times, one per line. The words may be listed in any order.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

Fourscore and seven years ago our fathers brought forth on this
continent a new nation, conceived in liberty and dedicated to the
proposition that all men are created equal. Now we are engaged in
a great civil war, testing whether that nation or any nation so
conceived and so dedicated can long endure.
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 occurrences
nation
and
</PRE>

<P>

______________________________________________________
2835||||||false||||||
<P>
The DIY Furniture company specializes in assemble-it-yourself furniture kits. Typically, the pieces of
    wood are attached to one another using a wooden peg that fits into pre-cut holes in each piece to be attached.
    The pegs have a circular cross-section and so are intended to fit inside a round hole.

<P>
A recent factory run of computer desks were flawed when an automatic grinding machine was mis-programmed.
    The result is an irregularly shaped hole in one piece that, instead of the expected circular shape, is
    actually an irregular polygon. You need to figure out whether the desks need to be scrapped or if they
    can be salvaged by filling a part of the hole with a mixture of wood shavings and glue.

<P>
There are two concerns. First, if the hole contains any protrusions (i.e., if there exist any two interior
    points in the hole that, if connected by a line segment, that segment would cross one or more edges of the
    hole), then the filled-in-hole would not be structurally sound enough to support the peg under normal stress
    as the furniture is used. Second, assuming the hole is appropriately shaped, it must be big enough to allow
    insertion of the peg. Since the hole in this piece of wood must match up with a corresponding hole in other
    pieces, the precise location where the peg must fit is known.

<P>
Write a program to accept descriptions of pegs and polygonal holes and determine if the hole is ill-formed
    and, if not, whether the peg will fit at the desired location. Each hole is described as a polygon with
    vertices <!-- MATH
 $(x_{1}, y_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>, <!-- MATH
 $(x_{2}, y_{2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>, <SPAN CLASS="MATH">...</SPAN> , <!-- MATH
 $(x_{n}, y_{n})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>n</SUB>, <I>y</I><SUB>n</SUB>)</SPAN>. The edges of the polygon
    are <!-- MATH
 $(x_{i}, y_{i})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> to <!-- MATH
 $(x_{i+1}, y_{i+1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>i + 1</SUB>, <I>y</I><SUB>i + 1</SUB>)</SPAN> for <!-- MATH
 $i = 1 \dots n - 1$
 -->
<SPAN CLASS="MATH"><I>i</I> = 1...<I>n</I> - 1</SPAN> and <!-- MATH
 $(x_{n}, y_{n})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>n</SUB>, <I>y</I><SUB>n</SUB>)</SPAN> to <!-- MATH
 $(x_{1}, y_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of a series of piece descriptions. Each piece description consists of the following data:

<P>

<P>
<BR>
<TABLE COLS=2>
<COL ALIGN=LEFT><COL ALIGN=JUSTIFY WIDTH="5.25in">
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<B>Line</B> 1    </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378">  <!-- MATH
 $<nVertices>$
 -->
<SPAN CLASS="MATH">&lt; <I>nVertices</I> &gt;</SPAN> <!-- MATH
 $<pegRadius>$
 -->
<SPAN CLASS="MATH">&lt; <I>pegRadius</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>pegX</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>pegY</I> &gt;</SPAN> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378">  number of vertices in polygon, <SPAN CLASS="MATH"><I>n</I></SPAN> (integer)</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378">  radius of peg (real)</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378">  X and Y position of peg (real)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>n</I></SPAN><SPAN  CLASS="textbf">Lines</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378"> <TT>&lt;vertexX&gt; &lt;vertexY&gt;</TT></TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378">  On a line for each vertex, listed in order, the <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> position of vertex
</TD></TR>
</TABLE>

<P>

<P>
<BR>
The end of input is indicated by a number of polygon vertices less than 3.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each piece description, print a single line containing the string:

<P>

<P>
<BR>

<TABLE COLS=2>
<COL ALIGN=LEFT><COL ALIGN=JUSTIFY WIDTH="4.5in">
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<TT>HOLE IS ILL-FORMED</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324"> if the hole contains protrusions</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>PEG WILL FIT</TT>       </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324"> if the hole contains no protrusions and the peg fits in the
hole at the indicated position</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>PEG WILL NOT FIT</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="324">  if the hole contains no protrusions but the peg will not fit
in the  hole at the indicated position
</TD></TR>
</TABLE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 1.5 1.5 2.0
1.0 1.0
2.0 2.0
1.75 2.0
1.0 3.0
0.0 2.0
5 1.5 1.5 2.0
1.0 1.0
2.0 2.0
1.75 2.5
1.0 3.0
0.0 2.0
1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
HOLE IS ILL-FORMED
PEG WILL NOT FIT
</PRE>

<P>

______________________________________________________
2836||||||false||||||
<P>
While Florida's difficulties electing presidents are well known, a lesser known problem is electing
   committee chairs within the state's House of Delegates. The process used is a runoff election, where
   each committee member submits a ballot with a ranked list of other members for the position of chair.
   Unfortunately, those responsible for tabulating the votes keep losing track of which ballots still have
   countable votes, and so no one trusts the results.

<P>
Each committee member submits a ballot. Each ballot contains a ranked list of votes. Tabulating the
   votes proceeds in rounds. For the first round, the first vote on each ballot is counted. If any candidate
   has more than half of the votes, they win.

<P>
After each round, the candidate receiving the fewest votes (or candidates, in the case of a tie for fewest
   votes) is eliminated. Votes are then re-tabulated with each ballot's highest vote for a remaining candidate
   being counted. If all of the candidates voted for on a ballot are eliminated, then that ballot is
   considered ``non-viable," and it is no longer counted toward the total number of ballots when calculating majority.

<P>
The process is repeated until you have a single winner, or a tie between the remaining candidates.
   The rules of the election guarantee you will have a tie or a winner.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
For each dataset:

<P>

<P>
<BR>
<TABLE COLS=2>
<COL ALIGN=LEFT><COL ALIGN=JUSTIFY WIDTH="5.25in">
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<B>Line</B> 1    </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378">  <!-- MATH
 $<candidates>$
 -->
<SPAN CLASS="MATH">&lt; <I>candidates</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>ballots</I> &gt;</SPAN></TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378">   The number of candidates receiving votes</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378">   The number of ballots, <SPAN CLASS="MATH"><I>b</I></SPAN></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>b</I></SPAN> <SPAN  CLASS="textbf">Lines</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="378"> One line per ballot. For each ballot, the names of the candidates are listed
           in order of preference. A candidate name is a string with no whitespace in
           it. A ballot may not contain votes for all candidates. No candidate will be
             repeated on a single ballot.
</TD></TR>
</TABLE>

<P>
After the last dataset, a line of

<P>

<TT>0 0</TT>

<P>
will indicate the end of the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset a single line is output:

<P>
For a winner:

<P>

<P>
<BR>

<TT>&lt;candidate&gt; won</TT>

<P>

<P>
<BR>
For a tie:

<P>

<P>
<BR>

<TT>it is a tie between <!-- MATH
 $<candidate>$
 -->
<SPAN CLASS="MATH">&lt; <I>candidate</I> &gt;</SPAN> and <!-- MATH
 $<candidate>$
 -->
<SPAN CLASS="MATH">&lt; <I>candidate</I> &gt;</SPAN> [ and <!-- MATH
 $<candidate>$
 -->
<SPAN CLASS="MATH">&lt; <I>candidate</I> &gt;</SPAN> [...]]</TT>

<P>

<P>
<BR>

Each candidate name is separated by `<TT>and</TT>'. They must be printed in alphabetical order.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 9
Buchanan Bush
Buchanan Bush
Buchanan Gore
Gore Bush
Gore Bush
Gore Bush
Gore Bush
Bush Buchanan
Bush Buchanan
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Buchanan won
</PRE>

<P>

______________________________________________________
2837||||||false||||||
<P>You work for an art store that has decided to carry every style and size of drafting triangle in existence. Unfortunately, sorting these has become a problem. The manager has given you the task of organizing them. You have decided to classify them by edge length and angles. To measure each triangle, you set it on a large sheet of very accurate graph paper and record the coordinate of each point. You then run these three points through a computer program to classify the triangles according to:<P><P><BR><SPAN CLASS="textbf">Scalene</SPAN> no equal sides<P><P><BR><SPAN CLASS="textbf">Isosceles</SPAN> two equal sides<P><P><BR><SPAN CLASS="textbf">Equilateral</SPAN> three equal sides<P><P><BR>and<P><P><BR><SPAN CLASS="textbf">Acute</SPAN> all angles under 90<P><P><BR><SPAN CLASS="textbf">Right</SPAN> one angle equal 90<P><P><BR><SPAN CLASS="textbf">Obtuse</SPAN> one angle over 90<P><P><BR>Of course, sometimes you make mistakes entering the data, so if you input points that do not form a valid triangle, your program should tell you.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>One triangle is described per line. Each line has six measurements taken to the nearest 0.001 in the order:<P><P><BR><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB>&nbsp;<I>x</I><SUB>3</SUB>&nbsp;<I>y</I><SUB>3</SUB></SPAN><P><P><BR>The final line of input will contain only a `<TT>-1</TT>'.<P>None of the test sets contain non-right angles in the range 88-92 degrees, nor do any of the test sets include any non-equal side lengths for one triangle within 0.01 of one another.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>You will output one line for each triangle, which will contain two words:<P><P><BR><!-- MATH
 $<length \ classification>$
 --><SPAN CLASS="MATH">&lt; <I>length</I>&nbsp;<I>classification</I> &gt;</SPAN> <!-- MATH
 $<angle \ classification>$
 --><SPAN CLASS="MATH">&lt; <I>angle</I>&nbsp;<I>classification</I> &gt;</SPAN><P><P><BR>or<P><P><BR><TT>Not a Triangle</TT><P><P><BR>The final line of your output file will be:<P><P><BR><TT>End of Output</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10.000 10.000 10.000 20.000 20.000 10.000
0.000 0.000 4.000 0.000 2.000 3.464
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Isosceles Right
Equilateral Acute
End of Output
</PRE><P>
______________________________________________________
2838||||||false||||||
<P>
You are planning a canoe trip through a tidal estuary (a network of waterways subject to tides).
   You can paddle only by day (sunrise to sunset). A particular difficulty is that many of the places
   you can consider stopping will only have enough water to float your canoe when the tide is sufficiently
   high, and getting stuck offshore in the mud for several hours is not your idea of a good time!

<P>
You have a list of the available docks, in the order you will encounter them. For each dock you know
   how many miles it is from your starting point and for how many hours before and after low tide it
   cannot be reached. You need not stop at each dock, and the main channel of the waterway will always
   have enough water for you to make progress if you wish to bypass one or more docks. You want to be
   sure, however, that you put in to an accessible dock by sunset on each day. You also cannot depart
   from a dock in the morning until enough water is available.

<P>
The time of sunrise, sunset, and low tides for each day will change slightly. So successive
sunrises will not be exactly 24 hours apart nor sunsets, nor will successive low tides occur exactly
12 hours apart. Over the limited number of days for your trip, we can approximate these changes as a
fixed number of minutes per day away from the ideal.

<P>
Write a program to prepare itineraries for such trips, indicating at which docks you will stop at
   end of each day's paddling. Each itinerary should require as few days as possible. Given a choice
   of itineraries with the same number of days, choose the one in which you make the most progress in the earlier days.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of a series of trip descriptions. All time inputs will be presented in the form
<SPAN CLASS="MATH"><I>HH</I> : <I>MM</I> : <I>SS</I></SPAN>, where <SPAN CLASS="MATH"><I>HH</I></SPAN> is a two digit integer indicating hours from 00-23, <SPAN CLASS="MATH"><I>MM</I></SPAN> is a two-digit
integer indicating minutes from 00-59, and <SPAN CLASS="MATH"><I>SS</I></SPAN> is a two-digit integer indicating seconds from 00-59.

<P>

<P>
<BR>
For each trip description:

<P>
<TABLE COLS=2>
<COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
 <SPAN  CLASS="textbf">Line 1</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Maximum number of days for the trip (integer 1­10)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
 <SPAN  CLASS="textbf">Line 2</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Average paddling speed in miles per hour (positive real number)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
 <SPAN  CLASS="textbf">Line 3</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH">&lt; <I>sunrise</I> &gt;</SPAN> <!-- MATH
 $<interval>$
 -->
<SPAN CLASS="MATH">&lt; <I>interval</I> &gt;</SPAN> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Time of sunrise on day 1 of the trip (05:00:00-08:00:00)</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Time between successive sunrises (23:45:00-24:15:00)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
 <SPAN  CLASS="textbf">Line 4</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH">&lt; <I>sunset</I> &gt;</SPAN> <!-- MATH
 $<interval>$
 -->
<SPAN CLASS="MATH">&lt; <I>interval</I> &gt;</SPAN> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Time of sunset on day 1 (17:00:00-20:00:00)</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Time between successive sunsets (23:45:00-24:15:00)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
 <SPAN  CLASS="textbf">Line 5</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH">&lt; <I>lowtide</I> &gt;</SPAN> <!-- MATH
 $<interval>$
 -->
<SPAN CLASS="MATH">&lt; <I>interval</I> &gt;</SPAN> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Time of 1st low tide on day 1 (any time)</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Time between successive low tides (11:00:00-13:00:00)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
 <SPAN  CLASS="textbf">Line 6</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Number of docks available along the way, not counting your trip starting point but</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  including your final destination (positive integer)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
 <SPAN  CLASS="textbf">7..end</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $<distance>$
 -->
<SPAN CLASS="MATH">&lt; <I>distance</I> &gt;</SPAN> <!-- MATH
 $<inaccessible>$
 -->
<SPAN CLASS="MATH">&lt; <I>inaccessible</I> &gt;</SPAN> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  One line for each dock (including the starting dock at distance 0.0), containing:</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Distance of that dock, in miles, from your trip starting point (real)</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Number of hours before and after low tide when dock is inaccessible(integer 0-12)
</TD></TR>
</TABLE>

<P>

<P>
<BR>
The final dataset is followed by a `<TT>0</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each trip description, print a single line:

<P>

<P>
<BR>

<TT>NO ITINERARY POSSIBLE</TT>

<P>

<P>
<BR>
if the trip cannot be completed in the indicated number of days. If the trip can be completed,
print a single line containing the numbers of the docks at which you would stop on each day, each
number separated from the others by a single space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
5.0
07:22:00 23:54:00
18:16:00 23:58:30
05:21:00 12:24:00
90.0 0
15.0 1
30.0 2
45.0 3
60.0 2
75.0 1
90.0 1
105.0 2
125.0 3
140.0 2
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 5 7 9
</PRE>

<P>

______________________________________________________
2839||||||false||||||
<P>Hermes Poseidon (HP) has produced a new calculator, the HP CXX, using the very latest in modern technology. It supports the four basic arithmetic operations on integer values from I to MMMMCMXCIX.<P>In this problem, you are simulating The HP CXX. Each line of input will be either a roman numeral representation of a positive integer (between <TT>I</TT>(1) and <TT>MMMMCMXCIX</TT>(4999)), which will then be pushed to the top of the virtual stack, or it will be an arithmetic operation (<TT>+ - * /</TT>) to be performed on the top two values of the stack. In addition, there is the `<TT>=</TT>' operation, which is a request to print the value of the top of the stack (in roman numerals, of course).<P>For the `<TT>-</TT>' operation, subtract the first number on the stack from the second. For `<TT>/</TT>, divide the second number on the stack by the first. An attempt to divide by 0 should result in the error message ``division by zero exception". When that happens, push the dividend (non-zero number) back onto the stack, but not the divisor (zero).<P>If an operation is requested, and there are insufficient numbers on the stack, print the error ``stack underflow" and leave the stack unchanged. This applies to both the binary operations `<TT>+ - * /</TT>' and the print operation `<TT>=</TT>'.<P>If an attempt is made to print a number whose value is 0 or less, or whose value is greater than MMMMCMXCIX(4999), display the error message ``out of range exception" and go on to the next line of input.<P><P><BR><SPAN CLASS="textbf">Roman Numerals</SPAN><P>For those who are unfamiliar with Roman Numerals, here is a quick summary:<P><P><BR>Each letter used in Roman numerals stands for a different number:<P><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER RULES=GROUPS><COL ALIGN=CENTER><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Roman Numeral</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Number</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>V</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>X</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>L</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>50</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>100</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>500</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>M</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1000</TD></TR></TBODY></TABLE></DIV><P>A string of letters means that their values should be added together. For example, XXX = 10 + 10 + 10 = 30, and LXI = 50 + 10 + 1 = 61. If a smaller value is placed before a larger one, we subtract instead of adding. For instance, IV = 5 - 1 = 4 and XC = 100 - 10 = 90.<P><UL><LI>Except for M, do not add more than three of the same letters together.<P></LI><LI>Subtract only powers of ten, such as I, X, or C. Writing VL for 45 is not allowed: write XLV instead.<P></LI><LI>Subtract only a single letter from a single numeral. Write VIII for 8, not IIX; 19 is XIX, not IXX.<P></LI><LI>Don't subtract a letter from another letter more than ten times greater. This means that you can only subtract I from V or X, and X from L or C, so MIM is illegal. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each input line consists of either:<UL><LI>A Roman numeral between <TT>I</TT> and <TT>MMMMCMXCIX</TT>, or<P></LI><LI>An arithmetic operation <TT>+</TT>, <TT>-</TT>, <TT>/</TT>, or <TT>*</TT>, or the print operator, <TT>=</TT> </LI></UL><P>The input ends at the end-of-file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>A line will be output:<P><UL><LI>For every print operation, print the value at the top of the stack, or<P></LI><LI>One of the error messages, on a line by itself:<DL COMPACT><DT>-</DT><DD><TT>division by zero exception</TT></DD><DT>-</DT><DD><TT>stack underflow</TT></DD><DT>-</DT><DD><TT>out of range exception</TT></DD></DL></LI></UL><P>No other output should be produced<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
I
I
+
=
II
*
=
VIII
-
=
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
II
IV
out of range exception
</PRE><P>
______________________________________________________
2840||||||false||||||
<P>Suppose we know a signal is generated by the function <SPAN CLASS="MATH"><I>x</I> = sin(<I>f</I><SUB>1</SUB><I>t</I>)sin(<I>f</I><SUB>2</SUB><I>t</I>)</SPAN>, where <SPAN CLASS="MATH"><I>f</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>f</I><SUB>2</SUB></SPAN> are two unique frequencies, each having an integral value in the range 400 to 600 Hz (Hz = cycles per second), and <SPAN CLASS="MATH"><I>t</I></SPAN> represents time. In this problem, you will be given <SPAN CLASS="MATH"><I>N</I></SPAN> samples of this function at equally-spaced time intervals corresponding to <SPAN CLASS="MATH"><I>t</I> = 1/<I>N</I></SPAN>, <SPAN CLASS="MATH"><I>t</I> = 2/<I>N</I></SPAN>, and so forth. From these samples, you are to determine <SPAN CLASS="MATH"><I>f</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>f</I><SUB>2</SUB></SPAN>.<P>For example, suppose <SPAN CLASS="MATH"><I>f</I><SUB>1</SUB> = 400</SPAN> Hz, <SPAN CLASS="MATH"><I>f</I><SUB>2</SUB> = 500</SPAN> Hz, and <SPAN CLASS="MATH"><I>N</I> = 100</SPAN>. The first sample, at time <SPAN CLASS="MATH"><I>t</I> = 1/100</SPAN> sec, is equal to <SPAN CLASS="MATH">sin(400*0.01)sin(500*0.01) = sin(4)sin(5) = 0.156912</SPAN> . Similarly, the second sample, at time <SPAN CLASS="MATH"><I>t</I> = 2/100</SPAN> sec, is equal to <SPAN CLASS="MATH">sin(400*0.02)sin(500*0.02) = sin(8)sin(10) = 0.312821</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases to consider. Each case begins with an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, no larger than 1000, that specifies the number of signal samples. The next <SPAN CLASS="MATH"><I>N</I></SPAN> data items are real numbers representing the signal samples at time <SPAN CLASS="MATH">1/<I>N</I></SPAN> sec, <SPAN CLASS="MATH">2/<I>N</I></SPAN> sec, and so forth. A single integer `<TT>0</TT>' follows the last case.<P>The number of samples for each case is guaranteed to be sufficient to allow the correct result to be obtained.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display a single line that is formatted like this:<P><P><BR><TT>Case 1, f1 = 400, f2 = 500</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100
0.156912 0.312821 0.466731 0.617657 0.764638 0.906737 1.04305 1.17271
1.29489 1.40883 1.51381 1.60917 1.69432 1.76873 1.83195 1.8836 1.92338
1.95106 1.96649 1.96962 1.96045 1.93908 1.9057 1.86055 1.80396 1.73634
1.65816 1.56997 1.47237 1.36603 1.25166 1.13003 1.00196 0.868307 0.729943
0.587785 0.442764 0.295823 0.147918 1.68756e-010 -0.146981 -0.292088
-0.434403 -0.573031 -0.707107 -0.835801 -0.958325 -1.07394 -1.18195
-1.28171 -1.37266 -1.45428 -1.52611 -1.58779 -1.63898 -1.67947 -1.70907
-1.7277 -1.73535 -1.73205 -1.71795 -1.69323 -1.65816 -1.61308 -1.55838
-1.49452 -1.42201 -1.34141 -1.25334 -1.15846 -1.05745 -0.951057 -0.840028
-0.725146 -0.607206 -0.487017 -0.365392 -0.243145 -0.121082 -2.75143e-010
0.119322 0.236125 0.34968 0.459289 0.564288 0.664055 0.758014 0.845635
0.926438 1 1.06595 1.12398 1.17384 1.21533 1.24833 1.27276 1.28862
1.29596 1.29489 1.28558

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1, f1 = 400, f2 = 500
</PRE><P>
______________________________________________________
2841||||||false||||||
<P>A <SPAN CLASS="textit">palindrome</SPAN> is a sequence that is the same when read forward or backward. For example, "pop" is a palindrome, as are ``Poor Dan is in a droop" (ignoring spaces and case), and ``12321".<P>In this problem, you are to find the ``cheapest" way to transform a sequence of decimal digits into a palindrome. There are only two types of modifications you may make to the sequence, but each of these may be repeated as many times as necessary. You may delete a digit from either end of the sequence, or you may add a digit to either end of the sequence. Each of these operations incurs a ``cost" of 1. For each input sequence, determine the smallest cost of transforming the sequence into a palindrome, and the length of the resulting palindrome. If two palindromes can be produced with the same cost, the length of the longer palindrome (the one with more digits) is to be reported.<P>For example, suppose the initial sequence was ``911". This can be transformed into a palindrome by deleting the leading ``9" (yielding ``11") or by adding an additional ``9" to the right end of the sequence (yielding ``9119"). Since both of these transformations have a cost of 1, and the second transformation yields a longer palindrome, it is this one which would be reported as your result.<P>Note that the particular palindrome produced by the cheapest sequence of transformations is not necessarily unique, but since you are not required to report the resulting palindrome, any of these will suffice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases to consider. Each case has a single line of input that contains one or more decimal digits followed by the end of line. The maximum number of digits in a sequence will be 6. The last case is followed by an empty line (that is, only an end of line).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number <SPAN CLASS="MATH">(1, 2,...)</SPAN>, the input sequence, the cost of the cheapest transformation, and the length of the resulting palindrome. Your output should follow the format shown in the examples below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
911
9118
11234
          &lt;-- This line is blank
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1, sequence = 911, cost = 1, length = 4
Case 2, sequence = 9118, cost = 2, length = 4
Case 3, sequence = 11234, cost = 3, length = 8
</PRE><P>
______________________________________________________
2842||||||false||||||
<P>Everyone can make stars. A five-pointed star is usually drawn as shown (by the solid lines) in figure 1. Here the points of the star have been labeled 1 through 5. The usual procedure for drawing the star is to connect point 1 to point 3, point 3 to point 5, point 5 to point 2, point 2 to point 4, and finally connect point 4 to point 1. This is all done without lifting your pencil from the paper.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2842a.jpg ALT="\epsfbox{p2842a.eps}"></DIV><P>The formal procedure for drawing an <SPAN CLASS="MATH"><I>n</I></SPAN>-pointed star (without lifting the pencil) is to begin with an <SPAN CLASS="MATH"><I>n</I></SPAN>-sided polygon (shown with the dashed lines in figure 1). Pick any polygon vertex as a starting point, and then draw consecutive lines from one polygon vertex to another until you return to the starting vertex, skipping the same number of vertices, in the same direction (clockwise or counterclockwise) each time. A requirement is that we must skip at least one vertex between every pair of connected vertices, or else we just wind up tracing the edges of the polygon. Likewise, we must also skip fewer than <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> vertices.<P>For example, with the 5-pointed star, we might start with vertex 1, skip vertex 2, and draw a line to vertex 3. We then skip vertex 4, and draw a line to vertex 5. Skipping vertex 1, we draw a line from vertex 5 to vertex 2. Skipping vertex 3, we draw a line from vertex 2 to vertex 4. Finally, we skip vertex 5, and draw a line from vertex 4 to vertex 1, completing the star.<P>We could also skip two vertices when drawing the 5-pointed star. This would result in connected vertex 1 to vertex 4 (skipping 2 and 3), then connecting vertex 4 to vertex 2 (skipping 5 and 1), then vertex 2 to vertex 5 (skipping 3 and 4), then vertex 5 to vertex 3 (skipping 1 and 2), and finally vertex 3 to vertex 1 (skipping 4 and 5). This is exactly the same star produced by skipping just one vertex. That is, the same vertices are connected by lines as in the earlier star.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2842a.jpg ALT="\epsfbox{p2842b.eps}"></DIV><P>It is not, however, always true that skipping different numbers of vertices will yield the same star. For example, there are two different 7-pointed stars that can be drawn, as shown in figure 2.<P>The question you are to answer in this problem is ``how many different stars with <SPAN CLASS="MATH"><I>n</I></SPAN> points can be drawn in this manner?"<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases to consider. The input for each case is a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>, between 5 and 500, that specifies the number of points in a star. The last case will be followed by the integer `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number <SPAN CLASS="MATH">(1, 2,...)</SPAN>, the number of points <SPAN CLASS="MATH">(<I>n</I>)</SPAN>, and the number of unique stars that can be drawn without lifting your pencil. Your output should follow the format shown in the examples below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
6
7
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1, n = 5, unique stars = 1
Case 2, n = 6, unique stars = 0
Case 3, n = 7, unique stars = 2
</PRE><P>
______________________________________________________
2843||||||false||||||

<P>
A trick sometimes used by parents to teach their children the value of money is to give then a penny - just a
penny! - and the promise that for each day they don't spend it, the parent will double it. All students of
computing know that long before a month has elapsed without spending a cent, the parents will not likely be
able to make good on their promise.

<P>
100-percent compound daily interest on an investment is, of course, unattainable in normal financial dealings,
but we are all continually reminded of the power of compound interest, even with the relatively low interest
rates available today.

<P>
But exactly how much money can be made with compound interest? Assume, for example, an initial investment
of $100.00 (US or Canadian ), an annual interest rate of 6.00 percent, and that interest is compounded monthly.
That is, the interest earned during the preceding month is added to the principal at the end of the month.
(For our purposes, we'll assume a month is exactly 1/12th of a year.)

<P>
At the end of the first month, the money will have earned 0.5 percent interest (1/12th of 6.00 percent), or $0.50.
This is added to the $100.00 invested, so that during the next month, interest is paid on $100.50. During the next
month another 0.5 percent interest is earned, which is exactly $0.5025. We will assume that the bank, being
conservative, will not pay any interest less than $0.01, so our investment is credited with an additional $0.50
at the end of the second month, for a whopping total of $101.00. Continuing in the same manner, at the end of 12
months our investment will total $106.12, $0.12 more than simple 6.00 percent interest for a year with no compounding.

<P>
Given an amount <SPAN CLASS="MATH"><I>P</I></SPAN> to be invested for a year with <SPAN CLASS="MATH"><I>I</I></SPAN> percent interest, compounded <SPAN CLASS="MATH"><I>C</I></SPAN> times during the year at
equal intervals, what is total return on the investment?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple cases to consider.  The input for each case is a single line containing the initial
investment amount, <SPAN CLASS="MATH"><I>P</I></SPAN>, given in dollars and cents (but no fractional cents, and no larger than $100,000.00),
the annual interest rate <SPAN CLASS="MATH">(<I>I</I>)</SPAN> given as a real number with two fractional digits representing a percentage,
greater than zero but less than 100, and the number of compounding intervals per year <SPAN CLASS="MATH">(<I>C</I>)</SPAN>, an integer
between 1 and 365. The last case will be followed by a line containing `<TT>0.00 0.00 0</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case, display the case number <!-- MATH
 $(1, 2, \dots)$
 -->
<SPAN CLASS="MATH">(1, 2,...)</SPAN>, the initial investment <SPAN CLASS="MATH">(<I>P</I>)</SPAN>, the annual
interest rate <SPAN CLASS="MATH">(<I>I</I>)</SPAN>, the number of compounding intervals per year <SPAN CLASS="MATH">(<I>C</I>)</SPAN>, and the value of the investment at
the end of a year. Your output should follow the format shown in the examples below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
100.00 6.00 1
100.00 6.00 12
1000.00 6.00 12
0.00 0.00 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1. $100.00 at 6.00% APR compounded 1 times yields $106.00
Case 2. $100.00 at 6.00% APR compounded 12 times yields $106.12
Case 3. $1000.00 at 6.00% APR compounded 12 times yields $1061.63
</PRE>

<P>

______________________________________________________
2844||||||false||||||
<P>A knight is a piece used in the game of chess. The chessboard itself is square array of cells. Each time a knight moves, its resulting position is two rows and one column, or two columns and one row away from its starting position. Thus a knight starting on row <SPAN CLASS="MATH"><I>r</I></SPAN>, column <SPAN CLASS="MATH"><I>c</I></SPAN> - which we'll denote as <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>)</SPAN> - can move to any of the squares <SPAN CLASS="MATH">(<I>r</I> - 2, <I>c</I> - 1)</SPAN>, <SPAN CLASS="MATH">(<I>r</I> - 2, <I>c</I> + 1)</SPAN>, <SPAN CLASS="MATH">(<I>r</I> - 1, <I>c</I> - 2)</SPAN>, <SPAN CLASS="MATH">(<I>r</I> - 1, <I>c</I> + 2)</SPAN>, <SPAN CLASS="MATH">(<I>r</I> + 1, <I>c</I> - 2)</SPAN>, <SPAN CLASS="MATH">(<I>r</I> + 1, <I>c</I> + 2)</SPAN>, <SPAN CLASS="MATH">(<I>r</I> + 2, <I>c</I> - 1)</SPAN>, or <SPAN CLASS="MATH">(<I>r</I> + 2, <I>c</I> + 1)</SPAN>. Of course, the knight may not move to any square that is not on the board.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2844.jpg ALT="\epsfbox{p2844.eps}"></DIV><P>Suppose the chessboard is not square, but instead has rows with variable numbers of columns, and with each row offset zero or more columns to the right of the row above it. The figure to the left illustrates one possible configuration. How many of the squares in such a modified chessboard can a knight, starting in the upper left square (marked with an asterisk), <SPAN ID="txt52">not</SPAN> reach in any number of moves without resting in any square more than once?<P>If necessary, the knight is permitted to pass over regions that are outside the borders of the modified chessboard, but as usual, it can only move to squares that are within the borders of the board.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases to consider. The input for each case begins with an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, between 1 and 10, that specifies the number of rows in the modified chessboard. Following <SPAN CLASS="MATH"><I>n</I></SPAN> there will be <SPAN CLASS="MATH"><I>n</I></SPAN> pairs of integers, with the <SPAN CLASS="MATH"><I>i</I></SPAN>-th pair corresponding to the <SPAN CLASS="MATH"><I>i</I></SPAN>-th row of the chessboard. The first integer of each pair indicates the number of squares skipped at the beginning of the row. The second integer indicates the number of squares in the row (which will always be at least 1). The last case will be followed by the integer `<TT>0</TT>'.<P><P><BR>For example, input for the case illustrated by the chessboard shown above would be:<P><P><BR><TT>7 0 3 0 3 0 4 0 4 1 3 1 7 4 4</TT><P><P><BR>The maximum dimensions of the board will be 10 rows and 10 columns. That is, any modified chessboard specified by the input will fit completely on a 10 row, 10 column board.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number <SPAN CLASS="MATH">(1, 2,...)</SPAN>, and the number of squares that the knight <SPAN ID="txt57">can not</SPAN> reach. Display the results in the format shown in the examples below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
7 0 3 0 3 0 4 0 4 1 3 1 7 4 4
2 0 3 0 3
3 0 3 0 3 0 3
2 0 1 2 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1, 4 squares can not be reached.
Case 2, 4 squares can not be reached.
Case 3, 1 square can not be reached.
Case 4, 0 squares can not be reached.
</PRE><P>
______________________________________________________
2845||||||false||||||
<P>A macro processor is a symbol processing program. It takes a stream of characters as its input, and produces a stream of characters as its output. A ``macro" is similar to ordinary function in that it has a definition, and when invoked, that definition is applied to the argument(s) to yield the result. In this problem, you will develop a simple macro processor.<P>A ``macro call" consists of a name and a list of arguments, separated by commas. The name is preceded by `<TT>[</TT>' (a left bracket) and the last argument is followed by `<TT>]</TT>' (a right bracket). For example, ``<TT>[doit,to,it]</TT>" calls the macro named ``<TT>doit</TT>" with two arguments, ``<TT>to</TT>" and ``<TT>it</TT>". ``<TT>[random]</TT>" calls the macro named ``random" with no arguments.<P><P><BR>Before a macro can be called, it must be defined by associating its name with a symbol string. This definition string may contain the special constructions ``<TT>$1</TT>" through ``<TT>$9</TT>" to reference the first through the ninth macro parameters. ``$0" references the macro's name itself. When the macro is called, these constructions are literally replaced by the values of the parameters. For example, suppose the definition string for the macro named ``<TT>321</TT>" was ``<TT>$3-$2-$1</TT>". The macro call ``<TT>[321,This,is,fun]</TT>" would yield the output ``<TT>fun-is-This</TT>". A macro call can appear anywhere. For example, the macro call ``<TT>[321,[321,A,B,C],D,E]</TT>" would yield the output ``<TT>E-D-C-B-A</TT>".<P>Input enclosed in `<SPAN CLASS="MATH">&lt;</SPAN>' and `<SPAN CLASS="MATH">&gt;</SPAN>' prevents the evaluation of the text enclosed, allowing special characters like `<TT>[</TT>', `<TT>]</TT>', `<TT>,</TT>' and `<TT>$</TT>' to be used in other than their usual contexts. Thus the macro call ``<TT>[321,<SPAN CLASS="MATH">&lt;</SPAN>$<SPAN CLASS="MATH">&gt;</SPAN>,<SPAN CLASS="MATH">&lt;</SPAN>[<SPAN CLASS="MATH">&gt;</SPAN>,<SPAN CLASS="MATH">&lt;</SPAN>,<SPAN CLASS="MATH">&gt;</SPAN>]</TT>" would yield ``<TT>,-[-$</TT>".<P><P><BR>Macros are defined using the predefined macro named ``<TT>def</TT>", which has two arguments. The first argument is the name of the macro being defined, and the second argument is the defining symbol string for the macro. The ``<TT>321</TT>" macro definition is ``<TT>[def,321,<SPAN CLASS="MATH">&lt;</SPAN>$3-$2-$1<SPAN CLASS="MATH">&gt;</SPAN>]</TT>". Note that the definition is enclosed in `<SPAN CLASS="MATH">&lt;</SPAN>' and `<SPAN CLASS="MATH">&gt;</SPAN>' to prevent ``$1", ``$2", and ``$3" from being interpreted as parameter references to `<TT>def</TT>'. The def macro produces no output. Naturally, the def macro isn't defined using def, but is treated specially by the implementation.<P><P><BR><SPAN CLASS="textbf">Processing</SPAN><P>The input stream is processed character by character and copied to the output until a macro call is encountered, or the input is exhausted (which terminates processing). A macro call is evaluated as described below, with the result (if any) copied to the output.<P><OL><LI>The macro name and the parameters are evaluated in sequence from left to right. This may require evaluating additional macro calls, which must be processed recursively.<P></LI><LI>When the argument list is complete (that is, when the closing `<TT>]</TT>' is encountered) the definition of the macro being called is scanned in the same manner as the original input stream except that occurrences of ``<TT>$0</TT>", ``<TT>$1</TT>", and so forth are replaced literally by the corresponding arguments. The result of the macro call is the symbol stream produced by this scan.<P></LI><LI>When the macro call is completed, the macro name and the arguments are discarded, and processing resumes at the point where it was interrupted by the macro call. </LI></OL><P><P><BR><SPAN CLASS="textbf">Limits and Caveats</SPAN><P>Macro names and arguments will contain no more than 32 characters each. The defining string for a macro will contain no more than 100 characters. Macros will never be defined more than once (that is, the same macro name will not be used more than once as the first argument to ``<TT>def</TT>"). Macro calls will always provide the correct number of arguments. Character case is significant in comparisons. All input characters, including end of line characters, are to be processed through the macro processor. No output line will contain more than 80 characters, including the end of line character. The input is guaranteed to be correct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases to consider. The input for each case begins with a line containing a single integer between 1 and 10, that specifies the number of lines of text immediately following that will be used as input to the macro processor. None of these lines will contain more than 80 characters, so the input to the macro processor will contain at most 810 characters. The last case will be followed by a line containing the integer `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number <SPAN CLASS="MATH">(1, 2,...)</SPAN>, a line containing 79 hyphens, the output from the macro processor, another line containing 79 hyphens, and a blank line.<P>In the sample input shown below, assume that the last visible character on each line is immediately followed by the end of line character. Blank lines in the expected output are shown here as `<TT>**BLANK**</TT>' for clarity, but these should actually be totally blank in your output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
This is just copied (including end of line).
1
[def,321,&lt;$3-$2-$1&gt;][321,This,is,fun]
1
[def,321,&lt;$3-$2-$1&gt;][321,[321,A,B,C],D,E]
1
[def,321,&lt;$3-$2-$1&gt;][321,This,is,fun][321,[321,A,B,C],D,E]
3
[def,321,&lt;$3-$2-$1&gt;]
[321,This,is,fun]
[321,[321,A,B,C],D,E]
3
[def,A,&lt;$1[B]$2&gt;]
[def,B,*B*]
[A,1,2]
2
[def,#,&lt;[-]$1[-]$2[-]$3[-]&gt;][def,-,&lt;$0&gt;][def,DEF,def][[DEF],X,THIS IS X]
[X][#,DEF,#,X]
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1
-------------------------------------------------------------------------------
This is just copied (including end of line).
-------------------------------------------------------------------------------
**BLANK**
Case 2
-------------------------------------------------------------------------------
fun-is-This
-------------------------------------------------------------------------------
**BLANK**
Case 3
-------------------------------------------------------------------------------
E-D-C-B-A
-------------------------------------------------------------------------------
**BLANK**
Case 4
-------------------------------------------------------------------------------

fun-is-ThisE-D-C-B-A
-------------------------------------------------------------------------------
**BLANK**
Case 5
-------------------------------------------------------------------------------
**BLANK**
fun-is-This
E-D-C-B-A
-------------------------------------------------------------------------------
**BLANK**
Case 6
-------------------------------------------------------------------------------
**BLANK**
**BLANK**
1*B*2
-------------------------------------------------------------------------------
**BLANK**
Case 7
-------------------------------------------------------------------------------
**BLANK**
THIS IS X-DEF-#-X-
-------------------------------------------------------------------------------
**BLANK**
</PRE><P>
______________________________________________________
2846||||||false||||||
<P>Trees comes in many varieties other than the popular binary tree. In general, a tree is a connected acyclic graph. That is, it consists of some number of vertices <SPAN CLASS="MATH"><I>N</I></SPAN> (which we'll assume is at least one in this problem), and <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> edges, each of which connects a pair of vertices.<P>A ``labeled tree" is a tree in which each vertex has been given a ``label." For simplicity, let us assume these labels are the integers 1 through <SPAN CLASS="MATH"><I>N</I></SPAN>. In how many different ways may a tree with <SPAN CLASS="MATH"><I>N</I></SPAN> vertices be labeled? By ``different" we mean that no rearrangement of two trees with the same number of vertices with different labeling will be identical. (Note that although we commonly associate data with each vertex, and identify one vertex as the root of the tree, that's not significant in this problem.)<P>Let's consider some examples. The figure below shows all possible arrangements of trees with <SPAN CLASS="MATH"><I>N</I> = 1</SPAN>, 2, 3, 4, or 5 vertices. The number shown below each tree is the number of different ways in which the vertices in each tree can be labeled.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2846a.jpg ALT="\epsfbox{p2846a.eps}"></DIV><P>Clearly a tree with only one vertex can be labeled in only one way - by assigning the label ``1" to the single vertex. A tree with two vertices can also be labeled in only one way. For example, although the two trees shown on the left below appear to be different, the first can be easily transformed into the second.<P>(Imagine the edges are strings, so the vertices can be easily repositioned without losing their connectivity.)<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2846a.jpg ALT="\epsfbox{p2846b.eps}"></DIV><P>There are, however, three possible ways to label the vertices in a 3-vertex tree, as shown on the right above. No matter how you rearrange the labeled vertices in any of the three trees, you cannot produce any of the other labeled trees.<P>In a similar manner, the various arrangements of four vertices in a tree yield a total of 16 possible labelings - 12 for the four vertices ``in a row," and 4 for the other configuration. There are three possible arrangements of the vertices in a tree with <SPAN CLASS="MATH"><I>N</I> = 5</SPAN>, with a total of 125 possible labelings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases to consider. The input for each case is an integer <SPAN CLASS="MATH"><I>N</I></SPAN> specifying the number of vertices in a tree, which will always be between 1 and 10. The last case will be followed by a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number <SPAN CLASS="MATH">(1, 2,...)</SPAN>, the input value of <SPAN CLASS="MATH"><I>N</I></SPAN>, and the number of different ways in which a tree with <SPAN CLASS="MATH"><I>N</I></SPAN> vertices may be labeled. Use the format shown in the examples below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
3
4
5
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1, N = 2, # of different labelings = 1
Case 2, N = 3, # of different labelings = 3
Case 3, N = 4, # of different labelings = 16
Case 4, N = 5, # of different labelings = 125
</PRE><P>
______________________________________________________
2847||||||false||||||

<P>
A company uses temporary employees (``temps") to handle its varying workloads. By doing so, it avoids having to
pay for benefits normally provided to its permanent employees. However, the company must pay an employment agency
a fixed fee for each temp they hire, as well as paying the temp a fixed amount of severance pay when they are
terminated - in addition, of course, to the monthly salary each temp receives. The company has a good understanding
of when it needs temporary workers, and how many such workers it will require each month. Depending on the fee paid
to the employment agency, the temporary worker's salary, and the severance pay, it may make sense to retain an
unneeded worker for one or more months if it's known that they will be needed again in the future.

<P>
Let's consider an example. Suppose we know that in March the company will need 10 temps, in April they'll need 9,
and in May they'll need 11. Suppose a temp earns $500 per month, that the employment agency receives $400 for
each temp hired, and $600 is paid as severance to each temp that is terminated. If the company employs just the
minimum number of temps required, then their payments will be as follows (we ignore the cost of terminating all
employees at the end of the last month):

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<B>Month</B>   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <B>No. of Temps</B>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <B>Employment Agency</B>    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <B>Salaries</B>   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <B>Severance Pay</B> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>March   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      10        </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>         $4000         </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   $5,000    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      $0 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>April   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>       9        </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>         $0            </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   $4,500    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      $600 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>May     </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      11        </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>         $800          </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   $5,500    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      $0 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Total   </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>         $4,8000       </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   $15,000   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      $600 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>
The total cost to the company is $20,400. But suppose they did not terminate the unneeded temp at the end of March,
but just let that person remain employed. They would then save $400 in employment agency fees (since they'd need to
hire just one additional temp for May), $600 in severance pay, and only have to pay the temp worker $500, for an
overall savings of $500.

<P>
In this problem you are given, as input, the number of months for which the company is to plan its temp worker budget,
the cost of hiring and firing a temp worker, the temp worker's monthly salary, and the required minimum number of
workers needed each month. You are to determine the minimum cost to the company to have at least the required minimum
number of workers on hand each month. Assume there are no temporary workers on hand before the first month, and that
the cost of terminating the workers at the end of the last month is <SPAN ID="txt58">not</SPAN> to be included in the cost.
You may assume that the planning interval will be no longer than 24 months, and the hiring cost, severance pay,
and monthly salary for each temp worker is greater than zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple cases to consider.  The input for each case begins with an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, the number of months
for which planning is required (never larger than 24). This is followed by three integers giving the cost of hiring
a worker, the worker's monthly salary, and the severance pay for a terminated worker. Finally there will appear <SPAN CLASS="MATH"><I>N</I></SPAN>
integers giving the required minimum number of workers needed in each month. The last
case will be followed by a zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case, display the case number <!-- MATH
 $(1, 2,\dots )$
 -->
<SPAN CLASS="MATH">(1, 2,...)</SPAN> and the minimum cost to the company. Use the format
shown in the examples below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3  400 500 600  10 9 11
8  400 600 600  11 9 10 14 9 9 13 15
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Expected Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1, Cost = $19900
Case 2, Cost = $66600
</PRE>

<P>

______________________________________________________
2848||||||false||||||

<P>
A printer - who still uses moveable type - is preparing to print a set of pages for a book. These pages are to be
numbered, as usual. The printer needs to know how many instances of each decimal digit will be required to set up
the page numbers in the section of the book to be printed.

<P>
For example, if pages 10, 11, 12, 13, 14 and 15 are to be printed, computing the number of digits is relatively
simple: just look at the page numbers that will appear, and count the number of times each digit appears. The
digit 0 appears only once, the digit 1 appears 7 times, the digits 2, 3, 4 and 5 each appear once, and 6, 7, 8
and 9 don't appear at all.

<P>
Your task in this problem is to provide the printer with the appropriate counts of the digits. You will be given
the numbers of the two pages that identify the section of the book to be printed. You may safely assume that all
pages in that section are to be numbered, that no leading zeroes will be printed, that page numbers are positive,
and that no page will have more than three digits in its page number.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple cases to consider.  The input for each case has two integers, <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN>, each of which
is guaranteed to be positive. These identify the pages to be printed. That is, each integer <SPAN CLASS="MATH"><I>P</I></SPAN> between <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN>,
including <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN>, is to be printed. A single zero will follow the input for the last case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case, display the case number <!-- MATH
 $(1, 2, \dots)$
 -->
<SPAN CLASS="MATH">(1, 2,...)</SPAN> and the number of occurrences of each decimal
digit 0 through 9 in the specified range of page numbers. Display your results in the format shown in the
examples below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 15
912 912
900 999
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 0:1 1:7 2:1 3:1 4:1 5:1 6:0 7:0 8:0 9:0
Case 2: 0:0 1:1 2:1 3:0 4:0 5:0 6:0 7:0 8:0 9:1
Case 3: 0:20 1:20 2:20 3:20 4:20 5:20 6:20 7:20 8:20 9:120
</PRE>

<P>

______________________________________________________
2849||||||false||||||
<P>
In the logic game Code 777 by Robert Abbott, there are 28 cards each of which has single colored digit on its face.
 The deck contains the following cards:  one green 1, two yellow 2s, three black 3s, four brown 4s, four red and one
 black 5, three pink and three green 6s, and one pink, two yellow, and four blue 7s.

<P>
There are four players: North, East, West, and South. In front of each player is a rack containing three cards; the
 remaining 16 cards are not used. Each player sees the nine cards on the other racks, but not the three cards on the
 player's own rack.

<P>
Each player must determine what cards on their rack based on the cards they can see, and on the answers that the
 other players give to some of the questions below.
<DL COMPACT>
<DT>1.</DT>
<DD>On how many racks is the sum of the numbers 18 or more?
     
</DD>
<DT>2.</DT>
<DD>On how many racks is the sum of the numbers 12 or less?
     
</DD>
<DT>3.</DT>
<DD>On how many racks is there the same number in different colors, e.g., a
        blue 7 and a yellow 7?
     
</DD>
<DT>4.</DT>
<DD>On how many racks are there three different colors?
     
</DD>
<DT>5.</DT>
<DD>On how many racks are the numbers either all even or all uneven?
     
</DD>
<DT>6.</DT>
<DD>On how many racks are there at least two identical cards (same number
        and same color)?
     
</DD>
<DT>7.</DT>
<DD>On how many racks do you see three consecutive numbers?
     
</DD>
<DT>8.</DT>
<DD>How many colors do you see?
     
</DD>
<DT>9.</DT>
<DD>How many colors appear at least three times?
     
</DD>
<DT>10.</DT>
<DD>How many numbers are missing?
     
</DD>
<DT>11.</DT>
<DD>How many of the following cards do you see: green 1, black 5, pink 7?
     
</DD>
<DT>12.</DT>
<DD>Do you see more 3s or more pink 6s?
     
</DD>
<DT>13.</DT>
<DD>Do you see more green 6s or more yellow 7s?
     
</DD>
<DT>14.</DT>
<DD>Do you see more 2s or more yellow 7s?
     
</DD>
<DT>15.</DT>
<DD>Do you see more pink 6s or more green 6s?
     
</DD>
<DT>16.</DT>
<DD>Do you see more blue 7s or more 7s of other colors?
     
</DD>
<DT>17.</DT>
<DD>Do you see more brown or more blue numbers?
     
</DD>
<DT>18.</DT>
<DD>Do you see more red or more pink numbers?
     
</DD>
<DT>19.</DT>
<DD>Do you see more green or more blue numbers?
     
</DD>
<DT>20.</DT>
<DD>Do you see more yellow or more pink numbers?
     
</DD>
<DT>21.</DT>
<DD>Do you see more black or more brown numbers?
     
</DD>
<DT>22.</DT>
<DD>Do you see more black or more red numbers?
     
</DD>
<DT>23.</DT>
<DD>Do you see more green or more yellow numbers?
</DD>
</DL>
 Note that during the game not all of the questions listed above will be asked. You may assume that the players
 answer the questions truthfully.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
You are to write a program to play North. The first 3 lines of input to your program will describe the racks of
the other players of the game.  These lines will contain words and integer values separated by one or more white
space characters.  The first word on each line will specify the player (i.e., East, West, or South).  The rest of
the line will contain 3 pairs, each consisting of a word (i.e., black, blue, brown, green, pink, red, or yellow)
and a number.  These pairs specify the cards held by that player.

<P>
The next line of input will contain a single integer value, <SPAN CLASS="MATH"><I>N</I></SPAN>, that specifies the number of questions that
 the program has been provided answers for.  Each of the remaining <SPAN CLASS="MATH"><I>N</I></SPAN> input lines will contain the name of the
 player who provided the answer, the number of the question that was answered, and the player's answer.
 Questions 1 through 11 are answered with a number, questions 12 through 23 are answered with one of three
 characters: `<TT>&lt;</TT>' denoting fewer or the first, `<TT>=</TT>' denoting the same number (even none) of either,
 and `<TT>&gt;</TT>' denoting  more of the first.  The answer provided by a player is based on the three racks that
 the answering player can see.
 One or more white space characters will separate items on the input lines.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output produced by your program must describe North's rack, in the style of the first three input lines.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
South green 1 black 3 pink 7
East brown 4 red 5 black 5
West red 5 green 6 yellow 7
4
South 1 1
East 9 1
West 10 0
South 16 =
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
North yellow 2 green 6 blue 7
</PRE>

<P>

______________________________________________________
2850||||||false||||||
<P>When the Federation was founded, it was decided that all members of the Federation would use a standard calendar. The Federation declared midnight on 2162-01-04 to be stardate zero. Thus stardates began on the fourth day of the year 2162, and increased at the rate of five units per day.<P>The Federation decided to limit the length of a stardate to four digits. As a result, what would have been stardate 10000 (midnight on 2167-06-27) was made stardate 0000 again. The first group of stardates could be referred to, when necessary, as zeroth-issue stardates, such as [0]1234, and the new issue as first-issue stardates, such as [1]1234. This reset to zero continued to occur every five and a half years, until 2266, when the <SPAN CLASS="MATH">19<SUP>th</SUP></SPAN> issue of stardates started. That year, Starfleet put together a committee to investigate what type of stardate system would be more acceptable. The committee's report, in 2267, recommended that the stardate rate be slowed to 0.1 units per day. This would make the same number of digits as had been previously used, and had covered five and a half years, cover two and a half centuries. It was decided that this system should be field-tested between stardates [19]7340 and [19]7840, i.e., 500 units, 5000 days. So from 2270-01-26 to 2283-10-05 this system was used.<P>This new system proved to be unpopular, and as a result, it was decided in 2280 that at the end of the test period (SD [19]7840) the new rate should not continue. Instead, a 0.5 units per day rate would be used, which would solve the main problems of both earlier systems. This system was used from stardate [19]7840, and was intended to be a permanent change. In 2318, over 150 years after the incorporation of the Federation, it was decided that starships should start to use a quad-cent calendar, which would keep the years the right length but make the day slightly longer. The quad-cent calendar eliminates leap years by assuming a standard year length of 365.2425 days. In keeping with this longer-term view of time, the stardates were increased to five digits, and the rate was changed to 1000 units per standard year. So on what would have been stardate [20]5006.0, i.e., midnight on 2323-01-01, stardates were reset to [21]00000.<P>The historical division of the Federation is having a difficult time converting dates to stardates.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input/Output</A>&nbsp;</FONT></H2><P>You have been asked to write a program that accepts a single date in the form <SPAN CLASS="MATH"><I>yyyy</I> - <I>mm</I> - <I>dd</I></SPAN> (where <SPAN CLASS="MATH"><I>yyyy</I></SPAN>=year, <SPAN CLASS="MATH"><I>mm</I></SPAN>=month, and <SPAN CLASS="MATH"><I>dd</I></SPAN>=day) and prints out the corresponding stardate without the issue number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2372-01-11
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
49027.3
</PRE><P>
______________________________________________________
2851||||||false||||||
<P>You are defending the first octant in 3-dimensional space. You only need to consider points with all non-negative integer coordinates that do not exceed a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>.<P>To orient themselves, commanders of every octant hold out their left hand, point their thumb up, index finger straight ahead, and middle finger to the right. They align the <SPAN CLASS="MATH"><I>x</I></SPAN>-axis with their middle finger, the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis with their index finger, and the <SPAN CLASS="MATH"><I>z</I></SPAN>-axis with their thumb. The <SPAN CLASS="MATH"><I>y</I></SPAN>-axis is called `forward', the <SPAN CLASS="MATH"><I>z</I></SPAN>-axis is called `up'.<P>At some point in time, a single enemy spaceship will arrive in your octant at a point <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN>, <SPAN CLASS="MATH"><I>Z</I></SPAN>, on one of the six faces of your bounded octant, never on an edge. Upon arrival, the ship will be oriented perpendicular to the face, looking into the bounded octant.<P>The spaceship has an engine in the back which propels it forward, and four thrusters labeled A, B, C, and D at the front. When the ship arrives at your octant,thruster A points `up', or `forward' if `up' is impossible, and the remaining thrusters are arranged clockwise from A to D, looking from the back to the front of the ship.<P>The flight plan of the spaceship is based on the following actions, each of which takes one time unit:<P align=center><img src="http://livearchive.onlinejudge.org/external/28/p2851a.gif><P>Each of the eight corners of your bounded octant contains a missile launcher. From one of these you release a single missile when the spaceship arrives. In each time unit, once the spaceship arrives, the following happens:<UL><LI>The missile moves from its current position to that adjacent point that is closest, in terms of Euclidean distance, to the current position of the spaceship. Only one coordinate will change because the missile cannot move diagonally through space. If there is a choice, the missile will always move to the best possible point.<P></LI><LI>Immediately after the missile starts to move, the spaceship carries out the next action from its flight plan; action <TT>F</TT> will change the position of the spaceship, the other actions will not. </LI></UL><P>If the missile and the spaceship occupy the same position at the end of a time unit, they disintegrate. Otherwise, if the spaceship is on one of the faces of your bounded octant it has escaped.<P>You are to write a program that, given the size of an octant and the flight plan of an enemy spaceship, determines if the ship escapes or determines the trajectory of a missile that collides with the ship and destroys it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will consist of several datasets. Each dataset has three lines of input. The first line will contain the integer value <SPAN CLASS="MATH"><I>N</I></SPAN>. The second line will contain three integer values, separated by one or more white space characters, that give the <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN>, and <SPAN CLASS="MATH"><I>Z</I></SPAN> coordinates of the location where the enemy ship enters the octant. The third line of input will contain a single string that specifies the flight path of the enemy ship. There will be a blank line between datasets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program will print for each dataset `<TT>escaped</TT>' if the enemy ship is able to leave the octant without being destroyed, or the trajectory of a missile that collides with the spaceship. The trajectory consists of one line with coordinates (<SPAN CLASS="MATH"><I>X</I></SPAN>, followed by <SPAN CLASS="MATH"><I>Y</I></SPAN>, followed by <SPAN CLASS="MATH"><I>Z</I></SPAN>) for each point that the missile has visited, starting with a corner of your bounded octant and ending with the point of collision. Print a blank line after each dataset.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
1 0 1
A

4
1 0 1
FDF
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
escaped

3 0 0
2 0 0
2 1 0
2 1 1
</PRE><P>
______________________________________________________
2852||||||false||||||
<P>A prefix expression consists of either an unsigned integer, the variable `<TT>x</TT>', or one of the operators [<TT>+</TT>, <TT>-</TT>, <TT>*</TT>, <TT>/</TT>] followed by two prefix expressions. Write a program that when given a prefix expression returns an equivalent expression with the following simplifications:<UL><LI>Anything times 0 is 0 </LI><LI>0 divided by anything other than 0 is 0 </LI><LI>Anything divided by 0 is an error </LI><LI>Anything plus 0 is the other thing </LI><LI>Anything multiplied or divided by 1 is the other thing </LI><LI>Any operation on two integer value is the value that results from performing the operation (i.e., + 2 2 simplifies to 4) </LI></UL>The only simplifications that you are to perform are the ones listed above. Also for the purposes of this problem you are to assume that `<TT>*</TT>' and `<TT>+</TT>' are not commutative or associative.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input consists of several datasets, one on each line. You may assume that one or more white space characters separate the tokens that make up the expression.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Output</A>&nbsp;</FONT></H2>For each dataset, print the equivalent expression. If the simplification results in an error (i.e. something is divided by 0) your program should print the message `<TT>Error</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
* x 1
* 1 * 2 3
/ * x 1 - 3 2
/ 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
x
6
x
Error
</PRE><P>
______________________________________________________
2853||||||false||||||
<P>At various points in history a number of presidents (former and the current president) have been alive. For example, currently there are six living presidents: Ford, Carter, Reagan, George the Second (George H. Bush), Clinton, and George the Third (George W. Bush). <B>Note:</B> George Washington was George the First.<P>Write a program that takes as input the name, inauguration date, and date of death (if appropriate) of several presidents and produces as output the periods of time when the maximum number of current or former presidents are alive, together with the names of those presidents in alphabetical order. Note, there may be several such intervals and all must be listed in chronological order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will start with a line that contains a single integer, <SPAN CLASS="MATH"><I>N</I></SPAN>, that specifies the number of presidents to be considered. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines of input describes a single president. An input line for a president will consist of an identifier consisting of letters only. The identifier will be followed by the inauguration date, and by an optional date of death. Dates will be expressed in the form <SPAN CLASS="MATH"><I>yyyy</I> - <I>mm</I> - <I>dd</I></SPAN> where <SPAN CLASS="MATH"><I>yyyy</I></SPAN> represents a year, <SPAN CLASS="MATH"><I>mm</I></SPAN> represents a month, and <SPAN CLASS="MATH"><I>dd</I></SPAN> represents a day. If the president is still alive, no death date will be given. One or more white space characters will separate tokens on the input line. Note that if a president was inaugurated more than once, they may appear in the input more than once; remember, however, that once a president, always a president.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output from the program will specify the period of time when the most presidents were alive, followed by the names in alphabetical order. If there are multiple intervals, the intervals will be listed in chronological order, separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
Nixon 1969-01-20 1994-04-22
Ford 1974-01-20
GWBush 2001-01-20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1969-1-20 to 1994-4-22
Ford
Nixon

1974-1-20 to 2003-11-7
Ford
GWBush
</PRE><P>
______________________________________________________
2854||||||false||||||
<P>We say that an undirected graph <SPAN CLASS="MATH"><I>G</I></SPAN> on <SPAN CLASS="MATH"><I>n</I></SPAN> vertices { <SPAN CLASS="MATH">0,..., <I>n</I> - 1</SPAN>} is circular if the edge set of <SPAN CLASS="MATH"><I>G</I></SPAN> can be defined by a set of distances <SPAN CLASS="MATH"><I>DIST</I></SPAN> so that {<SPAN CLASS="MATH"><I>x</I>, <I>y</I></SPAN>} is an edge if and only if <SPAN CLASS="MATH">| <I>x</I> - <I>y</I> | mod&nbsp;<I>n</I> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2854img1.gif ALT="$ \in$"> <I>DIST</I></SPAN>. Note that if <SPAN CLASS="MATH"><I>d</I> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2854img1.gif ALT="$ \in$"> <I>DIST</I></SPAN> then also <SPAN CLASS="MATH">(<I>n</I> - <I>d</I> ) <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2854img1.gif ALT="$ \in$"> <I>DIST</I></SPAN>. For example, a pentagon graph can be seen as a circular graph on 5 vertices with <SPAN CLASS="MATH"><I>DIST</I> = {1, 4}</SPAN>, and a 5-star has <SPAN CLASS="MATH"><I>DIST</I> = 2, 3</SPAN>.<P>Let <SPAN CLASS="MATH"><I>p</I></SPAN> be a prime equal to 1 modulo 4. The Paley graph <SPAN CLASS="MATH"><I>Q</I><SUB>p</SUB></SPAN> is defined as a circular graph on the vertex set <SPAN CLASS="MATH"><I>Z</I><SUB>p</SUB> = {0,..., <I>p</I> - 1}</SPAN> with<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>DIST</I> = {<I>d</I> | there exists <I>i</I> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2854img1.gif ALT="$\displaystyle \in$"> <I>Z</I><SUB>p</SUB>, such that <I>i</I> <IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2854img1.gif ALT="$\displaystyle \neq$"> 0 and <I>d</I> = <I>i</I><SUP>2</SUP> mod<I>p</I>}</DIV><P></P><P>For example, the Paley graph <SPAN CLASS="MATH"><I>Q</I><SUB>13</SUB></SPAN> has <SPAN CLASS="MATH"><I>DIST</I> = {1, 3, 4, 9, 10, 12}</SPAN>, and the maximum complete subgraphs in <SPAN CLASS="MATH"><I>Q</I><SUB>13</SUB></SPAN> have 3 vertices. Equivalently, <SPAN CLASS="MATH"><I>Q</I><SUB>13</SUB></SPAN> has triangles but no complete subgraphs on 4 vertices. A maximum complete subgraph is formed by a subset of vertices, such that every vertex is connected to every other.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Write a program that reads single lines of input that contain an integer <SPAN CLASS="MATH"><I>p</I></SPAN>, where <SPAN CLASS="MATH"><I>p</I></SPAN> is an odd prime less than 1000 of the form <SPAN CLASS="MATH"><I>p</I> = 4<I>k</I> + 1</SPAN><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Output</A>&nbsp;</FONT></H2>For each line read, your program should output the number of vertices in the maximum complete subgraph in the Paley graph <SPAN CLASS="MATH"><I>Q</I><SUB>p</SUB></SPAN>.<P>Your program doesn't need to check if the input <SPAN CLASS="MATH"><I>p</I></SPAN> is an odd prime of the form <SPAN CLASS="MATH">4<I>k</I> + 1</SPAN>. You can also assume that your program will work only with graphs for which the maximum number of vertices in any complete subgraph is no larger than 15.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5
229
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2
9
</PRE><P>
______________________________________________________
2855||||||false||||||
<P>A typical railroad switchyard consists of a number of parallel tracks filled with all sorts of cars. One of the basic operations of the switchyard is to take specific cars from the parallel tracks and assemble them into a complete train. In this program you are to write a program that simulates the actions of a switchyard operator.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets separated by a blank line. The first line of each dataset will contain a single integer, <SPAN CLASS="MATH"><I>N</I></SPAN>, that specifies the number of tracks in the switchyard. The next <SPAN CLASS="MATH"><I>N</I></SPAN> input lines will contain at least one identifier, where an identifier consists of a sequence of one of more letters and/or digits. If a line contains more than one identifier, one or more white space characters will separate each identifier. The first identifier on the line specifies the name of the track, and the remaining identifiers (if any) specify the names of the cars on the track. The order of the cars in the input specifies the order of the cars on the corresponding track; the second identifier on the line is the leftmost car on the track, and the last identifier is the rightmost car on the track. You may assume that the track names are unique.<P>Lines following the switchyard description specify an arbitrary number of commands. Each command takes one input line. One or more white space characters separate each item in the command. In the table below, <SPAN CLASS="MATH"><I>number</I> - <I>of</I> - <I>cars</I></SPAN> is a signed integer value, and <SPAN CLASS="MATH"><I>track</I> - <I>name</I></SPAN> is an identifier as defined above.<P>The switchyard operator understands the following commands:<P align=center><img src=p2855a.gif><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program will print the sequence of cars assembled into the train once all input has been processed. Note that processing stops as soon as the `<TT>end</TT>' command is entered <EM>or</EM> an impossible command is detected.<P>If the program successfully processes all commands, it will print out the number of cars on the final train and the contents of the final train. If an attempt is made to execute an invalid command, the program will display the message `<TT>Illegal command</TT>' and terminate.<p>Print a blank line after each dataset.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
t0 a b c
t0 left 1
t0 right 2
end

1
t0 a b c
t0 right 4
end
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
The train has 3 cars
a c b

Illegal command
</PRE><P>
______________________________________________________
2856||||||false||||||
<P>Jawbreaker is played on an <SPAN CLASS="MATH"><I>N</I></SPAN> by <SPAN CLASS="MATH"><I>N</I></SPAN> matrix filled with single letters. The objective of the game is to clear as many letters off the board as possible.<P>A move consists of selecting a letter position that has at least one equal letter as a horizontal or vertical neighbor. The selected letter and all equal letters that touch vertically or horizontally (but not diagonally) are removed from the board. Letters slide down in each column to take up the empty positions. If a column is empty, the columns to the left slide over to the right.<P>You are to write a program that will play Jawbreaker.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line of input presented to your program will contain the integer <SPAN CLASS="MATH"><I>N</I></SPAN>. The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines of input will each contain exactly <SPAN CLASS="MATH"><I>N</I></SPAN> characters and will specify the characters in the matrix.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The program will determine a sequence of moves required to remove the most characters from the matrix. The output from the program will be the minimal number of characters remaining after playing the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
AAAA
BBBB
BBCB
BBBB
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
</PRE><P>
______________________________________________________
2857||||||false||||||
<P>Boudreaux and Thibodeaux are on the road again . . .<P><P><BR>"Boudreaux, we have to get this shipment of mudbugs to Baton Rouge by tonight!"<P><P><BR>"Don't worry, Thibodeaux, I already checked ahead. There are three underpasses and our 18-wheeler will fit through all of them, so just keep that motor running!"<P><P><BR>"We're not going to make it, I say!"<P><P><BR>So, which is it: will there be a very messy accident on Interstate 10, or is Thibodeaux just letting the sound of his own wheels drive him crazy?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a single data set. The data set will be formatted according to the following description.<P>The data set will consist of a single line containing 3 numbers, separated by single spaces. Each number represents the height of a single underpass in inches. Each number will be between 0 and 300 inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There will be exactly one line of output. This line will be:<P><P><BR><TT>NO CRASH</TT><P><P><BR>if the height of the 18-wheeler is less than the height of each of the underpasses, or:<P><P><BR><TT>CRASH <SPAN CLASS="MATH"><I>X</I></SPAN></TT><P><P><BR>otherwise, where <SPAN CLASS="MATH"><I>X</I></SPAN> is the height of the first underpass in the data set that the 18-wheeler is unable to go under (which means its height is less than <SPAN CLASS="textbf">or equal to</SPAN> the height of the 18-wheeler).<P>The height of the 18-wheeler is 168 inches.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
180 160 170
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
CRASH 160
</PRE><P>
______________________________________________________
2858||||||false||||||
<P>Aliasing is the stair-step effect achieved when attempting to represent a smooth curve using a finite number of discrete pixels. Of course, all computer displays consist of a finite number of pixels, and many strategies have been devised to smooth the jagged edges with varying degrees of success.<P>Boudreaux and Thibodeaux are writing video game rendering software for the next big first-person shooter, and they don't know much about any of the progress made in the field of anti-aliasing. Therefore, they've decided to use a very simplistic (and visually unappealing) method to smooth the ragged edges. Unfortunately, it blurs the entire image, but at least it gets rid of those jaggies!<P>Normally, the game displays in <SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN> pixels, but they perform an extra anti-aliasing step that converts that image into an <SPAN CLASS="MATH">(<I>m</I> - 1)&#215;(<I>n</I> - 1)</SPAN> image. Nobody will notice a pixel missing from each dimension, and they can calculate the new pixels by averaging squares of 4 pixels from the original image (and rounding down). For example, the images below represent the original image (left) and the anti-aliased image (right) using numbers to represent varying shades of black and white.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2858.jpg ALT="\epsfbox{p2858.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be <B>no blank lines</B> separating data sets.<P>A single data set has 3 components:<P><OL><LI><EM>Start line</EM> - A single line:<P><TT>START <SPAN CLASS="MATH"><I>R</I></SPAN> <SPAN CLASS="MATH"><I>C</I></SPAN></TT><P>where <SPAN CLASS="MATH"><I>R</I></SPAN> and <SPAN CLASS="MATH"><I>C</I></SPAN> are integers ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2858.jpg ALT="$ \le$">(<I>R</I>, <I>C</I>)<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2858.jpg ALT="$ \le$">9</SPAN>) indicating the number of rows and columns in the input image described by this data set. </LI><LI><EM>Original Image</EM> - A series of <SPAN CLASS="MATH"><I>R</I></SPAN> lines, each of which contains <SPAN CLASS="MATH"><I>C</I></SPAN> integers from 0 to 9 inclusive. These integers represent the grayscale value of a pixel in the original image and will not be separated by spaces. </LI><LI><EM>End line</EM> - A single line:<P><TT>END</TT> </LI></OL><P>After the last data set, there will be a single line:<P><P><BR><TT>ENDOFINPUT</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output will be the anti-aliased image, which will be <SPAN CLASS="MATH"><I>R</I> - 1</SPAN> rows, each with <SPAN CLASS="MATH"><I>C</I> - 1</SPAN> integer pixel values. Each pixel in the output will be generated by averaging (and rounding down) the grayscale pixel values of the corresponding square of four pixels in the Original Image.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
START 2 2
00
00
END
START 2 9
012345678
012345678
END
START 4 4
4440
4400
4000
0000
END
START 9 9
900000009
090000090
009000900
000909000
000090000
000909000
009000900
090000090
900000009
END
ENDOFINPUT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
01234567
431
310
100
42000024
24200242
02422420
00244200
00244200
02422420
24200242
42000024
</PRE><P>
______________________________________________________
2859||||||false||||||

<P>
Thibodeaux has managed to once again lock himself inside his own house (this
happens all too often). Boudreaux, being the good buddy that he is, has taken
the precaution of scattering keys to the locked rooms throughout Thibodeaux's
house. It is up to you to determine if Thibodeaux can make it to his bedroom
(room 0).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to this problem will consist of a (non-empty) series of up to
100 data sets. Each data set will be formatted according to the
following description, and there will be <SPAN  CLASS="textbf">no blank lines</SPAN> separating data
sets.

<P>
A single data set has 4 components:

<P>

<OL>
<LI><SPAN  CLASS="textit">Start line</SPAN> - A single line:

<P>
<TT>START</TT> <SPAN CLASS="MATH"><I>M</I></SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN>

<P>
where <SPAN CLASS="MATH"><I>M</I></SPAN> indicates the starting room, and <SPAN CLASS="MATH"><I>N</I></SPAN> indicates the
      number of rooms in the house <!-- MATH
 $(1 \le N \le 20)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2859img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2859img1.png
 ALT="$ \le$">20)</SPAN>.

<P>
</LI>
<LI><SPAN  CLASS="textit">Room list</SPAN> - A series of <SPAN CLASS="MATH"><I>N</I></SPAN> lines. Each line lists, for a
      single room, every door that leads to a room of higher number and the keys
      necessary to open the door from either side.  Rooms will be represented by
      numbers and each key will be represented by a single capital letter 
      (<TT>A</TT> - <TT>Z</TT>).  For example, if room 3 had doors to rooms
      1, 5, and 7, and the door to room 1
      took an `<TT>A</TT>' key, the door to room 5 took an `<TT>F</TT>'
      key, and the door to room 7 took an `<TT>X</TT>' key and a
      `<TT>P</TT>' key, the line for room 1 would read:

<P>
<TT>3A</TT>

<P>
and the line for room 3 would read:

<P>
<TT>5F 7PX</TT>

<P>
The first line in the list represents room 0. The second line
      represents room 1, and so on until the last line, which
      represents room <SPAN CLASS="MATH"><I>N</I> - 1</SPAN>. It is possible for lines to be empty
      (in particular, the last line will always be empty since it is the highest
      numbered room). On each line, the adjacent rooms are always listed in
      ascending order. It is possible for rooms to be connected by multiple
      doors and for doors to require multiple keys; required keys for a door
      will be listed in alphabetical order.
</LI>
<LI><SPAN  CLASS="textit">Key list</SPAN> - A series of <SPAN CLASS="MATH"><I>N</I></SPAN> lines.  Each line lists, for a
      single room, the keys, in alphabetical order, that are in that room.
</LI>
<LI><SPAN  CLASS="textit">End line</SPAN> - A single line:

<P>
<TT>END</TT>
</LI>
</OL>

<P>
After the last data set, there will be a single line:

<P>

<P>
<BR>

<TT>ENDOFINPUT</TT>

<P>

<P>
<BR>

<B>Notes:</B>

<UL>
<LI>There will be no more than 100 doors in any data set.
</LI>
<LI>No room will have more than 20 doors.
</LI>
<LI>Some doors may not require keys.
</LI>
<LI>In any data set, all keys are unique and can be used multiple times.
</LI>
</UL>   

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each data set, there will be exactly one line of output. If it is possible
for Thibodeaux to reach his bedroom (room 0), print a line:

<P>

<P>
<BR>

<TT>YES</TT>

<P>

<P>
<BR>
Otherwise, print a line:

<P>

<P>
<BR>

<TT>NO</TT>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
START 1 2
1A


A
END
START 1 5
1F
2A 2B 3CD 3E




B
C D
F
A E
END
START 1 10
9I
2A
3B
4C
5D
6E
7F
8G
9H


A
B
C
D
E
F
G
H
X
END
ENDOFINPUT
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
YES
YES
NO
</PRE> 

<P>

______________________________________________________
2860||||||false||||||

<P>
Boudreaux reached over and shook awake Thibodeaux, who had dozed off somewhere
in New Mexico.  ``Where we at?" Thibodeaux groggily yawned.

<P>

<P>
<BR>
``Not in Vegas, I gua-ran-tee, but could you get my knapsack?" Boudreaux asked,
gesturing to the worn, leather backpack in the back seat of their cherry red
Ford Miata.

<P>

<P>
<BR>
``Why, is there a problem?"

<P>

<P>
<BR>
``Just hand me my knapsack, problem or not."

<P>

<P>
<BR>
Thibodeaux complied, glancing up as Boudreaux slowed the car to a stop in a line
of vehicles approaching a toll booth.  ``$1.65 - Exact change only," Thibodeaux
read the yellow sign on the front of a small wooden building occupied by a lone
toll booth operator.  ``I have to get $1.65 in exact change?" Thibodeaux asked,
digging through the knapsack, ``all I have are ten quarters, four dimes, and
three pennies.  I don't have any nickels . . ."

<P>

<P>
<BR>
``Just give me five of the quarters and the four dimes," Boudreaux replied,
holding out his hand.

<P>

<P>
<BR>
``Oh yeah," Thibodeaux said, handing over the coins, ``that does add up to $1.65.
I wish there were an easy way to figure out if you have an exact monetary
amount, given a set of coins."

<P>

<P>
<BR>
``Hmmm," Boudreaux shrugged, ``sounds like a good programming problem."

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to this problem will consist of a (non-empty) series of up to 100
data sets.  Each data set will be formatted according to the following
description, and there will be <SPAN  CLASS="textbf">no blank lines</SPAN> separating data sets.

<P>
A single data set has 1 component:

<P>

<OL>
<LI><SPAN  CLASS="textit">Start line</SPAN> - A single line:

<P>
<!-- MATH
 $A \ B \ C \ D \ E$
 -->
<SPAN CLASS="MATH"><I>A</I>&nbsp;<I>B</I>&nbsp;<I>C</I>&nbsp;<I>D</I>&nbsp;<I>E</I></SPAN>

<P>
where:
      
<UL>
<LI><SPAN CLASS="MATH"><I>A</I></SPAN>: <!-- MATH
 $(0.01 \le A \le 5.00)$
 -->
<SPAN CLASS="MATH">(0.01<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2860img1.png
 ALT="$ \le$"><I>A</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2860img1.png
 ALT="$ \le$">5.00)</SPAN> is a decimal number
            (to two decimal places) of a monetary amount.
</LI>
<LI><SPAN CLASS="MATH"><I>B</I></SPAN>: <!-- MATH
 $(0 \le B \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2860img1.png
 ALT="$ \le$"><I>B</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2860img1.png
 ALT="$ \le$">100)</SPAN> is an integer number of
            quarters (one quarter = $0.25).
</LI>
<LI><SPAN CLASS="MATH"><I>C</I></SPAN>: <!-- MATH
 $(0 \le C \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2860img1.png
 ALT="$ \le$"><I>C</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2860img1.png
 ALT="$ \le$">100)</SPAN> is an integer number of
            dimes (one dime = $0.10).
</LI>
<LI><SPAN CLASS="MATH"><I>D</I></SPAN>: <!-- MATH
 $(0 \le D \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2860img1.png
 ALT="$ \le$"><I>D</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2860img1.png
 ALT="$ \le$">100)</SPAN> is an integer number of
            nickels (one nickel = $0.05).
</LI>
<LI><SPAN CLASS="MATH"><I>E</I></SPAN>: <!-- MATH
 $(0 \le E \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2860img1.png
 ALT="$ \le$"><I>E</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/2860img1.png
 ALT="$ \le$">100)</SPAN> is an integer number of
            pennies (one penny = $0.01).
       
</LI>
</UL>
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, there will be exactly one line of output.  If there exists
one or more subsets of the given coins whose values add up to the given monetary
amount exactly, the output will be a single line in the form:

<P>

<P>
<BR>

   <!-- MATH
 $A \ B \ C \ D$
 -->
<SPAN CLASS="MATH"><I>A</I>&nbsp;<I>B</I>&nbsp;<I>C</I>&nbsp;<I>D</I></SPAN>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>A</I></SPAN> is the number of quarters, <SPAN CLASS="MATH"><I>B</I></SPAN> is the number of dimes,
<SPAN CLASS="MATH"><I>C</I></SPAN> is the number of nickels, and <SPAN CLASS="MATH"><I>D</I></SPAN> is the number of pennies,
for the subset with the fewest number of coins.  Otherwise, the output will be
a single line with the statement:

<P>

<P>
<BR>

   <TT>NO EXACT CHANGE</TT>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0.45 2 1 1 4
0.75 3 7 1 75
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
NO EXACT CHANGE
3 0 0 0
</PRE>

<P>

______________________________________________________
2861||||||false||||||
<P>Boudreaux and Thibodeaux are just returning from watching <SPAN CLASS="textit">Finding Nemo</SPAN> and are finding themselves pretty hungry after watching all those fish swim around for a couple of hours. Like the true Cajuns that they are, they jump into their pickup and head on over to the local bayou. Upon arriving Boudreaux realizes that in their mad hunger rush, they have completely forgotten their fishing poles and tackle. Boudreaux yells out to Thibodeaux, "Hey couyon, you forgot about dem poles!" and Thibodeaux replies "Don't worry, I got me some fish sticks out in the truck." Boudreaux later finds out that "fish sticks" are really dynamite, to which he replies "Mais fool, now how you suppose we gonna know where to place dem sticks to catch some fish?" at which point Thibodeaux then breaks out his fish finder and laptop and whips up a program that will tell them just that.<P><P><BR>Given the position of all the fish in the bayou and the spot Boudreaux and Thibodeaux want to drop their dynamite (after lighting the fuses of course), you are to write a program that will tell how many fish they will kill, ahem, I mean catch. Each dynamite stick has a certain fuse length that determines at which depth it will blow up. Any fish within a one unit radius of the dynamite when it blows up is as good as fish fried. Keep in mind that the fish never move from their location, and the dynamite sticks fall straight to the bottom of the bayou.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be <SPAN CLASS="textbf">no blank lines</SPAN> separating data sets.<P>A single data set has 4 components:<P><OL><LI><SPAN CLASS="textit">Start Line</SPAN> - A single line:<P><TT>START</TT> <SPAN CLASS="MATH"><I>L</I></SPAN> <SPAN CLASS="MATH"><I>W</I></SPAN> <SPAN CLASS="MATH"><I>D</I></SPAN><P>where <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$">(<I>L</I>, <I>W</I>, <I>D</I>)<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$">20)</SPAN>. <SPAN CLASS="MATH"><I>L</I></SPAN> is the length of the bayou along the <SPAN CLASS="MATH"><I>x</I></SPAN>-axis, <SPAN CLASS="MATH"><I>W</I></SPAN> is the width of the bayou along the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis, and <SPAN CLASS="MATH"><I>D</I></SPAN> is the depth of the bayou on the <SPAN CLASS="MATH"><I>z</I></SPAN>-axis.<P></LI><LI><SPAN CLASS="textit">Dynamite List</SPAN> - A single line containing a space-separated list of 1 to 10 data elements. Each element contains the location and fuse length of a single stick of dynamite as it is dropped into the bayou formatted as:<P><SPAN CLASS="MATH"><I>x</I></SPAN>,<SPAN CLASS="MATH"><I>y</I></SPAN>,<SPAN CLASS="MATH"><I>f</I></SPAN><P><SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> give the surface coordinates of the drop where <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>L</I>)</SPAN> and <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>W</I>)</SPAN>. <SPAN CLASS="MATH"><I>f</I></SPAN> is the length of the fuse and is in the range <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>f</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$">30)</SPAN>. <P></LI><LI><SPAN CLASS="textit">Fish List</SPAN> - A single line containing a space-separated list of 1 to 15 data elements. Each element represents the location of a fish in the bayou formatted as:<P><SPAN CLASS="MATH"><I>x</I></SPAN>,<SPAN CLASS="MATH"><I>y</I></SPAN>,<SPAN CLASS="MATH"><I>z</I></SPAN><P>where <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>L</I>)</SPAN>, <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>W</I>)</SPAN>, and <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>z</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$"><I>D</I>)</SPAN>, where <SPAN CLASS="MATH"><I>z</I> = 0</SPAN> indicates the fish is at the surface of the water.<P></LI><LI><SPAN CLASS="textit">End line</SPAN> A single line:<P><TT>END</TT> </LI></OL><P><P><BR>After the last data set, there will be a single line:<P><P><BR><TT>ENDOFINPUT</TT><P><P><BR><B>Note:</B><UL><LI>All numeric values will be given as integers. </LI><LI>The dynamite drops at a constant speed from the top of the bayou <SPAN CLASS="MATH">(<I>z</I> = 0)</SPAN>. </LI><LI>The fuse burns up one unit of its length in precisely the amount of time it takes the dynamite to sink one unit deeper into the bayou. </LI><LI>If the dynamite reaches the bottom of the bayou before the fuse runs out, it will stay there until it detonates. </LI><LI>Multiple fish will not occupy the same position. </LI><LI>Fish are killed if their distance from any dynamite explosion is <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2861img1.png ALT="$ \le$">1</SPAN>. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, there will be exactly one line of output. The output will be a phrase stating how much fish Boudreaux and Thibodeaux will be frying up tonight.<P>If they blow up at least one fish, the following phrase will be printed:<P><P><BR><TT>AIEE, I got <SPAN CLASS="MATH"><I>N</I></SPAN> fish, me!</TT><P><P><BR>where <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of fish blown up. If they don't blow up any fish, the following phrase will be printed:<P><P><BR><TT>None of dem fish blowed up!</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
START 5 5 5
1,1,1 2,2,2 3,3,3
4,3,0 4,4,4 3,0,2 2,1,3 3,3,3
END
START 2 3 4
1,1,10 1,1,1 0,2,2
0,0,1
END
ENDOFINPUT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
AIEE, I got 1 fish, me!
None of dem fish blowed up!
</PRE><P>
______________________________________________________
2862||||||false||||||
<P>Boudreaux and Thibodeaux aren't very good at math, so they need you to write a program that can determine the second degree polynomial used to generate a given sequence of three integers. As proof that you've figured out the polynomial, they want your program to print out the next 3 integers in the sequence.<P><P><BR>You know that each sequence is generated by a polynomial of the form <SPAN CLASS="MATH"><I>f</I> (<I>x</I>) = <I>Ax</I><SUP>2</SUP> + <I>Bx</I> + <I>C</I></SPAN>, where <SPAN CLASS="MATH"><I>A</I></SPAN>, <SPAN CLASS="MATH"><I>B</I></SPAN>, and <SPAN CLASS="MATH"><I>C</I></SPAN> are integers in the range <SPAN CLASS="MATH">(- 10<SUP>3</SUP><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2862img1.png ALT="$ \le$">(<I>A</I>, <I>B</I>, <I>C</I>)<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2862img1.png ALT="$ \le$">10<SUP>3</SUP>)</SPAN>. You are given the values <SPAN CLASS="MATH"><I>f</I> (0)</SPAN>, <SPAN CLASS="MATH"><I>f</I> (1)</SPAN>, <SPAN CLASS="MATH"><I>f</I> (2)</SPAN> and are to determine the values <SPAN CLASS="MATH"><I>f</I> (3)</SPAN>, <SPAN CLASS="MATH"><I>f</I> (4)</SPAN>, <SPAN CLASS="MATH"><I>f</I> (5)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be <SPAN CLASS="textbf">no blank lines</SPAN> separating data sets.<P>Each data set consists of a single line containing the space-separated integer values of the polynomial evaluated at 0, 1, and 2 (in that order). These values will be in the range <SPAN CLASS="MATH">(- 10<SUP>3</SUP><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2862img1.png ALT="$ \le$">(<I>f</I> (0), <I>f</I> (1), <I>f</I> (2))<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2862img1.png ALT="$ \le$">10<SUP>3</SUP>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, there will be exactly one line of output containing the space-separated integer values of the polynomial evaluated at 3, 4, and 5 (in that order). These values will be in the range <SPAN CLASS="MATH">(- 10<SUP>4</SUP><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2862img1.png ALT="$ \le$">(<I>f</I> (3), <I>f</I> (4), <I>f</I> (5))<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2862img1.png ALT="$ \le$">10<SUP>4</SUP>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0 0
1 1 1
1 2 3
0 1 4
0 2 8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 0 0
1 1 1
4 5 6
9 16 25
18 32 50
</PRE><P>
______________________________________________________
2863||||||false||||||
<P>Boudreaux and Thibodeaux are student volunteers for this year's ACM South Central Region's programming contest. One of their duties is to distribute the contest T-shirts to arriving teams. The T-shirts had to be ordered in advance using an educated guess as to how many shirts of each size should be needed. Now it falls to Boudreaux and Thibodeaux to determine if they can hand out T-shirts to all the contestants in a way that makes everyone happy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be <SPAN CLASS="textbf">no blank lines</SPAN> separating data sets.<P>A single data set has 4 components:<P><OL><LI><SPAN CLASS="textit">Start line</SPAN> - A single line:<P><TT>START</TT> <SPAN CLASS="MATH"><I>X</I></SPAN><P>where <!-- MATH
 $(1 < X < 20)$
 --><SPAN CLASS="MATH">(1 &lt; <I>X</I> &lt; 20)</SPAN> is the number of contestants demanding shirts. </LI><LI><SPAN CLASS="textit">Tolerance line</SPAN> - A single line containing <SPAN CLASS="MATH"><I>X</I></SPAN> space-separated pairs of letters indicating the size tolerances of each contestant. Valid size letters are <TT>S</TT> - small, <TT>M</TT> - medium, <TT>L</TT> - large, <TT>X</TT> - extra large, <TT>T</TT> - extra extra large. Each letter pair will indicate the range of sizes that will satisfy a particular contestant. The pair will begin with the smallest size the contestant will accept and end with the largest. For example:<P><TT>MX</TT><P>would indicate a contestant that would accept a medium, large, or extra large T-shirt. If a contestant is very picky, both letters in the pair may be the same. </LI><LI><SPAN CLASS="textit">Inventory line</SPAN> - A single line:<P><SPAN CLASS="MATH"><I>S</I></SPAN> <SPAN CLASS="MATH"><I>M</I></SPAN> <SPAN CLASS="MATH"><I>L</I></SPAN> <SPAN CLASS="MATH"><I>X</I></SPAN> <SPAN CLASS="MATH"><I>T</I></SPAN><P>indicating the number of each size shirt in Boudreaux and Thibodeaux's inventory. These values will be between 0 and 20 inclusive. </LI><LI><SPAN CLASS="textit">End line</SPAN> - A single line:<P><TT>END</TT> </LI></OL><P><P><BR>After the last data set, there will be a single line:<P><P><BR><TT>ENDOFINPUT</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, there will be exactly one line of output. This line will reflect the attitude of the contestants after the T-shirts are distributed. If all the contestants were satisfied, output:<P><P><BR><TT>T-shirts rock!</TT><P><P><BR>Otherwise, output:<P><P><BR><TT>I'd rather not wear a shirt anyway...</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
START 1
ST
0 0 1 0 0
END
START 2
SS TT
0 0 1 0 0
END
START 4
SM ML LX XT
0 1 1 1 0
END
ENDOFINPUT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
T-shirts rock!
I'd rather not wear a shirt anyway...
I'd rather not wear a shirt anyway...
</PRE><P>
______________________________________________________
2864||||||false||||||
<P>Boudreaux likes to multitask, especially when it comes to using his computer. Never satisfied with just running one application at a time, he usually runs nine applications, each in its own window. Due to limited screen real estate, he overlaps these windows and brings whatever window he currently needs to work with to the foreground. If his screen were a <SPAN CLASS="MATH">4&#215;4</SPAN> grid of squares, each of Boudreaux's windows would be represented by the following <SPAN CLASS="MATH">2&#215;2</SPAN> windows:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2864a.jpg ALT="\epsfbox{p2864a.eps}"></DIV><P>When Boudreaux brings a window to the foreground, all of its squares come to the top, overlapping any squares it shares with other windows. For example, if window 1 <SPAN CLASS="textit">and then</SPAN> window 2 were brought to the foreground, the resulting representation would be:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2864a.jpg ALT="\epsfbox{p2864b.eps}"></DIV><P>If window 4 were then brought to the foreground:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/p2864a.jpg ALT="\epsfbox{p2864c.eps}"></DIV><P>. . . and so on . . .<P><P><BR>Unfortunately, Boudreaux's computer is very unreliable and crashes often. He could easily tell if a crash occurred by looking at the windows and seeing a graphical representation that should not occur if windows were being brought to the foreground correctly. And this is where you come in . . .<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be <SPAN CLASS="textbf">no blank lines</SPAN> separating data sets.<P>A single data set has 3 components:<P><OL><LI><SPAN CLASS="textit">Start line</SPAN> - A single line:<P><TT>START</TT><P></LI><LI><SPAN CLASS="textit">Screen Shot</SPAN> - Four lines that represent the current graphical representation of the windows on Boudreaux's screen. Each position in this <SPAN CLASS="MATH">4&#215;4</SPAN> matrix will represent the current piece of window showing in each square. To make input easier, the list of numbers on each line will be delimited by a single space. </LI><LI><SPAN CLASS="textit">End line</SPAN> - A single line:<P><TT>END</TT> </LI></OL><P><P><BR>After the last data set, there will be a single line:<P><P><BR><TT>ENDOFINPUT</TT><P><P><BR>Note that each piece of visible window will appear only in screen areas where the window could appear when brought to the front. For instance, a 1 can only appear in the top left quadrant.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, there will be exactly one line of output. If there exists a sequence of bringing windows to the foreground that would result in the graphical representation of the windows on Boudreaux's screen, the output will be a single line with the statement:<P><P><BR><TT>THESE WINDOWS ARE CLEAN</TT><P><P><BR>Otherwise, the output will be a single line with the statement:<P><P><BR><TT>THESE WINDOWS ARE BROKEN</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
START
1 2 3 3
4 5 6 6
7 8 9 9
7 8 9 9
END
START
1 1 3 3
4 1 3 3
7 7 9 9
7 7 9 9
END
ENDOFINPUT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
THESE WINDOWS ARE CLEAN
THESE WINDOWS ARE BROKEN
</PRE><P>
______________________________________________________
2865||||||false||||||
<p>Most bicycle speedometers work by using a Hall Effect sensor fastened to the front fork of the bicycle. A magnet is attached to one of the spokes on the front wheel so that it will line up with the Hall Effect switch onc e per revolution of the wheel. The speedometer monitors the sensor to count wheel revolutions. If the diameter of the wheel is known, the distance traveled can be easily be calculated if you know how many revolutions the wheel has made. In addition, if the time it takes to complete the revolutions is known, the average speed can also be calculated.</p><p>For this problem, you will write a program to determine the total distance traveled (in miles) and the average speed (in Miles Per Hour) given the wheel diameter, the number of revolutions and the total time of the trip. You can assume that the front wheel never leaves the ground, and there is no slipping or skidding.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input consists of multiple datasets, one per line, of the form:</p><p>diameter revolutions time</p><p>The diameter is expressed in inches as a floating point value. The revolutions is an integer value. The time is expressed in seconds as a floating point value. Input ends when the value of revolutions is 0 (zero).</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each data set, print:</p><pre>
Trip #N: distance MPH
</pre><p>Of course N should be replaced by the data set number, distance by the total distance in miles (accurate to 2 decimal places) and MPH by the speed in miles per hour (accurate to 2 decimal places). Your program should not generate any output for the ending case when revolutions is 0.</p><b>Constants:</b><p>For p use the value: 3.1415927.<p>There are 5280 feet in a mile.<p>There are 12 inches in a foot.<p>There are 60 minutes in an hour.<p>There are 60 seconds in a minute.<p>There are 201.168 meters in a furlong.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
26 1000 5
27.25 873234 3000
26 0 1000
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
Trip #1: 1.29 928.20
Trip #2: 1179.86 1415.84
</pre><p>
______________________________________________________
2866||||||false||||||
<p>A number of students sit in a circle facing their teacher in the center. Each student initially has an even number of pieces of candy. When the teacher blows a whistle, each student simultaneously gives half of his or her candy to the neighbor on the right. Any student, who ends up with an odd number of pieces of candy, is given another piece by the teacher. The game ends when all students have the same number of pieces of candy.</p><p>Write a program which determines the number of times the teacher blows the whistle and the final number of pieces of candy for each student from the amount of candy each child starts with.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input may describe more than one game. For each game, the input begins with the number N of stude nts, followed by N (even) candy counts for the children counter-clockwise around the circle. The input ends with a student count of 0. Each input number is on a line by itself.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each game, output the number of rounds of the game followed by the amount of candy each child ends up with, both on one line.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
6
36
2
2
2
2
2
11
22
20
18
16
14
12
10
8
6
4
2
4
2
4
6
8
0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
15 14
17 22
4 8
</pre><b>Notes:</b><p>The game ends in a finite number of steps because:</p><ol><li>The maximum candy count can never increase. <li>The minimum candy count can never decrease. <li>No one with more than the minimum amount will ever decrease to the minimum. <li>If the maximum and minimum candy count are not the same, at least one student with the minimum amount must have their count increase</ol><p>
______________________________________________________
2867||||||false||||||
<p>You are given a 7 by 7 board of holes. Some holes are filled with pegs, and some are not. You may jump a peg over an adjacent peg, as long as the hole the jumping peg lands in is unoccupied. The jumped peg is removed. Your goal is to leave the board with only one peg in it, and the peg must end up in the specified location.</p><p>The board is specified as a 7 by 7 array of characters, with the following meanings:</p><ul><li>x: this hole may never be occupied by a peg <li>e: this hole is initially empty <li>o: this hole is initially ocuppied by a peg <li>E: this hole is initially empty, and the last peg should end here <li>O: this hole is initially ocuppied, and the last peg should end here</ul><p>For example, consider the following board:</p><pre>
x x e e e x x
x x o e e x x
e e o e e e e
e e o O e e e
e e e e e e e
x x e e e x x
x x e e e x x
</pre><p>You can see that there are initially 4 pegs in the board, and the last peg should end up in the middle of the board. The winning sequence of moves is:</p><ol><li>(4, 4) to (2, 4) <li>(3, 2) to (3, 4) <li>(2, 4) to (4, 4)</ol><p>Where coordinates are given as (x, y).</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of input is the number of datasets to follow. Each dataset should be processed the same.</p><p>The input for each dataset consists of 7 lines; each line consists of 7 characters from the set {x, e, o, E, O} with blanks between them. You are guaranteed that exactly one 'E' or 'O' will appear, and that two or more 'o' or 'O' will appear.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each dataset, output a line containing the data set number. If a sequence of valid moves exists that leaves only one peg on the board, and leaves that peg in the desired location, print out the sequence of moves, as shown in the above example. If no sequence exists, print "No solution". Leave a blank line between datasets.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
x x e e e x x
x x o e e x x
e e o e e e e
e e o O e e e
e e e e e e e
x x e e e x x
x x e e e x x

x x e E e e e
x e e e e e e
e e e o o e e
e e e x e e e
e e e e e e e
e e e e e e e
e e e e e e e
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
Dataset 1:
1. (4, 4) to (2, 4)
2. (3, 2) to (3, 4)
3. (2, 4) to (4, 4)

Dataset 2:
No solution.
</pre><p>
______________________________________________________
2868||||||false||||||
<p>In the land of Kalii lived a civilization not unlike our own. They had government, business, and technology. The only major difference was how tax rates were decided. You see, the people of Kalii loved to haggle. They haggled over everything including what percentage of their income went to the government coffers. When a Kalii family's tax contract was up they had to travel to the capital to haggle with government officals and hammer out a new deal. The contract would have a start date, an end date (for bookkeeping purposes the end day was always the 15th of the end month), and a tax rate. It was also traditional for a Kalii family to enjoy a short time period of tax free living between the end of the ir last contract and the start of the new one. This time period was a point to haggle over as well.</p>
<p>The land of Kalii was prosperous and very populous and, as a consequence, government officials were often overwhelmed with work. When a deal was agreed upon with a family, the officials would quickly write it down in shorthand and send it off to be processed. These scribbled notes had to be converted to XML format to be entered into their computer system. Sometimes the scribble was inconclusive and the family would have to be recalled to the capital for another round of haggling. This entire process was very inefficient but it was the way the people of Kalii had always done it and they were not about to change anytime soon.</p>
<p>Your job is to convert the scribblings of the officials into XML format.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>Input consists of multiple datasets, one per line. Each correct line contains three pieces of information:</p>

<ol>
<li> Tax rate
<ul>
 <li> A tax rate always has a `%' after it if it is a whole number (i.e. 5%).
 <li> A tax rate never has a decimal point in it.
 <li> A tax rate may contain a fraction but its denominator must only be a 2, 4, or 8.
 <li> A tax rate must have a numerator that is less than its denominator.
</ul>

<li> Contract End Date

<ul>
<li>A contract end date is a numerical representation of the month (one or two digits) and the last two digits of the year. The month and year may be separated by a single hyphen (i.e. 12 -05 or 1205 would refer to 15DEC05).
</ul>

<li>Contract Start Date
<ul>
<li>A contract start date is a numerical representation of the month (one or two digits) and a two-digit day of the month. The month and day may be separated by a single hyphen (i.e. 12-05 or 1205 would refer to 05DEC03).
<li>A contract start date must start on or after the current date. For example, the current year is 2003. If the start date is 305 it is assumed that the year the contract starts will be 2004.
</ul>
</ol>

<p>Note: There may be 0 or more spaces between each of the three fields.</p>
<p>Note: The Kalii calendar consists of the twelve months familiar to you, but all months have 31 days.</p>
<p>Note: The maximum tax rate is 99.875%</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each data set, print the correctly indented XML (4 spaces per indent level):</p>

<pre>
&lt;Kalii Index=N &gt; 
    &lt;startdate&gt;(start date)&lt;/startdate&gt;
    &lt;rate&gt;(tax rate)&lt;/rate&gt;
    &lt;enddate&gt;(end date)&lt;/enddate&gt;
&lt;/Kalii&gt;

</pre>

<p>N should be replaced by the data set number, (start date) by the start date, (tax rate) by the tax rate, and (end date) by the end date. If no output could be computed because of either bad or ambiguous data, simply print &lt;Kalii Index= N &gt;BAD DATA&lt;/Kalii&gt;, where N should be replaced by the data set number.</p>

<p>Note: The format for the start date is DDMMMYY. The format for the end date is 15MMMYY. Where DD is the zero-padded day of month (01-31), MMM is the month in upper-case letters (JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC), and YY is the zero-padded last 2 digits of the year (00-99).</p>
<p>Note: The tax rate should be accurate to 3 decimal places.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<pre>
25/850812-31
6% 02110122
6.75% 2-11 4-23
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
&lt;Kalii Index=1&gt;
    &lt;startdate&gt;31DEC03&lt;/startdate&gt;
    &lt;rate&gt;2.625&lt;rate&gt;
    &lt;enddate&gt;15MAY08&lt;/enddate&gt;
&lt;/Kalii&gt;
&lt;Kalii Index=2&gt;
    &lt;startdate&gt;22JAN04&lt;/startdate&gt;
    &lt;rate&gt;6.000&lt;/rate&gt;
    &lt;enddate&gt;15FEB11&lt;/enddate&gt; 
&lt;/Kalii&gt;
&lt;Kalii Index=3&gt;BAD DATA&lt;/Kalii&gt;
</pre>

<p>

______________________________________________________
2869||||||false||||||
<p>At the University of Kentucky, they build a lot of high-performance computer hardware and software, often using one supercomputer to design the next. One of the most fundamental computer design problems is logic optimization: making sure that the optimized logic still computes the same function as the original design.</p>

<p>For this problem, your program will be given two logic expressions to compare for logical equivalence.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The first line of the input consists of a positive int eger n, which is the number of datasets (lines) that follow. Each dataset consists of a single line containing the two input expressions to be tested. The input expressions consist of any of 26 variables named a-z, the binary operators |, &amp;, ^, (OR, AND and XOR respectively), the unary ~ (NOT), and parenthesis. The expressions should be evaluated ignoring all other characters and with operator precedence as in the C language (parenthesis, ~, &amp;, ^, |). The two expressions will be input in sequence and it is up to your program to determine where one expression ends and the next begins.</p>

<p>Most logic manipulation programs would convert each expression into a normal form and check if the two normalized expressions are identical. Fortunately for you, each expr ession will consist of no more than 100 operations using no more than 10 different variables. For that many cases, you can test for equivalence by simply evaluating the two input expressions for all possible inputs and comparing the results.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each data set, print:</p>

<pre>Data set N: Equivalent</pre>

<p>if the expressions produce the same result, or:</p>

<pre>Data set N: Different</pre>

<p>if they produce different results. Of course N should be replaced by the data set number.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>
3
a ^b&amp;(b|a)~b^ a
a^b&amp;(b|a)(a^(b&amp;(b|a)))
~~~~z~~z
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
Data set 1: Different
Data set 2: Equivalent
Data set 3: Equivalent
</pre>

<p>

______________________________________________________
2870||||||false||||||
<p>A board is a rectangular array of squares such as on a chessboard, with possibly some squares blocked off. A rook tour of a board is a path that visits each empty square of the board exactly once, moving at each step to an empty adjacent square (North, South, East or West but not diagonally). A rook tour is a rook circuit if it starts and ends on the same square. In the figures below, let the + symbol be the rook , and the X symbol be an obstruction. The following are descriptions of each figure: (a) is a board with no rook circuit, (b) and (c) give distinct rook circuits of the same board and (d) gives the unique (up to direction) rook circuit of another board.</p>

<center><img src=p2870.gif></center>

<p>Write a program, which takes as input the description of a board and either finds a rook circuit or determines that there is no rook circuit.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>Input consists of a sequence of board descriptions and starting points. The first line of the input is</p>

<pre>Nrows Ncols Nblocks StartX StartY</pre>

<p>where Nrows is the number of rows in the rectangular array, Ncols is the number of columns in the rectangular array, Nblocks is the number of blocked off squares on the board and (StartX, StartY) is the position on the board where the path is to start (and end). StartX and StartY are 0 based (StartX ranges from 0 to Ncols ­ 1). Following the first line there are Nblocks lines giving the coordinates of the blocked off squares, one per line. The coordinates of these points are 0 based and are of the form X Y. The final line of each board description is a blank line.</p>

<p>The last line of the input is line of 5 zeroes.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>If there is no rook circuit for the corresponding board, the output is a line "NO SOLUTION" followed by a blank line. Other wise, the output is a sequence of the letters N, S, E, W giving the moves from the starting point to traverse a rook circuit and return to the starting point. ( N indicates moving to the previous row, S moving to the next row, E moving to the next column and W moving to the previous column.) If more than 40 moves are required, the moves will be output 40 to a line (except possibly for the last line). The move output is to be followed by a blank line.</p>

<b>Some Facts:</b>
<ol>
<li>The Parity Principle . If we checker the squares of the array black and white (white if (x+y) is even, black if (x+y) is odd), each unit step in a rook circuit must go from a white square to a black square and vice versa. Thus any rook circuit must have the same number of white and black squares. Board (a) above has 8 white and 6 black unblocked squares so cannot have a rook circuit. 
<li>The Two Neighbor Principle . If a square has only two neighbors, then it must be visited via those neighbors. When a circuit gets to one of the neighbors, it must pas s next to the two -neighbor square and then to the other neighbor. In board (d), the (0,0), (3, 0), (0, 2), (1,3), (2,3), (3,3) and (3,2) squares each have two neighbors. Thus the path is forced to include (1,0)-(0,0) -(0,1)-(0,2) -(1,2)-(1,3) -(2,3)-(3,3) -(3,2)(3,1)-(3,0) -(2,0) in either order. 
<li>The Cul-de-Sac Principle. Never draw segments that leave a square with only one exit. 
<li>The Early Closing Principle . Never close a circuit until all squares have been visited.
</ol>


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>
4 4 2 0 0
1 2
3 0

4 4 0 2 2

4 4 0 0 0

4 4 2 1 2
0 3
2 2

8 8 0 0 0

0 0 0 0 0
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
NO SOLUTION

NENWWWSESWSEEENW

EEESWWSEESWWWNNN

WNNESENESSSWWN

EEEEEEESWWWWWWSEEEEEESWWWWWWSEEEEEESWWWW

WWSEEEEEESWWWWWWWNNNNNNN
</pre>

<p>
The first four boards and solutions correspond to the pictures in the figures above. Note that the same board may have several rook circuits. Your program need only find any one (correct) rook circuit.</p>

<p>

______________________________________________________
2871||||||false||||||
<P>The rhyme scheme for a poem (or stanza of a longer poem) tells which lines of the poem rhyme with which other lines. For example, a limerick such as</p><pre>If computers that you build are quantum
Then spies of all factions will want 'em
Our codes will all fail
And they'll read our email
`Til we've crypto that's quantum and daunt 'em</pre><p>Jennifer and Peter Shor ( http://www.research.att.com/~shor/notapoet.html)</p><p>Has a rhyme scheme of aabba , indicating that the first, second and fifth lines rhyme and the third and fourth lines rhyme.</p><p>For a poem or stanza of four lines, there are 15 possible rhyme schemes: aaaa, aaab, aaba, aabb, aabc, abaa, abab, abac, abba, abbb, abbc, abca, abcb, abcc, and abcd.</p><p>Write a program to compute the number of rhyme schemes for a poem or stanza of N lines where N is an input value.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input will consist of a sequence of integers N, one per line, ending with a 0 (zero) to indicate the end of the data. N is the number of lines in a poem.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each input integer N, your program should output the value of N, followed by a space, followed by the number of rhyme schemes for a poem with N lines.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
2
3
4
20
30
10
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1 1
2 2
3 5
4 15
20 51724158235372
30 846749014511809332450147
10 115975
</PRE><P>
______________________________________________________
2872||||||false||||||
<p>Given a positive integer n, let N be the set of integers from 1 to n. A finite sequence A<sub>1</sub>, ..., A<sub>k</sub> of subsets of N is fully diversified if:</p><ol><li>Each subset A<sub>i</sub> has an even number of elements. <li>For each element m in N, there are exactly m sets A<sub>i</sub> in the sequence with m as a member.</ol><p>For example, the sequence of subsets {1,3}, {2,3}, {2,3} is a fully diversified sequence of subsets of {1,2,3}. (Note that subsets in the sequence may be the same.)</p><p>A fully diversified sequence of subsets of N is minimal if no other fully diversified sequence of subsets of N has a smaller sequence count. The example above is minimal since the element 3 must occur in 3 different sets.</p><p>Write a program, which, given an integer n, determines whether there is a fully diversified sequence of subsets of the corresponding set N and, if there is a fully diversified sequence, finds a minimal fully diversified sequence of subsets of N.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input will be a sequence of positive integers n, one per line followed by a zero (0) (on another line) indicating the end of the input.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>If there is no fully diversified sequence of subsets of the corresponding set N, output a 0 on one line followed by a blank line. If there is a fully diversified sequence of subsets of the corresponding set N, output the number of sets in your minimal sequence on one line, followed by the sets, one per line, followed by a blank line. The elements of each set should be output in increasing order with a single space between numbers. The sets of sequences should be output in lexicographical order. There may be many possible solutions to each problem.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
8
9
11
17
0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
8 
1 3 5 6 7 8
2 4 5 6 7 8
2 4 5 6 7 8
3 4 5 6 7 8
3 4 5 6 7 8
6 8
7 8
7 8

0

11
1 5 7 8 9 11
2 5 7 8 10 11
2 5 7 8 10 11
3 5 7 9 10 11
3 6 7 9 10 11
3 6 7 9 10 11
4 6 8 9 10 11
4 6 8 9 10 11
4 6 8 9 10 11
4 6 8 9 10 11
5 7 8 9 10 11

0
</pre><p>
______________________________________________________
2873||||||false||||||
<p>Given a triangle ABC, the Extriangles of ABC are constructed as follows:</p><ul><li>On each side of ABC, construct a square ( ABDE, BCHJ and ACFG in the figure below). <li>Connect adjacent square corners to form the three Extriangles (AGD, BEJ and CFH in the figure).</ul><p>The Exomedians of ABC are the medians of the Extriangles , which pass through vertices of the original triangle, extended into the original triangle ( LAO, MBO and NCO in the figure. As the figure indicates, the three Exomedians intersect at a common point called the Exocenter (point O in the figure).</p><p>This problem is to write a program to compute the Exocenters of triangles.</p><center><img src=p2873.gif></center><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input consists of a positive integer n, which is the number of dat asets that follow. Each dataset consists of 3 lines; each line contains two floating point values which represent the (two -dimensional) coordinate of one vertex of a triangle. So, there are total of (n*3) + 1 lines of input. Note: All input triangles wi ll be strongly non-degenerate in that no vertex will be within one unit of the line through the other two vertices.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each dataset you must print out the coordinates of the Exocenter of the input triangle correct to four decimal places.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
0.0 0.0
9.0 12.0
14.0 0.0
3.0 4.0
13.0 19.0
2.0 -10.0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
9.0000 3.7500
-48.0400 23.3600
</pre><p>
______________________________________________________
2874||||||false||||||
<P>Let <img src="http://livearchive.onlinejudge.org/external/28/p2874a.gif> and note that <img src="http://livearchive.onlinejudge.org/external/28/p2874a.gif>.<p>Write a program that finds the minimum value n so that, for a given real value x and an integer d, we have that both <img src="http://livearchive.onlinejudge.org/external/28/p2874a.gif> and sin(x), rounded to d decimal places, coincide.<p>For example, given x=1 and d=5, then since:<blockquote>sin(1) <img src="http://livearchive.onlinejudge.org/external/28/p2874a.gif> 0.841470985 rounded to 5 decimal places is 0.84147, and<br><br><img src="http://livearchive.onlinejudge.org/external/28/p2874a.gif> rounded to 5 decimal places is 0.84147, but<br><br><img src="http://livearchive.onlinejudge.org/external/28/p2874a.gif> rounded to 5 decimal places is 0.84167,<br></blockquote><p>then 4 terms of the sum <img src="http://livearchive.onlinejudge.org/external/28/p2874a.gif>, (i.e., k=0, 1, 2, 3) are enough for approximating sin(1) to five decimal places. That is, the minimum value for n, in this case is 3.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Each line of an input text file contains two numbers x d. Process them until the end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each input line output a single integer n.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1 5
3.1416 7
-4 2
0 12
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
3
8
6
0
</PRE><P>
______________________________________________________
2875||||||false||||||
<P>A super-maze is a maze where any two cells are guaranteed to be connected by exactly one path, with no entries from or exits to the exterior. Write a program that reads super-mazes, displays them, and finds the path that takes from the upper-left corner to the lower-right.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file consists of various super-mazes to be processed. The definition of each maze begins with a line with two integers r and c (<img src="http://livearchive.onlinejudge.org/external/28/p2875a.gif>,<img src="http://livearchive.onlinejudge.org/external/28/p2875a.gif>) that represent the number of rows and columns in the maze, followed by r lines, each with c integers whose values are all between zero and three, inclusive. If <img src="http://livearchive.onlinejudge.org/external/28/p2875a.gif> or <img src="http://livearchive.onlinejudge.org/external/28/p2875a.gif>, it means no more mazes.<p>Each entry in this matrix represents the walls (or openings) of a cell to the right and bottom. An even value (0 and 2) represents a cell with a wall (no opening) to its right, while an odd value (1 and 3), a cell with no wall (an opening) to its right. Similarly, a low value (0 and 1) represents a cell with a wall (no opening) to its bottom, while a high value (2 and 3), a cell with no wall (an opening) to its bottom. Left and top walls (openings) of a cell can be determined by examining values in the corresponding adjacent cells.<p>Each entry in the input file is guaranteed to represent a super-maze.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each maze, display a line with the title "Super-maze k:", where k is a consecutive number starting from 1, followed by a graphical representation for the maze. Then, in the following line(s), the title "Solution:", followed by one space and a string composed of the characters R, L, U, D, (Right, Left, Up, Down) that represents a path for the solution. Put no more than 80 characters per line and leave a blank line between runs (see sample output).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 3
1 3 2 
1 2 0 
1 1 0 
4 7
2 2 3 0 3 3 2 
3 0 3 1 0 0 2 
1 3 3 0 3 0 2 
1 0 1 1 0 1 0 
15 15
3 0 2 3 3 0 2 1 1 2 2 1 1 3 0 
2 2 1 2 3 2 1 2 1 1 3 1 1 2 2 
3 1 1 2 0 3 3 3 2 2 0 3 0 3 0 
3 0 3 2 2 0 0 0 3 1 3 2 1 3 2 
0 2 2 3 0 1 1 3 3 0 2 3 0 2 0 
2 2 0 0 2 3 1 2 0 2 2 1 1 3 0 
2 2 2 3 1 3 0 0 2 1 0 1 2 2 2 
1 3 1 2 1 1 0 2 3 1 1 2 3 1 0 
1 3 0 2 2 1 1 2 2 3 2 0 1 0 2 
2 3 0 3 3 0 3 1 3 2 0 3 1 3 0 
3 1 0 0 1 0 0 2 0 3 1 3 2 3 0 
2 1 2 2 1 3 1 2 2 2 3 2 0 1 2 
1 3 1 3 0 2 1 1 3 0 0 3 2 3 0 
2 3 0 0 3 3 0 2 1 0 3 0 0 2 2 
1 1 1 1 0 1 1 0 1 1 0 1 1 1 0 
0 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT> </H2><PRE>
Super-maze 1:
+---+---+---+
|           |
+---+   +   +
|       |   |
+---+   +---+
|           |
+---+---+---+
Solution: RDDR
 
Super-maze 2:
+---+---+---+---+---+---+---+
|   |   |       |           |
+   +   +   +---+   +   +   +
|       |           |   |   |
+   +---+   +---+---+---+   +
|               |       |   |
+---+   +   +---+   +---+   +
|       |           |       |
+---+---+---+---+---+---+---+
Solution: DDRRURRURRDDD
 
Super-maze 3:
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|       |   |           |   |           |   |               |
+   +---+   +   +   +---+   +---+---+   +   +---+---+   +---+
|   |   |       |       |       |                       |   |
+   +   +---+   +   +   +---+   +---+---+   +---+---+   +   +
|               |   |               |   |   |       |       |
+   +---+---+   +---+   +   +   +   +   +---+   +---+   +---+
|       |       |   |   |   |   |               |           |
+   +---+   +   +   +---+---+---+   +---+   +   +---+   +   +
|   |   |   |       |                   |   |       |   |   |
+---+   +   +   +---+---+---+   +   +---+   +   +---+   +---+
|   |   |   |   |   |           |   |   |   |               |
+   +   +---+---+   +   +---+   +---+   +   +---+---+   +---+
|   |   |   |               |   |   |       |       |   |   |
+   +   +   +   +---+   +---+---+   +---+---+---+   +   +   +
|               |           |   |               |           |
+---+   +---+   +---+---+---+   +   +---+---+   +   +---+---+
|           |   |   |           |   |       |   |       |   |
+---+   +---+   +   +---+---+   +   +   +   +---+---+---+   +
|   |       |           |               |   |               |
+   +   +---+   +   +---+   +---+   +   +---+   +---+   +---+
|           |   |       |   |   |   |               |       |
+   +---+---+---+---+---+---+   +---+   +---+   +   +   +---+
|   |       |   |               |   |   |       |   |       |
+   +---+   +   +---+   +---+   +   +   +   +   +---+---+   +
|                   |   |               |   |       |       |
+---+   +---+   +---+   +---+---+   +---+---+   +   +   +---+
|   |       |   |           |   |       |       |   |   |   |
+   +   +---+---+   +   +---+   +---+---+   +---+---+   +   +
|                   |           |           |               |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
Solution: DDRRRUURDRDRRRDDLDLLDLLDLLDDDLDDRDDRRRURUURRDRRUURRURRDDRDLDDR
</PRE><P>
______________________________________________________
2876||||||false||||||
<P>Given a positive integer n followed by n pairs of positive six-digit integers a<sub>1</sub>,b<sub>1</sub>, a<sub>2</sub>,b<sub>2</sub>, ... , a<sub>n</sub>,b<sub>n</sub> with 10 > a<sub>i</sub> / b<sub>i</sub> > 1 for all i, write a program<blockquote>a) To determine for each pair a<sub>i</sub> and b<sub>i</sub> the first d<sub>o</sub>d<sub>1</sub>d<sub>2</sub> ... d<sub>199</sub> 200 digits of the decimal value of a<sub>i</sub> / b<sub>i</sub>.<br>b) To determine if the expansion is periodical, indicating the sequence of repeating digits.</blockquote><p>Hint: The sequence d<sub>o</sub>d<sub>1</sub>d<sub>2</sub> ... d<sub>m</sub> represents the desired decimal expansion. It is periodic if and only if for two values s and t (0 &lt;= s &lt;t &lt;= m) r(s) = r(t), where r(s) and r(t) are the remainders at steps s and t, then the sequence of digits d<sub>s</sub>, d<sub>s+1</sub>, d<sub>s+2</sub> ... d<sub>t-1</sub> is the sequence of repeating digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input is composed with the value n followed of n pairs of positive six-digit integers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output for each dataset consists of 2 lines: the pair of numbers that has been processed, and the result of the first 200 decimal digits with the sequence of repeating digits, if it is possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5
765432 654321
987621 654389
913423 143423
143428 120000
876564 653901
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
765432 654321
116981114773941230680354138106525696103288752768136740223835090116319
054409074445111802922418812784550702178288638145497393481181255072051
79109336243220070882640172025657131591374875634436308784220588
987621 654389
150922616364272626832052494769930423647096757433269813520704046064343
991112320042054496637321226365357608395006639781536670084613280479959
16801779981020463363534533740634393304288427831152418515592407
913423 143423
636873444287178486016887110156669432378349358192200693054809897994045
585436087656791449070232807848113621943481868319586119381131338767143
34520962467665576650885841183073844501927863731758504563424276
143428 120000
119523 sequence of repeating digits: 3
876564 653901
134051484857799575165047920097996485706551909233966609624392683296095
280478237531369427482141792106144508113613528653420013121252299660040
2813269898654383461716681883037 sequence of repeating digits: 3405148
485779957516504792009799648570655190923396660962439268329609528047823
753136942748214179210614450811361352865342001312125229966004028132698
98654383461716681883037
</PRE><P>
______________________________________________________
2877||||||false||||||
<P>The electric company is reconfiguring the electric distribution system in the farm. The engineer in charge is evaluating the feasibility to develop the project. The idea is to determinate the maximum number of electrification posts lined up in that zone to replace them by high voltage towers, the cost of the project depends exclusively of that number. He was hired to build a program to determinate it. The program input will be composed by the number n (5 <= n <= 100)
 of electrification posts, and their configuration in a coordinated system. The output is the
 maximum number of electrification posts lined up.

<p><img src="http://livearchive.onlinejudge.org/external/28/p2877a.gif>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


<p>The input contains several data sets. Each dataset is composed with the value n, followed
 of n pairs of integers representing the configuration of electrification posts. A case with
 n=0 will mark the end of file.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>The output gives the integers representing the maximum number of electrification posts
 lined up for each test case, one in each line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
16
-8 9
-2 8
4 7
9 9
-8 5
-3 5
-8 1
-1 2
1 5
6 5
11 5
2 3
4 1
9 2
-5 0
3 -2
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
5
</PRE>

<P>

______________________________________________________
2878||||||false||||||
<P>A common requirement in report generation for commercial application software, is the presentation of information in a categorized or group form. Nowadays there are software components and report applications that allow the user to visualize his information, (normally stored in a Data Base) in an aggregated or group form, so that the user could take the most advantage of his information.<p>You were ask to make a small program that will receive a text file as input with a set of data in a tabular form, as well as some set of instructions to make groups and generate an output file with the data grouped as requested. The following data correspond to the Customers table in the Database Northwind stored in MSSQL Server.<p><img src="http://livearchive.onlinejudge.org/external/28/p2878b.gif><p>In this case it was requested to group the information by Country<p><img src="http://livearchive.onlinejudge.org/external/28/p2878b.gif><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The program will receive as input several lines the first one is the string [DATA], then there will be n+1 lines, each one will be a set of strings separated by the pipe symbol "|", there may be characters form other language in some strings. Of the n+1 lines the first one correspond to the title of the information. Following the n+1 lines there should be a line with [GROUPS]. After this line you should find m line each one indicating the groups to make and their order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The data and groups should be indented with one or several tab characters, depending their level in the hierarchy father-son, for example:<pre>
[GROUP]
[TAB][GROUP]
[TAB][TAB][DATA]
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
[DATA]
CustomerID|CompanyName|ContactName|ContactTitle|City|Country
BOTTM|Bottom-Dollar Markets|Elizabeth Lincoln|Accounting Manager|BC|Canada
BSBEV|B's Beverages|Victoria Ashworth|Sales Representative|London|UK
CACTU|Cactus Comidas para llevar|Patricio Simpson|Sales Agent|Buenos Aires|Argentina
CENTC|Centro comercial Moctezuma|Francisco Chang|Marketing Manager|México D.F.|Mexico
CHOPS|Chop-suey Chinese|Yang Wang|Owner|Bern|Switzerland
COMMI|Comércio Mineiro|Pedro Afonso|Sales Associate|Sao Paulo|Brazil
CONSH|Consolidated Holdings|Elizabeth Brown|Sales Representative|London|UK
DRACD|Drachenblut Delikatessen|Sven Ottlieb|Order Administrator|Aachen|Germany
DUMON|Du monde entier|Janine Labrune|Owner|Nantes|France
EASTC|Eastern Connection|Ann Devon|Sales Agent|London|UK
ERNSH|Ernst Handel|Roland Mendel|Sales Manager|Graz|Austria
FAMIA|Familia Arquibaldo|Aria Cruz|Marketing Assistant|Sao Paulo|Brazil
FISSA|FISSA Fabrica Inter. Salchichas S.A.|Diego Roel|Accounting Manager|Madrid|Spain
FOLIG|Folies gourmandes|Martine Rancé|Assistant Sales Agent|Lille|France
FOLKO|Folk och fä HB|Maria Larsson|Owner|Bräcke|Sweden
[GROUPS]
Group:Country
Group:City
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Country: Argentina
       City: Buenos Aires
             CACTU|Cactus Comidas para llevar|Patricio Simpson|Sales Agent|
                                                     Buenos Aires|Argentina
Country: Austria
       City: Graz
             ERNSH|Ernst Handel|Roland Mendel|Sales Manager|Graz|Austria
Country: Brazil
       City: Sao Paulo
             FAMIA|Familia Arquibaldo|Aria Cruz|Marketing Assistant|Sao Paulo|Brazil
             COMMI|Comércio Mineiro|Pedro Afonso|Sales Associate|Sao Paulo|Brazil
Country: Canada
       City: BC
             BOTTM|Bottom-Dollar Markets|Elizabeth Lincoln|Accounting Manager|BC|Canada
Country: France
       City: Lille
             FOLIG|Folies gourmandes|Martine Rancé|Assistant Sales Agent|Lille|France
       City: Nantes
             DUMON|Du monde entier|Janine Labrune|Owner|Nantes|France
Country: Germany
       City: Aachen
             DRACD|Drachenblut Delikatessen|Sven Ottlieb|Order Administrator|Aachen|
	                                                                     Germany
Country: Mexico
       City: México D.F.
             CENTC|Centro comercial Moctezuma|Francisco Chang|Marketing Manager|
	                                                      México D.F.|Mexico
Country: Spain
       City: Madrid
             FISSA|FISSA Fabrica Inter. Salchichas S.A.|Diego Roel|Accounting Manager|
	                                                                  Madrid|Spain
Country: Sweden
       City: Bräcke
             FOLKO|Folk och fä HB|Maria Larsson|Owner|Bräcke|Sweden
Country: Switzerland
       City: Bern
             CHOPS|Chop-suey Chinese|Yang Wang|Owner|Bern|Switzerland
Country: UK
       City: London
             CONSH|Consolidated Holdings|Elizabeth Brown|Sales Representative|London|UK
             EASTC|Eastern Connection|Ann Devon|Sales Agent|London|UK
             BSBEV|B's Beverages|Victoria Ashworth|Sales Representative|London|UK
</PRE>

<b>Note:</b> As some records in sample output were too long for printing, we've moved them to the line below. Anyway, your output should print each record in a line, no matter how long it is.
<P>

______________________________________________________
2879||||||false||||||
<P>As result of the intense rain, many cities in the country as well as their habitants are suffering
 flooding. Most of the time emergency services were not able to respond promptly to the habitants
 requests for help. As a contingency plan city authorities have decided to assign Emergency Anti
 Flooding Teams (EAFT) to strategic points in the city to assist the habitants help calls during
 the flooding. The EAFT task is to go from their base point to the place where there is a problem,
 As soon as possible and release the drainage lid open, so the water level decrease faster.

<p>When it starts to rain and some person see that the water level is raising in his street, He
 must call the EAFT center, where the responsible of the center should send the nearest  team.

<p>Your task is to develop a program that finds the routes that the teams should follow to assist
to the habitants  calls for help. So that the water level in their streets reminds as low as possible.

<p>You should consider the following assumptions:

<blockquote>
	<li>The drainage lids are located in street intersections. 
	<li>The EAFT are located in street intersections. 
	<li>If you can go directly from intersection A to intersection B, that does not imply that you could go directly from intersection B to intersection A. (The street may be ONE way only). 
	<li>The time elapsed to go from one intersection to another is known. 
	<li>Even though not all intersection can be reach directly, there will always be a possible route between two points. 
</blockquote>
 






<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input to your program has the following information: there may be one or more sets of data. The first line is a number that defines how many sets are in the file.

<p>With in each set of data:

<blockquote>
	<li>the first line is the number of intersections in the map, its value is n.
	<li>From the second line up to the line n+1 you find the values of a square matrix of size n X n,  that represents the time required to go from intersection i (rows) to intersection j (columns). When i=j (since the start and the destination are the same) the time is cero. The time is 1 when the intersections do not connect directly between them.
	<li>The line n+2 has the following values: a number p that represent the place where there is a problem. Then there may be one or more numbers representing the locations of the EAFT.
</blockquote>
 


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>The output should have one line with the set number, as follows:

<p>Set Number #,
<p>Where "#" should be replaced for 1, 2, etc. then, With in each set, there should
be one or more lines, (at least) one for each EAFT representing the shortest path from 
the starting point of the EAFT to the point of problem p. The format of each line should be: the number
 of the starting point of the EAFT, the number of the intersection with a problem of flooding, the time
 elapsed to get there and the path followed. (the path is a set of intersections form the start to the
 destination) All the values of these line must be separated by a blank space. The lines must be ordered
 from the least to the greatest time, ...
 

<p>Example of a City map<br>
<img src="http://livearchive.onlinejudge.org/external/28/p2879a.gif>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
6                       
0    3    4    -1   -1   -1
-1   0    4    5    -1   -1
2    3    0    -1   -1   2
8    9    5    0    1    -1
7    2    1    -1   0    -1
5    -1   4    5    4    0
2    4    5    6        
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Set Number 1
5 2 2 5 2
4 2 3 4 5 2
6 2 6 6 5 2
</PRE>

<P>

______________________________________________________
2880||||||false||||||
<P>Write a program to create an index of a small collection of World Wide Web pages.
 Each page is a text file in a special format called HTML (HyperText Markup Language).
 The HTML format includes regular text and special HTML tags, which are always enclosed
 in angle braces. For example, the string &lt;A HREF="layout.html"> is an HTML tag meaning
 that the following text should be a link to the file layout.html.

 

<p>Your program's task is to read an HTML file called index.html and all the files referenced
 within index.html by the HREF command and all the files referenced by those files, and so
 on until there were not new files to read. Your program should also read the file input.txt
 containing a list of words and show a list of all the files referenced from index.html which
 contain each word (see the Sample Output).

<p>Assumptions

<blockquote>
	<li>Any opening angle bracket (the "&lt;" character) will be followed sooner or later by a matching closing angle bracket (the ">" character). 
	<li>A word is any string of characters found in a file that: 
	<blockquote>
		<li>Does not lie between matching angle braces. 
		<li>Contains only letters (no spaces, hyphens, apostrophes, etc.) 
		<li>Is not part of a longer word (e.g., in "balloon", we would not consider "loon" to be a word). 
	</blockquote>
	<li>Words which differ only in case should be considered to be the same. Thus, "Word", "word", "WORD", and "wOrD" would be considered to be the same word. 
	<li>The only HTML tag you need to worry about is the HREF tag, and you can assume that it will always be in the form &lt;A HREF="filename">, with no additional spaces or other characters; the name of the file is legal and in the same directory as the file you are already reading; and the name of the file will not exceed twelve characters in length. Filenames will always end with ".html". 
	<li>HTML files may be mutually referential or self referential, but there will be at most one hundred different files to read. 
</blockquote>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>You should read the input which contains in the first line the name of the initial HTML file you 
should start indexing. The next n lines contain the words that will be searched, one word per line, 
with no additional spaces. Then there will be a blank line followed by several file definitions.

<p>Each file definition starts with a line indicating the name of the file. The next m lines are the
 file text. There will be no blank lines on the files definitions. File definitions are separated by
 a blank line.



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>Write an output with the list of each word found in the input followed by a list of the file
 names the word is found in, in the following format:

<pre>
"word" can be found in the following pages:
     filename1
     filename2
 
"word" can be found in the following pages:
     filename3
 
"word" can not be found in any page.
</pre> 

<p>Where word is the word from the input file, and filename1, filename2, and so on, are the names
 of the files containing the word. Each file name should be indented five spaces: a single blank 
line should separate each listing.




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
input
index.html
file
index
html
HTML
recursion
word
is
 
index.html
&lt;HTML>
&lt;HEAD>
&lt;TITLE>Indexing Web Pages&lt;/TITLE>
&lt;/HEAD>
&lt;BODY>
&lt;P>Write a program to create an index of a small collection
of World Wide Web pages.  Each "page" is a text file in a
special format called HTML (HyperText Markup Language).  The
HTML format includes regular text and special HTML tags,
which are always enclosed in angle braces.  For example, the
string &lt;A HREF="layout.html"> is an HTML command meaning that
the following text should be highlighted; a user click on
the highlighted text would cause a web browser to fetch and
display the file layout.html.&lt;/P>
&lt;H1>Following Links&lt;/H1>
&lt;P>Don't forget that links can be &lt;A HREF="index.html">
self-referential&lt;/A>!&lt;/P>
&lt;/BODY>
&lt;/HTML>
 
layout.html
&lt;A bunch of gibberish and a word>
Note that there is no rule that the file needs to be legal HTML
(if you know the rules), or that words really be wordseiwlaoieu;a. 
&lt;A HREF="index.html">Watch out for mutual references!
&lt;/HTML>
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
"file" can be found in the following pages:
     index.html
     layout.html
 
"index" can be found in the following pages:
     index.html
 
"html" can be found in the following pages:
     index.html
     layout.html
 
"HTML" can be found in the following pages:
     index.html
     layout.html
 
"recursion" can not be found in any page.
 
"word" can not be found in any page.
 
"is" can be found in the following pages:
     index.html
     layout.html
</PRE>

<P>

______________________________________________________
2881||||||false||||||
<p>A simple boardgame that generations of children have played consists of a board containing a trail of squares and a set of colored pieces. At the beginning of the game each player is assigned a piece; all pieces are initially positioned right before the first square of the trail.</p><p>The game proceeds in rounds. At each round, players rolls a pair of dice, and move their pieces forward a number of squares equal to the rolled result. Players roll the dice always in the same order (player A, then player B, etc.) in the rounds.</p><p>Most of the squares on the board are plain squares, but some are "traps". If a player's piece falls on a trap square at the end of the player's move, the player misses the next round. That is, she/he does not roll the dice, and her/his piece stays one round without moving.</p><p>There will be exactly three traps on the trail. <img src=p2881.gif><p>The winner of the game is the player whose piece reaches the end of the trail first. The end of the trail is after the last square of the board. Consider, for example, the board in the figure above, which has squares numbered from 1 to 48. At the start, the pieces are positioned at the place marked `Begin' in the figure, that is, before the square number 1. Therefore, if a player rolls a 7 (dice showing 2 and 5 for example), her/his piece is positioned at square number 7 at the end of the first round of the game. Furthermore, if a player's piece is positioned at square 41, the player needs a roll result of at least 8 to reach the end of the trail and win the game. Notice also that there will be no draw in the game.</p><p>You will be given the number of players, the number of squares in the trail, the location of the traps and a list of dice rolls results. You must write a program that determines the winner.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Your program should process several test cases. The first line of a test case contains two integers P and S representing respectively the number of players and the number of squares in the trail (1 &lt;= P &lt;= 10 and 3 &lt;= S &lt;= 10000). The second line describes the traps, represented by three distinct integers T1, T2 and T3, denoting their positions in the trail (1 &lt;= T1, T2, T3 &lt;= S). The third line contains a single integer N indicating the number of dice rolls in the test. Each of the following N lines contain two integers D1 and D2 (1 &lt;= D1, D2 &lt;= 6), representing the results of the dice rolls. The end of input is indicated by P = S = 0. The set of dice roll results in a test will be always the exact number necessary for a player to win the game.</p><p>A player is identified by a number from 1 to P. Players play in a round in sequential order from 1 to P. The input must be read from standard input.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case in the input, your program should output a single integer: the number representing the winner. The output must be written to standard output.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2 10
2 4 8
4
1 1
3 4
1 2
6 5
3 7
4 5 7
7
1 2
2 2
2 1
1 1
1 2
1 1
1 1
0 0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
1
3
</pre><p>
______________________________________________________
2882||||||false||||||
<p>You have been hired by Mines Never Again, a non-governmental organization whose aim is to ban the use of landmines. Besides working on political aspects, such as lobbying governments to join the International Campaign to Ban Landmines, MNA also works on disarming mines left by past wars.</p>

<p>Nowadays, mines are detected by satellites or surveillance airplanes. But to disarm a mine you have to get close to it. In most cases, the only way to reach a mined field is by helicopter. To clear the field, you must find the most secure region within the field so that the helicopter can land on it. This region is a rectangle with sides parallel to the coordinate axes, with no mines inside and whose smaller side is the largest possible. More precisely, let A and B be the length of the sides of all possible rectangles that do not contain any mines and A  B; the most secure region is a rectangle with the largest value of A and the largest value of B. That is, among all rectangles that do not contain any mines and whose smaller side is A (largest possible), the most secure region is a rectangle that has the largest B.</p>

<p>Given the limiting rectangle of a mined field and the positions of all mines inside the field, you must write a program to find the size of the most secure region.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>Your program should process data for several mined fields. The first line of a mined field contains four integers X1, Y1, X2 and Y2 which bound the field. (X1,Y1) are the coordinates of the field's lower left corner, (X2, Y2) are the coordinates of the field's upper right corner (­20000 &lt;= X1 &lt; X2 &lt;= 20000 and ­20000 &lt;= Y1 &lt; Y2 &lt;= 20000). The second line contains a single integer N indicating the number of mines detected in the field (1 &lt;= N &lt;= 300). The following N lines contain each two integers X and Y describing the position of a mine (X1 &lt;= X &lt;= X2 and Y1 &lt;= Y &lt;= Y2). No two mines have the same location. The end of input is indicated when X1 = Y1 = X2 = Y2 = 0. The input must be read from standard input.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each mined field of the input your program should print a line with two integers A and B, where A &lt;= B, describing the size of the most secure region. The output must be written to standard output.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>
0 0 100 100
9
0 0
0 100
100 0
100 100
50 50
25 50
50 25
75 50
50 75
-2 0 6 8
3
0 2
2 4
4 6
0 0 0 0
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<pre>
50 50
4 6
</pre>

<p>

______________________________________________________
2883||||||false||||||
<p>The "Runner Pawns" game is a variant of classic Chess for a single player. It uses a board similar to the chess board, divided in 8x8 squares. As in chess, each square can contain only one piece at a time. The pieces are a number of pawns (the "Runner Pawns"), and a single horse, which is the only piece under command of the player. The objective is to capture all pawns before they get to the last row and become kings.</p>

<center><img src=p2883a.gif></center>

<p>Horse moves are said to be in `L' shape, since a horse must always move two squares in one direction and one square in the perpendicular direction. The figure above illustrates horse movements, where the character `H' indicates the horse current position, and the character `·' indicates possible final positions. Notice that in the representation used black and white squares of the chess board are not distinguished.</p>

<center><img src=p2883b.gif></center>

<p>Pawns' moves are a bit different from chess, since they can only move one square forward, and all of them move at the same time. They never move on a diagonal. Squares of the board are numbered from 1 to 64, as shown above. Pawns move in vertical direction from top to bottom, so that squares numbered 57 to 64 are the pawns' goal.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input contains P representing the describe the initial starting position of several instances of the problem, one per line. Each instance starts with an integer number of pawns (0 &lt;= P &lt;= 8), followed by P integers (1 &lt;= A1, A2, ... AP &lt;= 64) that position of each pawn, followed by an integer H (1 &lt;= H &lt;= 64) representing the the horse. The end of input is indicated by a line containing P = 0.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each instance of the problem in the input your program must print a single line, containing the answer to the problem. If there is a sequence of moves for the horse to capture all pawns before a surviving king moves (and without the horse being captured by a pawn) then the program should print the length of the minimum sequence of moves that make it possible. Otherwise your program should print the word `impossible'. The output must be written to standard output.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>
1 1 11
1 60 1
2 33 60 54
0
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
1
impossible
3
</pre>

<p>

______________________________________________________
2884||||||false||||||
<p>The ACM (All Can Meet) club was created with the purpose of attracting people of all ages, with the idea that the people could sit together and share their life experience, to the benefit of all. But as it happened, the club became such a huge success that it was practically impossible to gather all its members at the same place and time. The club then decided to split its members into smaller "sections". In order to make sure that sections are "nice", the director of the club decided to impose the following requirements:</p><p>A. all members of the same age should be in the same section,</p><p>B. all members should be part of exactly one section,</p><p>C. in each section, the maximum number of people with the same age should not be more than R times the minimum number of people with the same age, where R is a rational number between 1.0 and 2.0. The number R is called the splitting factor of the club.</p><p>The last condition makes sure that there is no relatively small-age group which might feel uncomfortable in the section. For instance, let denote by [n, m] a group with n members who are m-years old. Then in section {[10, 50], [6, 45], [70, 12], [43, 23]} the maximum number of people with the same age is 70, the minimum number of people with the same age is 6. If R = 2.0, then we say this section does not satisfy the requirement (C) since 70/6 &gt; 2.0. However, we can split this section into two smaller sections, namely {[10, 50],[6, 45]} and {[70, 12], [43, 23]}, which satisfy all the requirements.</p><p>Given the splitting factor R and a list of the members of the club, you must write a program to find the minimum number of sections satisfying the three requirements above.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Your program should process several test cases. The first line of a test case contains an integer K and a rational R. K represents the number of different ages in the club (1 &lt;= K &lt;= 120), and R represents the splitting factor set by the club director (1.0 &lt;= R &lt;= 2.0). The next K lines describe the group members, each line containing two integers N and M, indicating that there are N members who are M-years old in the club (1 &lt;= N &lt;= 10000 and 1 &lt;= M &lt;= 120). The end of input is indicated by a line with K = 0 and R = 0.0.</p><p>The input values will be such that the eventual error in the internal binary representation of R will not affect the result.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each instance of the problem you should output a single line, containing the minimum number of groups satisfying the three requirements above.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
5 1.7
100 7
18 10
11 17
567 25
62 34
3 1.0
12 18
107 11
250 57
0 0.0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
3
3
</pre><p>
______________________________________________________
2885||||||false||||||
<p>
In the year of 2222, a terrible disaster happened at the kryptonite mine in Mars: a marsquake shook that part of the planet. Differently from earthquakes in Earth, marsquakes are not unusual on Mars. This one, however, caused the mine to start sinking slowly into the soil. The mine has a rectangular external shape, and its interior is like a maze, with high, straight walls and, most importantly, teleporters. Teleporters, as you know, can transport people instantly from one place to another. Teleporters in the mine are old models, using ancient technology, and can only teleport people if there is a clear view from one teleporter booth to another (that is, if there are no obstacles or walls in between the booths). You can see the map of the mine in the figure below.</p>

<img src=p2885.gif>

<p>
You are trapped alone inside the mine. Fortunately, you have a map of the whole mine, know your current location, the positions of the walls, the locations of the exit and all teleporter booths. Unfortunately, the marsquake affected the energy system, and you know the teleporters can be used for a limited number of times only.</p>

<p>You want to get out of the mine walking as little as possible, since you sprained your ankle during the marsquake. You must find the route from your present location to the exit that requires the least amount of walking.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input consists of many test cases. The first line of a test case contains three integers N, M and L, which indicate, respectively, the number of times the teleporters can be used, the number of walls in the mine and the number of teleporter booths (0 &lt;= N, M, L &lt;= 50). Each of the next M lines contains four integers X1, Y1, X2 and Y2, which represent the coordinates of the endpoints of a wall. You may ignore the thickness of walls and assume they do not intersect each other (­20000 &lt;= X1 &lt; X2 &lt;= 20000 and ­20000 &lt;= Y1 &lt; Y2 &lt;= 20000). The next L lines contain the location of teleporter booths, given by two integers Xp and Yp. The last line of each test case contains four integers Xb, Yb, Xe and Ye where (Xb, Yb) are the coordinates of your location and (Xe, Ye) are the coordinates of the mine's exit. The end of input is indicated by M=N=L=0.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case in the input your program must output a single line, containing an integer representing the distance you need to walk to get out of the mine. Of course, you should not consider the distances you teleported. The distance must be rounded to the nearest integer.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>
1 1 3
5 -4 5 4
1 0
5 5
9 0
0 0 10 0
1 1 3
5 -4 5 4
0 0
5 5
10 0
0 0 10 0
0 0 0
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
8
7
</pre>

<p>

______________________________________________________
2886||||||false||||||
<p>The well known supermarket chain X-Mart decided to cut costs, reducing the number of different products available in its shops' shelves. The marketing department was concerned that this decision would affect sales, and decided to exploit the reduction of products to promote customer relations.</p><p>X-Mart therefore organized an Internet poll, in which customers could choose which products they wanted the supermarket to keep on their shelves, and which products they wanted the supermarket to withdraw from their shelves. The list of currently available products was published on the Internet.</p><p>To simplify the polling system, each customer was allowed to choose at most two products to vote for (meaning the supermarket should keep selling it) and at most two products to vote against (meaning the supermarket should stop selling it).</p><p>Once the marketing department got all the votes in its database, it wants to know if it is possible to choose a new list of products that pleases ALL voting customers. The marketing department considers that a customer will be pleased when at least one of the products she/he voted for was indeed kept by the supermarket, and at least one of the products she/he voted against was withdrawn from the supermarket's shelves. You may assume a customer does not vote for and against the same product.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Your program should process several test cases. The first line of a test case contains two integers C and P, representing respectively the number of customers and the number of products in the test (1 &lt;= C &lt;= 1000 and 1 &lt;= P &lt;= 10000). Each of the next C lines describes the preference of one customer, represented as four integers X, Y, S and T (0 &lt;= X, Y, S, T &lt;= P). X and Y are products the customer wants the supermarket to keep selling, S and T are products the customer wants the supermarket to stop selling. A zero value for any of the variables X, Y, S and T means the customer is not making use of that vote. A line with C = P = 0 indicates the end of input.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case your program must print one line, containing either the word `yes' (if it is possible to please all voting customers) or the word `no' (if it is not possible). The output must be written to standard output.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
3 4
1 2 3 4
3 4 1 2
2 3 1 4
4 4
1 2 3 4
3 4 1 2
1 3 2 4
1 4 2 3
4 4
1 2 3 4
3 4 1 0
1 3 2 4
2 4 0 3
0 0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
yes
yes
no
</pre><p>
______________________________________________________
2887||||||false||||||
<p>ICPC, an international telecommunication company, wants to improve its relationship with business subscribers, offering a discount on calls made to a fixed set of telephone numbers selected by the client company. To help ICPC decide on the cost for this new service, they searched their database and produced a list of calls made last year by one company to another. If a company communicated with another company (making or receiving a call) during last year, we will say they are Business Partners.</p>

<p>You have been hired by ICPC to process the list of calls from last year and determine the size (in number of companies) of the largest set of companies that are Business Partners of at least K other companies in the same set. That is, you must find a set S of companies such that every company in S has at least K business partners that are also in S (and possibly partners that are outside S), where K is a parameter chosen by the ICPC.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>Your program should process several test cases. The first line of a test case contains three integers N, P and K. N represents the total number of companies subscribed to ICPC (1 &lt;= N &lt;= 1000); companies are identified by numbers between 1 and N. P represents the total number of business partner pairs, produced from last year calls; and K is the minimum number of business partners a company must have in the final set (1 &lt;= K &lt;= N­1), as described above. The next P lines describe each a business partner pair, represented as two integers X and Y, where X and Y are companies (1 &lt;= X &lt;= N, 1 &lt;= Y &lt;= N and X &lt;&gt; Y). The value N = 0 indicates the end of input.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case from the input, your program should print a single line, containing the size of the largest set of companies found by your program.</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>
5 3 1
1 2
4 3
4 5
5 3 2
1 2
4 3
4 5
10 11 2
1 2
1 3
3 2
3 5
5 4
5 6
9 10
8 9
8 7
6 7
6 8
0 0
</pre>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
3
0
7
</pre>

<p>

______________________________________________________
2888||||||false||||||
<p>Natives from the tiny island of Tookutoo are keen on mathematics, and teach their children to play several math-oriented games. A popular puzzle in Tookutoo is played with ceramic slabs like the ones shown in the figure below.</p><center><img src=p2888.gif></center><p>As it can be seen in the figure above, slabs are similar to dominoes, being divided in two parts; in each part an integer value is imprinted. The slabs above have values [2, 1], [6, 3] and [3, 1]. Note that a slab [a, b] can also be written as [b, a].</p><p>The puzzle starts with a player receiving a set of slabs chosen randomly from a large and varied pool. Using the given set of slabs, the player has to find an arrangement in which the slabs are put side by side on the table in such a way that the sum of values on the upper side is equal to the sum of values on the lower side. For example, for the set in the figure above, a correct arrangement is</p><center><pre>
1 6 1
2 3 3
</pre></center><p>If it is not possible to find an arrangement using all the slabs chosen, the player may discard one of them, but the value of the sum in the arrangement must be the highest possible Besides, if more than one slab can be discarded while leaving the same sum, the player must discard the slab [a, b] such tha a &lt;= b and a is the least possible value considering all possible slabs to be discarded.</p><p>You must write a program that, given a set of slabs, tries to find an arrangement that satisfies the conditions of the puzzle, discarding one slab if necessary.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Your program should process several test cases. The first line of a test case contains a single integer N, the number of slabs in the test (0 &lt;= N &lt;= 400). Each of the following N lines contains two integers Xi and Yi describing a slab that was given to the player (0 &lt;= Xi &lt;= 1000 and 0 &lt;= Yi &lt;= 1000). The value N = 0 indicates the end of input.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case your program must produce one line describing the result. If it is not possible to find an arrangement, print the word `impossible'. If it is possible to find an arrangement, print its sum and the description of the discarded slab (if any). If you had do discard a slab, describe it in the form `discard X Y', where X &lt;= Y; otherwise print `discard none'.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
4
1 4
2 9
2 1
0 4
2
8 1
9 4
3
6 3
1 2
3 1
0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
10 discard 1 2
impossible
8 discard none
</pre><p>
______________________________________________________
2889||||||false||||||
<P>A palindrome is a word, number, or phrase that reads the same forwards as backwards. For example, the name "anna" is a palindrome. Numbers can also be palindromes (e.g. <B>151</B> or <B>753357</B>). Additionally numbers can of course be ordered in size. The first few palindrome numbers are: <B>1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, ...</B></P><P>The number <B>10</B> is not a palindrome (even though you could write it as <B>010</B>) but a zero as leading digit is not allowed.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of a series of lines with each line containing one integer value <B>i (1 &lt= i &lt= 2*10<SUP>9</SUP>)</B>. This integer value <B>i</B> indicates the index of the palindrome number that is to be written to the output, where index <B>1</B> stands for the first palindrome number <B>(1)</B>, index <B>2</B> stands for the second palindrome number <B>(2)</B> and so on. The input is terminated by a line containing <B>0</B>.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each line of input (except the last one) exactly one line of output containing a single (decimal) integer value is to be produced. For each input value <B>i</B> the <B>i-th</B> palindrome number is to be written to the output.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
12
24
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1
33
151
</PRE><p>
______________________________________________________
2890||||||false||||||
<P>
Mazes in higher dimensions are quite different than mazes in lower dimensions such as two and three. Generally, mazes in lower dimensions have a lot of barriers or walls to confuse the peoples who enter it. But when the dimensions of maze is greater than 3, mere mortals struggle simply to find their directions so intense barriers are not required. In this problem we will try to study some <B>N</B>-dimensional grid mazes and find possible ways of going from one place to another. Our grid maze in three dimension looks like the following:
</P>
<P ALIGN="CENTER">
<IMG SRC="http://livearchive.onlinejudge.org/external/28/p2890a.jpg>
</P>

<P>This three dimensional maze has dimension of <B>(5 x 4 x 3)</B> which is made of <B>60</B> 3D-blocks. The rules of the maze are: </P>
<P>
<OL>
<LI>In an <B>n</B> dimensional maze one can go towards maximum <B>2n</B> different directions from one place if there is no barrier.
<LI>The movements are only possible parallel to the axis.
<LI>The direction of movements should be such that it does not increase distance with the destination. By distance I mean the Cartesian distance.
<LI>There may be some opaque hyper-blocks in the maze. These blocks do not allow anyone to go through.
<LI>Total number of hyper-blocks in the maze is not more than <B>3000000</B>.
<LI>The maximum dimension length on any axis direction of the maze is <B>50</B>.
<LI>The maximum possible dimension of the maze is <B>7</B>.
<LI>In an n dimensional maze let the length along <B>n</B> - axes be <B>l1, l2, l3,, </B>ln respectively.  Then the starting block is always <B>(0, 0, , 0)</B> and the destination is always <B>(l1-1, l2-1, l3-1, .. , ln-1)</B>. This n-Dimensional maze is made of <B>(l1 x l2 x l3 xx ln)</B> <B>n</B>-dimensional hyper-blocks. In the 3-dimensional maze shown above the starting block is <B>D (0,0,0)</B> and the destination block is <B>F (4,3,2)</B>. The figure above shows two possible ways of going from block <B>D (0,0,0)</B> to block <B>F (4,3,2)</B>.
<LI>When the maze makers place opaque hyper-blocks in the maze they make sure that the number of ways to reach the destination is reduced to less than <B>2<SUP>63</SUP></B>.
</OL>
</P>
<P>
Given the description of a maze your job is to determine the number of ways you can go from its lowest block to the highest block as it is said in point 8. You must know that in a n-dimensional Cartesian coordinate system the coordinate of a point <B>P</B> can be written in the form <B>(p<SUB>1</SUB>, p<SUB>2</SUB>, p<SUB>3</SUB>,, p<SUB>n</SUB>)</B> and the coordinate of another point <B>Q</B> can be written as <B>(q<SUB>1</SUB>, q<SUB>2</SUB>, q<SUB>3</SUB>,, q<SUB>n</SUB>)</B>. And the distance between these two points is:
<CENTER><IMG SRC="http://livearchive.onlinejudge.org/external/28/p2890a.jpg></CENTER>
This distance is also known as the Cartesian distance of two points in <B>n</B>-dimension.
</P>

<P>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file contains several sets of inputs. The description of each set is given below:<BR>
First line of each set contains two integers <B>DIM(0&lt;DIM&lt;8)</B> and <B>R(0&lt;=R&lt;30000)</B>. Here <B>DIM</B> is the dimension of the maze, <B>R</B> is the number of opaque blocks. Next line contain DIM integers <B>(p<SUB>1</SUB>, p<SUB>2</SUB>, p<SUB>3</SUB>,, p<SUB>DIM</SUB>)</B> which is the coordinate of the destination hyper-block. Each of the next <b>R</b> lines contains <b>DIM</b> integers which are the coordinates of <b>R</b> opaque blocks.
Note that blocks are not point objects. So by coordinate of a block we refer to the point of the block that is nearest to the origin. Thats why in the picture above the coordinate of block <B>D</B> is <B>(0,0,0)</B>. There is a blank line after each set of input.<BR>
Input is terminated by a case where both <B>DIM</B> and <B>R</B> are zero. This case should not be processed.
</P>

<P>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each set of input produce one line of output. This line should contain the serial of the output as shown in the sample output. Then it should contain an integer N which indicates in how many ways we can reach the destination. It is guaranteed that this number will be less than <B>2<SUP>63</SUP></B>.
</P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3 0 
5 5 5
 
3 1 
9 8 7
1 1 1
 
0 0
</PRE>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
Case 1: 756756
Case 2: 6318655200
</PRE>
<p>

______________________________________________________
2891||||||false||||||
<P><IMG SRC="http://livearchive.onlinejudge.org/external/28/p2891a.jpg ALIGN="LEFT"> Association of Cyber cafe Managers <B>(ACM)</B> has recently discovered that the cyber cafes have not been placed in proper places of the cities. Some parts of the cities have many of them, while some important parts have none. <B>ACM</B> is now planning to setup one cyber cafe in each important part of large cities. Each of the new cyber cafes will have one server connected to several terminals. As the number of cyber cafes is now increasing, <B>ACM</B> has bought some new servers. The cyber cafes that will be equipped with new servers will be called <B>grade A</B> cyber cafes, and the rest which contains the old servers will be called <B>grade B</B> cyber cafes.</P><P>Although the old servers are quite good, there is a chance that people will try to avoid grade <B>B</B> cyber cafes and prefer grade <B>A</B> ones if they have that opportunity. If someone finds that the nearest cyber cafe is of grade <B>B</B> and there are more than one grade <B>A</B> cyber cafes within <B>1 km</B> distance, he/she will never use the grade <B>B</B> cyber cafe. As a result, that cyber cafe will not get enough customers to support itself. If there is only one grade <B>A</B> cyber cafe near (within one km) a grade <B>B</B> cyber cafe then people will still use the grade <B>B</B> cyber cafe because the only neighboring grade <B>A</B> cyber cafe may be filled with people. So, <B>ACM</B> is planning to build grade <B>A</B> and grade <B>B</B> cyber cafes in such a way that no grade <B>B</B> cyber cafe is within <B>1 km</B> distance of <I>two or more grade</I> <B>A</B> cyber cafes.</P><P><B>ACM</B> has already rented one building for each cyber cafe. The rented buildings of a city have been marked with single uppercase letters for identification. <B>ACM</B> has also decided how many new servers should be allotted to each city. Now, it is time to place the servers in the cyber cafes. Given all the pairs of buildings that are within <B>1 km</B> distance of each other, your job is to find out the possible ways of placing the servers meeting the above criterion. <I>All the new servers are similar. The old ones are also similar. All cyber cafes should have exactly one server.</I> For examples if there are five cyber cafes and two new servers then three <B>(5-2=3)</B> old servers will be required.<BR><BR><CENTER><IMG SRC="http://livearchive.onlinejudge.org/external/28/p2891a.jpg></CENTER></P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input consists of less than <B>60 (Sixty)</B> datasets. Each dataset consists of the followings:<UL><LI>A line containing the name of the city (which has <B>2</B> to <B>16</B> alphanumeric characters). <LI>A line containing <B>3</B> positive integers <B>n</B>, <B>s</B> and <B>p</B> denoting respectively the number of buildings, the number of new servers and the number of building pairs that are within 1 km from each other (0&lt;s&lt;n&lt;17). The integers are separated by exactly one space. The <B>n</B> buildings are marked with <B>A</B>, <B>B</B>, etc. in that order. <LI>Next line contains <B>p</B> pairs of uppercase letters. Each pair indicates that the corresponding buildings are within 1 km of each other. One pair is separated from the next with exactly one space. The end of input is marked with a line consisting of "<B>TheEnd</B>".</UL></P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each set, print <B>2</B> lines. The first line should contain the name of the city. The next line should contain the number of possible ways to place the servers. The last line of output should be a line consisting of the string "<B>TheEnd</B>" (without the quotes).</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
Dhaka
6 2 7
AB BC CD DE EF FA AD
Chittagong
4 3 4
AB AC AD BC
Sylhet
3 2 3
AB BC CA
TheEnd
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Dhaka
9
Chittagong
1
Sylhet
0
TheEnd
</PRE><p>
______________________________________________________
2892||||||false||||||
<P>Alan bought a new house. He likes rectangles, so he wants his floor full of identical rectangular shapes. Imagine he has a floor of <B>5 x 6</B>, he may fill this floor with rectangles of <B>1 x 2</B> in at least two ways:<CENTER><IMG SRC="http://livearchive.onlinejudge.org/external/28/p2892.jpg></CENTER></P><P CLASS="paragraph"><B>Picture (a) shows a 'breakable' layout</B>, since there is a straight line through the whole floor which divides the floor into two parts -- a <B>5 x 4</B> rectangle and a <B>5 x 2</B> rectangle, and all the <B>1 x 2</B> rectangles are not destroyed.</P><P CLASS="paragraph"><B>Picture (b) shows a 'unbreakable' layout</B>, since you cannot divide it into two parts without destroying any <B>1 x 2</B> rectangle.</P><P CLASS="paragraph">Alan likes unbreakable floorings, but he's not sure if it is possible for any size of floor and rectangle shape. Can you tell him?</P></P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line contains the number of tests <B>t(1&lt;=t&lt;=40)</B>. Each case consists of a single line with four positive integers <B>p, q, a, b (1&lt;=p, q, a, b&lt;=10000)</B>.</P><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, print the case number first. Then print the word '<B>Yes</B>' if it is possible to make a unbreakable floor of <B>a x b</B> with rectangles of <B>p x q</B>, otherwise print the word '<B>No</B>'. Answer for each case should be in exactly one line.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
1 2 5 6
1 2 3 17
2 3 11 18
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1:Yes
Case 2:No
Case 3:Yes
</PRE><p>
______________________________________________________
2893||||||false||||||
<IMG SRC="http://livearchive.onlinejudge.org/external/28/p2893a.gif ALIGN="LEFT"><P>The job market is not holding a good prospect for Computer Science graduates lately. As a result a lot of <B>CS</B> graduates here are either going for <B>MBA</B> or looking for a job, which is not quite related to their field of study. Turza, a fresh <B>CS</B> graduate is one such example. He with his sound knowledge of <B>CS</B> could not find a single job where he could make use of what he knows. He ends up getting a job of project supervision, which is basically keeping track if the parts of the project are being completed according to the schedule. What a waste of four years' hard work!</P><P>A guy has to earn his living and we all understand that. But there should also be some sort of satisfaction in the job. That's what Turza is trying to find now. He is desperately searching for something interesting in his work. But the only interesting thing for him is mathematical problems. Fortunately for Turza, he has been able to create and solve one math problem from his not so interesting work. We would like to leave it for you to see if you can do it too. He says:</P><P>"The project I supervise has many parts. Some of the parts are dependent on other parts. So if part <B>X</B> is dependent on part <B>Y</B> and <B>Z</B>, we'd have to make sure that both part <B>Y</B> and <B>Z</B> is finished before we start working on part <B>X</B>. <U>For some strange reason which I really don't have any clue to, here we must finish all the parts that are currently not dependent on any other parts. Once all these parts are completed, we proceed on to completing the other parts following the same rule.</U> It is fairly easy to calculate how many ways are there that this entire project can be completed. However, I am more interested in the solution of the inverse problem. Given the number of parts we have in a project and the number of ways that the project can be completed (if we follow the procedure I just explained) can you find the dependency list of the parts in the project? It is quite obvious that the answer need not be unique, so any valid answers would do."</P><P>If we want to calculate the number of ways to finish a project the number can get quite big, even if the number of parts in the project is not so large. So here we prefer to use the prime factorized form for the count. You can safely assume that for every count and number of parts we give you, there is at least one project that they correspond to. Your task is simply to find one such project and list the dependency among the parts.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line of the input gives you the number of test cases, <B>T (T&lt;=20)</B>. Then you would have the description of T test cases. Every test case starts with two integers in one line. The first integer <B>N (1&lt;=N&lt;= 50)</B> is the total number of parts in the project. The next integer is the number of primes, <B>P (P &lt;=N)</B> in the prime factorization of the count (the number of ways to complete the project). In the next P lines P pairs are listed. The first number in each pair is the prime number and the second number is the number of times it occurs in the count. <I>Please note that we only list a prime number if it occurs nonzero times in the count.</I></P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each of the test cases you have to print the serial number of the test case in the format "<B>Case#x:</B>" where x is the serial number starting from 1. In the next <B>N</B> lines you have to list the dependency list for each of the projects. The <B>i</B> th dependency list starts with an integer which gives us the number of parts that depenedent on the <B>i th</B> part. Then we would have the labels of that many parts on the same line. These labels are integers in the range <B>1 to N</B> and should be separated by a single space. There is a special judge for this problem which will take your project as input and check if we can indeed reach that count. Please note that your project description must not be such as to mean that it is impossible to finish the project. And you must not mention a dependency more than once.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
3 1
2 1
5 2
2 1
3 1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case#1:
1 3
1 3
0
Case#2:
3 2 3 4
0
1 5
0
0
</PRE><p><b>Illustration:</b><p><IMG SRC="http://livearchive.onlinejudge.org/external/28/p2893a.gif><p>
______________________________________________________
2894||||||false||||||
<P>
Aoccdrnig to a rseearch at an Elingsh uinervtisy, it deosn't mttaer in waht oredr the ltteers in a 
wrod are, the olny iprmoatnt tihng is taht the frist and lsat ltteer is at the rghit pclae. The rset 
 can be a toatl mses and you can sitll raed it wouthit any porbelm. Tihs is bcuseae we do not 
 raed ervey lteter by itslef but the wrod as a wlohe. 

<P>

<P>
<BR>
I hope you did not have much trouble reading the paragraph above and have realized that the 
 research result is somewhat true. If you are still having trouble reading the paragraph above 
 go to the end of this problem to see the actual paragraph. 

<P>
At first glance this research may appear as a joke but if you think for quite sometime you will 
 find that this is not a joke at all since words of length 1, 2, 3 and 4 are merely affected by the 
 scrambling that is being suggested here. And in a normal English text, words of length less 
 than five makes almost 62% of the total words. However to solve this problem you neither 
 need this statistics nor need to prove the correctness of this research.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2894.eps}$
 -->
<IMG
 WIDTH="665" HEIGHT="179" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/28/p2894.gif
 ALT="\epsfbox{p2894.eps}">
</DIV>

<P>
In this problem you will be given a dictionary of correct words and list of scrambled words. 
 The first and the last letter of a scrambled word are the same as the original word. Position of 
 letters between them may or may not be altered. Your job is to find out the total number of 
 words in the dictionary that can actually be the correct form of the given scrambled word. 
 You also need to find the lexicographically smallest and largest such word in the dictionary, 
 when the word is present in the dictionary. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
 The input file contains a single set of input. The first line of the input file is an integer <SPAN CLASS="MATH"><I>N</I></SPAN> 
 (<!-- MATH
 $0<N<500001$
 -->
<SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 500001</SPAN>) which indicates how many words are there in the given dictionary. Each of 
 the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines will contain one word. All the words have less than 9 characters. The very 
 next line contains an integer <SPAN CLASS="MATH"><I>Q</I></SPAN> (<SPAN CLASS="MATH"><I>Q</I> &lt; 50001</SPAN>) which indicates the total number of query. Each of 
 the next <SPAN CLASS="MATH"><I>Q</I></SPAN> lines contain 1 word (All query words have less than 16 characters). All words in 
 the input file are made with lowercase alphabets.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
 For each query you should output a single line. This single line should contain an integer <SPAN CLASS="MATH"><I>F</I></SPAN> 
 (must) and two strings <SPAN CLASS="MATH"><I>S</I>1</SPAN> and <SPAN CLASS="MATH"><I>S</I>2</SPAN> (These two strings will be present only when <SPAN CLASS="MATH"><I>F</I> &gt; 0</SPAN>). The 
 integer <SPAN CLASS="MATH"><I>F</I></SPAN> denotes how many words are there in the dictionary that can be the correct form of 
 the scrambled word in the query. <SPAN CLASS="MATH"><I>S</I>1</SPAN> is the lexicographically smallest such word in the 
 dictionary and <SPAN CLASS="MATH"><I>S</I>2</SPAN> is the lexicographically largest such word in the dictionary.   

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
aabab
aaaab
aaabb
aaaaa
xyxyx
5aaaaa
aabab
zzzzz
kkkkk
aaabb
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 aaaaa aaaaa
2 aaabb aabab
0
0
2 aaabb aabab
</PRE> 

<P>

<P><P>
<BR>

<B>First paragraph original text</B>

<P>
According to a research at an English university, it doesn't matter in what order the letters in a 
 word are, the only important thing is that the first and last letter is at the right place. The rest 
 can be a total mess and you can still read it without any problem. This is because we do not 
 read every letter by itself but the word as a whole. 


______________________________________________________
2895||||||false||||||
<P>A recent election and violent unprecedented secession has firmly established you as warlord of the new nation Illbebakia. Of course, there is still some dissent by your weakling serfs, so you must solidify your military stranglehold on your nation. And naturally, there are neighbors to subdue while you're at it. These tasks are, like so many things, best accomplished by randomly blowing things up. Fortunately, you have a proven talent in this area.</P><P>Even as we speak, your warplanes are dropping large bombs all over the country. You need some way to determine the extent of the carnage. If the pilots have served you well, they may live for another precious day. You don't really care about the property damage or the massive casualties; it's simply the psychological effect (shock and woe) that's important. As such, all you want to know is the total area of devastation.</P><P>Every bomb has a destruction radius. Anything within that radius is completely eradicated. Computing the area for one bomb is fairly simple, but for many it isn't quite so easy. However, your new nation has a surprisingly large proportion of skilled programmers, so you have respectfully requested their assistance. The survivors of this request (ie, those who cooperated) are now hard at work, writing a program to solve this problem...<BR><BR><CENTER><IMG SRC="http://livearchive.onlinejudge.org/external/28/p2895.jpg></CENTER></P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input consists of a number of cases. Each case lists all of the bombs dropped on one day of your rule. The first line of case contains n, the number of bombs. The next n lines each contain the x and y coordinates where one bomb exploded, and its destruction radius. There will be at most <B>100</B> bombs. Coordinates given are real numbers between <B>0</B> and <B>100</B>, and the radius is a real number between <B>0</B> and <B>10</B>.</P><P>There will be at most <B>50</B> cases. The last day of bombing will be followed by a line containing <B>0</B>. This case must not be processed.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each case, output the area of destruction from all of the bombs from that day, accurate to three decimal places.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
0 0 10
2
0 0 10
0 10 10
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
314.159
505.482 
</PRE><p>
______________________________________________________
2896||||||false||||||
<P>
Given an alphabet S, and a probability Prob(a) for each <IMG SRC="http://livearchive.onlinejudge.org/external/28/p2896b.gif>, a binary prefix code represents each a in S as a bit string B(a), such that B(a<SUB>1</SUB>) is not a prefix of B(a<SUB>2</SUB>) for any a<SUB>1</SUB>&ne;a<SUB>2</SUB> in S.</P>

<P>
Huffmans algorithm constructs a binary prefix code by pairing the two least probable elements of S, a<SUB>0</SUB> and a<SUB>1</SUB>. a<SUB>0</SUB> and a<SUB>1</SUB> are given codes with a common (as yet to be determined) prefix p and differ only in their last bit: B(a<SUB>0</SUB>) = p<SUB>0</SUB> while B(a<SUB>1</SUB>) = p<SUB>1</SUB>. a<SUB>0</SUB> and a<SUB>1</SUB> are removed from S and replaced by a new element b with Prob(b) = Prob(a<SUB>0</SUB>) + Prob(a<SUB>1</SUB>). b is an imaginary element standing for both a<SUB>0</SUB> and a<SUB>1</SUB>. The Huffman code is computed for this reduced S, and p is set equal to B(b). This reduction of the problem continues until S contains one element a represented by the empty string; that is, when S = {a}, B(a) = &epsilon;.
</P>

<P>
Huffmans code is optimal in that there is no other prefix code with a shorter average length defined as:<BR><BR>
<CENTER><IMG SRC="http://livearchive.onlinejudge.org/external/28/p2896b.gif></CENTER>
</P>

<P>
One problem with Huffman codes is that they dont necessarily preserve any ordering that the elements may have. For example, suppose S =  {A, B, C} and Prob(A) = 0.7, Prob(B) = 0.1, Prob(C) = 0.2. A Huffman code for S is B(A) = 1, B(B) = 00, B(C) = 01. The lexicographic ordering of these strings is B(B), B(C), B(A) [i.e. 00,01,1], so the coding does not preserve the original order A, B, C. Therefore, algorithms like binary search might not work as expected on Huffman-coded data.<BR><BR>
<CENTER><IMG SRC="http://livearchive.onlinejudge.org/external/28/p2896b.gif></CENTER>
<BR><BR>Given an ordered set S and Prob, you are to compute an ordered prefix code - one whose lexicographic order preserves the order of S.
</P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input consists of several data sets. Each set begins with <B>0&lt;n&lt;100</B>, the number of elements in <B>S</B>. n lines follow; the <B>i-th</B> line gives the probability of <B>a<SUB>i</SUB></B>, the i-th element of S. Each probability is given as <B>0.dddd</B> (<I>that is, with exactly four decimal digits</I>). The probabilities sum to <B>1.0000</B> exactly. A line containing <B>0</B> follows the last data set.
</P>

<P>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each data set, compute an optimal ordered binary prefix code for S. The output should consist of one line giving the average code length, followed by n lines, with the i-th line giving the code for the i-th element of S. If you have solved the problem, these n lines will be in lexicographic order. <I>If there are many optimal solutions, choose any one.</I>
</P>

<P>
Output an empty line between cases.
</P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3
0.7000
0.1000
0.2000
3
0.7000
0.2000
0.1000
0
</PRE>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
1.3000
0
10
11
1.3000
0
10
11
</PRE>
<p>

______________________________________________________
2897||||||false||||||
<P>
The population of Mars has increased rapidly and so has the traffic on its highways. This not only increased traffic jams but also made it difficult to locate outlaws in rush hours. So, the traffic authority has decided to establish a monitoring system on the highway. The idea is like this  they will setup some traffic cameras at some strategic points. These cameras will constantly monitor the traffic passing by (in both directions) and record the video footage for future analysis. The scientists working at Mars are pretty smart. They have a large number of cities and they designed the highways as segments between these cities (and nothing else). What this means is that each highway segment starts and finishes at exactly two different city junctions. No two highways meet anywhere other than at a city junction. Also note that all highway segments allow two-way traffic. In order to avoid theft of cameras, the traffic authority wants to setup cameras only at these city junctions. The cameras can take pictures from all directions simultaneously. So a camera at a city junction can monitor all the highway segments ending at that junction.
</P>

<P>
Imagine yourself as a scientist in Mars. You are given a certain number of cameras and a description of all highway segments you need to monitor. You are to determine whether it is possible to monitor all the highway segments using the given number of cameras. Moreover, if it is possible indeed, you are to identify the city junctions where you may place the cameras.<BR><BR>
<CENTER><IMG SRC="http://livearchive.onlinejudge.org/external/28/p2897.jpg></CENTER>
</P>


<P>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file will contain multiple test cases. First line of input contains a single integer that specifies how many test cases you have in the input (2 in sample input). Actual test data starts from the next line.
</P>

<P>
First line of test data contains three integers: <B>N, 1&lt;=N&lt;=1000</B>, <B>H</B> and <B>K</B>, <B>1&lt;=K&lt;=18</B>. Here N is the number of city junctions, H is the number of highway segments among them and K is the number of cameras. In the first test case of sample input we have N = 5, H = 7 and K = 2. Next H lines describe the highway segments, one segment in each line. Each highway segment is described by two integers x and y which specify that we have a (two-way) highway segment between city junctions x and y. Next test case begins at the end of this highway segment list. You can assume that there is at most 15 test cases.
</P>
<P>
<B>(A cautionary note: The number of city junctions can be as high as 1000)</B>
</P>

<P>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, first you have to print the test case number as shown in the sample output. Then you have to print "<B>yes</B>" or "<B>no</B>" depending on whether you can monitor all the described highway segments with at most the given number of cameras. Moreover, if your answer is "yes", you have to print a list of city junctions (in any order) where you will setup the cameras. Note that there can be multiple such lists. In this case you may print any such list that satisfies the requirement. The entire output corresponding to a test case must be in a single line.
</P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
2
5 7 2
1 2
1 3
1 5
2 4
2 5
3 5
4 5
5 7 3
1 2
1 3
1 5
2 4
2 5
3 5
4 5
</PRE>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
Case #1: no
Case #2: yes 1 2 5
</PRE>
<p>

______________________________________________________
2898||||||false||||||
<P>Please look at the picture below: A solid cube is placed within a pyramid shaped frame. The base of the pyramid frame is square <B>ABCD</B>. The length and width of this base is <B>l</B>, (The image below shows <B>l</B> and <B>w</B>. Assume that <B>w</B> equals <B>l</B>) and the height of the pyramid frame is <B>h</B>. The length of one (or all) side of the solid cube is <B>a</B>. Point <B>A</B> is considered the origin, x-axis is along <B>AX</B> and y-axis is along <B>AY</B>. So the coordinates of <B>A</B>, <B>B</B>, <B>C</B>, <B>D</B> are <B>(0, 0)</B>, <B>(l, 0)</B>, <B>(l, l)</B> and <B>(0, l)</B> respectively. The peak of the pyramid frame is <B>E</B> which is straight above the center of the base <B>ABCD</B>. The center of the base of the cube is <B>O(l/2,l/2)</B> which is also the center of the base of the pyramid and <B>FG</B> makes an angle <B>&theta;(0&lt;&theta;&lt;90)</B> with x-axis. Surely for many values of <B>a</B> or <B>&theta;</B> the cube will not fit within the pyramid frame. Your job is to detect situations whether the cube fits within the pyramid and if it does fit then find the volume of the combined object.<BR><BR><CENTER><IMG SRC="http://livearchive.onlinejudge.org/external/28/p2898.jpg></CENTER></P><P><B>Figure:</B> A square placed within a pyramid frame. Please note that the image above is not exact with the problem statement. In our problem the length and width of the base of the pyramid are equal <B>(l=w)</B>. And in our problem the square is placed right at the center of the base of the pyramid. That is not the case in the figure above.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file contains several sets of input. The first line of the input file contains an integer N that indicates how many sets of input are there. Each of the next N lines contains a single set of input. All numbers in the input are less than <B>200</B>.</P><P>Each set contains four positive integers <B>l</B>, <B>h</B>, <B>a</B>, <B>&theta;</B>.</P><P>There will be no such inputs which will cause floating-point errors to produce different outputs.</P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each set of input you must produce two lines of output. The first line should contain the serial of the output as shown in the output for sample input. If for the given input it is impossible to fit the cube within the pyramid shaped frame (Some parts of the cube may be outside the pyramid keeping the shape of the frame intact) print in the second line "<B>IMPOSSIBLE.</B>". Otherwise in the second line print the volume of the combined object. This volume should have three digits after the decimal point.</P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
10 10 10 45
10 10 1 50
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1:
IMPOSSIBLE.
Case 2:
333.333
</PRE><p>
______________________________________________________
2899||||||false||||||
<P>You are part of a team working on the simulation of a dynamic system of particles interacting according to classical mechanics -- Newtonian physics with gravitational and electromagnetic forces. Your part of the problem solution is to bring the system into a standard orientation following the simulation based on rotating the coordinate system (or, if you like, you can think of it as rotating all of the particles).<P>In the final coordinate system, the first three particles are to lie in a plane parallel with the <SPAN CLASS="MATH"><I>XY</I></SPAN> plane, either on or above the <SPAN CLASS="MATH"><I>XY</I></SPAN> plane. In addition, the first particle is to lie in the <SPAN CLASS="MATH"><I>YZ</I></SPAN> plane with a non-negative <SPAN CLASS="MATH"><I>Y</I></SPAN> coordinate. If the first three points do <B>not</B> define a plane (that is, they either are not distinct or are collinear), print an error message and go to the next problem.<P>Subscripting the first particle as subscript 0, the second as 1, and the third as 2, these conditions are summarized thus:<P><UL><LI><SPAN CLASS="MATH"><I>z</I><SUB>0</SUB> = <I>z</I><SUB>1</SUB> = <I>z</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2899img1.png ALT="$ \ge$"> 0</SPAN> </LI><LI><SPAN CLASS="MATH"><I>x</I><SUB>0</SUB> = 0</SPAN>; <SPAN CLASS="MATH"><I>y</I><SUB>0</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/28/2899img1.png ALT="$ \ge$">0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; note that you <B>may</B> have <I>y</I><SUB>0</SUB> = 0</SPAN> </LI></UL><P>Only the coordinate system rotates; the particles retain their positions with respect to each other. If youre thinking of this as a rotation of the particles, it is to be a rigid-body rotation with respect to the origin of the coordinate system.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Sets of problem specifications:<P><DL COMPACT><DT>(1)</DT><DD>Number of particles in the complete system, followed by descriptive textual information (to the end of the line) that needs to be retained for output, preserving any leading blanks and/or tabs.</DD><DT>(2)</DT><DD>The required number of triples of numbers, giving the <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, and <SPAN CLASS="MATH"><I>z</I></SPAN> coordinates as white-space delimited numbers (they may be on the same line or on successive lines), without any descriptive text or commas to discard.</DD><DT>(3)</DT><DD>A blank line separating problems.</DD></DL><P>The input data set ends when a system of fewer than three particles is specified. (It will in fact be zero.) This trailer record will terminate with an end-of-line before the end-of-file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each valid problem specification, list on separate lines<P><DL COMPACT><DT>(1)</DT><DD>Number of particles in the complete system, followed by the descriptive textual information from the input file, reproducing <SPAN ID="txt63">exactly</SPAN> the spacing of the input.</DD><DT>(2)</DT><DD>The required number of triples of numbers, giving the <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, and <SPAN CLASS="MATH"><I>z</I></SPAN> coordinates, separated by a single blank and with only three digits to the right of the decimal point. Note that you may report a value of `<TT>-0.000</TT>' in case the value is small and negative.</DD><DT>(3)</DT><DD>A blank line. This includes a blank line at the end of the file.</DD></DL><P>For an invalid problem specification, print the following message:<P><P><BR>`<TT>Illegal data: points do not define a plane</TT>'<P><P><BR>followed by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6  octahedral symmetry obscured by rotation
0.500000 0.500000 -0.707107
-0.146447 0.853553 0.500000
-0.853553 0.146447 -0.500000
-0.500000 -0.500000 0.707107
0.146447 -0.853553 -0.500000
0.853553 -0.146447 0.500000

3   Duplicate point test
1
2
3
 1 2 3
  5
   3
    1

4   null operation test
 0  0  3
 0 -3  3
 2  3  3
-1 -2 -3

0   termination record
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample output</A>&nbsp;</FONT></H2><P><PRE>
6  octahedral symmetry obscured by rotation
0.000 0.816 0.577
0.707 -0.408 0.577
-0.707 -0.408 0.577
-0.000 -0.816 -0.577
-0.707 0.408 -0.577
0.707 0.408 -0.577

Illegal data:  points do not define a plane

4   null operation test
0.000 0.000 3.000
0.000 -3.000 3.000
2.000 3.000 3.000
-1.000 -2.000 -3.000
</PRE><P>
______________________________________________________
2900||||||false||||||
<P>Simulate a locked spinner puzzle.<P><P><BR>A locked spinner puzzle is a puzzle where you can only change wheels in groups. It is a common puzzle to achieve some value on the spinners with by only changing them in the allowed groups.<P>Assume a row of <SPAN CLASS="MATH"><I>D</I></SPAN> numbered wheels, such as what is found on a combination lock on a briefcase.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2900.jpg ALT="\epsfbox{p2900.eps}"></DIV><P><DIV ALIGN="CENTER">(example: wheels of a briefcase lock)</DIV><P>Each wheel will be labeled sequentially with the digits 0 through 9. The initial state of the wheels is part of the problem specification.<P>Below this are a series of <SPAN CLASS="MATH"><I>B</I></SPAN> buttons with labels that are <SPAN CLASS="MATH"><I>D</I></SPAN> digits long. For example, <SPAN CLASS="MATH"><I>D</I></SPAN> may be 4 and the labels are 1000 1200 1002 0111 and 0100. Pressing the button labeled 1000 moves the first wheel once, but leaves the others alone, while pressing the button labeled 1002 moves the first wheel once and the fourth wheel twice, leaving the center button unchanged.<P>Your task is to simulate such a locked spinner puzzle, providing the final readout of the wheels.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will be several spinner puzzles. Each puzzle will be <SPAN CLASS="MATH"><I>D</I></SPAN> digits (at most 10) representing the starting positions of the wheels. Following this, each line will have the button label for which button is pressed next. The end of each spinner puzzle will be marked with the character `<TT>x</TT>' alone on a single line. End of the input file will be marked with the character `<TT>z</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output file should print the final positions of each spinner puzzles wheels. Provide the output header `<TT>Spinlock Results</TT>' on the first line. Each puzzle follows on a separate line, formatted as below:<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0001
1003
0206
0034
1111
1003
x
91234567
12340051
33402401
x
z
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Spinlock Results
3348
36976919
</PRE><P>
______________________________________________________
2901||||||false||||||
<P>Your company has recently been awarded the contract to keep the town streets painted. A proper job will take you two months to finish, but elections are coming soon and the Mayor wants it done sooner. The Mayor called your company's director; the company's director called your boss; and your boss called you. Due to a lack of underlings to delegate to, this is now your problem.<P>You have quickly acquired some knowledge of the Mayors daily activities by buying a supermarket tabloid. The newspaper tells you that the Mayor is an efficiency freak that refuses to travel any route between his starting point and his destination that is not of minimum length (note that there can be more than one path of minimum length,) and it provides a list of every place in town he visits. However, it fails to inform you of the order in which he visits these places.<P>You quickly decide that the best solution is to paint every bit of road the Mayor can see, in the hopes that he will think you are done early. This subterfuge will buy you extra time to finish the job in the rest of the town.<P><P><BR>Given a map of the city grid and a list of the places the Mayor visits, return the number of city blocks you need to paint. Assume that the Mayor can only see streets he travels on. For the sake of simplicity, the Mayor will only travel between street corners. All city blocks are the same length.<P><P><BR><B>Hint:</B> you only need to consider valid paths. If a location is unreachable from and to any other, this is fine.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file begins with the number of test cases it contains. After that, the test cases appear one after the other, each preceded by a line of white space.&nbsp; The input file will always end with an end-of-line (EOL.)<P>Each test case contains the city grid, followed by a number specifying the number of locations the Mayor can visit, followed by the locations in row-column order (zero based, the origin being the northwest corner of town.) The city grid is described by two lines of text, each at least 2 and at most 10 characters long. The first line contains the directions of the East-West streets (`<TT>E</TT>', `<TT>W</TT>', or `<TT>T</TT>' for two-way.) The second line contains the directions of the North-South streets (`<TT>N</TT>', `<TT>S</TT>, or `<TT>T</TT>'.) Every location specified will be valid for the provided street grid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output begins with a case number (starting at one) followed by a line stating how many man-hours are required. See sample below for the exact format. Print a blank line after every output case (this means the output will have two newlines at the end before the end-of-file.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

EE
SS
2
0 0
1 1

EW
TT
2
0 0
1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case \#1:
4 street blocks need to be painted.

Case \#2:
4 street blocks need to be painted.
</PRE><P>
______________________________________________________
2902||||||false||||||
<P>Suppose seven supervisors each get to hire a new person for their department. There are <SPAN CLASS="MATH"><I>N</I></SPAN> people to be placed in these <SPAN CLASS="MATH"><I>N</I></SPAN> departments. Each supervisor interviews all <SPAN CLASS="MATH"><I>N</I></SPAN> people, and ranks them according to how much she wants each of them in her department (1 being ``really want" and <SPAN CLASS="MATH"><I>N</I></SPAN> being ``really dont want"). In turn, each of the <SPAN CLASS="MATH"><I>N</I></SPAN> candidates ranks each of the supervisors as to how much that person would like to work for that supervisor (again, 1 is ``really want to work for him/her" and <SPAN CLASS="MATH"><I>N</I></SPAN> is ``really dont want to work for him/her"). Given the scores that each supervisor has for each candidate, and the scores each candidate has for each manager, write a computer program to determine the ``best match" of candidates to supervisors. The ``best match" is determined by finding the distribution that leads to the highest overall satisfaction for all people. The closer a person is to her number one choice, the better. If everyone gets their number one choice, the average difference will be 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file will contain a single integer greater than 0 specifying the number of data sets.<P>The next line will contain a single integer value <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $0 <
N < 15$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 15</SPAN>, representing the number of supervisors (and the number of employees - there are <SPAN CLASS="MATH"><I>N</I></SPAN> supervisors and <SPAN CLASS="MATH"><I>N</I></SPAN> employees).<P>The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines will be the preferences of each of the <SPAN CLASS="MATH"><I>N</I></SPAN> supervisors. Each line will contain <SPAN CLASS="MATH"><I>N</I></SPAN> integer entries (1 through <SPAN CLASS="MATH"><I>N</I></SPAN> for employees 1 through <SPAN CLASS="MATH"><I>N</I></SPAN>), each separated by whitespace, that represents the preferences of that supervisor from most preferred to least preferred. More specifically, the first entry on the line will represent that supervisors first choice, the second entry her second, and so on.<P>The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines will be the preferences of the <SPAN CLASS="MATH"><I>N</I></SPAN> employees, in the same format as the supervisors.<P>All lines of data in the input file will end with a carriage return.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, write the data set number (starting with 1) followed by the best average difference written to six digits of precision to the right of the decimal point. On the next line, show which best match it was (starting with 1). On the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines, show each supervisor (starting with 1) followed by the employee with which she was matched (1 per line).<P><P><BR><B>NOTE:</B> if there is more than one best match, matches should be listed in ascending permuted order (see sample output).<P>Separate each data set with one blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
7
1 2 3 4 5 6 7
2 1 3 4 5 6 7
3 1 2 4 5 6 7
4 1 2 3 5 6 7
5 1 2 3 4 6 7
6 1 2 3 4 5 7
7 1 2 3 4 5 6
1 2 3 4 5 6 7
2 1 3 4 5 6 7
3 1 2 4 5 6 7
4 1 2 3 5 6 7
5 1 2 3 4 6 7
6 1 2 3 4 5 7
7 1 2 3 4 5 6

2
1 2
2 1
1 2
1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Data Set 1, Best average difference: 0.000000
Best Pairing 1
Supervisor 1 with Employee 1
Supervisor 2 with Employee 2
Supervisor 3 with Employee 3
Supervisor 4 with Employee 4
Supervisor 5 with Employee 5
Supervisor 6 with Employee 6
Supervisor 7 with Employee 7

Data Set 2, Best average difference: 0.250000
Best Pairing 1
Supervisor 1 with Employee 1
Supervisor 2 with Employee 2
</PRE><P>
______________________________________________________
2903||||||false||||||

<P>
Mom and dad have a problem: their
child John never puts his toys away when he is finished playing with them. They
gave John a rectangular box to put his toys in. Unfortunately, John is
rebellious and obeys his parents by simply throwing his toys into the box. All
the toys get mixed up, and it is impossible for John to find his favorite toys
anymore.

<P>
John's parents came up with the
following idea. They put cardboard partitions into the box. Even if John keeps
throwing his toys into the box, at least toys that get thrown into different
partitions stay separate. The box looks like this from the top:

<P>
<DIV ALIGN="CENTER">
 =6.5in
<!-- MATH
 $\epsfbox{p2903.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2903img1.png
 ALT="\epsfbox{p2903.eps}">
</DIV>

<P>
For each <SPAN CLASS="MATH"><I>i</I> &gt; 0</SPAN> such that there
exists a partition with <SPAN CLASS="MATH"><I>i</I></SPAN> toys, determine how many partitions have <SPAN CLASS="MATH"><I>i</I></SPAN> toys.
Provide a list of the values of <SPAN CLASS="MATH"><I>i</I></SPAN> and their
count of associated partitions.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of a number of
cases. The first line consists of six integers <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>. The number of
cardboards to form the partitions is <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(0 < n \le 1000)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2903img1.png
 ALT="$ \le$">1000)</SPAN> and the number of
toys is given in <SPAN CLASS="MATH"><I>m</I></SPAN> <!-- MATH
 $(0 < m \le 1000)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2903img1.png
 ALT="$ \le$">1000)</SPAN>. The coordinates of the upper-left
corner and the lower-right corner of the box are <!-- MATH
 $(x_{1},y_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> and <!-- MATH
 $(x_{2},y_{2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>,
respectively. The following <SPAN CLASS="MATH"><I>n</I></SPAN> lines
each consists of two integers <SPAN CLASS="MATH"><I>U</I><SUB>i</SUB></SPAN> <SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN>, indicating that the ends of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th
cardboard is at the coordinates <!-- MATH
 $(U_{i},y_{1})$
 -->
<SPAN CLASS="MATH">(<I>U</I><SUB>i</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> and <!-- MATH
 $(L_{i},y_{2})$
 -->
<SPAN CLASS="MATH">(<I>L</I><SUB>i</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>. You may assume that the
cardboards do not intersect with each other. The next m lines each consists of
two integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN> specifying where the <SPAN CLASS="MATH"><I>i</I></SPAN>-th toy has landed in the box. You may
assume that no toy will land on a cardboard or on the boundary of the box.

<P>
The input is terminated by a line consisting of a single
`<TT>0</TT>'. Each line of input in the file is
terminated by the end of line character (``<!-- MATH
 $\backslash$
 -->
<SPAN CLASS="MATH">&#92;</SPAN>n'').

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each box, first provide a
header stating ``Box" on a line of its own.
After that, there will be one line of output per count <SPAN CLASS="MATH">(<I>i</I> &gt; 0)</SPAN> of
toys in a partition. The value <SPAN CLASS="MATH"><I>i</I></SPAN> will
be followed by a colon and a space, followed the number of partitions
containing <SPAN CLASS="MATH"><I>i</I></SPAN> toys. Output will be
sorted in ascending order of <SPAN CLASS="MATH"><I>i</I></SPAN> for each box.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 10 0 10 100 0
20 20
80 80
60 60
40 40
5 9
15 9
95 9
25 9
65 9
75 9
35 9
45 9
55 9
85 9
5 6 0 10 60 0
4 3
15 30
3 1
6 8
10 10
2 1
2 8
1 5
5 5
40 9
7 9
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Box
2: 5
Box
1: 4
2: 1
</PRE>

<P>

______________________________________________________
2904||||||false||||||
<P>Your grandmother wanted to help you by doing data entry in your science project, so you gave her the hard-copy print-outs and sat her at your computer. She learned touch typing as a young woman preparing to be a secretary, and she is <EM>very</EM> good at it, reproducing exactly the text and its spacing.<P>There is one problem, though. She learned typing on the typewriters in use in the 1950s. Numbers were available only in the number row above the alphabetic keys (just as on present keyboards), and they ran from 2 to 9. For the number one (<TT>1</TT>) the typist used a lower-case el (<TT>l</TT>), and for the number zero (<TT>0</TT>) she used an upper-case oh (<TT>O</TT>).<P>The data include alphabetic text segments as well as numeric. That means that a simple ``find and replace" edit is inappropriate.<P><P><BR>Write the filter that will generate appropriate numeric data according to the following context rule: a candidate character (``<TT>l</TT>" or ``<TT>O</TT>") should be replaced with the appropriate numeric character if it is in a white-space delimited field as described here:<P><UL><LI>The field may begin with a minus sign or a plus sign. </LI><LI>The field may contain one decimal point in any position, or it may have none. </LI><LI>All other characters are either numeric digits, or candidate characters. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input text is terminated by the end-of-file, which may or may not be preceded by an end-of-line. Note that you are reproducing the input text <EM>exactly</EM> except for filtering out the use of `<TT>l</TT>' for `<TT>1</TT>' and the use of `<TT>O</TT>' for `<TT>0</TT>'.<P><P><BR><B>Warning:</B> use the <EM>specified</EM> context rule as stated above, <B>not</B> what you would have chosen as the transformation rules. For instance, this will <EM>not</EM> handle exponential notation correctly or arithmetic expressions without embedded blanks. <P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is to be identical to the input except for this filtering, including reproducing the spacing.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
l23.O5 liters water              Use distilled or at least deionized
ll.OOl ml O-negative blood       Note:  negative on ALL Rh factors
l3.2Ol ml O-positive blood       Use procedure OOO.OOl2.l234
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
123.05 liters water              Use distilled or at least deionized
11.001 ml O-negative blood       Note:  negative on ALL Rh factors
13.201 ml O-positive blood       Use procedure OOO.OOl2.l234
</PRE><P>
______________________________________________________
2905||||||false||||||
<P>A palindromic decimal integer reads the same forward and backward. For example, the following numbers are palindromic.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">6, 55, 282, 5005, 78187, 904409, 3160613, 11111111</DIV><P></P><P>Palindromic integers are plentiful. In fact, any integer not divisible by 10 has an infinite number of multiples that are palindromic. (The standard representation of a nonzero multiple of 10 cannot be palindromic since its reversal would have a leading 0.)<P>Write a program to determine, for a given positive integer, how many of its positive multiples are palindromes of a given length.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input will specify an integer <SPAN CLASS="MATH"><I>n</I></SPAN> indicating the number of problem instances to follow, one to a line. Each of the ensuing <SPAN CLASS="MATH"><I>n</I></SPAN> lines will specify a pair of positive integers <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>s</I></SPAN> separated by a single space, with <!-- MATH
 $1 < m < 1000$
 --><SPAN CLASS="MATH">1 &lt; <I>m</I> &lt; 1000</SPAN>, <SPAN CLASS="MATH"><I>s</I> &lt; 20</SPAN>. (For <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>s</I></SPAN> in this range, there are fewer than <SPAN CLASS="MATH">2<SUP>32</SUP></SPAN> palindromes among the <SPAN CLASS="MATH"><I>s</I></SPAN>-digit multiples of <SPAN CLASS="MATH"><I>m</I></SPAN>.) Each line will terminate with an end-of-line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should indicate for each <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>s</I></SPAN>, exactly how many <SPAN CLASS="MATH"><I>s</I></SPAN>-digit positive palindromes are divisible by <SPAN CLASS="MATH"><I>m</I></SPAN>, with one problem instance per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
3 1
25 3
12 4
30 3
81 6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
2
7
0
0
</PRE><P><P><P><BR><B>Explanation.</B> There are three positive 1-digit multiples of 3, namely, 3, 6, and 9; all 1-digit numbers are trivially palindromes. Among the 3-digit palindromes, 525 and 575 are multiples of 25. The 4-digit multiples of 12 that are palindromes are 2112, 2772, 4224, 4884, 6336, 6996, 8448. There are no positive palindromic numbers ending in 0 (since we do not allow leading 0's). No 6-digit palindromes are divisible by 81.<P>
______________________________________________________
2906||||||false||||||
<P>Action Comic Magazine's budget for their new Intranet order entry site was pretty low, so they decided to build their own database engine. It stores a set of customer accounts and is able to retrieve balances and update with a new balance.&nbsp; The new balance is calculated and provided to the database by the client application.&nbsp; This is the good news!<P>The <B>bad</B> news is that ACM really didn't understand transactions or how databases protect the integrity of their data. In fact, customers accounts can be reviewed and updated by multiple users at the same time, without the transactional controls normally found in a database engine. The result is a set of transactions having steps mixed together (interleaved), with no assurance that the final result is correct.<P><P><BR>A sample history of a set of two interleaved transactions illustrates the issue:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER RULES=GROUPS><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Transaction ID</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Action</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Customer ID</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Step</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Retrieve</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Retrieve</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Update</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Update</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Update</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR></TBODY></TABLE></DIV><P><P><BR>As you can see, Transaction 2's update of Customer A will be overwritten by Transaction 1's update to the same customer. (This is an example of a ``lost update".)<P>You have been hired to determine which sets of transactions need to be subjected to a detailed audit. You will do this by determining which transaction sets would have provided the same ending data had they been serialized in a properly-written database.<P><P><BR><B>Definitions:</B><P><DL><DT><STRONG>Conflicting pairs</STRONG></DT><DD>: A pair of steps are in ``conflict" if they are not in the same transaction, they access the same customer account, and at least one step is an update. In the example above, conflicts exist between steps 1 and 4, 2 and 3, and 4 and 5.<P></DD><DT><STRONG>Serial History</STRONG></DT><DD>: A history is serial if for any two transactions T<SPAN CLASS="MATH"><SUB>i</SUB></SPAN> and T<SPAN CLASS="MATH"><SUB>j</SUB></SPAN> in it, where <SPAN CLASS="MATH"><I>i</I> &lt; &gt; <I>j</I></SPAN>, all operations from T<SPAN CLASS="MATH"><SUB>i</SUB></SPAN> are ordered in <SPAN CLASS="MATH"><I>s</I></SPAN> before all operations from T<SPAN CLASS="MATH"><SUB>j</SUB></SPAN>, or vice versa. In the example above, there are two possible serial histories (either all steps from transaction #1 followed by all steps from transaction #2, or the reverse).</DD></DL><P><P><BR><B>Problem Requirement</B>:<P>For each interleaved transaction set history (<SPAN CLASS="MATH"><I>s</I></SPAN>), you must determine if there is an equivalent <SPAN ID="txt66">serial history</SPAN> (<SPAN CLASS="MATH"><I>s'</I></SPAN>) that contains the same steps and where all <SPAN ID="txt67">conflicting pairs</SPAN> of steps occur in the same order in both histories. Transaction sets meeting <B>both</B> these criteria need not be subjected to further audit.<P>The example transaction above does <B>not</B> meet the requirements of this problem since situating Transaction 1 before Transaction 2 would reverse the order of the conflicting pair {step 4, step 5}, while situating Transaction 2 first would reverse the orders in the conflicting pair {step 1, step 4} as well as the order in the conflicting pair {step 2, step 3}.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will be several transaction set histories. The first line will indicate the number of histories to analyze.<P>Each history's first line is 1 digit <SPAN CLASS="MATH"><I>h</I></SPAN> indicating the number of steps in the history. (<B>Note:</B> while the input will not specify the number of transactions in a history, you may assume <!-- MATH
 $0 < number \ of \ transactions < 20$
 --><SPAN CLASS="MATH">0 &lt; <I>number</I>&nbsp;<I>of</I>&nbsp;<I>transactions</I> &lt; 20</SPAN>.) The next <SPAN CLASS="MATH"><I>h</I></SPAN> lines of input contain the transaction number, `<TT>R</TT>' (retrieve) or `<TT>U</TT>' (update), and the associated Customer ID as shown below. One space separates each item in the row. An entry of `<TT>1 R 55</TT>' would indicate <EM>Transaction #1, `Retrieve,' Customer #55</EM>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your output will list each history and whether it requires investigation, as seen below. There are four spaces between the colon and the result for each history.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4
1 R 55
2 R 55
2 U 55
1 U 55
8
1 R 55
2 R 55
1 R 70
1 U 55
2 U 80
3 R 70
3 U 80
3 U 70
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
History \#1: Needs Investigation
History \#2: OK
</PRE><P><P><P><BR><B>Note:</B> in the case of History #2 in the example above, the valid serial history would be to perform Transaction #2 first, followed by Transaction #1, followed by Transaction #3.<P>
______________________________________________________
2907||||||false||||||
<P>Reduce the number of digits.<P><P><BR>An experimental physicist generates a great deal of data from experiments that he performs. The data generated from these experiments has a special property, and he wants to take advantage of this property to reduce the amount of space needed to store the results.<P>The data is generated in pairs of numbers, where the first number is always less than or equal to the second number. The way that the physicist wants to store these numbers is similar to the how some people abbreviate a range of numbers in a book. For example, when they refer to pages 11 through 18 in a book, they will sometimes denote it as 11-8.<P>In particular, here are the rules for decoding the ``compressed" second number:<P><P><BR><B>Some notation definitions:</B><P><PRE><TT>
		  The first of a pair of numbers is denoted by <SPAN CLASS="MATH"><I>F</I></SPAN>. 
<BR>
For example, in ``18482-02", <SPAN CLASS="MATH"><I>F</I></SPAN> = 18482  
<BR>
The second of a pair of numbers (in compressed form) is denoted by <SPAN CLASS="MATH"><I>C</I></SPAN>.  
<BR>
For example, in ``18482-02", <SPAN CLASS="MATH"><I>C</I></SPAN> = 02   
<BR>
The second of a pair of numbers (in decoded form) is denoted by <SPAN CLASS="MATH"><I>R</I></SPAN>.  
<BR>
For example, in ``18482-02", <SPAN CLASS="MATH"><I>R</I></SPAN> = 18502         
<BR><SPAN CLASS="MATH"><I>MSD</I>(<I>x</I>, <I>y</I>)</SPAN> refers to the `<SPAN CLASS="MATH"><I>x</I></SPAN>' most significant digits of `<SPAN CLASS="MATH"><I>y</I></SPAN>' when `<SPAN CLASS="MATH"><I>y</I></SPAN>' is
denoted in base ten.
<BR>
For example: <!-- MATH
 $MSD(3,19283) = 192$
 -->
<SPAN CLASS="MATH"><I>MSD</I>(3, 19283) = 192</SPAN> 
<BR><SPAN CLASS="MATH"><I>LSD</I>(<I>x</I>, <I>y</I>)</SPAN> refers to the `<SPAN CLASS="MATH"><I>x</I></SPAN>' least significant digits of `<SPAN CLASS="MATH"><I>y</I></SPAN>' when `<SPAN CLASS="MATH"><I>y</I></SPAN>' is
denoted in base ten.
<BR>
For example: <!-- MATH
 $LSD(2, 48290) = 90$
 -->
<SPAN CLASS="MATH"><I>LSD</I>(2, 48290) = 90</SPAN> 
<BR>
</TT></PRE><P><P><BR><B>The rules:</B><P><PRE><TT>
		 The number <SPAN CLASS="MATH"><I>C</I></SPAN> is always written with the fewest possible digits. 
<BR>
Consequently, if <SPAN CLASS="MATH"><I>F</I></SPAN> and <SPAN CLASS="MATH"><I>R</I></SPAN> are the <B>same</B> (which <EM>can</EM> happen), just that number is printed. 
<BR>
If the number <SPAN CLASS="MATH"><I>C</I></SPAN> is larger than <SPAN CLASS="MATH"><I>F</I></SPAN>, then <SPAN CLASS="MATH"><I>R</I></SPAN> is the same as <SPAN CLASS="MATH"><I>C</I></SPAN>. 
<BR>
For example, given: ``123-283", then <SPAN CLASS="MATH"><I>F</I> = 123</SPAN>, <SPAN CLASS="MATH"><I>C</I> = 283</SPAN>, and <SPAN CLASS="MATH"><I>R</I></SPAN> would be 283  
<BR><P>
If <SPAN CLASS="MATH"><I>C</I></SPAN> is less than or equal to <SPAN CLASS="MATH"><I>F</I></SPAN>, then the following rules apply:  
<BR>
<BR><!-- MATH
 $LSD(length(C), R)$
 -->
<SPAN CLASS="MATH"><I>LSD</I>(<I>length</I>(<I>C</I>), <I>R</I>)</SPAN> will always be the same as <SPAN CLASS="MATH"><I>C</I></SPAN>.   
<BR>
<BR>
If <!-- MATH
 $LSD(length(C), F)$
 -->
<SPAN CLASS="MATH"><I>LSD</I>(<I>length</I>(<I>C</I>), <I>F</I>)</SPAN> is less than <SPAN CLASS="MATH"><I>C</I></SPAN>, then <SPAN CLASS="MATH"><I>R</I></SPAN> is equal to <!-- MATH
 $MSD(length(F) - length(C),F)$
 -->
<SPAN CLASS="MATH"><I>MSD</I>(<I>length</I>(<I>F</I>) - <I>length</I>(<I>C</I>), <I>F</I>)</SPAN>, 
<BR>
prepended to the digits of <SPAN CLASS="MATH"><I>C</I></SPAN>.  
<BR><P>
For example, given: ``4137-223", then:  
<BR><SPAN CLASS="MATH"><I>F</I> = 4137</SPAN>, <SPAN CLASS="MATH"><I>C</I> = 223</SPAN>:  
<BR><!-- MATH
 $LSD(length(C),R) = 223$
 -->
<SPAN CLASS="MATH"><I>LSD</I>(<I>length</I>(<I>C</I>), <I>R</I>) = 223</SPAN> 
<BR><!-- MATH
 $MSD(4 - 3, 4137) = 4$
 -->
<SPAN CLASS="MATH"><I>MSD</I>(4 - 3, 4137) = 4</SPAN> 
<BR><SPAN CLASS="MATH"><I>R</I></SPAN> would be 4223        
<BR>
<BR>
If <!-- MATH
 $LSD(length(C), F)$
 -->
<SPAN CLASS="MATH"><I>LSD</I>(<I>length</I>(<I>C</I>), <I>F</I>)</SPAN> is greater than or equal to <SPAN CLASS="MATH"><I>C</I></SPAN>, then <SPAN CLASS="MATH"><I>R</I></SPAN> is equal to10^<!-- MATH
 $(length(C))$
 -->
<SPAN CLASS="MATH">(<I>length</I>(<I>C</I>))</SPAN> 
<BR>
added to the following value: <!-- MATH
 $MSD(length(F) - length(C), F)$
 -->
<SPAN CLASS="MATH"><I>MSD</I>(<I>length</I>(<I>F</I>) - <I>length</I>(<I>C</I>), <I>F</I>)</SPAN>,prepended to the digits of <SPAN CLASS="MATH"><I>C</I></SPAN>.  
<BR><P>
For example, given: ``8543-13", then  
<BR><SPAN CLASS="MATH"><I>F</I> = 8543</SPAN>, <SPAN CLASS="MATH"><I>C</I> = 13</SPAN>:  
<BR><!-- MATH
 $LSD(length(C),R) = 13$
 -->
<SPAN CLASS="MATH"><I>LSD</I>(<I>length</I>(<I>C</I>), <I>R</I>) = 13</SPAN> 
<BR><!-- MATH
 $MSD(4 - 2, 8543) = 85$
 -->
<SPAN CLASS="MATH"><I>MSD</I>(4 - 2, 8543) = 85</SPAN> 
<BR>
10^(2) = 100  
<BR><SPAN CLASS="MATH"><I>R</I></SPAN> would be 8513 + 100 = 8613  
<BR>
<BR>
Please note that leading zeros on the number <SPAN CLASS="MATH"><I>C</I></SPAN> are significant. `7' is not the same as `07', 
<BR>
and neither of them are the same as `007'.      
<BR><P>
For example:                          
<BR><P>
given: ``2839-06", then <SPAN CLASS="MATH"><I>F</I> = 2839</SPAN>, <SPAN CLASS="MATH"><I>C</I> = 06</SPAN> so <SPAN CLASS="MATH"><I>R</I></SPAN> would be 2906  
<BR><P>
given: ``2839-006", then <SPAN CLASS="MATH"><I>F</I> = 2839</SPAN>, <SPAN CLASS="MATH"><I>C</I> = 006</SPAN> so <SPAN CLASS="MATH"><I>R</I></SPAN> would be 3006   
<BR>
</TT></PRE><P><P><BR>Your task is to compute the ``compressed" second number format from it's uncompressed version.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>In the input file, the first line of input specifies the number of problems in the file. Each subsequent line of input will consist of a pair of non-negative integers separated by a hyphen, where the second number is always larger than or equal to the first number. The second number will always be less than <SPAN CLASS="MATH">2<SUP>31</SUP> - 1</SPAN>. Note that the end-of-line character terminates every line in the input file, including the last one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each line of output will consist of a single number (in cases where the first and second numbers are the same) <B>or</B> of the first number, followed by a hyphen, followed by the ``compressed" version of the second number.<P>The output file has a format similar to the input file.<P><UL><LI>There is one line of output for each input problem. </LI><LI>The first number is printed out verbatim.<UL><LI>If the first and second number are the same, nothing else is printed </LI><LI>Otherwise<UL><LI>There is a hyphen between the first and second number. </LI><LI>The second number is printed out in the compressed format. </LI></UL></LI></UL></LI><LI>There are no spaces or tabs on any data line. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
10-18
83294-84137
100-200
137-137
[EOF]
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10-8
83294-137
100-00
137
[EOF]
</PRE><P>
______________________________________________________
2908||||||false||||||
<P>Simulate a locked spinner puzzle.<P><P><BR>A locked spinner puzzle is a puzzle where you can only change wheels in groups. It is a common puzzle to achieve some value on the spinners with by only changing them in the allowed groups.<P>Imagine a row of <SPAN CLASS="MATH"><I>D</I></SPAN> numbered wheels, each labeled sequentially with the digits 0 through 9. This is similar to what is on a briefcase combination lock.<P>Below this are a series of <SPAN CLASS="MATH"><I>B</I></SPAN> buttons with labels that are <SPAN CLASS="MATH"><I>D</I></SPAN> digits long. For example, <SPAN CLASS="MATH"><I>D</I></SPAN> may be 4 and the labels are 1000 1200 1002 0111 and 0100. Pressing the button labeled 1000 moves the first wheel once, but leaves the others alone, while pressing the button labeled 1002 moves the first wheel once and the fourth wheel twice, leaving the center button unchanged.<P>Your task is to simulate such a locked spinner puzzle giving the final readout of the wheels.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will be a line containing <SPAN CLASS="MATH"><I>D</I></SPAN> digits (at most 10) representing the starting positions of the wheels. Following this, each line will have the button label for which button is pressed next.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output file should have the standard header, followed by the final positions of the wheels, followed by the standard trailer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
       column   1
       1234567890
line 1:0001[EOL]
     2:1003[EOL]
     3:0206[EOL]
     4:0034[EOL]
     5:1111[EOL]
     6:1003[EOL]
      :[EOF]
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
       column   111111111122222222223
       123456789012345678901234567890
line 1:Program 1 by team 0[EOL]
     2:3348[EOL]
     3:End of program 1 by team 0[EOL]
      :[EOF]
</PRE><P>
______________________________________________________
2909||||||false||||||
<P>Encrypt secret messages.<P><P><BR>Sam wants to send secret messages to Sally, and visa versa, so they devise a simple but effective encryption scheme they can perform by hand. However, they soon begin to fall in love and their messages to each other are growing longer and longer. Therefore, they decide their encryption scheme needs to be automated. Your job is to write a computer program that will implement their ``shake, rattle and roll" encryption scheme. (Decryption will not be implemented at this time.)<P>A text message is placed into a 2D array in row major order, with each character in a unique cell of the array. If the message does not totally fill the array, the empty cells are filled with the capital letters of the alphabet starting with the letter A and going thru the letter Z (repeated as needed). For example, the message, ``Meet me at the pizza parlor" in a 6 by 6 array would look like the figure below. Note that all characters are stored as capital letters.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2909a.png ALT="\epsfbox{p2909a.eps}"></DIV><P>To encrypt this message, 3 separate operations are performed as follows:<P><DL><DT><STRONG><B>Shake</B></STRONG></DT><DD>: Each odd column is shifted up one character, with the top most character moving to the bottom of the column. Each even column is shifted down, with the bottom most chararacter moving to the top of the column. The columns are numbered starting at 1. For example:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2909a.png ALT="\epsfbox{p2909b.eps}"></DIV><P></DD><DT><STRONG><B>Rattle</B></STRONG></DT><DD>: Each odd row is shifted to the right one character, with the rightmost character moving to the leftmost column in the same row. Each even row is shifted to the left one character, with the leftmost character moving to the rightmost column in the same row. The rows are numbered starting at 1 from the top. For example:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2909a.png ALT="\epsfbox{p2909c.eps}"></DIV><P></DD><DT><STRONG><B>Roll</B></STRONG></DT><DD>: Each odd ``loop" around the matrix is rotated to the right one character, while each even ``loop" is rotated to the left one character, as shown in the figure below. ``Loops" are even or odd based on the row number of their top most row (with the top row being row 1).<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2909a.png ALT="\epsfbox{p2909d.eps}"></DIV></DD></DL><P>The matrix size is specified in the encryption key and can vary in size from 3<SPAN CLASS="MATH">&#215;</SPAN>3 to 100<SPAN CLASS="MATH">&#215;</SPAN>100. The matrix is always square.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain one or more encryption problems. Each problem takes up two lines of the file. The first line of a problem is the encryption key. The second line is the text to be encrypted. An encryption key always begins with a two digit matrix size, followed by a series of `<TT>S</TT>', `<TT>R</TT>', or `<TT>L</TT>' characters in any order. For each `<TT>S</TT>' character, a ``shake" operation is performed, for each `<TT>R</TT>' character a ``rattle" operation is performed, and for each `<TT>L</TT>' character a ``roll" operation is performed, in the order specified. A size of `<TT>00</TT>' is interpreted as 100.<P><P><BR>The encryption key is limited to 80 characters. The message is limited to 10,000 characters. Assume that the message will always fit inside the specified matrix.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Other than the standard header and trailer messages, the encrypted text is output for each problem. The length of the encrypted text is the size of the matrix squared (e.g., a 3<SPAN CLASS="MATH">&#215;</SPAN>3 matrix produces a string of length 9).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
       column   111111111122222222223
       123456789012345678901234567890
line 1:04RSRR[EOL]
     2:I love ice cream[EOL]
     3:06SRL[EOL]
     4:Meet me at the Pizza Parlor[EOL]
      :[EOF]
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
       column   1111111111222222222233333333334
       1234567890123456789012345678901234567890
line 1:Program 3 by team 0[EOL]
     2:IREAELCIMVE   OC[EOL]
     3:EIEEAGTTIMT E P ZHRZB PAORDAFLEA CMH[EOL]
     4:End of program 3 by team 0[EOL]
      :[EOF]
</PRE><P>
______________________________________________________
2910||||||false||||||

<P>
Calculate the number of toys that land in each bin of a partitioned toy box.

<P>

<P>
<BR>
Mom and dad have a problem - their child John never puts his toys away
  when he is finished playing with them. They gave John a rectangular box
to  put his toys in, but John is rebellious and obeys his parents by simply
throwing his toys into the box. All the toys get mixed up, and it is impossible
for John to find his favorite toys.

<P>
John's parents came up with the following idea. They put cardboard partitions
  into the box. Even if John keeps throwing his toys into the box, at least
  toys that get thrown into different bins stay separated. The following
diagram  shows a top view of an example toy box.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2910.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2910.png
 ALT="\epsfbox{p2910.eps}">
</DIV>

<P>
For this problem, you are asked to determine how many toys fall into
  each partition as John throws them into the toy box.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains one or more problems. The first line of a problem
  consists of six integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>. The
number of cardboard partitions is <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(0 < n \le 5000)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2910.png
 ALT="$ \le$">5000)</SPAN> and the number of toys is
<SPAN CLASS="MATH"><I>m</I></SPAN> <!-- MATH
 $(0 < m \le 5000)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2910.png
 ALT="$ \le$">5000)</SPAN>. The coordinates of the upper-left corner and the lower-right
corner  of the box are <!-- MATH
 $(x_{1},y_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> and <!-- MATH
 $(x_{2},y_{2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>,
 respectively. The following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain two integers per
 line, <!-- MATH
 $(U_{i},L_{i})$
 -->
<SPAN CLASS="MATH">(<I>U</I><SUB>i</SUB>, <I>L</I><SUB>i</SUB>)</SPAN>, indicating that the ends
 of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th cardboard partition is at the coordinates <!-- MATH
 $(U_{i}, y_{1})$
 -->
<SPAN CLASS="MATH">(<I>U</I><SUB>i</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>
 and <!-- MATH
 $(L_{i},y_{2})$
 -->
<SPAN CLASS="MATH">(<I>L</I><SUB>i</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>.  You may assume that the cardboard
 partitions do not intersect each other and that they are specified in sorted
 order from left to right. The next <SPAN CLASS="MATH"><I>m</I></SPAN> lines contain two integers
 per line, <!-- MATH
 $X_{j} Y_{j}$
 -->
<SPAN CLASS="MATH"><I>X</I><SUB>j</SUB><I>Y</I><SUB>j</SUB></SPAN> specifying where the
  <SPAN CLASS="MATH"><I>j</I></SPAN>-th toy has landed in the box. The order of the toy locations is
random. You may assume that no toy will land exactly on a cardboard partition
or outside the boundary of the box. The input is terminated by a line consisting
of a single `<TT>0</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Other than the standard header and trailer messages, the output for each
problem will be one line for each separate bin in the toy box. For each bin,
print its bin number, followed by a colon and one space, followed by the
number of toys thrown into that bin. Bins are numbered from 0
 (the leftmost bin) to <SPAN CLASS="MATH"><I>n</I></SPAN> (the rightmost bin). Separate the output
 of different problems by a single blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
       column   11111111112
       12345678901234567890
line 1:5 6 0 10 60 0[EOL]
     2:3 1[EOL]
     3:4 3[EOL]
     4:6 8[EOL]
     5:10 10[EOL]
     6:15 30[EOL]
     7:1 5[EOL]
     8:2 1[EOL]
     9:2 8[EOL]
    10:5 5[EOL]
    11:40 10[EOL]
    12:7 9[EOL]
    13:4 10 0 10 100 0[EOL]
    14:20 20[EOL]
    15:40 40[EOL]
    16:60 60[EOL]
    17:80 80[EOL]
    18: 5 10[EOL]
    19:15 10[EOL]
    20:25 10[EOL]
    21:35 10[EOL]
    22:45 10[EOL]
    23:55 10[EOL]
    24:65 10[EOL]
    25:75 10[EOL]
    26:85 10[EOL]
    27:95 10[EOL]
    28:0[EOL]
      :[EOF]
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
       column   111111111122222222223
       123456789012345678901234567890
line 1:Program 3 by team 0[EOL]
     2:0: 2[EOL]
     3:1: 1[EOL]
     4:2: 1[EOL]
     5:3: 1[EOL]
     6:4: 0[EOL]
     7:5: 1[EOL]
     8:[EOL]
     9:0: 2[EOL]
    10:1: 2[EOL]
    11:2: 2[EOL]
    12:3: 2[EOL]
    13:4: 2[EOL]
    14:End of program 3 by team 0[EOL]
      :[EOF]
</PRE>

<P>

<P>
<BR>

<SPAN  CLASS="textbf">SPECIAL NOTES:</SPAN>

<P>
This problem will be judged on accuracy and efficiency. Solutions
 requiring more than 10  second of CPU time on the judge's test data will be
 rejected.

<P>
The judges recommend that you use double precision values for
internal calculations to avoid overflow problems.

<P>

______________________________________________________
2911||||||false||||||
<P>
Let <!-- MATH
 $x_{1}, x_{2}, \ldots , x_{m}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>m</SUB></SPAN> be real numbers satisfying the following conditions: 

<P>
<DL COMPACT>
<DT>a)</DT>
<DD><!-- MATH
 $â \frac{1}{\sqrt{a}} \le x_{i} \le \sqrt{5}$
 -->
<SPAN CLASS="MATH">-<IMG
 WIDTH="27" HEIGHT="39" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2911img1.png
 ALT="$ {\frac{{1}}{{\sqrt{a}}}}$"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2911img1.png
 ALT="$ \le$"><I>x</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2911img1.png
 ALT="$ \le$"><IMG
 WIDTH="28" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2911img1.png
 ALT="$ \sqrt{{5}}$"></SPAN> ;
</DD>
<DT>b)</DT>
<DD><!-- MATH
 $x_{1} + x_{2} + \ldots + x_{m} = b \ast \sqrt{a}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> + <I>x</I><SUB>2</SUB> +...+ <I>x</I><SUB>m</SUB> = <I>b</I> <TT>*</TT> <IMG
 WIDTH="28" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2911img1.png
 ALT="$ \sqrt{{a}}$"></SPAN> for some integers <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> <SPAN CLASS="MATH">(<I>a</I> &gt; 0)</SPAN>. 
</DD>
</DL>

<P>
Determine the maximum value of <!-- MATH
 $x^{p}_{1} + x^{p}_{2} + \ldots + x^{p}_{m}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUP>p</SUP><SUB>1</SUB> + <I>x</I><SUP>p</SUP><SUB>2</SUB> +...+ <I>x</I><SUP>p</SUP><SUB>m</SUB></SPAN> for some even positive integer <SPAN CLASS="MATH"><I>p</I></SPAN>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each input line contains four integers: <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>p</I></SPAN>, <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> (<!-- MATH
 $m \le 2000, p \le 12$
 -->
<SPAN CLASS="MATH"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2911img1.png
 ALT="$ \le$">2000, <I>p</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2911img1.png
 ALT="$ \le$">12</SPAN>, <SPAN CLASS="MATH"><I>p</I></SPAN> is even). Input is correct, i.e. for each input numbers there exists <!-- MATH
 $x_{1}, x_{2}, \ldots, x_{m}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>m</SUB></SPAN> satisfying the given conditions. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input line print one number - the maximum value of expression, given above. The answer must be rounded to the nearest integer. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1997 12 3 -318 
10 2 4 -1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
189548 
6
</PRE> 

<P>

______________________________________________________
2912||||||false||||||
<P>See if a spreadsheet has a consistent formulation.<P>Any given cell of a spreadsheet can have a formula that depends on the value from some other cell. Before trying to calculate the value of a cell it is important to determine if the definition of the formula for that cell is circular.<P>Our spreadsheet only has a limited formulation for expressions:<P><P><BR>definition := <SPAN CLASS="MATH"><I>cell</I></SPAN> "<TT>=</TT>" <SPAN CLASS="MATH"><I>expression</I></SPAN><P><SPAN CLASS="MATH"><I>expression</I></SPAN> := <SPAN CLASS="MATH"><I>term</I>&nbsp;|&nbsp;<I>expression</I></SPAN> "<TT>+</TT>" <SPAN CLASS="MATH"><I>term</I>&nbsp;|&nbsp;<I>expression</I></SPAN> " " <SPAN CLASS="MATH"><I>term</I></SPAN><P><SPAN CLASS="MATH"><I>term</I></SPAN> := <SPAN CLASS="MATH"><I>factor</I>&nbsp;|&nbsp;<I>term</I></SPAN> "<TT>*</TT>" <SPAN CLASS="MATH"><I>factor</I>&nbsp;|&nbsp;<I>term</I></SPAN> "<TT>/</TT>" <SPAN CLASS="MATH"><I>factor</I></SPAN><P><SPAN CLASS="MATH"><I>factor</I></SPAN> := <SPAN CLASS="MATH"><I>number</I>&nbsp;| <I>cell</I>&nbsp;|</SPAN> "<TT>(</TT>" <SPAN CLASS="MATH"><I>expression</I></SPAN> "<TT>)</TT>"<P><SPAN CLASS="MATH"><I>number</I></SPAN> := <SPAN CLASS="MATH"><I>digit</I>&nbsp;|&nbsp;<I>number</I>&nbsp;<I>digit</I></SPAN><P><SPAN CLASS="MATH"><I>digit</I></SPAN> := "<TT>0</TT>" <SPAN CLASS="MATH">|</SPAN> "<TT>1</TT>" <SPAN CLASS="MATH">|</SPAN> "<TT>2</TT>" <SPAN CLASS="MATH">|</SPAN> "<TT>3</TT>" <SPAN CLASS="MATH">|</SPAN> "<TT>4</TT>" <SPAN CLASS="MATH">|</SPAN> "<TT>5</TT>" <SPAN CLASS="MATH">|</SPAN> "<TT>6</TT>" <SPAN CLASS="MATH">|</SPAN> "<TT>7</TT>" <SPAN CLASS="MATH">|</SPAN> "<TT>8</TT>" <SPAN CLASS="MATH">|</SPAN> "<TT>9</TT>"<P><SPAN CLASS="MATH"><I>cell</I></SPAN> := "<TT>R</TT>" <SPAN CLASS="MATH"><I>digit</I>&nbsp;<I>digit</I></SPAN> "<TT>C</TT>" <SPAN CLASS="MATH"><I>digit</I>&nbsp;<I>digit</I></SPAN><P><P><BR>Valid cell rows and columns are 1 through 20, so that a total of 400 ells are available in our spreadsheet.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain one or more lines, each representing cells that are defined in the spreadsheet.<P>Note that, if a an expression in some cell refers to some other cell, the contents of that other cell will always be defined.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Other than the standard header and trailer messages, a single line is printed for each cell defined in the input file (and in the same order). This should be the cell name followed by `<TT>circular</TT>' if evaluating the cell results in a circular definition (either directly or indirectly). If the cell can be evaluated without a circular definition, then the word `<TT>ok</TT>' should follow the cell.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
       column   111111111122222222223
       123456789012345678901234567890
line 1:R01C01=1[EOL]
     2:R01C02=2[EOL]
     3:R01C03=R01C01+R01C02[EOL]
     4:R02C01=(R03C02+1)*R01C03[EOL]
     5:R03C02=R02C01[EOL]
      :[EOF]
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
       column   111111111122222222223
       123456789012345678901234567890
line 1:Program 5 by team 0[EOL]
     2:R01C01 ok[EOL]
     3:R01C02 ok[EOL]
     4:R01C03 ok[EOL]
     5:R02C01 circular[EOL]
     6:R03C02 circular[EOL]
     7:End of program 5 by team 0[EOL]
      :[EOF]
</PRE><P>
______________________________________________________
2913||||||false||||||
<P>Model a stochastic gym exercise.<P><P><BR>An entertaining game for elementary school children in gym class is set up as follows:<P><UL><LI><SPAN CLASS="MATH"><I>N</I></SPAN> baskets are placed at various locations on the gym floor, each with a distinguishing picture on them. </LI><LI>Each basket contains some index cards. Each index card has a destination written on them. </LI></UL><P>The game proceed as follows: the children gather at a specified start basket. They each take a turn picking a random card from the basket, memorizing the destination, and returning the card before the next child picks one. When the teacher blows the whistle, all the children move to the basket indicated on the notecard.<P>Given the configuration of index cards at each basket, you are to determine the probabiliites a kindergardener will appear at each basket for the first ten steps of the game.<P>For example, suppose there are four baskets, &#168;tree,&#168; &#168;house,&#168; &#168;car&#168; and &#168;park.&#168; Each basket has the following index cards:<P><UL><LI>The ``tree" basket has 2 cards with ``tree" on it, 1 card with ``house", and 2 cards with ``car". </LI><LI>The ``house" basket has 1 card with ``tree" on it, 1 card with ``car" on it, and 2 cards with ``park" on it. </LI><LI>The ``car" basket has 1 card with ``tree" on it. </LI><LI>The ``park" basket has one of each card in it. </LI></UL><P>This arrangement is summarized by the following table:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=4><B>destination</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>basket</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>tree</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>house</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>car</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>park</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>tree</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>house</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>car</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>park</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY></TABLE></DIV><P><P><BR>Everyone starts at the tree, so initially,<P><P><BR><SPAN CLASS="MATH"><I>P</I><SUB>0</SUB>(<I>tree</I>) = 1</SPAN>, and <SPAN CLASS="MATH"><I>P</I><SUB>0</SUB>(<I>else</I>&nbsp;<I>where</I>) = 0</SPAN><P><P><BR>In the middle of the game, the probablity of being at some new location is equal to the sum of the probabilities of being at any location on the previous step, times the probablity of moving to the destination location from that past location. For the example,<P><P><BR><SPAN CLASS="MATH"><I>P</I><SUB>s + 1</SUB>(<I>tree</I>) = 0.20*<I>P</I><SUB>s</SUB>(<I>tree</I>) + 0.25*<I>P</I><SUB>s</SUB>(<I>house</I>) + 1.00*<I>P</I><SUB>s</SUB>(<I>car</I>) + 0.25*<I>P</I><SUB>s</SUB>(<I>park</I>)</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>For <SPAN CLASS="MATH"><I>N</I></SPAN> baskets, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2913img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2913img1.png ALT="$ \le$">10</SPAN>, the input file will contain <SPAN CLASS="MATH"><I>N</I></SPAN> lines of information. The <SPAN CLASS="MATH"><I>N</I></SPAN> lines will give the index card count as in the table for the example above. There will be at most 10 cards of the same name in any given basket, and each basket will contain at least one card. The example data would be given as follows:<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There should be 12 lines of output for any given input. Other than the standard header and footer, you should print out the probabilites for seeing a kindergardener at any given basked for the first 10 steps in the game.<P>Your results should give the correct probablities to at least four digits of precision. We recommend you do the internal computations using double precision arithmetic. A correct output file corresponding to the example data is the following:<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
       column   1
       1234567890
line 1:2 1 2 0[EOL]
     2:1 0 1 2[EOL]
     3:1 0 0 0[EOL]
     4:1 1 1 1[EOL]
      :[EOF]
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
       column   1111111111222222222233333333334
       1234567890123456789012345678901234567890
line 1:1.00000 0.00000 0.00000 0.00000[EOL]
     2:0.40000 0.20000 0.40000 0.00000[EOL]
     3:0.61000 0.08000 0.21000 0.10000[EOL]
     4:0.49900 0.14700 0.28900 0.06500[EOL]
     5:0.54160 0.11605 0.25260 0.08975[EOL]
     6:0.52069 0.13076 0.26809 0.08046[EOL]
     7:0.52917 0.12425 0.26108 0.08549[EOL]
     8:0.52519 0.12721 0.26411 0.08350[EOL]
     9:0.52686 0.12591 0.26275 0.08448[EOL]
    10:0.52609 0.12649 0.26334 0.08408[EOL]
      :[EOF]
</PRE><P>
______________________________________________________
2914||||||false||||||
<P>Build a bridge over a swamp by connecting tree stumps with planks.<P><P><BR>You are being chased by cannibals and you must figure out a way to get across a crocodile-infested swamp. The swap contains tree stumps which are thankfully spaced on a regular, <SPAN CLASS="MATH">10&#215;10</SPAN>, grid, where each grid point is 1 foot apart. In addition, there are thankfully some planks nearby that can be placed across the tree stumps. The tree stump at the upper left corner of the grid is on land, as is the tree stump on the opposite bank of the swamp at the lower right. You must figure out a layout of the planks that will get you across the swamp. Each plank can only be used once and must start and end on a tree stump (with no stumps in-between). In addition, the planks must follow the grid horizontally or vertically - no diagonally placed planks are allowed. This scenario is illustrated by the following figure.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2914.png ALT="\epsfbox{p2914.eps}"></DIV><P>A given problem may have more than one solution, but you are required to find only one solution. Your solution does not have to be the most efficient, and you can use any combination of the planks. A valid solution can contain planks that cross over each other.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains one or more problems for a given swamp. The swamp is defined as a 10 by 10 grid of characters. Each period (<TT>.</TT>) represents open space and each asterik (<TT>*</TT>) represents a stump. Each plank problem is defined on one input line after the swamp definition. The first number on the line is the number of planks available (max of 20). The remaining numbers are the lengths of the available planks. Each plank is assigned a number based on its order in the list. For example, in line 11, plank 1 is 9 ft long, plank 2 is 9 ft long, plank 3 is 5 ft long, and plank 4 is 8 ft long.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Other than the standard header and trailer messages, each line of the output file contains the placement of one plank to a specific stump, as shown in the sample output below. (Use the exact same wording and formating for your output file.) The plank order given by the output file should take you from stump (1,1) to stump (10,10). If no solution is possible with the specified planks, print `<TT>no solution possible</TT>'. Print a single blank line after each problem solution.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
       column   11111111112
       12345678901234567890
line 1:*...*....*[EOL]
     2:..........[EOL]
     3:**.*.*....[EOL]
     4:..........[EOL]
     5:..*....*..[EOL]
     6:.....*....[EOL]
     7:..........[EOL]
     8:...*......[EOL]
     9:..........[EOL]
    10:..*....*.*[EOL]
    11:4  9 9 5 8[EOL]
    12:3  9 2 3[EOL]
    13:8  2 3 4 5 6 7 8 9[EOL]
      :[EOF]
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
       column   111111111122222222223
       123456789012345678901234567890
line 1:place plank 1 to stump (1,10)[EOL]
     2:place plank 2 to stump (10,10)[EOL]
     3:[EOL]
     4:no solution possible[EOL]
     5:[EOL]
     6:place plank 3 to stump (1,5)[EOL]
     7:place plank 4 to stump (1,10)[EOL]
     8:place plank 8 to stump (10,10)[EOL]
     9:[EOL]
      :[EOF]
</PRE><P>
______________________________________________________
2915||||||false||||||
<P>Count the number of permutations that have a specific number of inversions.<P><P><BR>Given a permutation <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> of the <SPAN CLASS="MATH"><I>n</I></SPAN> integers <SPAN CLASS="MATH">1, 2, 3,..., <I>n</I></SPAN>, an inversion is a pair <SPAN CLASS="MATH">(<I>a</I><SUB>i</SUB>, <I>a</I><SUB>j</SUB>)</SPAN> where <SPAN CLASS="MATH"><I>i</I> &lt; <I>j</I></SPAN> and <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB> &gt; <I>a</I><SUB>j</SUB></SPAN>. The number of inversions in a permutation gives an indication on how ``unsorted" a permutation is. If we wish to analyze the average running time of a sorting algorithm, it is often useful to know how many permutations of <SPAN CLASS="MATH"><I>n</I></SPAN> objects will have a certain number of inversions.<P>In this problem you are asked to compute the number of permutations of <SPAN CLASS="MATH"><I>n</I></SPAN> values that have exactly <SPAN CLASS="MATH"><I>k</I></SPAN> inversions.<P>For example, if <SPAN CLASS="MATH"><I>n</I> = 3</SPAN>, there are 6 permutations with the indicated inversions as follows:<P><PRE><TT>
		 123 		     0 inversions 
<BR>
132 		     1 inversion (<SPAN CLASS="MATH">3 &gt; 2</SPAN>) 
<BR>
213 		     1 inversion (<SPAN CLASS="MATH">2 &gt; 1</SPAN>)   
<BR>
231 		     2 inversions (<SPAN CLASS="MATH">2 &gt; 1</SPAN>, <SPAN CLASS="MATH">3 &gt; 1</SPAN>) 
<BR>
312 		     2 inversions (<SPAN CLASS="MATH">3 &gt; 1</SPAN>, <SPAN CLASS="MATH">3 &gt; 2</SPAN>)   
<BR>
321 		     3 inversions (<SPAN CLASS="MATH">3 &gt; 2</SPAN>, <SPAN CLASS="MATH">3 &gt; 1</SPAN>, <SPAN CLASS="MATH">2 &gt; 1</SPAN>) 
<BR>
</TT></PRE><P>Therefore, for the permutations of 3 things<P><UL><LI>1 of them has 0 inversions </LI><LI>2 of them have 1 inversion </LI><LI>2 of them have 2 inversions </LI> <LI>1 of them has 3 inversions </LI><LI>0 of them have 4 inversions </LI><LI>0 of them have 5 inversions </LI><LI>etc. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists one or more problems. The input for each problem is specified on a single line, giving the integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2915img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2915img1.png ALT="$ \le$">15)</SPAN> and a non-negative integer <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2915img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2915img1.png ALT="$ \le$">200)</SPAN>. The end of input is specified by a line with <SPAN CLASS="MATH"><I>n</I> = <I>k</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem, output the number of permutations of <SPAN CLASS="MATH">{1,..., <I>n</I>}</SPAN> with exactly <SPAN CLASS="MATH"><I>k</I></SPAN> inversions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
       column   1
       1234567890
line 1:3 0[EOL]
     2:3 1[EOL]
     3:3 2[EOL]
     4:3 3[EOL]
     5:4 2[EOL]
     6:4 10[EOL]
     7:13 23[EOL]
     8:18 80[EOL]
     9:0 0[EOL]
      :[EOF]
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
       column   111111111122222222223
       123456789012345678901234567890
line 1:Program 8 by team 0[EOL]
     2:1[EOL]
     3:2[EOL]
     4:2[EOL]
     5:1[EOL]
     6:5[EOL]
     7:0[EOL]
     8:46936280[EOL]
     9:184348859235088[EOL]
    10:End of program 8 by team 0[EOL]
      :[EOF]
</PRE><P><P><BR><SPAN CLASS="textbf">NOTE:</SPAN> Even though only integer arithmetic is performed, use double precision values to represent quantities to avoid overflows.<P>
______________________________________________________
2916||||||false||||||

<P>
Modern data acquisition systems obtain and record digitized data from multiple instruments that are connected
       via a communications bus. The data acquisition system essentially acts as a polling device, requesting sampled
       data values from digitizing instruments. The instruments sample and digitize their values only at specific,
       periodic times, and simply report the most recently sampled values to the data acquisition system. The effect
       of this technique reduces a continuous, time-varying signal to a sample-and-hold model, as shown in Figure 1-1.

<P>
A straightforward method of acquiring data polls every instrument at the same rate as the instrument with the
       highest sample rate. The polling of the acquisition system may then be seen as sampling the already
       sampled-and-held signal. Figure 1-2 depicts the polling of the instrument for Figure 1-1, which samples
       more slowly than the polling rate, wherein lies the problem: The act of polling any sensor that samples
       slower than the polling rate produces some repeated values, known as stale data. For instance, an onboard
       instrument may sample a wing flap position 10 times per second as in Figure 1-1; however, the data acquisition
       system may poll the instrument 16 times per second, depicted in Figure 1-2, producing exactly six stale values
       per second. Removal of stale data is often crucial to the correct analysis of the data (frequency analysis is
       one such example). A simple-minded approach of removing all duplicates ignores the possibility that the
       instrument may genuinely sample two equal consecutive values.

<P>
Although the the instrument and data acquisition clocks may keep perfect time (do not drift), the clocks
       are usually free-running. That is, there is no synchronization between instrument and data acquisition system.
       The first polled value in the sample input (which corresponds to Figures 1-1 and 1-2) occurs with an offset
       delay of 1/160 (0.00625) seconds. The polling continues every 1/16 second thereafter. For this polled sequence,
       it is possible to reconstruct the instrument sequence uniquely.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2916.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2916.jpg
 ALT="\epsfbox{p2916.eps}">
</DIV>

<P>
Uniquely reconstructing the instrument sequence from the polled values is not always possible. Consider the 10
sample-per-second (10 sps) instrument sequence {0,0,0,0,0,0,0,0,1,0} that is polled 11 times per second with
an offset delay of 0.09 seconds. The resulting polled values are {0,0,0,0,0,0,0,0,1,0,0}. Unfortunately,
the 10 sps instrument sequence {0,0,0,0,0,0,0,1,0,0} polled 11 times per second with an offset delay of 0
seconds generates the same polled values, {0,0,0,0,0,0,0,0,1,0,0}.

<P>
Your program should take a given instrumentation sample rate, <SPAN CLASS="MATH"><I>F</I><SUB>i</SUB></SPAN>, the data acquisition system polling
rate, <SPAN CLASS="MATH"><I>F</I><SUB>p</SUB></SPAN>, and a list of polled values. From this input, your program should either reconstruct the instrument
sampled sequence, or determine that a unique reconstruction is not possible.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Is a series of integers, one per line. The first line contains the instrument sampling rate, <SPAN CLASS="MATH"><I>F</I><SUB>i</SUB></SPAN>, in samples
per second. The second line contains the acquisition polling rate,<SPAN CLASS="MATH"><I>F</I><SUB>p</SUB></SPAN>,again in samples per second.
<!-- MATH
 $F_{i} \le F_{p}$
 -->
<SPAN CLASS="MATH"><I>F</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2916.jpg
 ALT="$ \le$"><I>F</I><SUB>p</SUB></SPAN>. All remaining lines contain the acquired (polled) data sequence, one value per line, until
end-of-file. The number of polled values will always be an integer multiple of <SPAN CLASS="MATH"><I>F</I><SUB>p</SUB></SPAN>, with at least <SPAN CLASS="MATH"><I>F</I><SUB>p</SUB></SPAN>
values of acquired data. Sampled and polled values always fall within the range <!-- MATH
 $[-32678,32767]$
 -->
<SPAN CLASS="MATH">[- 32678, 32767]</SPAN>. You will never
be asked to analyze more than 256 polled values.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Must contain either the instrument sample stream, one value per line, or the line:

<P>

<P>
<BR>

<TT>insufficient context</TT>

<P>

<P>
<BR>
when a unique reconstruction does not exist.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10
16
-3
-3
 0
 0
 3
 1
 1
 1
 5
 5
 4
 4
 3
 1
 1
-2
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
-3
0
3
1
1
5
4
3
1
-2
</PRE>

<P>

______________________________________________________
2917||||||false||||||

<P>
The Bog City Go Club has a scoreboard installed in the main competition room of the Club. The scoreboard is
     used to display the board position, current move, and score of one of the games taking place in the room.
     Although it is controlled by a microprocessor, the scoreboard is a simple device that merely responds to
     operator commands by displaying them directly. This is really all that is needed, with one exception.
     It is very difficult for the operator to continually calculate and enter a running score. Your task will
     be to automate the calculation, so the operator can enter it easily.

<P>
The Bog City Go Club uses the proposed international Go rules devised by the people on the ``go-rules"
     mailing list. The rules relevant to scoring follow:

<P>

<P>
<BR>

(General)
<DL COMPACT>
<DT>2.</DT>
<DD>One player uses black stones, the other white.
  
</DD>
<DT>4.</DT>
<DD>The board is a grid of 19 horizontal and 19 vertical lines forming 361 intersections.
  
</DD>
<DT>5.</DT>
<DD>Two intersections are adjacent if they have a line but no intersection between them.
  
</DD>
<DT>6.</DT>
<DD>Two intersections with either black, white, or no stones on them are connected if they are adjacent
  or if there is a
      chain of adjacent intersections of their type between them.
  
</DD>
<DT>7.</DT>
<DD>A region consists of an intersection and any intersections connected to it.
</DD>
</DL>
(Move)
<DL COMPACT>
<DT>2.</DT>
<DD>A move is either a play of an own stone on an empty intersection, or a pass.
</DD>
</DL>
(Scoring)
<DL COMPACT>
<DT>1.</DT>
<DD>The points of each player are the numbers of intersections
<DL COMPACT>
<DT>a)</DT>
<DD>with his stones, and
        
</DD>
<DT>b)</DT>
<DD>of the empty regions only adjacent to intersections with his stones.
</DD>
</DL>
</DD>
</DL>
      When the operator wants your program to calculate a score, he will tell the scoreboard to download a textual
representation of the board, which your program can read from the standard input stream. Your program will calculate
the score and output it on the standard output stream.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
For each board position consists of 20 lines, each terminated by a newline character. The first line is a spacer
with just the newline character on it. The 19 lines that follow it represent the board position. On each of these
lines, there are 19 pairs of characters before the newline that represent the intersections on that line of the go
board. The first character of each pair is a space. `<TT>+</TT>' and `<TT>*</TT>' represent empty intersections. `<TT>@</TT>'
represents an intersection with a black stone, and `<TT>O</TT>' represents an intersection with a white stone.

<P>
When your program has read 20 lines (1 spacer and 19 lines defining a board), it should calculate and output
      the score for that board. The scores for any number of Go boards may be requested. When the operator is done,
      he will turn off the scoreboard, which your program will see as an end-of-file on the input stream. When it
      sees the end-of-file, it should exit.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each board should be a single line terminated by a newline character. The line should contain two decimal
integers separated by a single blank character, with no leading or trailing whitespace. There should be no leading
zeros in either integer, unless the value is zero, in which case the integer should be a single `<TT>0</TT>'.
The first integer should be the score calculated for black, and the second should be the score calculated for white.
Your program should output one line of output for every 20 lines of input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
                                                    (the first line is blank)
 + + + + + + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +
 + + + * + + + + + * + + + + + * + + +
 + + + + + + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +
 + + + * + + + + + * + + + + + * + + +
 + + + + + + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +
 + + + @ O + + + + + + + + + + + + + +
 + + @ * @ O + + + * + + + + + * + + +
 + + + @ O + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +
 + + + + + + + + + + + + + + + + + + +

 + + + + O O O @ + + + + @ @ O + + + +
 + + O + O @ O @ @ @ @ @ @ O O + + + +
 + + + O @ @ O @ + @ + + @ O + + + O +
 + + O @ @ @ @ @ @ O @ + @ O + * + + +
 + O O O @ + @ O O O @ @ O O + + O + +
 + + O @ @ @ + @ @ O O @ + + O O + O +
 O O O @ O O @ + O + O @ O @ @ @ @ O +
 @ + @ @ O + O O O O + O O @ + + @ O +
 + @ @ O O @ @ @ @ O + O @ @ @ @ O + +
 O O O * + O O @ @ @ O O @ O @ O O O O
 @ O O O O + O @ O @ @ @ @ O @ O @ @ @
 @ @ O @ O + O O O @ + + @ O O O O O @
 + @ @ @ @ O O + + O @ + @ O + O O @ @
 + + @ @ + @ O O O O @ @ @ + O O @ @ @
 + @ + + + @ O @ @ O O O @ @ @ O O @ +
 + + @ * @ @ O @ O O O @ @ O @ O + @ +
 + @ + @ + + @ @ @ @ @ O O O O O @ + +
 + + + + + + + + @ O O O + + O @ @ @ +
 + + + + + + + + @ @ O + + + O O @ + +
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 3
177 175
</PRE>

<P>

______________________________________________________
2918||||||false||||||
<P>PIT Corporation is creating a comprehensive Interactive Development Environment that will revolutionize programming. A key feature of the IDE is the semantics-aware source code editor. You have been contracted to prototype the variable renaming editing operation rapidly. While the finished editor will support many languages, the prototype editor only supports C-, a small subset of C, which only features simple variable declarations, expressions, and statements. It does not contain comments or preprocessor directives.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Will be a C- source program consisting of the text `<TT>main()</TT>' on the first line by itself, followed by one <SPAN CLASS="textit">compound-statement</SPAN>, followed by `<TT>#if 0</TT>' on a line by itself, one or more semantic editing operations on separate lines, followed by `<TT>#endif</TT>' on a line by itself. Editing operations are applied in the order they appear. The format of the ``rename variable" operation is<P><P><BR><TT><SPAN CLASS="MATH"><I>n</I></SPAN>R <SPAN CLASS="MATH"><I>old</I><IMG WIDTH="74" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2918img1.png ALT="$ \_variable$"><IMG WIDTH="54" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2918img1.png ALT="$ \_name$"></SPAN>/ <SPAN CLASS="MATH"><I>new</I><IMG WIDTH="74" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2918img1.png ALT="$ \_variable$"><IMG WIDTH="54" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2918img1.png ALT="$ \_name$"></SPAN>/</TT><P><P><BR>where <SPAN CLASS="MATH"><I>n</I></SPAN> is a line number in the source code containing the variable to be renamed, with slashes delimiting old and new names. Renaming the variable will change it where it is declared and everywhere it is used. This is not a global string replace. It does not change identically named variables declared in a different scope.<P><P><BR><B>Note:</B> The `main()', `#if 0', and `#endif' lines above are not part of the C- language grammar. They just allow the input for this problem to be treated as a valid C program.<P><P><BR><B>Notes:</B> <SPAN CLASS="MATH"><I>old</I><IMG WIDTH="74" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2918img1.png ALT="$ \_variable$"><IMG WIDTH="54" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2918img1.png ALT="$ \_name$"></SPAN> refers to the first occurrence on the specified line number, <SPAN CLASS="MATH"><I>n</I></SPAN>, if it occurs more than once. To avoid conflicts, <SPAN CLASS="MATH"><I>new</I><IMG WIDTH="74" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2918img1.png
 ALT="$ \_variable$"><IMG
 WIDTH="54" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2918img1.png
 ALT="$ \_name$"></SPAN> will not be the same name as a
previously declared variable.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Will be the updated source code after application of the semantic editing commands without the lines `<TT>#if 0</TT>'
through `<TT>#endif</TT>'. Preserve whitespace from the input in the output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
main()
{
     int tmp ;
     int a; short b;
     a=1; b=4; tmp=10;
     {
          int tmp;
          tmp=b;
          b=a;
          a=tmp;
     }
     tmp = tmp + b;
     printf("a=%d b=%d tmp=%d\n",a,b,tmp);
}
#if 0
10R/tmp/hold/
7R/hold/scratch/
12R/tmp/sum/
#endif
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
main()
{
     int sum ;
     int a; short b;
     a=1; b=4; sum=10;
     {
          int scratch;
          scratch=b;
          b=a;
          a=scratch;
     }
     sum = sum + b;
     printf("a=%d b=%d tmp=%d\n",a,b,sum);
}
</PRE>

<P>

<P><P>
<BR>

<B>C-­ GRAMMAR</B>

<P>
The grammar is in the form used in "The C Programming Language" by Kernighan and Ritchie.

<P>
Syntactic categories (non-terminals) are indicated by <I>italic</I> type, and literal words and characters (terminals) in
<TT>typewriter</TT> style. Alternative categories are listed on separate lines. An optional terminal or optional nonterminal
symbol carries the subscript ``<SPAN CLASS="MATH"><SUB>opt</SUB></SPAN>".

<P>
<DL>
<DT><STRONG><I>declaration:</I></STRONG></DT>
<DD>

<P>
<I>type-specifier declarator</I> <TT>;</TT>
</DD>
<DT><STRONG><I>declaration-list:</I></STRONG></DT>
<DD>

<P>
<I>declaration</I>

<P>
<I>declaration-list declaration</I>
</DD>
<DT><STRONG><I>type-specifier:</I></STRONG></DT>
<DD>

<P>
<TT>short</TT>

<P>
<TT>int</TT>
</DD>
<DT><STRONG><I>declarator:</I></STRONG></DT>
<DD>

<P>
<I>direct-declarator</I>
</DD>
<DT><STRONG><I>direct-declarator:</I></STRONG></DT>
<DD>

<P>
<I>identifier</I>
</DD>
<DT><STRONG><I>compound-statement:</I></STRONG></DT>
<DD>

<P>
<TT>{</TT> <I>declaration-list</I><SPAN CLASS="MATH"><SUB>opt</SUB></SPAN> <I>statement-list</I><SPAN CLASS="MATH"><SUB>opt</SUB></SPAN> <TT>}</TT>
</DD>
<DT><STRONG><I>statement:</I></STRONG></DT>
<DD>

<P>
<I>expression-statement</I>

<P>
<I>compound-statement</I>
</DD>
<DT><STRONG><I>expression-statement:</I></STRONG></DT>
<DD>

<P>
<I>expression</I><SPAN CLASS="MATH"><SUB>opt</SUB></SPAN> <TT>;</TT>
</DD>
<DT><STRONG><I>statement-list:</I></STRONG></DT>
<DD>

<P>
<I>statement</I>

<P>
<I>statement-list statement</I>
</DD>
<DT><STRONG><I>expression:</I></STRONG></DT>
<DD>

<P>
<I>assignment-expression</I>
</DD>
<DT><STRONG><I>assignment-expression:</I></STRONG></DT>
<DD>

<P>
<I>additive-expression</I>

<P>
<I>unary-expression assignment-operator assignment-expression</I>
</DD>
<DT><STRONG><I>assignment-operator:</I></STRONG></DT>
<DD>

<P>
<TT>=</TT>

<P>
</DD>
<DT><STRONG><I>additive-expression:</I></STRONG></DT>
<DD>

<P>
<I>multiplicative-expression</I>

<P>
<I>additive-expression</I> <TT>+</TT> <I>multiplicative-expression</I>

<P>
<I>additive-expression</I> <TT>-</TT> <I>multiplicative-expression</I>
</DD>
<DT><STRONG><I>multiplicative-expression:</I></STRONG></DT>
<DD>

<P>
<I>unary-expression</I>

<P>
<I>multiplicative-expression <TT>*</TT> unary-expression</I>

<P>
<I>multiplicative-expression <TT>/</TT> unary-expression</I>
</DD>
<DT><STRONG><I>unary-expression:</I></STRONG></DT>
<DD>

<P>
<I>postfix-expression</I>
</DD>
<DT><STRONG><I>postfix-expression:</I></STRONG></DT>
<DD>

<P>
<I>primary-expression</I>

<P>
<I>postfix-expression <TT>(</TT> argument-expression-list<SPAN CLASS="MATH"><SUB>opt</SUB></SPAN> <TT>)</TT></I>
</DD>
<DT><STRONG><I>primary-expression:</I></STRONG></DT>
<DD>

<P>
<I>identifier</I>

<P>
<I>constant</I>

<P>
<I>string</I>

<P>
<TT>(</TT> <I>expression <TT>)</TT></I>
</DD>
<DT><STRONG><I>argument-expression-list:</I></STRONG></DT>
<DD>

<P>
<I>assignment-expression</I>

<P>
<I>argument-expression-list <TT>,</TT> assignment-expression</I>
</DD>
<DT><STRONG><I>constant:</I></STRONG></DT>
<DD>

<P>
<I>integer-constant</I>
</DD>
<DT><STRONG><I>identifier:</I></STRONG></DT>
<DD>An alfabetic character followed by zero-to-30 alphanumeric characters.

<P>
<TT>[a-zA-Z][a-zA-Z0-9]</TT>{0,30}
</DD>
<DT><STRONG><I>integer-constant:</I></STRONG></DT>
<DD>One-to-nine decimal digists.

<P>
<TT>[0-9]</TT>{1,9}
</DD>
<DT><STRONG><I>string:</I></STRONG></DT>
<DD>Double quote, zero to 200 printable characters (excluding <TT>"</TT>), terminating double quote.

<P>
<TT>"[ !#$%&amp;´()*+,-./0-9:;&lt;=&gt;?@A-Z[\]^_`a-z{|}&tilde;]{0,200}"
</TT>
<P>
<TT>
</DD>
</DL></TT>

<P>
The keywords <TT>short</TT> and <TT>int</TT> are reserved words, and will not be used other than as <I>type-specifiers</I>.

<P>

______________________________________________________
2919||||||false||||||

<P>
Since candidates whose names appear earlier on a ballot tend to get more votes than candidates whose names appear
later, the State of Confusion requires that the names of the candidates for an office appear in different orders
in different electoral districts. The intent is to even out, over all of the districts, the advantage or disadvantage
of name order for all of the candidates. To do this, the names of the candidates for each office in each district
are sorted according to an arbitrary ``alphabetic order" that is chosen for that office and district by rules
designed to ensure fairness. We won't go into the details of these rules, since you are not being asked to choose
the orderings for the alphabet, just to sort the candidate's names according to an ordering that's already been chosen.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program must be able to handle the alphabetic ordering and list of candidates for a single office in a single
district. To handle different offices or different districts, it will simply be rerun with the appropriate input.
The first line of input will be an ``alphabet" line of 26 characters, representing the sort order of the alphabet
for the office and district being handled. The names of the candidates will follow this line, one line per candidate.
The list of candidate's names will be terminated by end-of-file.

<P>
There will be no more than 1024 candidates for any office, and no candidate's name will be longer than 255
     characters. All characters in the input are either upper case alphabetic (<TT>A</TT>-<TT>Z</TT>), or the space character.

<P>
The ``alphabet" line contains just the letters from `<TT>A</TT>' to `<TT>Z</TT>', but in the order they should be used in
     the sort. A letter earlier in the line should sort before a letter later in the line. The space character
     doesn't appear in the ``alphabet" line, since it always sorts before any of the alphabetic characters.

<P>
Each line in the list of candidates contains the name of one candidate, with no leading or trailing space
     characters, and a single space character between each of the parts of the name. The parts of the name have
     been ordered as they should be sorted, so there is no need to reorder the parts of a name on a line to ensure
     that, for example, the surname has precedence in the sort. If it does, the surname will be first on the input line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Is the list of candidates from the input, in the sort order specified by the ``alphabet" line
of the input. The program must reorder the lines, if necessary, but it must not alter their contents. Since the
output will contain all of the lines in the input, except the ``alphabet" line, it will be exactly one line shorter
than the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
XWYPZRNQMKTJOIGHDBCLAEVUFS
ADAMS JOHN QUINCY
ADAMS JOHN
FRANKLIN BENJAMIN
HANCOCK JOHN
JEFFERSON THOMAS
LEE RICHARD HENRY
LEE ROBERT E
LINCOLN ABRAHAM
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
JEFFERSON THOMAS
HANCOCK JOHN
LINCOLN ABRAHAM
LEE ROBERT E
LEE RICHARD HENRY
ADAMS JOHN
ADAMS JOHN QUINCY
FRANKLIN BENJAMIN
</PRE>

<P>

______________________________________________________
2920||||||false||||||
<P>Swamp County Publishing is producing a book on the history of codes and ciphers. You have been hired to produce the CD. Today's job is the Playfair cipher. Here are the author's preliminary notes for it.<P>The Playfair cipher is an example of polygram encipherment: it replaces pairs of characters with other pairs. It is based on a rectangular array usually determined by an agreed upon passphrase or standard text. For this example we will use a 6 by 6 array of the alphanumeric characters. Here is the example we will use in the following discussion:<P><PRE>
G7UMWS
LBDNPA
YTHE4R
2OVCI3
91Z0KF
865QXJ
</PRE><P>The basic scheme is to locate a pair in the array, say WZ and consider them to be at the diagonally opposite corners of a rectangular sub-array:<P><PRE>
UMW
DNP
HE4
VCI
ZOK
</PRE><P>For the enciphered pair, take the pair at the other corners. For this example, for each character, choose the one on the same row. Thus WZ becomes UK. However, there are several other cases to take care of:<P><UL><LI>If the characters are in the same column, choose the character below each character: B1 will become T6. If a character is in the last row, use the character in the first row: MQ will become NM.<P></LI><LI>Similarly, if the characters are in the same row, choose the character to the right of each: T4 will become HR. If a character is in the last column, use the character in the first column: PA will become AL.<P></LI><LI>Finally, if a letter is doubled, use the character to its right: HH will become EE. As before, if it is in the last column, use the one in the first column: FF will become 99. </LI></UL><P>There are many variations possible, each of the rules may go up, down, right or left. Use the above rules for the CD example. Deciphering is the obvious inverse of these operations.<P>Here is the scheme for constructing the array from the passphrase, in this case:<P><PRE>
swamp run: AM437.
</PRE><P>Copy the passphrase, keeping only alphanumeric characters, converting lower case to upper case, and keeping only the first occurrence of a character (ignoring case).<P><PRE>
SWAMPRUN437
</PRE><P>Of course a real passphrase would be longer. But, in general, we may need to add more characters to include all the alphanumeric characters. Write down the missing characters, in the order A..Z0..9, in columns under the converted passphrase, using more than one line if necessary:<P><PRE>
SWAMPRUN437
BCDEFGHIJKL
OQTVXYZ0125
689
</PRE><P>Next sort the columns by the contents of the first row in the order A..Z0..9:<P><PRE>
AMNPRSUW347
DEIFGBHCKJL
TV0XYOZQ215
9      6 8
</PRE><P>Now read off the all but the first row left to right, skipping spaces and append the characters to the converted passphrase:<P><PRE>
SWAMPRUN437DEIFGBHCKJLTV0XYOZQ215968
</PRE><P>Finally, we need to convert this to the array. It is best to avoid a straight row by row or column by column copy. We will do it diagonally, top left to bottom right, starting in the top right corner. This gives the array at the start of this example.<P>What remains is how to choose the pairs in the plaintext. It is not very strong to take the characters 2 by 2, instead the text is usually scrambled in some way. We will just split the text in half. Here is an example text:<P><PRE>
In skew binary, the digits include 2.
</PRE><P>Copy the text, skipping any non-alphanumeric characters and converting lower to upper case.<P><PRE>
INSKEWBINARYTHEDIGITSINCLUDE2
</PRE><P>Now split the message into equal parts, appending an X if it contains an odd number of characters. Write the second half below the first half:<P><PRE>
INSKEWBINARYTHE
DIGITSINCLUDE2X
</PRE><P>The pairs are the columns. The first pair is ID which becomes VP, the first two characters of the enciphered text. The second pair is NI which becomes PC. The enciphered text is:<P><PRE>
VPPCG7XK4HSGPOCPE0LBHSHLH4YV4Q
</PRE><P>Deciphering is just the reverse of the above procedure.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Will consist of one or more test cases, terminated by end-of-file. Each test case will start with a passphrase starting with an alphanumeric character in column 1. It will be followed by one or more lines to be enciphered or deciphered. A line to be enciphered will have a `<TT>+</TT>' in column 1 while one to be deciphered will have a `<TT>-</TT>' in column 1. The text to be enciphered or deciphered will start in column 2. All lines will be at most 80 characters in length.<P>Each passphrase and data to be enciphered will contain at least 1 alphanumeric character. Data to be deciphered will contain at least 2 alphanumeric characters. If data to be deciphered contains an odd number of characters, discard the last character.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Will be the enciphered or deciphered text, with no leading or trailing spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
swamp run: AM437.
+In skew binary, the digits include 2.
-VPPCG7XK4HSGPOCPE0LBHSHLH4YV4Q
-4OYUV47R3PMAR74U44YYR
MY NAME IS DUADUA EDWIN AND TOGETHER WITH MY COLLEAGUES [PARTNERS] WHO ARE
-ISQTU7YDATDHM4ZIDKLMOP90NU3MVS1S76VCZQVWPO
+the attack will use plan 42
-5MUHTDXMOYUOOODUSDM3NEEDSAN5UNQN2BPOXMCYAHDN4EDD1CSS7UN77ML7
abcdefghijklmnopqrstuvwxyz0123456789
+this is just a test
-YNEYFBNYNINNNO6J
k
+this is just a test
-YNNZNKNYOINNA56I
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
VPPCG7XK4HSGPOCPE0LBHSHLH4YV4Q
INSKEWBINARYTHEDIGITSINCLUDE2X
THISISTHERIGHTANSWER
PLEASETRANSFER3200FROMCHECKINGTOVISATHANKS
L4JEUHYAYLS4TDTYWDJIPZ
WEAREPLEASEDTOINFORMYOUOFTHERESULTSELGORDOSWEEPSTAKELOTTERYX
YNEYFBNYNINNNO6J
THISISJUSTATESTX
YNNZNKNYOINNA56I
THISISJUSTATESTX
</PRE><P>
______________________________________________________
2921||||||false||||||
<P>The buzzword for product offering organizations today is turnaround time! The product can be either a service, such as responding to a customer repair request, or goods, such as shipping books ordered online. Your team has been hired by a quality rating firm to assess the performance of companies that log their turnaround time. Turnaround time is measured in working days. It is expected that unless specified in the input, weekends (Saturdays and Sundays) are not considered working days.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Is a multipart specification that contains all the information necessary to produce turnaround reports. Each section is separated by a line that has a pound sign `<TT>#</TT>' in column one. The first section contains a list of unique product numbers versus the expected turnaround time in days. Product numbers are positive integers in the range 1..100. There will never be more than 100 products. Whitespace separates the product number from the turnaround time.<P><P><BR>The second section contains zero or more exceptional dates. If a line with an exceptional date begins with a plus sign `<TT>+</TT>' in column 1, the date specified is to be considered a workday; if the line begins with a minus sign `<TT>-</TT>' in column 1, the date is not a workday (such as a holiday). A single space separates the plus or minus sign from the exceptional date. Any particular exceptional date is specified only once.<P><P><BR>The third section contains the log of completed jobs. Each line in this section has three elements, separated by whitespace. The first element is the product number. The second and third elements are the start and end dates, respectively, for the job. Start and end dates will always fall within the years 1990..2010. Start and end dates always occur on workdays. If a product is turned around the same day that it is started, then it is measured as taking zero days. The input will never contain more than 250 log entries.<P><P><BR>The fourth and final section is a list of reporting date ranges. Each line in the final section has two dates, start and end, separated by whitespace. You are to report summary information for any jobs that <SPAN CLASS="textit">started</SPAN> within the specified date range. The final section is terminated by end-of-file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Is a summary report, one line per reporting date range. Print the date range with a dash between start and end date. Then for jobs that started within that range, print a space, the number of delinquent jobs (those that exceeded the expected turnaround time) right justified in 3 characters, a space, and the on-time percentage (the percentage of jobs that were completed within the expected turnaround time). Print the percentage as three characters before the decimal point, a decimal point, and one digit after the decimal point. For the characters preceding the decimal point, pad with leading spaces when the percentage is less than 100.0. (For example, zero percent would print with two leading spaces as ` <TT>0.0</TT>') Follow the numeric percentage with a percent sign. When there are no jobs that started within the reporting date range, print only the date range. See the <SPAN CLASS="textit">Sample Output</SPAN> as a formatting example.<P><P><BR>Dates are of the form <SPAN CLASS="MATH"><I>YYYYMMDD</I></SPAN>, where <SPAN CLASS="MATH"><I>YYYY</I></SPAN> is a four-digit year, <SPAN CLASS="MATH"><I>MM</I></SPAN> is the month, 01..12, and <SPAN CLASS="MATH"><I>DD</I></SPAN> is the day of the month, 01..31. Years will be in the range 1990..2010. January 1, 1990 is a Monday.<P><P><P><BR><B>Hint:</B> <SPAN CLASS="textit">you may execute the Unix</SPAN> <TT>cal</TT> <SPAN CLASS="textit">command to view the calendar for a particular year. E.g.</SPAN><P><P><BR><TT>cal 2003</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 5
 2 3
# end of product definitions
- 20020101
- 20030101
- 20020704
+ 20020706
- 20030704
# end of exceptional dates
10 20020703 20020710
  2 20021230 20030103
 2 20020706 20020711
# end of job log
20020701 20020731
20001226 20001231
20021229 20030104
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
20020701-20020731    1 50.0%
20001226-20001231
20021229-20030104    0 100.0%
</PRE><P>
______________________________________________________
2922||||||false||||||
<P>Last year there were a lot of complaints concerning the set of problems. Most contestants considered our problems to be too hard to solve. One reason for this is that the team members responsible for the problems are not able to evaluate properly whether a particular problem is easy or hard to solve. (We have created until now so many problems, that all seems quite easy.) Because we want our future contests to be better we would like to be able to evaluate the hardness of our problems after the contest, using the history of submissions.<P>There are a few statistics that we can use for evaluating the hardness of a particular problem: the number of accepted solutions of the problem, the average number of submissions of the problem and the average time consumed to solve it (as "General rules" of the contest state "the time consumed for a solved problem is the time elapsed from the beginning of the contest to the submittal of the accepted run"). For the latter two statistics we consider only the teams which solved this particular problem.<P>Needless to say we ask you to write a program that computes aforementioned statistics for all problems.<P><P><BR><SPAN CLASS="textbf">Task</SPAN><P>Write a program that:<UL><LI>reads a history of submissions during an ACM contest, </LI><LI>computes for each problem the number of accepted solutions of the problem, the average number of submissions and the average time consumed to solve it, </LI><LI>writes the result. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test case, each separated by a blank line. The first line of the file indicates the number of test cases, and it's followed by a blank line.<p>The first line of each dataset contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2922img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2922img1.png ALT="$ \le$">2000</SPAN>) being the number of submissions during the contest. Each of the next n lines describes one submission and contains a submission time (measured in seconds from the beginning of the contest), a team identifier, a problem identifier and a result of evaluating the submission, separated by single spaces. The submission time is a positive integer not greater than 18000. The team identifier is a non-empty string consisting of at most five small letters or digits. The problem identifier is a capital letter <TT>A</TT>, <TT>B</TT>, ..., or <TT>I</TT>. The result is a capital letter <TT>A</TT> (the submission is accepted) or <TT>R</TT> (the submission is rejected).<P>Submissions are given in nondecreasing order according to submission times and there are 62 teams competing.<P>Please note that if a problem is accepted all further submissions of this problem by the same team are possible but they should not be taken to the statistics.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each test case consists of nine lines. The first line corresponds to problem A, the second line to problem B, and so on. Each line should contain the problem identifier, the number of accepted solutions of the problem, the average number of submissions done by teams that solved that problem and the average time consumed to solve it, separated by single spaces. The latter two statistics should be printed only if there was at least one accepted solution of the given problem and should be rounded to two fractional digits (in particular 1.235 should be rounded to 1.24). Print a blank line between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

12
10 wawu1 B R
100 chau1 A A
2000 uwr2 B A
2010 wawu1 A R
2020 wawu1 A A
2020 wawu1 B A
4000 wawu2 C R
6000 chau1 A R
7000 chau1 A A
8000 pp1 A A
8000 zil2 B R
9000 zil2 B A
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
A 3 1.33 3373.33
B 3 1.67 4340.00
C 0
D 0
E 0
F 0
G 0
H 0
I 0
</PRE><P>
______________________________________________________
2923||||||false||||||
<P>Outel, a famous semiconductor company, released recently a new model of microprocessor called Platinium. Like many modern processors, Platinium can execute many instructions in one clock step providing that there are no dependencies between them (instruction <SPAN CLASS="MATH"><I>I</I><SUB>2</SUB></SPAN> is dependent on instruction <SPAN CLASS="MATH"><I>I</I><SUB>1</SUB></SPAN> if for example <SPAN CLASS="MATH"><I>I</I><SUB>2</SUB></SPAN> reads a register that <SPAN CLASS="MATH"><I>I</I><SUB>1</SUB></SPAN> writes to). Some processors are so clever that they calculate on they which instructions can be safely executed in parallel. Platinium however expects this information to be explicitly specified. A special marker, called simply a <SPAN CLASS="textit">stop</SPAN>, inserted between two instructions indicatesthat some instructions after the stop are possibly dependent on some instructions before the stop. In other words instructions between two successive stops can be executed in parallel and there should not be dependencies between them.<P>Another interesting feature of Platinium is that a sequence of instructions must be split into groups of one, two or three successive instructions. Each group has to be packed into a container called a <SPAN CLASS="textit">bundle</SPAN>. Each bundle has 3 slots and a single instruction can be put into each slot, however some slots may stay empty. Each instruction is categorized into one of 10 instruction types denoted by consecutive capital letters from <TT>A</TT> to <TT>J</TT> (instructions of the same type have similar functionality, for example type <TT>A</TT> groups integer arithmetic instructions and type <TT>F</TT> groups floating-point instructions). Only instructions of certain types are allowed to be packed into one bundle. A <SPAN CLASS="textit">template</SPAN> specifies one permissible combination of instruction types within a bundle. A template can also specify a position of a stop in the middle of a bundle (there is at most one such stop allowed). In addition, stops are allowed between any two adjoining bundles. A set of templates is called a <SPAN CLASS="textit">bundling profile</SPAN>. When packing instructions into bundles, one has to use templates from bundling profile only.<P>Although Platinium is equipped with an instruction cache it was found that for maximal performance it is most crucial to pack instructions as densely as possible. Second important thing is to use a small number of stops.<P>Your task is to write a program for bundling Platinium instructions. For the sake of simplicity we assume that the instructions cannot be reordered.<P><P><BR><SPAN CLASS="textbf">Task</SPAN><P>Write a program that:<UL><LI>reads a bundling prole and a sequence of instructions, </LI><LI>computes the minimal number of bundles into which the sequence can be packed without breaking the dependencies and the minimal number of all stops that are required for the minimal number of bundles, </LI><LI>writes the result. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test case, each separated by a blank line. The first line of the file indicates the number of test cases, and it's followed by a blank line.<p>The first line of each dataset contains two integers <SPAN CLASS="MATH"><I>t</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> separated by a single space. Integer <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2923img1.gif ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2923img1.gif ALT="$ \le$">1500</SPAN>) is the number of templates in the bundling profile. Integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2923img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2923img1.gif ALT="$ \le$">100000</SPAN>) is the number of instructions to be bundled.<P>Each of the next <SPAN CLASS="MATH"><I>t</I></SPAN> lines specifies one template and contains 3 capital letters <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>t</I><SUB>3</SUB></SPAN> with no spaces in between followed by a space and an integer <SPAN CLASS="MATH"><I>p</I></SPAN>. Letter <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN> <SPAN CLASS="MATH">(<texttt>A</texttt><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2923img1.gif ALT="$ \le$"><I>t</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2923img1.gif ALT="$ \le$"><I>J</I>)</SPAN> is an instruction type allowed in the <SPAN CLASS="MATH"><I>i</I></SPAN>-th slot. Integer <SPAN CLASS="MATH"><I>p</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2923img1.gif ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2923img1.gif ALT="$ \le$">2)</SPAN> is the index of the slot after which the stop is positioned (0 means no stop within the bundle).<P>Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines specifies one instruction. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line of these <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains one capital letter <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> and an integer <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>, separated by a single space. Letter <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <SPAN CLASS="MATH">(<texttt>A</texttt><I>lec</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2923img1.gif ALT="$ \le$"><I>J</I>)</SPAN> is the type of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th instruction. Integer <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <!-- MATH
 $(0 \le d_{i} < i)$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2923img1.gif ALT="$ \le$"><I>d</I><SUB>i</SUB> &lt; <I>i</I>)</SPAN> is the index of the last instruction (among the previous ones) that the <SPAN CLASS="MATH"><I>i</I></SPAN>-th instruction is dependent on (0 means that the instruction is not dependent on any former instruction).<P>You can assume that for each instruction type <SPAN CLASS="MATH"><I>c</I></SPAN> appearing in the instruction sequence there is at least one template containing <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The first and only line of the output contains two integers <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>s</I></SPAN> separated by a single space. Integer <SPAN CLASS="MATH"><I>b</I></SPAN> is the minimal number of bundles in a valid packing. Integer <SPAN CLASS="MATH"><I>s</I></SPAN> is the minimal number of all stops that are required for the minimal number of bundles. Print a blank line between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

4 9
ABB 0
BAD 1
AAB 0
ABB 2
B 0
B 1
A 1
A 1
B 4
D 0
A 0
B 3
B 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 3
</PRE><P>
______________________________________________________
2924||||||false||||||
<P>Mirek has a favourite way from home to the university that he traverses every working day. The route consists of sections and each section is a straight segment 10 meters long. Each section is either a straight ahead extension of the previous section or it is perpendicular to the previous section. After traversing each section Mirek takes a small break to admire the beauty of the nature. During his walk he never visits the same place twice.<P>Yesterday Mirek stayed up long in the night at the party and today he got up late from bed. He knows that he will miss the first lecture unless he changes his usual route. He plans to make one shortcut but he wants the shortcut to be as short as possible (well, we can tell you in secret that he doesn't want to be on time, he just wants to calm his conscience). The shortcut must be either a horizontal or vertical segment connecting two break points of Mirek's route.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2924.jpg ALT="\epsfbox{p2924.eps}"></DIV><P>Please help Mirek find the shortest shortcut.<P><P><BR><SPAN CLASS="textbf">Task</SPAN><P>Write a program that:<UL><LI>reads Mirek's route, </LI><LI>computes the shortest shortcut on the route, </LI><LI>writes the result. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test case, each separated by a blank line. The first line of the file indicates the number of test cases, and it's followed by a blank line.<p>The first line of each test case contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2924.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2924.jpg ALT="$ \le$">250000)</SPAN> being the number of sections of the route. The second line of the input contains a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> characters <TT>N</TT>, <TT>E</TT>, <TT>S</TT> or <TT>W</TT> with no spaces in between. Each character is a description of one section of the route. Character <TT>N</TT>, <TT>E</TT>, <TT>S</TT> or <TT>W</TT> means that Mirek walks 10 meters north, east, south or west respectively. You may assume that at least one shortcut exists for the given route.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The first and only line of the output contains integers <SPAN CLASS="MATH"><I>l</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>e</I></SPAN> and character <SPAN CLASS="MATH"><I>d</I></SPAN> separated by single spaces. Integer <SPAN CLASS="MATH"><I>l</I></SPAN> is the length of the shortest shortcut (measured in 10 m segments). Integers <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>e</I></SPAN> are the numbers of break points where the shortcut begins and ends respectively (we number break points with consecutive integers from 0 for Mirek's home to <SPAN CLASS="MATH"><I>n</I></SPAN> for the university). Character <SPAN CLASS="MATH"><I>d</I></SPAN> is the direction of the shortcut. If more than one shortcut of the minimal length exists you should output the one that begins earliest on the route. If more than one shortcut of the minimal length begins at the same break point you should output the one that ends furthest on the route. Print a blank line between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

12
NNNENNWWWSSW
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 3 11 W
</PRE><P>
______________________________________________________
2925||||||false||||||
<P>Everyone loves gambling in the Dicent City. Every Saturday the whole community meets to attend a dice contest. They started a few years ago with a classic six-sided die with 1 to 6 dots displayed on the sides and had a lot of fun.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2925.jpg ALT="\epsfbox{p2925.eps}"></DIV><P>However they soon got bored and that's why more sophisticated dice are in use nowadays. They put a sticker on each side and write a positive integer on each sticker.<P>The contest is run on a strip divided into squares in a chessboard-like manner. The strip is 4 squares wide and infinite to the left and to the right (is anyone going to say it can't exist in the real world, huh?). The rows of the strip are numbered from 1 to 4 from the bottom to the top and the columns are numbered by consecutive integers from the left to the right. Each square is identified by a pair <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> where <SPAN CLASS="MATH"><I>x</I></SPAN> is a column number and <SPAN CLASS="MATH"><I>y</I></SPAN> is a row number.<P>The game begins with a die placed on a square chosen be a contest committee with one-dot side on the top and two-dots side facing the player. To move the die the player must roll the die over an edge to an adjacent (either horizontally or vertically) square. The number displayed on the top of the die after a roll is the cost of the move. The goal of the game is to roll the die from the starting square to the selected target square so that the sum of costs of all moves is minimal.<P><P><BR><SPAN CLASS="textbf">Task</SPAN><P>Write a program that:<UL><LI>reads the description of a die, a starting square and a target square, </LI><LI>computes the minimal cost of rolling the die from the starting square to the target square, </LI><LI>writes the result. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test case, each separated by a blank line. The first line of the file indicates the number of test cases, and it's followed by a blank line.<p>The first line of each test case contains six integers <SPAN CLASS="MATH"><I>l</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>l</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>l</I><SUB>3</SUB></SPAN>, <SPAN CLASS="MATH"><I>l</I><SUB>4</SUB></SPAN>, <SPAN CLASS="MATH"><I>l</I><SUB>5</SUB></SPAN>, <SPAN CLASS="MATH"><I>l</I><SUB>6</SUB></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2925.jpg ALT="$ \le$"><I>l</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2925.jpg ALT="$ \le$">50)</SPAN> separated by single spaces. Integer <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> is the number written on a side having originally <SPAN CLASS="MATH"><I>i</I></SPAN> dots. The second line of the input contains four integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <SPAN CLASS="MATH">(- 10<SUP>9</SUP><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2925.jpg ALT="$ \le$"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2925.jpg ALT="$ \le$">10<SUP>9</SUP>, 1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2925.jpg ALT="$ \le$"><I>y</I><SUB>1</SUB>, <I>y</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2925.jpg ALT="$ \le$">4)</SPAN> separated by single spaces. Integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> are the column and the row number of the starting square respectively. Integers <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> are the column and the row number of the target square respectively.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The first and the only line of the output should contain the minimal cost of rolling the die from the starting square to the target square. Print a blank line between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

1 2 3 8 1 4
-1 1 0 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7
</PRE><P>
______________________________________________________
2926||||||false||||||
<P>Japan plans to welcome the ACM ICPC World Finals and a lot of roads must be built for the venue. Japan is tall island with <SPAN CLASS="MATH"><I>N</I></SPAN> cities on the East coast and <SPAN CLASS="MATH"><I>M</I></SPAN> cities on the West coast <SPAN CLASS="MATH">(<I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2926img1.png ALT="$ \le$">1000, <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2926img1.png ALT="$ \le$">1000)</SPAN>. <SPAN CLASS="MATH"><I>K</I></SPAN> superhighways will be build. Cities on each coast are numbered <SPAN CLASS="MATH">1, 2,...</SPAN> from North to South. Each superhighway is straight line and connects city on the East coast with city of the West coast. The funding for the construction is guaranteed by ACM. A major portion of the sum is determined by the number of crossings between superhighways. At most two superhighways cross at one location. Write a program that calculates the number of the crossings between superhighways.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file starts with <SPAN CLASS="MATH"><I>T</I></SPAN> - the number of test cases. Each test case starts with three numbers - <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>M</I></SPAN>, <SPAN CLASS="MATH"><I>K</I></SPAN>. Each of the next <SPAN CLASS="MATH"><I>K</I></SPAN> lines contains two numbers - the numbers of cities connected by the superhighway. The first one is the number of the city on the East coast and second one is the number of the city of the West coast.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case write one line on the standard output:<P><P><BR><TT>Test case</TT> <!-- MATH
 $<case \ number>$
 --><SPAN CLASS="MATH">&lt; <I>case</I>&nbsp;<I>number</I> &gt;</SPAN><TT>:</TT> <!-- MATH
 $<number \ of \ crossings>$
 --><SPAN CLASS="MATH">&lt; <I>number</I>&nbsp;<I>of</I>&nbsp;<I>crossings</I> &gt;</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
3 4 4
1 4 
2 3 
3 2 
3 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Test case 1: 5
</PRE><P>
______________________________________________________
2927||||||false||||||
<P>A chemical company has an unusual shortest path problem.<P>There are <SPAN CLASS="MATH"><I>N</I></SPAN> depots (vertices) where chemicals can be stored. There are <SPAN CLASS="MATH"><I>M</I></SPAN> individual shipping methods (edges) connecting pairs of depots. Each individual shipping method has a cost. In the usual problem, the company would need to find a way to route a single shipment from the first depot (0) to the last <SPAN CLASS="MATH">(<I>N</I> - 1)</SPAN>. That's easy. The problem they have seems harder. They have to ship two chemicals from the first depot (0) to the last <SPAN CLASS="MATH">(<I>N</I> - 1)</SPAN>. The chemicals are dangerous and cannot safely be placed together. The regulations say the company cannot use the same shipping method for both chemicals. Further, the company cannot place the two chemicals in same depot (for any length of time) without special storage handling -- available only at the first and last depots. To begin, they need to know if it's possible to ship both chemicals under these constraints. Next, they need to find the least cost of shipping both chemicals from first depot to the last depot. In brief, they need two completely separate paths (from the first depot to the last) where the overall cost of both is minimal.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of multiple cases. The first line of each input will contain <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> where <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of depots and <SPAN CLASS="MATH"><I>M</I></SPAN> is the number of individual shipping methods. You may assume that <SPAN CLASS="MATH"><I>N</I></SPAN> is less than 64 and that <SPAN CLASS="MATH"><I>M</I></SPAN> is less than 10000. The next <SPAN CLASS="MATH"><I>M</I></SPAN> lines will contain three values, <SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>j</I></SPAN>, and <SPAN CLASS="MATH"><I>v</I></SPAN>. Each line corresponds a single, unique shipping method. The values <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN> are the indices of two depots, and <SPAN CLASS="MATH"><I>v</I></SPAN> is the cost of getting from <SPAN CLASS="MATH"><I>i</I></SPAN> to <SPAN CLASS="MATH"><I>j</I></SPAN>. Note that these shipping methods are directed. If something can be shipped from <SPAN CLASS="MATH"><I>i</I></SPAN> to <SPAN CLASS="MATH"><I>j</I></SPAN> with cost 10, that says nothing about shipping from <SPAN CLASS="MATH"><I>j</I></SPAN> to <SPAN CLASS="MATH"><I>i</I></SPAN>. Also, there may be more than one way to ship between any pair of depots, and that may be important here. A line containing two zeroes signals the end of data and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program must simply determine the minimum cost or, if it's not possible, conclusively state that the shipment cannot be made.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 1 
0 1 20 
2 3 
0 1 20 
0 1 20 
1 0 10 
4 6 
0 1 22 
1 3 11 
0 2 14 
2 3 26 
0 3 43 
0 3 58 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Instance #1: Not possible 
Instance #2: 40 
Instance #3: 73

______________________________________________________
2928||||||false||||||
<P>Every computer science student knows binary trees. Here is one of many possible definitions of binary trees. Binary trees are defined inductively. A binary tree <SPAN CLASS="MATH"><I>t</I></SPAN> is either an external node (leaf) <SPAN CLASS="MATH"><TT>o</TT></SPAN> or an ordered pair <SPAN CLASS="MATH"><I>t</I> = (<I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>)</SPAN> representing an internal node <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="$ \bullet$"></SPAN> with two subtrees attached, left subtree <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> and right subtree <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN>. Under this definition the number of nodes in any binary tree is odd. Given an odd integer <SPAN CLASS="MATH"><I>n</I></SPAN> let <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN> denote the set of all binary trees with <SPAN CLASS="MATH"><I>n</I></SPAN> nodes, both internal and external. For instance <SPAN CLASS="MATH"><I>B</I>(1)</SPAN> consists of only one tree <SPAN CLASS="MATH"><TT>o</TT></SPAN>, <SPAN CLASS="MATH"><I>B</I>(3) = {(<TT>o</TT>;<TT>o</TT>)}</SPAN> and <SPAN CLASS="MATH"><I>B</I>(5)</SPAN> <SPAN CLASS="MATH">= {(<TT>o</TT>,(<TT>o</TT>,<TT>o</TT>)),((<TT>o</TT>,<TT>o</TT>),<TT>o</TT>)}</SPAN>. The trees of <SPAN CLASS="MATH"><I>B</I>(5)</SPAN> are depicted in the figure below.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="\epsfbox{p2928.eps}"></DIV><P>Denote by <SPAN CLASS="MATH">| <I>t</I>|</SPAN> the number of nodes in a tree <SPAN CLASS="MATH"><I>t</I></SPAN>. Given a tree <SPAN CLASS="MATH"><I>t</I></SPAN> we define its unique integer identifier <SPAN CLASS="MATH"><I>N</I>(<I>t</I>)</SPAN> as follows:<UL><LI><SPAN CLASS="MATH"><I>N</I>(<TT>o</TT>) = 0</SPAN> </LI><LI><SPAN CLASS="MATH"><I>N</I>(<I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>) = 2<SUP>| t<SUB>1</SUB>| + | t<SUB>2</SUB>|</SUP> + 2<SUP>| t<SUB>2</SUB>| . </SUP><I>N</I>(<I>t</I><SUB>1</SUB>) + <I>N</I>(<I>t</I><SUB>2</SUB>)</SPAN> </LI></UL><P>For instance, <SPAN CLASS="MATH"><I>N</I>(<TT>o</TT>,<TT>o</TT>) = 2<SUP>2</SUP> + 2<SUP>1 . </SUP>0 + 0 = 4, <I>N</I>(<TT>o</TT>,(<TT>o</TT>,<TT>o</TT>)) = 2<SUP>4</SUP> + 2<SUP>3 . </SUP>0 + 4 = 20, <I>N</I>((<TT>o</TT>,<TT>o</TT>),<TT>o</TT>) = 2<SUP>4</SUP> + 2<SUP>1 . </SUP>4 + 0 = 24.</SPAN><P>Consider the following linear order on all binary trees:<BR><blockquote><TT>o</TT> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="$\displaystyle \preceq$"> <I>t</I><br>(<I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>) <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="$\displaystyle \preceq$"> (<I>u</I><SUB>1</SUB>, <I>u</I><SUB>2</SUB>), when <I>t</I><SUB>1</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="$\displaystyle \prec$"> <I>u</I><SUB>1</SUB>, or <I>t</I><SUB>1</SUB> = <I>u</I><SUB>1</SUB> and <I>t</I><SUB>2</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="$\displaystyle \preceq$"> <I>u</I><SUB>2</SUB></blockquote><P>In this order a single leaf <SPAN CLASS="MATH"><TT>o</TT></SPAN> is the smallest tree and given two nonleaf trees, the smaller one is that with the smaller left tree, if the left subtrees are dierent, and that with the smaller right subtree, otherwise. Hence for instance <SPAN CLASS="MATH">(<TT>o</TT>,(<TT>o</TT>,<TT>o</TT>)) <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="$ \prec$"> ((<TT>o</TT>,<TT>o</TT>),<TT>o</TT>)</SPAN>, since we have <SPAN CLASS="MATH"><TT>o</TT><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="$ \prec$"> (<TT>o</TT>;<TT>o</TT>)</SPAN>. Assume now that the trees in <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN> were sorted using the relation <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="$ \preceq$"></SPAN>. Then, for each tree <SPAN CLASS="MATH"><I>t</I></SPAN> in <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN> we define the successor of <SPAN CLASS="MATH"><I>t</I></SPAN> as the tree that immediately follows <SPAN CLASS="MATH"><I>t</I></SPAN> in <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN>. If <SPAN CLASS="MATH"><I>t</I></SPAN> is the largest one in <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN> then the successor of <SPAN CLASS="MATH"><I>t</I></SPAN> is the smallest tree in set <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN>. For instance, the successor of <SPAN CLASS="MATH">(<TT>o</TT>,<TT>o</TT>)</SPAN> in <SPAN CLASS="MATH"><I>B</I>(3)</SPAN> is the same tree <SPAN CLASS="MATH">(<TT>o</TT>,<TT>o</TT>)</SPAN> and the successor of <SPAN CLASS="MATH">(<TT>o</TT>,(<TT>o</TT>,<TT>o</TT>))</SPAN> in <SPAN CLASS="MATH"><I>B</I>(5)</SPAN> is <SPAN CLASS="MATH">((<TT>o</TT>,<TT>o</TT>),<TT>o</TT>)</SPAN>.<P>Given the integer identifier of some tree <SPAN CLASS="MATH"><I>t</I></SPAN> can you give the identifier of the successor of <SPAN CLASS="MATH"><I>t</I></SPAN> in <SPAN CLASS="MATH"><I>B</I>(| <I>t</I>|)</SPAN>?<P><P><BR><SPAN CLASS="textbf">Task</SPAN><P>Write a program that:<UL><LI>reads the identifier of some binary tree t, </LI><LI>computes the identifier of the successor of t in B(jtj), </LI><LI>writes the result. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test case, each separated by a blank line. The first line of the file indicates the number of test cases, and it's followed by a blank line.<p>The first and only line of each test case contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2928img1.gif ALT="$ \le$">2<SUP>30</SUP>)</SPAN>-the identifier of some binary tree <SPAN CLASS="MATH"><I>t</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The first and only line of the output should contain one integer <SPAN CLASS="MATH"><I>s</I></SPAN> - the identifier of the successor of <SPAN CLASS="MATH"><I>t</I></SPAN> in <SPAN CLASS="MATH"><I>B</I>(| <I>t</I>|)</SPAN>. Print a blank line between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1

20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
24
</PRE><P>
______________________________________________________
2929||||||false||||||
<P>Little Tom is learning how to program. He has just written some programs but is afraid to run them, because he does not know if they will ever stop. Please write a program to help him.<P>This task is not as easy as it may seem, because Tom's programs may behave nondeterministically.<P>Given a program written by Tom, your program should tell him whether his program can stop and if so, what is the shortest possible time before it stops.<P>Tom's computer consists of 32 1-bit registers and the program consists of <SPAN CLASS="MATH"><I>n</I></SPAN> instructions. The registers are numbered from 0 to 31 and the instructions are numbered from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>.<P>Below, <TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>]</TT> stands for the contents of the <SPAN CLASS="MATH"><I>a</I></SPAN>-th register, <!-- MATH
 $0 \le a; b < 32, 0 \le x < n, 0 \le c \le 1$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2929img1.gif ALT="$ \le$"><I>a</I>;<I>b</I> &lt; 32, 0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2929img1.gif ALT="$ \le$"><I>x</I> &lt; <I>n</I>, 0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2929img1.gif ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2929img1.gif ALT="$ \le$">1</SPAN>.<P>The instruction set is as follows:<P><P><BR><P align=center><img src=p2929a.gif><P><BR><P>The last instruction of every program is always <TT>STOP</TT> (although there can be more than one <TT>STOP</TT> instruction in a program). Every program starts with the instruction number 0. Before the start, the contents of the registers can be arbitrary values. Each instruction (including <TT>STOP</TT>) takes 1 processor cycle to execute.<P><P><BR><SPAN CLASS="textbf">Task</SPAN><P>Write a program that:<UL><LI>reads the program, </LI><LI>computes the shortest possible running time of the program, </LI><LI>writes the result. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test case, each separated by a blank line. The first line of the file indicates the number of test cases, and it's followed by a blank line.<p>The first line of each dataset contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2929img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2929img1.gif ALT="$ \le$">16)</SPAN> being the number of instructions of the program. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains one instruction of the program in the format given above. You may assume that the only white characters in the program are single spaces between successive tokens of each instruction.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The first and only line for each dataset should contain the shortest possible running time of the program, measured in processor cycles. If the program cannot stop, output should contain the word "<TT>HANGS</TT>". Print a blank line between datasets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

5
SET 0 1
JZ 4 0
RANDOM 0
JMP 1
STOP
5
MOV 3 5
NOT 3
AND 3 5
JZ 0 3
STOP
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
6
HANGS
</PRE><P>
______________________________________________________
2930||||||false||||||
<P>The company Chris Ltd. is preparing a new sorting hardware called Maximizer. Maximizer has <SPAN CLASS="MATH"><I>n</I></SPAN> inputs numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. Each input represents one integer. Maximizer has one output which represents the maximum value present on Maximizer's inputs.<P>Maximizer is implemented as a pipeline of sorters <SPAN CLASS="MATH"><I>Sorter</I>(<I>i</I><SUB>1</SUB>, <I>j</I><SUB>1</SUB>)</SPAN>, ..., <SPAN CLASS="MATH"><I>Sorter</I>(<I>i</I><SUB>k</SUB>, <I>j</I><SUB>k</SUB>)</SPAN>. Each sorter has <SPAN CLASS="MATH"><I>n</I></SPAN> inputs and <SPAN CLASS="MATH"><I>n</I></SPAN> outputs. <SPAN CLASS="MATH"><I>Sorter</I>(<I>i</I>, <I>j</I>)</SPAN> sorts values on inputs <SPAN CLASS="MATH"><I>i</I>, <I>i</I> + 1,..., <I>j</I></SPAN> in non-decreasing order and lets the other inputs pass through unchanged. The <SPAN CLASS="MATH"><I>n</I></SPAN>-th output of the last sorter is the output of the Maximizer.<P>An intern (a former ACM contestant) observed that some sorters could be excluded from the pipeline and Maximizer would still produce the correct result. What is the length of the shortest subsequence of the given sequence of sorters in the pipeline still producing correct results for all possible combinations of input values?<P><P><BR><SPAN CLASS="textbf">Task</SPAN><P>Write a program that:<UL><LI>reads the description of a Maximizer, i.e. the initial sequence of sorters in the pipeline, </LI><LI>computes the length of the shortest subsequence of the initial sequence of sorters still producing correct results for all possible input data, </LI><LI>writes the result. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test case, each separated by a blank line. The first line of the file indicates the number of test cases, and it's followed by a blank line.<p>The first line of each test case contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2930img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2930img1.gif ALT="$ \le$">50000, 1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2930img1.gif ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2930img1.gif ALT="$ \le$">500000)</SPAN> separated by a single space. Integer <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of inputs and integer <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of sorters in the pipeline. The initial sequence of sorters is described in the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines. The <SPAN CLASS="MATH"><I>k</I></SPAN>-th of these lines contains the parameters of the <SPAN CLASS="MATH"><I>k</I></SPAN>-th sorter: two integers <SPAN CLASS="MATH"><I>i</I><SUB>k</SUB></SPAN> and <SPAN CLASS="MATH"><I>j</I><SUB>k</SUB></SPAN> <!-- MATH
 $(1 \le i_{k} < j_{k} \le n)$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2930img1.gif ALT="$ \le$"><I>i</I><SUB>k</SUB> &lt; <I>j</I><SUB>k</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2930img1.gif ALT="$ \le$"><I>n</I>)</SPAN> separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of only one line containing an integer equal to the length of the shortest subsequence of the initial sequence of sorters still producing correct results for all possible data. Print a blank line between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

40 6
20 30
1 10
10 20
20 30
15 25
30 40
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
</PRE><P>
______________________________________________________
2931||||||false||||||
<p>'Oh no, they've done it again', cries the chief designer at the Waferland chip factory. Once more the routing designers have screwed up completely, making the signals on the chip connecting the ports of two functional blocks cross each other all over the place. At this late stage of the process, it is too expensive to redo the routing. Instead, the engineers have to bridge the signals, using the third dimension, so that no two signals cross. However, bridging is a complicated operation, and thus it is desirable to bridge as few signals as possible. The call for a computer program that finds the maximum number of signals which may be connected on the silicon surface without crossing each other, is imminent. Bearing in mind that there may be thousands of signal ports at the boundary of a functional block, the problem asks quite a lot of the programmer. Are you up to the task?</p><p align="center"><img src="http://livearchive.onlinejudge.org/external/29/p2931.gif alt="Figure 1"><br><i>Figure 1. To the left: The two blocks' ports and their signal mapping (4,2,6,3,1,5). To the right: At most three signals may be routed on the silicon surface without crossing each other. The dashed signals must be bridged.</i></p><p>A typical situation is schematically depicted in figure 1. The ports of the two functional blocks are numbered from 1 to p, from top to bottom. The signal mapping is described by a permutation of the numbers 1 to p in the form of a list of p unique numbers in the range 1 to p, in which the i:th number specifies which port on the right side should be connected to the i:th port on the left side.<p><p>Two signals cross if and only if the straight lines connecting the two ports of each pair do.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>On the first line of the input, there is a single positive integer n, telling the number of test scenarios to follow. Each test scenario begins with a line containing a single positive integer p&lt;40000, the number of ports on the two functional blocks. Then follow p lines, describing the signal mapping:</p><p>On the i:th line is the port number of the block on the right side which should be connected to the i:th port of the block on the left side.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test scenario, output one line containing the maximum number of signals which may be routed on the silicon surface without crossing each other.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
6
4
2
6
3
1
5
10
2
3
4
5
6
7
8
9
10
1
8
8
7
6
5
4
3
2
1
9
5
8
9
2
3
1
7
4
6
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
3
9
1
4
</PRE><P>
______________________________________________________
2932||||||false||||||
<p>Mr Cheng is a collector of old Chinese porcelain, more specifically late 15th century Feng dynasty vases. The art of vase-making at this time followed very strict artistic rules. There was a limited number of accepted styles, each defined by its shape and decoration. More specifically, there were 36 vase shapes and 36 different patterns of decoration -- in all 1296 different styles.</p><p>For a collector, the obvious goal is to own a sample of each of the 1296 styles. Mr Cheng however, like so many other collectors, could never afford a complete collection, and instead concentrates on some shapes and some decorations. As symmetry between shape and decoration was one of the main aestheathical paradigms of the Feng dynasty, Mr Cheng wants to have a full collection of all combinations of k shapes and k decorations, for as large a k as possible. However, he has discovered that determining this k for a given collection is not always trivial. This means that his collection might actually be better than he thinks. Can you help him?</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>On the first line of the input, there is a single positive integer n, telling the number of test scenarios to follow. Each test scenario begins with a line containing a single positive integer m &le; 100 , the number of vases in the collection. Then follow m lines, one per vase, each with a pair of numbers, s<sub>i</sub> and d<sub>i</sub>, separated by a single space, where s<sub>i</sub> ( 0 &lt; s<sub>i</sub> &lt;= 36 ) indicates the shape of Mr Cheng's i:th vase, and d<sub>i</sub> ( 0 &lt; d<sub>i</sub> &lt;= 36 ) indicates its decoration.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test scenario, output one line containing the maximum k, such that there are k shapes and k decorations for which Mr Cheng's collection contains all k*k combined styles.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
5
11 13
23 5
17 36
11 5
23 13
2
23 15
15 23
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2
1
</PRE><P>
______________________________________________________
2933||||||false||||||
<p>In the TV game show Gladiators, the final competition is to run through a steeplechase course. To get some variation, the producer has decided to change the course each week. The course is always built out of m obstacles, all of different heights, placed along a straight line. An obstacle consists of two initially connected platforms which may be separated. Between the two platforms of an obstacle, other higher obstacles may be put. Also, obstacles may be put after one another.</p><p align="center"><img src="http://livearchive.onlinejudge.org/external/29/p2933a.gif alt="Figure 1"><br><i>An obstacle seen from the side.</i></p><p align="center"><img src="http://livearchive.onlinejudge.org/external/29/p2933a.gif alt="Figure 1"><br><i>A steeplechase course consisting of 5 obstacles. The contestants run from left to right.</i></p><p>The producer thinks it is most desirable that the results from different weeks may be compared to each other. Therefore, he wants to build courses of similar degree of difficulty.</p><p>A proposed measure of difficulty is the number of platforms that are higher than their immediately preceeding platform along the course. Moreover, the leftmost (first) platform of the course always give rise to one point since it is located above the floor. E.g. the course to the right in figure 1 has four points of difficulty.</p><p>Your mission is to find out how many ways there are to build a course of a given point of difficulty, from a given number of obstacles.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>On the first line of input is a single positive integer n, telling the number of test scenarios to follow.</p><p>Each test scenario consists of one line containing two non negative integers m and k, where 50 &lt;= m is the number of obstacles, and k is the point of difficulty asked for.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test scenario, output one line containing a single positive integer equal to the number of different courses constructable from the m obstacles, amounting to a point of difficulty of exactly k.</p><p>You may safely assume that the answer is less than 10<sup>100</sup>.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
6
1 0
1 1
2 1
2 2
3 1
3 2
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0
1
1
2
1
8
</PRE><P>
______________________________________________________
2934||||||false||||||
<p>Several surveys indicate that the taller you are, the higher you can climb the corporate ladder. At TALL Enterprises Inc. this de facto standard has been properly formalized: your boss is always at least as tall as you are. Furthermore, you can safely assume that your boss earns a bit more than you do. In fact, you can be absolutely sure that your immediate boss is the person who earns the least among all the employees that earn more than you and are at least as tall as you are. Furthermore, if you are the immediate boss of someone, that person is your subordinate, and all his subordinates are your subordinates as well. If you are nobodys boss, then you have no subordinates. As simple as these rules are, many people working for TALL are unsure of to whom they should be turning in their weekly progress report and how many subordinates they have. Write a program that will help in determining for any employee who the immediate boss of that employee is and how many subordinates they have. Quality Assurance at TALL have devised a series of tests to ensure that your program is correct. These test are described below.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing two positive integers m and q, where m (at most 30000) is the number of employees and q (at most 200) is the number of queries. The following m lines each list an employee by three integers on the same line: employee ID number (six decimal digits, the first one of which is not zero), yearly salary in Euros and finally height in &micro;m (1 &micro;m = 10<sup>-6</sup> meters -- accuracy is important at TALL). The chairperson is the employee that earns more than anyone else and is also the tallest person in the company. Then there are q lines listing queries. Each query is a single legal employee ID.</p>
<p>The salary is a positive integer which is at most 10 000 000. No two employees have the same ID, and no two employees have the same salary. The height of an employee is at least 1 000 000 &micro;m and at most 2 500 000 &micro;m.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each employee ID x in a query output a single line with two integers y k, separated by one space character, where y is the ID of x's boss, and k is the number of subordinates of x. If the query is the ID of the chairperson, then you should output 0 as the ID of his or her boss (since the chairperson has no immediate boss except, possibly, God).</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
3 3
123456 14323 1700000
123458 41412 1900000
123457 15221 1800000
123456
123458
123457
4 4
200002 12234 1832001
200003 15002 1745201
200004 18745 1883410
200001 24834 1921313
200004
200002
200003
200001
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
123457 0
0 2
123458 1
200001 2
200004 0
200004 0
0 3
</PRE>

<P>

______________________________________________________
2935||||||false||||||
<p>Some major cities have subway systems in the form of a tree, i.e. between any pair of stations, there is one and only one way of going by subway. Moreover, most of these cities have a unique central station. Imagine you are a tourist in one of these cities and you want to explore all of the subway system. You start at the central station and pick a subway line at random and jump aboard the subway car. Every time you arrive at a station, you pick one of the subway lines you have not yet travelled on. If there is none left to explore at your current station, you take the subway line back on which you first came to the station, until you eventually have travelled along all of the lines twice, once for each direction. At that point you are back at the central station. Afterwards, all you remember of the order of your exploration is whether you went further away from the central station or back towards it at any given time, i.e. you could encode your tour as a binary string, where 0 encodes taking a subway line getting you one station further away from the central station, and 1 encodes getting you one station closer to the central station.</p><p align="center"><img src="http://livearchive.onlinejudge.org/external/29/p2935.gif><br><i>Figure 1. To the left: A subway tree system. The larger dot is the central station. To the right: Three out of several possible encodings of exploration tours for the subway system.</i></p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>On the first line of input is a single positive integer n, telling the number of test scenarios to follow.</p><p>Each test scenario consists of two lines, each containing a string of the characters '0' and '1' of length at most 3000, both describing a correct exploration tour of a subway tree system.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test scenario, output one line containing the text "same" if the two strings may encode exploration tours of the same subway tree system, or the text "different" if the two strings cannot be exploration tours of the same subway tree system.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
0010011101001011
0100011011001011
0100101100100111
0011000111010101
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
same
different
</PRE><P>
______________________________________________________
2936||||||false||||||
<p>In order to lower the risk of riots and escape attempts, the boards of two nearby prisons of equal prisoner capacity, have decided to rearrange their prisoners among themselves. They want to exchange half of the prisoners of one prison, for half of the prisoners of the other. However, from the archived information of the prisoners' crime history, they know that some pairs of prisoners are dangerous to keep in the same prison, and that is why they are separated today, i.e. for every such pair of prisoners, one prisoners serves time in the first prison, and the other in the second one. The boards agree on the importance of keeping these pairs split between the prisons, which makes their rearrangement task a bit tricky. In fact, they soon find out that sometimes it is impossible to fulfil their wish of swapping half of the prisoners. Whenever this is the case, they have to settle for exchanging as close to one half of the prisoners as possible.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing two non-negative integers m and r, 1&lt;m&lt;200 being the number of prisoners in each of the two prisons, and r the number of dangerous pairs among the prisoners. Then follow r lines each containing a pair x<sub>i</sub> y<sub>i</sub> of integers in the range 1 to m, which means that prisoner x<sub>i</sub> of the first prison must not be placed in the same prison as prisoner y<sub>i</sub> of the second prison.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test scenario, output one line containing the largest integer k &lt;= m / 2, such that it is possible to exchange k prisoners of the first prison for k prisoners of the second prison without getting two prisoners of any dangerous pair in the same prison.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
101 0
3 3
1 2
1 3
1 1
8 12
1 1
1 2
1 3
1 4
2 5
3 5
4 5
5 5
6 6
7 6
8 7
8 8
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
50
0
3
</PRE>

<P>

______________________________________________________
2937||||||false||||||
<p>The city executive board in Lund wants to construct a sightseeing tour by bus in Lund, so that tourists can see every corner of the beautiful city. They want to construct the tour so that every street in the city is visited exactly once. The bus should also start and end at the same junction. As in any city, the streets are either one-way or two-way, traffic rules that must be obeyed by the tour bus. Help the executive board and determine if it's possible to construct a sightseeing tour under these constraints.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing two positive integers m and s, 1&lt;=m&lt;=200, 1&lt;=s&lt;=1000 being the number of junctions and streets, respectively. The following s lines contain the streets. Each street is described with three integers, x<sub>i</sub>, y<sub>i</sub>, and d<sub>i</sub>, 1&lt;=x<sub>i</sub>,y<sub>i</sub>&lt;=m, 0&lt;=d<sub>i</sub>&lt;=1, where x<sub>i</sub> and y<sub>i</sub> are the junctions connected by a street. If d<sub>i</sub>=1, then the street is a one-way street (going from x<sub>i</sub> to y<sub>i</sub>), otherwise it's a two-way street. You may assume that there exists a junction from where all other junctions can be reached.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each scenario, output one line containing the text "possible" or "impossible", whether or not it's possible to construct a sightseeing tour.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
5 8
2 1 0
1 3 0
4 1 1
1 5 0
5 4 1
3 4 0
4 2 1
2 2 0
4 4
1 2 1
2 3 0
3 4 0
1 4 1
3 3
1 2 0
2 3 0
3 2 0
3 4
1 2 0
2 3 1
1 2 0
3 2 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
possible
impossible
impossible
possible
</PRE><P>
______________________________________________________
2938||||||false||||||
<p>The wide dissemination of calculators and computers is not without disadvantages. Teachers all over the world find out that even students in technical disciplines tend to have a surprising lack of calculating ability. Accustomed as they are to the use of calculators and computers, many of them are unable to make calculations like 7*8 mentally, or to factor 91 by heart.</p><p>We all know, but who cares?</p><p>Professor Bartjens cares. Professor Bartjens is a bit old-fashioned. He decided to give his students some training in calculating without electronic equipment - even without a slide rule. He invented a two-person game involving mental calculations.</p><p>Professor Bartjens would write a positive number on the blackboard. During the game more positive numbers may appear on the blackboard. The two players will then make moves in turn. A player on move is obliged to make a move, unless the blackboard is empty, in which case the game is over. A move is one of the following:<ul><li>If you see the number 1 on the blackboard, you may take it. That means: you gain one point, and the number disappears from the blackboard.</li> <li>If you see a prime number p on the blackboard, you may subtract one. That is: you gain one point, and the p on the blackboard is replaced by p - 1.</li> <li>If you see a composite number c on the blackboard, you may replace it by two smaller (positive) numbers, a and b, such that a * b = c. You do not gain any points.</li></ul></p><p>The goal is of course to obtain as many points as you can.</p><p>Professor Bartjens was hoping that his students would find the game so interesting that they would spend all day playing, thereby improving their skills in calculation. Indeed his students did find the game interesting, and spent many hours, not so much playing the game as discussing optimal strategies.</p><p>The students came to two conclusions. First, the sum of the two players' points after any given game are the same regardless of the actual scheme played. Thus, a player maximising his own points also minimises his opponent's! Second, it is always best to take a point when you have the chance. Thus, whenever prime numbers or ones are written on the blackboard, the player on move takes one of them.</p><p>Here is your problem: given a starting number, and assuming both players play to maximise their own points, what will be the outcome?</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario consists of a single line containing the positive integer m&lt;1000000, the number initially written on the blackboard.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test scenario, output one line containing two numbers separated by one space character, equal to the points gained by the two players, both playing to maximise their own points. The first number is the number of points gained by the first player.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
6
1
2
3
4
5
6
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1 0
1 1
2 1
2 2
3 2
2 3
</PRE><P>
______________________________________________________
2939||||||false||||||
<P>Every morning you have to drive to your workplace. Unfortunately, roads are under constant repair. Fortunately, administration is aware that this may cause trouble and they enforce a strict rule on roadblocks: roads must be blocked only half of the time. However, contractors are free to schedule their working hours, still they must follow regulations:<P><UL><LI>Working periods (when the road is blocked) and rest periods (when the road is open) must alternate and be of fixed length. </LI><LI>The beginning of the day (time zero) must coincide with the beginning of a period. </LI></UL><P>Write a program that, given a description of the road network and of contractors schedules outputs the minimal time needed to drive from home to work.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test cases, each of them following the description below. A blank line separates two consecutive cases.<P>The road network is represented on a <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> grid and the first line of the input consists in the number <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2939img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2939img1.png ALT="$ \le$">50</SPAN>.<P>Then, come <SPAN CLASS="MATH"><I>N</I></SPAN> lines of <SPAN CLASS="MATH"><I>N</I></SPAN> characters that represent the road network at time zero. Those lines are made of ``<TT>.</TT>'' (standing for open road) and ``<TT>*</TT>'' (standing for roadblock) and they encode the rows of the grid in increasing order, while columns are also presented in increasing order. Conventionally, your home is at the position first row, first column, while your workplace is at the position last row, last column. Furthermore, you leave home at time <SPAN CLASS="MATH"><I>t</I> = 0</SPAN>, that is, your starting position is first row, first column at time zero.<P>At a given time <SPAN CLASS="MATH"><I>t</I></SPAN>, your car must be on some ``open road'' cell. It takes one unit of time to drive to any of the four adjacent cells heading toward north, south, west or east, and you may also choose to stay on the same cell for one unit of time. Of course, those five moves are valid if and only if the targeted cell exists and is free at time <SPAN CLASS="MATH"><I>t</I> + 1</SPAN>.<P>Finally, come <SPAN CLASS="MATH"><I>N</I></SPAN> lines of <SPAN CLASS="MATH"><I>N</I></SPAN> characters that represent the contractors schedules. Those lines match the ones of the grid description and are made of <SPAN CLASS="MATH"><I>N</I></SPAN> characters `<TT>0</TT>, <TT>1</TT>, ..., <TT>9</TT>' that specify the duration of the working (and rest) period for a given cell. Observe that `<TT>0</TT>' is a bit special, since it means that the corresponding cell status does not change.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, the output consists in a single line, holding either the requested time, or `<TT>NO</TT>', if driving from home to work is not possible.<P>The outputs of two consecutive cases will be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10
.*********
........**
*.******.*
*.******.*
*.******.*
*........*
*.******.*
*.******.*
*........*
********..
0000000000
0000000000
0000000000
0000000000
0000000000
0123456780
0000000000
0000000000
0123456780
0000000000

3
...
**.
**.
021
002
000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample output</A>&nbsp;</FONT></H2><P><PRE>
34

NO
</PRE><P>
______________________________________________________
2940||||||false||||||
<P>You are hired by the french NSA to break the RSA code used on the Pink Card. The easiest way to do that is to factor the public modulus and you have found the fastest algorithm to do that, except that you have to solve a subproblem that can be modeled in the following way.<P>Let <SPAN CLASS="MATH"><I>P</I> = {<I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>n</SUB>}</SPAN> be a set of prime numbers. We call <EM>relation</EM> a set of two primes <SPAN CLASS="MATH">{<I>p</I>, <I>q</I>}</SPAN>, where <SPAN CLASS="MATH"><I>p</I></SPAN> and <SPAN CLASS="MATH"><I>q</I></SPAN> are distinct. You have a collection of <SPAN CLASS="MATH"><I>R</I></SPAN> relations <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB> = {<I>p</I><SUB>i</SUB>, <I>q</I><SUB>i</SUB>}</SPAN>. If <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>T</I></SPAN> are sets of primes, then <SPAN CLASS="MATH"><I>S</I>*<I>T</I></SPAN> will denote the product of all the primes in <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>T</I></SPAN>. You are interested in subproducts of the <SPAN CLASS="MATH">(<I>S</I><SUB>i</SUB>)'<I>s</I></SPAN> whose product make a square.<P>The way you look for these squares is the following. The ultimate goal is to count squares that appear in the process. Relations arrive one at a time. You maintain a collection <SPAN CLASS="MATH"><I>C</I></SPAN> of relations that do not contain any square subproduct. This is easy: at first, <SPAN CLASS="MATH"><I>C</I></SPAN> is empty. Then a relation arrives and <SPAN CLASS="MATH"><I>C</I></SPAN> begins to grow. Suppose a new relation <SPAN CLASS="MATH">{<I>p</I>, <I>q</I>}</SPAN> arrives. If no square appears when adding <SPAN CLASS="MATH">{<I>p</I>, <I>q</I>}</SPAN> to <SPAN CLASS="MATH"><I>C</I></SPAN>, then <SPAN CLASS="MATH">{<I>p</I>, <I>q</I>}</SPAN> is added to the collection. Otherwise, a square is about to appear, we increase the number of squares, <B>but we do not store this relation</B>, hence <SPAN CLASS="MATH"><I>C</I></SPAN> keeps the desired property.<P><P><BR>Let us consider an example. First arrives <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB> = {2, 3}</SPAN> and we put it in <SPAN CLASS="MATH"><I>C</I></SPAN>; then arrive <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB> = {5, 11}</SPAN>, <SPAN CLASS="MATH"><I>S</I><SUB>3</SUB> = {3, 7}</SPAN> and they are stored in <SPAN CLASS="MATH"><I>C</I></SPAN>. Now enters the relation <SPAN CLASS="MATH"><I>S</I><SUB>4</SUB> = {2, 7}</SPAN>. This relation could be used to form the square:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>S</I><SUB>1</SUB>*<I>S</I><SUB>3</SUB>*<I>S</I><SUB>4</SUB> = (2*3)*(3*7)*(2*7) = (2*3*7)<SUP>2</SUP>.</DIV><P></P><P>So we count 1 and do not store <SPAN CLASS="MATH"><I>S</I><SUB>4</SUB></SPAN> in <SPAN CLASS="MATH"><I>C</I></SPAN>. Now, we consider <SPAN CLASS="MATH"><I>S</I><SUB>5</SUB> = {5, 11}</SPAN> that could make a square with <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN>, so we count 1 square more. Then <SPAN CLASS="MATH"><I>S</I><SUB>6</SUB> = {2, 13}</SPAN> is put into <SPAN CLASS="MATH"><I>C</I></SPAN>. Now <SPAN CLASS="MATH"><I>S</I><SUB>7</SUB> = {7, 13}</SPAN> could make the square <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>*<I>S</I><SUB>3</SUB>*<I>S</I><SUB>6</SUB>*<I>S</I><SUB>7</SUB>.</SPAN> Eventually, we get 3 squares.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input consists of several test cases, each of them following the description below. A blank line separates two consecutive cases.<P>Each test case begins with a line containing two integers <SPAN CLASS="MATH"><I>P</I></SPAN> and <SPAN CLASS="MATH"><I>R</I></SPAN>: <SPAN CLASS="MATH"><I>P</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2940img1.png ALT="$ \le$">10<SUP>6</SUP></SPAN> is the number of primes occurring in the test case; <SPAN CLASS="MATH"><I>R</I>(<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2940img1.png ALT="$ \le$">10<SUP>6</SUP>)</SPAN> is the number of sets of primes that arrive. The subsequent <SPAN CLASS="MATH"><I>R</I></SPAN> lines each contain two integers <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN> making a set <SPAN CLASS="MATH">{<I>p</I><SUB>i</SUB>, <I>p</I><SUB>j</SUB>}</SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2940img1.png ALT="$ \le$"><I>i</I>, <I>j</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2940img1.png ALT="$ \le$"><I>P</I>)</SPAN>. Note that we actually do not deal with the primes, that are irrelevant to the solution.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the number of squares that can be formed using the preceding rules. A line contains the number of the test case, followed by the number of square.<P>The outputs of two consecutive cases will be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 7
1 2
3 5
2 4
1 4
3 5
1 6
4 6

2 3
1 2
1 2
1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3

2
</PRE><P>
______________________________________________________
2941||||||false||||||
<P>Eric has a classic football that is made of 32 pieces of leather: 12 black pentagons and 20 white hexagons. Each pentagon adjoins 5 hexagons and each hexagon adjoins 3 pentagons and 3 hexagons. Eric drew a polygon (i.e. a closed line without intersections) along the edges of the pieces. The polygon divided the ball into two parts and Eric painted one of them green.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2941.gif ALT="\epsfbox{p2941.eps}"></DIV><P>He is curious if given the description of the polygon you are able to compute the number of black, white and green pieces?<P><P><BR>Write a program that:<P><UL><LI>reads the description of the polygon from the standard input, </LI><LI>computes the number of black, white and green pieces, </LI><LI>writes the result to the standard output. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test case, each separated by a blank line. The first line of the file indicates the number of test cases, and it's followed by a blank line.<p><P>The first line of the input contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN> being the number of vertices of the polygon. The second line of the input contains <SPAN CLASS="MATH"><I>n</I></SPAN> integers <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> separated by single spaces. Integer <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> (equal 1 or 2) is the number of green pieces adjoining the <SPAN CLASS="MATH"><I>i</I></SPAN>-th vertex of the polygon. The side of the polygon connecting the <SPAN CLASS="MATH"><I>n</I></SPAN>-th and the first vertex always lies between two hexagons.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the first and only line of the output contains three integers <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>w</I></SPAN> and <SPAN CLASS="MATH"><I>g</I></SPAN>. These are the numbers of black, white and green pieces respectively.<P>The outputs of two consecutive cases will be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

21
1 2 1 2 1 2 1 1 1 2 2 1 1 1 1 2 2 2 1 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
11 15 6
</PRE><P>
______________________________________________________
2942||||||false||||||
<P>``ABEAS Corp.'' is a very small company that owns a single airplane. The customers of ABEAS Corp are large airline companies which rent the airplane to accommodate occasional overcapacity.<P>Custommers send renting orders that consist of a time interval and a price that the custommer is ready to pay for renting the airplane during the given time period.<P>Orders of all the custommers are known in advance. Of course, not all orders can be acomodated and some orders have to be declined. Eugene LAWLER, the Chief Scientific Officer of ABEAS Corp would like to maximize the profit of the company.<P>You are requested to compute an optimal solution.<P><P><BR>Consider for instance the case where the company has 4 orders AF514 (start time 0, duration 5, price 10), CO5 (start time 3, duration 7, price 14), AF515 (start time 5, duration 9, price 7) and BA01 (start time 6, duration 9, price 8). The optimal solution consists in declining CO5 and AF515 and the gain is 10 + 8 = 18. Note that the solution made of AF514 and AF515 is feasible (the airplane is rented with no interruption from time 0 to time 14) but non-optimal.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test cases, each of them following the description below. A blank line separates two consecutive cases.<P>Each test case is described by one <TT>input</TT> file that contains all the relevant data: The first line contains the number <SPAN CLASS="MATH"><I>n</I></SPAN> of orders <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2942img1.png ALT="$ \le$">3000)</SPAN>. This line is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines. Each of which describes an order and contains the name identifier of the order (less than 80 characters, with no white space) followed by three integer values: the start time of the order, the duration of the order and the price the custommer is ready to pay for this order (white spaces are used as separators). We assume that orders have a strictly positive duration. You can assume that all relevant times, prices, and costs are strictly less than <SPAN CLASS="MATH">2<SUP>31</SUP></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you are required to compute an optimal solution for each input file. Your program has to write the total price paid by airlines.<P>The outputs of two consecutive cases will be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
AF514 0 5 10
CO5 3 7 14
AF515 5 9 7
BA01 6 9 8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
18
</PRE><P>
______________________________________________________
2943||||||false||||||
<P>Every computer science student knows binary trees. Here is one of many possible definitions of binary trees. Binary trees are defined inductively. A binary tree <SPAN CLASS="MATH"><I>t</I></SPAN> is either an external node (leaf) <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$"></SPAN>; or a single ordered pair <SPAN CLASS="MATH">(<I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>)</SPAN> of two binary trees, left subtree <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> and right subtree <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> respectively, called an internal node. Given an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN> is the set of trees with <SPAN CLASS="MATH"><I>n</I></SPAN> leaves. For instance, the picture below shows the two trees of <SPAN CLASS="MATH"><I>B</I>(3) = {(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">)),((<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">;,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">),<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">)}</SPAN>.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="\epsfbox{p2943.eps}"></DIV><P>Observe that those trees both have two internal nodes and a total of five nodes.<P>Given a tree <SPAN CLASS="MATH"><I>t</I></SPAN> we define its unique integer identifier <SPAN CLASS="MATH"><I>N</I>(<I>t</I>)</SPAN>:<P><OL><LI><SPAN CLASS="MATH"><I>N</I>(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">) = 0</SPAN> </LI><LI><SPAN CLASS="MATH"><I>N</I>(<I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>) = 2<SUP>n<SUB>1</SUB> + n<SUB>2</SUB></SUP> + 2<SUP>n<SUB>2</SUB></SUP><I>N</I>(<I>t</I><SUB>1</SUB>) + <I>N</I>(<I>t</I><SUB>2</SUB>)</SPAN>, where <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> are the number of nodes in <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> respectively. </LI></OL><P>For instance, we have <SPAN CLASS="MATH"><I>N</I>(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">) = 2<SUP>2</SUP> + 2<SUP>1</SUP>&#215;0 + 0 = 4</SPAN>, <SPAN CLASS="MATH"><I>N</I>(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">)) = 2<SUP>4</SUP> + 2<SUP>3</SUP>&#215;0 + 4 = 20</SPAN> and <SPAN CLASS="MATH"><I>N</I>((<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">),<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">) = 2<SUP>4</SUP> + 2<SUP>1</SUP>&#215;4 + 0 = 24</SPAN>.<P>The ordering <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \succeq$"></SPAN> is defined on binary trees as follows:<BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><IMG WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$\displaystyle \bullet$"></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$\displaystyle \succeq$"></TD><TD ALIGN="LEFT" NOWRAP><I>t</I></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">(<I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$\displaystyle \succeq$"></TD><TD ALIGN="LEFT" NOWRAP>(<I>u</I><SUB>1</SUB>, <I>u</I><SUB>2</SUB>), when <I>t</I><SUB>1</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$\displaystyle \succeq$"> <I>u</I><SUB>1</SUB>, or <I>t</I><SUB>1</SUB> = <I>u</I><SUB>1</SUB> and <I>t</I><SUB>2</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$\displaystyle \succeq$"> <I>u</I><SUB>2</SUB></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P><P>Hence for instance, <SPAN CLASS="MATH">(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">)) <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \succeq$"> ((<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">),<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">)</SPAN> holds, since we have <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$"> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \succeq$"> (<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">)</SPAN>.<P><P><BR>Using the ordering <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \succeq$"></SPAN>, <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN> can be sorted. Then, given a tree <SPAN CLASS="MATH"><I>t</I></SPAN> in <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN>, we define <SPAN CLASS="MATH"><I>S</I>(<I>t</I>)</SPAN> as the tree that immediately follows <SPAN CLASS="MATH"><I>t</I></SPAN> in the sorted presentation of <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN>, or as the smallest tree in <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN>, if <SPAN CLASS="MATH"><I>t</I></SPAN> is maximal in <SPAN CLASS="MATH"><I>B</I>(<I>n</I>)</SPAN>. For instance, we have <SPAN CLASS="MATH"><I>S</I>(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">) = (<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">)</SPAN> and <SPAN CLASS="MATH"><I>S</I>(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,(<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">)) = ((<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">,<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">),<IMG WIDTH="13" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \bullet$">)</SPAN>. By composing the inverse of <SPAN CLASS="MATH"><I>N</I></SPAN>,<SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN> we finally define a partial map on integers.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>s</I>(<I>k</I>) = <I>N</I>(<I>S</I>(<I>N</I><SUP>-1</SUP>(<I>k</I>)))</DIV><P></P><P>Write a program that computes <SPAN CLASS="MATH"><I>s</I>(<I>k</I>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first input line contains an integer <SPAN CLASS="MATH"><I>K</I></SPAN>, with <SPAN CLASS="MATH"><I>K</I> &gt; 0</SPAN>. It is followed by <SPAN CLASS="MATH"><I>K</I></SPAN> lines, each specifying an integer <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> with <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \le$"><I>K</I></SPAN> and <!-- MATH
 $0 \le k_{i} < 2^{31}.$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2943img1.png ALT="$ \le$"><I>k</I><SUB>i</SUB> &lt; 2<SUP>31</SUP>.</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the output should consist of <SPAN CLASS="MATH"><I>K</I></SPAN> lines, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th output line being <SPAN CLASS="MATH"><I>s</I>(<I>k</I><SUB>i</SUB>)</SPAN>, or `<TT>NO</TT>' if <SPAN CLASS="MATH"><I>s</I>(<I>k</I><SUB>i</SUB>)</SPAN> does not exist.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
4
0
20
5
432
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
0
24
NO
452
</PRE><P>
______________________________________________________
2944||||||false||||||
<P>Little Tom is learning how to program. He has just written some programs but is afraid to run them, because he does not know if they will ever stop. Please write a program to help him.<P>This is not as easy a task as it may seem, because the computer Tom has is not deterministic.<P>Given a program written by Tom, your program should tell him whether his program can possibly stop and if so, what is the shortest possible time before it stops.<P>The computer consists of 32 1-bit registers and the program consists of <SPAN CLASS="MATH"><I>n</I></SPAN> instructions. The registers are numbered from 0 to 31 and the instructions are numbered from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>.<P>Below, ``<TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>]</TT>" stands for the contents of the <SPAN CLASS="MATH"><I>a</I></SPAN>-th register, <!-- MATH
 $0 \le a, b < 32$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2944img1.png ALT="$ \le$"><I>a</I>, <I>b</I> &lt; 32</SPAN>, <!-- MATH
 $0 \le x < n$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2944img1.png ALT="$ \le$"><I>x</I> &lt; <I>n</I></SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2944img1.png ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2944img1.png ALT="$ \le$">1</SPAN>.<P>The instruction set is the following:<P><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Instruction</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Semantics</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>AND </TT><SPAN CLASS="MATH"><I>a</I>&nbsp;<I>b</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>] := MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>]</TT> and <TT>MEM[<SPAN CLASS="MATH"><I>b</I></SPAN>]</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>OR </TT><SPAN CLASS="MATH"><I>a</I>&nbsp;<I>b</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>] := MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>]</TT> or <TT>MEM[<SPAN CLASS="MATH"><I>b</I></SPAN>]</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>XOR </TT><SPAN CLASS="MATH"><I>a</I>&nbsp;<I>b</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>] := MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>]</TT> xor <TT>MEM[<SPAN CLASS="MATH"><I>b</I></SPAN>]</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>NOT </TT><SPAN CLASS="MATH"><I>a</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>] :=</TT> not <TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>]</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>MOV </TT><SPAN CLASS="MATH"><I>a</I>&nbsp;<I>b</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>] := MEM[<SPAN CLASS="MATH"><I>b</I></SPAN>]</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>SET </TT><SPAN CLASS="MATH"><I>a</I>&nbsp;<I>c</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>] := <SPAN CLASS="MATH"><I>c</I></SPAN></TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>RANDOM </TT><SPAN CLASS="MATH"><I>a</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>] :=</TT> random value (0 or 1)</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>JMP </TT><SPAN CLASS="MATH"><I>x</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>jump to instruction number <SPAN CLASS="MATH"><I>x</I></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>JZ </TT><SPAN CLASS="MATH"><I>x</I>&nbsp;<I>a</I></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>jump to instruction number <SPAN CLASS="MATH"><I>x</I></SPAN> if <TT>MEM[<SPAN CLASS="MATH"><I>a</I></SPAN>] =</TT> 0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>STOP</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>stop the program</TD></TR></TBODY></TABLE></DIV><P>The last instruction of a program is always `<TT>STOP</TT>' (although there can be more than one <TT>STOP</TT> instruction). Every program starts with the instruction number 0. Before the start, the contents of the registers are random. Each instruction (including <TT>STOP</TT>) takes 1 processor cycle to execute.<P><P><BR>Write a program that:<UL><LI>reads the program from the standard input, </LI><LI>computes the shortest possible running time of the program, </LI><LI>writes the result to the standard output. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test cases, each of them following the description below. A blank line separates two consecutive cases.<P>The first line of the input contains integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2944img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2944img1.png ALT="$ \le$">16</SPAN>) being the number of instructions of the program. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains one instruction of the program in the format given above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the first and only line of the output should contain the shortest possible running time of the program, measured in processor cycles. If the program cannot stop, output should contain the word `<TT>HANGS</TT>'.<P>The outputs of two consecutive cases will be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
SET 0 1
JZ 4 0
RANDOM 0
JMP 1
STOP

5
MOV 3 5
NOT 3
AND 3 5
JZ 0 3
STOP
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6

HANGS
</PRE><P>
______________________________________________________
2945||||||false||||||
<P>In Episode III of Star Wars (whose alleged title is <EM>How I became Vader</EM>), R2-D2 (Artoo-Detoo) is again confronted to a tedious work. He is responsible for the loading of the republic transport starships in the fastest way. Imagine a huge space area where <SPAN CLASS="MATH"><I>n</I></SPAN> starships are parked. Each starship has a capacity of <SPAN CLASS="MATH"><I>K</I></SPAN> cubic femtoparsec. Containers <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> arrive one at a time with some volume <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> (expressed in cubic femtoparsec). R2-D2 wants to minimize the number of starships used for a given sequence of containers.<P>Smart as he is, R2-D2 knows for sure that the problem is a hard one, even with the force being around. Here is the heuristics he selected to solve his problem. Start with all starships ready to load, and numbered <SPAN CLASS="MATH"><I>S</I><SUB>0</SUB></SPAN>, <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN>, etc.. When container <SPAN CLASS="MATH"><I>C</I><SUB>j</SUB></SPAN> arrives, select the starship of minimal index <SPAN CLASS="MATH"><I>i</I></SPAN> that can contain <SPAN CLASS="MATH"><I>C</I><SUB>j</SUB></SPAN> and put it in <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN>. In some sense, this heuristics minimizes the move of the container arriving before its loading.<P>At the end of the <SPAN CLASS="MATH"><I>n</I></SPAN> arrivals, R2-D2 counts the number <SPAN CLASS="MATH"><I>s</I></SPAN> of starships used and he measures the <EM>total waste</EM> <SPAN CLASS="MATH"><I>w</I></SPAN> of the sequence. For <SPAN CLASS="MATH"><I>i</I> = 0..<I>s</I> - 1</SPAN>, the <EM>waste</EM> in starship <SPAN CLASS="MATH"><I>i</I></SPAN> is given by the unused volume.<P>Your task is to simulate the algorithm of R2-D2.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test cases, each of them following the description below. A blank line separates two consecutive cases.<P>Each test file begins with capacity <SPAN CLASS="MATH"><I>K</I></SPAN> on a line <SPAN CLASS="MATH">(<I>K</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2945img1.png ALT="$ \le$">1000)</SPAN>, followed by the number of containers in the sequence, <SPAN CLASS="MATH"><I>n</I></SPAN> on the second line <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2945img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2945img1.png ALT="$ \le$">10<SUP>6</SUP>)</SPAN>. There are two possible formats for the remaining lines. If it contains one integer, then this is the next <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN>. If it begins with the character `<TT>b</TT>' (for block), it is followed by 2 integers <SPAN CLASS="MATH"><I>r</I></SPAN> and <SPAN CLASS="MATH"><I>v</I></SPAN>. This means that the <SPAN CLASS="MATH"><I>r</I></SPAN> next containers arriving have volume <SPAN CLASS="MATH"><I>v</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program must output the number <SPAN CLASS="MATH"><I>s</I></SPAN> of starships used, followed by a blank, followed by the total waste <SPAN CLASS="MATH"><I>w</I></SPAN>.<P>The outputs of two consecutive cases will be separated by a blank line.<P><P><BR>In the first sample input below, you load starship <SPAN CLASS="MATH"><I>S</I><SUB>0</SUB></SPAN> with 50 and 25 and starship <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> with 70, so that the waste is (100-75)+(100-70)=55. The answer must be `<TT>2 55</TT>'<P>The second case which corresponds to the sequence 50, 40, 40, 20. <SPAN CLASS="MATH"><I>S</I><SUB>0</SUB></SPAN> will contain 90, <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> will contain 60, so that the waste is 10+40=50 and the answer will be: `<TT>2 50</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100
3
50
25
70

100
4
50
b 2 40
20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 55

2 50
</PRE><P>
______________________________________________________
2946||||||false||||||
<P>You are chief debugger for Poorly Guarded Privacy, Inc. One of the top selling product, ReallySecureAgent&#169;, seems to have a problem with its prime number generator. It produces from time to time bogus primes <SPAN CLASS="MATH"><I>N</I></SPAN>. After a while, you realize that the problem is due to the way primes are recognized.<P>Every phony prime <SPAN CLASS="MATH"><I>N</I></SPAN> you discover can be characterized as follows. It is odd and has distinct prime factors, say <SPAN CLASS="MATH"><I>N</I> = <I>p</I><SUB>1</SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2946img1.png ALT="$ \star$"><I>p</I><SUB>2</SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2946img1.png ALT="$ \star$">...<IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2946img1.png ALT="$ \star$"><I>p</I><SUB>k</SUB></SPAN> with <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2946img1.png ALT="$ \not\equiv$"><I>p</I><SUB>j</SUB></SPAN>, where the number <SPAN CLASS="MATH"><I>k</I></SPAN> of factors is at least 3. Moreover, for all <SPAN CLASS="MATH"><I>i</I> = 1..<I>k</I></SPAN>, <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> - 1</SPAN> divides <SPAN CLASS="MATH"><I>N</I> - 1</SPAN>. For instance, <SPAN CLASS="MATH">561 = 3<IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2946img1.png ALT="$ \star$">11<IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2946img1.png ALT="$ \star$">17</SPAN> is a phony prime.<P>Intrigued by this phenomenon, you decide to write a program that enumerates all such <SPAN CLASS="MATH"><I>N's</I></SPAN> in a given interval <SPAN CLASS="MATH">[<I>N</I><SUB>min</SUB>, <I>N</I><SUB>max</SUB>]</SPAN>, with <!-- MATH
 $1 \le N_{min} < N_{max} < 2^{31}$
 --><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2946img1.png ALT="$ \le$"><I>N</I><SUB>min</SUB> &lt; <I>N</I><SUB>max</SUB> &lt; 2<SUP>31</SUP></SPAN>, <!-- MATH
 $N_{max} - N_{min} < 10^{6}.$
 --><SPAN CLASS="MATH"><I>N</I><SUB>max</SUB> - <I>N</I><SUB>min</SUB> &lt; 10<SUP>6</SUP>.</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test cases, each of them following the description below. A blank line separates two consecutive cases.<P>Each test file contains one line. On this line are written the two integers <SPAN CLASS="MATH"><I>N</I><SUB>min</SUB></SPAN> and <SPAN CLASS="MATH"><I>N</I><SUB>max</SUB></SPAN> separated by a blank.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the list of phony primes in increasing order, one per line. If there are no phony prime in the interval, then simply output `<TT>none</TT>' on a line.<P>The outputs of two consecutive cases will be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
10 2000

20000 21000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
561
1105
1729

none
</PRE><P>
______________________________________________________
2947||||||false||||||
<P>Contemporary buildings can have very complicated roofs. If we take a vertical section of such a roof it amounts to a number of sloping segments. When it is raining the drops are falling down onto the roof straight from the sky above. Some segments are completely exposed to the rain but there may be some segments partially or even completely shielded by other segments. All the water falling onto a segment flows as a stream straight down from the lower end of the segment on the ground or possibly onto some other segment. In particular if a stream of water is falling on an end of a segment then we consider it to be collected by this segment.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2947.gif ALT="\epsfbox{p2947.eps}"></DIV><P>For the purpose of designing a piping system it is desired to compute how much water is flowing down from each segment of the roof. To be prepared for a heavy November rain you should count one liter of rain water falling on a meter of the horizontal plane during one second.<P><P><BR>Write a program that:<P><UL><LI>reads the description of the roof from the standard input, </LI><LI>computes the amount of water flowing down in one second from each segment of the roof, </LI><LI>writes the result to the standard output. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several test cases separated by a blank line. The first line of the input indicates the number of test cases, and it's followed by a blank line.<p>The first line of each dataset contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2947.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2947.gif ALT="$ \le$">40000</SPAN>) being the number of segments of the roof. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines describes one segment of the roof and contains four integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2947.gif ALT="$ \le$"><I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2947.gif ALT="$ \le$">1000000</SPAN>, <!-- MATH
 $x_{1} < x_{2}$
 --><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> &lt; <I>x</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB> != <I>y</I><SUB>2</SUB></SPAN>) separated by single spaces. Integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> are respectively the horizontal position and the height of the left end of the segment. Integers <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> are respectively the horizontal position and the height of the right end of the segment. The segments don't have common points and there are no horizontal segments. Also you can assume that there are at most 100 segments placed above any point on the ground level.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the output consists of <SPAN CLASS="MATH"><I>n</I></SPAN> lines. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line should contain the amount of water (in liters) flowing down from the <SPAN CLASS="MATH"><I>i</I></SPAN>-th segment of the roof during one second.<P>The outputs of two consecutive cases will be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
13 7 15 6
3 8 7 7
1 7 5 6
5 5 9 3
6 3 8 2
9 6 12 8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
4
2
11
0
3
</PRE><P>
______________________________________________________
2948||||||false||||||

<P>
As we know, an atom can be in different energy states (or ``energy levels"). Usually, when it transits from a higher
energy state to a lower one, it will emit a photon, whose energy is equal to the difference in energy of these two states.
Absorption of photons is the reverse process. If a photon, whose energy equal to the difference in energy of two states
of an atom, passes by, it may be absorbed and its energy will put the atom into a higher energy level. For most elements,
the atom can transit between any two states directly, by emitting or absorbing only one photon. Scientists are puzzled by
a new element that they discovered recently. For two certain energy states, the atom of this element can transit between
them directly (emitting or absorbing one and only one photon), but for some other pairs of energy states, the atom cannot.

<P>

<P>
<BR>
Generally speaking, when an atom transits among energy states one after another, a trail of events (emitting or absorbing
a photon) occurs. For example, when transiting from energy state  <SPAN CLASS="MATH"><I>E</I><SUB>i<SUB>1</SUB></SUB></SPAN> to <SPAN CLASS="MATH"><I>E</I><SUB>i<SUB>t</SUB></SUB></SPAN> , the atom follows this
sequence:

<P>
<!-- MATH
 \begin{displaymath}
E_{i_{1}},E_{i_{2}},E_{i_{3}},\cdots,E_{i_{k}},\cdots,E_{i_{t}}
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>E</I><SUB>i<SUB>1</SUB></SUB>, <I>E</I><SUB>i<SUB>2</SUB></SUB>, <I>E</I><SUB>i<SUB>3</SUB></SUB>,<SUP> ... </SUP>, <I>E</I><SUB>i<SUB>k</SUB></SUB>,<SUP> ... </SUP>, <I>E</I><SUB>i<SUB>t</SUB></SUB>
</DIV><P></P>

<P>
<SPAN CLASS="MATH"><I>E</I><SUB>i<SUB>k</SUB></SUB></SPAN> (<!-- MATH
 $1 \le k \le t$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2948img1.png
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2948img1.png
 ALT="$ \le$"><I>t</I></SPAN>) represents a certain energy state. During the of process of transiting from  <SPAN CLASS="MATH"><I>E</I><SUB>i<SUB>k</SUB></SUB></SPAN>
to <!-- MATH
 $E_{i_{k+1}}$
 -->
<SPAN CLASS="MATH"><I>E</I><SUB>i<SUB>k + 1</SUB></SUB></SPAN>, one and only one photon is emitted or absorbed.

<P>

<P>
<BR>
The atom can be in any energy state and transit to some other one. But as we mentioned above, for some pairs of energy
states, this special atom cannot transit between them directly. What's more, when its energy state changes from one to
another, for example, from  <SPAN CLASS="MATH"><I>E</I><SUB>j<SUB>1</SUB></SUB></SPAN> to  <SPAN CLASS="MATH"><I>E</I><SUB>j<SUB>w</SUB></SUB></SPAN>, it can only  follow a unique sequence
<!-- MATH
 $E_{j_{1}}, E_{j_{2}}, E_{j_{3}},\cdots, E_{j_{w}}$
 -->
<SPAN CLASS="MATH"><I>E</I><SUB>j<SUB>1</SUB></SUB>, <I>E</I><SUB>j<SUB>2</SUB></SUB>, <I>E</I><SUB>j<SUB>3</SUB></SUB>,<SUP> ... </SUP>, <I>E</I><SUB>j<SUB>w</SUB></SUB></SPAN>. And the most interesting thing is that it can only follow
another unique sequence <!-- MATH
 $E_{j_{w}},\cdots, E_{j_{3}}, E_{j_{2}}, E_{j_{1}}$
 -->
<SPAN CLASS="MATH"><I>E</I><SUB>j<SUB>w</SUB></SUB>,<SUP> ... </SUP>, <I>E</I><SUB>j<SUB>3</SUB></SUB>, <I>E</I><SUB>j<SUB>2</SUB></SUB>, <I>E</I><SUB>j<SUB>1</SUB></SUB></SPAN>, when it transits back from <SPAN CLASS="MATH"><I>E</I><SUB>j<SUB>w</SUB></SUB></SPAN>
to <SPAN CLASS="MATH"><I>E</I><SUB>j<SUB>1</SUB></SUB></SPAN>.

<P>
You can find that it is the reversion of the former one! Right! Isn't it special?

<P>

<P>
<BR>
Now, the scientists need your help today. In an experiment, some atoms of this new element will be put into a container.
Any two atoms would be regarded as  ``dangerous atoms" if they satisfy one of the following conditions:

<P>

<OL>
<LI>They are in the same energy state.
</LI>
<LI>They are in different energy states. But if one of them emits or absorbs a photon, they will be in
the same states too.
</LI>
</OL>

<P>
You must make sure that there are no dangerous atoms in this container. And the higher the total energy of the atoms in
the container is, the more easily will the experiment succeed.

<P>
Now, the scientists have told you all photons that the atoms of this element can emit or absorb, as well as the energy
of all atom states. They ask you calculate the highest total energy that the atoms in the container can reach.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several testcases in the input. Each begins with a line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>M</I></SPAN> <!-- MATH
 $(0 < N, M \le 200)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>N</I>, <I>M</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2948img1.png
 ALT="$ \le$">200)</SPAN>,
representing the number of the energy levels and the number of the different photons that this kind of atom can emit or
absorb respectively. The two numbers are followed by exactly <SPAN CLASS="MATH"><I>N</I> + <I>M</I></SPAN> lines, which contain one positive integer each.
These <SPAN CLASS="MATH"><I>N</I> + <I>M</I></SPAN> positive integers are not greater than 1,000,000. The  first <SPAN CLASS="MATH"><I>N</I></SPAN> distinguishing integers are the energy of
the atom in the <SPAN CLASS="MATH"><I>N</I></SPAN> different energy states in ascending order. The next <SPAN CLASS="MATH"><I>M</I></SPAN> integers correspond to the energy of
the <SPAN CLASS="MATH"><I>M</I></SPAN> different photons, which can be emitted or absorbed by atoms of this element. If the difference in energy
of any two states equals to the energy of one of the <SPAN CLASS="MATH"><I>M</I></SPAN> photons, the atom can transit between these two states directly.

<P>
There is no blank line between two data sets. The last testcase is followed by a line containing two zeros.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each testcase, output one line containing an integer, which indicates the highest total energy that the atoms
in the container can reach. There should be no blank line between any two cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 1
2
4
6
2
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8
</PRE>

<P>

______________________________________________________
2949||||||false||||||

<P>
ZSoft  Corp.  is  a  software  company  in  GaoKe  Hall.  And  the  workers  in  the  hall  are  very hard-working.
But the elevator in that hall always drives them crazy. Why? Because there is only one elevator in GaoKe Hall, while
there are hundreds of companies in it. Every morning, people must waste a lot of time waiting for the elevator.

<P>
Hal,  a smart  guy  in  ZSoft,  wants  to  change  this  situation.  He  wants  to  find  a  way  to  make  the
elevator work more effectively. But it's not an easy job.

<P>

<P>
<BR>
There are 31 floors in GaoKe Hall. It takes 4 seconds for the elevator to raise one floor. It means:

<P>
It  costs  <!-- MATH
 $(31-1) \times 4 = 120$
 -->
<SPAN CLASS="MATH">(31 - 1)&#215;4 = 120</SPAN> seconds  if  the  elevator  goes  from  the  1-st  floor  to
the  31-st  floor without stop. And the elevator stops 10 second once. So, if the elevator stops at
each floor, it will cost  <!-- MATH
 $30 \times 4 + 29 \times 10 = 410$
 -->
<SPAN CLASS="MATH">30&#215;4 + 29&#215;10 = 410</SPAN> seconds (It is not  necessary to calculate the
stopping time  at 31st floor). In another  way, it takes 20 seconds for the  workers  to  go  up  or down one
floor. It takes <!-- MATH
 $30 \times 20 = 600$
 -->
<SPAN CLASS="MATH">30&#215;20 = 600</SPAN> seconds for them to walk from the 1-st floor to the 31-st
floor. Obviously, it is not a good idea. So some people choose to use the elevator to get a floor which is the
nearest to their office.

<P>

<P>
<BR>
After thinking over for a long time, Hal finally found a way to improve this situation. He told the elevator
man his idea: First, the elevator man asks the people which  floors they want to go. He will then design a stopping
plan which minimize the time the last person need to arrive the floor where his office locates. For example, if
the elevator is required to stop at the 4-th, 5-th and 10-th floor, the stopping
plan would be: the elevator stops at 4-th and 10-th floor. Because the elevator will arrive
<!-- MATH
 $4^{\mbox{th}}$
 -->
<SPAN CLASS="MATH">4<SUP>th</SUP></SPAN> floor at <!-- MATH
 $3 \times 4 = 12$
 -->
<SPAN CLASS="MATH">3&#215;4 = 12</SPAN> second, then it will stop 10 seconds, then it will arrive <!-- MATH
 $10^{\mbox{th}}$
 -->
<SPAN CLASS="MATH">10<SUP>th</SUP></SPAN>
floor at <!-- MATH
 $3 \times 4 +10 + 6 \times 4 = 46$
 -->
<SPAN CLASS="MATH">3&#215;4 + 10 + 6&#215;4 = 46</SPAN> second. People  who  want to  go  4-th  floor  will  reach
their  office  at  12 second, people who want to go to 5-th floor will reach at  <!-- MATH
 $12 + 20 = 32$
 -->
<SPAN CLASS="MATH">12 + 20 = 32</SPAN> second
and people who want to go to 10-th floor will reach at 46 second. Therefore it takes 46 seconds for the
last person to reach his office. It is a good deal for all people.

<P>
Now, you are supposed to write a program to help the elevator man to design the stopping plan, which minimize the
time the last person needs to arrive at his floor.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of several testcases. Each testcase is in a single line as the following:

<P>
<!-- MATH
 \begin{displaymath}
n \ f_{1} \ f_{2} \ \dots \ f_{n}
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>n</I>&nbsp;<I>f</I><SUB>1</SUB>&nbsp;<I>f</I><SUB>2</SUB>&nbsp;...&nbsp;<I>f</I><SUB>n</SUB>
</DIV><P></P>

<P>
It means, there are totally <SPAN CLASS="MATH"><I>n</I></SPAN> floors at which the elevator need to stop, and <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> means no testcases any more.
<!-- MATH
 $f_{1} \ f_{2} \ \dots \ f_{n}$
 -->
<SPAN CLASS="MATH"><I>f</I><SUB>1</SUB>&nbsp;<I>f</I><SUB>2</SUB>&nbsp;...&nbsp;<I>f</I><SUB>n</SUB></SPAN> are the floors at which the elevator is to be stopped
(<SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2949img1.png
 ALT="$ \le$">30</SPAN>, <!-- MATH
 $2 \le f_{1} < f_{2} < \dots < f_{n} \le 31$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2949img1.png
 ALT="$ \le$"><I>f</I><SUB>1</SUB> &lt; <I>f</I><SUB>2</SUB> &lt; ... &lt; <I>f</I><SUB>n</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2949img1.png
 ALT="$ \le$">31</SPAN>). Every number is separated by a single space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each testcase, output the time the last reading person needs in the first line and the stopping floors in
the second line. Please note that there is a summary of the floors at the head of the second line. There may be
several solutions, any appropriate one is accepted. No extra spaces are allowed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 4 5 10
1 2
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
46
2 4 10
4
1 2
</PRE>

<P>

______________________________________________________
2950||||||false||||||

<P>
The  history  of  Go  traces  back  to  some  3,000  years,  and  the  rules  have  remained  essentially unchanged
throughout  this  very  long  period.  The  game  probably  originated  in  China  or  the Himalayas. Mythology says
that the future of Tibet was once decided over a Go board, when the buddhist ruler refused to go into battle; instead
he challenged the aggressor to a game of Go to avoid bloodshed.

<P>
Like Chess, Go is a game of skill, but it differs from Chess in many ways. The rules of Go are very simple, like Chess,
it is a challenge to players' analytical skills, but there is far more scope in Go for intuition.

<P>
Go is a territorial game. The board, marked with a grid of 19 lines by 19 lines, may be thought of as a piece of land
to be shared between the two players. One player has a supply of black pieces, called stones, the other a supply of
white. The game starts with an empty board and the players take turns, placing one stone at each turn on a vacant
point. Black plays first, and the stones are placed on the intersections of the lines rather than in the squares.

<P>

<P>
<BR>
Now, forget the rules of the original Go game. I'll tell you how to play it with only black stones. Let  me put
some black stones on  an empty board  first. Then,  you are supposed to tell  me how many intersections  are enclosed
by the black stones.  What? You can't tell which intersection is enclosed? OK. I'll make it clear. The first, an
enclosed intersection must be an intersection without any stone on it. The second, an intersection at any border
can't be an enclosed intersection. The third,  the  four  near  intersections  (up,  down,  left,  right)  must
be  enclosed  intersections  or  be occupied by a black stone. As the figure below, there are 3 enclosed intersections.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2950.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2950.jpg
 ALT="\epsfbox{p2950.eps}">
</DIV>

<P>
It's very easy. But, hold on please. It shouldn't be so easy. For some reason, you don't know where the black stones
have been put directly.

<P>
Four groups of numbers are used to describe the situation of an <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> board. In the 1-st group,
there are <SPAN CLASS="MATH"><I>N</I></SPAN> numbers, and the <SPAN CLASS="MATH"><I>k</I></SPAN>-th number indicates the quantity of black stones on the <SPAN CLASS="MATH"><I>k</I></SPAN>-th
row (from up to down, <!-- MATH
 $1 \le k \le N$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2950.jpg
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2950.jpg
 ALT="$ \le$"><I>N</I></SPAN>). In the 2-nd group, there are also <SPAN CLASS="MATH"><I>N</I></SPAN> numbers, and the
<SPAN CLASS="MATH"><I>k</I></SPAN>-th number in this group indicates the quantity of black stones on the <SPAN CLASS="MATH"><I>k</I></SPAN>-th column
(from left to right, <!-- MATH
 $1 \le k \le N$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2950.jpg
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2950.jpg
 ALT="$ \le$"><I>N</I></SPAN>). In the 3-rd group, there are <SPAN CLASS="MATH">2<I>N</I> - 1</SPAN> numbers, which indicate the
quantity of black stones on every slanted line one by one (from left to right, from up to down). In the
4-th group, there are also <SPAN CLASS="MATH">2<I>N</I> - 1</SPAN> numbers, and they indicate the quantity of black stones on every
oblique line one by one (from left to right, from down to up). So, the above <SPAN CLASS="MATH">5&#215;5</SPAN> board with several black
stones can be described as below four groups of numbers.

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER FRAME=HSIDES RULES=NONE>
<COL ALIGN=RIGHT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>
1-st group </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 1 3 2 3 1 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 
2-nd group </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 0 2 2 2 4 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 
3-rd group </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 0 0 1 3 0 2 2 1 1</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 
4-th group </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 0 0 0 2 3 2 1 2 0</TD></TR>
</TABLE>

</DIV>

<P>
Now, your task is to write a program to rebuild the board from the four groups of numbers (I'm sure you can rebuild
one and only one board from our numbers), and tell me how many enclosed intersections in it.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several testcases. The first line of each testcase  is an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <!-- MATH
 $(N \le 15)$
 -->
<SPAN CLASS="MATH">(<I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2950.jpg
 ALT="$ \le$">15)</SPAN>, representing
the size of the board.  Then, four lines follow, representing the numbers in the 1-st group, 2-nd
group ...and so on.

<P>
The input is terminated by a single zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each testcase, output an integer indicating the number of intersections that are enclosed by black stones on
the board in a single line. No extra spaces are allowed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
1 3 2 3 1
0 2 2 2 4
0 0 1 3 0 2 2 1 1
0 0 0 2 3 2 1 2 0
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
</PRE>

<P>

______________________________________________________
2951||||||false||||||
<P>A company named Outdaters is running a small computer wire line network, called Outernet. Not like Internet, Outernet is not base on the TCP/IP protocol. Due to lacking of money, not all the computers in Outernet can communicate with each other directly.<P><P><BR>Outdaters have already found the solution. They created a protocol to make all computers in the network become application proxies. An application proxy can receive data from a connected computer and send them out to another connected computer. Therefore, by using this protocol in Outernet, if a computer wants to send something to a computer not linked directly, it has to send them to a connected computer/application proxy and ask it to help sending them to the destination or another connected computer/application proxy.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2951.jpg ALT="\epsfbox{p2951.eps}"></DIV><P>The protocol is described as<P><P><BR><B>A. Port</B><P>Application proxies use port to indicate each connected computer. Port number is an integer number from 0 to 32,767. To an application proxy, 0 means the application proxy itself, each other port number represents a unique computer connected to the application proxy.<P><P><BR><B>B. Commands</B><P>The application proxy accepts only 3 commands, case sensitive: TO, DATA, QUIT.<P>To each incoming command, application proxy will response with 3-digit result code in a line to the incoming port after handled this command.<P><DL><DT><STRONG>Format:</STRONG></DT><DD><P><SPAN CLASS="MATH"><I>xxx</I> &lt;</SPAN>LF<SPAN CLASS="MATH">&gt;</SPAN> <SPAN CLASS="MATH"><I>xxx</I></SPAN> - the 3-digit result code<P></DD><DT><STRONG>Result codes:</STRONG></DT><DD><P>100: OK. No error/Data routed to destination<P>101: OK. Data routed to application. (Destination computer is application proxy itself.)<P><P><P><BR>200: Session ends (Response to QUIT command)<P><P><P><BR>300: Unknown command<P>301: Unknown destination<P>302: No session began<P>303: Looping not allowed (when <SPAN CLASS="MATH"><I>incoming</I>&nbsp;<I>port</I> = <I>outgoing</I>&nbsp;<I>port</I></SPAN>)<P><P><BR></DD><DT><STRONG>Details for each command:</STRONG></DT><DD><P><OL><LI>TO:<!-- MATH
 $<destination \ computer \ name><$
 --> <SPAN CLASS="MATH">&lt; <I>destination</I>&nbsp;<I>computer</I>&nbsp;<I>name</I> &gt; &lt;</SPAN>LF<SPAN CLASS="MATH">&gt;</SPAN><P>Tell the application proxy, the following data need to be sent to <!-- MATH
 $<destination \ computer \ name>$
 --><SPAN CLASS="MATH">&lt; <I>destination</I>&nbsp;<I>computer</I>&nbsp;<I>name</I> &gt;</SPAN>, and cancel the last ``TO" command's effect (send a ``QUIT" command to the original destination computer). If TO command fails (result code is neither 100 nor 101), the state of the application proxy will not be changed.<P><P><BR><B>Possible result codes are:</B><P>100: The destination computer is found in routing table, and not the application proxy itself.<P>101: The destination computer is found in routing table, and <SPAN CLASS="textbf">IS</SPAN> the application proxy itself.<P>301: The destination computer is not found in routing table<P>303: The destination computer is found in routing table, but <SPAN CLASS="MATH"><I>incoming</I>&nbsp;<I>port</I> = <I>outgoing</I>&nbsp;<I>port</I></SPAN><P></LI><LI>DATA<SPAN CLASS="MATH">&lt;</SPAN>LF<!-- MATH
 $><the \ data><$
 --> <SPAN CLASS="MATH">&gt; &lt; <I>the</I>&nbsp;<I>data</I> &gt; &lt;</SPAN>a dot ``."<SPAN CLASS="MATH">&gt; &lt;</SPAN>LF<SPAN CLASS="MATH">&gt;</SPAN><P>Send <!-- MATH
 $<the \ data>$
 --><SPAN CLASS="MATH">&lt; <I>the</I>&nbsp;<I>data</I> &gt;</SPAN> to destination computer. <!-- MATH
 $<the \ data>$
 --><SPAN CLASS="MATH">&lt; <I>the</I>&nbsp;<I>data</I> &gt;</SPAN> will be regarded as a data stream, and sent to the destination without any alteration if the destination computer is not the application proxy itself. The backslash (`` <SPAN CLASS="MATH">&#92;</SPAN>") is the meta character, `` <SPAN CLASS="MATH">&#92;.</SPAN>" means a simple dot ``.", instead of then end indicator, and `` <SPAN CLASS="MATH">&#92;&#92;</SPAN>" means `` <SPAN CLASS="MATH">&#92;</SPAN>".<P><B>Possible result codes are:</B><P>100: The destination computer is found in routing table, and not the application proxy itself. The data is routed to the corresponding outgoing port.<P>101: The destination computer is found in routing table, and <B>IS</B> the application proxy itself. The data is routed to the application running on this application proxy.<P>302: No session began, this command is ignored.<P></LI><LI>QUIT<SPAN CLASS="MATH">&lt;</SPAN>LF<SPAN CLASS="MATH">&gt;</SPAN><P>End this communication session.<P>Possible result codes are:<P>200: Session ends (Response to QUIT command)<P>302: No session began, this command is ignored.<P></LI></OL></DD></DL><P><P><BR><B>C. Session</B><P>When a computer (the requester) sends a "TO" command to an application proxy, a communication session begins; when a "QUIT" command is sent to the application proxy, the session ends. In a session, the requester can send multiple "TO" and "DATA" commands to an application proxy to send out multiple messages.<P><SPAN CLASS="textbf">An application proxy is able to handle sessions simultaneously from different ports.</SPAN><P><P><BR><B>D. Routing table</B><P>Each application proxy holds a routing table. It uses this table to find which port should be used the destination computer name. Each line in the routing table contains 2 fields, the first is the destination computer name, and the second is the outgoing port number. It means, the data to be sent to a computer with the destination computer name, will be sent out via the port with the outgoing port number. Port number 0 means, the data should be routed to the application running on this application proxy; that destination computer name is actually the application proxy's name.<P><P><BR><B>E. Routing</B><P>Application proxies use the same ``TO", ``DATA", ``QUIT" commands to route the incoming data if the routing is possible.<P>After searching on the routing table, if the outgoing port found, application proxies must create a complete session on the outgoing port for each valid incoming ``TO" command: one ``TO" command at the beginning, zero or more DATA commands to route the data, one ``QUIT" command in the end if the incoming session ends or another incoming ``TO" command is received.<P><P><BR><SPAN CLASS="textbf">Port 0 is handled as same as other outgoing ports except that no actually outgoing command is sent</SPAN>, i.e. all the commands' result code will be sent to the incoming port, but no commands will be sent to any outgoing port.<P>Now, Outdaters hires you to write the engine to implement the protocol for the application proxy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a sequence of testcases. Each begins with a routing table of an application proxy and then the incoming requests of the application proxy.<P>A routing table includes, in order, a line with an integer <SPAN CLASS="MATH"><I>M</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2951.jpg ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2951.jpg ALT="$ \le$">32, 768)</SPAN>, the number of lines in the routing table; <SPAN CLASS="MATH"><I>M</I></SPAN> lines, each of which has a routing line. Each routing line contains a unique destination computer name (1 to 15 alphanumeric characters in the routing table), and then the outgoing port number (0 to 32,767 integer), separated by a space, and the computer names are case sensitive.<P>The incoming requests of the application proxy include several request sessions from the connected computers. A line starts with a number sign `<TT>#</TT>' and then an integer <SPAN CLASS="MATH"><I>P</I></SPAN> (-1, 1 to 32,767), means the following input is from port <SPAN CLASS="MATH"><I>P</I></SPAN>, <SPAN CLASS="MATH"><I>P</I> &lt; 0</SPAN> means the testcase finishes. The commands in request sessions will not be broken by the `<TT>#</TT>' lines. To simplify the input handling, data commands in our input file will just contain `<TT>0</TT>'-`<TT>9</TT>', `<TT>a</TT>'-`<TT>z</TT>', `<TT>A</TT>'-`<TT>Z</TT>', `<TT>@</TT>', `<TT>#</TT>', `<TT>_</TT>', `<TT>+</TT>', `<TT>-</TT>', `', `<TT>/</TT>' , ` <SPAN CLASS="MATH">&#92;</SPAN>', `<TT>?</TT>', `<TT>,</TT>', `<TT>.</TT>' and <SPAN CLASS="MATH">&lt;</SPAN>LF<SPAN CLASS="MATH">&gt;</SPAN>.<P>The input is terminated by a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each testcase, print all the outputs of the ports sending out data, in the order of the corresponding input. For each port's output, a line starts with a number sign `<TT>#</TT>' and then an integer <SPAN CLASS="MATH"><I>P</I></SPAN> (-1, 1 to 32,767), means the following commands are output in port <SPAN CLASS="MATH"><I>P</I></SPAN>, <SPAN CLASS="MATH"><I>P</I> = - 1</SPAN> means the output of the current testcase finishes. Following the `<TT>#</TT>' line is the commands output in this port till another `<TT>#</TT>' line. <SPAN CLASS="textbf">A `<TT>#</TT>' line is needed only when the port number need to be changed.</SPAN><P><P><BR><TT>#<!-- MATH
 $<port \ number><$
 --> <SPAN CLASS="MATH">&lt; <I>port</I>&nbsp;<I>number</I> &gt; &lt;</SPAN></TT>LF<SPAN CLASS="MATH">&gt;</SPAN><P>the commands output in this port<P><P><BR><TT>#<!-- MATH
 $<another \ port \ number><$
 --> <SPAN CLASS="MATH">&lt; <I>another</I>&nbsp;<I>port</I>&nbsp;<I>number</I> &gt; &lt;</SPAN></TT>LF<SPAN CLASS="MATH">&gt;</SPAN><P>the commands output in this port<P><P><BR>...<P><P><BR><TT>#-1<SPAN CLASS="MATH">&lt;</SPAN></TT>LF<SPAN CLASS="MATH">&gt;</SPAN><P><P><P><BR><B>Hint:</B> <SPAN CLASS="MATH">&lt;</SPAN>LF<SPAN CLASS="MATH">&gt;</SPAN> means <SPAN CLASS="MATH">0<I>xa</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
RED 0
YELLOW 1
GREEN 2
BLUE 3
WHITE 3
#1
TO:GREEN
DATA
HELLO
.
#4
TO:WHITE
#1
Quit
QUIT
#2
TO:GREEN
DATA
A JOKE to myself
.
QUIT
#3
TO:ORANGE
QUIT
#4
QUIT
#-1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
#2
TO:GREEN
#1
100
#2
DATA
HELLO
.
#1
100
#3
TO:WHITE
#4
100
#1
300
#2
QUIT
#1
200
#2
303
302
302
#3
301
302
QUIT
#4
200
#-1
</PRE><P>
______________________________________________________
2952||||||false||||||
<P>There is a paper strip, whose width is 1, and the widths of every part of it are equal. At the most left position of the strip, there is a vertical line. The strip is soft enough, and it can extend limitlessly to the right side. All points of the paper strip are in one plane.<P>The strip can fold along a line at a certain position. After the fold, there would be some overlapped parts in the strip, but all points of the paper strip are still in one plane (assuming the thickness of the strip is 0). The horizontal positions of the strip are defined as following: the position of the most left line is 0, and the axis extends to the right alone the strip'. The position of a folding line is described by <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN>, ``<SPAN CLASS="MATH"><I>a</I></SPAN>" is the horizontal position of the point of intersection of the line and the strip' top edge, ``<SPAN CLASS="MATH"><I>b</I></SPAN>" is the horizontal position of the point of intersection of the line and the strip' bottom edge. So the folding line is a line through point ``<SPAN CLASS="MATH"><I>a</I></SPAN>" and ``<SPAN CLASS="MATH"><I>b</I></SPAN>".<P>There are two possibilities for the direction of a fold. Along the folding line, you can fold the left part to the front of the right part or you can fold the left part to the back of the right part. A ``fold" <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>, <I>d</I> )</SPAN> includes the line of folding <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> and the direction ``<SPAN CLASS="MATH"><I>d</I></SPAN>" (0 for fold the left part to the front, 1 for fold the left part to the back).<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2952.jpg ALT="\epsfbox{p2952.eps}"></DIV><P>We will list a sequence of folds, <SPAN CLASS="MATH">(<I>a</I><SUB>1</SUB>, <I>b</I><SUB>1</SUB>, <I>d</I><SUB>1</SUB>)</SPAN>, <SPAN CLASS="MATH">(<I>a</I><SUB>2</SUB>, <I>b</I><SUB>2</SUB>, <I>d</I><SUB>2</SUB>)</SPAN>, ..., <SPAN CLASS="MATH">(<I>a</I><SUB>n</SUB>, <I>b</I><SUB>n</SUB>, <I>d</I><SUB>n</SUB>)</SPAN>, and <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2952.jpg ALT="$ \le$"><I>a</I><SUB>i + 1</SUB></SPAN>, <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2952.jpg ALT="$ \le$"><I>b</I><SUB>i + 1</SUB></SPAN> (<!-- MATH
 $1 \le i < n$
 --> <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2952.jpg ALT="$ \le$"><I>i</I> &lt; <I>n</I></SPAN>), you should fold the strip according to this sequence. If after a fold <SPAN CLASS="MATH"><I>i</I></SPAN>, the folded part of the strip overlapped the next unfolded folding line <SPAN CLASS="MATH"><I>i</I> + 1</SPAN> at the same side of the paper (that is to say, the direction of fold <SPAN CLASS="MATH"><I>i</I></SPAN> and fold <SPAN CLASS="MATH"><I>i</I> + 1</SPAN> are the same), the folding line <SPAN CLASS="MATH"><I>i</I> + 1</SPAN> is called a failed fold!, as is displayed in picture (C).<P>Write a program to tell if there is failed fold in a sequence of folds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several testcases. The first line of each testcase contains the number of folds in the sequence of folds <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(0 < n \le 1,000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2952.jpg ALT="$ \le$">1, 000)</SPAN>. The next line contains <SPAN CLASS="MATH">3<I>n</I></SPAN> real numbers, indicating the sequence of folds: <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>&nbsp;<I>b</I><SUB>1</SUB>&nbsp;<I>d</I><SUB>1</SUB>&nbsp;<I>a</I><SUB>2</SUB>&nbsp;<I>b</I><SUB>2</SUB>&nbsp;<I>d</I><SUB>2</SUB>&nbsp;...&nbsp;<I>a</I><SUB>n</SUB>&nbsp;<I>b</I><SUB>n</SUB>&nbsp;<I>d</I><SUB>n</SUB></SPAN>.<P>The end of input is signified by a line consisting of a single `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each testcase, you should output exactly one single line, consisting of the folding result of the problem. If there is a failed fold in the sequence of folds, output `<TT>NO</TT>' and followed with the index number of the failed fold. If there is no failed fold, output `<TT>YES</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
3 4 0 6 5.5 0 10 10 0
4
3 3 0 5 5 1 7 7 0 8 8 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
NO 3
YES
</PRE><P>
______________________________________________________
2953||||||false||||||
<P>John von Neumann, b. Dec. 28, 1903, d. Feb. 8, 1957, was a Hungarian-American mathematician who made important contributions to the foundations of mathematics, logic, quantum physics, meteorology, science, computers, and game theory. He was noted for a phenomenal memory and the speed with which he absorbed ideas and solved problems. In 1925 he received a B.S. diploma in chemical engineering from Zurich Institute and in 1926 a Ph.D. in mathematics from the University of Budapest. His Ph.D. dissertation on set theory was an important contribution to the subject. At the age of 20, von Neumann proposed a new definition of ordinal numbers that was universally adopted. While still in his twenties, he made many contributions in both pure and applied mathematics that established him as a mathematician of unusual depth. His Mathematical Foundations of Quantum Mechanics (1932) built a solid framework for the new scientific discipline. During this time he also proved the mini-max theorem of GAME THEORY. He gradually expanded his work in game theory, and with coauthor Oskar Morgenstern he wrote Theory of Games and Economic Behavior (1944).<P><P><BR>There are some numbers which can be expressed by the sum of factorials. For example, the number 9, as <SPAN CLASS="MATH">9 = 1! + 2! + 3!</SPAN>. Dr. von Neumann was very interested in such numbers. So, he gives you a number <SPAN CLASS="MATH"><I>n</I></SPAN>, and wants you to tell him whether or not the number can be expressed by the sum of some factorials.<P>Well, it's just a piece of cake. For a given <SPAN CLASS="MATH"><I>n</I></SPAN>, you'll check if there are some <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>, and let <SPAN CLASS="MATH"><I>n</I></SPAN> equal to<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="27" HEIGHT="67" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2953img1.png ALT="$\displaystyle \sum_{i=1}^{t}$"><I>x</I><SUB>i</SUB>!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<I>t</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2953img1.png ALT="$\displaystyle \geq$"> 1, <I>x</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2953img1.png ALT="$\displaystyle \geq$"> 0, <I>x</I><SUB>i</SUB> = <I>x</I><SUB>j</SUB> iff <I>i</I> = <I>j</I>).</DIV><P></P><P>If the answer is yes, say ``YES"; otherwise, print out ``NO".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>You will get several non-negative integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2953img1.png ALT="$ \le$">1, 000, 000)</SPAN> from input file. Each one is in a line by itself.<P>The input is terminated by a line with a negative integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each <SPAN CLASS="MATH"><I>n</I></SPAN>, you should print exactly one word ( `<TT>YES</TT>' or `<TT>NO</TT>') in a single line. No extra spaces are allowed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
YES
</PRE><P>
______________________________________________________
2954||||||false||||||
<P>Tom has received a lot of tasks from his boss, which are boring to deal with by hand. Fortunately, Tom got a special machine - Advanced Computing Machine (ACM) to help him.<P>ACM works in a really special way. The machine can finish one task in a short time, after it's finishing one task, it should smoothly move to the next one, otherwise the machine will stop automatically. You must start it up again to make it continue working. Of course, the machine cannot move arbitrarily from one task to another. So each time before it starts up, one task sequence should be well scheduled. Specially, a single task also can be regarded as a sequence. In the sequence, the machine should be able to smoothly move from one task to its successor (if exists). After started up, the machine always works according to the task sequence, and stops automatically when it finishes the last one. If not all the tasks have been finished, the machine has to start up again and works according to a new sequence. Of course, the finished tasks can't be scheduled again.<P>For some unknown reasons, it was guaranteed that for any two tasks <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN>, the machine can smoothly move from <SPAN CLASS="MATH"><I>i</I></SPAN> to <SPAN CLASS="MATH"><I>j</I></SPAN> or from <SPAN CLASS="MATH"><I>j</I></SPAN> to <SPAN CLASS="MATH"><I>i</I></SPAN> or both. Because the startup process is quite slow, Tom would like to schedule the task sequences properly, so that all the tasks can be completed with minimal number of startup times. It is your task to help him achieve this goal.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several testcases. For each testcase, the first line contains only one integer <SPAN CLASS="MATH"><I>n</I></SPAN>, <!-- MATH
 $(0 < n \le  1,000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2954img1.png ALT="$ \le$">1, 000)</SPAN>, representing the number of tasks Tom has received. Then <SPAN CLASS="MATH"><I>n</I></SPAN> lines follow. Each line contains <SPAN CLASS="MATH"><I>n</I></SPAN> integers, `<TT>0</TT>' or `<TT>1</TT>', separated by white spaces. If the <SPAN CLASS="MATH"><I>j</I></SPAN>-th integer in the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line is 1, then the machine can smoothly move from task <SPAN CLASS="MATH"><I>i</I></SPAN> to task <SPAN CLASS="MATH"><I>j</I></SPAN>, otherwise the machine can not smoothly move from task <SPAN CLASS="MATH"><I>i</I></SPAN> to task <SPAN CLASS="MATH"><I>j</I></SPAN>. The tasks are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>.<P>Input is terminated by end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each testcase, the first line of output is only one integer <SPAN CLASS="MATH"><I>k</I></SPAN>, the minimal number of startup times needed. And <SPAN CLASS="MATH">2<I>k</I></SPAN> lines follow, to describe the <SPAN CLASS="MATH"><I>k</I></SPAN> task sequences. For each task sequence, the first line should contain one integer <SPAN CLASS="MATH"><I>m</I></SPAN>, representing the number of tasks in the sequence. And the second line should contain <SPAN CLASS="MATH"><I>m</I></SPAN> integers, representing the order of the <SPAN CLASS="MATH"><I>m</I></SPAN> tasks in the sequence. Two consecutive integers in the same line should be separated by just one white space. Extra spaces are not allowed. There may be several solutions, any appropriate one is accepted.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
0 1 1
1 0 1
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
3
2 1 3
</PRE><P>
______________________________________________________
2955||||||false||||||

<P>
The desire to explore the unknown has been a driving force in  human history since the dawn of time. From the earliest
documented accounts,  ancient civilizations had explored the earth by sailing  around. Early  adventurers were motivated
by religious beliefs, the desire conquest, the need to establish trade routes, and hunger for gold.

<P>
You never know what will happen before the exploration. Neither does Bruce Lee. Someday, Mr. Lee entered a desolate
tropical rainforest. And after several days' exploring, he came in front of a cave with something blinking in it.
A beautiful girl named Vivian came out just before he tried to go into the cave. And Vivian told Mr. Lee that he must
answer some questions before he entered the cave. As the best friend of Mr. Lee, you should help him to work it out.

<P>
You will get <SPAN CLASS="MATH"><I>k</I></SPAN> positive integers <!-- MATH
 $p_{1}, p_{2} \dots p_{i} \dots p_{k}$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>...<I>p</I><SUB>i</SUB>...<I>p</I><SUB>k</SUB></SPAN> (<!-- MATH
 $1 \le i \le k$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$ \le$"><I>k</I></SPAN>) from Vivian. From these
numbers, you can calculate <SPAN CLASS="MATH"><I>N</I></SPAN>,

<P>
<!-- MATH
 \begin{displaymath}
N = \prod_{i=1}^{k} p_{i}^{e_{i}} \qquad (0 \le e_{i} \le 10, \sum_{i=1}^{k} e_{i} \geq  1 , 1 \le i \le k);
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>N</I> = <IMG
 WIDTH="26" HEIGHT="69" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$\displaystyle \prod_{i=1}^{k}$"><I>p</I><SUB>i</SUB><SUP>e<SUB>i</SUB></SUP>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$\displaystyle \le$"><I>e</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$\displaystyle \le$">10,<IMG
 WIDTH="27" HEIGHT="69" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$\displaystyle \sum_{i=1}^{k}$"><I>e</I><SUB>i</SUB> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$\displaystyle \geq$"> 1, 1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$\displaystyle \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$\displaystyle \le$"><I>k</I>);
</DIV><P></P>
you may decide the integers <SPAN CLASS="MATH"><I>e</I><SUB>i</SUB></SPAN>'s as  you  wish.  From  one  <SPAN CLASS="MATH"><I>N</I></SPAN>,  you  can  calculate  corresponding  <SPAN CLASS="MATH"><I>M</I></SPAN>,  which
equals  to  the  sum  of  all divisors of <SPAN CLASS="MATH"><I>N</I></SPAN>. Now, you should tell Vivian whether or not there is an <SPAN CLASS="MATH"><I>M</I></SPAN> which is the
power of 2 (1,2, 4, 8, and 16 ...so on). If there's no <SPAN CLASS="MATH"><I>N</I></SPAN> can make <SPAN CLASS="MATH"><I>M</I></SPAN> equal to the power of 2,
tell Vivian  ``NO". If <SPAN CLASS="MATH"><I>M</I></SPAN> equals to some <SPAN CLASS="MATH">2<SUP>x</SUP></SPAN>, then show her the exponent <SPAN CLASS="MATH">(<I>x</I>)</SPAN>. And if there are several <SPAN CLASS="MATH"><I>x</I></SPAN>,
only show her the largest one.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input contains several testcases. For each testcase, the first line contains only one integer <SPAN CLASS="MATH"><I>k</I></SPAN> <!-- MATH
 $(0 < k \le 100)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$ \le$">100)</SPAN>,
representing the number of positive integers. Then there are <SPAN CLASS="MATH"><I>k</I></SPAN> positive integers
<!-- MATH
 $p_{1}, p_{2} \dots p_{i} \dots p_{k}$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>...<I>p</I><SUB>i</SUB>...<I>p</I><SUB>k</SUB></SPAN> <!-- MATH
 $(1 < p_{i} < 2^{31}, 1 \le i \le k)$
 -->
<SPAN CLASS="MATH">(1 &lt; <I>p</I><SUB>i</SUB> &lt; 2<SUP>31</SUP>, 1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2955img1.png
 ALT="$ \le$"><I>k</I>)</SPAN> in the second line, representing
the given numbers.

<P>
Input is terminated by end of file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each testcase, you should output your result in a single line. If you can find <SPAN CLASS="MATH"><I>N</I></SPAN> from the given numbers,
output the largest exponent. Otherwise, output  `<TT>NO</TT>'. Extra spaces are not allowed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
2
3
2 3 4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
NO
2
</PRE>

<P>

______________________________________________________
2956||||||false||||||
<P>One may define a map of strings over an alphabet <SPAN CLASS="MATH"><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \sum_{B}^{}$"> = {<I>C</I><SUB>1</SUB>, <I>C</I><SUB>2</SUB>,...<I>C</I><SUB>B</SUB>}</SPAN> of size <SPAN CLASS="MATH"><I>B</I></SPAN> to non-negative integer numbers, using characters as digits <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB> = 0, <I>C</I><SUB>2</SUB> = 1,..., <I>C</I><SUB>B</SUB> = <I>B</I> - 1</SPAN> and interpreting the string as the representation of some number in a scale of notation with base <SPAN CLASS="MATH"><I>B</I></SPAN>. Let us denote this map by <SPAN CLASS="MATH"><I>U</I><SUB>B</SUB></SPAN>, for a string <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \alpha$">[1..<I>n</I>]</SPAN> of length <SPAN CLASS="MATH"><I>n</I></SPAN> we put<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>U</I><SUB>B</SUB>(<IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$\displaystyle \alpha$">) = <IMG WIDTH="30" HEIGHT="68" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$\displaystyle \sum_{i=0}^{n-1}$"><IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$\displaystyle \alpha$">[<I>n</I> - <I>i</I>]<SUP> . </SUP><I>B</I><SUP>i</SUP>.</DIV><P></P><P>For example, <SPAN CLASS="MATH"><I>U</I><SUB>3</SUB>(1001) = 1<SUP> . </SUP>27 + 0<SUP> . </SUP>9 + 0<SUP> . </SUP>3 + 1<SUP> . </SUP>1 = 28.</SPAN><P>However, this correspondence has one major drawback: it is not one-to-one. For example,<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">28 = <I>U</I><SUB>3</SUB>(1001) = <I>U</I><SUB>3</SUB>(01001) = <I>U</I><SUB>3</SUB>(001001) = ...,</DIV><P></P>infinitely many strings map to the number 28.<P>In mathematical logic and computer science this may be unacceptable. To overcome this problem, the alternative interpretation is used. Let us interpret characters as digits, but in a slightly different way: <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB> = 1, <I>C</I><SUB>2</SUB> = 2,..., <I>C</I><SUB>B</SUB> = <I>B</I></SPAN>. Note that now we do not have 0 digit, but rather we have a rudiment <SPAN CLASS="MATH"><I>B</I></SPAN> digit. Now we define the map <SPAN CLASS="MATH"><I>V</I><SUB>B</SUB></SPAN> in a similar way, for each string <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \alpha$">[1..<I>n</I>]</SPAN> of length <SPAN CLASS="MATH"><I>n</I></SPAN> we put<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>V</I><SUB>B</SUB>(<IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$\displaystyle \alpha$">) = <IMG WIDTH="30" HEIGHT="68" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$\displaystyle \sum_{i=0}^{n-1}$"><IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$\displaystyle \alpha$">[<I>n</I> - <I>i</I>]<SUP> . </SUP><I>B</I><SUP>i</SUP></DIV><P></P><P>For an empty string <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \varepsilon$"></SPAN> we put <SPAN CLASS="MATH"><I>V</I><SUB>B</SUB>(<IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \varepsilon$">) = 0.</SPAN><P>This map looks very much like <SPAN CLASS="MATH"><I>U</I><SUB>B</SUB></SPAN>, however, the set of digits is now different. So, for example, we have <SPAN CLASS="MATH"><I>V</I><SUB>3</SUB>(1313) = 1<SUP> . </SUP>27 + 3<SUP> . </SUP>9 + 1<SUP> . </SUP>3 + 3<SUP> . </SUP>1 = 60.</SPAN><P>It can be easily proved that the correspondence defined by this map is one-to-one and onto. Such a map is called <EM>bijective</EM>, and it is well known that every bijective map has an inverse. Your task in this problem is to compute the inverse for the map <SPAN CLASS="MATH"><I>V</I><SUB>B</SUB></SPAN>. That is, for a given integer number <SPAN CLASS="MATH"><I>x</I></SPAN> you have to find the string <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \alpha$"></SPAN> , such that <SPAN CLASS="MATH"><I>V</I><SUB>B</SUB>(<IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \alpha$">) = <I>x</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. The first line of each dataset contains <SPAN CLASS="MATH"><I>B</I></SPAN> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \le$">9)</SPAN>. The second line contains an integer number <SPAN CLASS="MATH"><I>x</I></SPAN> given in a usual decimal scale of notation, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \le$">10<SUP>100</SUP></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output such string <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \alpha$"></SPAN> , consisting only of digits from the set <SPAN CLASS="MATH">{1, 2,..., <I>B</I>}</SPAN>, that <SPAN CLASS="MATH"><I>V</I><SUB>B</SUB>(<IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2956img1.gif ALT="$ \alpha$">) = <I>x</I>. Each dataset should be outputed in a different line.</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
60
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1313
</PRE><P>
______________________________________________________
2957||||||false||||||
<P>
By the year 3141, the human civilization has spread all over the galaxy. The special hypertunnels are used
to travel from one star system to another. To use the hypertunnel, you fly to a special location near the
source star using your spaceship, activate the hyperjumper, fly through the hypertunnel, get out near your
destination star and fly to the planet you need. The whole process takes exactly one day. A small drawback
of the system is that for each tunnel every day only one spaceship can travel using this tunnel.

<P>
You are working in the transportation department of the ``Intergalaxy Business Machines" company. This morning
your boss has assigned a new task to you. To run the programming contest IBM needs to deliver <SPAN CLASS="MATH"><I>K</I></SPAN> supercomputers
from Earth where the company headquarters are located to the planet Eisiem. Since supercomputers are very large,
one needs the whole spaceship to carry each supercomputer. You are asked to find a plan to deliver the
supercomputers that takes as few days as possible. Since IBM is a very powerful corporation, you may assume
that any time you need some tunnel for hyperjump, it is at your service. However, you still can use each tunnel
only once a day.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of several datasets. The first line of each dataset contains <SPAN CLASS="MATH"><I>N</I></SPAN> - the number of star systems in the galaxy, <SPAN CLASS="MATH"><I>M</I></SPAN> - the number
of tunnels, <SPAN CLASS="MATH"><I>K</I></SPAN> - the number of supercomputers to be delivered, <SPAN CLASS="MATH"><I>S</I></SPAN> - the number of the solar system (the
system where planet Earth is) and <SPAN CLASS="MATH"><I>T</I></SPAN> - the number of the star system where planet Eisiem is
<!-- MATH
 $(2 \le N \le 50, 1 \le M \le 200, 1 \le K \le 50, 1 \le S, T \le N, S \neq T)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2957img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2957img1.gif
 ALT="$ \le$">50, 1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2957img1.gif
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2957img1.gif
 ALT="$ \le$">200, 1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2957img1.gif
 ALT="$ \le$"><I>K</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2957img1.gif
 ALT="$ \le$">50, 1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2957img1.gif
 ALT="$ \le$"><I>S</I>, <I>T</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2957img1.gif
 ALT="$ \le$"><I>N</I>, <I>S</I> <IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2957img1.gif
 ALT="$ \neq$"> <I>T</I>)</SPAN>.

<P>
Next <SPAN CLASS="MATH"><I>M</I></SPAN> lines contain two different integer numbers each and describe tunnels. For each tunnel the numbers
of star systems that it connects are given. The tunnel can be traveled in both directions, but remember that
each day only one ship can travel through it, in particular, two ships cannot simultaneously travel through
the same tunnel in opposite directions. No tunnel connects a star to itself and any two stars are connected
by at most one tunnel.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
On the first line of the output for each dataset print <SPAN CLASS="MATH"><I>L</I></SPAN> - the fewest number of days needed to deliver <SPAN CLASS="MATH"><I>K</I></SPAN> supercomputers
from star system <SPAN CLASS="MATH"><I>S</I></SPAN> to star system <SPAN CLASS="MATH"><I>T</I></SPAN> using hypertunnels. Next <SPAN CLASS="MATH"><I>L</I></SPAN> lines must describe the process. Each line
must start with <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> - the number of ships that travel from one system to another this day. <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> pairs of
integer numbers must follow, pair <SPAN CLASS="MATH"><I>A</I>, <I>B</I></SPAN> means that the ship number <SPAN CLASS="MATH"><I>A</I></SPAN> travels from its current star system to
star system <SPAN CLASS="MATH"><I>B</I></SPAN>.

<P>
It is guaranteed that there is a way to travel from star system <SPAN CLASS="MATH"><I>S</I></SPAN> to star system <SPAN CLASS="MATH"><I>T</I></SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
6 7 4 1 6
1 2
2 3
3 5
5 6
1 4
4 6
4 3
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
4
2 1 2 2 4
3 1 3 2 6 3 4
3 1 5 3 6 4 4
2 1 6 4 6
</PRE>

<P>

______________________________________________________
2958||||||false||||||
<P>
Programmers are known to wage religious wars when issues of proper code formatting are discussed. When new
team of programmers starts working on a project, it often brings slightly different code formatting style
and wants to reformat old source code according to their own style. Moreover, inexperienced programmers often
neglect the importance of good and consistent code style, thus complicating the work of their teammates and
themselves. This situation creates thriving market for code formatting tools.

<P>
You are taking part in a proof-of-concept project for a new code formatting tool code named Salvation. This
is only a pilot project aimed not for a practical usefulness, but to demonstrate your ability to parse and
format code of a high-level language. Your task is to write code formatter for a language called TRIVIAL
(The Rival Implementation-Agnostic Language). This language has trivial lexical and grammatical structures.
It does not have any keywords and control structures, because all constructs of the language are represented
as function calls and closures.

<P>
The lexical structure consists of identifiers, opening and closing parenthesis and curly braces, commas,
and semi-colons. Identifiers consist only of digits `0'-'9' and Latin letters `a'-`z', `A'-`Z'. Lexical terms
may be separated by whitespaces, leading and trailing whitespaces in the file are also allowed. Whitespace may
consist of spaces, tab characters (ASCII code 9), and line separators (a pair of ASCII 13, 10).

<P>
The structure of the valid trivial program is derived from the following productions:

<P>

<UL>
<LI>Program ::= Block
</LI>
<LI>Block ::= `<SPAN CLASS="MATH">{</SPAN>' Statements `<SPAN CLASS="MATH">}</SPAN>'
</LI>
<LI>Statements ::= Statement | Statement Statements
</LI>
<LI>Statement ::= Expression `;'
</LI>
<LI>Expression ::= <!-- MATH
 $identifier$
 -->
<SPAN CLASS="MATH"><I>identifier</I></SPAN> [`(' Arguments `)'] [Block]
</LI>
<LI>Arguments ::= Expression | Expression `,' Arguments
</LI>
</UL>

<P>
Properly formatted trivial program additionally conforms to the following rules:

<P>

<UL>
<LI>There are no empty lines.
</LI>
<LI>Tab characters are not used.
</LI>
<LI>The first character of the file is opening curly brace `<SPAN CLASS="MATH">{</SPAN>' (no preceding whitespaces), and the last
character of the file is closing curly brace '<SPAN CLASS="MATH">}</SPAN>' (no trailing whitespaces).
</LI>
<LI>Each line is preceded by <SPAN CLASS="MATH">4<I>N</I></SPAN> space characters, where <SPAN CLASS="MATH"><I>N</I></SPAN> is called <EM>indentation level</EM>.
</LI>
<LI>The first and the last lines of the program have zero indentation level.
</LI>
<LI>Lines that constitute block body and are enclosed in curly braces `<SPAN CLASS="MATH">{</SPAN>'<SPAN CLASS="MATH">...</SPAN> `<SPAN CLASS="MATH">}</SPAN>' have one more
indentation level.
</LI>
<LI>No whitespace is allowed inside the line with the exception of the following two cases where a single
space character is mandatory: before opening curly brace character `<SPAN CLASS="MATH">{</SPAN>' and after comma `,'.
</LI>
<LI>Lines (with the only exception of the last line) end with semicolon `;' or opening curly brace '<SPAN CLASS="MATH">{</SPAN>'
characters. These characters cannot appear in the middle or at the beginning of any line (including the last one).
</LI>
<LI>Closing curly brace `<SPAN CLASS="MATH">}</SPAN>' characters appear only at the beginning of lines after indentation spaces.
</LI>
</UL>

<P>
See sample output section for an example of properly formatted trivial program.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several valid trivial program, separated by a blank line. Size of the input file does not exceed 2000 bytes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Write to the output file properly formatted trivial code for the programs given in the input. Print a blank line between different programs.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
{class(Point)
{
  member ( int ( x ) ) ; member ( int ( y ) ) ;
  member ( fun ( Length )
  {
    return ( sqrt ( sum ( sqr ( x ),sqr ( y ) ) ) );
  } ) ;
};
Main
{
  repeat
  {
    set ( n,input ( int ) ) ;
    for ( int ( i,0 ) , lt ( i,n ) , inc ( i ) )
    {
      print ( mult ( n,n ) ) ;
    };
  };
}; }
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
{
    class(Point) {
        member(int(x));
        member(int(y));
        member(fun(Length) {
            return(sqrt(sum(sqr(x), sqr(y))));
        });
    };
    Main {
        repeat {
            set(n, input(int));
            for(int(i, 0), lt(i, n), inc(i)) {
                print(mult(n, n));
            };
        };
    };
}
</PRE>

<P>

______________________________________________________
2959||||||false||||||
<P>Dr. Tuple is working on the new data-mining application for Advanced Commercial Merchandise Inc. One of the subroutines for this application works with two arrays <SPAN CLASS="MATH"><I>P</I></SPAN> and <SPAN CLASS="MATH"><I>Q</I></SPAN> containing <SPAN CLASS="MATH"><I>N</I></SPAN> records of data each (records are numbered from 0 to <SPAN CLASS="MATH"><I>N</I> - 1</SPAN>). Array <SPAN CLASS="MATH"><I>P</I></SPAN> contains hash-like structure with keys. Array <SPAN CLASS="MATH"><I>P</I></SPAN> is used to locate record for processing and the data for the corresponding record is later retrieved from the array <SPAN CLASS="MATH"><I>Q</I></SPAN>.<P>All records in array <SPAN CLASS="MATH"><I>P</I></SPAN> have a size of <SPAN CLASS="MATH"><I>S</I><SUB>P</SUB></SPAN> bytes and records in array <SPAN CLASS="MATH"><I>Q</I></SPAN> have size of <SPAN CLASS="MATH"><I>S</I><SUB>Q</SUB></SPAN> bytes. Dr. Tuple needs to implement this subroutine with the highest possible performance because it is a hot-spot of the whole data-mining application. However, <SPAN CLASS="MATH"><I>S</I><SUB>P</SUB></SPAN> and <SPAN CLASS="MATH"><I>S</I><SUB>Q</SUB></SPAN> are only known at run-time of application which complicates or makes impossible to make certain well-known compile-time optimizations.<P>The straightforward way to find byte-offset of <SPAN CLASS="MATH"><I>i</I></SPAN>-th record in array <SPAN CLASS="MATH"><I>P</I></SPAN> is to use the following formula:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE WIDTH="100%" ALIGN="CENTER"><TR VALIGN="MIDDLE"><TD ALIGN="CENTER" NOWRAP>Pofs(<I>i</I>) = <I>S</I><SUB>P</SUB><SUP> . </SUP><I>i</I>,</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">(<SPAN CLASS="eqn-number">1</SPAN>)</TD></TR></TABLE></DIV><P></P>and the following formula for array <SPAN CLASS="MATH"><I>Q</I></SPAN>:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE WIDTH="100%" ALIGN="CENTER"><TR VALIGN="MIDDLE"><TD ALIGN="CENTER" NOWRAP>Qofs(<I>i</I>) = <I>S</I><SUB>Q</SUB><SUP> . </SUP><I>i</I>.</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">(<SPAN CLASS="eqn-number">2</SPAN>)</TD></TR></TABLE></DIV><P></P><P>However, multiplication computes much slower than addition or subtraction in modern processors. Dr. Tuple avoids usage of multiplication while scanning array <SPAN CLASS="MATH"><I>P</I></SPAN> by keeping computed byte-offset Pofs<SPAN CLASS="MATH">(<I>i</I>)</SPAN> of <SPAN CLASS="MATH"><I>i</I></SPAN>-th record instead of its index <SPAN CLASS="MATH"><I>i</I></SPAN> in all other data-structures of data-mining application. He uses the following simple formulae when he needs to compute byte-offset of the record that precedes or follows <SPAN CLASS="MATH"><I>i</I></SPAN>-th record in array <SPAN CLASS="MATH"><I>P</I></SPAN>:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">Pofs(<I>i</I> + 1) = Pofs(<I>i</I>) + <I>S</I><SUB>P</SUB></DIV><P></P><P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">Pofs(<I>i</I> - 1) = Pofs(<I>i</I>) - <I>S</I><SUB>P</SUB></DIV><P></P><P>Whenever a record from array <SPAN CLASS="MATH"><I>P</I></SPAN> is located by either scanning of the array or by taking Pofs<SPAN CLASS="MATH">(<I>i</I>)</SPAN> from other data structures, Dr. Tuple needs to retrieve information from the corresponding record in array <SPAN CLASS="MATH"><I>Q</I></SPAN>. To access record in array <SPAN CLASS="MATH"><I>Q</I></SPAN> its byte-offset Qofs<SPAN CLASS="MATH">(<I>i</I>)</SPAN> needs to be computed. One can immediately derive formula to compute Qofs<SPAN CLASS="MATH">(<I>i</I>)</SPAN> with known Pofs<SPAN CLASS="MATH">(<I>i</I>)</SPAN> from formulae (1) and (2):<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE WIDTH="100%" ALIGN="CENTER"><TR VALIGN="MIDDLE"><TD ALIGN="CENTER" NOWRAP>Qofs(<I>i</I>) = Pofs(<I>i</I>)/<I>S</I><SUB>P</SUB><SUP> . </SUP><I>S</I><SUB>Q</SUB></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">(<SPAN CLASS="eqn-number">3</SPAN>)</TD></TR></TABLE></DIV><P></P><P>Unfortunately, this formula not only contains multiplication, but also contains division. Even though only integer division is required here, it is still an order of magnitude slower than multiplication on modern processors. If coded this way, its computation is going to consume the most of CPU time in data-mining application for ACM Inc.<P>After some research Dr. Tuple has discovered that he can replace formula (3) with the following fast formula:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><!-- MATH
 \begin{equation}
\mbox{Qofs'}(i) = (\mbox{Pofs}(i) + \mbox{Pofs}(i) << A) >> B
\end{equation}
 --><TABLE WIDTH="100%" ALIGN="CENTER"><TR VALIGN="MIDDLE"><TD ALIGN="CENTER" NOWRAP>Qofs'(<I>i</I>) = (Pofs(<I>i</I>) + Pofs(<I>i</I>) &lt; &lt; <I>A</I>) &gt; &gt; <I>B</I></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">(<SPAN CLASS="eqn-number">4</SPAN>)</TD></TR></TABLE></DIV><P></P>where <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN> are non-negative integer numbers, ``<SPAN CLASS="MATH">&lt; &lt; <I>A</I></SPAN>" is left shift by <SPAN CLASS="MATH"><I>A</I></SPAN> bits (equivalent to integer multiplication by <SPAN CLASS="MATH">2<SUP>A</SUP></SPAN>), <SPAN CLASS="MATH">`` &gt; &gt; <I>B</I>"</SPAN> is right shift by <SPAN CLASS="MATH"><I>B</I></SPAN> bits (equivalent to integer division by <SPAN CLASS="MATH">2<SUP>B</SUP></SPAN>).<P>This formula is an order of magnitude faster than (3) to compute, but it generally cannot always produce the same result as (3) regardless of the choice for values of <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN>. It still can be used if one is willing to sacrifice some extra memory.<P>Conventional layout of array <SPAN CLASS="MATH"><I>Q</I></SPAN> in memory (using formula (2)) requires <SPAN CLASS="MATH"><I>N</I><SUP> . </SUP><I>S</I><SUB>Q</SUB></SPAN> bytes to store the entire array. Dr. Tuple has found that one can always choose such <SPAN CLASS="MATH"><I>K</I></SPAN> that if he allocates <SPAN CLASS="MATH"><I>K</I></SPAN> bytes of memory for the array <SPAN CLASS="MATH"><I>Q</I></SPAN> (where <SPAN CLASS="MATH"><I>K</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2959img1.gif ALT="$ \le$"><I>N</I><SUP> . </SUP><I>S</I><SUB>Q</SUB></SPAN>) and carefully selects values for <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN>, the fast formula (4) will give non-overlapping storage locations for each of the <SPAN CLASS="MATH"><I>N</I></SPAN> records of array <SPAN CLASS="MATH"><I>Q</I></SPAN>.<P>Your task is to write a program that finds minimal possible amount of memory <SPAN CLASS="MATH"><I>K</I></SPAN> that needs to be allocated for array <SPAN CLASS="MATH"><I>Q</I></SPAN> when formula (4) is used. Corresponding values for <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN> are also to be found. If multiple pairs of values for <SPAN CLASS="MATH"><I>A</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN> give the same minimal amount of memory <SPAN CLASS="MATH"><I>K</I></SPAN>, then the pair where <SPAN CLASS="MATH"><I>A</I></SPAN> is minimal have to be found, and if there is still several possibilities, the one where <SPAN CLASS="MATH"><I>B</I></SPAN> is minimal. You shall assume that integer registers that will be used to compute formula (4) are wide enough so that overflow will never occur.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input consists of several datasets. Each dataset consists of three integer numbers <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>S</I><SUB>P</SUB></SPAN> , and <SPAN CLASS="MATH"><I>S</I><SUB>Q</SUB></SPAN> separated by spaces <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2959img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2959img1.gif ALT="$ \le$">2<SUP>20</SUP>, 1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2959img1.gif ALT="$ \le$"><I>S</I><SUB>P</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2959img1.gif ALT="$ \le$">2<SUP>10</SUP>, 1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2959img1.gif ALT="$ \le$"><I>S</I><SUB>Q</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2959img1.gif ALT="$ \le$">2<SUP>10</SUP>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each dataset, write to the output a single line with three integer numbers <SPAN CLASS="MATH"><I>K</I></SPAN>, <SPAN CLASS="MATH"><I>A</I></SPAN>, and <SPAN CLASS="MATH"><I>B</I></SPAN> separated by spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1024 7 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1119 2 5
</PRE><P>
______________________________________________________
2960||||||false||||||
<P>In 1948 Claude E. Shannon in ``The Mathematical Theory of Communication" has introduced his famous formula for the entropy of a discrete set of probabilities <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>,..., <I>p</I><SUB>n</SUB></SPAN>:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>H</I> = - <IMG WIDTH="27" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2960img1.gif ALT="$\displaystyle \sum$"><I>p</I><SUB>i</SUB>log<SUB>2</SUB><I>p</I><SUB>i</SUB>.</DIV><P></P><P>We will apply this formula to an arbitrary text string by letting <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> be the relative frequencies of occurrence of characters in the string. For example, the entropy of the string ``Northeastern European Regional Contest" with the length of 38 characters (including 3 spaces) is 3.883 with 3 digits after decimal point. The following table shows relative frequencies and the corresponding summands for the entropy of this string.<P align=center><img src=p2960a.gif><P><BR>Your task is to find a string with the given entropy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. Each dataset consists of a single real number <SPAN CLASS="MATH"><I>H</I></SPAN> <SPAN CLASS="MATH">(0.00<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2960img1.gif ALT="$ \le$"><I>H</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2960img1.gif ALT="$ \le$">6.00)</SPAN> with 2 digits after decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, write to the output a line with a single string of at least one and up to 1000 characters `0'-`9', `a'-`z', `A'-`Z', `.' (dot), and spaces. This string must have the entropy within 0.005 of <SPAN CLASS="MATH"><I>H</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3.88
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Northeastern European Regional Contest
</PRE><P>
______________________________________________________
2961||||||false||||||
<P>It is rumored that the planet Earth is often visited by Unidentified Flying Objects (UFOs). Sometimes UFOs land and leave burned out regions. Observations show that these regions have the form of circles.<P>Recently farmer Bill has found such circles on his nice rectangular wheat field. Bill likes all mysterious things very much, so he has decided to keep these circles on the field. However, although being an ufolog, first of all Bill is the farmer, so he needs to harvest his wheat. Therefore he has decided to keep some regions containing circles intact, and harvest the rest of the field.<P>All regions that Bill keeps unharvested must be rectangles that neither touch nor overlap each other. The sides of the rectangles must be parallel to the sides of the field. All circles left by UFOs must be inside these regions. The total area of the regions must be minimal possible, so that Bill could harvest the maximal possible part of his field.<P>Now Bill wants to know the total area of the field that he will be able to harvest. Help him!<P><DIV ALIGN="CENTER"><IMG WIDTH="230" HEIGHT="184" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2961.jpg ALT="\epsfbox{p2961.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several dataset. The first line of each dataset contains two integer numbers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> - the dimensions of Bill's field <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2961.jpg ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2961.jpg ALT="$ \le$">1000)</SPAN>. Let Bill's field be positioned on the plane in such a way that its corners are located in points with coordinates (0, 0), <SPAN CLASS="MATH">(<I>x</I>, 0)</SPAN>, <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> and <SPAN CLASS="MATH">(0, <I>y</I>)</SPAN>.<P>The second line of the input contains <SPAN CLASS="MATH"><I>N</I></SPAN> - the number of circles left by UFOs on Bill's field <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2961.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2961.jpg ALT="$ \le$">100)</SPAN>. Next <SPAN CLASS="MATH"><I>N</I></SPAN> lines describe circles: each line contains three positive integer numbers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> - coordinates of the center and radius of the circle. Circles may touch, overlap or contain each other. All circles are completely located within the field bounds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output a single integer number - the area of the part of the field that Bill will be able to harvest.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 8
2
3 3 1
1 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
64
</PRE><P>
______________________________________________________
2962||||||false||||||
<P>There is a legend that mathematicians in the XVIII century enjoyed playing the following game.<P>The game was played by three mathematicians. One of them was the game master. First of all, the game master declared some positive integer number <SPAN CLASS="MATH"><I>N</I></SPAN>. After that he chose two different integer numbers <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> ranging from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> and told their sum to one player and their product to the other player. Each player knew whether he was told the sum or the product of the chosen numbers.<P>After that the players in turn informed the game master whether they knew the numbers he had chosen. First the player who was told the sum said whether he knew the numbers, after that the player who was told the product did, and so on.<P>For example the dialog could look like this.<P>Game master: "Let <SPAN CLASS="MATH"><I>N</I></SPAN> be 10".<P>After that he chooses two numbers ranging from 1 to 10 and tells their sum to player <SPAN CLASS="MATH"><I>S</I></SPAN> and their product to player <SPAN CLASS="MATH"><I>P</I></SPAN> .<P>Player <SPAN CLASS="MATH"><I>S</I></SPAN>: ``I don't know these numbers."<P>Player <SPAN CLASS="MATH"><I>P</I></SPAN> : ``I don't know these numbers."<P>Player <SPAN CLASS="MATH"><I>S</I></SPAN>: ``I don't know these numbers."<P>Player <SPAN CLASS="MATH"><I>P</I></SPAN> : ``I don't know these numbers."<P>Player <SPAN CLASS="MATH"><I>S</I></SPAN>: ``Oh, now I know these numbers. You have chosen 3 and 6."<P>Given <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> - the number of times the players have said ``I don't know these numbers", you have to find all possible pairs of numbers that could have been chosen by the game master.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. The first line of the input file contains <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2962img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2962img1.gif ALT="$ \le$">200, 0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2962img1.gif ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2962img1.gif ALT="$ \le$">100).</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, first output the number of possible pairs of numbers that could have been chosen by the game master from the range 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> if both players altogether had said ``I don't know these numbers" <SPAN CLASS="MATH"><I>M</I></SPAN> times. After that output these pairs one on a line, ordered by the first number, then by the second number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
10 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
3
2 5
3 6
3 10
</PRE><P>
______________________________________________________
2963||||||false||||||
<P>The president of the Galactic Federation has recently decided that all planets of the galaxy must establish hyper-radio centers to broadcast their programs. To ensure the process, the government has signed the contract with well known hyper-radio equipment manufacturer Trojan Horse Ltd. By the terms of this contract the company has to provide N hypertransmitters, one for each planet of the Federation.<P>It is known that there are two main political movements in the galaxy: industrialism and ecologism. On each planet of the galaxy one of these movements has the majority. It is clear that after establishing the hyper-radio station on the planet, the political programs of the station will support the movement that has the majority on this planet.<P>All transmitters supplied by Trojan Horse Ltd will have the same range, so hyper-radio programs from each planet will be heard at the distance not exceeding <SPAN CLASS="MATH"><I>R</I></SPAN> parsecs from it. Since the company director is actually the agent of the Dark Empire, he wants to choose <SPAN CLASS="MATH"><I>R</I></SPAN> in such a way, that it would destabilize the political situation in the Galactic Federation.<P>More precisely, for each planet <SPAN CLASS="MATH"><I>A</I></SPAN> let <SPAN CLASS="MATH"><I>N</I><SUP>+</SUP>(<I>A</I>)</SPAN> be the number of planets where the same political movement as in <SPAN CLASS="MATH"><I>A</I></SPAN> has the majority and hyper-radio programs from <SPAN CLASS="MATH"><I>A</I></SPAN> are received, including <SPAN CLASS="MATH"><I>A</I></SPAN> itself. Similarly, let <SPAN CLASS="MATH"><I>N</I><SUP>-</SUP>(<I>A</I>)</SPAN> be the number of planets where the other political movement has the majority and hyper-radio programs from <SPAN CLASS="MATH"><I>A</I></SPAN> are received. The planet <SPAN CLASS="MATH"><I>A</I></SPAN> is called <SPAN CLASS="textit">destabilizing</SPAN> if <!-- MATH
 $N^{+}(A) < N^{-}(A)$
 --><SPAN CLASS="MATH"><I>N</I><SUP>+</SUP>(<I>A</I>) &lt; <I>N</I><SUP>-</SUP>(<I>A</I>)</SPAN>.<P>Your task is to choose such <SPAN CLASS="MATH"><I>R</I></SPAN> that the number <SPAN CLASS="MATH"><I>D</I></SPAN> of destabilizing planets is maximal possible. Since increasing transmitter's range requires more resources for its manufacturing, you must find the smallest possible <SPAN CLASS="MATH"><I>R</I></SPAN> maximizing <SPAN CLASS="MATH"><I>D</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. The first line of each dataset contains <SPAN CLASS="MATH"><I>N</I></SPAN> - the number of planets in the Galactic Federation <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2963img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2963img1.gif ALT="$ \le$">1000)</SPAN>. Next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contain four integer numbers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>z</I><SUB>i</SUB></SPAN>, and pi each and describe the planets: <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>, and <SPAN CLASS="MATH"><I>z</I><SUB>i</SUB></SPAN> specify the coordinates of the planet in space, <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> = 0</SPAN> if the industrialists have the majority on the planet and <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> = 1</SPAN> if the ecologists have the majority. All coordinates do not exceed 10 000 by their absolute value. No two planets occupy the same point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>First output <SPAN CLASS="MATH"><I>D</I></SPAN> - the maximal possible number of destabilizing planets. After that output non-negative real number <SPAN CLASS="MATH"><I>R</I></SPAN> - the minimal range that hyper-radio transmitters must have so that the number of destabilizing planets is <SPAN CLASS="MATH"><I>D</I></SPAN>. <SPAN CLASS="MATH"><I>R</I></SPAN> must be accurate within <SPAN CLASS="MATH">10<SUP>-4</SUP></SPAN> of the correct answer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
0 0 0 1
0 1 0 0
1 0 0 0
1 1 0 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
4
1.0000
</PRE><P>
______________________________________________________
2964||||||false||||||
<P>You are given <SPAN CLASS="MATH"><I>N</I></SPAN> light sources on the plane, each of which illuminates the angle of <SPAN CLASS="MATH">2<IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2964img1.gif ALT="$ \pi$">/<I>N</I></SPAN> with the vertex in the source point (including its sides).<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2964img1.gif ALT="\epsfbox{p2964a.eps}"></DIV><P>You must choose the direction of the illuminated angle for each of these sources, so that the whole plane is illuminated. It can be proved that this is always possible.<P>A light source itself casts no shadow and does not interfere with light beams from the other sources.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains <SPAN CLASS="MATH"><I>N</I></SPAN> - the number of light sources <SPAN CLASS="MATH">(3<IMG ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2964img1.gif ALT="$ \le$"><I>N</I><IMG ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2964img1.gif ALT="$ \le$">30)</SPAN>. Next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contain two integer numbers each - the coordinates of the light sources. All coordinates do not exceed 100 by their absolute value. No two sources coincide.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Print <SPAN CLASS="MATH"><I>N</I></SPAN> real numbers - for each light source specify an angle that the bisector of the illuminated angle makes with <SPAN CLASS="MATH"><I>OX</I></SPAN> axis, counterclockwise. Print at least six digits after the decimal point. No angle must exceed <SPAN CLASS="MATH">100<IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2964img1.gif ALT="$ \pi$"></SPAN> by its absolute value.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2964img1.gif ALT="\epsfbox{p2964b.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
0 0
2 0
1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0.52359877559829887
2.61799387799149437
4.71238898038468986
</PRE><P><P><P><BR><P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2964img1.gif ALT="\epsfbox{p2964c.eps}"></DIV><P>
______________________________________________________
2965||||||false||||||
<P>
Paleontologists in Siberia have recently found a number of fragments of Jurassic period dinosaur skeleton.
The paleontologists have decided to forward them to the paleontology museum. Unfortunately, the dinosaur was
so huge, that there was no box that the fragments would fit into. Therefore it was decided to split the
skeleton fragments into separate bones and forward them to the museum where they would be reassembled.
To make reassembling easier, the joints where the bones were detached from each other were marked with special
labels. Meanwhile, after packing the fragments, the new bones were found and it was decided to send them
together with the main fragments. So the new bones were added to the
package and it was sent to the museum.

<P>
However, when the package arrived to the museum some problems have shown up. First of all, not all labels
marking the joints were distinct. That is, labels with letters `A' to `Z' were used, and each two joints
that had to be connected were marked with the same letter, but there could be several pairs of joints marked
with the same letter.

<P>
Moreover, the same type of labels was used to make some marks on the new bones added to the box. Therefore,
there could be bones with marked joints that need not be connected to the other bones. The problem is slightly
alleviated by the fact that each bone has at most one joint marked with some particular letter.

<P>
Your task is to help the museum workers to restore some possible dinosaur skeleton fragments. That is, you
have to find such set of bones, that they can be connected to each other, so that the following
conditions are true:

<P>

<UL>
<LI>If some joint is connected to the other joint, they are marked with the same label.
</LI>
<LI>For each bone from the set each joint marked with some label is connected to some other joint.
</LI>
<LI>The number of bones used is maximal possible.
</LI>
</UL>

<P>
Note that two bones may be connected using several joints.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of several datasets. The first line of each dataset contains <SPAN CLASS="MATH"><I>N</I></SPAN> - the number of bones <!-- MATH
 $(1 \le N \le 24)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2965img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2965img1.gif
 ALT="$ \le$">24)</SPAN>. Next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contain
bones descriptions: each line contains a non-empty sequence of different capital letters, representing labels
marking the joints of the corresponding bone.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, on the first line of the output print <SPAN CLASS="MATH"><I>L</I></SPAN> - the maximal possible number of bones that could be used to
reassemble skeleton fragments. After that output <SPAN CLASS="MATH"><I>L</I></SPAN> integer numbers in ascending order - the bones to be used.
Bones are numbered starting from one, as they are given in the input file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
6
ABD
EG
GE
ABE
AC
BCD
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
5
1 2 3 5 6
</PRE>

<P>

______________________________________________________
2966||||||false||||||
<P>Once upon a time there lived a king and he had <SPAN CLASS="MATH"><I>N</I></SPAN> sons. And there were <SPAN CLASS="MATH"><I>N</I></SPAN> beautiful girls in the kingdom and the king knew about each of his sons which of those girls he did like. The sons of the king were young and light-headed, so it was possible for one son to like several girls.<P>So the king asked his wizard to find for each of his sons the girl he liked, so that he could marry her. And the king's wizard did it - for each son the girl that he could marry was chosen, so that he liked this girl and, of course, each beautiful girl had to marry only one of the king's sons.<P>However, the king looked at the list and said: ``I like the list you have made, but I am not completely satisfied. For each son I would like to know all the girls that he can marry. Of course, after he marries any of those girls, for each other son you must still be able to choose the girl he likes to marry."<P>The problem the king wanted the wizard to solve had become too hard for him. You must save wizard's head by solving this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. The first line of each dataset contains <SPAN CLASS="MATH"><I>N</I></SPAN> - the number of king's sons <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2966img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2966img1.gif ALT="$ \le$">2000)</SPAN>. Next <SPAN CLASS="MATH"><I>N</I></SPAN> lines for each of king's sons contain the list of the girls he likes: first <SPAN CLASS="MATH"><I>K</I><SUB>i</SUB></SPAN> - the number of those girls, and then <SPAN CLASS="MATH"><I>K</I><SUB>i</SUB></SPAN> different integer numbers, ranging from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> denoting the girls. The sum of all <SPAN CLASS="MATH"><I>K</I><SUB>i</SUB></SPAN> does not exceed 200 000. <P>The last line of the input file contains the original list the wizard had made - <SPAN CLASS="MATH"><I>N</I></SPAN> different integer numbers: for each son the number of the girl he would marry in compliance with this list. It is guaranteed that the list is correct, that is, each son likes the girl he must marry according to this list.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output <SPAN CLASS="MATH"><I>N</I></SPAN> lines. For each king's son first print <SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN> - the number of different girls he likes and can marry so that after his marriage it is possible to marry each of the other king's sons. After that print <SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN> different integer numbers denoting those girls, in arbitrary order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
2 1 2
2 1 2
2 2 3
2 3 4
1 2 3 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2 1 2
2 1 2
1 3
1 4
</PRE><P>
______________________________________________________
2967||||||false||||||
NarmakSung has a hardware shop that makes new digit plates for house numbers. If a house number is 195, for example, he has to create one plate for digit 1, one for digit 9, and one for digit 5. But, the orders are not always that simple. He may get orders to make digit plates, for example, for all houses in one side of a street. 

<P>
Since making several plates of the same digit costs much less than making all digits for each house one by one, he wants to know, for a big order he receives, how many of each digit plate he has to make.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first number in the input line, <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2967img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2967img1.gif
 ALT="$ \le$">10</SPAN>) is the number of orders. Following this, <SPAN CLASS="MATH"><I>t</I></SPAN> orders are written in the input file. Each order starts with a line containing a street name, an arbitrary string of length at most 50 characters. The second line contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> (<!-- MATH
 $1 \le N \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2967img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2967img1.gif
 ALT="$ \le$">10</SPAN>), the number of sub-orders, followed by <SPAN CLASS="MATH"><I>N</I></SPAN> lines of sub-orders. Sub-orders are of three kinds: 

<UL>
<LI>A single house number: in this case, the sub-order line contains only a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 9999$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2967img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2967img1.gif
 ALT="$ \le$">9999</SPAN>)

<P>
</LI>
<LI>A series of house numbers: in this case, the sub-order line starts with a `<TT>+</TT>', followed by three integer numbers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN> (<!-- MATH
 $1 \le a, b, c \le 9999$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2967img1.gif
 ALT="$ \le$"><I>a</I>, <I>b</I>, <I>c</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2967img1.gif
 ALT="$ \le$">9999</SPAN>). This means that NarmakSung has to make plates for house numbers from <SPAN CLASS="MATH"><I>a</I></SPAN> up to <SPAN CLASS="MATH"><I>b</I></SPAN> with distance of <SPAN CLASS="MATH"><I>c</I></SPAN>. That is, digit plates have to be made for house numbers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>a</I> + <I>c</I></SPAN>, <SPAN CLASS="MATH"><I>a</I> + 2<I>c</I></SPAN>, ..., <SPAN CLASS="MATH"><I>b</I></SPAN>. We assume that <SPAN CLASS="MATH"><I>a</I> &lt; <I>b</I></SPAN>, <SPAN CLASS="MATH"><I>b</I> - <I>a</I></SPAN> is a multiple of <SPAN CLASS="MATH"><I>c</I></SPAN>, and <!-- MATH
 $c \le b - a$
 -->
<SPAN CLASS="MATH"><I>c</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2967img1.gif
 ALT="$ \le$"><I>b</I> - <I>a</I></SPAN>.

<P>
</LI>
<LI>A series of house numbers to be excluded: this kind of sub-orders specifies that a series of house numbers <EM>should not</EM> be made. In this case, the sub-order line starts with a `<TT>-</TT>', followed by three integer numbers with exactly the same conditions as in the previous case.
</LI>
</UL>

<P>
Note that if a house number is ordered more than once in two separate sub-orders, it is counted only once if it is not excluded at all (like number 100 in the second test case in the sample input). Also, if a house number is excluded somewhere in the test case, it cancels any order for that number, even if it appears later in the test case (like number 500 in the second sample). Note that it is possible to exclude some numbers that do not appear in other orders at all. In this case, these numbers are ignored (like 900 in the second sample).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
One set of output data is written for each input order consisting of 13 lines. Each set starts with one line containing the street name exactly as appeared in the input order. The next line must be of the form `<TT><SPAN CLASS="MATH"><I>C</I></SPAN> addresses</TT>' where <SPAN CLASS="MATH"><I>C</I></SPAN> is the total number of house numbers to be made. In the special case of <SPAN CLASS="MATH"><I>C</I> = 1</SPAN>, the output line should be `<TT>1 address</TT>'. The next 10 lines should be of the following form: Line <SPAN CLASS="MATH"><I>i</I></SPAN> should contain the number of digit plates needed to be made for digit <SPAN CLASS="MATH"><I>i</I></SPAN>. These 10 lines are on the format `<TT>Make <SPAN CLASS="MATH"><I>X</I></SPAN> digit <SPAN CLASS="MATH"><I>Y</I></SPAN></TT>' where <SPAN CLASS="MATH"><I>X</I></SPAN> is how many copies of digit <SPAN CLASS="MATH"><I>Y</I></SPAN> they need to make. The last line states the total number <SPAN CLASS="MATH"><I>Z</I></SPAN> of digits needed, on the format `<TT>In total <SPAN CLASS="MATH"><I>Z</I></SPAN> digits</TT>'. If there is only one digit to produce, it should say, `<TT>In total 1 digit</TT>', in order to be grammatically correct. The output should be case-sensitive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2 
Azadi Street
2
+ 101 103 2 
275 
Sharif Highway
3
100
- 500 900 100
+  100 800 100
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Azadi Street
3 addresses
Make 2 digit 0
Make 3 digit 1
Make 1 digit 2
Make 1 digit 3
Make 0 digit 4
Make 1 digit 5
Make 0 digit 6
Make 1 digit 7
Make 0 digit 8
Make 0 digit 9
In total 9 digits
Sharif Highway
4 addresses
Make 8 digit 0
Make 1 digit 1
Make 1 digit 2
Make 1 digit 3
Make 1 digit 4
Make 0 digit 5
Make 0 digit 6
Make 0 digit 7
Make 0 digit 8
Make 0 digit 9
In total 12 digits
</PRE> 

<P>

______________________________________________________
2968||||||false||||||
Suppose we have <SPAN CLASS="MATH"><I>n</I></SPAN> ropes of equal length and we want to use them to lift some heavy object. A tear-off weight <SPAN CLASS="MATH"><I>t</I></SPAN> is associated to each rope, that is, if we try to lift an object, heavier than <SPAN CLASS="MATH"><I>t</I></SPAN> with that rope, it will tear off. But we can fasten a number of ropes to the heavy object (in parallel), and lift it with all the fastened ropes. When using <SPAN CLASS="MATH"><I>k</I></SPAN> ropes to lift a heavy object with weight <SPAN CLASS="MATH"><I>w</I></SPAN>, we assume that each of the <SPAN CLASS="MATH"><I>k</I></SPAN> ropes, regardless of its tear-off weight, is responsible for lifting a weight of <SPAN CLASS="MATH"><I>w</I>/<I>k</I></SPAN>. However, if <SPAN CLASS="MATH"><I>w</I>/<I>k</I> &gt; <I>t</I></SPAN> for some rope with tear-off weight of <SPAN CLASS="MATH"><I>t</I></SPAN>, that rope will tear off. For example, three ropes with tear-off weights of  1, 10, and 15, when all three are fastened to an object, can not lift an object with weight more than 3, unless the weaker one tears-off. But the second rope, may lift by itself, an object with weight at most 10. Given the tear-off weights of <SPAN CLASS="MATH"><I>n</I></SPAN> ropes, your task is to find the weight of the heaviest object that can be lifted by fastening a subset of the given ropes without any of them tearing off.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2968img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2968img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by the input data for each test case. The first line of each test case contains a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2968img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2968img1.gif
 ALT="$ \le$">1000</SPAN>) which is the number of ropes. Following the first line, there is a single line containing <SPAN CLASS="MATH"><I>n</I></SPAN> integers between 1 and 10000 which are the tear-off weights of the ropes, separated by blank characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Each line of the output file should contain a single number, which is the largest weight that can be lifted in the corresponding test case without tearing off any rope chosen.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
3
10 1 15
2
10 15
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
20
20
</PRE> 

<P>

______________________________________________________
2969||||||false||||||
Optimus Mobiles produces mobile phones that support SMS messages. The Mobiles have a keypad of 12 keys, numbered 1 to 12. There is a character string assigned to each key. To type in the <SPAN CLASS="MATH"><I>n</I></SPAN>-th character in the character string of a particular key, one should press the key <SPAN CLASS="MATH"><I>n</I></SPAN> times. Optimus Mobiles wishes to solve the problem of assigning character strings to the keys such that for typing a random text out of a dictionary of common words, the average typing effort (i.e. the average number of keystrokes) is minimal. 

<P>
<DIV ALIGN="CENTER">
Figure 1
</DIV>
<P>
<DIV ALIGN="CENTER">
<BR>
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2969a.jpg
 ALT="\begin{picture}(130,190)(0,0)
\put(20,20){\circle{40}}
\put(15,18){\tt yz}
\put(...
...t(60,153){\tt cd}
\put(110,155){\circle{40}}
\put(105,153){\tt ef}
\end{picture}">
<BR>
</DIV>
<P>
<DIV ALIGN="CENTER">
</DIV>

<P>
To be more precise, consider a set of characters {a, b, c,..., z, +, *, /, ?} printed on a label tape as in Fig. 2. We want to cut the tape into 12 pieces each containing one or more characters. The 12 labels are numbered 1 to 12 from left to right and will be assigned to the keypad keys in that order.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2969b.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2969a.jpg
 ALT="\epsfbox{p2969b.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 2

</DIV>

<P>
You are to write a program to find the 11 cutting positions for a given dictionary of common words. The cutting positions should minimize the average number of keystrokes over all common words in the dictionary. Your output should be a string of 11 characters, where character <SPAN CLASS="MATH"><I>i</I></SPAN> in this string is the first character of the <SPAN CLASS="MATH">(<I>i</I> + 1)</SPAN>-th label.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2969a.jpg
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2969a.jpg
 ALT="$ \le$">10</SPAN>), the number of test cases. Each test case starts with a line, containing an integer <SPAN CLASS="MATH"><I>M</I></SPAN> (<!-- MATH
 $1 \le M \le 10000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2969a.jpg
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2969a.jpg
 ALT="$ \le$">10000</SPAN>), the number of common words in the test case. In each <SPAN CLASS="MATH"><I>M</I></SPAN> subsequent line, there is a common word. Each common word contains at most 30 characters from the alphabet {<TT>a</TT>, <TT>b</TT>, <TT>c</TT>, ..., <TT>z</TT>, <TT>+</TT>, <TT>*</TT>, <TT>/</TT>, <TT>?</TT>}.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output contains one line per test case containing an optimal cut string. Obviously, there may be more than a single optimal cut string, so print the optimal cut string which is the smallest one in lexicographic order.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2
hi
ok
5
hello
bye
how
when
who
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
bcdefghijko
bcdefhlnowy
</PRE> 

<P>

______________________________________________________
2970||||||false||||||
An automatic machine is used in a factory for controlling entrance and exit of workers. Each worker has an electronic identification (ID) card that has to be inserted into the machine every time the worker enters or leaves the factory. The machine reads the name (say <SPAN CLASS="MATH"><I>S</I></SPAN>) from the ID card, and the current date (say, <SPAN CLASS="MATH"><I>D</I></SPAN>) and time (say, <SPAN CLASS="MATH"><I>T</I></SPAN>) from its internal timer, and generates a new record, denoted by <SPAN CLASS="MATH"><I>D</I> - <I>S</I> - <I>T</I></SPAN>, in its database. The entrance time is no sooner than 8:00:00, and the exit time is no later than 20:00:00. 

<P>

<P>
<BR>
The factory also has a watchman who is always present and carefully records the entrances and exits of all workers and of the clients. He creates a separate list each day that contains the names of the people (workers or clients) who enter or exit the factory during that day. The list is in the same order as the people enter or exit. The names of workers on this list are exactly the same strings as recorded by the automatic machine. Note that clients do not have ID cards.

<P>
It is quite possible that some workers forget to insert their ID cards into the machine.  But, we assume that each worker makes this mistake at most once each day. We also know that each worker that comes to work in the factory on a certain day, enters the factory exactly once and leaves it exactly once on that day.

<P>

<P>
<BR>
At the end of the month, and on the pay day, the director of the factory notes that, with the information recorded by the automatic machine and the lists prepared by the watchman, it is not possible to find out exactly how many hours each worker has been present (working) in the factory in the past month. He, therefore, decides to pay each worker 100K Rials multiplied by the ``average" time he/she has been present in the factory during these days. The ``average" time is computed as the average of two numbers: one is the minimum possible and the other is the maximum possible time the worker has been present in the factory during the working days in the past month. 

<P>

<P>
<BR>
You are to write a program to find out the minimum and the maximum possible time each worker has been present in the factory.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
In the first line of input, there is an integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2970img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2970img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by the data for the test cases. Each line of a test case is a record of machine database or reports of watchman at the end of a day. Each line representing a machine record is like `<TT><SPAN CLASS="MATH"><I>D</I></SPAN>-<SPAN CLASS="MATH"><I>S</I></SPAN>-<SPAN CLASS="MATH"><I>T</I></SPAN></TT>', where <SPAN CLASS="MATH"><I>S</I></SPAN> is a string of lower case letters, <SPAN CLASS="MATH"><I>D</I></SPAN> is a date, formatted like <SPAN CLASS="MATH"><I>YY</I>/<I>MM</I>/<I>DD</I></SPAN>, and <SPAN CLASS="MATH"><I>T</I></SPAN> is a time stamp, formatted like <SPAN CLASS="MATH"><I>HH</I> : <I>MM</I> : <I>SS</I></SPAN>. There is no blank character in this kind of input lines. Each line representing a watchman's report of a single day containing <!-- MATH
 $1 \le k \le 40$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2970img1.gif
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2970img1.gif
 ALT="$ \le$">40</SPAN> names like the following:
<!-- MATH
 \begin{displaymath}
D \  S_1 \ S_2 \ S_3 \dots S_k
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>D</I>&nbsp;<I>S</I><SUB>1</SUB>&nbsp;<I>S</I><SUB>2</SUB>&nbsp;<I>S</I><SUB>3</SUB>...<I>S</I><SUB>k</SUB>
</DIV><P></P>

<P>
Which means that at date <SPAN CLASS="MATH"><I>D</I></SPAN> (with format <SPAN CLASS="MATH"><I>YY</I>/<I>MM</I>/<I>DD</I></SPAN>), first person named <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> entered or left the factory, then the second person named <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN>, and so on. The date and the names are separated by one blank character. In a test case, there cannot be more than one line of kind watchman's report for the same date. The period of interest is no more than 30 days. Person names are not more than 15 characters and no two persons have the same name. Each test case terminates with a line containing a single `tt #' character. The company has at least one employee and at most 15 employees. Two machine records of a certain date may have the same time stamp. In this case, the watchman may record the corresponding events in any order. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file contains answers to the test cases with the <SPAN CLASS="MATH"><I>i</I></SPAN>-th answer corresponding to the ith test case. Each line of an answer is of the form:
<!-- MATH
 \begin{displaymath}
S-H_1 \ M_1 \ S_1-H_2 \ M_2 \ S_2
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>S</I> - <I>H</I><SUB>1</SUB>&nbsp;<I>M</I><SUB>1</SUB>&nbsp;<I>S</I><SUB>1</SUB> - <I>H</I><SUB>2</SUB>&nbsp;<I>M</I><SUB>2</SUB>&nbsp;<I>S</I><SUB>2</SUB>
</DIV><P></P>

<P>
Where <SPAN CLASS="MATH"><I>S</I></SPAN> is the name of a worker, <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB></SPAN> , <SPAN CLASS="MATH"><I>M</I><SUB>1</SUB></SPAN> and  <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> represent the minimum presence time of the worker <SPAN CLASS="MATH"><I>S</I></SPAN> during period of interest, and <SPAN CLASS="MATH"><I>H</I><SUB>2</SUB></SPAN> , <SPAN CLASS="MATH"><I>M</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN> represent the same for maximum presence time of the worker <SPAN CLASS="MATH"><I>S</I></SPAN>. (<SPAN CLASS="MATH"><I>H</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>M</I><SUB>i</SUB></SPAN>, and <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> specify hours, minutes and seconds without any leading zeros.) The lines in each answer should be sorted on field <SPAN CLASS="MATH"><I>S</I></SPAN> alphabetically (dictionary sort). Each answer terminates with a line containing a single `<TT>#</TT>' character.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
99/10/03-sarah-09:00:00
99/10/03-sarah-14:00:00
99/10/04-ali-17:00:00
99/10/03-maryam-09:02:00
99/10/03-ali-10:20:15
99/10/04 ali reza sarah hamid ali reza sarah hamid
99/10/03-ali-12:00:00
99/10/03-maryam-09:04:00
99/10/04-sarah-18:00:00
99/10/03 sarah maryam maryam hamid hamid ali hassan ali sarah hassan
99/10/04-ali-13:00:00
#
99/10/03-sarah-09:00:00
99/10/03-sarah-14:00:00
99/10/04-ali-17:00:00
99/10/03-ali-10:20:15
99/10/04 ali sarah ali sarah
99/10/03-ali-12:00:00
99/10/04-sarah-18:00:00
99/10/03 sarah ali ali sarah
99/10/04-ali-13:00:00
#
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
ali-5 39 45-5 39 45
maryam-0 2 0-0 2 0
sarah-6 0 0-10 0 0
#
ali-5 39 45-5 39 45
sarah-6 0 0-10 0 0
#
</PRE> 

<P>

______________________________________________________
2971||||||false||||||
Ramtung, the senior Ph.D. student, has to propose a problem for the ACM programming contest this year. As he is highly involved in his Ph.D. studies, he cannot think about anything outside his research area; all about shortest paths in computational geometry.

<P>
One of the problems in this area is to find the shortest path between two given points on the surface of a polyhedron. A technique that helps finding such paths is <EM>unfolding</EM>. We cut the surface of the polyhedron along some line segments such that it can be unfolded onto a common plane. This flat surface allows us to apply more simple techniques to find the desired path. In the <EM>unfoldung</EM> problem (named after its author, Ramtung) you are to find whether the surface of a given polyhedron can be unfolded into a common plane when cut along a number of its edges. 

<P>

<P>
<BR>
To simplify your task, we consider as input the outer surface of a solid object composed of unit cubes glued to each other on their faces such that each cube is adjacent to at least one other cube (unless the object consists of a single cube). We say two cubes are adjacent if they have exactly one face in common. We want to unfold the outer surface of the object (i.e., we ignore the faces that are glued) to obtain a flat layout. The input to the problem is the description of the outer surface as well as a number of unit-edges of the surface that are to be cut. For the sake of simplicity, you may assume that the given object is such that every edge of the outer surface is adjacent to exactly two faces of the outer surface.

<P>

<P>
<BR>
For example, Fig. a and Fig. b show how the outer surface of two glued cubes is unfolded onto a common plane. In Fig. a, dotted edges are uncut, and solid lines show the ones that are cut. Note that the face <SPAN CLASS="MATH"><I>efgh</I></SPAN> is not part of the outer surface. The input data to this example is given in the first sample input. (The numbers inside faces of the right layout (Fig. b) are used to identify faces in the sample input data.)

<P>

<P>
<BR>
You are to write a program to determine whether such a surface can be laid out onto a common plane after unfolding its faces. By unfolding we mean rotating a face around one of its edges until it becomes co-planar with the other face adjacent to that edge (so the angle made between the faces inside the surface will be 180<SPAN CLASS="MATH"><SUP>o</SUP></SPAN>). Note that it is possible for the layout obtained after unfolding to overlap. If possible, one can rotate more than one face together.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2971.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2971.jpg
 ALT="\epsfbox{p2971.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2971.jpg
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2971.jpg
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by the input data for each test case. The first line of each test case contains a single integer <SPAN CLASS="MATH"><I>f</I></SPAN> (<!-- MATH
 $6 \le f \le 10000$
 -->
<SPAN CLASS="MATH">6<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2971.jpg
 ALT="$ \le$"><I>f</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2971.jpg
 ALT="$ \le$">10000</SPAN>) which is the number of faces on the outer surface. Assume that the faces are numbered uniquely from 1 to <SPAN CLASS="MATH"><I>f</I></SPAN>. The second line contains integer <SPAN CLASS="MATH"><I>n</I></SPAN>, which is the number of unit edges between faces of the outer surface, followed by exactly <SPAN CLASS="MATH"><I>n</I></SPAN> lines each containing a string of the form <SPAN CLASS="MATH"><I>x</I> + <I>y</I></SPAN> or <SPAN CLASS="MATH"><I>x</I> - <I>y</I></SPAN> forms. <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are distinct integers (<!-- MATH
 $1 \le x, y \le f$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2971.jpg
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2971.jpg
 ALT="$ \le$"><I>f</I></SPAN>) representing two faces of the surface. Both forms specify face <SPAN CLASS="MATH"><I>x</I></SPAN> is adjacent to face <SPAN CLASS="MATH"><I>y</I></SPAN> along a common edge. The plus sign shows that the edge common to <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> is cut (solid lines in Fig. a) and the minus sign indicates that the edge is not cut (dotted lines). There is no blank character in a line and there are no empty lines in the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
There should be one line per test case containing a string indicating the output to the test case. The output should be the string `<TT>CAN UNFOLD</TT>' if one can unfold the given surface, `<TT>CANNOT UNFOLD</TT>' if the surface cannot be unfolded, and `<TT>DISCONNECTED</TT>' if the surface is separated into two or more pieces by the cut edges. Note that if the surface is disconnected, your output should be `<TT>DISCONNECTED</TT>' regardless of whether it can be unfolded or not. Be careful that the output is considered case sensitive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
10
20
1-4
1-3
1-7
1-9
4-5
3+6
7-8
9-10
5+2
6+2
8-2
10+2
7+9
9+3
3+4
4+7
5+8
8+10
10+6
6-5
6
12
1-2
2-3
3-4
4-1
1-5
2-5
3-5
4-5
1-6
2-6
3-6
4-6
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
CAN UNFOLD
CANNOT UNFOLD
</PRE> 

<P>

______________________________________________________
2972||||||false||||||
In this problem, you are to solve a very easy linear equation with only one variable <SPAN CLASS="MATH"><I>x</I></SPAN> with no parentheses! An example of such equations is like the following:
<!-- MATH
 \begin{displaymath}
2x - 4 + 5x + 300 = 98x
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
2<I>x</I> - 4 + 5<I>x</I> + 300 = 98<I>x</I>
</DIV><P></P>

<P>
An expression in its general form, will contain a `=' character with two expressions on its sides. Each expression is made up of one or more terms combined by `+' or `-' operators. No unary plus or minus operators are allowed in the expressions. Each term is either a single integer, or an integer followed by the lower-case character <SPAN CLASS="MATH"><I>x</I></SPAN> or the single character <SPAN CLASS="MATH"><I>x</I></SPAN> which is equivalent to <SPAN CLASS="MATH">1<I>x</I></SPAN>.

<P>

<P>
<BR>
You are to write a program to find the value of <SPAN CLASS="MATH"><I>x</I></SPAN> that satisfies the equation. Note that it is possible for the equation to have no solution or have infinitely many. Your program must detect these cases too.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first number in the input line, <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2972img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2972img1.gif
 ALT="$ \le$">10</SPAN>) is the number of test cases, followed by <SPAN CLASS="MATH"><I>t</I></SPAN> lines of length at most 255 each containing an equation. There is no blank character in the equations and the variable is always represented by the lower-case character `<TT>x</TT>'. The coefficients are integers in the range (0..1000) inclusive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output contains one line per test case containing the solution of the equation. If <SPAN CLASS="MATH"><I>s</I></SPAN> is the solution to the equation, the output line should contain <!-- MATH
 $\lfloor s \rfloor$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2972img1.gif
 ALT="$ \lfloor$"><I>s</I><IMG
 WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2972img1.gif
 ALT="$ \rfloor$"></SPAN> (the ``floor" of <SPAN CLASS="MATH"><I>s</I></SPAN>, i.e., the largest integer number less than or equal to <SPAN CLASS="MATH"><I>s</I></SPAN>). The output should be `<TT>IMPOSSIBLE</TT>' or `<TT>IDENTITY</TT>' if the equation has no solution or has infinite solutions, respectively. Note that the output is case-sensitive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2 
2x-4+5x+300=98x
x+2=2+x
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3
IDENTITY
</PRE> 

<P>

______________________________________________________
2973||||||false||||||
Map generation is a difficult task in cartography. A vital part of such task is automatic labeling of the cities in a map; where for each city there is text label to be attached to its location, so that no two labels overlap. In this problem, we are concerned with a simple case of automatic map labeling.

<P>
Assume that each city is a point on the plane, and its label is a text bounded in a square with edges parallel to <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> axis. The label of each city should be located such that the city point appears exactly in the middle of the top or bottom edges of the label. In a <EM>good labeling</EM>, the square labels are all of the same size, and no two labels overlap, although they may share one edge. Figure 1 depicts an example of a good labeling (the texts of the labels are not shown.)

<P>
Given the coordinates of all city points on the map as integer values, you are to find the maximum label size (an integer value) such that a good labeling exists for the map.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2973.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2973.jpg
 ALT="\epsfbox{p2973.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2973.jpg
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2973.jpg
 ALT="$ \le$">10</SPAN>), the number of test cases. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>m</I></SPAN> (<!-- MATH
 $3 \le m \le 100$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2973.jpg
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2973.jpg
 ALT="$ \le$">100</SPAN>), the number of cities followed by <SPAN CLASS="MATH"><I>m</I></SPAN> lines of data each containing a pair of integers; the first integer (<SPAN CLASS="MATH"><I>X</I></SPAN>) is the <SPAN CLASS="MATH"><I>x</I></SPAN> and the second one (<SPAN CLASS="MATH"><I>Y</I></SPAN>) is the <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of one city on the map (<!-- MATH
 $-10000  \le X, Y \le 10000$
 -->
<SPAN CLASS="MATH">-10000<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2973.jpg
 ALT="$ \le$"><I>X</I>, <I>Y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2973.jpg
 ALT="$ \le$">10000</SPAN>). Note that no two cities have the same <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output will be one line per each test case containing the maximum possible label size (an integer value) for a good labeling.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
6
1 1
2 3
3 2
4 4
10 4
2 5
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
2
</PRE> 

<P>

______________________________________________________
2974||||||false||||||
One cumbersome problem in chemistry is the task of making the number of atoms balanced in a chemical equation. Our problem is concerned with this.

<P>

<P>
<BR>
Chemists obey these rules when they present chemical equations:

<OL>
<LI>Each element name is abbreviated by at most two letters. The first letter is always in upper-case and the second letter if exists, is a lower-case letter (e.g. Calcium is represented by <EM>Ca</EM>, Oxygen by <EM>O</EM>, and Chlorine by <EM>Cl</EM>).
</LI>
<LI>Each molecule is composed of a number of atoms. To represent a molecule, we concatenate the abbreviated names of its composite atoms. For example, <EM>NaCl</EM> represents Sodium Chloride. Each atom name may be followed by a frequency number. For example, Calcium Chloride <EM>CaCl2</EM> consists of one atom of Calcium and two atoms of Chlorine. If the frequency is not given, it is assumed to be 1 (so <EM>HCl</EM> is equivalent to <EM>H1Cl1</EM>). For the sake of simplicity, you may assume that the frequency of an occurrence of an atom is at most 9 (so we do not have <EM>C11H22O11</EM> in the problem input). Note that there may be several occurrences of the same atom in the molecule formula, like <EM>H</EM> atom in <EM>CH3COOH</EM>. 
</LI>
<LI>In ordinary chemical reactions, a number of molecules combine and result in a number of other molecules. For example a well known sample of neutralization is:
<!-- MATH
 \begin{displaymath}
2HCl + CaO2H2 \rightarrow CaCl2 + 2H2O
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
2<I>HCl</I> + <I>CaO</I>2<I>H</I>2 <IMG
 WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2974img1.gif
 ALT="$\displaystyle \rightarrow$"> <I>CaCl</I>2 + 2<I>H</I>2<I>O</I>
</DIV><P></P>

<P>
This means two molecules of chlorohydric acid (<EM>HCl</EM>) with one molecule of Calcium Hydroxide results in one molecule of Calcium Chloride (<EM>CaCl2</EM>) and two molecules of water.
</LI>
<LI>In every chemical reaction, the total number of each atom in the right side of the equation equals the total number of that atom in the left side (that is why it is called an equation!).
</LI>
</OL>

<P>
Your task is to write a program to find appropriate coefficients <!-- MATH
 $x_1, x_2, \dots, x_M$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>M</SUB></SPAN> and <!-- MATH
 $y_1, y_2, \dots, y_N$
 -->
<SPAN CLASS="MATH"><I>y</I><SUB>1</SUB>, <I>y</I><SUB>2</SUB>,..., <I>y</I><SUB>N</SUB></SPAN> to balance an (imbalanced) equation like
<!-- MATH
 \begin{displaymath}
A_1+A_2+A_3+ \cdots +A_M \rightarrow B_1+B_2+B_3+ \cdots +B_N
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>A</I><SUB>1</SUB> + <I>A</I><SUB>2</SUB> + <I>A</I><SUB>3</SUB> + <SUP> ... </SUP> + <I>A</I><SUB>M</SUB> <IMG
 WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2974img1.gif
 ALT="$\displaystyle \rightarrow$"> <I>B</I><SUB>1</SUB> + <I>B</I><SUB>2</SUB> + <I>B</I><SUB>3</SUB> + <SUP> ... </SUP> + <I>B</I><SUB>N</SUB>
</DIV><P></P>
in the following way:
<!-- MATH
 \begin{displaymath}
x_1  A_1 + x_2  A_2+ x_3  A_3+ \cdots + x_M  A_M \rightarrow y_1  B_1+ y_2 B_2+ y_3 B_3+ \cdots + y_N B_N
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>x</I><SUB>1</SUB><I>A</I><SUB>1</SUB> + <I>x</I><SUB>2</SUB><I>A</I><SUB>2</SUB> + <I>x</I><SUB>3</SUB><I>A</I><SUB>3</SUB> + <SUP> ... </SUP> + <I>x</I><SUB>M</SUB><I>A</I><SUB>M</SUB> <IMG
 WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2974img1.gif
 ALT="$\displaystyle \rightarrow$"> <I>y</I><SUB>1</SUB><I>B</I><SUB>1</SUB> + <I>y</I><SUB>2</SUB><I>B</I><SUB>2</SUB> + <I>y</I><SUB>3</SUB><I>B</I><SUB>3</SUB> + <SUP> ... </SUP> + <I>y</I><SUB>N</SUB><I>B</I><SUB>N</SUB>
</DIV><P></P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line contains an integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2974img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2974img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases. Each test case consists of a single line containing an expression like:
<!-- MATH
 \begin{displaymath}
A_1+A_2+A_3+ \cdots +A_M = B_1+B_2+B_3+ \cdots +B_N
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>A</I><SUB>1</SUB> + <I>A</I><SUB>2</SUB> + <I>A</I><SUB>3</SUB> + <SUP> ... </SUP> + <I>A</I><SUB>M</SUB> = <I>B</I><SUB>1</SUB> + <I>B</I><SUB>2</SUB> + <I>B</I><SUB>3</SUB> + <SUP> ... </SUP> + <I>B</I><SUB>N</SUB>
</DIV><P></P>

<P>
Each <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB></SPAN> or <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN> is a formula of a molecule according to the rules given in items 1 and 2.

<P>

<P>
<BR>
The input equations are given in a way that if they can be balanced, <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> coefficients can be in the range of 1 to 9. There are less than 10 molecules and there are less than 10 different types of atoms, in a given equation. Additionally, you may assume molecules contain no more than 3 different kinds of atoms. You may also assume that there is no blank character in the input file, and the maximum length of the input lines is 200 characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output will be one line per test case containing the list of required coefficients, separated by blank characters, in the following order:
<!-- MATH
 \begin{displaymath}
x_1 \  x_2 \  \dots \ x_M \ y_1 \  y_2 \ \dots \ y_N
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>x</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;...&nbsp;<I>x</I><SUB>M</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>2</SUB>&nbsp;...&nbsp;<I>y</I><SUB>N</SUB>
</DIV><P></P>

<P>
The coefficients should be integers in the range of 1..9. Obviously, there may be more than one answer for a test case. In such situations, print the answer which minimizes the number: 
<!-- MATH
 \begin{displaymath}
x_1   x_2   \dots  x_M  y_1   y_2   \dots  y_N
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>x</I><SUB>1</SUB><I>x</I><SUB>2</SUB>...<I>x</I><SUB>M</SUB><I>y</I><SUB>1</SUB><I>y</I><SUB>2</SUB>...<I>y</I><SUB>N</SUB>
</DIV><P></P>
(This is an <SPAN CLASS="MATH">(<I>M</I> + <I>N</I>)</SPAN>-digit decimal number whose digits are <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> coefficients.) If the equation is impossible to balance, the output line should be `<TT>IMPOSSIBLE</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
HCl+CaO2H2=CaCl2+H2O
HCl+H2SO4=NaCl
HCl+NaOH=NaCl+H2O
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
2 1 1 2
IMPOSSIBLE
1 1 1 1
</PRE> 

<P>

______________________________________________________
2975||||||false||||||
<P>Two positive decimal integers without any leading zeros will be called isomorphic if they are composed of the same number of digits and same digit-repetition pattern (regardless of the value of the digits.)<P>For example, all of the following numbers are isomorphic to each other: 12156, 73748, 51590, 48412 since in each individual number, the first and the third positions are occupied by the same digit, and all the other positions have distinct digits (which are also distinct from the digit in positions 1 and 3).<P>The following numbers are also isomorphic to each other: 237392, 578715, 341453. All of the following numbers are pair-wise not isomorphic: 222, 545, 776, 811, 66.<P>The set of numbers that are isomorphic to each other will be called an <SPAN CLASS="textit">isoset</SPAN>. For example, the numbers: 11, 22, 33, 44, 55, 66, 77, 88, 99 form an isoset with cardinality 9 (number of elements in the set). Any number is a member of exactly one isoset.<P><P><BR>A company wants to make use of isomorphic numbers in classifying its clients into groups. Each client is given a unique id number (a decimal positive number less than 1,000,000,000.) Any two clients within the same group are given id numbers that are isomorphic to each other. The company hires you to write a program that will do two things:<P><OL><LI>Given two numbers, determine if the numbers are isomorphic or not. </LI><LI>Given a number <SPAN CLASS="MATH"><I>x</I></SPAN>, determine the cardinality of its isoset. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The program accepts a list of one or more commands. Each command is specified on a separate line. Possible commands are:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=HSIDES RULES=NONE><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>VERIFY <SPAN CLASS="MATH"><I>x</I></SPAN> <SPAN CLASS="MATH"><I>y</I></SPAN></TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Test if numbers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are isomorphic or not.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>SIZE <SPAN CLASS="MATH"><I>x</I></SPAN></TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Print the cardinality of the isoset <SPAN CLASS="MATH"><I>x</I></SPAN> is a member of.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>QUIT</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Exit the program.</TD></TR></TABLE></DIV><P><P><BR>Commands are always uppercase words.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For a `<TT>VERIFY <SPAN CLASS="MATH"><I>x</I></SPAN> <SPAN CLASS="MATH"><I>y</I></SPAN></TT>' command, your program should output a line of the form:<P><P><BR><TT><SPAN CLASS="MATH"><I>k</I></SPAN>. <SPAN CLASS="MATH"><SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2975img1.png ALT="$\scriptstyle \sqcup$"></SUB><I>result</I></SPAN></TT><P><P><BR>where <SPAN CLASS="MATH"><I>result</I></SPAN> is `<TT>true</TT>' (without the quotes,) if <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are isomorphic, `<TT>false</TT>' otherwise. <SPAN CLASS="MATH"><I>k</I></SPAN> is the input line number of the command. <SPAN CLASS="MATH"><SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2975img1.png ALT="$\scriptstyle \sqcup$"></SUB></SPAN> is a single space character.<P><P><BR>For the `<TT>SIZE <SPAN CLASS="MATH"><I>x</I></SPAN></TT> command, your program should print:<P><P><BR><TT><SPAN CLASS="MATH"><I>k</I></SPAN>. <SPAN CLASS="MATH"><SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2975img1.png ALT="$\scriptstyle \sqcup$"></SUB><I>c</I></SPAN></TT><P><P><BR>Where <SPAN CLASS="MATH"><I>c</I></SPAN> is the cardinality.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
VERIFY 1121321 5545645
VERIFY 1111 1112
SIZE 11
QUIT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. true
2. false
3. 9
</PRE><P>
______________________________________________________
2976||||||false||||||

<P>
Macrosoft is a startup software company with a killer word processor. All it needs is a spell checker to take
over the word-processing market. They believe they have the concept for a perfect spell checker but they can't
program it, and this is where you come in.

<P>
Macrosoft wants you to write a spell checker that takes a dictionary of valid words, and a list of words to
spell check. Let <SPAN CLASS="MATH"><I>w</I></SPAN> be a word being spelled checked; let <SPAN CLASS="MATH"><I>n</I></SPAN> be the length of <SPAN CLASS="MATH"><I>w</I></SPAN>. Let <SPAN CLASS="MATH"><I>D</I></SPAN> be the set of
words in the dictionary and <SPAN CLASS="MATH"><I>d</I></SPAN> be a word in the dictionary.

<P>

<OL>
<LI>If <SPAN CLASS="MATH"><I>w</I> <IMG
 WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2976img1.png
 ALT="$ \in$"> <I>D</I></SPAN>, then your program should print <SPAN CLASS="MATH"><I>w</I></SPAN> as is. Otherwise,
</LI>
<LI>if there is exactly one <SPAN CLASS="MATH"><I>d</I> <IMG
 WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2976img1.png
 ALT="$ \in$"> <I>D</I></SPAN> such that <SPAN CLASS="MATH"><I>w</I></SPAN> is missing exactly one letter from <SPAN CLASS="MATH"><I>d</I></SPAN>, then the
spell checker should print <SPAN CLASS="MATH"><I>d</I></SPAN>. However,
</LI>
<LI>If there are more than one word <SPAN CLASS="MATH"><I>d</I> <IMG
 WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2976img1.png
 ALT="$ \in$"> <I>D</I></SPAN>, that meet criteria 2 above, then the spell checker
should print a string made of <SPAN CLASS="MATH"><I>n</I></SPAN> question-marks (`<TT>?</TT>').
</LI>
<LI>Finally, if all the above fails, the spell checker should print a string made of <SPAN CLASS="MATH"><I>n</I></SPAN> starts (`<TT>*</TT>').
</LI>
</OL>

<P>
For example, given the dictionary <!-- MATH
 $D = \{rice, price, prize\}$
 -->
<SPAN CLASS="MATH"><I>D</I> = {<I>rice</I>, <I>price</I>, <I>prize</I>}</SPAN>, the following table illustrates what your
program should print for the words `<TT>rice</TT>', `<TT>ice</TT>', `<TT>prie</TT>', and `<TT>ize</TT>'.

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BELOW RULES=GROUPS>
<COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=JUSTIFY WIDTH="5in">
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN  CLASS="textbf">input</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN  CLASS="textbf">output</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360"> <SPAN  CLASS="textbf">justification</SPAN></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>rice</TT>  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>     <TT>rice</TT>   </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">     case 1: <SPAN CLASS="MATH"><I>w</I> <IMG
 WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2976img1.png
 ALT="$ \in$"> <I>D</I></SPAN></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>ice</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   <TT>rice</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">    case 2: exactly one word is found by adding exactly one character
to <SPAN CLASS="MATH"><I>w</I></SPAN>.</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>prie</TT>   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    <TT>????</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">   case 3: there are more than one word (<TT>price</TT>, <TT>prize</TT>) that
can be formed by adding one character to <SPAN CLASS="MATH"><I>w</I></SPAN>.</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>ize</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>***</TT>     </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">    case 4.</TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program will be run against a number of test cases. The first line in the input file contains a single
integer <SPAN CLASS="MATH"><I>T</I></SPAN> specifying the number of test cases.

<P>
Each test case is made of two lists of words: The list of words in the dictionary is specified first,
followed by the list of words to spell check. Each word is specified on a separate line. The end of the
dictionary is indicated using the string `<TT>--</TT>' on a separate line. The end of the words to spell
check is indicated using the string `<TT>+++</TT>'. All words are of lower-case letters, and no word is longer
than 32 characters. The dictionary will have at most 100,000 words.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
At the beginning of each test case, your program should print the following line:

<P>

<P>
<BR>

<TT>Test Case #<SPAN CLASS="MATH"><I>k</I></SPAN></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>k</I></SPAN> is the test case number. Test cases are numbered starting at 1. Following the first line, for
each word in the list of words to be spell checked, write on a separate line the output of your spell
checker using the following format:

<P>

<P>
<BR>

<TT><!-- MATH
 $_{\sqcup}w_{\sqcup}$
 -->
<SPAN CLASS="MATH"><SUB><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2976img1.png
 ALT="$\scriptstyle \sqcup$"></SUB><I>w</I><SUB><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2976img1.png
 ALT="$\scriptstyle \sqcup$"></SUB></SPAN>=&gt;<!-- MATH
 $_{\sqcup}r$
 -->
<SPAN CLASS="MATH"><SUB><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2976img1.png
 ALT="$\scriptstyle \sqcup$"></SUB><I>r</I></SPAN></TT>

<P>
Where <SPAN CLASS="MATH"><I>w</I></SPAN> is the word being spelled checked, and <SPAN CLASS="MATH"><I>r</I></SPAN> is the output word from the spell checker.
Note the spaces before <SPAN CLASS="MATH"><I>w</I></SPAN> and around the arrow `<TT>=&gt;</TT>'.

<P>
A blank line should be added after the end of each test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
rice
price
prize
---
rice
ice
prie
ize
+++
seen
been
teen
---
see
een
ten
bye
+++
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Test  Case #1
 rice =&gt; rice
 ice =&gt; rice
 prie =&gt; ????
 ize =&gt; ***

Test Case #2
 see =&gt; seen
 een =&gt; ???
 ten =&gt; teen
 bye =&gt; ***
</PRE>

<P>

______________________________________________________
2977||||||false||||||
<P>Johnny is a dishonest taxi driver who just loves to get more money out of unaware tourists. When he picks up a tourist, Johnny always attempts to drive more than necessary in order to be able to charge the tourist more. However, Johnny realizes that even tourists visiting the city for the first time, will be able to uncover his scheme if he keeps going around the same places too many times. Johnny must find paths with minimum revisits of the same places, and never more than 10 revisits. For that Johnny needs your help.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2977a.jpg ALT="\epsfbox{p2977a.eps}"></DIV><P>Johnny will give you a detailed description of the city, listing distances between intersection points. Johnny wants you to write a program that will determine a path between any two given points, such that the path will have a preset cost. For example: In the map on the right, Rather than going from `<TT>a</TT>' to `<TT>f</TT>' using the cheapest (shortest) path `<TT>adef</TT>' (with <SPAN CLASS="MATH"><I>cost</I> = 47</SPAN>) Johnny, being greedy, can go `<TT>abcebdef</TT>' or `<TT>adebdf</TT>' both with <SPAN CLASS="MATH"><I>cost</I> = 100</SPAN>. The second path `<TT>adebdf</TT>' revisits only one point (`<TT>d</TT>') is better than the first `<TT>abcebdef</TT>' which has two revisits (`<TT>b</TT>' and `<TT>e</TT>'.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on a number of test cases. The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> denoting the number of test cases.<P>Each test case is specified on <SPAN CLASS="MATH"><I>n</I> + <I>q</I> + 1</SPAN> lines. The first line of each test case specifies three integers: <SPAN CLASS="MATH"><I>p</I></SPAN> (the number of intersection points,) <SPAN CLASS="MATH"><I>n</I></SPAN> (the number of streets,) and <SPAN CLASS="MATH"><I>q</I></SPAN> (the number of queried paths.)<P>Following that, the streets will be specified using <SPAN CLASS="MATH"><I>n</I></SPAN> lines, one for each street. A street between <SPAN CLASS="MATH"><I>PointA</I></SPAN> and <SPAN CLASS="MATH"><I>PointB</I></SPAN> with cost <SPAN CLASS="MATH"><I>C</I></SPAN> is specified using the following format:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>PointA</I><SUB><IMG WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2977a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>PointB</I><SUB><IMG WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2977a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>C</I></DIV><P></P><P>Each test case has at least one street and at most 100 streets. All streets are two ways. A <SPAN CLASS="MATH"><I>Point</I></SPAN> is specified using a lower-case word whose length doesn't exceed 8 characters. No city will have more than 100 distinct points. <SPAN CLASS="MATH"><I>C</I></SPAN> is a positive integer <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2977a.jpg ALT="$ \le$">100</SPAN><P>Following the <SPAN CLASS="MATH"><I>n</I></SPAN> input lines describing the streets, each test case will have <SPAN CLASS="MATH"><I>q</I></SPAN> queries, each specified on a separate line using the following format:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>PointX</I><SUB><IMG WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2977a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>PointY</I><SUB><IMG WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2977a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>Q</I></DIV><P></P>which inquires about the minimum number of revisits in a path from <SPAN CLASS="MATH"><I>PointX</I></SPAN> to <SPAN CLASS="MATH"><I>PointY</I></SPAN> having cost <SPAN CLASS="MATH"><I>Q</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each query, write on a separate line, the following output:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>PointX</I><SUB><IMG WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2977a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>PointY</I><SUB><IMG WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2977a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>Q</I><SUB><IMG WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2977a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>R</I></DIV><P></P><P>Where <SPAN CLASS="MATH"><I>PointX</I></SPAN>, <SPAN CLASS="MATH"><I>PointY</I></SPAN>, and <SPAN CLASS="MATH"><I>Q</I></SPAN> are the same as the input, and <SPAN CLASS="MATH"><I>R</I></SPAN> is the minimum number of revisits in a path going from <SPAN CLASS="MATH"><I>PointX</I></SPAN> to <SPAN CLASS="MATH"><I>PointY</I></SPAN> with cost <SPAN CLASS="MATH"><I>Q</I></SPAN>. If there is no such path with no more than 10 revisits, then <SPAN CLASS="MATH"><I>R</I></SPAN> is equal to -1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
6 9 2
a b 28
a d 25
b c 10
b d 8
b e 12
c e 20
d e 10
d f 45
e f 12
a f 100
a f 50
3 3 1
x y 7
z y 7
z x 13
x z 65
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
a f 100 1
a f 50 -1
x z 65 4
</PRE><P><P><P><BR><B>Note:</B> The second test case uses the graph below and inquires about a path from `<TT>x</TT>' to `<TT>z</TT>' with <SPAN CLASS="MATH"><I>cost</I> = 65</SPAN>. This can only be achieved using the path `<TT>xzxzxz</TT>' which has 4 revisits (`<TT>x</TT>' is revisited twice, and so is `<TT>z</TT>').<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2977a.jpg ALT="\epsfbox{p2977b.eps}"></DIV><P>
______________________________________________________
2978||||||false||||||
<P>Denis Roskin, Jr. has come up with an interesting mathematical series in memory of his late father, Dr. Denis Roskin, Sr., the long forgotten mathematician who died at the age of 40. Actually, Jr. came up with two (rather coupled) series, which he named <SPAN CLASS="textit">The Denis Roskin Pair</SPAN> or DR for short. Each is defined as follows:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=HSIDES RULES=NONE><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1><SPAN ID="txt54">The Denis Series</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1><SPAN ID="txt57">The Roskin Series</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>D</I>(0) = 1</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>R</I>(0) = 1</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>D</I>(<I>i</I>) = <IMG WIDTH="29" HEIGHT="68" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$\displaystyle \sum_{k=1}^{i}$"><IMG WIDTH="16" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$\displaystyle \left\lfloor\vphantom{\frac{R(i-k)}{k}}\right.$"><IMG WIDTH="72" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$\displaystyle {\frac{R(i-k)}{k}}$"><IMG WIDTH="16" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$\displaystyle \left.\vphantom{\frac{R(i-k)}{k}}\right\rfloor$"></SPAN> where <SPAN CLASS="MATH"><I>i</I> &gt; 0</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>R</I>(<I>i</I>) = <IMG WIDTH="29" HEIGHT="70" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$\displaystyle \sum_{k=0}^{i, 1}$"><IMG WIDTH="16" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$\displaystyle \left\lceil\vphantom{\frac{D(k)}{i-k}}\right.$"><IMG WIDTH="46" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$\displaystyle {\frac{D(k)}{i-k}}$"><IMG WIDTH="16" HEIGHT="57" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$\displaystyle \left.\vphantom{\frac{D(k)}{i-k}}\right\rceil$"></SPAN> where <SPAN CLASS="MATH"><I>i</I> &gt; 0</SPAN></TD></TR></TABLE></DIV><P><P><BR>where <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$ \lfloor$"><I>x</I><IMG WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$ \rfloor$"></SPAN> is the floor of <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$ \lceil$"><I>x</I><IMG WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$ \rceil$"></SPAN> is the ceiling of <SPAN CLASS="MATH"><I>x</I></SPAN>. The first 10 elements in the series are:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=12 BORDER FRAME=HSIDES RULES=GROUPS><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">index:</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>i</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Denis Series:</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>D</I>(<I>i</I>)</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>17</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>29</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>47</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Roskin Series:</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>R</I>(<I>i</I>)</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>30</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>49</TD></TR></TBODY></TABLE></DIV><P><P><BR>Write a program to compute the Denis Series.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on a number of test cases. The input is made of one or more integers <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> terminated by a `<TT>-1</TT>' (which is not part of the test cases.) Each integer appears on a separate line. Note that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$ \le$"><I>v</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2978img1.png ALT="$ \le$">40</SPAN> (remember: Dr. Denis Roskin died at the age of 40).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> in the input, write on a separate line, the value of <SPAN CLASS="MATH"><I>D</I>(<I>v</I><SUB>i</SUB>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
5
9
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
6
47
</PRE><P>
______________________________________________________
2979||||||false||||||
<P>The game of Nubble is a very popular game among math teachers in British elementary schools. It is used as a fun way to teach basic arithmetic to kids. In this game, a player throws a set of two or more dice (normally four, never more than six,) and tries to come up with an arithmetic expression using <SPAN CLASS="textit">all the values</SPAN> on the dice they got. Expressions are formed using the basic four arithmetic operations: addition,subtraction, multiplication, and <SPAN CLASS="textit">even</SPAN> division (Division is allowed only if the divident is completely divisible by the divisor, i.e. the remainder is zero). The challenge is to get the largest possible value less than 100.<P><P><BR>For example, imagine getting the four dice values: 2, 6, 3, and 1. One can make the expression <SPAN CLASS="MATH">(6 + 3 + 2 + 1) = 12</SPAN>. But we can do better than that since <SPAN CLASS="MATH">(6*3*2 + 1) = 37</SPAN>. But the best value you can get given these dice is <SPAN CLASS="MATH">54 = 6*3*(1 + 2)</SPAN>.<P>Write a program that takes a list of dice values and determines an arithmetic expression with the largest value less than 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on a single line using the form:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>n</I>&nbsp;<I>v</I><SUB>1</SUB>&nbsp;<I>v</I><SUB>2</SUB>&nbsp;...&nbsp;<I>v</I><SUB>n</SUB></DIV><P></P><P>Where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of dice, and <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB>...<I>v</I><SUB>n</SUB></SPAN> are the dice values. The end of test cases is indicated by the value zero on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the best value that can be achieved on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4 2 6 3 1
3 5 5 6
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
54
60
</PRE><P>
______________________________________________________
2980||||||false||||||
<P>Kuwait's Traffic Police is considering acquiring new, state of the art, speed cameras (cameras that take pictures of cars driving over the speed limit). Unlike the first generation which had to be pointed to a fixed direction, these cameras can rotate and take pictures in any direction. Placed at a road intersection, one new camera can monitor all roads passing through that intersection.<P>In the figure below, a camera placed at intersection `<TT>f</TT>' covers the streets `<TT>acfg</TT>' and `<TT>bfh</TT>'<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2980.jpg ALT="\epsfbox{p2980.eps}"></DIV><P>But these cameras are quite expensive and the police department needs to determine the minimum number of cameras it must buy. For example, in a city with a road map similar to the one on the right, one can place four cameras at road intersections `<TT>a</TT>', `<TT>c</TT>', `<TT>f</TT>' and `<TT>g</TT>', to cover all the streets. The police department can save money, however, by buying only three of these cameras and placing them at intersections `<TT>b</TT>', `<TT>d</TT>', and `<TT>g</TT>' (or `<TT>a</TT>', `<TT>b</TT>', and `<TT>g</TT>'.)<P>Write a program that takes a map of the roads in a city and computes the minimum number of cameras needed to monitor all the roads.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on a number of test cases. The first line of the input will have a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> representing the number of test cases. Each test case is specified on a single line using the form:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>n</I>&nbsp;<I>street</I><SUB>1</SUB>&nbsp;<I>street</I><SUB>2</SUB>...<I>street</I><SUB>n</SUB></DIV><P></P><P>Where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of streets with <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2980.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2980.jpg ALT="$ \le$">50</SPAN>. Each street is specified using a string representing the intersections that street passes through. Each intersection is represented as a single, lowercase letter (`<TT>a</TT>' through `<TT>z</TT>', inclusive.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the minimum number of cameras needed to monitor all the streets in the given test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
7 ab acfg ad bcd bfh egj ghi
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
</PRE><P>
______________________________________________________
2981||||||false||||||
<P>There are two methods to determine winners of football tournements: league or cup. In the cup method, football matches are played in <SPAN CLASS="textit">rounds</SPAN>. In the first round, every two teams play one match and only the winner qualifies to the next round. The winners of a round are then reduced by half using the same procedure. This continues until the final round where two teams play and the winner is declared the cup champion. The loser of this final match is normally considered the second. Some argue that this is unfair and that the real second team should be the best team of <SPAN CLASS="textit">all the teams that lost against the champion.</SPAN><P>Write a program to determine the (real) second team in the following tournament: There are <SPAN CLASS="MATH"><I>n</I></SPAN> teams denoted by <SPAN CLASS="MATH"><I>n</I></SPAN> distinct integer identifiers. These <SPAN CLASS="MATH"><I>n</I></SPAN> teams will play in a cup manner until the champion is determined. The winner in any match is the team with the smaller identifier (if the round number is odd,) or the team with the larger identifier (if the round number is even.) If in some round, the number of teams is odd, the last team in the list is qualified automatically to the next round, but is placed in the head of the next list (in the example below, team 2 qualifies automatically to round 2. Similarly, team 6 to round 3.)<P>Once the champaion is determined, there will be another tournament (the secondary tournament) for all the teams <SPAN CLASS="textit">that lost against the champion</SPAN>. These teams will be placed in the list in reverse order so that the team that lost to the champion in the final round is placed first, and so on.<P>These teams will play again in a cup manner with the same rules used before. The winner this time is the real second.<P>Take a look at this tournament in which five teams (ids: 4, 3, 6, 9, and 2) compete, and team 3 is the cup champion. Teams that lost to team 3 (6, 2, and 4) play in the secondary tournament to determine the team in the second place. The real second is team 4, not 6.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2981a.jpg ALT="\epsfbox{p2981.eps}"><br><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2981a.jpg ALT="\epsfbox{p2981.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on multiple test cases. Each test case is specified on a single text line using the form:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>n</I>&nbsp;<I>id</I><SUB>1</SUB>&nbsp;<I>id</I><SUB>2</SUB>&nbsp;...<I>id</I><SUB>n</SUB></DIV><P></P>where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of teams, and <SPAN CLASS="MATH"><I>id</I><SUB>i</SUB></SPAN> is the identifier for the <SPAN CLASS="MATH"><I>i</I></SPAN>-th team. Note that <!-- MATH
 $1 < n < 10,000$
 --><SPAN CLASS="MATH">1 &lt; <I>n</I> &lt; 10, 000</SPAN> and <!-- MATH
 $-10,000 < id_{i} < 10,000.$
 --><SPAN CLASS="MATH">-10, 000 &lt; <I>id</I><SUB>i</SUB> &lt; 10, 000.</SPAN><P>The end of the test cases is indicated with a `<TT>0</TT>' on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write on a separate line, the identifier of the real second.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5 4 3 6 9 2
6 10 80 30 20 15 25
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
20
</PRE><P>
______________________________________________________
2982||||||false||||||

<P>
Yazoo is a computer game in which you're given a sequence of integers. A sequence can be broken into one or more
subsequences (or subranges) such that the numbers of each subsequence satisfy some arithmetic property. Each
subsequence is then given a certain score depending on the property it satisfies and on its length. The properties
and their scores are:

<P>
<DL>
<DT><STRONG><SPAN  CLASS="textbf">Sorted:</SPAN></STRONG></DT>
<DD>A subsequence of length <SPAN CLASS="MATH"><I>n</I></SPAN> in which all its numbers are sorted (all non-decreasing or all
non-increasing,) is given the score <SPAN CLASS="MATH">5*<I>n</I></SPAN>.

<P>
</DD>
<DT><STRONG><SPAN  CLASS="textbf">Odd/Even:</SPAN></STRONG></DT>
<DD>A subsequence of length <SPAN CLASS="MATH"><I>n</I></SPAN> in which its numbers are all even (or all odd,) is given the
score <SPAN CLASS="MATH">10*<I>n</I></SPAN>.

<P>
</DD>
<DT><STRONG><SPAN  CLASS="textbf">Alternating:</SPAN></STRONG></DT>
<DD>A subsequence of length <SPAN CLASS="MATH"><I>n</I></SPAN> in which its numbers alternate between even and odd, is
given the score <SPAN CLASS="MATH">15*<I>n</I></SPAN>.

<P>
</DD>
<DT><STRONG><SPAN  CLASS="textbf">Quads:</SPAN></STRONG></DT>
<DD>A subsequence of length <SPAN CLASS="MATH"><I>n</I></SPAN> in which all its numbers are multiple of 4, is given the score <SPAN CLASS="MATH">20*<I>n</I></SPAN>.
</DD>
</DL>

<P>

<P>
<BR>

<B>Note the following:</B>

<P>

<OL>
<LI>A subsequence must be contiguous (similar to substrings of strings). For example, in the
sequence [1, 2, 3, 4], [1, 2, 3] is a subsequence whereas [1, 2, 4] isn't.
</LI>
<LI>The minimum length of a subsequence is 3.
</LI>
<LI>Any number in the original sequence can be a member of at most one subsequence.
</LI>
<LI>It is possible to have some numbers of the original sequence that are not members of any
subsequence. In this case, these numbers don't add anything to the score.
</LI>
</OL>

<P>
The objective of the game is to break the sequence into subsequences with the maximum total score.
For example, the sequence [12, 14, 21, 26, 13, 11, 8] can be broken into the two subsequences [12, 14, 21, 26]
(sorted) and [13, 11, 8] (sorted) with a total score of <!-- MATH
 $5 * 4 + 5 * 3 = 35$
 -->
<SPAN CLASS="MATH">5*4 + 5*3 = 35</SPAN>. However, it is better to
choose the subsequence [14, 21, 26, 13] (alternating) as its score is <!-- MATH
 $15 * 4=60.$
 -->
<SPAN CLASS="MATH">15*4 = 60.</SPAN>

<P>
Write a program that determines the maximum total score a sequence can have.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program will be tested on a number of test cases. The first line of the input file contains an
integer <SPAN CLASS="MATH"><I>T</I></SPAN> representing the number of test cases in the input file.

<P>
Each test case is described on a single line as a list of integers. The first integer <SPAN CLASS="MATH"><I>n</I></SPAN>, is the length of
the sequence, and will be followed by <SPAN CLASS="MATH"><I>n</I></SPAN> integers, all separated by one or more spaces. A sequence may have
up to 1,000 numbers and each number <SPAN CLASS="MATH"><I>v</I></SPAN> is in the range <!-- MATH
 $-10,000 < v < +10,000$
 -->
<SPAN CLASS="MATH">-10, 000 &lt; <I>v</I> &lt; + 10, 000</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each sequence, write on a separate line, the maximum score you can get for that sequence.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
7 12 14 21 26 13 11 8
8 6 5 4 8 12 13 14 15
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
60
105
</PRE>

<P>

______________________________________________________
2983||||||false||||||
<P>XML, the Extensible Markup Language, can be used to represent tree-structured data as text documents. Each tree can be described using an XML <SPAN CLASS="textit">element</SPAN>. The element for a tree with root node <SPAN CLASS="MATH"><I>R</I></SPAN> and subtrees <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>, <I>S</I><SUB>2</SUB>,..., <I>S</I><SUB>n</SUB></SPAN> as its children, can be represented in XML using the string:<P><!-- MATH
 \begin{displaymath}
<\texttt{R}>E_{1} \ E_{2} \ \dots \ E_{n}<\texttt{/R}>
\end{displaymath}
 --><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">&lt; <texttt>R</texttt> &gt; <I>E</I><SUB>1</SUB>&nbsp;<I>E</I><SUB>2</SUB>&nbsp;...&nbsp;<I>E</I><SUB>n</SUB> &lt; /<texttt>R</texttt> &gt;</DIV><P></P><P>where <SPAN CLASS="MATH"><I>E</I><SUB>i</SUB></SPAN> is the XML element for subtree <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN>. Notice that each terminal node (leaf node) has a data item and property describing the data. For example, the tree below has a terminal node indicating that the <TT>NAME</TT> of the <TT>PERSON</TT> is `<TT>linus</TT>'.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="\epsfbox{p2983a.eps}"></DIV><P>In general, trees can be described using the following grammar: (remember that <SPAN CLASS="MATH"><I>tree</I> +</SPAN> means a sequence of one or more <SPAN CLASS="MATH"><I>tree</I></SPAN>'s.)<P><P><BR><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><!-- MATH
 \begin{eqnarray*}
tree & \rightarrow & {\tt <}TAG{\tt >} data {\tt </}TAG{\tt >} \\
tree & \rightarrow &  {\tt <}TAG{\tt >} tree+ {\tt </}TAG{\tt >}
\end{eqnarray*}
 --><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>tree</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\displaystyle \rightarrow$"></TD><TD ALIGN="LEFT" NOWRAP><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\displaystyle \tt &lt;$"><I>TAG</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\displaystyle \tt &gt;$"><I>data</I><IMG WIDTH="32" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\displaystyle \tt &lt;/$"><I>TAG</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\displaystyle \tt &gt;$"></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT"><I>tree</I></TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\displaystyle \rightarrow$"></TD><TD ALIGN="LEFT" NOWRAP><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\displaystyle \tt &lt;$"><I>TAG</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\displaystyle \tt &gt;$"><I>tree</I> + <IMG WIDTH="32" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\displaystyle \tt &lt;/$"><I>TAG</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\displaystyle \tt &gt;$"></TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P>where <SPAN CLASS="MATH"><I>data</I></SPAN> is a single word, <SPAN CLASS="MATH"><I>TAG</I></SPAN> is a single word, and the same word used for the opening tag <TT>&lt;</TT><SPAN CLASS="MATH"><I>TAG</I></SPAN><TT>&gt;</TT> is used for the closing tag <TT>&lt;/</TT><SPAN CLASS="MATH"><I>TAG</I></SPAN><TT>&gt;</TT><P><P><BR>An XML document can be viewed as a <SPAN CLASS="textit">forest</SPAN> with zero or more <SPAN CLASS="textit">trees</SPAN>. XPATH is a language used to navigate in the trees of an XML document. An <B>xpath</B> is made of one or more <B>locators</B> separated by slashes. A <B>locator</B> can be tag name, a positive integer, or the `<TT>*</TT>' character. For example, `<TT>/PERSON/*/1</TT>' is an <B>xpath</B> made of three locators.<P>A tag-name locator selects subtrees having the specified tag. A positive integer <SPAN CLASS="MATH"><I>k</I></SPAN> selects the <SPAN CLASS="MATH"><I>k</I></SPAN>-th subtree, while a `<TT>*</TT>' selects all subtrees.<P>The first <B>locator</B> of an <B>xpath</B> is used to select a set of trees from the forest (possibly empty). Each additional locator is used to select subtrees from the (sub)trees already selected by the previous locator(s). For example, `<TT>/PERSON</TT>' selects all trees with root node `<TT>PERSON</TT>', while `<TT>/PERSON/NAME</TT>' selects the all the `<TT>NAME</TT>' subtrees of all `<TT>PERSON</TT>' trees, and so on.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="\epsfbox{p2983b.eps}"></DIV><P>Once the set of subtrees identified by an <B>xpath</B> is identified, your program should print the data associated with <SPAN CLASS="textit">all terminal nodes</SPAN> in that set. Non-terminal nodes are not printed. For example, the <B>xpath</B> `<TT>/PERSON/1</TT>' prints `<TT>linus</TT>' and `<TT>lucy</TT>' whereas `<TT>/PERSON/*/2</TT>' prints only `<TT>musician</TT>'.<P>Study the sample input/output for more examples.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is made of two sections:<P>The XML document and the list of <B>xpath</B>'s to run on that document. The beginning of a document is indicated with the string `<TT>*DOCUMENT</TT>' appearing at the beginning of a line by itself. Similarly, the beginning of the <B>xpath</B>'s section is identified by `<TT>*XPATH</TT>'. The end of a test case is identified by the appearance of a `<TT>*DOCUMENT</TT>' keyword (signaling the beginning of the next test case). Or, the appearance of the string `<TT>*QUIT</TT>' (signaling the end of all test cases).<P>The `<TT>*DOCUMENT</TT>' section is made of zero or more trees. The document section is a free form of which there can be extra spaces and lines (see the sample I/O). Tags are case insensitive, while data is case sensitive.<P>The `<TT>*XPATH</TT>' section is made of one or more <B>xpath</B>'s. Each <B>xpath</B> is specified completely on a single line. No spaces are allowed within an <B>xpath</B>. There might be empty lines within the XPATH section (which should be ignored).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each document, your program should print the following line:<P><P><BR><SPAN CLASS="MATH"><texttt>PROCESSING</texttt><SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\scriptstyle \sqcup$"></SUB><texttt>DOCUMENT</texttt><SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\scriptstyle \sqcup$"></SUB>#<SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>k</I></SPAN><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> is the document number (starting at 1).<P>Following that, for each <B>xpath</B>, your program should print the following fragment:<P><P><BR><SPAN CLASS="MATH"><I>xpath</I></SPAN><P>== <SPAN CLASS="MATH">&gt; <SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>data</I>1</SPAN><P>== <SPAN CLASS="MATH">&gt; <SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>data</I>2</SPAN><P><SPAN CLASS="MATH">...</SPAN><P>== <SPAN CLASS="MATH">&gt; <SUB><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2983a.jpg ALT="$\scriptstyle \sqcup$"></SUB><I>dataN</I></SPAN><P><P><BR>Where <SPAN CLASS="MATH"><I>xpath</I></SPAN> is the <B>xpath</B> being processed (using all uppercase letters). <SPAN CLASS="MATH"><I>data</I>1...<I>dataN</I></SPAN> is the set of data within the current document matching the <B>xpath</B> being processed. Notice the empty line <SPAN CLASS="textit">after</SPAN> the end of output lines generated by <SPAN CLASS="MATH"><I>xpath</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
*DOCUMENT
&lt;person&gt;
&lt;NAME&gt;Linus&lt;/NAME&gt;
&lt;JOBS&gt;&lt;JOB&gt;teaCHer&lt;/JOB&gt;&lt;JOB&gt;MUSICian&lt;/JOB&gt;&lt;/JOBS&gt;
&lt;/PErsON&gt;

&lt;PERSON&gt;
 &lt;name&gt;lucy&lt;/NAME&gt;&lt;JOBS&gt;&lt;JOB&gt;typist&lt;/job&gt;&lt;/JOBS&gt;
 &lt;OVERTIME&gt;&lt;JOB&gt;WAITer&lt;/JOB&gt;&lt;/OVERTIME&gt;
&lt;/PERSON&gt;
*XPATH

/person/1
/PERson/*/2

*DOCUMENT
&lt;A&gt;&lt;B&gt;&lt;C&gt;Apple&lt;/C&gt;&lt;D&gt;Orange&lt;/D&gt;&lt;/B&gt;&lt;B&gt;Grape&lt;/B&gt;&lt;C&gt;&lt;D&gt;Banana&lt;/D&gt;&lt;/C&gt;&lt;/A&gt;
&lt;C&gt;&lt;B&gt;Melon&lt;/B&gt;&lt;A&gt;Kiwi&lt;/A&gt;&lt;/C&gt;
*XPATH
/A/B
/*/B
/A/*/D
/1/1/2
/1/2/3/4
*QUIT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
PROCESSING DOCUMENT # 1
/PERSON/1
==&gt; Linus
==&gt; lucy

/PERSON/*/2
==&gt; MUSICian

PROCESSING DOCUMENT # 2
/A/B
==&gt; Grape

/*/B
==&gt; Grape
==&gt; Melon

/A/*/D
==&gt; Orange
==&gt; Banana

/1/1/2
==&gt; Orange

/1/2/3/4
</PRE><P>
______________________________________________________
2984||||||false||||||
<P>A substitution cipher is a method used for encoding a plain text message. For every character <SPAN CLASS="MATH"><I>c</I></SPAN> in the alphabet, a string <SPAN CLASS="MATH"><I>f</I> (<I>c</I>)</SPAN> is defined. A plain text message <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB><I>c</I><SUB>2</SUB><I>c</I><SUB>3</SUB>...<I>c</I><SUB>n</SUB></SPAN> is encoded by concatenating the strings <SPAN CLASS="MATH"><I>f</I> (<I>c</I><SUB>1</SUB>)<I>f</I> (<I>c</I><SUB>2</SUB>)<I>f</I> (<I>c</I><SUB>3</SUB>)...<I>f</I> (<I>c</I><SUB>n</SUB>)</SPAN> in the same order. You have to write a program, which given the substitution rules and a string, determines whether the string can be obtained by encoding some plain text message using the substitution rules.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of several test cases. The first line of each test case will specify <SPAN CLASS="MATH"><I>n</I></SPAN>, the size of the alphabet for text messages. If <SPAN CLASS="MATH"><I>n</I></SPAN> is 0, it indicates end of input. Assume that <SPAN CLASS="MATH"><I>n</I></SPAN> is at most 10. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines will specify the values of <SPAN CLASS="MATH"><I>f</I> (<I>c</I>)</SPAN>, one per line, for the <SPAN CLASS="MATH"><I>n</I></SPAN> characters in the text alphabet. Assume that <SPAN CLASS="MATH"><I>f</I> (<I>c</I>)</SPAN> may contain at most 10 characters, each of which is from `<TT>a</TT>' to `<TT>z</TT>'. The next line will contain a single integer <SPAN CLASS="MATH"><I>m</I></SPAN>, which is the number of strings to be tested with the given substitution rule. The next <SPAN CLASS="MATH"><I>m</I></SPAN> lines will contain one string each with at most 10000 characters, each of which is from `<TT>a</TT>' to `<TT>z</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each string tested is `<TT>1</TT>' if the string is an encoding of some string and `<TT>0</TT>' otherwise. The output should be written one per line, in the same order as the strings tested.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE> 
2
aba
ab
2
ababa
abaab
3
xyz
z
yyx
2
zyzy
yyxxyzz
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
1
1
0
1
</PRE><P>
______________________________________________________
2985||||||false||||||
<P>Trisanku wanted to ascend to Swarga (Heaven) by building a ladder all the way from earth to heaven. He undertook rigorous penance seeking boons from the trinity Brahma, Vishnu and Siva. Pleased by his austerities, the three Gods appeared before him first and gave him the following boon. They asked him to choose three prime numbers (<SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>v</I></SPAN>, <SPAN CLASS="MATH"><I>s</I></SPAN>) one for each of them and then guaranteed that they would magically ensure that if there was any rung on the ladder at any height <SPAN CLASS="MATH"><I>h</I></SPAN> above the ground, they would ensure there were rungs also at heights <SPAN CLASS="MATH"><I>b</I> + <I>h</I></SPAN>, <SPAN CLASS="MATH"><I>v</I> + <I>h</I></SPAN> and <SPAN CLASS="MATH"><I>s</I> + <I>h</I></SPAN>. Trishanku built only the first rung at a height of 1 feet from the earth and then invoked the boon. Magically many more rungs appeared as promised. Trishanku began the assiduous climb to heaven going up one rung of the ladder at a time. He kept track of various statistics along the way, such as what height he was at and how many rungs he had climbed so far and the sequence of gaps between any two consecutive rungs he had climbed. He maintained all this data in a bulky journal which slowed his progress.<P>Your job is to help Trisanku by writing a program that will eliminate the need to keep such bulky journals of data. Your program should read as input the three prime numbers and then answer the following three types of queries.<P><OL><LI>Given any height <SPAN CLASS="MATH"><I>n</I></SPAN> ft above the earth, how many rungs are there in the ladder at or below height <SPAN CLASS="MATH"><I>n</I></SPAN> from the earth. </LI><LI>Given the number <SPAN CLASS="MATH"><I>n</I></SPAN> of rungs that Trisanku has climbed, what is biggest gap between any two consecutive rungs he has encountered so far. </LI><LI>Given a gap value <SPAN CLASS="MATH"><I>n</I></SPAN>, after how many rungs from the bottom does this gap appear (if it appears at all) for the first time between two rungs on the ladder.<P>If gap does not appear, print a `<TT>0</TT>'. </LI></OL><P>You can assume that all values given/calculated for these queries will fit in a 32 bit integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>First input line is the number of test cases for the program. The next line is the <SPAN CLASS="MATH"><I>b</I>&nbsp;<I>v</I>&nbsp;<I>s</I></SPAN> values (three primes separated by a single space) for this test case. Queries for this test case follow, one query per line. Each query will have 2 numbers separated by a single space. The first number is the query type (1, 2 or 3) and the second number is the value of <SPAN CLASS="MATH"><I>n</I></SPAN> for this query.<P>A line with `<TT>0</TT>' terminates the queries for this test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output will be one number per line - the answer for each query in the same order as the queries.<P>Ouptut lines should be consecutive with no blank lines between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE> 
2
11 13 17
1 20
3 5
0
11 23 37
2  4
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
4
4
11
</PRE><P>
______________________________________________________
2986||||||false||||||
<P>Suppose you have a calculator which has a precision of <SPAN CLASS="MATH"><I>n</I></SPAN> decimal digits. The calculator can perform arithmetic on integers containing at most <SPAN CLASS="MATH"><I>n</I></SPAN> decimal digits but if some result overflows then it displays only the least significant <SPAN CLASS="MATH"><I>n</I></SPAN> digits and ignores the remaining digits. In other words, it computes modulo <SPAN CLASS="MATH">10<SUP>n</SUP></SPAN>. You enter a positive integer <SPAN CLASS="MATH">&gt; 1</SPAN> with at most <SPAN CLASS="MATH"><I>n</I></SPAN> decimal digits with no leading zeroes and press the <SPAN CLASS="MATH"><I>x</I><SUP>2</SUP></SPAN> key which computes the square of the number displayed. Magically, the number displayed remains the same. You have to write a program to find the number that was originally entered. If there is more than one such number possible, your program should find them all. Note that the calculator does not display leading zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input for this problem will be a sequence of positive integers specifying different values of <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2986img1.gif ALT="$ \ge$">1</SPAN>. The sequence will be terminated by a `<TT>0</TT>'. Assume that the maximum value of <SPAN CLASS="MATH"><I>n</I></SPAN> is at most 1000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should consist of all the possible answers (one per line, in increasing order) for each value of n. Each answer should be written on a separate line as a character string, starting with the most significant non-zero digit without any (leading or trailing) spaces. The answers for different values of input n should be written in the same order as specified in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE> 
1
2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
5
6
25
76
</PRE><P>
______________________________________________________
2987||||||false||||||
<P>To encourage healthy student teacher interaction, Mumbai School Board requires each school in Mumbai to make every student in the school play 20 decisive games of chess (draws are not counted) with each teacher in the school each year. Thus every teacher (numbered sequentially from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>) at the end of the year has an integer score which is an even number between -20 (if he lost all 20 decisive games) to +20 (if he won all decisive games) against each student (numbered sequentially from 1 to <SPAN CLASS="MATH"><I>m</I></SPAN>). The school submits a 2 dimensional (<SPAN CLASS="MATH"><I>n</I></SPAN> rows, <SPAN CLASS="MATH"><I>m</I></SPAN> columns, <SPAN CLASS="MATH"><I>n</I></SPAN>,<SPAN CLASS="MATH"><I>m</I></SPAN> less than 100000) matrix of such teacher scores to the Board every year.<P><P><BR>The Board then computes an overall evaluation for each school in the following way. It picks some <SPAN CLASS="MATH"><I>k</I></SPAN> (less or equal to <SPAN CLASS="MATH"><I>n</I></SPAN>) adjacent rows (i.e <SPAN CLASS="MATH"><I>k</I></SPAN> teachers numbered consecutively). For each teacher <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN> who is picked a weight <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN> is generated by picking any <SPAN CLASS="MATH"><I>j</I><SUB>i</SUB></SPAN> (less or equal to <SPAN CLASS="MATH"><I>m</I></SPAN>) consecutive students from his row of scores and summing his scores against them. Note that this is done <B>independently</B> for each teacher - that is the number of consecutive students picked may be different for different teachers. The School's overall evaluation is the sum of the weights of these <SPAN CLASS="MATH"><I>k</I></SPAN> teachers.<P>You have to write a program for the Board which will take the data for many schools one by one and compute the <B>lowest possible evaluation</B> for each school.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line gives the number of schools. Then for each school, the first line gives the number of teachers (<SPAN CLASS="MATH"><I>n</I></SPAN>) and students (<SPAN CLASS="MATH"><I>m</I></SPAN>) in this school (2 numbers separated by space).<P>This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines (one per teacher) of scores. Each line has <SPAN CLASS="MATH"><I>m</I></SPAN> numbers (separated by one space) which is the scores of that teacher against each of the m students. The data for School 1 is followed (immediately without any blank lines) by data for School 2 and so on.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output is one line per school (without any blank lines inbetween) containing one number which is the minimum possible score for that school.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE> 
2
2 4
10 -4 -4 10
-4  2 -8 4
2 6
0 -6 4 -6 -4 4
2  2 2  2  2 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
-18
-12
</PRE><P>
______________________________________________________
2988||||||false||||||
<P>A small district in a rural area contains a few villages (maximum 15), which are well-separated from each other. There are no roads in the district but the villagers have created mud tracks between some pairs of villages. There are at most 25 such tracks and between a given pair of villages there is at most one track. Unfortunately, during the rainy season, some tracks may get flooded and become unusable. Each track may or may not get flooded independent of any other track. For every track, the probability that it is usable (not flooded) is given. The district is connected if there is a way to reach any village from any other village using tracks which are not flooded. You have to write a program that is given as input the probability for each track to be flooded. Your program must determine the probability that the district is connected.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of several test cases. For every case, the first line will contain a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of villages. If <SPAN CLASS="MATH"><I>n</I></SPAN> is 0, it indicates end of input. The villages are assumed to be numbered from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>. The next line will contain <SPAN CLASS="MATH"><I>m</I></SPAN>, the number of tracks. The next <SPAN CLASS="MATH"><I>m</I></SPAN> lines will each contain 3 numbers, two integers and a fraction, separated by a space. The first two integers specify the villages that are connected by the track and the third number is the probability that the track is usable. This will be a decimal fraction between 0.0 and 1.0, with only one digit after the decimal point. There will be no lines separating consecutive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each test case must a single number, written on a separate line for each case. This number must be accurate to 3 decimal places and at most 3 digits after the decimal point should be printed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE> 
2
1
0 1 0.3
3
3
0 1 0.5
0 2 0.5
1 2 0.5
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE> 
0.3
0.5
</PRE><P>
______________________________________________________
2989||||||false||||||
<P>CHIP company manufactures combinational circuits built using only 2-input AND, 2-input OR and 1-input NOT gates. Circuits can have <SPAN CLASS="MATH"><I>n</I></SPAN> (at most 30) primary input wires (labelled from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>) and <SPAN CLASS="MATH"><I>m</I></SPAN> (at most 10) output wires (labelled from 1 to <SPAN CLASS="MATH"><I>m</I></SPAN>). You are hired to write a program to help automate testing of their hardware circuits. Your program should read, for each circuit to be tested, a description of the circuit and desired values (bit vector) at the m output lines. It should then print how many possible input vectors can produce that particular output. If the desired output cannot be produced by any input combination, print `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line will be number of circuits to be tested. It will be followed by data for each circuit ending with a line containing `<TT>-1</TT>'. That is data for first circuit, then a line containing `<TT>-1</TT>', then data for second circuit and so on. For each circuit, the data contains its description followed by test cases. The first line of the description will contain the number of primary inputs (<SPAN CLASS="MATH"><I>n</I></SPAN>) and number of primary outputs (<SPAN CLASS="MATH"><I>m</I></SPAN>) for this circuit (2 numbers separated by a space). The next line contains the number of gates (<SPAN CLASS="MATH"><I>k</I></SPAN>) used in this circuit. This is followed by <SPAN CLASS="MATH"><I>k</I></SPAN> lines (one per gate) describing each gate in the following format. First number is the Gate Number, the second number is the Gate-Type (`<TT>1</TT>'=And, `<TT>2</TT>'=Or, `<TT>3</TT>'=Not), followed by one number for each input wire of this gate showing where that input wire is connected. A negative number (`<TT>-4</TT>' say) means this input comes from the output of gate 4. A positive number (`<TT>3</TT>' say) means this input comes from primary input wire 3. After these numbers for input wires, there is one last number indicating whether the output of this gate is connected to some other gate's input (denoted by `<TT>0</TT>'). or it is a primary output (denoted by <SPAN CLASS="MATH"><I>n</I> &gt; 0</SPAN> the number of the output wire). The circuit description is followed by test cases (one per line) for desired values on the output wires. If a circuit has m output wires, a test case will be <SPAN CLASS="MATH"><I>m</I></SPAN> numbers (`<TT>0</TT>' or `<TT>1</TT>') separated by a single space representing the values at wires 1 to <SPAN CLASS="MATH"><I>m</I></SPAN>.<P>The first circuit in the sample input given below implements XOR function on 2 inputs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in each circuit, print one number (on a separate line, no blank lines) which indicates how many possible input combinations can produce that output. Print `<TT>0</TT>' if the test case output is not achievable with the circuit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE> 
2
2 1
5
1 3 1 0
2 1 -1 2 0
3 1 1 -4  0
4 3 2 0
5 2 -2 -3 1
1
0
-1
2 2
2
1 1 1 2 1
2 2 1 2 2
1 1
0 0
0 1
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
2
2
1
1
2
</PRE><P>
______________________________________________________
2990||||||false||||||
<P>A necklace contains <SPAN CLASS="MATH"><I>n</I></SPAN> beads, each of which may be of any one of seven different colors. The beads are arranged arbitrarily in circular order with a thread passing through the center of each bead. The thread is tied up at its ends and the necklace is closed. Unfortunately, the colors of the beads are all mixed-up and may appear in any order. It is your task to rearrange the beads so that all beads of the same color occur together. To do this, you are allowed to cut the thread at any point, remove some beads from either end, put them back in a different order, and tie up the ends again. The cost of this operation is the number of beads that were removed. You may perform any number of such cut operations. The total cost is the sum of the costs of the individual operations. You have to write a program to find the minimum total cost required for rearranging a given initial necklace so that all beads of the same color occur together.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of several test cases. The first line of each test case will specify <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of beads in the necklace. If <SPAN CLASS="MATH"><I>n</I></SPAN> is zero, it indicates end of input. Assume that <SPAN CLASS="MATH"><I>n</I></SPAN> is at most 100. The next line will contain a character string with <SPAN CLASS="MATH"><I>n</I></SPAN> characters, specifying the colors of the beads in circular order. The color may be any one of the characters in the string `<TT>vibgyor</TT>'. There will no line separating individual test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be a sequence of integers, one per line, giving the answer for each test case in the same order as the input. There should be no lines separating answers for successive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE> 
5
vbyrv
8
vbvvvbbv 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
0
3
</PRE><P>
______________________________________________________
2991||||||false||||||
<P>It is rumored that many centuries ago, pirates had hidden priceless treasure on a remote island. You are in charge of an expedition to recover the treasure. You land on the island and find a big mountain, inside which a big network of caves has been built. There are narrow passages connecting some of the caves to each other. You find that in every cave either a big `X' or `+' sign is drawn. On searching further, you find an old manuscript giving a complete map of the caves and the passages connecting them. At the bottom is a note which says that the treasure is buried below the ground in some of the caves. The note also says that the marks `X' and `+' are clues to find the caves below which the treasure is hidden. It says that a cave <SPAN CLASS="MATH"><I>C</I></SPAN> is marked `X' if there are an odd number of neighboring caves containing the treasure else it is marked `+'. A neighboring cave of <SPAN CLASS="MATH"><I>C</I></SPAN> is one to which there is a direct passage from <SPAN CLASS="MATH"><I>C</I></SPAN> without going through any other cave. The note also says that the construction of the caves and passages is such that this information is sufficient to uniquely identify the caves below which the treasure is hidden. You have to write a program to find out these caves from the given information.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of several test cases. The first line of each test case will specify <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of caves, assumed to be numbered from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>. If <SPAN CLASS="MATH"><I>n</I></SPAN> is 0, it indicates end of input. The value of <SPAN CLASS="MATH"><I>n</I></SPAN> will be at most 100. The next line will give <SPAN CLASS="MATH"><I>m</I></SPAN>, the total number of passages. The next <SPAN CLASS="MATH"><I>m</I></SPAN> lines will contain two integers each, specifying the two caves connected by each passage. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines will give the marking on each cave, one per line, from cave number 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>. The mark is given as a single character either `<TT>X</TT>' or `<TT>+</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For every test case, the output should be the numbers (one per line, in increasing order) of the caves below which the treasure is hidden. Output lines for each case should be followed (immediately, without any blank lines) by the output lines for the next test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE> 
2
1
0 1
X
+
4
4
0 1
1 2
1 3
2 3
+
+
+
X
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE> 
1
0
2
</PRE><P>
______________________________________________________
2992||||||false||||||
<P>A factory produces rectangular sheets of metal of varying dimensions. In order to meet demand quickly, the factory has a very large collection of pre-fabricated sheets of different dimensions which are stored in a storeroom. You are the storekeeper and your task is to arrange the given sheets in the storeroom. The sheets must be placed horizontally along the floor but to save floor area, the sheets can be put on top of each other. However, to ensure stability, a sheet can be put on top of another only if it fits completely inside the sheet immediately below it. Moreover the centers of the two sheets must be vertically aligned and the sides must be parallel. A sheet may be rotated though about its center by 90 degrees to fit inside the lower sheet.<P><P><BR>You have to write a program which will take the dimensions of the sheets as input and compute the minimum floor area required for storing the sheets, assuming that sheets can be stacked on top of each other as described above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line contains a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> which is the number of sheets for this problem. If this is 0, it indicates end of input. Assume that <SPAN CLASS="MATH"><I>n</I></SPAN> is at most 200. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain two integers each, which are the dimensions of the <SPAN CLASS="MATH"><I>n</I></SPAN> sheets. There are no lines separating consecutive test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of the minimum floor space required for each test case, in the order in which they are given. There should be no leading spaces or lines separating different cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE> 
2
3 5
4 4
3
5 4
2 5
4 4
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE> 
31
30
</PRE><P>
______________________________________________________
2993||||||false||||||
<P>
Ants leave small chemical trails on the ground in order to mark paths for other ants to follow. Ordinarily these
trails follow rather straight lines. But in one ant colony there is an ant named Carl, and Carl is not an ordinary
ant. Carl will often zigzag for no apparent reason, sometimes crossing his own path numerous times in the
process. When other ants come to an intersection, they always follow the path with the strongest scent, which is
the most recent path that leads away from the intersection point.

<P>
Ants are 1 centimeter long, move and burrow at 1 centimeter per second, and follow their paths exactly (bending
at right angles when moving around corners). Ants cannot cross or overlap each other. If two ants meet at the
exact same instant at an intersection point, the one that has been on Carl's path the longest has the right of way;
if they don't arrive at the same time at the intersection point, the ant that has been waiting the longest at the intersection will move first.

<P>
Carl burrows up from the ground to start at the origin at time 0. He then walks his path and burrows back down
into the ground at the endpoint. The rest of the ants follow at regular intervals. Given the description of Carl's
path and when the other ants start the path, you are to determine how long it takes the entire set of ants to finish
burrowing back into the ground. All the ants are guaranteed to finish.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input consists of several test cases. The first line of the input file contains a single integer indicating the number
of test cases .

<P>
The input for each test case starts with a single line containing three positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 50$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2993img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2993img1.gif
 ALT="$ \le$">50</SPAN>),
<SPAN CLASS="MATH"><I>m</I></SPAN> (<!-- MATH
 $1 \le m \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2993img1.gif
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2993img1.gif
 ALT="$ \le$">100</SPAN>), and <SPAN CLASS="MATH"><I>d</I></SPAN> (<!-- MATH
 $1 \le d \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2993img1.gif
 ALT="$ \le$"><I>d</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2993img1.gif
 ALT="$ \le$">100</SPAN>). Here, <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of line segments in Carl's path, <SPAN CLASS="MATH"><I>m</I></SPAN> is
the number of ants traveling the path (including Carl), and <SPAN CLASS="MATH"><I>d</I></SPAN> is the time delay before each successive ant's emergence.
Carl (who is numbered 0) starts at time 0. The next ant (ant number 1) will emerge at time <SPAN CLASS="MATH"><I>d</I></SPAN>, the next at time 2<SPAN CLASS="MATH"><I>d</I></SPAN>, and
so on. If the burrow is blocked, the ants will emerge as soon as possible in the correct order.

<P>
Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines for the test case consists of a unique integer pair <SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I></SPAN> (<!-- MATH
 $-100 \le x, y \le 100$
 -->
<SPAN CLASS="MATH">-100<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2993img1.gif
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2993img1.gif
 ALT="$ \le$">100</SPAN>), which is
the endpoint of a line segment of Carl's path, in the order that Carl travels. The first line starts at the origin (0,0)
and the starting point of every subsequent line is the endpoint of the previous line.

<P>
For simplicity, Carl always travels on line segments parallel to the axes, and no endpoints lie on any segment
other than the ones which they serve as an endpoint. Input line segments will only intersect orthogonally.
Every pair of segments can have at most one common point. The common point will be strictly inside both segments.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each case is described as follows:

<P>

<P><P>
<BR>

<TT>Case <SPAN CLASS="MATH"><I>C</I></SPAN>:</TT>

<P>

<TT>Carl finished the path at time </TT><SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN>

<P>

<TT>The ants finished in the following order:</TT>

<P>

<!-- MATH
 $a_1 a_2 a_3 \dots a_m$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB><I>a</I><SUB>2</SUB><I>a</I><SUB>3</SUB>...<I>a</I><SUB>m</SUB></SPAN>

<P>

<TT>The last ant finished the path at time </TT><SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN>

<P>

<P><P>
<BR>
Here, <SPAN CLASS="MATH"><I>C</I></SPAN> is the case number (starting at 1), <!-- MATH
 $a_1, a_2, a_3 , \dots, a_m$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB>,..., <I>a</I><SUB>m</SUB></SPAN> are the ant numbers in the order that they go
back underground, and <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> are the times (in seconds) at which Carl and the last ant finish going
underground. You should separate consecutive cases with a single blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
4 7 4
0 4
2 4
2 2
-2 2
4 7 2
0 4
2 4
2 2
-2 2
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1:
Carl finished the path at time 13
The ants finished in the following order:
0 2 1 3 4 5 6
The last ant finished the path at time 29

Case 2:
Carl finished the path at time 13
The ants finished in the following order:
0 4 1 5 2 6 3
The last ant finished the path at time 19
</PRE>

<P>

______________________________________________________
2994||||||false||||||
<P>
In these fast-paced times, companies are investing in heliports to reduce travel time for their busy executives.
The heliports are typically circular landing pads, constructed on the roofs of the companies' headquarters.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2994.eps}$
 -->
<IMG
 WIDTH="390" HEIGHT="343" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2994.gif
 ALT="\epsfbox{p2994.eps}">
</DIV>

<P>
You must write a program that finds the largest radius for a circular
heliport that can be constructed on the flat roof of a building that is in the
form of a simple polygon. Since this is merely the design phase of the
construction effort, your program must find only the radius of the heliport.
The maximum radius for a heliport in the diagram shown is 10.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several test cases. Each test case consists of two lines. The first line consists of an even
integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $4 \le n \le 20$
 -->
<SPAN CLASS="MATH">4<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2994.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2994.gif
 ALT="$ \le$">20</SPAN>), which is the number of the sides of the building. The second line consists of <SPAN CLASS="MATH"><I>n</I></SPAN>
pairs of the form <SPAN CLASS="MATH">(<I>m</I>, <I>d</I> )</SPAN>, where <SPAN CLASS="MATH"><I>m</I></SPAN> is an integer (<!-- MATH
 $1 \le m \le 50$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2994.gif
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/p2994.gif
 ALT="$ \le$">50</SPAN>) and  <SPAN CLASS="MATH"><I>d</I></SPAN> is a letter
(<TT>U</TT>, <TT>R</TT>, <TT>D</TT>, <TT>L</TT>). Assuming the roof is
drawn on the Cartesian plane, <SPAN CLASS="MATH"><I>m</I></SPAN> is the length of a roof boundary segment and <SPAN CLASS="MATH"><I>d</I></SPAN> is the direction of that segment as
you travel counterclockwise around the roof. <TT>U</TT>, <TT>R</TT>, <TT>D</TT>, and <TT>L</TT> mean ``Up," ``Right," ``Down,"
and ``Left" respectively. The
boundary segments of the roof, which are parallel to the  <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> axes, are given in counterclockwise order. The
starting position is the origin (0, 0).

<P>
Input for the last test case is followed by a line consisting of the number 0.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, the output consists of a separate line containing the case number (starting with 1) and a real
number (rounded to two digits after the decimal point) representing the radius of the heliport. Print a blank line
between cases as shown in the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
2 R 2 U 2 L 2 D
10
10 R 10 U 10 L 10 U 10 R 5 U 30 L 20 D 20 R 5 D
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case Number 1 radius is: 1.00

Case Number 2 radius is: 10.00
</PRE>

<P>

______________________________________________________
2995||||||false||||||
<P>
Your new company is building a robot that can hold small lightweight objects. The robot will have the
intelligence to determine if an object is light enough to hold. It does this by taking pictures of the object from
the 6 cardinal directions, and then inferring an upper limit on the object's weight based on those images. You
must write a program to do that for the robot.

<P>
You can assume that each object is formed from an <!-- MATH
 $N \times N \times N$
 -->
<SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I>&#215;<I>N</I></SPAN> lattice of cubes, some of which may be missing.
Each <!-- MATH
 $1 \times 1 \times 1$
 -->
<SPAN CLASS="MATH">1&#215;1&#215;1</SPAN> cube weighs 1 gram, and each cube is painted a single solid color. The object is not necessarily
connected.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input for this problem consists of several test cases representing different objects. Every case begins with a
line containing <SPAN CLASS="MATH"><I>N</I></SPAN>, which is the size of the object (<!-- MATH
 $1 \le N \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2995img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2995img1.gif
 ALT="$ \le$">10</SPAN>). The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines are the different <!-- MATH
 $N \times N$
 -->
<SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN>
views of the object, in the order front, left, back, right, top, bottom. Each view will be separated by a single space from
the view that follows it. The bottom edge of the top view corresponds to the top edge of the front view.
Similarly, the top edge of the bottom view corresponds to the bottom edge of the front view. In each view,
colors are represented by single, unique capital letters, while a period (<TT>.</TT>) indicates that the object can be seen
through at that location.

<P>
Input for the last test case is followed by a line consisting of the number 0.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print a line containing the maximum possible weight of the object, using the format shown
below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
.R. YYR .Y. RYY .Y. .R.
GRB YGR BYG RBY GYB GRB
.R. YRR .Y. RRY .R. .Y.
2
ZZ ZZ ZZ ZZ ZZ ZZ
ZZ ZZ ZZ ZZ ZZ ZZ
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Maximum weight: 11 gram(s)
Maximum weight: 8 gram(s)
</PRE>

<P>

______________________________________________________
2996||||||false||||||
<P>
Prague is a dangerous city for developers of cryptographic schemes. In 2001, a pair of researchers in Prague
announced a security flaw in the famous PGP encryption protocol. In Prague in 2003 , a flaw was discovered in
the SSL/TLS (Secure Sockets Layer and Transport Layer Security) protocols. However, Prague's reputation for
being tough on cryptographic protocols hasn't stopped the part-time amateur cryptographer and full-time
nutcase, Immanuel Kant-DeWitt (known to his friends as "I. Kant-DeWitt"), from bringing his latest encryption
scheme to Prague. Here's how it works:

<P>
A plain text message <SPAN CLASS="MATH"><I>p</I></SPAN> of length <SPAN CLASS="MATH"><I>n</I></SPAN> is to be transmitted. The sender chooses an integer <SPAN CLASS="MATH"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2996img1.gif
 ALT="$ \ge$">2<I>n</I></SPAN>, and integers
<SPAN CLASS="MATH"><I>s</I></SPAN>, <SPAN CLASS="MATH"><I>t</I></SPAN>, <SPAN CLASS="MATH"><I>i</I></SPAN>,
and <SPAN CLASS="MATH"><I>j</I></SPAN>, where <!-- MATH
 $0 \le s, t, i, j < m$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2996img1.gif
 ALT="$ \le$"><I>s</I>, <I>t</I>, <I>i</I>, <I>j</I> &lt; <I>m</I></SPAN> and <SPAN CLASS="MATH"><I>i</I> &lt; <I>j</I></SPAN>. The scheme works as follows: <SPAN CLASS="MATH"><I>m</I></SPAN> is the length of the transmitted
ciphertext string, <SPAN CLASS="MATH"><I>c</I></SPAN>. Initially, <SPAN CLASS="MATH"><I>c</I></SPAN> contains <SPAN CLASS="MATH"><I>m</I></SPAN> empty slots. The first letter of <SPAN CLASS="MATH"><I>p</I></SPAN> is placed in position <SPAN CLASS="MATH"><I>s</I></SPAN>
of <SPAN CLASS="MATH"><I>c</I></SPAN>. The <SPAN CLASS="MATH"><I>k</I></SPAN>-th
letter, <SPAN CLASS="MATH"><I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2996img1.gif
 ALT="$ \ge$">2</SPAN>, is placed by skipping over <SPAN CLASS="MATH"><I>i</I></SPAN> empty slots in <SPAN CLASS="MATH"><I>c</I></SPAN> after the (<SPAN CLASS="MATH"><I>k</I> - 1</SPAN>)-st letter, wrapping around to the
beginning of <SPAN CLASS="MATH"><I>c</I></SPAN> if necessary. Slots already containing letters are not counted as empty. For instance, if the
message is PRAGUE, if <SPAN CLASS="MATH"><I>s</I> = 1</SPAN>, <SPAN CLASS="MATH"><I>i</I> = 6</SPAN>, and <SPAN CLASS="MATH"><I>m</I> = 15</SPAN>, then the letters are placed in <SPAN CLASS="MATH"><I>c</I></SPAN> as follows:

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=15>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> U </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
-- </TD></TR>
</TABLE>

</DIV>

<P>
Starting with the first empty slot in or after position <SPAN CLASS="MATH"><I>t</I></SPAN> in string <SPAN CLASS="MATH"><I>c</I></SPAN>, the plain text message is entered again, but this
time skipping <SPAN CLASS="MATH"><I>j</I></SPAN> empty slots between letters. For instance, if <SPAN CLASS="MATH"><I>t</I> = 0</SPAN> and  <SPAN CLASS="MATH"><I>j</I> = 8</SPAN>, the second copy of <SPAN CLASS="MATH"><I>p</I></SPAN> is entered as
follows (beginning in position 2, the first empty slot starting from <SPAN CLASS="MATH"><I>t</I> = 0</SPAN>):

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=15>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>P</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> U </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>R</B> </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>A</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>U</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>E</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>G</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
-- </TD></TR>
</TABLE>

</DIV>

<P>
Finally, any remaining unfilled slots in <SPAN CLASS="MATH"><I>c</I></SPAN> are filled in with randomly chosen letters:

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=15>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> U </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>A</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> U </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> G </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>W</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>E</B> 
-- </TD></TR>
</TABLE>

</DIV>

<P>
Kant-DeWitt believes that the duplication of the message, combined with the use of random letters, will confuse
decryption schemes based upon letter frequencies and that, without knowledge of <SPAN CLASS="MATH"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>i</I></SPAN>, no one can figure out
what the original message is. Your job is to try to prove him wrong. Given a number of ciphertext strings (and
no additional information), you will determine the longest possible message that could have been encoded using
the Kant-DeWitt method.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
A number of ciphertext strings, one per line. Each string will consist only of upper case alphabetic letters, with
no leading or trailing blanks; each will have length between 2 and 40.

<P>
Input for the last test case is followed by a line consisting of the letter <TT>X</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input ciphertext string, print the longest string that could be encrypted in the ciphertext. If more than
one string has the longest length, then print `<TT>Codeword not unique</TT>'. Follow the format of the sample
output given below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
APPURAAURGEGEWE
ABABABAB
THEACMPROGRAMMINGCONTEST
X
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Code 1: PRAGUE
Code 2: Codeword not unique
Code 3: Codeword not unique
</PRE>

<P>

<P>

______________________________________________________
2997||||||false||||||
<P>
A research group is developing a computer program that will fetch historical stock market quotes from a service
that charges a fixed fee for each day's quotes that it delivers. The group has examined the collection of
previously-requested quotes and discovered a lot of duplication, resulting in wasted money. So the new program
will maintain a list of all past quotes requested by members of the group. When additional quotes are required,
only quotes for those dates not previously obtained will be fetched from the service, thus minimizing the cost.

<P>
You are to write a program that d etermines when new quotes are required. Input for the program consists of the
date ranges for which quotes have been requested in the past and the date ranges for which quotes are required.
The program will then determine the date ranges for which quotes must be fetched from the service.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
There will be multiple input cases. The input for each case begins with two non-negative integers <SPAN CLASS="MATH"><I>NX</I></SPAN> and <SPAN CLASS="MATH"><I>NR</I></SPAN>,
(<!-- MATH
 $0 \le NX, NR \le 100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2997img1.gif
 ALT="$ \le$"><I>NX</I>, <I>NR</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/29/2997img1.gif
 ALT="$ \le$">100</SPAN>). <SPAN CLASS="MATH"><I>NX</I></SPAN> is the number of existing date ranges for quotes requested in the past. <SPAN CLASS="MATH"><I>NR</I></SPAN> is the number
of date ranges in the incoming requests for quotes. Following these are <SPAN CLASS="MATH"><I>NX</I> + <I>NR</I></SPAN> pairs of dates. The first date in
each pair will be less than or equal to the second date in the pair. The first <SPAN CLASS="MATH"><I>NX</I></SPAN> pairs specify the date ranges of
quotes which have been requested and obtained in the past, and the next <SPAN CLASS="MATH"><I>NR</I></SPAN> pairs specify the date ranges for
which quotes are required.

<P>
Two zeroes will follow the input data for the last case.

<P>
Each input date will be given in the form <SPAN CLASS="MATH"><I>YYYYMMDD</I></SPAN>. <SPAN CLASS="MATH"><I>YYYY</I></SPAN> is the year (1700 to 2100), <SPAN CLASS="MATH"><I>MM</I></SPAN> is the month (01
to 12), and <SPAN CLASS="MATH"><I>DD</I></SPAN> is the day (in the allowed range for the given month and year). Recall that months 04, 06, 09,
and 11 have 30 days, months 01, 03, 05, 07, 08, 10, and 12 have 31 days, and month 02 has 28 days except in
leap years, when it has 29 days. A year is a leap year if it is evenly divisible by 4 and is not a century year (a
multiple of 100), or if it is divisible by 400.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input case, display the case number (1, 2, ...) followed by a list of any date ranges for which quotes
must be fetched from the service, one date range per output line. Use the American date format shown in the
sample output below. Explicitly indicate (as shown) if no additional quotes must be fetched. If two date ranges
are contiguous or overlap, then merge them into a single date range. If a date range consists of a single date,
print it as a single date, not as a range consisting of two identical dates. Display the date ranges in chronological
order, starting with the earliest date range.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 1
19900101 19901231
19901201 20000131
0 3
19720101 19720131
19720201 19720228
19720301 19720301
1 1
20010101 20011231
20010515 20010901
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1:
    1/1/1991 to 1/31/2000

Case 2:
    1/1/1972 to 2/28/1972
    3/1/1972

Case 3:
    No additional quotes are required.
</PRE>

<P>

______________________________________________________
2998||||||false||||||
<P>Pictures taken from an airplane or satellite of an ar ea to be mapped are often of sufficiently high resolution to uniquely identify major features. Since a single picture can cover only a small portion of the earth, mapping larger areas requires taking pictures of smaller overlapping areas, and then merging these to produce a map of a larger area.<P>For this problem you are given several maps of rectangular areas, each represented as an array of single- character cells. A cell contains an uppercase alphabetic character (`<TT>A</TT>' to `<TT>Z</TT>') if its corresponding area contains an identifiable major feature. Different letters correspond to different features, but the same major feature (such as a road) may be identified in multiple cells. A cell contains a hyphen (`<TT>-</TT>') if no identifiable feature is located in the cell area. Merging two maps means overlaying them so that one or more common major features are aligned. A cell containing a major feature in one map can be overlaid with a cell not containing a major feature in the other. However, different major features (with diff erent letters) cannot be overlaid in the same cell.<P><PRE>
          --A-C     C----     C----     ----D     -D--C
          ----D     D---F     -----     -E--B     ----G
          ----B     B----     B-A-C     -----     ----B
    Map #   1         2         3         4         5
</PRE><P>Consider the five 3-row, 5-column maps shown above. The rightmost column of map 1 perfectly matches the leftmost column of map 2, so those maps could be overlaid to yield a 3-row, 9-column map. But map 1 could also overlay map 3 as well, since the <TT>C</TT> and <TT>B</TT> features in the rightmost column of map 1 match those in the leftmost column of map 3; the <TT>D</TT> does not perfectly match the `<TT>-</TT>' in the center of the column, but there is no conflict. In a similar manner, the top row of map 1 could also overlay the bottom row of map 3.<P>The ``score" of a pair of maps indicates the extent to which the two maps match. The score of an overlay of a pair of maps is the number of cells containing major features that coincide in the overlay that gives the best match. The score for the map pair is the maximum score for the possible overlays of the maps. Thus, the score for a pair of maps each having 3 rows and 5 columns must be in the range 0 to 15.<P>An ``offset" is a pair of integers <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>)</SPAN> that specifies how two maps, <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>, are overlaid. The value of <SPAN CLASS="MATH"><I>r</I></SPAN> gives the offset of rows in <SPAN CLASS="MATH"><I>b</I></SPAN> relative to rows in <SPAN CLASS="MATH"><I>a</I></SPAN>; similarly, <SPAN CLASS="MATH"><I>c</I></SPAN> gives the offset of columns in <SPAN CLASS="MATH"><I>b</I></SPAN> relative to columns in <SPAN CLASS="MATH"><I>a</I></SPAN>. For example, the overlay of map 1 and map 2 shown above has the offset (0,4) and a score of 3. The two overlays of map 1 and map 3 yielding scores of 2 have offsets of (0,4) and (-2,0).<P>The following steps describe how to merge a sequence of maps:<P><OL><LI>Merge the pair of maps in the sequence that yield the highest positive score (resolving ties by choos ing pair that has the map with the lowest sequence number). </LI><LI>Remove the maps that were merged from the sequence. </LI><LI>Add the resulting merged map to the sequence, giving it the next larger sequence number. </LI></OL><P>In the example above, maps 1 and 2 would be merged to produce map 6, and maps 1 and 2 would be removed from the sequence. Steps 1, 2 and 3 are repeated until only a single map remains in the sequence, or until none of the maps in the sequence can be merged (that is, until the overlay score for each possible map pair is zero).<P>If two maps can be merged in several ways to yield the same score, then merge them using the smallest row offset. If the result is still ambiguous, use the smallest row offset and the smallest column offset. <P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input will contain one or more sets of data, each containing between 2 and 10 maps. Each set of data begins with an integer specifying the number of maps in the sequence. The maps follow, each beginning with a line containing two integers <SPAN CLASS="MATH"><I>NR</I></SPAN> and <SPAN CLASS="MATH"><I>NC</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2998img1.gif ALT="$ \le$"><I>NR</I>, <I>NC</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/2998img1.gif ALT="$ \le$">10</SPAN>) that specify the number of rows and columns in the map that immediately follows on the next <SPAN CLASS="MATH"><I>NR</I></SPAN> lines. The first <SPAN CLASS="MATH"><I>NC</I></SPAN> characters on each of these <SPAN CLASS="MATH"><I>NR</I></SPAN> lines are the map data, and any trailing characters on such lines are to be ignored.<P>Input for the last test case is followed by a line consisting of the number <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each set of data, display the input case number (1, 2, ...) and the merged maps, each identified with its sequence number and enclosed by a border. The output should be formatted as shown in the samples below. No merged map will have more than 70 columns.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5
3 5
--A-C
----D
----B
3 5
C----
D---F
B----
3 5
C----
-----
B-A-C
3 5
----D
-E--B
-----
3 5
-D--C
----G
----B
2
3 5
----A
----B
----C
3 5
A----
B----
D----
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1
    MAP 9:
    +-------------+
    |-D--C--------|
    |----G--------|
    |----B-A-C----|
    |--------D---F|
    |-----E--B----|
    |-------------|
    +-------------+

Case 2
    MAP 1:
    +-----+
    |----A|
    |----B|
    |----C|
    +-----+

    MAP 2:
    +-----+
    |A----|
    |B----|
    |D----|
    +-----+
</PRE><P>
______________________________________________________
2999||||||false||||||
<P>Global Positioning System (GPS) is a navigation system based on a set of satellites orbiting approximately 20,000 kilometers above the earth. Each satellite follows a known orbit and transmits a radio signal that encodes the current time. If a GPS-equipped vehicle has a very accurate clock, it can compare its own local time with the time encoded in the signals received from the satellites. Since radio signals propagate at a known rate, the vehicle can compute the distance between its current location and the location of the satellite when the signal was broadcast. By measuring its distance from several satellites in known orbits, a vehicle can compute its position very accurately.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2999.gif ALT="\epsfbox{p2999.eps}"></DIV><P>You must write a simple ``autopilot" program based on GPS navigation. To make the problem easier, we state it as a two-dimen sional problem. In other words, you do not need to take into account the curvature of the earth or the altitude of the satellites. Furthermore, the problem uses speeds that are more appropriate for airplanes and sound waves than for satellites and radio waves.<P>Given a set of signals from moving sources, your program must compute the receiving position on the Cartesian plane. Then, given a destination point on the plane, your program must compute the compass heading required to go from the receiving position to the destination. All compass headings are stated in degrees. Compass heading 0 (North) corresponds to the positive y direction, and compass heading 90 (East) corresponds to the positive x direction, as shown in Figure 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of multiple data sets.<P>The first line of input in each data set contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2999.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2999.gif ALT="$ \le$">10</SPAN>), which is the number of signal sources in the set. This is followed by three floating point numbers: <SPAN CLASS="MATH"><I>t</I></SPAN>, <SPAN CLASS="MATH"><I>x</I></SPAN>, and <SPAN CLASS="MATH"><I>y</I></SPAN>. Here, <SPAN CLASS="MATH"><I>t</I></SPAN> denotes the exact local time when all the signals are received, represented in seconds after the reference time (time 0), and <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> represent the coordinates of the destination point on the Cartesian plane. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains four floating-point numbers that carry information about one signal source. The first two numbers represent the known position of the signal source on the Cartesian plane at the reference time. The third number represents the direction of travel of the signal source in the form of a compass heading <SPAN CLASS="MATH"><I>D</I></SPAN> (<!-- MATH
 $0 \le D < 360$
 --> <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/29/p2999.gif ALT="$ \le$"><I>D</I> &lt; 360</SPAN>). The fourth number is the time that is encoded in the signal-that is, the time when the signal was transmitted, represented in seconds after the reference time. The magnitudes of all numbers in the input file are less than 10000 and no floating-point number has more than 5 digits after the decimal point.<P>The last data set is followed by a line containing four zeros.<P>The unit distance in the coordinate space is one meter. Assume that each signal source is moving over the Cartesian plane at a speed of 100 meters per second and that the broadcast signal propagates at a speed of 350 meters per second. Due to inaccuracies in synchronizing clocks, assume that your distance calculations are accurate only to 0.1 meter. That is, if two points are computed to be within 0.1 meter of each other, you should treat them as the same point. There is also the possibility that a signal may have been corrupted in transmission, so the data received from multiple signals may be inconsistent.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each trial, print the trial number followed by the compass heading from the receiving location to the destination, in degrees rounded to the nearest integer. Use the labeling as shown in the example output. If the signals do not contain enough information to compute the receiving location (that is, more than one position is consistent with the signals), print `<TT>Inconclusive</TT>'. If the signals are inconsistent (that is, no position is consistent with the signals), print `<TT>Inconsistent</TT>'. If the receiving location is within 0.1 meter of the destination, print `<TT>Arrived</TT>'. If the situation is Inconclusive or Inconsistent, then you do not need to consider the case Arrived.<P>Figure 2 above corresponds to the first sample input. The locations of the three satellites at time <SPAN CLASS="MATH"><I>t</I> = 0</SPAN> are A (-100,350), B (350,-100) and C (350,800). The signals received by the GPS unit were transmitted at time <SPAN CLASS="MATH"><I>t</I> = 1.75</SPAN>, when the satellites were at locations A', B', and C' (however, in general the signals received by the GPS unit might have been transmitted at different times). The signals from the three satellites converge at D at time <SPAN CLASS="MATH"><I>t</I> = 2.53571</SPAN>, which means D is the location of the receiving GPS unit. From point D, a compass course of 45 degrees leads toward the destination point of (1050, 1050).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3  2.53571  1050.0  1050.0
-100.0   350.0   90.0  1.75
 350.0  -100.0    0.0  1.75
 350.0   800.0  180.0  1.75
2  2.0  1050.0  1050.0
-100.0   350.0   90.0  1.0
 350.0  -100.0    0.0  1.0
0  0  0  0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Trial 1: 45 degrees
Trial 2: Inconclusive
</PRE><P>
______________________________________________________
3000||||||false||||||
<P>The city council of Greenville recently voted to improve the appearance of inner city streets. To provide more greenery in the scenery, the city council has decided to plant trees along all major streets and avenues. To get an idea of how expensive this urban improvement project will be, the city council wants to determine how many trees will be planted. The planting of trees is limited in two ways:<P><UL><LI>Along a street, trees have to be planted at least 50 meters apart. This is to provide adequate grow ing space, and to keep the cost of the project within reasonable limits. </LI><LI>Due to safety concerns, no tree should be planted closer than 25 meters along a street to the nearest int ersection. This is to ensure that traffic participants can easily see each other approaching an intersection. Traffic safety should not be compromised by reducing visibility. </LI></UL><P>All streets considered in this project are straight . They have no turns or bends.<P>The city council needs to know the maximum number of trees that can be planted under these two restrictions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of descriptions of several street maps. The first line of each description contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3000img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3000img1.gif ALT="$ \le$">100</SPAN>), which is the number of streets in the map. Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines describes a street as a line segment in the Cartesian plane. An input line describing a street contains four integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, and <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>. This means that this street goes from point <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> to point <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>. The coordinates <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, and <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> are given in meters, ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3000img1.gif ALT="$ \le$"><I>x</I>1, <I>y</I>1, <I>x</I>2, <I>y</I>2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3000img1.gif ALT="$ \le$">100000</SPAN>). Every street has a positive length. Each end point lies on exactly one street.<P>For each street, the distances between neighboring intersections and/or the end points of the street are not exact multiples of 25 meters. More precisely, the difference of such a distance to the nearest multiple of 25 meters will be at least 0.001 meters. At each intersection, exactly two streets meet.<P>Input for the last street map description is followed by a line consisting of the number <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each street map described in the input, first print its number in the sequence. Then print the maximum number of trees that can be planted under the restrictions specified above. Follow the format in the sample output given below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
0 40 200 40
40 0 40 200
0 200 200 0
4
0 30 230 30
0 200 230 200
30 0 30 230
200 0 200 230
3
0 1 121 1
0 0 121 4
0 4 121 0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Map 1
Trees = 13
Map 2
Trees = 20
Map 3
Trees = 7
</PRE><P><P>
______________________________________________________
3001||||||false||||||
<P>
Jan and Tereza live in adjoining buildings and their apartments face one another. For their school science
project, they want to construct a miniature suspension bridge made of rope, string, and cardboard connecting
their two buildings. Two pieces of identical-length rope form the main suspension cables, which are attached to
the bottoms of their windows. The cardboard ``roadbed" of the bridge is held up by numerous strings tied to the
main cables. The horizontal bridge roadbed lies exactly one meter below the lowest point of the ropes. For
aesthetic reasons, the roadbed should be at least two meters below the lower edge of the lower of the two
students' windows. The laws of physics dictate that each suspension rope forms a parabola.

<P>
While Jan and Tereza don't plan to walk on this model bridge, there is a serious problem: some of the occupants
of the apartment buildings own pet cats, and others own pet birds. Jan and Tereza want to be sure that their
bridge doesn't provide a way for a cat to reach a bird. Jan and Tereza have observed that a cat cannot jump as
high as 0.5 meters, and will not jump down as far as 3 meters. So as long as the bridge roadbed lies at least 0.5
meters above the bottom of a cat's window, or at least 3 meters below the bottom of a cat's window, the cat will
not jump onto it. Likewise, a cat that successfully jumps onto the roadbed will not be able to reach a bird's
window if the roadbed lies at least 0.5 meters below the bottom of the bird's window, or at least 3 meters above
the bottom of the bird's window. Cats are concerned only with reaching birds, and they do not worry about
returning home.

<P>
The figure below shows Jan's apartment (``<B>J</B>") and Tereza's apartment (``<B>T</B>") with a rope joining the bottoms of
their windows and the cardboard roadbed one meter below the lowest point of the rope. The cat on the second
floor can reach the bird on the second floor using the bridge.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3001.eps}$
 -->
<IMG
 WIDTH="632" HEIGHT="402" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3001.gif
 ALT="\epsfbox{p3001.eps}">
</DIV>

<P>
You must write a program to determine how much rope Jan and Tereza need to construct each cable for a bridge
that won't endanger any of the birds in their two buildings.

<P>
Input for your program will be: the distance between the two buildings, in meters; the floor numbers for Jan and
Tereza (with the lowest, or ground floor in each building numbered 1), the kinds of pets living in all the floors
up through Jan's floor, and the kinds of pets living in all the floors up through Tereza's floor. Your program
must determine the length of the longest cable that can be used to suspend a bridge between the two buildings
that does not permit any cat to reach a bird by means of the bridge. The roadbed of the bridge must lie at least 1
meter above the ground and must lie exactly one meter below the lowest point of the suspension cables. It must
also lie at least two meters below the lower of the two windows of Jan and Tereza. All rooms in the buildings
are exactly 3 meters tall; all windows are exactly 1.5 meters tall and the bottom of each window lies exactly 1
meter above the floor of each room.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will describe several cases, each of which has three lines. The first line will contain two positive
integers <SPAN CLASS="MATH"><I>j</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $2 \le j, t \le 25$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3001.gif
 ALT="$ \le$"><I>j</I>, <I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3001.gif
 ALT="$ \le$">25</SPAN>) representing Jan's floor and Tereza's floor, and a real value
<SPAN CLASS="MATH"><I>d</I></SPAN> (<!-- MATH
 $1 \le d \le 25$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3001.gif
 ALT="$ \le$"><I>d</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3001.gif
 ALT="$ \le$">25</SPAN>)
representing the distance, in meters, between the buildings. The second line will contain <SPAN CLASS="MATH"><I>j</I></SPAN> uppercase letters
<!-- MATH
 $l_1, l_2, \dots, l_j$
 -->
<SPAN CLASS="MATH"><I>l</I><SUB>1</SUB>, <I>l</I><SUB>2</SUB>,..., <I>l</I><SUB>j</SUB></SPAN> separated by whitespace. Letter <SPAN CLASS="MATH"><I>l</I><SUB>k</SUB></SPAN> is `<TT>B</TT>' if a bird lives on floor
number <SPAN CLASS="MATH"><I>k</I></SPAN> of Jan's building, `<TT>C</TT>' if a cat lives
on floor number <SPAN CLASS="MATH"><I>k</I></SPAN>, and `<TT>N</TT>' if neither kind of pet lives on floor number <SPAN CLASS="MATH"><I>k</I></SPAN>. The third line similarly contains <SPAN CLASS="MATH"><I>t</I></SPAN>
uppercase letters representing the same kind of information for the floor <SPAN CLASS="MATH"><I>s</I></SPAN> in Tereza's building. The last case is
followed by a line containing three zeroes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, print the case number (1, 2, ...) and the largest value <SPAN CLASS="MATH"><I>c</I></SPAN> such that two cables, each of length <SPAN CLASS="MATH"><I>c</I></SPAN>, can
be used to suspend a bridge from the lower edges  of Jan's and Tereza's windows so that the bridge floor lies one
meter below the lowest point in the cable, lies at least 1 meter above the ground, lies at least two meters below
Jan and Tereza's windows, and does not allow a cat to reach a bird. The lengt <SPAN CLASS="MATH"><I>h</I></SPAN> should be rounded to three
places following the decimal point. If no such bridge can be constructed, print `<TT>impossible</TT>'. Print a blank line
between the output for consecutive cases. Your output format should imitate the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 3 5.0
N C N C
N B B
4 3 5.0
C B C C
B C B
0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1: 14.377

Case 2: impossible
</PRE>

<P>

______________________________________________________
3002||||||false||||||
<P>In order to avoid midair collisions, most commercial flights are monitored by ground-based air traffic control centers that track their position using radar. For this problem, you will be given information on a set of airplanes and a set of control centers, and you must compute how monitoring of the airplanes is distributed among the control centers. The position of each airplane is represented by a unique <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinate pair. For the purpose of this problem, the height (altitude) of the airplanes can be ignored.<P>The number of airplanes that can be monitored by a given control center varies from time to time due to changes in staff and equipment. At any given time, each control center monitors as many planes as it can, choosing the airplanes to be monitored according to the following priorities:<DL COMPACT><DT>(1)</DT><DD>it will prefer to monitor planes that are closer to the control center rather than ones that are farther away;</DD><DT>(2)</DT><DD>if two airplanes are equally distant from the center and the center can monitor only one of them, it will choose the one that is farther to the north (positive <SPAN CLASS="MATH"><I>y</I></SPAN>-axis);</DD><DT>(3)</DT><DD>if two airplanes are equally distant and have the same y-coordinate, the center will give preference to the airplane that is farther to the east (positive <SPAN CLASS="MATH"><I>x</I></SPAN>-axis).</DD></DL><P>At any given moment, each control center has a circular ``span of control" whose radius is the distance to the farthest airplane being monitored by the control center. All airplanes inside the span of control are monitored by the control center. Airplanes on the boundary of the span of control may or may not be monitored by the control center, depending on its capacity and on the priorities listed above.<P>You will not be given the positions of the control centers. Instead, for each control center, you will be given the number of airplanes that it is currently monitoring, and two points that are on the boundary of its current span of control. With this information, you can compute the position of the control center and decide which airplanes it is monitoring. If the data is consistent with more than one possible span of control, you should choose the span that includes the airplane that is farthest to the north, breaking ties by choosing the airplane that is farthest to the north then to the east.<P>The figure below, which shows four airplanes and two control centers, illustrates the problem. Each control center is represented by a circular span of control and by two points on the boundary of this span, labeled A and B. P1, P2, P3, and P4 label the four airplanes. In this example, airplanes P1 and P4 are each being monitored by a single control center, airplane P3 is being monitored by two control centers, and airplane P2 is not being monitored by either control center.<P><DIV ALIGN="CENTER"><IMG WIDTH="363" HEIGHT="265" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3002.gif ALT="\epsfbox{p3002.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of several trial data sets. The first line of input in each trial data set contains two integers <SPAN CLASS="MATH"><I>NP</I></SPAN> (<!-- MATH
 $0 < NP < 100$
 --> <SPAN CLASS="MATH">0 &lt; <I>NP</I> &lt; 100</SPAN>) and <SPAN CLASS="MATH"><I>NC</I></SPAN> (<!-- MATH
 $0 < NC < 10$
 --> <SPAN CLASS="MATH">0 &lt; <I>NC</I> &lt; 10</SPAN>), which represent the number of airplanes and the number of control centers, respectively. Each of the next <SPAN CLASS="MATH"><I>NP</I></SPAN> lines contains two floating-point numbers that represent the <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates of one airplane. Each of the next <SPAN CLASS="MATH"><I>NC</I></SPAN> lines describes one control center. Each contains an integer between 0 and <SPAN CLASS="MATH"><I>NP</I></SPAN> (inclusive) indicating the number of airplanes monitored by the control center, followed by two pairs of floating point numbers that represent the <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates of two points on the boundary of its span of control (neither of which is the position of an airplane). If two distances differ by less than 0.00001, you should treat them as the same distance.<P>The last data set is followed by a line containing two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each trial, compute the number of airplanes that are monitored by zero control centers, the number of airplanes that are monitored by one control center, and so on up to the number of airplanes that are monitored by <SPAN CLASS="MATH"><I>NC</I></SPAN> control centers. Print the trial number followed by a sequence of <SPAN CLASS="MATH"><I>NC</I> + 1</SPAN> integers, where the <SPAN CLASS="MATH"><I>i</I></SPAN>-th integer in the sequence represents the number of airplanes that are monitored by <SPAN CLASS="MATH"><I>i</I> - 1</SPAN> control centers. If data for one of the control centers is inconsistent, print `<TT>Impossible</TT>' instead of the sequence of integers for that trial. Use the format shown in the example output, and print a blank line after each trial.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4  2
3.0  0.0
0.0  0.0
1.6  2.8
2.0  1.0
2  1.0  2.0  2.0  0.0
2  2.0  2.0  4.0  2.0
2  1
0.0  0.5
0.0  -0.5
0   -1.0  0.0  1.0  0.0
0  0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Trial 1:  1  2  1

Trial 2:  Impossible
</PRE><P>
______________________________________________________
3003||||||false||||||
<P>
A local school provides jelly for their pupils every day, and  the school staff  are very careful to see that each child has exactly the same amount. 

<P>
The jelly is prepared the previous day; the liquid jelly is poured into rectangular sided moulds, one mould per child, and then put in the fridge where it sets. The moulds may differ by the length and width of their sides but are filled to different heights so that they all have the same volume; length, width, and height are always integer numbers. 

<P>
Unfortunately, one of the cleaners loves practical jokes! Whenever he can, before 
the jelly has set, he tips liquid jelly from one  of the  moulds into another. He is happy if he succeeds just once and doesn't repeat the joke with other moulds. 

<P>
Your task is to help the school staff by preparing a report for them. They need to 
know who has lost jelly and who has gained it so that they can correct matters 
before the children arrive. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of one or more scenarios. Each scenario begins with a single 
integer  <SPAN CLASS="MATH"><I>n</I></SPAN>,  <!-- MATH
 $1 \le   n \le  100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3003img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3003img1.gif
 ALT="$ \le$">100</SPAN>, representing the number of children for whom jelly was prepared. Following this are n lines, each line representing one child. The data for a child consists of the child's name and 3 integer numbers in the range 1 to 100, respectively  representing the length, width and height of the jelly in that child's mould, all separated by single spaces. A child's name consists of a sequence of 1 up to 10 letters (upper and/or lower case), and no two children have the same name. A single 0 on a line by itself marks the end of input. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
Your report consists of one line of text per scenario. If the cleaner did not manage to transfer any jelly before it set, your report must say 

<P>

<P>
<BR>

<TT>No child has lost jelly.</TT>

<P>

<P>
<BR>
If the cleaner did manage to transfer jelly, your report must be of the form 

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH"><I>ChildA</I></SPAN> has lost jelly to <SPAN CLASS="MATH"><I>ChildB</I></SPAN>.</TT> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>ChildA</I></SPAN> is the actual name of the child that has lost jelly and <SPAN CLASS="MATH"><I>ChildB</I></SPAN> is 
the actual name of the child that has gained jelly. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 
Joe 10 10 2 
Susan 10 5 4 
Bill 5 5 8 
4 
Zoe 10 2 2 
Lee 6 5 2 
Alan 5 4 4 
Tommy 12 5 1 
0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
No child has lost jelly. 
Zoe has lost jelly to Alan.
</PRE>  

<P>

______________________________________________________
3004||||||false||||||
<P>
A small local shop is having a problem because the assistants find it hard to work 
out how much change to give to customers. You have been asked to help them 
by writing a program that does all the work! 

<P>

<P>
<BR>
Notes and coins available are as follows: 
<BLOCKQUOTE>
Notes: $20, $10, $5, $2, $1. 
</BLOCKQUOTE>
<P>
<BLOCKQUOTE>Coins: 50c, 20c, 10c, 5c. 

</BLOCKQUOTE>  

<P>
As the smallest coin available is 5c, the cost of the purchase may need to be 
rounded to the nearest 5c, using the so-called Swedish rounding method. The 
rules for rounding are as follows: 

<P>
<BLOCKQUOTE>
1 or 2 cents ­ rounded down to 0. 
</BLOCKQUOTE>
<P>
<BLOCKQUOTE>3 or 4 cents ­ rounded up to 5.
</BLOCKQUOTE>
<P>
<BLOCKQUOTE>6 or 7 cents ­ rounded down to 5.
</BLOCKQUOTE>
<P>
<BLOCKQUOTE>8 or 9 cents ­ rounded up to 10.

</BLOCKQUOTE>  

<P>
The program must work out the change required and specify the notes and coins 
to use. In each case, the smallest possible number of notes and coins must be 
used. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each line of input will represent a single transaction, and will contain 2 decimal 
numbers in the range 0.05 to  1000.00,  each with two digits after the decimal 
point, and  separated  by a single space.  The first number is the cost of a 
purchase, the second the amount the customer offers at the till. As mentioned, 
the cost of the purchase may need to be rounded, and, of course, the amount 
offered by the customer is a multiple of 5 cents.  A line consisting of two  0.00 
numbers marks the end of the input. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
Your program must output one line for each transaction. Where the amount of 
money offered by the customer is not enough to cover the rounded purchase 
price, your program must output

<P>

<P>
<BR>

<TT>Not enough money offered.</TT>

<P>

<P>
<BR>
Where the amount of money offered by the customer is exactly the rounded 
purchase price, your program must output 

<P>

<P>
<BR>

<TT>Exact amount.</TT>

<P>

<P>
<BR>
In all other cases output  the sequence describing  the change. Each sequence 
item starts with a note or coin value in the format described earlier (e.g., $2 or 10c), followed by a multiplication sign (i.e.,  an  asterisk, `<TT>*</TT>') and ends with a repetition count (a number <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3004img1.gif
 ALT="$ \ge$">1</SPAN>). Items are listed in order of decreasing values and are separated by single spaces. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
20.03 20.00 
20.07 20.05 
20.08 25.00 
0.09 0.10 
0.00 0.00
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Not enough money offered. 
Exact amount. 
$2*2 50c*1 20c*2 
Exact amount.
</PRE>  

<P>

______________________________________________________
3005||||||false||||||
<P>In the Macmahara Desert, a group of explorers have found the remains of an interesting tribe of people, the Yacms. A number of necklaces have been found which, according to local history, the Yacms used to represent numbers. Each necklace consists of a continuous wire on which are strung a number of beads. As the beads are of only two colours (black and white), it is clear that the necklaces were used to represent binary numbers.<P>Unfortunately, nobody knows whether the black represented 1 and the white 0 or the other way around. It is also not clear where the number started, or even in which direction it was to be read!<P>A simple necklace like the one below could represent several numbers.<P><P><BR><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3005.jpg ALT="\epsfbox{p3005.eps}"></DIV><P><P><BR>What we can say is that the lowest number it can represent is 1, the highest 14. In this simple case the lowest and the highest numbers are the same whether we read the necklace clockwise or anticlockwise. However, there are complex cases when the two reading directions also give different lowest and highest numbers. As you can verify, the last necklace listed in the sample input is indeed such a case.<P>Your task is to find out the lowest number and the highest number that a given necklace could possibly represent.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of a number of lines, each representing one necklace. Each necklace will be represented by a sequence of 1 to 30 letters, upper case `<TT>B</TT>' to represent a black bead, upper case `<TT>W</TT>' a white bead. The word `<TT>END</TT>' will mark the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input line, output 2 integers (in base 10), separated by a single space. The first is the lowest number that the necklace could represent, the second the highest number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
B 
BW 
BBWB 
BBBW 
WBBWB 
BBBWBWW 
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 1 
1 2 
1 14 
1 14 
5 26 
11 116
</PRE><P>
______________________________________________________
3006||||||false||||||
<P>In some graphics applications the screen is divided into 4 areas numbered 1, 2, 3, 4, with each area recursively divided in the same way, to an arbitrary depth. Using this scheme, each cell on the screen can be uniquely identified by a string of digits in the range 1-4, as in the following diagrams:<P><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><P><BR><P><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>22</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>24</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>23</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>41</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>42</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>31</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>32</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>44</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>43</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>34</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>33</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P>You are given a sequence of digits in the range 1-4 identifying an initial cell and a sequence of moves of the form U(up), D(down), L(left), R(right). Your task is to identify the destination of this move sequence, also as a sequence of digits in the range 1-4, or to write OUT if the trajectory gets beyond the screen borders.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of a series of scenarios, each specified by two lines of input:<UL><LI>The first line consists of a string of 1 to 255 digits that specifies an initial cell, where each digit is in the range 1-4. </LI><LI>The second line consists of a string of 1 to 255 letters that specifies the series of moves, where each letter is one of `<TT>U</TT>', `<TT>D</TT>', `<TT>L</TT>', `<TT>R</TT>'. </LI></UL><P>The end of the input is indicated by a line that consists of the word `<TT>END</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output for each scenario should consist of a single line that specifies the final cell, as a sequence of digits in the range 1-4, or the word `<TT>OUT</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1 
RD 
31 
ULDRR 
421 
LLLDRRRU 
244444 
DL 
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
3 
32 
OUT 
422222
</PRE><P>
______________________________________________________
3007||||||false||||||
<P>The local supermarket has survived with one checkout for many years. Yet, recently the supermarket has become much busier. The manager is planning to add more checkouts but this will take some time.<P>As an interim measure the manager aims to minimize the total time the customers wait in the queue for the checkout. More precisely, this total waiting time is defined as the sum of all customer waiting times, where a customer is considered to be waiting when in the queue, but not considered to be waiting when being served at the checkout. The shop will stay open until all the customers have been served.<P>The manager has decided to experiment with a more flexible checkout service policy. Under this new policy:<P><UL><LI>A waiting customer and even a newly arriving customer can be directed to the checkout regardless of her current position in the waiting queue. </LI><LI>A customer can be returned to the queue part way through being served at the checkout. When that customer later returns to the checkout only the remaining time to complete her checkout procedure is required. </LI><LI>No extra time is required to pick a customer from the queue or to put a customer back onto the queue. </LI></UL><P>Your task is to work out the minimum total waiting time as defined above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number of scenarios you will be given.<P><P><BR>Each scenario begins with an integer <SPAN CLASS="MATH"><I>n</I></SPAN> which is the number of customers where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3007img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3007img1.gif ALT="$ \le$">400</SPAN>. Then the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain the information for customers labelled 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. Each of these lines contains two numbers <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN> separated by a single space, where <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3007img1.gif ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3007img1.gif ALT="$ \le$">36000</SPAN> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3007img1.gif ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3007img1.gif ALT="$ \le$">600</SPAN>, with the following meaning:<P><UL><LI><SPAN CLASS="MATH"><I>i</I></SPAN> represents the time the customer arrives at the checkout with her load of shopping, this is given as the number of seconds from the time the shop opened. </LI><LI><SPAN CLASS="MATH"><I>j</I></SPAN> represents the time required to scan and pay for her shopping. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each scenario output a line consisting of the number of customers and the minimum total waiting time in seconds, separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 
4 
2000 500 
200 300 
1500 200 
2300 400 
4 
100 100 
100 100 
100 200 
100 200 
3 
100 500 
100 100 
200 100
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
4 200 
4 700 
3 200
</PRE><P>
______________________________________________________
3008||||||false||||||
<P>A Binary Search Tree (BST) is a binary tree where every node has a value and the tree is arranged so that, for any node all the values in its left subtree are less than the node's value, and all the values in its right subtree are greater than the node's value.<P>To build a BST from a sequence of distinct integers the following procedure is used. The first integer becomes the root of the tree. Then the second integer in the sequence is considered. If it is less than the value of the root node then it becomes the left child. Otherwise, it becomes the right child. Subsequent items in the sequence move down either left or right in the same fashion depending on the comparison against earlier nodes, starting at the root and progressing down the tree. The new node is inserted (as a leaf) into the partially constructed tree when it reaches a missing subtree in the particular direction of travel.<P><P><BR>For example, a BST generated by the sequence 2, 1, 4, 3 is built up as shown below as the numbers are inserted.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3008.jpg ALT="\epsfbox{p3008.eps}"></DIV><P>The tree of Figure 4 can also be generated by two other sequences: 2, 4, 3, 1 and 2, 4, 1, 3.<P>Such sequences can be compared according to a lexicographic order, where the comparison proceeds left-to-right and items at corresponding positions are compared using their numerical values. The result is shown below, using ``<TT>&lt;</TT>" to denote this lexicographic order between sequences:<P><P><BR><TT>2, 1, 4, 3 &lt; 2, 4, 1, 3 &lt; 2, 4, 3, 1</TT>.<P><P><BR>For the tree in Figure 4 the lexicographically least sequence is 2, 1, 4, 3.<P><P><BR>Write a program that will read a representation of a tree and will generate the lexicographically least sequence of distinct positive integers that will generate that tree. Note that for a tree with n nodes this sequence will be a permutation of the numbers from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>.<P><P><BR>For the input to our problem we represent (recursively) the structure of a tree as follows:<P><OL><LI>A single node (a leaf) is a tree:<P><UL><LI>() </LI></UL><P></LI><LI>If <SPAN CLASS="MATH"><I>T</I><SUB>L</SUB></SPAN> and <SPAN CLASS="MATH"><I>T</I><SUB>R</SUB></SPAN> are trees then the following are also trees:<P><UL><LI>(<SPAN CLASS="MATH"><I>T</I><SUB>L</SUB></SPAN>,) </LI><LI>(,<SPAN CLASS="MATH"><I>T</I><SUB>R</SUB></SPAN>) </LI><LI>(<SPAN CLASS="MATH"><I>T</I><SUB>L</SUB></SPAN>,<SPAN CLASS="MATH"><I>T</I><SUB>R</SUB></SPAN>) </LI></UL></LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of a sequence of lines. Each line will consist of up to 250 characters and will contain the specification of a single tree according to the above definition (with no intervening spaces). The sequence will be terminated by a tree consisting of a single node `<TT>()</TT>'. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output will be a sequence of lines, one for each line in the input. Each line will consist of the required permutation of the integers from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> (where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of nodes in the tree) separated by single spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
((),((),)) 
(((),),()) 
(((),()),((),())) 
(,()) 
((),) 
()
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2 1 4 3 
3 2 1 4 
4 2 1 3 6 5 7 
1 2 
2 1
</PRE><P>
______________________________________________________
3009||||||false||||||
<P>
The order of Avidly Calculating Monks have their ashram high in the Sierra 
Nevada mountains east of Silicon Valley. After many years of training, each 
novice is faced with a final test before he can become a full member of the ACM. 

<P>
In this test, the novice is led into a room containing three large urns, each 
containing a number of delicate glass beads. His task is to completely empty one 
of the urns using the following special procedure. Each day, the novice must 
select two of the urns, the source, and the  destination. He  must then carefully 
move beads from the source urn to the destination urn, never breaking one, until 
the original contents of the destination urn are doubled. No other beads may be 
moved.  

<P>

<P>
<BR>
So for example, if the number of beads in the three urns were respectively 

<P>

<P>
<BR>
115, 200 and 256 beads 

<P>

<P>
<BR>
then the novice might choose the second urn as the source and the first as the 
destination which would result in new contents of 

<P>

<P>
<BR>
230, 85 and 256 beads 

<P>

<P>
<BR>
at the end of the first day. Then on the second day the novice might choose the 
urn with 256 beads as the source, and that with 85 as the destination leaving 

<P>

<P>
<BR>
230, 170 and 171 beads 

<P>

<P>
<BR>
at the end of the second day. 

<P>

<P>
<BR>
If the original contents were 12, 30, and 12 beads, then choosing the first as 
source and the third as  destination would result in 0, 30, and 24 beads and 
completion of the task. 

<P>
The chief guru of the ACM always likes to have available a crib sheet indicating 
how many days the novices should take if they use as few transfers as possible 
to empty one of the urns. Your task is to provide this crib sheet. 

<P>
Given a sequence of  scenarios, each with a  triple of non-negative integers 
representing the urn contents, determine for each scenario the smallest possible 
number of days required to empty one of the urns. This problem is guaranteed to 
have a solution in each case. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of a sequence of lines, each line representing a scenario. Each 
line consists of three integers in the range from 0 to 500 representing the initial urn contents, separated by single spaces. Input is terminated by the line `<TT>0 0 0</TT>', which is not processed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each scenario ``<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>b</I>&nbsp;<I>c</I></SPAN>", output a line of the form 

<P>

<P>
<BR>

               <!-- MATH
 $a\ b\ c\ d$
 -->
<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>b</I>&nbsp;<I>c</I>&nbsp;<I>d</I></SPAN> 

<P>

<P>
<BR>
where  <SPAN CLASS="MATH"><I>d</I></SPAN> is the smallest possible number of days  required to empty an urn 
beginning from contents <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, and <SPAN CLASS="MATH"><I>c</I></SPAN>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 
<PRE>
0 3 5 
5 0 3 
1 1 1 
2 3 4 
12 3 8 
0 0 0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 
<PRE>
0 3 5 0 
5 0 3 0 
1 1 1 1 
2 3 4 2 
12 3 8 5
</PRE>  

<P>

______________________________________________________
3010||||||false||||||
<P>Consider a 3 by 3 arrangement of the digits 1 to 9, as illustrated in the following diagram:<P><DIV ALIGN="CENTER">Figure 1</DIV><P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P>The arrangement can by modified by rotating any of the 2-by-2 groups in the corners, either clockwise or anticlockwise. Thus if the top-right corner of the above arrangement is rotated anticlockwise, the result is the following arrangement:<P><DIV ALIGN="CENTER">Figure 2</DIV><P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P>A magic square is an n-by-n arrangement of numbers, such that the sum of the numbers in each row, column, and diagonal is the same. For example, the following diagram illustrates one possible 3-by-3 magic square for the numbers 1 to 9:<P><DIV ALIGN="CENTER">Figure 3</DIV><P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P>Your task is to determine the minimum number of moves to transform a given digit arrangement into a magic square.<P><P><BR>For example, the magic square in Figure 3 can be obtained from the arrangement illustrated in Figure 2 by one clockwise rotation of the top-left corner. Thus the arrangement given in Figure 1 can be transformed into a magic square in 2 moves (and, as you can verify, no shorter sequences of moves would suffice).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of a series of lines, each specifying an initial arrangement of the digits 1 to 9, listed in row-by-row order.<P><P><BR>The end of the input is indicated by a line that consists of the word `<TT>END</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output for each arrangement should consist of either:<UL><LI>the minimum number of moves followed by a single space and then the word `<TT>moves</TT>', or </LI><LI>the word `<TT>IMPOSSIBLE</TT>', if it is not possible to achieve a magic square arrangement. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
135876492 
438975261 
672159834 
129764583 
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2 moves 
1 moves 
0 moves 
4 moves
</PRE><P>
______________________________________________________
3011||||||false||||||
<P>A manager for a toy company wants to reduce the cost of manufacturing their line of toys. Briefly, the toys are created by robots that operate on assembly tracks by adding and linking track components into modules and by merging existing modules into more complex modules. Components can be either active or inactive. At any moment there is exactly one active component per each module and track; and this is the only component that can be linked or merged on that track for that module.<P>The new budget for this company will only support components which consist of three colours and adjacent components must have different colours. Your job is to decide which of the current toys in the inventory can be produced with this colouring limitation.<P><P><BR>The company uses the following BNF formalism to describe more precisely the blueprints of its toys:<OL><LI><SPAN CLASS="MATH">&lt; <I>toy</I> &gt;</SPAN> ::= <!-- MATH
 $<last-track>$
 --><SPAN CLASS="MATH">&lt; <I>last</I> - <I>track</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>module</I> &gt;</SPAN><P>The current <SPAN CLASS="MATH">&lt; <I>toy</I> &gt;</SPAN> consists of a main <SPAN CLASS="MATH">&lt; <I>module</I> &gt;</SPAN>. <!-- MATH
 $<last-track>$
 --><SPAN CLASS="MATH">&lt; <I>last</I> - <I>track</I> &gt;</SPAN> gives the number of the last track used to build the current <SPAN CLASS="MATH">&lt; <I>toy</I> &gt;</SPAN>; the tracks are numbered from 0 to <!-- MATH
 $<last-track>$
 --><SPAN CLASS="MATH">&lt; <I>last</I> - <I>track</I> &gt;</SPAN>. </LI><LI><SPAN CLASS="MATH">&lt; <I>module</I> &gt;</SPAN> ::= `(' <!-- MATH
 $<operator-sequence>$
 --><SPAN CLASS="MATH">&lt; <I>operator</I> - <I>sequence</I> &gt;</SPAN> `)'<P><SPAN CLASS="MATH">&lt; <I>module</I> &gt;</SPAN> represents a simple module that only contains operators.<P>The operators given by the <!-- MATH
 $<operator-sequence>$
 --><SPAN CLASS="MATH">&lt; <I>operator</I> - <I>sequence</I> &gt;</SPAN> are processed in a left- to-right order.<P>This <SPAN CLASS="MATH">&lt; <I>module</I> &gt;</SPAN> starts with empty tracks and then automatically adds one active component on each of the available tracks. </LI><LI><!-- MATH
 $<merged-module>$
 --><SPAN CLASS="MATH">&lt; <I>merged</I> - <I>module</I> &gt;</SPAN> ::= `(' <!-- MATH
 $<module>_1$
 --><SPAN CLASS="MATH">&lt; <I>module</I> &gt; <SUB>1</SUB></SPAN> <!-- MATH
 $<module>_2$
 --><SPAN CLASS="MATH">&lt; <I>module</I> &gt; <SUB>2</SUB></SPAN> `)'<P>This is a merge operation that builds a complex <!-- MATH
 $<merged-module>$
 --><SPAN CLASS="MATH">&lt; <I>merged</I> - <I>module</I> &gt;</SPAN> by merging the active components of <!-- MATH
 $<module>_1$
 --><SPAN CLASS="MATH">&lt; <I>module</I> &gt; <SUB>1</SUB></SPAN> and <!-- MATH
 $<module>_2$
 --><SPAN CLASS="MATH">&lt; <I>module</I> &gt; <SUB>2</SUB></SPAN>, after both modules are completely built. </LI><LI><SPAN CLASS="MATH">&lt; <I>module</I> &gt;</SPAN> ::= `(' <!-- MATH
 $<merged-module>$
 --><SPAN CLASS="MATH">&lt; <I>merged</I> - <I>module</I> &gt;</SPAN> <!-- MATH
 $<operator-sequence>$
 --><SPAN CLASS="MATH">&lt; <I>operator</I> - <I>sequence</I> &gt;</SPAN> `)'<P>The components of the <!-- MATH
 $<merged-module>$
 --><SPAN CLASS="MATH">&lt; <I>merged</I> - <I>module</I> &gt;</SPAN> remain on the tracks and its active components are further worked upon by the operators given by <!-- MATH
 $<operator-sequence>$
 --><SPAN CLASS="MATH">&lt; <I>operator</I> - <I>sequence</I> &gt;</SPAN><P></LI><LI><!-- MATH
 $<operator-sequence>$
 --><SPAN CLASS="MATH">&lt; <I>operator</I> - <I>sequence</I> &gt;</SPAN> ::= <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3011img1.gif ALT="$ \lambda$"></SPAN> <SPAN CLASS="MATH">|</SPAN> <!-- MATH
 $<operator>$
 --><SPAN CLASS="MATH">&lt; <I>operator</I> &gt;</SPAN> <!-- MATH
 $<operator-sequence>$
 --><SPAN CLASS="MATH">&lt; <I>operator</I> - <I>sequence</I> &gt;</SPAN> </LI><LI><!-- MATH
 $<operator>$
 --><SPAN CLASS="MATH">&lt; <I>operator</I> &gt;</SPAN> ::= <!-- MATH
 $<node-operator>$
 --><SPAN CLASS="MATH">&lt; <I>node</I> - <I>operator</I> &gt;</SPAN> <SPAN CLASS="MATH">|</SPAN> <!-- MATH
 $<edge-operator>$
 --><SPAN CLASS="MATH">&lt; <I>edge</I> - <I>operator</I> &gt;</SPAN> </LI><LI><!-- MATH
 $<node-operator>$
 --><SPAN CLASS="MATH">&lt; <I>node</I> - <I>operator</I> &gt;</SPAN> ::= <!-- MATH
 $<track-number>$
 --><SPAN CLASS="MATH">&lt; <I>track</I> - <I>number</I> &gt;</SPAN><P>A <!-- MATH
 $<node-operator>$
 --><SPAN CLASS="MATH">&lt; <I>node</I> - <I>operator</I> &gt;</SPAN> adds an active component on the specified <!-- MATH
 $<track-number>$
 --><SPAN CLASS="MATH">&lt; <I>track</I> - <I>number</I> &gt;</SPAN> for the current module and the previously active component on that track becomes inactive. </LI><LI><!-- MATH
 $<edge-operator>$
 --><SPAN CLASS="MATH">&lt; <I>edge</I> - <I>operator</I> &gt;</SPAN> ::= <!-- MATH
 $<track-number-pair>$
 --><SPAN CLASS="MATH">&lt; <I>track</I> - <I>number</I> - <I>pair</I> &gt;</SPAN><P>An <!-- MATH
 $<edge-operator>$
 --><SPAN CLASS="MATH">&lt; <I>edge</I> - <I>operator</I> &gt;</SPAN> links the active components of the two track-numbers. </LI></OL><P>The following examples show several simple toy blueprints; in the figures tracks are represented as horizontal dotted lines, components as circles, links as full lines, and the time axis flows from left to right.<P><P><BR><B>EXAMPLE 1</B><P>Figure 1 depicts a 3-colourable toy that can be built using the following blueprint:<P><P><BR><TT>2 ( 20 10 21 2 20 )</TT><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3011img1.gif ALT="\epsfbox{p3011a.eps}"></DIV><P><P><BR>There are 3 tracks numbered 0, 1, 2. The toy consists of a single module containing 4 components labelled <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN>, linked by the lines
<SPAN CLASS="MATH"><I>c</I>­<I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I>­<I>a</I></SPAN>, <SPAN CLASS="MATH"><I>c</I>­<I>b</I></SPAN>, <SPAN CLASS="MATH"><I>d</I>­<I>a</I></SPAN>. To build this toy the robot will execute in order the following operations:

<P>

<OL>
<LI>Add <SPAN CLASS="MATH"><I>a</I></SPAN> on track 0, <SPAN CLASS="MATH"><I>b</I></SPAN> on track 1, <SPAN CLASS="MATH"><I>c</I></SPAN> on track 2. At this stage <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN> are the active components.
</LI>
<LI>Make the links <SPAN CLASS="MATH"><I>c</I>­<I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I>­<I>a</I></SPAN>, <SPAN CLASS="MATH"><I>c</I>­<I>b</I></SPAN>.
</LI>
<LI>Add <SPAN CLASS="MATH"><I>d</I></SPAN> on track 2, which makes <SPAN CLASS="MATH"><I>d</I></SPAN> active and inactivates <SPAN CLASS="MATH"><I>c</I></SPAN>.
</LI>
<LI>Make the link <SPAN CLASS="MATH"><I>d</I>­<I>a</I></SPAN>. At this stage <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN> are the active components.
</LI>
</OL>

<P>
Note that the same toy can also be built using several other blueprints, such as
the following two:

<P>

<P>
<BR>
<TT>2 ( 10 20 21 2 20 )</TT>

<P>
<TT>2 ( ( ( 20 10 ) ( 21 ) ) 2 20 )</TT>

<P>

<P>
<BR>

<B>EXAMPLE 2</B>

<P>
Figures 2 and 3 illustrate a sequence of operations involving a merge, for another
3-colourable (in fact even 2-colourable) toy that can be built as specified by the
following blueprint:

<P>

<P>
<BR>
<TT>1 ( ( ( 10 1 10 0 ) ( 10 1 10 0 ) ) 10 1 10 )</TT>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3011b.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3011img1.gif
 ALT="\epsfbox{p3011b.eps}">
</DIV>

<P>

<OL>
<LI>First, module 1 is built:  
<DL COMPACT>
<DT>a.</DT>
<DD>Add <SPAN CLASS="MATH"><I>a</I></SPAN> on track 0 and <SPAN CLASS="MATH"><I>b</I></SPAN> on track 1.  
</DD>
<DT>b.</DT>
<DD>Link <SPAN CLASS="MATH"><I>b</I>­<I>a</I></SPAN>. 
</DD>
<DT>c.</DT>
<DD>Add <SPAN CLASS="MATH"><I>c</I></SPAN> on track 1.  
</DD>
<DT>d.</DT>
<DD>Link <SPAN CLASS="MATH"><I>c</I>­<I>a</I></SPAN>. 
</DD>
<DT>e.</DT>
<DD>Add <SPAN CLASS="MATH"><I>d</I></SPAN> on track 0. <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN> are now the active components of module 1. 
</DD>
</DL>

<P>
</LI>
<LI>Secondly, module 2 is built using similar operations.  <SPAN CLASS="MATH"><I>g</I></SPAN>,  <SPAN CLASS="MATH"><I>h</I></SPAN> are now the 
          active components of module 2. 
</LI>
<LI>Thirdly, modules 1 and 2 are  merged together, which means that  active 
          components of each track are identified, i.e.,  <SPAN CLASS="MATH"><I>c</I> = <I>g</I></SPAN>, <SPAN CLASS="MATH"><I>d</I> = <I>h</I></SPAN>.  

<P>
The snapshot of Figure 2 illustrates this moment, with braces showing 
               component identification. 
</LI>
<LI>Fourthly, the just merged components are linked, i.e., <!-- MATH
 $(c+g)­(d+h)$
 -->
<SPAN CLASS="MATH">(<I>c</I> + <I>g</I>)­(<I>d</I> + <I>h</I>)</SPAN>

<P>
<!-- MATH
 $(c+g)­(d+h)$
 -->
<SPAN CLASS="MATH">(<I>c</I> + <I>g</I>)­(<I>d</I> + <I>h</I>)</SPAN> are now the active components of the merged module 1+2. 
</LI>
<LI>Lastly, <SPAN CLASS="MATH"><I>i</I></SPAN> is added to track 1 and linked with <SPAN CLASS="MATH">(<I>d</I> + <I>h</I>)</SPAN>.  

<P>
The final result is depicted in Figure 3 and links made after the merging 
are depicted with double lines. At the end,  <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH">(<I>d</I> + <I>h</I>)</SPAN> are the active 
components of the main module. 
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of a sequence of toy blueprints, one per line of at most 250 characters. Each toy blueprint contains a sequence of tokens separated by single spaces, and conforming to the BNF rules stated earlier. 
The first token  is a positive integer  <SPAN CLASS="MATH"><I>t</I></SPAN>, <!-- MATH
 $0  \le   t  \le   6$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3011img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3011img1.gif
 ALT="$ \le$">6</SPAN>, denoting the maximum track number for the robot's arms to grab (i.e., there are t+1 current components for the robot).

<P>

<P>
<BR>
The interpretations for the remaining tokens are given in the next table. 

<P>

<P>
<BR>
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=JUSTIFY WIDTH="5in">
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
Token </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360"> Meaning of the Robot's Instruction </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>i </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360"> Add a new component on track <SPAN CLASS="MATH"><I>i</I></SPAN>, where <SPAN CLASS="MATH"><I>i</I></SPAN> is a decimal digit, <!-- MATH
 $0 \le  i \le  t$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3011img1.gif
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3011img1.gif
 ALT="$ \le$"><I>t</I></SPAN>. Note  that  this component  becomes  the  active component on  this track </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>ij</I></SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">  Link the  active components on tracks  <SPAN CLASS="MATH"><I>i</I></SPAN> and  <SPAN CLASS="MATH"><I>j</I></SPAN>,  where  <SPAN CLASS="MATH"><I>i</I></SPAN> and  <SPAN CLASS="MATH"><I>j</I></SPAN> are decimal digits,  <!-- MATH
 $t \ge i >  j \ge 0$
 -->
<SPAN CLASS="MATH"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3011img1.gif
 ALT="$ \ge$"><I>i</I> &gt; <I>j</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3011img1.gif
 ALT="$ \ge$"> 0</SPAN>.  Note this token  consists  of  two  track numbers, with no intervening space. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>(</TT>   </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">  Begin marker for a  new module. Note that, according to the BNF description  two tokens `<TT>)</TT>' and `<TT>(</TT>' adjacent in sequence denote a 
merge operation. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>)</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360"> End marker for a new module. </TD></TR>
</TBODY>
</TABLE>

<P>

<P>
<BR>
The input will be terminated by a toy description with <SPAN CLASS="MATH"><I>t</I> = 0</SPAN>, which is not processed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 
The required output is a line of the form `<TT>Toy #: <SPAN CLASS="MATH">?</SPAN></TT>', where `<TT>#</TT>' denotes the toy sequence number starting at 1 and <SPAN CLASS="MATH">?</SPAN> is either `<TT>Yes</TT>' or `<TT>No</TT>' depending whether the toy can be properly built using at most 3 colours. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2 ( 20 10 21 2 20 ) 
1 ( ( ( 10 1 10 0 ) ( 10 1 10 0 ) ) 10 1 10 ) 
3 ( 32 31 20 21 10 0 10 30 20 ) 
2 ( ( ( 10 1 10 21 1 21 10 ) ( 21 ) ) 0 10 20 ) 
0 ( )
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 
<PRE>
Toy 1: Yes 
Toy 2: Yes 
Toy 3: No 
Toy 4: Yes
</PRE>  

<P>

______________________________________________________
3012||||||false||||||
<P>When we need to find the arithmetic average of some numbers we always tend to keep the result in a floating-point number as in many cases the average is a fraction. But if all the numbers are integers then we should not use floating-point numbers to store the average, as floating-point numbers can lead to all sorts of precision errors. In this problem your job is to find the average of some integers and express it in the form <SPAN CLASS="MATH"><I>a</I></SPAN> <EM>or</EM> <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3012img1.gif ALT="$ {\frac{b}{c}}$"></SPAN> <EM>or</EM> <SPAN CLASS="MATH"><I>a</I><IMG WIDTH="14" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3012img1.gif ALT="$ {\frac{b}{c}}$"></SPAN>, where <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN> are all integers. In this problem we will denote this average as <SPAN CLASS="MATH"><I>avg</I></SPAN>.<P><DL COMPACT><DT>a)</DT><DD>If <SPAN CLASS="MATH">| <I>avg</I>| &gt; 1</SPAN> and a fractional number then we should print it as <SPAN CLASS="MATH"><I>a</I><IMG WIDTH="14" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3012img1.gif ALT="$ {\frac{b}{c}}$"></SPAN><P></DD><DT>b)</DT><DD>If <SPAN CLASS="MATH">| <I>avg</I>| &lt; 1</SPAN> and a fractional number then we should print it as <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3012img1.gif ALT="$ {\frac{b}{c}}$"></SPAN><P></DD><DT>c)</DT><DD>If <SPAN CLASS="MATH"><I>avg</I></SPAN> is an integer we should print it as <SPAN CLASS="MATH"><I>a</I></SPAN><P></DD><DT>d)</DT><DD>If <SPAN CLASS="MATH"><I>avg</I></SPAN> is negative then the whole result should be preceded by a minus (`<SPAN CLASS="MATH">-</SPAN>') sign and a space.<P></DD><DT>e)</DT><DD>In the printed fractional part <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN> should be relative prime. In other words <SPAN CLASS="MATH">gcd(<I>b</I>, <I>c</I>)</SPAN> should be 1.<P></DD><DT>f)</DT><DD>The horizontal bar in the fraction should be formed using only the hyphen (`<TT>-</TT>'). Its length should be equal to the number of digits in <SPAN CLASS="MATH"><I>c</I></SPAN>. If the number of digits in <SPAN CLASS="MATH"><I>b</I></SPAN> is less than <SPAN CLASS="MATH"><I>c</I></SPAN> then <SPAN CLASS="MATH"><I>b</I></SPAN> should be right justified on the horizontal bar.<P></DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains less than 101 sets of input. Each set of input is given in a single line. The description of each line is given below:<P>The first integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3012img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3012img1.gif ALT="$ \le$">100</SPAN>) of a line denotes how many numbers are to be averaged. It is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> numbers, all of which have absolute values less than 10000.<P>Input is terminated by a case where <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>. This case should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input produce two or four lines of outputs. The first line contains the serial number of the output. The next one or three lines contain the value of the average following the rules specified above. The output lines should not contain any trailing spaces. And there must not be any leading or trailing spaces other than the ones that are required for formatting.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 1 2 3
3 -1 -2 -3
3 1 2 4
4 2 4 6 10
3 -1 -2 -4
10 1 1 1 1 1 1 1 1 1 4
10 1 -1 1 -1 1 -1 -1 1 1 1
10 1 -1 1 -1 1 -1 -1 1 1 -3
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
2
Case 2:
- 2
Case 3:
 1
2-
 3
Case 4:
 1
5-
 2
Case 5:
   1
- 2-
   3
Case 6:
  3
1--
 10
Case 7:
1
-
5
Case 8:
  1
- -
  5
</PRE><P>
______________________________________________________
3013||||||false||||||
<P>In the picture below you can see two rectangles <B>ABCD</B> and <B>A<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>B<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>C<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>D<SPAN CLASS="MATH"><SUB>1</SUB></SPAN></B>. They are two rectangular maps of the same rectangular region. The size of the two maps is different but their aspect ratio is the same. This means <B>AB/A<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>B<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>=AD/A<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>D<SPAN CLASS="MATH"><SUB>1</SUB></SPAN></B>.<P><DIV ALIGN="CENTER"><IMG WIDTH="671" HEIGHT="441" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3013.jpg ALT="\epsfbox{p3013.eps}"></DIV><P>Mathematicians say that there is always a geographical location on the bigger map such that the same location on the smaller map lies just straight above. So you can mark this location with one needle on both the maps at the same time. In the figure on the left, point <B>E</B> is such a point. Given the orientation of the two maps of the same rectangular area your job is to find this special point. You can assume that the bigger map is <B>ABCD</B> and the smaller map is <B>A<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>B<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>C<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>D<SPAN CLASS="MATH"><SUB>1</SUB></SPAN></B>. You can also assume that point <B>A</B> is always at the origin, and one side of the bigger map is always in parallel with the <SPAN CLASS="MATH"><I>x</I></SPAN>-axis. So obviously the other side is always in parallel with the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>On the first line there will be <SPAN CLASS="MATH"><I>T</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3013.jpg ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3013.jpg ALT="$ \le$">500</SPAN>) , the number of test cases. Each case is represented by five lines. First of them will contain the coordinates of point <SPAN CLASS="textbf">C</SPAN>. The next four lines will contain coordinates of points <B>A<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>, B<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>, C<SPAN CLASS="MATH"><SUB>1</SUB></SPAN></B> and <B>D<SPAN CLASS="MATH"><SUB>1</SUB></SPAN></B> respectively. You can assume that <SPAN CLASS="MATH"><IMG WIDTH="181" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3013.jpg ALT="$ \bf (10 \le AB, AC \le 100)$"></SPAN> and <SPAN CLASS="MATH">0.1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3013.jpg ALT="$ \le$">(<SPAN CLASS="textbf">A</SPAN><SUB>1</SUB><SPAN CLASS="textbf">B</SPAN><SUB>1</SUB>/<SPAN CLASS="textbf">AB</SPAN>)<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3013.jpg ALT="$ \le$">0.9</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case you must produce one line of output: the coordinates of the desired point rounded to four digits after the decimal point. You can always assume that there will be one such point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
8.0000000000 6.0000000000
2.0000000000 1.0000000000
6.0000000000 1.0000000000
6.0000000000 4.0000000000
2.0000000000 4.0000000000
34.0000000000000000 49.0000000000000000
18.2078241256558856 32.1681558770129171
22.7579122488961215 27.1147710637666363
30.0407315385745850 33.6722510060834468
25.4906434153343492 38.7256358193297276
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Saple Output</A>&nbsp;</FONT></H2><P><PRE>
4.0000 2.0000
26.6101 32.5721
</PRE><P>
______________________________________________________
3014||||||false||||||
<P>Alex has a simple assignment in his hand: counting the number of divisors of a given positive number <SPAN CLASS="MATH"><I>M</I></SPAN>. For example the number <B>60</B> has <B>12</B> divisors <B>1</B>, <B>2</B>, <B>3</B>, <B>4</B>, <B>5</B>, <B>6</B>, <B>10</B>, <B>12</B>, <B>15</B>, <B>20</B>, <B>30</B> and <B>60</B>. Although it is very easy task, finding the reverse is not that easy. If you are given the number of divisors <SPAN CLASS="MATH"><I>D</I></SPAN> of an unknown positive number <SPAN CLASS="MATH"><I>M</I></SPAN>, it is not very easy to find <SPAN CLASS="MATH"><I>M</I></SPAN> and in all cases there are more than one solution. The boring and easy assignments given by his teachers do not keep intelligent Alex interested for long. So he is trying to solve this rather difficult task now. Can you help him?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several lines of input. Each line contains an integer <SPAN CLASS="MATH"><I>D</I></SPAN> (<!-- MATH
 $0 < D \le 5000$
 --> <SPAN CLASS="MATH">0 &lt; <I>D</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3014img1.gif ALT="$ \le$">5000</SPAN>). Input is terminated by a line, which contains a number `<TT>0</TT>'. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input except the last one you should produce one line of output. This line should contain the serial number of output followed by a positive number <SPAN CLASS="MATH"><I>M</I></SPAN> less than <SPAN CLASS="MATH">(10<SUP>15</SUP> + 1)</SPAN> whose number of divisors is exactly <SPAN CLASS="MATH"><I>D</I></SPAN>. If there is no such number <SPAN CLASS="MATH"><I>M</I></SPAN> less than <SPAN CLASS="MATH">(10<SUP>15</SUP> + 1)</SPAN> whose total number of divisors is <SPAN CLASS="MATH"><I>D</I></SPAN>, print the word `<TT>Impossible</TT>' without the quotes. If there is more than one possible value of <SPAN CLASS="MATH"><I>M</I></SPAN> within the specified range, print the smallest one. Look at the output for sample input for details.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
4
12
60
4911
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 4
Case 2: 6
Case 3: 60
Case 4: 5040
Case 5: Impossible
</PRE><P>
______________________________________________________
3015||||||false||||||
<P>Binary numbers and their pattern of bits are always very interesting to computer programmers. In this problem you need to count the number of positive binary numbers that have the following properties:<P><UL><LI>The numbers are exactly <SPAN CLASS="MATH"><I>N</I></SPAN> bits wide and they have no leading zeros. </LI><LI>The frequency of zeros and ones are equal. </LI><LI>The numbers are multiples of <SPAN CLASS="MATH"><I>K</I></SPAN>. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file contains several test cases. The first line of the input gives you the number of test cases, <SPAN CLASS="MATH"><I>T</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3015img1.gif ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3015img1.gif ALT="$ \le$">100</SPAN>). Then <SPAN CLASS="MATH"><I>T</I></SPAN> test cases will follow, each in one line. The input for each test case consists of two integers, <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3015img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3015img1.gif ALT="$ \le$">64</SPAN>) and <SPAN CLASS="MATH"><I>K</I></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3015img1.gif ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3015img1.gif ALT="$ \le$">100</SPAN>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each set of input print the test case number first. Then print the number of binary numbers that have the property that we mentioned.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
6 3
6 4
6 2
26 3
64 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1
Case 2: 3
Case 3: 6
Case 4: 1662453
Case 5: 465428353255261088
</PRE><P><P><P><BR><B>Illustration</B>: Here's a table showing the possible numbers for some of the sample test cases:<P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>6 3</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>6 4</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>6 2</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>101010</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>111000</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>111000</B></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>110100</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>110100</B></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>101100</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>101100</B></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>110010</B></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>101010</B></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>100110</B></TD></TR></TBODY></TABLE></DIV><P>
______________________________________________________
3016||||||false||||||
<P>We know that if three different points are not collinear then there is a unique circle that passes through them. When three points are collinear we get a unique straight line passing through them and a straight line can be considered as part of a circle of infinite radius. Given several thousand points and three special points <B>A</B>, <B>B</B> and <B>C</B> in a two dimensional Cartesian coordinate system your job is to find out how many points are contained in the circle passing through the three special points. Please note that your solution must be very efficient.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3016.jpg ALT="\epsfbox{p3016.eps}"></DIV><P><DIV ALIGN="CENTER">In the figure above the three special points are shown as small filled circles and normal points are shown as small filled squares. In Figure 1 we can see a circle passing through three special points <B>A</B>, <B>B</B> and <B>C</B>. There is also a normal point <B>D</B>. There are total five points strictly within the circle and three points are on the boundary. So the circle contains eight points in total. When the point <B>D</B> is turned into special point <B>C</B> we get another circle, which is shown, in Figure 2. This larger circle contains total nine points.</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains at most ten sets of input. The description of each set is given below.<P>First line of each set contains six integers <SPAN CLASS="MATH"><I>A</I><SUB>x</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>y</SUB></SPAN>, <SPAN CLASS="MATH"><I>B</I><SUB>x</SUB></SPAN>, <SPAN CLASS="MATH"><I>B</I><SUB>y</SUB></SPAN>, <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>Q</I></SPAN>. Here <SPAN CLASS="MATH">(<I>A</I><SUB>x</SUB>, <I>A</I><SUB>y</SUB>)</SPAN> is the coordinate of <B>A</B> and <SPAN CLASS="MATH">(<I>B</I><SUB>x</SUB>, <I>B</I><SUB>y</SUB>)</SPAN> is the coordinate of <B>B</B>, <SPAN CLASS="MATH"><I>N</I></SPAN> (<!-- MATH
 $0 < N \le 50000$
 --> <SPAN CLASS="MATH">0 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3016.jpg ALT="$ \le$">50000</SPAN>) is the total number of points (excluding <B>A</B> and <B>B</B>) and <SPAN CLASS="MATH"><I>Q</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3016.jpg ALT="$ \le$"><I>Q</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3016.jpg ALT="$ \le$">1000</SPAN>) is the number of queries. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains two integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>, where <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> is the Cartesian coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th point ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3016.jpg ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3016.jpg ALT="$ \le$"><I>N</I></SPAN>, <SPAN CLASS="MATH">-10000<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3016.jpg ALT="$ \le$"><I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3016.jpg ALT="$ \le$">10000</SPAN>). Each of the next <SPAN CLASS="MATH"><I>Q</I></SPAN> lines contains one integer <SPAN CLASS="MATH"><I>S</I><SUB>C</SUB></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3016.jpg ALT="$ \le$"><I>S</I><SUB>C</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3016.jpg ALT="$ \le$"><I>N</I></SPAN>), which indicates that the <SPAN CLASS="MATH"><I>S</I><SUB>C</SUB></SPAN>-th point is to be considered as point <B>C</B> for the current query. For example, in the first sample input the point with serial no <B>4</B> is <B>(5, 5)</B> as there are three points before it (<B>(-1, -1),</B> <B>(-1, -1) </B>and <B>(3,3)</B>) in the input sequence. Please note that for a single set of input, point <B>A</B> and <B>B</B> are fixed. Only the position of point <B>C</B> is being altered for each query.<P>The input is terminated by a case where <SPAN CLASS="MATH"><I>N</I> = <I>Q</I> = 0</SPAN>. This case should not be processed. You can see from the first sample input that more than one point can have the same coordinate. Such points should be considered as different points.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of input produce <SPAN CLASS="MATH"><I>Q</I> + 1</SPAN> lines of output. The description of the output for each set is given below:<P>The first line contains the serial number of the output as shown in the output for sample input. Each of the next <SPAN CLASS="MATH"><I>Q</I></SPAN> lines contains an integer <SPAN CLASS="MATH"><I>D</I></SPAN> which indicates how many points will be within the circle passing through <B>A</B>, <B>B</B> and <B>C</B>. The points on the boundary of the circle are also considered inside the circle. So you should also consider <B>A</B>, <B>B</B> and <B>C</B> within the circle. If the radius of the circle is greater than <B>100000</B> then simply print the line `<TT>Impossible</TT>' instead of the integer <SPAN CLASS="MATH"><I>D</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 10 10 0 6 2
-1 -1
-1 -1
3 3
5 5
-1 -1
12 16
4
1
0 10 10 0 8 2
-1 -1
2 2
4 4
6 6
8 8
12 12
14 14
16 16
3
5
0 10 10 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
Impossible
7
Case 2:
8
7
</PRE><P>
______________________________________________________
3017||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="513" HEIGHT="410" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3017.jpg ALT="\epsfbox{p3017.eps}"></DIV><P>Permutations of a sequence of decimal digits have an interesting property. Any two permutations of a sequence of digits have a difference, which is divisible by 9. Quite interesting, isn't it? For example:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">| 458967 - 456879| = 2088 = 9*232</DIV><P></P><P><P><BR>We won't ask for the proof today (as it is very easy) but we will focus towards a different aspect of this property. There are some numbers whose difference with one (or more) of its permutation is of the form 9p, where p is a prime less than 1111111. These numbers are called permutation primes. For example <B>92-29=63=9*7</B>, where <B>7</B> is a prime. So 92 is a permutation prime. Now you have to write a program that finds out how many permutation primes are there within a specified range.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>First line of input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN> (<!-- MATH
 $0 < T < 51$
 --> <SPAN CLASS="MATH">0 &lt; <I>T</I> &lt; 51</SPAN>) denoting the number of test cases to follow. Then follows <SPAN CLASS="MATH"><I>T</I></SPAN> lines each of which contains two positive integers <SPAN CLASS="MATH"><I>p</I></SPAN> and <SPAN CLASS="MATH"><I>q</I></SPAN>. Both of them are less than <B>99999999</B>, without any leading zero(s) and <SPAN CLASS="MATH">| <I>p</I> - <I>q</I>|<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3017.jpg ALT="$ \le$">1000</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There will be one line of output for each test case. At first print `<TT>Case <SPAN CLASS="MATH"><I>i</I></SPAN>: </TT>' (without the quotes) where <SPAN CLASS="MATH"><I>i</I></SPAN> is an integer denoting the <SPAN CLASS="MATH"><I>i</I></SPAN>-th test case starting from one. Then the line will contain an integer <SPAN CLASS="MATH"><I>N</I></SPAN> that denotes the number of permutation primes between <SPAN CLASS="MATH"><I>p</I></SPAN> and <SPAN CLASS="MATH"><I>q</I></SPAN> (inclusive).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
1 10
1 20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 0
Case 2: 5
</PRE><P>
______________________________________________________
3018||||||false||||||
<P>It is now year <B>3004</B>, the <B>ACM</B> <B>ICPC</B> Programming Contest is still one of the largest and most prestigious Programming Contest of the World. This contest began almost <B>1030</B> years ago and many dont remember the history of this contest now. Some say that there is a wonderful story behind this contest. The story goes as follows:<P><DIV ALIGN="CENTER"><IMG WIDTH="620" HEIGHT="637" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3018a.jpg ALT="\epsfbox{p3018a.eps}"></DIV><P>Long long ago there lived a happy dove couple who loved each other very much. They were living peacefully but one day the female dove became very ill. The male dove began roaming around everywhere looking for proper medicine and found a wizard who knew the cure. But the wizard would only give him (male dove) the medicine if he could solve a problem for him, which was in the wizards mind for a long time. As the problem was quite hard the male dove could not solve it. At that time a few very kind men came to his rescue. They gathered all the brilliant programmers from all over the world just to solve the wizards problem, this gathering was known as the first <B>ACM ICPC</B> <B>World Finals</B>. The wizards problem was solved and the female dove got cured. Nice story! Isnt it? But the real problem is that now you have to solve this problem on your own.<P><P><BR><IMG WIDTH="348" HEIGHT="379" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3018a.jpg ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=3in
\epsfbox{p3018b.eps}
\par
Figure 1
\end{center}}$"><IMG WIDTH="348" HEIGHT="429" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3018a.jpg ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=3in
\epsfbox{p3018c.eps}
\par
Figure 2
\end{center}}$"><P>The wizards problem was related to a chessboard. Given an <SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN> chessboard (<SPAN CLASS="MATH"><I>m</I></SPAN>=number of rows and <SPAN CLASS="MATH"><I>n</I></SPAN>=number of columns) one has to go from the lower left corner to the upper right corner. The lower left corner is numbered as <SPAN CLASS="MATH">(0, 0)</SPAN> and the upper right corner is marked as <SPAN CLASS="MATH">(<I>m</I> - 1, <I>n</I> - 1)</SPAN> as shown in <B>Figure 1</B>. But in each step one can only jump to another box that is <SPAN CLASS="MATH"><I>p</I></SPAN> blocks away in the horizontal direction and <SPAN CLASS="MATH"><I>q</I></SPAN> blocks away in the vertical direction or viceversa. No such moves, which would take one away from the destination, are allowed. So if the value <SPAN CLASS="MATH"><I>p</I> = 1</SPAN> and <SPAN CLASS="MATH"><I>q</I> = 3</SPAN> and one is in the <SPAN CLASS="MATH"><I>r</I></SPAN>-th row and <SPAN CLASS="MATH"><I>c</I></SPAN>-th column or location <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>)</SPAN> then he can only jump to location <SPAN CLASS="MATH">(<I>r</I> + 1, <I>c</I> + 3)</SPAN> or <SPAN CLASS="MATH">(<I>r</I> + 3, <I>c</I> + 1)</SPAN> but he cannot jump to locations like <SPAN CLASS="MATH">(<I>r</I> - 1, <I>c</I> + 1)</SPAN> or <SPAN CLASS="MATH">(<I>r</I> - 1, <I>c</I> - 1)</SPAN>, etc. In <B>Figure 2</B> we can see a situation where <SPAN CLASS="MATH"><I>p</I> = 2</SPAN> and <SPAN CLASS="MATH"><I>q</I> = 1</SPAN> (or <SPAN CLASS="MATH"><I>p</I> = 1</SPAN> and <SPAN CLASS="MATH"><I>q</I> = 2</SPAN>). It shows two of the total six possible ways (considering that no square is blocked) of going from the lower left corner to the upper right corner and each of these two ways requires four steps to reach the destination. It also shows that the square at <SPAN CLASS="MATH">(2, 4)</SPAN> (row <B>2</B>, column <B>4</B>) is blocked, which has ruled out the possibility of a path through that square. Given the value of <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>p</I></SPAN> and <SPAN CLASS="MATH"><I>q</I></SPAN> and position of the squares which are blocked, your job is to find out the number of steps one requires to reach the destination and also the total number of possible ways to reach the destination.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains less than <B>100</B> sets of inputs. The description of each set is given below:<P>Each line contains five integers <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $6 < m, n < 4001$
 --> <SPAN CLASS="MATH">6 &lt; <I>m</I>, <I>n</I> &lt; 4001</SPAN>), <SPAN CLASS="MATH"><I>p</I></SPAN>, <SPAN CLASS="MATH"><I>q</I></SPAN> (<!-- MATH
 $0 < p, q < 10$
 --> <SPAN CLASS="MATH">0 &lt; <I>p</I>, <I>q</I> &lt; 10</SPAN>) and <SPAN CLASS="MATH"><I>b</I></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3018a.jpg ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3018a.jpg ALT="$ \le$">10</SPAN>). The meaning of <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>p</I></SPAN> and <SPAN CLASS="MATH"><I>q</I></SPAN> are described in the problem statement above. The integer <SPAN CLASS="MATH"><I>b</I></SPAN> denotes the number of squares that are blocked. Each of the next <SPAN CLASS="MATH"><I>b</I></SPAN> lines contains two integers <SPAN CLASS="MATH">(<I>r</I><SUB>i</SUB>, <I>c</I><SUB>i</SUB>)</SPAN> which denotes the row and column of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th blocked square.<P>Input is terminated by a set where the value of <SPAN CLASS="MATH"><I>m</I> = <I>n</I> = 0</SPAN>. This set should not be processed. Please note that at least <B>90%</B> of the input test cases follow the limit (<!-- MATH
 $6 < m,n < 300$
 --> <SPAN CLASS="MATH">6 &lt; <I>m</I>, <I>n</I> &lt; 300</SPAN>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of input produce one line of output, which contains two integers <SPAN CLASS="MATH"><I>C</I></SPAN> and <SPAN CLASS="MATH"><I>W</I></SPAN>. Here <SPAN CLASS="MATH"><I>C</I></SPAN> is the number of steps required to go from the lower left corner to the upper right corner and <SPAN CLASS="MATH"><I>W</I></SPAN> is the total possible ways one can go from lower left corner to the upper right corner. If it is impossible to go from the lower left corner to the upper right corner with the given configuration then print a line `<TT>Impossible</TT>' instead as shown in the output for sample input. <SPAN CLASS="MATH"><I>W</I></SPAN> can have at most <B>802</B> digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 7 1 2 2
2 1
1 2
8 8 1 3 0
49 49 2 1 0
93 109 3 1 1
24 16
108 50 3 1 6
85 47
45 23
54 34
24 40
40 24
82 46
0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Impossible
Case 2: Impossible
Case 3: 32 601080390
Case 4: 50 64542614482000
Case 5: 39 376817
</PRE><P>
______________________________________________________
3019||||||false||||||
<P>Rats like many other rodents are used in the labs for scientific experiments. But unlike many cruel surgical experiments our experiment on the rats would be a rewarding psychological one. We are trying to establish the fact that the rats have a good cognitive map in their brain they have a good sense of directions. Here we would like to give an empirical proof to support our claim.<P><DIV ALIGN="CENTER"><IMG WIDTH="537" HEIGHT="303" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3019a.jpg ALT="\epsfbox{p3019a.eps}"></DIV><P>In our experiment, we build a maze for our rats. This maze is basically a rectangular grid of cells. There are tunnels that lead from one cell to another. Because of the rectangular arrangement, the tunnels can run in the four major directions only. From the cell at location <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> the rats may go East to <SPAN CLASS="MATH">(<I>i</I>, <I>j</I> + 1)</SPAN>, West to <SPAN CLASS="MATH">(<I>i</I>, <I>j</I> - 1)</SPAN>, North to <SPAN CLASS="MATH">(<I>i</I> - 1, <I>j</I>)</SPAN> and South to <SPAN CLASS="MATH">(<I>i</I> + 1, <I>j</I>)</SPAN> as shown in the figure on the right. These tunnels are directed. Thus a tunnel that takes a rat from cell from <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> to <SPAN CLASS="MATH">(<I>i</I>, <I>j</I> - 1)</SPAN> not necessarily provides a path to get back to <B>cell</B> <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN>. Some of these tunnels are open ended, if a rat goes through that tunnel, it would fall out of the maze. Now we allure the rats by putting mouth watering cheese cuts in some particular cells. Our experiment requires the rats to be trained to remember the sequence of <B>E</B> (East), <B>W</B> (West), <B>N</B> (North), <B>S</B> (South) moves that lead them to these cheese cuts.<P><DIV ALIGN="CENTER"><IMG WIDTH="440" HEIGHT="439" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3019a.jpg ALT="\epsfbox{p3019b.eps}"></DIV><P>We train a rat by releasing it in a designated start cell in the maze. Then it goes through the maze at its own will - taking the <B>EWNS</B> turns whimsically. But at some point in time it is bound to lose its vigor and stop moving. Then we take the rat out from the maze. If it stopped on a cell that contained a cheese cut we reward it with another cheese cut, leaving the original one in the maze; but if it stops on a cell that does not have any cheese cut, it goes unrewarded. One may wonder what would happen if the rat falls out of the board by following an open ended tunnel. Our explanation is simple, we put cheese cuts only in some particular cells in the maze there is no cheese cuts in the world outside. So if a rat falls out it doesnt get any cheese.<P><P><BR>We have seen that after training a rat several times in this way it seems to remember the rewarding move sequences correctly. Our experiment requires that we release the rat in the same starting cell and the cheese cuts are placed in exactly the same cells every time we put it in the maze. So if the rat finds that some ``<B>EESSWNNS</B>" leads it to a cheese cut, it would always find a cheese cut with that sequence of moves. Our smart rat only needs to differentiate the moves that are rewarding from the ones that are not. However, your task is not as simple as that.<P><P><BR>We plan to train our rat in a maze and test its learning ability in a different maze. But to do that we need to make sure that these two mazes are identical. For our purpose identical mazes not necessarily mean identically constructed mazes. What we need is that they would be identical to the rats. <B>If a rat has a sequence of moves leading to a cheese cut in the training maze, it would also get a cheese cut with the same sequence of moves in the new maze. And if a sequence of moves leads it to nothing in the training maze, the same sequence must be unrewarding for the rat in the new maze.</B> This is where we need your help. Your task is to take the configuration of the two mazes as input, and tell us if they are identical from the rats perspective.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. The first line of the input gives you the number of test cases, <SPAN CLASS="MATH"><I>T</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3019a.jpg ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3019a.jpg ALT="$ \le$">25</SPAN>). Then <SPAN CLASS="MATH"><I>T</I></SPAN> pairs of maze configuration will follow. The first line of a maze configuration starts with the dimension - the number of rows <SPAN CLASS="MATH"><I>R</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3019a.jpg ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3019a.jpg ALT="$ \le$">20</SPAN>) and the number of columns <SPAN CLASS="MATH"><I>C</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3019a.jpg ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3019a.jpg ALT="$ \le$">20</SPAN>) for the maze. Each of the next R lines would describe the C cells in that column. Each cell is represented by a 4-bit number (numbers in the range 0 to 15). These numbers allows us to list all possible outgoing tunnels. The outgoing tunnels for North, East, South and West are represented by the <SPAN CLASS="MATH">0<SUP>th</SUP></SPAN>, <SPAN CLASS="MATH">1<SUP>st</SUP></SPAN>, <SPAN CLASS="MATH">2<SUP>nd</SUP></SPAN> and <SPAN CLASS="MATH">3<SUP>rd</SUP></SPAN> bits respectively. If a bit is set to zero then the tunnel in that direction is open ended leading the rat out of the maze; whereas a bit set to one indicates that the rat can go to the next cell in that particular direction. We label the cells in the maze in row major order starting from 0. After the description of the maze cells, the next line would give you the label of the starting cell for that maze. The first integer in the next line would give you the number of cells that would contain cheese cuts. Then that many cell labels will follow in the same line. You may find it helpful to relate the images in the illustration section to the second sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of input print the test case number first. Then print `<TT>Yes</TT>' if our rat would find the pair of mazes to be identical, otherwise print `<TT>No</TT>'. The Sample Input/Output section will clarify the formatting issues.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3 3
6 4 0
2 10 0
3 11 8
1
3 4 7 8
2 3
6 4 4
2 10 1
1
2 0 4
3 3
6 4 0
2 10 0
3 11 8
0
3 4 7 8
2 3
6 12 4
2 10 1
1
2 0 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Yes
Case 2: No
</PRE><P><P><P><BR><B>Illustration</B>: The following pictures illustrate the second sample test case. The numbers in the cells denote the cell labels, the rat shows the starting cell and the cheese cuts show the cells that would contain the cheese cuts. In the first maze the rat falls out of the maze if it takes a west bound move, thus fails to get any cheese. But in the second maze a west bound move would earn it a cheese cut.<P><P><BR><IMG WIDTH="348" HEIGHT="403" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3019a.jpg ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=3in
\epsfbox{p3019c.eps}
\end{center}}$"><IMG WIDTH="348" HEIGHT="287" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3019a.jpg ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=3in
\epsfbox{p3019d.eps}
\end{center}}$"><P>
______________________________________________________
3020||||||false||||||
<P>You have recently been employed by Scoogle,a company seeking to build the largest distributed computing cluster ever. Scoogle has managed to connect several thousand computers into a heterogeneous network.<P>Although their mixed network architecture saved them a lot of money,it has the unfortunate side effect that no two nodes have the same communications delay between them.This has some particularly severe performance implications for the centralised application that they are currently developing. (Scoogle express y denies all allegations regarding DMCA violations)<P>Thus you have landed the job of reducing the communications delay between the respective nodes in the cluster.The primary objective is to devise a routing scheme so that all the nodes can send messages to a master node in the shortest possible time.Since the network infrastructure is symmetric,using these routes in reverse a so results in a minimum delay from the master node to any other node.<P>You have decided that a <SPAN CLASS="textit">sink tree</SPAN> is the best way to solve the problem.This means that you have to construct a tree rooted at a designated master node which minimises the communications delay to each of the other nodes in the cluster.<P>To further complicate the task,you have to decide which node would be the most suitable choice for the master node.Having chosen the optima master node, you can determine the cumulative communications delay of the entire network by summing all the delays,i.e.the edges of the sink tree.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>As input,you will receive a graph listing a the known point-to-point communications delays between the nodes. The input graph will be presented in row-order.<P>Each input record will start with an integer value,<SPAN CLASS="MATH"><I>n</I></SPAN> ,specifying the number of nodes in the network. This value will be followed by <SPAN CLASS="MATH"><I>n</I></SPAN> row entries.<P>Each row entry starts with the <SPAN CLASS="textit">row_number</SPAN>, followed by <SPAN CLASS="textit">row_size</SPAN>, followed by <SPAN CLASS="textit">row_size</SPAN> pairs of (<SPAN CLASS="textit">node_number</SPAN>, <SPAN CLASS="textit">delay_value</SPAN> ) entries.<P>Please note that Scoogle has a very large,dense network, with up to 1000 different nodes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your output must be the minimum cumulative communications delay.The cumulative communications delay is computed by summing the point-to-point delays of all the edges in the sink tree. The minimum cumulative communications delay represents the delay achieved by choosing the optimal node as master node.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5
  0 4 0 0 1 7548 2 3072 3 11273
  1 3 1 0 2 5703 4 2915
  2 3 2 0 3 9443 4 7458
  3 2 3 0 4 3164
  4 1 4 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
22245
</PRE><P>
______________________________________________________
3021||||||false||||||
Alex is busy unpacking a big box of books onto his bookshelf. Like most people,
Alex likes his books to be arranged such that their height on the bookshelf
increases from left to right (i.e.the shortest book is on the left,and as one
moves towards the right end of the bookshelf the books heights either remain
the same as the previous book or increase,until the right-most book is reached
which is the tallest on the shelf).

<P>
Unfortunately,Alex also has a strange way of unpacking his books. As he takes
a book out of the box, he wants to put it on the shelf without moving any of
his other books,such that the books are still arranged in an acceptable way.
For each book,Alex can either put it on the shelf, or put it aside (i.e.not
put it on the shelf): if he puts it aside,then he will never put that book
on the shelf.

<P>
Alex wants to get as many books onto the shelf as possible: your task is to
work out the maximum number of books that he can get onto the shelf and still
maintain the arrangement of increasing height from left to right.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Explained example</SPAN>

<P>
Suppose Alex's box contains 5 books,with the following heights:

<P>

<P>
<BR>
<TT>2 5 1 3 4</TT>

<P>

<P>
<BR>
Books are drawn strictly from left to right,then the best number of books that
Alex can fit on the shelf is 4.

<P>
There are two possible ways of doing this:

<P>

<P>
<BR>
<TT>2 3 4 5</TT>

<P>
<TT>1 3 4 5</TT>

<P>

<P>
<BR>
In the first case, Alex puts the book with height 2 on the left side of the
shelf.The book with height 5 goes to the right side.The book with height 1
can't be placed on the shelf (since it would be shorter than the book with
height 2,and so would ruin the arrangement).The book with height 3 goes to
the left side,and then the book with height 4 can go either to the left or
right side.

<P>
In the second case, Alex could put the book with height 2 aside.Then he places
the book with height 5 on the right side, the book with height 1 on the left
side,the book with height 3 on the left side, and the book with height 4 on
either the left or right side.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each input record will start with a single integer, <SPAN CLASS="MATH"><I>N</I></SPAN> which represents the
number of books in the box to be placed on its own shelf.If <SPAN CLASS="MATH"><I>N</I></SPAN> is `<TT>-1</TT>', this
means that the end of the input has been reached, and your program should stop.
For each <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $1 \le N \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3021img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3021img1.gif
 ALT="$ \le$">100</SPAN>, row entry containing exactly <SPAN CLASS="MATH"><I>N</I></SPAN> space-separated
integers, each of which representing a height of a book in the box will be given.
The order in which these heights are given is the order in which Alex takes
books from the box.The height of each book will be in the range [1,100].

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input record,your program should output a single integer onto a single
line, which is the maximum number of books that could be placed onto the bookshelf.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
2 5 1 3 4
8
1 8 3 6 5 4 7 2
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
4
6
</PRE>

<P>

______________________________________________________
3022||||||false||||||
You have recently ascended the throne of a small (and primitive) island of Italy. The
inhabitants of your domain rely a most exclusively on subsistence farming for survival.
This has inevitably lead to numerous squabbles over the ownership of every square millimetre of the island.

<P>
Fortunately, you, as sovereign, have come up with a truly wise solution to the
problem. Whenever two neighbours are locked in a property dispute, you merge
their individual properties into a single piece of land. This plot you then
divide into two equal halves. Fair is fair.

<P>
Your trusted minions are responsible for surveying the land, drawing up the
relevant map, and suggesting where the new border (bisecting the unified plots) should be drawn.

<P>
However, being minions by nature, you suspect that they may be susceptible to
`gifts' offered by the various parties involved. You have therefore decided
to double-check the fairness of the new border line suggested by your minions.
(That,and you've promised yourself to fire anyone in your employ by the name of Brutus.)

<P>
Thus, given the vertices of the polygon defining the unified plot,you wish to compute the respective areas of
the two plots that result after (supposed) bisection with the new border line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each input record will start with four positive integer values defining the two
endpoints of the dividing line. Note that these endpoints will typicaly fall
outside (rather than on the boundary) of the polygon you wish to split.

<P>
These four integers should be interpreted as two <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> pairs. The rest of the
input record will consist of further <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates, one for each vertex
of the polygon. Note that the polygon is not explicitly closed, so that the
first and the last vertex specified are implicitly connected by the last edge
of the polygon. The record will be terminated by a `<TT>-1</TT>'.

<P>
Further records of the same format may follow immediately after the `<TT>-1</TT>'.

<P>
All input records will define polygons and dividing lines such that the polygon can be split into exactly two polygons.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
You must print out the respective areas of the two polygons obtained by splitting
the input polygon with the specified dividing line.

<P>
You should print out the smaller value first,and all your output values must
be rounded to the nearest integer.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
540 45 1125 855
225 225 1125 225 1575 675 450 675 -1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
222750 232875
</PRE>

<P>

______________________________________________________
3023||||||false||||||
<P>
In the spirit of entrepreneurship, you have been running a very successful
second-hand telephone cable business. However,your clients are becoming
more particular by the day,to the extent that they now order cables of
specific lengths.

<P>
The problem with this new requirement is that it is difficult to tell
how long a cable is while it is still hanging from the telephone poles.
You can easily measure the distance (on the ground) between the poles,
and you can measure the distance from the ground to the lowest point
of the cable. Here's a diagram:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3023.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3023.jpg
 ALT="\epsfbox{p3023.eps}">
</DIV>

<P>
Fortunately you've paid attention in the maths classes, and you remember
that cables hang in a very particular shape (assuming that the cable
does not stretch under its own weight,your ``supplier" uses only the
highest quality cables). The functional form of this shape is called
a catenary, and defines the shape of the cable as

<P>
<!-- MATH
 \begin{displaymath}
f(s)=a*\cosh(s/a),
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>f</I> (<I>s</I>) = <I>a</I>*cosh(<I>s</I>/<I>a</I>),
</DIV><P></P>
where <SPAN CLASS="MATH">cosh(<I>x</I>)</SPAN> is defined as
<!-- MATH
 \begin{displaymath}
\cosh(x)=0.5*(\exp(x)+\exp(-x)).
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
cosh(<I>x</I>) = 0.5*(exp(<I>x</I>) + exp(- <I>x</I>)).
</DIV><P></P>

<P>
Note that <SPAN CLASS="MATH"><I>f</I> (<I>s</I>)</SPAN> defines the ``height" of the cable,with its lowest point at <SPAN CLASS="MATH"><I>f</I> (0) = <I>a</I></SPAN>.

<P>
The shape in which the cable hangs is thus completely described by the
catenary function <SPAN CLASS="MATH"><I>f</I> (<I>s</I>)</SPAN> above, once you have computed the value of <SPAN CLASS="MATH"><I>a</I></SPAN>.
You are given the three parameters necessary to find <SPAN CLASS="MATH"><I>a</I></SPAN>, namely <SPAN CLASS="MATH"><I>h</I></SPAN> (height
of cable above ground at its lowest point), <SPAN CLASS="MATH"><I>p</I></SPAN> (height of the pole) and
<SPAN CLASS="MATH"><I>d</I></SPAN> (distance between the two poles).

<P>
Having found <SPAN CLASS="MATH"><I>a</I></SPAN> ,you must then compute the arc length of <SPAN CLASS="MATH"><I>f</I> (<I>s</I>)</SPAN>, i.e.the
length of the cable.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input will consist of records of the following format:

<P>

<P>
<BR>

<!-- MATH
 $<pole\_height>\ <pole\_spacing>\ <cable\_height>$
 -->
<SPAN CLASS="MATH">&lt; <I>pole</I><IMG
 WIDTH="60" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3023.jpg
 ALT="$ \_height$"> &gt; &nbsp; &lt; <I>pole</I><IMG
 WIDTH="70" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3023.jpg
 ALT="$ \_spacing$"> &gt; &nbsp; &lt; <I>cable</I><IMG
 WIDTH="60" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3023.jpg
 ALT="$ \_height$"> &gt;</SPAN>

<P>

<P>
<BR>
where <!-- MATH
 $pole\_height$
 -->
<SPAN CLASS="MATH"><I>pole</I><IMG
 WIDTH="60" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3023.jpg
 ALT="$ \_height$"></SPAN> corresponds to <SPAN CLASS="MATH"><I>p</I></SPAN> in the diagram above, <!-- MATH
 $pole\_spacing$
 -->
<SPAN CLASS="MATH"><I>pole</I><IMG
 WIDTH="70" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3023.jpg
 ALT="$ \_spacing$"></SPAN>
corresponds to <SPAN CLASS="MATH"><I>d</I></SPAN>, and <!-- MATH
 $cable\_height$
 -->
<SPAN CLASS="MATH"><I>cable</I><IMG
 WIDTH="60" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/p3023.jpg
 ALT="$ \_height$"></SPAN> corresponds to <SPAN CLASS="MATH"><I>h</I></SPAN>.

<P>
Your input may contain any number of records of this form.

<P>
You only have to compute the length of a single cable span between two
successive poles.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input record, you must output the length of the cable described
by the input record. Your answer must be rounded to three decimal places.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 20 8
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
20.524
</PRE>

<P>

______________________________________________________
3024||||||false||||||
Compute the first digit of <SPAN CLASS="MATH"><I>B</I><SUP>N</SUP></SPAN>, given <!-- MATH
 $1 \le B < 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3024img1.gif
 ALT="$ \le$"><I>B</I> &lt; 10</SPAN>, <!-- MATH
 $1 \le N \le 1000000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3024img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3024img1.gif
 ALT="$ \le$">1000000</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple data set. Each data set is a line containing two
integers, <SPAN CLASS="MATH"><I>B</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>, separated by a single space. The data set are followed
by a line `<TT>0 0</TT>'. There will be no more than 10 data set of input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
You must output one line for each line of input (other than the terminating line).
The line consist of a single digit, which is the leading digit of <SPAN CLASS="MATH"><I>B</I><SUP>N</SUP></SPAN> for
the corresponding line of input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 1
2 4
7 8
9 13
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
1
5
2
</PRE>

<P>

______________________________________________________
3025||||||false||||||
<P>
Fractal images are a special class of images that posses some interesting
properties. One of the defining characteristics of fractal images is that
they are self-similar.

<P>
Self-similarity can be illustrated by looking at the coastline of a
continent. If one considers what the coastline looks like on a map showing
a stretch of the coastline several hundreds of kilometers in length, then one
gets a sense of the "roughness"of the coastline. If you were to zoom in
(by a factor of 2 or so), then one is likely to see similar features, resulting
in a comparable impression of the ``roughness" of the coastline. With a real
coastline, the illusion of self-similarity is destroyed if you continue to
zoom in on the map, as the coastline gradually becomes smoother.

<P>

<P>
<BR>
There exists a class of mathematically-constructed images that exhibit
self-similarity on all scales of magnification. One of the best-known fractal
images was discovered by Benoit Mandelbrot, and is thus called the Mandelbrot set.
An approximation of the points belonging to the Mandelbrot set can be rendered to
produce beautiful pictures. Your task will be to render some of these images
in ASCII text. The Mandelbrot set lives in the complex number plane, so all
capitalised variables below will denote complex numbers.

<P>
Let <SPAN CLASS="MATH"><I>Z</I><SUB>n</SUB></SPAN> represent element <SPAN CLASS="MATH"><I>n</I></SPAN> of a Mandelbrot sequence. Then we define

<P>
<!-- MATH
 \begin{displaymath}
Z_{n+1} =Z_{n}^{2} +C,
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>Z</I><SUB>n + 1</SUB> = <I>Z</I><SUB>n</SUB><SUP>2</SUP> + <I>C</I>,
</DIV><P></P>
where <!-- MATH
 $Z_{0} = 0 + 0i$
 -->
<SPAN CLASS="MATH"><I>Z</I><SUB>0</SUB> = 0 + 0<I>i</I></SPAN> (<SPAN CLASS="MATH"><I>i</I></SPAN> represents the square root of -1),and <SPAN CLASS="MATH"><I>C</I></SPAN> represents
an arbitrary constant value on the complex plane.

<P>

<P>
<BR>
The Mandelbrot set is then defined as the set of all starting points
C (complex numbers)such that <!-- MATH
 $|Z_{n}|< 2.0$
 -->
<SPAN CLASS="MATH">| <I>Z</I><SUB>n</SUB>| &lt; 2.0</SPAN> for all <SPAN CLASS="MATH"><I>n</I></SPAN>.
(Note that <SPAN CLASS="MATH">| <I>Z</I>|</SPAN> denotes the magnitude of the complex number <SPAN CLASS="MATH"><I>Z</I></SPAN>,
in other words, the square root of the sum of the square of the real
component and the square of the imaginary component).

<P>
The set of points <SPAN CLASS="MATH"><I>C</I></SPAN> belonging to the Mandelbrot set are said to <SPAN  CLASS="textit">converge</SPAN>.
All points outside the set cause <SPAN CLASS="MATH"><I>Z</I><SUB>n</SUB></SPAN> to diverge as <SPAN CLASS="MATH"><I>n</I></SPAN> approaches infinity.

<P>

<P>
<BR>
For example, let <SPAN CLASS="MATH"><I>C</I> = 0 + 0<I>i</I></SPAN>. Note that <!-- MATH
 $Z_{n} =0 +0i$
 -->
<SPAN CLASS="MATH"><I>Z</I><SUB>n</SUB> = 0 + 0<I>i</I></SPAN> for all values of <SPAN CLASS="MATH"><I>n</I></SPAN>,
thus <SPAN CLASS="MATH">(0 + 0<I>i</I>)</SPAN> belongs to the Mandelbrot set.

<P>
On the other hand, the starting value <SPAN CLASS="MATH"><I>C</I> = 1 + 1<I>i</I></SPAN> does not lead to a convergent
<SPAN CLASS="MATH"><I>Z</I><SUB>n</SUB></SPAN> sequence. Here's the first few values:

<P>

<P>
<BR>
<!-- MATH
 $Z_{0}  = 0 +0i$
 -->
<SPAN CLASS="MATH"><I>Z</I><SUB>0</SUB> = 0 + 0<I>i</I></SPAN>, <!-- MATH
 $Z_{1}  = (0 +0i)^{2} +(1 +1i)=1 +1i$
 -->
<SPAN CLASS="MATH"><I>Z</I><SUB>1</SUB> = (0 + 0<I>i</I>)<SUP>2</SUP> + (1 + 1<I>i</I>) = 1 + 1<I>i</I></SPAN>, <!-- MATH
 $Z_{2}  = (1 +1i)^{2} +(1 +1i)=1 +3i$
 -->
<SPAN CLASS="MATH"><I>Z</I><SUB>2</SUB> = (1 + 1<I>i</I>)<SUP>2</SUP> + (1 + 1<I>i</I>) = 1 + 3<I>i</I></SPAN>

<P>

<P>
<BR>
Note that <!-- MATH
 $|Z_{2}|=3.1623$
 -->
<SPAN CLASS="MATH">| <I>Z</I><SUB>2</SUB>| = 3.1623</SPAN>, so that after two iterations, we can already see
that the sequence starting at <SPAN CLASS="MATH"><I>C</I> = 1 + 1<I>i</I></SPAN> does not belong to the Mandelbrot
set (because <SPAN CLASS="MATH">| <I>Z</I><SUB>2</SUB>| &gt; 2</SPAN>).

<P>
Note that it is possible to identify some points <SPAN CLASS="MATH"><I>C</I></SPAN> <SPAN  CLASS="textit">outside</SPAN> the Mandelbrot
set quickly, because <SPAN CLASS="MATH">| <I>Z</I><SUB>n</SUB>|</SPAN> will exceeded 2 after only a few iterations.

<P>

<P>
<BR>
An a proximation of the Mandelbrot set can be rendered for a region of the
complex plane by calculating the first <SPAN CLASS="MATH"><I>k</I></SPAN> elements of the sequence <SPAN CLASS="MATH"><I>Z</I><SUB>n</SUB></SPAN>
for each of the points in the region (by choosing those points as <SPAN CLASS="MATH"><I>C</I></SPAN> values).
If <SPAN CLASS="MATH">| <I>Z</I><SUB>n</SUB>| &lt; 2</SPAN> after <SPAN CLASS="MATH"><I>k</I></SPAN> iterations, that point can be labeled as belonging
to the Mandelbrot set. A discrete picture can be formed by evaluating the
Mandelbrot sequence for each point on a grid defined in such a region.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
You will be provided with the dimensions of the desired output image,as well
as four real values denoting the region of the complex plane that you must
render.Your input will thus consist of records of the following form:

<P>

<P>
<BR>

<!-- MATH
 $<rows>\ <columns>\ <left>\ <top>\ <right>\ <bottom>$
 -->
<SPAN CLASS="MATH">&lt; <I>rows</I> &gt; &nbsp; &lt; <I>columns</I> &gt; &nbsp; &lt; <I>left</I> &gt; &nbsp; &lt; <I>top</I> &gt; &nbsp; &lt; <I>right</I> &gt; &nbsp; &lt; <I>bottom</I> &gt;</SPAN>

<P>

<P>
<BR>
The <SPAN CLASS="MATH"><I>rows</I></SPAN> and <SPAN CLASS="MATH"><I>columns</I></SPAN> fields denote the number of rows and
columns that your output image must occupy.

<P>
The <SPAN CLASS="MATH"><I>left</I></SPAN>, <SPAN CLASS="MATH"><I>top</I></SPAN>, <SPAN CLASS="MATH"><I>right</I></SPAN> and <SPAN CLASS="MATH"><I>bottom</I></SPAN> fields denote the boundaries
of the region of the complex plane that you must generate the Mandelbrot set for.

<P>
Your input may contain any number of records formatted as described above;you
must render the image for each record specified.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your output will be an ASCII image of the Mandelbrot set for the specified
region of the complex plane. If a point is found to be in the Mandelbrot
set after 2048 iterations of the generating equation (thus the value
<!-- MATH
 $|Z_{2047}|<2$
 -->
<SPAN CLASS="MATH">| <I>Z</I><SUB>2047</SUB>| &lt; 2</SPAN>), you must output a space character. For all points not
belonging to the Mandelbrot set you must print a `<TT>*</TT>' character.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
31 60 -2 1 1 -1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
************************************************************
************************************************************
************************************* **********************
***********************************    *********************
***********************************    *********************
************************************   *********************
***************************** ***         ******************
*****************************                 **************
*****************************                ***************
****************************                  **************
**************************                      ************
**************************                     *************
*****************      ***                     *************
****************        *                      *************
***************                               **************
*                                            ***************
***************                               **************
****************        *                      *************
*****************      ***                     *************
**************************                     *************
**************************                      ************
****************************                  **************
*****************************                ***************
*****************************                 **************
***************************** ***         ******************
************************************   *********************
***********************************    *********************
***********************************    *********************
************************************** *********************
************************************************************
************************************************************
</PRE>

<P>

______________________________________________________
3026||||||false||||||
<P>

For each prefix of a given string S with N characters (each character has an
ASCII code between 97 and 126, inclusive), we want to know whether the prefix
is a periodic string. That is, for each i (2 &le; i &le; N) we want to know the largest K
> 1 (if there is one) such that the prefix of S with length i can be written as A<sup>K</sup> ,
that is A concatenated K times, for some string A. Of course, we also want to
know the period K.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


<p>
The input file consists of several test cases. Each test case consists of two
lines. The first one contains N (2 &le; N &le; 1 000 000)  the size of the string S.
The second line contains the string S. The input file ends with a line, having the
number zero on it.



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>
For each test case, output <i>Test case #</i> and the consecutive test case
number on a single line; then, for each prefix with length i that has a period K >
1, output the prefix size i and the period K separated by a single space; the
prefix sizes must be in increasing order. Print a blank line after each test case.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
aaa
12
aabaabaabaab
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Test case #1
2 2
3 3

Test case #2
2 2
6 2
9 3
12 4
</PRE>

<P>

______________________________________________________
3027||||||false||||||
<P>
A very big corporation is developing its corporative network. In the beginning each of the N
enterprises of the corporation, numerated from 1 to N, organized its own computing and
telecommunication center. Soon, for amelioration of the services, the corporation started to collect
some enterprises in clusters, each of them served by a single computing and telecommunication
center as follow. The corporation chose one of the existing centers I (serving the cluster A) and
one of the enterprises J in some cluster B (not necessarily the center) and link them with
telecommunication line. The length of the line between the enterprises I and J is |I  J|(mod 1000).
In such a way the two old clusters are joined in a new cluster, served by the center of the old cluster
B. Unfortunately after each join the sum of the lengths of the lines linking an enterprise to its serving
center could be changed and the end users would like to know what is the new length. Write a
program to keep trace of the changes in the organization of the network that is able in each
moment to answer the questions of the users.



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


Your program has to be ready to solve more than one test case. The first line of the input file will
contains only the number T of the test cases. Each test will start with the number N of enterprises
(5&le;N&le;20000). Then some number of lines (no more than 200000) will follow with one of the
commands:
<blockquote>
	E I  asking the length of the path from the enterprise I to its serving center in the moment;<br>
	I I J  informing that the serving center I is linked to the enterprise J.
</blockquote>
The test case finishes with a line containing the word O. The I commands are less than N.



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

The output should contain as many lines as the number of E commands in all test cases with a
single number each  the asked sum of length of lines connecting the corresponding enterprise with
its serving center.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
4
E 3
I 3 1
E 3
I 1 2
E 3
I 2 4
E 3
O
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0
2
3
5
</PRE>

<P>

______________________________________________________
3028||||||false||||||
<P>
Long time ago one man said, that he had explored the corridors of one cave. It means, that
he was in all corridors of the cave.Corridors are really horizontal or vertical segments. Corridor
counted visited if he was in at least one point of corridor. Now you want to know, is it true. You
have a map of the cave, and you know that explorer used the following algorithm: he turns left if
he can, if he cant he goes straight, if he cant he turns right, if he cant he turns back.
Exploration ends when the man reaches entry point second time. You task to count how many
corridors wasnt visited by explorer.



<P align=center><img src="http://livearchive.onlinejudge.org/external/30/p3028a.gif>
<p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

In the first line there is an integer T (T<=20)  the number of different maps. For each
map in first line there is an integer N (N<=1000)  the number of corridors. It is known that no
two vertical corridors have common point and no two horizontal corridors have common point.
So the next N lines contain such information: the line starts with one of the characters V or H 
vertical or horizontal corridor. Then one Y-coordinate and two X-coordinates are given for a
horizontal corridor or one X-coordinate and two Y-coordinates for a vertical corridor. The last line
for each map contains X and Y coordinates of the entry point (start and end point of travel) and
the direction (W  left, E  right, N  up and S  down). You may assume that: entry point is not
located in the cross-point of two corridors, and explorer can always moves forward by the
direction given in the input. All coordinates are integers and do not exceed 32767 by absolute
value and there is no more than 500 vertical corridors and no more than 500 horizontal corridors.




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each map the program has to print the number of unvisited corridors in separate line.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
6
H 0 6 0
H 2 1 6
V 1 0 4
V 5 3 0
V 3 0 2
H 1 2 4
6 0 W
1
V 0 5 5
0 0 S
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1
0
</PRE>

<P>

______________________________________________________
3029||||||false||||||
<P>
Bob is a strategy game programming specialist. In his new city building game the
gaming environment is as follows: a city is built up by areas, in which there are streets, trees,
factories and buildings. There is still some space in the area that is unoccupied. The strategic
task of his game is to win as much rent money from these free spaces. To win rent money you
must erect buildings, that can only be rectangular, as long and wide as you can. Bob is trying to
find a way to build the biggest possible building in each area. But he comes across some
problems  he is not allowed to destroy already existing buildings, trees, factories and streets in
the area he is building in.

<p>Each area has its width and length. The area is divided into a grid of equal square units.
The rent paid for each unit on which you're building stands is 3$.

<p>Your task is to help Bob solve this problem. The whole city is divided into K areas. Each
one of the areas is rectangular and has a different grid size with its own length M and width N.
The existing occupied units are marked with the symbol R. The unoccupied units are marked
with the symbol F.



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The first line of the input file contains an integer K  determining the number of
datasets. Next lines contain the area descriptions. One description is defined in the following
way: The first line contains two integers-area length M<=1000 and width N<=1000, separated by
a blank space. The next M lines contain N symbols that mark the reserved or free grid units,
separated by a blank space. The symbols used are:
<blockquote>
	R  reserved unit<br>
	F  free unit
</blockquote>
In the end of each area description there is a separating line.




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each data set in the input file print on a separate line, on the standard output, the
integer that represents the profit obtained by erecting the largest building in the area encoded by
the data set.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
5 6
R F F F F F
F F F F F F
R R R F F F
F F F F F F
F F F F F F

5 5
R R R R R
R R R R R
R R R R R
R R R R R
R R R R R
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
45
0
</PRE>

<P>

______________________________________________________
3030||||||false||||||
<P>Your task is to calculate the cube root of a given positive integer. We can not remember why exactly we need this, but it has something in common with a princess, a young peasant, kissing and half of a kingdom (a huge one, we can assure you).<p>Write a program to solve this crucial task.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file consists of large positive integers of up to 150 decimal digits. Each number is on its own separate line of the input file. The input file may contain empty lines. Numbers can be preceded or followed by whitespaces but no line exceeds 255 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each number in the input file your program should output a line consisting of two values separated by single space. The second value is the cube root of the given number, truncated (not rounded!) after the 10th decimal place. First value is a checksum of all printed digits of the cube root, calculated as the sum of the printed digits modulo 10.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
           8

1000

        2
33076161
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1 1.0000000000
2 2.0000000000
1 10.0000000000
0 1.2599210498
6 321.0000000000
</PRE><P>
______________________________________________________
3031||||||false||||||
<P>The interconnection of the relays in a cable TV network is bi-directional. The network is connected if there is at least one interconnection path between each pair of relays present in the network. Otherwise the network is disconnected. An empty network or a network with a single relay is considered connected. The safety factor f of a network with n relays is:<blockquote>1. n, if the net remains connected regardless the number of relays removed from the net.<br>2. The minimal number of relays that disconnect the network when removed.</blockquote><p align=center><img src="http://livearchive.onlinejudge.org/external/30/p3031a.gif><p>For example, consider the nets from figure 1, where the circles mark the relays and the solid lines correspond to interconnection cables. The network (a) is connected regardless the number of relays that are removed and, according to rule (1), f=n=3. The network (b) is disconnected when 0 relays are removed, hence f=0 by rule (2). The network (c) is disconnected when the relays 1 and 2 or 1 and 3 are removed. The safety factor is 2. Write a program that reads several data sets from a text file and computes the safety factor for the cable networks encoded by the data sets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each data set starts with two integers: 0&le;n&le;50, the number of relays in the net, and m, the number of cables in the net. Follow m data pairs (u,v), u &lt; v, where u and v are relay identifiers (integers in the range 0..n-1). The pair (u,v) designates the cable that interconnects the relays u and v. The pairs may occur in any order. Except the (u,v) pairs, which do not contain white spaces, white spaces can occur freely in input. Input data terminate with an end of file and are correct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each data set, the program prints on the standard output, from the beginning of a line, the safety factor of the encoded net.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
0 0
1 0
3 3 (0,1) (0,2) (1,2)
2 0
5 7 (0,1) (0,2) (1,3) (1,2) (1,4) (2,3) (3,4)
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0
1
3
0
2
</PRE><P>
______________________________________________________
3032||||||false||||||
<P>Alibaba the famous character of our childhood stories would like to be immortal in order to keep bringing happiness to children. In order to rich this status he needs to prove that he is still able to do some unusual things. There are n treasures, (n<=10000) each in a different place located along a straight road.
Each treasure has a time limit, after that it vanishes. Alibaba must take all the n
treasures, and he must do it quickly. So he needs to figure out the order in
which he should take the treasures before their deadlines starting from the most
favorable position. Alibaba has the list of places and deadlines of the treasures.
A place i is located at distance d<sub>i</sub> from the leftmost end of the road. The time it
takes to take a treasure is instantaneous. Alibaba must find the smallest time
by which he can take all the treasures.



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


The program input is from a text file. Each data set in the file stands for a
particular set of treasures. For each set of treasures the input contains the
number of treasures, and the list of pairs place - deadline in increasing order of
the locations. White spaces can occur freely between the numbers in the input.
The input data are correct.



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each set of data the program prints the result to
the standard output on a separate line. The solution is represented by the
smallest time by which Alibaba can take all the treasures before they vanish. If
this is not possible then the output is <i>"No solution"</i>.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
1 3
3 1
5 8
8 19
10 15

5
1 5
2 1
3 4
4 2
5 3
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
11
No solution
</PRE>

<P>

______________________________________________________
3033||||||false||||||
<P>Bob has a difficult job. He must distribute advertising booklets for extra school activities in different schools. The booklets have different number of pages. Bob has a list with the number of pages of each booklet and the number of schools that he must visit. He has to distribute the booklets such that each school gets a number of booklets equal to either the lower integer part (LIP), or the upper integer part (UIP) of the number of booklets divided by the number of schools. Poor Bob must obey other rules too. He must distribute all the UIP number of booklets first and then the LIP number of booklets. Any bookflet A that is distributed to a school S<sub>i</sub> must have fewer or at most an equal number of pages that any other booklet B that is distributed to a school S<sub>j</sub>, if S<sub>i</sub> gets the booklets before S<sub>j</sub> (i.e if i < j then pages(A) <=
pages(B)). When Bob distributes the booklets to a school he must distribute
them in the same relative order in which they are on his list. Moreover, he must
distribute them very fast. When he comes back to the advertising company his
boss verifies if he accomplished well his task, by asking him the number of
pages of the first booklet distributed to a specific school, following the order in
which Bob visited the schools (starting with 0). Difficult job, isn't it? Can you
help him?



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The program input is from a text file. Each data set in the file stands for a
particular set of bookets. For each set of booklets the input contains the
number of schools, the school specified by Bob's boss, the number of booklets
(less than 3000), the number of pages of each booklet (fits in
integer). White spaces can occur freely between the numbers in the input.
The input data are correct.




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each set of data the program prints the result to
the standard output on a separate line. The solution is represented by the
number of pages of the first booklet distributed to the specified school.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
2
7
3 5 9 1 11 14 2
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
11
</PRE>

<P>

______________________________________________________
3034||||||false||||||
<P>One of the famous proofs of modern mathematics is Georg Cantor's demonstration that the set of rational numbers is enumerable. The proof works by using an explicit enumeration of rational numbers as shown in the diagram below.<p align=center><img src="http://livearchive.onlinejudge.org/external/30/p3034a.gif><p>In the above diagram, the first term is 1/1, the second term is 1/2, the third term is 2/1, the fourth term is 3/1, the fifth term is 2/2, and so on.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input list contains a single number per line and will be terminated by end-of- file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>You are to write a program that will read a list of numbers in the range from 1 to 10<sup>7</sup> and will print for each number the corresponding term in Cantor's enumeration as given below. No blank line should appear after the last number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
14
7
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
TERM 3 IS 2/1
TERM 14 IS 2/4
TERM 7 IS 1/4
</PRE><P>
______________________________________________________
3035||||||false||||||
<P>Fly It Today! (FIT), an air express company, charges different amounts for packages depending on their weight. For example, one set of rates may be:<P><DIV ALIGN="CENTER"><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Package weight</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Cost per pound</TD></TR><TR><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0 to 9 pounds</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>$10</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>10 to 49 pounds</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>$5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>50 to 99 pounds</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>$3</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>100 pounds or more</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>$2</TD></TR></TABLE></DIV><P>This rate structure has upset some customers who have realized that it costs less to ship a 10 pound package ($50) than an 8 pound package ($80) and it costs less to ship a 100 pound package ($200) than a 90 pound one ($270). FIT wants to check packages to determine if the customer can pay a lower price by adding weight to the package. If this is the case, they want to know the minimum weight to be added to obtain the lowest price possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will have one or more data sets. Each data set begins with exactly 4 lines, giving the shipping rates. These will be:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE><TR VALIGN="MIDDLE"><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>weight</I><SUB>1</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>rate</I><SUB>1</SUB></TD></TR><TR VALIGN="MIDDLE"><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>weight</I><SUB>2</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>rate</I><SUB>2</SUB></TD></TR><TR VALIGN="MIDDLE"><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>weight</I><SUB>3</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>rate</I><SUB>3</SUB></TD></TR><TR VALIGN="MIDDLE"><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>rate</I><SUB>4</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD></TR></TABLE></DIV><P></P><P>You may assume all of these values are positive integers less than 1001 and <!-- MATH
 $weight_1 < weight_2 < weight_3$
 --><SPAN CLASS="MATH"><I>weight</I><SUB>1</SUB> &lt; <I>weight</I><SUB>2</SUB> &lt; <I>weight</I><SUB>3</SUB></SPAN> . The values represent the rate table below:<P><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Weight range</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Rate</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">0 <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3035img1.gif ALT="$ \rightarrow$"> <I>weight</I><SUB>1</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>rate</I><SUB>1</SUB></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>weight</I><SUB>1</SUB> + 1 <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3035img1.gif ALT="$ \rightarrow$"> <I>weight</I><SUB>2</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>rate</I><SUB>2</SUB></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>weight</I><SUB>2</SUB> + 1 <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3035img1.gif ALT="$ \rightarrow$"> <I>weight</I><SUB>3</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>rate</I><SUB>3</SUB></SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>weight</I><SUB>3</SUB> + 1 <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3035img1.gif ALT="$ \rightarrow$"> 1000</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>rate</I><SUB>4</SUB></SPAN></TD></TR></TBODY></TABLE></DIV><P>There will then be 1 or more lines of customer package sizes. Each of these will be a positive integer less than 1001. The end of customer package sizes is indicated by the single integer `<TT>0</TT>'.<P>The end of input will be indicated by end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input set, print the input set number. Then, for each of the customer package sizes in the input set, create a line of output formatted as follows:<P><P><BR><TT>Weight (<SPAN CLASS="MATH">&lt; <I>w</I> &gt;</SPAN>) has best price $<SPAN CLASS="MATH">&lt; <I>price</I> &gt;</SPAN> (add <SPAN CLASS="MATH">&lt; <I>p</I> &gt;</SPAN> pounds)</TT><P><P><BR>Where <SPAN CLASS="MATH">&lt; <I>w</I> &gt;</SPAN> is the weight of the customer package, as defined in the input set, <SPAN CLASS="MATH">&lt; <I>price</I> &gt;</SPAN> is the lowest price the customer can pay to send that package (with, optionally, added weight) based on the input set shipping rates, and <SPAN CLASS="MATH">&lt; <I>p</I> &gt;</SPAN> is the number of pounds to be added to the package to obtain the price (<SPAN CLASS="MATH">&lt; <I>p</I> &gt;</SPAN> must be greater than or equal to 0). If more than one different weight results in the best possible price, use the smaller weight.<P>Have a blank line after the output for each input set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 10 
49 5 
99 3 
2 
8 
10 
90 
100 
200 
0 
10 10 
20 20 
30 30 
100 
1 
12 
29 
50 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Set number 1:
Weight (8) has best price $50 (add 2 pounds)
Weight (10) has best price $50 (add 0 pounds)
Weight (90) has best price $200 (add 10 pounds)
Weight (100) has best price $200 (add 0 pounds)
Weight (200) has best price $400 (add 0 pounds)

Set number 2:
Weight (1) has best price $10 (add 0 pounds)
Weight (12) has best price $240 (add 0 pounds)
Weight (29) has best price $870 (add 0 pounds)
Weight (50) has best price $5000 (add 0 pounds)
</PRE><P>
______________________________________________________
3036||||||false||||||
<P>Freight in Transit (FIT) has ordered shipping cubes from Online Outrageous Printing Services (OOPS). OOPS takes a <SPAN CLASS="MATH">10&#215;10</SPAN> sheet of cardboard, divided into one hundred <SPAN CLASS="MATH">1&#215;1</SPAN> squares and prints exactly six red squares on the cardboard. Each of these six squares is connected to at least one other along one edge. The remaining 94 squares on the cardboard are colored white.<P><P><BR>Unfortunately, OOPS had some quality control problems and not all configurations they deliver to FIT can be folded into a cube. Your job is to write a program to evaluate the red area of the cardboard (after it's been removed from the white sheet) and determine if it can be folded to form a red cube. For example,<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3036.jpg ALT="\epsfbox{p3036.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Can be folded into a cube. Cannot be folded into a cube.</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of one or more data sets, each representing a piece of cardboard with a potential cube. Each piece of cardboard is represented by a <SPAN CLASS="MATH">10&#215;10</SPAN> matrix of characters (10 rows of 10 characters), whose elements are `<TT>R</TT>' and `<TT>.</TT>', which indicate the color of a square as being red or white respectively. Exactly 6 of the squares will be red and all the red squares will share at least one side with a neighboring red square. The end of file will indicate the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each piece of input set, print whether the red area can be folded into a red cube using the wording shown in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
..........
.....R....                  
.....R.... 
....RRR... 
.....R.... 
.......... 
.......... 
.......... 
..........
.......... 
.......... 
.......... 
.......... 
.......... 
.......... 
...R...... 
...R...... 
...RR..... 
...R...... 
...R......
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Board 1: red squares can be folded into a cube
Board 2: impossible
</PRE><P>
______________________________________________________
3037||||||false||||||
<P>The large, ``traditional" airlines operate their routes on a ``hub and spoke" system, which requires most passengers to fly from their originating city to the airline's hub, and from there to their destination city. Your problem is to write a computer program to assign incoming flights to free gates in airports in order to maximize the average distance passengers must cover between gates when they make their connections.<P><P><BR><B>Note:</B> Shouldn't that be to <B>minimize</B> the average distance? You'd think so, but any frequent flyer can tell you that the traditional airlines must be trying to <B>maximize</B> it, so that's what your program should do, too. Airport shop owners are especially glad for this policy.<P><P><BR>The distance between gates in each city is known and can be represented as a matrix. Below is a sample matrix for an airport with 5 gates:<P><DIV ALIGN="CENTER"><TABLE COLS=7 BORDER FRAME=RHS RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=5>To gate</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>From gate</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>50</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>60</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>95</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>120</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>300</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>70</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>30</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>150</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>200</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>95</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>35</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>190</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>190</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>117</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>150</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>200</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>120</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>150</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>315</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>215</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>205</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>165</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>30</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><P><BR>Notice that because of one way passages and security restrictions, the distance from gate A to gate B is not always the same as the distance from gate B to gate A. Additionally, since passengers are sometimes forced to get off even if they are on a connecting flight, you cannot assume the distance from a gate to itself is 0.<P>You should assume the following rules, too, to simplify the problem:<P><OL><LI>Passengers will always be connecting to planes that are already at the airport. Your program doesn't have to ``remember" that a passenger who has already landed needs to connect to a plane that isn't yet at a gate. All passengers will arrive long enough before their connecting flights to make their connections.<P></LI><LI>Your program can ignore passengers that aren't making connections (that is, ignore anyone who originates or ends up at the hub city). In fact, the data won't even include passengers that aren't making connections.<P></LI><LI>You can't predict what flights will arrive in the future, nor when they will arrive, so your program should just assign each incoming flight to a gate in order to maximize the average distance the passengers on <EM>that</EM> flight will have to cover to get to their connections.<P></LI><LI>Just as you can't predict the future, you can't change the past. It may happen that when a new plane arrives, your program will realize that if it had assigned a previous flight to a different gate, it could really increase the average distance the new passengers have to travel. But you can't do anything about it.<P></LI><LI>The program will work throughout a single day. At the start of the day, there will be several planes already at gates they arrived the previous day. At the end of the day, several planes will be left at gates instead of departing again that day.<P></LI><LI>All flights depart on schedule. (Okay, it's a fantasy problem.)<P></LI><LI>There will never be more airplanes at the airport than there are gates.<P></LI><LI>Oh, and there can be at most a single plane at a gate at a time. But, if a plane leaves a gate at a given time, another plane can arrive at that gate at the same time. </LI></OL><P>Assumption 3 and 4 are very important, and help make the problem much more tractable to solve.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The program will consist of one or more input sets representing different airports. Each input set will begin with a three letter airport code, one space, and a single integer, <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3037img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3037img1.gif ALT="$ \le$">30</SPAN>, the number of gates at the airport. There will then be <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each with <SPAN CLASS="MATH"><I>n</I></SPAN> non-negative integers (each less than 10000), giving the distance in feet between each pair of gates. There will be at least one blank between the pairs of number on a line.<P><P><BR>There will then be zero or more lines with a description of the planes already at gates. Each plane's data will be given on a separate line. Each line will start with a gate number (an integer <SPAN CLASS="MATH"><I>g</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3037img1.gif ALT="$ \le$"><I>g</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3037img1.gif ALT="$ \le$"><I>n</I></SPAN>), one or more spaces, the outgoing flight number (an integer between 1 and 9999, inclusive), one or more spaces, and the departure time. All times in this problem will be given as four digits for <SPAN CLASS="MATH"><I>HHMM</I></SPAN>, where <SPAN CLASS="MATH"><I>HH</I></SPAN> is between 00 and 23, inclusive, and <SPAN CLASS="MATH"><I>MM</I></SPAN> is between 00 and 59 inclusive.<P>After the description of planes, there will be a line with just a `<TT>0</TT>' (zero) in it.<P>The remaining lines in the input set will describe incoming planes. The first line of information about a plane will have 4 integers. Each line starts with the arrival time, then one or more spaces, then the flight number (which will be the same flight number used by the plane when it departs the airport), the scheduled departure time (or 9999 if the plane won't leave the airport that day), and the number of connecting flights, <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3037img1.gif ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3037img1.gif ALT="$ \le$"><I>n</I></SPAN>. No two planes will arrive at the same time and they will be listed in ascending order of time. There will then be <SPAN CLASS="MATH"><I>c</I></SPAN> lines of information about connecting flights. These will contain two integers, the connecting flight number, <SPAN CLASS="MATH"><I>f</I></SPAN> and the number of passengers taking that connecting flight, <SPAN CLASS="MATH"><I>p</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3037img1.gif ALT="$ \le$"><I>f</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3037img1.gif ALT="$ \le$">9999</SPAN> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3037img1.gif ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3037img1.gif ALT="$ \le$">500</SPAN>. The last line of the plane description will be a flight with arrival time of `<TT>-1</TT>'. This line will have no other data.<P>Input ends with an airport with 0 gates.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each airport, first print a line with the airport code. Then, for each arriving flight (in the same order as listed in the input file, print the flight number, the gate that causes the longest average passenger connection distance, and the average number of feet each passenger will travel to get to their connecting gate. This average should be rounded to the nearest integer. If two gates both cause the same longest average passenger connection distance, use the lower numbered gate. Have a blank line after each airport's information.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
MCN 5 
50   60  95 120 300 
70    0  30 150 200 
95   35   0 190 190 
117 150 200 120 150 
315 215 205 165  30 
1 712 0620 
5 222 0800
0 
0600 811 0905 2 
712 15 
222 23 
0610 4321 1206 2 
222 40 
811 17
0749 1608 1105 0 
0750 2301 1037 2 
1608 29 
4321 32 
-1 
BAG 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Airport MCN 
Flight 811: gate 3 (153 feet) 
Flight 4321: gate 4 (165 feet) 
Flight 1608: gate 1 (0 feet)
Flight 2301: gate 2 (112 feet)
</PRE><P>
______________________________________________________
3038||||||false||||||
<P>
He's been at it again. The annoying little kid so well known to contest participants (let's call him 
Donaldo, although his name is irrelevant), has peeled the pictures from all of his jigsaw pieces. 
You must write a program that solves the jigsaw puzzle, reassembling the pieces into a rectangle, 
so that he can draw a new picture on the front. 

<P>
The shapes of the jigsaw pieces have all been digitized with a low resolution scanner, and the 
bitmaps converted into easy-to-process text. A complete jigsaw consists of no more than 20 pieces, 
and although those pieces may be extremely irregular in shape, it is guaranteed that they can be 
reassembled into a rectangle in only one way. Also, through a stroke of good luck, they are all 
right side up and correctly oriented, so there is no need to be concerned with possible rotations or
reflections of the pieces. 

<P>

<P>
<BR>
Here is a sample showing how the four pieces of a small puzzle would be represented. The letters 
give the shapes of the pieces, the dots represent empty space. The minimum number of dots are 
added to the representation of each shape in order to make it rectangular. 

<P>
<PRE>
.AA.     .BBBBB...     CC..     DDD...     EEEEEEEEEEEE 
AAAA     BBB..BB..     .CC.     DD....     ..........EE 
AAA.     BB....BB.     ..CC     DD....     ...........E 
         BB...BB..     .CCC     DD.... 
         .BBBBB..B     CC.C     DDD... 
         ..BBBBBBB     ...C     DDDD.. 
         ....BBB..     .CCC     DDDDDD
</PRE> 

<P>
As you can see, the pieces are very irregular, but in this case, knowing that the result should be a 8 
row 12 column rectangle, it is quite easy to reassemble them correctly. In this case, the output from 
your program should be the following reassembled jigsaw rectangle: 

<P>
<PRE>
EEEEEEEEEEEE 
DDDBBBBBCCEE 
DDBBBAABBCCE 
DDBBAAAABBCC 
DDBBAAABBCCC 
DDDBBBBBCCBC 
DDDDBBBBBBBC 
DDDDDDBBBCCC
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of a sequence of jigsaw specifications.  Each jigsaw specification begins 
with a single line containing three integers, the number of rows, <SPAN CLASS="MATH"><I>nr</I></SPAN>,  <!-- MATH
 $0 < nr \le  100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>nr</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3038img1.gif
 ALT="$ \le$">100</SPAN> and the number
of columns, <SPAN CLASS="MATH"><I>nc</I></SPAN>, <!-- MATH
 $0 < nc \le  100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>nc</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3038img1.gif
 ALT="$ \le$">100</SPAN>, in the completed puzzle, and the number, <!-- MATH
 $0 < p \le  20$
 -->
<SPAN CLASS="MATH">0 &lt; <I>p</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3038img1.gif
 ALT="$ \le$">20</SPAN>, of puzzle
pieces.  There follows a sequence of <SPAN CLASS="MATH"><I>p</I></SPAN> puzzle piece descriptions.  Each puzzle piece description
begins with a single line containing two integers between 1 and 100, being the number of rows, <SPAN CLASS="MATH"><I>r</I></SPAN>,
and columns, <SPAN CLASS="MATH"><I>c</I></SPAN>, in the puzzle piece.  This is followed by exactly <SPAN CLASS="MATH"><I>r</I></SPAN> lines consisting of exactly <SPAN CLASS="MATH"><I>c</I></SPAN> dots
or uppercase letters.  For each piece description, only one letter is used: the first piece consists of 
only dots and <TT>A</TT>'s; the second (if there is one) consists of only dots and <TT>B</TT>'s; the third consists of
only dots and <TT>C</TT>'s, etc.  The pieces are guaranteed to give a unique solution.  After the end of the
final jigsaw specification, there is a line containing `<TT>0 0 0</TT>' (three zeros) which should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input jigsaw specification, your program should print a line `<TT>JIGSAW <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN></TT>', where <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN>
is replaced by the problem number (the first being 1), followed by the rectangle of letters
representing the reassembled jigsaw. A blank line should follow the output for each puzzle.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 3 4
3 2
AA
A.
AA
1 2
BB
1 1
C
2 3
..D
DDD
15 24 4
8 21
AAAA.....AAA.........
AAAAA...AAAA.........
AAAAA...AAAA...AAAAA.
AAAA.....AAAAAAAAAAAA
AAA.......AAAAAAAAAAA
AAAA.....AAA...AAAAA.
AAAAA...AAAA.........
AAAAAAAAAAAA.........
7 21
.........BBBBBBBBBBBB
.........BBBBBBBBBBBB
..BBBB...BBBB....BBBB
BBBBBBBBBBBBB....BBBB
BBBBBBBBBBBBB....BBBB
..BBBB...BBBBB..BBBBB
.........BBBB....BBBB
14 12
CCCCCCCCCCCC
CCCCCCCCCCCC
CCCCC....CCC
CCC.........
CCC.........
CCCCC....CCC
CCCCCCCCCCCC
....CCCCC...
.....CCC....
.....CCC....
....CCCCC...
...CCCCCCC..
....CCCCC...
.....CCC....
13 12
....DDDD....
....DDDD....
....DDDD....
.....DD.....
....DDDD....
DDDDDDDDDDDD
DDDDDDDDDDDD
DDD.....DDDD
.........DDD
.........DDD
DDD.....DDDD
DDDDDDDDDDDD
DDDDDDDDDDDD
0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
JIGSAW 1
AAC
ABB
AAD
DDD

JIGSAW 2
CCCCCCCCCCCCBBBBBBBBBBBB
CCCCCCCCCCCCBBBBBBBBBBBB
CCCCCBBBBCCCBBBBDDDDBBBB
CCCBBBBBBBBBBBBBDDDDBBBB
CCCBBBBBBBBBBBBBDDDDBBBB
CCCCCBBBBCCCBBBBBDDBBBBB
CCCCCCCCCCCCBBBBDDDDBBBB
AAAACCCCCAAADDDDDDDDDDDD
AAAAACCCAAAADDDDDDDDDDDD
AAAAACCCAAAADDDAAAAADDDD
AAAACCCCCAAAAAAAAAAAADDD
AAACCCCCCCAAAAAAAAAAADDD
AAAACCCCCAAADDDAAAAADDDD
AAAAACCCAAAADDDDDDDDDDDD
AAAAAAAAAAAADDDDDDDDDDDD
</PRE>

<P>

______________________________________________________
3039||||||false||||||
<P>
PC Modding has become the latest trendy hobby sweeping the nation.  Since you don't
have too much money to spare, and since modding is supposed to be a Do-It-Yourself
sort of activity, you've decided to apply some simple modifications to your own PC.

<P>
One quick modification you figured wouldn't cost too much is to add some Light 
Emitting Diodes (LEDs) to your case. Thus, you bought yourself some LEDs, and, once 
they arrived to your house, you started looking for power.  In order to draw power from 
one of the standard connectors on your motherboard you would need a connector. Alas, 
you forgot to order any of those.  You're left with your back-up plan: take the power from 
the USB adapter available on your motherboard using a USB cable, and plug in your 
bright blue LEDs. You have the USB cable ready to go, but you realize that you still have 
a problem to solve: the USB port on the motherboard does not always provide power at 
the same voltage required by the LEDs.  Looking around, you find a convenient box of 
resistors that might just do the trick. 

<P>
Fortunately, you remember Ohm's Law: 
<!-- MATH
 \begin{displaymath}
Voltage (in volts) = Current (in amperes) * Resistance (in ohms)
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>Voltage</I>(<I>involts</I>) = <I>Current</I>(<I>inamperes</I>)*<I>Resistance</I>(<I>inohms</I>)
</DIV><P></P>
and realize you can use resistance to lower the voltage provided by the USB adapter to 
that expected by the LEDs.  You even remember that if you can't reduce the voltage to 
exactly what they expect, you can still get a nice glow if you reduce it to below the 
expected voltage.  Of course, if you provide too much voltage, you'll get a very short
bright display, but you don't want to destroy your LEDs, so this is not acceptable.  
Likewise, if the voltage provided is 0 or lower, there will be no power to the LED, so this 
case is also unacceptable. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file for this problem includes a series of 1 or more test cases. 

<P>
Each test case begins with a line formatted as follows:

<P>

<P>
<BR>

<!-- MATH
 $<USB>\ <LED\_V>\ <LED\_mA>\ <N>$
 -->
<SPAN CLASS="MATH">&lt; <I>USB</I> &gt; &nbsp; &lt; <I>LED</I><IMG
 WIDTH="25" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3039img1.gif
 ALT="$ \_V$"> &gt; &nbsp; &lt; <I>LED</I><IMG
 WIDTH="39" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3039img1.gif
 ALT="$ \_mA$"> &gt; &nbsp; &lt; <I>N</I> &gt;</SPAN>

<P>

<P>
<BR>
Where:
<DL>
<DT><STRONG><SPAN CLASS="MATH">&lt; <I>USB</I> &gt;</SPAN></STRONG></DT>
<DD>is a positive integer value indicating how many volts the USB adapter on the
        motherboard produces;
</DD>
<DT><STRONG><SPAN CLASS="MATH">&lt; <I>LED</I><IMG
 WIDTH="25" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3039img1.gif
 ALT="$ \_V$"> &gt;</SPAN></STRONG></DT>
<DD>is a positive integer value indicating how many volts the LEDs expect to
        receive;
</DD>
<DT><STRONG><SPAN CLASS="MATH">&lt; <I>LED</I><IMG
 WIDTH="39" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3039img1.gif
 ALT="$ \_mA$"> &gt;</SPAN></STRONG></DT>
<DD>is a positive integer value, in milliampere (each milliampere is a thousandth
        of an ampere) indicating the current at which the LEDs operate;
</DD>
<DT><STRONG><SPAN CLASS="MATH">&lt; <I>N</I> &gt;</SPAN></STRONG></DT>
<DD>is a non-negative integer number indicating how many types of resistors are
        available in the test case.
</DD>
</DL>

<P>
This line is followed by <SPAN CLASS="MATH">&lt; <I>N</I> &gt;</SPAN> lines each describing a type of resistor available. All types
of resistors available in a given test case are different from each other. This means that
their names and resistance values are all different.  These lines are formatted as follows:

<P>

<P>
<BR>

<!-- MATH
 $<Resistor\_Name>\ <Resistance>$
 -->
<SPAN CLASS="MATH">&lt; <I>Resistor</I><IMG
 WIDTH="59" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3039img1.gif
 ALT="$ \_Name$"> &gt; &nbsp; &lt; <I>Resistance</I> &gt;</SPAN>

<P>

<P>
<BR>
Where <!-- MATH
 $<Resistor\_Name>$
 -->
<SPAN CLASS="MATH">&lt; <I>Resistor</I><IMG
 WIDTH="59" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3039img1.gif
 ALT="$ \_Name$"> &gt;</SPAN> is a sequence of at most 40 alphabetic characters, and
<!-- MATH
 $<Resistance>$
 -->
<SPAN CLASS="MATH">&lt; <I>Resistance</I> &gt;</SPAN> is a positive integer, giving the resistance of that type of resistors,
measured in ohms.

<P>
The end of input will be indicated by end of file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input file you should produce a single line in the output file
formatted as follows:

<P>

<P>
<BR>

<!-- MATH
 $<Optimum\_Res>\ <Resistor\_Name>$
 -->
<SPAN CLASS="MATH">&lt; <I>Optimum</I><IMG
 WIDTH="40" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3039img1.gif
 ALT="$ \_Res$"> &gt; &nbsp; &lt; <I>Resistor</I><IMG
 WIDTH="59" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3039img1.gif
 ALT="$ \_Name$"> &gt;</SPAN>

<P>

<P>
<BR>
Where <!-- MATH
 $<Optimum\_Res>$
 -->
<SPAN CLASS="MATH">&lt; <I>Optimum</I><IMG
 WIDTH="40" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3039img1.gif
 ALT="$ \_Res$"> &gt;</SPAN> is the optimum resistance in ohms that should be added to the
circuit to make the LEDs receive the power they expect, and <!-- MATH
 $<Resistor\_Name>$
 -->
<SPAN CLASS="MATH">&lt; <I>Resistor</I><IMG
 WIDTH="59" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/30/3039img1.gif
 ALT="$ \_Name$"> &gt;</SPAN> is the
name of the resistor, out of those available in the test case, that should be used.  In
displaying the optimal resistance, use 2 decimal digits, rounding any additional digits.
When no resistor available provides the optimal resistance for the test case, you should
select the resistor that is the closest to the optimum resistance and still makes the circuit
work (providing to the LEDs less current than they expect).

<P>
If the circuit cannot be made to work with the given parts, instead of a line formatted as
described above, your output file should include a line with only the `<TT>IMPOSSIBLE</TT>'
string in it.

<P>
If the USB port provides acceptable voltage without addition to resistance to the LED,
the output line should only include the `<TT>--</TT>' string.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 3 20 2                           
Red 90                              
Orange 110                         
5 3 20 2                           
ThisOne 110 
TheOtherOne 100 
5 3 20 1 
TooLittle 90 
5 5 20 1 
Sample 10
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
100.00 Orange 
100.00 TheOtherOne
IMPOSSIBLE 
---
</PRE>  

<P>

______________________________________________________
3040||||||false||||||
<P>The Airport Corporate March is held every year and the employees of First International Travel (FIT) march in the parade. But FIT is a very structured company and does not want fraternization between supervisors and the people they supervise, so the employees march in numerous separate groups. The rules for marching in the parade are:<P><OL><LI>A supervisor must march in a group in front of the group(s) with his or her subordinates (If A is the supervisor of B, then B is the subordinate of A).<P></LI><LI>You can march in a group with others if none of the others are your subordinates or supervisors. There is no order assumed in a group. </LI></OL><P>The rules for supervision are:<P><OL><LI>An employee can have zero or more supervisors<P></LI><LI>An employee cannot be the supervisor of himself<P></LI><LI>If A is a supervisor of B and B is a supervisor of C, then A is a supervisor of C. </LI></OL><P>A lineup for the parade consists of an ordering of individuals and groups. For example, if 1 and 2 are supervisors of 3 and 3 is the supervisor of 4 and 5, then the possible parade lineups are:<P><PRE>
1    2    1    2    12   12   1    2    12
2    1    2    1    3    3    2    1    3
3    3    3    3    4    5    3    3    45
4    4    5    5    5    4    45   45
5    5    4    4
</PRE><P>Note that the group 12 is considered the same group as 21 since there is no order within a group.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of one or more data sets. The first line of each data set will be a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3040img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3040img1.gif ALT="$ \le$">10</SPAN>, the number of employees to march in the parade. A data set with 0 employees represents the end of input and should not be processed.<P>There will then be one or more lines with one pair of integers per line, <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3040img1.gif ALT="$ \le$"><I>a</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3040img1.gif ALT="$ \le$"><I>n</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3040img1.gif ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3040img1.gif ALT="$ \le$"><I>n</I></SPAN>, indicating employee <SPAN CLASS="MATH"><I>a</I></SPAN> is the direct supervisor of employee <SPAN CLASS="MATH"><I>b</I></SPAN>. The numbers will be separated by at least one space. You may assume the data is logical (so, for example, you will not have both 1 2 and 2 1 in the same data set). The last pair will be `<TT>0 0</TT>' and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, print the number of the data set (starting at 1) and the number of possible parade line-ups. Follow the format in the sample output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
1 3
2 3
3 4
3 5
0 0
2
0 0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Data set 1: 9 possibilities
Data set 2: 3 possibilities
</PRE><P>
______________________________________________________
3041||||||false||||||
<P>PTA, Pack `em Tight Airlines is attempting the seemingly impossible-to fly with <B>only</B> full planes and still make a profit. Their strategy is simplicity and efficiency. Their fleet consists of 2 types of equipment (airline lingo for airplanes). <EM>Type A</EM> aircraft cost <SPAN CLASS="MATH"><I>cost</I><SUB>A</SUB></SPAN> dollars to operate per flight and can carry <SPAN CLASS="MATH"><I>passengers</I><SUB>A</SUB></SPAN> passengers. <EM>Type B</EM> aircraft cost <SPAN CLASS="MATH"><I>cost</I><SUB>B</SUB></SPAN> dollars to operate per flight and can carry <SPAN CLASS="MATH"><I>passengers</I><SUB>B</SUB></SPAN> passengers.<P>PTA has been using software that works well for fewer than 100 passengers, but will be <EM>far too slow</EM> for the number of passengers they expect to have with larger aircraft. PTA wants you to write a program that <EM>fills each aircraft to capacity</EM> (in keeping with the name Pack 'em Tight) and also minimizes the total cost of operations for that route.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file may contain data sets. Each data set begins with a line containing the integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3041img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3041img1.gif ALT="$ \le$">2, 000, 000, 000</SPAN>) which represents the number of passengers for that route. The second line contains <SPAN CLASS="MATH"><I>cost</I><SUB>A</SUB></SPAN> and <SPAN CLASS="MATH"><I>passengers</I><SUB>A</SUB></SPAN>, and the third line contains <SPAN CLASS="MATH"><I>cost</I><SUB>B</SUB></SPAN> and <SPAN CLASS="MATH"><I>passengers</I><SUB>B</SUB></SPAN>. There will be white space between the pairs of values on each line. Here, <SPAN CLASS="MATH"><I>cost</I><SUB>A</SUB></SPAN>, <SPAN CLASS="MATH"><I>passengers</I><SUB>A</SUB></SPAN>, <SPAN CLASS="MATH"><I>cost</I><SUB>B</SUB></SPAN>, and <SPAN CLASS="MATH"><I>passengers</I><SUB>B</SUB></SPAN> are all nonnegative integers having values less than 2,000,000,001.<P>After the end of the final data set, there is a line containing `<TT>0</TT>' (one zero) which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set in the input file, the output file should contain a single line formatted as follows:<P><P><BR><TT>Data set <SPAN CLASS="MATH">&lt; <I>N</I> &gt;</SPAN>: <SPAN CLASS="MATH">&lt; <I>A</I> &gt;</SPAN> aircraft A, <SPAN CLASS="MATH">&lt; <I>B</I> &gt;</SPAN> aircraft B</TT><P><P><BR>Where <SPAN CLASS="MATH">&lt; <I>N</I> &gt;</SPAN> is an integer number equal to 1 for the first data set, and incremented by one for each subsequent data set, <SPAN CLASS="MATH">&lt; <I>A</I> &gt;</SPAN> is the number of airplanes of type A in the optimal solution for the test case, and <SPAN CLASS="MATH">&lt; <I>B</I> &gt;</SPAN> is the number of airplanes of type B in the optimal solution. The 'optimal' solution is a solution that lets PTA carry the number of passengers specified in the input for that data set using only airplanes loaded to their full capacity and that minimizes the cost of operating the required flights. If multiple alternatives exist fitting this description, select the one that uses most airplanes of type A. If no solution exists for PTA to fly the given number of passengers, the out line should be formatted as follows:<P><P><BR><TT>Data set <SPAN CLASS="MATH">&lt; <I>N</I> &gt;</SPAN>: cannot be flown</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
600
30 20
20 40
550
1 13
2 29
549
1 13
2 29
2000000000
1 2
3 7
599
11 20
22 40
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Data set 1: 0 aircraft A, 15 aircraft B
Data set 2: 20 aircraft A, 10 aircraft B
Data set 3: 11 aircraft A, 14 aircraft B
Data set 4: 6 aircraft A, 285714284 aircraft B
Data set 5: cannot be flown
</PRE><P>
______________________________________________________
3042||||||false||||||
<P>
Aircraft Closeting and Management (ACM) provides hangar service for aircraft.  When hired by 
an airport, ACM builds two hangars facing each other.  The number of planes the hangars can 
hold depends on the demand expected by the airport.  As aircraft arrive, they are put in either the 
left or right hangar, depending on which is less full.  If both hangars have the same number of 
empty spaces, planes are directed to the hangar with fewer planes.  If both hangars have the same 
number of free spaces and the same number of planes, a new plane is put in the left hangar.  If 
there are no more spaces, a message is printed and the plane is turned away.  When a plane is put 
into a hangar, it blocks all the other planes in the hangar.   

<P>

<P>
<BR>
For example, suppose ACM provided two hangars for Florida International Tourists (FIT)
Airport, the left hangar with a capacity of 5 planes and the right with a capacity of 3.  When the
first plane, Plane1, arrives, it will be put into the left hangar, since there are 5 empty spaces in
the left hangar and 3 empty spaces in the right hangar:

<P align=center><img src=p3042a.gif>

<P>
<BR>
When the second plane, Plane2, arrives, it will be put into the left hangar, since there are 4 empty
spaces in the left hangar and 3 empty spaces in the right hangar:

<P align=center><img src=p3042b.gif>

<P>
<BR>
When the third plane, Plane3, arrives, it will be put into the right hangar since both hangars have
3 empty spaces and there are fewer planes in the right hangar.

<P align=center><img src=p3042c.gif>

<P>
<BR>
When the fourth, fifth, and sixth planes, Plane4, Plane5, and Plane6, arrive, they will be placed
according to the rules as shown:

<P align=center><img src=p3042d.gif>

<P>
<BR>
As aircraft leave, the planes blocking it are moved to the other hangar, in reverse order of arrival.
If there is not enough space to move all of the blocking planes into the other hangar, the plane is
not allowed to leave.  So, if in the scenario above, Plane3 wanted to leave, Plane5 would be
moved into the left hangar and Plane3 would leave:

<P align=center><img src=p3042e.gif>

<P>
<BR>
Finally, if Plane1 wanted to leave, it could not, because there is not enough space in the right
hangar for Plane5, Plane6, Plane4, and Plane2.  No planes would move in this case.

<P>

<P>
<BR>
ACM has asked you to write simulation software to see how well this hangar scheme will work.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file will have one or more data sets.  The first line of each dataset will be a line which
begins with the word `<TT>Airport:</TT>' followed by 0 or more spaces and the name of the airport (a
string of 1 or more characters).  The second line will have two integers, <SPAN CLASS="MATH"><I>left</I></SPAN> and <SPAN CLASS="MATH"><I>right</I></SPAN>,
<!-- MATH
 $0 < left < 101$
 -->
<SPAN CLASS="MATH">0 &lt; <I>left</I> &lt; 101</SPAN>, <!-- MATH
 $0 < right < 101$
 -->
<SPAN CLASS="MATH">0 &lt; <I>right</I> &lt; 101</SPAN>, the capacity of the left and right hangars.  There will then be one
or more lines of commands.   These may be:

<P>

<UL>
<LI>Plane arrivals.  The line will begin with the word `<TT>Arrival:</TT>' followed by 0 or more
spaces and the name of plane (a string of 1 or more characters).  Blanks at the ends of
plane names should be removed.  Case is significant in plane names.  You may assume
that a plane that arrives will have a name different from any other plane already in the
hangars.  The plane should be put into the left or right hangar based on the given rules.  If
        there is no empty space available, print the message:

<P>

<P>
<BR>
        
        <TT><!-- MATH
 $plane-name$
 -->
<SPAN CLASS="MATH"><I>plane</I> - <I>name</I></SPAN> could not be parked.</TT>

<P>
</LI>
<LI>Plane departures.  The line will begin with the word `<TT>Departure:</TT>' followed by 0 or
more spaces and the name of plane (a string of 1 or more characters).  You may assume
that a plane that arrives will be in one of the hangars.  If the plane cannot be removed, print the message:

<P>

<P>
<BR>
        
        <TT><!-- MATH
 $plane-name$
 -->
<SPAN CLASS="MATH"><I>plane</I> - <I>name</I></SPAN> could not be removed.</TT>

<P>
</LI>
<LI>Updates.  The line will begin with the word `<TT>Display:</TT>' followed by 0 or more spaces
and one of `<TT>left</TT>', `<TT>right</TT>', or `<TT>both</TT>'.  Print the name and contents of the named
hangar(s), one plane per line, starting with the plane nearest the exit, using the format
shown in the sample output.  If both hangars are printed, the left should be printed first.
</LI>
</UL>

<P>
The end of input will be indicated by the word `<TT>Done:</TT>' on a line by itself.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, print a line with the name of the airport.  Then produce any output created by
the data commands.  Have a blank line after the output for each data set. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Airport: Florida International Tourists' Airport 
5 3 
Arrival: Plane1 
Arrival:Plane2 
Arrival:Plane 3
Arrival:    Plane four 
Arrival: Plane5 
Arrival: Six 
Display: left 
Departure: Plane 3 
Display:right 
Arrival: Seven 
Departure:  Plane1 
Arrival: Eight 
Departure: Six   
Display:    both 
Airport: Waldo General 
1 1 
Arrival: Crop duster 
Arrival: Stunt plane 
Arrival: Cessna 
Display: both 
Done:
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Airport: Florida International Tourists' Airport 
Left hangar: 
   Six 
   Plane four 
   Plane2 
   Plane1 
Right hangar: 
Plane1 could not be removed. 
Left hangar: 
   Plane four
   Plane2 
   Plane1 
Right hangar: 
   Plane5 
   Eight 
   Seven 

Airport: Waldo General 
Cessna could not be parked 
Left hangar: 
   Crop duster 
Right hangar: 
   Stunt plane
</PRE>  

<P>

______________________________________________________
3043||||||false||||||
<P>When there's a big tennis tournament going on, many airline passengers want to know the latest news as soon as they get off their flights. Flight Information Television (FIT) has a group of in-airport televisions to display latest sports results, including tennis and want your help to display the results of tennis matches.<P>Each tennis match is divided into sets. Each set is divided into games. Each game is divided into points. Your task is to write a program that produces the score for each set and the name of the winner of a match, if there is one.<P>The rules of the game are as follows (these rules are adapted from those found at tennis101.com):<P><DL><DT><STRONG><B>1 - Alternating Servers</B></STRONG></DT><DD><P>At the beginning of the first game, one player shall be called the Server, and the other the Receiver. At the end of the first game the Receiver shall become Server, and the Server Receiver; and so on alternately in all the subsequent games. The Server's score is always listed first in a score pair.<P></DD><DT><STRONG><B>2 - Score in a Game</B></STRONG></DT><DD><P>If a player wins her first point, the score is called 15 for that player; on winning her second point, the score is called 30 for that player; on winning her third point, the score is called 40 for that player, and the fourth point won by a player is called "game" for that player except as below:<P>If both players have won three points, the score is 40/40 which is called "deuce". If the Server wins the next point, she has a scored the "advantage" and the score is given as "advantage-in" or "ad-in" for short. However, if the Receiver wins at "deuce" the advantage is given to the Receiver and score is called "advantage-out" or "ad-out" for short. If the same player wins the next point, she wins the game; if the other player wins the next point the score returns to "deuce"; and so on, until a player wins the two points immediately following the score of "deuce".<P></DD><DT><STRONG><B>3. Score in a Set</B></STRONG></DT><DD><P>A player who first wins six games wins a set; except that she must win by a margin of two games over her opponent and if necessary a set is extended until this margin is achieved.<P></DD><DT><STRONG><B>4. Maximum Number of Sets</B></STRONG></DT><DD><P>The maximum number of sets in a match shall be 3. The winner of the match is the person that wins 2 sets.</DD></DL><P>Immediately after each point, the score of the game is called and the information about the games is sent to FIT.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of one or more data sets, each representing a match. The first line of each data set contains the names of the players. There will be two strings of 1 to 80 letters, separated by at least one space. The first name on the line will be the Server for the first game. The next one or more lines of the data set contain the scores called out during a single game. One line will hold all the scores called during one game. These scores will either be a pair of numbers separated by white space (such as `<TT>0 0</TT>' or `<TT>40 15</TT>') or one of the words `<TT>ad-in</TT>', `<TT>ad-out</TT>', `<TT>deuce</TT>', or `<TT>game</TT>'. All words in the score will be in lower case. No score will be given after a player has won, so each line will be terminated with the word `<TT>game</TT>'. There will be at least one space between all scores on the score lines. The score lines for a game will end with a single line with the word `<TT>done</TT>'. Each score line will represent a completed game, but the match, or even the set, may not be completed.<P>A line with the single word `<TT>quit</TT>' instead of the pair of names indicates the end of the input data.<P>You may assume all score lines represent valid games and there are never more score lines than are necessary for a match.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each match will consist of three lines. The first line will have the names of the two players in the same case and order listed in the input, separated by a single hyphen. The next line will have the number of games won by each player in each set separated by white space. For each set, have the games won by the first player listed first, a single hyphen, then the games won by the second player. Sets with a score of 0-0 should not be listed. The third line will either have the name of the player who won followed by the word `<TT>won</TT>' or the words `<TT>Match in progress</TT>' for a match that is not yet complete.<P>Print a blank line after the output for each data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ann mary
0 0  0 15 15 15     30 15     40 15     40 30     game
0 0  15 0 15 15     30 15     30 30     30 40     game
0 0  15 0 15 15     30 15     30 30     30 40     game
0 0  15 0 15 15     30 15     40 15     game
0 0  15 0 30 0      40 0 game
0 0  15 0 30 0 40 0 game
0 0  15 0 15 15     30 15     40 15     game
0 0  15 0 30 0 40 0 game
0 0  0 15 0 30 0 40 game
0 0  15 0 30 0 40 0 game
0 0  0 15 0 30 0 40 game
0 0  15 0 15 15 15 30  30 30  40 30 deuce     ad-in     game
0 0  15 0 30 0 40 0 game
done
Sara Nina
0 0  0 15 15 15     30 15     40 15     40 30     game
0 0  15 0 15 15     30 15     30 30     30 40     game
0 0 15 0 15 15 15 30 30 30 40 30 deuce ad-in deuce ad-in game
0 0  15 0 30 0 30 15     30 30     40 30 deuce ad-out  game
0 0  0 15 0 30 15 30 15 40 30 40 deuce ad-out deuce ad-in game
0 0  15 0 15 15     30 15     30 30     30 40     game
0 0  15 0 15 15     30 15     40 15     game
0 0  15 0 30 0      40 0 game
0 0  15 0 30 0 40 0 game
0 0  15 0 15 15     30 15     40 15     game
0 0  15 0 30 0 40 0 game
0 0  0 15 0 30 0 40 game
0 0  15 0 30 0 40 0 game
0 0  0 15 0 30 0 40 game
done
quit
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ann-mary
4-6 1-2
Match in progress

Sara-Nina
6-0 6-2
Sara won
</PRE><P>
______________________________________________________
3044||||||false||||||
<P>There exist a number of computer simulation models that are available to predict the path of hurricanes. When using a specific model, one of the parameters that should be considered is its historical reliability.<P>In this problem, you are given a series of data regarding past storms and the predictions for those storms made by a number of different models. Your task is to determine the most accurate prediction model for each test scenario. By 'most accurate', we mean the model that has the smallest overall error in predicting storm position and movement.<P>The overall error of the model is the sum of the errors over all of a set of sample points. For each sample point, you will be given the actual position of the storm at that instant, and the position that the model had predicted. The error for that sample point is calculated as the following expression:<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&nbsp;</TD><TD>&nbsp;</TD><TD ALIGN="LEFT" NOWRAP>| <I>predicted</I>&nbsp;<I>latitude</I>&nbsp;(in minutes) - <I>actual</I>&nbsp;<I>latitude</I>&nbsp;(in minutes)|</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&nbsp;</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>+</TD><TD ALIGN="LEFT" NOWRAP>| <I>predicted</I>&nbsp;<I>longitude</I>&nbsp;(in minutes) - <I>actual</I>&nbsp;<I>longitude</I>&nbsp;(in minutes)|</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&nbsp;</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>+</TD><TD ALIGN="LEFT" NOWRAP>| <I>predicted</I>&nbsp;<I>direction</I>&nbsp;(in degrees) - <I>actual</I>&nbsp;<I>direction</I>&nbsp;(in degrees)|</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">&nbsp;</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>+</TD><TD ALIGN="LEFT" NOWRAP>| <I>predicted</I>&nbsp;<I>speed</I> - <I>actual</I>&nbsp;<I>speed</I>|</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P><P>Latitude is measured in degrees and minutes north or south of the equator (which is both 0N and 0S latitude). Longitude is measured in degrees and minutes east or west from the Greenwich Meridian (which is both 0E and 0W longitude). The 180th Meridian is at the opposite side of the Greenwich Meridian and represents 180 degrees east and 180 degrees west. There are 60 minutes to a degree. The difference between two longitude measurements should always be calculated as the smallest angle between the two readings. For example, the absolute difference between 179 degrees, 0 minutes east and 179 degrees, 0 minutes west is 120 minutes rather than 21480 minutes.<P>Directions are measured clockwise from 0 degrees (due north) to 359 degrees (one degree west of north). The difference between two directions should always be calculated as the smallest angle between the two directions. For example, the absolute difference between a direction of 1 degree and 359 degrees is 2 degrees rather than 358 degrees.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains one or more test scenarios. Each test scenario begins with a line containing 2 positive integers less than 100, <SPAN CLASS="MATH"><I>h</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>, representing respectively the number of hurricanes and the number of models described in the test scenario.<P>After this line, there will be <SPAN CLASS="MATH"><I>h</I></SPAN> hurricane records. Each hurricane record begins with a line formatted as follows:<P><P><BR><TT>HURRICANE <SPAN CLASS="MATH"><I>HurricaneName</I>&nbsp;<I>N</I></SPAN></TT><P><P><BR>where <SPAN CLASS="MATH"><I>HurricaneName</I></SPAN> is a sequence of up to 25 alphanumeric characters (no spaces) and <SPAN CLASS="MATH"><I>N</I></SPAN> is an integer, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$">100</SPAN>. This line is followed by <SPAN CLASS="MATH"><I>N</I></SPAN> lines, each giving the position of the hurricane at a different point in time, formatted as follows:<P><P><BR><TT><SPAN CLASS="MATH"><I>YYYY</I></SPAN>-<SPAN CLASS="MATH"><I>MM</I></SPAN>-<SPAN CLASS="MATH"><I>DD</I></SPAN> <SPAN CLASS="MATH"><I>hh</I></SPAN>:<SPAN CLASS="MATH"><I>mm</I></SPAN> <SPAN CLASS="MATH"><I>latitude</I></SPAN> <SPAN CLASS="MATH"><I>longitude</I></SPAN> <SPAN CLASS="MATH"><I>direction</I></SPAN> <SPAN CLASS="MATH"><I>speed</I></SPAN></TT><P><P><BR>where:<P><UL><LI><TT><SPAN CLASS="MATH"><I>YYYY</I></SPAN>-<SPAN CLASS="MATH"><I>MM</I></SPAN>-<SPAN CLASS="MATH"><I>DD</I></SPAN> <SPAN CLASS="MATH"><I>hh</I></SPAN>:<SPAN CLASS="MATH"><I>mm</I></SPAN></TT> gives the military time (24 hour clock) of this sample point and is guaranteed to be a valid date/time.<P></LI><LI>latitude is an integer, <SPAN CLASS="MATH"><I>degrees</I></SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$"><I>degrees</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$">90</SPAN>, followed by a `<TT>d</TT>', then an integer <SPAN CLASS="MATH"><I>minutes</I></SPAN>, <!-- MATH
 $0 \le  minutes < 60$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$"><I>minutes</I> &lt; 60</SPAN>, followed by either an `<TT>N</TT>' or an `<TT>S</TT>'. There will be no embedded spaces.<P></LI><LI>longitude is a integer, <SPAN CLASS="MATH"><I>degrees</I></SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$"><I>degrees</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$">180</SPAN>, followed by a `<TT>d</TT>', then an integer <SPAN CLASS="MATH"><I>minutes</I></SPAN>, <!-- MATH
 $0 \le  minutes < 60$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$"><I>minutes</I> &lt; 60</SPAN>, followed by either an `<TT>E</TT>' or a `<TT>W</TT>'. There will be no embedded spaces.<P></LI><LI><SPAN CLASS="MATH"><I>direction</I></SPAN> is an integer, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$"><I>direction</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$">359</SPAN>, which represents the direction of movement of the storm<P></LI><LI>and <SPAN CLASS="MATH"><I>speed</I></SPAN> is an integer, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$"><I>speed</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3044img1.gif ALT="$ \le$">180</SPAN>. </LI></UL><P>After the <SPAN CLASS="MATH"><I>h</I></SPAN> hurricane records, each test scenario includes <SPAN CLASS="MATH"><I>m</I></SPAN> model records. Each model record begins with a line formatted as follows:<P><P><BR><TT>MODEL <SPAN CLASS="MATH"><I>ModelName</I></SPAN></TT><P><P><BR>where <SPAN CLASS="MATH"><I>ModelName</I></SPAN> is a sequence of up to 50 alphanumeric characters, which may also include embedded blanks (but leading and trailing blanks are not part of the <SPAN CLASS="MATH"><I>ModelName</I></SPAN>), and is the name of the model. After this line there will be a series of lines describing the predictions of the model corresponding to each sample point given for each hurricane in the test scenario, formatted as before but preceded by the hurricane name:<P><P><BR><TT><SPAN CLASS="MATH"><I>HurricaneName</I></SPAN> <SPAN CLASS="MATH"><I>YYYY</I></SPAN>-<SPAN CLASS="MATH"><I>MM</I></SPAN>-<SPAN CLASS="MATH"><I>DD</I></SPAN> <SPAN CLASS="MATH"><I>hh</I></SPAN>:<SPAN CLASS="MATH"><I>mm</I></SPAN> <SPAN CLASS="MATH"><I>latitude</I></SPAN> <SPAN CLASS="MATH"><I>longitude</I></SPAN> <SPAN CLASS="MATH"><I>direction</I></SPAN> <SPAN CLASS="MATH"><I>speed</I></SPAN></TT><P><P><BR>For a given test scenario, all model and hurricane names are unique. The end of file will indicate no more test scenarios.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test scenario, your output file should have a header line followed by one or more lines. The first line should be formatted as follows:<P><P><BR><TT>TEST <SPAN CLASS="MATH"><I>x</I></SPAN></TT><P><P><BR>where <SPAN CLASS="MATH"><I>x</I></SPAN> is the test scenario number (starting at 1). After this line, you should list in alphabetical order the one or more 'most accurate' models, one to a line. This should be followed by a line containing only 20 dashes: `<TT>----------</TT>'<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 2
HURRICANE Hillary 2
2004-08-30 10:00 24d0N 85d30W 1 10
2004-08-30 18:00 25d0N 84d30W 1 10
MODEL ModelOne
Hillary 2004-08-30 18:00 23d0N 83d30W 2 20
Hillary 2004-08-30 10:00 22d0N 82d30W 2 20
MODEL ModelTwo
Hillary 2004-08-30 10:00 24d0N 93d30W 21 10
Hillary 2004-08-30 18:00 24d0N 90d0W 25 10
2 3
HURRICANE Gertrude 2
2005-07-01 09:00 30d15N 0d0W 180 90
2005-07-01 10:00 29d30N 0d0W 180 90
HURRICANE Fern 3
2005-06-28 10:00 0d30S 45d0E 180 90
2005-06-28 11:00 1d45S 45d0E 90 90
2005-06-28 12:00 1d45S 46d15E 180 90
MODEL Bullseye
Gertrude 2005-07-01 10:00 40d0N 5d0E 170 80
Gertrude 2005-07-01 09:00 40d45N 5d0E 170 80
Fern 2005-06-28 11:00 12d15S 40d0E 80 80
Fern 2005-06-28 12:00 8d45N 41d15E 170 80
Fern 2005-06-28 10:00 10d0N 40d0E 170 80
MODEL Good One
Gertrude 2005-07-01 09:00 30d15N 0d0W 180 90
Gertrude 2005-07-01 10:00 29d30N 0d0W 180 90
Fern 2005-06-28 10:00 0d30S 45d0E 180 90
Fern 2005-06-28 12:00 1d45S 46d15E 180 90
Fern 2005-06-28 11:00 1d45S 45d0E 90 90
MODEL Other Good One
Gertrude 2005-07-01 09:00 30d15N 0d0W 180 90
Gertrude 2005-07-01 10:00 29d30N 0d0W 180 90
Fern 2005-06-28 10:00 0d30S 45d0E 180 90
Fern 2005-06-28 11:00 1d45S 45d0E 90 90
Fern 2005-06-28 12:00 1d45S 46d15E 180 90
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
TEST 1
ModelOne
--------------------
TEST 2
Good One
Other Good One
--------------------
</PRE><P>
______________________________________________________
3045||||||false||||||
<p>The king pays his loyal knight in gold coins. On the first day of his service, the knight receives one gold coin. On each of the next two days (the second and third days of service), the knight receives two gold coins. On each of the next three days (the fourth, fifth, and sixth days of service), the knight receives three gold coins. On each of the next four days (the seventh, eighth, ninth, and tenth days of service), the knight receives four gold coins. This pattern of payments will continue indefinitely: after receiving <em>N</em> gold coins on each of <em>N</em> consecutive days, the knight will receive <em>N</em>+1 gold coins on each of the next <em>N</em>+1 consecutive days, where <em>N</em> is any positive integer.</p><p>Your program will determine the total number of gold coins paid to the knight in any given number of days (starting from Day 1).</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Each line of the input (except the last one) contains data for one test case of the problem, consisting of exactly one integer (in the range 1..10000), representing the number of days. The end of the input is signaled by a line containing the number 0.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>There is exactly one line of output for each test case. This line contains the number of days from the corresponding line of input, followed by one blank space and the total number of gold coins paid to the knight in the given number of days, starting with Day 1.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
10
6
7
11
15
16
100
10000
1000
21
22
0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
10 30
6 14
7 18
11 35
15 55
16 61
100 945
10000 942820
1000 29820
21 91
22 98
</pre>
______________________________________________________
3046||||||false||||||
<p>A prefix of a string is a substring starting at the beginning of the given string. The prefixes of "carbon" are: "c", "ca", "car", "carb", "carbo", and "carbon". Note that the empty string is not considered a prefix in this problem, but every non-empty string is considered to be a prefix of itself. In everyday language, we tend to abbreviate words by prefixes. For example, "carbohydrate" is commonly abbreviated by "carb". In this problem, given a set of words, you will find for each word the shortest prefix that uniquely identifies the word it represents.</p><p>In the sample input below, "carbohydrate" can be abbreviated to "carboh", but it cannot be abbreviated to "carbo" (or anything shorter) because there are other words in the list that begin with "carbo".</p><p>An exact match will override a prefix match. For example, the prefix "car" matches the given word "car" exactly. Therefore, it is understood without ambiguity that "car" is an abbreviation for "car" , not for "carriage" or any of the other words in the list that begins with "car".</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input indicates the number of datasets to process. Dataesets are separated by a blank line. Each dataset contains at least two, but no more than 1000 lines. Each line contains one word consisting of 1 to 20 lower case letters.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each dataset, the output contains the same number of lines as the input . Each line of the output contains the word from the corresponding line of the input, followed by one blank space, and the shortest prefix that uniquely (without ambiguity) identifies this word. Print a blank line between test cases.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1

carbohydrate
cart
carburetor
caramel
caribou
carbonic
cartilage
carbon
carriage
carton
car
carbonate
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
carbohydrate carboh
cart cart
carburetor carbu
caramel cara
caribou cari
carbonic carboni
cartilage carti
carbon carbon
carriage carr
carton carto
car car
carbonate carbona
</pre>
______________________________________________________
3047||||||false||||||
<p>A square is a 4-sided polygon whose sides have equal length and adjacent sides form 90-degree angles. It is also a polygon such that rotating about its centre by 90 degrees gives the same polygon. It is not the only polygon with the latter property, however, as a regular octagon also has this property.</p><p>So we all know what a square looks like, but can we find all possible squares that can be formed from a set of stars in a night sky? To make the problem easier, we will assume that the night sky is a 2-dimensional plane, and each star is specified by its <em>x</em> and <em>y</em> coordinates.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of a number of test cases. Each test case starts with the integer <em>n</em> (1 &lt;= <em>n</em> &lt;= 1000) indicating the number of points to follow. Each of the next <em>n</em> lines specify the <em>x</em> and <em>y</em> coordinates (two integers) of each point. You may assume that the points are distinct and the magnitudes of the coordinates are less than 20000. The input is terminated when <em>n</em> = 0.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case, print on a line the number of squares one can form from the given stars.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
4
1 0
0 1
1 1
0 0
9
0 0
1 0
2 0
0 2
1 2
2 2
0 1
1 1
2 1
4
-2 5
3 7
0 0
5 2
0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
1
6
1
</pre>
______________________________________________________
3048||||||false||||||
<p>In this problem, you are asked to keep track of the hierarchical structure of an organization's changing staff. As the first event in the life of an organization, the Chief Executive Officer (CEO) is named. Subsequently, any number of hires and fires can occur. Any member of the organization (including the CEO) can hire any number of direct subordinates, and any member of the organization (including the CEO) can be fired. The organization's hierarchical structure can be represented by a tree. Consider the example shown by Figure 1:</p><center><img src="http://livearchive.onlinejudge.org/external/30/p3048a.gif></center><p>VonNeumann is the CEO of this organization. VonNeumann has two direct subordinates: Tanenbaum and Dijkstra. Members of the organization who are direct subordinates of the same member are ranked by their respective seniority. In the diagram, the seniority of such members decrease from left to right. For example Tanenbaum has higher seniority than Dijkstra.</p><p>When a member hires a new direct subordinate, the newly hired subordinate has lower seniority than any other direct subordinates of the same member. For example, if VonNeumann (in Figure 1) hires Shannon, then VonNeumann's direct subordinates are Tanenbaum, Dijkstra, and Shannon in order of decreasing seniority.</p><p>When a member of the organization gets fired, there are two possible scenarios. If the victim (the person who gets fired) had no subordinates, then he/she will be simply dropped from the organization's hierarchy. If the victim had any subordinates, then his/her highest ranking (by seniority) direct subordinate will be promoted to fill the resulting vacancy. The promoted person will also inherit the victim's seniority. Now, if the promoted person also had some subordinates then his/her highest ranking direct subordinate will similarly be promoted, and the promotions will cascade down the hierarchy until a person having no subordinates has been promoted. In Figure 1, if Tanenbaum gets fired, then Stallings will be promoted to Tanenbaum's position and seniority, and Knuth will be promoted to Stallings' previous position and seniority.</p><p>Figure 2 shows the hierarchy resulting from Figure 1 after (1) VonNeumann hires Shannon and (2) Tanenbaum gets fired:</p><center><img src="http://livearchive.onlinejudge.org/external/30/p3048a.gif></center><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input indicates the number of datasets in the input. Datasets will be separated by a blank line.<p>The first line of each dataset contains only the name of the person who is initially the CEO. All names in the input consist of 2 to 20 characters, which may be upper or lower case letters, apostrophes, and hyphens. (In particular, no blank spaces.) Each name contains at least one upper case and at least one lower case letter.<p><p>The first line will be followed by one or more additional lines. The format of each of these lines will be determined by one of the following three rules of syntax:</p><ul><li>[existing member] <tt>hires</tt> [new member]</li> <li><tt>fire</tt> [existing member]</li> <li><tt>print</tt></li></ul><p>Here [existing member] is the name of any individual who is already a member of the organization, [new member] is the name of an individual who is not a member of the organization as yet. The three types of lines (hires, fire, and print) can appear in any order, any number of times.</p><p>You may assume that at any time there is at least one member (who is the CEO) and no more than 1000 members in the organization.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each print command, print the current hierarchy of the organization, assuming all hires and fires since the beginning of the input have been processed as explained above. Tree diagrams (such as those in Figures 1 and 2) are translated into textual format according to the following rules:</p><ul><li>Each line in the textual representation of the tree will contain exactly one name.</li> <li>The first line will contain the CEO's name, starting in column 1.</li> <li>The entire tree, or any sub-tree, having the form<br><br><center><img src="http://livearchive.onlinejudge.org/external/30/p3048a.gif><br><br></center>will be represented in textual form as:<br><br><center><img src="http://livearchive.onlinejudge.org/external/30/p3048a.gif></center></li></ul><p>The output resulting from each print command in the input will be terminated by one line consisting of exactly 60 hyphens. Print a blank line between test cases.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1

VonNeumann
VonNeumann hires Tanenbaum
VonNeumann hires Dijkstra
Tanenbaum hires Stallings
Tanenbaum hires Silberschatz
Stallings hires Knuth
Stallings hires Hamming
Stallings hires Huffman
print
VonNeumann hires Shannon
fire Tanenbaum
print
fire Silberschatz
fire VonNeumann
print
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
VonNeumann
+Tanenbaum
++Stallings
+++Knuth
+++Hamming
+++Huffman
++Silberschatz
+Dijkstra
------------------------------------------------------------
VonNeumann
+Stallings
++Knuth
+++Hamming
+++Huffman
++Silberschatz
+Dijkstra
+Shannon
------------------------------------------------------------
Stallings
+Knuth
++Hamming
+++Huffman
+Dijkstra
+Shannon
------------------------------------------------------------
</pre>
______________________________________________________
3049||||||false||||||
<p>In this problem, you are given a list of words (sequence of lower case letters). From this list, find the longest chain of words <em>w<sub>1</sub></em>, ..., <em>w<sub>n</sub></em> such that <em>w<sub>i</sub></em> is a <em>mixed extension</em> of <em>w<sub>i-1</sub></em>. A word <em>A</em> is a mixed extension of another word <em>B</em> if <em>A</em> can be formed by adding one letter to <em>B</em> and permuting the result. For example, "ab", "bar", "crab", "cobra", and "carbon" form a chain of length 5.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input indicates the number of datasets. Datasets are separated by a blank line. Each dataset contains at least two, but no more than 10000 lines. Each line contains a word. The length of each word is at least 1 and no more than 20. All words in the input are distinct.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>Write the longest chain that can be constructed from the given words. Output each word in the chain on a separate line, starting from the first one. If there are multiple longest chains, any longest chain is acceptable. Print a blank line between test cases.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1

ab
arc
arco
bar
bran
carbon
carbons
cobra
crab
crayon
narc
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
ab
bar
crab
cobra
carbon
carbons
</pre>
______________________________________________________
3050||||||false||||||
<p>In the Blackjack card game, the player and the dealer are dealt two cards initially. One of dealer's cards is dealt face up and is known to the player but the other one is dealt face down. Given the two initial cards you are dealt and the dealer's face-up card, you are asked to compute the probability that your two-card hand is better than the dealer's two-card hand. This is not simple: the probability changes as the game is played because cards are dealt from the decks without replacement. To simplify the problem, we will only compute the probability when the cards are first dealt from the decks. That is, no cards have been dealt from the decks before.</p><p>In this game, an Ace has a value of 1 or 11 (chosen by the person holding the cards), the face cards (K, Q, J) have a value of 10, and the values of the remaining cards are given by their numerical values. The player wins against the dealer if:</p><ul><li>the total value of the player's hand does not exceed 21; <b>and</b> <li>the total value of his hand is higher than that of the dealer <b>or</b> the total value of the dealer's hand exceeds 21.</ul><p>The value of an Ace is chosen to maximize the total value without exceeding 21. If we are only interested in two-card hands, it is impossible for the total value to exceed 21.</p><p>Skilled players remember which cards have already been dealt and make decisions accordingly. To make this difficult, many casinos use multiple decks of cards to play the game. Each deck has 52 cards, 4 of each of A, K, Q, J, T (10), 9, ..., and 2.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of a number of test cases. Each test case starts with a line containing a positive integer <em>n</em> (<em>n &lt;= 10</em>) indicating the number of decks used. This is followed by a line containing 3 characters (separated by a space) in the set {A, K, Q, J, T, 9, ..., 2}, representing the dealer's face-up card and your two cards in the hand. In each case, assume that the <em>n</em> decks have been shuffled together randomly. The end of input is specified by <em>n</em> = 0.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each hand dealt, print on a line the probability of winning as a percentage, rounded to 3 decimal places. Separate the output of each case by a blank line.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1
T A J
4 
2 3 4
0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
93.878%

21.951%
</pre>
______________________________________________________
3051||||||false||||||
<p>The pH scale measures the concentration of protons (H<sup>+</sup>) in a solution and, therefore, its acidity or alkalinity. The pH value of a solution is a number between 0 and 14; it is less than 7 if the solution is acidic, greater than 7 if the solution is basic, and 7 if it is neutral.</p><p>The formula for calculating pH is</p><center>pH = -log<sub>10</sub> [H<sup>+</sup>]</center><p>where [H<sup>+</sup>] is the concentration of protons measured in moles per litre.</p><p>To calculate the pH value of an acid, one has to determine the concentration of protons in the solution. When an acid is dissolved in water, an equilibrium is reached and is governed by the equation</p><center>K<sub>a</sub> = [H<sup>+</sup>] [acid ions] / [acid]</center><p>where K<sub>a</sub> is the acidity constant (known for each acid), [acid ions] is the concentration of the acid ions that have dissolved, and [acid] is the concentration of the undissolved acid. Before the acid is added, both [H<sup>+</sup>] and [acid ions] are assumed to be 0.</p><p>For example, the acidity constant of methanoic acid is 1.6 x 10<sup>-4</sup>. Dissolving one mole of acid molecules results in one mole of H<sup>+</sup> and one mole of acid ions. If the initial concentration of the methanoic acid is 0.1 moles/L and <em>x</em> moles of acid are dissolved (per liter), then the final concentration at equilibrium would be 0.1 - <em>x</em> moles/L for the acid and <em>x</em> moles/L for H<sup>+</sup> and the acid ions.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of a number of test cases. Each test case contains 4 numbers on a line: two positive floating-point numbers specifying the acidity constant K<sub>a</sub> and the original concentration of the acid (in moles/liter) added to the water, as well as two positive integers <em>m</em> and <em>n</em> indicating that each mole of acid molecules is dissolved into <em>m</em> moles of H<sup>+</sup> ions and <em>n</em> moles of acid ions. The floating-point numbers are specified in scientific notation as shown below. The input is terminated with a line containing four zeros.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case, print on a line the pH value of the solution, rounded to 3 decimal places.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1.6e-04 1.0e-01 1 1
1.6e-04 1.0e-01 4 1
1.5e-05 5.0e-02 1 2
0 0 0 0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
2.407
2.101
3.216
</pre>
______________________________________________________
3052||||||false||||||
<p>A closed polygon is a figure bounded by a finite number of line segments. The intersections of the bounding line segments are called the vertices of the polygon. When one starts at any vertex of a closed polygon and traverses each bounding line segment exactly once, one comes back to the starting vertex.</p><p>A closed polygon is called convex if the line segment joining any two points of the polygon lies in the polygon. Figure 1 shows a closed polygon which is convex and one which is not convex. (Informally, a closed polygon is convex if its border doesn't have any "dents".)</p><center><img src="http://livearchive.onlinejudge.org/external/30/p3052a.gif></center><p>The subject of this problem is a closed convex polygon in the coordinate plane, one of whose vertices is the origin (<em>x</em> = 0, <em>y</em> = 0). Figure 2 shows an example. Such a polygon will have two properties significant for this problem.</p><p>The first property is that the vertices of the polygon will be confined to three or fewer of the four quadrants of the coordinate plane. In the example shown in Figure 2, none of the vertices are in the second quadrant (where <em>x</em> &lt; 0, <em>y</em> &gt; 0).</p><p>To describe the second property, suppose you "take a trip" around the polygon: start at (0, 0), visit all other vertices exactly once, and arrive at (0, 0). As you visit each vertex (other than (0, 0)), draw the diagonal that connects the current vertex with (0, 0), and calculate the slope of this diagonal. Then, within each quadrant, the slopes of these diagonals will form a decreasing or increasing sequence of numbers, i.e., they will be sorted. Figure 3 illustrates this point.</p><center><img src="http://livearchive.onlinejudge.org/external/30/p3052a.gif><br><img src="http://livearchive.onlinejudge.org/external/30/p3052a.gif></center><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input indicates the number of datasets in the input. Datasets in the input are separated by a blank line. Each dataset lists the vertices of a closed convex polygon in the plane.  The number of lines in the input file will be at least three but no more than 50. Each line contains the <em>x</em> and <em>y</em> coordinates of one vertex. Each <em>x</em> and <em>y</em> coordinate is an integer in the range -999..999. The vertex on the first line of the input file will be the origin, i.e., <em>x</em> = 0 and <em>y</em> = 0. Otherwise, the vertices may be in a scrambled order. Except for the origin, no vertex will be on the <em>x</em>-axis or the <em>y</em>-axis. No three vertices are colinear.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output lists the vertices of the given polygon, one vertex per line. Each vertex from the input appears exactly once in the output. The origin (0,0) is the vertex on the first line of the output. The order of vertices in the output will determine a trip taken along the polygon's border, in the counterclockwise direction. The output format for each vertex is <em>(x,y)</em> as shown below. Print a blank line between test cases.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
1

0 0
70 -50
60 30
-30 -50
80 20
50 -60
90 -20
-30 -40
-10 -60
90 10
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
(0,0)
(-30,-40)
(-30,-50)
(-10,-60)
(50,-60)
(70,-50)
(90,-20)
(90,10)
(80,20)
(60,30)
</pre>
______________________________________________________
3053||||||false||||||
<p>Let <i>n</i> be any positive integer. A <i>factor</i> of <i>n</i> is any number that divides evenly into <i>n</i>, without leaving a remainder. For example, 13 is a factor of 52, since 52/13 = 4. A <i>subsequence</i> of <i>n</i> is a number without a leading zero that can be obtained from <i>n</i> by discarding one or more of its digits. For example, 2, 13, 801, 882, and 1324 are subsequences of 8013824, but 214 is not (you can't rearrange digits), 8334 is not (you can't have more occurrences of a digit than appear in the original number), 8013824 is not (you must discard at least one digit), and 01 is not (you can't have a leading zero). A <i>subfactor</i> of <i>n</i> is an integer greater than 1 that is both a factor and a subsequence of <i>n</i>. 8013824 has subfactors 8, 13, and 14. Some numbers do not have a subfactor; for example, 6341 is not divisible by 6, 3, 4, 63, 64, 61, 34, 31, 41, 634, 631, 641, or 341.</p><p>An <i>x-subfactor series</i> of <i>n</i> is a decreasing series of integers <i>n<sub>1</sub></i>, ..., <i>n<sub>k</sub></i>, in which (1) <i>n</i> = <i>n<sub>1</sub></i>, (2) <i>k</i> &#8805; 1, (3) for all 1 &#8804; <i>i</i> &lt; <i>k</i>, <i>n<sub>i+1</sub></i> is obtained from <i>n<sub>i</sub></i> by first discarding the digits of a subfactor of <i>n<sub>i</sub></i>, and then discarding leading zeros, if any, and (4) <i>n<sub>k</sub></i> has no subfactor. The term "x-subfactor" is meant to suggest that a subfactor gets x'ed, or discarded, as you go from one number to the next. For example, 2004 has two distinct x-subfactor series, the second of which can be obtained in two distinct ways. The highlighted digits show the subfactor that was removed to produce the next number in the series.</p><blockquote><u><b><i>2</i></b></u>004 &nbsp; 4<br>200<u><b><i>4</i></b></u> &nbsp; <u><b><i>20</i></b></u>0 &nbsp; 0<br>200<u><b><i>4</i></b></u> &nbsp; <u><b><i>2</i></b></u>00 &nbsp; 0</blockquote><p>The <i>primary</i> x-subfactor series has maximal length (the largest <i>k</i> possible, using the notation above). If there are two or more maximal-length series, then the one with the smallest second number is primary; if all maximal-length series have the same first and second numbers, then the one with the smallest third number is primary; and so on. Every positive integer has a unique primary x-subfactor series, although it may be possible to obtain it in more than one way, as is the case with 2004.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of one or more positive integers, each less than one billion, without leading zeroes, and on a line by itself. Following is a line containing only "0" that signals the end of the input.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each positive integer, output its primary x-subfactor series using the exact format shown in the examples below.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
123456789
7
2004
6341
8013824
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
123456789 12345678 1245678 124568 12456 1245 124 12 1
7
2004 200 0
6341
8013824 13824 1324 132 12 1
</PRE><P>
______________________________________________________
3054||||||false||||||
<p align=center><img src="http://livearchive.onlinejudge.org/external/30/p3054a.gif><br><p>&nbsp;</p><p align=center><img src="http://livearchive.onlinejudge.org/external/30/p3054a.gif><br><p>A computer science professor was watching his young daughter use scissors to cut large triangular pieces of paper that were green on one side and white on the other.&nbsp; She always kept the white side of the paper up, so the green side was never visible, and she always followed the same general procedure. Starting with one large white triangle, she would always make exactly three straight cuts, each of which separated one piece of paper into two, and end up with exactly four smaller white triangles.&nbsp; Then she would put the small triangles aside and start over with a new large triangle.<br><br>The first three figures show some of the possibilities. All angles are in degrees.&nbsp; In Figures 1 and 2, no cut goes all the way from one vertex of the original large triangle to the opposite side.&nbsp; In fact, these two figures (including any rotations thereof) show the <span style="font-weight: bold; font-style: italic;">only</span> ways that she could produce four triangles without making such a cut.&nbsp; The pattern in Figure 4 can't happen, because her cuts always separate the current piece of paper into two pieces; after she cuts off the rightmost triangle in Figure 4, none of the remaining cuts will separate the remaining triangle into two pieces.<br><br>The professor imagined a room full of children producing piles of triangles using different methods, and wondered if he could identify his daughter's work.&nbsp; Given the exact size and shape of four small triangles, could he tell if she could have produced them from one large triangle?&nbsp; After a moment's thought he realized that he could simplify the problem and consider only the shapes of the triangles, noting that if the shapes were compatible, there would always be some appropriate sizes for the small triangles.&nbsp; This led to the following problem for you to solve:&nbsp; given the angles of a large triangle and four smaller ones, is it possible that the small triangles could have been obtained from the large one using the procedure his daughter was following?<br><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input contains from 1 to 30 datasets followed by a line containing only "<span style="font-family: monospace;">0 0 180</span>".&nbsp; Each dataset contains 15 positive integers separated by single blanks on one line.&nbsp; Each integer is less than 180.&nbsp; Each group of three integers are the vertex angles for one triangle, expressed in degrees.&nbsp; Assume that none of the triangles is flipped over so the green side of the paper is up, and the vertex angles are listed in clockwise order around each individual triangle.&nbsp;<br><p>The first four datasets of the sample input below correspond to the figures above.&nbsp;&nbsp;</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output contains one line for each data set.&nbsp; If the child's cutting play, as described above, started with a triangle with the first three angles, and could have ended up with triangles matching the last four triangles in the dataset, then the line contains "<span style="font-family: monospace;">yes</span>".&nbsp; Otherwise the line contains "<span style="font-family: monospace;">no</span>".&nbsp;<br></p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
60 70 50 30 100 50 75 70 35 75 60 45 45 65 70
40 75 65 60 40 80 20 120 40 45 85 50 25 55 100
60 60 60 30 60 90 30 60 90 90 60 30 90 60 30
30 60 90 30 120 30 30 120 30 30 120 30 30 120 30
60 70 50 30 100 50 75 70 35 75 60 45 70 65 45
0 0 180
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
yes
yes
yes
no
no
</PRE>
______________________________________________________
3055||||||false||||||
<p>In your job at Albatross Circus Management (yes, it's run by a bunch of
  clowns), you have just finished writing a program whose output is a list
 of names in nondescending order by length (so that each name is at least
as long as the one preceding it). However, your boss does not like the way
the output looks, and instead wants the output to appear more symmetric, with
the shorter strings at the top and bottom and the longer strings in the middle.
His rule is that each pair of names belongs on opposite ends of the list,
and the first name in the pair is always in the top part of the list. In
the first example set below, Bo and Pat are the first pair, Jean and Kevin
the second pair, etc. </p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input consists of one
 or more sets of strings, followed by a final  line containing only the value
 0. Each set starts with a line containing an  integer, <i>n</i>, which is
 the number of strings in the set, followed by  <i>n</i> strings, one per
line, sorted in nondescending order by length. None of the strings contain
spaces. There is at least one and no more than 15 strings per set.&nbsp;
Each string is at most 25 characters long.&nbsp; </p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each input set print
 "<span style="font-family: monospace;">SET</span> <span
 style="font-style: italic;">n</span>"  on a line, where <span
 style="font-style: italic;">n</span> starts at 1, followed by the output
 set as shown in the  sample output. </p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
7
Bo
Pat
Jean
Kevin
Claude
William
Marybeth
6
Jim
Ben
Zoe
Joey
Frederick
Annabelle
5
John
Bill
Fran
Stan
Cece
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
SET 1
Bo
Jean
Claude
Marybeth
William
Kevin
Pat
SET 2
Jim
Zoe
Frederick
Annabelle
Joey
Ben
SET 3
John
Fran
Cece
Stan
Bill 
</PRE>
______________________________________________________
3056||||||false||||||
<p>A flow layout manager takes rectangular objects and places them in
a rectangular window from left to right. If there isn't enough room in
one row for an object, it is placed completely below all the objects
in the first row at the left edge, where the order continues from left
to right again.  Given a set of rectangular dimensions and a maximum
window width, you are to write a program that computes the dimensions
of the final window after all the rectangles have been placed in it.
</p>

<p>For example, given a window that can be at most 35 units wide, and
three rectangles with dimensions 10 <span style="font-family:
monospace;">x</span> 5, &nbsp;20 <span style="font-family:
monospace;">x</span> 12, and 8 <span style="font-family:
monospace;">x</span> 13, the flow layout manager would create a window
that looked like the figures below after each rectangle was added.
</p>

<center>

<p><img src="http://livearchive.onlinejudge.org/external/30/p3056a.gif alt="insert 10x5 rectangle">
<p><img src="http://livearchive.onlinejudge.org/external/30/p3056a.gif alt="insert 20x12 rectangle">
<p><img src="http://livearchive.onlinejudge.org/external/30/p3056a.gif alt="insert 8x3 rectangle">
 </center>

<p>The final dimensions of the resulting window are 30 <span
style="font-family: monospace;">x</span> 25, since the width of the
first row is 10+20 = 30 and the combined height of the first and
second rows is 12+13 = 25.
</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input consists
of one or more sets of data, followed by a final line containing only
the value 0. Each data set starts with a line containing an integer,
<i>m</i>, 1 &#8804; <span style="font-style: italic;">m</span> &#8804;
80, which is the maximum width of the resulting window. This is
followed by at least one and at most 15 lines, each containing the
dimensions of one rectangle, width first, then height. The end
of the list of rectangles is signaled by the pair -1 -1, which is not
counted as the dimensions of an actual rectangle.  Each rectangle is
between 1 and 80 units wide (inclusive) and between 1 and 100
units high (inclusive).
</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each input set
print the width of the resulting window, followed by a space, then the
lowercase letter "<span style="font-family: monospace;">x</span>",
followed by a space, then the height of the resulting window.<br>
</p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
35
10 5
20 12
8 13
-1 -1
25
10 5
20 13
3 12
-1 -1
15
5 17
5 17
5 17
7 9
7 20
2 10
-1 -1
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
30 x 25
23 x 18
15 x 47
</PRE>

______________________________________________________
3057||||||false||||||
<p>As the owner of a computer forensics company, you have just been given the following note by a new client:<br></p><table cellpadding="2" cellspacing="0" border="1" style="text-align: left; margin-left: auto; margin-right: auto;"><tbody><tr><td valign="top"><p>I, Albert Charles Montgomery, have just discovered the most amazing cypher for encrypting messages. Let me tell you about it.&nbsp;<br></p><p>To begin, you will need to decide on a set of symbols, call it <span style="font-style: italic;">S</span>, perhaps with the letters <span style="font-family: monospace;">RATE</span>. The size of this set must be a power of 2 and the order of the symbols in <span style="font-style: italic;">S</span> is important. You must note that <span style="font-family: monospace;">R</span> is at position 0, <span style="font-family: monospace;">A</span> at 1, <span style="font-family: monospace;">T</span> at 2, and <span style="font-family: monospace;">E</span> at 3. You will also need one permutation <span style="font-style: italic;">P</span> of all those symbols, say <span style="font-family: monospace;">TEAR</span>. Finally you will need an integer, call it <span style="font-style: italic;">x</span>. Together, these make up the key. Given a key, you are now ready to convert a plaintext message <span style="font-style: italic;">M</span> of length <span style="font-style: italic;">n</span> (<span style="font-style: italic;">M</span>[0], <span style="font-style: italic;">M</span>[1]... <span style="font-style: italic;">M</span>[<span style="font-style: italic;">n</span>-1]), that has some but not necessarily all of the symbols in <span style="font-style: italic;">S</span>, into a cyphertext string <span style="font-style: italic;">C</span>, also of length <span style="font-style: italic;">n</span> (<span style="font-style: italic;">C</span>[0], <span style="font-style: italic;">C</span>[1],...<span style="font-style: italic;">C</span>[<span style="font-style: italic;">n</span>-1]), that has some but not necessarily all of the symbols in <span style="font-style: italic;">S</span>.<br></p><p>The encrypting algorithm computes <span style="font-style: italic;">C</span> as follows:</p><ol><li>Calculate an integer <span style="font-style: italic;">d</span> as the remainder after dividing the integer part of (<span style="font-style: italic;">n</span><sup>1.5</sup> + <span style="font-style: italic;">x</span>) by <span style="font-style: italic;">n</span>. This can be expressed more succinctly as <span style="font-style: italic;">d</span> = (int)(<span style="font-style: italic;">n</span><sup>1.5</sup> + <span style="font-style: italic;">x</span>) % <span style="font-style: italic;">n</span>, where "%" is the remainder operator.</li> <li>Set <span style="font-style: italic;">C</span>[<span style="font-style: italic;">d</span>] to be the symbol in <span style="font-style: italic;">S</span> whose position is the same as the position of <span style="font-style: italic;">M</span>[<span style="font-style: italic;">d</span>] in <span style="font-style: italic;">P</span>.<br></li><li>For each <span style="font-style: italic;">j</span> &#8800; <span style="font-style: italic;">d</span> in 0..<span style="font-style: italic;">n</span>-1, set <span style="font-style: italic;">C</span>[<span style="font-style: italic;">j</span>] to be the symbol in <span style="font-style: italic;">S</span> whose position is the value obtained by xor-ing the position of <span style="font-style: italic;">M</span>[<span style="font-style: italic;">j</span>] in <span style="font-style: italic;">P</span> with the position of <span style="font-style: italic;">M</span>[(<span style="font-style: italic;">j</span>+1) % <span style="font-style: italic;">n</span>] in <span style="font-style: italic;">S</span>. Note that the bitwise xor operator is &quot;^&quot; in C, C++, and Java. </li></ol><p>For example, consider this scenario where <span style="font-style: italic;">S</span>=<span style="font-family: monospace;">RATE</span>, <span style="font-style: italic;">P</span>=<span style="font-family: monospace;">TEAR</span>, <span style="font-style: italic;">x</span>=102, <span style="font-style: italic;">M</span>=<span style="font-family: monospace;">TEETER</span>, and <span style="font-style: italic;">n</span>=6. To compute <span style="font-style: italic;">d</span>, first calculate 6<sup>1.5</sup> + 102 = 116.696938, then take the remainder after dividing by 6. So <span style="font-style: italic;">d</span> = 116 % 6 = 2. The following table shows the steps in filling in the cyphertext <span style="font-style: italic;">C</span>. Note that the order of the steps is not important.</p><table cellpadding="2" cellspacing="2" border="1" style="text-align: left; width: 90%; margin-left: 40px;"><tbody><tr><td valign="top"><br></td><td valign="top">0<br></td><td valign="top">1<br></td><td valign="top">2<br></td><td valign="top">3<br></td><td valign="top">4<br></td><td valign="top">5<br></td><td valign="top"><br></td></tr><tr><td valign="top"><span style="font-style: italic;">S</span> =<br></td><td valign="top" style="font-family: monospace;">R<br></td><td valign="top" style="font-family: monospace;">A<br></td><td valign="top" style="font-family: monospace;">T<br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top"><br></td></tr><tr><td valign="top"><span style="font-style: italic;">P</span> =<br></td><td valign="top" style="font-family: monospace;">T<br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">A<br></td><td valign="top" style="font-family: monospace;">R<br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top"><br></td></tr><tr><td valign="top"><span style="font-style: italic;">M</span> =<br></td><td valign="top" style="font-family: monospace;">T<br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">T<br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">R<br></td><td valign="top"><br></td></tr><tr><td valign="top"><br></td><td valign="top"><br></td><td valign="top"><br></td><td valign="top"><br></td><td valign="top"><br></td><td valign="top"><br></td><td valign="top"><br></td><td valign="top"><span style="font-style: italic;"></span><br></td></tr><tr><td valign="top"><span style="font-style: italic;">C</span> =<br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top"><span style="font-style: italic;"></span><span style="font-style: italic;">M</span>[0] is <span style="font-family: monospace;">T</span>, <span style="font-family: monospace;">T</span> is at <span style="font-style: italic;">P</span>[0]. <span style="font-style: italic;">M</span>[1] is <span style="font-family: monospace;">E</span>, <span style="font-family: monospace;">E</span> is at <span style="font-style: italic;">S</span>[3]. <span style="font-style: italic;">C</span>[0] = <span style="font-style: italic;">S</span>[0 xor 3] = <span style="font-style: italic;">S</span>[3]<br></td></tr><tr><td valign="top"><br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">T<br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top"><span style="font-style: italic;">M</span>[1] is <span style="font-family: monospace;">E</span>, <span style="font-family: monospace;">E</span> is at <span style="font-style: italic;">P</span>[1]. <span style="font-style: italic;">M</span>[2] is <span style="font-family: monospace;">E</span>, <span style="font-family: monospace;">E</span> is at <span style="font-style: italic;">S</span>[3]. <span style="font-style: italic;">C</span>[1] = <span style="font-style: italic;">S</span>[1 xor 3] = <span style="font-style: italic;">S</span>[2]<br></td></tr><tr><td valign="top"><br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">T<br></td><td valign="top" style="font-family: monospace;">A<br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top"><span style="font-style: italic;"></span><span style="font-style: italic;">2 is d. M</span>[2] is <span style="font-family: monospace;">E</span>, <span style="font-family: monospace;">E</span> is at <span style="font-style: italic;">P</span>[1], so <span style="font-style: italic;">C</span>[2] =&nbsp; <span style="font-style: italic;">S</span>[1]<br></td></tr><tr><td valign="top"><br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">T<br></td><td valign="top" style="font-family: monospace;">A<br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top"><span style="font-style: italic;">M</span>[3] is <span style="font-family: monospace;">T</span>, <span style="font-family: monospace;">T</span> is at <span style="font-style: italic;">P</span>[0]. <span style="font-style: italic;">M</span>[4] is <span style="font-family: monospace;">E</span>, <span style="font-family: monospace;">E</span> is at <span style="font-style: italic;">S</span>[3]. <span style="font-style: italic;">C</span>[3] = <span style="font-style: italic;">S</span>[0 xor 3] = <span style="font-style: italic;">S</span>[3]<br></td></tr><tr><td valign="top"><br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">T<br></td><td valign="top" style="font-family: monospace;">A<br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">A<br></td><td valign="top" style="font-family: monospace;"><br></td><td valign="top"><span style="font-style: italic;">M</span>[4] is <span style="font-family: monospace;">E</span>, <span style="font-family: monospace;">E</span> is at <span style="font-style: italic;">P</span>[1]. <span style="font-style: italic;">M</span>[5] is <span style="font-family: monospace;">R</span>, <span style="font-family: monospace;">R</span> is at <span style="font-style: italic;">S</span>[0]. <span style="font-style: italic;">C</span>[4] = <span style="font-style: italic;">S</span><span style="font-style: italic;"></span>[1 xor 0] = <span style="font-style: italic;">S</span>[1]<br></td></tr><tr><td valign="top"><br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">T<br></td><td valign="top" style="font-family: monospace;">A<br></td><td valign="top" style="font-family: monospace;">E<br></td><td valign="top" style="font-family: monospace;">A<br></td><td valign="top" style="font-family: monospace;">A<br></td><td valign="top"><span style="font-style: italic;">M</span>[5] is <span style="font-family: monospace;">R</span>, <span style="font-family: monospace;">R</span> is at <span style="font-style: italic;">P</span>[3]. <span style="font-style: italic;">M</span>[0] is <span style="font-family: monospace;">T</span>, <span style="font-family: monospace;">T</span> is at <span style="font-style: italic;">S</span>[2]. <span style="font-style: italic;">C</span>[5] = <span style="font-style: italic;">S</span>[3 xor 2] = <span style="font-style: italic;">S</span>[1]<br></td></tr></tbody></table><div style="margin-left: 40px;"></div><br>I have included additional examples of encrypted messages at the end of this note for you to experiment with. However, first, I need to tell you about the decryption algorithm.</td></tr></tbody></table><p>Unfortunately, the next page of the note, with the decrypting algorithm, is completely unreadable because it is covered with huge, overlapping, messy ink blots. Given your considerable skill in unravelling puzzles, your task is to write the decoder based on your knowledge of the encoding algorithm.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input for the decoder consists of one or more sets of {key, encrypted message} pairs. The key is on 3 separate lines. The first line contains the single integer <span style="font-style: italic;">x</span>, 0 &lt; <span style="font-style: italic;">x</span> &lt; 10,000; the second line contains the string <span style="font-style: italic;">S</span>; and the third line contains the string <span style="font-style: italic;">P</span>, which will be a permutation of <i>S</i>. The length of <span style="font-style: italic;">S</span> (and therefore <span style="font-style: italic;">P</span>) will always be one of the following powers of two: 2, 4, 8, 16, or 32. Following the key is a line containing the encrypted message string <span style="font-style: italic;">C</span>, which will contain at least one and at most sixty characters. The strings <span style="font-style: italic;">S</span>, <span style="font-style: italic;">P</span>, and <span style="font-style: italic;">C</span> will not contain whitespace, but may contain printable characters other than letters and digits. The end of the input is a line which contains the single integer 0.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each input set print the decrypted string on a single line, as shown in the sample output.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
102
RATE
TEAR
ETAEAA
32
ABCDEFGHIJKLMNOPQRSTUVWXYZ._!?,;
;ABCDEFGHIJKLMNOPQRSTUVWXYZ._!?,
MOMCUKZ,ZPD
1956
ACEHINT_
ACTN_IHE
CIANCTNAAIECIA_TAI
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
TEETER
HELLO_WORLD
THE_CAT_IN_THE_HAT
</PRE>
______________________________________________________
3058||||||false||||||
<p align=center><img src="http://livearchive.onlinejudge.org/external/30/p3058a.gif><p>Drops of dark ink can fall on a white piece of paper creating a number of round ink blots. Three examples are shown above. The blots can create multiple distinct white regions. In the first figure, there is just one white region. In the second figure there is the outer white region plus a small white region bounded by the left four blots and an even smaller white region bounded by the right three blots. In the third figure, there are four white regions, one on the very outside, one inside the outer ring of blots and outside the four blots in the middle, and two tiny ones each formed between three of the four inner blots.</p><p>Two points are in the same white region if a path can be drawn between them that only passes through white points. Your problem is to count the number of white regions given the centers and radii of the blots.</p><p><b>Math Formulas:</b> If circles</p><blockquote><span style="font-style: italic;">C</span><sub style="font-style: italic;">1</sub> with center <span style="font-style: italic;">(x</span><sub style="font-style: italic;">1</sub><span style="font-style: italic;">, y</span><sub style="font-style: italic;">1</sub><span style="font-style: italic;">)</span> and radius <span style="font-style: italic;">r</span><sub style="font-style:
 italic;">1</sub>, and<br><span style="font-style: italic;">C</span><sub style="font-style: italic;">2</sub> with center <span style="font-style: italic;">(x</span><sub style="font-style: italic;">2</sub><span style="font-style: italic;">, y</span><sub style="font-style: italic;">2</sub><span style="font-style: italic;">)</span> and radius <span style="font-style: italic;">r</span><sub style="font-style:
 italic;">2</sub></blockquote><p>intersect in exactly two distinct points, let</p><blockquote><span style="font-style: italic;">d</span> equal the distance between the centers of <span style="font-style: italic;">C</span><sub style="font-style: italic;">1</sub><span style="font-style: italic;"><span style="font-style: italic;"> </span></span>and<span style="font-style: italic;"><span style="font-style: italic;"> C</span><sub style="font-style: italic;">2</sub></span>,<br><span style="font-style: italic;">A</span> = atan2<span style="font-style: italic;">(y</span><sub style="font-style: italic;">2</sub><span style="font-style: italic;">-y</span><sub style="font-style: italic;">1</sub><span style="font-style: italic;">, x</span><sub style="font-style: italic;">2</sub><span style="font-style: italic;">-x</span><sub style="font-style: italic;">1</sub><span style="font-style: italic;">)</span>, and<br><span style="font-style: italic;">B</span> = acos<span style="font-style: italic;">((</span><span style="font-style: italic;"></span><span style="font-style: italic;"><span style="font-style: italic;"><span style="font-style: italic;">r</span><sub style="font-style: italic;">1</sub><sup>2</sup> + </span></span><span style="font-style: italic;"><span style="font-style: italic;"><span style="font-style: italic;"><span style="font-style: italic;">d</span><sup>2</sup></span></span></span><span style="font-style: italic;"></span><span style="font-style: italic;"><span style="font-style: italic;"><span style="font-style: italic;"> - r</span><sub style="font-style: italic;">2</sub><sup>2</sup></span></span><span style="font-style: italic;">)/(2*</span><span style="font-style: italic;"><span style="font-style: italic;">r</span><sub style="font-style: italic;">1</sub>*d</span><span style="font-style: italic;">))</span>;</blockquote><p>then the intersection points on <i>C</i><sub>1</sub> are at angles <i>A</i>+<i>B</i> and <i>A</i>-<i>B</i> radians counterclockwise from the ray extending to the right from the center of <i>C</i><sub>1</sub>. The function atan2 is the inverse tangent function with two arguments, and acos is the inverse cosine function, both available in the math libraries of C, C++, and Java.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>There are from one to 15 data sets, followed by a final line containing only 0. A data set starts with a line containing a single positive integer <i>n</i>, which is no more than 100. It is the number of blots in the dataset. Then 3<span style="font-style: italic;">n</span> positive integers follow, with a single blank or a newline separating them.&nbsp; Each group of three give the data for the circular boundary of one blot: x and y coordinate of the center of the blot and its radius, in that order. Each of these numbers will be no larger than 1,000,000. All blots lie entirely on a piece of paper, and no blot touches any edge of the paper. No two circles in a dataset will be identical. Given any two distinct circles, they will either intersect at exactly two distinct points or not intersect at all. If two circles in the input intersect, then they overlap by at least one unit. More precisely, if they have radii <span style="font-style: italic;">r</span><sub style="font-style: italic;">1</sub> and <span style="font-style: italic;">r</span><sub style="font-style: italic;">2</sub>, where <span style="font-style: italic;">r</span><sub style="font-style: italic;">1</sub> &#8804; <span style="font-style: italic;">r</span><sub style="font-style: italic;">2</sub>, and if <span style="font-style: italic;">d</span> is the distance between their centers, then</p><blockquote><span style="font-style: italic;">r</span><sub style="font-style: italic;">2</sub><span style="font-style: italic;"> - r</span><sub style="font-style: italic;">1</sub> + 1 &#8804; <span style="font-style: italic;">d</span> &#8804; <span style="font-style: italic;">r</span><sub style="font-style: italic;">1</sub><span style="font-style: italic;"> + r</span><sub style="font-style: italic;">2</sub><span style="font-style: italic;"> - </span>1.</blockquote><p>Three or more circles will never intersect at the same point. If <span style="font-style: italic;">C</span> is a circle in the input that intersects at least one other input circle, and <span style="font-style: italic;">p</span> and <span style="font-style: italic;">q</span> are any of the intersection points of <span style="font-style: italic;">C</span> with any of the other input circles, with <span style="font-style: italic;">p</span> distinct from <span style="font-style: italic;">q</span>, then <span style="font-style: italic;">p</span> and <span style="font-style: italic;">q</span> will be separated on <span style="font-style: italic;">C</span> by at least 0.001 radians of arc. The restrictions on radii and angles ensure that standard double-precision arithmetic is sufficient for the calculations suggested above.</p><p>The sample input below corresponds to the figures above, though the scale is different in each figure.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output contains one line for each data set.&nbsp; The line contains only the number of white regions for the dataset, which is never more than 200.</p><p><span style="font-weight: bold;"><span style="font-style:
italic;">Warning</span></span>: Brute force raster methods of solving this problem will take up too much memory and be too slow.</p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
45 45 40 65 55 35 45 45 10 20 95 10
5
30 30 20 30 60 20 60 30 20 60 60 20 90 45 15
16
200 120 65 300 100 55 400 120 65 480 200 65
500 300 55 480 400 65 400 480 65 300 500 55
200 480 65 120 400 65 100 300 55 120 200 65
300 245 60 300 355 60 385 300 51 215 300 51
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
3
4
</PRE>
______________________________________________________
3059||||||false||||||
<p>Bill and Ted are taking a road trip.  But the odometer in their car
is broken, so they don't know how many miles they have
driven. Fortunately, Bill has a working stopwatch, so they can record
their speed and the total time they have driven. Unfortunately, their
record keeping strategy is a little odd, so they need help computing
the total distance driven. You are to write a program to do this
computation. </p>

<p>For example, if their log shows</p>

<blockquote>
<table cellpadding="2" cellspacing="2" border="1"
 style="text-align: left;" align=center>
      <tbody>
        <tr>
          <td valign="top" style="text-align: center;">Speed in miles per
hour<br>
          </td>
          <td valign="top" style="text-align: center;">Total elapsed time
in  hours<br>
          </td>
        </tr>
        <tr>
          <td valign="top" style="text-align: center;">20<br>
          </td>
          <td valign="top" style="text-align: center;">2<br>
          </td>
        </tr>
        <tr>
          <td valign="top" style="text-align: center;">30<br>
          </td>
          <td valign="top" style="text-align: center;">6<br>
          </td>
        </tr>
        <tr>
          <td valign="top" style="text-align: center;">10<br>
          </td>
          <td valign="top" style="text-align: center;">7<br>
          </td>
        </tr>

  </tbody>
</table>
</blockquote>

<p>this means they drove 2 hours at 20 miles per hour, then 6-2=4
hours at 30 miles per hour, then 7-6=1 hour at 10 miles per hour. The
distance driven is then (2)(20) + (4)(30) + (1)(10) = 40 + 120 + 10 =
170 miles. Note that the total elapsed time is always since the
beginning of the trip, not since the previous entry in their log. </p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input consists of one
 or more data sets. Each set starts with a line  containing an
 integer
<i>n</i>,  1 &#8804; <span style="font-style: italic;">n</span>  &#8804; 10,&nbsp; followed
by  <i>n</i> pairs of values, one pair per line. The  first value in a pair,
<span style="font-style: italic;">s,</span> is the  speed in miles per hour
and the second value, <span style="font-style: italic;">t</span>, is the
total elapsed time. Both <span style="font-style: italic;">s</span> and <span
 style="font-style: italic;">t</span> are integers, 1 &#8804;<span
 style="font-style: italic;"> s</span> &#8804; 90 and 1 &#8804;<span
 style="font-style: italic;"> t</span> &#8804; 12.&nbsp; The values for <span
 style="font-style: italic;">t </span>are always in strictly increasing order.
  A value of -1 for <span style="font-style: italic;">n</span> signals the
 end of the input. </p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each input set, print
 the distance driven, followed by a space, followed by the word "miles".&nbsp;
 </p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
20 2
30 6
10 7
2
60 1
30 5
4
15 1
25 2
30 3
10 5
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
170 miles
180 miles
90 miles
</PRE>

______________________________________________________
3060||||||false||||||
<P>A software company wants to write a program to play a simple poker game. In the game, a player is given a <SPAN CLASS="textit">hand</SPAN>, namely 5 distinct poker cards, from a deck of 52 distinct cards. A deck of 52 cards consists of 4 suits of 13 cards each, coded and sequenced as A, 2, 3, 4, 5, 6, 7, 8, 9, X, J, Q, and K. The 4 suits are club (C), heart (H), spade (S), and diamond (D). You tasks is to write a program to determine the points of a hand of 5 cards using the following scoring rules:<P><UL><LI><SPAN CLASS="textbf">Straight flush:</SPAN> 1000 points five cards of the same suit in sequence, such as 76543 of hearts. Note that AKQJX is treated as a valid sequence. </LI><LI><SPAN CLASS="textbf">Four of a kind:</SPAN> 750 points four cards of the same rank accompanied by a ``kicker'', like 44442. </LI><LI><SPAN CLASS="textbf">Full house:</SPAN> 500 points three cards of one rank accompanied by two of another, such as 777JJ. </LI><LI><SPAN CLASS="textbf">Flush:</SPAN> 350 points five cards of the same suit, such as AJ942 of hearts. </LI><LI><SPAN CLASS="textbf">Straight:</SPAN> 250 points five cards in sequence, such as 76543. Note that AKQJX is treated as a valid sequence. </LI><LI><SPAN CLASS="textbf">Three of a kind:</SPAN> 200 points three cards of the same rank and two kickers of different ranks, such as KKK84. </LI><LI><SPAN CLASS="textbf">Two pairs:</SPAN> 100 points two cards of one rank, two cards of another rank and a kicker of a third rank, such as KK449. </LI><LI><SPAN CLASS="textbf">One pair:</SPAN> 50 points two cards of one rank accompanied by three kickers of different ranks, such as AAK53. </LI><LI><SPAN CLASS="textbf">None of the above:</SPAN> O point any hand that does not qualify as one of the better hands above, such as KJ542 of mixed suits. </LI></UL><P>Note that if a hand satisfies two or more rules above, then we only apply the rule that wins the largest amount of points. For example, a ``full house'' consists of a ``three of a kind'' and a ``one pair.'' You need to give the score for ``full house'' only (i.e., 500 points), and nothing else.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number of hands <SPAN CLASS="MATH"><I>w</I></SPAN>, <SPAN CLASS="MATH"><I>w</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3060img1.png ALT="$ \le$">100</SPAN>. Then the <SPAN CLASS="MATH"><I>w</I></SPAN> hands are listed one by one. Note that each hand comes from a complete deck of 52 cards. Each hand is listed in one line with 5 cards. Each card consists of two upper case letters. The first letter is its suit, and the second letter is its rank. There is a blank between two cards. The cards in one hand are not sorted at all.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each hand, output its points in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
C3 D4 D5 S3 CX
CA C5 D4 D3 S2
HA HJ Hx HQ HK
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
50
250
1000
</PRE><P>
______________________________________________________
3061||||||false||||||
<P>A gnu is an African antelope that looks like an ox. Rick the persistent gnu is the leading bull of a herd of gnus. During the dry seasons, he leads his herd towards a greener pasture called Fair Sight (FS). On his way towards FS, Rick has to make many stops at small intermediate feeding sites to get his herd refreshed.<P>Researchers at the Migration Investigation Team (MIT) found that gnus cannot travel further than <SPAN CLASS="MATH"><I>D</I></SPAN> units of distance between two sites. They also observe that Rick is very persistent and serious about following the right direction. He always travels in straight lines, making stops and possibly changing directions only at a feeding site. He never leads the herd in any direction that points away from FS - the worst he would ever do is following a direction perpendicular to FS. In fact, he always chooses, among all possible sites, the one pointing in the direction closest to that of FS. Possibly in order to reduce the herds confusion, however, Rich excludes from consideration sites that would make the change of directions more abrupt than a right angle (i.e., deviating from the previous traveling segment by more than 90 degrees), even if they might be in the direction closer to that of FS than other feasible sites are.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3061.jpg ALT="\epsfbox{p3061.eps}"></DIV><P>Given the map of the possible feeding sites, the direction of Fair Sight, and the starting point of the gnu herd, you will help the Migration Investigation Team forecast the path of the herd as far as the map allows.<P>Consider the example above, where Rick starts from site 3 and <SPAN CLASS="MATH"><I>D</I></SPAN> is 170.0. The big arrow points in the direction of FS. From site 3, sites 2 and 5 are the only two sites within the distance of <SPAN CLASS="MATH"><I>D</I></SPAN>. He proceeds to site 2 since the direction of site 2 as seen from site 3 is more in line with FS than site 5. From site 2, he does not travel to site 5 since it is at a direction pointing away from FS. He then proceeds to site 4, the only possible next step. Now site 1 becomes within reach and seems somewhat in line with FS. It is excluded from consideration however, since it requires taking a very sharp turn, more than 90 degrees counterclockwise. Going towards site 7 would not make a very sharp turn but it leads away from FS. Site 7 is out of reach. So the path stops here.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of several test cases.<P>Each test case begins with a line of 5 numbers - the direction of FS as a vector <SPAN CLASS="MATH">(<I>F</I><SUB>x</SUB>, <I>F</I><SUB>y</SUB>)</SPAN>, the number <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3061.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3061.jpg ALT="$ \le$">100</SPAN> of all sites on the map, the starting site number <SPAN CLASS="MATH"><I>S</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3061.jpg ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3061.jpg ALT="$ \le$"><I>N</I></SPAN> where the herd enters this map, and a real number <SPAN CLASS="MATH"><I>D</I></SPAN> the limit of trip distance between adjacent sites.<P>Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines consists of a pair of real numbers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> representing the coordinates of the intermediate feeding sites.<P>The last test case is followed by a line consisting of 5 zeros.<P>Each ofthe real numbers (including FS's components and <SPAN CLASS="MATH"><I>D</I></SPAN>) has 1 digit after the decimal point and is within the range <SPAN CLASS="MATH">-999.999<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3061.jpg ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3061.jpg ALT="$ \le$">999.999</SPAN>.<P>The input has been checked against relevant degenerate cases. That is, you can be sure that deciding whether a turn is less than or greater than 90 degrees will never give an answer extremely close to 90 degrees, provided that all computations are done in at least single precision arithmetics. Ditto for other tests.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print the result of each test case on one line. For each test case, print the site numbers of all the visited sites along the migration path, in order and separated by a blank. Your output will always contain at least one site, namely the starting site.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
-100.0 0.0 7 3 170. 0
   140.0   120.0
   360.0   120.0
   480.0   180.0
   240.0   240.0
   420.0   240.0
    80.0   300.0
   260.0   300.0
0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 2 4
</PRE><P>
______________________________________________________
3062||||||false||||||
<P>For any integers <SPAN CLASS="MATH"><I>p</I></SPAN> and <SPAN CLASS="MATH"><I>q</I></SPAN> with <SPAN CLASS="MATH"><I>q</I> &gt; <I>O</I></SPAN>, define <SPAN CLASS="MATH"><I>p</I></SPAN> mod <SPAN CLASS="MATH"><I>q</I></SPAN> to be the integer <SPAN CLASS="MATH"><I>r</I></SPAN> with <SPAN CLASS="MATH"><I>O</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \le$"><I>q</I> - 1</SPAN> such that <SPAN CLASS="MATH"><I>p</I> - <I>r</I></SPAN> is divisible by <SPAN CLASS="MATH"><I>q</I></SPAN>. For example, we have<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3><COL ALIGN=RIGHT><COL ALIGN=CENTER><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">109 mod 10</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">-7 mod 3</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">-56 mod 7</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0.</TD></TR></TABLE></DIV><P><P><BR>Let <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \phi$"></SPAN> be a function defined recursively as follows.<P><P><BR><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="17" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$\displaystyle \Phi$">(<I>i</I>) = <IMG WIDTH="555" HEIGHT="120" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$\displaystyle \cases{
a &amp; if $i = 0$;\cr
b &amp; if $i = 1$;\cr
c &amp; if $i = 2$;\cr
...
...- 2) + e \cdot \phi (i - 3)) \ \mbox{mod} \ h &amp; if $i \ge 3$ and $i$ is even,}
$"></DIV><P></P>where <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>, <I>e</I>, <I>f</I>, <I>g</I>, <I>h</I></SPAN> are integers with <!-- MATH
 $0 < a, b, c, d, e, f,g, h \le 1000$
 --><SPAN CLASS="MATH">0 &lt; <I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>, <I>e</I>, <I>f</I>, <I>g</I>, <I>h</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \le$">1000</SPAN>. One can easily see that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \le$"><IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \Phi$">(<I>i</I>)<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \le$">1000</SPAN> holds for any integer <SPAN CLASS="MATH"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \ge$"> 0</SPAN>.<P>Now for any given integers <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>, <I>e</I>, <I>f</I>, <I>g</I>, <I>h</I>, <I>i</I></SPAN> with <!-- MATH
 $0 < a, b, c, d, e, f, g, h, i \le 1000$
 --><SPAN CLASS="MATH">0 &lt; <I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>, <I>e</I>, <I>f</I>, <I>g</I>, <I>h</I>, <I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \le$">1000</SPAN>, you are asked to write a program to output <SPAN CLASS="MATH"><IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \Phi$">(<I>i</I>)</SPAN>. (Hint: a direct recursive implementation of the above recurrence relation is likely to run forever for large <SPAN CLASS="MATH"><I>i</I></SPAN>.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line contains the number <SPAN CLASS="MATH"><I>n</I></SPAN> of test cases. Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains the sequence <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>, <I>e</I>, <I>f</I>, <I>g</I>, <I>h</I>, <I>i</I></SPAN> of integers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, your program has to output the correct value of <SPAN CLASS="MATH"><IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3062img1.png ALT="$ \Phi$">(<I>i</I>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
1 2 3 4 5 6 7 8 9
11 12 13 14 15 16 17 18 19
321 322 323 324 325 326 327 328 329
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
0
90
</PRE><P>
______________________________________________________
3063||||||false||||||
<P><SPAN CLASS="textit">Dao</SPAN> was a simple two-player board game designed by Jeff Pickering and Ben van Buskirk at 1999. A variation of it, called <SPAN CLASS="textit">S-Dao</SPAN>, is a one-player game. In S-Dao, the game board is a 4x4 square with 16 cells. There are 4 black stones and 4 white stones placed on the game board randomly in the beginning. The player is given a final position and asked to play the game using the follohving rules such that the final position is reached using the minimum number of moves:<P><P><BR><DL COMPACT><DT>1.</DT><DD>You first move a white stone, and then a black stone. You then alternatively move a white stone and a black stone.</DD><DT>2.</DT><DD>A stone can be moved horizontally, veertically or diagonally. A stone must be moved in a direction until the boarder or another stone is encountered. There is no capture or jump.</DD><DT>3.</DT><DD>During each move, you need to move a stone of the right color. You cannot pass.</DD></DL><P><P><BR>An example of a sequence of legal moves is shown in the following figure.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3063a.jpg ALT="\epsfbox{p3063a.eps}"></DIV><P>This move sequence takes 4 moves. This is not a sequence of legal moves using the least number of moves assume the leftmost board is the initial position and the rightmost board is the final position. A sequence of moves using only 3 moves is shown below.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3063a.jpg ALT="\epsfbox{p3063b.eps}"></DIV><P>Given an initial position and a final position, your task is to report the minimum number of moves from the initial position to the final position.<P><P><BR><SPAN CLASS="textbf">Hint:</SPAN> Doing simple exhaustive search without planning ahead will most likely get you into troubles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line contains the number of test cases <SPAN CLASS="MATH"><I>w</I></SPAN>, <SPAN CLASS="MATH"><I>w</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3063a.jpg ALT="$ \le$">6</SPAN>. Then the <SPAN CLASS="MATH"><I>w</I></SPAN> test cases are listed one by one. Each test case consists of 8 lines, 4 characters per line. The first 4 lines are the initial board position. The remaining 4 lines are the final board position. The <SPAN CLASS="MATH"><I>i</I></SPAN>th line of a board is the board at the <SPAN CLASS="MATH"><I>i</I></SPAN>-th row. A character `<TT>b</TT>' means a black stone, a character `<TT>w</TT>' means a white stone, and a `<TT>*</TT>' means an empty cell.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, output the minimum number of moves in one line. If it is impossible to move from the initial position to the final position, then output `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
w**b
*wb*
*bw*
b**w
w**b
*wb*
*bw*
bw**
w**b
*b**
**b*
bwww
w**b
*bb*
****
bwww
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
3
</PRE><P>
______________________________________________________
3064||||||false||||||
<P>You are running a DVD library. Suppose that you have <SPAN CLASS="MATH"><I>k</I></SPAN> DVD drives, through which the users can access the contents of the requested DVDs. A DVD drive can only access the content of one DVD at the same time. When a DVD request arrives, if the DVD is already in a DVD drive, then nothing needs to be done. Otherwise, you are supposed to insert the requested DVD into an empty drive. If all <SPAN CLASS="MATH"><I>k</I></SPAN> drives are occupied, you have to remove a DVD out of the drive before having the requested DVD inserted into the drive. The objective is to minimize the number of DVD insertions required for serving the whole sequence of requests.<P>To make things interesting, we assume that you are given the whole sequence <SPAN CLASS="MATH"><I>x</I><SUB>l</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>n</SUB></SPAN> in advance. Also, you have to service request <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> before servicing <SPAN CLASS="MATH"><I>x</I><SUB>i + 1</SUB></SPAN>, for each <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>n</I> - 1</SPAN>. You want to carefully plan how to service each request such that the overall number of DVD insertions is minimized. Clearly, the difficulty lies in determining which DVD should be removed from its drive when you receive a request to a DVD not in any drive and all drives are occupied.<P><P><BR>For example, let <SPAN CLASS="MATH"><I>k</I> = 2</SPAN>, and let the sequence of requests be 1, 2, 3, 1, 3, 1, 3. For the first two requests, one can simply put DVDs 1 and 2 into the drives. When the third request (i.e., DVD 3) arrives, you have to either remove DVD 1 or DVD 2 out of its drive so that DVD 3 can be inserted to a drive.<P><UL><LI>If you choose the first option (i.e., removing DVD 1), then the remaining requests (i.e., requests 4-7) need at least one more DVD insertions. </LI><LI>If you choose the second option (i.e., removing DVD 2), then the remaining requests (i.e., requests 4-7) need no more DVD insertions. </LI></UL><P>It is not difficult to verify that the second option results in an optimal way to service the above sequence of requests which needs only three DVD insertions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number <SPAN CLASS="MATH"><I>m</I></SPAN> of test cases. Each test case starts with a line containing two numbers <SPAN CLASS="MATH"><I>k</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN>, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3064img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3064img1.png ALT="$ \le$">10</SPAN> is the number of DVD drives and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3064img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3064img1.png ALT="$ \le$">100</SPAN> is the number of requests. In the follohving <SPAN CLASS="MATH"><I>n</I></SPAN> lines, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line contains the <SPAN CLASS="MATH"><I>i</I></SPAN>-th request <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program has to output the minimum number of DVD insertions required to service the whole sequence of requests in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
2 7
1
2
3
1
3
1
3
3 9
1
2
3
4
1
2
1
2
4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
4
</PRE><P>
______________________________________________________
3065||||||false||||||
<P>A tournament can be represented by a complete graph in which each vertex denotes a player and a directed edge is from vertex <SPAN CLASS="MATH"><I>x</I></SPAN> to vertex <SPAN CLASS="MATH"><I>y</I></SPAN> if player <SPAN CLASS="MATH"><I>x</I></SPAN> beats player <SPAN CLASS="MATH"><I>y</I></SPAN>. For a player <SPAN CLASS="MATH"><I>x</I></SPAN> in a tournament <SPAN CLASS="MATH"><I>T</I></SPAN>, the <EM>score</EM> of <SPAN CLASS="MATH"><I>x</I></SPAN> is the number of players beaten by <SPAN CLASS="MATH"><I>x</I></SPAN>. The <SPAN CLASS="textit">score sequence</SPAN> of <SPAN CLASS="MATH"><I>T</I></SPAN>, denoted by <SPAN CLASS="MATH"><I>S</I>(<I>T</I>) = (<I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>,..., <I>s</I><SUB>n</SUB>)</SPAN>, is a non-decreasing list of the scores of all the players in <SPAN CLASS="MATH"><I>T</I></SPAN>. It can be proved that <SPAN CLASS="MATH"><I>S</I>(<I>T</I>) = (<I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>,..., <I>s</I><SUB>n</SUB>)</SPAN> is a score sequence of <SPAN CLASS="MATH"><I>T</I></SPAN> if and only if<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="27" HEIGHT="69" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3065img1.png ALT="$\displaystyle \sum_{i=1}^{k}$"><I>s</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3065img1.png ALT="$\displaystyle \ge$"><IMG WIDTH="19" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3065img1.png ALT="$\displaystyle \left(\vphantom{\begin{array}{c} k \\  2 \end{array} }\right.$"><IMG WIDTH="30" HEIGHT="60" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3065img1.png ALT="$\displaystyle \begin{array}{c} k \\  2 \end{array}$"><IMG WIDTH="19" HEIGHT="64" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3065img1.png ALT="$\displaystyle \left.\vphantom{\begin{array}{c} k \\  2 \end{array} }\right)$"></DIV><P></P>for <SPAN CLASS="MATH"><I>k</I> = 1, 2,..., <I>n</I></SPAN> and equality holds when <SPAN CLASS="MATH"><I>k</I> = <I>n</I></SPAN>.<P>A player <SPAN CLASS="MATH"><I>x</I></SPAN> in a tournament is a <SPAN CLASS="textit">strong king</SPAN> if and only if <SPAN CLASS="MATH"><I>x</I></SPAN> beats all of the players whose scores are greater than the score of <SPAN CLASS="MATH"><I>x</I></SPAN>. For a score sequence <SPAN CLASS="textbf">S</SPAN>, we say that a tournament <SPAN CLASS="MATH"><I>T</I></SPAN> <SPAN CLASS="textit">realizes</SPAN> <SPAN CLASS="textbf">S</SPAN> if <SPAN CLASS="MATH"><I>S</I>(<I>T</I>)</SPAN> = <SPAN CLASS="textbf">S</SPAN>. In particular, <SPAN CLASS="MATH"><I>T</I></SPAN> is a <SPAN CLASS="textit">heavy tournament</SPAN> realizing <SPAN CLASS="textbf">S</SPAN> if <SPAN CLASS="MATH"><I>T</I></SPAN> has the maximum number of strong kings among all tournaments realizing <SPAN CLASS="textbf">S</SPAN>. For example, see <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> in Figure 1. Player <SPAN CLASS="MATH"><I>a</I></SPAN> is a strong king since the score of player <SPAN CLASS="MATH"><I>a</I></SPAN> is the largest score in the tournament. Player <SPAN CLASS="MATH"><I>b</I></SPAN> is also a strong king since player <SPAN CLASS="MATH"><I>b</I></SPAN> beats player <SPAN CLASS="MATH"><I>a</I></SPAN> who is the only player having a score larger than player <SPAN CLASS="MATH"><I>b</I></SPAN>. However, players <SPAN CLASS="MATH"><I>c</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN> and <SPAN CLASS="MATH"><I>e</I></SPAN> are not strong kings since they do not beat all of the players having larger scores.<P>The purpose of this problem is to find the maximum number of strong kings in a heavy tournament after a score sequence is given. For example, Figure 1 depicts two possible tournaments on five players with the same score sequence (1, 2, 2, 2, 3). We can see that there are at most two strong kings in any tournament with the score sequence (1, 2, 2, 2, 3) since the player with score 3 can be beaten by only one other player. We can also see that <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> contains two strong kings <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>. Thus, <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> is one of heavy tournaments. However, <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> is not a heavy tournament since there is only one strong king in <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN>. Therefore, the answer of this example is 2.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3065img1.png ALT="\epsfbox{p3065.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: Strong kings in a score sequence.</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3065img1.png ALT="$ \le$">10</SPAN>, which represents the number of test cases. The following <SPAN CLASS="MATH"><I>m</I></SPAN> lines contain <SPAN CLASS="MATH"><I>m</I></SPAN> score sequences in which each line contains a score sequence. Note that each score sequence contains at most ten scores.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The maximum number of strong kings for each test case line by line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
1 2 2 2 3
1 1 3 4 4 4 4
3 3 4 4 4 4 5 6 6 6
0 3 4 4 4 5 5 5 6
0 3 3 3 3 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
4
5
3
5
</PRE><P>
______________________________________________________
3066||||||false||||||
<P>A gigantic amount of space stations has been built in the deep space. Space ships that can travel in the space at the speed closed to the speed of light are also available. Although space ships can travel extremely fast, they cannot go directly from any station to any other station. The stations it can go depends on the numbers labeled on the buttons in the control room. Furthermore, it must refuel after each stop. The time to refuel take one unit of time which is much longer than the time to travel between any pair of stations.<P>Each space station has a unique number. Assume that there are <SPAN CLASS="MATH"><I>n</I></SPAN> stations and they are numbered from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>. The operation of the space ship is very simple. There are only two buttons in a space ship, and each button is marked by a positive integer. Suppose that you are at station <SPAN CLASS="MATH"><I>s</I></SPAN>. Pushing the button marked a can take you to station <SPAN CLASS="MATH">(<I>s</I> + <I>a</I>) mod <I>n</I></SPAN>, and pushing the other button marked <SPAN CLASS="MATH"><I>b</I></SPAN> can take you to station <SPAN CLASS="MATH">(<I>s</I> + <I>b</I>) mod <I>n</I></SPAN>. These two numbers marked on the buttons are set at the factory, and they cannot be changed.<P>Astronauts at station <SPAN CLASS="MATH"><I>s</I></SPAN> received a critical mission. To carry out the mission they must go to station <SPAN CLASS="MATH"><I>t</I></SPAN> as fast as they can. Since the number of stations is huge, the captain cannot figure out how to get to station <SPAN CLASS="MATH"><I>t</I></SPAN> fast. The captain, who is not an expert in programming, has tried a simple program which does a simple search for solutions. The program takes a long time to compute the answer. Please write an efficient program to solve the problem for the captain. In designing the program remember that the captain is left-handed. That is, the captain can push the button labeled <SPAN CLASS="MATH"><I>a</I></SPAN> much faster than the button labeled <SPAN CLASS="MATH"><I>b</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each line ofthe input contains 5 integers <SPAN CLASS="MATH"><I>n</I>, <I>a</I>, <I>b</I>, <I>s</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN>, which means that there are <SPAN CLASS="MATH"><I>n</I></SPAN> space stations, the two numbers marked on the space ship are <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> respectively, the space ship is at station <SPAN CLASS="MATH"><I>s</I></SPAN> and wants to go to station <SPAN CLASS="MATH"><I>t</I></SPAN>. The last line is followed by a 0, which means that there are no more test data. Assume that <!-- MATH
 $n < 2^{31}$
 --><SPAN CLASS="MATH"><I>n</I> &lt; 2<SUP>31</SUP></SPAN> and <SPAN CLASS="MATH"><I>a</I>, <I>b</I> &lt; <I>n</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input line, print out two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>, where <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are the number of times the two buttons must be pushed for the space ship to go from station <SPAN CLASS="MATH"><I>s</I></SPAN> to station <SPAN CLASS="MATH"><I>t</I></SPAN> with minimum delay. If there are more than one solutions, print the one with the larger <SPAN CLASS="MATH"><I>x</I></SPAN> value. If there are no solutions, print `<TT>no solution</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample input</A>&nbsp;</FONT></H2><P><PRE>
15 2 3 0 1
43 3 11 1 3
2147483647 1 2 0 2147483645
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 4
4 3
1 1073741822
</PRE><P>
______________________________________________________
3067||||||false||||||
<P>In the sub-tropical Pacific Ocean there is a country consisting of many islands. Its capital, Lapux, is a circular, floating island of radius <SPAN CLASS="MATH"><I>R</I><SUB>0</SUB></SPAN> that always stays in the air at a fixed elevation through some magical application of magnetic forces.<P>There is a very short festival each year at the noon of the summer solstice, when the sun shines directly from above. At this time Lapux moves rapidly over the sea along some polygonal path, casting a shadow right beneath it. (Note: a polygonal path is a path consisting of several straight line segments.) The shadow is enlarged by a circular ring of artificial clouds surrounding Lapux serving some unknown practical and entertainment functions.<P>Because of his predecessors' promise to the people and because of technical reasons, the benign dictator of Lapux always order the engineers to plan for a path and a cloud-controlling scheme such that<P><UL><LI>Lapux and the clouds never cast a shadow on any part of the islands; </LI><LI>the size of the circular disc of shadow remain constant along each segment of the polygonal path, changing only at the vertices, i.e., when it changes directions; </LI><LI>the size of the shadow be as large as possible, up to the technical limit of radius <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB></SPAN>. </LI></UL><P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3067.jpg ALT="\epsfbox{p3067.eps}"></DIV><P>You are to help the benign dictator of Lapux verifying that the path proposed by the engineers are indeed feasible, and to calculate the radius of the shadow at each segment of the path. In this problem, islands are represented as polygons, and the path of the center of Lapux as a polygonal line. You can safely assume that all islands are <EM>convex</EM> and that the path always stays on the sea and never touches any island (but may cross itself). Note thak a polygon <SPAN CLASS="MATH"><I>P</I></SPAN> is convex if and only if the line segment joining any pair of points in <SPAN CLASS="MATH"><I>P</I></SPAN> is completely contained in <SPAN CLASS="MATH"><I>P</I></SPAN>.<P>Consider the example above, where <SPAN CLASS="MATH"><I>R</I><SUB>0</SUB> = 10</SPAN> and <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB> = 50</SPAN>. The radius of the shadow can assume the minimum value of 50 during the first segment. During the second segment, the center passes (200,240), which is only <SPAN CLASS="MATH">7.07<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3067.jpg ALT="$ \le$"><I>R</I><SUB>0</SUB></SPAN> from the northwest corner of an island, and therefore is infeasible. The radius for the third segment is limited by the distance between the last stop and the southern tip of the triangular island, namely 20.0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of several test cases.<P>Each test case begins with a line of 2 real numbers and 1 integer - <SPAN CLASS="MATH"><I>R</I><SUB>0</SUB></SPAN> the minimum radius, <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB></SPAN> the minimum radius, and <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3067.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3067.jpg ALT="$ \le$">20</SPAN> the number of islands.<P>Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines represents an island. The first number <SPAN CLASS="MATH"><I>n</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3067.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3067.jpg ALT="$ \le$">20</SPAN> on a line gives the number of vertices of this island. The following <SPAN CLASS="MATH"><I>n</I><SUB>i</SUB></SPAN>, pairs of real numbers represent the <SPAN CLASS="MATH"><I>x</I></SPAN>- and <SPAN CLASS="MATH"><I>y</I></SPAN>- coordinates of the vertices around the island.<P>The next line gives the path. The first number <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3067.jpg ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3067.jpg ALT="$ \le$">20</SPAN> gives the number of vertices of the path. The following <SPAN CLASS="MATH"><I>m</I></SPAN> pairs of real numbers represent the <SPAN CLASS="MATH"><I>x</I></SPAN>- and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates of the vertices along the path.<P>The last test case is followed by a line consisting of three zeros.<P>Every real number <SPAN CLASS="MATH"><I>t</I></SPAN> in the input file has at most one digit after the decimal point and <SPAN CLASS="MATH">-9999.9<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3067.jpg ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3067.jpg ALT="$ \le$">9999.9</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Print the result of each test case on one line. For a test case with an <SPAN CLASS="MATH"><I>m</I></SPAN>-vertex path, print <SPAN CLASS="MATH"><I>m</I> - 1</SPAN> integers, in order, each representing the desired radius (rounded to the decimal point) during that segment of flight. If the desired radius is impossible for a segment (less than <SPAN CLASS="MATH"><I>R</I><SUB>0</SUB></SPAN>), print `<TT>0</TT>' for that segment. Round all numbers to integers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 50 3
3 220. 0 360. 0 240. 0 380. 0 200. 0 380. 0
4 205. 0 235. 0 240. 0 220. 0 240. 0 200. 0 220. 0 200. 0
4 60. 0 340. 0 120. 0 280. 0 180. 0 340. 0 120. 0 400. 0
4 20. 0 200. 0 160. 0 200. 0 220. 0 260. 0 220. 0 340. 0
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
50 0 20
</PRE><P>
______________________________________________________
3068||||||false||||||
<P>Software systems in practice can be very complicated, particularly when they are implemented by distributed, networked, multi-threaded, or concurrent techniques. Debugging these systems is hard, because the systems can go into one of so many possible states. Image that in any time, you take a snap shot of the memory (or variable values) of a program. That is a state of the program. Typically, a program executes a statement to move from one state to another.<P>Suppose we want to check if a program can behave correctly. We first abstract a program into a finite-state machine (FSM). An FSM is shown as Figure 1. A state is illustrated as a circle. A starting state is pointed by an edge without symbol and source state. The edge symbols <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I></SPAN> represent the actions which cause the state transition. Theoretically, the<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3068a.jpg ALT="\epsfbox{p3068a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: The FSM of a abstracted program</DIV><P>program contains the following behaviors<P><PRE>
abdabdabdabd.....
abdcdabdcdabdcd....
cdbdcdbdcdbd......
abdcdbd.........
..................
</PRE><P>There are more infinite sequences to go on. Each infinite sequence is a possible run of the FSM. The set of these infinite sequences is called the behaviors of the program.<P>Sometimes, we want to check if a program can go wrong in any of these possible behaviors. For example, suppose action <SPAN CLASS="MATH"><I>a</I></SPAN> is to request a memory and <SPAN CLASS="MATH"><I>b</I></SPAN> is to release a memory. We may want to make sure <SPAN CLASS="MATH"><I>a</I></SPAN> always occurs before <SPAN CLASS="MATH"><I>b</I></SPAN> in any run and <SPAN CLASS="MATH"><I>b</I></SPAN> should not occurs without <SPAN CLASS="MATH"><I>a</I></SPAN>. We can describe this requirement by an FSM as well (see Figure 2). The black state represents a trap state (numbered -1), a state which once a run goes in, it cannot go out. When a run enters a trap state, the requirement is violated.<P>Given an FSM and a requirement (both described by FSM), your goal is to write a program to answer if the requirement is satisfied by all the possible behaviors of FSM or can be violated by at least one run. For example, FSM in Figure 1 has a run <SPAN CLASS="textit">abdcdb.....</SPAN> which violates<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3068a.jpg ALT="\epsfbox{p3068b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2: The requirement described by an FSM.</DIV><P>that requirement FSM. The second <SPAN CLASS="MATH"><I>b</I></SPAN> appears without an <SPAN CLASS="MATH"><I>a</I></SPAN> occurs first. The requirement is violated.<P><P><BR><SPAN CLASS="textbf">Hint:</SPAN> You need to figure out a way to ``merge'' two FSMs, i.e., to obtain a new FSM which has composite behaviors of the two FSMs. Next, search for the trap state in that composite behaviors if any.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The test file begins with a number <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3068a.jpg ALT="$ \le$">10</SPAN>, the number of test cases. In each test case, there are two FSMs to read in. The first FSM is the program and the second is the requirement. Each FSM begins with a line of three numbers <SPAN CLASS="MATH"><I>s</I></SPAN> <SPAN CLASS="MATH"><I>e</I></SPAN> <SPAN CLASS="MATH"><I>i</I></SPAN>, where <SPAN CLASS="MATH"><I>s</I></SPAN> is the number of states, <SPAN CLASS="MATH"><I>e</I></SPAN> is the number of edges. <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3068a.jpg ALT="$ \le$"><I>s</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3068a.jpg ALT="$ \le$">500</SPAN> and <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3068a.jpg ALT="$ \le$"><I>e</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3068a.jpg ALT="$ \le$">2000</SPAN>, and <SPAN CLASS="MATH"><I>i</I></SPAN> is the starting state of the FSM. Following the three numbers are <SPAN CLASS="MATH"><I>e</I></SPAN> lines of edges. Each edge begins with starting state, action symbol (<TT>a</TT>-<TT>z</TT>), and the destination state. A trap state is represented by `<TT>-1</TT>'. A blank and empty line is used to separate the data of two FSMs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, please output ``satisfied'' if no runs of program violate the requirement. Output ``violated'' if at least one run can go into a trap state.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4 5 1
1 a 2
2 b 3
1 c 4
4 d 2
3 d 1

3 4 1
1 a 2
2 b 1
1 b -1
2 a -1

4 5 1
1 a 2
2 b 3
1 c 4
4 a 2
3 d 1

3 4 1
1 a 2
2 b 1
1 b -1
2 a -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
violated
satisfied
</PRE><P>
______________________________________________________
3069||||||false||||||
<P>Once upon a time, there was a small kingdom in a small island. The king needed to give rewards to a general for his effort of fighting the enemy. The king was famous of his not being generous. So, the king gave a map of one <SPAN CLASS="MATH">10000&#215;10000</SPAN> green rectangle to the general. (We say that the <SPAN CLASS="textit">width</SPAN> of the rectangle is the side that is not longer than the other side. The other side is called the <SPAN CLASS="textit">height</SPAN>. Therefore, a <SPAN CLASS="MATH">3&#215;4</SPAN> rectangle has width 3 and height 4.) The general was given at most 100 sets of blue rectangles on the table. Each set contains at least 2 rectangles and at most 15 rectangles, and the width of rectangles in a set is the same. We also know that if rectangle <SPAN CLASS="MATH"><I>A</I></SPAN> and rectangle <SPAN CLASS="MATH"><I>B</I></SPAN> are in two different sets, then rectangle <SPAN CLASS="MATH"><I>A</I></SPAN> does not contain rectangle <SPAN CLASS="MATH"><I>B</I></SPAN> and rectangle <SPAN CLASS="MATH"><I>B</I></SPAN> does not contain rectangle <SPAN CLASS="MATH"><I>A</I></SPAN>. (Note that a rectangle has 4 boundary lines. Two lines in a plane are <EM>aligned</EM> if there is one line that contains both lines. Rectangle <SPAN CLASS="MATH"><I>A</I></SPAN> <EM>contains</EM> rectangle <SPAN CLASS="MATH"><I>B</I></SPAN> if you can completely place <SPAN CLASS="MATH"><I>A</I></SPAN> on the top of <SPAN CLASS="MATH"><I>B</I></SPAN> such that at least one boundary line of <SPAN CLASS="MATH"><I>A</I></SPAN> is aligned with a boundary line of <SPAN CLASS="MATH"><I>B</I></SPAN> and no parts of <SPAN CLASS="MATH"><I>B</I></SPAN> is visible assuming rectangles are solid and non-transparent. For example, a <SPAN CLASS="MATH">5&#215;7</SPAN> rectangle contains a <SPAN CLASS="MATH">4&#215;6</SPAN> rectangle, but a <SPAN CLASS="MATH">5&#215;5</SPAN> rectangle does not contain a <SPAN CLASS="MATH">4&#215;6</SPAN> rectangle.) The total number of the blue rectangles is at most 1000.<P>The general could pick up as many blue rectangles as he wanted from the table and put them on the top of green rectangle. Each blue rectangle must have one corner sitting at the left-lower corner of the green rectangle, and one of the blue rectangle's boundary line is aligned with a boundary line of the green rectangle.<P>Area of the map covered by the blue rectangles will be granted to the general. This looks like a difficult task for the general. Fortunately, the general has a notebook computer. Please help the general to write a program to find out what is the maximum area the general can cover by those blue rectangles. You don't need to show how to put the blue rectangles. The output is the maximum area the general will be granted. For example, if there are two blue rectangles with dimensions <SPAN CLASS="MATH">5&#215;7</SPAN> and <SPAN CLASS="MATH">5&#215;6</SPAN>. These two rectangles belong to the same set The following figure shows two possible ways to place the two rectangles.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3069.jpg ALT="\epsfbox{p3069.eps}"></DIV><P>On the left, the total covered area is 35. On the right, the total covered area is 40, which is the maximum area that you can cover.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>There are <SPAN CLASS="MATH"><I>m</I></SPAN> test data, <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/p3069.jpg ALT="$ \le$">10</SPAN>. In each test data, there are at most 1000 rectangles. The first line in a data set contains the number of rectangles. Each rectangle in the data set is represented in a line <SPAN CLASS="MATH"><I>xy</I></SPAN>, where <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are the width and height of the corresponding rectangle, respectively. There is a blank between <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>. Note that <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are positive integers that are at most 10000. End of the input file is a single line of `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output should have <SPAN CLASS="MATH"><I>m</I></SPAN> numbers in <SPAN CLASS="MATH"><I>m</I></SPAN> lines. Each line reports the maximum covered area for the corresponding data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
5 7
5 6
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
40
</PRE><P>
______________________________________________________
3070||||||false||||||
<p>
Rocky rolled over in his bed and looked at his LED alarm clock.  He saw what
was displayed and went back to sleep.  Later, he woke up again and once again
glanced at the alarm clock.  Although he did not know if all the LED segments
were working, he was able to determine with certainty the time.  Could you?
<p>
Rocky's LED clock uses four 7-segment displays to show the time.
<p>
Each 7-segment display has seven bars on it, and displays different numbers by
turning on different bars:
<pre>
 _       _  _       _   _   _   _   _
| |   |  _| _| |_| |_  |_    | |_| |_|
|_|   | |_  _|   |  _| |_|   | |_|  _|
</pre>
Using a bit to represent each segment, we can describe a display with seven bits.
For example, if the segments are numbered as such:
<p>
<center><img src="http://livearchive.onlinejudge.org/external/30/p3070a.gif></img></center>
<p>
Then the display:
<center><pre>
|_
| 
</pre></center>
can be represented with bits:
<p>
<center>0000111</center>
<p>
And the numbers therefore could be represented by:
<p>
<table border=1 align=center>
<tr>
<td><b>Number</b></td>
<td><b>Bit 1</b></td>
<td><b>Bit 2</b></td>
<td><b>Bit 3</b></td>
<td><b>Bit 4</b></td>
<td><b>Bit 5</b></td>
<td><b>Bit 6</b></td>
<td><b>Bit 7</b></td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>6</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>7</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>8</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
</table>
<p>
If a segment on the display is "burnt out", however, it will not display
even though it should.  For example, if the number three were to be displayed,
but the segment corresponding with bit 7 were burnt out, the display would
instead be:
<center><pre>
 _ 
  |
 _|
</pre></center>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>
The first line contains a single integer <i>n</i> indicating the number of data
sets.
<p>
Each data set is a single line containing eight 7-bit strings representing the
LED displays observed.  The first four strings will represent the first time
displayed and the next four strings will represent the second time displayed.
All of the strings will be separated by a single space.  Note: It is not given
in the input which segments are burnt out.
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>
For each data set, there will be exactly one line of output.  This line will
simply be the second time observed in the LED display, in the format HH:MM.
The segments that are burnt out will be consistent between the first and second
time displayed.  There will only be one possible solution for each data set.
<p>
All times (for input and output) will be represented in standard (non-military)
format, with no leading zeros (nine o'clock is 9:00, not 09:00).
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<pre>
2
0110000 1101101 1111110 1111111 0000000 1111011 1111110 1111111
0000000 0000000 1000001 1111111 0100000 0000001 0000000 0110000
</pre>
<p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>
9:08
12:11
</pre>
<p>

______________________________________________________
3071||||||false||||||
<p>Today is Ted's 100th birthday. A few weeks ago, you were selected by the family to contact all of Ted's descendants and organize a surprise party. To make this task easier, you created an age-prioritized list of everyone descended from Ted. Descendants of the same age are listed in dictionary order.<p>The only materials you had to aid you were birth certificates. Oddly enough, these birth certificates were not dated. They simply listed the father's name, the child's name, and the father's exact age when the baby was born.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input to this problem will begin with line containing a single integer <i>n</i> indicating the number of data sets. Each data set will be formatted according to the following description.<p>A single data set has 2 components:<ol><li><i>Descendant Count</i> - A line containing a single integer <i>X</i> (where 0 &lt; <i>X</i> &lt; 100) indicating the number of Ted's descendants.</li> <li><i>Birth Certificate List</i> - Data for <i>X</i> birth certificates, with one certificate's data per line. Each certificate's data will be of the format "<tt>FNAME CNAME FAGE</tt>" where:<ul><li><i>FNAME</i> is the father's name.</li> <li><i>CNAME</i> is the child's name.</li> <li><i>FAGE</i> is the integer age of the father on the date of <i>CNAME</i>s birth.</li></ul></li></ol><p>Note:<ul><li>Names are unique identifiers of individuals and contain no embedded white space.</li> <li>All of Ted's descendants share Ted's birthday. Therefore, the age difference between any two is an integer number of years. (For those of you that are really picky, assume they were all born at the exact same hour, minute, second, etc... of their birth year.)</li> <li>You have a birth certificate for all of Ted's descendants (a complete collection).</li></ul><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each data set, there will be <i>X</i>+1 lines of output. The first will read, "<i><tt>DATASET Y</tt></i>", where <i>Y</i> is 1 for the first data set, 2 for the second, etc. The subsequent <i>X</i> lines constitute your age-prioritized list of Ted's descendants along with their ages using the format "<i><tt>NAME AGE</tt></i>". Descendants of the same age will be listed in dictionary order.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
1
Ted Bill 25
4
Ray James 40
James Beelzebub 17
Ray Mark 75
Ted Ray 20
</pre><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
DATASET 1
Bill 75
DATASET 2
Ray 80
James 40
Beelzebub 23
Mark 5
</pre><p>
______________________________________________________
3072||||||false||||||
<p>You are writing your first website and seem to be making your fair share of simple HTML syntax errors. You have decided to write an HTML parser to help you determine if your HTML code is syntactically correct based on the following condensed HTML definition:<p><table border=1 align=center><tr><td><b>HTML CODE</b></td><td>&lt;HTML&gt;<i><b>BODY</b></i>&lt;/HTML&gt;</td></tr><tr><td><b>BODY</b></td><td>&lt;BODY&gt;<i><b>TEXT</b></i>&lt;/BODY&gt;</td></tr><tr><td><b>TEXT</b></td><td><i><b>STRING</b></i> | <i><b>STRING TEXT</b></i> | <i><b>TAG</b></i> | <i><b>TAG TEXT</b></i></td></tr><tr><td><b>STRING</b></td><td>possibly empty string of printable characters other than '&lt;' and '&gt;')</td></tr><tr><td><b>TAG</b></td><td><i><b>BOLD</b></i> | <i><b>ITALICS</b></i> | <i><b>LINK</b></i></td></tr><tr><td><b>BOLD</b></td><td>&lt;B&gt;<i><b>TEXT</b></i>&lt;/B&gt;</td></tr><tr><td><b>ITALICS</b></td><td>&lt;I&gt;<i><b>TEXT</b></i>&lt;/I&gt;</td></tr><tr><td><b>LINK</b></td><td>&lt;A HREF=<i><b>URL</b></i>&gt;<i><b>TEXT</b></i>&lt;/A&gt;</td></tr><tr><td><b>URL</b></td><td>http://<i><b>STRING</b></i>.com</td></tr></table><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line contains a single integer <i>n</i> indicating the number of data sets.<p>The following <i>n</i> lines each represent a data set and consists of up to 1000 characters. Spaces can be contained anywhere within the data set.<p>Note that all tags are case sensitive.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>If the code is syntactically correct, the following string will be printed:<p>"Syntax Included"<p>Otherwise the following string will be printed:<p>"No Syntax Included"<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
3
&lt;HTML&gt;&lt;BODY&gt;&lt;B&gt;Hello world!&lt;/B&gt;&lt;/BODY&gt;&lt;/HTML&gt;
&lt;HTML&gt;&lt;BODY&gt;&lt;B&gt;Is this correct?&lt;/B&gt;&lt;/HTML&gt;
&lt;HTML&gt;&lt;BODY&gt;&lt;A HREF=http://www.go.com&gt;link&lt;/A&gt;&lt;/BODY&gt;&lt;/HTML&gt;
</pre><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
Syntax Included
No Syntax Included
Syntax Included
</pre><p>
______________________________________________________
3073||||||false||||||
<p>After reading the book <i>Tim and Marc Kill Kenny</i> about fifty zillion times, James decided he'd had it with choose-your-own-adventure stories. No matter what choices he made, it seemed like Kenny always fell down an abandoned mine shaft, got run over by a bus load of nuns, or was messily devoured by stray cats. James eventually found the page with the happy ending (where Kenny saves himself by trapping Tim and Marc between the pizza and the hungry programmers) by flipping through the book, but he can't figure out how to get there by following the rules. Luckily, he owns a C compiler...<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input to this problem will consist of a (non-empty) series of up to 100 data sets, each representing a choose-your-own-adventure story. Each data set will be formatted according to the following description, and there will be <b>no blank lines</b> separating data sets.<p>The first line contains a single integer <i>n</i> indicating the number of data sets.<p>A single data set has 2 components:<ol><li><i>Page Count</i> - A line containing a single integer <i>X</i>, where 1 &lt; <i>X</i> &lt; 100, indicating the number of pages in the story.</li> <li><i>Page List</i> - A sequence of <i>X</i> lines, each of which represents a page from the book. Each line has the following components separated from one another by single spaces:<ul><li><i>Line type</i> - A single character indicating what type of line this is. It will represent either a "C" choice page, or an "E" end page. Page 1 is always a choice page.</li> <li><i>Text</i> - A string of text surrounded by double quotes. Including the quotes, this component will not exceed 256 characters. The quotes are given for input purposes only and should not be considered part of the text. The text will not contain embedded double quotes.</li> <li><i>Choices</i> - Two positive integers from 1 to <i>X</i> indicating the pages where the reader can go from this page. Only choice pages have this component.</li> <li><i>Ending Type</i> - Either the text "HAPPY" or "GRISLY". There will only be one happy ending per story, and only end pages have this component.</li></ul></li></ol><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each story in the input:<ol><li>Output a single line, "STORY #" where # is 1 for the first story, 2 for the second story, etc.</li> <li>Determine the story that begins on page 1 and ends on the happy ending page. Output the text of this story, printing one "page" of text per line. Note that there is only one such story for each data set.</li></ol><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
3
C "Arrived at LSU for the contest" 2 3
E "Was devoured by sidewalk ants" GRISLY
E "Won the contest. Received glory and nachos." HAPPY
5
C "Saw a peanut" 3 5
E "Made peanut butter sandwich" HAPPY
C "Found a hammer" 4 2
E "Hit self on head with hammer, ouch!" GRISLY
E "Ate the peanut, choked on it, and died" GRISLY
</pre><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
STORY 1
Arrived at LSU for the contest
Won the contest. Received glory and nachos.
STORY 2
Saw a peanut
Found a hammer
Made peanut butter sandwich
</pre><p>
______________________________________________________
3074||||||false||||||
<p>Poker is played with a standard deck of cards (no jokers). Every card has rank and suit. Possible card ranks in ascending order are: A,2,3,4,5,6,7,8,9,T,J,Q,K,A (Note that 'A' can be either high or low). Possible card suits in ascending order (the order of suits is for display purposes only and should not be used in determining hand or card value) are: Clubs (c), Diamonds (d), Hearts (h), Spades (s). This yields a total of 13 x 4 = 52 cards in a deck.<p>Poker hands consist of five cards. The possible poker hands are listed below from best to worst. Examples for each type of hand are given in bold.<p><ul><li><i>Royal Flush</i> -- Ace, King, Queen, Jack, Ten; all of the same suit. Ex: <b>Ad Kd Qd Jd Td</b></li> <li><i>Straight Flush</i> -- Five cards with sequential rank, all of the same suit. Ace can be high or low, but not both. When there are two or more straight flushes, the straight flush with the highest ranked card wins. Ex: <b>Ah 5h 4h 3h 2h</b></li> <li><i>Four of a Kind</i> -- Four cards of the same rank. If there are two or more hands that qualify, the hand with the higher ranking four of a kind wins. If there are two four of a kinds with the same rank, then the one with the high card outside the four of the kind wins. Ex: <b>Kc 8s 8h 8d 8c</b></li> <li><i>Full House</i> -- Three cards of the same rank plus two cards sharing a different rank. When comparing full houses, the rank of the three cards determines which is higher. If the threes of a kind were equal, the rank of the pairs would decide. For example <b>9s 9h 9d 4d 4c</b> beats <b>As Ah 8s 8h 8d</b>. Ex: <b>Ts Th 3s 3h 3d</b></li> <li><i>Flush</i> -- Five cards of the same suit, any rank. When comparing two flushes, the highest card determines which is higher. If the highest cards are equal then the second highest cards are compared; if those are equal too, then the third highest cards, and so on. Ex: <b>Kc 9c 8c 5c 2c</b></li> <li><i>Straight</i> -- Five cards with sequential rank, mixed suits. Ace can be high or low, but not both. When there are two straights, the straight with the highest ranked card wins. Ex: <b>9s 8h 7h 6c 5d</b></li> <li><i>Three of a Kind</i> -- Three cards with the same rank. The highest three of a kind rank wins. If both three of a kinds are the same rank, then the one with the highest cards outside the three of the kind wins. Ex: <b>Ks 8h 6h 6d 6c</b></li></ul><p>"Texas Hold 'em" is a variation of poker that has gained popularity recently due to frequent national TV exposure. Each player receives two cards face down, known as "hole cards". Five cards, known as "the board", are then placed face up in the middle of the table. A player wins by making the best five-card poker hand possible using any combination of their two "hole cards" and the five cards on "the board". A useful skill for a Hold 'em player is to be able to tell the best possible hand an opponent might have. All the player knows are the five face up cards and his/her two hole cards. If an opponent can't make a better hand than the player, then the player knows to bet as much as possible.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line contains a single integer <i>n</i> indicating the number of data sets.<p>Each data set is a line consisting of seven two-character strings separated from each other by single spaces. Each string represents a playing card. The first character will be the card's rank; the second character will be the card's suit. The first five cards represent "the board" while the last two represent the player's "hole cards". These cards are not in any specific order.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each line of input, output the best five-card hand an opponent might make. If there are two or more cards of different suits that can be used to form the best hand (i.e., there is a tie), display those cards' suits as '*'. The cards should be listed in descending order based on rank first (Aces always considered high for display purposes) then suit (with '*' being lowest in the suit order). On the same line, output the name of the hand after the card list. Poker hand names: ROYAL FLUSH, STRAIGHT FLUSH, FOUR OF A KIND, FULL HOUSE, FLUSH, STRAIGHT, THREE OF A KIND.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
9
9c As 3h 8d 2s Jh Ah
6s 5h 5d 4s 4h 5s 5c
Qc 3d Qd Qh 3h 3c Qs
Ah 2c 8d 6h Js 2d As
8c 3d 2c Ad Tc Kc 4d
As Js Kc Tc Qs 9s 8s
2d Kd Ad 6h 3d As Ac
Qc Qh As Qd Qs Ah Ac
2d 5h 8s Jh Kd Ks As
</pre><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
As 5* 4* 3h 2s STRAIGHT
6s 4s 4h 4d 4c FOUR OF A KIND
A* A* Qh Qd Qc FULL HOUSE
Ah Ad Ac Js 8d THREE OF A KIND
Ac Qc Tc 8c 2c FLUSH
As Ks Qs Js Ts ROYAL FLUSH
Ad 5d 4d 3d 2d STRAIGHT FLUSH
A* Qs Qh Qd Qc FOUR OF A KIND
Kh Kd Kc Jh 8s THREE OF A KIND
</pre><p>
______________________________________________________
3075||||||false||||||
<p>Working in a Rubik's Cube factory has always been your dream job, but you're a clumsy rube. Now you're trying to invent a new variation, a 5x5x5 Rubik's Cube! You just walked into the research lab with a working prototype and accidentally dropped it, breaking it into 2 pieces. You have one piece in your left hand and are trying to find the other. Unfortunately, the floor is littered with parts from previous attempts, making it difficult to find the missing piece. Luckily, you know how to program...<p>Given two solids composed of unit cubes, determine if they can be fit together to form a solid 5x5x5 cube.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line contains a single integer <i>n</i> indicating the number of data sets. The following lines contain the data sets.<p>Each data set will show side-by-side top-down views of each of the solids as a 5x5 array of numbers 0-9. Each number represents the height of the solid at that point (the number of unit cubes stacked at that point). If the height is 0, there is no solid present at that point. This is similar to providing a topographical map of each solid, and it is valid to assume that there are no gaps "under" any part of a solid that cannot be seen.<p>Note that each solid will be connected (i.e., a single piece) and may require translations (not just rotations) to join with a compatible solid.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each data set, print, "Yes" if a solid 5x5x5 cube can be formed by fitting together the two halves, and print, "No" if a cube cannot be formed. Each word should appear on its own line.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
55551 11111
55551 11111
55551 11111
55551 11110
55552 00000
22222 33333
22222 33333
22222 33233
22222 33333
22222 33333
</pre><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
Yes
No
</pre><p>
______________________________________________________
3076||||||false||||||
<p><center><img src="http://livearchive.onlinejudge.org/external/30/p3076a.gif></img></center><p>As president of a startup airline company, you have started a frequent flier program that rewards customers for every mile they travel. As a for-profit company, you have a vested interest in minimizing the number of frequent flier miles that a person can earn on any one trip. To get an idea of how many miles a customer could earn flying the existing network, you've decided to write a program.<p>Assumptions:<ul><li>A passenger's itinerary is one-way (no return flight).</li> <li>Every itinerary takes the shortest route from the departing city to the destination city.</li> <li>Frequent flier miles are counted "as the crow flies" (i.e., the shortest route across the earth's surface that connects the cities along the route).</li> <li>The earth's surface is a perfect sphere with radius 4000 miles.</li></ul><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line contains a single integer <i>n</i> indicating the number of data sets. Each data set will be formatted according to the following description:<p>A single data set has 3 components:<ol><li><i>Header Line</i> - A single line, "<i><tt>X Y</tt></i>", where <i>X</i> is the number of cities and <i>Y</i> is the number of flight legs in the airline's network. Both will be positive integers less than 100.</li> <li><i>City List</i> - A list of cities and their locations, one city per line. The line will be of the format<p>"<i><tt>C LA NS LO EW</tt></i>" where:<ul><li><i><tt>C</tt></i> is the name of the city (no spaces, alphabetical, first letter only upper case)</li> <li><i><tt>LA</tt></i> is the degrees of latitude where the city is located (from 0 to 90)</li> <li><i><tt>NS</tt></i> is the direction of latitude ('N'orth or 'S'outh of the equator)</li> <li><i><tt>LO</tt></i> is the degrees of longitude where the city is located (from 0 to 180)</li> <li><i><tt>EW</tt></i> is the direction of longitude ('E'ast or 'W'est of the prime meridian)</li></ul></li><li><i>Flight List</i> - A list of city pairs of the format "<i><tt>B C</tt></i>" representing different cities that are directly connected by flight legs, one pair per line. Note that "<i><tt>B C</tt></i>" is equivalent to "<i><tt>C B</tt></i>".</li></ol><p>Note:<ul><li>Some longitude measurements can be represented in multiple ways (i.e., 180E = 180W)</li> <li>All degrees of latitude and longitude given in the input will be integers.</li> <li>The airline's network is connected (i.e., there is at least one route between any two cities).</li></ul><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each data set, output the two cities that are farthest from each other (farthest in the sense that the shortest route between them is the longest of any city pair). You are guaranteed that there will be no ties. Display the city names on the same line, separated by a single space, sorted in dictionary order.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
6 5
Northpole 90 N 87 E
Southpole 90 S 180 W
Equatorone 0 N 45 W
Equatortwo 0 S 90 E
Equatorthree 0 S 180 E
Equatorfour 0 N 46 W
Equatorone Equatortwo
Equatortwo Equatorthree
Equatorthree Equatorfour
Northpole Equatortwo
Southpole Equatorthree
2 1
Northpole 90 N 0 E
Southpole 90 S 0 W
Southpole Northpole
</pre><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
Equatorfour Equatorone
Northpole Southpole
</pre><p>
______________________________________________________
3077||||||false||||||
<p>Zombies love to eat brains. Yum.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line contains a single integer <i>n</i> indicating the number of data sets.<p>The following <i>n</i> lines each represent a data set. Each data set will be formatted according to the following description:<p>A single data set consists of a line "<tt>X Y</tt>", where <i>X</i> is the number of brains the zombie eats and <i>Y</i> is the number of brains the zombie requires to stay alive.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each data set, there will be exactly one line of output. This line will be "MMM BRAINS" if the number of brains the zombie eats is greater than or equal to the number of brains the zombie requires to stay alive. Otherwise, the line will be "NO BRAINS".<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
3
4 5
3 3
4 3
</pre><p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
NO BRAINS
MMM BRAINS
MMM BRAINS
</pre><p>
______________________________________________________
3078||||||false||||||
<p>
Alice and Bob need to send secret messages to each other and are discussing ways to encode their
messages:
<blockquote>
	<u>Alice:</u> Lets just use a very simple code: Well assign A the code word 1, B will be 2,
	and so on down to Z being assigned 26.<br>

	<u>Bob:</u> Thats a stupid code, Alice. Suppose I send you the word BEAN encoded as 25114.
	You could decode that in many different ways!<br>

	<u>Alice:</u> Sure you could, but what words would you get? Other than BEAN, youd get
	BEAAD, YAAD, YAN, YKD and BEKD. I think you would be able to figure out the
	correct decoding. And why would you send me the word BEAN anyway?<br>

	<u>Bob:</u> OK, maybe thats a bad example, but I bet you that if you got a string of length 500
	there would be tons of different decodings and with that many you would find at least two
	different ones that would make sense.<br>

	<u>Alice:</u> How many different decodings?<br>

	<u>Bob:</u> Jillions!
</blockquote>
For some reason, Alice is still unconvinced by Bobs argument, so she requires a program that will
determine how many decodings there can be for a given string using her code.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input will consist of multiple input sets. Each set will consist of a single line of digits representing a
valid encryption (for example, no line will begin with a 0). There will be no spaces between the digits.
An input line of 0 will terminate the input and should not be processed


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each input set, output the number of possible decodings for the input string. All answers will be
within the range of a long variable.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
25114
1111111111
3333333333
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6
89
1
</PRE>

______________________________________________________
3079||||||false||||||
<p>Given a sequence of consecutive integers n, n+1, n+2,..., m, an anti-prime sequence is a rearrangement of these integers so that each adjacent pair of integers sums to a composite (non-prime) number. For example, if n = 1 and m = 10, one such anti-prime sequence is 1, 3, 5, 4, 2, 6, 9, 7, 8, 10. This is also the lexicographically first such sequence.<p>We can extend the definition by defining a degree d anti-prime sequence as one where all consecutive subsequences of length 2, 3,..., d sum to a composite number. The sequence above is a degree 2 anti-prime sequence, but not a degree 3, since the subsequence 5, 4, 2 sums to 11. The lexicographically first degree 3 anti-prime sequence for these numbers is 1, 3, 5, 4, 6, 2, 10, 8, 7, 9.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input will consist of multiple input sets. Each set will consist of three integers, n, m, and d on a single line. The values of n, m and d will satisfy 1 &le; n &lt; m &le; 1000, and 2 &le; d &le; 10. The line 0 0 0 will indicate end of input and should not be processed.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each input set, output a single line consisting of a comma-separated list of integers forming a degree d anti-prime sequence (do not insert any spaces and do not split the output over multiple lines). In the case where more than one anti-prime sequence exists, print the lexicographically first one (i.e., output the one with the lowest first value; in case of a tie, the lowest second value, etc.). In the case where no anti-prime sequence exists, output:<blockquote>No anti-prime sequence exists.</blockquote><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 10 2
1 10 3
1 10 5
40 60 7
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1,3,5,4,2,6,9,7,8,10
1,3,5,4,6,2,10,8,7,9
No anti-prime sequence exists.
40,41,43,42,44,46,45,47,48,50,55,53,52,60,56,49,51,59,58,57,54
</PRE>
______________________________________________________
3080||||||false||||||
<p>One very simple type of solitaire game known as Hit or Miss (also known as Frustration, Harvest,
Roll-Call, Talkative, and Treize) is played as follows: take a standard deck of 52 playing cards 
four sets of cards numbered 1 through 13 (suits do not matter in this game) which have been shuff ed
 and start counting through the deck 1, 2, 3, . . . , and so on. When your count reaches 13, start over
at 1. Each time you count, look at the top card of the deck and do one of two things: if the number
you count matches the value of the top card, discard it from the deck; if it does not match it, move that
card to the bottom of the deck. You win the game if you are able to remove all cards from the deck
(which may take a very long time).

<p>A version of this game can be devised for two or more players. The first player starts as before with a
52 card deck, while the other players have no cards initially. As the first player removes cards from her
deck, she gives them to the second player, who then starts playing the same game, starting at count
1. When that player gets a match, he passes his card to the third player, and so on. The last player
discards matches rather than passing them to player 1. All players who have cards to play with perform
the following 2-step cycle of moves in lockstep:

<blockquote>
	1. Each player says his or her current count value and checks for a match. If there is no match, the
	top card is moved to the bottom of the deck; otherwise it is passed to the next player (or discarded
	if this is the last player).<br><br>
	2. Each player except the first takes a passed card (if there is one) and places it at the bottom of his
	or her deck.
</blockquote>

<p>These rules are repeated over and over until either the game is won (all the cards are discarded by the
last player) or an unwinnable position is reached. If any player ever runs out of cards, he waits until
he is passed a card and resumes his count from where he left off (e.g., if player 3 passes his last card
on a count of 7, he waits until he receives a card from player 2 and resumes his count with 8 at the
beginning of the next 2-step cycle).


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input will consist of multiple input sets. The first line of the file will contain a single positive integer n
indicating the number of input sets in the file. Each input set will be a single line containing 53 integers:
the first integer will indicate the number of players in the game and the remaining 52 values will be the
initial layout of the cards in the deck, topmost card first. These values will all lie in the range 1 . . . 13,
and the number of players will lie in the range 1 . . . 10.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each input set, output the input set number (as shown below, starting with 1) and either the phrase
unwinnable or a list showing the last card discarded by each player. Use a single blank to separate
all outputs.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<b>NOTE:</b> Each sample input set below is split across multiple lines in order to fit on the page  in the
actual file each set will be on a single line.

<P>
<PRE>
2
4 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13
  1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13
4 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1
  2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 13 13 13 13
Case 2: unwinnable
</PRE>

______________________________________________________
3081||||||false||||||
<p>Irv Kenneth Diggit works for a company that excavates trenches, digs holes and generally tears up
peoples yards. Irvs job is to make sure that no underground pipe or cable is underneath where
excavation is planned. He has several different maps, one for each utility company, showing where their
conduits lie, and he needs to draw one large, consolidated map combining them all. One approach
would be to simply draw each of the smaller maps one at a time onto the large map. However, this
often wastes time, not to mention ink for the pen-plotter in the office, since in many cases portions
of the conduits overlap with each other (albeit at different depths underground). What Irv wants is a
way to determine the minimum number of line segments to draw given all the line segments from the
separate maps.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input will consist of multiple input sets. Each set will start with a single line containing a positive
integer n indicating the total number of line segments from all the smaller maps. Each of the next n
lines will contain a description of one segment in the format

<p>x<sub>1</sub> y<sub>1</sub> x<sub>2</sub> y<sub>2</sub>

<p>where (x<sub>1</sub>,y<sub>1</sub>) are the coordinates of one endpoint and (x<sub>2</sub>,y<sub>2</sub>) are the coordinates of the other. Coordinate
values are oating point values in the range 0 ...1000 specified to at most two decimal places. The
maximum number of line segments will be 10000 and all segments will have non-zero length. Following
the last input set there will be a line containing a 0 indicating end of input; it should not be processed.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each input set, output on a single line the minimum number of line segments that need to be drawn
on the larger, consolidated map.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
1.0 10.0 3.0 14.0
0.0 0.0 20.0 20.0
10.0 28.0 2.0 12.0
2
0.0 0.0 1.0 1.0
1.0 1.0 2.15 2.15
2
0.0 0.0 1.0 1.0
1.0 1.0 2.15 2.16
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
1
2
</PRE>

______________________________________________________
3082||||||false||||||
<p>Phil Kropotnik is a game maker, and one common problem he runs into is determining the set of dice to
use in a game. In many current games, non-traditional dice are often required, that is, dice with more
or fewer sides than the traditional 6-sided cube. Typically, Phil will pick random values for all but the
last die, then try to determine specific values to put on the last die so that certain sums can be rolled
with certain probabilities (actually, instead of dealing with probabilities, Phil just deals with the total
number of different ways a given sum can be obtained by rolling all the dice). Currently he makes this
determination by hand, but needless to say he would love to see this process automated. That is your
task.

<p>For example, suppose Phil starts with a 4-sided die with face values 1, 10, 15, and 20 and he wishes
to determine how to label a 5-sided die so that there are a) 3 ways to obtain a sum of 2, b) 1 way to
obtain a sum of 3, c) 3 ways to obtain 11, d) 4 ways to obtain 16, and e)1 way to obtain 26. To get
these results he should label the faces of his 5-sided die with the values 1, 1, 1, 2, and 6. (For instance,
the sum 16 may be obtained as 10 +6 or as 15 +1, with three different 1 faces to choose from on the
second die, for a total of 4 different ways.)

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input will consist of multiple input sets. Each input set will start with a single line containing an integer
n indicating the number of dice that are already specified. Each of the next n lines describes one of
these dice. Each of these lines will start with an integer f (indicating the number of faces on the die)
followed by f integers indicating the value of each face. The last line of each problem instance will have
the form

<p>r m v<sub>1</sub> c<sub>1</sub> v<sub>2</sub> c<sub>2</sub> v<sub>3</sub> c<sub>3</sub> ··· v<sub>m</sub> c<sub>m</sub>

<p>where r is the number of faces required on the unspecified die, m is the number of sums of interest,
v<sub>1</sub>,...,vs<ub>m</sub> are these sums, and c<sub>1</sub>,...,c<sub>m</sub> are the counts of the desired number of different ways in which
to achieve each of the respective sums.

<p>Input values will satisfy the following constraints: 1 &le; n &le; 20, 3 &le; f &le; 20, 1 &le; m &le; 10, and 4 &le; r &le; 6.
Values on the faces of all dice, both the specified ones and the unknown die, will be integers in the range
1 ...50, and values for the v<sub>i</sub>s and c<sub>i</sub>s are all non-negative and are strictly less than the maximum
value of a 32-bit signed integer.


<p>The last input set is followed by a line containing a single 0; it should not be processed.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each input set, output a single line containing either the phrase Final die face values are
followed by the r face values in non-descending order, or the phrase Impossible if no die can be found
meeting the specifications of the problem. If there are multiple dice which will solve the problem, choose
the one whose lowest face value is the smallest; if there is still a tie, choose the one whose second-lowest
face value is smallest, etc.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
4 1 10 15 20
5 5 2 3 3 1 11 3 16 4 26 1
1
6 1 2 3 4 5 6
6 3 7 6 2 1 13 1
4
6 1 2 3 4 5 6
4 1 2 2 3
3 3 7 9
8 1 4 5 9 23 24 30 38
4 4 48 57 51 37 56 31 63 11
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Final die face values are 1 1 1 2 6
Impossible
Final die face values are 3 7 9 9
</PRE>

______________________________________________________
3083||||||false||||||
<p>Its preseason and the local newspaper wants to publish a preseason ranking of the teams in the local
amateur basketball league. The teams are the Ants, the Buckets, the Cats, the Dribblers, and the
Elephants. When Scoop McGee, sports editor of the paper, gets the rankings from the selected local
experts down at the hardware store, hes dismayed to find that there doesnt appear to be total agreement
and so hes wondering what ranking to publish that would most accurately re ect the rankings he got
from the experts. Hes found that finding the median ranking from among all possible rankings is one
way to go.

<p>The median ranking is computed as follows: Given any two rankings, for instance ACDBE and
ABCDE, the distance between the two rankings is defined as the total number of pairs of teams
that are given different relative orderings. In our example, the pair B, C is given a different ordering
by the two rankings. (The first ranking has C above B while the second ranking has the opposite.)
The only other pair that the two rankings disagree on is B, D; thus, the distance between these two
rankings is 2. The median ranking of a set of rankings is that ranking whose sum of distances to all the
given rankings is minimal. (Note we could have more than one median ranking.) The median ranking
may or may not be one of the given rankings.

<p>Suppose there are 4 voters that have given the rankings: ABDCE, BACDE, ABCED and ACBDE.
Consider two candidate median rankings ABCDE and CDEAB. The sum of distances from the ranking
ABCDE to the four voted rankings is 1 + 1 + 1 + 1 = 4. Well call this sum the value of the ranking
ABCDE. The value of the ranking CDEAB is 7 + 7+ 7 + 5 = 26.
It turns out that ABCDE is in fact the median ranking with a value of 4.



<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

There will be multiple input sets. Input for each set is a positive integer n on a line by itself, followed
by n lines (n no more than 100), each containing a permutation of the letters A, B, C, D and E,
left-justified with no spaces. The final input set is followed by a line containing a 0, indicating end of
input.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Output for each input set should be one line of the form:

<p><i>ranking</i> is the median ranking with value <i>value</i>.

<p>Of course ranking should be replaced by the correct ranking and value with the correct value. If there
is more than one median ranking, you should output the one which comes first alphabetically.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
ABDCE
BACDE
ABCED
ACBDE
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
ABCDE is the median ranking with value 4.
</PRE>

______________________________________________________
3084||||||false||||||
<p>Mo and Larry have devised a way of encrypting messages. They first decide secretly on the number of
columns and write the message (letters only) down the columns, padding with extra random letters so
as to make a rectangular array of letters. For example, if the message is Theres no place like home on
a snowy night and there are five columns, Mo would write down

<p><pre>
t o i o y
h p k n n
e l e a i
r a h s g
e c o n h
s e m o t
n l e w x
</pre>

<p>Note that Mo includes only letters and writes them all in lower case. In this example, Mo used the
character x to pad the message out to make a rectangle, although he could have used any letter.
Mo then sends the message to Larry by writing the letters in each row, alternating left-to-right and
right-to-left. So, the above would be encrypted as

<p><pre>toioynnkpheleaigshareconhtomesnlewx</pre>

<p>Your job is to recover for Larry the original message (along with any extra padding letters) from the
encrypted one.



<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

There will be multiple input sets. Input for each set will consist of two lines. The first line will contain
an integer in the range 2...20 indicating the number of columns used. The next line is a string of up
to 200 lower case letters. The last input set is followed by a line containing a single 0, indicating end of
input.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Each input set should generate one line of output, giving the original plaintext message, with no spaces.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
toioynnkpheleaigshareconhtomesnlewx
3
ttyohhieneesiaabss
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
theresnoplacelikehomeonasnowynightx
thisistheeasyoneab
</PRE>

______________________________________________________
3085||||||false||||||
<p>Bob Roberts is in charge of performing translations of documents between various languages. To aid
him in this endeavor his bosses have provided him with translation files. These files come in twos  one
containing sample phrases in one of the languages and the other containing their translations into the
other language. However, some over-zealous underling, attempting to curry favor with the higher-ups
with his initiative, decided to alphabetically sort the contents of all of the files, losing the connections
between the phrases and their translations. Fortunately, the lists are comprehensive enough that the
original translations can be reconstructed from these sorted lists. Bob has found this is most usually
the case when the phrases all consist of two words. For example, given the following two lists:


<p align=center><img src=p3085a.gif>

<p>Bob is able to determine that arlo means hot, zym means seat, ub means school, pleve means bus, and
dourm means stop. After doing several of these reconstructions by hand, Bob has decided to automate
the process. And if Bob can do it, then so can you.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input will consist of multiple input sets. Each input set starts with a positive integer n, n  250,
indicating the number of two-word phrases in each language. This is followed by 2n lines, each containing
one two-word phrase: the first n lines are an alphabetical list of phrases in the first language, and the
remaining n lines are an alphabetical list of their translations into the second language. Only upper and
lower case alphabetic characters are used in the words. No input set will involve more than 25 distinct
words. No word appears as the first word in more than 10 phrases for any given language; likewise, no
word appears as the last word in more than 10 phrases. A line containing a single 0 follows the last
problem instance, indicating end of input.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each input set, output lines of the form

<p><pre>word1/word2</pre>

<p>where word1 is a word in the first language and word2 is the translation of word1 into the second
language, and a slash separates the two. The output lines should be sorted according to the first
language words, and every first language word should occur exactly once. There should be no white
space in the output, apart from a single blank line separating the outputs from different input sets.
Imitate the format of the sample output, below. There is guaranteed to be a unique correct translation
corresponding to each input instance.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
arlo zym
flub pleve
pleve dourm
pleve zym
bus seat
bus stop
hot seat
school bus
2
iv otas
otas re
ec t
eg ec
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
arlo/hot
dourm/stop
flub/school
pleve/bus
zym/seat

iv/eg
otas/ec
re/t
</PRE>

______________________________________________________
3086||||||false||||||
<P>There is a rectangular grid of cells with <SPAN CLASS="MATH"><I>m</I></SPAN> rows and <SPAN CLASS="MATH"><I>n</I></SPAN> columns. The rows are numbered 0 to <SPAN CLASS="MATH"><I>m</I> - 1</SPAN> and the columns are numbered 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>. A cell is identified by an ordered pair (column number, row number). The cells in row 0 (bottom) are the entry points and the cells in row <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> (top) are the exit points. The figure below shows a grid with 4 rows and columns.<P><PRE> 

                           Destination
                    /--  ----  ---  ----  --\
                    |     |     |     |     |
                    | 0,3 | 1,3 | 2,3 | 3,3 |
                    |     |     |     |     |
                    |-----------------------|
                    |     |     |     |     |
                 A  | 0,2 | 1,2 | 2,2 | 3,2 |
            M   /T\ |     |     |     |     |
            O    |  |-----------------------|
            V    |  |     |     |  C  |     |
            E    |  | 0,1 | 1,1 | 2,1 | 3,1 |
            M    |  |     |     |     |     |
            E    |  |-----------------------|
            N    |  |     |     |     |     |
            T    |  | 0,0 | 1,0 | 2,0 | 3,0 |
                    |     |  M  |     |     |
                    \--  ---  ----  ----  --/
                               Start
</PRE><P>A mouse wants to reach the ``Destination'' from ``Start''. The mouse can move <B>horizontally</B> in either direction if possible (i.e. from cell <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> to either cell <SPAN CLASS="MATH">(<I>i</I> - 1, <I>j</I>)</SPAN> or <SPAN CLASS="MATH">(<I>i</I> + 1, <I>j</I>)</SPAN>, if these are valid cells) or <B>vertically</B> upwards (i.e. move from cell <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> to <SPAN CLASS="MATH">(<I>i</I>, <I>j</I> + 1)</SPAN>).<P>Note that you can never move downwards. Also, the moves must alternate between horizontal and vertical. The mouse can enter the grid from any of the entry points (4 in the above example) and the first move can be either horizontal or vertical. A vertical move (when possible) from any of the exit points takes the mouse to the destination.<P>Cats may be present in some of the cells in the grid including entry and exit points. For any entry point, if <SPAN CLASS="MATH"><I>p</I></SPAN> is the total number of paths to the destination from this entry point, and <SPAN CLASS="MATH"><I>q</I></SPAN> is the number of such paths that do not pass through any cell containing a cat, then the ratio <SPAN CLASS="MATH"><I>q</I>/<I>p</I></SPAN> is the success probability for that entry point. You have to write a program that finds the entry point with maximum success probability. If there is more than one such point, identify the one with minimum column number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain several test cases, and the first line contains the number <SPAN CLASS="MATH"><I>N</I></SPAN> of test cases.<P>For each test case, the first line will contain the number of columns <SPAN CLASS="MATH"><I>n</I></SPAN>, the number rows <SPAN CLASS="MATH"><I>m</I></SPAN>, and the number of cats <SPAN CLASS="MATH"><I>k</I></SPAN>, in this order, separated by a space. Here, <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3086img1.png ALT="$ \le$">1000</SPAN>, <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3086img1.png ALT="$ \le$">30</SPAN>, and <SPAN CLASS="MATH"><I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3086img1.png ALT="$ \le$">1000</SPAN>. The next <SPAN CLASS="MATH"><I>k</I></SPAN> lines will contain two integers each, giving the cells containing the cats. The first number is the column number and the second the row number. The numbers are separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output for each test case is a single integer giving the column number of the required entry point. The outputs for all test cases should be printed successively, one per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
4 4 1
2 1 
5 3 1 
1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 
4
</PRE><P>
______________________________________________________
3087||||||false||||||
<P>A large city has <SPAN CLASS="MATH"><I>n</I></SPAN> schools run by the municipal corporation with varying number of children studying in them. Recently it was made compulsory for all schools to provide lunch (exactly <SPAN CLASS="MATH"><I>m</I></SPAN> grams of rice-curry mix) everyday to all the students present that day in school. To maintain high level of hygiene, meals would be packed in packs of various weights at the <B>cooking centre</B> and some combination of packages of different weights would be delivered to each school by a <B>contractor</B>. No opened packs are allowed in transit. These packs would be opened only in the school premises and the food distributed amongst the children. Any extra food delivered to a school is considered waste.<P>The contractor charges <SPAN CLASS="MATH"><I>D</I></SPAN> Rupees (Rs.) per pack as delivery charges. The cost of preparation of 1 kilogram of cooked meal is <SPAN CLASS="MATH"><I>C</I></SPAN> Rs.<P>Assuming no limits on the amount of food or number of packs that can be cooked and transported, the cooking center wishes to optimize the total cost of operations under the following conditions.<P><OL><LI>If the cost of food going waste and the additional delivery charge being paid to the contractor to prevent it are the same, then food wastage must be avoided. </LI><LI>Subject to the above condition, the contractor would prefer to send smaller packs. So if each possible solution is arranged as a sequence of numbers in the order of increasing pack weights, the contractor would prefer the lexicographically maximum sequence. </LI></OL><P>Your job is to create a computer program to do this optimization.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases and the first line of input gives the number of test cases. For each test case, the first line contains 5 numbers: <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3087img1.png ALT="$ \le$">1000</SPAN>, the number of schools; <SPAN CLASS="MATH"><I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3087img1.png ALT="$ \le$">10</SPAN>, the number of different weights of food packs; <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3087img1.png ALT="$ \le$">500</SPAN>, the grams of food to be given to each student; <SPAN CLASS="MATH"><I>D</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3087img1.png ALT="$ \le$">100</SPAN>, the delivery charge per pack; <SPAN CLASS="MATH"><I>C</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3087img1.png ALT="$ \le$">100</SPAN>, the cost of preparing 1 kilogram of food.<P>All quantities are positive integers and separated by a single space.<P>The next line contains <SPAN CLASS="MATH"><I>k</I></SPAN> integers denoting the different possible weights (in kilograms) of packs, separated by a space. The maximum possible weight is 25 kilograms and the weights may be given in any order.<P>The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> integers separated by a space. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th number denotes the number of children in school <SPAN CLASS="MATH"><I>i</I></SPAN>. The maximum number of children in a school is 10000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output for each test case should give for each school (starting from School 0 to School <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>), the number of packs of each weight to be distributed, in increasing order of weights. The output for each school should be printed on one line with a single space separating the values. The outputs for different test cases should be printed successively.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
2 2 200 20 30 
7 3 
100 500
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
School 0 : 2 2 
School 1 : 3 13
</PRE><P>
______________________________________________________
3088||||||false||||||
<P>King Rama has been having a terrible time uniting the two eternally squabbling communities in his country. The <B>Leftists</B> insist that every number should be read only from the left (most significant digit) to right and the <B>Rightists</B> the opposite. When Grand National Highways to unite the vast empire were built, stretching endlessly starting from his capital to each remote corner, the issue of how to number the milestones threatened to break the country apart. To pacify them, Rama's ingenious solution was all milestones should be painted blank, except those carrying numbers that read the same both ways. That is, after the first 10 milestones (numbered 0 through 9, 0 being the starting point in the capital city) only milestones 11, 22, 33, ..., etc. would be painted with the numbers. Rest would be blank.<P>You are driving on one such highway starting from the capital, and to keep yourself alert, decide to play the following game with your companion. When you are at distance <SPAN CLASS="MATH"><I>k</I></SPAN> miles from the capital, your companion picks a number <SPAN CLASS="MATH"><I>n</I></SPAN> and you how have to answer what will be the number on the <SPAN CLASS="MATH"><I>n</I></SPAN>-th non-blank milestone from now. Design a program to do this.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain several test cases. The first line contains a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> giving the number of test cases. For every test case, there are 2 lines. The first line contains the positive integer <SPAN CLASS="MATH"><I>k</I></SPAN> (the miles covered so far) and the second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> (which milestones value is to be calculated). Note that there is no limit on the number of digits in <SPAN CLASS="MATH"><I>k</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN>. Each number is therefore to be input as a character string with the most significant digit first. <P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Your output should be one line per test case, giving the reading on the <SPAN CLASS="MATH"><I>n</I></SPAN>-th non-blank milestone starting from the <SPAN CLASS="MATH"><I>k</I></SPAN>-th mile. Output should be printed as a character string with the most significant digit first.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
13 
2 
100 
3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
33 
121
</PRE><P>
______________________________________________________
3089||||||false||||||
<P>A mathematics professor is trying to teach her students arithmetic involving large numbers. She writes down a big arithmetic expression on the board, using positive decimal numbers with arbitrary number of digits, and the binary addition, subtraction and multiplication operators. The operators are ``infix'' (i.e. one argument on the left, one on the right). However, she does not put any parenthesis in the expression, thus making it ambiguous. She announces that the first student who parenthesizes it in such a way that the value of the resulting expression is maximum, will get a prize.<P>Instead of wasting time adding and multiplying numbers, why not write a program to do it. That is exactly what you have to do.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain several test cases. The first line of input will be a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN>, the number of test cases. The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines will contain a character string of at most 200 characters, describing the expression for each case, one per line. Each character is either a decimal digit or one of the binary operators `<TT>+</TT>', `<TT>-</TT>', `<TT>*</TT>'. The number of operators in each expression is at most 100. All the numbers are positive and there are no leading zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output should be a character string giving the maximum value of the expression, with the most significant digit first, and no leading zeroes, preceded by `<TT>-</TT>' if the value is negative. If the value is 0, a single character `<TT>0</TT>' should be printed. The outputs for successive test cases should be printed one per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
5-3*4-2*3 
3-3*5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
18 
0
</PRE><P>
______________________________________________________
3090||||||false||||||
<P>You are hosting a quiz contest with <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3090img1.png ALT="$ \le$">16</SPAN> teams. Each team has two members, a senior member and a junior member. All participants will be seated around a round table in chairs that are numbered from 0 to <SPAN CLASS="MATH">2<I>n</I> - 1</SPAN>, in anti-clockwise direction. The questions will be asked to individuals, rather than the team, and will be passed around in anti-clockwise direction till they are answered, or a full circle is completed.<P>You want to seat the participants so that there is a specified distance between the two members in each team. Thus, given numbers (distances) <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>, <I>d</I><SUB>2</SUB>,..., <I>d</I><SUB>n</SUB></SPAN>, you have to seat participants such that for team <SPAN CLASS="MATH"><I>i</I></SPAN> (for each <SPAN CLASS="MATH"><I>i</I></SPAN>), if the senior member is in chair <SPAN CLASS="MATH"><I>j</I></SPAN>, then the junior member should be at a distance <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> from <SPAN CLASS="MATH"><I>j</I></SPAN>, i.e. in the chair <SPAN CLASS="MATH">(<I>j</I> + <I>d</I><SUB>i</SUB>) mod 2<I>n</I></SPAN>. Obviously, only one person can sit in a given chair. You have to write a program to determine whether such an arrangement is possible. Assume <!-- MATH
 $0  <  d_{i} < 2n$
 --><SPAN CLASS="MATH">0 &lt; <I>d</I><SUB>i</SUB> &lt; 2<I>n</I></SPAN>, for all <SPAN CLASS="MATH"><I>i</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of several test cases. The first line of input is a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN>, the number of test cases. The input for each case is given in two lines. The first line gives <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of teams for that case (<SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3090img1.png ALT="$ \le$">16</SPAN>). The next line contains the numbers <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>,..., <I>d</I><SUB>n</SUB></SPAN> separated by a single space character. The inputs for all cases are given on consecutive lines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output for each case should be the string `<TT>Possible</TT>' (without quotes) if the required arrangement is possible, otherwise it should be `<TT>Not possible</TT>' (without quotes). The output for all test cases should be printed on consecutive lines, one per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
4 
1 2 3 4 
5 
3 3 3 5 5 
4 
1 3 5 7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Possible 
Not possible 
Possible
</PRE><P>
______________________________________________________
3091||||||false||||||
<P>Aliens have invaded Earth and captured all your friends. You are the only one to escape. After failing to capture you, the Aliens offer a deal. They challenge you to beat them at their national game. If you win, all your friends will be set free. If you lose, you will have to give yourself up. If the game is drawn then the status quo will continue.<P>The game is as follows. On a square board, <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3091img1.png ALT="$ \le$">100</SPAN> positions are marked, numbered from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>. A coin is placed in any one position. At every move, you can decide to move the coin to any other marked position or remain in the same position. However, for a move from position <SPAN CLASS="MATH"><I>i</I></SPAN> to position <SPAN CLASS="MATH"><I>j</I></SPAN>, you incur a penalty of <SPAN CLASS="MATH"><I>p</I><SUB>ij</SUB></SPAN>. Note that a penalty of <SPAN CLASS="MATH"><I>p</I><SUB>ii</SUB></SPAN> incurs if you decide to remain in position <SPAN CLASS="MATH"><I>i</I></SPAN>. The two players play alternately until both the players have made exactly <SPAN CLASS="MATH"><I>m</I></SPAN> ( <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3091img1.png ALT="$ \le$">10<SUP>9</SUP></SPAN>) moves. The player who incurs minimum total penalty wins the game. The game is drawn if both players incur the same penalty.<P>Since the game takes a long time to complete, you would rather know beforehand whether you have any chance of winning. You have to write a program that, given the values of <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>ij</SUB></SPAN>, determines for each starting position whether the first player (player A) or the second (player B) has a winning strartegy. A player has a winning strategy from a given starting position if the player is guaranteed to win, irrespective of how the other player plays. If neither player has a winning strategy, then the game is a draw. If a player has a winning strategy, your program should also determine the minimum winning margin, that is the minimum difference between the penalties incurred.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain several test cases. The first line contains a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> giving the number of test cases. For every test case, the first line contains two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> separated by a single space. Here <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of marked positions on the board and <SPAN CLASS="MATH"><I>m</I></SPAN> is number of moves that each player has to make. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines specify the matrix <SPAN CLASS="MATH"><I>p</I><SUB>ij</SUB></SPAN> in row-wise order. Each line contains <SPAN CLASS="MATH"><I>n</I></SPAN> non-negative numbers separated by a single space. The value of each <SPAN CLASS="MATH"><I>p</I><SUB>ij</SUB></SPAN> is at most <SPAN CLASS="MATH">10<SUP>8</SUP></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output for each case (with <SPAN CLASS="MATH"><I>n</I></SPAN> marked positions) should be <SPAN CLASS="MATH"><I>n</I></SPAN> lines, one for each starting position, specifying which player has a winning strategy and the minimum winning margin. That is, for each starting position <SPAN CLASS="MATH"><I>i</I></SPAN> (from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>) you should print <SPAN CLASS="MATH"><I>i</I></SPAN> (and separated by a single space) the result of starting from position <SPAN CLASS="MATH"><I>i</I></SPAN>. If Player A has a winning strategy (similarly Player B) and <SPAN CLASS="MATH"><I>k</I></SPAN> is the minimum winning margin, print `<TT>Player A <SPAN CLASS="MATH"><I>k</I></SPAN></TT>' (without quotes) as the result. In case neither player has a winning strategy from <SPAN CLASS="MATH"><I>i</I></SPAN>, print `<TT>Draw</TT>' (without quotes) as the result.<P>The outputs for consecutive test cases should be on consecutive lines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2  
2 2 
3 5 
7 2 
3 5  
2 3 7 
6 4 8 
1 9 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 Draw 
1 Draw 
0 Player A 1 
1 Draw 
2 Player A 2
</PRE><P>
______________________________________________________
3092||||||false||||||
<P>The simple programming language <B>ASSIGN</B> allows only assignment statements (one statement per line) with the following format. Each assignment statement consists of a Left Hand Side (called LHS) and a Right Hand Side (called RHS) which are separated by the `<TT>=</TT>' sign with at least one space before and after the `<TT>=</TT>'.<P><UL><LI>An LHS can be<UL><LI>A (regular) variable name consisting of letters which may be small or capital. Digits are not allowed in variable names. </LI><LI>A temporary variable name beginning with an `<TT>_t</TT>' followed by a number as shown in the examples below. </LI></UL><P></LI><LI>A RHS can be <B>complex</B><UL><LI>An infix binary expression consisting of two operands (defined below) and one of the following binary operators: `<TT>+</TT>', `<TT>*</TT>', `<TT>-</TT>', `<TT>/</TT>'. The operator and operands are separated by a space. </LI><LI>A prefix unary expression consisting of one operand and one of the following unary operators: `<TT>&amp;</TT>', `<TT>*</TT>', `<TT>-</TT>'. The operator and operand is separated by a space. </LI></UL><P>or an RHS can be <B>simple</B><UL><LI>A single operand without any operator </LI></UL><P></LI></UL><P>An operand can be either a variable name, or a temporary name or an integer constant in decimal format.<P>You have to write a program to read in a sequence of assignment statements and using the rules explained below until they no longer apply, generate the final output sequence. Note that there will always be only one possible output.<P><UL><LI><B>Rule 0:</B> At any point in the derivation, all temporary variables names in the output must be in order. This means that `<TT>_t2</TT>', for example, should not appear as an LHS before the first occurrence of both `<TT>_t0</TT>' and `<TT>_t1</TT>' as an LHS.<P></LI><LI><B>Rule 1:</B> If the RHS is complex and if the LHS of an assignment is not a temporary variable, insert a new temporary variable as shown below.<P><P><BR><IMG WIDTH="234" HEIGHT="97" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3092img1.png ALT="$\textstyle \parbox{2in}{
Input
\par
\bigskip
\begin{tabular}{\vert l\vert}
\hl...
...e = value * change} \\
\hline
{\tt newvalue = value} \\
\hline
\end{tabular}}$"> <TT>=&gt;</TT> <IMG WIDTH="234" HEIGHT="110" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3092img1.png ALT="$\textstyle \parbox{2in}{
Output
\par
\medskip
\begin{tabular}{\vert l\vert}
\hl...
...
{\tt value = \_t0} \\
\hline
{\tt newvalue = value} \\
\hline
\end{tabular}}$"><P></LI><LI><B>Rule 2:</B> If the RHS of two statements are identical complex expressions, but the corresponding LHSs are different temporary variables, then eliminate the second temporary variable using the first one as shown below.<P><P><BR><IMG WIDTH="177" HEIGHT="177" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3092img1.png ALT="$\textstyle \parbox{1.5in}{
Input
\par
\medskip
\begin{tabular}{\vert l\vert}
\h...
...hline
{\tt \_t6 = c + \_t5} \\
\hline
{\tt e = \_t6} \\
\hline
\end{tabular}}$"> <TT>=&gt;</TT> <IMG WIDTH="177" HEIGHT="177" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3092img1.png ALT="$\textstyle \parbox{1.5in}{
Output
\par
\medskip
\begin{tabular}{\vert l\vert}
\...
...hline
{\tt \_t1 = c + \_t0} \\
\hline
{\tt e = \_t1} \\
\hline
\end{tabular}}$"><P><P><BR>Note that Rules 0 and 1 have also been used above. For example, the expression `<TT>c + _t1</TT>' in the input becomes `<TT>c +_t0</TT>' in the output and since temporary variable `<TT>_t5</TT>' of the input is same as `<TT>_t0</TT>' if the output, expression `<TT>c + _t5</TT>' in the input also become `<TT>c + _t0</TT>' in the output.<P></LI><LI><B>Rule 3:</B> If the RHS of the assignment is a complex binary expression, but contains no variables, then replace RHS expression by its value, and replace the LHS by a new temporary variable as shown below.<P><P><BR><IMG WIDTH="148" HEIGHT="76" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3092img1.png ALT="$\textstyle \parbox{1.25in}{
Input
\par
\bigskip
\begin{tabular}{\vert l\vert}
\hline
{\tt a = 10 * 20} \\
\hline
\end{tabular}}$"> <TT>=&gt;</TT> <IMG WIDTH="148" HEIGHT="88" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/30/3092img1.png ALT="$\textstyle \parbox{1.25in}{
Output
\par
\medskip
\begin{tabular}{\vert l\vert}
\hline
{\tt \_t0 = 200} \\
\hline
{\tt a = \_t0} \\
\hline
\end{tabular}}$"><P></LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain several test cases. The first line contains a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> giving the number of test cases. For every test case the first line will a number <SPAN CLASS="MATH"><I>m</I></SPAN> giving the number of assignment statements in the input program. This will be followed by <SPAN CLASS="MATH"><I>m</I></SPAN> lines, one assignment statement per line, corresponding to the input program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output for each test case must be the sequence obtained using the rules explained above as long as any of them is applicable. The outputs for consecutive test cases should be on consecutive lines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1 
 
a  =  10 * 20  

5 
 
a = a * b 
b = * a 
c = - a 
_t13 = * a 
b = &amp; _t13
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
_t0 = 200    
a = _t0 
_t0 = a * b 
a = _t0  
_t1 = * a 
b = _t1  
_t2 = - a 
c = _t2  
_t1 = * a 
_t3 = &amp; _t1 
b = _t3 }
</PRE><P>
______________________________________________________
3093||||||false||||||
<P>Suppose you are reading byte streams from any device, representing IP addresses. Your task is to convert a 32 characters long sequence of '1s' and '0s' (bits) to a dotted decimal format. A dotted decimal format for an IP address is form by grouping 8 bits at a time and converting the binary representation to decimal representation. Any 8 bits is a valid part of an IP address. To convert binary numbers to decimal numbers remember that both are positional numerical systems, where the first 8 positions of the binary systems are:<p align=center><img src=p3093a.gif><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input will have a number N (1 &le; N &le; 9) in its first line representing the number of streams to convert. N lines will follow.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output must have N lines with a doted decimal IP address. A dotted decimal IP address is formed by grouping 8 bit at the time and converting the binary representation to decimal representation.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4 
00000000000000000000000000000000 
00000011100000001111111111111111 
11001011100001001110010110000000 
01010000000100000000000000000001 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0.0.0.0 
3.128.255.255 
203.132.229.128 
80.16.0.1 
</PRE><P>
______________________________________________________
3094||||||false||||||
<P>The objective of the program you are going to produce is to evaluate boolean expressions as the one shown next: 

<p align=center>Expression: ( V | V ) & F & ( F | V ) 

<p>where V is for True, and F is for False. The expressions may include the following operators: ! for not ,
 & for and, | for or , the use of parenthesis for operations grouping is also allowed. 

<p>To perform the evaluation of an expression, it will be considered the priority of the operators, the not
 having the highest, and the or the lowest. The program must yield V or F , as the result for each expression
 in the input file. 



<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The expressions are of a variable length, although will never exceed 100 symbols. Symbols may be separated
 by any number of spaces or no spaces at all, therefore, the total length of an expression, as a number of 
characters, is unknown. 

<p>The number of expressions in the input file is variable and will never be greater than 20. Each expression
 is presented in a new line, as shown below. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test expression, print Expression  followed by its sequence number, : , and the resulting
 value of the corresponding test expression. Separate the output for consecutive test expressions with a
 new line. 

<p>Use the same format as that shown in the sample output shown below. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
( V | V ) & F & ( F| V) 
!V | V & V & !F & (F | V ) & (!F | F | !V & V) 
(F&F|V|!V&!F&!(F|F&V)) 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Expression 1: F
Expression 2: V
Expression 3: V
</PRE>

<P>

______________________________________________________
3095||||||false||||||
<P>The Dynamic Gears Company is developing a new program to manufacture gears based on a master gear. The 
first step consists on making measurements of the master gear using the T-500 machine. This machine creates
 a file with coordinates of different points on one of the gear's tooth.

<p align=center><img src=p3095a.gif>

<p>The T-500 machine finds the coordinates of several points on the surface of one of the tooth's face.
 These points represent a grid that defines the entire surface (as seen on the image). The T-500 machine
 measures X points on the tooth from top to bottom, then it moves towards the inside to read again X points.
 This sweeping is done Y times until the gear is complete. The final result of the T-500 machine is a file 
with a consecutive list of X·Y points. 

<p>The Gear Technology Department has to develop a program capable of calculating the geometry of the tooth
 based on the grid of points, and generate the instructions for the machine that will cut the gears. After
 analyzing the problem it was decided that the Normal value of several points has to be calculated so that
 the cutting machine knows how to generate the gear. 

<p>To be able to calculate the Normal value, 9 points from the grid have to be considered together (as seen
 on the diagram). For example, if the T-500 machine read 5 points from top to bottom and 3 columns from
 left to right, points A, D, and G come from the first three points the T-500 machine read. Points B, E,
 and H come from points 6, 7, and 8. Points C, F, and I come from points 11, 12, and 13. The small 9-points
 grid contains the required values to calculate the Normal value using the following formula: 

<p align=center><img src=p3095b.gif>
<p align=center><img src=p3095c.gif>

<p>where:

<p align=center><img src=p3095d.gif>
<p align=center><img src=p3095e.gif>
<p align=center><img src=p3095f.gif>
<p align=center><img src=p3095g.gif>

<p>The program to develop must go through all points on the grid that the T-500 machine generated, using the
 9-points grid, moving from top to bottom first, and then from left to right. The first 9-points grid,
 therefore, uses points A=1, D=2, G=3, B=6, E=7, H=8, C=11, F=12, and I=13; the second 9-points grid uses
 points A=2, D=3, G=4, B=7, E=8, H=9, C=12, F=13, and I=14; etc. 


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input represents the file generated by the T-500 machine with only one case. The first line contains
 two positive integers X (3 &le; X &le; 50) and Y (3 &le; Y &le; 50). X is the number of points read from top to bottom, 
and Y is the number of columns read from left to right. 

  

<p>All the following lines have 3 floating-point numbers: x , y , and z . The three values represent the
 coordinates of the measured point in the Cartesian plane. Each number has a maximum of 4 decimals. The 
x values starts at character 1, the y value at character 15, and the z value at character 30. 


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>The output must contain on the first line the total number of points contained on the input. 

<p>Starting on the second line, the Norm x , Norm y and Norm z values from all calculated Normal
 values must be printed, one line for each calculation. The values must be floating-point numbers
 with 4 decimals. The Norm x value must start on the 1st column, the Norm y value on
 the column 15, and the Norm z value on the column 30. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5 3 
-36.9469 225.1665 150 
-36.7819 226.3999 150 
-36.5822 227.7063 150 
-36.3451 229.0841 150 
-36.0678 230.5327 150 
-35.7464 232.0432 150 
-34.3768 237.1574 150 
-33.9837 238.7979 150 
-33.5259 240.2806 150 
-33.0456 241.757 150 
-32.5119 243.3183 150 
-31.9384 244.9173 150 
-32.8032 225.8074 135 
-32.6156 227.0375 135 
-32.392 228.34 135 
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
15 
0. 0. 1. 
0.9423 -0.2594 0.2117 
0.9373 -0.2972 0.1819 
</PRE>

<P>

______________________________________________________
3096||||||false||||||
<P>Music and mathematics always had a close relationship. Since Pythagoras, it is known that tonal
 harmony is closely related to the numerical relation of the frequencies. 

<p>A lazy pianist, that uses to play VEERY LAARGE melodies composed by Kindermann, has taken
 advantage of this narrow relationship. However, this pianist commonly plays only the half or 
a quarter of the total notes. Amazingly, the audience never has realized his trick. The main
 reason is that this pianist always plays melodies that have a particular characteristic that
 is better described by the sequence of melody shown in figure 1. 

<p align=center><img src=p3096a.gif>

<p>As you can see, the complete sequence is: 

<p>DO DO RE DO RE RE MI DO RE RE MI RE MI MI FA DO 

<p>However, if we choose only even notes, we can obtain the following sequence: 

<p>DO DO RE DO RE RE MI DO RE RE MI RE MI MI FA DO 

<p>DO DO RE DO RE RE MI DO RE RE MI RE MI MI FA DO 

<p>This is exactly the same melody. Even more, we can observe that choosing only every fourth note, we obtain: 

<p>DO DO RE  

<p>And, this is exactly the same melody. 

<p>The lazy pianist would like to continue playing this kind of melodies, but he does not know how to complete
 the melody shown in figure 1. You must construct an algorithm in order to complete that melody. 

<p>A useful tip to do the job would be to assume that every note should be represented by an integer. Thus,
 DO=1, RE=2, MI=3, etc. Thus, sequence presented earlier could be seen as: 

<p align=center><img src=p3096b.gif>

<p>A possible algorithm for generating the sequence is shown in table 1. Every decimal number
is expressed by its binary representation, and then we add the number of 1s that exist in that
representation. This value indicates the note.

<p align=center><img src=p3096c.gif>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>Input consists of a list of three positive integers (total, cant, pos), preceded by an integer
number that means the total of cases. Where total means total of tones to generate, cant
means how many tones should be shown as a result, and pos means the start point. In this
way, if cant=2, and pos=1, then this mean that it is needed to generate a sequence of 2
values starting from position number one. It is not allowed that pos has a value greater than
total, and obviously neither that
((pos + cant ) -1) > total.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>A sequence of positive integers separated by a space. Each integer means one note of the
melody.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
16 3 10
2 2 1
5 5 2
8 1 8
15 15 1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1: 2 3 2
Case 2: 1 1
Case 3: It cannot be solved.
Case 4: 1
Case 5: 1 1 2 1 2 2 3 1 2 2 3 2 3 3 4
</PRE>

<P>

______________________________________________________
3097||||||false||||||
<P>The DDB distribution design problem consists of allocating DB-objects, such that the total cost of data transmission for processing all the applications is minimized. A DB-object is an entity of a database, which can be an attribute, a tuples set, a relation or a file. DB-objects are independent units that must be allocated in the sites of a network. A formal definition of the problem is the following:<p align=center><img src=p3097a.gif><p>Let us consider a set of DB-objects O = {o<sub>1</sub>, o<sub>2</sub>, ..., o<sub>no</sub>}, a computer communication network that consists of a set of sites S = {s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>ns</sub>}, where a set of queries Q = {q<sub>1</sub>, q<sub>2</sub>, ..., q<sub>nq</sub>} are executed, the DB-objects required by each query, an initial DB-object allocation schema, and the access frequencies of each query from each site in a time period. The problem consists of obtaining a new replicated allocation schema that adapts to a new database usage pattern and minimizes transmission costs. The figure shows the main elements related with this problem.<p>The distribution design problem consists of determining the location of data so that the access and communication costs are minimized. Like many other real problems, it is a combinatorial NP-Hard problem. Some common situation that we can observe when you solve very large instances of an NP-Hard problem are: large requirements of time and large demands of memory resources. One approach proposed to solve this kind of problems consist of applying a grouping methodology.<p>For nt tuples and ns sites, the method consist in having the access frequency matrix in the sites F[nt][ns] of the objective instance, transform it in an access patterns matrix and to group the tuples with the same pattern.<p>The pattern of access for a tuple is the binary vector indicating from which site the tuple is accessed. For example, from the next access frequency matrix:<p align=center><img src=p3097b.gif><p>Then corresponding access patterns matrix is:<p align=center><img src=p3097c.gif><p>It is observed than the rows 1 and 3 have the same access patterns, so the rows 2 and 5. Then it will be three groups considering the third group formed by the single row 4. The cardinality of a group is defined by the number of tuples included in it.<p>The reduced access frequency matrix obtained by the sum of the tuples in the group will be:<p align=center><img src=p3097d.gif><p>You must design a program that accept n matrices of access frequency and for each one get the groups formed by the tuples with the same pattern of access. Also you must get the reduced access frequency matrix.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input will consist of a series of problems separated by a blank row. Each problem will contain in the first line two integers indicating the dimension of the access frequency matrix F[nt][ns], where 2 &le; nt &le; 5,000 and 3 &le; ns &le; 15, the integers are separated by a blank. In the next nt consecutive lines appear the ns integers of the access frequency matrix separated by a blank space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The solutions of the different problems are separated by a blank line. For each problem in the input the output will contain: The first line will contain two integers indicating the number of rows and columns of the reduced frequency matrix, follows by the items of the reduced frequency matrix, a row by line, the next is a blank line, followed by a set of consecutive lines containing pair of integers which represent the group number and the group cardinality ordered by the first occurrence of the pattern.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
15 4
3 0 1 2
0 1 1 5
5 1 0 0
2 0 5 1
0 2 2 4
1 1 0 4
8 9 10 0
7 2 0 0
9 7 0 0
0 0 4 0
8 0 3 1
5 0 7 9
1 0 1 1
0 0 0 0
1 1 1 1

20 3
0 3 0
0 0 6
3 0 0
0 0 4
0 0 6
0 0 3
0 0 2
3 0 0
0 0 3
0 0 3
6 0 0
3 0 0
0 0 2
0 3 0
0 0 3
0 3 0
3 0 0
0 1 0
0 0 3
0 3 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
8 4
19 0 17 14
0 3 3 9
21 10 0 0
1 1 0 4
8 9 10 0
0 0 4 0
0 0 0 0
1 1 1 1

1 5
2 2
3 3
6 1
7 1
10 1
14 1
15 1

3 3
0 13 0
0 0 35
18 0 0

1 5
2 10
3 5
</PRE><P>
______________________________________________________
3098||||||false||||||
<P>Current work in cryptography involves (among other things) large prime numbers and computing powers of numbers among these primes. Work in this area has resulted in the practical use of results from number theory and other branches of mathematics once considered to be only of theoretical interest.<p>This problem involves the efficient computation of integer roots of numbers.<p>Given an integer n &ge; 1 and an integer p &ge; 1 you have to write a program that determines the n<sup>th</sup> positive root of p. In this problem, given such integers n and p, p will always be of the form k to the n<sup>th</sup> power, for an integer k (this integer is what your program must find).<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of a sequence of integer pairs n and p with each integer on a line by itself. For all such pairs 1 &le; n &le; 200, 1 &le; p &lt; 10<sup>101</sup> and there exists an integer k, 1 &le; k &le; 10<sup>9</sup> such that k<sup>n</sup> = p.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each integer pair n and p the value k should be printed, i.e., the number k such that k<sup>n</sup> = p.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2 16
3 27
7 4357186184021382204544
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
4
3
1234
</PRE><P>
______________________________________________________
3099||||||false||||||
<P>Bin-packing is a classic computer problem that is defined with the parameters c, n, and si. In
this, there is a given sequence of n items each one with a given size 0 &lt; si &le; c, and an
unlimited number of bins each one of capacity c. The question is to determine the smallest
number of bins into which the objects can be packed. Two real examples of this problem type
are: 1) elaboration of wooden bookcases by making cuts of different lengths from boards of a
fixed length, 2) packed of advertisements of different lengths into fixed length commercial
breaks on radio or television. Due to Bin-packing complexity, algorithms of approximate
solution (meta heuristics) have been developed. In order to analyze the performance of these
algorithms, it is needed to generate Bin-packing instances with properties that affect to the
algorithms in different ways. With this purpose, the parameter values of the instances are
obtained in a random way, and later on they are adjusted to get the wanted property. The
property of easy-packing is determined mainly with the index of factors.

<p>Index of factors f: expresses the proportion of items whose sizes are factors of the bin
capacity; in where is understood that an item i is a factor when its size s<sub>i</sub> divides from an
exact way to the bin capacity c. In general, instances with many factors are considered easy
to solve.

<p align=center><img src=p3099a.gif>

<p>Develop a program, that given the parameter values c, n and si for defining a Bin-packing
instance, and given a value for the index of factors f, modify the given instance so that its
easy-packing property acquires the value specified by f. The modification must be carried out
under the next conditions:

<blockquote>
	a) Suppose that in the instance given, the number of items that are exact divisors of c, is
	always smaller than the number indicated by <img src=p3099b.gif>f × n <img src=p3099c.gif>. Remember that the function <img src=p3099b.gif><img src=p3099c.gif>
	rounds to the superior integer.<br>
	b) Modify sizes of items, that are not exact divisors, to complete the number of factors
	indicated by <img src=p3099b.gif>f × n<img src=p3099c.gif>. Select the items that require smaller adjustment. In matching case,
	assign bigger priority to the items located in a position smaller.

</blockquote>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>In the first line appears a value among 0 and 1 corresponding to the index of factors f. In the
second line appears the number of items n and the bin capacity c; they are separated by
coma. The sizes of the n objects appear in consecutive lines, each size in a line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>The result is the instance modified in the number of factors. In the first line appears the
number of items n and the bin capacity c; they are separated by coma. The sizes of the n
objects appear in consecutive lines, each size in a line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
0.6
5, 50
39
43
10
18
6
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
5, 50
39
50
10
18
5
</PRE>

<P>

______________________________________________________
3100||||||false||||||
<P>Algorithms for searching a string or a substring have many applications, such as searching files for virus signatures or spyware.<P>Scanning for substrings is straightforward when the string is available in its original form. However, it is often necessary to search for substrings in compressed files.<P>For this problem, we will consider run-length-encoded segments. A run-length-encoded segment is a string where repeated substrings are encoded in pairs called ``count substrings." For example, the count substring ``3 ACM" (where 3 refers to the number of repetitions and ACM is referred to as the encoding substring) is equivalent to the segment ACMACMACM.<P>You are asked to write a program that will search a main string composed of run-length-encoded segments for multiple substrings and print a frequency table of match results.<P>Search results may overlap. For example, a search for a substring ``AAAA" in the main string ``AAAAAA" will result in three matches, matching the first, second and third position.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases.<P>For each test case, input starts with <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3100img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3100img1.png ALT="$ \le$">1000)</SPAN> where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of patterns to search for (or search patterns) from the main string. This is followed by the <SPAN CLASS="MATH"><I>n</I></SPAN> patterns, one per line. Each pattern will be 1 to 7 characters long. The next line contains <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3100img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3100img1.png ALT="$ \le$">1000)</SPAN>, the number of run-length-encoded segments composing the main string. This is followed by <SPAN CLASS="MATH"><I>m</I></SPAN> ``count substrings" providing the run-length encoding of the <SPAN CLASS="MATH"><I>m</I></SPAN> segments. Each encoding substring will be from 1 to 80 characters and can be repeated at most 100 times in one run-length encoded segment. Therefore, the largest possible main string is 8000000 <SPAN CLASS="MATH">(8&#215;10<SUP>6</SUP>)</SPAN> characters long - 80-character substring <SPAN CLASS="MATH">&#215;</SPAN> 100 repetitions <SPAN CLASS="MATH">&#215;</SPAN> 1000 segments.<P>Both search patterns and encoding substrings are composed solely of the uppercase letters, <TT>A</TT>-<TT>Z</TT>.<P>The end of the input file is indicated by <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print an alphabetically sorted list of search patterns and their frequency in the run-length encoded string. The output should be in the form ``pattern frequency". Patterns that did not match shall still be printed out with frequency 0.<P>Separate output for test cases with a single blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
AB
ABCD
EFGH
CDEF
EFAB
4
5 AB
1000000 CD
5 EF
1 GH
2
ACM
ICPC
3
1 HELLOAC
1 MICP
2 C
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
AB 5
ABCD 1
CDEF 1
EFAB 0
EFGH 1

ACM 1
ICPC 1
</PRE><P>
______________________________________________________
3101||||||false||||||
<P>Given a single honest die with six sides, the chances of getting a ``1", ``2", ``3", ``4", ``5", or a ``6" are all equal. This die can be represented as [1,1,1,1,1,1], which is an ordered list of numbers, where each number corresponds to a relative probability of a particular side appearing. The first number in the ordered list represents the relative probability of a ``one" turning up; the second represents the relative probability of a ``two" turning up; and so on and so forth.<P>The game becomes a little more interesting if you combine two or more honest dice. Some numbers have more combinations, and therefore appear more often. If you throw two honest six-sided dice together, the best number to bet on is a ``seven." This is because out of a total of 36 possible combinations, there are 6 which lead to a ``seven" - (1,6), (2,5), (3,4), (4,3), (5,2) and (6,1) - equivalent to a 1-in-6 chance of appearing or about 16.667<SPAN CLASS="MATH">%</SPAN> chance.<P>When you throw three six-sided dice together, the best numbers to bet on are either ``ten" or ``11," because there are 27 combinations that sum up to each number. This gives you a 12.5<SPAN CLASS="MATH">%</SPAN> chance of landing ``ten," and another 12.5<SPAN CLASS="MATH">%</SPAN> chance of landing an ``11."<P><P><BR>However, for cheating gamblers, these odds aren't nearly good enough. This is why they use loaded dice. Loaded dice look like regular dice except that they are unevenly weighted inside so as to favor some numbers more than others. For example, a die could be weighted such that the probability of turning up a ``three" is four times more likely than turning up any of the other sides. Following the notation above, the relative probabilities of this loaded die is written as [1,1,4,1,1,1].<P>If you throw two loaded dice - [1,1,4,1,1,1] and [1,1,1,4,1,1] - the best number to bet on would still be a ``seven" but the odds will have changed significantly in your favor. You would now get 21-in-81 chances of landing a ``seven", or 25.926<SPAN CLASS="MATH">%</SPAN>.<P>Remember that not all dice have six sides. Some dice have four sides, some have eight, some have 12, some have 20, and some have even funnier shapes.<P>If you were given a number of varying shapes of dice, some honest, some loaded, but each one consecutively numbered from one to whatever number of sides each had, what would be the best combination (or combinations) to bet on, and what is its probability?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. The first line is the number of cases. Each test case starts with an integer <SPAN CLASS="MATH"><I>x</I></SPAN>, the number of dice for that test case. This is followed by <SPAN CLASS="MATH"><I>x</I></SPAN> lines containing the probability list for each die.<P>The probability list is a series of numbers separated by a single space, with each number representing the relative probability of one side of the die. The relative probability number is an integer between 1 and 200, inclusive.<P>Each die's probability list may contain anywhere from 4 to 20 integers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print out a header indicating the number of the test. On the next line, print out the most probable sum given the set of loaded dice. In case of a tie, print out the list of sums in ascending order, separating numbers with a space.<P>Lastly, print the absolute probability of the occurrence of the sum, accurate to 3 decimal places, rounding off if necessary. Print any trailing zeroes. In case of a tie, print out the probability of one sum.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
2
1 1 1 1 1 1
1 1 1 1 1 1
3
1 1 1 1 1 1
1 1 1 1 1 1
1 1 1 1 1 1
2
1 4 1 1 1 1
1 1 1 1 4 1
7
1 1 1 1 1 1
1 1 1 1 1 1
1 4 1 1 1 1
1 1 1 1 4 1
1 1 20 1
1 1 50 1 1 50 1 1 1 1 50 1
1 1 1 1 1 1 1 200 1 1 1 1 1 1 1 200 200 200 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Test case 1
7
0.167
Test case 2
9 10
0.125
Test case 3
7
0.259
Test case 4
39
0.065
</PRE><P>
______________________________________________________
3102||||||false||||||
<P>A local noontime variety show is introducing a new and exciting game. In it, the hosts arrange a series of boxes each with corresponding heights and cash values along a table from left to right. When a player is called, he will be asked to pick one box from which he will begin the game. The cash value of that starting box will be added to his prize total. After the player has chosen, he will then be asked to pick another box subject to the following restrictions:<P><UL><LI>The new box must be no taller than the box previously chosen. </LI><LI>The new box must be to the right of the box previously chosen. </LI></UL><P>The cash value of this new choice will also be added to his prize. The process of picking new boxes subject to the above restrictions will be repeated continuously until such a time when no more legal choices are possible.<P>Obviously, the object of the game is to get as much cash prize as possible.<P><P><BR><B>Notes:</B><P><UL><LI>The player can skip boxes as long as the next choice is to the right of the last box chosen. </LI><LI>The leftmost box is not necessarily the starting box. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line will be an integer <SPAN CLASS="MATH"><I>n</I></SPAN> corresponding to the number of games that will be played. It will then be followed by <SPAN CLASS="MATH"><I>n</I></SPAN> groups of three lines each where each group will correspond to a particular game. The first line of each group will be an integer <SPAN CLASS="MATH"><I>m</I></SPAN> that defines the number of boxes in the game. The second line of each group will be a comma-separated list of <SPAN CLASS="MATH"><I>m</I></SPAN> integers where each integer is the height of the <SPAN CLASS="MATH"><I>m</I></SPAN> boxes defined from left to right. Finally, the third line of each group will be a comma-separated list of <SPAN CLASS="MATH"><I>m</I></SPAN> integers corresponding to the cash values of the boxes.<P><UL><LI>The input file will contain at most 10 game definitions ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3102img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3102img1.png ALT="$ \le$">10</SPAN>). </LI><LI>Each game will have at least 2 boxes and at most 100 ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3102img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3102img1.png ALT="$ \le$">100</SPAN>). </LI><LI>The cash values will be non-negative integers less than or equalto 1000. </LI><LI>The height of each box will be a non-negative integer less than or equal to 1000. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output will consist of <SPAN CLASS="MATH"><I>n</I></SPAN> lines; each displaying the maximum possible cash prize for each of the games defined in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
10,15,8
5, 9,7
520,18,19,19,15
5,10,8,13,5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Game #1: 16
Game #2: 31
</PRE><P>
______________________________________________________
3103||||||false||||||
<P>Dr. Match (Love Match) loves matching patterns to things. One day she created a simulated Artificially Intelligent robot on her laptop, to be able to recognize patterns in a collection of things. What the simulated robot does is quite simple - something called pattern matching.<P>What the robot was supposed to do was find entries in a list of entries (containing either words, numbers, punctuation marks, and combination of numbers and letters) that fit a given pattern. The pattern is composed of the following symbols:<P><DL COMPACT><DT><TT>#</TT></DT><DD>stands for a number from <TT>0</TT>-<TT>9</TT></DD><DT><TT>-</TT></DT><DD>stands for a punctuation mark, which is limited to the following: `<TT>?</TT>' `<TT>!</TT>' `<TT>.</TT>' `<TT>,</TT>' (question mark, exclamation point, period, comma)</DD><DT><TT>_</TT></DT><DD>stands for a letter, either lower or upper case</DD><DT><TT>N</TT></DT><DD>stands for null or no defined pattern</DD></DL><P>Dr. Match has already written the simulation, but she would like to know whether the robot was performing as expected - she didn't have the time to hand-check every output against the list of entries. She asked you to write a program which will validate whether or not the outputs of the robot conform to the given pattern(s).<P>A successfully matched pattern should not consider excess characters from the input. For example, the pattern <TT>###</TT> matches <TT>123456</TT>, since the first three characters are sufficient to match.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file consists of the number of test cases the robot performed.<P><P><BR>For each test case,<P><DL COMPACT><DT></DT><DD>the first line consists of the size, <SPAN CLASS="MATH"><I>s</I></SPAN>, of the list of entries,<P></DD><DT></DT><DD>followed by <SPAN CLASS="MATH"><I>s</I></SPAN> lines containing each entry,<P></DD><DT></DT><DD>another line for the given pattern the robot matched,<P></DD><DT></DT><DD>another line for the number of results, <SPAN CLASS="MATH"><I>r</I></SPAN>, determined by the robot,<P></DD><DT></DT><DD>followed by <SPAN CLASS="MATH"><I>r</I></SPAN> lines for each entry the robot matched to the given pattern.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should consist of the case number, and whether or not the Robot performed as expected.<P>If the robot printed an entry which didn't match the pattern, an error indicating that the invalid result is printed:<P><P><BR>`<TT>Robot should not print <SPAN CLASS="MATH"><I>pattern</I></SPAN></TT>'<P><P><BR>If the robot did not print all the matching patterns, then the unprinted patterns should be printed:<P><P><BR>`<TT>Robot did not print <SPAN CLASS="MATH"><I>pattern</I></SPAN></TT>'<P><P><BR>If the robot was correct, the program should print:<P><P><BR>`<TT>Robot behaved properly</TT>'<P><P><BR>The output for `<TT>did not print</TT>' and `<TT>should not print</TT>' lines should follow the order of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
6
0io00iadfg
adfjg12daf
asdofq3442
asd-01ihfo
eoig00s.x2
sadfjg992822
______####
1
asdofq3442
3
ads123asd123
aaaa23aaa234
aaa12d
___###
2
ads123asd123
aaa12d
1
asd123
___###
1
asd123
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1:
Robot did not print sadfjg992822
Case #2:
Robot should not print aaa12d
Case #3:
Robot behaved properly
</PRE><P>
______________________________________________________
3104||||||false||||||
<P>In Unix, a file may be referred to by its absolute pathname which indicates the complete path of the file beginning from the main directory denoted by `<TT>/</TT>' called the root. For example, the absolute pathname <TT>/tmp/alpha/one</TT> refers to a file called one under the alpha directory, which in turn is under the tmp directory, which in turn is under the root directory (denoted by the first `<TT>/</TT>'). In this case, the file one may refer to either an actual file or another directory; the reason being that a directory in Unix is also considered a file and is not marked in any special way.<P>Based on a given absolute pathname, therefore, one can come up with the file hierarchy of a given filesystem. Consider the following set of absolute pathnames:<P><PRE>
/tmp/alpha/a1
/tmp/alpha/a2
/tmp/beta
/tmp/gamma/c1
/tmp/gamma/c2
</PRE><P>Based on the above listed absolute pathnames, one can identify that from the root `<TT>/</TT>', there is one file called <TT>tmp</TT> (a directory) under which there are three files <TT>alpha</TT> (a directory), <TT>beta</TT> (may or may not be a directory) and <TT>gamma</TT> (a directory). Under the <TT>alpha</TT> directory are two files called <TT>a1</TT> and <TT>a2</TT>. Under the gamma directory are two files called <TT>c1</TT> and <TT>c2</TT>.<P>Unix system administrators use the <SPAN CLASS="textit">find</SPAN> command to search the file hierarchy for a file starting from a specified absolute pathname. <SPAN CLASS="textit">find</SPAN> recursively searches from the specified absolute pathname and any subdirectories from it.<P><P><BR>Consider again the file hierarchy defined by the set of absolute pathnames above.<P><UL><LI>All the files in this hierarchy may be specified with a single <SPAN CLASS="textit">find</SPAN> starting from <TT>/</TT>. </LI><LI>All the files under the <TT>tmp</TT> directory can be specified with a single <SPAN CLASS="textit">find</SPAN> starting from <TT>/tmp</TT>. </LI><LI>But all files excluding the <TT>beta</TT> file will need multiple <SPAN CLASS="textit">find</SPAN> commands at different starting points; specifically, <SPAN CLASS="textit">find</SPAN> commands starting from <TT>/tmp/alpha</TT> and from <TT>/tmp/gamma</TT>. Of course, enumerating all the files as starting point will also work but is not desired. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file may be composed of multiple test cases.<P>Each test case begins with a list of absolute pathnames identifying a file hierarchy. One line contains exactly one absolute filename. Absolute pathnames do not repeat within the list and are not specified in any particular order.<P>The file hierarchy list is terminated by a line containing a single exclamation mark.<P>A list of 0 or more absolute pathnames to be searched follows. If a filename referring to a directory is specified, all files under that directory should also be included.<P>Each test case is terminated by two exclamation marks on a single line. The end of the file is indicated by three exclamation marks.<P>Filenames used in the absolute pathnames may contain the characters <TT>A</TT>-<TT>Z</TT>, <TT>a</TT>-<TT>z</TT>, <TT>0</TT>-<TT>9</TT>, `<code>_</code>' (underscore), `<TT>.</TT>' (period) and will not include spaces or other punctuation marks.<P>A path has a maximum depth of 32.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Give the least number of starting points (absolute pathnames) for the <SPAN CLASS="textit">find</SPAN> command that will match the specified set of absolute filenames without including unnecessary files. Filenames and directories should be printed on one line, separated by a single space, and sorted alphabetically.<P>Do not print leading or trailing spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
/a/b/c
/a/b/d/e
/a/b/d/f
/a/d
/b/c
!
/a/b/c
/a/b/d
/b
!!
/disc2/f3/f3a
/disc1
/disc2/f1
/disc2/f2
!
/disc2/f3/f3a
!!
!!!
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
/a/b /b
/disc2/f3/f3a
</PRE><P>
______________________________________________________
3105||||||false||||||
<P>Computer Science student Alexander (named after Alexander, hometown of Euclid) is investigating prime numbers by graphing them. He started by taking a sheet of graphing paper, and labeled the <SPAN CLASS="MATH"><I>x</I></SPAN>-axis with numbers from 0 to 19. He circled the prime numbers - (2, 3, 5, 7, 11, 13, 17, 19) which he then referred to as his prime axis.<P>He labeled the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis with sequential integers, 0 to 19, which he called his vertical series. He started by plotting a point on the graph where a prime number on the prime-axis intersected one of its multiples on the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis, and drew a horizontal line. Upon completion of his graph, he observed that all the numbers in his vertical series except for the number one were lined out because every number from 2 to 19 is a multiple of the given primes.<P>To investigate further, he tried skipping numbers in his vertical series. Instead of 0 to 19, he started skipping by prime numbers to see if there are any special properties. He chose 3 as his first prime, and used the series (0, 3, 6, 9, 12, 15, 18) as his vertical series (note that 18 is the largest multiple of 3 less than or equal to 19). He tried out skipping by composite numbers as well. He also even started to eliminate some primes from his prime-axis to see how that would affect the result.<P>He repeated this until he consumed sheets and sheets of paper and could not go on. He needs your help to write a program that can do his investigation thru a computer.<P>Given a maximum range, <SPAN CLASS="MATH"><I>max</I></SPAN>, and a step amount, <SPAN CLASS="MATH"><I>step</I></SPAN>, set-up a graph with <SPAN CLASS="MATH"><I>y</I></SPAN>-axis 0 to (largest multiple of <SPAN CLASS="MATH"><I>step</I></SPAN> less than or equal to <SPAN CLASS="MATH"><I>max</I></SPAN>), and a prime-axis comprised of a given set of prime numbers from the least prime to the greatest prime. Plot a point for each <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> pair where a prime on the prime-axis meets its multiple on the vertical series. Draw a horizontal line from this point to the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis. Count the number of elements in the vertical series that had at least one horizontal line drawn to it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains an integer <SPAN CLASS="MATH"><I>p</I></SPAN>, where <SPAN CLASS="MATH"><I>p</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3105img1.png ALT="$ \le$">100</SPAN>, corresponding to the number of unique primes in the prime axis. The next <SPAN CLASS="MATH"><I>p</I></SPAN> lines contain the <SPAN CLASS="MATH"><I>p</I></SPAN> unique prime numbers, where each prime is between 0 and 10,000,000. These are then followed by another line defining the number of test cases. Each test case will be defined using two lines. The first specifies the maximum range <SPAN CLASS="MATH"><I>max</I></SPAN>, where <SPAN CLASS="MATH"><I>max</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3105img1.png ALT="$ \le$">10, 000, 000</SPAN>. The second gives the value of step, where <SPAN CLASS="MATH"><I>step</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3105img1.png ALT="$ \le$">10, 000, 000</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output one line for each test case displaying the number of elements in the vertical series that had at least one horizontal line drawn to it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
3
5
7
11
13
17
2
10000000
2
10
1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3194745
7
</PRE><P>
______________________________________________________
3106||||||false||||||
<P>In genetics, contemporary techniques for sequencing an organism's entire genome frequently involve `cutting up' an entire chromosome into DNA sequence fragments.<P>Each fragment is then sequenced into the four letters of the genetic code - the DNA bases <TT>A</TT>, <TT>C</TT>, <TT>G</TT>, <TT>T</TT> - that are arranged into genes and non-coding sections.<P>Afterwards, the multiple fragments are reassembled into one continuous stretch representing a single chromosome.<P>Your challenge is to find and implement an algorithm for reassembling multiple fragments of DNA strands (strings) into the longest possible sequence.<P>Two strings, <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> are said to CONNECT or overlap if the last <SPAN CLASS="MATH"><I>x</I></SPAN> characters from the <SPAN CLASS="MATH"><I>end</I></SPAN> of <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> are the same as the first <SPAN CLASS="MATH"><I>x</I></SPAN> characters of <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>.<P>The strings <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> = `<TT>ACT</TT>' and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> = `<TT>CTG</TT>' overlap because the last two characters of <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN>, `<TT>CT</TT>' match the first two characters of <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>.<P>Two strands <SPAN CLASS="textit">always</SPAN> overlap or connect up to the 'deepest' possible point. For example, the string `<TT>ACTCT</TT>' and `<TT>CTCTG</TT>' are said to overlap as `<TT>A(CTCT)G</TT>' and <SPAN CLASS="textit">not</SPAN> simply as `<TT>ACT(CT)CTG</TT>'.<P>Other examples:<P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>s1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>s2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Overlap?</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>AC</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>AC</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>(AC)</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>AC</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>CTG</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>A(C)TG</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>ACT</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>CTG</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>A(CT)G</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>ACTG</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>CTG</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>A(CTG)</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>ACT</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>GCA</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>- no -</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>ACCC</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>CCTG</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>AC(CC)TG</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>ACTCT</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>CTCTG</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>A(CTCT)G</TT></TD></TR></TBODY></TABLE></DIV><P>Given a set of <EM>unique</EM> input strings <SPAN CLASS="MATH"><I>S</I> = {<I>s</I><SUB>1</SUB>...<I>s</I><SUB>n</SUB>}</SPAN>, for example:<P><PRE>
ACTC
ATG
CGT
TCAG
GTCG
</PRE><P>The program should find the longest possible sequence, <SPAN CLASS="MATH"><I>L</I></SPAN> composed of any <SPAN CLASS="MATH"><I>m</I></SPAN> connected strings from the set <SPAN CLASS="MATH"><I>S</I></SPAN> such that <SPAN CLASS="MATH"><I>L</I></SPAN> can be constructed by concatenating the relevant strings, in proper order and combining the overlapping substrings. Note that you can only use each input string once, and only once to construct <SPAN CLASS="MATH"><I>L</I></SPAN>. Again, note that the problem excludes the possibility of duplicated input strings.<P><P><BR>For example, given the above set of strings, <SPAN CLASS="MATH"><I>L</I></SPAN> would thus be `<TT>ACTCGTCG</TT>' or:<P><PRE>
ACTC
   CGT
    GTCG
</PRE><P><B>Note:</B> For any given set <SPAN CLASS="MATH"><I>S</I></SPAN> of strings, there may be <SPAN CLASS="textit">more than one</SPAN> `longest' sequence possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line in the input file will be the number of input sets to solve for.<P>The next line is a number <!-- MATH
 $2 < x \le 10$
 --><SPAN CLASS="MATH">2 &lt; <I>x</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3106img1.png ALT="$ \le$">10</SPAN> specifying the number of strings in the first input set. The following <SPAN CLASS="MATH"><I>x</I></SPAN> lines will be arbitrary strings where the number of characters in each string <SPAN CLASS="MATH"><I>l</I></SPAN> will be <!-- MATH
 $3 < l \le 10$
 --><SPAN CLASS="MATH">3 &lt; <I>l</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3106img1.png ALT="$ \le$">10</SPAN>. Each string may consist of any possible combination of <SPAN CLASS="MATH"><I>l</I></SPAN> characters `<TT>A</TT>', `<TT>C</TT>', `<TT>T</TT>', `<TT>G</TT>'.<P>Another number, and the corresponding number of strings may follow which will constitute the second set, and so on until the end of the file. There will be at least one (1), but at most four (4) input sets in the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set <SPAN CLASS="MATH"><I>i</I></SPAN> defined in the input, the program should output one line stating `<TT>Found <SPAN CLASS="MATH"><I>n</I></SPAN> longest sequence/s for set <SPAN CLASS="MATH"><I>i</I></SPAN>:</TT>' followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines where each corresponds to one of the <SPAN CLASS="MATH"><I>n</I></SPAN> longest sequence/s found.<P><P><BR><B>Note:</B> If there is more than one possible sequence with the longest length that can be constructed as such given the input set, then the program should output <SPAN CLASS="textit">all</SPAN> possible `longest' sequences <SPAN CLASS="textit">in alphabetical order</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
5
ACTC
ATG
CGT
TCAG
GTCG
9
AGAA
CTTT
GGA
TAGCTG
AAGGGGG
TCCAC
CCAGTCTG
TACG
TATC
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Found 1 longest sequence(s) for set 1:
ACTCGTCAGTCG
Found 2 longest sequence(s) for set 2:
TATCTTTCCACCAGTCTGGAGAAGGGGG
TCCACTTTATCCAGTCTGGAGAAGGGGG
</PRE><P>
______________________________________________________
3107||||||false||||||
<P>A relational table of values may be used to represent a relation among data values wherein each row in the table represents a collection of related data values. Consider for example, the table (1)<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Glass Widget</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0002</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Steel Widget</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0003</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Porcelain Widget</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0004</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Wood Widget</TD></TR></TBODY></TABLE></DIV><P><P><BR>From the first row of the table, ``PART0001" is said to be related to ``Glass Widget"; this row of related values is referred to as a tuple denoted by <SPAN CLASS="MATH">&lt;</SPAN>``PART0001",``Glass Widget"<SPAN CLASS="MATH">&gt;</SPAN>. The succeeding rows further indentify the following tuples: <SPAN CLASS="MATH">&lt;</SPAN>``PART0002",``Steel Widget"<SPAN CLASS="MATH">&gt;</SPAN>, <SPAN CLASS="MATH">&lt;</SPAN>``PART0003",``Porcelain Widget"<SPAN CLASS="MATH">&gt;</SPAN> and <SPAN CLASS="MATH">&lt;</SPAN>``PART0004",``Wood Widget"<SPAN CLASS="MATH">&gt;</SPAN><P><P><BR>The EQUIJOIN operation is used to combine related tuples from two or more relational tables into single tuples. Equijoining tables involve performing a cross product on tuples that have identical values. Consider table (2):<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0002</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0003</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN3</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0004</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN4</TD></TR></TBODY></TABLE></DIV><P><P><BR>We define an equijoin as VALID if and only if all rows from the original tables are complete and do not repeat. A valid equijoin of (1) and (2) would be on the ``part" column:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Glass Widget</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0002</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Steel Widget</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0003</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Porcelain Widget</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0004</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Wood Widget</TD></TR></TBODY></TABLE></DIV><P><P><BR>For an invalid equijoin, consider a table (3):<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bird</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Hawk</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Mammal</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Tiger</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Fish</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Shark</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Reptile</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Alligator</TD></TR></TBODY></TABLE></DIV><P><P><BR>An equijoin between (3) and either of (1) and (2) is impossible because they have no common columns.<P>A partially correct equijoin would be of (1) and (2):<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Glass Widget</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0002</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Steel Widget</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0003</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Dog</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PART0004</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SALESMAN4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Wood Widget</TD></TR></TBODY></TABLE></DIV><P><P><BR>In this case, the first two columns are said to be valid, but the third is invalid because it contains a value ``Dog" which is not in the original values.<P>The problem is to determine whether the given set of relational tables, or any subset thereof, will produce valid equijoins.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line in the input file indicates the number test cases. Each test case begins with the number, <SPAN CLASS="MATH"><I>t</I></SPAN>, of relational tables that will follow; where <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3107img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3107img1.png ALT="$ \le$">16</SPAN>. Each of the <SPAN CLASS="MATH"><I>t</I></SPAN> relational tables is defined by a line containing the table's number of columns <SPAN CLASS="MATH"><I>c</I></SPAN> and number of rows <SPAN CLASS="MATH"><I>r</I></SPAN> separated by a single space; where <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3107img1.png ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3107img1.png ALT="$ \le$">16</SPAN> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3107img1.png ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3107img1.png ALT="$ \le$">64</SPAN>. It is then followed by <SPAN CLASS="MATH"><I>c</I></SPAN> sets of <SPAN CLASS="MATH"><I>r</I></SPAN> data values of the relational table. Finally, a result table described in the above mentioned manner follows. All data values are strings and will be less than 80 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print the case number in one line, followed by <SPAN CLASS="MATH"><I>c</I></SPAN> lines corresponding to number of columns of the given results table, containing either `<TT>true</TT>' or `<TT>false</TT>'. The line is `<TT>true</TT>' if and only if the column of the given results table belongs to a valid equijoin. If the entire table is invalid, such as when the equijoin is impossible, simply print `<TT>false</TT>' <SPAN CLASS="MATH"><I>c</I></SPAN> number of times.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
2
2 4
PART0001
PART0002
PART0003
PART0004
Glass Widget
Steel Widget
Porcelain Widget
Wood Widget
2 4
PART0001
PART0002
PART0003
PART0004
SALESMAN1
SALESMAN2
SALESMAN3
SALESMAN4
3 4
PART0001
PART0002
PART0003
PART0004
SALESMAN1
SALESMAN2
SALESMAN3
SALESMAN4
Glass Widget
Steel Widget
Porcelain Widget
Wood Widget
4
2 2
PART0001
PART0002
Glass Widget
Steel Widget
2 2
PART0001
PART0002
100
50
2 2
PART0001
PART0002
ShopOne
ShopTwo
2 2
ShopOne
ShopTwo
Mandaluyong
Pasig
2 2
PART0001
PART0002
Mandaluyong
Pasig
2
2 2
A1
A2
B1
B2
2 2
C1
C2
D1
D2
2 1
A1
C1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
true
true
false

2
false
false

3
false
false
</PRE><P>
______________________________________________________
3108||||||false||||||

<P>
Over the years, the people of the great city of Pittsburgh have repeatedly demonstrated a col-
lective expertise at football second to none. Recently a spy has discovered the true source of the
city's football power - a wizard known only as ``Myron," who is infallible at selecting the proper
position at which each player will excel.

<P>
Now that you know the source of Pittsburgh's wisdom, you are determined to provide your
school's football team with a computer program that matches the wisdom of ``Myron." You have
consulted with the best football minds you can find, and they have dispensed their wisdom on the
slowest speed, minimum weight, and minimum strength required to play each position.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=4 BORDER RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
Position    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   Slow. Speed   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Min. Weight  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  Min. Strength </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Wide Receiver  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>        4.5      </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>       150      </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>       200  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
Lineman       </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      6.0     </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>        300       </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      500 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
Quarterback    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>       5.0    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>         200      </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>       300 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Using this knowledge, you will develop a program that reads in several players physical attributes and
   outputs what position(s) they are able to play.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each line of the input file will list the attributes for one player:

<P>

<P>
<BR>

<SPAN CLASS="MATH">&lt; <I>speed</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>weight</I> &gt;</SPAN> <!-- MATH
 $<strength>$
 -->
<SPAN CLASS="MATH">&lt; <I>strength</I> &gt;</SPAN>

<P>

<P>
<BR>
Each number will be a real-valued number. The file will end with a line reading `<TT>0 0 0</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each player, you will output one line listing the positions that player can play. A player can
play a position if each of their attributes is greater or equal to the minimum for weight and strength,
and less than or equal to the slowest speed. If a player can play multiple positions, output them
in the order listed above, separated by whitespace. 
<!--You may leave an extra space at the end of the line.-->
If a player can play no positions, write `<TT>No positions</TT>' on the line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4.4 180 200
5.5 350 700
4.4 205 350
5.2 210 500
0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Wide Receiver
Lineman
Wide Receiver Quarterback
No positions
</PRE>

<P>

______________________________________________________
3109||||||false||||||

<P>
Having run into trouble with current online auctions and buyers that win auctions and then back
out, you decide to open a new enterprise that has the bidders deposit funds before they may bid on
any item. If they win an auction, the amount they bid is immediately (that second!) deducted from
their account. (The problem of sellers that don't deliver the items will be left for another day.)

<P>
You must write a program to implement the rules of this auction. You will be auctioning off a
number of items, each of which will have a reserve price that must be met. Each of your bidders
will deposit funds with you, and you must match these funds with items they successfully bid for.
You will write a program that tracks the auctions during a single day and outputs the results of
each auction.

<P>

<P>
<BR>

<B>Auction Rules</B>

<P>

<P>
<BR>
You are guaranteed:

<UL>
<LI>No two items will have the same end time.
</LI>
<LI>No two bids will have the same bid time.
</LI>
<LI>No price, bid, or account balance will be negative.
</LI>
</UL>

<P>
Bidder numbers and item numbers are unique within each category, but a bidder may have the
same number as an item. Bidder and item numbers are not necessarily assigned sequentially.

<P>
An auction is won by the highest bid that:

<P>

<UL>
<LI>arrives no later than the second the auction ends.
</LI>
<LI>is greater than or equal to the minimum price for the item
</LI>
<LI>has at least the bid amount remaining in the bidder's account at the instant the auction ends.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are 3 sections in each dataset, describing the items available for bid, the registered bidders,
and the bids made during the auction.

<P>

<P>
<BR>

<B>Items</B>

<P>

<P>
<BR>

<UL>
<LI>A single line containing the number of items, <SPAN CLASS="MATH"><I>i</I></SPAN>
</LI>
<LI><SPAN CLASS="MATH"><I>i</I></SPAN> lines, one for each item of the form:

<P>

<P>
<BR>

<!-- MATH
 $<item \ number>$
 -->
<SPAN CLASS="MATH">&lt; <I>item</I>&nbsp;<I>number</I> &gt;</SPAN> <!-- MATH
 $<minimum \ price>$
 -->
<SPAN CLASS="MATH">&lt; <I>minimum</I>&nbsp;<I>price</I> &gt;</SPAN> <!-- MATH
 $<auction \ end \ time>$
 -->
<SPAN CLASS="MATH">&lt; <I>auction</I>&nbsp;<I>end</I>&nbsp;<I>time</I> &gt;</SPAN>

<P>

<P>
<BR>
where <!-- MATH
 $item \ number$
 -->
<SPAN CLASS="MATH"><I>item</I>&nbsp;<I>number</I></SPAN> is a non-negative integer, <!-- MATH
 $minimum \ price$
 -->
<SPAN CLASS="MATH"><I>minimum</I>&nbsp;<I>price</I></SPAN> is specified to the penny (0.01),
and <!-- MATH
 $<auction \ end \ time>$
 -->
<SPAN CLASS="MATH">&lt; <I>auction</I>&nbsp;<I>end</I>&nbsp;<I>time</I> &gt;</SPAN> is in 24 hour format of the form `<TT><SPAN CLASS="MATH"><I>XX</I></SPAN>:<SPAN CLASS="MATH"><I>YY</I></SPAN>:<SPAN CLASS="MATH"><I>ZZ</I></SPAN></TT>' where <SPAN CLASS="MATH"><I>XX</I></SPAN> is in hours from 00
    to 23, <SPAN CLASS="MATH"><I>YY</I></SPAN> is in minutes from 00 to 59, and <SPAN CLASS="MATH"><I>ZZ</I></SPAN> is in seconds from 00 to 59.
</LI>
</UL>

<P>

<P>
<BR>

<B>Bidders</B>

<P>

<UL>
<LI>A single line with the number of bidders registered, <SPAN CLASS="MATH"><I>j</I></SPAN>
</LI>
<LI><SPAN CLASS="MATH"><I>j</I></SPAN> lines of bidder data of the form:

<P>

<P>
<BR>

<!-- MATH
 $<bidder \ number>$
 -->
<SPAN CLASS="MATH">&lt; <I>bidder</I>&nbsp;<I>number</I> &gt;</SPAN> <!-- MATH
 $<account \ balance>$
 -->
<SPAN CLASS="MATH">&lt; <I>account</I>&nbsp;<I>balance</I> &gt;</SPAN>

<P>

<P>
<BR>
where <!-- MATH
 $bidder \ number$
 -->
<SPAN CLASS="MATH"><I>bidder</I>&nbsp;<I>number</I></SPAN> is a non-negative integer and <!-- MATH
 $account \ balance$
 -->
<SPAN CLASS="MATH"><I>account</I>&nbsp;<I>balance</I></SPAN> is specified to the penny
    (0.01).
</LI>
</UL>

<P>

<P>
<BR>

<B>Bids</B>

<P>

<UL>
<LI>A single line with the number of bids received, <SPAN CLASS="MATH"><I>k</I></SPAN>
</LI>
<LI><SPAN CLASS="MATH"><I>k</I></SPAN> lines of bid data of the form:

<P>

<P>
<BR>

<!-- MATH
 $<item \ \# \ being \ bid \ on>$
 -->
<SPAN CLASS="MATH">&lt; <I>item</I>&nbsp;#&nbsp;<I>being</I>&nbsp;<I>bid</I>&nbsp;<I>on</I> &gt;</SPAN> <!-- MATH
 $<bidder \ number>$
 -->
<SPAN CLASS="MATH">&lt; <I>bidder</I>&nbsp;<I>number</I> &gt;</SPAN> <!-- MATH
 $<bid \ amount>$
 -->
<SPAN CLASS="MATH">&lt; <I>bid</I>&nbsp;<I>amount</I> &gt;</SPAN> <!-- MATH
 $<bid \ time>$
 -->
<SPAN CLASS="MATH">&lt; <I>bid</I>&nbsp;<I>time</I> &gt;</SPAN>

<P>

<P>
<BR>
where all fields are formatted as described above.
</LI>
</UL>

<p>Input will be terminated with a dataset with 0 items. This test case shouldn't be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output one line for each item being auctioned, in order of their auction finish time, listing

<P>

<P>
<BR>

<TT>Item <!-- MATH
 $<item \ number>$
 -->
<SPAN CLASS="MATH">&lt; <I>item</I>&nbsp;<I>number</I> &gt;</SPAN> Bidder <!-- MATH
 $<bidder \ number>$
 -->
<SPAN CLASS="MATH">&lt; <I>bidder</I>&nbsp;<I>number</I> &gt;</SPAN> Price <!-- MATH
 $<winning \ bid>$
 -->
<SPAN CLASS="MATH">&lt; <I>winning</I>&nbsp;<I>bid</I> &gt;</SPAN></TT>

<P>
If there is not a winning bid for an item, for that item output

<P>

<P>
<BR>

<TT>Item <!-- MATH
 $<item \ number>$
 -->
<SPAN CLASS="MATH">&lt; <I>item</I>&nbsp;<I>number</I> &gt;</SPAN> Reserve not met.</TT>

<P>Print a blank line between datasets.
<p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
1 5.00 05:06:27
2 25.00 15:30:11
2
11 37.37
22 55.55
3
1 11 60.00 04:03:01
2 11 26.00 00:18:03
2 22 27.00 09:03:05
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Item 1 Reserve not met.
Item 2 Bidder 22 Price 27.00
</PRE>

<P>

______________________________________________________
3110||||||false||||||
<P>GHOST is a spelling game played by bored school kids on long car/bus rides. The purpose of the game it to accumulate letters that spell some word without ever actually finishing a word. Before the game begins, players agree on the order in which they will play. Plays proceed from one player to the next, returning then to the first player until the game is completed. Each player must, in turn, 1) extend the current ``word", 2) bluff, or 3) challenge.<P><DL COMPACT><DT>1.</DT><DD>The most common play is to extend the current sequence of letters by adding a single letter, so that the resulting sequence of letters forms the beginning of some word. For example, the first player might call ``P", thinking (secretly) of the word ``part". The second player might call ``L", thinking of the word ``play". The third player might call ``E", thinking of the word ``please".<P>A player loses if they actually complete a valid English word of 4 or more letters. For example, if there were only three players, after ``PLE" the first player might try to extend the word by calling ``A", thinking of the word ``plead". This would, however, be a losing play because ``plea" is a valid word.<P></DD><DT>2.</DT><DD>A player who cannot think of a valid letter to extend the current sequence may opt to ``bluff" by calling out an arbitrary letter, hoping that the next player will not notice.<P></DD><DT>3.</DT><DD>Finally, if a player believes, on his turn, that the preceding player was bluffing or that the preceding player completed a word, he may challenge the preceding player. If all players agree that the current sequence completes a word (of at least 4 letters), the preceding player loses. If the preceding player cannot name a word that can be formed from the current sequence, the preceding player loses. If the current sequence is not a valid word and the preceding player is able to name a possible word beginning with the sequence, the challenger loses.</DD></DL><P>Write a program to serve as a player in a game of GHOST. Note that a skillful player will, on her turn, not only worry about coming up with a legal extension to the current sequence of letters, but will also think about all the words that could be formed from an extension and whether, comparing the number of letters in those words to the number of players, consider whether a possible extension could result in her getting stuck on a future turn with no legal extension that does not end a word, thus losing the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input for this game will consist of a sequence of one or more scenarios.<P>Each scenario contains the following:<P>The first line of the scenario will contain a single integer indicating the number of players in the game. This value will be at least 2 for a valid scenario. The end of the input file will be indicated by a value less than 2 for this number.<P>Following this will be a list of words to serve as the program's dictionary/vocabulary for the scenario. Each word will appear on a separate line, with no leading, trailing, or internal whitespace. Each word will consist only of the characters {<TT>a</TT>-<TT>z</TT>}. The end of this list of words will be signaled by an empty line.<P>Following that empty line, the final input line of the scenario will contain the current sequence of letters, again with no leading or trailing spaces. This sequence may be empty if the computer player is the first player. The sequence may also contain more letters than the number of players, indicating that all players (including the computer player) have taken one or more turns.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program will produce a single line of output for each scenario. That line of output will consist of the current sequence of letters from the input, followed by a single blank, followed by:<P><DL COMPACT><DT>1.</DT><DD>The word `<TT>Challenge</TT>' if the current sequence is a complete word in the vocabulary list or is not a prefix of any word in the vocabulary list, or<P></DD><DT>2.</DT><DD>A single character representing a valid extension if it can find some word formed with that extension such that this extension does not complete a word and, if all other players continue to spell out that same word, neither that word nor any shorter word would be completed on the computer player's turn.<P>If multiple such extensions are possible, and if any extensions guarantee a different player will lose, the program should select the lexicographicaly smallest.<P></DD><DT>3.</DT><DD>The word `<TT>Bluff</TT>' if the only possible extensions would lead to a loss by the computer player.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
area
arched
apple
apply
applied

ar
2
area
arch
apple
apply
applied
applying

a
2
area

ax
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ar e
a p
ax Challenge
</PRE><P>
______________________________________________________
3111||||||false||||||

<P>
A mole has pockmarked our yard with a rectangular grid of tunnels. Infuriated at the damage,
we have released a number of terriers into the yard to catch the mole. The terriers have very
sensitive hearing and, if they come close enough to the mole, can dig very quickly and catch the
rodent. Unfortunately, the mole is very sensitive to the vibrations caused by the footsteps of the
terriers, and will actively try to evade them.

<P>
We have no idea where the mole was when the terriers were released. But we have watched the
terriers move about the yard for some time, and the mole has not been caught. Write a program
that deduces where the mole might be, given our observations.

<P>
At the time we began recording our observations, we also know that the mole was not in a
position underneath or adjacent to a terrier. In each subsequent time interval, the terriers may have
remained in the same position or may have moved one space horizontally or vertically. Then the
mole may have done the same. If, before or after any of these moves, by terriers or by the mole, a
terrier were directly over the mole or in a position adjacent (horizontally or vertically) to the mole,
the mole would have been caught.

<P>
Write a program that accepts a description of the yard and of the location of the terriers within
it over a period of time. The program should print a list of the possible positions of the mole at the
end of that time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input for this program consists of one or more observation sets.

<P>
Each observation set is constructed as follows:

<P>

<UL>
<LI>The first line contains 4 integers

<P>
<!-- MATH
 $W \ L \ N \ T$
 -->
<SPAN CLASS="MATH"><I>W</I>&nbsp;<I>L</I>&nbsp;<I>N</I>&nbsp;<I>T</I></SPAN>

<P>
<SPAN CLASS="MATH"><I>W</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN> are positive integers representing the width (<SPAN CLASS="MATH"><I>x</I></SPAN> dimension) and length (<SPAN CLASS="MATH"><I>y</I></SPAN> dimension)
    of the yard. <SPAN CLASS="MATH"><I>N</I></SPAN> is the non-negative number of terriers. <SPAN CLASS="MATH"><I>T</I></SPAN> is the positive number of time
    intervals over which we have conducted observations.

<P>
</LI>
<LI>The remainder of the observation set contains one line per terrier. Each line contains <SPAN CLASS="MATH">2<I>T</I></SPAN>
    integers denoting the <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates of the terrier at each of the <SPAN CLASS="MATH"><I>T</I></SPAN> time steps, expressed
    separated by whitespace without parentheses or commas. Possible coordinates range from
    (0, 0) in one corner of the yard to <SPAN CLASS="MATH">(<I>W</I>, <I>L</I>)</SPAN> at the opposite corner.
</LI>
</UL>

<P>
The end of input is signaled by a line containing 4 zeros in place of a valid <!-- MATH
 $(W, L, N, T)$
 -->
<SPAN CLASS="MATH">(<I>W</I>, <I>L</I>, <I>N</I>, <I>T</I>)</SPAN> set.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each observation set, your program should print a line `<TT>Observation Set</TT>' followed by the
integer number of the set (starting at 1).

<P>
If there is at least one possible location for the mole, then, beginning on the next line, print all
the possible locations of the mole as <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> pairs, 8 pairs per output line (except possibly fewer for
the final line of output for the set). There should be no leading blanks before the first pair on a line
nor trailing blanks after the final pair on the line, but successive pairs on the same line should be
separated by exactly one blank. A pair is printed in the format `<TT>(<SPAN CLASS="MATH"><I>x</I></SPAN>,<SPAN CLASS="MATH"><I>y</I></SPAN>)</TT>' with no internal blanks.
Pairs should be printed in an order such that pairs with lower values of <SPAN CLASS="MATH"><I>y</I></SPAN> come before any pairs with higher
values of <SPAN CLASS="MATH"><I>y</I></SPAN> and, for pairs with the same <SPAN CLASS="MATH"><I>y</I></SPAN> value, pairs with lower values of <SPAN CLASS="MATH"><I>x</I></SPAN> come
before pairs with higher values of <SPAN CLASS="MATH"><I>x</I></SPAN>.

<P>
If there are no possible locations for the mole, then the second line of output for the observation
set will consist of the message `<TT>No possible locations</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 4 2 3
1 1  1 2  1 3
0 1  0 2  0 3
6 2 2 4
3 0  3 1  4 1  4 0
3 1  3 1  4 1  3 1
0 0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Observation Set 1
No possible locations
Observation Set 2
(0,0) (1,0) (2,0) (6,0) (0,1) (1,1) (5,1) (6,1)
(0,2) (1,2) (2,2) (4,2) (5,2) (6,2)
</PRE>

<P>

<P><P>
<BR>

<B>Note:</B>  The sample input set may be visualized as:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3111.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3111.jpg
 ALT="\epsfbox{p3111.eps}">
</DIV>

<P>

______________________________________________________
3112||||||false||||||
<P>An architect is very proud of his new home and wants to be sure it can be seen by people passing by his property line along the street. The property contains various trees, shrubs, hedges, and other obstructions that may block the view. For the purpose of this problem, model the house, property line, and obstructions as straight lines parallel to the <SPAN CLASS="MATH"><I>x</I></SPAN> axis:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3112.jpg ALT="\epsfbox{p3112.eps}"></DIV><P>To satisfy the architect's need to know how visible the house is, you must write a program that accepts as input the locations of the house, property line, and surrounding obstructions and calculates the longest continuous portion of the property line from which the entire house can be seen, with no part blocked by any obstruction.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Because each object is a line, it is represented in the input file with a left and right <SPAN CLASS="MATH"><I>x</I></SPAN> coordinate followed by a single <SPAN CLASS="MATH"><I>y</I></SPAN> coordinate:<P><P><BR><SPAN CLASS="MATH"><I>x</I>1&nbsp;<I>x</I>2&nbsp;<I>y</I></SPAN><P><P><BR>where <SPAN CLASS="MATH"><I>x</I>1</SPAN>, <SPAN CLASS="MATH"><I>x</I>2</SPAN>, and <SPAN CLASS="MATH"><I>y</I></SPAN> are non-negative real numbers. <SPAN CLASS="MATH"><I>x</I>1 &lt; <I>x</I>2</SPAN><P>An input file can describe the architecture and landscape of multiple houses. For each house, the first line will have the coordinates of the house. The second line will contain the coordinates of the property line. The third line will have a single integer that represents the number of obstructions, and the following lines will have the coordinates of the obstructions, one per line.<P>Following the final house, a line `<TT>0 0 0</TT>' will end the file.<P>For each house, the house will be above the property line ( <SPAN CLASS="MATH"><I>house</I>&nbsp;<I>y</I> &gt; <I>property</I>&nbsp;<I>line</I>&nbsp;<I>y</I></SPAN>). No obstruction will overlap with the house or property line, e.g. if <SPAN CLASS="MATH"><I>obstacle</I>&nbsp;<I>y</I> = <I>house</I>&nbsp;<I>y</I></SPAN>, you are guaranteed the entire range <SPAN CLASS="MATH"><I>obstacle</I>[<I>x</I>1, <I>x</I>2]</SPAN> does not intersect with <SPAN CLASS="MATH"><I>house</I>[<I>x</I>1, <I>x</I>2]</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each house, your program should print a line containing the length of the longest continuous segment of the property line from which the entire house can be to a precision of 2 decimal places. If there is no section of the property line where the entire house can be seen, print `<TT>No View</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 6 6
0 15 0
3
1 2 1
3 4 1
12 13 1
1 5 5
0 10 0
1
0 15 1
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8.80
No View
</PRE><P>
______________________________________________________
3113||||||false||||||
<P>You are the owner of SmallCableCo and have purchased the franchise rights for a small town. Unfortunately, you lack enough funds to start your business properly and are relying on parts you have found in an old warehouse you bought. Among your finds is a single spool of cable and a lot of connectors. You want to figure out whether you have enough cable to connect every house in town. You have a map of town with the distances for all the paths you may use to run your cable between the houses. You want to calculate the shortest length of cable you must have to connect all of the houses together.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input file consists on several towns. For each town:<P><UL><LI>The first line gives the length of cable on the spool as a real number. </LI><LI>The second line contains the number of houses, <SPAN CLASS="MATH"><I>N</I></SPAN> </LI><LI>The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines give the name of each house's owner. Each name consists of up to 20 characters {<TT>a</TT>-<TT>z</TT>,<TT>A</TT>-<TT>Z</TT>,<TT>0</TT>-<TT>9</TT>} and contains no whitespace or punctuation. </LI><LI>Next line: <SPAN CLASS="MATH"><I>M</I></SPAN>, number of paths between houses </LI><LI>next <SPAN CLASS="MATH"><I>M</I></SPAN> lines in the form<P><P><BR><!-- MATH
 $<house \ name \ A> \ <house \ name \ B> \ <distance>$
 --><SPAN CLASS="MATH">&lt; <I>house</I>&nbsp;<I>name</I>&nbsp;<I>A</I> &gt; &nbsp; &lt; <I>house</I>&nbsp;<I>name</I>&nbsp;<I>B</I> &gt; &nbsp; &lt; <I>distance</I> &gt;</SPAN><P><P><BR>Where the two house names match two different names in the list above and the distance is a positive real number. There will not be two paths between the same pair of houses. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output will consist of a single line for each town. If there is not enough cable to connect all of the houses in the town, output<P><P><BR><TT>Not enough cable</TT><P><P><BR>If there is enough cable, then output<P><P><BR><TT>Need <SPAN CLASS="MATH"><I>X</I></SPAN> miles of cable</TT><P><P><BR>Print <SPAN CLASS="MATH"><I>X</I></SPAN> to the nearest tenth of a mile (0.1).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100.0
4
Jones
Smiths
Howards
Wangs
5
Jones Smiths 2.0
Jones Howards 4.2
Jones Wangs 6.7
Howards Wangs 4.0
Smiths Wangs 10.0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Need 10.2 miles of cable
</PRE><P>
______________________________________________________
3114||||||false||||||
<P>A friend of mine has an unusual method of driving around the city, which he says helps reduce the number of routes he must memorize in order to not get lost. He picks two locations as hubs (<SPAN CLASS="MATH"><I>H</I>1</SPAN> and <SPAN CLASS="MATH"><I>H</I>2</SPAN>), assigns all other locations to either <SPAN CLASS="MATH"><I>H</I>1</SPAN> or <SPAN CLASS="MATH"><I>H</I>2</SPAN>, and then learns the shortest path from all locations to and from their associated hub. If he then wishes to travel from <SPAN CLASS="MATH"><I>A</I></SPAN> to <SPAN CLASS="MATH"><I>B</I></SPAN>, he goes from <SPAN CLASS="MATH"><I>A</I></SPAN> to the hub associated with <SPAN CLASS="MATH"><I>A</I></SPAN>, then to the hub associated with <SPAN CLASS="MATH"><I>B</I></SPAN> (if <SPAN CLASS="MATH"><I>B</I></SPAN> is associated with the other hub than <SPAN CLASS="MATH"><I>A</I></SPAN>), then to <SPAN CLASS="MATH"><I>B</I></SPAN>. My friend always travels to the hubs, even if that means that he visits his destination two or three times.<P>Your program should analyze a city (a set of nodes and edge lengths) and pick the best pair of hubs and assignment of nodes to hubs. The best configuration will be the configuration that mini- mizes the average distance of the trips between all pairs of nodes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases.<P>The input for each test case starts with a single line<P><P><BR><SPAN CLASS="MATH"><I>n</I>&nbsp;<I>m</I></SPAN><P><P><BR><SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3114img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3114img1.png ALT="$ \le$">50</SPAN> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3114img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3114img1.png ALT="$ \le$">1000</SPAN>. <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of locations in the city and <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of road segments that directly connect two locations in the city. There may be more than one road segment between a pair of locations, and a road segment may start and end at the same location.<P>Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines will describe the road segment between two locations and will contain three integers<P><P><BR><SPAN CLASS="MATH"><I>a</I>&nbsp;<I>b</I>&nbsp;<I>d</I></SPAN><P><P><BR><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3114img1.png ALT="$ \le$"><I>a</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3114img1.png ALT="$ \le$"><I>n</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3114img1.png ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3114img1.png ALT="$ \le$"><I>n</I></SPAN>, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3114img1.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3114img1.png ALT="$ \le$">1000</SPAN>. <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are locations that describe the ends of the road segment and <SPAN CLASS="MATH"><I>d</I></SPAN> is the distance required to travel from <SPAN CLASS="MATH"><I>a</I></SPAN> to <SPAN CLASS="MATH"><I>b</I></SPAN> (or <SPAN CLASS="MATH"><I>b</I></SPAN> to <SPAN CLASS="MATH"><I>a</I></SPAN>) along the road segment. There are no one-way roads.<P>There will always exist a path between any two locations along the given road segments.<p>Input will be finished by a test case with n=m=0. That test case shouldn't be procesed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output an optimal choice of hubs and assignment of locations to hubs by outputting a line containing <SPAN CLASS="MATH"><I>n</I></SPAN> integers, separated by spaces. If the <SPAN CLASS="MATH"><I>i</I></SPAN>-th location is a hub, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th integer should be zero. If the <SPAN CLASS="MATH"><I>i</I></SPAN>-th location is not a hub, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th integer should give the number of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th location's hub (1 to <SPAN CLASS="MATH"><I>n</I></SPAN> inclusive).<p>If more than one configuration yields the lowest average, print any of them.<p><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2
1 2 40
2 3 20
7 10
1 1 1
1 2 2
2 4 2
4 3 2
3 1 2
2 3 5
3 7 10
7 6 1
5 6 1
4 5 1
16 15
1 8 1
2 8 1
3 8 1
4 9 1
5 9 1
6 9 1
7 8 1
8 9 3
9 10 1
8 11 1
8 12 1
8 13 1
9 14 1
9 15 1
9 16 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 0 2
4 4 4 0 0 5 5
8 8 8 9 9 9 8 0 0 9 8 8 8 9 9 9
</PRE><P><P><P><BR><B>Note:</B> for the first test case, `<TT>2 0 0</TT>' is also a valid output.<P>
______________________________________________________
3115||||||false||||||

<P>
After bouncing 10 checks last month, you feel compelled to do something about your financial
management. Your bank has started providing you with your statement online, and you believe
that this is the opportunity to get your account in order by making sure you have the money to
cover the checks you write.

<P>
Your bank provides you with a monthly statement that lists your starting balance, each trans-
action, and final balance. Your task is to compare the statement with the transactions from your
checkbook register over the same time interval. You will identify transactions that appear in only
the statement or register, as well as incorrect amounts recorded in the register (naturally the bank's
statement is always correct) and math mistakes in your register.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of several datasets. In each of them,
the bank statement appears first. It begins and ends with lines of the form:

<P>

<P>
<BR>

<TT>balance <SPAN CLASS="MATH"><I>X</I></SPAN></TT>

<P>

<P>
<BR>
with the first line indicating the starting balance and the second line indicating the final balance.

<P>
In between the balances is the list of transactions, one per line, in the form:

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH">{</SPAN>check<SPAN CLASS="MATH">|</SPAN>deposit<SPAN CLASS="MATH">}</SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH"><I>X</I></SPAN></TT>

<P>

<P>
<BR>
Where <SPAN CLASS="MATH"><I>N</I></SPAN> is the integer check or deposit number (the same check or deposit number will only
appear once, although the same number can apply to both a check and deposit), and <SPAN CLASS="MATH"><I>X</I></SPAN> is the
amount of the transaction.

<P>
Following the final balance the register entries appear. The first line of the register is the starting balance

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>X</I></SPAN>

<P>

<P>
<BR>
Following are pairs of lines, with the next transaction appearing followed by the balance you
calculated by hand after entering the transaction.

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH">{</SPAN>check<SPAN CLASS="MATH">|</SPAN>deposit<SPAN CLASS="MATH">}</SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH"><I>X</I></SPAN></TT>

<P>

<SPAN CLASS="MATH"><I>X</I></SPAN>

<P>

<P>
<BR>
The pairs repeat until the end of the dataset. Datasets will be separated by a blank line.

<P>
For all input numbers and intermediates, <!-- MATH
 $|X| < 1000000$
 -->
<SPAN CLASS="MATH">| <I>X</I>| &lt; 1000000</SPAN>. All dollar amounts are given to the
penny (0.01).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For ease correcting your register, the output for each transaction occurs in the order it appears in
the register. Each register entry receives exactly one line in the output.

<P>
If the register entry is entirely correct, meaning that it is found in the statement for the same
amount, the math in the register is correct, and it is not a duplicate entry for a transaction previously
found in the register, then output the line

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH">{</SPAN>check<SPAN CLASS="MATH">|</SPAN>deposit<SPAN CLASS="MATH">}</SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN> is correct</TT>

<P>
However, if the transaction is not entirely correct, you will output a single line beginning with the
transaction type and number, and one or more of the following mistakes, whitespace separated, in this order:

<P>

<UL>
<LI><SPAN  CLASS="textbf">is not in statement</SPAN> the transaction type and number do not occur in the statement
</LI>
<LI><SPAN  CLASS="textbf">repeated transaction</SPAN> the transaction has occurred previously in the register
</LI>
<LI><SPAN  CLASS="textbf">incorrect amount</SPAN> the register amount is different than the statement amount
</LI>
<LI><SPAN  CLASS="textbf">math uses correct value</SPAN> the math uses the value from the statement, although the actual transaction
amount is recorded incorrectly in the register. This can only appear if <SPAN  CLASS="textbf">incorrect amount</SPAN> is also displayed.
</LI>
<LI><SPAN  CLASS="textbf">math mistake</SPAN> the register balance after the transaction matches neither the statement amount for the
transaction, nor the register entry for the transaction (if different than the statement
      amount)
</LI>
</UL>

<P>
Following the line for the final entry in the register, a listing of all transactions missing from
the register will be printed. These items may be printed in any order, one per line:

<P>

<P>
<BR>

<TT>missed <SPAN CLASS="MATH">{</SPAN>check<SPAN CLASS="MATH">|</SPAN>deposit<SPAN CLASS="MATH">}</SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN></TT>

<P>Print a blank line between datasets.
<p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
balance 1000.00
check 100 10.00
check 101 20.00
check 102 30.00
check 103 100.00
deposit 1 10.00
deposit 2 20.00
deposit 3 30.00
deposit 4 500.00
balance 1400.00
1000.00
check 100 10.00
990.00
deposit 2 25.00
1015.00
check 101 20.00
990.00
check 102 30.00
960.00
check 101 21.00
940.00
check 103 100.00
840.00
deposit 3 30.00
870.00
deposit 4 500.00
1370.00
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
check 100 is correct
deposit 2 incorrect amount
check 101 math mistake
check 102 is correct
check 101 repeated transaction incorrect amount math uses correct value
check 103 is correct
deposit 3 is correct
deposit 4 is correct
missed deposit 1
</PRE>

<P>

______________________________________________________
3116||||||false||||||

<P>
Jim Hikerlink enjoys a good walk around his hometown of Browserville.
Browserville consists of several intersections connected by roads of varying
length.  Jim wants to take the longest walk possible but does not want to visit an
intersection twice.  He doesn't care what intersection he starts at or ends at, but
the start and finish are visits to these intersections; therefore, Jim's path can't be
a closed loop (because the starting intersection would be visited twice).

<P>
Intersections in Browserville are either not connected by a road, or are connected
by a single road.  There will never be more than one road connecting two
intersections, and no road runs in a loop (i.e. from an intersection to itself).
There are both one-way and two-way roads in Browserville. Jim, being a law-
abiding citizen, obeys all one-way signs.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input data to your program, that describes the roads in Browserville, begins
with a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> on a line.  This integer indicates how many intersections
are in the town.  The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines of input, each contain <SPAN CLASS="MATH"><I>n</I></SPAN> non-negative integers
each. The numbers on line <SPAN CLASS="MATH"><I>i</I></SPAN> indicate the length of the roads from intersection <SPAN CLASS="MATH"><I>i</I></SPAN>
to each intersection (including itself).  A length of 0 indicates no road (or a road
going the wrong way).  The lengths are listed in order by intersection (i.e., the
length of the road to intersection 1 is listed first, followed by the length of the road
to intersection 2 ...followed by the length of the road to intersection <SPAN CLASS="MATH"><I>n</I></SPAN>).

<P>

<P>
<BR>
For example, the town:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3116.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3116.jpg
 ALT="\epsfbox{p3116.eps}">
</DIV>

<P>
Would be represented as:

<P>
<PRE>
3
0 2 1
0 0 0
0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program will produce as output the length of the longest path, and one valid
path of that length.  The output that would be produced for the input data above
would be:

<P>

<P>
<BR>

<TT>The longest path has length 2 <BR>
Such a path is 1 2</TT>

<P>

<P>
<BR>
If there is no path at all, the output should be:

<P>

<P>
<BR>

<TT>The longest path has length 0</TT>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
0 2 1
0 0 0
0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
The longest path has length 2
Such a path is 1 2
</PRE>

<P>

______________________________________________________
3117||||||false||||||
<P>Sichuan MahJong is played on a rectangular grid where pairs of equal tiles are placed, at most one tile per cell. There can be several pairs of the same kind of tile. Each move is to remove one pair of equal tiles. The game is over if there are no more tiles on the grid or if there are no more possible moves.<P>A pair of equal tiles can be removed if they are connected by up to three straight lines (parallel to the grid); but you may not move across other tiles (i.e., the path between the pair of tiles must be empty). The path need not be completely in the grid.<P>The grid can be represented by a sequence of lines of equal length, which contain letters for tiles and blanks for empty cells. A grid consisting of 3 rows and 6 columns is shown below:<P><PRE>
AA D T
E EXD
FX yFT
</PRE><P>A move can be represented as a sequence of four positive integers: row and column of the first tile and row and column of the second tile of a pair; row 1 is at the top, and column 1 is at the left. Given the grid above, the move<P><PRE>
1 1 1 2
</PRE><P>would remove the two tiles labeled `<TT>A</TT>' in the upper left hand area of the grid which are connected by a single horizontal line. The move<P><PRE>
1 4 2 5
</PRE><P>would remove the two tiles labeled `<TT>D</TT>' in the upper right hand corner of the grid which are connected by a horizontal and then a vertical line. The move<P><PRE>
3 1 3 5
</PRE><P>would remove the two tiles labeled `<TT>F</TT>' in the last row of the grid. Three lines connect the `<TT>F</TT>' tiles; two extend vertically out of the bottom of the grid, and one runs horizontally along the bottom outside the grid. Finally, the move<P><PRE>
2 4 3 2
</PRE><P>is not valid. There are at least three paths connecting these tiles (two paths of length two, and one path of length three that goes outside the grid), but none of these paths are empty (one is blocked by `<TT>E</TT>' and the other two by `<TT>y</TT>').<P>These rules seem to overwhelm some players. Therefore, you are asked to write a program to help play the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input to your program will contain a single positive integer that specifies the number of rows in the grid.<P>Your program will then read a grid, represented as described above. The first line after the grid will contain a single nonnegative integer that gives the number of moves. The remaining lines contain the moves, as described above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program will then execute the moves, in the order given. If your program decides that a move is not legal, it should print the following message, and terminate immediately without producing any additional output:<P><P><BR><TT>Move <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB>&nbsp;<I>C</I><SUB>1</SUB>&nbsp;<I>R</I><SUB>2</SUB>&nbsp;<I>C</I><SUB>2</SUB></SPAN> is illegal</TT><P><P><BR>After executing all of the moves, your program will print out one line with the number of tiles remaining on the grid. If there are tiles left on the grid your program will print a list of possible single moves that can be made on the resulting grid, one per line. These moves are not cumulative (i.e., each move is independent of the others) and they need not complete the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
AA D T
E EXD
FX yFT
4
1 1 1 2
1 4 2 5
3 1 3 5
2 4 3 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5
1 6 3 6
2 1 2 3
</PRE><P>
______________________________________________________
3118||||||false||||||
<P>Wolf and Sheep is played on the black squares of a chessboard (row 0 is at the top, column 0 is at the left). The sheep start in row 0 as shown below:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3118.jpg ALT="\epsfbox{p3118.eps}"></DIV><P>There are four sheep on one side and one wolf somewhere on the opposite side. A move is on a diagonal, from a black square to a diagonally adjacent square. In each round, the wolf moves, forward or backward, and then one sheep moves, only forward. The sheep win if they can immobilize the wolf (i.e., the wolf can no longer move), the wolf wins if it reaches the sheep's original side. The wolf moves first.<P>You are to write a program that moves the sheep. Your program will be judged correct if immobilizes the wolf before it reaches the sheep's original side of the board. Your program will write either ``<TT>Sheep won</TT>" or ``<TT>Wolf won</TT>" to standard error depending on whether or not the wolf was immobilized, and then terminate.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will start by reading one line of input containing two positive numbers separated by a single blank: the row and column of the wolf's first move. The wolf can start anywhere in row 7; therefore, this first line of input contains 6 and any odd column number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program will now move one of the sheep. When your program takes a turn, it has to write one line of output containing three positive numbers separated by single blanks and terminated by a <SPAN CLASS="textit">linefeed</SPAN>: the number of a sheep (0 to 3) and the row and column to which this sheep moves; for the sheep's first move this will be row 1 and the appropriate even-numbered column. Your program must flush the output stream after every move.<P><P><BR>After moving one of the sheep, your program will read another line of input (using
the same format as before) representing the wolf's next move.  The program will
repeat this cycle until it terminates.

<P>

<P>
<BR>

 <SPAN  CLASS="textbf">Your program is not allowed to peek at even a single byte beyond the
linefeed terminating this line.</SPAN>

<P>

<P><P>
<BR>
We have provided a graphical user interface that you can use to execute your
program.  You execute this program as follows:

<P>

<P>
<BR>
<PRE>
java -jar ~/was.jar command-line-for-your-program
</PRE>

<P>

______________________________________________________
3119||||||false||||||

<P>
Arnie's bakery is the leading producer of gourmet dog treats in the world.  To
comply with FDA requirements, Arnie etches the current date on each treat he
produces.  The date is etched using the format <SPAN  CLASS="textit">YYYYMMDD</SPAN>, where <SPAN  CLASS="textit">YYYY</SPAN>
represents the year, <SPAN  CLASS="textit">MM</SPAN> represents the month, and <SPAN  CLASS="textit">DD</SPAN> represents the date
(these values are padded with zeros if necessary).  Arnie is very particular about
the work that he does, and takes his time making treats, and as a result he only
produces one treat a day.

<P>
The IRS has been after Arnie for some time, and this year they have decided to
audit him.  After working with the auditor for several days, the only remaining
bone of contention is the writeoff that Arnie claims for etching the date on his
products.  In order to satisfy the auditor, and get back to work, Arnie must
determine the number of each of the digits he engraved in his treats during a
specific period of time.

<P>
For example, during the period 11/01/2004 through 11/02/2004 Arnie produced
two treats and etched a total of 6 zeros, 5 ones, 3 twos, and 2 fours.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to your program will consist of two lines, each containing a date
formatted as

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH"><I>MM</I></SPAN>/<SPAN CLASS="MATH"><I>DD</I></SPAN>/<SPAN CLASS="MATH"><I>YYYY</I></SPAN></TT>

<P>

<P>
<BR>
The first line specifies the start of the period, and
the second the end of the period (inclusive).  You may assume that the first date
occurs before or on the second and that the year in both dates is greater than or
equal to 1920.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program will produce as output a list that contains two
columns.  The first column contains the digits 0 to 9, in ascending order.  The
second column contains the number of times the corresponding digit appeared.
Note that Arnie enjoys his free time (he likes to take his humans on long walks in
the woods) and therefore does not work on Saturdays and Sundays.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10/31/2004
11/02/2004
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 6
1 5
2 3
3 0
4 2
5 0
6 0
7 0
8 0
9 0
</PRE>

<P>

______________________________________________________
3120||||||false||||||
<P>Harry is trying to escape from a castle that is inhabited by a number of Dementors. If the Dementors are able to combine their powers they will be able to suck out Harry's soul, leaving him an empty shell, alive but completely, and irretrievably ``gone".<P>The Dementors combine their powers by forming a network. When two Dementors can see each other in a hallway, they form a network and combine their powers. If any one of these Dementors can see another Dementor (i.e., they are already a member of another network), the networks are combined to form a larger, and even more powerful, network. While Harry is trying to escape from the castle, the Dementors move to create a network that contains every Dementor in the castle. If any Dementor in the final network can see Harry, the Dementors are able to overpower him.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Harry has outsourced his escape plan to you. A rectangular grid will be used to represent the castle that Harry is in. Each cell is either empty (a blank), contains Harry (<TT>H</TT>), contains a Dementor (a lowercase letter), or is made from stone (<TT>#</TT>). Your program will first read a line with a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of rows of the mansion's floor plan. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain the floor plan as strings of equal length, for example:<P><PRE>
6
#######
#
# #a#
#H# #
##b #
#######
</PRE><P>Harry escapes from the castle if he can get to any unoccupied cell on any edge of the grid. In this example Harry can escape in seven moves and there are two Dementors sitting in the middle of the mansion. There can be more then one exit from the castle.<P>On each turn, first Harry and then one Dementor take a single step in one of the four compass directions (N E W S). For example, the move:<P><PRE>
H N a N
</PRE><P>results in the following situation:<P><PRE>
#######
#  a
#H# #
# # #
##b #
#######
</PRE><P>Nobody in the castle (Harry or any of the Dementors) can move through walls or squeeze through diagonal cracks. However, Harry and a Dementor can occupy the same cell (as long as the Dementors have not finished forming their network). The following move:<P><PRE>
H N b E
</PRE><P>places Harry within five steps of the exit:<P><PRE>
#######
#H a
# # #
# # #
## b#
#######
</PRE><P>However, Harry is in big trouble. The Dementors have completed their network (i.e., they have formed a connected graph whose edges only travel along the hallways) and Dementor a can see Harry, which means Harry is doomed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Outptut</A>&nbsp;</FONT></H2><P>Your program, after reading the initial grid, will determine whether or not Harry can escape from the castle given any possible sequence of moves made by the Dementors. If Harry cannot escape from the castle, your program will print the message:<P><PRE>
There is no escape
</PRE><P>If there is an escape, your program must output Harry's moves to freedom. You will print Harry's moves as a single string consisting of the letters, <TT>N</TT>, <TT>E</TT>, <TT>W</TT>, or <TT>S</TT>, that when executed in the order specified show how Harry escapes from the castle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9
#######
      #
# ### #
# #a  #
# ### #
#  H# #
# ###
##b   #
#######
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
WWNNNNW
</PRE><P>
______________________________________________________
3121||||||false||||||
<P>You are required to write an interpreter to evaluate a program as described below. A program consists of an ordered list of zero or more abbreviations, a period, and one final computation. An abbreviation consists of an identifier (key) followed by a computation (value) followed by a period. White space is completely ignored; identifiers are single letters or single digits. A computation has one of the following three forms:<P><P><BR><SPAN CLASS="MATH"><I>identifier</I></SPAN><P><TT>:</TT> <SPAN CLASS="MATH"><I>identifier</I></SPAN> <SPAN CLASS="MATH"><I>computation</I></SPAN><P><TT>!</TT> <SPAN CLASS="MATH"><I>computation</I></SPAN> <SPAN CLASS="MATH"><I>computation</I></SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Here is an example of a program:<P><PRE>
T : x : y x .
I : c : t : e ! ! c t e .
.
! ! ! I T a b
</PRE><P>Your interpreter would evaluate this to <TT>a</TT>.<P><P><BR>Evaluation of a program is concerned with the final computation and has two phases, expansion, and simplification.<P><DL><DT><STRONG>Expansion:</STRONG></DT><DD>Look at each identifier in the final computation. If the identifier is a key in an abbreviation, replace the identifier in the final computation by the value from the abbreviation. This will result in a longer final computation; start over and expand the new final computation. We guarantee that there will not be cyclic references in the abbreviations.<P></DD><DT><STRONG>Simplification:</STRONG></DT><DD>You can only repeatedly and top-down simplify the following situation:<P><PRE>
! : i a b
</PRE><P>where i is an identifier and a and b are computations. Simplification consists of replacing declared occurrences of <TT>i</TT> in <TT>a</TT> by <TT>b</TT>. Such a declared occurrence is any <TT>i</TT> in <TT>a</TT> which does not occur inside a computation of the form<P><PRE>
: i x
</PRE><P>which itself is a computation contained in a and where <TT>x</TT> is another computation.</DD></DL><P><P><BR>As an example, here is how the program above would be interpreted. Expansion produces<P><PRE>
!
 !
  !:c
     :t
       :e
         !
          ! c t
          e
   :x
     :y x
  a
 b
</PRE><P>The first simplification replaces <TT>c</TT> and produces<P><PRE>
!
 !
  :t
    :e
      !
       !:x
          :y x
        t
       e
  a
 b
</PRE><P>The second simplification replaces <TT>t</TT> and produces<P><PRE>
!:e
   !
    !:x
       :y x
     a
    e
 b
</PRE><P>The third simplification replaces <TT>e</TT> and produces<P><PRE>
!
 !:x
    :y x
  a
 b
</PRE><P>The fourth simplification replaces <TT>x</TT> and produces<P><PRE>
!:y a
 b
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The last simplification replaces <TT>y</TT> and produces the correct output<P><PRE>
a
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
T : x : y x .
I : c : t : e ! ! c t e .
.
! ! ! I T a b
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
a
</PRE><P>
______________________________________________________
3122||||||false||||||
<P>Since the formation of the Intergalactic Nation of Solar Systems (INS), citizens of the various planets in the nation have to apply for an intergalactic driver's license in order to operate a vehicle on a planet. These licenses are valid from the date the application is submitted until the end of the driver's next birthday on the planet the license is issued for; relative to a planet, birthdays repeat once a year. Calculating an expiration date is complicated by the fact that different planets have days of different length and different calendars and everything is calculated as precisely as possible.<P>In an attempt to make interplanetary travel easier, the INS passed a law that standardized the way in which all of the planets in the nation denote a day and time. Time is measured by counting the number of standard time units (STU) that have passed since the start of a day. The length of a STU is the same on every planet - however, the number of STUs in a day may vary from planet to planet. The length of a STU was carefully selected so that the number of STUs in a day, on any planet, is always a positive integer. INS timestamps are written in the following format: <TT><SPAN CLASS="MATH"><I>year</I></SPAN>/<SPAN CLASS="MATH"><I>month</I></SPAN>/<SPAN CLASS="MATH"><I>day</I></SPAN>+<SPAN CLASS="MATH"><I>stu</I></SPAN></TT>. After the passage of this law, the time on all planets was set to 0/0/0+0. Years, months, and days start at 0.<P><P><BR>The INS also passed a law that standardized calendars. The law eliminated leap years and specified that a planetary calendar be represented by a series of positive integers, separated by blanks, on a single line. The first number in the calendar specifies the number of STUs in a single day on that planet. The remaining numbers on the line define the number of days in each month on the planet (note that the number of these remaining numbers specifies how many months are in a year). The following line specifies the calendar used on the planet Earth:<P><PRE>
86400 31 28 31 30 31 30 31 31 30 31 30 31
</PRE><P>When applying for an intergalactic driver's license, travelers specify three planetary calendars: the calendar for the planet where they were born, the calendar for the planet where they live (their home planet), and the calendar for the planet where they want to operate a vehicle. They then supply two dates: their birth date and the date of the application.<P><P><BR>You are to write a program that computes the expiration date for the license.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The program will read 5 lines of input: the birth planet's calendar, the home planet's calendar, the calendar for the planet where a vehicle is to be operated, the birth date (on the birth planet), and the application date (on the home planet).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program will produce as output a single line that contains the expiration date of the license on the home planet.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1000 10 10
100 200 200
10 3000 3000
0/1/2+3
1/0/5+0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4/0/0+209
</PRE><P>
______________________________________________________
3123||||||false||||||
<P>Continuo, developed by Maureen Hiron, was game of the year 1987 in England. The game is played with a subset of a deck of 42 colored cards (the complete set of cards is attached to this question), which are placed faced-up on a playing surface. The objective is to arrange the cards so that each card touches at least one other card and forms at least one uni-colored band into each card that it touches. A card can be rotated; however, it may not overlap another card. The objective of the game is to build long uni-colored bands. The game is scored by counting the total number of cells in all of the bands that involve two or more cards.<P><P><BR>For example, here cards 26 and 19 have been arranged to form two bands:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3123a.jpg ALT="\epsfbox{p3123a.eps}"></DIV><P>The value of the cards in the example above would be ten, four cells for red, and six cells for blue. The only bands that are included in the count are the ones that span across two (or more) cards.<P>Card 34 could be turned counterclockwise by 90 degrees and added to the example above at the bottom left, resulting in the following configuration:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3123a.jpg ALT="\epsfbox{p3123b.eps}"></DIV><P>The score of these three cards is 23, twelve red, two yellow, and nine blue.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will describe the subset of cards that should be placed. The first line of input will contain a single positive integer n that specifies the number of cards your program will read. The remaining input will specify the cards. Each card is represented by one line of input for each row of cells in the card. Each line will contain a single 4-character string that specifies the color of the cells in the corresponding row of the card. The string will consist of a combination of the characters `<TT>r</TT>', `<TT>g</TT>', `<TT>b</TT>', and `<TT>y</TT>', representing the colors <B>r</B>ed, <B>g</B>reen, <B>b</B>lue, and <B>y</B>ellow respectively.<P><P><BR>For example, card number 26 alone would be represented as:<P><PRE>
1
ybry
bbrr
rrbb
yrby
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program will produce as output the best score that can be achieved with the cards given, where you may not need to use all of them. Your program will print the total number of red, green, blue, and yellow cells in the best score, and an arrangement of the cards that has the best score. You may assume that the display device is capable of displaying all of the characters in the longest line of your output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
ybry
bbrr
rrbb
yrby
rbgr
bbgg
ggbb
rgbr
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Total score:  10 (4 red, 0 green, 6 blue, 0 yellow)

ybry
bbrrrbgr
rrbbbbgg
yrbyggbb
    rgbr
</PRE><P>
______________________________________________________
3124||||||false||||||
<P>In any language, certain combinations of letters do not appear (or at least appear so seldom
that they can be considered non-existent). For instance, there are no English words contain-ing
the three letter combination buv as a substring. Given a list of letter combinations that do
not exist, the number of possible words in a language can be reduced a lot (a word here
means any combination of letters that doesnt contain any of the given letter combinations
as a substring). If we order all such words by increasing length, ordering words of the same
length alphabetically, we can enumerate them starting from 1. Assume that the alphabet
always consists of the lower case letters a to z.

<p>For instance, if the list only contains the combinations q, ab and aaa, the words would be
enumerated like this:

<blockquote>
<pre>
  1.  a
  2.  b
   <img src=p3124a.gif>
 16.  p
 17.  r
   <img src=p3124a.gif>
 26.  aa
 27.  ac
   <img src=p3124a.gif>
649.  zz
650.  aac
</pre>
</blockquote>

<p>Given the list of letter combinations, write a program that for a given word outputs its
number, and for a given number ouputs its word. You can assume that none of the words
will exceed 20 characters and no number will be greater than 2 000 000 000 (for both input
and output).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input will contain several test cases. The number of test cases T appears on a line by
itself. Then follow T test cases. Each test case starts with a line containing two integers,
N (the number of letter combinations, non-negative, at most 1 000) and M (the number of
queries for this list, positive, at most 100). Then follow N lines, each containing a lower
case letter combination (between 1 and 3 letters, inclusive). After that follow M lines, each
containing either a positive integer or a lower case word. If its a word, it will not contain
any of the combinations of letters in the list for this test case. If its a number, it will not be
greater than the number of words in the language.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each query, output a single line containing either the words corresponding number, or
the numbers corresponding word.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
3 4
q
ab
aaa
16
r
27
aac
7 2
a
b
c
d
ef
ghi
ijk
102345678
ksvfuw
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
p
17
ac
650
xexgun
39174383
</PRE>

<P>

______________________________________________________
3125||||||false||||||
<P>A company (name withheld) has an office building in the center of Lund. The building has
a perfectly square roof with a number of hatches. Because of a series of burglaries where
the perpetrators have entered through these hatches, it was decided to use a watchdog to
guard the hatches. A particularly vicious but rather stupid breed of dog was chosen, and
unfortunately the dog fell off the roof on its third watch.

<p>A new dog has been procured and it has been decided to attach a leash to its collar and
attach the other end at some point on the roof. However, if the leash is too short the dog
cannot reach all hatches, but if it is too long then the dog will fall off the building again. The
leash has hooks at both ends, so no part of it is used to tie knots. The company wants the dog
to reach the center of each hatch (the dog can reach exactly as far as the leash could reach
if it were lying flat on the roof), but it does not want the leash to extend beyond the edge
of the roof (to the edge is OK). They hope that by carefully choosing the length of the leash
and where to attach it, the dog will be able to reach all hatches without risking falling off the
building. A leash can only be attached at a point with integer coordinates (if the building
is 10 by 10 meters, then the south-west corner of the building has coordinates (0, 0) and the
north-east corner has coordinates (10, 10)). A leash cannot be attached at a point where there
is a hatch.

<p>If there is no place where you can attach a leash, reach all hatches but not reach beyond
the edge of the roof, it is impossible to use this breed of dog, and the company will instead
use a poodle (which is a less vicious type of dog, but also less prone to falling off buildings).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>On the first line of the input is a single positive integer N, telling the number of test cases to
follow. Each case starts with one line with two integers S H,whereS is even, 2 &le; S &le; 40,
and 1 &le; H &le; 50. S is the side of the square roof in meters and H is the number of hatches.
The following H lines each contain two integers X and Y. These are the coordinates of the
hatches. Hatches will never lie outside the roof or on the roofs perimeter. No two hatches
will occupy the same position

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, output one line containing the coordinates X Yat which to fasten the
leash (if there are several possible points, output the one with smallest X,andifthereare
still several possibilities select the one with smallest Y among those with smallest X) such
that a leash of suitable length allows access to all hatches without extending beyond the edge
of the roof. If there is no such point, output poodle for that test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
10 2
6 6
5 4
20 2
1 1
19 19
10 3
1 1
1 2
1 3
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3 6
poodle
2 2
</PRE>

<P>

______________________________________________________
3126||||||false||||||
<P>Running a taxi station is not all that simple. Apart from the obvious demand for a centralised
coordination of the cabs in order to pick up the customers calling to get a cab as soon as pos-sible,
there is also a need to schedule all the taxi rides which have been booked in advance.
Given a list of all booked taxi rides for the next day, you want to minimise the number of
cabs needed to carry out all of the rides.

<p>For the sake of simplicity, we model a city as a rectangular grid. An address in the city
is denoted by two integers: the street and avenue number. The time needed to get from the
address a, b to c, d by taxi is |a - c| + |b - d| minutes. A cab may carry out a booked ride if it
is its first ride of the day, or if it can get to the source address of the new ride from its latest,
at least one minute before the new rides scheduled departure. Note that some rides may
end after midnight.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>On the first line of the input is a single positive integer N, telling the number of test scenarios
to follow. Each scenario begins with a line containing an integer M,0 &lt; M &lt; 500, being the
number of booked taxi rides. The following M lines contain the rides. Each ride is described
by a departure time on the format hh:mm (ranging from 00:00 to 23:59), two integers a bthat
are the coordinates of the source address and two integers c dthat are the coordinates of the
destination address. All coordinates are at least 0 and strictly smaller than 200. The booked
rides in each scenario are sorted in order of increasing departure time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each scenario, output one line containing the minimum number of cabs required to carry
out all the booked taxi rides.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2
08:00 10 11 9 16
08:07 9 16 10 11
2
08:00 10 11 9 16
08:06 9 16 10 11
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1
2
</PRE>

<P>

______________________________________________________
3127||||||false||||||
<P>Access to high-quality randomness is very important for many applications, especially in
cryptography. Radioactive decay is somtimes used as a source of true randomness, but
this is a fairly slow procedure for getting random numbers. Also, in many applications it is
important that the same random sequence can be produced in two different places. For
these reasons one often uses a pseudo-random sequence instead. A pseudo-random sequence
is a sequence that is, in fact, not random, but very hard to distinguish from a truly random
sequence. A pseudo-random sequence should also be difficult to predict, i.e., given the first
few elements of the sequence it should be difficult do determine some later, yet unseen,
number in the sequence.

<p>The Association of Cryptographic Machinery (ACM) has devised an algorithm for gen-erating
pseudo-random number sequences, but they have no idea how good it really is.
Therefore they want you to test it.

<p>The algorithm to generate a sequence of integers, where each integer is between 0 and
B-1 inclusive, is as follows:

<blockquote>
	1. Start with any number (the seed) in base B. This number can contain hundreds of base
	B digits.<br>
	2. The last digit (least significant) is output as the next element of the sequence.<br>
	3. Create a new number by writing down the sum of all neighbouring digits from left to
	right. E.g., with B = 10, the number 845 would yield the number 129 (since 8 + 4 = 12
	and 4 + 5 = 9).<br>
	4. Repeat steps 2 and 3 as many times as needed, or until the number has only one base
	B digit. You get one more pseudo-random digit between 0 and B -1 each time.
</blockquote>

<p>If we have B = 10 and the seed number is 845, then the next numbers will be 129, 311
(1 + 2 = 3, 2 + 9 = 11), 42 (3 + 1 = 4, 1 + 1 = 2), and 6 (4 + 2 = 6). As 6 is a single digit base
10 number, the algorithm terminates. The pseudo-random digits generated are 5, 9, 1, 2 and
6.

<p>You will be testing the generator as follows. You will be given the first L elements output
by the generator and an integer T &gt; L. You are supposed to decide if the first T elements
are completely determined by the first L elements. To check the robustness of your testing
procedure the ACM have slipped in some impossible sequences, i.e. sequences that cannot be
generated by any initial seed.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>On the first line of the input is a single positive integer N, telling the number of test cases to
follow. The first line of each test case consists of one integer B (2 &le; B &le; 1000), the base. The
second line consists of an integer L (1 &le; L &le; 100), followed by the L first elements of some
sequence (the elements are written in base 10 and are between 0 and B-1 inclusive). The
third line consists of an integer T,(L &lt; T &le; 100 000), the element of the sequence to predict.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case output, on a line of its own:

<blockquote>
	<li>"impossible" if no seed number can produce the given sequence.
	<li>"unpredictable" if there exists a seed number that produces the given sequence but the
	first T elements are not completely determined by the first L elements.
	<li>the T:th element of the sequence in base 10, otherwise.
</blockquote>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
10
5 5 9 6 7 0
7
16
4 11 7 8 4
12
2
5 0 1 1 1 0
10
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
8
unpredictable
impossible
</PRE>

<P>

______________________________________________________
3128||||||false||||||
<P>Adam and Eve play a card game using a regular deck of 52 cards. The rules are simple. The
players sit on opposite sides of a table, facing each other. Each player gets k cards from the
deck and, after looking at them, places the cards face down in a row on the table. Adams
cards are numbered from 1 to k from his left, and Eves cards are numbered 1 to k from her
right (so Eves i:th card is opposite Adams i:th card). The cards are turned face up, and
points are awarded as follows (for each i <img src=p3128a.gif> {1,...,k}):

<blockquote>
	<li>If Adams i:th card beats Eves i:th card, then Adam gets one point.
	<li>If Eves i:th card beats Adams i:th card, then Eve gets one point.
	<li>A card with higher value always beats a card with a lower value: a three beats a two,
	a four beats a three and a two, etc. An ace beats every card except (possibly) another
	ace.
	<li>If the two i:th cards have the same value, then the suit determines who wins: hearts
	beats all other suits, spades beats all suits except hearts, diamond beats only clubs, and
	clubs does not beat any suit.
</blockquote>

<p>For example, the ten of spades beats the ten of diamonds but not the Jack of clubs.

<p>This ought to be a game of chance, but lately Eve is winning most of the time, and the
reason is that she has started to use marked cards. In other words, she knows which cards
Adam has on the table before he turns them face up. Using this information she orders her
own cards so that she gets as many points as possible.

<p>Your task is to, given Adams and Eves cards, determine how many points Eve will get
if she plays optimally.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>There will be several test cases. The first line of input will contain a single positive integer N
giving the number of test cases. After that line follow the test cases.

<p>Each test case starts with a line with a single positive integer k &le; 26 which is the number
of cards each player gets. The next line describes the k cards Adam has placed on the table,
left to right. The next line describes the k cards Eve has (but she has not yet placed them on
the table). A card is described by two characters, the first one being its value (2, 3, 4, 5, 6, 7,
8 ,9, T, J, Q, K, or A), and the second one being its suit (C, D, S, or H). Cards are separated
by white spaces. So if Adams cards are the ten of clubs, the two of hearts, and the Jack of
diamonds, that could be described by the line

<p>TC 2H JD

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case output a single line with the number of points Eve gets if she picks the
optimal way to arrange her cards on the table.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
1
JD
JH
2
5D TC
4C 5H
3
2H 3H 4H
2D 3D 4D
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1
1
2
</PRE>

<P>

______________________________________________________
3129||||||false||||||
<P>John never knew he had a grand-uncle, until he received the notarys letter. He learned that
his late grand-uncle had gathered a lot of money, somewhere in South-America, and that
John was the only inheritor.

<p>John did not need that much money for the moment. But he realized that it would be a
good idea to store this capital in a safe place, and have it grow until he decided to retire. The
bank convinced him that a certain kind of bond was interesting for him.

<p>This kind of bond has a fixed value, and gives a fixed amount of yearly interest, payed
to the owner at the end of each year. The bond has no fixed term. Bonds are available in
different sizes. The larger ones usually give a better interest. Soon John realized that the
optimal set of bonds to buy was not trivial to figure out. Moreover, after a few years his
capital would have grown, and the schedule had to be re-evaluated.

<p>Assume the following bonds are available:

<p align=center><img src=p3129a.gif>

<p>With a capital of &euro;10 000 one could buy two bonds of &euro;4 000, giving a yearly interest of
&euro;800. Buying two bonds of &euro;3 000, and one of &euro;4 000 is a better idea, as it gives a yearly
interest of &euro;900. After two years the capital has grown to &euro;11 800, and it makes sense to sell
a &euro;3 000 one and buy a &euro;4 000 one, so the annual interest grows to &euro;1 050. This is where this
story grows unlikely: the bank does not charge for buying and selling bonds. Next year the
total sum is &euro;12 850, which allows for three times &euro;4 000, giving a yearly interest of &euro;1 200.

<p>Here is your problem: given an amount to begin with, a number of years, and a set of
bonds with their values and interests, find out how big the amount may grow in the given
period, using the best schedule for buying and selling bonds.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The first line contains a single positive integer N which is the number of test cases. The test
cases follow.

<p>The first line of a test case contains two positive integers: the amount to start with (at
most &euro;1 000 000), and the number of years the capital may grow (at most 40).

<p>The following line contains a single number: the number d (1 &le; d &le; 10) of available
bonds.

<p>The next d lines each contain the description of a bond. The description of a bond consists
of two positive integers: the value of the bond, and the yearly interest for that bond. The
value of a bond is always a multiple of &euro;1 000. The interest of a bond is never more than
10% of its value.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, output  on a separate line  the capital at the end of the period, after an
optimal schedule of buying and selling.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
10000 4
2
4000 400
3000 250
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
14050
</PRE>

<P>

______________________________________________________
3130||||||false||||||
<P>The construction of office buildings has become a very standardized task. Pre-fabricated
modules are combined according to the customers needs, shipped from a faraway factory,
and assembled on the construction site. However, there are still some tasks that require
careful planning, one example being the routing of pipes for the heating system.

<p>A modern office building is made up of square modules, one on each floor being a service
module from which (among other things) hot water is pumped out to the other modules
through the heating pipes. Each module (including the service module) will have heating
pipes connecting it to exactly two of its two to four neighboring modules. Thus, the pipes
have to run in a circuit, from the service module, visiting each module exactly once, before
finally returning to the service module. Due to different properties of the modules, having
pipes connecting a pair of adjacent modules comes at different costs. For example, some
modules are separated by thick walls, increasing the cost of laying pipes. Your task is to,
given a description of a floor of an office building, decide the cheapest way to route the
heating pipes.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The first line of input contains a single integer, stating the number of floors to handle. Then
follow n floor descriptions, each beginning on a new line with two integers, 2 &le; r &le; 10
and 2 &le; c &le; 10, defining the size of the floor  r-by-c modules. Beginning on the next line
follows a floor description in ASCII format, in total 2r + 1 rows, each with 2c + 2 characters,
including the final newline. All floors are perfectly rectangular, and will always have an
even number of modules. All interior walls are represented by numeric characters, 0 to 9,
indicating the cost of routing pipes through the wall (see sample input).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, output a single line with the cost of the cheapest route.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
4 3
#######
# 2 3 #
#1#9#1#
# 2 3 #
#1#7#1#
# 5 3 #
#1#9#1#
# 2 3 #
#######
4 4
#########
# 2 3 3 #
#1#9#1#4#
# 2 3 6 #
#1#7#1#5#
# 5 3 1 #
#1#9#1#7#
# 2 3 0 #
#########
2 2
#####
# 1 #
#2#3#
# 4 #
#####
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
28
45
10
</PRE>

<P>

______________________________________________________
3131||||||false||||||
<P>For some years, quite a lot of work has been put into listening to electromagnetic radio sig-nals
received from space, in order to understand what civilizations in distant galaxies might
be trying to tell us. One signal source that has been of particular interest to the scientists at
Universit´ e de Technologie Spatiale is the Nebula Stupidicus.

Recently, it was discovered that if each message is assumed to be transmitted as a se-quence
of integers a<sub>0</sub>, a<sub>1</sub>,...,a<sub>n-1</sub> the function

<p align=center><img src=p3131a.gif>

<p>always evaluates to
values 0 &le; f(k) &le; 26 for 1 &le; k &le; n, provided that the correct value of p is used. n is of course
the length of the transmitted message, and the a<sub>i</sub> denote integers such that 0 &le; a<sub>i</sub> &lt;  p. p is a
prime number that is guaranteed to be larger than n as well as larger than 26. It is, however,
known to never exceed 30 000.

<p>These relationships altogether have been considered too peculiar for being pure coincidences,
which calls for further investigation.

<p>The linguists at the faculty of Langues et Cultures Extraterrestres transcribe these messages
to strings in the English alphabet to make the messages easier to handle while trying to
interpret their meanings. The transcription procedure simply assigns the letters a..z to the
values 1..26 that f(k) might evaluate to, such that 1 = a, 2 = b etc. The value 0 is transcribed
to * (an asterisk). While transcribing messages, the linguists simply loop from k = 1 ton,
and append the character corresponding to the value of f(k) at the end of the string.

<p>The backward transcription procedure, has however, turned out to be too complex for the
linguists to handle by themselves. You are therefore assigned the task of writing a program
that converts a set of strings to their corresponding Extra Terrestial number sequences.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>On the first line of the input there is a single positive integer N, telling the number of test
cases to follow. Each case consists of one line containing the value of p to use during the
transcription of the string, followed by the actual string to be transcribed. The only allowed
characters in the string are the lower case letters a..z and * (asterisk). No string will be
longer than 70 characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each transcribed string, output a line with the corresponding list of integers, separated
by space, with each integer given in the order of ascending values of i.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
31 aaa
37 abc
29 hello*earth
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1 0 0
0 1 0
8 13 9 13 4 27 18 10 12 24 15
</PRE>

<P>

______________________________________________________
3132||||||false||||||
<P>Triangulation of surfaces has applications in the Finite Element Method of solid mechanics. The objective is to estimate the stress and strain on complex objects by partitioning them into small simple objects which are considered incompressible. It is convenient to approximate a plane surface with a simple polygon, i.e., a piecewise-linear, closed curve in the plane on m distinct vertices, which does not intersect itself. A chord is a line segment between two non-adjacent vertices of the polygon which lies entirely inside the polygon, so in particular, the endpoints of the chord are the only points of the chord that touch the boundary of the polygon. A triangulation of the polygon, is any choice of m -3 chords, such that the polygon is divided into triangles. In a triangulation, no two of the chosen chords intersect each other, except at endpoints, and all of the remaining (unchosen) chords cross at least one of the chosen chords. Fortunately, finding an arbitrary triangulation is a fairly easy task, but what if you were asked to find the best triangulation according to some measure?<p align=center><img src=p3132a.gif><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing one positive integer 2 &lt; m &lt; 50, being the number of vertices of the simple polygon. The following m lines contain the vertices of the polygon in the order they appear along the border, going either clockwise or counter clockwise, starting at an arbitrary vertex. Each vertex is described by a pair of integers x y obeying 0 &le; x &le; 10 000 and 0 &le; y &le; 10 000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each scenario, output one line containing the area of the largest triangle in the triangu-lation of the polygon which has the smallest largest triangle. The area should be presented with one fractional decimal digit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1
6
7 0
6 2
9 5
3 5
0 3
1 1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
9.0
</PRE><P>
______________________________________________________
3133||||||false||||||
<P>Nemo is a naughty boy. One day he went into the deep sea all by himself. Unfortunately, he
became lost and couldnt find his way home. Therefore, he sent a signal to his father, Marlin, to
ask for help.

<p>After checking the map, Marlin found that the sea is like a labyrinth with walls and doors. All the
walls are parallel to the X-axis or to the Y-axis. The thickness of the walls are assumed to be zero.
All the doors are opened on the walls and have a length of 1. Marlin cannot go through a wall
unless there is a door on the wall. Because going through a door is dangerous (there may be some
virulent medusas near the doors), Marlin wants to go through as few doors as he could to find
Nemo.

<p align=center>Figure-1 shows an example of the labyrinth and the path Marlin went through to find Nemo.

<p align=center><img src="http://livearchive.onlinejudge.org/external/31/p3133a.gif>

<p>We assume Marlins initial position is at (0, 0). Given the position of Nemo and the configuration
of walls and doors, please write a program to calculate the minimum number of doors Marlin has
to go through in order to reach Nemo.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


<p>The input consists of several test cases. Each test case is started by two non-negative integers M
and N. M represents the number of walls in the labyrinth and N represents the number of doors.
Then follow M lines, each containing four integers that describe a wall in the following format:

<blockquote>x y d t</blockquote>

<p>(x, y) indicates the lower-left point of the wall, d is the direction of the wall  0 means its
parallel to the X-axis and 1 means that it's parallel to the Y-axis, and t gives the length of the wall.
The coordinates of two ends of any wall will be in the range of [1,199].

<p>Then there are N lines that give the description of the doors:

<blockquote>x y d</blockquote>

<p>x, y, d have the same meaning as the walls. As the doors have fixed length of 1, t is omitted.

<p>The last line of each case contains two positive float numbers:

<blockquote>f<sub>1</sub> f<sub>2</sub></blockquote>

<p>(f<sub>1</sub>, f<sub>2</sub>) gives the position of Nemo. And it will not lie within any wall or door.

<p>A test case of M = -1 and N = -1 indicates the end of input, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, in a separate line, please output the minimum number of doors Marlin has to go
through in order to rescue his son. If he can't reach Nemo, output -1.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
8 9
1 1 1 3
2 1 1 3
3 1 1 3
4 1 1 3
1 1 0 3
1 2 0 3
1 3 0 3
1 4 0 3
2 1 1
2 2 1
2 3 1
3 1 1
3 2 1
3 3 1
1 2 0
3 3 0
4 3 1
1.5 1.5
4 0
1 1 0 1
1 1 1 1
2 1 1 1
1 2 0 1
1.5 1.7
-1 -1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
5
-1
</PRE>

<P>

______________________________________________________
3134||||||false||||||
<P>The word search engine may not be strange to you. Generally speaking, a search engine
searches the web pages available in the Internet, extracts and organizes the information and
responds to users queries with the most relevant pages. World famous search engines, like
GOOGLE, have become very important tools for us to use when we visit the web. Such
conversations are now common in our daily life:

<blockquote>
What does the word like ****** mean?<br>
Um I am not sure, just google it.
</blockquote>

<p>In this problem, you are required to construct a small search engine. Sounds impossible, does it?
Dont worry, here is a tutorial teaching you how to organize large collection of texts efficiently
and respond to queries quickly step by step. You dont need to worry about the fetching process of
web pages, all the web pages are provided to you in text format as the input data. Besides, a lot of
queries are also provided to validate your system.

<p>Modern search engines use a technique called inversion for dealing with very large sets of
documents. The method relies on the construction of a data structure, called an inverted index,
which associates terms (words) to their occurrences in the collection of documents. The set of
terms of interest is called the vocabulary, denoted as V. In its simplest form, an inverted index is a
dictionary where each search key is a term <img src=p3134a.gif> <img src=p3134b.gif> V. The associated value b(<img src=p3134a.gif>) is a pointer to an
additional intermediate data structure, called a bucket. The bucket associated with a certain term <img src=p3134a.gif>
is essentially a list of pointers marking all the occurrences of <img src=p3134a.gif> in the text collection. Each entry in
each bucket simply consists of the document identifier (DID), the ordinal number of the document
within the collection and the ordinal line number of the terms occurrence within the document.

<p>Lets take Figure-1 for an example, which describes the general structure. Assuming that we only
have three documents to handle, shown at the right part in Figure-1; first we need to tokenize the
text for words (blank, punctuations and other non-alphabetic characters are used to separate words)
and construct our vocabulary from terms occurring in the documents. For simplicity, we dont
need to consider any phrases, only a single word as a term. Furthermore, the terms are
case-insensitive (e.g. we consider book and Book to be the same term) and we dont consider
any morphological variants (e.g. we consider books and book, protected and protect to be
different terms) and hyphenated words (e.g. middle-class is not a single term, but separated into
2 terms middle and class by the hyphen). The vocabulary is shown at the left part in Figure-1.
Each term of the vocabulary has a pointer to its bucket. The collection of the buckets is shown at
the middle part in Figure-1. Each item in a bucket records the DID of the terms occurrence.

<p>After constructing the whole inverted index structure, we may apply it to the queries. The query is
in any of the following formats:

<blockquote>
term term AND term
term OR term
NOT term
</blockquote>

<p>A single term can be combined by Boolean operators: AND, OR and NOT (term1 AND term2
means to query the documents including term1 and term2; term1 OR term2 means to query the
documents including term1 or term2; NOT term1 means to query the documents not including
term1). Terms are single words as defined above. You are guaranteed that no non-alphabetic
characters appear in a term, and all the terms are in lowercase. Furthermore, some meaningless
stop words (common words such as articles, prepositions, and adverbs, specified to be the, a, to,
and, or, not in our problem) will not appear in the query, either.

<p>For each query, the engine based on the constructed inverted index searches the term in the
vocabulary, compares the terms bucket information, and then gives the result to user. Now can
you construct the engine?

<p align=center><img src=p3134c.gif>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


<p>The input starts with integer N (0 < N < 100) representing N documents provided. Then the next N
sections are N documents. Each section contains the document content and ends with a single line
of ten asterisks.

<p>**********

<p>You may assume that each line contains no more than 80 characters and the total number of lines
in the N documents will not exceed 1500.

<p>Next, integer M (0 &lt; M &le; 50000) is given representing the number of queries, followed by M
lines, each query in one line. All the queries correspond to the format described above.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each query, you need to find the document satisfying the query, and output just the lines
within the documents that include the search term (For a NOT query, you need to output the whole
document). You should print the lines in the same order as they appear in the input. Separate
different documents with a single line of 10 dashes.

<p>----------

<p>If no documents matching the query are found, just output a single line: Sorry, I found nothing.
The output of each query ends with a single line of 10 equal signs.

<p>==========

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
A manufacturer, importer, or seller of
digital media devices may not (1) sell,
or offer for sale, in interstate commerce,
or (2) cause to be transported in, or in a
manner affecting, interstate commerce,
a digital media device unless the device
includes and utilizes standard security
technologies that adhere to the security
system standards.
**********
Of course, Lisa did not necessarily
intend to read his books. She might
want the computer only to write her
midterm. But Dan knew she came from
a middle-class family and could hardly
afford the tuition, let alone her reading
fees. Books might be the only way she
could graduate
**********
Research in analysis (i.e., the evaluation
of the strengths and weaknesses of
computer system) is essential to the
development of effective security, both
for works protected by copyright law
and for information in general. Such
research can progress only through the
open publication and exchange of
complete scientific results
**********
I am very very very happy!
What about you?
**********
6
computer
books AND computer
books OR protected
NOT security
very
slick
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
want the computer only to write her
----------
computer system) is essential to the
==========
intend to read his books. She might
want the computer only to write her
fees. Books might be the only way she
==========
intend to read his books. She might
fees. Books might be the only way she
----------
for works protected by copyright law
==========
Of course, Lisa did not necessarily
intend to read his books. She might
want the computer only to write her
midterm. But Dan knew she came from
a middle-class family and could hardly
afford the tuition, let alone her reading
fees. Books might be the only way she
could graduate
----------
I am very very very happy!
What about you?
==========
I am very very very happy!
==========
Sorry, I found nothing.
==========
</PRE>

<P>

______________________________________________________
3135||||||false||||||
<P>A data stream is a real-time, continuous, ordered sequence of items. Some examples include
sensor data, Internet traffic, financial tickers, on-line auctions, and transaction logs such as Web
usage logs and telephone call records. Likewise, queries over streams run continuously over a
period of time and incrementally return new results as new data arrives. For example, a
temperature detection system of a factory warehouse may run queries like the following.

<blockquote>
Query-1: Every five minutes, retrieve the maximum temperature over the past five minutes.
Query-2: Return the average temperature measured on each floor over the past 10 minutes.
</blockquote>

<p>We have developed a Data Stream Management System called Argus, which processes the queries
over the data streams. Users can register queries to the Argus. Argus will keep the queries running
over the changing data and return the results to the corresponding user with the desired frequency.

<p>For the Argus, we use the following instruction to register a query:

<blockquote>
Register Q_num Period
</blockquote>

<p>Q_num (0 &lt; Q_num &le; 3000) is query ID-number, and Period (0 &lt; Period &le; 3000) is the interval
between two consecutive returns of the result. After Period seconds of register, the result will be
returned for the first time, and after that, the result will be returned every Period seconds.

<p>Here we have several different queries registered in Argus at once. It is confirmed that all the
queries have different Q_num. Your task is to tell the first K queries to return the results. If two or
more queries are to return the results at the same time, they will return the results one by one in
the ascending order of Q_num.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The first part of the input are the register instructions to Argus, one instruction per line. You can
assume the number of the instructions will not exceed 1000, and all these instructions are executed
at the same time. This part is ended with a line of #.

<P>The second part is your task. This part contains only one line, which is one positive integer K (&le;
10000).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>You should output the Q_num of the first K queries to return the results, one number per line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
Register 2004 200
Register 2005 300
#
5
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
2004
2005
2004
2004
2005
</PRE>

<P>

______________________________________________________
3136||||||false||||||
<P>A few kids are standing around an old tree playing a game. The tree is so huge that each kid can
only see the kids close to him/her.

<p>The game consists many turns. At the beginning of each turn of the game, a piece of paper is
given to a randomly chosen kid. This kid writes the letter B if he is a boy or the letter G if a
girl. Then he chooses a direction to pass the paper (clockwise or counter-clockwise), and gives the
paper to his neighbor in that direction. The kid getting the paper writes down his sex too, and
gives the paper to his neighbor in the same direction. In this way, the paper goes through the kids
one by one, until one kid stops passing the paper and announces the end of this turn.

<p>For example, there are five kids around the tree, and their genders are shown in Figure-1. The
paper first goes to Kid1, after writing a B he passes it to Kid2, and Kid2 to Kid3. After Kid3
writes down a G, she ends up this turn, and we get the paper with a string BBG.

<p align=center><img src=p3136a.gif>

<p>After N turns, we get N pieces of paper with strings of Bs and/or Gs. One of the kids will get
all these papers, and has to figure out at least how many kids are around the tree playing the game.
It's known that there are at least two kids. Please write a program to help him.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>There are several test cases. Each case starts with a line containing an integer N, the number of
papers (2 &le; N &le; 16). Each of the following N lines contains a string on a paper, which is a
nonempty string of letter Bs and/or Gs. Each string has no more than 100 letters.

<p>A test case of N = 0 indicates the end of input, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, output the least possible number of kids in a line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
BGGB
BGBGG
GGGBGB
2
BGGGBBBGG
GBBBG
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
9
6
</PRE>

<P>

______________________________________________________
3137||||||false||||||
<P>Given a square at [0, 1] * [0, 1] that has N points ( P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub>) in the square (you may assume
that different points can be at the same position), we can connect the N points and the four corners
of the square with some line segments so that through these segments any two of the N+4 points
can reach each other (directly or indirectly). The graph length is defined as the total length of the
line segments. When N points positions are fixed, there must exist a way of connecting them,
such that it will make the shortest graph length. We can use LEN (P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub>) to record the
graph length using this way of connecting.

<p>In this situation, LEN (P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub>) is a function of P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub>. When P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub> change
their positions, LEN (P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub>) also changes. Its easy to prove that there exist some P<sub>1</sub>,
P<sub>2</sub>, ..., P<sub>N</sub> in the square such that LEN (P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub>) is at its minimum.

<p>Given the initial positions of N points, your task is to find out N points P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub> in the
square such that |P<sub>1</sub>P<sub>1</sub>| + |P<sub>2</sub>P<sub>2</sub>| + ... + |P<sub>N</sub>P<sub>N</sub>| is minimum and LEN (P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub>) =
LEN (P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub>) . You are requested to output the value of |P<sub>1</sub>P<sub>1</sub>| + |P<sub>2</sub>P<sub>2</sub>| + ... + |P<sub>N</sub>P<sub>N</sub>|,
where |P<sub>i</sub>P<sub>i</sub>| is the distance between P<sub>i</sub> and P<sub>i</sub>.

<p align=center><img src=p3137a.gif>

<p>For example, Figure-1 gives the initial position of P<sub>1</sub> and the way of connecting to obtain
LEN (P<sub>1</sub>). In Figure-2, it gives the position of P<sub>1</sub>, which is at the center of the square, and the
way of connecting to obtain LEN (P<sub>1</sub>). It can be proved that LEN (P<sub>1</sub>) = LEN (P<sub>1</sub>); your job is
to output the distance between P<sub>1</sub> and P<sub>1</sub>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input consists of several test cases. For each test case, the first line consists of one integer N
(1 &le; N &le; 100), the number of points, and N lines follow to give the coordinates for every point
in the following format:

<blockquote>x y</blockquote>

<p>Here, x and y are float numbers within the value [0, 1].

<p>A test case of N = 0 indicates the end of input, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, output the value of |P<sub>1</sub>P<sub>1</sub>| + |P<sub>2</sub>P<sub>2</sub>| + ... + |P<sub>N</sub>P<sub>N</sub>|. The value should be
rounded to three digits after the decimal point.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
0.2 0.5
2
0 0.5
0.5 0.5
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0.300
0.500
</PRE>

<P>

______________________________________________________
3138||||||false||||||
<P>Bob is very interested in the data structure of a tree. A tree is a directed graph in which a special
node is singled out, called the "root" of the tree, and there is a unique path from the root to each of
the other nodes.

<p>Bob intends to color all the nodes of a tree with a pen. A tree has N nodes, these nodes are
numbered 1, 2, ..., N. Suppose coloring a node takes 1 unit of time, and after finishing coloring
one node, he is allowed to color another. Additionally, he is allowed to color a node only when its
father node has been colored. Obviously, Bob is only allowed to color the root in the first try.

<p>Each node has a coloring cost factor, C<sub>i</sub>. The coloring cost of each node depends both on C<sub>i</sub> and
the time at which Bob finishes the coloring of this node. At the beginning, the time is set to 0. If
the finishing time of coloring node i is F<sub>i</sub>, then the coloring cost of node i is C<sub>i</sub> * F<sub>i</sub>.

<p>For example, a tree with five nodes is shown in Figure-1. The coloring cost factors of each node
are 1, 2, 1, 2 and 4. Bob can color the tree in the order 1, 3, 5, 2, 4, with the minimum total
coloring cost of 33.

<p align=center><img src=p3138a.gif>

<p>Given a tree and the coloring cost factor of each node, please help Bob to find the minimum
possible total coloring cost for coloring all the nodes.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input consists of several test cases. The first line of each case contains two integers N and R
(1 &le; N &le; 1000, 1 &le; R &le; N), where N is the number of nodes in the tree and R is the node
number of the root node. The second line contains N integers, the i-th of which is C<sub>i</sub> (1 &le; C<sub>i</sub> &le;
500), the coloring cost factor of node i. Each of the next N-1 lines contains two space-separated
node numbers V<sub>1</sub> and V<sub>2</sub>, which are the endpoints of an edge in the tree, denoting that V<sub>1</sub> is the
father node of V<sub>2</sub>. No edge will be listed twice, and all edges will be listed.

<p>A test case of N = 0 and R = 0 indicates the end of input, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5 1
1 2 1 2 4
1 2
1 3
2 4
3 5
0 0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
33
</PRE>

<P>

______________________________________________________
3139||||||false||||||
<P>Kid is a famous thief and he is known for his unique habit. Before his attempt, he will always
inform the person who he is going to rob beforehand. Though the people have paid much attention
to him, he has never failed. This time Kid informed a billionaire, Jack, that he is going to enter
Jacks home to take away his expensive treasure. Jack is very afraid and he asked a brilliant boy,
Conan, to help him. Conan designed a special lock for Jacks home. However, Kid is very tricky
and he stole the structure map and the password of the lock.

<p align=center><img src=p3139a.gif>

<p>From the structure map (see Figure-1), Kid knows that the lock contains K dial plates and K gears,
and every dial plate controls several gears. There are N teeth on each gear, which is numbered
counter-clockwise from 1 to N. When a certain dial plate is dialed, the gears that refer to the plate
will rotate counter-clockwise by several teeth (different gears may rotate different numbers of
teeth). A dial plate can be dialed more than once. At the beginning, the numbers of the top teeth of
the gears are all 1. To open the lock, the number of the top tooth of every gear must be a certain
number. These K numbers form the password. Take Figure-1 for an example where N=8, K=4; if
the password is 1-2-8-1, the lock will open.

<p>With the password in hand, Kid wants to know whether he can open the lock; and if he can, he
wants to know the least number of dials he has to use to open the lock. You may assume that the
lock is always locked at the beginning, which means that the password cannot be K 1s.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>There are several test cases. In the first line of each case there are two integers K (1 &le; K &le; 20)
and N (2 &le; N &le; 10). Then follows a line with K integers expressing the password. Each number
in the password is between 1 and N. Then come K lines, the i-th of which describes how the i-th
dial plate controls the referred gears. These K lines have the following format:

<blockquote>p a<sub>1</sub> b<sub>1</sub> a<sub>2</sub> b<sub>2</sub> ... a<sub>p</sub> b<sub>p</sub></blockquote>

<p>Integer p (0 &le; p &le; K) expresses the number of gears that are referred to the dial plate. a<sub>i</sub> (1 &le; i
&le; p) is an integer between 1 and K which tells that the a<sub>i</sub>-th gear is under the control of this dial
plate. b<sub>i</sub> is an integer between 1 and N-1 which tells that when the dial plate is dialed once, the
a<sub>i</sub>-th gear will rotate across by b<sub>i</sub> gears.

<p>A test case of K = 0 and N = 0 indicates the end of input, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, there is a single line. If the lock can be opened, the line contains the least
number of times Kid should dial the dial plates; otherwise, output No solution.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 4
2
1 1 2
4 8
8 8 8 8
4 1 1 2 2 4 1 3 1
2 4 7 3 2
2 1 5 3 5
1 2 7
0 0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
No solution
2
</PRE>

<P>

______________________________________________________
3140||||||false||||||
<P>Given a connected, undirected graph G = (V, E), where V is the vertex set consisting a collection
of nodes, and E is the set of edges, each of which connects two nodes from V. A vertex subset S is
a separator if the subgraph induced by the vertices in V, but not in S, has two connected
components. We shall use the notation [S, W, B] to represent the partition, where the removal of
the separator S will give two connected components W and B.

<p>In this problem, we consider the separators in grids. Each node in a grid is connected to its eight
neighbors (if they exist). In Figure-1, we illustrate a partition of a 6*6 grid with a 9-point separator
(gray nodes in the figure). The nodes on the left of the separator are in set W (white nodes), and
the nodes on the right of the separator are in set B (black nodes).

<p align=center><img src=p3140a.gif>

<p>To simplify the problem, you can assume that all the separators referred in this problem satisfy the
following restrictions:

<blockquote>
	1) Its a minimal separator. A separator is minimal if no subset of it forms a separator.<br>
	2) It begins from a node on the top line of the grid, except the corner (i.e. 30 and 35 in the
	figures), and ends with a node on the bottom line of the grid, also except the corner (i.e. 0 and
	5 in the figures).<br>
	3) On its way from top to bottom, it can go left, right or down, but never go up.
</blockquote>

<p>Now we describe a method to improve a given partition on a grid, through which we can reduce
the number of nodes in the separator. This method contains two steps:

<blockquote>
	1) Select several nodes from B and add them into S. Any of the selected nodes must have a left
	neighbor which is in S.<br>
	2) Remove several nodes from S (excluding the nodes added in the former step), and add them
	into W.
</blockquote>

<p>After the improvement, we should ensure S is still a separator, and make the number of nodes in S
as small as possible. As for Figure-1, we should add 14 and 20 into S, and remove 7, 13, 19 and 25
from S. After that, we obtain a new partition with a 7-point separator shown in Figure-2.

<p>Your task is, given a partition on a grid, to determine the least number of nodes in the separator
after the improvement.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>There are several test cases. Each case begins with a line containing two integers, N and M (3 &le;
M, N &le; 200). In each of the following N lines, there are M characters, describing the initial
partition of the M*N grid. Every character is S, W or B. It is confirmed that each of these
three characters appears at least once in each line, and Ws are always on the left of Ss.

<p>A test case of N = 0 and M = 0 indicates the end of input, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>For each test case, you should output one line containing one integer, which is the least number of
nodes in the separator after the improvement.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
6 6
WWSBBB
WSSBBB
WSBBBB
WSBBBB
WSSSBB
WWWSBB
0 0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
7
</PRE>

<P>

______________________________________________________
3141||||||false||||||
<P>One day a snail climbed up to a big tree and finally came to the end of a branch. What a different
feeling to look down from such a high place he had never been to before! However, he was very
tired due to the long time of climbing, and fell asleep. An unbelievable thing happened when he
woke up  he found himself lying in a meadow and his house originally on his back
disappeared! Immediately he realized that he fell off the branch when he was sleeping! He was
sure that his house must still be on the branch he had been sleeping on. The snail began to climb
the tree again, since he could not live without his house.

<p>When reaching the first fork of the tree, he sadly found that he could not remember the route that
he climbed before. In order to find his lovely house, the snail decided to go to the end of every
branch. It was dangerous to walk without the protection of the house, so he wished to search the
tree in the best way.

<p>Fortunately, there lived many warm-hearted worms in the tree that could accurately tell the snail
whether he had ever passed their places or not before he fell off.

<p>Now our job is to help the snail. We pay most of our attention to two parts of the tree  the
forks of the branches and the ends of the branches, which we call them key points because key
events always happen there, such as choosing a path, getting the help from a worm and arriving at
the house he is searching for.

<p>Assume all worms live at key points, and all the branches between two neighboring key points
have the same distance of 1. The snail is now at the first fork of the tree.

<p>Our purpose is to find a proper route along which he can find his house as soon as possible,
through the analysis of the structure of the tree and the locations of the worms. The only
restriction on the route is that he must not go down from a fork until he has reached all the ends
grown from this fork.

<p>The house may be left at the end of any branches in an equal probability. We focus on the
mathematical expectation of the distance the snail has to cover before arriving his house. We wish
the value to be as small as possible.

<p>As illustrated in Figure-1, the snail is at the key point 1 and his house is at a certain point among 2,
4 and 5. A worm lives at point 3, who can tell the snail whether his house is at one of point 4 and 5
or not. Therefore, the snail can choose two strategies. He can go to point 2 first. If he cannot find
the house there, he should go back to point 1, and then reaches point 4 (or 5) by point 3. If still not,
he has to return point 3, then go to point 5 (or 4), where he will undoubtedly find his house. In this
choice, the snail covers distances of 1, 4, 6 corresponding to the circumstances under which the
house is located at point 2, 4 (or 5), 5 (or 4) respectively. So the expectation value is (1 + 4 + 6) / 3
= 11 / 3. Obviously, this strategy does not make full use of the information from the worm. If the
snail goes to point 3 and gets useful information from the worm first, and then chooses to go back
to point 1 then towards point 2, or go to point 4 or 5 to take his chance, the distances he covers
will be 2, 3, 4 corresponding to the different locations of the house. In such a strategy, the
mathematical expectation will be (2 + 3 + 4) / 3 = 3, and it is the very route along which the snail
should search the tree.

<p align=center><img src=p3141a.gif>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input contains several sets of test data. Each set begins with a line containing one integer N,
no more than 1000, which indicates the number of key points in the tree. Then follow N lines
describing the N key points. For convenience, we number all the key points from 1 to N. The key
point numbered with 1 is always the first fork of the tree. Other numbers may be any key points in
the tree except the first fork. The i-th line in these N lines describes the key point with number i.
Each line consists of one integer and one uppercase character 'Y' or 'N' separated by a single space,
which represents the number of the previous key point and whether there lives a worm ('Y' means
lives and 'N' means not). The previous key point means the neighboring key point in the shortest
path between this key point and the key point numbered 1. In the above illustration, the previous
key point of point 2 or 3 is point 1, while the previous key point of point 4 or 5 is point 3. This
integer is -1 for the key point 1, means it has no previous key point. You can assume a fork has at
most eight branches. The first set in the sample input describes the above illustration.

<p>A test case of N = 0 indicates the end of input, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p>Output one line for each set of input data. The line contains one float number with exactly four
digits after the decimal point, which is the mathematical expectation value.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
-1 N
1 N
1 Y
3 N
3 N
10
-1 N
1 Y
1 N
2 N
2 N
2 N
3 N
3 Y
8 N
8 N
6
-1 N
1 N
1 Y
1 N
3 N
3 N
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3.0000
5.0000
3.5000
</PRE>

<P>

______________________________________________________
3142||||||false||||||
<P>A simple dartboard consists of a flat, circular piece of cork with concentric rings drawn on it. Darts are thrown at the board by players in an attempt to hit the center of the dartboard (the <SPAN CLASS="textit">Bullseye</SPAN>). The region between each pair of rings (or the center and the first ring) represents a certain point value. The closer the region is to the center of the dartboard, the more points the region is worth, as shown in the diagram below:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3142.jpg ALT="\epsfbox{p3142.eps}"></DIV><P>Ring radii are at 3", 6", 9", 12" and 15" (the <SPAN CLASS="textit">Bullseye</SPAN> has a diameter of 6"). A game of <SPAN CLASS="textit">Simple Darts</SPAN> between two players is played as follows. The first player throws 3 darts at the board. A score is computed by adding up the point values of each region that a dart lands in. The darts are removed. The second player throws 3 darts at the board; the score for player two is computed the same way as it is for player one. The player with the higher score wins.<P>For this problem, you are to write a program that computes the scores for two players, and determine who, if anyone, wins the game. If a dart lands exactly on a ring (region boundary), the higher point value is awarded. Any dart outside the outer ring receives no points. For the purposes of this problem, you can assume that a dart has an infinitely fine point and can not land <SPAN CLASS="textit">paritially</SPAN> on a ring; it is either <SPAN CLASS="textit">on</SPAN> the ring or it is <SPAN CLASS="textit">not on</SPAN> the ring. Standard double precision floating point operations will be should be used.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of 1 or more datasets. A dataset is a line with 12 double-precision values separated by spaces. Each pair of values represents the <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> distances respectively of a dart from the center of the board in inches. (the center is located at <SPAN CLASS="MATH"><I>X</I> = 0</SPAN>, <SPAN CLASS="MATH"><I>Y</I> = 0</SPAN>. The range of values are: <SPAN CLASS="MATH">-20.0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3142.jpg ALT="$ \le$"><I>X</I>, <I>Y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3142.jpg ALT="$ \le$">20.0</SPAN>. Player one's darts are represented by the first 3 pairs of values, and player two's by the last 3 pairs of values. Input is terminated by the first value of a dataset being -100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, print a line of the form:<P><P><BR><TT>SCORE: <SPAN CLASS="MATH"><I>N</I></SPAN> to <SPAN CLASS="MATH"><I>M</I></SPAN>, PLAYER <SPAN CLASS="MATH"><I>P</I></SPAN> WINS.</TT><P><P><BR>Or:<P><P><BR><TT>SCORE: <SPAN CLASS="MATH"><I>N</I></SPAN> to <SPAN CLASS="MATH"><I>M</I></SPAN>, TIE.</TT><P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> is player one's score, and <SPAN CLASS="MATH"><I>M</I></SPAN> is player two's score. <SPAN CLASS="MATH"><I>P</I></SPAN> is either 1 or 2 depending on which player wins. All values are non-negative integers.<P><P><BR><SPAN CLASS="textbf">Formula</SPAN><P>Recall: <SPAN CLASS="MATH"><I>r</I><SUP>2</SUP> = <I>x</I><SUP>2</SUP> + <I>y</I><SUP>2</SUP></SPAN> where <SPAN CLASS="MATH"><I>r</I></SPAN> is the radius, and <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> are the coordinates of a point on the circle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
-9 0 0 -4.5 -2 2 9 0 0 4.5 2 -2
-19.0 19.0 0 0 0 0 3 3 6 6 12 12
-100 0 0 0 0 0 0 0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
SCORE: 240 to 240, TIE.
SCORE: 200 to 140, PLAYER 1 WINS.
</PRE><P>
______________________________________________________
3143||||||false||||||
<P>A certain spreadsheet program labels the columns of a spreadsheet using letters. Column 1 is labeled as ``A", column 2 as ``B", ..., column 26 as ``Z". When the number of columns is greater than 26, another letter is used. For example, column 27 is ``AA", column 28 is ``AB" and column 52 is ``AZ". It follows that column 53 would be ``BA" and so on. Similarly, when column ``ZZ" is reached, the next column would be ``AAA", then ``AAB" and so on.<P>The rows in the spreadsheet are labeled using the row number. Rows start at 1.<P>The designation for a particular cell within the spreadsheet is created by combining the column label with the row label. For example, the upper-left most cell would be ``A1". The cell at column 55 row 23 would be ``BC23".<P>You will write a program that converts numeric row and column values into the spreadsheet designation.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of lines of the form: R<SPAN CLASS="MATH"><I>n</I></SPAN>C<SPAN CLASS="MATH"><I>m</I></SPAN>. <SPAN CLASS="MATH"><I>n</I></SPAN> represents the row number [1,300000000] and <SPAN CLASS="MATH"><I>m</I></SPAN> represents the column number, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3143img1.gif ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3143img1.gif ALT="$ \le$">300000000</SPAN>. The values <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> define a single cell on the spreadsheet. Input terminates with the line: <TT>R0C0</TT> (that is, <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> are 0). There will be no leading zeroes or extra spaces in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input (except the terminating line), you will print out the spreadsheet designation for the specified cell as described above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
R1C1
R3C1
R1C3
R299999999C26
R52C52
R53C17576
R53C17602
R0C0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
A1
A3
C1
Z299999999
AZ52
YYZ53
YZZ53
</PRE><P>
______________________________________________________
3144||||||false||||||
<P>Lotto is a lottery, typically with an accumulating jackpot, in which participants play numbers of their choice in a random drawing. Lenny likes to play the lotto in Lincoln county Louisiana. In the game, he picks a list of <SPAN CLASS="MATH"><I>n</I></SPAN> numbers in the range from 1 to <SPAN CLASS="MATH"><I>m</I></SPAN>. If his list matches the drawn list, he wins the big prize, a lifetime supply of large lemons.<P>Lenny has a scheme that he thinks is likely to be lucky. He likes to choose his list so that each number in it is at least twice as large as the one before it. So, for example, if <SPAN CLASS="MATH"><I>n</I> = 4</SPAN> and <SPAN CLASS="MATH"><I>m</I> = 10</SPAN>, then the possible lucky lists Lenny could like are:<P><PRE>
    1 2 4 8
    1 2 4 9
    1 2 4 10
    1 2 5 10
</PRE><P>Thus Lenny has 4 lists to choose from.<P>Your job, given <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>, is to count how many lucky lists Lenny has to choose from.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input is a single non-negative integer, which is the number of data sets to follow. All data sets should be handled identically. The next lines, one per data set, contain two integers, <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>. You are guaranteed that <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3144img1.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3144img1.gif ALT="$ \le$">10</SPAN> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3144img1.gif ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3144img1.gif ALT="$ \le$">2000</SPAN> and <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3144img1.gif ALT="$ \le$"><I>m</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, print a line like the following:<P><P><BR><TT>Data set <SPAN CLASS="MATH"><I>i</I></SPAN>: <SPAN CLASS="MATH"><I>n</I>&nbsp;<I>m</I>&nbsp;<I>number</I></SPAN></TT><P><P><BR>where <SPAN CLASS="MATH"><I>i</I></SPAN> is the data set number (beginning with 1), and <SPAN CLASS="MATH"><I>number</I></SPAN> is the maximum number of lucky lists corresponding to the provided values of <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
4 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Data set 1: 4 10 4
</PRE><P>
______________________________________________________
3145||||||false||||||
<P>We start with a stack <SPAN CLASS="MATH"><I>n</I></SPAN> of pancakes of distinct sizes. The problem is to convert the stack to one in which the pancakes are in size order with the smallest on the top and the largest on the bottom. To do this, we are allowed to flip the top <SPAN CLASS="MATH"><I>k</I></SPAN> pancakes over as a unit (so the <SPAN CLASS="MATH"><I>k</I></SPAN>-th pancake is now on top and the pancake previously on top is now in the <SPAN CLASS="MATH"><I>k</I></SPAN>-th position).<P>For example:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3145.jpg ALT="\epsfbox{p3145.eps}"></DIV><P>This problem is to write a program, which finds a sequence of at most <SPAN CLASS="MATH">(2<I>n</I> - 3)</SPAN> flips, which converts a given stack of pancakes to a sorted stack.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each line of the input gives a separate data set as a sequence of numbers separated by spaces. The first number on each line gives the number, <SPAN CLASS="MATH"><I>N</I></SPAN>, of pancakes in the data set. The input ends when <SPAN CLASS="MATH"><I>N</I></SPAN> is 0 (zero) with no other data on the line. The remainder of the data set are the numbers 1 through <SPAN CLASS="MATH"><I>N</I></SPAN> in some order giving the initial pancake stack.<P>The numbers indicate the relative sizes of the pancakes. <SPAN CLASS="MATH"><I>N</I></SPAN> will be, at most, 30.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, the output is a single-space separated sequence of numbers on a line. The first number on each line, <SPAN CLASS="MATH"><I>K</I></SPAN>, gives the number of flips required to sort the pancakes. This number is followed by a sequence of <SPAN CLASS="MATH"><I>K</I></SPAN> numbers, each of which gives the number of pancakes to flip on the corresponding sorting step. There may be several correct solutions for some datasets. For instance <TT>3 3 2 3</TT> is also a solution to the first problem below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 1 3 2
5 4 3 2 5 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 2 3 2
3 3 4 5
</PRE><P>
______________________________________________________
3146||||||false||||||
<P>The following card trick is performed by a Magician and the Assistant. The Assistant asks a member of the audience to choose 5 cards from a standard deck of 52 playing cards (A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K of C[lubs], D[iamonds], H[earts] and S[pades]). After examining the cards, the Assistant gives one of the cards back to the audience member and then hands the remaining cards to the Magician, one at a time in a specific order. After suitable mumbo-jumbo, the Magician identifies the (fifth) card held by the audience member.<P>The Magician determines the card as follows:<P>The order of the cards in the deck is determined first by the value and for cards of the same value by the suit (both in the order given above). So the total order of cards is: AC, AD, AH, AS, 2C,2D, ..., KH, KS<P><DL COMPACT><DT>1.</DT><DD>Remember the suit and value of the first card.</DD><DT>2.</DT><DD>Among the remaining three cards find the position of the smallest card (in the above order). Add this position (1, 2, or 3) to the value of the first card.</DD><DT>3.</DT><DD>If the larger two of the last three cards are not in order, add 3 to the result of step 2.</DD><DT>4.</DT><DD>The missing card has the same suit as the first card and value that computed in step 3 wrapping around if necessary.</DD></DL><P>For example:<P><P><BR>QH, 10D, 10C, 4D<P><P><BR>Smallest of the last 3 cards is 4D in place 3. 10D and 10C are out of order so add 3 + 3 to Q. Wrapping around the missing card is 5H.<P>This problem is to write a program to perform the function of the Assistant.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input consists of a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>, which is the number of datasets that follow. Each of the <SPAN CLASS="MATH"><I>n</I></SPAN> following lines contains one data set. The dataset is a sequence of 5 cards separated by a space. Each card is given by a one or two character value and a one character suit as described in the first paragraph.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output on a single line the card the Assistant gives back to the audience member, followed by the four remaining cards in the order they should be presented to the Magician so that she can determine the card that was given back to the audience member.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
QH 5H 10C 4D 10D
5C KS 8D 7H 6C
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5H QH 10D 10C 4D
6C 5C 7H 8D KS
</PRE><P>
______________________________________________________
3147||||||false||||||
<P>One method for determining the height achieved by a model rocket is to have three observers <SPAN CLASS="textbf">A</SPAN>, <SPAN CLASS="textbf">B</SPAN> and <SPAN CLASS="textbf">C</SPAN> equally spaced <SPAN CLASS="MATH"><I>D</I></SPAN> feet apart along a line at one edge of the flat test field. Each observer has a theodolite or some other device for measuring angle above the horizontal of a distant object. Each measuring device is on a stand <SPAN CLASS="MATH"><I>H</I></SPAN> feet above the field. When a rocket is fired, near the top of its flight, it deploys a parachute and emits a puff of dust. Each observer measures the angle above the horizontal of the puff of dust from their location. From these angles <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3147img1.gif ALT="$ \alpha$"></SPAN> for <SPAN CLASS="textbf">A</SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3147img1.gif ALT="$ \beta$"></SPAN> for <SPAN CLASS="textbf">B</SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3147img1.gif ALT="$ \gamma$"></SPAN> for <SPAN CLASS="textbf">C</SPAN>, the height of the rocket above the field can be determined.<P>This problem is to write a program which, given the parameters <SPAN CLASS="MATH"><I>D</I></SPAN> (the distance between observers along the line in feet), <SPAN CLASS="MATH"><I>H</I></SPAN> (the distance of the measuring device above the field in feet), <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3147img1.gif ALT="$ \alpha$"></SPAN> (the angle of the rocket above the horizontal in degrees measured by the leftmost observer <SPAN CLASS="textbf">A</SPAN>), <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3147img1.gif ALT="$ \beta$"></SPAN> (the angle above the horizontal in degrees observed by the center observer <SPAN CLASS="textbf">B</SPAN>) and <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3147img1.gif ALT="$ \gamma$"></SPAN> (the angle above the horizontal in degrees measured by the rightmost observer <SPAN CLASS="textbf">C</SPAN>), computes the height of the rocket above the field in feet to the nearest foot.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains the parameters <SPAN CLASS="MATH"><I>D</I></SPAN> and <SPAN CLASS="MATH"><I>H</I></SPAN> in that order as decimal numbers (not necessarily integers). These values would be measured once at the beginning of the day and remain fixed through all rocket shots. Each succeeding line of input will contain the angles <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3147img1.gif ALT="$ \alpha$"></SPAN> , <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3147img1.gif ALT="$ \beta$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3147img1.gif ALT="$ \gamma$"></SPAN> in that order (measured in degrees). The last line of input will contain at least one value <SPAN CLASS="textit">less than or equal to</SPAN> zero. Other than the last line indicating the end of data all angles will be strictly between 0 and 90 degrees.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of three angles (other than the end indicator), the output contains a line with the height above the field in feet (to the nearest foot) with no leading spaces. (Note: <SPAN CLASS="MATH"><I>x</I>.5</SPAN> rounds up to <SPAN CLASS="MATH"><I>x</I> + 1</SPAN>.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
50 4
43.88 46.85 40.70
34.52 39.50 35.43
27.05 29.22 26.14
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
90
70
60
</PRE><P>
______________________________________________________
3148||||||false||||||
<P>This problem is to write a program to fill a region in a rectangular array of pixels given the outline of the region.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of <SPAN CLASS="textit">problem instances</SPAN>. Each <SPAN CLASS="textit">problem instance</SPAN> begins with a line containing the <SPAN CLASS="textit">row-count</SPAN> of the array, the <SPAN CLASS="textit">column-count</SPAN> of the array and the <SPAN CLASS="textit">number-of-regions</SPAN> to fill as decimal integers. Rows are counted from top to bottom beginning with 1. Columns are counted from left to right beginning with 1. The input ends with a <SPAN CLASS="textit">row-count</SPAN> of 0. <SPAN CLASS="textit">Row-count</SPAN> will be at most 47 and column-count will be at most 63.<P>The first line of each <SPAN CLASS="textit">problem instance</SPAN> is followed by region descriptions for <SPAN CLASS="textit">number-of-regions</SPAN> regions. Each region description begins with a line containing: a single character to be used to fill the region, the <SPAN CLASS="textit">row number</SPAN> of the start pixel, the <SPAN CLASS="textit">column number</SPAN> of the start pixel and the <SPAN CLASS="textit">number of pixels</SPAN> in the boundary which will always be at least two. The region fill character will be distinct for each region within a problem instance. This line is followed by lines of direction codes (<SPAN CLASS="textit">up</SPAN> = <TT>A</TT>, <SPAN CLASS="textit">up right</SPAN> = <TT>B</TT>, etc.):<P><PRE>
           H  A  B
           G     C
           F  E  D
</PRE><P>describing the outline traversed clockwise. The start pixel may be any point on the outline.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each <SPAN CLASS="textit">problem instance</SPAN>, the output consists of <SPAN CLASS="textit">row-count</SPAN> lines of <SPAN CLASS="textit">column-count</SPAN> characters each of which is either a period (<TT>.</TT>) indicating than no region includes that pixel or the fill character of the region which includes that pixel. The <SPAN CLASS="textit">row-count</SPAN> lines are followed by a single blank line. This array may be preceded by one or more lines of the following form (where <SPAN CLASS="MATH"><I>A</I></SPAN> or <SPAN CLASS="MATH"><I>B</I></SPAN> are the fill characters specified in the region header):<P><P><BR><TT>REGION <SPAN CLASS="MATH"><I>A</I></SPAN> GOES OUTSIDE THE ARRAY</TT><P><P><BR>If the boundary path goes outside the boundaries of the array specified for the problem instance.<P><P><BR><TT>REGION <SPAN CLASS="MATH"><I>A</I></SPAN> BOUNDARY IS NOT CLOSED</TT><P><P><BR>If the boundary as specified does not return to the start point.<P><P><BR><TT>REGION <SPAN CLASS="MATH"><I>B</I></SPAN> BOUNDARY INTERSECTS REGION <SPAN CLASS="MATH"><I>A</I></SPAN></TT><P><P><BR>If the boundary of region <SPAN CLASS="MATH"><I>B</I></SPAN> contains points of a previously specified region. If a previous region fails any of these tests it is not considered for intersection with following regions.<P>For each region, the first condition to be violated is to be displayed. Any region for which an error line is given will not be filled in the rectangular array.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
20 40 4
B 3 21 22
CCDDDCBBBCCFFFFFGHHHHH
C 5 8 36
CCDCDDDEDEEFEFFFGFGGHGHHHAHAABABBBCB
D 10 24 38
CCCCCCEEEGGFEDCCEEEGGGGGGAAACCBAHGGAAA
A 2 2 3
CEH
10 20 4
A 4 6 10
GGAAACCEEE
B 6 16 30
CCCCCCCCCCCCEEEGGGGGGGGGGGGAAA
C 5 6 10
CCCCDDFFFG
D 6 2 10
AAACCEEEGG
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
........................................
.AA.....................................
..A.................BBB......BBB........
.....................BBB....BBB.........
.......CCC............BBB..BBB..........
.....CCCCCCC...........BBBBBB...........
....CCCCCCCCC...........BBBB............
...CCCCCCCCCCC...........BB.............
..CCCCCCCCCCCCC.........................
..CCCCCCCCCCCCC........DDDDDDD..........
.CCCCCCCCCCCCCCC.......DDDDDDD..........
.CCCCCCCCCCCCCCC.......DDDDDDD..........
.CCCCCCCCCCCCCCC.......DDDDDDD..........
..CCCCCCCCCCCCC...........D.............
..CCCCCCCCCCCCC...........D.............
...CCCCCCCCCCC.........DDDDDDD..........
....CCCCCCCCC..........DDDDDDD..........
.....CCCCCCC...........DDDDDDD..........
.......CCC.............DDDDDDD..........
........................................

REGION B GOES OUTSIDE THE ARRAY
REGION C BOUNDARY IS NOT CLOSED
REGION D BOUNDARY INTERSECTS REGION A
...AAA..............
...AAA..............
...AAA..............
...AAA..............
....................
....................
....................
....................
....................
....................

</PRE><P>
______________________________________________________
3149||||||false||||||
<P>An application to assist in the analysis of tissue samples is to work as follows. A digital microphotograph of a stained tissue sample is scanned to identify stained pixels. For each region of stained pixels, an outline of the region is obtained. The outline is then analyzed for shape indicators of disease and the outlines (color-coded for possible disease) are overlaid on the microphotograph as it is displayed to the pathologist.<P>This problem is to write a program, which processes a bitmap of stained and unstained pixels, finds regions of stained pixels and, for each region, outputs the outline of the region. Regions with fewer stained pixels than a <SPAN CLASS="textit">minimum size</SPAN> are ignored. Only the outer boundary is computed (interior holes are ignored).<P>A pixel is <SPAN CLASS="textit">adjacent</SPAN> to another pixel if the second pixel is directly above, directly below, directly left or directly right of the first pixel. Two stained pixels are <SPAN CLASS="textit">connected</SPAN> if there is a sequence of stained pixels starting with one of the pixels and ending with the other for which each pixel in the sequence is adjacent to the next. A <SPAN CLASS="textit">region</SPAN> of stained pixels is a set of stained pixels, all of which are connected to a single stained pixel. A stained pixel is a <SPAN CLASS="textit">boundary pixel</SPAN> of its region if at least one of the pixels adjacent to it is not stained. (All pixels immediately outside the bitmap are considered unstained so that pixels on the edge of the bitmap are boundary pixels.) In the example below, there are 4 regions (stained pixels are `<TT>X</TT>', unstained are `<TT>.</TT>').<P><PRE>
                   ........................................
                   .XX.....................................
                   ..X.................XXX......XXX........
                   .....................XXX....XXX.........
                   .......XXX............XXX..XXX..........
                   .....XXXXXXX...........XXXXXX...........
                   ....XXXXXXXXX...........XXXX............
                   ...XXXX...XXXX...........XX.............
                   ..XXX.......XXX.........................
                   ..XXX.......XXX........XXXXXXX..........
                   .XXX.........XXX.......XXXXXXX..........
                   .XXX.........XXX.......XXXXXXX..........
                   .XXX.........XXX.......XXXXXXX..........
                   ..XXX.......XXX...........X.............
                   ..XXX.......XXX...........X.............
                   ...XXXX...XXXX.........XXXXXXX..........
                   ....XXXXXXXXX..........XXXXXXX..........
                   .....XXXXXXX...........XXXXXXX..........
                   .......XXX.............XXXXXXX..........
                   ........................................
</PRE><P>Outlines are to be specified as the left most point of the top most line of the region, a count of boundary pixels and a sequence of moves from one boundary pixel to the next clockwise using the codes (up = <TT>A</TT>, up right = <TT>B</TT>, etc.):<P><PRE>
             H  A  B
             G     C
             F  E  D
</PRE><P>Rows are numbered from top to bottom beginning with 1. Columns are numbered from left to right beginning with 1. For example the outline of the `v' shaped region above would be:<P><PRE>
3 21 22
CCDDDCBBBCCFFFFFGHHHHH
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input is a sequence of <SPAN CLASS="textit">problem instances</SPAN>. Each problem instance begins with a line containing 3 decimal numbers: <SPAN CLASS="textit">row-count</SPAN>, <SPAN CLASS="textit">column-count</SPAN> and <SPAN CLASS="textit">minimum-number-of-pixels</SPAN>. This line is followed by <SPAN CLASS="textit">row-count</SPAN> lines of <SPAN CLASS="textit">column-count</SPAN> characters. Each character is either a period (<TT>.</TT>) for an unstained pixel or an upper-case `<TT>X</TT>' for a stained pixel. The input ends when the <SPAN CLASS="textit">row-count</SPAN> is 0. <SPAN CLASS="textit">Row-count</SPAN> will be at most 47, <SPAN CLASS="textit">column-count</SPAN> will be at most 63 and <SPAN CLASS="textit">minimum- number-of-pixels</SPAN> will be at least 2.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, the output begins with a line starting with a decimal integer giving the <SPAN CLASS="textit">number of components</SPAN> of at least <SPAN CLASS="textit">minimum-number-of-pixels</SPAN> stained pixels. This is followed by the description of the boundary of each component. The boundaries are to be listed in the order that a first pixel of the component appears while scanning across lines from left to right with line scanned from top to bottom. For each component, the output begins with a line giving the <SPAN CLASS="textit">row number</SPAN> of the start pixel, the <SPAN CLASS="textit">column number</SPAN> of the start pixel and the number of pixels in the boundary as decimal integers separated by a single space. This line is followed by lines of direction codes `<TT>A</TT>' through `<TT>H</TT>'. Each line shall have 40 characters except the last line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
20 40 4
........................................
.XX.....................................
..X.................XXX......XXX........
.....................XXX....XXX.........
.......XXX............XXX..XXX..........
.....XXXXXXX...........XXXXXX...........
....XXXXXXXXX...........XXXX............
...XXXX...XXXX...........XX.............
..XXX.......XXX.........................
..XXX.......XXX........XXXXXXX..........
.XXX.........XXX.......XXXXXXX..........
.XXX.........XXX.......XXXXXXX..........
.XXX.........XXX.......XXXXXXX..........
..XXX.......XXX...........X.............
..XXX.......XXX...........X.............
...XXXX...XXXX.........XXXXXXX..........
....XXXXXXXXX..........XXXXXXX..........
.....XXXXXXX...........XXXXXXX..........
.......XXX.............XXXXXXX..........
........................................
12 40 4
.X.X.X.X.X.X......XX...XXXXXXXXXXXXXXXX.
.XXX.XXX.XXX......XX..XXXXXXXXXXXXXXXXXX
.X...X...X........XX..XX.............XXX
.X.X.X.X.X.X......XX..XX...XXXXXXXX...XX
.XXX.XXX.XXX......XX..XX..XXXXXXXXXX..XX
.X...X...X........XX..XX..XX......XX..XX
.X.X.X.X.X.X......XX..XXX........XXX..XX
.XXX.XXX.XXX......XX..XXXXXXXXXXXXXX..XX
.X...X...X........XX...XXXXXXXXXXXX...XX
.X.X.X.X.X.X......XXX................XXX
.XXXXXXXXXXX......XXXXXXXXXXXXXXXXXXXXXX
...................XXXXXXXXXXXXXXXXXXXX.
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
3 21 22
CCDDDCBBBCCFFFFFGHHHHH
5 8 36
CCDCDDDEDEEFEFFFGFGGHGHHHAHAABABBBCB
10 24 38
CCCCCCEEEGGFEDCCEEEGGGGGGAAACCBAHGGAAA
2
1 2 103
DBEGFEDBEGFEDBEGFEDBDBAAAAAAAAADBEGFEDBE
GFEDBEGFEDBDBAAAAAAAAADBEGFEDBEGFEDBEGFE
DBEGGGGGGGGGGAAAAAAAAAA
1 19 159
CEEEEEEEEDDCCCCCCCCCCCCCCCBBAAAAAHHGGGGG
GGGGGGGFEEEDDCCCCCCCBBHGGGGGFGABCCCCCCCD
EEEFGGGGGGGGGGGHAAAAAABCCCCCCCCCCCCCCCDE
EEEEEEEEFGGGGGGGGGGGGGGGGGGGHAAAAAAAAAA
</PRE><P>
______________________________________________________
3150||||||false||||||
<P>Mr. Young wishes to take a picture of his class. The students will stand in rows with each row no longer than the row behind it and the left ends of the rows aligned. For instance, 12 students could be arranged in rows (from back to front) of 5, 3, 3 and 1 students.<P><PRE>
X X X X X
X X X
X X X
X
</PRE><P>In addition, Mr. Young wants the students in each row arranged so that heights decrease from left to right. Also, student heights should decrease from the back to the front. Thinking about it, Mr. Young sees that for the 12-student example, there are at least two ways to arrange the students (with 1 as the tallest etc.):<P><PRE>
 1  2  3  4  5     1  5  8 11 12
 6  7  8           2  6  9
 9 10 11           3  7 10
12                 4
</PRE><P>Mr. Young wonders how many different arrangements of the students there might be for a given arrangement of rows. He tries counting by hand starting with rows of 3, 2 and 1 and counts 16 arrangements:<P><PRE>
123 123 124 124 125 125 126 126 134 134 135 135 136 136 145 146
45  46  35  36  34  36  34  35  25  26  24  26  24  25  26  25
6   5   6   5   6   4   5   4   6   5   6   4   5   4   3   3
</PRE><P>Mr. Young sees that counting by hand is not going to be very effective for any reasonable number of students so he asks you to help out by writing a computer program to determine the number of different arrangements of students for a given set of rows.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input for each problem instance will consist of two lines. The first line gives the number of rows, <SPAN CLASS="MATH"><I>k</I></SPAN>, as a decimal integer. The second line contains the lengths of the rows from back to front <SPAN CLASS="MATH">(<I>n</I><SUB>1</SUB>, <I>n</I><SUB>2</SUB>,..., <I>n</I><SUB>k</SUB>)</SPAN> as decimal integers separated by a single space. The problem set ends with a line with a row count of <TT>0</TT>. There will never be more than 5 rows and the total number of students, <SPAN CLASS="MATH"><I>N</I></SPAN>, (sum of the row lengths) will be at most 30.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each problem instance shall be the number of arrangements of the <SPAN CLASS="MATH"><I>N</I></SPAN> students into the given rows so that the heights decrease along each row from left to right and along each column from back to front as a decimal integer. (Assume all heights are distinct.) The result of each problem instance should be on a separate line. The input data will be chosen so that the result will always fit in an unsigned 32 bit integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
30
5
1 1 1 1 1
3
3 2 1
4
5 3 3 1
5
6 5 4 3 2
2
15 15
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
1
16
4158
141892608
9694845
</PRE><P>
______________________________________________________
3151||||||false||||||
<p>International Concrete Projects Company (ICPC) is a construction company which specializes
in building houses for the high-end market. ICPC is planning a housing development for new
homes around a lake. The houses will be built in lots of different sizes, but all lots will be on the
lake shore. Additionally, every lot will have exactly two neighbors in the housing development:
one to the left and one to the right.

<p align=center><img src=p3151a.gif>

<p>ICPC owns the land around the lake and needs to divide it into lots according to the housing
development plan. However, the County Council has a curious regulation regarding land tax,
intended to discourage the creation of small lots:

<blockquote>
	1. land can only be divided using a sequence of land divisions;<br>
	2. a land division is an operation that divides one piece of land into two pieces of land; and<br>
	3. for each land division, a land division tax must be paid.
</blockquote>

<p>Denoting by A the area of the largest resulting part of the division, the value of the land division
tax is A × F, where F is the division tax factor set yearly by the County Council. Note that due
to (2), in order to divide a piece of land into N lots, N - 1 land divisions must be performed,
and therefore N - 1 payments must be made to the County Council.

<p>For example, considering the figure above, if the division tax factor is 2.5 and the first land
division separates the lot of 500 units of area from the other lots, the land division tax to be
paid for this first division is 2.5 × (300 + 200 + 100 + 100 + 100). If the next land division
separates the lot of 300 units together with its neighbor lot of 100 units, from the set of the
remaining lots, an additional 2.5 × (300 + 100) must be paid in taxes, and so on. Note also
that some land divisions are not possible, due to (2). For example, after the first land division
mentioned above, it is not possible to make a land division to separate the lot of 300 units
together with the lot of 200 units from the remaining three lots, because more than two parts
would result from that operation.

<p>Given the areas of all lots around the lake and the current value of the division tax factor, you
must write a program to determine the smallest total land division tax that should be paid to
divide the land according to the housing development plan.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<p>The input contains several test cases. The first line of a test case contains an integer N and
a real F, indicating respectively the number of lots (1 &le; N &le; 200) and the land division
tax factor (with precision of two decimal digits, 0 &lt; F &le; 5.00). The second line of a test
case contains N integers X<sub>i</sub>, representing the areas of contiguous lots in the development plan
(0 &lt; X<sub>i</sub> &le; 500, for 1 &le; i &le; N); furthermore, X<sub>k</sub> is neighbour to X<sub>k+1</sub> for 1 &le; k &le; N - 1, and
X<sub>N</sub> is neighbour to X<sub>1</sub>. The end of input is indicated by N = F = 0.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>For each test case in the input your program must produce a single line of output, containing
the minimum total land division tax, as a real number with precision of two decimal digits.

<p>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 1.50
2 1 4 1
6 2.50
300 100 500 100 100 200
0 0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
13.50
4500.00
</PRE>

<P>

______________________________________________________
3152||||||false||||||
<p>Petanque, a game which uses balls (some boules and one coche), was developed in the small
town of La Ciotat, near Marseilles, France. The aim of the game is simple. If playing football
is kicking a ball into the opposite goal and keeping it out of your own, playing petanque is
placing your boules nearer to the coche and keeping your opponents boules away.

<p>One simplified version of the game is played between two players, one against the other, with
three boules each. The players are located in a plane and one of them starts the game by
throwing the coche forward. The player who throws the coche also throws the first boule. The
opposing player throws the second boule. From then on, the player who has not thrown the
boule which is the nearest to the coche throws the next boule (you may assume that there will
be only one boule nearest to the coche). This continues until one player has thrown all his
boules. After this, the other player throws all his remaining boules. The winner is the player
who has thrown the ball which in the end is nearest to the coche (again, you may assume that
there will be only one boule nearest to the coche). The winning player claims as many points
as there are boules thrown by him nearer the coche than any other opposing boules.

<p>You are invited to simulate some games of Petanque. For simulation purposes, we will consider
that the playing floor is a plane and the balls are adimensional (they can be considered as
points). You will be given the names of the two players. The first player given will be the
first to play. For each ball (coche or boules) thrown, you will be given the starting position
of the ball, its direction and how many meters it will roll. You may assume that the starting
position of the balls are inside the playing floor, the balls will never leave the floor and the
starting position of a ball will never coincide with the current position of another ball in the
playing floor. The direction of each ball is given in degrees where the east direction (x-positive)
corresponds to zero degrees and the degrees increase in the counter-clockwise direction, as
shown in the figure below. When a ball that was thrown knocks another ball in its way, the

<p align=center><img src=p3152a.gif>

<p>thrown ball stops. The ball which was still starts moving in the same direction for an amount
of meters equal to the quantity of meters that the thrown ball would still roll if there was no
ball in its way (this amount will NEVER be zero meters). If this ball encounters another one,
the procedure is repeated (here again the amount of meters still to roll will never be zero).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>The input consists of several test cases. The first line in the input contains an integer N
specifying the number of test cases (1 &le; N &le; 10000). The first line of a test case contains the
name of the two players separated by one space. A player name is composed of at most 20
letters from the English alphabet (from A through Z and a through z). The next seven
lines describe the seven balls in the order they are thrown in the game (first the coche and then
the boules thrown by the players according to the rules above). Each line contains four integers
X, Y , <img src=p3152b.gif> and D representing respectively the starting position of a ball (-1000 &le; X, Y &le; 1000),
its direction (0 &le; <img src=p3152b.gif> &le; 360) and the distance (0 &lt; D &le; 100) it will roll if it does not encounter
any other ball in its way.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>For each test case in the input, your program must produce one line containing the name of
the player who won the game and how many points she/he scored separated by a single space.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
Alex BobNelson
0 0 90 30
0 0 90 20
0 0 0 10
-5 0 0 5
0 40 270 18
0 10 90 13
-1 24 315 1
Alice Alex
0 0 90 50
0 0 90 20
0 0 180 20
-5 0 0 5
0 40 270 18
0 10 90 13
-1 24 315 1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Alex 3
Alice 1
</PRE>

<P>

______________________________________________________
3153||||||false||||||
<p>The city of Vienna is called the City of Culture because (among other things) there are more
than 100 museums in the city. As a consequence, it is very difficult (and very expensive) to
visit all of them no matter how long you stay in the city. Fortunately, there is a special night,
called the Long Night of Museums, when you can visit many museums with just one ticket,
from 6:00 pm to 1:00 am of the next day.

<p>Nevertheless, it is impossible to visit every museum of the city for two main reasons. First,
some museums in Vienna dont get involved into this event because they close at 5:00 pm.
Second, there is not enough time in 7 hours to go to every museum, watch ALL their insides
(otherwise, it would be a waste of time), and then go to the others.

<p>Given the number of museums participating in the Long Night of Museums, the time needed
to watch the insides of each museum, and the time that it will take to get from each museum
to the others, you have to find the best tour to visit as many museums as you can during the
Long Night of Museums.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>The input contains several test cases. The first line of a test case contains one integer N, which
indicates the number of museums participating in the event (1 &le; N &le; 20). Each museum has
a unique identification number ranging from 1 to N. The second line of a test case contains
N integers indicating the time, in minutes, needed to visit each museum, from 1 to N. Then
there are N lines describing the times to go from one museum to every other. The i-th line
contains N integers Mk (1 &le; k &le; N) representing the time, in minutes, to go from museum i
to museum k. You may assume that the i-th integer in the i-th line is equal to zero. The end
of input is indicated by N = 0.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>For each test case in the input, your program must produce one line containing the maximum
number of museums that can be visited during the Long Night of Museums.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
500 500
0 120
200 0
2
220 220
0 30
20 0
2
150 150
0 120
200 0
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0
1
2
</PRE>

<P>

______________________________________________________
3154||||||false||||||
<p>A magician invented a new card trick and presented it in the prestigious American Conference
of Magicians (ACM). The trick was so nice it received the Best Magic Award at the conference.
The trick requires three participants: the magician himself, a spectator and an assistant. During
the trick the spectator is asked to shuffle a deck of 52 cards and pick randomly 5 cards out of
the deck. The five cards are given to the assistant (without the magician seeing the cards) who
looks at them and shows four of the five cards one by one to the magician. After seeing the
four cards the magician magically guesses the missing fifth card!

<p>The trick works because once the assistant has the five cards he can always choose four of them
and use those to code information about the fifth one. The code is based on an ordering of
the cards. Cards are ordered first by their suits and then by their face value. We will use the
following order:

<blockquote>
	<li>H &lt; C &lt; D &lt; S (Hearts, Clubs, Diamonds, Spades) for suits; and
	<li>1 &lt; 2 &lt; ... &lt; 9 &lt; T &lt; J &lt; Q &lt; K for face values, where T, J, Q and K stand for Ten, Jack, Queen and King, respectively.
</blockquote>

<p>Assume the spectator chose the cards JD, 8S, 7H, 8C, QH (Jack of Diamonds, 8 of Spades, 7
of Hearts, 8 of Clubs and Queen of Hearts). The strategy for the assistant is the following:

<blockquote>
	<li>Find a suit s which appears at least twice in the set of chosen cards (Hearts in the
example). If more than one suit appears two times, choose the one with lowest order.

	<li>Hide the card x with suit s that is at most six positions ahead in the cyclic order 1 &lt;
2 &lt; ... &lt; T &lt; J &lt; Q &lt; K &lt; 1 &lt; 2 &lt; ... of another card y of the same suit. That is
always possible since there are only thirteen cards with the same suit (in the example the
assistant hides QH). If two or more cards satisfy the criteria above, choose the one with
the smallest face value.

	<li>Show y to the magician. At this point the magician knows the suit of the hidden card,
and also knows that the face value of the hidden card x is at most six positions in front
of the face value of y.

	<li>With the three cards the assistant has left, he must code a number between 1 and 6.
That can be done as follows. Say the three cards z1, z2, z3 are in the order z1 < z2 < z3.
Each of six possible orders in which these three cards can be shown may be interpreted
to convey information about a number.

	<blockquote>
		- z<sub>1</sub>, z<sub>2</sub>, z<sub>3</sub> means 1,<br>
		- z<sub>1</sub>, z<sub>3</sub>, z<sub>2</sub> means 2,<br>
		- z<sub>2</sub>, z<sub>1</sub>, z<sub>3</sub> means 3,<br>
		- z<sub>2</sub>, z<sub>3</sub>, z<sub>1</sub> means 4,<br>
		- z<sub>3</sub>, z<sub>1</sub>, z<sub>2</sub> means 5,<br>
		- z<sub>3</sub>, z<sub>2</sub>, z<sub>1</sub> means 6.
	</blockquote>

</blockquote>

<p>In this way, once the magician is shown the four cards one by one, he has enough information
to magically guess the fifth one!

<p>Your job is to develop a program that, given the four cards shown by the assistant, informs the
magician which is the hidden card.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>The input contains several test cases. The first line in the input contains an integer N specifying
the number of test cases (1 &le; N &le; 10000). Each test case is composed by one line, which
contains the description of the four cards, separated by a space, in the order they were presented
by the assistant.


<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>For each test case in the input your program must produce one line of output, containing the
description of the hidden card.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
7H 8S 8C JD
TC 2D 1S 5H
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
QH
1C
</PRE>

<P>

______________________________________________________
3155||||||false||||||
<p>Card games for one player are called Patience in Britain and Solitaire in the United States. One very difficult (some say maddening) solitaire game is called Two-Stacks and has the following rules:<p><b>Tableau</b><blockquote>The tableau consists of a stock pile, two intermediate piles and one foundation pile.</blockquote><p><b>Cards</b><blockquote>A game may use up to four complete decks, or parts of those four decks. A complete deck contains 52 cards; since all cards in a deck can be ordered, in this description we will forget about faces and suits and we will use the numbers from 1 to 52 to represent the cards in a deck.</blockquote><p><b>Dealing</b><blockquote>Once the cards to be used in the game have been chosen, they are dealt face up in the tableau, one on top of the other, forming the stock pile.</blockquote><p><b>Moving cards</b><blockquote>Cards may be moved one at a time. A card can be moved from the stock pile to one of the intermediate piles, or from one intermediate pile to the foundation pile. In a pile (stock or intermediate) only the topmost card can be moved, although all the others are visible.</blockquote><p><b>Object</b><blockquote>The goal is to have all cards used in the game in non-decreasing order, from bottom to top, constituting the foundation pile.</blockquote><p>As you may have noticed by now, even when a solution exists, chances of winning a Two-Stacks solitaire game are very low. But your grandmother has just learned the game and loved it. She has asked you to help her to learn playing the game, by writing a program that would coach her through her first tries, showing which movements to make.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of a test case contains a single integer N (1 &le; N &le; 208), representing the number of cards in the game. The second line of a test case contains a sequence of N integers (between 1 and 52), separated by single blank spaces,
representing the cards. The cards will be dealt in the order they appear in the input, so that
the topmost card in the stock pile is the Nth card in the line. Notice that each number from
1 to 52 will appear at most 4 times in each test case. The end of input is indicated by a test
case with N = 0.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>For each test case in the input your program must produce an answer. The first line of an answer
must contain a test case identifier, in the form #i where i starts from 1 and is incremented for
every test case. Then, if it is possible to win the game, print a sequence of movements to win
the game. Each movement must be described in a separate line, in the form push x or pop
x where x is 1 or 2; push x moves the topmost card from the stock pile to intermediate pile
x, and pop x moves the topmost card from intermediate pile x to the foundation pile. If more
than one solution exists, print any one. If it is not possible to win the game, print a line with
the word impossible.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
4 1 3 2
4
1 4 3 2
4
2 2 2 1
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
#1
push 1
push 2
push 1
pop 1
pop 1
push 1
pop 2
pop 1
#2
impossible
#3
push 1
push 2
push 1
push 2
pop 2
pop 2
pop 1
pop 1
</PRE>

<P>

______________________________________________________
3156||||||false||||||
<p>Zing Zhu owns an island that is a piece of flat land. Everyday, when the tide rises, the island is flooded by sea water. After much thinking and asking advice from members of his family, Zing Zhu decided to set up an oyster farm in the island. Zing Zhu uses a sophisticated system of plastic watertight modular fences to control the areas that will be flooded and the areas that will not be flooded during the rise of the tide. The fences used by Zing Zhu are either horizontal or vertical and come in strips that have different lengths and heights. Two fences can intersect in at most one point, not necessarily in their ends.<p>You have been contacted by Zing Zhu to calculate, given the height the tide will reach and the position and height of all fence strips, the total area of land which will not be flooded during the high tide. You may assume that the widths of fence strips are so thin compared to the size<p align=center><img src=p3156a.gif><p>of the land that, for the purpose of calculating the total area, fence strips may be considered as having widths equal to zero.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of a test case contains an integer N indicating the number of fence strips in the island (1 &le; N &le; 2000). Each of the next N lines contains five integers X<sub>1</sub>, Y<sub>1</sub>, X<sub>2</sub>, Y<sub>2</sub> and H, representing respectively the start point of the strip (X<sub>1</sub>, Y<sub>1</sub>), the end point of the strip (X<sub>2</sub>, Y<sub>2</sub>) and the strip height (H). The last line of a test case contains an integer W representing the tide height. Coordinates are given in meters, heights in centimeters. Furthermore, X<sub>1</sub> = X<sub>2</sub> or Y<sub>1</sub> = Y<sub>2</sub> (but not both); - 500 &le; X<sub>1</sub>, Y<sub>1</sub>, X<sub>2</sub>, Y<sub>2</sub> &le; 500; and 1 &le; W, H &le; 1000. The end of input is indicated by N = 0.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input your program must produce one line of output, containing one integer representing the total area (in m<sup>2</sup>) of the land which will not be flooded.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
-20 20 20 20 200
20 20 20 -20 200
0 0 0 20 100
-10 0 20 0 200
100
4
-20 20 20 20 200
20 20 20 -20 200
0 0 0 20 100
-10 0 20 0 200
101
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
400
0
</PRE><P>
______________________________________________________
3157||||||false||||||
<p>The whole family was excited by the news. Everyone knew grandpa had been an extremely good bridge player for decades, but when it was announced he would be in the Guinness Book of World Records as the most successful bridge player ever, whow, that was astonishing!<p>The International Bridge Association (IBA) has maintained, for several years, a weekly rank-ing of the best players in the world. Considering that each appearance in a weekly ranking constitutes a point for the player, grandpa was nominated the best player ever because he got the highest number of points.<p>Having many friends who were also competing against him, grandpa is extremely curious to know which player(s) took the second place. Since the IBA rankings are now available in the internet he turned to you for help. He needs a program which, when given a list of weekly rankings, finds out which player(s) got the second place according to the number of points.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Players are identified by integers from 1 to 10000. The first line of a test case contains two integers N and M indicating respectively the number of rankings available (2 &le; N &le; 500) and the number of players in each ranking (2 &le; M &le; 500). Each of the next N lines contains the description of one weekly ranking. Each description is composed by a sequence of M integers, separated by a blank space, identifying the players who figured in that weekly ranking. You can assume that:<blockquote><li>in each test case there is exactly one best player and at least one second best player, <li>each weekly ranking consists of M distinct player identifiers.</blockquote><p>The end of input is indicated by N = M = 0.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input your program must produce one line of output, containing the identification number of the player who is second best in number of appearances in the rankings. If there is a tie for second best, print the identification numbers of all second best players in increasing order. Each identification number produced must be followed by a blank space.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4 5
20 33 25 32 99
32 86 99 25 10
20 99 10 33 86
19 33 74 99 32
3 6
2 34 67 36 79 93
100 38 21 76 91 85
32 23 85 31 88 1
0 0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
32 33
1 2 21 23 31 32 34 36 38 67 76 79 88 91 93 100
</PRE><P>
______________________________________________________
3158||||||false||||||
<p>Uncle Jeff owns a glass shop, which sells glass panes for windows and picture frames. As you probably know, a glass pane can only be cut if the cut goes from edge to edge of the pane in a straight line. The figure below shows how a glass pane can be cut into three smaller glass panes.<p align=center><img src=p3158a.gif><p>Uncle Jeff normally operates as follows. He first collects various orders for small rectangular glass panes, for windows or picture frames. He then marks the position of each small rectangular pane onto a big rectangular glass pane, such that no two marked rectangles overlap. Finally, he performs a sequence of horizontal and vertical cuts, always from edge to edge of the pane being cut, so as to produce glass panes for all the customers.<p>Since the last phase (the actual cutting of the big glass pane into pieces) is the most boring thing one could ever imagine, uncle Jeff is asking you for help. He wants a program which given a big rectangular glass pane and lower-left and upper-right coordinates of each marked rectangle determines the order in which the edge-to-edge cuts can be performed. This list of cuts will be fed into a machine which will do the boring cuts for him!<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of a test case contains an integer N indicating the number of windows and picture frames in the test (2 &le; N &le; 2000). Each of the next N lines contains four integers X<sub>1</sub>, Y<sub>1</sub>, X<sub>2</sub>, Y<sub>2</sub>, where (X<sub>1</sub>, Y<sub>1</sub>) and (X<sub>2</sub>, X<sub>2</sub>) represent the lower-left and upper-right coordinates marked by uncle Jeff on the big glass pane ( - 5000 &le; X<sub>1</sub>, Y<sub>1</sub>, X<sub>2</sub>, Y<sub>2</sub> &le; 5000; X<sub>1</sub> &lt; X<sub>2</sub> and Y<sub>1</sub> &lt; Y<sub>2</sub>). You should assume the following of each test case:<blockquote><li>The marked rectangles do not overlap (but may intersect on the border points) and divide the big glass pane completely into rectangular regions, so that no glass is wasted. This means that the lower-left and upper-right coordinates of the big glass pane can be inferred from the coordinates of the marked rectangles. <li>It is possible to split up the big glass pane into the small marked rectangles through a sequence of edge-to-edge cuts.</blockquote><p>The end of input is indicated by N = 0.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input your program must produce an ordered list of cuts that must be performed to separate the big glass pane into the desired smaller panes. Each cut must appear in a different line. A cut is described by four integers X<sub>1</sub>, Y<sub>1</sub>, X<sub>2</sub>, Y<sub>2</sub>, where (X<sub>1</sub>, Y<sub>1</sub>) and (X<sub>2</sub>, Y<sub>2</sub>) specify the endpoints of the cut, with X<sub>1</sub> &lt; X<sub>2</sub> and Y<sub>1</sub> = Y<sub>2</sub> for a horizontal cut and X<sub>1</sub> = X<sub>2</sub> and Y<sub>1</sub> &lt; Y<sub>2</sub> for a vertical cut. As more than one ordering of cuts may be possible, your program must print the list in a particular order. If at some point more than one cut is possible, print first the cut with smaller X<sub>1</sub>; if more than one cut is still possible, print first the one with smaller Y<sub>1</sub>. Print a blank line after each test case list.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
0 0 20 30
20 0 40 20
20 20 40 30
6
1 2 2 4
2 3 3 5
1 4 2 5
2 2 3 3
3 2 4 3
3 3 4 5
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
20 0 20 30
20 20 40 20

2 2 2 5
1 4 2 4
2 3 4 3
3 2 3 3
3 3 3 5
</PRE><P>
______________________________________________________
3159||||||false||||||
<P>The Mars Exploration Rovers (MER) have transmitted to earth over 50,000 images of the Martian surface. These images are available to the public via the Jet Propulsion Laboratory's web site. The images are stored in 31-character filenames: a 27-character long name and a 4-character <TT>.JPG</TT> extension. Groups of character positions within the name encode information about each image, such as Spacecraft ID, Camera, Spacecraft clock, Product type, Camera filter, and more.<P>Since most of this image information has limited variability, in a list of image filenames many of the filenames may be very similar. Given a list of MER image filenames, identify the smallest set of character positions that could be used to identify the filenames uniquely. For the name portion of the filename, the leftmost character position is 1, the rightmost is 27. If there are multiple smallest sets, highest precedence goes to leftmost character positions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input is a sequence of groups of MER filenames, one filename per line. Groups are separated by a separator line, `<TT>SEP</TT>'. A group will have at least two and at most 1,000 filenames. Filenames are unique within a group. The name portion consists of only numeric digits and uppercase alphabetic characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output one line for each group of filenames. On the line, list the highest precedence set of character positions that could be used to identify all the filenames uniquely in the group. List the characters' positions in increasing order, separated by exactly one space. Output `<TT>NO SET</TT>' if more than ten character positions are required to identify the filenames uniquely.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2F130885163EDN1000P1111R0M1.JPG
2F130887416EDN10AGF0006L0M1.JPG
SEP
2F130887416EDN10AGF0006R0M1.JPG
2F130887416EDN11AGF0006R0M1.JPG
2F130887416EDN20AGF0006R0M1.JPG
2F130887417EDN10AGF0006R0M1.JPG
2F130887426EDN10AGF0006R0M1.JPG
2F130887516EDN10AGF0006R0M1.JPG
2F130888416EDN10AGF0006R0M1.JPG
2F130897416EDN10AGF0006R0M1.JPG
2F130987416EDN10AGF0006R0M1.JPG
2F131887416EDN10AGF0006R0M1.JPG
2F140887416EDN10AGF0006R0M1.JPG
2F230887416EDN10AGF0006R0M1.JPG
SEP
2F130889129EDN10AYF0006L0M1.JPG
2F130889129EDN10AYF0006R0M2.JPG
2F130889139EDN10AYF0006L0M1.JPG
2F130889139EDN10AYF0006R0M2.JPG
2F130889329EDN10AYF0006L0M1.JPG
2F130889329EDN10AYF0006R0M2.JPG
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
NO SET
9 10 24
</PRE><P>
______________________________________________________
3160||||||false||||||
<P>When gathering test data for engineering analysis, simply collecting the raw sensor data from instruments is only half the job. One must take this data and apply calibration and conversion coefficients to translate sensor data to engineering units. Because many sensors are subject to wear and tear, their behavior changes over time and they require recalibration. Thus, test data for the same instrument recorded at the beginning of a lengthy test program may require different conversions throughout the duration of the program. Your team is to write a utility to assist engineers in choosing the appropriate calibrations for a given set of test data.<P>The engineers that you are assisting identify their tests and calibration events with a number called the effectivity. Tests are numbered sequentially, in increments of 100. Raw data measurements are termed parameters, and each parameter is identified with a name.<P>For example, the first test is 100, the second test is 200, etc. The increment of 100 permits identification of intermediate steps (in particular, calibration measurements). After the first test, a set of calibrations is performed on one day. The following week, another set of calibrations is performed, then several days later a second test is taken. The timeline for these events may be viewed as:<P><P><BR><TABLE COLS=2><COL ALIGN=RIGHT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="textbf">Effectivity</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Action</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>100</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Test 1, collect data for parameters <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>101</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Calibrate parameters <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>102</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Calibrate parameters <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Z</I></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>200</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Test 2, collect data for parameters <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN> and <SPAN CLASS="MATH"><I>Z</I></SPAN></TD></TR></TABLE><P><P><BR>For test 1, data is available for parameters X and Y, but no calibration is available. For test 2, the effectivity of parameters <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Z</I></SPAN> is 102, while the effectivity for parameter <SPAN CLASS="MATH"><I>Y</I></SPAN> is 101. Knowing this information, an engineer can obtain data for test 2, then apply the appropriate calibrations and conversions to analyze the data.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program does not have to keep track of the actual calibration data, only the effectivities of individual parameters. Input consists of a sequential list of events, which are either tests (<TT>T</TT>), calibrations (<TT>C</TT>) or data requests (<TT>R</TT>). Tests consist of the effectivity of the test (always a multiple of 100), and the parameters measured. Calibrations consist of the effectivity of the calibration and the parameters whose sensors were calibrated. Requests consist of the effectivity of the test for which data is requested and the parameters requested. Note that due to human error, calibrations may be back-dated (retroactive) to a previous effectivity. An effectivity will be specified only once.<P>The events have either a `<TT>T</TT>', `<TT>R</TT>', or `<TT>C</TT>' in the first column, a single space, an effectivity, a single space, and one or more parameters, each separated by exactly one space. Parameter names are always upper case letters, `<TT>A</TT>' through `<TT>Z</TT>'. Effectivities are always decimal integers without leading zeros. There will never be more than 100 tests. It is impossible to have a zeroth test. It is impossible to represent more than 99 calibrations before or after tests.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data request, report the effectivity of each requested parameter known at the time of the request. When the parameters are present but uncalibrated, display an effectivity of 0. When a requested parameter is not present on a test, do not display the parameter. Each request should echo the letter `<TT>R</TT>', a single space, the effectivity without any leading zeros, and zero or more parameters accompanied by their effectivities. For each parameter that has test data, print a space, the parameter name, an open parenthesis, the effectivity, and a close parenthesis. Display parameters in the order specified on the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
R 100 X Y
T 100 X Y
R 100 X Y
C 101 X Y
C 102 X Z
T 200 Z Y X
R 100 Z
R 200 Z
R 200 X Y Z
C 103 X
R 200 Z Y X
C 1 X
R 100 X Y
R 200 Z Y X
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
R 100
R 100 X(0) Y(0)
R 100
R 200 Z(102)
R 200 X(102) Y(101) Z(102)
R 200 Z(102) Y(101) X(103)
R 100 X(1) Y(0)
R 200 Z(102) Y(101) X(103)
</PRE><P>
______________________________________________________
3161||||||false||||||
<P>Dirt Cheap Electronics (DCE), a leading manufacturer of electronics for budget-conscious companies, has decided to produce a small, battery operated temperature recording and logging device. The value of these devices is that they can be recovered after deployment, and the entire log of temperatures can be downloaded to a computer for later analysis. The device will read temperatures in steps of whole degrees C, in what is known as the extended industrial temperature range, -40 to 125 degrees C. Your team must compress the temperature readings that will be stored onboard the device.<P>The microcontroller unit (<SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3161img1.png ALT="$ \mu$"></SPAN>CU) that DCE plans to use in the prototype has only 128 bytes of EEPROM for long term storage (logging). To store a significant number of temperature readings,it must compress the logged temperatures. The engineering staff took very expensive thermal metering and logging computers into the intended environments of the new device. After analyzing the data, the staff discovered that recording an initial temperature, then encoding only the change (delta) between consecutive readings promised good compression. The engineers then specified an encoding technique, and handed off all the logged test data and the specification to the software manager for implementation.<P>Compressed temperature data is a series of records with varying bit lengths. Multi-bit values are encoded in big-endian bit order. Each record begins with a data presence bit:<P><DL COMPACT><DT>0:</DT><DD>When the data presence bit is 0, no data follows (this marks the end of the bit stream).</DD><DT>1:</DT><DD>When the data presence bit is 1, the header consists of an additional seven bits of the form <SPAN CLASS="MATH"><I>issnnnn</I></SPAN>:<P><DL COMPACT><DT><SPAN CLASS="MATH"><I>i</I></SPAN></DT><DD>The second bit is 1 when an initial 8-bit two's complement value follows the header, and is 0 when only temperature deltas follow the header.<P></DD><DT><SPAN CLASS="MATH"><I>ss</I></SPAN></DT><DD>The following two bits of the data header correspond to the size of the coded deltas:<TT><SPAN CLASS="textbf">00</SPAN></TT> means that each delta reading in the record is a 2-bit two's complement integer, [-2..1].<TT><SPAN CLASS="textbf">01</SPAN></TT> means that each delta is a 3-bit two's complement integer, [-4..3].<TT><SPAN CLASS="textbf">10</SPAN></TT> means that each delta is a 4-bit two's complement integer, [-8..7].<TT><SPAN CLASS="textbf">11</SPAN></TT> means that each delta is a 5-bit two's complement integer, [-16..15].<P></DD><DT><SPAN CLASS="MATH"><I>nnnn</I></SPAN></DT><DD>The last four bits form an unsigned count (measurements - 1) of how many temperature values (optional initial value plus deltas) are present in the record: thus, 0 indicates that only one measurement follows the header, and 15 indicates that 16 measurements follow the header.</DD></DL></DD></DL><P>The software manager recognized that the limited RAM in the <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3161img1.png ALT="$ \mu$"></SPAN>CU for the compression algorithm prevents optimal compression for an entire set of measurements. The readings will be subject to a compression window of 16 measurements. The software manager has tasked your team to produce an algorithm to compress a window's worth (0..16 measurements) of data. Your program must read a series of windowed data from multiple independent tests. For each window, form one or more records that compress the window optimally (using the fewest bits), and display the resulting bit stream.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input is a series of test windows. Each window is a sequence of temperature readings in the range [-40..125], one per line. The end of a test window is signaled by a dummy temperature value of -128. The end of the series is signaled by end-of-file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output is one line per test recording. Each line consists of a string of zeros and ones, representing the compressed data. There should be no spaces anywhere in the output lines. The bits must represent an optimal compression.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
25
26
27
37
38
38
20
19
17
-128
-128
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1100001000011001010111000010001001010100110000100001010011100
0
</PRE><P>
______________________________________________________
3162||||||false||||||
<P>To celebrate the 40th anniversary of interactive computing at Swamp County College your team is to recreate the first usable version of Swamptran (0.9). Swamptran is an interactive desk calculator with stored programs.<P>In the syntax description non-terminals are in <SPAN CLASS="textit">UPPERCASE ITALIC</SPAN>. Within the right hand side of a definition elements are separated by `,' and the rule is terminated by `.'. Alternate choices are separated by `<SPAN CLASS="MATH">|</SPAN>'. Terminals are either quoted or described by prose enclosed in `(*' `*)'. [<SPAN CLASS="MATH"><I>x</I></SPAN>] means that the enclosed element or elements are optional (may appear 0 or 1 times), [<SPAN CLASS="MATH"><I>x</I></SPAN>]* means 0 or more times, [<SPAN CLASS="MATH"><I>x</I></SPAN>]<SPAN CLASS="MATH">+</SPAN> means 1 or more times. Parentheses `(' `)' are used for grouping.<P>All variables are global and are a single upper or lower case alphabetic character. All variables are integers in the range [-2000000000..2000000000]. Accessing a variable before it has been defined in a SET statement is a run time error.<P><P><BR><SPAN CLASS="textit">VAR = ID</SPAN> .<P><SPAN CLASS="textit">ID = ALPHA</SPAN> .<P><SPAN CLASS="textit">ALPHA</SPAN> = (* an alpha character a-zA-Z, case is significant *).<P><SPAN CLASS="textit">CONST</SPAN> = [<SPAN CLASS="textit">DIGIT</SPAN>]+ (* A constant has the same range as a positive variable *).<P><SPAN CLASS="textit">EXPR</SPAN> = [<SPAN CLASS="textit">VAR</SPAN> <SPAN CLASS="MATH">|</SPAN> <SPAN CLASS="textit">CONST</SPAN> <SPAN CLASS="MATH">|</SPAN> <SPAN CLASS="textit">BINOP</SPAN> <SPAN CLASS="MATH">|</SPAN> <SPAN CLASS="textit">UNOP</SPAN> ]+ .<P><SPAN CLASS="textit">BINOP</SPAN> = `+' <SPAN CLASS="MATH">|</SPAN> `-' <SPAN CLASS="MATH">|</SPAN> `*' <SPAN CLASS="MATH">|</SPAN> `/' <SPAN CLASS="MATH">|</SPAN> `<SPAN CLASS="MATH">&lt;</SPAN>' <SPAN CLASS="MATH">|</SPAN> `<SPAN CLASS="MATH">&lt; =</SPAN>' <SPAN CLASS="MATH">|</SPAN> `&gt;' <SPAN CLASS="MATH">|</SPAN> `<SPAN CLASS="MATH">&gt; =</SPAN>' <SPAN CLASS="MATH">|</SPAN> `=' <SPAN CLASS="MATH">|</SPAN> `<SPAN CLASS="MATH"># =</SPAN>' <SPAN CLASS="MATH">|</SPAN> `<SPAN CLASS="MATH">&amp;</SPAN>' <SPAN CLASS="MATH">|</SPAN> `<SPAN CLASS="MATH">|</SPAN>'.<P><SPAN CLASS="textit">UNOP</SPAN> = `!' <SPAN CLASS="MATH">|</SPAN> `<SPAN CLASS="MATH">#</SPAN>' .<P><P><BR>Expressions are RPN (postfix). The stack has a depth of 100 and is cleared at the start of each expression. The value of an expression is the value left at the top of the stack. A variable or constant is just pushed onto the stack. With S0 as the top of the stack and S1 the second operand on the stack, the effect of the operators is:<P><P><BR>The effect of <SPAN CLASS="textit">BINOP</SPAN>: (... S1 S0) <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3162img1.png ALT="$ \rightarrow$"></SPAN> (... (S1 <SPAN CLASS="textit">BINOP</SPAN> S0))<P>The effect of <SPAN CLASS="textit">UNOP</SPAN>: (... S0) <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3162img1.png ALT="$ \rightarrow$"></SPAN> (... (<SPAN CLASS="textit">UNOP</SPAN> S0))<P><P><BR>`+', `-', `*', `/' are the usual binary arithmetic ops. `<SPAN CLASS="MATH">&lt;</SPAN>', `<SPAN CLASS="MATH">&lt; =</SPAN>', `<SPAN CLASS="MATH">&gt;</SPAN>', `<SPAN CLASS="MATH">&gt; =</SPAN>', `=', `<SPAN CLASS="MATH"># =</SPAN>' are logical comparisons ( `<SPAN CLASS="MATH"># =</SPAN>' is not equal) resulting in 1 if true, 0 if false. `<SPAN CLASS="MATH">&amp;</SPAN>', `<SPAN CLASS="MATH">|</SPAN>' are logical and, or. `<SPAN CLASS="MATH">#</SPAN>' is logical not. The logical operators convert an operand to 1 if non-zero and then perform their operation. `!' is unary minus. The results of an expression resulting in integer underflow or overflow are undefined.<P>Within an expression, variables and constants must be separated from other variables or constants by at least one blank. Ops must be separated from other ops by at least one blank.<P><P><BR>A Swamptran session consists of a series of lines entered by the user and the response of the Swamptran processor.<P><P><BR><SPAN CLASS="textit">LINE</SPAN> = <SPAN CLASS="textit">DIRECT</SPAN> <SPAN CLASS="MATH">|</SPAN> <SPAN CLASS="textit">INDIRECT</SPAN>.<P><SPAN CLASS="textit">INDIRECT</SPAN> = <SPAN CLASS="textit">STEP</SPAN>, [<SPAN CLASS="textit">IFPART</SPAN>], <SPAN CLASS="textit">CMD</SPAN>.<P><SPAN CLASS="textit">DIRECT</SPAN> = [<SPAN CLASS="textit">IFPART</SPAN>], <SPAN CLASS="textit">CMD</SPAN>.<P><SPAN CLASS="textit">STEP</SPAN> = <SPAN CLASS="textit">CONST</SPAN> (<SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3162img1.png ALT="$ \star$"></SPAN> in the range [1..32767] <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3162img1.png ALT="$ \star$"></SPAN>).<P><P><BR>A <SPAN CLASS="textit">STEP</SPAN> must be separated from what follows by at least one blank. A <SPAN CLASS="textit">LINE</SPAN> may have leading blanks. A direct command is scanned for syntax and, if correct, executed. An indirect command is scanned for syntax and, if correct, stored for later execution, replacing any indirect command with the same step number.<P><P><BR><SPAN CLASS="textit">IFPART</SPAN> = `if', `(',<SPAN CLASS="textit">EXPR</SPAN>, `)'.<P><P><BR>Case is not significant. `if', `IF', `iF', `If' are the same. During execution, if the <SPAN CLASS="textit">EXPR</SPAN> of the optional <SPAN CLASS="textit">IFPART</SPAN> is non-zero, the <SPAN CLASS="textit">CMD</SPAN> is executed, otherwise it is not.<P><P><BR><PRE><TT>
<SPAN  CLASS="textit">CMD</SPAN> = (`goto',<SPAN  CLASS="textit">EXPR</SPAN>) <SPAN CLASS="MATH">|</SPAN> `done' <SPAN CLASS="MATH">|</SPAN> (`print',<SPAN  CLASS="textit">EXPR</SPAN>) <SPAN CLASS="MATH">|</SPAN> (`printstep',<SPAN  CLASS="textit">EXPR</SPAN>)<SPAN CLASS="MATH">|</SPAN> `printsteps' <SPAN CLASS="MATH">|</SPAN> 
<BR>(`set',<SPAN  CLASS="textit">VAR</SPAN>,<SPAN  CLASS="textit">EXPR</SPAN>) <SPAN CLASS="MATH">|</SPAN> `clear' <SPAN CLASS="MATH">|</SPAN> `reset' <SPAN CLASS="MATH">|</SPAN> (`deletestep',<SPAN  CLASS="textit">EXPR</SPAN>) .
</TT></PRE><P><P><BR>Case is not significant in the command keyword. `goto', `GOTO', `gOTo', etc. are the same keywords. If the command requires an argument, there must be at least one blank after the command. The set command requires at least one blank between the variable and the expression.<P><P><BR><SPAN CLASS="textbf">direct commands:</SPAN><P><DL COMPACT><DT>goto:</DT><DD>start execution of the stored program at the step <SPAN CLASS="textit">EXPR</SPAN> and continue sequentially until a `done' command, the highest numbered step has been executed, or a run time error occurs.</DD><DT>done:</DT><DD>a no-op.</DD></DL><P><P><BR><SPAN CLASS="textbf">indirect commands:</SPAN><P><DL COMPACT><DT>goto:</DT><DD>transfer control to step <SPAN CLASS="textit">EXPR</SPAN>.</DD><DT>done:</DT><DD>terminate execution of the program and accept input from the user.</DD></DL><P><P><BR><SPAN CLASS="textbf">direct or indirect commands:</SPAN><DL COMPACT><DT>print:</DT><DD>print the value of the expression on a new line, with a `-' if needed and no leading or trailing spaces or leading zeros.</DD><DT>printstep:</DT><DD>print the step exactly as it was entered.</DD><DT>printsteps:</DT><DD>print all steps exactly as entered.</DD><DT>set:</DT><DD>define or redefine the variable with the value of the expression.</DD><DT>clear:</DT><DD>undefine all variables.</DD><DT>reset:</DT><DD>undefine all variable and erase all steps.</DD><DT>deletestep:</DT><DD>erase the step.</DD></DL><P><P><BR><SPAN CLASS="textbf">syntax errors:</SPAN><P>print the input line followed by the line:<P><TT><SPAN CLASS="textbf">eh?</SPAN></TT><P>note that<P><TT><SPAN CLASS="textbf">print</SPAN></TT><P>is a syntax error, while<P><TT><SPAN CLASS="textbf">print 1 +</SPAN></TT><P>will generate a run time error (stack underflow).<P><P><BR><SPAN CLASS="textbf">run time errors</SPAN> (<SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> are step numbers, <SPAN CLASS="MATH"><I>x</I></SPAN> is a variable, and a direct statement has step number 0):<P>error in step <SPAN CLASS="MATH"><I>n</I></SPAN> step <SPAN CLASS="MATH"><I>m</I></SPAN> undefined<P>error in step <SPAN CLASS="MATH"><I>n</I></SPAN> undefined variable: <SPAN CLASS="MATH"><I>x</I></SPAN><P>error in step <SPAN CLASS="MATH"><I>n</I></SPAN> divide by 0<P>error in step <SPAN CLASS="MATH"><I>n</I></SPAN> stack underflow<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input is a series of lines terminated by end-of-file. A line may be at most 80 characters long.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output is the ouput of the Swamptran session.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100 set A a
200   set a a 1 -
300   if(a 1 =) done
400   set A A a *
500 goto 200
set a 5
goto 100
print A
printsteps
reset
printsteps
print a
print ab
print -1
print 1 !
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
120
100 set A a
200   set a a 1 -
300   if(a 1 =) done
400   set A A a *
500 goto 200
error in step 0 undefined variable: a
print ab
eh?
error in step 0 stack underflow
-1
</PRE><P>
______________________________________________________
3163||||||false||||||

<P>
Due to massive confusion on the last County election, the Supervisors appointed a committee to recommend
changes in the election process. The committee's first choice was to change to an `instant runoff' system in which
each voter ranks all candidates in a race, specifying 1st, 2nd, 3rd, etc. choices for candidates. This has the advantage
of saving the county money, since only one election is required - there is no need for both a primary and a general
election. However, focus groups of county voters disliked the idea of having to rank all candidates.

<P>
The voter focus groups preferred listing head-to-head contests between every possible pairing of candidates for
an office. In this model, for four candidates A, B, C, and D, the ballot lists the following pairings:

<P>

<P>
<BR>
A vs. B, A vs. C, A vs. D

<P>
B vs. C, B vs. D

<P>
C vs. D

<P>

<P>
<BR>
The voter marks his/her preference for each of these `forced choice' scenarios.

<P>

<P>
<BR>
This model rapidly becomes unwieldy as the race grows beyond four candidates. A five-candidate race would
have ten head-to-head pairings. Therefore, if more than four candidates qualify for a race, a primary election will be
held in which the top four candidates by plurality vote will advance to the general election. The resulting head-to-head
general election will not exceed six pairings.

<P>

<P>
<BR>
In the order they are to be applied, the rules for winning are:

<P>
<DL COMPACT>
<DT>1</DT>
<DD>If a candidate beats all opponents, that candidate wins.
</DD>
<DT>2</DT>
<DD>Add up the total votes for a candidate in all the head-to-head races. Drop the candidate with the fewest
votes. If there is a tie, remove all candidates with that total. If there are any candidates remaining, remove the
contests not involving them and start over with step 1.
</DD>
<DT>3</DT>
<DD>Declare a tie, the winner will be decided by a card game.
</DD>
</DL>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input is a series of races terminated by end-of-file. Each race starts with the name of the office, an alphanumeric
string on 1 line. The next line will be the votes for each candidate in that race. There are three possible
formats: 1, 3,
or 6 pairs of numbers. Each number is separated by a blank. Each line will be at most 80 characters long.

<P>

<P>
<BR>
<!-- MATH
 $n_{12} \ n_{21}$
 -->
<SPAN CLASS="MATH"><I>n</I><SUB>12</SUB>&nbsp;<I>n</I><SUB>21</SUB></SPAN>

<P>
<!-- MATH
 $n_{12} \ n_{21} \ n_{13} \ n_{31} \ n_{23} \ n_{32}$
 -->
<SPAN CLASS="MATH"><I>n</I><SUB>12</SUB>&nbsp;<I>n</I><SUB>21</SUB>&nbsp;<I>n</I><SUB>13</SUB>&nbsp;<I>n</I><SUB>31</SUB>&nbsp;<I>n</I><SUB>23</SUB>&nbsp;<I>n</I><SUB>32</SUB></SPAN>

<P>
<!-- MATH
 $n_{12} \ n_{21} \ n_{13} \ n_{31} \ n_{14} \ n_{41} \ n_{23} \ n_{32} \ n_{24} \ n_{42} \ n_{34} \ n_{43}$
 -->
<SPAN CLASS="MATH"><I>n</I><SUB>12</SUB>&nbsp;<I>n</I><SUB>21</SUB>&nbsp;<I>n</I><SUB>13</SUB>&nbsp;<I>n</I><SUB>31</SUB>&nbsp;<I>n</I><SUB>14</SUB>&nbsp;<I>n</I><SUB>41</SUB>&nbsp;<I>n</I><SUB>23</SUB>&nbsp;<I>n</I><SUB>32</SUB>&nbsp;<I>n</I><SUB>24</SUB>&nbsp;<I>n</I><SUB>42</SUB>&nbsp;<I>n</I><SUB>34</SUB>&nbsp;<I>n</I><SUB>43</SUB></SPAN>

<P>

<P>
<BR>
Where  <SPAN CLASS="MATH"><I>n</I><SUB>ij</SUB></SPAN> is the number of votes for candidate <SPAN CLASS="MATH"><I>i</I></SPAN> against candidate <SPAN CLASS="MATH"><I>j</I></SPAN> in that head-to-head contest.
                                                                                                                                                 
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Print two lines for each contest. Print the name of the office on first line. Print the candidate number of the winner
on the second line. If there is a tie, print the candidate numbers involved in the tie, sorted by candidate number (lowest
first) and separated by one blank.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
frog catcher
100 50 100 50 50 100 100 40 100 45 100 50
gator catcher
445 445 445 445 445 445 445 445 445 445 445 445
pond manager
12287 13876
chairtoad
127 99 54 67 184 157
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
frog catcher
1
gator catcher
1 2 3 4
pond manager
2
chairtoad
2
</PRE>

<P>

______________________________________________________
3164||||||false||||||

<P>
Every summer, the manager of Starving Students General Contractor hires local college students to assist with
various tasks around construction sites. Ordinarily, he hires engineering students to assist with the measurments for
laying carpet and other floor coverings. Each year, without any special instruction, the engineers would head out to
the new houses and return with annotated floor plans with each measurement marked according to Figure 6.1. The
manager then submitted these drawings to the carpet supplier who calculated the area from the drawings.

<P>
This year, however, he had so much business that he started hiring math students to measure for floor covering.
As with the engineers, he sent the mathematicians out to the houses with no special training. Rather than returning
with detailed floor plans, the math students submitted lists of connected vectors. The vectors recorded the length of a
wall and the angle that the adjacent wall made with respect to the current wall.

<P>
After his initial appraisal of the work as unusable, he realized his good fortune: if he could obtain a computer
program to interpret this information, he could calculate the area to verify that the carpet supplier was not inflating the
areas for illicit profit. To solve the problem, the manager reassigned several computer science students (your team),
who were quite bored writing Excel macros for the finance department. Fortunately, the math students always measured
in closed loops, working their way clockwise through the insides of the houses.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to your program is a list of wall measurements, one segment per input line. Each measurement begins with a
wall length, in inches, followed by whitespace, then an angle in degrees that represents the ``turn" that the math students
made to measure the adjacent wall. A left turn is measured positive and a right turn is measured negative. The final
segment that closes the loop is marked with 0 degrees. The sample input represents the measurements in Figure 6.1.
No houses have more than 100 walls. Angle measurements are in the range [-179.0,179.0] degrees.

<P>
<DIV ALIGN="CENTER">
 =4in
<!-- MATH
 $\epsfbox{p3164.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3164.jpg
 ALT="\epsfbox{p3164.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output is a single number representing the square feet of area enclosed by the wall measurements. Round the area
to the nearest square foot.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
72 90
144 -90
216 -90
258 -90
108 90
6 90
108 -90
126 -90
210 -90
84 -90
30 90
42 -90
36 90
6 90
36 45
50.911688 45
96 -90
72 -90
246 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
691
</PRE>

<P>

______________________________________________________
3165||||||false||||||

<P>
A chill wind descended upon Swamp County. It swept out of the north hills like a flood, then settled in the heart
of the swamp. There it festered among the warm moist air of the cursed bog, and it stewed a thick, toxic fog. Your
team wandered into the park (before the wind and fog) for a relaxing picnic. Now, however, you are lost, choking for
breath, and must escape before you suffocate.

<P>
Swamp County Park is carved out of the swamp according to a hexagonal grid, with pathways cut through barbed
vines. You must grope through the blinding fog to find the exit. You have a limited number of movement attemps
before the toxic fumes overtake you; you must move with efficiency to escape the park. Fortunately, the sheer size of
the park dilutes the toxicity of the fog, so the bigger the park, the more moves you have to escape. Sadly, you don't
know the exact size of the park, other than it cannot exceed the size of the swamp, which is 20-by-20 hexagonal grid
locations.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>

<P>
Your program must converse with a server, issuing movement attempts to standard output and receiving responses
through standard input. Your program starts the conversation. You will never start on the exit location. You may
attempt to move in any of six directions:

<P>

<P>
<BR>

<IMG
 ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3165a.jpg
 ALT="$\textstyle \parbox{.25\textwidth}{
\begin{center}
\mbox{}
\epsfbox{p3165a.eps}
\end{center}}$"><IMG
 ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3165a.jpg
 ALT="$\textstyle \parbox{.74\textwidth}{
\begin{itemize}
\item[1] attempt to move one...
...eft
\item[6] attempt to move one hex location up and to the left
\end{itemize}}$">
<P>

<P>
<BR>
Each movement attempt sent to standard output must be a single decimal digit `<TT>1</TT>'..`<TT>6</TT>' followed by
end-of-line. <SPAN  CLASS="textit">It is
very important that your program flush standard output after issuing a movement attempt. e.g.</SPAN>

<P>

<P>
<BR>
<TABLE COLS=2>
<COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
C         </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    <TT>fputs("1<!-- MATH
 $\backslash$
 -->
<SPAN CLASS="MATH">&#92;</SPAN>n",stdout); fflush(stdout)</TT>;</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
C++       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    <TT>cout &#171; "1<!-- MATH
 $\backslash$
 -->
<SPAN CLASS="MATH">&#92;</SPAN>n" &#171; flush</TT>;</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Java      </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    <TT>System.out.println("1"); System.out.flush()</TT>;</TD></TR>
</TABLE>

<P>

<P>
<BR>
If your program encounters the exit, it should terminate normally. Successful escape from the park generates a
Correct condition. Any characters sent to the server that do not follow the protocol are deemed a Runtime Error. If
the server has to wait more than one second (real time) between your movement requests, your program will trigger
a Time Limit Exceeded condition. If your program continues to move around after reaching the exit, it will receive a
Presentation Error. If the number of move attempts exceeds the limit (<!-- MATH
 $2 \times rows \times columns$
 -->
<SPAN CLASS="MATH">2&#215;<I>rows</I>&#215;<I>columns</I></SPAN>), your
program will elicit a Wrong Answer condition (you suffocated).

<P>

<P>
<BR>
In response to your attempted moves, the server answers with either

<P>
<DL COMPACT>
<DT><TT>n</TT></DT>
<DD>(you ran into a hex location with barbed vines, and did not move)
</DD>
<DT><TT>y</TT></DT>
<DD>(you successfully moved in your intended direction)
</DD>
<DT><TT>E</TT></DT>
<DD>(you successfully moved in your intended direction and found the exit)
</DD>
</DL>

<P>
Each response from the server consists of one of the characters shown above, followed by end-of-line. You must read
these responses from standard input.

<P>

<P><P>
<BR>

<B>Hints for Testing</B>

<P>
You may construct a park layout by hand on the supplied hexagonal graph paper (the judges recommend using
pencil rather than pen). Choose a starting point and an exit location, then simply execute your program and let standard
input come from your command line environment. You, the programmer, must act as the server. Keep track of your
program's location within the park and count the moves. Type the appropriate response to each movement request.

<P>
Additionally, you have access to the server program that the judges use to assess your solution. For this, you must
type in a representation of the park and feed this to the server. The sample representation below corresponds to the
park layout of Figure 7.1. The first line is two space-separated integers specifying the number of rows and columns,
respectively, in the park. The remaining lines describe ``rows" of the park: An asterisk `<SPAN CLASS="MATH"><TT>*</TT></SPAN>' represents a vine-filled
location, a space ` ' indicates a pathway, upper case `E' designates the exit, and a hyphen `-' represents the starting
location in the park. The starting location is a pathway. Except for the exit location, the outer edge of the park must be
marked by asterisks.

<P>

<P>
<BR>
Execute the server using the test7 command:

<P>

<P>
<BR>

<TT>test7 <!-- MATH
 $sourceFile \ mazeFile \ traceFile$
 -->
<SPAN CLASS="MATH"><I>sourceFile</I>&nbsp;<I>mazeFile</I>&nbsp;<I>traceFile</I></SPAN></TT>

<P>

<P>
<BR>
where <!-- MATH
 $sourceFile$
 -->
<SPAN CLASS="MATH"><I>sourceFile</I></SPAN> is the name of your source code file, <SPAN CLASS="MATH"><I>mazeFile</I></SPAN> is the name of your maze representation,
and <SPAN CLASS="MATH"><I>traceFile</I></SPAN> is the name of a file to receive the transcript of your conversation with the server.

<P>
<DIV ALIGN="CENTER">
 <!-- MATH
 $\epsfbox{p3165b.eps}$
 -->
<IMG
 WIDTH="600" HEIGHT="447" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3165a.jpg
 ALT="\epsfbox{p3165b.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 7.1. A 4-row by 6-column park corresponding to maze.txt.
The starting point is at (row,column) location (1,6).
The exit is at (row,column) location (0,2).

</DIV>

<P>

<P>
<BR>

<B>Sample Maze Representation</B>

<P>
<PRE>
4 8
**E*****
* *** -*
*      *
********
</PRE>

<P>

______________________________________________________
3166||||||false||||||
<P>Using only the U. S. coins worth 1, 5, 10, 25, 50, and 100 cents, there are exactly 293 ways in which one U. S. dollar can be represented. Canada has no coin with a value of 50 cents, so there are only 243 ways in which one Canadian dollar can be represented. Suppose you are given a new set of denominations for the coins (each of which we will assume represents some integral number of cents less than or equal to 100, but greater than 0). In how many ways could 100 cents be represented?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. The input for each case will begin with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> (at least 1, but no more than 10) that indicates the number of unique coin denominations. By <SPAN CLASS="textit">unique</SPAN> it is meant that there will not be two (or more) different coins with the same value. The value of <SPAN CLASS="MATH"><I>N</I></SPAN> will be followed by <SPAN CLASS="MATH"><I>N</I></SPAN> integers giving the denominations of the coins.<P>Input for the last case will be followed by a single integer `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (they start with 1 and increase sequentially) and the number of different combinations of those coins that total 100 cents. Separate the output for consecutive cases with a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 1 5 10 25 50 100
5 1 5 10 25 100
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 293 combinations of coins

Case 2: 243 combinations of coins
</PRE><P>
______________________________________________________
3167||||||false||||||
<P>
``The system of Roman numerals is a numeral system originating from ancient Rome, and was adapted from Etruscan numerals. The system used in classical antiquity was slightly modified in the Middle Ages to produce the system we use today. It is based on certain letters which are given values as numerals." (From wikipedia.org) 

<P>
Since ACM is where innovation starts, a new numeral system, called Nuevo-Romano, is derived from the Roman numerals with one slight modification. The basic set of Roman Numeral systems are:  

<P>

<UL>
<LI><TT>I</TT> or <TT>i</TT> for one  
</LI>
<LI><TT>V</TT> or <TT>v</TT> for five  
</LI>
<LI><TT>X</TT> or <TT>x</TT> for ten  
</LI>
<LI><TT>L</TT> or <TT>l</TT> for fifty  
</LI>
<LI><TT>C</TT> or <TT>c</TT> for one hundred  
</LI>
<LI><TT>D</TT> or <TT>d</TT> for five hundred  
</LI>
<LI><TT>M</TT> or <TT>m</TT> for one thousand
</LI>
</UL>

<P>
Nuevo-Romano extends it by adding `<TT>O</TT>' or `<TT>o</TT>' to mean multiplied by one thousand. However, the new numeral is only applied to numerals greater than 3 or III or iii, e.g.  

<P>

<UL>
<LI><TT>IVO</TT> or <TT>ivo</TT> for four thousand  
</LI>
<LI><TT>VO</TT> or <TT>vo</TT> for five thousand  
</LI>
<LI><TT>XO</TT> or <TT>xo</TT> for ten thousand  
</LI>
<LI><TT>MO</TT> or <TT>mo</TT> for one million
</LI>
</UL>

<P>
The same rules for multiple symbol combinations to produce numbers between these values are applied.

<P>

<OL>
<LI>The number is written using the symbols with the symbol of highest value as the first numeral followed by a symbol of lower value except in special cases as defined below. Example: <TT>MMMDCCCLXXVIII</TT> = 3,878. 
</LI>
<LI>The <TT>I</TT> or <TT>i</TT>, <TT>X</TT> or <TT>x</TT>, <TT>C</TT> or <TT>c</TT> and <TT>M</TT> or <TT>m</TT> can be repeated up to a maximum of three times, e.g. <TT>III</TT> or <TT>iii</TT> for three, <TT>XXX</TT> or <TT>xxx</TT> for thirty, <TT>CC</TT> or <TT>cc</TT> for two hundred and <TT>MM</TT> or <TT>mm</TT> for two thousand. 
</LI>
<LI><TT>V</TT>, <TT>L</TT> and <TT>D</TT> can only be used once. 
</LI>
<LI><TT>I</TT>, <TT>X</TT> and <TT>C</TT> can appear before a larger symbol to indicate subtraction. Only the following are allowed: 

<P>
<TT>IV</TT> = 5 - 1 = 4 

<P>
<TT>IX</TT> = 10 - 1 = 9 

<P>
<TT>XL</TT> = 50 - 10 = 40 

<P>
<TT>XC</TT> = 100 - 10 = 90 

<P>
<TT>CD</TT> = 500 - 100 = 400
</LI>
</OL>

<P>
The task is to determine the sum of two Nuevo-Romano numbers and output both the Nuevo-Romano number and the Latin alphabet-based Arabic number. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Each line in the input consists of two Nuevo-Romano numbers separated by a `<TT>+</TT>' sign. The input is in mixed case. If the given Nuevo-Romano number is not a valid one, print ``<TT>INVALID</TT>" in the line. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The sum expressed as a Nuevo-Romano number in uppercase and its Arabic number form separated by an `<TT>=</TT>' sign.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
XLII+CC 
MODccXLIX+cxi 
COD+IC 
LXIIOCCLXXXVIII+IVOCXX
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
CCXLII=242 
MODCCCLX=1000860 
INVALID 
LXVIOCDVIII=66408
</PRE> 

<P>

______________________________________________________
3168||||||false||||||
<P>Given a rectangular region of the plane which has been divided into polygons, decide what the maximum number of edges that any of the polygons has. For example, if the region is divided into triangles, then the maximal number is 3. If the region is divided into, say, 7 triangles and 2 squares, then the maximal number is 4.<P>There will be a list of pairs of <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates: Each <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates represents a vertex, and consequently each pair of coordinates represents an edge. The edges collectively divide the rectangular region naturally into disjoint ``<SPAN CLASS="MATH"><I>n</I></SPAN>-gons". (Explanation: A triangle is a 3-gon, a square is an example of a 4-gon, etc.) That is, the boundary of each <SPAN CLASS="MATH"><I>n</I></SPAN>-gon is a union of edges.<P>Figure 1 is a sketch of an example <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> rectangular region divided into five 3-gons, a 5-gon and a 10-gon.<P><DIV ALIGN="CENTER"><IMG WIDTH="269" HEIGHT="281" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3168img1.png ALT="\epsfbox{p3168.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: Sample sketch</DIV><P>The pairs of coordinates representing the edges of the 5-gon would be:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">{((3, 4),(4, 4)),((4, 4),(4, 3)),((3, 4),(3, 3)),((3, 3),(4, 2)),((4, 3),(4, 2))}</DIV><P></P><P>The maximal number of edges in this example is 10. That is, this example has a 10-gon.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of an input will consist of an integer n representing the number of edges per test case. Each test case will then contain <SPAN CLASS="MATH"><I>n</I></SPAN> pairs of <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates where <SPAN CLASS="MATH"><I>x</I>, <I>y</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3168img1.png ALT="$ \in$"> <I>Z</I></SPAN> which represent edges dividing a rectangular region into <SPAN CLASS="MATH"><I>n</I></SPAN>-gons. Each integer will be separated by a white space. Overlapping edges will not be specified in the input. The input will terminate for <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be an integer describing the maximal number of edges that any of those <SPAN CLASS="MATH"><I>n</I></SPAN>-gon has. Separate each test case with a new line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
21 
1 1 1 2 
1 2 1 3 
1 3 1 4 
1 1 2 1 
2 1 3 1 
3 1 4 1 
1 4 2 4 
2 4 3 4 
3 4 4 4 
4 1 4 2 
4 2 4 3 
4 3 4 4 
2 3 2 4 
2 3 3 4 
2 3 3 3 
3 3 3 4 
3 3 4 2
2 1 3 2 
3 2 3 1 
4 1 3 2 
3 2 4 2 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10
</PRE><P>
______________________________________________________
3169||||||false||||||
<P>The convex hull of a set of points <SPAN CLASS="MATH"><I>Q</I></SPAN> on a plane is the smallest convex polygon <SPAN CLASS="MATH"><I>P</I></SPAN> for which each point in <SPAN CLASS="MATH"><I>Q</I></SPAN> is in the boundary or inside <SPAN CLASS="MATH"><I>P</I></SPAN> .<P>``The problem of finding convex hulls finds its practical applications in pattern recognition, image processing, statistics and geographic information systems or GIS. It also serves as a tool, a building block for a number of other computational-geometric algorithms. For example, consider the problem of finding the diameter of a set of points, which is the pair of points a maximum distance apart. The diameter will always be the distance between two points on the convex hull.<P>For planar objects, i.e., lying in the plane, the convex hull may be easily visualized by imagining an elastic band stretched open to encompass the given objects; when released, it will assume the shape of the required convex hull. It may seem natural to generalise this picture to higher dimensions by imagining the objects enveloped in a sort of idealized unpressurized elastic membrane or balloon under tension. However, the equilibrium (minimum-energy) surface in this case may not be the convex hull-parts of the resulting surface may have negative curvature, like a saddle surface. For the case of points in 3-dimensional space, if a rigid wire is first placed between each pair of points, then the balloon will spring back under tension to take the form of the convex hull of the points." (<SPAN CLASS="textit">from Wikipedia</SPAN>)<P>Write a program that outputs the convex polygon <SPAN CLASS="MATH"><I>P</I></SPAN> for a set of points <SPAN CLASS="MATH"><I>Q</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The set of points in <SPAN CLASS="MATH"><I>Q</I></SPAN> are given in one line and the program should be able to read any number of lines where each line is one set of points in <SPAN CLASS="MATH"><I>Q</I></SPAN>. Each point is of the format <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> where <SPAN CLASS="MATH"><I>x</I>, <I>y</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3169img1.png ALT="$ \in$"> <I>R</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each test case will be displayed in one line of output. The first point and the last point of the convex hull must match. Any sequence of points defining the convex hull will be considered valid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
(-2,1) (-1,-2) (-1,1) (-1,2) (-1,3) (0,0) (1,-1) (1,1) (2,-2) (2,1) (3,2)
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
(-1,-2) (2,-2) (3,2) (-1,3) (-2, 1) (-1,-2)
</PRE><P>
______________________________________________________
3170||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> be two strings over some finite alphabet <SPAN CLASS="MATH"><I>A</I></SPAN>. We would like to transform <SPAN CLASS="MATH"><I>x</I></SPAN> into <SPAN CLASS="MATH"><I>y</I></SPAN> allowing only operations given below:<P><P><BR><SPAN CLASS="textbf">Deletion:</SPAN> a letter in <SPAN CLASS="MATH"><I>x</I></SPAN> is missing in <SPAN CLASS="MATH"><I>y</I></SPAN> at a corresponding position.<P><SPAN CLASS="textbf">Insertion:</SPAN> a letter in <SPAN CLASS="MATH"><I>y</I></SPAN> is missing in <SPAN CLASS="MATH"><I>x</I></SPAN> at a corresponding position.<P><SPAN CLASS="textbf">Change:</SPAN> letters at corresponding positions are distinct<P><P><BR>Certainly, we would like to minimize the number of all possible operations.<P><P><BR><SPAN CLASS="textbf">Illustration</SPAN><P><PRE>
A  G  T  A  A  G  T  *  A  G  G  C
|  |  |           |     |     |  |
A  G  T  *  C  *  T  G  A  C  G  C
</PRE><P><SPAN CLASS="textbf">Deletion:</SPAN> <SPAN CLASS="MATH"><TT>*</TT></SPAN> in the bottom line<P><SPAN CLASS="textbf">Insertion:</SPAN> <SPAN CLASS="MATH"><TT>*</TT></SPAN> in the top line<P><SPAN CLASS="textbf">Change:</SPAN> when the letters at the top and bottom are distinct<P><P><BR>This tells us that to transform <SPAN CLASS="MATH"><I>x</I></SPAN> = AGTCTGACGC into <SPAN CLASS="MATH"><I>y</I></SPAN> = AGTAAGTAGGC we could be required to perform 5 operations (2 changes, 2 deletions and 1 insertion). If we want to minimize the number operations, we should do it like<pre>
A  G  T  A  A  G  T  A  G  G  C
|  |  |        |     |     |  |
A  G  T  C  T  G  *  A  C  G  C
</pre>and 4 moves would be required (3 changes and 1 deletion).<P>In this problem we would always consider strings <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> to be fixed, such that the number of letters in <SPAN CLASS="MATH"><I>x</I></SPAN> is <SPAN CLASS="MATH"><I>m</I></SPAN> and the number of letters in <SPAN CLASS="MATH"><I>y</I></SPAN> is <SPAN CLASS="MATH"><I>n</I></SPAN> where <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3170img1.png ALT="$ \ge$"><I>m</I></SPAN>.<P>Assign 1 as the cost of an operation performed. Otherwise, assign 0 if there is no operation performed.<P>Write a program that would minimize the number of possible operations to transform any string <SPAN CLASS="MATH"><I>x</I></SPAN> into a string <SPAN CLASS="MATH"><I>y</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several datasets. Each dataset consists of the strings <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> prefixed by their respective lengths, one in each line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, an integer representing the minimum number of possible operations to transform any string <SPAN CLASS="MATH"><I>x</I></SPAN> into a string <SPAN CLASS="MATH"><I>y</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 AGTCTGACGC 
11 AGTAAGTAGGC
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
</PRE><P>
______________________________________________________
3171||||||false||||||
<P>
In the 25th century, civilization is struck by a series of calamities that eventually led mankind to build walled cities interconnected by tunnel bridges to facilitate transportation. Each walled city possesses a unique ore required to build and repair all infrastructure including the tunnels. This material which when combined with other ores from all others cities form an almost indestructible material called ``oreon". 

<P>
Outside the walled cities are uncivilized barbarians armed with antiquated but destructive weaponry which can effectively shoot down any air transport, but only damage and not penetrate tunnel bridges. Thus each city is interconnected to more than one city in order to have access redundancy in case one of its interconnecting tunnels is damaged. 

<P>
If a tunnel is damaged, it becomes impassable and would require a substantial amount of ``oreon" to repair the damage. When a single city is made isolated, meaning all of its interconnections are damaged, ``oreon" cannot be manufactured which may lead to the eventual destruction of the wall fortifying the city. You, being the head of the homeland defense unit, are tasked to ensure that all cities remain accessible even by at least a single interconnecting tunnel at all times. Faced with only a limited manpower in the defense unit, you have to determine which tunnel to protect using the least number of people and ensure that no city will be isolated. 

<P>
Figure 2 shows a map of the walled cities, their interconnecting tunnels and the number of security personnel.

<P>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p3171.eps}$
 -->
<IMG
 WIDTH="830" HEIGHT="485" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3171img1.png
 ALT="\epsfbox{p3171.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 2: Map of six cities and its interconnecting tunnels

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input will contain several test cases. The first line will indicate the number of test cases. Each test case begins with a number representing the number of walled cities. Cities are labeled alphabetically using the letters in the English alphabet. The subsequent lines contain the number of security personnel needed to protect the tunnel connecting each city to all other cities. A value of zero implies no security personnel needed since no tunnel exists. You are to output which tunnel should be protected and how many personnel are needed for each tunnel. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output shows the tunnel connection which is named after the cities that it connects (in alphabetical order) and the number of personel needed to protect the tunnel. Order the records in increasing order of presonal. In case two tunnels have the same number of personel, write them in lexicographycal order.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
6 
0, 8, 12, 0, 0, 7 
8, 0, 0, 3, 0, 0 
12, 0, 0, 0, 6, 0 
0, 3, 0, 0, 0, 4 
0, 0, 6, 0, 0, 5 
7, 0, 0, 4, 5, 0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1: 
B-D 3 
D-F 4 
E-F 5 
C-E 6 
A-F 7
</PRE> 

<P>

______________________________________________________
3172||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>x</I> = 0.<I>a</I><SUB>1</SUB><I>a</I><SUB>2</SUB><I>a</I><SUB>3</SUB>...</SPAN> be the binary representation of the fractional part of a rational number <SPAN CLASS="MATH"><I>z</I></SPAN>. Suppose that <SPAN CLASS="MATH">{<I>x</I>}</SPAN> is periodic then, we can write<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">{<I>x</I>} = 0.<I>a</I><SUB>1</SUB><I>a</I><SUB>2</SUB>...<I>a</I><SUB>r</SUB>(<I>a</I><SUB>r+1</SUB><I>a</I><SUB>r+2</SUB>...<I>a</I><SUB>r+s</SUB>)<SUP><IMG WIDTH="13" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$\scriptstyle \omega$"></SUP></DIV><P></P>for some integers <SPAN CLASS="MATH"><I>r</I></SPAN> and <SPAN CLASS="MATH"><I>s</I></SPAN> with <SPAN CLASS="MATH"><I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$ \ge$"> 0</SPAN> and <SPAN CLASS="MATH"><I>s</I> &gt; 0</SPAN>. Also, <SPAN CLASS="MATH">(<I>a</I><SUB>r+1</SUB><I>a</I><SUB>r+2</SUB>...<I>a</I><SUB>r+s</SUB>)<SUP><IMG WIDTH="13" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$\scriptstyle \omega$"></SUP></SPAN> denotes a nonterminating and repeating binary subsequence of <SPAN CLASS="MATH">{<I>x</I>}</SPAN>.<P>The subsequence <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> = <I>a</I><SUB>1</SUB><I>a</I><SUB>2</SUB>...<I>a</I><SUB>r</SUB></SPAN> is called the <SPAN CLASS="textit">preperiod</SPAN> of <SPAN CLASS="MATH">{<I>x</I>}</SPAN> and <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB> = <I>a</I><SUB>r+1</SUB><I>a</I><SUB>r+2</SUB>...<I>a</I><SUB>r+s</SUB></SPAN> is the period of <SPAN CLASS="MATH">{<I>x</I>}</SPAN>.<P>Suppose that <SPAN CLASS="MATH">| <I>x</I><SUB>1</SUB>|</SPAN> and <SPAN CLASS="MATH">| <I>x</I><SUB>2</SUB>|</SPAN> are chosen as small as possible then <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> is called the least preperiod and <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> is called the least period of <SPAN CLASS="MATH">{<I>x</I>}</SPAN>.<P>For example, <SPAN CLASS="MATH"><I>x</I> = <IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$ {\frac{{1}}{{10}}}$"> = 0.0001100110011(00110011)<SUP><IMG WIDTH="13" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$\scriptstyle \omega$"></SUP></SPAN> and 0001100110011 is a preperiod and 00110011 is a period of <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$ {\frac{{1}}{{10}}}$"></SPAN>.<P>However, we can write <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$ {\frac{{1}}{{10}}}$"></SPAN> also as <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$ {\frac{{1}}{{10}}}$"> = 0.0(0011)<SUP><IMG WIDTH="13" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$\scriptstyle \omega$"></SUP></SPAN> and 0 is the least preperiod and 0011 is the least period of <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$ {\frac{{1}}{{10}}}$"></SPAN><P>The least period of <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$ {\frac{{1}}{{10}}}$"></SPAN> starts at the 2nd bit to the right of the binary point and the the length of the least period is 4.<P>Write a program that finds the position of the first bit of the least period and the length of the least period where the preperiod is also the minimum of a positive rational number less than 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each line is test case. It represents a rational number <SPAN CLASS="MATH"><I>p</I>/<I>q</I></SPAN> where <SPAN CLASS="MATH"><I>p</I></SPAN> and <SPAN CLASS="MATH"><I>q</I></SPAN> are integers, <SPAN CLASS="MATH"><I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3172img1.png ALT="$ \ge$"> 0</SPAN> and <SPAN CLASS="MATH"><I>q</I> &gt; 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each line corresponds to a single test case. It represents a pair where the first number is the position of the first bit of the least period and the the second number is the length of the least period of the rational number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1/10 
1/5 
101/120 
121/1472
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 2,4 
Case #2: 1,4 
Case #3: 4,4 
Case #4: 7,11
</PRE><P>
______________________________________________________
3173||||||false||||||
<P>You have been tasked to infiltrate a tight-lipped society for fun and profit: the ACM ICPC regional judges. Through the PC<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> ``submission" software, you know that classified information is accessible through the log-ins of the judges tasked to a particular ``regional site". However, you are not certain that any particular judge has access to all the relevant information, so several log-ins will be required. You have been handed down a list of usernames, and the passwords used can be derived from these usernames, as follows:<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will only have capital letters (denoting the usernames) and carriage returns. Each line (thus each username) will not be longer than twenty characters, and there will not be more than 12 ``judges" whose log-ins you will need to infiltrate. Strangely, no username uses any letter more than once.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each username, you must produce a line containing the password which that username uses. The password for a given username is determined from the twenty-one lexicographically consecutive permutations of the username, the eleventh (middle) of which is the username itself. For example, if the username is <TT>WORDFISH</TT>, the lexicographic permutations of WORDFISH contain, in order:<P><P><BR><TT>..., WOISHRFD, WOISRDFH, WOISRDHF, WOISRFDH, WOISRFHD, WOISRHDF, WOISRHFD, WORDFHIS, WORDFHSI, WORDFIHS, WORDFISH, WORDFSHI, WORDFSIH, WORDHFIS, WORDHFSI, WORDHIFS, WORDHISF, WORDHSFI, WORDHSIF, WORDIFHS, WORDIFSH, ... </TT><P><P><BR>The password is then the permutation among the twenty-one lexicographically consecutive permutations of the username which has the largest minimum absolute distance between consecutive letters (and the first amongst the lexicographically ordered, if several permutations have the largest minimum absolute distance), followed by that minimum absolute distance. For the username <TT>WORDFISH</TT>, the password is WORDHSFI3<SPAN CLASS="MATH"><SUP>1</SUP></SPAN> .<P><P><BR><SPAN CLASS="MATH"><SUP>1</SUP></SPAN> <SPAN CLASS="textbf">Disclaimer:</SPAN> The above story is completely fictional, and in no way represents any fact, regarding ACM regional judges, their passwords or world domination.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
WORDFISH
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
WORDHSFI3
</PRE><P>
______________________________________________________
3174||||||false||||||
<P>There are many different kinds of explosives, each having slightly different properties. One method of detecting concealed explosives in luggage is to take an X-ray and look for areas where the density of the image falls into the appropriate range for a recognized explosive signature. Your job is to automate this detection, given the signatures of the explosives and an X-ray image.<P>The X-ray image will be provided as a two-dimensional array of integers in the range 0 to 2000, each representing the density of a small region. Each explosive signature is a triple <SPAN CLASS="MATH">(<I>L</I>, <I>H</I>, <I>M</I>)</SPAN>, where <SPAN CLASS="MATH"><I>L</I></SPAN> and <SPAN CLASS="MATH"><I>H</I></SPAN> represent the lowest and highest values in the image that can appear in a particular explosive type, and <SPAN CLASS="MATH"><I>M</I></SPAN> represents the minimum total ``mass" (or cumulative density) of a connected region that could possibly contain that type of explosive. ``Connected" means that the cells in the X-ray image of the explosive are adjacent horizontally or vertically, but not diagonally.<P><P><BR>For example, assume we have two explosive signatures (2, 4, 12) and (4, 6, 22), and part of an X-ray image as shown in the three illustrations below. In the left and middle illustrations explosives of type one (2, 4, 12) have been detected (as shown by the shaded cells). An explosive of type two (4, 6, 22) was detected in the third illustration. Note that the cells occupied by different types of explosives may overlap.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3174.jpg ALT="\epsfbox{p3174.eps}"></DIV><P>Each time an explosive is detected, an ``alarm" is generated. You are to process images to determine how many alarms for each explosive type will be generated, if any.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. Each case will begin with a series of no more than 10 integer triples, each giving the <SPAN CLASS="MATH"><I>L</I></SPAN>, <SPAN CLASS="MATH"><I>H</I></SPAN>, and <SPAN CLASS="MATH"><I>M</I></SPAN> values for a type of explosive to be detected; this is followed by three integer zeroes. Then there will appear 100 integers representing a 10-row, 10-column X-ray image, in row-major order (the first 10 integers are the first row, the second 10 are the second row, and so forth). The last case is followed by three integer zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each case should begin with a line giving the input case number (starting with 1 and increasing sequentially). If there are no alarms for an input case, the output should then contain a line containing the text `<TT>No alarms generated</TT>'. If, however, the X-ray image does trigger one or more alarms, you should display one line for each type of alarm generated indicating the type and number of such alarms. These should be displayed in increasing order of alarm type. All lines except the line giving the case number should be indented four columns, and the output for consecutive cases must be separated by a blank line. Use the sample as a guide to the desired output format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 4 12
4 6 22
0 0 0
4 5 6 4 0 0 0 0 0 0
2 2 1 4 0 0 0 0 0 0
1 2 0 4 0 0 0 0 0 0
1 2 0 2 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
9 9 27
20 20 40
1 9 15
0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 1 5 0 0 0 0 0
5 1 1 1 0 0 0 0 0 0
0 0 0 1 5 0 0 0 9 9
0 0 0 0 0 0 0 0 5 5
0 0 0 0 0 0 0 0 9 9
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 9 9 9
1 5 8
3 10 4
0 0 0
1 1 0 1 1 1 0 1 0 7
1 1 0 1 1 1 0 1 0 1
1 1 0 1 1 1 0 1 1 1
1 1 0 1 1 1 0 0 0 0
0 0 0 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 0 0 0 1 1 1
1 1 1 1 0 9 0 1 1 1
1 1 1 1 0 0 0 1 1 1
1 1 1 1 1 1 1 1 1 1
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
    2 alarms of type 1
    1 alarm of type 2

Case 2:
    1 alarm of type 1
    3 alarms of type 3

Case 3:
    2 alarms of type 1
    2 alarms of type 2
</PRE><P>
______________________________________________________
3175||||||false||||||
<P>In this problem we consider a limited form of the ``take-grant protection model." In this model, a system is represented as a graph. Vertices are normally either subjects (users or processes, the active agents in the system) or objects (for example, files). Directed edges between vertices are labeled to indicate the rights that the source vertex has with respect to the destination vertex.<P>In this limited form of the model, we will consider only subject vertices.<P>Two rights of particular interest give this model its name. The ``take" right, indicated by the letter `<TT>t</TT>', means a subject can take (a copy of, as its own) a right possessed by the vertex pointed to by the edge labeled ``t". The ``grant" right, identified by the letter `<TT>g</TT>', means a subject can give (a copy of) a right relative to a vertex to another subject. When the ``take" or ``grant" occurs, a new edge is created in the graph if necessary, or the additional rights are added to the label on an existing edge. Note that rights are always specified with respect to a particular vertex.<P><P><BR>As an example, consider the graph shown on the left below. Subject B possesses rights <TT>x</TT>, <TT>y</TT> and <TT>z</TT> to D as indicated by the edge from B to D labeled ``xyz". Likewise, B has the right to grant to A some or all of the rights it has; this is indicated by the edge from B to A labeled ``g". Finally, subject C has the right to take (copy) from B any of the rights it possesses (indicated by the edge from C to B labeled ``t").<P>Suppose B should grant the rights ``<TT>xz</TT> to D" to subject A, and C should take the rights ``<TT>xy</TT> to D" from B. Then the resulting graph would be as shown on the right. Note that C could also have taken the ``grant to A" right possessed by B, which would have added an edge from C to A labeled ``g".<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3175.jpg ALT="\epsfbox{p3175.eps}"></DIV><P>Rights can be exercised at any time, and the same right can be exercised repeatedly. Subjects may also perform two additional actions. ``Create" can be used by a subject <SPAN CLASS="MATH"><I>S</I></SPAN> to add a new vertex <SPAN CLASS="MATH"><I>V</I></SPAN> to the graph and an edge from <SPAN CLASS="MATH"><I>S</I></SPAN> to <SPAN CLASS="MATH"><I>V</I></SPAN>; this new edge can be labeled with any rights desired. ``Remove" allows a subject <SPAN CLASS="MATH"><I>S</I></SPAN> to remove some or all of the rights it possesses to a subject <SPAN CLASS="MATH"><I>V</I></SPAN>; if all of the rights from <SPAN CLASS="MATH"><I>S</I></SPAN> to <SPAN CLASS="MATH"><I>V</I></SPAN> are removed, so is the edge from <SPAN CLASS="MATH"><I>S</I></SPAN> to <SPAN CLASS="MATH"><I>V</I></SPAN>. If a vertex has no edges to or from it, then it is removed. Every subject always has the right to create a new subject vertex with arbitrary rights to it, and to remove any rights it already possesses to vertices.<P>Given the graph for an initial system state, and a graph showing a possible future state, we wish to know whether that future system state could be reached using only the four types of actions (take, grant, create, and remove) just described. Rights are represented by a set of 26 or fewer lowercase letters (with `<TT>g</TT>' and `<TT>t</TT>' indicating ``grant" and ``take" rights). The subject vertices in the possible future state are the same as those in the initial state (which does not preclude the possibility that additional subject vertices may be created and removed between the initial and possible future state).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases to consider. The input for each case consists of the graph describing the initial system state, followed by the graph for the possible future system state. Each of these graphs is specified by several input lines. The first line contains an integer <SPAN CLASS="MATH"><I>NV</I></SPAN> giving the number of vertices (never more than 10) and an integer <SPAN CLASS="MATH"><I>NE</I></SPAN> giving the number of edges. The labels for the vertices are the first <SPAN CLASS="MATH"><I>NV</I></SPAN> uppercase letters (<TT>A</TT>, <TT>B</TT>, ...). Then there is a sequence of <SPAN CLASS="MATH"><I>NE</I></SPAN> lines, one for each edge. Each of these lines begins with a pair of uppercase letters <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>D</I></SPAN> (separated by a space) identifying the source and destination vertices for an edge in the graph, a space, and a string containing between 1 and 26 lowercase alphabetic characters identifying the rights <SPAN CLASS="MATH"><I>S</I></SPAN> has with respect to <SPAN CLASS="MATH"><I>D</I></SPAN>.<P>The last case is followed by a line containing two integer zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (1, 2, ...) and the word `<TT>yes</TT>' or `<TT>no</TT>' to indicate if the second graph could, or could not be obtained from the first graph by some sequence of take, grant, create, and remove rule applications. Separate the output for consecutive cases with a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3
B A g
C B t
B D xyz
4 5
B A g
C B t
B D xyz
C D xyz
A D xyz
3 2
A B x
C B ty
3 2
A B x
C B tyx
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: yes

Case 2: no
</PRE><P>
______________________________________________________
3176||||||false||||||
<P>The <EM>Warring States Period</EM> (473-22l BC) refers to the centuries of turmoil following the Spring and Autumn Period. China was divided into many little kingdoms that were constantly fighting with each other. Unlike in previous ages, when chivalry played an important role in battles and the states fought mostly for balance of power or to resolve disputes, in this period the aim of battle was to conquer and completely annihilate the other states. Eventually seven states, known as the ``Seven Great Powers'' rose to prominence: Qi, Chu, Yan, Han, Zhao, Wei, and Qin. After numerous alliances and counter-alliances, Qin defeated all the other states one by one, putting an end to the Warring States Period.<P>You are given a map that shows the position of the capital for each state, and the borders between the states as a series of line segments. Your job is to determine which states were fighting with each other. This is pretty easy to determine - if two states had a common border, then they were fighting.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several bloks of test cases. Each case begins with a line containing two integers: the number <SPAN CLASS="MATH"><I>l</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3176img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3176img1.png ALT="$ \le$">600</SPAN> of states, and the number <SPAN CLASS="MATH"><I>l</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3176img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3176img1.png ALT="$ \le$">4000</SPAN> of border segments. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines describe the coordinates of capitals, there are two integers in each line. The next <SPAN CLASS="MATH"><I>m</I></SPAN>, lines after that describe the <SPAN CLASS="MATH"><I>m</I></SPAN>, border segments. Each line contains four integers. <SPAN CLASS="MATH"><I>x</I><SUB>l</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>l</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>, meaning that there is a border segment from <SPAN CLASS="MATH">(<I>x</I><SUB>l</SUB>, <I>y</I><SUB>l</SUB>)</SPAN> to <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>. (It is not given in the input what the two states on the two sides of the border are, but it can be deduced from the way the borders go.)<P>Each state is enclosed by a continuous borderline. The states are surrounded by an infinite wasteland, thus a border segment either separates two states, or a state from the wasteland. It is not possible that the same state is on both sides of a border segment, or the wasteland is on both sides of a border segment. There is exactly one capital in each state, and there is no capital in the wasteland. The border segments do not cross each other, they can meet only at the end points.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = <I>O</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output <SPAN CLASS="MATH"><I>n</I></SPAN> lines that describe the enemies of the <SPAN CLASS="MATH"><I>n</I></SPAN> states (recall that if two states share a border, then they are enemies). Each line begins with an integer, the number <SPAN CLASS="MATH"><I>x</I></SPAN> of enemies the given state has. This number is followed by <SPAN CLASS="MATH"><I>x</I></SPAN> numbers identifying the enemies of the state. These numbers are between l and <SPAN CLASS="MATH"><I>n</I></SPAN> and number l refers to the first capital appearing in the input, number <SPAN CLASS="MATH"><I>n</I></SPAN> refers to the last.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 12
3 2
11 8
12 17
1 19
0 0 10 0
10 0 20 0
20 0 20 10
20 10 20 20
20 20 10 20
10 20 0 20
0 20 0 10
0 10 0 0
10 0 10 10
0 10 10 10
20 10 10 10
10 20 10 10
4 16
170 13
24 88
152 49
1 10 130
60 60 140 60
140 60 140 140
140 140 60 140
60 140 60 60
0 0 200 0
200 0 200 200
200 200 0 200
0 200 0 0
40 40 160 40
160 40 160 160
160 160 40 160
40 160 40 40
20 20 180 20
180 20 180 180
180 180 20 180
20 180 20 20
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 2 4
2 1 3
2 2 4
2 1 3
1 2
2 1 3
2 2 4
1 3
</PRE><P>
______________________________________________________
3177||||||false||||||
<P>Beijing was once surrounded by four rings of city walls: the Forbidden City Wall, the Imperial City Wall, the Inner City Wall, and finally the Outer City Wall. Most of these walls were demolished in the 50s and 60s to make way for roads. The walls were protected by guard towers, and there was a guard living in each tower. The wall can be considered to be a large ring, where every guard tower has exaetly two neighbors.<P>The guard had to keep an eye on his section of the wall all day, so he had to stay in the tower. This is a very boring job, thus it is important to keep the guards motivated. The best way to motivate a guard is to give him lots of awards. There are several different types of awards that can be given: the Distinguished Service Award, the Nicest Uniform Award, the Master Guard Award, the Superior Eyesight Award, etc. The Central Department of City Guards determined how many awards have to be given to each of the guards. An award can be given to more than one guard. However, you have to pay attention to one thing: you should not give the same award to two neighbors, since a guard cannot be proud of his award if his neighbor already has this award. The task is to write a program that determines how many different types of awards are required to keep all the guards motivated.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test eases. Each case begins with a line containing a single integer <SPAN CLASS="MATH"><I>l</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3177img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3177img1.png ALT="$ \le$">100000</SPAN>, the number of guard towers. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines correspond to the <SPAN CLASS="MATH"><I>n</I></SPAN> guards: each line contains an integer, the number of awards the guard requires. Each guard requires at least 1, and at most l00000 awards. Guard <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>i</I> + 1</SPAN> are neighbors, they cannot receive the same award. The first guard and the last guard are also neighbors.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a line containing a single integer, the minimum number <SPAN CLASS="MATH"><I>x</I></SPAN> of award types that allows us to motivate the guards. That is, if we have <SPAN CLASS="MATH"><I>x</I></SPAN> types of awards, then we can give as many awards to each guard as he requires, and we can do it in such a way that the same type of award is not given to neighboring guards. A guard can receive only one award from each type.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
4
2
2
5
2
2
2
2
2
5
1
1
1
1
1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
5
3
</PRE><P>
______________________________________________________
3178||||||false||||||
<P>A <SPAN CLASS="textit">walk</SPAN> <SPAN CLASS="MATH"><I>W</I></SPAN> in a graph <SPAN CLASS="MATH"><I>G</I></SPAN> is a finite sequence<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>v</I><SUB>o</SUB><I>e</I><SUB>1</SUB><I>v</I><SUB>1</SUB><I>e</I><SUB>2</SUB><I>v</I><SUB>2</SUB>...<I>v</I><SUB>k-1</SUB><I>e</I><SUB>k</SUB><I>v</I><SUB>k</SUB></DIV><P></P>whose terms are alternately vertices and edges such that, for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3178img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3178img1.png ALT="$ \le$"><I>k</I></SPAN>, the edge <SPAN CLASS="MATH"><I>e</I><SUB>i</SUB></SPAN> has end vertices <SPAN CLASS="MATH"><I>v</I><SUB>i-1</SUB></SPAN> and <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN>. If the edges <SPAN CLASS="MATH"><I>e</I><SUB>1</SUB>, <I>e</I><SUB>2</SUB>,..., <I>e</I><SUB>k</SUB></SPAN> of the walk are distinct, then <SPAN CLASS="MATH"><I>W</I></SPAN> is called a <SPAN CLASS="textit">trail</SPAN>. A trail with <SPAN CLASS="MATH"><I>v</I><SUB>o</SUB><IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3178img1.png ALT="$ \ne$"><I>v</I><SUB>k</SUB></SPAN> is an open trail. If <SPAN CLASS="MATH"><I>v</I><SUB>o</SUB> = <I>v</I><SUB>k</SUB></SPAN>, then <SPAN CLASS="MATH"><I>W</I></SPAN> is a closed walk. A tour of <SPAN CLASS="MATH"><I>G</I></SPAN> is a closed walk of <SPAN CLASS="MATH"><I>G</I></SPAN> that includes every edge of <SPAN CLASS="MATH"><I>G</I></SPAN> at least once.<P>Write a program that determines whether for a graph <SPAN CLASS="MATH"><I>G</I></SPAN>:<P><OL><LI>there exists an open trail that includes every edge of G, or not; and </LI><LI>there exists a tour that includes every edge of G exactly once, or not </LI></OL>where graph <SPAN CLASS="MATH"><I>G</I></SPAN> is undirected, has at least 2 edges, has no self-loops (i.e., edges <SPAN CLASS="MATH">(<I>v</I><SUB>i</SUB>, <I>v</I><SUB>i</SUB>)</SPAN>), but may contain parallel edges (i.e., 2 or more edges having the same end vertices).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases, each with a case number, the set of vertices in a graph, and the set of edges in the graph, as shown in the samples. Assume the vertices are single letters only.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each of the test cases, output ``<TT>Yes</TT>" if the graph has at least one open trail that includes every edge of the graph, and ``<TT>No</TT>", if not; and output ``<TT>Yes</TT>" if the graph has at least one tour that includes every edge of the graph exactly once, and ``<TT>No</TT>" if not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Case 1: { a, b, c, d, e } { (a,b), (b,c), (c,d), (d,a), (b,e), (c,e) }
Case 2: { a, b, c, d, e } { (a,b), (a,c), (b,e), (b,d), (b,c), (d,c),
(d,e), (d,e), (e,c) } 
Case 3: { A, B, c, d } { (A,B), (c,d) }
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Yes No 
No Yes 
No No
</PRE><P>
______________________________________________________
3179||||||false||||||
<P>The Gobi Desert is the second largest desert in the world. It lies north of Huang He (Yellow River) on the border of China and Mongolia, extending some 500 km into both countries. Unlike the Sahara, only 5% of the Gobi Desert is covered by sand dunes, thus it is capable of supporting a wide variety of wild life, such as wild sheep, wild ass, and the Gobi bear. The desert is also home to nomadie tribes. The oases in the Gobi Desert are often rich and fertile. However, life is a bit boring there, and you may have to walk hundreds of kilometers to find a movie or theater. To bring some entertainment to the people, we will install three television stations in the desert. According to the standards of the Gobi Desert Broadcasting Company, we have the following requirements:<P><UL><LI>A station can be installed only in an oasis. </LI><LI>Two stations cannot be in the same oasis. </LI><LI>A station broadcasts in a given direction, and an oasis receives the program only if its direction differs by at most 45 degrees from the direction of the station. Example: a station at coordinates (10, 10) can broadcast to the oases at (10, 11) and (11, 10) at the same time. It can also broadcast to the oases at (10, 11) and (9, 11) at the same time. However, it cannot broadcast to all three oases at (10, 11), (11, 10), and (9, 11) at the same time. </LI><LI>We have to install three stations such that all three of them can be received in <SPAN CLASS="textit">every oasis</SPAN>. </LI><LI>We assume that if a station is installed in an oasis, then this oasis can receive the program regardless of the direction of the station. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing an integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3179img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3179img1.png ALT="$ \le$">20000</SPAN>, the number of cases. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain three integers each, the coordinates of the cases and the cost of installing a station there. The coordinates are between -25000 and 25000, and the cost is between 1 and 10000000.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a separate line containing three integers: the cases where the stations are installed. The cases are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. The three numbers should be printed in increasing order. If there are multiple solutions, then select the solution where the cost of installing the three stations is minimal (there will be at most one minimal solution). If it is not possible to place the stations such that all the requirements are satisfied, then write `<TT>Impossible</TT>' (without quotes).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8
0 5 1
5 0 2
10 5 3
5 10 4
0 0 5
10 10 6
0 10 7
10 0 8
4
0 0 1
1 1 10
2 0 2
1 5 20
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 6 7
1 3 4
</PRE><P>
______________________________________________________
3180||||||false||||||

<P>
After having to reinstall your computer 42 times on the same day, you decided to take a short breack - you
will spend the next 5 years (or more) in Tibet. The population of China is very unevenly distributed: in
the eastern coastal areas the population density can be above 400 people per square kilometer, while in
the western plateaus there are less then lO people per square kilometer. But no part of China is more
sparsely populated than Tibet, where 2.3 million people share 1.2 million square kilometers. You hope
that in the small villages and monasteries of Tibet, no one will ask you to fix their computer.

<P>
But which village should you choose? Looking at the map of Tibet, you see a large number of interesting
places. You want to go to a place where you can visit many monasteries. Each village has a number of
monasteries. Your plan is that you go from village to village to visit as many monasteries as possible.
However, you can only travel 30 kilometers a day, and it is not safe to spend the night in the wilderness.
Thus, depending on your initial position, you can visit only some of the villages. Therefore, you have to
choose your initial position (the village where you start your holiday) carefully, if you want to maximize
the number of monasteries that can be visited.

<P>
A final note: Tibet enjoys an average of 3,000 hours of sunshine a year, so don't forget your sun glasses
and suntan cream!

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several blocks of test cases. Each case begins with a line containing an integer <!-- MATH
 $1 \le n \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3180img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3180img1.png
 ALT="$ \le$">1000</SPAN>,
the number of villages. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains three integers each: the two eoordinates of the
village (in kilometers), and the number of monasteries in the village. The coordinates are between 0 and
20000, the number of monasteries in a village is at most l000. The input is terminated by a block with 0
villages.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case you have to output two integers on a line (separated by spaces). The first integer
identifies the village where you want to go (this number is between 1 and <SPAN CLASS="MATH"><I>n</I></SPAN>), and the second integer is the
number of monasteries that can be visited starting from this location. If there is more than one village
that minimizes the number of reachable monasteries, then choose the one that has the smallest index.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6
100 100 8
0 0 10
0 10 3
10 30 4
1000 1000 4
100 128 3
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 17
</PRE>

<P>

______________________________________________________
3181||||||false||||||

<P>
The Great Wall of China is truly one of the greatest wonders of the world. In 3-rd century BC, Emperor Qin
Shi Huang connected the defensive structures built earlier by the states of Qin, Yan, and Zhao kingdoms.
The purpose of the wall was to defend against raids by the barbarians from Mongolia and Manchuria. The
wall was extended and renovated in later centuries, creating an impressive 6,700 km long fortification.

<P>
The centuries have left their mark on the wall, there are several sections that need immediate renovation.
These sections have to be repaired as soon as possible since they deteriorate every day: if we
do not fix them now, it will be more expensive to repair them later. Thus the Ministry of Monuments
have designed and built the world's first Great Wall Automatic Repair Robot (GWARR), to repair the
damaged sections (we are in the 21-st century, aren't we?) Your task is to write the software that will
guide the robot and decide the order in which the sections are to be repaired.

<P>
For the purpose of this problem, we assume that the Great Wall is a long straight line, and every
location on the wall is identified by a single number (say, the distance from one end). The GWARR is
placed at some location on the wall and it can move with constant speed in both directions. For each
damaged section you are given its location, how much it would cost to repair now, and how the cost would
increase if repaired later. The GWARR works so efficiently that once it is at the exact location of the
damaged section it can repair the wall immediately.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several blocks of test cases. Each case begins with a line containing three integers: an
integer <!-- MATH
 $1 \le n \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$">1000</SPAN>, the number of damaged sections, an integer <!-- MATH
 $1 \le v \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$"><I>v</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$">100</SPAN>, the speed of the GWARR
in distance units/time units, and an integer <!-- MATH
 $1 \le x \le 500000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$"><I>x</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$">500000</SPAN>, the initial position of the GWARR. The
next <SPAN CLASS="MATH"><I>n</I></SPAN> lines describe the <SPAN CLASS="MATH"><I>n</I></SPAN> damaged sections that have to be repaired. Each line contains three integers:
the location <!-- MATH
 $1 \le x \le 500000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$"><I>x</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$">500000</SPAN> of the section, the cost <!-- MATH
 $0 \le c \le 50000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$">50000</SPAN> of repairing it immediately, and
<!-- MATH
 $1 \le \Delta \le 50000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$"><IMG
 WIDTH="19" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \Delta$"><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \le$">50000</SPAN>, the increase in cost per time unit. Therefore, if the section is repaired after t time units
have passed, then we have to pay <!-- MATH
 $c + t \Delta$
 -->
<SPAN CLASS="MATH"><I>c</I> + <I>t</I><IMG
 WIDTH="19" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3181img1.png
 ALT="$ \Delta$"></SPAN> units of money. It can be assumed that the locations of the
sections are all different, and the initial location of the robot is not on the list of damaged seetions.

<P>
The input is terminated by a test case with <!-- MATH
 $n = v = x = 0$
 -->
<SPAN CLASS="MATH"><I>n</I> = <I>v</I> = <I>x</I> = 0</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, you have to output a line containing a single number, the minimum cost of repairing
the wall. This number should be an integer, round <EM>down</EM> the result, if necessary. It can be assumed that
the minimum cost is not more than 1000000000.

<P>
In the optimum solution for the first test case below, we first fix loeation 998 at the cost of 600, then
the location 1010 at the cost of l400, and finally we fix the location 996 at the cost of 84, giving the total
cost 2084.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 1 1000
1010 0 100
998 0 300
996 0 3
3 1 1000
1010 0 100
998 0 3
996 0 3
0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2084
1138
</PRE>

<P>


______________________________________________________
3182||||||false||||||
<P>Gambling has always been very popular in China. Although it was prohibited for most of the time, people nevertheless played Mah Jong, Pai Gow, Fan-Tan, Sic Bo, and other games in secret. In the l930s, Shanghai was home to many illegal gambling dens, controlled by powerful gangs. Most of them were closed in l949 by the Communists, making Shanghai a safer place.<P>In this problem we consider a lesser-known game called Ah Ce Emm. In this game you receive a random amount of pebbles. Your goal is to lose all these pebbles, if you can, then you get a prize. You have several options for modifying the number of pebbles, but you have to pay a certain amount of money for each move:<P><UL><LI><SPAN CLASS="textbf">The fire:</SPAN> if you have at least 11 pebbles, then you can throw away exactly 11 pebbles by paying <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>. </LI><LI><SPAN CLASS="textbf">The dragon:</SPAN> if the number of your pebbles is divisible by 3, then you can throw away exactly one third of your pebbles by paying 1 for each pebble thrown away. Thus if you have 12 pebbles, then with this move you can reduce the number of pebbles to 8 by paying 4. </LI><LI><SPAN CLASS="textbf">The eagle:</SPAN> you can ask for exactly 7 new pebbles by paying <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>. </LI><LI><SPAN CLASS="textbf">The courage:</SPAN> you can double the number of your pebbles and get one additional pebble by paying 1 for each new pebble you get. Thus if you have 3 pebbles, then this move inereases the number of pebbles to 7, at the cost of 4. </LI></UL><P>The amounts <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> vary from game to game. You are not allowed to have more pebbles than initially: if a move would inerease the number of pebbles above the original number, then you cannot choose this move. Your task is to write a program that given the number of pebbles and the values <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, determines the minimum cost of losing all the pebbles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each line of the input contains 3 integers, and corresponds to a different test case. The first number <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3182img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3182img1.png ALT="$ \le$">200000</SPAN> is the initial number of pebbles. The second and third numbers <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3182img1.png ALT="$ \le$"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3182img1.png ALT="$ \le$">500000</SPAN> are the cost of the fire and the eagle.<P>The input is terminated by a line containing three zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case you have to output an integer on a separate line, the minimum cost of losing all the pebbles. If there is no way of reducing the number of pebbles to zero, then write `<TT>Impossible</TT>' (without quotes).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
33 122 200
1000 100 200
2 10 10
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
255
1953
Impossible
</PRE><P>
______________________________________________________
3183||||||false||||||
<P>Two world-famous professors of arechaeology, Professor C. H. Eater and Professor L. Iar, decided to write a book together on the ancient history of China. They figured that by spending five years in China, they could research a sufficient amount of scientific data to write a stunning new book. They divided China into two parts: Professor C. H. Eater colleeted data in the eastern part of the country, while Professor L. Iar was doing research in western China. After five years, they have met with all their collected evidence. Both professors have written some chapters, these chapters have to be combined into a single book. However, they have realized with horror that some of their chapters contain contradictory data. For example, they have obtained different dates for some important events (famous battles, the deaths of some Emperors, ete.) They don't think that it will be possible to write a best-seller with contradictory data, and they really don't want to spend another five years sorting these things out. Thus they plan to get rid of some of the annoying data (while no one is looking). They ask you to determine the minimum number of chapters that will have to be thrown away to make the remaining material non-conflicting.<P>Both professors have written a set of <SPAN CLASS="textit">chapters</SPAN>. Each chapter gives dates for certain events. Two chapters are <SPAN CLASS="textit">conflicting</SPAN> if there is an event when the two chapters give different dates for this same event. Thus if a chapter says that event A was in 234, event B was in 29l, and event C was in 262; and another chapter says that event A was in 234, event C was in 293, and event D was in 2l8, then these two chapters are conflicting. It is not possible to throw away only a single event from a chapter: either you throw away the whole chapter, or you keep it with all the events and dates. It can be assumed that two chapters colleeted by the same professor do not contradict (presumably, they have taken care of these conflicts earlier).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing two integers <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN>, where <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> is the number of chapters written by Professor C. H. Eater, and <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> is the number of chapters written by Professor L. Iar. Both numbers are at most 2000. The next <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> lines describe the <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> chapters of Professor C. H. Eater. Each line begins with an integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3183img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3183img1.png ALT="$ \le$">1000</SPAN>, the number of events whose dates are mentioned in this chapter. This number is followed by <SPAN CLASS="MATH"><I>m</I></SPAN> pairs of integers. The first integer of each pair identifies the event (for simplicity, we assume that the professors assigned a unique code to each event), the second integer is the date of the event. The code is at most l000000, the date is between -10000 and 1000 (we are talking about ancient history here!) These <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> lines are followed by <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> lines that describe the chapters written by Professor L. Iar, which are in the same format.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB> = <I>n</I><SUB>2</SUB> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, you have to output a single integer on a separate line: the minimum number of chapters that have to be deleted to make the book non-conflicting.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3
3 10 999 20 888 77 100
2 30 977 88 -1
2 77 100 40 855
1 10 988
3 88 -1 20 887 77 100
2 30 955 40 -10
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
3184||||||false||||||
<P>The Chinese writing system was developed about 4000 years ago, and it has changed relatively little since then. It consists of more than 40 thousand characters, where each character means a word or an idea. Spoken Chinese differs very much from region to region, but the written language is mostly the same. Thus writing acts as a unifying common language among the different regions.<P>Since over one billion people speak Chinese, it is of great practieal importance to have a program that is capable of translating Chinese text to English. We have developed such a program, but it is not working perfectly. The problem is that Chinese can be written in two different ways: either the characters are written from left to right, or they are written vertically, with the columns going from right to left. The translator program is confused by these two possibilities: the translated English text is reversed. More precisely, the words follow each other in a left to right order, as they should, but the letters in a word go from right to left. Thus instead of the text `<TT>one two three</TT>' , the program produces `<TT>eno owt eerht</TT>'. Your job is to write a program that takes this reversed text, and outputs the correct translation.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing an integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3184img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3184img1.png ALT="$ \le$">100000</SPAN>, the number of lines in this test case. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN>, lines of text . The lengh of each line is at most 1000 characters. The only characters appearing on these lines are the letters `<TT>a</TT>'-`<TT>z</TT>' and the space character.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output the <SPAN CLASS="MATH"><I>n</I></SPAN> lines, with the words reversed. A word is a sequence of characters delimited by spaces, by the start of the line or by the end of the line. The spaces and new line characters have to be printed exactly as they appeared in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
eno owt eerht
2
 abcde
aabb   cac x ab
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
one two three
 edcba
bbaa  cac x ba
</PRE><P>
______________________________________________________
3185||||||false||||||
<P>Ms. Iyo Kiffa-Australis has a balance and only two kinds of weights to measure a dose of medicine.<P>For example, to measure 200mg of aspirin using 300mg weights and 700mg weights, she can put one 700mg weight on the side of the medicine and three 300mg weights on the opposite side (Figure 1). Although she could put four 300mg weights on the medicine side and two 700mg weights on the other (Figure 2), she would not choose this solution because it is less convenient to use more weights.<P>You are asked to help her by calculating how many weights are required.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3185a.jpg ALT="\epsfbox{p3185a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: To measure 200mg of aspirin using three 300mg weights and one 700mg weight</DIV><P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3185a.jpg ALT="\epsfbox{p3185b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2: To measure 200mg of aspirin using four 300mg weights and two 700mg weights</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of datasets. A dataset is a line containing three positive integers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, and d separated by a space. The following relations hold: <SPAN CLASS="MATH"><I>a</I><IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3185a.jpg ALT="$ \ne$"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>a</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3185a.jpg ALT="$ \le$">10000</SPAN>, <SPAN CLASS="MATH"><I>b</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3185a.jpg ALT="$ \le$">10000</SPAN>, and <SPAN CLASS="MATH"><I>d</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3185a.jpg ALT="$ \le$">50000</SPAN>. You may assume that it is possible to measure <SPAN CLASS="MATH"><I>d</I></SPAN> mg using a combination of <SPAN CLASS="MATH"><I>a</I></SPAN> mg and <SPAN CLASS="MATH"><I>b</I></SPAN> mg weights. In other words, you need not consider ``no solution" cases.<P>The end of the input is indicated by a line containing three zeros separated by a space. It is not a dataset.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be composed of lines, each corresponding to an input dataset <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>, <I>d</I> )</SPAN>. An output line should contain two nonnegative integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> separated by a space. They should satisfy the following three conditions.<P><UL><LI>You can measure <SPAN CLASS="MATH"><I>d</I></SPAN> mg using <SPAN CLASS="MATH"><I>x</I></SPAN> many <SPAN CLASS="MATH"><I>a</I></SPAN> mg weights and <SPAN CLASS="MATH"><I>y</I></SPAN> many <SPAN CLASS="MATH"><I>b</I></SPAN> mg weights.<P></LI><LI>The total number of weights <SPAN CLASS="MATH">(<I>x</I> + <I>y</I>)</SPAN> is the smallest among those pairs of nonnegative integers satisfying the previous condition.<P></LI><LI>The total mass of weights <SPAN CLASS="MATH">(<I>ax</I> + <I>by</I>)</SPAN> is the smallest among those pairs of nonnegative integers satisfying the previous two conditions. </LI></UL><P>No extra characters (e.g. extra spaces) should appear in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
700 300 200
500 200 300
500 200 500
275 110 330
275 110 385
648 375 4002
3 1 10000
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1 3
1 1
1 0
0 3
1 1
49 74
3333 1
</PRE><P>
______________________________________________________
3186||||||false||||||

<P>
Your company's next product will be a new game, which is a three-dimensional variant of the
classic game ``Tic-Tac-Toe". Two players place balls in a three-dimensional space (board), and
try to make a sequence of a certain length.

<P>
People believe that it is fun to play the game, but they still cannot fix the values of some
parameters of the game. For example, what size of the board makes the game most exciting?
Parameters currently under discussion are the board size (we call it <SPAN CLASS="MATH"><I>n</I></SPAN> in the following) and the
length of the sequence (<SPAN CLASS="MATH"><I>m</I></SPAN>). In order to determine these parameter values, you are requested to
write a computer simulator of the game.

<P>
You can see several snapshots of the game in Figures 3­5. These figures correspond to the three
datasets given in the Sample Input.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3186a.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="\epsfbox{p3186a.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 3: A game with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 3</SPAN>
</DIV>

<P>
Here are the precise rules of the game.

<P>

<OL>
<LI>Two players, Black and White, play alternately. Black plays first.
</LI>
<LI>There are <!-- MATH
 $n \times n$
 -->
<SPAN CLASS="MATH"><I>n</I>&#215;<I>n</I></SPAN> vertical pegs. Each peg can accommodate up to <SPAN CLASS="MATH"><I>n</I></SPAN> balls. A peg can be
specified by its <SPAN CLASS="MATH"><I>x</I></SPAN>- and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates (<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>n</I></SPAN>). A ball on a peg can be specified by
its <SPAN CLASS="MATH"><I>z</I></SPAN>-coordinate (<!-- MATH
 $1 \le  z \le  n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>z</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>n</I></SPAN>). At the beginning of a game, there are no balls on any of the pegs.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3186b.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="\epsfbox{p3186b.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 4: A game with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 3</SPAN> (White made a 3-sequence before Black)

</DIV>

<P>
</LI>
<LI>On his turn, a player chooses one of <!-- MATH
 $n \times n$
 -->
<SPAN CLASS="MATH"><I>n</I>&#215;<I>n</I></SPAN> pegs, and puts a ball of his color onto the peg.
The ball follows the law of gravity. That is, the ball stays just above the top-most ball
on the same peg or on the floor (if there are no balls on the peg). Speaking differently, a
player can choose <SPAN CLASS="MATH"><I>x</I></SPAN>- and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates of the ball, but he cannot choose its <SPAN CLASS="MATH"><I>z</I></SPAN>-coordinate.

<P>
</LI>
<LI>The objective of the game is to make an <SPAN CLASS="MATH"><I>m</I></SPAN>-sequence. If a player makes an <SPAN CLASS="MATH"><I>m</I></SPAN>-sequence or
longer of his color, he wins. An <SPAN CLASS="MATH"><I>m</I></SPAN>-sequence is a row of <SPAN CLASS="MATH"><I>m</I></SPAN> consecutive balls of the same
color. For example, black balls in positions (5, 1, 2), (5, 2, 2) and (5, 3, 2) form a 3-sequence.

<P>
A sequence can be horizontal, vertical, or diagonal. Precisely speaking, there are 13 possible directions
to make a sequence, categorized as follows.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3186c.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="\epsfbox{p3186c.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 5: A game with <SPAN CLASS="MATH"><I>n</I> = 4</SPAN>, <SPAN CLASS="MATH"><I>m</I> = 3</SPAN> (Black made two 4-sequences)

</DIV>

<P>
<DL COMPACT>
<DT>(a)</DT>
<DD>One-dimensional axes. For example, (3, 1, 2), (4, 1, 2) and (5, 1, 2) is a 3-sequence.
There are three directions in this category.
</DD>
<DT>(b)</DT>
<DD>Two-dimensional diagonals. For example, (2, 3, 1), (3, 3, 2) and (4, 3, 3) is a 3-sequence.
There are six directions in this category.
</DD>
<DT>(c)</DT>
<DD>Three-dimensional diagonals. For example, (5, 1, 3), (4, 2, 4) and (3, 3, 5) is a 3-sequence.
There are four directions in this category.
</DD>
</DL>

<P>
Note that we do not distinguish between opposite directions.

<P>
</LI>
</OL>

<P>
As the evaluation process of the game, people have been playing the game several times changing
the parameter values. You are given the records of these games. It is your job to write a computer
program which determines the winner of each recorded game.

<P>
Since it is difficult for a human to find three-dimensional sequences, players often do not notice
the end of the game, and continue to play uselessly. In these cases, moves after the end of the
game, i.e. after the winner is determined, should be ignored. For example, after a player won
making an <SPAN CLASS="MATH"><I>m</I></SPAN>-sequence, players may make additional <SPAN CLASS="MATH"><I>m</I></SPAN>-sequences. In this case, all <SPAN CLASS="MATH"><I>m</I></SPAN>-sequences
but the first should be ignored, and the winner of the game is unchanged.

<P>
A game does not necessarily end with the victory of one of the players. If there are no pegs left
to put a ball on, the game ends with a draw. Moreover, people may quit a game before making
any <SPAN CLASS="MATH"><I>m</I></SPAN>-sequence. In such cases also, the game ends with a draw.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets each corresponding to the record of a game. A dataset
starts with a line containing three positive integers <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN>, and <SPAN CLASS="MATH"><I>p</I></SPAN> separated by a space. The
relations <!-- MATH
 $3 \le  m \le  n \le  7$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$">7</SPAN> and <!-- MATH
 $1 \le  p \le  n^3$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>p</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>n</I><SUP>3</SUP></SPAN> hold between them. <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> are the parameter values
of the game as described above. <SPAN CLASS="MATH"><I>p</I></SPAN> is the number of moves in the game.

<P>
The rest of the dataset is <SPAN CLASS="MATH"><I>p</I></SPAN> lines each containing two positive integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>. Each of these
lines describes a move, i.e. the player on turn puts his ball on the peg specified. You can assume
that <!-- MATH
 $1 \le  x \le  n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>x</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>n</I></SPAN> and <!-- MATH
 $1 \le  y \le  n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3186a.jpg
 ALT="$ \le$"><I>n</I></SPAN>. You can also assume that at most <SPAN CLASS="MATH"><I>n</I></SPAN> balls are put on a peg
throughout a game.

<P>
The end of the input is indicated by a line with three zeros separated by a space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, a line describing the winner and the number of moves until the game ends
should be output. The winner is either `<TT>Black</TT>' or `<TT>White</TT>'. A single space should be inserted
between the winner and the number of moves. No other extra characters are allowed in the
output.

<P>
In case of a draw, the output line should be `<TT>Draw</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 3 3
1 1
1 1
1 1
3 3 7
2 2
1 3
1 1
2 3
2 1
3 3
3 1
4 3 15
1 1
2 2
1 1
3 3
3 3
1 1
3 3
3 3
4 4
1 1
4 4
4 4
4 4
4 1
2 2
0 0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Draw
White 6
Black 15
</PRE> 

<P>

______________________________________________________
3187||||||false||||||
<P>The ACM ICPC judges are very careful about not leaking their problems, and all communications are encrypted. However, one does sometimes make mistakes, like using too weak an encryption scheme. Here is an example of that.<P>The encryption chosen was very simple: encrypt each chunk of the input by flipping some bits according to a shared key. To provide reasonable security, the size of both chunk and key is 32 bits.<P>That is, suppose the input was a sequence of <SPAN CLASS="MATH"><I>m</I></SPAN> 32-bit integers.<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>N</I><SUB>1</SUB>&nbsp;<I>N</I><SUB>2</SUB>&nbsp;<I>N</I><SUB>3</SUB>&nbsp;...&nbsp;<I>N</I><SUB>m</SUB></DIV><P></P><P>After encoding with the key <SPAN CLASS="MATH"><I>K</I></SPAN> it becomes the following sequence of <SPAN CLASS="MATH"><I>m</I></SPAN> 32-bit integers.<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">(<I>N</I><SUB>1</SUB> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \wedge$"> <I>K</I>)&nbsp;(<I>N</I><SUB>2</SUB> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \wedge$"> <I>K</I>)&nbsp;(<I>N</I><SUB>3</SUB> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \wedge$"> <I>K</I>)&nbsp;...&nbsp;(<I>N</I><SUB>m</SUB> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \wedge$"> <I>K</I>)</DIV><P></P>where <SPAN CLASS="MATH">(<I>a</I> <IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$ \wedge$"> <I>b</I>)</SPAN> is the <EM>bitwise exclusive or</EM> of <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>.<P>Exclusive or is the logical operator which is 1 when only one of its operands is 1, and 0 otherwise. Here is its definition for 1-bit integers.<BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">0 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \oplus$"> 0 = 0</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD ALIGN="LEFT" NOWRAP>0 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \oplus$"> 1 = 1</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP ALIGN="RIGHT">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \oplus$"> 0 = 1</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD ALIGN="LEFT" NOWRAP>1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \oplus$"> 1 = 0</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P></P><P>As you can see, it is identical to addition modulo 2. For two 32-bit integers <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>, their bitwise exclusive or <SPAN CLASS="MATH"><I>a</I> <IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$ \wedge$"> <I>b</I></SPAN> is defined as follows, using their binary representations, composed of 0's and 1's.<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>a</I> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \wedge$"> <I>b</I> = <I>a</I><SUB>31</SUB>...<I>a</I><SUB>1</SUB><I>a</I><SUB>0</SUB> <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \wedge$"> <I>b</I><SUB>31</SUB>...<I>b</I><SUB>1</SUB><I>b</I><SUB>0</SUB> = <I>c</I> : 31...<I>c</I><SUB>1</SUB><I>c</I><SUB>0</SUB></DIV><P></P>where<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>c</I><SUB>i</SUB> = <I>a</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \oplus$"> <I>b</I><SUB>i</SUB>(<I>i</I> = 0, 1,..., 31).</DIV><P></P><P>For instance, using binary notation, <TT>11010110 <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$ \wedge$"></SPAN> 01010101 = 10100011</TT>, or using hexadecimal, <TT>d6 <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$ \wedge$"></SPAN> 55 = a3</TT>.<P>Since this kind of encryption is notoriously weak to statistical attacks, the message has to be compressed in advance, so that it has no statistical regularity. We suppose that <SPAN CLASS="MATH"><I>N</I><SUB>1</SUB>&nbsp;<I>N</I><SUB>2</SUB>&nbsp;...&nbsp;<I>N</I><SUB>m</SUB></SPAN> is already in compressed form.<P>However, the trouble is that the compression algorithm itself introduces some form of regularity: after every 8 integers of compressed data, it inserts a checksum, the sum of these integers. That is, in the above input,<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>N</I><SUB>9</SUB> = <IMG WIDTH="27" HEIGHT="68" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$\displaystyle \sum_{i=1}^{8}$"><I>N</I><SUB>i</SUB> = <I>N</I><SUB>1</SUB> + <SUP>... </SUP>+ <I>N</I><SUB>8</SUB>,</DIV><P></P>where additions are modulo <SPAN CLASS="MATH">2<SUP>32</SUP></SPAN>.<P>Luckily, you could intercept a communication between the judges. Maybe it contains a problem for the finals!<P><P><BR>As you are very clever, you have certainly seen that you can easily find the lowest bit of the key denoted by <SPAN CLASS="MATH"><I>K</I><SUB>0</SUB></SPAN>. On the one hand, if <SPAN CLASS="MATH"><I>K</I><SUB>0</SUB> = 1</SPAN>, then after encoding, the lowest bit of <SPAN CLASS="MATH"><IMG WIDTH="44" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$ \sum_{i=1}^{8}$"><I>N</I><SUB>i</SUB> <IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$ \wedge$"> <I>K</I></SPAN> is unchanged, as <SPAN CLASS="MATH"><I>K</I><SUB>0</SUB></SPAN> is added an even number of times, but the lowest bit of <SPAN CLASS="MATH"><I>N</I><SUB>9</SUB> <IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$ \wedge$"> <I>K</I></SPAN> is changed, so they shall differ. On the other hand, if <SPAN CLASS="MATH"><I>K</I><SUB>0</SUB> = 0</SPAN>, then after encoding, the lowest bit of <SPAN CLASS="MATH"><IMG WIDTH="44" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$ \sum_{i=1}^{8}$"><I>N</I><SUB>i</SUB> <IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$ \wedge$"> <I>K</I></SPAN> shall still be identical to the lowest bit of <SPAN CLASS="MATH"><I>N</I><SUB>9</SUB> <IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3187img1.png ALT="$ \wedge$"> <I>K</I></SPAN>, as they do not change. For instance, if the lowest bits after encoding are <TT>1 1 1 1 1 1 1 1 1</TT> then <SPAN CLASS="MATH"><I>K</I><SUB>0</SUB></SPAN> must be 1, but if they are <TT>1 1 1 1 1 1 1 0 1</TT> then <SPAN CLASS="MATH"><I>K</I><SUB>0</SUB></SPAN> must be 0.<P>So far, so good. Can you do better?<P>You should find the key used for encoding.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input starts with a line containing only a positive integer <SPAN CLASS="MATH"><I>S</I></SPAN>, indicating the number of datasets in the input. <SPAN CLASS="MATH"><I>S</I></SPAN> is no more than 1000.<P>It is followed by S datasets. Each dataset is composed of nine 32-bit integers corresponding to the first nine chunks of a communication. They are written in hexadecimal notation, using digits `<TT>0</TT>' to `<TT>9</TT>' and lowercase letters `<TT>a</TT>' to `<TT>f</TT>', and with no leading zeros. They are separated by a space or a newline. Each dataset is ended by a newline.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset you should output the key used for encoding. Each key shall appear alone on its line, and be written in hexadecimal notation, using digits `<TT>0</TT>' to `<TT>9</TT>' and lowercase letters `<TT>a</TT>' to `<TT>f</TT>', and with no leading zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
81 1 1 1 1 1 1 1 8
3 2 3 2 3 2 3 2 6
3 4 4 7 7 b a 2 2e
e1 13 ce 28 ca 6 ab 46 a6d
b08 49e2 6128 f27 8cf2 bc50 7380 7fe1 723b
4eba eb4 a352 fd14 6ac1 eed1 dd06 bb83 392bc
ef593c08 847e522f 74c02b9c 26f3a4e1 e2720a01 6fe66007
7a4e96ad 6ee5cef6 3853cd88
60202fb8 757d6d66 9c3a9525 fbcd7983 82b9571c ddc54bab 853e52da
22047c88 e5524401
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0261c64924afc7
ffff95c5
546991d
901c4a16
</PRE><P>
______________________________________________________
3188||||||false||||||

<P>
Professor Pathfinder is a distinguished authority on the structure of hyperlinks in the World
Wide Web. For establishing his hypotheses, he has been developing software agents, which
automatically traverse hyperlinks and analyze the structure of the Web. Today, he has gotten
an intriguing idea to improve his software agents. However, he is very busy and requires help
from good programmers. You are now being asked to be involved in his development team and
to create a small but critical software module of his new type of software agents.

<P>
Upon traversal of hyperlinks, Pathfinder's software agents incrementally generate a map of
visited portions of the Web. So the agents should maintain the list of traversed hyperlinks
and visited web pages. One problem in keeping track of such information is that two or more
different URLs can point to the same web page. For instance, by typing any one of the following
five URLs, your favorite browsers probably bring you to the same web page, which as you may
have visited is the home page of the ACM ICPC Ehime contest.

<P>
<PRE>
     http://www.ehime-u.ac.jp/ICPC/
     http://www.ehime-u.ac.jp/ICPC
     http://www.ehime-u.ac.jp/ICPC/../ICPC/
     http://www.ehime-u.ac.jp/ICPC/./
     http://www.ehime-u.ac.jp/ICPC/index.html
</PRE> 

<P>
Your program should reveal such aliases for Pathfinder's experiments.

<P>

<P>
<BR>
Well, ...but it were a real challenge and to be perfect you might have to embed rather complicated
logic into your program. We are afraid that even excellent programmers like you could
not complete it in five hours. So, we make the problem a little simpler and subtly unrealistic. You should
focus on the path parts (i.e. <TT>/ICPC/, /ICPC, /ICPC/../ICPC/, /ICPC/./</TT>, and
<TT>/ICPC/index.html</TT> in the above example) of URLs and ignore the scheme parts (e.g. <TT>http://</TT>),
the server parts (e.g. <TT>www.ehime-u.ac.jp</TT>), and other optional parts. You should carefully read
the rules described in the sequel since some of them may not be based on the reality of today's
Web and URLs.

<P>
Each path part in this problem is an absolute pathname, which specifies a path from the root
directory to some web page in a hierarchical (tree-shaped) directory structure. A pathname
always starts with a slash (<TT>/</TT>), representing the root directory, followed by path segments delimited
by a slash. For instance, <TT>/ICPC/index.html</TT> is a pathname with two path segments <TT>ICPC</TT>
and <TT>index.html</TT>.

<P>
All those path segments but the last should be directory names and the last one the name of an
ordinary file where a web page is stored. However, we have one exceptional rule: an ordinary
file name <TT>index.html</TT> at the end of a pathname may be omitted. For instance, a pathname
<TT>/ICPC/index.html</TT> can be shortened to <TT>/ICPC/</TT>, if <TT>index.html</TT> is an existing ordinary file name.
More precisely, if <TT>ICPC</TT> is the name of an existing directory just under the root and index.html
is the name of an existing ordinary file just under the <TT>/ICPC</TT> directory, <TT>/ICPC/index.html</TT> and
<TT>/ICPC/</TT> refer to the same web page. Furthermore, the last slash following the last path segment
can also be omitted. That is, for instance, <TT>/ICPC/</TT> can be further shortened to <TT>/ICPC</TT>. However,
<TT>/index.html</TT> can only be abbreviated to <TT>/</TT> (a single slash).

<P>
You should pay special attention to path segments consisting of a single period (<TT>.</TT>) or a double
period (<TT>..</TT>), both of which are always regarded as directory names. The former represents the
directory itself and the latter represents its parent directory. Therefore, if <TT>/ICPC/</TT> refers to some
web page, both <TT>/ICPC/./</TT> and <TT>/ICPC/../ICPC/</TT> refer to the same page. Also <TT>/ICPC2/../ICPC/</TT>
refers to the same page if <TT>ICPC2</TT> is the name of an existing directory just under the root;
otherwise it does not refer to any web page. Note that the root directory does not have any
parent directory and thus such pathnames as <TT>/../</TT> 
and <TT>/ICPC/../../index.html</TT> cannot point to any web page.

<P>

<P>
<BR>
Your job in this problem is to write a program that checks whether two given pathnames refer
to existing web pages and, if so, examines whether they are the same.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets. The first line of each dataset contains two positive
integers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN>, both of which are less than or equal to 100 and are separated by a single
space character.

<P>
The rest of the dataset consists of <SPAN CLASS="MATH"><I>N</I> + 2<I>M</I></SPAN> lines, each of which contains a syntactically correct
pathname of at most 100 characters. You may assume that each path segment enclosed by two
slashes is of length at least one. In other words, two consecutive slashes cannot occur in any
pathname. Each path segment does not include anything other than alphanumerical characters
(i.e. `<TT>a</TT>'-`<TT>z</TT>', `<TT>A</TT>'-`<TT>Z</TT>', and `<TT>0</TT>'-`<TT>9</TT>') and periods (`<TT>.</TT>').

<P>
The first <SPAN CLASS="MATH"><I>N</I></SPAN> pathnames enumerate all the web pages (ordinary files). Every existing directory
name occurs at least once in these pathnames. You can assume that these pathnames do not
include any path segments consisting solely of single or double periods and that the last path
segments are ordinary file names. Therefore, you do not have to worry about special rules for
<TT>index.html</TT> and single/double periods. You can also assume that no two of the <SPAN CLASS="MATH"><I>N</I></SPAN> pathnames
point to the same page.

<P>
Each of the following <SPAN CLASS="MATH"><I>M</I></SPAN> pairs of pathnames is a question: do the two pathnames point to the
same web page? These pathnames may include single or double periods and may be terminated
by a slash. They may include names that do not correspond to existing directories or ordinary
files.

<P>
Two zeros in a line indicate the end of the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, your program should output the <SPAN CLASS="MATH"><I>M</I></SPAN> answers to the <SPAN CLASS="MATH"><I>M</I></SPAN> questions, each in a
separate line. Each answer should be `<TT>yes</TT>' if both point to the same web page, `<TT>not found</TT>'
if at least one of the pathnames does not point to any one of the first <SPAN CLASS="MATH"><I>N</I></SPAN> web pages listed in the
input, or `<TT>no</TT>' otherwise.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 6
/home/ACM/index.html
/ICPC/index.html
/ICPC/general.html
/ICPC/japanese/index.html
/ICPC/secret/confidential/2005/index.html
/home/ACM/
/home/ICPC/../ACM/
/ICPC/secret/
/ICPC/secret/index.html
/ICPC
/ICPC/../ICPC/index.html
/ICPC
/ICPC/general.html
/ICPC/japanese/.././
/ICPC/japanese/./../
/home/ACM/index.html
/home/ACM/index.html/
1 4
/index.html/index.html
/
/index.html/index.html
/index.html
/index.html/index.html
/..
/index.html/../..
/index.html/
/index.html/index.html/..
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
not found
not found
yes
no
yes
not found
not found
yes
not found
not found
</PRE> 

<P>

______________________________________________________
3189||||||false||||||
<P>Meikyokan University is very famous for its research and education in the area of computer science. This university has a computer center that has advanced and secure computing facilities including supercomputers and many personal computers connected to the Internet.<P>One of the policies of the computer center is to let the students select their own login names. Unfortunately, students are apt to select similar login names, and troubles caused by mistakes in entering or specifying login names are relatively common. These troubles are a burden on the staff of the computer center.<P>To avoid such troubles, Dr. Choei Takano, the chief manager of the computer center, decided to stamp out similar and confusing login names. To this end, Takano has to develop a program that detects confusing login names.<P>Based on the following four operations on strings, the distance between two login names is determined as the minimum number of operations that transforms one login name to the other.<P><OL><LI>Deleting a character at an arbitrary position. </LI><LI>Inserting a character into an arbitrary position. </LI><LI>Replacing a character at an arbitrary position with another character. </LI><LI>Swapping two adjacent characters at an arbitrary position. </LI></OL><P>For example, the distance between ``<TT>omura</TT>" and ``<TT>murai</TT>" is two, because the following sequence of operations transforms ``<TT>omura</TT>" to ``<TT>murai</TT>".<P><P><BR><DIV ALIGN="CENTER"><TT>omura <SPAN CLASS="MATH"><IMG WIDTH="69" HEIGHT="25" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3189img1.png ALT="$ \;\stackrel{{\rm delete \ \lq {\tt o}'}}{\rightarrow}\;$"></SPAN> mura <SPAN CLASS="MATH"><IMG WIDTH="68" HEIGHT="25" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3189img1.png ALT="$ \;\stackrel{{\rm insert \ \lq {\tt i}'}}{\rightarrow}\;$"></SPAN> murai</TT></DIV><P><P><BR>Another example is that the distance between ``<TT>akasan</TT>" and ``<TT>kaason</TT>" is also two.<P><P><BR><DIV ALIGN="CENTER"><TT>akasan <SPAN CLASS="MATH"><IMG WIDTH="112" HEIGHT="26" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3189img1.png ALT="$ \;\stackrel{{\rm swap \ \lq {\tt a}' \ and \ \lq {\tt k}'}}{\rightarrow}\;$"></SPAN> kaasa <SPAN CLASS="MATH"><IMG WIDTH="123" HEIGHT="26" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3189img1.png ALT="$ \;\stackrel{{\rm replace \ \lq {\tt a}' \ with \lq {\tt o}'}}{\rightarrow}\;$"></SPAN> kaason</TT></DIV><P>Takano decided that two login names with a small distance are confusing and thus must be avoided.<P>Your job is to write a program that enumerates all the confusing pairs of login names.<P>Beware that the rules may combine in subtle ways. For instance, the distance between ``<TT>ant</TT>" and ``<TT>neat</TT>" is two.<P><P><BR><DIV ALIGN="CENTER"><TT>ant <SPAN CLASS="MATH"><IMG WIDTH="112" HEIGHT="26" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3189img1.png ALT="$ \;\stackrel{{\rm swap \ \lq {\tt a}' \ and \ \lq {\tt n}'}}{\rightarrow}\;$"></SPAN> nat <SPAN CLASS="MATH"><IMG WIDTH="68" HEIGHT="25" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3189img1.png ALT="$ \;\stackrel{{\rm insert \ \lq {\tt e}'}}{\rightarrow}\;$"></SPAN> neat</TT></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets. Each dataset is given in the following format.<P><SPAN CLASS="MATH"><I>n</I></SPAN><P><SPAN CLASS="MATH"><I>d</I></SPAN><P><SPAN CLASS="MATH"><I>name</I><SUB>1</SUB></SPAN><P><SPAN CLASS="MATH"><I>name</I><SUB>2</SUB></SPAN><P><SPAN CLASS="MATH">...</SPAN><P><SPAN CLASS="MATH"><I>name</I><SUB>n</SUB></SPAN><P>The first integer <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of login names. Then comes a positive integer <SPAN CLASS="MATH"><I>d</I></SPAN>. Two login names whose distance is less than or equal to <SPAN CLASS="MATH"><I>d</I></SPAN> are deemed to be confusing. You may assume that <!-- MATH
 $0 < n  \le 200$
 --><SPAN CLASS="MATH">0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3189img1.png ALT="$ \le$">200</SPAN> and <!-- MATH
 $0 < d \le  2$
 --><SPAN CLASS="MATH">0 &lt; <I>d</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3189img1.png ALT="$ \le$">2</SPAN>. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th student's login name is given by <SPAN CLASS="MATH"><I>name</I><SUB>i</SUB></SPAN>, which is composed of only lowercase letters. Its length is less than 16. You can assume that there are no duplicates in <SPAN CLASS="MATH"><I>name</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3189img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3189img1.png ALT="$ \le$"><I>n</I></SPAN>).<P>The end of the input is indicated by a line that solely contains a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, your program should output all pairs of confusing login names, one pair per line, followed by the total number of confusing pairs in the dataset.<P>In each pair, the two login names are to be separated only by a comma character (<TT>,</TT>), and the login name that is alphabetically preceding the other should appear first. The entire output of confusing pairs for each dataset must be sorted as follows. For two pairs `<TT><SPAN CLASS="MATH"><I>w</I><SUB>1</SUB></SPAN>,<SPAN CLASS="MATH"><I>w</I><SUB>2</SUB></SPAN></TT>' and `<TT><SPAN CLASS="MATH"><I>w</I><SUB>3</SUB></SPAN>,<SPAN CLASS="MATH"><I>w</I><SUB>4</SUB></SPAN></TT>', if <SPAN CLASS="MATH"><I>w</I><SUB>1</SUB></SPAN> alphabetically precedes <SPAN CLASS="MATH"><I>w</I><SUB>3</SUB></SPAN>, or they are the same and <SPAN CLASS="MATH"><I>w</I><SUB>2</SUB></SPAN> precedes <SPAN CLASS="MATH"><I>w</I><SUB>4</SUB></SPAN>, then `<TT><SPAN CLASS="MATH"><I>w</I><SUB>1</SUB></SPAN>,<SPAN CLASS="MATH"><I>w</I><SUB>2</SUB></SPAN></TT>' must appear before `<TT><SPAN CLASS="MATH"><I>w</I><SUB>3</SUB></SPAN>,<SPAN CLASS="MATH"><I>w</I><SUB>4</SUB></SPAN></TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8
2
omura
toshio
raku
tanaka
imura
yoshoi
hayashi
miura
3
1
tasaka
nakata
tanaka
1
1
foo
5
2
psqt
abcdef
abzdefa
pqrst
abdxcef
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
imura,miura
imura,omura
miura,omura
toshio,yoshoi
4
tanaka,tasaka
1
0
abcdef,abdxcef
abcdef,abzdefa
pqrst,psqt
3
</PRE><P>
______________________________________________________
3190||||||false||||||

<P>
Let's try a dice puzzle. The rules of this puzzle are as follows.

<P>

<OL>
<LI>Dice with six faces as shown in Figure 6 are used in the puzzle.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3190a.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="\epsfbox{p3190a.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 6: Faces of a die

</DIV>

<P>
</LI>
<LI>With twenty seven such dice, a <!-- MATH
 $3 \times 3 \times 3$
 -->
<SPAN CLASS="MATH">3&#215;3&#215;3</SPAN> cube is built as shown in Figure 7.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3190b.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="\epsfbox{p3190b.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 7: <!-- MATH
 $3 \times 3 \times 3$
 -->
<SPAN CLASS="MATH">3&#215;3&#215;3</SPAN> cube

</DIV>

<P>
</LI>
<LI>When building up a cube made of dice, the sum of the numbers marked on the faces
of adjacent dice that are placed against each other must be seven (See Figure 8). For example, if one face of
the pair is marked ``2", then the other face must be ``5".

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3190c.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="\epsfbox{p3190c.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 8: A pair of faces placed against each other

</DIV>

<P>
</LI>
<LI>The top and the front views of the cube are partially given, i.e. the numbers on faces of some of the
dice on the top and on the front are given.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3190d.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="\epsfbox{p3190d.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 9: Top and front views of the cube

</DIV>

<P>
</LI>
<LI>The goal of the puzzle is to find all the plausible dice arrangements that are consistent with the
given top and front view information.
</LI>
</OL>

<P>
Your job is to write a program that solves this puzzle.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets in the following format.

<P>

<P>
<BR>

       <SPAN CLASS="MATH"><I>N</I></SPAN>

<P>

       <SPAN CLASS="MATH"><I>Dataset</I><SUB>1</SUB></SPAN>

<P>

       <SPAN CLASS="MATH"><I>Dataset</I><SUB>2</SUB></SPAN>

<P>

       <SPAN CLASS="MATH">...</SPAN>

<P>

       <SPAN CLASS="MATH"><I>Dataset</I><SUB>N</SUB></SPAN>

<P>

<P>
<BR>
<SPAN CLASS="MATH"><I>N</I></SPAN> is the number of the datasets.

<P>

<P>
<BR>
The format of each dataset is as follows.

<P>

<P>
<BR>

         <!-- MATH
 $T_{11} \ T_{12} \ T_{13}$
 -->
<SPAN CLASS="MATH"><I>T</I><SUB>11</SUB>&nbsp;<I>T</I><SUB>12</SUB>&nbsp;<I>T</I><SUB>13</SUB></SPAN> 

<P>

         <!-- MATH
 $T_{21} \ T_{22} \ T_{23}$
 -->
<SPAN CLASS="MATH"><I>T</I><SUB>21</SUB>&nbsp;<I>T</I><SUB>22</SUB>&nbsp;<I>T</I><SUB>23</SUB></SPAN> 

<P>

         <!-- MATH
 $T_{31} \ T_{32} \ T_{33}$
 -->
<SPAN CLASS="MATH"><I>T</I><SUB>31</SUB>&nbsp;<I>T</I><SUB>32</SUB>&nbsp;<I>T</I><SUB>33</SUB></SPAN> 

<P>

         <!-- MATH
 $F_{11} \ F_{12} \ F_{13}$
 -->
<SPAN CLASS="MATH"><I>F</I><SUB>11</SUB>&nbsp;<I>F</I><SUB>12</SUB>&nbsp;<I>F</I><SUB>13</SUB></SPAN> 

<P>

         <!-- MATH
 $F_{21} \ F_{22} \ F_{23}$
 -->
<SPAN CLASS="MATH"><I>F</I><SUB>21</SUB>&nbsp;<I>F</I><SUB>22</SUB>&nbsp;<I>F</I><SUB>23</SUB></SPAN> 

<P>

         <!-- MATH
 $F_{31} \ F_{32} \ F_{33}$
 -->
<SPAN CLASS="MATH"><I>F</I><SUB>31</SUB>&nbsp;<I>F</I><SUB>32</SUB>&nbsp;<I>F</I><SUB>33</SUB></SPAN> 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>T</I><SUB>ij</SUB></SPAN> and <SPAN CLASS="MATH"><I>F</I><SUB>ij</SUB></SPAN> (<!-- MATH
 $1 \le  i \le  3$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="$ \le$">3</SPAN>, <!-- MATH
 $1 \le  j \le  3$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="$ \le$"><I>j</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="$ \le$">3</SPAN>) are the faces of dice appearing on the top and front views,
as shown in Figure 7, or a zero. A zero means that the face at the corresponding position is
unknown.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each plausible arrangement of dice, compute the sum of the numbers marked on the nine
faces appearing on the right side of the cube, that is, with the notation given in Figure 7,

<P>
<!-- MATH
 \begin{displaymath}
\sum_{i=1}^3 \ \sum_{j=1}^3 R_{ij}.
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<IMG
 WIDTH="27" HEIGHT="68" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="$\displaystyle \sum_{i=1}^{3}$">&nbsp;<IMG
 WIDTH="28" HEIGHT="68" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="$\displaystyle \sum_{j=1}^{3}$"><I>R</I><SUB>ij</SUB>.
</DIV><P></P>

<P>
For each dataset, you should output the right view sums for all the plausible arrangements, in
ascending order and without duplicates. Numbers should be separated by a single space.

<P>
When there are no plausible arrangements for a dataset, output a zero.

<P>

<P>
<BR>
For example, suppose that the top and the front views are given as follows.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3190e.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="\epsfbox{p3190e.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 10: Example

</DIV>

<P>
There are four plausible right views as shown in Figure 11. The right view sums are 33, 36, 32,
and 33, respectively. After rearranging them into ascending order and eliminating duplicates,
the answer should be `<TT>32 33 36</TT>'.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3190f.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/p3190a.jpg
 ALT="\epsfbox{p3190f.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 11: Plausible right views

</DIV>

<P>
The output should be one line for each dataset. The output may have spaces at ends of lines.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
4 3 3
5 2 2
4 3 3
6 1 1
6 1 1
6 1 0
1 0 0
0 2 0
0 0 0
5 1 2
5 1 2
0 0 0
2 0 0
0 3 0
0 0 0
0 0 0
0 0 0
3 0 1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
27
24
32 33 36
0
</PRE> 

<P>

______________________________________________________
3191||||||false||||||
<P>You were lucky enough to get a map just before entering the legendary magical mystery world. The map shows the whole area of your planned exploration, including several countries with complicated borders. The map is clearly drawn, but in sepia ink only; it is hard to recognize at a glance which region belongs to which country, and this might bring you into severe danger. You have decided to color the map before entering the area. ``A good deal depends on preparation," you talked to yourself.<P>Each country has one or more territories, each of which has a polygonal shape. Territories belonging to one country may or may not ``touch" each other, i.e. there may be disconnected territories. All the territories belonging to the same country must be assigned the same color. You can assign the same color to more than one country, but, to avoid confusion, two countries ``adjacent" to each other should be assigned different colors. Two countries are considered to be ``adjacent" if any of their territories share a border of non-zero length.<P><P><BR>Write a program that finds the least number of colors required to color the map.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of multiple map data. Each map data starts with a line containing the total number of territories <SPAN CLASS="MATH"><I>n</I></SPAN>, followed by the data for those territories. <SPAN CLASS="MATH"><I>n</I></SPAN> is a positive integer not more than 100. The data for a territory with <SPAN CLASS="MATH"><I>m</I></SPAN> vertices has the following format:<P><P><BR><SPAN CLASS="MATH"><I>String</I></SPAN><P><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB></SPAN><P><SPAN CLASS="MATH"><I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB></SPAN><P><SPAN CLASS="MATH">...</SPAN><P><SPAN CLASS="MATH"><I>x</I><SUB>m</SUB>&nbsp;<I>y</I><SUB>m</SUB></SPAN><P><TT>-1</TT><P><P><BR>`<SPAN CLASS="MATH"><I>String</I></SPAN>' (a sequence of alphanumerical characters) gives the name of the country it belongs to. A country name has at least one character and never has more than twenty. When a country has multiple territories, its name appears in each of them.<P>Remaining lines represent the vertices of the territory. A vertex data line has a pair of nonnegative integers which represent the <SPAN CLASS="MATH"><I>x</I></SPAN>- and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates of a vertex. <SPAN CLASS="MATH"><I>x</I></SPAN>- and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates are separated by a single space, and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate is immediately followed by a newline. Edges of the territory are obtained by connecting vertices given in two adjacent vertex data lines, and by connecting vertices given in the last and the first vertex data lines. None of <SPAN CLASS="MATH"><I>x</I></SPAN>- and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates exceeds 1000. Finally, `<TT>-1</TT>' in a line marks the end of vertex data lines. The number of vertices <SPAN CLASS="MATH"><I>m</I></SPAN> does not exceed 100.<P>You may assume that the contours of polygons are simple, i.e. they do not cross nor touch themselves. No two polygons share a region of non-zero area. The number of countries in a map does not exceed 10.<P>The last map data is followed by a line containing only a zero, marking the end of the input data.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each map data, output one line containing the least possible number of colors required to color the map satisfying the specified conditions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
Blizid
0 0
60 0
60 60
0 60
0 50
50 50
50 10
0 10
-1
Blizid
0 10
10 10
10 50
0 50
-1
Windom
10 10
50 10
40 20
20 20
20 40
10 50
-1
Accent
50 10
50 50
35 50
35 25
-1
Pilot
35 25
35 50
10 50
-1
Blizid
20 20
40 20
20 40
-1
4
A1234567890123456789
0 0
0 100
100 100
100 0
-1
B1234567890123456789
100 100
100 200
200 200
200 100
-1
C1234567890123456789
0 100
100 100
100 200
0 200
-1
D123456789012345678
100 0
100 100
200 100
200 0
-1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
2
</PRE><P>
______________________________________________________
3192||||||false||||||
<P>In the year 2xxx, an expedition team landing on a planet found strange objects made by an ancient species living on that planet. They are transparent boxes containing opaque solid spheres (Figure 12). There are also many lithographs which seem to contain positions and radiuses of spheres.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3192a.jpg ALT="\epsfbox{p3192a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 12: A strange object</DIV><P>Initially their objective was unknown, but Professor Zambendorf found the cross section formed by a horizontal plane plays an important role. For example, the cross section of an object changes as in Figure 13 by sliding the plane from bottom to top.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3192a.jpg ALT="\epsfbox{p3192b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 13: Cross sections at different positions</DIV><P>He eventually found that some information is expressed by the transition of the number of connected figures in the cross section, where each connected figure is a union of discs intersecting or touching each other, and each disc is a cross section of the corresponding solid sphere. For instance, in Figure 13, whose geometry is described in the first sample dataset later, the number of connected figures changes as 0, 1, 2, 1, 2, 3, 2, 1, and 0, at <SPAN CLASS="MATH"><I>z</I></SPAN> = 0.0000, 162.0000, 167.0000, 173.0004, 185.0000, 191.9996, 198.0000, 203.0000, and 205.0000, respectively. By assigning 1 for increment and 0 for decrement, the transitions of this sequence can be expressed by an 8-bit binary number 11011000.<P>For helping further analysis, write a program to determine the transitions when sliding the horizontal plane from bottom (<SPAN CLASS="MATH"><I>z</I> = 0</SPAN>) to top (<SPAN CLASS="MATH"><I>z</I> = 36000</SPAN>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of a series of datasets. Each dataset begins with a line containing a positive integer, which indicates the number of spheres <SPAN CLASS="MATH"><I>N</I></SPAN> in the dataset. It is followed by <SPAN CLASS="MATH"><I>N</I></SPAN> lines describing the centers and radiuses of the spheres. Each of the <SPAN CLASS="MATH"><I>N</I></SPAN> lines has four positive integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>Z</I><SUB>i</SUB></SPAN>, and <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH"><I>i</I> = 1,..., <I>N</I></SPAN>) describing the center and the radius of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th sphere, respectively.<P>You may assume <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3192a.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3192a.jpg ALT="$ \le$">100</SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3192a.jpg ALT="$ \le$"><I>R</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3192a.jpg ALT="$ \le$">2000</SPAN>, <!-- MATH
 $0 < X_i - R_i < X_i + R_i < 4000$
 --><SPAN CLASS="MATH">0 &lt; <I>X</I><SUB>i</SUB> - <I>R</I><SUB>i</SUB> &lt; <I>X</I><SUB>i</SUB> + <I>R</I><SUB>i</SUB> &lt; 4000</SPAN>, <!-- MATH
 $0 < Y_i - R_i < Y_i + R_i < 16000$
 --><SPAN CLASS="MATH">0 &lt; <I>Y</I><SUB>i</SUB> - <I>R</I><SUB>i</SUB> &lt; <I>Y</I><SUB>i</SUB> + <I>R</I><SUB>i</SUB> &lt; 16000</SPAN>, and <!-- MATH
 $0 < Z_i - R_i < Z_i + R_i < 36000$
 --><SPAN CLASS="MATH">0 &lt; <I>Z</I><SUB>i</SUB> - <I>R</I><SUB>i</SUB> &lt; <I>Z</I><SUB>i</SUB> + <I>R</I><SUB>i</SUB> &lt; 36000</SPAN>. Each solid sphere is defined as the set of all points <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN> satisfying <SPAN CLASS="MATH">(<I>x</I> - <I>X</I><SUB>i</SUB>)<SUP>2</SUP> + (<I>y</I> - <I>Y</I><SUB>i</SUB>)<SUP>2</SUP> + (<I>z</I> - <I>Z</I><SUB>i</SUB>)<SUP>2</SUP><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3192a.jpg ALT="$ \le$"><I>R</I><SUP>2</SUP><SUB>i</SUB></SPAN>.<P>A sphere may contain other spheres. No two spheres are mutually tangent. Every <SPAN CLASS="MATH"><I>Z</I><SUB>i</SUB>&#177;<I>R</I><SUB>i</SUB></SPAN> and minimum/maximum <SPAN CLASS="MATH"><I>z</I></SPAN> coordinates of a circle formed by the intersection of any two spheres differ from each other by at least 0.01.<P>The end of the input is indicated by a line with one zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, your program should output two lines. The first line should contain an integer <SPAN CLASS="MATH"><I>M</I></SPAN> indicating the number of transitions. The second line should contain an <SPAN CLASS="MATH"><I>M</I></SPAN>-bit binary number that expresses the transitions of the number of connected figures as specified above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
95 20 180 18
125 20 185 18
40 27 195 10
1
5 5 5 4
2
5 5 5 4
5 5 5 3
2
5 5 5 4
5 7 5 3
16
2338 3465 29034 710
1571 14389 25019 842
1706 8015 11324 1155
1899 4359 33815 888
2160 10364 20511 1264
2048 8835 23706 1906
2598 13041 23679 618
1613 11112 8003 1125
1777 4754 25986 929
2707 9945 11458 617
1153 10358 4305 755
2462 8450 21838 934
1822 11539 10025 1639
1473 11939 12924 638
1388 8519 18653 834
2239 7384 32729 862
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
11011000
2
10
2
10
2
10
28
1011100100110101101000101100
</PRE><P>
______________________________________________________
3193||||||false||||||
<P>Prof. Bocchan is a mathematician and a sculptor. He likes to create sculptures with mathematics.<P>His style to make sculptures is very unique. He uses two identical prisms. Crossing them at right angles, he makes a polyhedron that is their intersection as a new work. Since he finishes it up with painting, he needs to know the surface area of the polyhedron for estimating the amount of pigment needed.<P>For example, let us consider the two identical prisms in Figure 14. The definition of their cross section is given in Figure 15. The prisms are put at right angles with each other and their intersection is the polyhedron depicted in Figure 16. An approximate value of its surface area is 194.8255.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="\epsfbox{p3193a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 14: Two identical prisms at right angles</DIV><P>Given the shape of the cross section of the two identical prisms, your job is to calculate the surface area of his sculpture.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets, followed by a single line containing only a zero. The first line of each dataset contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> indicating the number of the following lines, each of which contains two integers <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH"><I>i</I> = 1,..., <I>n</I></SPAN>).<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="\epsfbox{p3193b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 15: Outline of the cross section</DIV><P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="\epsfbox{p3193c.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 16: The intersection</DIV><P>A closed path formed by the given points <SPAN CLASS="MATH">(<I>a</I><SUB>1</SUB>, <I>b</I><SUB>1</SUB>)</SPAN>, <SPAN CLASS="MATH">(<I>a</I><SUB>2</SUB>, <I>b</I><SUB>2</SUB>)</SPAN>, ..., <SPAN CLASS="MATH">(<I>a</I><SUB>n</SUB>, <I>b</I><SUB>n</SUB>)</SPAN>, <SPAN CLASS="MATH">(<I>a</I><SUB>n + 1</SUB>, <I>b</I><SUB>n + 1</SUB>)</SPAN> ( <SPAN CLASS="MATH">= (<I>a</I><SUB>1</SUB>, <I>b</I><SUB>1</SUB>)</SPAN>) indicates the outline of the cross section of the prisms. The closed path is simple, that is, it does not cross nor touch itself. The right-hand side of the line segment from <SPAN CLASS="MATH">(<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>)</SPAN> to <SPAN CLASS="MATH">(<I>a</I><SUB>i + 1</SUB>, <I>b</I><SUB>i + 1</SUB>)</SPAN> is the inside of the section.<P>You may assume that <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \le$">4</SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \le$">10</SPAN> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \le$"><I>bi</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \le$">10</SPAN> ( <SPAN CLASS="MATH"><I>i</I> = 1,..., <I>n</I></SPAN>).<P>One of the prisms is put along the <SPAN CLASS="MATH"><I>x</I></SPAN>-axis so that the outline of its cross section at <SPAN CLASS="MATH"><I>x</I> = <IMG WIDTH="13" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \xi$"></SPAN> is indicated by points <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>, <I>z</I><SUB>i</SUB>) = (<IMG WIDTH="13" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \xi$">, <I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>)</SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \le$"><IMG WIDTH="13" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \xi$"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \le$">10</SPAN>, <SPAN CLASS="MATH"><I>i</I> = 1,..., <I>n</I></SPAN>). The other prism is put along the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis so that its cross section at <SPAN CLASS="MATH"><I>y</I> = <IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \eta$"></SPAN> is indicated by points <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>, <I>z</I><SUB>i</SUB>) = (<I>a</I><SUB>i</SUB>,<IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \eta$">, <I>b</I><SUB>i</SUB>)</SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \le$"><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \eta$"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3193a.jpg ALT="$ \le$">10</SPAN>, <SPAN CLASS="MATH"><I>i</I> = 1,..., <I>n</I></SPAN>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output should consist of a series of lines each containing a single decimal fraction. Each number should indicate an approximate value of the surface area of the polyhedron defined by the corresponding dataset. The value may contain an error less than or equal to 0.0001. You may print any number of digits below the decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
5 0
0 10
7 5
10 5
4
7 5
10 5
5 0
0 10
4
0 10
10 10
10 0
0 0
3
0 0
0 10
10 0
4
0 10
10 5
0 0
9 5
4
5 0
0 10
5 5
10 10
4
0 5
5 10
10 5
5 0
4
7 1
4 1
0 1
9 5
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
194.8255
194.8255
600.0000
341.4214
42.9519
182.5141
282.8427
149.2470
</PRE><P>
______________________________________________________
3194||||||false||||||
One of the world-wide cooperative computing tasks is the ``Grand Internet Mersenne Prime Search" - GIMPS - striving
to find ever-larger prime numbers by examining a particular category of such numbers.

<P>
A Mersenne number is defined as a number of the form <SPAN CLASS="MATH">(2<SUP>p</SUP> - 1)</SPAN>, where <SPAN CLASS="MATH"><I>p</I></SPAN> is a prime number - a number divisible
only by one and itself.  (A number that can be divided by numbers other than itself and one are called
``composite" numbers, and each of these can be uniquely represented by the prime numbers that can be multiplied
together to generate the composite number - referred to as its prime factors.)

<P>
Initially it looks as though the Mersenne numbers are all primes.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
Prime </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Corresponding Mersenne Number </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <SPAN CLASS="MATH">4 - 1 = 3</SPAN> -  prime </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH">8 - 1 = 7</SPAN> -  prime </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH">32 - 1 = 31</SPAN> -  prime </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $128-1 = 127$
 -->
<SPAN CLASS="MATH">128 - 1 = 127</SPAN> -  prime </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
If, however, we are having a ``Grand Internet" search, that must not be the case.

<P>
Where <SPAN CLASS="MATH"><I>k</I></SPAN> is an input parameter, compute all the Mersenne <EM>composite</EM> numbers less than <SPAN CLASS="MATH">2<SUP>k</SUP></SPAN> ---
where <SPAN CLASS="MATH"><I>k</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3194img1.png
 ALT="$ \le$"> 63</SPAN> (that is, it will fit in a 64-bit signed integer on the computer).  In Java, the ``long" data
type is a signed 64-bit integer.
Under gcc and g++ (C and C++ in the programming contest environment),
the ``long long" data type is a signed 64-bit integer.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> is given on the first line of the input file. Each
test case takes one line containing a single number, without leading or trailing blanks, giving the value of <SPAN CLASS="MATH"><I>k</I></SPAN>.
As promised, <SPAN CLASS="MATH"><I>k</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/31/3194img1.png
 ALT="$ \le$"> 63</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
One line per Mersenne composite number giving first the prime factors (in increasing order) separate by asterisks,
an equal sign, the Mersenne number itself, an equal sign, and then the explicit statement of the Mersenne number,
as shown in the sample output.  Use exactly this format.  Note that all separating white space fields consist of one blank.
Separate the output for consecutive cases by a single blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
31
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
23 * 89 = 2047 = ( 2 ^ 11 ) - 1
47 * 178481 = 8388607 = ( 2 ^ 23 ) - 1
233 * 1103 * 2089 = 536870911 = ( 2 ^ 29 ) - 1
</PRE>

<P>

______________________________________________________
3195||||||false||||||
<P>Given three strings, you are to determine whether the third string can be formed by combining the characters in the first two strings. The first two strings can be mixed arbitrarily, but each must stay in its original order.<P>For example, consider forming ``<TT>tcraete</TT>" from ``<TT>cat</TT>" and ``<TT>tree</TT>":<P><P><BR>String A: <TT>cat</TT><P>String B: <TT>tree</TT><P>String C: <TT>tcraete</TT><P><P><BR>As you can see, we can form the third string by alternating characters from the two strings. As a second example, consider forming ``<TT>catrtee</TT>" from ``<TT>cat</TT>" and ``<TT>tree</TT>":<P><P><BR>String A: <TT>cat</TT><P>String B: <TT>tree</TT><P>String C: <TT>catrtee</TT><P><P><BR>Finally, notice that it is impossible to form ``<TT>cttaree</TT>" from ``<TT>cat</TT>" and ``<TT>tree</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input file, b.in, contains a single positive integer from 1 through 1000. It represents the number of data sets to follow. The processing for each data set is identical. The data sets appear on the following lines, one data set per line.<P>For each data set, the line of input consists of three strings, separated by a single space. All strings are composed of upper and lower case letters only. The length of the third string is always the sum of the lengths of the first two strings. The first two strings will have lengths between 1 and 200 characters, inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, print:<P><P><BR><TT>Data set <SPAN CLASS="MATH"><I>n</I></SPAN>: yes</TT><P><P><BR>if the third string can be formed from the first two, or<P><P><BR><TT>Data set <SPAN CLASS="MATH"><I>n</I></SPAN>: no</TT><P><P><BR>if it cannot. Of course <SPAN CLASS="MATH"><I>n</I></SPAN> should be replaced by the data set number. See the sample output below for an example.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
cat tree tcraete
cat tree catrtee
cat tree cttaree
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Data set 1: yes
Data set 2: yes
Data set 3: no
</PRE><P>
______________________________________________________
3196||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I></SPAN> be integers. The complex number <SPAN CLASS="MATH"><I>a</I> + <I>bj</I></SPAN>, where <SPAN CLASS="MATH"><I>j</I><SUP>2</SUP> = - 1</SPAN>, is a factor of <SPAN CLASS="MATH"><I>c</I> + <I>dj</I></SPAN>, if there exist integers <SPAN CLASS="MATH"><I>e</I></SPAN> and <SPAN CLASS="MATH"><I>f</I></SPAN> such that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>c</I> + <I>dj</I> = (<I>a</I> + <I>bj</I>)(<I>e</I> + <I>fj</I>)</DIV><P></P><P>A complex number <SPAN CLASS="MATH"><I>a</I> + <I>bj</I></SPAN> where <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are integers is a Gaussian prime if the factors are 1, -1, <SPAN CLASS="MATH">- <I>a</I> - <I>bj</I></SPAN> and <SPAN CLASS="MATH"><I>a</I> + <I>bj</I></SPAN> only.<P>The following are Gaussian primes: <SPAN CLASS="MATH">1 + <I>j</I></SPAN>, <SPAN CLASS="MATH">1 - <I>j</I></SPAN>, <SPAN CLASS="MATH">1 + 2<I>j</I></SPAN>, <SPAN CLASS="MATH">1 - 2<I>j</I></SPAN>, 3 and 7.<P>The Gaussian prime factors of 5 are:<P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">1 + 2<I>j</I></SPAN> and <SPAN CLASS="MATH">1 - 2<I>j</I></SPAN>, or</DIV><P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">2 + <I>j</I></SPAN> and <SPAN CLASS="MATH">2 - <I>j</I></SPAN>, or</DIV><P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">-1 - 2<I>j</I></SPAN> and <SPAN CLASS="MATH">-1 + 2<I>j</I></SPAN>, or</DIV><P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">-2 - <I>j</I></SPAN> and <SPAN CLASS="MATH">-2 + <I>j</I></SPAN>.</DIV><P>Write a program that finds all the Gaussian prime factors of a positive integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>One line of input per case. The line represents a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>One line of output per test case. The line represents the Gaussian prime factors of <SPAN CLASS="MATH"><I>n</I></SPAN>. If <SPAN CLASS="MATH"><I>a</I> + <I>bj</I></SPAN> is a Gaussian prime factor of <SPAN CLASS="MATH"><I>n</I></SPAN>, then <SPAN CLASS="MATH"><I>a</I> &gt; 0</SPAN>, <SPAN CLASS="MATH">| <I>b</I>| &gt; <I>a</I></SPAN>, if <SPAN CLASS="MATH"><I>b</I><IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/3196img1.png ALT="$ \ne$"> 0</SPAN>. If <SPAN CLASS="MATH"><I>b</I> = 0</SPAN>, the output must be <SPAN CLASS="MATH"><I>a</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
5 
6 
700
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 1+j, 1-j 
Case #2: 1+2j, 1-2j 
Case #3: 1+j, 1-j, 3 
Case #4: 1+j, 1-j, 1+2j, 1-2j, 7
</PRE><P>
______________________________________________________
3197||||||false||||||
<P>Cylinders (e.g. oil drums) (of radius 1 foot) are stacked in a rectangular bin. Each cylinder on an upper row rests on two cylinders in the row below. The cylinders in the bottom row rest on the floor. Each row has one less cylinder than the row below.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3197.jpg ALT="\epsfbox{p3197.eps}"></DIV><P>This problem is to write a program to compute the location of the center of the top cylinder from the centers of the cylinders on the bottom row. Computations of intermediate values should use double precision.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each data set will appear in one line of the input in the file. An input line consists of the number, <SPAN CLASS="MATH"><I>n</I></SPAN>, of cylinders on the bottom row followed by <SPAN CLASS="MATH"><I>n</I></SPAN> floating point values giving the <SPAN CLASS="MATH"><I>x</I></SPAN> coordinates of the centers of the cylinders (the <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates are all 1.0 since the cylinders are resting on the floor (<SPAN CLASS="MATH"><I>y</I> = 0.0</SPAN>)). The value of <SPAN CLASS="MATH"><I>n</I></SPAN> will be between 1 and 10 (inclusive). The end of input is signaled by a value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>. The distance between adjacent centers will be at least 2.0 (so the cylinders do not overlap) but no more than 3.4 (cylinders at level <SPAN CLASS="MATH"><I>k</I></SPAN> will never touch cylinders at level <SPAN CLASS="MATH"><I>k</I> - 2</SPAN>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each data set is a line containing the <SPAN CLASS="MATH"><I>x</I></SPAN> coordinate of the topmost cylinder rounded to 4 decimal places, a space and the y coordinate of the topmost cylinder to 4 decimal places.<P><P><BR><B>Note:</B> To help you check your work, the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate of the center of the top cylinder should be the average of the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinates of the leftmost and rightmost bottom cylinders.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 1.0 4.4 7.8 11.2
1 1.0
6 1.0 3.0 5.0 7.0 9.0 11.0
10 1.0 3.0 5.0 7.0 9.0 11.0 13.0 15.0 17.0 20.4
5 1.0 4.4 7.8 14.6 11.2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6.1000 4.1607
1.0000 1.0000
6.0000 9.6603
10.7000 15.9100
7.8000 5.2143
</PRE><P>
______________________________________________________
3198||||||false||||||
<P>On a grid map there are <SPAN CLASS="MATH"><I>n</I></SPAN> little men and <SPAN CLASS="MATH"><I>n</I></SPAN> houses. In each unit time, every little man can move one unit step, either horizontally, or vertically, to an adjacent point. For each little man, you need to pay a $1 travel fee for every step he moves, until he enters a house. The task is complicated with the restriction that each house can accommodate only one little man.<P>Your task is to compute the minimum amount of money you need to pay in order to send these <SPAN CLASS="MATH"><I>n</I></SPAN> little men into those <SPAN CLASS="MATH"><I>n</I></SPAN> different houses. The input is a map of the scenario, a `<TT>.</TT>' means an empty space, an `<TT>H</TT>' represents a house on that point, and am `<TT>m</TT>' indicates there is a little man on that point.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/31/p3198.jpg ALT="\epsfbox{p3198.eps}"></DIV><P>You can think of each point on the grid map as a quite large square, so it can hold <SPAN CLASS="MATH"><I>n</I></SPAN> little men at the same time; also, it is okay if a little man steps on a grid with a house without entering that house.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are one or more test cases in file. Each case starts with a line giving two integers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN>, where <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of rows of the map, and <SPAN CLASS="MATH"><I>M</I></SPAN> is the number of columns. The rest of the input will be <SPAN CLASS="MATH"><I>N</I></SPAN> lines describing the map. You may assume both <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> are between 2 and 30, inclusive. There will be the same number of <TT>H</TT>'s and <TT>m</TT>'s on the map; and there will be at most 100 houses. Input will terminate with `<TT>0 0</TT> for <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output one line with the single integer, which is the minimum amount, in dollars, you need to pay.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 2
.m
H.
5 5
HH..m
.....
.....
.....
mm..H
7 8
...H....
...H....
...H....
mmmHmmmm
...H....
...H....
...H....
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
10
28
</PRE><P>
______________________________________________________
3199||||||false||||||
<P>Find and list all numbers in decimal notation that have the property that the sum of its digits equals the sum of its digits when represented in hexadecimal (base 16) notation and also equals the sum of its digits when represented in duodecimal (base 12) notation.<P>For example, the number 2991 has the sum of (decimal) digits <SPAN CLASS="MATH">2 + 9 + 9 + 1 = 21</SPAN>. Since <SPAN CLASS="MATH">2991 = 1*1728 + 8*144 + 9*12 + 3</SPAN>, its duodecimal representation is <SPAN CLASS="MATH">1893<SUB>12</SUB></SPAN>, and these digits also sum up to 21. But in hexadecimal 2991 is <SPAN CLASS="MATH"><I>BAF</I><SUB>16</SUB></SPAN>, and <SPAN CLASS="MATH">11 + 10 + 15 = 36</SPAN>, so 2991 should be rejected by your program.<P>The next number (2992), however, has digits that sum to 22 in all three representations (including <SPAN CLASS="MATH"><I>BB</I>0<SUB>16</SUB></SPAN>), so 2992 should be on the listed output. (We don't want decimal numbers with fewer than four digits - excluding leading zeroes - so that 2992 is the first correct answer.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input from file will contain several possible cases. Each test case consists of a line containing a pair of positive integers, separated by a space. Input will terminate with `<TT>0 0</TT>' in a line byself. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, your output is to be all the numbers between the couple of integers (both included), that satisfy the requirements (in strictly increasing order), each on a separate line with no leading or trailing blanks, ending with a new-line character. Separate the output for consecutive cases by a single blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2991 3000
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2992
2993
2994
2995
2996
2997
2998
2999
</PRE><P>
______________________________________________________
3200||||||false||||||
<P>Every year, Jill takes a bicycle tour between two villages. There are different routes she can take between these villages, but she does have an upper limit on the distance that she wants to travel. Given a map of the region indicating the cities and the roads between them (and their distances), Jill would like to have a list of the various routes between the selected cities that will meet her distance requirements. Your task is to write a program that will produce a list of these routes, in increasing order of distance.<P>We make the following assumptions.<P><UL><LI>At most one road connects any pair of villages, and this road is two-way and has a non-zero positive distance. </LI><LI>There are no roads that lead directly from a village back to the same village. </LI><LI>Jill is only concerned about a one-way trip. That is, she is not concerned about returning to the village from which she starts her tour. </LI><LI>Jill will not visit any village more than once during the tour. </LI><LI>The farthest Jill will ever travel is 9999 units </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input from file will contain several possible cases, each including a route map, identification of the start and destination villages, and the maximum distance Jill is willing to travel.<P><P><BR>Each case appears in the input as a set of integers separated by blanks and/or ends of lines. The order and interpretation of these integers in each case is as follows:<P><UL><LI><SPAN CLASS="MATH"><I>NV</I></SPAN> - the number of villages in the route map. This number will be no larger than 20. </LI><LI><SPAN CLASS="MATH"><I>NR</I></SPAN> - the number of roads that appear in the route map. Each road connects a distinct pair of villages. </LI><LI><SPAN CLASS="MATH"><I>NR</I></SPAN> triples, one for each road, containing <SPAN CLASS="MATH"><I>C</I>1</SPAN>, <SPAN CLASS="MATH"><I>C</I>2</SPAN>, and <SPAN CLASS="MATH"><I>DIST</I></SPAN> - <SPAN CLASS="MATH"><I>C</I>1</SPAN> and <SPAN CLASS="MATH"><I>C</I>2</SPAN> identify two villages connected by a road, and <SPAN CLASS="MATH"><I>DIST</I></SPAN> gives the distance between these villages on that road. </LI><LI><SPAN CLASS="MATH"><I>SV</I></SPAN>, <SPAN CLASS="MATH"><I>DV</I></SPAN> - the numbers associated with the start and destination villages; the villages are numbered 1 to <SPAN CLASS="MATH"><I>NV</I></SPAN>. </LI><LI><SPAN CLASS="MATH"><I>MAXDIST</I></SPAN> - the maximum distance Jill is willing to travel (one way). </LI></UL><P>The data for the last case will be followed by a single integer with the value `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each case, display the case number (1, 2, ...) on the first line of output. Then, each on a separate additional line, list the routes that Jill might take preceded by the length of the route. Order the routes first by length, from shortest to longest. Within routes having the same length, order them in increasing lexicographic order. If there are no valid routes, print "NO ACCEPTABLE TOURS" instead. The sample input and output provide suitable examples, and the formatting shown there should be followed closely (each village number should be separated by a single space).<P>Separate the output for consecutive cases by a single blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 5
1 2 2
1 3 3
1 4 1
2 3 2
3 4 4
1 3
4

4 5
1 2 2
1 3 3
1 4 1
2 3 2
3 4 4
1 4
10

5 7
1 2 2
1 4 5
2 3 1
2 4 2
2 5 3
3 4 3
3 5 2
1 3
8

-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
 3: 1 3
 4: 1 2 3

Case 2:
 1: 1 4
 7: 1 3 4
 8: 1 2 3 4

Case 3:
 3: 1 2 3
 7: 1 2 4 3
 7: 1 2 5 3
 8: 1 4 2 3
 8: 1 4 3
</PRE><P>
______________________________________________________
3201||||||false||||||
<P>Stephen Wolfram in a ``New Kind of Science" describes a special kind of cellular automata. Regardless of what you think about the book, the automata he describes are rather interesting. They consist of rows of blocks, where blocks are either filled or not filled depending on the previous row. To generate a new row of blocks, the automata looks at the preceding row and then follows a pre-set "rule" to either color or not color a square on the output row.<P><P><BR>For example the following diagram illustrates the "output" from one of these special kind of cellular automata:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3201a.jpg ALT="\epsfbox{p3201a.eps}"></DIV><P>was generated by repeated application of ``Rule 254". The automaton was initialized with an input line that consisted of a single black square. Repeated application of rule 254 to the ouput line from the preceding step generated the black triangle shown above.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3201a.jpg ALT="\epsfbox{p3201b.eps}"></DIV><P>For this rule, the top row in each box gives one of eight possible color combinations for a cell (the middle cell) and its two neighbors (the left and right neighbors of the cell). The bottom row in a box specifies the color that the center cell should have on the next step for each of the 8 possible cases.<P><P><BR>Given this arrangement, there are 255 different generating rules or automata numbered as follows:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3201a.jpg ALT="\epsfbox{p3201c.eps}"></DIV><P><P><BR><B>The ``Bounded" Automata</B><P>Unlike the automata in ``A New Kind of Science", the automata for this problem operate in a ``bounded space". In other words, each line output by an automaton consists of exactly n squares, and, the first square, and the last square of the output from a bounded automaton are always white no matter what the rule for the automata. This means that while an automaton can examine the first and last square of its input line when computing the new second and second to last characters, it cannot change the first or last square when it outputs a line. These two squares must always remain white.<P><P><BR><B>Bounded automata will always start life on a line with an odd number of squares, and all of the squares (except the middle square) are white. The middle square for step 1 is always black.</B><P><P><BR><B>The Program</B><P>For <B>every line in the input file</B>, your program must determine which (if any) of the 255 possible automata could have generated that particular line. If none of the automata generate the sequence by the given step number, output `<TT>NONE</TT>'. If more than one automata generated that line, then, you must output all of the automata that generate the line as described below in the output section.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><UL><LI>The first field on a line of input consists of a <B>maximum step number</B> for the automata to run. This number can be up to 32 bits. Values are chosen such that the problem is solvable within the given time limits given the input specifications.<P></LI><LI>The second field on a line of input consists of an <B>odd-length string of characters</B> which represent the ``squares" on the line.<P></LI><LI>The character `<TT>W</TT>' represents a <B>white square</B> and a `<TT>B</TT>' represents a <B>black square</B>.<P></LI><LI>If an input string <B>contains characters other than</B> `<TT>W</TT>' or `<TT>B</TT>', or <B>if the input string is an invalid string (not a properly bounded string as described previously)</B>, then obviously the string cannot be found by any of the automata, and the output will be `<TT>LINE <SPAN CLASS="MATH">#</SPAN> NONE</TT>' as illustrated below.<P></LI><LI>Each line in the input file will have a terminating newline character.<P></LI><LI>Input is terminated by a single line with the characters `<TT>END OF INPUT</TT>' as illustrated below. The `<TT>END OF INPUT</TT>' line should not be processed by your search algorithm. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><UL><LI>The output consists of `<TT>LINE <SPAN CLASS="MATH">#</SPAN></TT>' followed by pairs of numbers <SPAN CLASS="MATH">(<I>rule</I>, <I>step</I>)</SPAN> where <SPAN CLASS="MATH"><I>rule</I></SPAN> is the rule number of the automata (1 through 255) that generated a particular output and <SPAN CLASS="MATH"><I>step</I></SPAN> is the <B>first step in the sequence of outputs at which the automata generated the desired output sequence</B>.<P></LI><LI>If more than one rule generated the desired output sequence <B>before or on the maximum step number</B>, list a pair for each rule number that generated the desired output, in order, from lowest automata number to highest automata number with a space between each output pair.<P></LI><LI>If none of the automata generate the particular line from the input file <B>before or on the maximum step number</B>, output `<TT>LINE <SPAN CLASS="MATH">#</SPAN> NONE</TT>' (where <SPAN CLASS="MATH">#</SPAN> represents the number of the input line with the search string). </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 WBWBWBWBW
1000 WBWBWBWBBBW
5235 WBWWBWWBBBBWWBBWWWWWWBBWWWBBWWWWWWBBWWBBBBWWBWWBW
5 WBWBDCWBW
END OF INPUT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
LINE 1 (91,3)
LINE 2 (15,8) (158,11) (159,14) (243,8)
LINE 3 (129,84) (161,84)
LINE 4 NONE
</PRE><P>
______________________________________________________
3202||||||false||||||
<P>Jill has been investing in a mutual fund for a while. Since her income has varied, the amount of money she has added to the investment has varied, and she hasn't always added to the investment at regular intervals. Nevertheless, she does have a complete record of the amounts she has invested, and the dates of those investments.<P>Periodically Jill gets a report that indicates the total value of her investment. She wonders if she would have done better by investing her money in a savings account that pays a fixed interest rate. But to determine the answer to this question, she needs to know what the equivalent interest rate would have been paid on the mutual fund, had it paid a fixed rate. You are going to help her.<P>For simplicity we will assume that Jill added money to her mutual fund only at the beginning of a month, and that all months have the same length. We will further assume that the interest she would have been paid had she invested in a savings account would have been paid at the end of the month, and would have been compounded monthly.<P><P><BR>Let's consider a simple example. Suppose Jill invested $100 at the beginning of January and another $100 in March. At the end of April she finds that the value of her mutual fund is $210. If the equivalent fixed monthly interest rate was <SPAN CLASS="MATH"><I>i</I></SPAN>, then we know that at the end of January the value would have been <SPAN CLASS="MATH">100&#215;(1 + <I>i</I>)</SPAN>. At the end of February the value would have been <SPAN CLASS="MATH">100&#215;(1 + <I>i</I>)&#215;(1 + <I>i</I>)</SPAN>, or <SPAN CLASS="MATH">100 &#215; (1  +  <I>i</I>)<SUP>2</SUP></SPAN>. At the end of March, the value would have been <SPAN CLASS="MATH">100 &#215; (1  +  <I>i</I>)<SUP>3</SUP>  +  100 &#215; (1  +  <I>i</I>)</SPAN>, and at the end of April, the value would have been <SPAN CLASS="MATH">100&#215;(1 + <I>i</I>)<SUP>4</SUP> + 100&#215;(1 + <I>i</I>)<SUP>2</SUP></SPAN>. So the question to be answered in this case is this: what is the value of <SPAN CLASS="MATH"><I>i</I></SPAN> such that <SPAN CLASS="MATH">100 &#215; (1  +  <I>i</I>)<SUP>4</SUP>  +  100 &#215; (1  +  <I>i</I>)<SUP>2</SUP>  =  210</SPAN>? The answer for this case is close to 0.016351795234.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain multiple cases. The input for each case will begin with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> (no larger than 100) that indicates the number of times Jill invested in her mutual fund. This will be followed by <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> pairs, each pair containing an integer and a real number. The integer represents a month number (1 or larger) and the real number represents a dollar amount. The first <SPAN CLASS="MATH"><I>N</I></SPAN> pairs give the month and amount of each of Jill's <SPAN CLASS="MATH"><I>N</I></SPAN> investments in the mutual fund, and the last pair indicates the value of the investment at the end of the specified month. There will be one or more whitespace characters (blanks, tabs, and/or ends of lines) between the input numbers. You may assume that the month numbers are given in ascending order.<P>Input for the last case will be followed by a single integer `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (they start with 1 and increase sequentially) and the equivalent fixed monthly interest rate Jill's mutual fund would have paid. Display this number with five fractional digits, rounded to the nearest decimal place. You may assume the interest rate will be no less than 0 and no larger than 1. Separate the output for consecutive cases by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2   1   100.00    3
100.00    4   210.00

3
1 100.00
2 50.00
5 200.00
7 358.41

  -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 0.01635

Case 2: 0.00520
</PRE><P>
______________________________________________________
3203||||||false||||||
<P>The following card trick is performed by a Magician and her Assistant. The Assistant asks a member of the audience to choose 5 cards from a standard deck of 52 cards (A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K of C[lubs], D[iamonds], H[earts] and S[pades]). The Assistant returns one of the cards to the audience member and then hands the remaining cards to the Magician, one at a time. After suitable mumbo-jumbo, the Magician identifies the (fifth) card held by the audience member.<P><P><BR>The Magician determines the card as follows:<P>The order of the cards in the deck is determined first by the value and for cards of the same value by the suit (both in the order given above). So the total order of cards is: AC, AD, AH, AS, 2D, ..., KH, KS<P><OL><LI>Remember the suit and value of the first card. </LI><LI>Among the remaining three cards find the position of the smallest card (in the above order). Add this position (1, 2, or 3) to the value of the first card. </LI><LI>If the larger two of the last three cards are not in order, add 3 to the result of step 2. </LI><LI>The missing card has the same suit as the first card and value that computed in step 3 wrapping around if necessary. </LI></OL><P>For example:<P>QH, 10D, 10C, 4D<P>Smallest of the last 3 cards is 4D in place 3. 10D and 10C are out of order so add 3 + 3 to Q. Wrapping around the missing card is 5H.<P>This problem is to write a program to perform the function of the Assistant.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file consists of a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>, which is the number of datasets that follow. Each of the <SPAN CLASS="MATH"><I>n</I></SPAN> following lines contain one data set. The dataset is a sequence of 5 cards separated by a space. Each card is given by a one or two character value and a one character suit as described in the first paragraph.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, the output on separate lines is an ordering of the 5 input cards as shown in the sample output. The first card in the sequence is the card to be returned to the audience member. The remaining cards are those given to the Magician (in the order given to the Magician). There may be more than one solution to some problems (but that is not to say there *will* be). For instance `<TT>10D 4D QH 10C 5H</TT>' is also a solution to the first problem below. In such cases, print the one which first card's order. If there are still several solutions, print the one which second card's order, and so on.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4D 5H 10C 10D QH
7H 5C KS 6C 8D
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Problem 1: 5H QH 10D 10C 4D
Problem 2: 6C 5C 7H 8D KS
</PRE><P>
______________________________________________________
3204||||||false||||||

<P>
At the end of 1999, France was confronted by a huge storm which
destroyed many parts of our forests. One of the most emblematic was
the park of the Versailles palace, where hundreds of old trees
fell. It took much effort to clean up fallen trees.

<P>
At the time, the age of the trees was reevaluated.
The method used was to count the number of
rings appearing in each tree's cross-section. The more
rings, the older the tree is. To speed up the job,
pictures of all trees were taken. Now, your work is to process the
pictures and deduce the age of the trees.

<P>

<P>
<BR>
The input for your program is a list of some points present in
rings. The rings are no longer available, but you can reconstruct them
by computing a series of convex hulls.
To find a first ring, you can compute the convex hull of
all points. Then, to find the next ring, you can remove those points on the
hull and compute the convex hull of the remaining points, and so on.
When there are no points left, the age of the tree is given by the
number of hulls found.

<P>

<P>
<BR>
Let us consider Example 1:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3204a.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3204a.gif
 ALT="\epsfbox{p3204a.eps}">
</DIV>

<P>
Here, there is just one ring:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3204b.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3204a.gif
 ALT="\epsfbox{p3204b.eps}">
</DIV>

<P>
Example 2 is more intricate:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3204c.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3204a.gif
 ALT="\epsfbox{p3204c.eps}">
</DIV>

<P>
The rings are:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3204d.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3204a.gif
 ALT="\epsfbox{p3204d.eps}">
</DIV>

<P>
Hence the age is 3.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file consists of several test cases. Each of them contains lines of integers. The first line contains one
integer, the number <SPAN CLASS="MATH"><I>n</I></SPAN> of points of the sample (<!-- MATH
 $1 \le n \le 3000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3204a.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3204a.gif
 ALT="$ \le$">3000</SPAN>).
The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines each contains two integers, the abscissa <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> and
ordinate <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> of the point. All points are pairwise distinct and
have coordinates in -50000..50000.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case of input, the output file will consist of one line containing one integer, the age of the tree.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
0 0
1 0
1 1
0 1
9
0 0
0 3
5 0
5 5
0 5
1 1
1 3
4 1
2 2
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
1
3
</PRE>

<P>

______________________________________________________
3205||||||false||||||
<P>Charles Fr&#233;d&#233;ric Gros (CFG) has decided to disprove the Riemann hypothesis numerically. For a given integer <SPAN CLASS="MATH"><I>D</I> &gt; 0</SPAN> of the form <SPAN CLASS="MATH">4<I>k</I> + 3</SPAN> and free of square prime factors, this amounts to computing the cardinality <SPAN CLASS="MATH"><I>h</I>(<I>D</I>)</SPAN> of the set<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>C</I>(<I>D</I>)<IMG WIDTH="37" HEIGHT="54" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$\displaystyle \;\stackrel{\mbox{def}}{=}\;$">{(<I>a</I>, <I>b</I>, <I>c</I>)| <I>b</I><SUP>2</SUP> - 4<I>ac</I> = - <I>D</I>,| <I>b</I>|<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$\displaystyle \le$"><I>a</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$\displaystyle \le$"><I>c</I>, where <I>b</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$\displaystyle \ge$">0 if <I>a</I> = <I>c</I> or <I>a</I> = | <I>b</I>|.</DIV><P></P>(Where <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN> are integers.)<P>For instance, <SPAN CLASS="MATH"><I>C</I>(3) = {(1, 1, 1)}</SPAN>, <SPAN CLASS="MATH"><I>C</I>(15) = {(1, 1, 4),(2, 1, 2)}</SPAN>. Note that <SPAN CLASS="MATH"><I>D</I> = 75</SPAN> is not eligible, since <SPAN CLASS="MATH">75 = 3<SUP> . </SUP>5<SUP>2</SUP></SPAN>. Non-eligible numbers in the interval <SPAN CLASS="MATH">[3, 103]</SPAN> are {27, 63, 75, 99}.<P>CFG is interested in values of <SPAN CLASS="MATH"><I>D</I></SPAN> for which <SPAN CLASS="MATH"><I>h</I>(<I>D</I>)/<IMG WIDTH="34" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$ \sqrt{D}$"></SPAN> is large. Your role is to write a program to help CFG finding these record numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>You are given an input file consisting of several test cases, each of them consists of three integers on a single line:<P><P><BR><SPAN CLASS="MATH"><I>Dmin</I>&nbsp;<I>Dmax</I>&nbsp;<I>K</I></SPAN><P><P><BR>where <!-- MATH
 $3 \le Dmin \le Dmax < 2^{31}$
 --><SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$ \le$"><I>Dmin</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$ \le$"><I>Dmax</I> &lt; 2<SUP>31</SUP></SPAN> and are of the form <SPAN CLASS="MATH">4<I>k</I> + 3</SPAN>. Moreover, <SPAN CLASS="MATH"><I>Dmax</I> - <I>Dmin</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$ \le$">10<SUP>6</SUP></SPAN> and <!-- MATH
 $K < 10^{4}$
 --><SPAN CLASS="MATH"><I>K</I> &lt; 10<SUP>4</SUP></SPAN>. For such values, one has <!-- MATH
 $h(D) < 2^{31}$
 --><SPAN CLASS="MATH"><I>h</I>(<I>D</I>) &lt; 2<SUP>31</SUP></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program must determine the eligible values of <SPAN CLASS="MATH"><I>D</I></SPAN> in the interval <SPAN CLASS="MATH">[<I>Dmin</I>, <I>Dmax</I>]</SPAN> for which<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>f</I> (<I>D</I>) = <IMG WIDTH="15" HEIGHT="45" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$\displaystyle \left\lfloor\vphantom{ (1000 \ h(D)) / \lfloor \sqrt{D} \rfloor }\right.$">(1000&nbsp;<I>h</I>(<I>D</I>))/<IMG WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$\displaystyle \lfloor$"><IMG WIDTH="34" HEIGHT="42" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$\displaystyle \sqrt{D}$"><IMG WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$\displaystyle \rfloor$"><IMG WIDTH="15" HEIGHT="45" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$\displaystyle \left.\vphantom{ (1000 \ h(D)) / \lfloor \sqrt{D} \rfloor }\right\rfloor$"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3205img1.png ALT="$\displaystyle \ge$"><I>K</I>.</DIV><P></P><P>The output will consist of lines:<P><P><BR><SPAN CLASS="MATH"><I>D</I>&nbsp;<I>h</I>&nbsp;<I>f</I></SPAN><P><P><BR>where <SPAN CLASS="MATH"><I>D</I></SPAN> is a record number, <SPAN CLASS="MATH"><I>h</I> = <I>h</I>(<I>D</I>)</SPAN> and <SPAN CLASS="MATH"><I>f</I> = <I>f</I> (<I>D</I>)</SPAN>.<P>If no answer is found, then output a line containing the word `<TT>empty</TT>'.<P>Write a blank line to separate the output of two consecutive cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
3 103 0
27 27 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
3 1 1000
7 1 500
11 1 333
15 2 666
19 1 250
23 3 750
31 3 600
35 2 400
39 4 666
43 1 166
47 5 833
51 2 285
55 4 571
59 3 428
67 1 125
71 7 875
79 5 625
83 3 333
87 6 666
91 2 222
95 8 888
103 5 500

empty
</PRE><P>
______________________________________________________
3206||||||false||||||
<P>Wireless networking is our future, provided at least some connections exist!<P>More precisely, <SPAN CLASS="MATH"><I>N</I></SPAN> nodes of a radio network are distributed in a <SPAN CLASS="MATH"><I>L</I>&#215;<I>H</I></SPAN> area. Two nodes may communicate if their euclidean distance is strictly less than <SPAN CLASS="MATH"><I>R</I></SPAN>, the radio range. We then say that there exists a wireless link between those two nodes. Of course, we do not consider that a node has a link with itself.<P><P><BR>Write a program that, given a description of the positions of the nodes, outputs the number of wireless links in the network.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file consists of several test cases, each of them as described below.<P>The positions <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> of the nodes are integers in the ranges <!-- MATH
 $0 \le x < L$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3206img1.png ALT="$ \le$"><I>x</I> &lt; <I>L</I></SPAN> and <!-- MATH
 $0 \le y < H$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3206img1.png ALT="$ \le$"><I>y</I> &lt; <I>H</I></SPAN>. The first line of the input consists in the four integers <SPAN CLASS="MATH"><I>L</I></SPAN>, <SPAN CLASS="MATH"><I>H</I></SPAN>, <SPAN CLASS="MATH"><I>R</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>, with <!-- MATH
 $0 < L \le 5 \cdot 10^{6}$
 --><SPAN CLASS="MATH">0 &lt; <I>L</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3206img1.png ALT="$ \le$">5<SUP> . </SUP>10<SUP>6</SUP></SPAN>, <!-- MATH
 $0 < H \le 5 \cdot 10^{6}$
 --><SPAN CLASS="MATH">0 &lt; <I>H</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3206img1.png ALT="$ \le$">5<SUP> . </SUP>10<SUP>6</SUP></SPAN>, <!-- MATH
 $0 < R \le 30000$
 --><SPAN CLASS="MATH">0 &lt; <I>R</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3206img1.png ALT="$ \le$">30000</SPAN>, <!-- MATH
 $0 < N \le 300000$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3206img1.png ALT="$ \le$">300000</SPAN>.<P>Then come <SPAN CLASS="MATH"><I>N</I></SPAN> lines with the coordinates <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> of each node. All node positions are different. You can assume that each node has links with at most 31 nodes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, the output consists in a single line containing the number of wireless links in the network.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample input</A>&nbsp;</FONT></H2><P><PRE> 
10 10 5 3
0 0
4 0
0 5
30 20 11 6
0 0
0 10
10 0
10 10
20 0
20 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
1
7
</PRE><P>
______________________________________________________
3207||||||false||||||
<P>Last summer was so hot that it was impossible to do anything but stay in the bathroom and solve puzzles. These games were so boring that you decided to write programs to solve them. This gave you a good reason to go back to the lab and benefit from its air conditioner.<P>Here is the game you decided to solve automatically. Take a grid with <SPAN CLASS="MATH"><I>n</I></SPAN> rows and <SPAN CLASS="MATH"><I>m</I></SPAN> columns, with a letter in each cell. From the grid's cells, one can read words horizontally, vertically or diagonally, oriented forwards or backwards. You also have a list of words, and the goal is to highlight all occurrences of these words on the grid. The letters in non-highlighted cells of the grid form a word (called the <EM>code word</EM>) that can be read from top to bottom and left to right. The goal of the program is to find the code word automatically.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases.<P>Each case begins with the two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> on a line (<!-- MATH
 $0 < n, m \le 40$
 --> <SPAN CLASS="MATH">0 &lt; <I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3207img1.png ALT="$ \le$">40</SPAN>), separated by a blank. The second line contains the number <SPAN CLASS="MATH"><I>k</I></SPAN> (<!-- MATH
 $0 < k \le 200$
 --> <SPAN CLASS="MATH">0 &lt; <I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3207img1.png ALT="$ \le$">200</SPAN>) of words in the list. Then follow the <SPAN CLASS="MATH"><I>k</I></SPAN> words, one per line. Words do not have more than 22 letters. After these, follows the grid, that is to say <SPAN CLASS="MATH"><I>n</I></SPAN> rows filled with <SPAN CLASS="MATH"><I>m</I></SPAN> uppercase letters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, write the code word on a line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
6 6
7
ALLY
BARE
BARED
FINES
HIND
LORD
WONG
BBARED
ACALHF
RWOEII
EROSNN
DARNDE
ALLYGS
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
CAESAR
</PRE><P><P><P><BR><B>Note:</B> The sample input data corresponds to the array:<P><P><BR><TABLE COLS=6><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>L</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>H</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>W</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>O</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>O</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>L</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>L</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Y</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>G</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD></TR></TABLE><P><P><BR>Looking for the word <TT>ALLY</TT>, we find it at the bottom:<P><P><BR><TABLE COLS=6><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>L</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>H</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>W</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>O</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>O</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>A</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>L</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>L</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Y</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>G</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD></TR></TABLE><P><P><BR>After highlighting it, we look now for <TT>BARE</TT> that appears twice:<P><P><BR><TABLE COLS=6><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>B</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>B</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>A</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>R</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>E</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>A</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>L</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>H</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>R</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>W</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>O</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>E</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>O</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>A</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>L</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>L</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Y</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>G</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD></TR></TABLE><P><P><BR>We then treat <TT>BARED</TT> that also appears twice:<P><P><BR><TABLE COLS=6><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>B</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>B</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>A</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>R</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>E</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>D</B></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>A</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>L</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>H</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>R</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>W</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>O</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>E</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>O</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>D</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>A</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>L</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>L</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Y</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>G</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD></TR></TABLE><P><P><BR>Proceeding until the end of the list, we are left with:<P><P><BR><TABLE COLS=6><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S</TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TABLE><P><P><P><BR>Thus, it results as sample output.<P>
______________________________________________________
3208||||||false||||||
<P>You are back in the bathroom, now solving standard crosswords puzzles. Did you ever think about producing such puzzles? Producing crossword puzzles is surprisingly tedious, especially if one considers that solving crossword puzzles is surprisingly amusing. Fortunately, given a dictionary of words, your computer can help to produce lots of crosswords puzzles.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=6 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>p</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>l</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>a</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>s</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>m</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>a</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>l</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>i</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>c</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>h</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>e</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>n</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>a</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>c</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>h</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>i</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>n</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>g</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>s</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>h</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>i</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>n</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>t</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>o</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>m</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>e</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>n</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>t</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>o</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>r</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>a</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>n</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>g</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>o</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>r</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>a</B></TD></TR></TBODY></TABLE></DIV><P><P><BR>The puzzles we consider are special: frames are <SPAN CLASS="MATH"><I>n</I>&#215;<I>n</I></SPAN> empty squares and filled frames are symmetric with respect to the descending diagonal. That is, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th ``down'' word and the <SPAN CLASS="MATH"><I>i</I></SPAN>-th ``across'' word are the same (see above for an example on a <SPAN CLASS="MATH">6&#215;6</SPAN> frame).<P>Write a program that reads a list of words from standard input and writes how many puzzles can be produced from those words.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases.<P>The first line of each one contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3208img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3208img1.png ALT="$ \le$">16</SPAN>) and <SPAN CLASS="MATH"><I>m</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3208img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3208img1.png ALT="$ \le$">20000</SPAN>). Integer <SPAN CLASS="MATH"><I>n</I></SPAN> is the frame size while integer <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of words in the dictionary. Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines contains a word of <SPAN CLASS="MATH"><I>n</I></SPAN> letters. Those words are made of the 26 lowercase letters (from `<TT>a</TT>' to `<TT>z</TT>') and no word may appear more than once.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, the first and only line of the output should contain an integer <SPAN CLASS="MATH"><I>r</I></SPAN>, the number of different puzzles that can be made with the words of the list. Notice that a given puzzle may contain a word more than once.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
4 4
aaaa
bbbb
abab
baba
16 1
abcdefghijklmopq
</PRE><P><PRE> 
8
0
</PRE><P><P><P><BR><B>Note:</B> The 8 puzzles for the first input case are:<PRE> 
aaaa   aaaa   abab   abab   baba   baba   bbbb   bbbb
aaaa   abab   baba   bbbb   aaaa   abab   baba   bbbb
aaaa   aaaa   abab   abab   baba   baba   bbbb   bbbb
aaaa   abab   baba   bbbb   aaaa   abab   baba   bbbb
</PRE><P>
______________________________________________________
3209||||||false||||||
<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3209.gif ALT="\epsfbox{p3209.eps}"></DIV><P>Usually, labyrinths are to be solved by finding a path from entry to exit. This time, you are to discover the labyrinth itself...<P>A labyrinth is laid on a square <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> grid, and hence contains <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> cells. Every cell holds the total number of cells that are visible both vertically and horizontally, the walls being opaque. For instance, in the picture above, the center cell (second row, second column) holds ``1'', since there are walls surrounding the cell in all directions except above, where the next wall is one cell away. Similarly, the leftmost-bottommost cell (third row, first column) holds ``4'' since, from this cell, one sees 2 cells above, 2 other cells to the right, none below and none to the left.<P><P><BR>Given the numbers in the cells, find the labyrinth. You may assume that the square grid is surrounded by walls and that the problem has a solution.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases, each of then defined as follows:<P>The first line consists of number <SPAN CLASS="MATH"><I>N</I></SPAN>, with <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3209.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3209.gif ALT="$ \le$">16</SPAN>. Then come <SPAN CLASS="MATH"><I>N</I></SPAN> lines, each containing the <SPAN CLASS="MATH"><I>N</I></SPAN> integers of a row.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, output an ASCII representation of the labyrinth. This representations is made of <SPAN CLASS="MATH">2<I>N</I> + 1</SPAN> lines of <SPAN CLASS="MATH">2<I>N</I> + 1</SPAN> characters. For instance the labyrinth above should be given as:<P><PRE> 
+-+-+-+
| |   |
+ + + +
| | | |
+ +-+ +
|     |
+-+-+-+
</PRE><P>Notice that walls are represented either by `<TT>-</TT>' or `<TT><SPAN CLASS="MATH">|</SPAN></TT>' depending on whether they are horizontal or vertical. Cells and lack of walls are rendered by ordinary spaces, while (potential) walls meet on `<TT>+</TT>'.<P>Write a blank line to separate the output of two consecutive cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
2
2 2
2 2
4
5 6 3 4
3 4 2 1
5 6 5 4
1 4 2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
+-+-+
|   |
+ + +
|   |
+-+-+

+-+-+-+-+
|       |
+ + +-+ +
|   | | |
+ + + +-+
|       |
+-+ + + +
|   | | |
+-+-+-+-+
</PRE><P>
______________________________________________________
3210||||||false||||||
<P>In many places, the card game ``war'' is popular amongst children. As we shall see, the game result completely depends on the initial distribution of cards between two players, A and B.<P><P><BR>We consider a standard 32 card game and we ignore suits, only ranks are important. Hence we have <SPAN CLASS="MATH">4&#215;8</SPAN> cards: seven (<TT>7</TT>), eight (<TT>8</TT>), nine (<TT>9</TT>), ten (<TT>T</TT>), jack (<TT>J</TT>), queen (<TT>Q</TT>), king (<TT>K</TT>) and ace (<TT>A</TT>) -- ace being the strongest card and seven the weakest, <EM>i.e.</EM> <TT>7</TT> <SPAN CLASS="MATH">&lt;</SPAN> <TT>8</TT> <SPAN CLASS="MATH">&lt;</SPAN> <TT>9</TT> <SPAN CLASS="MATH">&lt;</SPAN> <TT>T</TT> <SPAN CLASS="MATH">&lt;</SPAN> <TT>J</TT> <SPAN CLASS="MATH">&lt;</SPAN> <TT>Q</TT> <SPAN CLASS="MATH">&lt;</SPAN> <TT>K</TT> <SPAN CLASS="MATH">&lt;</SPAN> <TT>A</TT>.<P>At game start, players each hold a deck of 16 cards in their hand, face down. The object of the game is to win all the cards. Both players now turn their top card face up and put it on the table. Whoever plays the higher card takes both cards and adds them (face down) to the bottom of his or her deck. It is important to notice that the higher, winning, card is added first. Then both players turn over their next card, and so on.<P>If the turned over cards are equal there is a war. The tied cards stay on the table and both players play the next card of their deck. Whoever has the higher of the new face-up cards wins the war and adds all four cards face-down to the bottom of his or her deck. If the new face-up cards are equal as well, the war continues: each player puts another card face-up. The war goes on like this as long as the face-up cards continue to be equal. As soon as they are different the player of the higher card wins all the cards in the war and add those cards to the bottom of his or her deck. The higher, winning, card is added first, then the lower card, then all the tied card in reverse playing order.<P>For instance, let us assume that players A and B have the following decks (the deck of player A is shown first and top of decks at left):<P><PRE> 
AKKQQJJTT998877A
AK7QQJJTT99887KA
</PRE><P>A war is started because both A and B play aces, then the war goes on because of kings, and finally player A's king wins over player B's seven. Hence, player A collects all cards on the table. Now, the decks are as follows:<P><PRE> 
QQJJTT998877AK7KKAA
QQJJTT99887KA
</PRE><P>As regards the outcome of the whole game there are four situations:<P><OL><LI>Player A wins the game when player B's deck becomes empty while player A still owns cards. </LI><LI>Player B wins the game in the symmetric situation. </LI><LI>There is a draw, when both players exhaust their cards simultaneously. </LI><LI>The game lasts forever. </LI></OL><P><P><BR>Write a program that computes the outcome of the game from the initial decks of players A and B.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases, each of them is made of two lines: the first line is player A's deck, while the second line is player B's deck.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program must output one line, which should be `<TT>A wins</TT>', `<TT>B wins</TT>', `<TT>draw game</TT>' or `<TT>play forever</TT>', depending on the game's outcome.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
AKKQQJJTT998877A
AK7QQJJTT99887KA
AAKKQQJJTT998877
AAKKQQJJTT998877
87TT8799QJAAQJKK
T8T79897AQAJKQKJ
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
A wins
draw game
play forever
</PRE><P>
______________________________________________________
3211||||||false||||||
<P>As you must have experienced, instead of landing immediately, an aircraft sometimes waits in a holding loop close to the runway. This holding mechanism is required by air traffic controllers to space apart aircraft as much as possible on the runway (while keeping delays low). It is formally defined as a ``holding pattern'' and is a predetermined maneuver designed to keep an aircraft within a specified airspace (see Figure 1 for an example).<P><DIV ALIGN="CENTER">Figure 1: A simple Holding Pattern as described in a pilot text book.</DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><IMG width=500 ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3211.gif ALT="\epsfbox{p3211.eps}"></DIV><P>Jim Tarjan, an air-traffic controller, has asked his brother Robert to help him to improve the behavior of the airport.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">The TRACON area</A>&nbsp;</FONT></H2><P>The Terminal Radar Approach CONtrol (TRACON) controls aircraft approaching and departing when they are between 5 and 50 miles of the airport. In this final scheduling process, air traffic controllers make some aircraft wait before landing. Unfortunately this ``waiting'' process is complex as aircraft follow predetermined routes and their speed cannot be changed. To reach some degree of flexibility in the process, the basic delaying procedure is to make aircraft follow a holding pattern that has been designed for the TRACON area. Such patterns generate a constant prescribed delay for an aircraft (see Figure 1 for an example). Several holding patterns may exist in the same TRACON.<P>In the following, we assume that there is a <EM>single runway</EM> and that when an aircraft enters the TRACON area, it is assigned an <EM>early landing time</EM>, a <EM>late landing time</EM> and a possible holding pattern. The early landing time corresponds to the situation where the aircraft does not wait and lands as soon as possible. The late landing time corresponds to the situation where the aircraft waits in the prescribed holding pattern and then lands at that time. We assume that an aircraft enters at most one holding pattern. Hence, the early and late landing times are the only two possible times for the landing.<P>The <EM>security gap</EM> is the minimal elapsed time between consecutive landings. The objective is to <EM>maximize the security gap</EM>. Robert believes that you can help.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Example</A>&nbsp;</FONT></H2><P>Assume there are 10 aircraft in the TRACON area. Table 1 provides the corresponding early and late landing times (columns ``Early'' and ``Late'').<P><P><BR><DIV ALIGN="CENTER">Table 1: A 10 aircraft instance of the problem.</DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER RULES=GROUPS><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Aircraft</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Early</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Late</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Solution</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>44</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>156</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Early</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I><SUB>2</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>153</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>182</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Early</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>48</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>109</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Late</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I><SUB>4</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>160</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>201</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Late</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I><SUB>5</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>55</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>186</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Late</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I><SUB>6</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>54</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>207</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Early</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I><SUB>7</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>55</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>165</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Late</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I><SUB>8</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>17</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>58</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Early</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I><SUB>9</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>132</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>160</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Early</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>A</I><SUB>10</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>87</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>197</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Early</TD></TR></TBODY></TABLE></DIV><P><P><BR>The maximal security gap is 10 and the corresponding solution is reported in Table 1 (column ``Solution''). In this solution, the aircraft land in the following order: <SPAN CLASS="MATH"><I>A</I><SUB>8</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>6</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>10</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>9</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>7</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>5</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>4</SUB></SPAN>. The security gap is realized by aircraft <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>A</I><SUB>6</SUB></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file, that contains all the relevant data, contains several test cases<P>Each test case is described in the following way. The first line contains the number <SPAN CLASS="MATH"><I>n</I></SPAN> of aircraft ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3211.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3211.gif ALT="$ \le$">2000</SPAN>). This line is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines. Each of these lines contains two integers, which represent the early landing time and the late landing time of an aircraft. Note that all times <SPAN CLASS="MATH"><I>t</I></SPAN> are such that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3211.gif ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3211.gif ALT="$ \le$">10<SUP>7</SUP></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, your program has to write a line that conttains the maximal security gap between consecutive landings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
10
44 156
153 182
48 109
160 201
55 186
54 207
55 165
17 58
132 160
87 197
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001006000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
10
</PRE><P><P><P><BR><B>Note:</B> The input file corresponds to Table 1.<P><P><P><BR><B>Robert's Hints</B><P><DL><DT><STRONG><B>Optimization vs. Decision</B></STRONG></DT><DD>Robert advises you to work on the decision variant of the problem. It can then be stated as follows: Given an integer <SPAN CLASS="MATH"><I>p</I></SPAN>, and an instance of the optimization problem, the question is to decide if there is a solution with security gap <SPAN CLASS="MATH"><I>p</I></SPAN> or not. Note that, if you know how to solve the decision variant of an optimization problem, you can build a binary search algorithm to find the optimal solution.<P></DD><DT><STRONG><B>On decision</B></STRONG></DT><DD>Robert believes that the decision variant of the problem can be <EM>modeled as a very particular boolean satisfaction problem</EM>. Robert suggests to associate a boolean variable per aircraft stating whether the aircraft is early (variable takes value ``true'') or late (value ``false''). It should then be easy to see that for some aircraft to land at some time has consequences for the landing times of other aircraft. For instance in Table 1 and with a delay of 10, if aircraft <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN> lands early, then aircraft <SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN> has to land late. And of course, if aircraft <SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN> lands early, then aircraft <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN> has to land late. That is, aircraft <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN> cannot both land early and formula <SPAN CLASS="MATH">(<I>A</I><SUB>1</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3211.gif ALT="$ \Rightarrow$"> &#172;<I>A</I><SUB>3</SUB>) <IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3211.gif ALT="$ \wedge$"> (<I>A</I><SUB>3</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3211.gif ALT="$ \Rightarrow$"> &#172;<I>A</I><SUB>1</SUB>)</SPAN> must hold.</DD></DL><P><P><BR>And now comes Robert's big insight: our problem has a solution, if and only if we have no contradiction. A contradiction being something like <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3211.gif ALT="$ \Leftrightarrow$"> &#172;<I>A</I><SUB>i</SUB></SPAN>.<P>
______________________________________________________
3212||||||false||||||
<P>The city of X (for reasons that will become clear, the name of this city is kept secret) is one of the safest cities in the country. However, the mayor of X has decided to eliminate crime completely.<P><b>The Perfect Police Patrol System (PPPS) </b><P>The Perfect Police Patrol System is the mayor's response to crime. According to the mayor's analysis, the city consists of intersections and streets, where every street connect two intersections. Crime must be eliminated from the streets.<P>The mayor's idea is to install PPPS stations at some intersections. The officers in a station can patrol all the streets that enter the intersection where the station is, and only those. To achieve maximal security every street should be patrolled. That is, <EM>there must be a PPPS station at one of the two ends of every street</EM>. However, in the past, there were unfortunate incidents where two police patrols fought with each other in dark streets, because they could not recognize that they were both from the police. To avoid such untimely incidents, <EM>there cannot be PPPS stations at both ends of a street</EM>. Finally, as PPPS stations are very expensive and as the mayor is not willing to increase taxes, <EM>one should build as few PPPS stations as possible</EM>.<P><P><BR>Write a program that determines whether it is possible to design such a Perfect Police Patrol System. If so, the program should output the minimal number of stations that have to be built.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases, each of them consists of lines of integers. The first line contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3212img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3212img1.png ALT="$ \le$">1000</SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3212img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3212img1.png ALT="$ \le$">10000</SPAN>) where integer <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of intersections and integer <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of streets. The next <SPAN CLASS="MATH"><I>m</I></SPAN> lines describe the <SPAN CLASS="MATH"><I>m</I></SPAN> streets. Each of theses lines contains two integers that identify the two intersections at the two ends of the streets (intersections are numbered <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN>). Because of the various tunnels, bridges, temporarily closed streets etc. you cannot assume anything about the topology of the city.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the output contains one single line. If the PPPS can be designed, then the program should output one integer, the minimal number of PPPS stations required. Otherwise, if no PPPS can be designed, the program should output the line `<TT>Impossible</TT>' (without quotes).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
7 4
1 2
1 3
4 5
6 5
5 6
1 2
1 3
2 4
3 4
3 5
4 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
2
Impossible
</PRE><P>
______________________________________________________
3213||||||false||||||
Ancient Roman empire had a strong government
system with various departments, including a secret service department.
Important documents were sent between provinces and the capital
in encrypted form to prevent eavesdropping. The most popular ciphers in
those times were so called <SPAN  CLASS="textit">substitution cipher</SPAN> and
<SPAN  CLASS="textit">permutation cipher</SPAN>.

Substitution cipher changes all occurrences of each letter to some
other letter. Substitutes for all letters must be different. For
some letters substitute letter may coincide with the original letter.
For example, applying substitution cipher that changes all letters
from `<TT>A</TT>' to `<TT>Y</TT>' to the next ones in the alphabet,
and changes `<TT>Z</TT>' to `<TT>A</TT>', to the message ``<TT>VICTORIOUS</TT>''
one gets the message ``<TT>WJDUPSJPVT</TT>''.

Permutation cipher applies some permutation to the letters
of the message. For example, applying the permutation
<!-- MATH
 $\langle 2, 1, 5, 4, 3, 7, 6, 10, 9, 8\rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3213img1.png
 ALT="$ \langle$">2, 1, 5, 4, 3, 7, 6, 10, 9, 8<IMG
 WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3213img1.png
 ALT="$ \rangle$"></SPAN> to the message
``<TT>VICTORIOUS</TT>'' one gets the message
``<TT>IVOTCIRSUO</TT>''.

It was quickly noticed that being applied separately, both substitution
cipher and permutation cipher were rather weak. But when being combined,
they were strong enough for those times. Thus, the most important messages were
first encrypted using substitution cipher, and then the result was
encrypted using permutation cipher. Encrypting the message ``<TT>VICTORIOUS</TT>''
with the combination of the ciphers described above one gets the message
``<TT>JWPUDJSTVP</TT>''.

Archeologists have recently found the message engraved on a stone plate.
At the first glance it seemed completely meaningless, so it was suggested that the
message was encrypted with some substitution and permutation ciphers. They
have conjectured the possible text of the original message that was encrypted, and now
they want to check their conjecture. They need a computer program to do it, so
you have to write one.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input file contains several test cases. Each of them consists of two lines. The first line contains the message
engraved on the plate. Before encrypting, all spaces and punctuation
marks were removed, so the encrypted message contains only capital letters of the
English alphabet.
The second line contains the original message that is conjectured
to be encrypted in the message on the first line. It also contains
only capital letters of the English alphabet.

The lengths of both lines of the input file are equal and do not
exceed 100.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, print one output line. Output `<TT>YES</TT>' if the message on the first line of the input file
could be the result of encrypting the message on the second line, or
`<TT>NO</TT>' in the other case.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
JWPUDJSTVP
VICTORIOUS
MAMA
ROME
HAHA
HEHE
AAA
AAA
NEERCISTHEBEST
SECRETMESSAGES
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
YES
NO
YES
YES
NO
</PRE>

<P>

______________________________________________________
3214||||||false||||||
Ivan works at a factory that produces heavy machinery. He has
a simple job -- he knocks up wooden boxes of different sizes
to pack machinery for delivery to the customers. Each box
is a rectangular parallelepiped. Ivan uses six rectangular wooden pallets
to make a box. Each pallet is used for one side of the box.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3214.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3214.jpg
 ALT="\epsfbox{p3214.eps}">
</DIV>
Joe delivers pallets for Ivan. Joe is not very smart and
often makes mistakes -- he brings Ivan pallets that do not fit
together to make a box. But Joe does not trust Ivan. It always
takes a lot of time to explain Joe that he has made a mistake.

Fortunately, Joe adores everything related to computers and sincerely
believes that computers never make mistakes. Ivan has decided to
use this for his own advantage. Ivan asks you to write
a program that given sizes of six rectangular pallets
tells whether it is possible to make a box out of them.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input file contains several test cases. Each of them consists of six lines. Each line describes one pallet and
contains two integer numbers <SPAN CLASS="MATH"><I>w</I></SPAN> and <SPAN CLASS="MATH"><I>h</I></SPAN> (<!-- MATH
 $1 \le w, h \le 10\,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3214.jpg
 ALT="$ \le$"><I>w</I>, <I>h</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3214.jpg
 ALT="$ \le$">10&nbsp;000</SPAN>) --
width and height of the pallet in millimeters respectively.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, print one output line. Write a single word `<TT>POSSIBLE</TT>' to the output file if it is possible
to make a box using six given pallets for its sides. Write a single word
`<TT>IMPOSSIBLE</TT>' if it is not possible to do so.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
1345 2584
2584 683
2584 1345
683 1345
683 1345
2584 683
1234 4567
1234 4567
4567 4321
4322 4567
4321 1234
4321 1234
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
POSSIBLE
IMPOSSIBLE
</PRE>


<P>

______________________________________________________
3215||||||false||||||
<SPAN CLASS="textit">Lamps-O-Matic</SPAN> company assembles very large chandeliers. A chandelier consists of multiple levels. On the first level crystal pendants are attached to the rings. Assembled rings and new pendants are attached to the rings of the next level, and so on. At the end there is a single large ring -- the complete chandelier with multiple smaller rings and pendants hanging from it. A special-purpose robot assembles chandeliers. It has a supply of crystal pendants and empty rings, and a stack to store elements of a chandelier during assembly. Initially the stack is empty. Robot executes a list of commands to assemble a chandelier.<DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3215.jpg ALT="\epsfbox{p3215.eps}"></DIV>On command ``<TT>a</TT>'' robot takes a new crystal pendant and places it on the top of the stack. On command ``<TT>1</TT>'' to ``<TT>9</TT>'' robot takes the corresponding number of items from the top of the stack and consecutively attaches them to the new ring. The newly assembled ring is then placed on the top of the stack. At the end of the program there is a single item on the stack -- the complete chandelier. Unfortunately, for some programs it turns out that the stack during their execution needs to store too many items at some moments. Your task is to optimize the given program, so that the overall design of the respective chandelier remains the same, but the maximal number of items on the stack during the execution is minimal. A pendant or any complex multi-level assembled ring count as a single item of the stack. The design of a chandelier is considered to be the same if each ring contains the same items in the same order. Since rings are circular it does not matter what item is on the top of the stack when the robot receives a command to assemble a new ring, but the relative order of the items on the stack is important. For example, if the robot receives command ``<TT>4</TT>'' when items <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3215.jpg ALT="$ \langle$"><I>i</I><SUB>1</SUB>, <I>i</I><SUB>2</SUB>, <I>i</I><SUB>3</SUB>, <I>i</I><SUB>4</SUB><IMG WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3215.jpg ALT="$ \rangle$"></SPAN> are on the top of the stack in this order (<SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN> being the topmost), then the same ring is also assembled if these items are arranged on the stack in the following ways: <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3215.jpg ALT="$ \langle$"><I>i</I><SUB>2</SUB>, <I>i</I><SUB>3</SUB>, <I>i</I><SUB>4</SUB>, <I>i</I><SUB>1</SUB><IMG WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3215.jpg ALT="$ \rangle$"></SPAN>, or <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3215.jpg ALT="$ \langle$"><I>i</I><SUB>3</SUB>, <I>i</I><SUB>4</SUB>, <I>i</I><SUB>1</SUB>, <I>i</I><SUB>2</SUB><IMG WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3215.jpg ALT="$ \rangle$"></SPAN>, or <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3215.jpg ALT="$ \langle$"><I>i</I><SUB>4</SUB>, <I>i</I><SUB>1</SUB>, <I>i</I><SUB>2</SUB>, <I>i</I><SUB>3</SUB><IMG WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3215.jpg ALT="$ \rangle$"></SPAN>.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input file contains several test cases. Each of them consists of a single line with a valid program for the robot. The program consists of at most <SPAN CLASS="MATH">10&nbsp;000</SPAN> characters.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, print two output lines. On the first line write the minimal required stack capacity (number of items it can hold) to assemble the chandelier. On the second line write some program for the assembly robot that uses stack of this capacity and results in the same chandelier.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
aaaaa3aaa2aaa45
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
6
aaa3aaa2aaa4aa5
</PRE><P>
______________________________________________________
3216||||||false||||||
Andy is fond of old computers. He loves everything about them
and he uses emulators of old operating systems on his modern
computer. Andy also likes writing programs for them. Recently he
has decided to write a text editor for his favorite text-mode operating
system.

The most difficult task he has got stuck with is document indexing.
An <SPAN  CLASS="textit">index</SPAN> of the document is the lexicographically ordered list of all words occurring in the
document with the numbers of pages they occur at. Andy feels that he
is not able to write the component of the editor that performs
indexing, so he asks you to help.

A document is a sequence of paragraphs. Each paragraph consists
of one or more lines. Paragraphs are separated from each other
with exactly one blank line.

First, the document is <SPAN  CLASS="textit">paginated</SPAN> -- divided into pages.
Each page consists of up to <SPAN CLASS="MATH"><I>n</I></SPAN> lines. Lines are placed on the page
one after another, until <SPAN CLASS="MATH"><I>n</I></SPAN> lines are placed. The
following correction rules are then applied:

<UL>
<LI>If the last line on a page is the last line of the paragraph,
    then the following empty line is skipped, i.e. it is not placed on any
    page. Therefore, the page never starts with a blank line.
</LI>
<LI>If the last line on a page is the first line of a paragraph
    that contains more than one line (so called <SPAN  CLASS="textit">orphan line</SPAN>),
    then it is moved to the next page.
</LI>
<LI>If the last line on a page is the next-to-last line of a paragraph
    that contains more than three lines, then this line is moved to the next page
    (otherwise, the last line of the paragraph would be alone
    on the page -- so called <SPAN  CLASS="textit">widow line</SPAN>).
</LI>
<LI>If the last line on a page is the next-to-last line of a paragraph
    that contains exactly two or three lines, then the whole paragraph is moved to the next page
    (so we have neither orphan, nor widow lines).
</LI>
</UL>

After applying the correction rules the next page is formed, and so on
until the whole document is paginated.

A word is a continuous sequence of letters of the English alphabet.
Case is not important.

The index of the document contains each word from the document and the
list of the pages it occurs at.
The numbers of pages a word occurs at must
be listed in the ascending order. Numbers must be separated by commas.
If a word occurs on three or more consecutive pages, only the first
and the last page numbers of this range must be listed, separated by a dash,
for example ``<TT>3-5,7-10,12,13,15</TT>''.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<b>
The input will contain several test cases, each of them as described below.
There are two blank lines between two consecutive inputs.
</b>
<p>
<p>

The first line of the input file contains <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $4 \le n \le 100$
 -->
<SPAN CLASS="MATH">4<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3216img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3216img1.png
 ALT="$ \le$">100</SPAN>). The rest of
the input file contains the document to be indexed. The size of the input
file does not exceed <SPAN CLASS="MATH">20&nbsp;000</SPAN> bytes.

The line is considered blank if it is completely empty.
No line contains leading or trailing spaces.
The document does not contain two consecutive blank lines.
The first line of the document is not blank.
The length of each line of the document does not exceed 200 characters.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<b>
For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</b>
<p>
<p>

Print all words that occur in the given document. Words must be printed
in the lexicographical order, one word on a line.
After each word print one space followed by
the list of pages it occurs at, formatted as described in problem
statement. Use capital letters in output.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
6
From thousands of teams competing in regional
contests held from September to December 2004
world-wide, seventy-five teams will advance to
the World Finals in Shanghai, April 3-7, 2005.

Awards, prizes, scholarships, and bragging rights
will be at stake for some of the world's finest
university students of the computing science.

Join us for the challenge, camaraderie,
and the fun! Become the best of the best
of the best in ACM ICPC!

ACM ICPC is the best contest!
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
ACM 3
ADVANCE 1
AND 2,3
APRIL 1
AT 2
AWARDS 2
BE 2
BECOME 3
BEST 3
BRAGGING 2
CAMARADERIE 3
CHALLENGE 3
COMPETING 1
COMPUTING 2
CONTEST 3
CONTESTS 1
DECEMBER 1
FINALS 1
FINEST 2
FIVE 1
FOR 2,3
FROM 1
FUN 3
HELD 1
ICPC 3
IN 1,3
IS 3
JOIN 3
OF 1-3
PRIZES 2
REGIONAL 1
RIGHTS 2
S 2
SCHOLARSHIPS 2
SCIENCE 2
SEPTEMBER 1
SEVENTY 1
SHANGHAI 1
SOME 2
STAKE 2
STUDENTS 2
TEAMS 1
THE 1-3
THOUSANDS 1
TO 1
UNIVERSITY 2
US 3
WIDE 1
WILL 1,2
WORLD 1,2
</PRE>


<P>

______________________________________________________
3217||||||false||||||
Frank is a professional stock trader for <SPAN  CLASS="textit">Advanced Commercial Markets Limited</SPAN> (<SPAN  CLASS="textit">ACM Ltd</SPAN>).
He likes ``easy trading'' -- using a straightforward strategy to decide when to
buy stock and when to sell it.

Frank has a database of historical stock prices for each day. He uses
two integer numbers <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le m < n \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="$ \le$"><I>m</I> &lt; <I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="$ \le$">100</SPAN>) as parameters
of his trading strategy. Every day he computes two numbers: <SPAN CLASS="MATH"><I>P</I>(<I>m</I>)</SPAN> --
an average stock price for the previous <SPAN CLASS="MATH"><I>m</I></SPAN> days, and <SPAN CLASS="MATH"><I>P</I>(<I>n</I>)</SPAN> -- an average stock
price for the previous <SPAN CLASS="MATH"><I>n</I></SPAN> days. <!-- MATH
 $P(m) > P(n)$
 -->
<SPAN CLASS="MATH"><I>P</I>(<I>m</I>) &gt; <I>P</I>(<I>n</I>)</SPAN> is an indicator of the
upward trend (traders call it <SPAN  CLASS="textit">bullish</SPAN> trend),
and <!-- MATH
 $P(m) < P(n)$
 -->
<SPAN CLASS="MATH"><I>P</I>(<I>m</I>) &lt; <I>P</I>(<I>n</I>)</SPAN> is an indicator of the downward trend
(traders call it <SPAN  CLASS="textit">bearish</SPAN> trend). In practice the
values for <SPAN CLASS="MATH"><I>P</I>(<I>m</I>)</SPAN> and <SPAN CLASS="MATH"><I>P</I>(<I>n</I>)</SPAN> are never equal.

When a trend reverses from bearish to bullish it is a signal for Frank
to buy stock. When a trend reverses from bullish to bearish it is a signal
to sell.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3217.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="\epsfbox{p3217.eps}">
</DIV>
Frank has different values for <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> in mind and he wants to
<SPAN  CLASS="textit">backtest</SPAN> them using historical prices. He takes a set of
<SPAN CLASS="MATH"><I>k</I></SPAN> (<!-- MATH
 $n < k \le 10\,000$
 -->
<SPAN CLASS="MATH"><I>n</I> &lt; <I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="$ \le$">10&nbsp;000</SPAN>) historical prices <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> (<!-- MATH
 $0 < p_i < 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>p</I><SUB>i</SUB> &lt; 100</SPAN> for <!-- MATH
 $1 \le i \le k$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="$ \le$"><I>k</I></SPAN>).
For each <SPAN CLASS="MATH"><I>i</I></SPAN> (<!-- MATH
 $n \le i \le k$
 -->
<SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="$ \le$"><I>k</I></SPAN>) he computes <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB>(<I>m</I>)</SPAN> and <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB>(<I>n</I>)</SPAN> --
an arithmetic average of <!-- MATH
 $p_{i-m+1} \dots p_i$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>i - m + 1</SUB>...<I>p</I><SUB>i</SUB></SPAN> and <!-- MATH
 $p_{i-n+1} \dots p_i$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>i - n + 1</SUB>...<I>p</I><SUB>i</SUB></SPAN>
respectively.

Backtesting generates trading signals according to the following rules.

<UL>
<LI>If <!-- MATH
 $P_i(m) > P_i(n)$
 -->
<SPAN CLASS="MATH"><I>P</I><SUB>i</SUB>(<I>m</I>) &gt; <I>P</I><SUB>i</SUB>(<I>n</I>)</SPAN> there is a bullish trend for day <SPAN CLASS="MATH"><I>i</I></SPAN> and a
      `<TT>BUY ON DAY </TT><SPAN CLASS="MATH"><I>i</I></SPAN>'
      signal is generated if <SPAN CLASS="MATH"><I>i</I> = <I>n</I></SPAN> or there was a bearish trend on day <SPAN CLASS="MATH"><I>i</I> - 1</SPAN>.
</LI>
<LI>If <!-- MATH
 $P_i(m) < P_i(n)$
 -->
<SPAN CLASS="MATH"><I>P</I><SUB>i</SUB>(<I>m</I>) &lt; <I>P</I><SUB>i</SUB>(<I>n</I>)</SPAN> there is a bearish tread for day <SPAN CLASS="MATH"><I>i</I></SPAN> and a
      `<TT>SELL ON DAY </TT><SPAN CLASS="MATH"><I>i</I></SPAN>'
      signal is generated if <SPAN CLASS="MATH"><I>i</I> = <I>n</I></SPAN> or there was a bullish trend on day <SPAN CLASS="MATH"><I>i</I> - 1</SPAN>.
</LI>
</UL>

Your task is to write a program that backtests a specified strategy for
Frank -- you shall print a signal for the first tested day (day <SPAN CLASS="MATH"><I>n</I></SPAN>) followed
by the signals in increasing day numbers.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<b>
The input will contain several test cases, each of them as described below.
Consecutive test cases are separated by a single blank line.
</b>
<p>
<p>

The first line of the input file contains three integer numbers <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>n</I></SPAN>, and <SPAN CLASS="MATH"><I>k</I></SPAN>.
It is followed by <SPAN CLASS="MATH"><I>k</I></SPAN> lines with stock prices for days 1 to <SPAN CLASS="MATH"><I>k</I></SPAN>. Each stock
price <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> is specified with two digits after decimal point.
Prices in the input file are such that
<!-- MATH
 $P_i(m) \ne P_i(n)$
 -->
<SPAN CLASS="MATH"><I>P</I><SUB>i</SUB>(<I>m</I>)<IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="$ \ne$"><I>P</I><SUB>i</SUB>(<I>n</I>)</SPAN> for all <SPAN CLASS="MATH"><I>i</I></SPAN> (<!-- MATH
 $n \le i \le k$
 -->
<SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3217img1.png
 ALT="$ \le$"><I>k</I></SPAN>).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<b>
For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</b>
<p>
<p>

Write to the output file a list of signals -- one signal on a line,
as described in the problem statement.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3 5 17
8.45
9.10
9.40
10.15
10.40
11.08
11.52
12.12
12.51
12.15
11.90
11.25
11.73
10.77
10.80
10.01
9.14
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
BUY ON DAY 5
SELL ON DAY 12
</PRE>


<P>

______________________________________________________
3218||||||false||||||

Closed polyline (with possible self-intersections) partitions a plane into
a number of regions. One of the regions is unbounded -- it is an
<SPAN  CLASS="textit">exterior</SPAN> of the polyline. All the bounded regions together with the
polyline itself form an <SPAN  CLASS="textit">interior</SPAN> of the polyline (shaded in the picture
below). The <SPAN  CLASS="textit">border</SPAN> of the interior (bold line in the picture)
is a polyline as well. This polyline has the same interior as the original one.
Your task is to find the border of the interior of the given polyline.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3218.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3218.jpg
 ALT="\epsfbox{p3218.eps}">
</DIV>
To guarantee the uniqueness (up to the starting point) of the polyline representing the border we
require that the following conditions are satisfied for it:

<UL>
<LI>it has no self-intersections, although may have self-touchings;
</LI>
<LI>no adjacent vertices of the border coincide;
</LI>
<LI>no adjacent edges of the border are collinear;
</LI>
<LI>when traversing the border, its interior is always to
    the left of its edges.
</LI>
</UL>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The first line of the input file contains an integer number <SPAN CLASS="MATH"><I>n</I></SPAN>
(<!-- MATH
 $3 \le n \le 100$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3218.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3218.jpg
 ALT="$ \le$">100</SPAN>) -- the number of vertices in the original polyline.
Following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain two integer numbers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> on
a line (<!-- MATH
 $0 \le x_i, y_i \le 100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3218.jpg
 ALT="$ \le$"><I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3218.jpg
 ALT="$ \le$">100</SPAN>) -- coordinates of the vertices.
All vertices are different and no vertex lies on an edge between
two other vertices. Adjacent edges of the polyline are not collinear.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Write to the output file an integer number <SPAN CLASS="MATH"><I>m</I></SPAN> -- the number of
vertices of the border. Then write <SPAN CLASS="MATH"><I>m</I></SPAN> lines with coordinates
of the vertices. Coordinates must be precise up to 4 digits
after the decimal point.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
10
4 9
9 9
12 4
10 2
9 5
14 10
14 5
10 9
11 4
4 4
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
13
9.3333 4
10 2
12 4
10.5 6.5
11.5 7.5
14 5
14 10
11.5 7.5
10 9
10.5 6.5
9 9
4 9
4 4
</PRE>


<P>

______________________________________________________
3219||||||false||||||

Consider a 3D scene with <SPAN CLASS="MATH"><I>OXY</I><I>Z</I></SPAN> coordinate system. Axis
<SPAN CLASS="MATH"><I>OX</I></SPAN> points to the right, axis <SPAN CLASS="MATH"><I>OY</I></SPAN> points up, and
axis <SPAN CLASS="MATH"><I>OZ</I></SPAN> points away from you. There is a number
of rectangular windows on the scene. The plane of each window
is parallel to <SPAN CLASS="MATH"><I>OXY</I></SPAN>, its sides are parallel to <SPAN CLASS="MATH"><I>OX</I></SPAN> and <SPAN CLASS="MATH"><I>OY</I></SPAN>.
All windows are situated at different depths
on the scene (different coordinates <SPAN CLASS="MATH"><I>z</I> &gt; 0</SPAN>).

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3219.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3219.jpg
 ALT="\epsfbox{p3219.eps}">
</DIV>
A gunman with a rifle moves along <SPAN CLASS="MATH"><I>OX</I></SPAN> axis (<SPAN CLASS="MATH"><I>y</I> = 0</SPAN> and <SPAN CLASS="MATH"><I>z</I> = 0</SPAN>).
He can shoot a bullet in a straight line. His goal is to
shoot a single bullet through all the windows. Just touching a window
edge is enough.

Your task is to determine how to make such shot.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input file consists of several test cases. The first line of each case contains a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN>
(<!-- MATH
 $2 \le n \le 100$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3219.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3219.jpg
 ALT="$ \le$">100</SPAN>) -- the number of windows on the scene. The following
<SPAN CLASS="MATH"><I>n</I></SPAN> lines describe the windows. Each line contains five integer numbers
<SPAN CLASS="MATH"><I>x</I><SUB>1i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1i</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>2i</SUB></SPAN>, <SPAN CLASS="MATH"><I>z</I><SUB>i</SUB></SPAN>
(<!-- MATH
 $0 < x_{1i}$
 -->
<SPAN CLASS="MATH">0 &lt; <I>x</I><SUB>1i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1i</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>2i</SUB></SPAN>, <!-- MATH
 $z_i < 1000$
 -->
<SPAN CLASS="MATH"><I>z</I><SUB>i</SUB> &lt; 1000</SPAN>).
Here <!-- MATH
 $(x_{1i}, y_{1i}, z_i)$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1i</SUB>, <I>y</I><SUB>1i</SUB>, <I>z</I><SUB>i</SUB>)</SPAN> are coordinates of the bottom left corner of the
window, and <!-- MATH
 $(x_{2i}, y_{2i}, z_i)$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>2i</SUB>, <I>y</I><SUB>2i</SUB>, <I>z</I><SUB>i</SUB>)</SPAN> are coordinates of the top right corner
of the window (<!-- MATH
 $x_{1i} < x_{2i}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1i</SUB> &lt; <I>x</I><SUB>2i</SUB></SPAN>, <!-- MATH
 $y_{1i} < y_{2i}$
 -->
<SPAN CLASS="MATH"><I>y</I><SUB>1i</SUB> &lt; <I>y</I><SUB>2i</SUB></SPAN>).
Windows are ordered by <SPAN CLASS="MATH"><I>z</I></SPAN> coordinate (<!-- MATH
 $z_i > z_{i-1}$
 -->
<SPAN CLASS="MATH"><I>z</I><SUB>i</SUB> &gt; <I>z</I><SUB>i - 1</SUB></SPAN>
for <!-- MATH
 $2 \le i \le n$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3219.jpg
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3219.jpg
 ALT="$ \le$"><I>n</I></SPAN>).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, the output must be as follows:

Write the single word `<TT>UNSOLVABLE</TT>' if the gunman cannot
reach the goal of shooting a bullet through all the windows.

Otherwise, on the first line output a word `<TT>SOLUTION</TT>'.
On the next line output <SPAN CLASS="MATH"><I>x</I></SPAN> coordinate of the point from which
the gunman must fire a bullet. On the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines output <SPAN CLASS="MATH"><I>x</I>, <I>y</I>, <I>z</I></SPAN>
coordinates of the points where the bullet goes through the consecutive
windows. All coordinates in the output file must be printed with
six digits after decimal point.

<P>
<BR>
Separate the output for consecutive cases by a single blank line.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3
1 3 5 5 3
1 2 5 7 5
5 2 7 6 6
3
2 1 5 4 1
3 5 6 8 2
4 3 8 6 4
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
SOLUTION
-1.000000
2.000000 3.000000 3.000000
4.000000 5.000000 5.000000
5.000000 6.000000 6.000000

UNSOLVABLE
</PRE>


<P>

______________________________________________________
3220||||||false||||||

A well known algorithm called <SPAN  CLASS="textit">heapsort</SPAN> is a
deterministic sorting algorithm taking <!-- MATH
 $O(n \log n)$
 -->
<SPAN CLASS="MATH"><I>O</I>(<I>n</I> log&nbsp;<I>n</I>)</SPAN> time
and <SPAN CLASS="MATH"><I>O</I>(1)</SPAN> additional memory. Let us describe ascending sorting
of an array of different integer numbers.

The algorithm consists of two phases. In the first phase,
called <SPAN  CLASS="textit">heapification</SPAN>, the array of integers to be sorted
is converted to a <SPAN  CLASS="textit">heap</SPAN>. An array <!-- MATH
 $a[1\ldots n]$
 -->
<SPAN CLASS="MATH"><I>a</I>[1...<I>n</I>]</SPAN> of integers
is called a heap if for all <!-- MATH
 $1 \le i \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3220img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3220img1.png
 ALT="$ \le$"><I>n</I></SPAN> the following <SPAN  CLASS="textit">heap conditions</SPAN>
are satisfied:

<UL>
<LI>if <SPAN CLASS="MATH">2<I>i</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3220img1.png
 ALT="$ \le$"><I>n</I></SPAN> then <!-- MATH
 $a[i] > a[2i]$
 -->
<SPAN CLASS="MATH"><I>a</I>[<I>i</I>] &gt; <I>a</I>[2<I>i</I>]</SPAN>;
</LI>
<LI>if <!-- MATH
 $2i + 1 \le n$
 -->
<SPAN CLASS="MATH">2<I>i</I> + 1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3220img1.png
 ALT="$ \le$"><I>n</I></SPAN> then <!-- MATH
 $a[i] > a[2i + 1]$
 -->
<SPAN CLASS="MATH"><I>a</I>[<I>i</I>] &gt; <I>a</I>[2<I>i</I> + 1]</SPAN>.
</LI>
</UL>

We can interpret an array as a binary tree, considering children
of element <SPAN CLASS="MATH"><I>a</I>[<I>i</I>]</SPAN> to be <SPAN CLASS="MATH"><I>a</I>[2<I>i</I>]</SPAN> and <SPAN CLASS="MATH"><I>a</I>[2<I>i</I> + 1]</SPAN>. In this case
the parent of <SPAN CLASS="MATH"><I>a</I>[<I>i</I>]</SPAN> is <!-- MATH
 $a[i \mbox{ div } 2]$
 -->
<SPAN CLASS="MATH"><I>a</I>[<I>i</I> div 2]</SPAN>, where <!-- MATH
 $i \mbox{ div } 2 = \lfloor i / 2 \rfloor$
 -->
<SPAN CLASS="MATH"><I>i</I> div 2 = <IMG
 WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3220img1.png
 ALT="$ \lfloor$"><I>i</I>/2<IMG
 WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3220img1.png
 ALT="$ \rfloor$"></SPAN>.
In terms of trees
the property of being a heap means that for each node its value is greater
than the values of its children.

In the second phase the heap is turned into a sorted array.
Because of the heap condition the greatest element
in the heapified array is <SPAN CLASS="MATH"><I>a</I>[1]</SPAN>. Let us exchange it with <SPAN CLASS="MATH"><I>a</I>[<I>n</I>]</SPAN>,
now the greatest element of the array is at its correct position
in the sorted array. This is called <SPAN  CLASS="textit">extract-max</SPAN>.

Now let us consider the part of the array&nbsp;<!-- MATH
 $a[1\ldots n-1]$
 -->
<SPAN CLASS="MATH"><I>a</I>[1...<I>n</I> - 1]</SPAN>. It may be
not a heap because the heap condition may fail for&nbsp;<SPAN CLASS="MATH"><I>i</I> = 1</SPAN>.
If it is so (that is, either&nbsp;<SPAN CLASS="MATH"><I>a</I>[2]</SPAN> or&nbsp;<SPAN CLASS="MATH"><I>a</I>[3]</SPAN>, or both are greater
than&nbsp;<SPAN CLASS="MATH"><I>a</I>[1]</SPAN>) let us exchange the greatest child of <SPAN CLASS="MATH"><I>a</I>[1]</SPAN> with it, restoring
the heap condition for&nbsp;<SPAN CLASS="MATH"><I>i</I> = 1</SPAN>. Now it is possible that the heap condition
fails for the position that now contains the former value of <SPAN CLASS="MATH"><I>a</I>[1]</SPAN>. Apply the same
procedure to it, exchanging it with its greatest child. Proceeding so
we convert the whole array&nbsp;<!-- MATH
 $a[1\ldots n-1]$
 -->
<SPAN CLASS="MATH"><I>a</I>[1...<I>n</I> - 1]</SPAN> to a heap.
This procedure is called <SPAN  CLASS="textit">sifting down</SPAN>.
After converting the part&nbsp;<!-- MATH
 $a[1\ldots n-1]$
 -->
<SPAN CLASS="MATH"><I>a</I>[1...<I>n</I> - 1]</SPAN> to a heap by sifting, we
apply extract-max again, putting second greatest element of
the array to <SPAN CLASS="MATH"><I>a</I>[<I>n</I> - 1]</SPAN>, and so on.

<P>
<BR>
For example, let us see how the heap <!-- MATH
 $a=(5, 4, 2, 1, 3)$
 -->
<SPAN CLASS="MATH"><I>a</I> = (5, 4, 2, 1, 3)</SPAN> is converted to
a sorted array. Let us make the first extract-max. After that the array
turns to <!-- MATH
 $(3, 4, 2, 1, \mathbf{5})$
 -->
<SPAN CLASS="MATH">(3, 4, 2, 1,<B>5</B>)</SPAN>. Heap condition fails
for <SPAN CLASS="MATH"><I>a</I>[1] = 3</SPAN> because its child <SPAN CLASS="MATH"><I>a</I>[2] = 4</SPAN> is greater than it.
Let us sift it down, exchanging <SPAN CLASS="MATH"><I>a</I>[1]</SPAN> and <SPAN CLASS="MATH"><I>a</I>[2]</SPAN>. Now the array is
<!-- MATH
 $(4, 3, 2, 1, \mathbf{5})$
 -->
<SPAN CLASS="MATH">(4, 3, 2, 1,<B>5</B>)</SPAN>. The heap condition is satisfied
for all elements, so sifting is over. Let us make extract-max again.
Now the array turns to <!-- MATH
 $(1, 3, 2, \mathbf{4}, \mathbf{5})$
 -->
<SPAN CLASS="MATH">(1, 3, 2,<B>4</B>,<B>5</B>)</SPAN>. Again
the heap condition fails for <SPAN CLASS="MATH"><I>a</I>[1]</SPAN>; exchanging it with its greatest
child we get the array <!-- MATH
 $(3, 1, 2, \mathbf{4}, \mathbf{5})$
 -->
<SPAN CLASS="MATH">(3, 1, 2,<B>4</B>,<B>5</B>)</SPAN> which is
the correct heap. So we make extract-max and get
<!-- MATH
 $(2, 1, \mathbf{3}, \mathbf{4}, \mathbf{5})$
 -->
<SPAN CLASS="MATH">(2, 1,<B>3</B>,<B>4</B>,<B>5</B>)</SPAN>. This time the heap condition
is satisfied for all elements, so we make extract-max, getting
<!-- MATH
 $(1, \mathbf{2}, \mathbf{3}, \mathbf{4}, \mathbf{5})$
 -->
<SPAN CLASS="MATH">(1,<B>2</B>,<B>3</B>,<B>4</B>,<B>5</B>)</SPAN>. The leading
part of the array is a heap, and the last
extract-max finally gives <!-- MATH
 $(\mathbf{1}, \mathbf{2}, \mathbf{3}, \mathbf{4}, \mathbf{5})$
 -->
<SPAN CLASS="MATH">(<B>1</B>,<B>2</B>,<B>3</B>,<B>4</B>,<B>5</B>)</SPAN>.

It is known that heapification can be done in <SPAN CLASS="MATH"><I>O</I>(<I>n</I>)</SPAN> time. Therefore,
the most time consuming operation in heapsort algorithm is sifting,
which takes <!-- MATH
 $O(n\log n)$
 -->
<SPAN CLASS="MATH"><I>O</I>(<I>n</I> log&nbsp;<I>n</I>)</SPAN> time.

In this problem you have to find a heapified array containing
different numbers from <SPAN CLASS="MATH">1</SPAN> to <SPAN CLASS="MATH"><I>n</I></SPAN>, such that when
converting it to a sorted array, the total number of exchanges in
all sifting operations is maximal possible. In the example above the
number of exchanges is <!-- MATH
 $1+1+0+0+0 = 2$
 -->
<SPAN CLASS="MATH">1 + 1 + 0 + 0 + 0 = 2</SPAN>, which is not the maximum.
<!-- MATH
 $(5, 4, 3, 2, 1)$
 -->
<SPAN CLASS="MATH">(5, 4, 3, 2, 1)</SPAN> gives the maximal number of 4 exchanges for <SPAN CLASS="MATH"><I>n</I> = 5</SPAN>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input file contains several datasets. Each consists on a single line with the number <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 50\,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3220img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3220img1.png
 ALT="$ \le$">50&nbsp;000</SPAN>).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, output the array containing <SPAN CLASS="MATH"><I>n</I></SPAN> different integer
numbers from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>, such that it is a heap,
and when converting it to a sorted array,
the total number of exchanges in sifting operations is
maximal possible. Separate numbers by spaces.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
6
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
6 5 3 2 4 1
</PRE>


<P>

______________________________________________________
3221||||||false||||||

Young cryptoanalyst Georgie is investigating different schemes
of generating random integer numbers ranging from <SPAN CLASS="MATH">0</SPAN> to <SPAN CLASS="MATH"><I>m</I> - 1</SPAN>.
He thinks that standard random number generators
are not good enough, so he has invented his own scheme that
is intended to bring more randomness into the generated numbers.

First, Georgie chooses <SPAN CLASS="MATH"><I>n</I></SPAN> and generates <SPAN CLASS="MATH"><I>n</I></SPAN> random integer numbers ranging
from <SPAN CLASS="MATH">0</SPAN> to <SPAN CLASS="MATH"><I>m</I> - 1</SPAN>.
Let the numbers generated be <!-- MATH
 $a_1, a_2, \ldots, a_n$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB></SPAN>.
After that
Georgie calculates the sums of all pairs of adjacent numbers, and
replaces the initial array with the array of sums, thus
getting <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> numbers:&nbsp;<!-- MATH
 $a_1 + a_2, a_2 + a_3, \ldots, a_{n - 1} + a_n$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB> + <I>a</I><SUB>2</SUB>, <I>a</I><SUB>2</SUB> + <I>a</I><SUB>3</SUB>,..., <I>a</I><SUB>n - 1</SUB> + <I>a</I><SUB>n</SUB></SPAN>.
Then he applies the same procedure to the new array,
getting <SPAN CLASS="MATH"><I>n</I> - 2</SPAN> numbers. The procedure is repeated until only one
number is left. This number is then taken modulo <SPAN CLASS="MATH"><I>m</I></SPAN>.
That gives the result of the generating procedure.

Georgie has proudly presented this scheme to his computer science
teacher, but was pointed out that the scheme has many
drawbacks. One important drawback is the fact that the result of the
procedure sometimes does not even depend on some of
the initially generated numbers.
For example, if <SPAN CLASS="MATH"><I>n</I> = 3</SPAN> and <SPAN CLASS="MATH"><I>m</I> = 2</SPAN>, then the result does not
depend on <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN>.

Now Georgie wants to investigate this phenomenon. He calls
the <SPAN CLASS="MATH"><I>i</I></SPAN>-th element of the initial array <SPAN  CLASS="textit">irrelevant</SPAN> if
the result of the generating procedure does not depend on
<SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>. He considers various <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> and wonders
which elements are irrelevant for these parameters. Help
him to find it out.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input file contains several datasets. Each datasets has <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN> (<!-- MATH
 $1 \le n \le 100\,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3221img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3221img1.png
 ALT="$ \le$">100&nbsp;000</SPAN>, <!-- MATH
 $2 \le m \le 10^9$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3221img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3221img1.png
 ALT="$ \le$">10<SUP>9</SUP></SPAN>) in a single line.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

On the first line of the output for each dataset print the number of
irrelevant elements of the initial array for given <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>.
On the second line print all such <SPAN CLASS="MATH"><I>i</I></SPAN> that <SPAN CLASS="MATH"><I>i</I></SPAN>-th element
is irrelevant. Numbers on the second line must be printed
in the ascending order and must be separated by spaces.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3 2
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
1
2
</PRE>


<P>

______________________________________________________
3222||||||false||||||
There is a famous joke-riddle for children:

<BLOCKQUOTE>
Three turtles are crawling along a road. One turtle says: ``There are two
turtles ahead of me.'' The other turtle says: ``There are two turtles
behind me.'' The third turtle says: ``There are two turtles ahead of
me and two turtles behind me.'' How could this have happened?

The answer is -- the third turtle is lying!

</BLOCKQUOTE>

Now in this problem you have <SPAN CLASS="MATH"><I>n</I></SPAN> turtles crawling along a road. Some
of them are crawling in a group, so that they do not see members of
their group neither ahead nor behind them. Each turtle makes a statement
of the form: ``There are <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> turtles crawling ahead of me and
<SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> turtles crawling behind me.'' Your task is to find the
minimal number of turtles that must be lying.

Let us formalize this task. Turtle <SPAN CLASS="MATH"><I>i</I></SPAN> has <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> coordinate.
Some turtles may have the same coordinate.
Turtle <SPAN CLASS="MATH"><I>i</I></SPAN> tells the truth if and only if <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> is the number of turtles
such that <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB> &gt; <I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> is the number of turtles such that
<SPAN CLASS="MATH"><I>x</I><SUB>j</SUB> &lt; <I>x</I><SUB>i</SUB></SPAN>. Otherwise, turtle <SPAN CLASS="MATH"><I>i</I></SPAN> is lying.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input contains several test cases. The first line of each case consists of a integer number <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3222img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3222img1.png
 ALT="$ \le$">1000</SPAN>).
It is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines containing numbers <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
(<!-- MATH
 $0 \le a_i, b_i \le 1000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3222img1.png
 ALT="$ \le$"><I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3222img1.png
 ALT="$ \le$">1000</SPAN>) that describe statements of each turtle for <SPAN CLASS="MATH"><I>i</I></SPAN>
from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each input case, print one output line containing an integer number <SPAN CLASS="MATH"><I>m</I></SPAN> -- the minimal
number of turtles that must be lying, followed by <SPAN CLASS="MATH"><I>m</I></SPAN> integers -- turtles
that are lying. Turtles can be printed in any order. If there
are different sets of <SPAN CLASS="MATH"><I>m</I></SPAN> lying turtles, then print any of them.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3
2 0
0 2
2 2
5
0 2
0 3
2 1
1 2
4 0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
1 3
2 1 4
</PRE>


<P>

______________________________________________________
3223||||||false||||||

Kingdom of Magic has a network of bidirectional magic portals between
cities since ancient times. Each portal magically connects a pair
of cities and allows fast magical communication and travel between them.
Cities that are connected by the magic portal are called <SPAN  CLASS="textit">neighboring</SPAN>.

Prince Albert and Princess Betty are living in the neighboring cities.
Since their childhood Albert and Betty were always in touch with each
other using magic communication Orbs, which work via a magic portal
between the cities.

Albert and Betty are in love with each other. Their love is so great
that they cannot live a minute without each other. They always carry
the Orbs with them, so that they can talk to each other at any time.
There is something strange about their love -- they have never seen
each other and they even fear to be in the same city at the same time.
People say that the magic of the Orbs have affected them.

Traveling through the Kingdom is a complicated affair for Albert and Betty.
They have to travel through magic portals, which is somewhat expensive even for
royal families. They can simultaneously use a pair of the portals
to move to a different pair of cities, or just one of
them can use a portal, while the other one stays where he or she is.
At any moment of their travel they have to be in a neighboring
cities. They cannot simultaneously move through the same portal.

Write a program that helps Albert and Betty travel from one pair of the cities to another pair.
It has to find the cheapest travel plan -- with the minimal number of
times they have to move though the magic portals. When they move
through the portals simultaneously it counts as two moves.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Input contains several datasets. The first line of each dataset contains integer numbers
<SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>b</I><SUB>2</SUB></SPAN>.
Here <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $3 \le n \le 100$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \le$">100</SPAN>) is a number of cities in the Kingdom
(cities are numbered from <SPAN CLASS="MATH">1</SPAN> to <SPAN CLASS="MATH"><I>n</I></SPAN>); <SPAN CLASS="MATH"><I>m</I></SPAN> (<!-- MATH
 $2 \le m \le 1000$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \le$">1000</SPAN>) is a number
of magic portals; <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> (<!-- MATH
 $1 \le a_1, b_1 \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \le$"><I>a</I><SUB>1</SUB>, <I>b</I><SUB>1</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \le$"><I>n</I></SPAN>, <!-- MATH
 $a_1 \ne b_1$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \ne$"><I>b</I><SUB>1</SUB></SPAN>) are the
neighboring cities where Albert and Betty correspondingly start their travel from;
<SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>b</I><SUB>2</SUB></SPAN> (<!-- MATH
 $1 \le a_2, b_2 \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \le$"><I>a</I><SUB>2</SUB>, <I>b</I><SUB>2</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \le$"><I>n</I></SPAN>, <!-- MATH
 $a_2 \ne b_2$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>2</SUB><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \ne$"><I>b</I><SUB>2</SUB></SPAN>) are the neighboring cities
where Albert and Betty correspondingly want to get to (<!-- MATH
 $a_1 \ne a_2$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \ne$"><I>a</I><SUB>2</SUB></SPAN> or <!-- MATH
 $b_1 \ne b_2$
 -->
<SPAN CLASS="MATH"><I>b</I><SUB>1</SUB><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \ne$"><I>b</I><SUB>2</SUB></SPAN>).

Following <SPAN CLASS="MATH"><I>m</I></SPAN> lines describe the portals. Each line
contains two numbers <SPAN CLASS="MATH"><I>p</I><SUB>i1</SUB></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>i2</SUB></SPAN> (<!-- MATH
 $1 \le p_{i1}, p_{i2} \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \le$"><I>p</I><SUB>i1</SUB>, <I>p</I><SUB>i2</SUB><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \le$"><I>n</I></SPAN>,
<!-- MATH
 $p_{i1} \ne p_{i2}$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>i1</SUB><IMG
 WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3223img1.png
 ALT="$ \ne$"><I>p</I><SUB>i2</SUB></SPAN>) -- cities that are connected by the portal. There
is at most one portal connecting two cities.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

On the first line of the output for each test case write two numbers <SPAN CLASS="MATH"><I>c</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN>. Here <SPAN CLASS="MATH"><I>c</I></SPAN>
is the minimal number of moves in the travel plan;
<SPAN CLASS="MATH"><I>k</I></SPAN> is the number of neighboring city pairs that Albert and Betty
visit during their travel including <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> at the start and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>b</I><SUB>2</SUB></SPAN> at the end.

Then write <SPAN CLASS="MATH"><I>k</I></SPAN> lines with two integer numbers <SPAN CLASS="MATH"><I>a'</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>b'</I><SUB>i</SUB></SPAN> on each line --
consecutive different pairs of neighboring cities that Albert and Betty visit during their travel.
If there are multiple travel plans with the same number of moves, then write
any of them. It is guaranteed that solution exists. Print a blank line between consecutive datasets.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
4 5 1 2 2 1
1 2
2 3
3 4
4 1
1 3
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
3 3
1 2
2 3
2 1
</PRE>


<P>

______________________________________________________
3224||||||false||||||
<SPAN CLASS="textit">Lattice animal</SPAN> is a set of connected sites on a lattice. Lattice animals on a square lattice are especially popular subject of study and are also known as <SPAN CLASS="textit">polyominoes</SPAN>. Polyomino is usually represented as a set of sidewise connected squares. Polyomino with <SPAN CLASS="MATH"><I>n</I></SPAN> squares is called <SPAN CLASS="MATH"><I>n</I></SPAN>-polyomino. In this problem you are to find a number of distinct <SPAN CLASS="textit">free</SPAN> <SPAN CLASS="MATH"><I>n</I></SPAN>-polyominoes that fit into rectangle <SPAN CLASS="MATH"><I>w</I>&#215;<I>h</I></SPAN>. Free polyominoes can be rotated and flipped over, so that their rotations and mirror images are considered to be the same. For example, there are 5 different pentominoes (5-polyominoes) that fit into <SPAN CLASS="MATH">2&#215;4</SPAN> rectangle and 3 different octominoes (8-polyominoes) that fit into <SPAN CLASS="MATH">3&#215;3</SPAN> rectangle.<DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3224.jpg ALT="\epsfbox{p3224.eps}"></DIV><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file contains several test cases, one per line. This line consists of 3 integer numbers <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>w</I></SPAN>, and <SPAN CLASS="MATH"><I>h</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3224.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3224.jpg ALT="$ \le$">10</SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3224.jpg ALT="$ \le$"><I>w</I>, <I>h</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3224.jpg ALT="$ \le$"><I>n</I></SPAN>).<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each one of the test cases, write to the output file a single line with a integer number -- the number of distinct free <SPAN CLASS="MATH"><I>n</I></SPAN>-polyominoes that fit into rectangle <SPAN CLASS="MATH"><I>w</I>&#215;<I>h</I></SPAN>.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5 1 4
5 2 4
5 3 4
5 5 5
8 3 3
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0
5
11
12
3
</PRE><P>
______________________________________________________
3225||||||false||||||
<P>Some DNA sequences exist in circular forms as in the following figure, which shows a circular sequence ``CGAGTCAGCT", that is, the last symbol ``T" in ``CGAGTCAGCT" is connected to the first symbol ``C". We always read a circular sequence in the clockwise direction.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3225.jpg ALT="\epsfbox{p3225.eps}"></DIV><P>Since it is not easy to store a circular sequence in a computer as it is, we decided to store it as a linear sequence. However, there can be many linear sequences that are obtained from a circular sequence by cutting any place of the circular sequence. Hence, we also decided to store the linear sequence that is lexicographically smallest among all linear sequences that can be obtained from a circular sequence.<P>Your task is to find the lexicographically smallest sequence from a given circular sequence. For the example in the figure, the lexicographically smallest sequence is ``AGCTCGAGTC". If there are two or more linear sequences that are lexicographically smallest, you are to find any one of them (in fact, they are the same).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> is given on the first line of the input file. Each test case takes one line containing a circular sequence that is written as an arbitrary linear sequence. Since the circular sequences are DNA sequences, only four symbols, <TT>A</TT>, <TT>C</TT>, <TT>G</TT> and <TT>T</TT>, are allowed. Each sequence has length at least 2 and at most 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line is to contain the lexicographically smallest sequence for the test case.<P>The following shows sample input and output for two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                     
CGAGTCAGCT                            
CTCC
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
AGCTCGAGTC 
CCCT
</PRE><P>
______________________________________________________
3226||||||false||||||
<P>The figure shown on the left is <EM>left-right symmetric</EM> as it is possible to fold the sheet of paper along a <EM>vertical line</EM>, drawn as a dashed line, and to cut the figure into two identical halves. The figure on the right is not left-right symmetric as it is impossible to find such a vertical line.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3226.jpg ALT="\epsfbox{p3226.eps}"></DIV><P>Write a program that determines whether a figure, drawn with dots, is left-right symmetric or not. The dots are all distinct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> is given in the first line of the input file. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> , where <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3226.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3226.jpg ALT="$ \le$">1, 000</SPAN>) is the number of dots in a figure. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate of a dot. Both <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinates and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates are integers between -10,000 and 10,000, both inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line should contain `<TT>YES</TT>' if the figure is left-right symmetric. and `<TT>NO</TT>', otherwise.<P>The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                                            
5                                            
-2 5                                         
0 0 
6 5 
4 0 
2 3 
4 
2 3 
0 4 
4 0 
0 0 
4 
5 14 
6 10
5 10 
6 14
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
YES 
NO 
YES
</PRE><P>
______________________________________________________
3227||||||false||||||
<P><EM>Gang-gang-su-wollae</EM> is a Korean circle dance for women usually performed during the Harvest Moon festival, <EM>Chuseok</EM>, on the fifteenth of the eighth lunar month. Women wear the traditional dress called <EM>Hanbok</EM> and gather in an open field to dance. They join hands in a circle facing the center and move around the circle slowly to the beat of the song. Gradually the pace quickens and the dance ends in a whirling climax.<P><P><BR>There are <SPAN CLASS="MATH"><I>N</I></SPAN> girls who want to participate in this circle dance. Each girl is represented as an integer from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>. From these girls, a director wants to organize a group of girls for this dance in which collaboration among members is very important. The director announced every girl should submit the name of one girl whom she wants to be next to when dancing, and may submit the name of one girl with whom she does not like to dance together only if she wants to submit. Seeing this name list, the director is going to find the largest good group. The good group is defined as a group <SPAN CLASS="MATH"><I>S</I></SPAN> of girls satisfying the following conditions:<P><DL COMPACT><DT>(1)</DT><DD>The number of girls in <SPAN CLASS="MATH"><I>S</I></SPAN> is greater than or equal to 2.</DD><DT>(2)</DT><DD>All the girls of <SPAN CLASS="MATH"><I>S</I></SPAN> can be circularly arranged as <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB>, <I>i</I><SUB>2</SUB>,..., <I>i</I><SUB>m</SUB></SPAN> such that <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN> wants to be next to girl <SPAN CLASS="MATH"><I>i</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>i</I><SUB>2</SUB></SPAN> wants to be next to girl <SPAN CLASS="MATH"><I>i</I><SUB>3</SUB></SPAN>, ..., <SPAN CLASS="MATH"><I>i</I><SUB>m - 1</SUB></SPAN> wants to be next to girl <SPAN CLASS="MATH"><I>i</I><SUB>m</SUB></SPAN>, and <SPAN CLASS="MATH"><I>i</I><SUB>m</SUB></SPAN> wants to be next to girl <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN>.<P>Here, <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of girls in <SPAN CLASS="MATH"><I>S</I></SPAN>. That is, for each <SPAN CLASS="MATH"><I>j</I></SPAN> with <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3227img1.gif ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3227img1.gif ALT="$ \le$"><I>m</I> - 1</SPAN>, girl <SPAN CLASS="MATH"><I>i</I><SUB>j</SUB></SPAN> wants to be next to girl <SPAN CLASS="MATH"><I>i</I><SUB>j + 1</SUB></SPAN>, and girl <SPAN CLASS="MATH"><I>i</I><SUB>m</SUB></SPAN> wants to be next to girl <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN>.</DD><DT>(3)</DT><DD>For each girl in <SPAN CLASS="MATH"><I>S</I></SPAN>, the number of girls in <SPAN CLASS="MATH"><I>S</I></SPAN> who do not like to dance together with her is strictly less than <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3227img1.gif ALT="$ \lceil$"><I>m</I>/2<IMG WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3227img1.gif ALT="$ \rceil$"></SPAN>. (For a real number <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3227img1.gif ALT="$ \lceil$"><I>x</I><IMG WIDTH="12" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3227img1.gif ALT="$ \rceil$"></SPAN> is the smallest integer which is greater than or equal to <SPAN CLASS="MATH"><I>x</I></SPAN>.)</DD></DL><P>For example, we assume that girl 1 wants to be next to girl 2, girl 2 wants to be next to girl 3, girl 3 wants to be next to girl 4, girl 4 wants to be next to girl 1, girl 5 wants to be next to girl 6, and girl 6 wants to be next to girl 5. We also assume that girl 1 and girl 2 do not like to dance with girl 4. The group {1,2,3,4} satisfies the conditions (1) and (2), but does not satisfy the condition (3). Therefore, the largest good group is {5, 6}.<P>Given the name list which each girl submitted, you are to write a program which finds the number of girls in the largest good group.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> is given in the first line of the input file. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, where <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3227img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3227img1.gif ALT="$ \le$">10, 000</SPAN>) is the number of girls. Each <SPAN CLASS="MATH"><I>i</I></SPAN>-th ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3227img1.gif ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3227img1.gif ALT="$ \le$"><I>N</I></SPAN>) line of the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains two integers <SPAN CLASS="MATH"><I>j</I></SPAN>, <SPAN CLASS="MATH"><I>k</I></SPAN>, where <SPAN CLASS="MATH"><I>j</I></SPAN> represents the girl whom girl <SPAN CLASS="MATH"><I>i</I></SPAN> wants to be next to, and <SPAN CLASS="MATH"><I>k</I></SPAN> represents the girl with whom girl <SPAN CLASS="MATH"><I>i</I></SPAN> does not like to dance together. When there is no girl with whom <SPAN CLASS="MATH"><I>i</I></SPAN> does not like to dance together, <SPAN CLASS="MATH"><I>k</I></SPAN> is equal to `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line is to contain an integer which is the number of girls in the largest good group. When there is no good group, the line is to contain `<TT>-1</TT>'. 

<P>
The following shows sample input and output for three test cases. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3                                   
6                                   
2 4                                 
3 4
4 -1 
1 -1 
6 ­1 
5 ­1 
5 
2 5 
3 5 
4 5 
5 -1 
1 -1 
11 
2 5 
3 5 
4 5 
5 10 
6 10 
1 10 
8 10 
9 10 
10 7 
11 ­1 
7 9
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 
-1 
5
</PRE> 

<P>

______________________________________________________
3228||||||false||||||
<P>In general, many cryptosystems use one secret key to access encrypted files. If an attacker hacks in and steals the secret key, the information can be leaked out. <EM>Secret sharing</EM> is a technique to distribute a secret key among a group of participants. A secret sharing scheme divides a secret key into <SPAN CLASS="MATH"><I>N</I></SPAN> pieces, which are called <EM>shares</EM>. Anyone with fewer than <SPAN CLASS="MATH"><I>N</I></SPAN> shares cannot regenerate the secret key and access the secret information. For example, consider the secret key ``<TT>password</TT>" is divided into four shares ``<TT>pa</TT>", ``<TT>ss</TT>", ``<TT>wo</TT>", and ``<TT>rd</TT>". All of which are required to recover the original secret key. However to recover the key, you need not only the shares but also the order of shares. If the order is not acquired, you could produce a wrong key, such as ``<TT>wosspard</TT>" or ``<TT>pawordss</TT>".<P><P><BR>Recently, a new cryptographic algorithm, which uses a secret sharing technique to generate a secret key, is developed in your research group. The algorithm uses a very long decimal number as a secret key. The key starts with a non-zero digit. The key is divided into multiple shares. To settle the ordering problem from the shares, a simple rule is adopted; the secret key is the smallest number that can be obtained from the shares. For instance, suppose that a secret key is divided into five shares ``<TT>2</TT>", ``<TT>4</TT>", ``<TT>11</TT>", ``<TT>33</TT>", and ``<TT>00</TT>". ``<TT>24113300</TT>" and ``<TT>11233400</TT>" are not the smallest numbers. ``<TT>00112334</TT>" is invalid since the secret key can not start with ``<TT>0</TT>". The satisfying key is ``<TT>11002334</TT>".<P>Write a program that finds the secret key from the shares.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> is given in the first line of the input file. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, the number of shares, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3228img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3228img1.gif ALT="$ \le$">50</SPAN>. On next line, <SPAN CLASS="MATH"><I>N</I></SPAN> shares are given, where each share consists of at most 5 digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. For each test case, print a secret key. If you can not find a key that satisfies the condition, print `<TT>INVALID</TT>'.<P>The following shows sample input and output for four test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4                              
5                              
2 4 11 33 00                   
3                              
20 202 2020 
6 
3 4 5 3 44 555 
3 
0 00 007
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
11002334 
202020202 
334445555 
INVALID
</PRE><P>
______________________________________________________
3229||||||false||||||
<P>We want to express a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> as a sum of prime numbers. Let <SPAN CLASS="MATH"><I>G</I>(<I>N</I>, <I>K</I>)</SPAN> denote the number of ways of decomposing a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <EM>gracefully</EM> using <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>, which is a prime number less than or equal to <SPAN CLASS="MATH"><I>K</I></SPAN>. That means a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> is expressed as the sum of prime numbers in the following form. Note that the smallest prime number is 2.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>N</I> = <I>p</I><SUB>1</SUB> + <I>p</I><SUB>2</SUB> + <I>p</I><SUB>3</SUB> + <SUP>... </SUP>+ <I>p</I><SUB>r</SUB>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;where <I>p</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3229img1.gif ALT="$\displaystyle \le$"><I>K</I></DIV><P></P><P>And there is another constraint in this prime decomposition. This <EM>graceful</EM> constraint forces that every pair of adjacent prime numbers should be different, saying <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3229img1.gif ALT="$ \ne$"><I>p</I><SUB>i + 1</SUB></SPAN> for all <SPAN CLASS="MATH"><I>i</I></SPAN>.<P>We call this constrained decomposition the <EM>Graceful Prime Decomposition</EM> (GPD). Each GPD can be denoted as <SPAN CLASS="MATH"><I>N</I> = (<I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>, <I>p</I><SUB>3</SUB>,..., <I>p</I><SUB>r</SUB>)</SPAN> simply. Let us give two examples for <SPAN CLASS="MATH"><I>G</I>(7, 5)</SPAN> and <SPAN CLASS="MATH"><I>G</I>(5, 5)</SPAN>.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE><TR VALIGN="MIDDLE"><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>G</I>(7, 5)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>G</I>(5, 5)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>7 = 2 + 3 + 2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3229img1.gif ALT="$\displaystyle \rightarrow$"> (2, 3, 2)</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5 = 2 + 3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3229img1.gif ALT="$\displaystyle \rightarrow$"> (2, 3)</TD></TR><TR VALIGN="MIDDLE"><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>= 2 + 5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3229img1.gif ALT="$\displaystyle \rightarrow$"> (2, 5)</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>= 3 + 2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3229img1.gif ALT="$\displaystyle \rightarrow$"> (3, 2)</TD></TR><TR VALIGN="MIDDLE"><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>= 5 + 2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3229img1.gif ALT="$\displaystyle \rightarrow$"> (5, 2)</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>= 5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3229img1.gif ALT="$\displaystyle \rightarrow$"> (5)</TD></TR></TABLE></DIV><P></P><P>So we get <SPAN CLASS="MATH"><I>G</I>(7, 5) = 3</SPAN> and <SPAN CLASS="MATH"><I>G</I>(5, 5) = 3</SPAN>. Note that ``2 + 5" is not considered to be same to ``5 + 2" in our GPD. Also, 7 = 2 + 2 + 3 cannot be regarded as a correct GPD since there is an identical prime number pair in the decomposition sequence such as ``2+2". You should notice that ``2+3+2" is a correct GPD, but ``3+2+2" can not be a valid GPD. Your task is to compute <SPAN CLASS="MATH"><I>G</I>(<I>N</I>, <I>K</I>)</SPAN> for two positive integers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN> given.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> is given in the first line of the input file. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN>, where <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3229img1.gif ALT="$ \le$"><I>N</I>, <I>K</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3229img1.gif ALT="$ \le$">50</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one integer <SPAN CLASS="MATH"><I>G</I>(<I>N</I>, <I>K</I>)</SPAN> for each test case.<P>The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                               
7 5                             
5 5                             
8 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
3 
0
</PRE><P>
______________________________________________________
3230||||||false||||||
<P>A digital logic circuit in a printed circuit board (PCB) consists of a collection of interconnected parts which are usually integrated circuit (IC) chips. Each IC chip has several pins to be interconnected by <EM>wires</EM> to other pins in another IC chip or a power line. Most PCBs are built as a stack of several layers. Wiring pattern in each layer consists of wires presumed to be horizontal or vertical. In a multilayered PCB board, layers are connected together through drilled holes, called vias, forming conductive paths between layers.<P><P><BR>While designing of a complex PCB board, a special layer is to be designed for the power supply. The special layer has the following properties:<P><DL COMPACT><DT>(1)</DT><DD>A horizontal power line is to be fixed on the bottom of the layer.</DD><DT>(2)</DT><DD>A number of horizontal wires are given in advance.</DD><DT>(3)</DT><DD>There are several vias on the layer.</DD><DT>(4)</DT><DD>Every horizontal wire is to be connected to the power line with vertical wires. The vertical wires must start at the power line, intersect several horizontal wires to supply power to them and stop at a via.</DD></DL><P>To have a cost-effective PCB design, we are going to minimize the number of vertical wires connected to a power line in this special layer.<P><P><BR>In the following figure (a), there are four horizontal wires and seven vias on a special layer. Then the minimum of vertical wires to supply power to every horizontal wire is three. Figure (b) shows one example of layouts of three vertical wires. Note that a horizontal wire can intersect more than one vertical wire to supply power.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3230.jpg ALT="\epsfbox{p3230.eps}"></DIV><P>Given a set of horizontal wires and a set of vias, write a program computing the minimum number of vertical wires connecting a power line and all the horizontal wires.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases T is given in the first line of the input file. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>M</I></SPAN>, <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3230.jpg ALT="$ \le$"><I>M</I>, <I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3230.jpg ALT="$ \le$">100</SPAN>) , where the first integer <SPAN CLASS="MATH"><I>M</I></SPAN> is the number horizontal wires and the second integer <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of vias. In the following <SPAN CLASS="MATH"><I>M</I></SPAN> lines from the second, the coordinates of end points of horizontal wires are given. Three integers <SPAN CLASS="MATH"><I>p</I>&nbsp;<I>q</I>&nbsp;<I>r</I></SPAN> are given in each line, where the first integer <SPAN CLASS="MATH"><I>p</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3230.jpg ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3230.jpg ALT="$ \le$">10, 000</SPAN>) is the <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate of a horizontal wire, and the second and the third integers <SPAN CLASS="MATH"><I>q</I></SPAN>, <SPAN CLASS="MATH"><I>r</I></SPAN> (<!-- MATH
 $1 \le  q < r \le  10,000$
 --> <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3230.jpg ALT="$ \le$"><I>q</I> &lt; <I>r</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3230.jpg ALT="$ \le$">10, 000</SPAN>) are the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinates of the left and right end points of the same horizontal wire, respectively. The horizontal wires do not intersect each other. In the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines, the coordinates of vias are given. In each line, two integers <SPAN CLASS="MATH"><I>s</I></SPAN>, <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3230.jpg ALT="$ \le$"><I>s</I>, <I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3230.jpg ALT="$ \le$">10, 000</SPAN>) are given in each line, where <SPAN CLASS="MATH"><I>s</I></SPAN>, <SPAN CLASS="MATH"><I>t</I></SPAN> are <SPAN CLASS="MATH"><I>x</I></SPAN>-, <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates of a via, respectively. Note that there is at most one via on the same vertical line and vias are not on horizontal wires. You may assume that the power line is positioned on the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate axis.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line should contain an integer that is the minimum number of vertical wires connecting a power line and all the horizontal wires. If every horizontal wire cannot be connected with at least one vertical wire, print `<TT>IMPOSSIBLE</TT>' in the line.<P>The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                            
4 7
5 1 5                        
3 3 10 
7 8 14 
1 7 12 
2 6 
13 8 
4 4 
6 8 
9 5 
11 5 
8 2 
4 4 
1 1 2 
2 1 3 
3 1 4 
4 1 5 
1 6 
2 6 
3 6 
4 6 
1 1 
1 1 2 
3 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
1 
IMPOSSIBLE
</PRE><P>
______________________________________________________
3231||||||false||||||
<P>You are given <SPAN CLASS="MATH"><I>N</I></SPAN> processors and <SPAN CLASS="MATH"><I>M</I></SPAN> jobs to be processed. Two processors are specified to each job. To process the job, the job should be allocated to and executed on one of the two processors for one unit of time. If <SPAN CLASS="MATH"><I>K</I></SPAN> jobs are allocated to a processor, then it takes <SPAN CLASS="MATH"><I>K</I></SPAN> units of time for the processor to complete the jobs. To complete all the jobs as early as possible, you should allocate the <SPAN CLASS="MATH"><I>M</I></SPAN> jobs to the <SPAN CLASS="MATH"><I>N</I></SPAN> processors as fair as possible. Precisely speaking, you should minimize the maximum number of jobs allocated to each processor over all processors. The quantity, minimum number of jobs, is called <EM>fair share</EM>.<P><P><BR>For example, you are given 5 processors and 6 jobs. Each job can be allocated to one of the two processors as shown in the table below. Job 1 can be allocated to processors 1 or 2, and job 2 can be allocated to processors 2 or 3, etc. If you allocate job 1 to processor 1, job 2 to processor 2, job 3 to processor 3, job 4 to processor 4, job 5 to processor 5, and job 6 to processor 1, then you have at most two jobs allocated to each processor. Since there are more jobs than processors in this example, some processors necessarily have at least two jobs, and thus the fair share is two.<P align=center><img src=p3231a.gif><P>Given <SPAN CLASS="MATH"><I>N</I></SPAN> processors, <SPAN CLASS="MATH"><I>M</I></SPAN> jobs, and the sets of two processors to which the jobs can be allocated, you are to write a program that finds the fair share. Processors are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> and jobs are numbered from 1 to <SPAN CLASS="MATH"><I>M</I></SPAN> . It is assumed that the sets of two processors to which the jobs can be allocated are distinct over all jobs.<P>That is, if a job <SPAN CLASS="MATH"><I>J</I><SUB>1</SUB></SPAN> can be allocated to processors <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> or <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN>, and a job <SPAN CLASS="MATH"><I>J</I><SUB>2</SUB></SPAN> which is different from <SPAN CLASS="MATH"><I>J</I><SUB>1</SUB></SPAN> can be allocated to processors <SPAN CLASS="MATH"><I>P</I><SUB>3</SUB></SPAN> or <SPAN CLASS="MATH"><I>P</I><SUB>4</SUB></SPAN>, then <SPAN CLASS="MATH">{<I>P</I><SUB>1</SUB>, <I>P</I><SUB>2</SUB>}<IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3231img1.gif ALT="$ \ne$">{<I>P</I><SUB>3</SUB>, <I>P</I><SUB>4</SUB>}</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> is given in the first line of the input file. Each test case begins with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3231img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3231img1.gif ALT="$ \le$">1, 000</SPAN>, that represents the number of processors in the test case. It is followed by a line containing an integer <SPAN CLASS="MATH"><I>M</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3231img1.gif ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3231img1.gif ALT="$ \le$">10, 000</SPAN>, that represents the number of jobs. In the following <SPAN CLASS="MATH"><I>M</I></SPAN> lines, <SPAN CLASS="MATH"><I>K</I></SPAN>-th line contains two distinct integers representing processors to which job <SPAN CLASS="MATH"><I>K</I></SPAN> can be allocated, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3231img1.gif ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3231img1.gif ALT="$ \le$"><I>M</I></SPAN>. The integers given in a line are separated by a space. After that, the remaining test cases are listed in the same manner as the above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. The line should contain the fair share for that test case.<P>The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                                    
5                                    
6                                    
1 2 
2 3  
3 4  
4 5  
5 1  
1 3
3 
2 
3 2 
1 2 
6 
6 
1 2 
3 4 
4 6 
6 5 
5 3 
6 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2  
1 
2
</PRE><P>
______________________________________________________
3232||||||false||||||
<P>Cheolsoo is a cryptographer in ICPC(International Cryptographic Program Company). Recently, Cheolsoo developed a cryptographic algorithm called ACM(Advanced Cryptographic Method). ACM uses a <EM>key</EM> to encrypt a message. The encrypted message is called a <EM>cipher text</EM>. In ACM, to decrypt a cipher text, the same key used in the encryption should be applied. That is, the encryption key and the decryption key are the same. So, the sender and receiver should agree on a key before they communicate securely using ACM. Soon after Cheolsoo finished the design of ACM, he asked its analysis on security to Younghee who is a cryptanalyst in ICPC.<P><P><BR>Younghee has an interest in breaking cryptosystems. Actually, she developed many attacking methods for well-known cryptographic algorithms. Some cryptographic algorithms have <EM>weak keys</EM>. When a message is encrypted with a weak key, the message can be recovered easily without the key from the cipher text. So, weak key should not be used when encrypting a message. After many trials, she found the characteristic of weak keys in ACM. ACM uses a sequence of mutually distinct positive integers <SPAN CLASS="MATH">(<I>N</I><SUB>1</SUB>, <I>N</I><SUB>2</SUB>,..., <I>N</I><SUB>k</SUB>)</SPAN> as a key. Younghee found that weak keys in ACM have the following two special patterns:<P><DIV ALIGN="CENTER">There are four integers <!-- MATH
 $N_p, N_q, N_r, N_s (1 \le  p < q < r < s \le k)$
 --><SPAN CLASS="MATH"><I>N</I><SUB>p</SUB>, <I>N</I><SUB>q</SUB>, <I>N</I><SUB>r</SUB>, <I>N</I><SUB>s</SUB>(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3232img1.gif ALT="$ \le$"><I>p</I> &lt; <I>q</I> &lt; <I>r</I> &lt; <I>s</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3232img1.gif ALT="$ \le$"><I>k</I>)</SPAN> in the key such that</DIV><P><DIV ALIGN="CENTER">(1) <SPAN CLASS="MATH"><I>N</I><SUB>q</SUB> &gt; <I>N</I><SUB>s</SUB> &gt; <I>N</I><SUB>p</SUB> &gt; <I>N</I><SUB>r</SUB></SPAN> or <!-- MATH
 $N_q < N_s < N_p < N_r$
 --><SPAN CLASS="MATH"><I>N</I><SUB>q</SUB> &lt; <I>N</I><SUB>s</SUB> &lt; <I>N</I><SUB>p</SUB> &lt; <I>N</I><SUB>r</SUB></SPAN></DIV><P>For example, the key (10, 30, 60, 40, 20, 50) has the pattern in (1); (_, 30, 60, _, 20, 50). So, the key is a weak key in ACM. But, the key (30, 40, 10, 20, 80, 50, 60, 70) is not weak because it does not have any pattern in the above.<P><P><BR>Now, Younghee wants to find an efficient method to determine, for a given key, whether it is a weak key or not. Write a program that can help Younghee.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> is given in the first line of the input file. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>k</I></SPAN>, the length of a sequence repressenting a key, <SPAN CLASS="MATH">4<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3232img1.gif ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3232img1.gif ALT="$ \le$">5, 000</SPAN>. In the next line, <SPAN CLASS="MATH"><I>k</I></SPAN> mutually distinct positive integers are given. There is a single space between the integers, and the integers are between 1 and 100,000, both inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print exactly one line for each test case. Print `<TT>YES</TT>' if the sequence is a weak key. Otherwise, print `<TT>NO</TT>'.<P>The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                                                 
6                                                 
10 30 60 40 20 50                                 
8                                                 
30 40 10 20 80 50 60 70   
4 
1 2 20 9
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
YES 
NO 
NO
</PRE><P>
______________________________________________________
3233||||||false||||||
<P>Taking a picture of objects gives an image. Though the image depicts the objects, some information about the object space may disappear in the image. It is interesting and sometimes challenging to reconstruct the information that has disappeared in the image.<P><P><BR>We assume the following scenario:<P><DL><DT></DT><DD>[A1] We obtain an image by taking a picture of rectangles, from <SPAN CLASS="MATH"><I>z</I> = - <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \infty$"></SPAN>, whose sides are parallel to the <SPAN CLASS="MATH"><I>x</I></SPAN>-axis or the <SPAN CLASS="MATH"><I>y</I></SPAN>-axis and whose faces are parallel to the <SPAN CLASS="MATH"><I>xy</I></SPAN>-plane.</DD><DT></DT><DD>[A2] The <SPAN CLASS="MATH"><I>z</I></SPAN>-coordinates of rectangles in the object space are all different. We assume the depth order of rectangles is numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>, where the uppermost one (with the smallest <SPAN CLASS="MATH"><I>z</I></SPAN>-coordinate) has the order of 1.</DD></DL><P>Depth information (that is, the <SPAN CLASS="MATH"><I>z</I></SPAN>-coordinate) of each rectangle does not exist in the image but we can sometimes infer which one is above the other between two rectangles (of course sometimes we cannot conclude.) For example it is easily inferred from Figure 1 that the dotted rectangle R<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> is above the dark rectangle R<SPAN CLASS="MATH"><SUB>2</SUB></SPAN>. In this case we say that ``R<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> is above R<SPAN CLASS="MATH"><SUB>2</SUB></SPAN>" and ``R<SPAN CLASS="MATH"><SUB>2</SUB></SPAN> is below R<SPAN CLASS="MATH"><SUB>1</SUB></SPAN>". Under the assumption of [A2], depth order of R<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> is 1 and that of R<SPAN CLASS="MATH"><SUB>2</SUB></SPAN> is 2.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="\epsfbox{p3233a.eps}"></DIV><P>Because of [A1], such above/below relation is transitive (that is, if R<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> is above R<SPAN CLASS="MATH"><SUB>2</SUB></SPAN> and R<SPAN CLASS="MATH"><SUB>2</SUB></SPAN> is above R<SPAN CLASS="MATH"><SUB>3</SUB></SPAN> then we can conclude R<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> is above R<SPAN CLASS="MATH"><SUB>3</SUB></SPAN>.) In the example of Figure 2, we can conclude that the dotted rectangle R<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> is above the dark rectangle R<SPAN CLASS="MATH"><SUB>3</SUB></SPAN> because the gray rectangle R<SPAN CLASS="MATH"><SUB>2</SUB></SPAN> is above R<SPAN CLASS="MATH"><SUB>3</SUB></SPAN> and R<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> is above R<SPAN CLASS="MATH"><SUB>2</SUB></SPAN>. On the other hand no information is available about the lower right rectangle R<SPAN CLASS="MATH"><SUB>5</SUB></SPAN>. In such a case we say that the depth order between R<SPAN CLASS="MATH"><SUB>5</SUB></SPAN> and any other rectangle is not inferable. Analogously, the depth order between the dark rectangle R<SPAN CLASS="MATH"><SUB>3</SUB></SPAN> and the rectangle R<SPAN CLASS="MATH"><SUB>4</SUB></SPAN> (filled with horizontal lines) is not inferable. Under the assumption of [A2], depth order of R<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> is 1 or 2; that of R<SPAN CLASS="MATH"><SUB>2</SUB></SPAN> is 2 or 3; that of R<SPAN CLASS="MATH"><SUB>3</SUB></SPAN> is 3, 4, or 5; that of R<SPAN CLASS="MATH"><SUB>4</SUB></SPAN> is 3, 4, or 5; that of R<SPAN CLASS="MATH"><SUB>5</SUB></SPAN> is from 1 to 5.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="\epsfbox{p3233b.eps}"></DIV><P>Notice that not all images are valid. Figure 3 shows examples of ``impossible" images that we cannot obtain under the assumptions of [A1] and [A2].<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="\epsfbox{p3233c.eps}"></DIV><P>The problem is as follows: we are given an image and additionally a rectangle <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \alpha$"></SPAN>. Your program reports `<TT>IMPOSSIBLE</TT>' in case that the image is not obtainable under the assumptions of [A1] and [A2]. Otherwise your program must output two integers <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \beta$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \gamma$"></SPAN> ( <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \beta$"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \le$"><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \gamma$"></SPAN>), where the maximum possible range of depth order of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \alpha$"></SPAN> is ( <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \beta$">,<IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \beta$"> + 1,...,<IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \gamma$"></SPAN>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> is given in the first line of the input file. The first line of each test case contains three integers <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>N</I><SUB>X</SUB></SPAN>, <SPAN CLASS="MATH"><I>N</I><SUB>Y</SUB></SPAN> ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \le$">52;2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \le$"><I>N</I><SUB>X</SUB>, <I>N</I><SUB>Y</SUB><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \le$">80</SPAN>) separated by blanks, where <SPAN CLASS="MATH"><I>n</I></SPAN> denotes the number of rectangles and <SPAN CLASS="MATH"><I>N</I><SUB>X</SUB></SPAN> and <SPAN CLASS="MATH"><I>N</I><SUB>Y</SUB></SPAN> denote the width and the height of the image respectively. The next <SPAN CLASS="MATH"><I>N</I><SUB>X</SUB></SPAN> lines give <SPAN CLASS="MATH"><I>N</I><SUB>X</SUB>&#215;<I>N</I><SUB>Y</SUB></SPAN> pixels, separated by a blank, each of which is either the ``dollar" symbol (denoted by `<TT>$</TT>') representing the background or an alphabet character in `<TT>a</TT>', `<TT>b</TT>', ..., `<TT>z</TT>', `<TT>A</TT>', `<TT>B</TT>', ..., `<TT>Z</TT>' representing rectangles. We distinguish uppercase letters from lowercase letters. Note that the smallest rectangle can be as small as 1 <SPAN CLASS="MATH">&#215;</SPAN> 1. The last line of each test case gives an alphabet letter, which denotes the rectangle of which we want to output the maximum possible range of depth order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program is to report `<TT>IMPOSSIBLE</TT>' if this image is not obtainable under the assumptions of [A1] and [A2]. Otherwise your program is to report <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \beta$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \gamma$"></SPAN> ( <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \beta$"><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \le$"><IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \gamma$"></SPAN>), separated by a blank, where the maximum possible range of depth order of <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \alpha$"></SPAN> is ( <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \beta$">,<IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \beta$"> + 1,...,<IMG WIDTH="14" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3233img1.gif ALT="$ \gamma$"></SPAN>).<P>The following sample input and corresponding correct output represent three test cases, each of which encodes Figure 1, Figure 2, and the leftmost one in Figure 3, respectively.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3                                              
2 4 7                                          
b b b b b $ $                                  
b b b b b $ $ 
b b C C C C C 
$ $ C C C C C 
C 
5 7 6 
$ d d d c $ 
$ d b b b b 
a a a b b b 
a a a d c $ 
a a a d $ $ 
a a a $ $ e 
a a a $ $ e 
c 
2 3 4 
d d d Z 
d Z d Z 
d d d Z 
d
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1 
3 5 
IMPOSSIBLE
</PRE><P>
______________________________________________________
3234||||||false||||||

<P>
Shaborz, Hoidin, Alssein, and Ayan, members of the Olandican IOI team attended the Fall
semester classes the same day they returned from IOI, Athens 2004. During their stay in Athens,
they took several pictures in different places and occasions like Hydra island, opening ceremony,
closing award ceremony, and city of Athens. But, being excited with their first university experi-
ence, they forgot about the pictures until the midterm recess, which has coincided with the ACM
Regional Contest days. They now want to make prints of the pictures and each of them makes his
own IOI album.

<P>
There are several negative rolls, and each contains photos of just a single place or occasion. There
may be more than one roll, containing pictures from the same place or occasion. Each roll may
have 36 negatives, numbered from 1 to 36. The team members and their friends want to order
photo prints. Shaborz is to collect all orders and collects a fixed amount of money per each photo
print. He makes a deal with a photo printing shop as follows and saves a good sum of money for
himself. Shaborz pays S Rials for each single print, but printing all photos of a single role costs
him R Rials, and printing all photos from all rolls in one order costs A Rials. Shaborz is provided
with a list of orders, and you are to minimize the overall printing cost. Note that to have the
minimum overall cost, Shaborz is allowed to print more photos than required.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> <!-- MATH
 $(1 \le t \le 20)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3234img1.png
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3234img1.png
 ALT="$ \le$">20)</SPAN> which is the number of test cases
in the input. Each test case starts with one line containing four integers: <SPAN CLASS="MATH"><I>N</I></SPAN> <!-- MATH
 $(1 \le N \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3234img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3234img1.png
 ALT="$ \le$">100)</SPAN>, the
number of orders, <SPAN CLASS="MATH"><I>S</I></SPAN>, <SPAN CLASS="MATH"><I>R</I></SPAN>, and <SPAN CLASS="MATH"><I>A</I></SPAN>, the costs of a single print, all prints from one roll, and all prints
of all rolls respectively. Then follows <SPAN CLASS="MATH"><I>N</I></SPAN> lines, each representing an order from one of the clients
(team members and their friends). An order line contains a number of items separated by blank
characters. Each item is of the form `<TT><SPAN CLASS="MATH"><I>PlaceName</I></SPAN> : <SPAN CLASS="MATH"><I>RollNo</I></SPAN> : <SPAN CLASS="MATH"><I>FromPhoto</I></SPAN>..<SPAN CLASS="MATH"><I>ToPhoto</I></SPAN>. <SPAN CLASS="MATH"><I>PlaceName</I></SPAN></TT>' is
the name of a place which is a string of at most 100 characters (case sensitive). <SPAN CLASS="MATH"><I>RollNo</I></SPAN> specifies the
desired roll among several rolls for the <SPAN CLASS="MATH"><I>PlaceName</I></SPAN> and is between 1 and 10 inclusive. <SPAN CLASS="MATH"><I>FromPhoto</I></SPAN>
and <SPAN CLASS="MATH"><I>ToPhoto</I></SPAN> are two numbers specifying the range of photos to be printed from the specified roll
<!-- MATH
 $(1 \le FromPhoto \le ToPhoto \le 36)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3234img1.png
 ALT="$ \le$"><I>FromPhoto</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3234img1.png
 ALT="$ \le$"><I>ToPhoto</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3234img1.png
 ALT="$ \le$">36)</SPAN>. You may assume there are at most 20 places. If there is only a
single photo required from a roll, the format may be simplified as `<TT><SPAN CLASS="MATH"><I>PlaceName</I></SPAN> : <SPAN CLASS="MATH"><I>RollNo</I></SPAN> : <SPAN CLASS="MATH"><I>PhotoNo</I></SPAN></TT>'.
All costs are non-negative integers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, there should be one line containing one integer indicating the minimum cost
for printing all photos of the original order set.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
2 15 100 400
Hydra:2:1..3 Athens:1:12
Delphi:1:4..5 Athens:3:20
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
105
</PRE>

<P>

______________________________________________________
3235||||||false||||||

<P>
<BLOCKQUOTE>
<SPAN  CLASS="textit">``Tommy, there will be a programming contest here in Vice City. One of the coaches
      has stolen a copy of the problem set. The chief judge wants it back. Take out the coach
      guy at his hotel and return the problems back. The address is taped under the phone.
      Do it now!"</SPAN>

</BLOCKQUOTE>

<P>
Not a tough job for you, Tommy Vercetti! Getting the mission at the pay phone, you must head off
the coach at WK Charriot Hotel before he leaves. You have to get there fast! Get there very fast
indeed! Unfortunately, the vehicle you start with may not run fast enough. But there are some
fixed locations in Vice City at which you can find certain vehicles, like Diaz's Mansion where you
can find an Infernus. This way, you may change your vehicle on your way to hotel several times.
For example, in the first sample input, you ride from `<TT>PayPhone</TT>' to `<TT>CarShowRoom</TT>'
on a `<TT>PCJ600</TT>' and drive the rest of the path in a `<TT>HotRingRacer</TT>'.
Don't forget that it takes one minute each time you change your vehicle.

<P>
You are given the names of these locations in the city and the distances between each pair. At
each location you can find a certain vehicle anytime you get there. Knowing the top speed of each
vehicle, you want to find out the minimum time in which you can reach the hotel. For the sake of
simplicity, assume that you always drive at top speed of your vehicle.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> <!-- MATH
 $(1 \le t \le 20)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3235img1.png
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3235img1.png
 ALT="$ \le$">20)</SPAN> which is the number of test cases
in the input. Each test case has three parts. The first part consists of <SPAN CLASS="MATH"><I>m</I></SPAN> lines <!-- MATH
 $(1 \le m \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3235img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3235img1.png
 ALT="$ \le$">100)</SPAN>
of the form `<!-- MATH
 $vehicle \ speed$
 -->
<SPAN CLASS="MATH"><I>vehicle</I>&nbsp;<I>speed</I></SPAN>' where <SPAN CLASS="MATH"><I>vehicle</I></SPAN> is the unique name of a vehicle and <SPAN CLASS="MATH"><I>speed</I></SPAN> is a positive
integer giving the top speed of the vehicle measured in Km/h.

<P>
The next part of the test case identifies the locations in the city and is separated from the first
part by exactly one blank line. It consists of <SPAN CLASS="MATH"><I>n</I></SPAN> lines <!-- MATH
 $(2 \le n \le 500)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3235img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3235img1.png
 ALT="$ \le$">500)</SPAN> of the form `<!-- MATH
 $location \ vehicle$
 -->
<SPAN CLASS="MATH"><I>location</I>&nbsp;<I>vehicle</I></SPAN>'
where <SPAN CLASS="MATH"><I>location</I></SPAN> is the unique name of a location in the city and <SPAN CLASS="MATH"><I>vehicle</I></SPAN> is the name of the vehicle
available in that location. The list of locations always includes the starting location `<TT>PayPhone</TT>' and
the destination `<TT>WKCharriot</TT>'.

<P>
The third part of the test case identifies the roads between locations and is separated from the
previous part by exactly one blank line. It consists of several lines of the form `<!-- MATH
 $loc_{1} \ loc_{2} \ distance$
 -->
<SPAN CLASS="MATH"><I>loc</I><SUB>1</SUB>&nbsp;<I>loc</I><SUB>2</SUB>&nbsp;<I>distance</I></SPAN>'
indicating there is a (two-way) road of length <SPAN CLASS="MATH"><I>distance</I></SPAN> between the locations <SPAN CLASS="MATH"><I>loc</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>loc</I><SUB>2</SUB></SPAN>. Distances
are expressed in kilometers and are positive integers. The test case is terminated by a line
containing a single asterisk character (<TT>*</TT>).

<P>
All names (for vehicles and locations) are strings of at most 100 letters and digits with no space
characters and are considered case sensitive. Items in an input line are separated by one or more
space characters. Also, there may be arbitrary leading or trailing blanks except in empty lines
used as separators.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, there is one line in the output containing the minimum time (in minutes)
you need to travel from `<TT>PayPhone</TT>' to `<TT>WKCharriot</TT>', or the word `<TT>UNREACHABLE</TT>'
if the destination is
unreachable from the starting point. Print the results as numbers with exactly three decimal digits
after decimal point. That is, the possible decimal digits after the third one should be ignored, and
if there are less than three digits after decimal point, zero digits should be printed for missing
digits.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2

Infernus     280
Cheetah      285
PCJ600       250
Stallion     180
HotRingRacer 300

Mansion         Infernus
CarShowRoom     HotRingRacer
VicePort        Cheetah
NorthPointMall  Infernus
PayPhone        PCJ600
WKCharriot      Stallion

PayPhone       CarShowRoom    10
PayPhone       VicePort       15
VicePort       WKCharriot     20
CarShowRoom    Mansion        15
Mansion        WKCharriot     15
Mansion        NorthPointMall 5
NorthPointMall WKCharriot     5
*
Caddy        80
MrWhoopie    60
Stretch      120
CubanHermes  160
Voodoo       170

CherryPoppy  MrWhoopie
Mansion      Stretch
PayPhone     CubanHermes
LittleHaiti  Voodoo
WKCharriot   Caddy

PayPhone      CherryPoppy    10
CherryPoppy   LittleHaiti    15
Mansion       WKCharriot     20
*
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8.400
UNREACHABLE
</PRE>

<P>

______________________________________________________
3236||||||false||||||
<P>A binary string is a string of characters from the set <SPAN CLASS="MATH">{0, 1}</SPAN>. A code is a multiset of binary strings (i.e., a string can be repeated arbitrary number of times). A fixed code is a code that none of its strings is a prefix of another string. We say that a code <SPAN CLASS="MATH"><I>A</I> = {<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB>}</SPAN> is extended to code <SPAN CLASS="MATH"><I>B</I> = {<I>b</I><SUB>1</SUB>, <I>b</I><SUB>2</SUB>,..., <I>b</I><SUB>n</SUB>}</SPAN> if and only if for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3236img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3236img1.png ALT="$ \le$"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> be a prefix of <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>. The cost of this extension is <SPAN CLASS="MATH"><IMG WIDTH="44" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3236img1.png ALT="$ \sum^{n}_{i=1}$">| <I>b</I><SUB>i</SUB>| - | <I>a</I><SUB>i</SUB>|</SPAN> where <SPAN CLASS="MATH">| <I>a</I><SUB>i</SUB>|</SPAN> is the number of characters in <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>.<P>For this problem you are given a fixed code <SPAN CLASS="MATH"><I>C</I></SPAN>, and a new binary string <SPAN CLASS="MATH"><I>s</I></SPAN>. You have to find the minimum needed cost to extend the code <SPAN CLASS="MATH"><I>C</I> <IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3236img1.png ALT="$ \cup$"> {<I>s</I>}</SPAN> into a fixed code. In other words, you are to append the minimum number of bits to zero or more codes in <SPAN CLASS="MATH"><I>C</I> <IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3236img1.png ALT="$ \cup$"> {<I>s</I>}</SPAN> to make it a fixed code.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3236img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3236img1.png ALT="$ \le$">20)</SPAN> which is the number of test cases in the input. For <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3236img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3236img1.png ALT="$ \le$"><I>t</I></SPAN> the line <SPAN CLASS="MATH"><I>i</I> + 1</SPAN> consists a nonzero number of binary strings. The number of binary strings in each line is at most 41, and the length of each binary string is no more than 40 characters. The last string in each line stands for the new incoming string <SPAN CLASS="MATH"><I>s</I></SPAN> and the other strings in that line make the fixed code of the relevant test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists <SPAN CLASS="MATH"><I>m</I></SPAN> lines. The solution to <SPAN CLASS="MATH"><I>i</I></SPAN>-th test case should be written in the line <SPAN CLASS="MATH"><I>i</I></SPAN> of the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
001 01 00
000 001 010 011 100 101 110 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
2
</PRE><P>
______________________________________________________
3237||||||false||||||
<P>In this problem, you are given a paragraph of text in terms of a sequence of lines. Each lines contains a number of words which are sequences of lowercase and uppercase letters and are sep- arated by either blank characters or asterisks. A word is wiped out if for each character in that word, there is no letter or asterisk character in the same position in the next line, or the word appears in the last line of the input. If such a case happens, all occurrences of that word in the text is converted to blanks independent of the corresponding characters in the next line. Note that the asterisks and black characters never disappear. Also, note that the words are considered case-sensitive. Write a program to read a sequence of lines described above and wipe out as many word as it can iteratively.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3237img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3237img1.png ALT="$ \le$">20)</SPAN> which is the number of test cases in the input. Each test case contains a sequence of lines containing characters `<TT>A..Z</TT>', `<TT>a..z</TT>', blank and asterisk (<TT>*</TT>). After each test case, there is a line containing single hash character (<TT>#</TT>) which is not a part of the lines you must consider in your algorithm.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the input lines in the output with the wiped out words converted to blanks. The whitespace at the end of each line is ignored when evaluating your output. Separate outputs for consecutive test cases with lines containing a single hash character.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
ACM is
**
#
in this world
you are in*side
the world
*
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ACM
**
#

you       *
the
*
#
</PRE><P>
______________________________________________________
3238||||||false||||||
<P>The spacemen in the space shuttle are waiting for the next escape window to return to the mother land Earth, where they are expected to fall somewhere in the deep blue waters of the Persian Gulf. Bored of waiting with nothing to do, they decide to play a game with their unit size food cubes. In the zero gravity environment of their spaceship, anything can stay motionless where it is placed. One spaceman places several food cubes in space such that there may be holes between cubes. Others, given the coordinates of the food cubes, should find the number of holes. A hole is a continuous empty space surrounded by food cubes in all six directions. You are to write a program to read the coordinates of each food cube and compute the number of holes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3238img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3238img1.png ALT="$ \le$">20)</SPAN> which is the number of test cases in the input. Each test case starts with an integer <SPAN CLASS="MATH"><I>M</I></SPAN>, the number of food cubes. Each line <SPAN CLASS="MATH"><I>i</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3238img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3238img1.png ALT="$ \le$"><I>M</I>)</SPAN> of the <SPAN CLASS="MATH"><I>M</I></SPAN> following lines contains integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>z</I><SUB>i</SUB></SPAN>, all between 1 and 100 inclusive, indicating the three coordinates of a food cube in the 3D space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, there is one line containing the number of holes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
26
1 1 1
1 2 1
1 3 1
2 1 1
2 2 1
2 3 1
3 1 1
3 2 1
3 3 1
1 1 2
1 2 2
1 3 2
2 1 2
2 3 2
3 1 2
3 2 2
3 3 2
1 1 3
1 2 3
1 3 3
2 1 3
2 2 3
2 3 3
3 1 3
3 2 3
3 3 3
7
1 1 1
1 1 2
1 2 1
1 2 2
2 1 1
2 1 2
2 2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
0
</PRE><P>
______________________________________________________
3239||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>n</SUB></SPAN> be <SPAN CLASS="MATH"><I>n</I></SPAN> points on the plane. We have <SPAN CLASS="MATH"><I>m</I></SPAN> rules of form <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> <SPAN CLASS="MATH"><I>rel</I></SPAN> <SPAN CLASS="MATH"><I>p</I><SUB>j</SUB></SPAN>, each inform us that the relation <SPAN CLASS="MATH"><I>rel</I></SPAN> holds among the locations of points <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>j</SUB></SPAN> on the plane. For example, ``<SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> <TT>NE</TT> <SPAN CLASS="MATH"><I>p</I><SUB>j</SUB></SPAN>" indicates that point <SPAN CLASS="MATH"><I>p</I><SUB>j</SUB></SPAN> is located NorthEast of point <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>. There are eight different relations {<TT>N, E, S, W, NE, NW, SE, SW</TT>}, corresponding to the eight directions on the plane. Let <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> and <SPAN CLASS="MATH">(<I>x</I><SUB>j</SUB>, <I>y</I><SUB>j</SUB>)</SPAN> be the coordinates of <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>, and <SPAN CLASS="MATH"><I>p</I><SUB>j</SUB></SPAN> respectively. Then <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB>&nbsp;<I>rel</I>&nbsp;<I>p</I><SUB>j</SUB></SPAN> exactly means one of the following, depending on the value of <SPAN CLASS="MATH"><I>rel</I></SPAN>:<P><DL COMPACT><DT>1.</DT><DD><TT>N</TT> stands for North. This means that <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB> = <I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB> &gt; <I>y</I><SUB>i</SUB></SPAN>,</DD><DT>2.</DT><DD><TT>E</TT> stands for East. This means that <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB> &gt; <I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB> = <I>y</I><SUB>i</SUB></SPAN>,</DD><DT>3.</DT><DD><TT>S</TT> stands for South. This means that <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB> = <I>x</I><SUB>i</SUB></SPAN> and <!-- MATH
 $y_{j} < y_{i}$
 --><SPAN CLASS="MATH"><I>y</I><SUB>j</SUB> &lt; <I>y</I><SUB>i</SUB></SPAN>,</DD><DT>4.</DT><DD><TT>W</TT> stands for West. This means that <!-- MATH
 $x_{j} < x_{i}$
 --><SPAN CLASS="MATH"><I>x</I><SUB>j</SUB> &lt; <I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB> = <I>y</I><SUB>i</SUB></SPAN>,</DD><DT>5.</DT><DD><TT>NE</TT> stands for NorthEast. This means that <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB> &gt; <I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB> &gt; <I>y</I><SUB>i</SUB></SPAN>,</DD><DT>6.</DT><DD><TT>NW</TT> stands for NorthWest. This means that <!-- MATH
 $x_{j} < x_{i}$
 --><SPAN CLASS="MATH"><I>x</I><SUB>j</SUB> &lt; <I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB> &gt; <I>y</I><SUB>i</SUB></SPAN>,</DD><DT>7.</DT><DD><TT>SE</TT> stands for SouthEast. This means that <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB> &gt; <I>x</I><SUB>i</SUB></SPAN> and <!-- MATH
 $y_{j} < y_{i}$
 --><SPAN CLASS="MATH"><I>y</I><SUB>j</SUB> &lt; <I>y</I><SUB>i</SUB></SPAN>, and</DD><DT>8.</DT><DD><TT>SW</TT> stands for SouthWest. This means that <!-- MATH
 $x_{j} < x_{i}$
 --><SPAN CLASS="MATH"><I>x</I><SUB>j</SUB> &lt; <I>x</I><SUB>i</SUB></SPAN> and <!-- MATH
 $y_{j} < y_{i}$
 --><SPAN CLASS="MATH"><I>y</I><SUB>j</SUB> &lt; <I>y</I><SUB>i</SUB></SPAN>.</DD></DL><P>The problem is to determine whether it possible to locate <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>n</SUB></SPAN> on the plane so that all given rules are satisfied.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line of the input contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3239img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3239img1.png ALT="$ \le$">20)</SPAN> which is the number of test cases in the input. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3239img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3239img1.png ALT="$ \le$">500)</SPAN> which is the number of points and <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3239img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3239img1.png ALT="$ \le$">10<SUP>4</SUP>)</SPAN> which is the number of rules. In each of the following <SPAN CLASS="MATH"><I>m</I></SPAN> lines, there is one rule of the form <SPAN CLASS="MATH"><I>i</I>&nbsp;<I>rel</I>&nbsp;<I>j</I></SPAN> which means that <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> has relation <SPAN CLASS="MATH"><I>rel</I></SPAN> with <SPAN CLASS="MATH"><I>p</I><SUB>j</SUB></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output contains one line per each test case containing one of the words `<TT>POSSIBLE</TT>' or `<TT>IMPOSSIBLE</TT>' indicating if the set of points in the test case can be located on the plane according to the given rules.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3 2
1 N 2
2 N 1
6 6
1 E 2
1 E 3
2 N 4
3 NW 5
4 SW 6
6 NE 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
IMPOSSIBLE
POSSIBLE
</PRE><P>
______________________________________________________
3240||||||false||||||
<P>ACM-Telecom provides communication services for international telephone calls. Cost of calling a country (call rates), varies from one to another. The company maintains the rates in a cost table mapping the country codes to call rates. Upon receiving a call, an automatic system determines the country code by looking at the leftmost digits in the 8-digit dialed number and charges the client according to the call rate of that country. More precisely, the automatic system maintains a list of country codes sorted in decreasing order. Upon receiving a call, the system starts from the top of the list and checks if the country code is a prefix of the dialed number. The first country code satisfying this property is considered as the destination of the call and the client is charged according to the call rate of that country. Note that the cost table covers every possible 8-digit number dialed, i.e., every dialed number matches with some country code in the table. Given the relatively high number of rows in the cost table and the increasing number of calls, the computation of call rates has become a quite lengthy process. Your task is to find a <SPAN CLASS="textbf">new</SPAN> cost table with the minimum number of rows such that the computed call costs for every possible (8-digit) dialed number are the same as before.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3240img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3240img1.png ALT="$ \le$">20)</SPAN> which is the number of test cases in the input. Each test case starts with a line containing a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3240img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3240img1.png ALT="$ \le$">1000)</SPAN> which is the number of rows in the cost table. Following the first line, there are <SPAN CLASS="MATH"><I>N</I></SPAN> lines of the form <SPAN CLASS="MATH"><I>code</I>&nbsp;<I>cost</I></SPAN> where <SPAN CLASS="MATH"><I>code</I></SPAN> is an integer between 1 and 9999 inclusive, and <SPAN CLASS="MATH"><I>cost</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3240img1.png ALT="$ \le$"><I>cost</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3240img1.png ALT="$ \le$">100)</SPAN> is a positive integer which is the cost rate of the calls to the country <SPAN CLASS="MATH"><I>code</I></SPAN>. There are no two lines with the same country code in a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, there is one line in the output containing the minimum number of rows of the table required to compute the costs correctly.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
12
331 4
33 4
335 4
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10
</PRE><P>
______________________________________________________
3241||||||false||||||
<P>A new job for the well known Prince of Persia! Not surprisingly, Jafar, the treacherous vizier of the king has put the daughter of the king in a cellar while he is away to visit a neighboring country. The prince fights bravely with the guards on his way down to the cellar. Just one step to the cellar, the prince enters a dark room containing the information to unlock the door of the cellar. The information is carved on several stone plates installed in the walls of the room. Luckily, there is a ray of light emanating through a tiny hole in one of the walls. There are a number of mirrors in the room that the prince may use to direct the ray of light to illuminate a stone plate. Each mirror may be placed in certain locations in the room without any change in its directions (i.e., angles with the walls). The question is, if the prince can illuminate every plate on the wall using the mirrors.<P><P><BR>To simplify the problem, we consider the room when viewed from above as a grid with <SPAN CLASS="MATH"><I>n</I></SPAN> rows and <SPAN CLASS="MATH"><I>m</I></SPAN> columns. The bounding cells are walls of the room and the mirrors can be put in the interior cells. No two mirrors can be placed in one cell. We have a number of mirrors available, each allowed to be put in certain positions inside the room. The direction of each mirror is known in advance and cannot be changed. To illuminate one plate, the prince must place a subset of mirrors in their allowed positions such that the ray of light reaches the plate after reflections made by the mirrors. The mirrors are opaque, meaning that the back-side of the mirrors absorbs the light. The problem is to find whether he can illuminate all and each plate on the wall. Obviously, the plates must be illuminated in turn since there is no way to fork the ray of light into multiple rays. When illuminating a plate, he may use a different subset of mirrors in possibly different positions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3241img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3241img1.png ALT="$ \le$">20)</SPAN> which is the number of test cases in the input. Each test case starts with zero or more lines each describing one mirror. A mirror is described by a single digit which is its identifier, followed by exactly one blank character, and one of the four character pairs `<TT>-/</TT>', `<TT>- <SPAN CLASS="MATH">&#92;</SPAN></TT>', `<TT>/-</TT>', and `<TT> <SPAN CLASS="MATH">&#92;</SPAN>-</TT>' indicating the mirror's direction. The hyphen character (<TT>-</TT>) determines the back-side of the mirror. For example, `<TT>-/</TT>' indicates a mirror which reflects the ray from the right to bottom and vice versa, but blocks the rays from the left or top.<P><P><BR>After the mirror description lines, there are <SPAN CLASS="MATH"><I>n</I></SPAN> lines each of length <SPAN CLASS="MATH"><I>m</I></SPAN> characters which describe the grid representing the room when viewed from the above <SPAN CLASS="MATH">((2<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3241img1.png ALT="$ \le$"><I>m</I>, <I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3241img1.png ALT="$ \le$">40))</SPAN>. The walls of the room (which are always in the boundary of the grid) are denoted by the hash signs (<TT>#</TT>). Those cells of the wall which contain plates are represented by `<TT>-</TT>' and `<code>|</code>' for horizontal and vertical walls respectively. The only cell in the boundary containing a blank character represents the hole from which the light is emanated into the room. The light ray enters the room perpendicular to the wall holding the hole. You may assume that the four cells in the corner always contain hash signs. The interior cells of the grid are all filled by the dot character (<TT>.</TT>) except those that a mirror can be placed into which are specified by digits. A mirror can be placed in a cell only if the digit of the cell is the same as the mirror identifier.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, there is one line in the output containing the word `<TT>YES</TT>' or `<TT>NO</TT>' indicating if all plates in the input can be illuminated according to the problem conditions or not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
0 -/
1 /-
3 -/
5 \-
######-#####-#########
#....................#
|....................#
#.0..............3...#
#..........0.........#
#....................#
#....................#
#.....1....1.........#
#..........1..5......#
|....................#
|....................#
#....................#
#........1......1....#
#....................#
#....0......0........#
#..............3.....#
#...3................#
#...........3........#
## #####--############
0 -/
1 /-
3 -\
## ####-##
#........#
#.3..0.1.#
|.1......#
##########
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
NO
YES
</PRE><P>
______________________________________________________
3242||||||false||||||
<P>Leonardo Da Vinci, the famous inventor and artist, was fond of cryptography and has invented many devices and techniques to hide messages. One such invention is the cryptex. A <EM>cryptex</EM> is a small device used to carry a secret message and is made of one or more rings. Each ring has the 26 uppercase letters written in some random order. It is by aligning these rings in one specific way that the secret message is revealed. The secret message is made of two words, each of length N. The first word of the secret message is called the <EM>unlocking word</EM> and the second is called the <EM>secret word</EM>. To properly align the cryptex, you need to know the unlocking word. Once you have the cryptex and the unlocking word, all you have to do is align the rings on the cryptex to spell the unlocking word. The letters on the rings, though randomly ordered, are arranged in such a way that when the cryptex is aligned to spell the unlocking word, one of the other 25 strings would spell the secret word. To reveal the secret message you'll need to know at least one letter from the secret word.<P>Take for example the following cryptex made of five rings (each line constitutes a ring:)<P><DIV ALIGN="CENTER"><TT>KFZLQMDWJUSH<B>G</B>CEIXRAOPNVTYB </TT></DIV><P><DIV ALIGN="CENTER"><TT>IMWZPFJBKLTNOEQDHUXGVYAS<B>R</B>C </TT></DIV><P><DIV ALIGN="CENTER"><TT>FAMI<B>E</B>TZORWPSQUNGLDYBKXHCVJ </TT></DIV><P><DIV ALIGN="CENTER"><TT>XNAKVPICQHDFW<B>E</B>GBRTMLZOUSYJ </TT></DIV><P><DIV ALIGN="CENTER"><TT>ZSYFDOWIJCAKPBTXLRU<B>N</B>GQMVHE </TT></DIV><P>The unlocking word is ``GREEN" and we know that the second letter of the secret word is ``P". By aligning the rings to spell the unlocking word, the cryptex now looks like this:<P><DIV ALIGN="CENTER"><TT><B>G</B>CEIXR<B>A</B>OPNVTYBKFZLQMDWJUSH </TT></DIV><P><DIV ALIGN="CENTER"><TT><B>R</B>CIMWZ<B>P</B>FJBKLTNOEQDHUXGVYAS </TT></DIV><P><DIV ALIGN="CENTER"><TT><B>E</B>TZORW<B>P</B>SQUNGLDYBKXHCVJFAMI </TT></DIV><P><DIV ALIGN="CENTER"><TT><B>E</B>GBRTM<B>L</B>ZOUSYJXNAKVPICQHDFW </TT></DIV><P><DIV ALIGN="CENTER"><TT><B>N</B>GQMVH<B>E</B>ZSYFDOWIJCAKPBTXLRU </TT></DIV><P>The secret word is revealed by looking for the word whose second letter is `<TT><B>P</B></TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Your program will be tested on one or more test cases. The first line of the input specifies a single integer <SPAN CLASS="MATH"><I>D</I></SPAN> which represents the number of test cases. Each test case is specified using <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> lines.<P>The first line of each test case has the following format:<P><P><BR><SPAN CLASS="MATH"><I>N</I>&nbsp;<I>U</I>&nbsp;<I>S</I></SPAN><P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> is a positive integer which is the number of rings. No cryptex will have more than 1000 rings. <SPAN CLASS="MATH"><I>U</I></SPAN> is the unlocking word while <SPAN CLASS="MATH"><I>S</I></SPAN> describes the secret word. <SPAN CLASS="MATH"><I>S</I></SPAN> is made of <SPAN CLASS="MATH"><I>N</I></SPAN> characters, all underscore characters (`<code>_</code>') except exactly one. For example, having <SPAN CLASS="MATH"><I>S</I></SPAN> equal to `<code>_P___</code>' says that the second letter of the secret word is `<TT>P</TT>'.<P>The remaining <SPAN CLASS="MATH"><I>N</I></SPAN> lines specifies the <SPAN CLASS="MATH"><I>N</I></SPAN> rings, one on each line. Each line is made of (different) 26 uppercase letters.<P>Consecutive test cases are separated by a single blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, write on a separate line, the unlocking word, followed by the secret word, separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                                  
5 GREEN _P___                                      
KFZLQMDWJUSHGCEIXRAOPNVTYB
IMWZPFJBKLTNOEQDHUXGVYASRC
FAMIETZORWPSQUNGLDYBKXHCVJ
XNAKVPICQHDFWEGBRTMLZOUSYJ
ZSYFDOWIJCAKPBTXLRUNGQMVHE

3 YES S__
POGCSAVYFENXBLUWTDRHJKZMIQ
DQVPBIJFEHNAGKMLXOCRTSZUWY
OURICSLEAMNQFDPYVHXGJWTZBK
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
GREEN APPLE
YES SIR
</PRE><P>
______________________________________________________
3243||||||false||||||
<P>Consider the following function:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>f</I><SUP>k</SUP>(<I>a</I>, <I>b</I>) = <IMG WIDTH="257" HEIGHT="76" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3243img1.png ALT="$\displaystyle \cases{a &amp; $k=0$ \cr
b &amp; $k = 1$ \cr
f^{k-1}(a,b) + f^{k-2}(a,b) &amp; $k &gt; 1$}
$"></DIV><P></P><P>Given a pair of values <SPAN CLASS="MATH">&lt; <I>V</I>, <I>K</I> &gt;</SPAN>, write a program to determine if there are values for <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, and <SPAN CLASS="MATH"><I>k</I></SPAN> satisfying all of the following:<P><DIV ALIGN="CENTER"><!-- MATH
 $0 < a \le  b < 10$
 --><SPAN CLASS="MATH">0 &lt; <I>a</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3243img1.png ALT="$ \le$"><I>b</I> &lt; 10</SPAN></DIV><P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3243img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3243img1.png ALT="$ \le$"><I>K</I></SPAN></DIV><P><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><I>f</I><SUP>k</SUP>(<I>a</I>, <I>b</I>) = <I>V</I></SPAN></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be given a series of pairs <SPAN CLASS="MATH">&lt; <I>V</I>, <I>K</I> &gt;</SPAN>, each pair on a separate line. Note that <!-- MATH
 $0 \le  V < 1, 000, 000$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3243img1.png ALT="$ \le$"><I>V</I> &lt; 1, 000, 000</SPAN>.<P>The end of the input file is identified by a dummy pair (which is not part of the test cases) where both <SPAN CLASS="MATH"><I>V</I></SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN> are 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each given pair <SPAN CLASS="MATH">&lt; <I>V</I>, <I>K</I> &gt;</SPAN>, if there are values for <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, and <SPAN CLASS="MATH"><I>k</I></SPAN> satisfying the requirements, write on a separate line, the following output:<P><P><BR><code>f^</code><SPAN CLASS="MATH"><I>k</I></SPAN>(<SPAN CLASS="MATH"><I>a</I></SPAN>,<SPAN CLASS="MATH"><I>b</I></SPAN>)=<SPAN CLASS="MATH"><I>V</I></SPAN><P><P><BR>If there is more than one solution, print the solution with the smallest value of <SPAN CLASS="MATH"><I>k</I></SPAN> within all the solutions with the smallest value of <SPAN CLASS="MATH"><I>b</I></SPAN> within all the solutions with the smallest value of <SPAN CLASS="MATH"><I>a</I></SPAN>. (In other words, the first solution if they were sorted lexicographically in an ascending order using the key <SPAN CLASS="MATH">&lt; <I>a</I>, <I>b</I>, <I>k</I> &gt;</SPAN>.)<P>If there is no solution, print the following:<P><P><BR><TT>no solution for <SPAN CLASS="MATH">&lt; <I>V</I>, <I>K</I> &gt;</SPAN></TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 10                                                      
5 1                                                       
34 3
34 4                                                      
34 20                                                     
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
f^4(1,1)=5
f^1(1,5)=5
no solution for &lt;34,3&gt;
f^4(5,8)=34
f^8(1,1)=34
</PRE><P>
______________________________________________________
3244||||||false||||||
<P>Do you remember how hard it was when you were first taught how to per- form long division? Until today, so many students (and grownups, for that matter,) find it difficult to perform a long division by hand. In case you forgot, take a look at the simple problem below, 22 divided by 4 is 5 and the remainder is 2. In this example, 22 is the dividend, 4 is the divisor, 5 is the quotient, while 2 is the remainder.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3244.jpg ALT="\epsfbox{p3244.eps}"></DIV><P>Write a program that illustrates all the steps performed in a long division. Note: In this problem, it is important that the output of your program matches the output of the judge's program in every detail. Read the instructions given in the output format, and study the given examples.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Your program will be tested on several test cases. Each test case is specified on a separate line. For each test case, two integers will be given: first the dividend, then the divisor. Both are positive numbers less than 1,000,000,000. The end of the test cases is a line whose divisor is 0 (which, of course, is not part of the test cases.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your output must adhere to the following points:<P><OL><LI>The output of the test cases will be <EM>separated</EM> by a single blank line. Otherwise, the output doesn't contain any blank lines. </LI><LI>There is exactly one space character to the left of the divisor. </LI><LI>There should be no trailing spaces in any of the lines. </LI><LI>There should be no leading zeros in any of the numbers. </LI><LI>There should be no unnecessary multiplication and/or subtraction steps, as, for example, resulting from multiplying by 0. </LI><LI>Digits, spaces, and separation bars (made of one or more `<TT>-</TT>') should be of exact length and alignment as in the examples. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
22 4
102478 83
3811 37
10 83
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2>(<EM>the gray vertical lines are for illustration purpose only. Use them to determine the location of spaces and alignment.</EM>)<P><PRE>
      5 r 2
   +---
 4 | 22
     20
     --
      2

        1234 r 56
    +-------
 83 | 102478
       83
       --
       19478
       166
       ---
        2878
        249
        ---
         388
         332
         ---
          56

       103 r 0
    +-----
 37 | 3811
      37
      --
       111
       111
       ---
         0

       0 r 10
    +---
 83 | 10
</PRE><P>
______________________________________________________
3245||||||false||||||
<P>Imagine a rectangular grid of letters of size <SPAN CLASS="MATH"><I>R</I>&#215;<I>C</I></SPAN>. As you can see in the adjacent figure, two exact copies of this grid may be <EM>partially</EM> overlapped just by sliding one of the copies horizontally and/or vertically.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3245.jpg ALT="\epsfbox{p3245.eps}"></DIV><P>Write a program that prints the resulting shape of such overlapping grids.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Your program will be tested on one or more test cases. Each test case is described using <SPAN CLASS="MATH"><I>R</I> + 1</SPAN> lines. The first line contains two positive integers: <SPAN CLASS="MATH"><I>R</I></SPAN> is the grid's number of rows and <SPAN CLASS="MATH"><I>C</I></SPAN> is the number of columns. The data in the grid is specified on the following <SPAN CLASS="MATH"><I>R</I></SPAN> lines. each line represents a row and is made of <SPAN CLASS="MATH"><I>C</I></SPAN> case-sensitive alphabetic characters. Note that <!-- MATH
 $R, C < 1000$
 --><SPAN CLASS="MATH"><I>R</I>, <I>C</I> &lt; 1000</SPAN>.<P>The end of test cases is specified using a dummy test case where either <SPAN CLASS="MATH"><I>R</I></SPAN> or <SPAN CLASS="MATH"><I>C</I></SPAN> is zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, print the shape of the overlapped grids. If there is no overlapping, print the grid itself. If there is more than one overlapping possibility, print the arrangement with the largest number of shared letters. If there is more than one arrangement with the largest number of shared letters, print any one of them.<P>After the output of each test case, print a line made of <SPAN CLASS="MATH"><I>x</I></SPAN> `<TT>+</TT>' characters where <SPAN CLASS="MATH"><I>x</I></SPAN> is equal to the number of columns used to print the output of that test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 6   
ABCDEF
GHABCD
IJGHAB
KLIJGH
2 2   
ab    
AB    
3 4   
abpq  
pqrs  
rsab  
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ABCDEF
GHABCDEF
IJGHABCD
KLIJGHAB
  KLIJGH
++++++++
ab
AB
++
  abpq
abpqrs
pqrsab
rsab
++++++
</PRE><P>
______________________________________________________
3246||||||false||||||
<P>Consider a 2D path drawn in the following manner: Starting at the origin point, we can move only up or right. The path will be described as a string made of zero or more {`<TT>U</TT>',`<TT>R</TT>'} letters. For each `<TT>U</TT>' we'll move one unit up, while `<TT>R</TT>' moves one unit to the right. In the following figure, the path constructed by the string <TT>RRRURRUUURRRRRUUR</TT> is drawn in a thick line.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3246.jpg ALT="\epsfbox{p3246.eps}"></DIV><P>Imagine now that we draw a straight line that connects the origin point to the last point in the path. (The line that is drawn in dots in the figure above.) We want to compute the total area that falls between the straight line and the path (the grayed area in the above figure.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is described on a separate line. The path of each test case is described as a string made of one or more {`<TT>U</TT>',`<TT>R</TT>'} letters and terminated by letter `<TT>S</TT>'.<P>All the test-cases paths can be drawn on a grid of size <SPAN CLASS="MATH">1, 000&#215;1, 000</SPAN>.<P>The last line of the input file is made of a single `<TT>S</TT>' character and is not part of the test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the result on a separate line using the following format:<P><P><BR><TT><SPAN CLASS="MATH"><I>k</I></SPAN>. <SPAN CLASS="MATH"><I>a</I></SPAN></TT><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> is the test case number (starting from 1.) a is the area rounded to three decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
RRRURRUUURRRRRUURS
RUURS
S
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 8.515
2. 1.000
</PRE><P>
______________________________________________________
3247||||||false||||||
<P>In how many ways can you arrange <SPAN CLASS="MATH"><I>N</I></SPAN> identical blocks (cubes) into piles. For example, for <SPAN CLASS="MATH"><I>N</I> = 3</SPAN> there are three arrangements:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3247a.jpg ALT="\epsfbox{p3247a.eps}"></DIV><P>Remember, the blocks are identical. For <SPAN CLASS="MATH"><I>N</I> = 4</SPAN> there are 5 arrangements:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3247a.jpg ALT="\epsfbox{p3247b.eps}"></DIV><P>Write a program that determines how many arrangements exist for a given <SPAN CLASS="MATH"><I>N</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case will be specified as a single natural number (denoting <SPAN CLASS="MATH"><I>N</I></SPAN>, the number of indistinguishable blocks) on a separate line. The end of the test cases is identified by a negative number (which is not part of the test cases.)<P>Note that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3247a.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3247a.jpg ALT="$ \le$">120</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program should print the result using the following format:<P><P><BR><TT><SPAN CLASS="MATH"><I>N</I></SPAN> =&gt; <SPAN CLASS="MATH"><I>P</I></SPAN></TT><P><P><BR>Where <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of indistinguishable blocks for the test case, and <SPAN CLASS="MATH"><I>P</I></SPAN> is the result.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1                                                 
3                                                 
5                                                 
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 =&gt; 1
3 =&gt; 3
5 =&gt; 7
</PRE><P>
______________________________________________________
3248||||||false||||||
<P>Given two numbers, say 506 and 119, we want to determine if it is possible to transform the first into the second using the following process: Start with the first number, chopping it up any way you like, for example, 50 and 6 (hereafter written as 50.6.) Now square the pieces and add them up ( <SPAN CLASS="MATH">50<SUP>2</SUP> + 6<SUP>2</SUP> = 2536</SPAN>.) Now repeat the same process on the result. Say we decide to chop it into 2.53.6 giving us the number 2849. At each step, chop the resulting number any way you like, into one or more parts, then add the squares of the parts. As shown below, in 5 steps, we can transform 506 into 119.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">50.6 <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3248img1.png ALT="$\displaystyle \Rightarrow$"> 2.53.6 <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3248img1.png ALT="$\displaystyle \Rightarrow$"> 2.849 <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3248img1.png ALT="$\displaystyle \Rightarrow$"> 72.0.80.5 <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3248img1.png ALT="$\displaystyle \Rightarrow$"> 1.1.6.0.9 <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3248img1.png ALT="$\displaystyle \Rightarrow$"> 119</DIV><P></P><P>We could have, however, transformed 506 into 119 in just four steps as shown below:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">50.6 <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3248img1.png ALT="$\displaystyle \Rightarrow$"> 2536 <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3248img1.png ALT="$\displaystyle \Rightarrow$"> 64.31.2.96 <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3248img1.png ALT="$\displaystyle \Rightarrow$"> 1.4.2.7.7 <IMG WIDTH="22" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3248img1.png ALT="$\displaystyle \Rightarrow$"> 119</DIV><P></P><P>Write a program the takes two natural numbers <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>D</I></SPAN> and determine the minimum number of steps to transform <SPAN CLASS="MATH"><I>S</I></SPAN> into <SPAN CLASS="MATH"><I>D</I></SPAN>. Your program should print `<TT>-1</TT>' if the transformation cannot be performed in 8 or less steps. Intermediate numbers cannot be greater than or equal to 10,000,000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on a single line containing two natural numbers <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>D</I></SPAN> separated by a single space character.<P>Note that <!-- MATH
 $0 \le  S, D < 10, 000, 000$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3248img1.png ALT="$ \le$"><I>S</I>, <I>D</I> &lt; 10, 000, 000</SPAN><P>The last line of the input file is made of two zeros and is not part of the test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the result on a separate line using the following form:<P><P><BR><TT><SPAN CLASS="MATH"><I>k</I></SPAN>. <SPAN CLASS="MATH"><I>result</I></SPAN></TT><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> is the test case number (starting from 1.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
506 119                                             
2003 2004                                           
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 4
2. 5
</PRE><P>
______________________________________________________
3249||||||false||||||
<P>Did you ever notice that some words in English can be broken into two or more words? Take for example the word ``Sunday'' which can be broken to ``<EM>sun</EM>" and ``<EM>day</EM>". Other examples include: ``airbag" (<EM>air.bag</EM>), ``adjust" (<EM>ad.just</EM>), and ``weathering" (<EM>we.at.he.ring</EM>).<P>Write a program that reads a dictionary of words, and prints the number of words in that dictionary that can be broken into two or more sub-words (all within the same dictionary) where no sub-word is shorter than 3 letters. Case is insignificant.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. The dictionary of each test case will be given as a list of words with each word specified on a separate line.<P>The end of a dictionary is indicated with a line made of `<TT>-</TT>' characters except the dictionary of the last test case which will end with a line made of `<TT>+</TT>' characters.<P>Each dictionary has at least one word but no more than 50,000 words. Each word is at least one character long but no longer than 16 characters. All words will be made of alphabetic characters only.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dictionary, write the result on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
bag                                                
sun                                                
day
moon
Sunday
Monday
airbag
MoonBag
----
straw
black
blue
berry
raspberry
strawberry
blueberry
blackberry
cranberry
HalleBerry
+++
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
3
</PRE><P>
______________________________________________________
3250||||||false||||||
<P>Given a boolean function of <SPAN CLASS="MATH"><I>N</I></SPAN> variables, write a program to determine the validity of queries involving universal (for-all) and existential (there-exists) quantifications.<P>Consider, for example, the following boolean function of three variables <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, and <SPAN CLASS="MATH"><I>z</I></SPAN>:<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="\epsfbox{p3250.eps}"></DIV><P>Here's a sample of queries to answer:<P><UL><LI><SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \forall$"><I>x</I>&nbsp;<IMG WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \forall$"><I>y</I>&nbsp;<IMG WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \forall$"><I>z</I></SPAN><P>answer is false, since not every combination is true.<P></LI><LI><SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \exists$"><I>y</I>&nbsp;<IMG WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \forall$"><I>z</I>&nbsp;<IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \exists$"><I>x</I></SPAN><P>Answer is true. For <SPAN CLASS="MATH"><I>y</I> = 1</SPAN>, we have a value for x giving a true result for every value of <SPAN CLASS="MATH"><I>z</I></SPAN>:<BR><SPAN CLASS="MATH">&lt; <I>z</I> = 1, <I>x</I> = 2 &gt;</SPAN> and <SPAN CLASS="MATH">&lt; <I>z</I> = 2, <I>x</I> = 1 &gt;</SPAN> and <SPAN CLASS="MATH">&lt; <I>z</I> = 3, <I>x</I> = 1 &gt;</SPAN> and <!-- MATH
 $<z=4,x=1|2>$
 --><SPAN CLASS="MATH">&lt; <I>z</I> = 4, <I>x</I> = 1| 2 &gt;</SPAN><P></LI><LI><SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \exists$"><I>x</I>&nbsp;<IMG WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \forall$"><I>z</I>&nbsp;<IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \exists$"><I>y</I></SPAN><P>Answer is true for <SPAN CLASS="MATH"><I>x</I> = 2</SPAN>. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on a number of test cases. Each test case is specified using <SPAN CLASS="MATH"><I>Q</I> + 3</SPAN> lines.<P>The first two lines of a test case specify the boolean function while the remaining lines specify the queries for that test case. The first line includes <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> positive numbers. The first number is <SPAN CLASS="MATH"><I>N</I></SPAN> which is the number of variables. The remaining <SPAN CLASS="MATH"><I>N</I></SPAN> numbers are <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB>, <I>D</I><SUB>2</SUB>,..., <I>D</I><SUB>N</SUB></SPAN> where <SPAN CLASS="MATH"><I>D</I><SUB>i</SUB></SPAN> is the number of values for <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> (the <SPAN CLASS="MATH"><I>i</I></SPAN>-th variable.) The second line is made of <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB>*<I>D</I><SUB>2</SUB>*...*<I>D</I><SUB>N</SUB></SPAN> `<TT>T</TT>' or `<TT>F</TT>' characters (true or false) specifying the values of the function, in row major order.<P>The third line includes a single positive value <SPAN CLASS="MATH"><I>Q</I></SPAN> representing the number of queries. Each query is specified on a separate line using <SPAN CLASS="MATH"><I>N</I></SPAN> pairs, one for each variable (all queries will involve all variables.) Each pair is described using two parts: The first part represents the quantification and is one of two letters: `<TT>A</TT>' (for all) and `<TT>E</TT>' (there exists.) The second part is a number representing the variable number. For example, the query <TT>A2E1</TT> stands for <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \forall$"><I>v</I><SUB>2</SUB>&nbsp;<IMG WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3250.jpg ALT="$ \exists$"><I>v</I><SUB>1</SUB></SPAN><P>Consecutive test cases are separated by a single blank line. The end of test cases is specified using a dummy test case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>.<P>The number of variables is less than 10. The number of values for any variable will not exceed 10. However, <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB>*<I>D</I><SUB>2</SUB>*...*<I>D</I><SUB>N</SUB></SPAN> will not exceed 1,000,000.<P>The first test case in the Sample I/O section represents the example used in the problem description.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the following line:<P><P><BR><TT>Test case # <SPAN CLASS="MATH"><I>k</I></SPAN></TT><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> is the test case number (starting at 1.) For each query, print the following line:<P><P><BR><TT>Query # <SPAN CLASS="MATH"><I>k</I></SPAN> is <SPAN CLASS="MATH"><I>r</I></SPAN>.</TT><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> is the query number (starting at 1) and <SPAN CLASS="MATH"><I>r</I></SPAN> is the result of the query (`<TT>true</TT>' or `<TT>false</TT>'.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 3 4                                          
FTTTFFTFFFFFTFFTTTFFFFTF                         
3                                                
A1A2A3                                           
E2A3E1
E1A3E2                                           
                                                 
2 2 2                                            
TFTF                                             
6                                                
A2A1                                             
A2E1                                             
A1E2
E1A2
E2A1
E1E2

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Test case # 1
  Query # 1 is false.
  Query # 2 is true.
  Query # 3 is true.

Test case # 2
  Query # 1 is false.
  Query # 2 is false.
  Query # 3 is true.
  Query # 4 is false.
  Query # 5 is true.
  Query # 6 is true.
</PRE><P>
______________________________________________________
3251||||||false||||||
<P>The Nobel Prize of Kabiguru Rabindranath Thagore was stolen from a museum of Viswa Bharati University in West Bengal. The Central Bureau of Investigation (CBI) has been assigned the job to investigate the crime and recover the prize. CBI has identified some suspects and linked each one of them to a distinct subset of a set of clues.<P>Let there be <SPAN CLASS="MATH"><I>p</I></SPAN> suspects and <SPAN CLASS="MATH"><I>q</I></SPAN> clues. Integers 1 to <SPAN CLASS="MATH"><I>p</I></SPAN> identify suspects while <SPAN CLASS="MATH"><I>q</I></SPAN> distinct letter-codes identify clues. The clues are of varying importance. The alphabetic order of letter-codes determines the priority order in the clues; letter-codes `<TT>a</TT>' to `<TT>z</TT>' vary from highest to lowest priority.<P>Let <SPAN CLASS="MATH"><I>L</I><SUB>0</SUB></SPAN> be the set of all suspects. Based on a clue `<SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \alpha$"></SPAN>', a subset <SPAN CLASS="MATH"><I>L</I></SPAN> of <SPAN CLASS="MATH"><I>L</I><SUB>0</SUB></SPAN> may be split into two disjoint subsets <SPAN CLASS="MATH"><I>L</I><SUB>+ <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \alpha$"></SUB></SPAN> and <SPAN CLASS="MATH"><I>L</I><SUB>- <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \alpha$"></SUB></SPAN>. The subset <SPAN CLASS="MATH"><I>L</I><SUB>+ <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \alpha$"></SUB></SPAN> includes all elements of <SPAN CLASS="MATH"><I>L</I></SPAN> that are linked to a subset of clues containing `<SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \alpha$"></SPAN>' and <SPAN CLASS="MATH"><I>L</I><SUB>- <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \alpha$"></SUB></SPAN> includes all other elements of <SPAN CLASS="MATH"><I>L</I></SPAN>. Let <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>n</I><SUB>+ <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \alpha$"></SUB></SPAN>, and <SPAN CLASS="MATH"><I>n</I><SUB>- <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \alpha$"></SUB></SPAN> denote respectively the total number of elements in <SPAN CLASS="MATH"><I>L</I></SPAN>, <SPAN CLASS="MATH"><I>L</I><SUB>+ <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \alpha$"></SUB></SPAN> and <SPAN CLASS="MATH"><I>L</I><SUB>- <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \alpha$"></SUB></SPAN>. The discriminatory power of a clue `<SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \alpha$"></SPAN>' to discriminate suspects in <SPAN CLASS="MATH"><I>L</I></SPAN> is defined by <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \delta_{\alpha}^{}$"> = - (| <I>n</I><SUB>+ <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \alpha$"></SUB> - <I>n</I><SUB>- <IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \alpha$"></SUB>|)</SPAN><P>Let <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN> denote a set of disjoint subsets of <SPAN CLASS="MATH"><I>L</I><SUB>0</SUB></SPAN>, each subset containing two or more elements. The discriminatory power <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \delta_{\alpha}^{*}$"></SPAN> of a clue `<SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \alpha$"></SPAN>' to discriminate suspects in subsets contained in <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN> is defined to be the sum of all <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \delta_{\alpha}^{}$"></SPAN>'s corresponding to each subset in <SPAN CLASS="MATH"><I>L</I>*</SPAN>.<P><P><BR>CBI wants to select a set <SPAN CLASS="MATH"><I>D</I></SPAN> of dominant clues so that the presence or absence of some or all of these clues can identify each suspect uniquely. The selection is to be done in stages.<P>Let <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN> contain only <SPAN CLASS="MATH"><I>L</I><SUB>0</SUB></SPAN> initially. At each stage of selection a clue `<SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \beta$"></SPAN>' with highest discriminatory power <SPAN CLASS="MATH"><IMG WIDTH="21" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \delta_{\beta}^{*}$"></SPAN> is selected. Selecting the clue `<SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \beta$"></SPAN>' with highest priority breaks tie, if any. After a selection of `<SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$ \beta$"></SPAN>' each <SPAN CLASS="MATH"><I>L</I></SPAN> in <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN> is split into disjoint subsets <SPAN CLASS="MATH"><I>L</I><SUB>+ <IMG WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \beta$"></SUB></SPAN> and ` <SPAN CLASS="MATH"><I>L</I><SUB>- <IMG WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3251img1.png ALT="$\scriptstyle \beta$"></SUB></SPAN>' all resulting subsets with less than two elements are dropped from <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN>. The process of selection continues until <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN> becomes empty. All the clues thus selected form the set of dominant clues <SPAN CLASS="MATH"><I>D</I></SPAN>.<P>You are required to write a program to find the set of dominant clues <SPAN CLASS="MATH"><I>D</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input may contain multiple test cases. For each test case input is given in one line. It contains an integer <SPAN CLASS="MATH"><I>k</I></SPAN> representing the case number and a certain number of strings of clues. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th string represents the subset of clues to which the <SPAN CLASS="MATH"><I>i</I></SPAN>-th suspect is linked. A space separates two consecutive fields in input.<P>Input terminates with an input 0 for the case number <SPAN CLASS="MATH"><I>k</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, present output in one line. The line contains the case number <SPAN CLASS="MATH"><I>k</I></SPAN> and a string of letters. The letters in the string correspond to the clues in <SPAN CLASS="MATH"><I>D</I></SPAN> and appear in the order of their selection.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 cbx cpxb bc brc
2 bac adce cbd d
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1  xpr
2  ab
</PRE><P>
______________________________________________________
3252||||||false||||||
<P>A word is a string of two or more letters while a code is a string of one or more distinct words in lexicographic order. Thus a string of letters may represent either a word or a code. An optimum code is a code that contains the maximum number of words.<P>For a given string of letters there may be one or more optimum codes. The optimum code of top priority is the optimum code that appears at the top when all optimum codes are arranged in lexicographic order.<P>Given a string of letters, you are required to write a program that finds the following:<P><UL><LI>The total number of words, <SPAN CLASS="MATH"><I>m</I></SPAN> in an optimum code, </LI><LI>The total number of optimum codes, <SPAN CLASS="MATH"><I>n</I></SPAN> represented by the string, </LI><LI>The optimum code of top priority, the top-code. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple test cases.<P>For each test case there is only one line of input. It contains a string of at most 100 letters.<P>A line consisting of a single letter terminates input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, present output in two lines.<P>The first line gives the two integers <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> defined above. The next line gives the optimum code of top priority, the top-code.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
aaaaaa
words
lexicographic
a
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 1
aa aaaa
1 1
words
3 2
lexic og raphic
</PRE><P>
______________________________________________________
3253||||||false||||||
<P>A leading political party A, not having a comfortable majority of its own, decides to form a coalition Government with other parties. Usually coalition partners have conflicting ideologies, policies and aspirations. In addition they have rivalries and personality clashes among their leaders. Any inclusion/exclusion of a leader in/from the cabinet has far reaching effect on the stability and effectiveness of the Government as well as on the popularity of coalition partners.<P>Party A has its own Secret Research &amp; Analysis Wing (SRAW) that produces various statistics measuring positive and negative effects of policies, actions and events on popularity and effectiveness of the Government. It has short listed <SPAN CLASS="MATH"><I>m</I></SPAN> leaders from all coalition partners including itself, for consideration of ministerial assignments and identified <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(<I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3253img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3253img1.png ALT="$ \le$">15)</SPAN> cabinet berths. Leaders and cabinet berths are identified by integers <SPAN CLASS="MATH">1, 2,..., <I>m</I></SPAN> and <SPAN CLASS="MATH">1, 2,..., <I>k</I></SPAN> respectively. For each leader <SPAN CLASS="MATH"><I>i</I></SPAN> and each cabinet berth <SPAN CLASS="MATH"><I>j</I></SPAN>, SRAW has produced an integer index <SPAN CLASS="MATH"><I>n</I>(<I>i</I>, <I>j</I>)</SPAN> that measures the negative effect or the nuisance value of leader <SPAN CLASS="MATH"><I>i</I></SPAN> in the event of his/her getting the cabinet berth <SPAN CLASS="MATH"><I>j</I></SPAN>.<P>Party A relies heavily on computers for making decisions. It wants to select <SPAN CLASS="MATH"><I>k</I></SPAN> leaders and assign cabinet berths to them so that the total nuisance value for all <SPAN CLASS="MATH"><I>k</I></SPAN> assignments is the least. You are required to write a program that finds all possible options for the party to form the cabinet.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple test cases.<P>For each test case the first line gives three integers, the case number <SPAN CLASS="MATH"><I>c</I></SPAN>, the total number of leaders <SPAN CLASS="MATH"><I>m</I></SPAN> and the total number of cabinet berths <SPAN CLASS="MATH"><I>k</I></SPAN>. The next <SPAN CLASS="MATH"><I>m</I></SPAN> lines give nuisance values of <SPAN CLASS="MATH"><I>m</I></SPAN> leaders; the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line for <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>m</I></SPAN> contains <SPAN CLASS="MATH"><I>n</I>(<I>i</I>, <I>j</I>)</SPAN> for <SPAN CLASS="MATH"><I>j</I> = 1, 2,..., <I>k</I></SPAN>. A space separates any two neighbouring values in an input line.<P>Input terminates with an input 0 for the case number <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, present output in two or more lines. The first line contains the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the total number of options <SPAN CLASS="MATH"><I>p</I></SPAN>. Each of the next <SPAN CLASS="MATH"><I>p</I></SPAN> lines contains an option for as assignment; the <SPAN CLASS="MATH"><I>j</I></SPAN>-th integer in a line identifies the minister who is to be assigned the <SPAN CLASS="MATH"><I>j</I></SPAN>-th cabinet berth.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 3 2
10 23
35 38
25 43
2 5 3
34 65 68
26 55 54
16 35 32
28 69 46
40 71 48
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2
1 2
3 1
2 1
2 3 4
</PRE><P>
______________________________________________________
3254||||||false||||||
<P>Visually handicapped people use Braille system of codes for reading and writing. The basic Braille symbol (or cell) is composed of six dots arranged in two vertical columns, each column being three dots high. This pattern produces 64 one-cell symbols with character index <SPAN CLASS="MATH">#(2<SUP>0</SUP><I>a</I><SUB>1</SUB> + 2<SUP>1</SUP><I>a</I><SUB>2</SUB> + 2<SUP>2</SUP><I>a</I><SUB>3</SUB> + 2<SUP>3</SUP><I>a</I><SUB>4</SUB> + 2<SUP>4</SUP><I>a</I><SUB>5</SUB> + 2<SUP>5</SUP><I>a</I><SUB>6</SUB>)</SPAN>, where <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB> = 1</SPAN>, if dot <SPAN CLASS="MATH"><I>i</I></SPAN> is embossed up and zero otherwise. The positions of these dots are numbered as follows:<P><P><BR><DIV ALIGN="CENTER">A cell without numbers A cell with numbers</DIV><P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3254.jpg ALT="\epsfbox{p3254.eps}"></DIV><P>Many Braille codes are in use; one such is the Simple Braille System (SBS). In SBS alphabets in lower case are default characters; letters `<TT>a</TT>, <TT>b</TT>,..., <TT>z</TT>' have character indices `<TT>1</TT>, <TT>2</TT>, ..., <TT>26</TT>' respectively. The ``letter sign'' (dots 5-6) may be used optionally before a string of alphabets in lower case. Each numeric digit 0-9 requires one cell, with character index the digit itself. However the ``number sign'' (dots 3-4-5-6) is added before a string of numerals. In order to revert back to normal alphabets after a string of numerals, the ``letter sign'' is used. The blank cell is used as a space in alphabetic context and zero in numeric context. For example the numerals 1 - 10 are the same as the first ten letters of the alphabet, index of #<TT>a</TT> being 1 and #<TT>j</TT> being 10. SBS allows the contraction of `<TT>th</TT>', by a single cell with dots 1-4-5-6. A two-cell contraction for `<TT>tion</TT>' is allowed with dots 5-6 and dots 1-3-4-5.<P>There are no single-cell codes for capital letters in SBS. So a ``capital sign'' (dot 6) is inserted before a capital letter. Two ``capital signs'' are inserted to indicate that the string of alphabets that follows is capitalized. To revert back to normal alphabets (or numerals), the ``letter sign'' (or the ``number sign'') is used. SBS ignores punctuation marks altogether.<P><P><BR>You are required to write a program for SBS transcription that converts an SBS code to English.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple test cases.<P>In each test case there is an SBS code. It is given in three input lines containing a certain number of Braille cells. Each Braille cell is represented by a <SPAN CLASS="MATH">3&#215;2</SPAN> array of <TT>0</TT>'s and <TT>1</TT>'s, appearing in an odd and the next even numbered column of the three input lines, where `<TT>1</TT>' is used for an embossed dot and `<TT>0</TT>' otherwise.<P>A line that is not a part of an SBS code, containing a single zero in column 1 terminates input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the SBS code in English, in one line. In case the input does not conform to SBS rules stated above output simply the sign `<TT>?</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
110010
011100
011110
110110
010100
011110
000011
000101
010110
00001110
00000100
01010110
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
?
th5
Tion
THE
</PRE><P>
______________________________________________________
3255||||||false||||||

<P>
TV channels survive on advertisements. Usually
advertisements appear between sequences of a TV program. Viewers have little
option to ignore advertisements. Whether they like it or not they have either
to watch advertisements along with programs or to hop temporarily to another
channel where there is no advertisement.

<P>
A TV manufacturer plans to introduce a new brand of TV called `Ad-less TV' that
uses AI and fuzzy logic based signal processing to recognize an advertisement
prior to its appearance and hop automatically just before an advertisement
begins, to another channel showing a program sequence and not an advertisement.
The hopping is done during a given time interval according to a preferred
option of a viewer;

<P>

<UL>
<LI>Option 1: Watch Ad-less programs with minimum number of hopping,
</LI>
<LI>Option 2: Watch Ad-less programs with maximum number of hopping.
</LI>
</UL>

<P>
The manufacturer has a preliminary problem: Given <SPAN CLASS="MATH"><I>n</I></SPAN> channels <!-- MATH
 $(n \le 12)$
 -->
<SPAN CLASS="MATH">(<I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3255img1.png
 ALT="$ \le$">12)</SPAN>, an
option <SPAN CLASS="MATH"><I>p</I></SPAN> (1 or 2), a time interval <SPAN CLASS="MATH">(0, <I>t</I>)</SPAN>, (<SPAN CLASS="MATH"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3255img1.png
 ALT="$ \le$">60</SPAN> minutes),
 and an increasing sequence of integers <SPAN CLASS="MATH"><I>S</I><SUB>c</SUB></SPAN>, for each
channel <SPAN CLASS="MATH"><I>c</I></SPAN>, <!-- MATH
 $c=1, 2,\dots , n$
 -->
<SPAN CLASS="MATH"><I>c</I> = 1, 2,..., <I>n</I></SPAN>, determine a sequence of
hopping required to watch Ad-less programs.

<P>
The
increasing sequence of integers in <SPAN CLASS="MATH"><I>S</I><SUB>c</SUB></SPAN>,
represents alternately the beginning and the end of program sequences or
advertisements. The first integer in a sequence indicates the beginning of a
program sequence as well as the end of an advertisement. Thus for a given time
interval (0, 10) the sequence <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN> of integers `<TT>2 6 9 12</TT>' indicates that
in the 2-nd channel, program sequences appear in intervals (2, 6),
(9, 10) while advertisements appear in intervals (0, 2), (6, 9).

<P>
You
are required to write a program to solve the problem faced by the manufacturer.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input
consists of multiple test cases.

<P>
For
each test case the first line gives four integers: case number <SPAN CLASS="MATH"><I>k</I></SPAN>, option <SPAN CLASS="MATH"><I>p</I></SPAN>,
number of channels <SPAN CLASS="MATH"><I>n</I></SPAN> and time <SPAN CLASS="MATH"><I>t</I></SPAN>, specifying the time interval <SPAN CLASS="MATH">(0, <I>t</I>)</SPAN> to watch
TV.

<P>
Each
of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines gives an <SPAN CLASS="MATH"><I>S</I><SUB>c</SUB></SPAN>; the <SPAN CLASS="MATH"><I>c</I></SPAN>-th
line, with <!-- MATH
 $c = 1, 2, \dots, n$
 -->
<SPAN CLASS="MATH"><I>c</I> = 1, 2,..., <I>n</I></SPAN>, gives <SPAN CLASS="MATH"><I>S</I><SUB>c</SUB></SPAN> for
channel <SPAN CLASS="MATH"><I>c</I></SPAN>. A space appears between any two neighbouring integers in an
input line.

<P>
Input
terminates with an input 0 for the case number <SPAN CLASS="MATH"><I>k</I></SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, display output in two lines.

<P>
The first line contains two integers: the case number <SPAN CLASS="MATH"><I>k</I></SPAN> and the total number of
hopping <SPAN CLASS="MATH"><I>h</I></SPAN> required to watch Ad-less programs according to the given option.
In case it is not feasible to watch Ad-less programs during the given period, output <SPAN CLASS="MATH"><I>h</I></SPAN> as zero.

<P>
The second line of output displays a feasible hopping. It contains a sequence of
integers representing a sequence of channels that may be watched to view Ad-less programs. In case <SPAN CLASS="MATH"><I>h</I></SPAN>
is not equal to zero, the total number of integers in the sequence is <SPAN CLASS="MATH">(<I>h</I> + 1)</SPAN>. If <SPAN CLASS="MATH"><I>h</I></SPAN> is equal to zero then the
sequence terminates with a zero that appears at the position where no further
channel is available for hopping.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 1 3 10
0 3 7 10
2 6 9 12
0 5 8 11
2 1 3 10
0 3 5 10
4 8 10
0 5 7 9 12
3 2 3 10
0 3 5 10
4 8 10
0 5 7 9 12
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 0
1 2 0
2 1
3 1
3 4
1 3 2 3 1
</PRE>

<P>

______________________________________________________
3256||||||false||||||
<P>Here is a simple puzzle on numbers.<P>There are <SPAN CLASS="MATH"><I>n</I></SPAN> numbers, each of which is of <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(<I>k</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3256img1.png ALT="$ \ge$"><I>n</I>)</SPAN> distinct and significant digits. When the numbers are lined up in <SPAN CLASS="MATH"><I>n</I></SPAN> rows keeping the digits in <SPAN CLASS="MATH"><I>k</I></SPAN> columns, the <SPAN CLASS="MATH"><I>n</I></SPAN> digits that appear in each column are also distinct. The sum of the numbers is known to be <SPAN CLASS="MATH"><I>S</I></SPAN>.<P>One digit from each number is removed so that not more than one digit is removed from each column. The digits removed are all distinct. Thus <SPAN CLASS="MATH"><I>n</I></SPAN> incomplete numbers are formed with remaining digits keeping digits in the original order. Given the incomplete numbers and the sum <SPAN CLASS="MATH"><I>S</I></SPAN>, what are the original numbers?<P>Can you write a program that solves the simple puzzle? The program should find all possible solutions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple test cases.<P>For each test case data is given in one line. The line contains the case number <SPAN CLASS="MATH"><I>c</I></SPAN>, the given incomplete numbers followed by the sum <SPAN CLASS="MATH"><I>S</I></SPAN>. A space separates two consecutive fields in input.<P>Input terminates with an input 0 for the case number <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, display output in one or more lines. Each line contains the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and a possible solution. A solution consists of the original numbers in the order in which the incomplete numbers appear in input.<P>In case it is not possible to solve the puzzle, assume the solution to be 0 and display output accordingly.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 6 8 174
2 53 81 817
3 3 4 130
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 0
2 536 281
3 36 94
3 83 47
</PRE><P>
______________________________________________________
3257||||||false||||||
<P>In an online selection process, a candidate is required to respond True (coded <TT>1</TT>) / False (coded <TT>0</TT>) to a series of <SPAN CLASS="MATH"><I>k</I></SPAN> questions interactively. Questions are offered from a question bank that contains <SPAN CLASS="MATH"><I>n</I></SPAN> question-groups numbered <SPAN CLASS="MATH">0, 1, 2,...(<I>n</I> - 1)</SPAN>. Each question-group contains a large number of questions of more or less the same difficulty. Each question in a question-group has the same answer, either `<TT>1</TT>' or `<TT>0</TT>'. The answer to questions in the <SPAN CLASS="MATH"><I>i</I></SPAN>-th question-group is denoted by <SPAN CLASS="MATH"><IMG WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3257img1.png ALT="$ \alpha_{i}^{}$"></SPAN>, <SPAN CLASS="MATH"><I>i</I> = 0, 1, 2,...,(<I>n</I> - 1)</SPAN>.<P>During an interactive session, a candidate is graded after each response and categorized into one of <SPAN CLASS="MATH"><I>n</I></SPAN> states numbered <SPAN CLASS="MATH">0, 1, 2,...(<I>n</I> - 1)</SPAN> confidentially. At the beginning of a session a candidate is assumed to have score 0 and is in state 0. A candidate in state <SPAN CLASS="MATH"><I>i</I></SPAN> is offered a randomly selected question from question-group <SPAN CLASS="MATH"><I>i</I></SPAN>. The score of a candidate is increased by one if the response matches with the correct answer <SPAN CLASS="MATH"><IMG WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3257img1.png ALT="$ \alpha_{i}^{}$"></SPAN>. Further the state <SPAN CLASS="MATH"><I>i</I></SPAN> is changed to state <SPAN CLASS="MATH"><I>i</I><SUB>0</SUB></SPAN> if the response is `<TT>0</TT>' and to state <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN> if the response is `<TT>1</TT>'. For a given state <SPAN CLASS="MATH"><I>i</I></SPAN>, states <SPAN CLASS="MATH"><I>i</I><SUB>0</SUB></SPAN> and <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN> are known and may or may not be distinct or different from <SPAN CLASS="MATH"><I>i</I></SPAN>.<P>On termination of a session after <SPAN CLASS="MATH"><I>k</I></SPAN> responses, let <SPAN CLASS="MATH"><I>m</I></SPAN> be the total score and <SPAN CLASS="MATH"><I>r</I></SPAN> be the total number of `<TT>0</TT>' response.<P>Given a selection process stated above and the total score <SPAN CLASS="MATH"><I>m</I></SPAN> of a candidate, you are required to write a program that determines the maximum value of <SPAN CLASS="MATH"><I>r</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases.<P>For each test case the first input line gives four integers: the case number <SPAN CLASS="MATH"><I>c</I></SPAN>, parameters <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3257img1.png ALT="$ \le$">20)</SPAN>, <SPAN CLASS="MATH"><I>k</I>(<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3257img1.png ALT="$ \le$">30)</SPAN> and the total score <SPAN CLASS="MATH"><I>m</I></SPAN>. Each of next <SPAN CLASS="MATH"><I>n</I></SPAN> lines gives three integers; the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line gives <SPAN CLASS="MATH"><I>i</I><SUB>0</SUB></SPAN>, <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3257img1.png ALT="$ \alpha_{i}^{}$"></SPAN> for <SPAN CLASS="MATH"><I>i</I> = 0, 1, 2,...,(<I>n</I> - 1)</SPAN>. A space appears between any two neighbouring fields in an input line.<P>Input terminates with a value zero for <SPAN CLASS="MATH"><I>c</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, display output in one line. The line contains the case number <SPAN CLASS="MATH"><I>c</I></SPAN> and the maximum value of <SPAN CLASS="MATH"><I>r</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 3 4 3
0 2 0
2 0 1
2 1 0
2 3 5 2
0 2 1
2 0 0
2 1 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3
2 3
</PRE><P>
______________________________________________________
3258||||||false||||||
<P>Given a two dimensional array of <TT>0</TT>'s and <TT>1</TT>'s, you are required to write a program that recognizes the largest (in area) right-angled isosceles triangle hidden in the array.<P>Assume that each `<TT>0</TT>' or `<TT>1</TT>' in the array represents a point on a plane and the distance between each pair of neighbouring points row wise or column wise is unity. Assume further that every neighbouring pair of <TT>1</TT>'s, row wise, column wise or diagonally is connected by a line segment. Two line segments emerging from a point, either join together to form a longer line segment or form an angle of <SPAN CLASS="MATH">45<SUP><TT>o</TT></SUP></SPAN>, <SPAN CLASS="MATH">90<SUP><TT>o</TT></SUP></SPAN> or <SPAN CLASS="MATH">135<SUP><TT>o</TT></SUP></SPAN>, thus forming right-angled isosceles triangles. The existence of hidden right-angled isosceles triangles in an array is illustrated in the figure below.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3258.jpg ALT="\epsfbox{p3258.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple test cases.<P>For each test case the first line gives three integers: the case number <SPAN CLASS="MATH"><I>k</I></SPAN>, the number of rows <SPAN CLASS="MATH"><I>m</I></SPAN> and the number of columns <SPAN CLASS="MATH"><I>n</I></SPAN> of the given array. A space appears between two neighbouring integers.<P>Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines gives a string of <TT>0</TT>'s and <TT>1</TT>'s of length <SPAN CLASS="MATH"><I>n</I></SPAN>; the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line gives the <SPAN CLASS="MATH"><I>i</I></SPAN>-th row of the array.<P>Input terminates with a value zero for case number <SPAN CLASS="MATH"><I>k</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, display output in one line. The line contains the case number <SPAN CLASS="MATH"><I>k</I></SPAN> and the area of the largest right-angled isosceles triangle hidden in the array. The area is a real number with one digit after the decimal point. If a triangle does not exist then output `<TT>0.0</TT>' as the area.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 3 3
101
100
101
2 4 6
001001
010101
111111
000001
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 0.0
2 4.0
</PRE><P>
______________________________________________________
3259||||||false||||||
<P>
Shanghai Hypercomputers, the world's largest computer chip manufacturer, has invented a new 
class of nanoparticles called Amphiphilic Carbon Molecules (ACMs). ACMs are semiconductors. 
It means that they can be either conductors or insulators of electrons, and thus possess a property 
that is very important for the computer chip industry. They are also amphiphilic molecules, which 
means parts of them are hydrophilic while other parts of them are hydrophobic. Hydrophilic 
ACMs are soluble in polar solvents (for example, water) but are insoluble in nonpolar solvents 
(for example, acetone). Hydrophobic ACMs, on the contrary, are soluble in acetone but insoluble 
in water. Semiconductor ACMs dissolved in either water or acetone can be used in the computer 
chip manufacturing process. 

<P>
As a materials engineer at Shanghai Hypercomputers, your job is to prepare ACM solutions from 
ACM particles. You go to your factory everyday at 8 am and find a batch of ACM particles on 
your workbench. You prepare the ACM solutions by dripping some water, as well as some acetone, 
into those particles and watch the ACMs dissolve in the solvents. You always want to prepare 
unmixed solutions, so you first separate the ACM particles by placing an Insulating Carbon 
Partition Card (ICPC) perpendicular to your workbench. The ICPC is long enough to completely 
separate the particles. You then drip water on one side of the ICPC and acetone on the other side. 
The ICPC helps you obtain hydrophilic ACMs dissolved in water on one side and hydrophobic 
ACMs dissolved in acetone on the other side. If you happen to put the ICPC on top of some ACM 
particles, those ACMs will be right at the border between the water solution and the acetone 
solution, and they will be dissolved. Fig.1 shows your working situation. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3259a.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3259a.jpg
 ALT="\epsfbox{p3259a.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Fig.1

</DIV>

<P>
Your daily job is very easy and boring, so your supervisor makes it a little bit more challenging by 
asking you to dissolve as much ACMs into solution as possible. You know you have to be very 
careful about where to put the ICPC since hydrophilic ACMs on the acetone side, or hydrophobic 
ACMs on the water side, will not dissolve. As an experienced engineer, you also know that 
sometimes it can be very difficult to find the best position for the ICPC, so you decide to write a 
program to help you. You have asked your supervisor to buy a special digital camera and have it 
installed above your workbench, so that your program can obtain the exact positions and species 
(hydrophilic or hydrophobic) of each ACM particle in a 2D pictures taken by the camera. The 
ICPC you put on your workbench will appear as a line in the 2D pictures. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3259b.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3259a.jpg
 ALT="\epsfbox{p3259b.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Fig.2

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
There will be no more than 10 test cases. Each case starts with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN>,
which is the number of ACM particles in the test case. <SPAN CLASS="MATH"><I>N</I></SPAN> lines then follow. Each line contains
three integers <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, <SPAN CLASS="MATH"><I>r</I></SPAN>, where <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> is the position of the ACM particle in the 2D picture and <SPAN CLASS="MATH"><I>r</I></SPAN> can
be 0 or 1, standing for the hydrophilic or hydrophobic type ACM respectively. The absolute value 
of <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN> will be no larger than 10000. You may assume that <SPAN CLASS="MATH"><I>N</I></SPAN> is no more than 1000. <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> signifies
the end of the input and need not be processed. Fig.2 shows the positions of ACM particles and the 
best ICPC position for the last test case in the sample input. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output a line containing a single integer, which is the maximum number of 
dissolved ACM particles.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 
0 0 0 
0 1 0 
2 2 1 
4 
0 0 0 
0 4 0 
4 0 0 
1 2 1 
7 
-1 0 0 
1 2 1 
2 3 0 
2 1 1 
0 3 1 
1 4 0 
-1 2 0 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 
<PRE>
3 
3 
6
</PRE> 

<P>

______________________________________________________
3260||||||false||||||

<P>
Recently, Robert found a new game on the Internet that is the newest version of `Link and Pop'.
The game rule is very simple. Initially, a board of size <!-- MATH
 $n \times m$
 -->
<SPAN CLASS="MATH"><I>n</I>&#215;<I>m</I></SPAN> is filled with <!-- MATH
 $n \times m$
 -->
<SPAN CLASS="MATH"><I>n</I>&#215;<I>m</I></SPAN> blocks. Each of
these blocks has a symbol on it. All you need to do is to find a pair of blocks with the same 
symbol on them, which can be linked with a line that consists of at most three straight horizontal 
or vertical line segments. Note that the line segments cannot cross the other blocks on the board 
(see fig.1 for some examples of possible links, note that some blocks have been already removed 
from the board).   

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3260a.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3260a.jpg
 ALT="\epsfbox{p3260a.eps}">
</DIV>

<P>
If you successfully find such a pair of blocks, the two blocks can be popped (that is, removed) 
together. After this, some of the blocks may be moved to new positions on the board following the 
rules described later. Then, you can start to find the next pair. The game continues until there are 
no block left on the board or you cannot find such a pair. 

<P>
The blocks are moved according to the following rules. First, each block have a static moving 
attribute, which is one of `up', `down', `left', `right' and `stand still'. After a pair of block is removed,
the blocks are checked one by one to see whether they can be moved towards the direction of its 
moving attribute. The blocks in the top row are checked first. Inside the same row, the blocks on 
the left are checked first. If the adjacent position at the direction of the block's moving attribute is 
not occupied, the block will be moved to that position immediately. No block can be moved 
beyond the boundary of the game board. Of course, a block with attribute `stand still' will always
stay at its original position. After all the blocks are checked, which is called a turn of checking,
another turn of checking is started. This continues until no more blocks can be moved to a new
position following the moving rules. Note that inside each turn of checking, each of the blocks is
checked and possibly moved only once. Blocks must not be checked and moved on its new
position in one turn of checking.

<P>

<P>
<BR>
Robert felt that the game was very interesting. However, after some time of playing, he found that
when the size of the board is rather large, finding a pair of block becomes a very tough work.
Further more, he often gets a `Game Over' because of no more blocks can be popped. Robert felt
that it is not his fault that not all the blocks are being popped. It is only that there is a great chance
that the game cannot be finished if the blocks are placed randomly at first. However, it will be
very time consuming to prove this by playing the game many times. So, Robert asks you to write a
program for him that will simulate his behavior in the game and see if the game can be finished.

<P>
In order to make such a program possible, Robert summarizes his rules of selecting block pairs as
follows. First, the pair of blocks that can be linked with one straight line segment must be found
and popped first, because such kind of pairs are easy to find. Next, if such a pair does not exist, the
pairs that can be linked by two straight line segments must be found and popped. Finally, if both
of the two kinds of pairs do not exist, the pairs that can be linked by three straight line segments
must be found and popped. If more than one pair that can be linked with the same number of
straight line segments exists, the pair that contains a block, which is positioned at the most top row
(or most left if two more blocks are positioned in the same row), will be selected first. If this rule
still cannot break the tie (more than one pair may share one block that is positioned at the most top, 
left position), the other block in these pairs are compared according to the same rules. Fig.2 shows 
a trace of a mini game of 'Link and Pop' that follows the above rules. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3260b.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3260a.jpg
 ALT="\epsfbox{p3260b.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains no more than 30 test cases. The first line of each test case contains 2 integers <SPAN CLASS="MATH"><I>n</I></SPAN>,
<SPAN CLASS="MATH"><I>m</I></SPAN> (<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3260a.jpg
 ALT="$ \le$"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3260a.jpg
 ALT="$ \le$">30</SPAN>), which is the size of the board. After this line, there will be <SPAN CLASS="MATH"><I>n</I></SPAN> more lines. Each
of these lines contains <SPAN CLASS="MATH"><I>m</I></SPAN> strings, separated by single spaces. Each of these strings represents one
block in the initial configuration. Each string always consists of two capital letters. The first letter 
is the symbol of the block. The second letter is always one of the letters `<TT>U</TT>',`<TT>D</TT>',`<TT>L</TT>',`<TT>R</TT>' and `<TT>S</TT>', which shows the block's moving attribute: up, down, left, right, and stand still respectively. There
are no blank lines between test cases. The input ends with a line of two 0's: `<TT>0 0</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, first output the test case number. After this line, you must output the final 
configuration of the board with <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each containing <SPAN CLASS="MATH"><I>m</I></SPAN> characters. If there is a block on the
position, output the symbol of the block. If there is no block on the position, output a period 
instead. Do not output blank lines between test cases. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 3 
AD AU CL 
HS GU HL 
CS FD GS 
1 2 
BS BL 
0 0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1 
... 
...
.F. 
Case 2 
..
</PRE>  

<P>

______________________________________________________
3261||||||false||||||
<P>Given two integers <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>, we write the numbers between <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>, inclusive, in a list. Your task is to calculate the number of occurrences of each digit. For example, if <SPAN CLASS="MATH"><I>a</I> = 1024</SPAN> and <SPAN CLASS="MATH"><I>b</I> = 1032</SPAN>, the list will be<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">1024&nbsp;1025&nbsp;1026&nbsp;1027&nbsp;1028&nbsp;1029&nbsp;1030&nbsp;1031&nbsp;1032</DIV><P></P>there are ten 0's in the list, ten 1's, seven 2's, three 3's, and etc.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of up to 500 lines. Each line contains two numbers <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> where <SPAN CLASS="MATH">0 &lt; <I>a</I></SPAN>, <!-- MATH
 $b <
100000000$
 --><SPAN CLASS="MATH"><I>b</I> &lt; 100000000</SPAN>. The input is terminated by a line `<TT>0 0</TT>', which is not considered as part of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each pair of input, output a line containing ten numbers separated by single spaces. The first number is the number of occurrences of the digit 0, the second is the number of occurrences of the digit 1, etc.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 10
44 497 
346 542 
1199 1748 
1496 1403 
1004 503 
1714 190 
1317 854 
1976 494 
1001 1960 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 1 1 1 1 1 1 1 1 
85 185 185 185 190 96 96 96 95 93 
40 40 40 93 136 82 40 40 40 40 
115 666 215 215 214 205 205 154 105 106 
16 113 19 20 114 20 20 19 19 16 
107 105 100 101 101 197 200 200 200 200 
413 1133 503 503 503 502 502 417 402 412 
196 512 186 104 87 93 97 97 142 196 
398 1375 398 398 405 499 499 495 488 471 
294 1256 296 296 296 296 287 286 286 247
</PRE><P>
______________________________________________________
3262||||||false||||||
<P>Given a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>, your task is to find a positive integer <SPAN CLASS="MATH"><I>m</I></SPAN>, which is a multiple of <SPAN CLASS="MATH"><I>n</I></SPAN>, and that <SPAN CLASS="MATH"><I>m</I></SPAN> contains the least number of different digits when represented in decimal. For example, number 1334 contains three different digits 1, 3 and 4.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of no more than 50 test cases. Each test case has only one line, which contains a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n < 65536$
 --> <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3262img1.png ALT="$ \le$"><I>n</I> &lt; 65536</SPAN>). There are no blank lines between cases. A line with a single `<TT>0</TT>' terminates the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you should output one line, which contains <SPAN CLASS="MATH"><I>m</I></SPAN>. If there are several possible results, you should output the smallest one. Do not output blank lines between cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 
15 
16 
101 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 
555 
16 
1111
</PRE><P>
______________________________________________________
3263||||||false||||||
<P>Little Joey invented a scrabble machine that he called Euler, after the great mathematician. In his primary school Joey heard about the nice story of how Euler started the study about graphs. The problem in that story was - let me remind you - to draw a graph on a paper without lifting your pen, and finally return to the original position. Euler proved that you could do this if and only if the (planar) graph you created has the following two properties: (1) The graph is connected; and (2) Every vertex in the graph has even degree.<P><P><BR>Joey's Euler machine works exactly like this. The device consists of a pencil touching the paper, and a control center issuing a sequence of instructions. The paper can be viewed as the infinite two-dimensional plane; that means you do not need to worry about if the pencil will ever go off the boundary.<P>In the beginning, the Euler machine will issue an instruction of the form <SPAN CLASS="MATH">(<I>X</I>0, <I>Y</I>0)</SPAN> which moves the pencil to some starting position <SPAN CLASS="MATH">(<I>X</I>0, <I>Y</I>0)</SPAN>. Each subsequent instruction is also of the form <SPAN CLASS="MATH">(<I>X'</I>, <I>Y'</I>)</SPAN>, which means to move the pencil from the previous position to the new position <SPAN CLASS="MATH">(<I>X'</I>, <I>Y'</I>)</SPAN>, thus draw a line segment on the paper. You can be sure that the new position is different from the previous position for each instruction. At last, the Euler machine will always issue an instruction that move the pencil back to the starting position <SPAN CLASS="MATH">(<I>X</I>0, <I>Y</I>0)</SPAN>. In addition, the Euler machine will definitely not draw any lines that overlay other lines already drawn. However, the lines may intersect.<P>After all the instructions are issued, there will be a nice picture on Joey's paper. You see, since the pencil is never lifted from the paper, the picture can be viewed as an Euler circuit.<P>Your job is to count how many pieces (connected areas) are created on the paper by those lines drawn by Euler.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are no more than 25 test cases. Ease case starts with a line containing an integer <SPAN CLASS="MATH"><I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3263img1.png ALT="$ \ge$">4</SPAN>, which is the number of instructions in the test case. The following <SPAN CLASS="MATH"><I>N</I></SPAN> pairs of integers give the instructions and appear on a single line separated by single spaces. The first pair is the first instruction that gives the coordinates of the starting position. You may assume there are no more than 300 instructions in each test case, and all the integer coordinates are in the range (-300, 300). The input is terminated when <SPAN CLASS="MATH"><I>N</I></SPAN> is 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case there will be one output line in the format<P><P><BR><TT>Case <SPAN CLASS="MATH"><I>x</I></SPAN>: There are <SPAN CLASS="MATH"><I>w</I></SPAN> pieces.</TT>,<P><P><BR>where <SPAN CLASS="MATH"><I>x</I></SPAN> is the serial number starting from 1.<P><P><BR><B>Note:</B> The figures below illustrate the two sample input cases.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3263img1.png ALT="\epsfbox{p3263.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
0 0 0 1 1 1 1 0 0 0 
7 
1 1 1 5 2 1 2 5 5 1 3 5 1 1 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: There are 2 pieces. 
Case 2: There are 5 pieces.
</PRE><P>
______________________________________________________
3264||||||false||||||

<P>
Robert decided to decorate his new room with a cool pattern on the floor, composed with colorful 
floor bricks. After several days' work, he finally felt satisfied with the pattern he created with the 
odd shaped bricks. Soon, he found a problem. As the border of the pattern is not a perfect 
rectangle, the floor is not filled with bricks completely. However, since the shapes of the bricks 
are quite odd, it is not an easy work to fill the floor with these bricks completely. (Although a
brick with a unit size is provided, this kind of brick is quite expensive usually. Fig.1 shows an 
example of a set of bricks) As Robert was very proud of his brick pattern, he refuses to modify 
even one brick in his pattern in order to satisfy the need of filling the floor completely. Instead, he 
asked you to find solutions for him to fill the rest part of the floor completely with the given bricks 
so that the Gils needed to buy these bricks are minimized. Of course, the bricks can not overlap 
each other to fill the floor. Please note that the bricks can be rotated, but cannot be flipped over. In 
addition, you may assume that all kinds of bricks can be contained within a <!-- MATH
 $3 \times 3$
 -->
<SPAN CLASS="MATH">3&#215;3</SPAN> square box.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3264a.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3264a.jpg
 ALT="\epsfbox{p3264a.eps}">
</DIV>

<P>
As the pattern of bricks covers most areas of the floor, the uncovered part of the floor is actually
located at the bottom border of the rectangular shaped floor. Therefore, an uncovered part like the
one in Fig.2 can be described with a series of integers, which represents the number of square
blocks missed in each column, starting from the left. Thus, the shape in Fig.2 can be described
with 11 integers: 2 2 1 2 3 5 2 3 3 4 1. In addition, you may assume that these integers are no
larger than 5. Fig.3 shows a solution to fill the floor with the brick set in Fig.1 that costs minimal
Gils.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3264b.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3264a.jpg
 ALT="\epsfbox{p3264b.eps}">
</DIV>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3264c.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3264a.jpg
 ALT="\epsfbox{p3264c.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of at most 20 test cases. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
(<!-- MATH
 $1 \le n \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3264a.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3264a.jpg
 ALT="$ \le$">1000</SPAN>), which is the width of the floor. The second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> integers, separated by
single spaces. These integers describe the shape of the uncovered floor as mentioned above. The
third line contains an integer <SPAN CLASS="MATH"><I>m</I></SPAN> (<!-- MATH
 $1 \le m \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3264a.jpg
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3264a.jpg
 ALT="$ \le$">100</SPAN>), which is the number of bricks available. After this
is the detailed description of the <SPAN CLASS="MATH"><I>m</I></SPAN> bricks.

<P>
Each brick description consists of 4 lines. The first line is a positive integer, which is the price of
that brick in Gils. After this line, there are three lines, each consisting of three characters, which
describe the shape of the brick. A dot character represents a space in the shape and a sharp
character # represents a square block in the shape. You can be sure that the blocks are always
connected to form the brick.

<P>
There is a line containing a zero after the last test case, which signifies the end of the input and
should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output a line `<TT>Need at least <SPAN CLASS="MATH"><I>g</I></SPAN> Gil(s).</TT>', where <SPAN CLASS="MATH"><I>g</I></SPAN> is the minimal Gils
needed to fill the floor with the given bricks. If the floor cannot be filled with the given bricks,
output `<TT>Impossible.</TT>' instead. Do not output blank lines between cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
11
1 4 3 3 2 5 3 2 1 2 2
4
2
#..
#..
##.
3
.#.
.##
.#.
5
...
#..
##.
9
...
.#.
...
1
1
1
1
..#
...
...
1
1
1
1
.##
...
...
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Need at least 28 Gil(s).
Need at least 1 Gil(s).
Impossible.
</PRE>

<P>

______________________________________________________
3265||||||false||||||
<P>The rotation game uses a # shaped board, which can hold 24 pieces of square blocks (see Fig.1). The blocks are marked with symbols 1, 2 and 3, with exactly 8 pieces of each kind.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3265.jpg ALT="\epsfbox{p3265.eps}"></DIV><P>Initially, the blocks are placed on the board randomly. Your task is to move the blocks so that the eight blocks placed in the center square have the same symbol marked. There is only one type of valid move, which is to rotate one of the four lines, each consisting of seven blocks. That is, six blocks in the line are moved towards the head by one block and the head block is moved to the end of the line. The eight possible moves are marked with capital letters <B>A</B> to <B>H</B>. Figure 1 illustrates two consecutive moves, move <B>A</B> and move <B>C</B> from some initial configuration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of no more than 30 test cases. Each test case has only one line that contains 24 numbers, which are the symbols of the blocks in the initial configuration. The rows of blocks are listed from top to bottom. For each row the blocks are listed from left to right. The numbers are separated by spaces. For example, the first test case in the sample input corresponds to the initial configuration in Fig.1. There are no blank lines between cases. There is a line containing a single `<TT>0</TT>' after the last test case that ends the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you must output two lines. The first line contains all the moves needed to reach the final configuration. Each move is a letter, ranging from `<TT>A</TT>' to `<TT>H</TT>', and there should not be any spaces between the letters in the line. If no moves are needed, output `<TT>No moves needed</TT>' instead. In the second line, you must output the symbol of the blocks in the center square after these moves. If there are several possible solutions, you must output the one that uses the least number of moves. If there is still more than one possible solution, you must output the solution that is smallest in dictionary order for the letters of the moves. There is no need to output blank lines between cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1 1 1 3 2 3 2 3 1 3 2 2 3 1 2 2 2 3 1 2 1 3 3
1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
AC
2
DDHH
2
</PRE><P>
______________________________________________________
3266||||||false||||||
<P>Here is a famous story in Chinese history.<P><BLOCKQUOTE>That was about 2300 years ago. General Tian Ji was a high official in the country Qi. He likes to play horse racing with the king and others.</BLOCKQUOTE><P><BLOCKQUOTE>Both of Tian and the king have three horses in different classes, namely, regular, plus, and super. The rule is to have three rounds in a match; each of the horses must be used in one round. The winner of a single round takes two hundred silver dollars from the loser.</BLOCKQUOTE><P><BLOCKQUOTE>Being the most powerful man in the country, the king has so nice horses that in each class his horse is better than Tian's. As a result, each time the king takes six hundred silver dollars from Tian.</BLOCKQUOTE><P><BLOCKQUOTE>Tian Ji was not happy about that, until he met Sun Bin, one of the most famous generals in Chinese history. Using a little trick due to Sun, Tian Ji brought home two hundred silver dollars and such a grace in the next match.</BLOCKQUOTE><P><BLOCKQUOTE>It was a rather simple trick. Using his regular class horse race against the super class from the king, they will certainly lose that round. But then his plus beat the king's regular, and his super beat the king's plus. What a simple trick. And how do you think of Tian Ji, the high ranked official in China?</BLOCKQUOTE><P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3266.jpg ALT="\epsfbox{p3266.eps}"></DIV><P>Were Tian Ji lives in nowadays, he will certainly laugh at himself. Even more, were he sitting in the ACM contest right now, he may discover that the horse racing problem can be simply viewed as finding the maximum matching in a bipartite graph. Draw Tian's horses on one side, and the king's horses on the other. Whenever one of Tian's horses can beat one from the king, we draw an edge between them, meaning we wish to establish this pair. Then, the problem of winning as many rounds as possible is just to find the maximum matching in this graph. If there are ties, the problem becomes more complicated, he needs to assign weights 0, 1, or -1 to all the possible edges, and find a maximum weighted perfect matching...<P>However, the horse racing problem is a very special case of bipartite matching. The graph is decided by the speed of the horses -- a vertex of higher speed always beat a vertex of lower speed. In this case, the weighted bipartite matching algorithm is a too advanced tool to deal with the problem.<P>In this problem, you are asked to write a program to solve this special case of matching problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of up to 50 test cases. Each case starts with a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3266.jpg ALT="$ \le$">1000</SPAN>) on the first line, which is the number of horses on each side. The next <SPAN CLASS="MATH"><I>n</I></SPAN> integers on the second line are the speeds of Tian's horses. Then the next <SPAN CLASS="MATH"><I>n</I></SPAN> integers on the third line are the speeds of the king's horses. The input ends with a line that has a single `<TT>0</TT>' after the last test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, output a line containing a single number, which is the maximum money Tian Ji will get, in silver dollars.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
92 83 71  
95 87 74 
2 
20 20 
20 20 
2 
20 19 
22 18 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
200 
0 
0
</PRE><P>
______________________________________________________
3267||||||false||||||
<P>Given a map of islands and bridges that connect these islands, a Hamilton path, as we all know, is a path along the bridges such that it visits each island exactly once. On our map, there is also a positive integer value associated with each island. We call a Hamilton path the best triangular Hamilton path if it maximizes the value described below.<P>Suppose there are <SPAN CLASS="MATH"><I>n</I></SPAN> islands. The value of a Hamilton path <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB><I>C</I><SUB>2</SUB>...<I>C</I><SUB>n</SUB></SPAN> is calculated as the sum of three parts. Let <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN> be the value for the island <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN>. As the first part, we sum over all the <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN> values for each island in the path. For the second part, for each edge <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB><I>C</I><SUB>i + 1</SUB></SPAN> in the path, we add the product <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB>*<I>V</I><SUB>i + 1</SUB></SPAN>. And for the third part, whenever three consecutive islands <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB><I>C</I><SUB>i + 1</SUB><I>C</I><SUB>i + 2</SUB></SPAN> in the path forms a triangle in the map, i.e. there is a bridge between <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>C</I><SUB>i + 2</SUB></SPAN>, we add the product <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB>*<I>V</I><SUB>i + 1</SUB>*<I>V</I><SUB>i + 2</SUB></SPAN>.<P>Most likely but not necessarily, the best triangular Hamilton path you are going to find contains many triangles. It is quite possible that there might be more than one best triangular Hamilton paths; your second task is to find the number of such paths.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file starts with a number <SPAN CLASS="MATH"><I>q</I></SPAN> (<SPAN CLASS="MATH"><I>q</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3267img1.png ALT="$ \le$">20</SPAN>) on the first line, which is the number of test cases. Each test case starts with a line with two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>, which are the number of islands and the number of bridges in the map, respectively. The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> positive integers, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th number being the <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN> value of island <SPAN CLASS="MATH"><I>i</I></SPAN>. Each value is no more than 100. The following <SPAN CLASS="MATH"><I>m</I></SPAN> lines are in the form <SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I></SPAN>, which indicates there is a (two way) bridge between island <SPAN CLASS="MATH"><I>x</I></SPAN> and island <SPAN CLASS="MATH"><I>y</I></SPAN>. Islands are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. You may assume there will be no more than 13 islands.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line with two numbers, separated by a space. The first number is the maximum value of a best triangular Hamilton path; the second number should be the number of different best triangular Hamilton paths. If the test case does not contain a Hamilton path, the output must be `<TT>0 0</TT>'.<P><P><BR><B>Note:</B> A path may be written down in the reversed order. We still think it is the same path.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3 3
2 2 2
1 2
2 3
3 1
4 6
1 2 3 4
1 2
1 3
1 4
2 3
2 4
3 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
22 3
69 1
</PRE><P>
______________________________________________________
3268||||||false||||||
<P>Jamie is a very popular girl and has quite a lot of friends, so she always keeps a very long contact list in her cell phone. The contact list has become so long that it often takes a long time for her to browse through the whole list to find a friend's number. As Jamie's best friend and a programming genius, you suggest that she group the contact list and minimize the size of the largest group, so that it will be easier for her to search for a friend's number among the groups. Jamie takes your advice and gives you her entire contact list containing her friends' names, the number of groups she wishes to have and what groups every friend could belong to. Your task is to write a program that takes the list and organizes it into groups such that each friend appears in only one of those groups and the size of the largest group is minimized.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be at most 20 test cases. Ease case starts with a line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN>. where <SPAN CLASS="MATH"><I>N</I></SPAN> is the length of the contact list and <SPAN CLASS="MATH"><I>M</I></SPAN> is the number of groups. <SPAN CLASS="MATH"><I>N</I></SPAN> lines then follow. Each line contains a friend's name and the groups the friend could belong to. You can assume <SPAN CLASS="MATH"><I>N</I></SPAN> is no more than 1000 and <SPAN CLASS="MATH"><I>M</I></SPAN> is no more than 500. The names will contain alphabet letters only and will be no longer than 15 characters. No two friends have the same name. The group label is an integer between 0 and <SPAN CLASS="MATH"><I>M</I> - 1</SPAN>. After the last test case, there is a single line `<TT>0 0</TT>' that terminates the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line containing a single integer, the size of the largest contact group.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2
John 0 1 
Rose 1 
Mary 1 
5 4 
ACM 1 2 3 
ICPC 0 1  
Asian 0 2 3 
Regional 1 2 
ShangHai 0 2 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
2
</PRE><P>
______________________________________________________
3269||||||false||||||
<P>``Eyeball benders" are a popular kind of puzzle in which the reader must identify a common object based on a close- up view of a part of that object. For instance, an image that looks like a regular array of colored cones might be a view of an open box of new crayons. Figure 1 shows an example where the puzzle is on the left and the solution is on the right.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3269a.jpg ALT="\epsfbox{p3269a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1. A sample eyeball-bender puzzle and solution image (a floppy disk)</DIV><P>You must verify solutions to a simplified version of the ``eyeball bender" puzzle. You will be given a number of pairs of images, each one a collection of line segments. All line segments will be either horizontal or vertical, and they include their endpoints. Figure 2 shows an example.<P><P><BR>You must determine whether the images form a valid pair in which the first image is a magnified view of some portion of the second image. Lines are assumed to have zero thickness in both images. At least one endpoint in the puzzle image of a valid pair must be an endpoint of a line segment in the solution image.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3269a.jpg ALT="\epsfbox{p3269b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2. The left image is the portion of the right image inside the dotted rectangle, magnified 3 times.</DIV><P>Coordinates describe <SPAN CLASS="textit">relative</SPAN> positions and scale within a single image. The coordinates in one image do not necessarily use the same origin or scale as those in the other image. The magnification of the puzzle image relative to the solution image is required to be greater than or equal to 1. For Figure 2, your program should determine that this is a valid puzzle/solution image pair.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple cases. The input for each case begins with two positive integers <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3269a.jpg ALT="$ \le$"><I>M</I>, <I>N</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3269a.jpg ALT="$ \le$">50)</SPAN>. <SPAN CLASS="MATH"><I>M</I></SPAN> is the number of line segments in the puzzle image. <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of line segments in the proposed solution image. The following lines contain <SPAN CLASS="MATH"><I>M</I> + <I>N</I></SPAN> pairs of points. The first <SPAN CLASS="MATH"><I>M</I></SPAN> pairs of points are the endpoints of the line segments in the puzzle image; the remaining <SPAN CLASS="MATH"><I>N</I></SPAN> pairs are the endpoints of the line segments in the proposed solution image. The <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates for each pair satisfy <SPAN CLASS="MATH">-100<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3269a.jpg ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3269a.jpg ALT="$ \le$">100</SPAN> and are given to at most three decimal places of precision. All input values are separated by white space (blanks or new line characters).<P><P><BR>No pair of distinct points in a given image will be closer than .005 to another (relative to the scale of the image) and all segments will have length at least .005. No two horizontal segments overlap and no two vertical segments overlap. However, horizontal segments may intersect vertical segments either internally or at segment endpoints.<P><P><BR>The input data for the last case is followed by a line consisting of the integers `<TT>0 0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number (1, 2, ...) followed by the words `<TT>valid puzzle</TT>' if the proposed solution image matches a closed rectangular sub-region of the puzzle image (including at least one endpoint), magnified by a factor of one or greater, and possibly translated by some amount. Line segments that are not included in the puzzle image will be at least 0.005 distant from the rectangle.<P><P><BR>If the match condition fails to hold, print `<TT>impossible</TT>'. Follow the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 12                                                                        
9 8 7.5 8 1.5 8 1.5 3.5                                                     
0 5 9 5                                                                     
4 2 8 2 5 7 2 7 10 6 8 6 8 7 8 4                                               
1 9 8 9 
9 3 7 3 4 10 4 5 
4 2 4 4 5 8 5 7 3 6 6 6 0 3 3 3 5 1 5 3 
4 12 
-50 -5 50 -5 0 10 0 -10 50 5 -50 5 -50 0 50 0 
4 2 8 2 5 7 2 7 10 6 8 6 8 7 8 4 
1 9 8 9 
9 3 7 3 4 10 4 5 
4 2 4 4 5 8 5 7 3 6 6 6 0 3 3 3 5 1 5 3 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: valid puzzle
   
Case 2: impossible
</PRE><P>
______________________________________________________
3270||||||false||||||
<P>Mobile phones have changed our lifestyle dramatically in the last decade. Mobile phones have a variety of protocols to connect with one another. One of the most popular networks for mobile phones is the GSM (Global System for Mobile Communication) network.<P><P><BR>In a typical GSM network, a mobile phone connects with the nearest BTS (Base Transceiver Station). A BSC (Base Station Center) controls several BTSs. Several BSCs are controlled by one MSC (Mobile Services Switching Center), and this MSC maintains a connection with several other MSCs, a PSTN (Public Switched Telecom Network) and an ISDN (Integrated Services Digital Network).<P><P><BR>This problem uses a simplified model of the conventional GSM network. Our simplified network is composed of up to fifty BTS towers. When in use, a mobile phone always connects to its nearest BTS tower. The area covered by a single BTS tower is called a cell. When an active mobile phone is in motion, as it crosses cell boundaries it must seamlessly switch from one BTS to another. Given the description of a map consisting of cities, roads and BTS towers, you must determine the minimum number of BTS switches required to go from one city to another.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="\epsfbox{p3270.eps}"></DIV><P><DIV ALIGN="CENTER"><B>Figure:</B> Cities here are represented by squares and BTS towers by trapezoids. Solid lines are roads. The dotted lines show 9 different cells. The minimum number of switches required to go from city 1 to city 6 is (2+1+0)=3. Note that city 7 is isolated and cannot be reached.</DIV><P>Each tower and each city location is to be considered as a single point in a two-dimensional Cartesian coordinate system. If there is a road between two cities, assume that the road is a straight line segment connecting these two cities. For example, in the figure, traveling on the road from city 1 to city 2 will cross two cell boundaries and thus requires two switches. Traveling from city 2 to city 5 crosses one cell boundary and traveling from city 5 to city 6 requires no switch. Traveling this route from city 1 to city 6 requires three total switches. Note than any other path from city 1 to city 6 requires more than three switches. If there is more than one possible way to get from one city to another, your program must find the optimal route.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. The first line of each test case contains four integers: <SPAN CLASS="MATH"><I>B</I>(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$">50)</SPAN>, the number of BTS towers; <SPAN CLASS="MATH"><I>C</I>(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$">50)</SPAN>, the number of cities; <SPAN CLASS="MATH"><I>R</I>(0<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$">250)</SPAN>, the number of roads; and <SPAN CLASS="MATH"><I>Q</I>(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$"><I>Q</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$">10)</SPAN>, the number of queries. Each of the next <SPAN CLASS="MATH"><I>B</I></SPAN> lines contains two floating-point numbers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>, the Cartesian coordinates of a BTS tower. Each of the next <SPAN CLASS="MATH"><I>C</I></SPAN> lines contains two floating-point numbers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> that indicate the Cartesian coordinates of the <SPAN CLASS="MATH"><I>i</I></SPAN>th city <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$"><I>C</I>)</SPAN>. Each of the next <SPAN CLASS="MATH"><I>R</I></SPAN> lines contains two integers <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$"><I>m</I>, <I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$"><I>C</I>)</SPAN>, which indicate that there is a road between the <SPAN CLASS="MATH"><I>m</I></SPAN>-th and the <SPAN CLASS="MATH"><I>n</I></SPAN>-th city. Each of the next <SPAN CLASS="MATH"><I>Q</I></SPAN> lines contains two integers <SPAN CLASS="MATH"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>d</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$"><I>s</I>, <I>d</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3270.jpg ALT="$ \le$"><I>C</I>)</SPAN>, the source and destination cities.<P><P><BR>No coordinate will have an absolute value greater than 1000. No two towers will be at the same location. No two cities will be at the same location, and no city will lie on a cell boundary. No road will be coincident with a cell boundary, nor contain a point lying on the boundary of three or more cells.<P><P><BR>The input will end with a line containing four zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input set, you should produce <SPAN CLASS="MATH"><I>Q</I> + 1</SPAN> lines of output, as shown below. The first line should contain the number of the test case. <SPAN CLASS="MATH"><I>Q</I></SPAN> lines should follow, one for each query, each containing an integer indicating the minimum number of switches required to go from city <SPAN CLASS="MATH"><I>s</I></SPAN> to city <SPAN CLASS="MATH"><I>d</I></SPAN>. If it is not possible to go from city <SPAN CLASS="MATH"><I>s</I></SPAN> to city <SPAN CLASS="MATH"><I>d</I></SPAN>, print the line `<TT>Impossible</TT>' instead.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 7 6 2
5 5                                                               
15 5                                                              
25 5
5 15 
15 15 
25 15 
5 25 
15 25 
25 25 
8 2 
22 3 
8 12 
18 18 
22 12 
28 16 
28 8 
1 2 
1 3 
2 5 
3 4 
4 5 
5 6 
1 6 
1 7 
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Samle Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
3 
Impossible
</PRE><P>
______________________________________________________
3271||||||false||||||
<P>A group of judges must get together to judge a contest held in a particular city, and they need to figure out the cheapest way of renting cars in order to get everyone to the contest. They observed that it might be cheaper if several judges share a rental car during all or part of the trip, thus reducing the overall cost. Your task is to identify the routes the judges should take in order to minimize the total cost of their car rentals.<P><P><BR>We will make the following assumptions:<P><UL><LI>The cost of a rental car is proportional to the distance it is driven. There are no charges for more than one occupant in the car, fuel, insurance, or leaving the car in a city other than that in which it was rented. </LI><LI>All rental cars are billed at the same rate per mile. </LI><LI>A rental car can accommodate any number of passengers. </LI><LI>At most one road directly connects any pair of cities. Each road is two-way and has an integer length greater than zero. </LI><LI>There is at least one route from every judge's starting city to the city in which the contest is held. </LI><LI>All judges whose routes to the contest take them from or through the same city travel from that city to the contest together. (A judge might arrive at a city in one car and leave that city in a different car.) </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each test case includes a route map, the destination city where the contest is being held, and the cities where the judges are initially located.<P><P><BR>Each case appears in the input as a list of integers separated by blanks and/or ends of lines. The order and interpretation of the integers in each case is as follows:<P><UL><LI><SPAN CLASS="MATH"><I>NC</I></SPAN>-the number of cities that appear in the route map; this will be no larger than 20. </LI><LI><SPAN CLASS="MATH"><I>DC</I></SPAN>-the number of the destination city, assuming the cities are numbered 1 to <SPAN CLASS="MATH"><I>NC</I></SPAN>. </LI><LI><SPAN CLASS="MATH"><I>NR</I></SPAN>-the number of roads in the route map. Each road connects a distinct pair of cities. </LI><LI>For each of the <SPAN CLASS="MATH"><I>NR</I></SPAN> roads, three integers <SPAN CLASS="MATH"><I>C</I>1</SPAN>, <SPAN CLASS="MATH"><I>C</I>2</SPAN>, and <SPAN CLASS="MATH"><I>DIST</I></SPAN>. <SPAN CLASS="MATH"><I>C</I>1</SPAN> and <SPAN CLASS="MATH"><I>C</I>2</SPAN> identify two cities connected by a road, and <SPAN CLASS="MATH"><I>DIST</I></SPAN> gives the distance between these cities along that road. </LI><LI><SPAN CLASS="MATH"><I>NJ</I></SPAN>-the number of judges. This number will be no larger than 10. </LI><LI><SPAN CLASS="MATH"><I>NJ</I></SPAN>-integers, one for each judge each of these is a city number identifying the initial location of that judge. </LI></UL><P><P><BR>The data for the last case will be followed by a line consisting of the integer `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, display the case number <SPAN CLASS="MATH">(1, 2,...)</SPAN> and the shortest total distance traveled by the rental cars conveying the judges to the contest. Then display the list of routes used by the judges, each route on a separate line, in the same order as the ordering of starting cities given in the input. Each route consists of the cities that the corresponding judge must visit, listed in the order in which they are visited, starting with the judge's starting city and ending with the contest city. Any other cities along the route are listed in the order in which they are visited during the judge's travels. Separate the numbers in the route with `<TT>-</TT>', and precede each route by three spaces.<P><P><BR>If multiple sets of routes have the same minimum distance, choose a set that requires the fewest number of cities. If several sets of cities of the same cardinality may be used, choose the set that comes lexicographically first when ordered by city number (e.g., {2, 3, 6} rather than {2, 10, 5}). If multiple routes are still available, output any set of routes that meets the requirements.<P><P><BR>Follow the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
3 5                  
1 2 1              
2 3 2              
3 4 3              
4 5 1              
2 4 2              
2
5
1                
                   
4                   
4 3                   
1 3 1               
2 3 2               
3 4 2               
2                   
1
2                 
                    
3
3 3               
1 2 2               
1 3 3               
2 3 1               
2
2
1               
                    
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: distance = 6 
   5-4-2-3 
   1-2-3
 
Case 2: distance = 5 
   1-3-4 
   2-3-4 
 
Case 3: distance = 3 
   2-3 
   1-2-3
</PRE><P>
______________________________________________________
3272||||||false||||||
<P>Preston Digitation is a magician who specializes in card tricks. One thing Preston cannot get just right is perfect in-shuffles. A perfect in-shuffle is one where a deck of 52 cards is divided in half and then the two halves are perfectly interleaved so that the top card of the lower half of the deck becomes the top card of the shuffled deck. If we number the cards 0 (top) to 51 (bottom), the resulting deck after a perfect in-shuffle will look like the following:<P><DIV ALIGN="CENTER">26 0 27 1 28 2 29 3 30 4 31 5 32 6 ... 51 25</DIV><P>Preston finds that he makes at most one mistake per shuffle. For example, cards 2 and 28 might end up interchanged, resulting in a shuffled deck that looks like this:<P><DIV ALIGN="CENTER">26 0 27 1 2 28 29 3 30 4 31 5 32 6 ... 51 25</DIV><P>These exchanges of two adjacent cards are the only mistakes Preston makes. After one shuffle, it is easy for him to see if and where he has made a mistake, but after several shuffles this becomes increasingly difficult. He would like you to write a program that can determine his mistakes (if any).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple problem instances. The first line will be a single integer indicating the number of problem instances. Each problem instance will consist of a single line containing the cards of a deck which has been shuffled between 1 and 10 times. All decks will be of size 52.<P><P><BR><B>Note:</B> The sample input below shows multiple lines for a problem instance. The actual input data for a problem instance is contained on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, output the case number (starting at 1), followed by the number of shuffles that were used for that instance. If there were no mistakes made during the shuffling, output the line <P><P><BR><TT>No error in any shuffle</TT><P><P><BR>Otherwise, output a set of lines of the form<P><P><BR><TT>Error in shuffle <SPAN CLASS="MATH"><I>n</I></SPAN> at location <SPAN CLASS="MATH"><I>m</I></SPAN></TT><P><P><BR>where <SPAN CLASS="MATH"><I>n</I></SPAN> is a shuffle where an error occurred and <SPAN CLASS="MATH"><I>m</I></SPAN> is the location of the error. Shuffles are numbered starting with 1 and the location value should indicate the first location of the two cards that were swapped in that shuffle (where the top of the deck is position 0). In the example described above, the cards in positions 4 and 5 (the cards numbered 2 and 28) are incorrect, so <SPAN CLASS="MATH"><I>m</I></SPAN> would be 4 in this case. List all errors in order of increasing <SPAN CLASS="MATH"><I>n</I></SPAN>. If one or more shuffles have no errors, do not print any line for them. If there are multiple solutions, pick the solution with the fewest number of errors. I there are still several solutions, pick the lexicographically first (regarding the error positions). Print a blank line after each dataset.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
26 0 27 1 2 28 29 3 30 4 31 5 32 6 33 7 34
8 35 9 36 10 37 11 38 12 39 13 40 14 41 15
42 16 43 17 44 18 45 19 46 20 47 21 48 22
49 23 50 24 51 25
26 0 27 1 28 2 29 3 30 4 31 5 32 6 33 7 34
8 35 9 36 10 37 11 38 12 39 13 40 14 41 15
42 16 43 17 44 18 45 19 46 20 47 21 48 22
49 23 50 24 51 25
49 26 43 40 37 34 31 28 25 22 19 16 13 10
7 4 1 51 48 45 42 39 36 33 24 27 30 21 18
15 12 9 6 3 0 50 47 44 41 38 35 32 29 46
23 20 17 2 11 8 5 14
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1
Number of shuffles = 1
Error in shuffle 1 at location 4

Case 2
Number of shuffles = 1
No error in any shuffle

Case 3
Number of shuffles = 9
Error in shuffle 3 at location 3
Error in shuffle 7 at location 11
Error in shuffle 8 at location 38
</PRE><P>
______________________________________________________
3273||||||false||||||

<P>
The Apartment Construction Management (ACM) has several new high-rise apartment buildings in suburban 
Shanghai. With the booming economy, ACM expects a considerable profit on apartment leases. Because their 
apartments receive more direct sunlight, the company claims that these are nicer than others in the area. No other 
buildings obstruct the sunlight path to apartments in ACM's tall buildings. 

<P>

<P>
<BR>
ACM wants to verify this claim by telling potential residents exactly how much sunlight a given apartment receives.
To offer customers a representative sample of sunlight hours, the company wants to advertise the sunlight hours for 
April 6, 2005. On that day in Shanghai, the sun rises at 5:37 am, and sets at 6:17 pm. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3273.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3273.jpg
 ALT="\epsfbox{p3273.eps}">
</DIV>

<P>
As shown above, apartments are in a series of buildings aligned east to west. The last two digits of the apartment
number identify the building, starting with 01 for the east-most building. The other digits encode the apartment floor,
with 1 as the ground floor.

<P>

<P>
<BR>
The sun rises in the east and travels at a constant radial speed across the sky, until setting in the west. The only
shadows are created by buildings (i.e. each building can cast a shadow on one or more other buildings). An
apartment is considered to receive sunlight when either its eastern or western exterior wall is fully covered in
sunlight or when the sun is directly overhead.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains a series of descriptions of apartment complexes. Each description starts with a line containing
a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(1 \le n < 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3273.jpg
 ALT="$ \le$"><I>n</I> &lt; 100)</SPAN> that is the number of apartment buildings in the complex. The next line has two
integers <SPAN CLASS="MATH"><I>w</I></SPAN>, the width (in east-west direction), and <SPAN CLASS="MATH"><I>h</I></SPAN>, each apartment's height in meters. Next is a list of integers
<SPAN CLASS="MATH"><I>m</I>(1)</SPAN>, <SPAN CLASS="MATH"><I>d</I> (1)</SPAN>, <SPAN CLASS="MATH"><I>m</I>(2)</SPAN>, <SPAN CLASS="MATH"><I>d</I> (2)</SPAN>, <SPAN CLASS="MATH">...</SPAN>, <SPAN CLASS="MATH"><I>d</I> (<I>n</I> - 1)</SPAN>, <SPAN CLASS="MATH"><I>m</I>(<I>n</I>)</SPAN>, where <SPAN CLASS="MATH"><I>m</I>(<I>i</I>)</SPAN> is the number of apartments in apartment building
<SPAN CLASS="MATH"><I>i</I></SPAN>, and <SPAN CLASS="MATH"><I>d</I> (<I>i</I>)</SPAN> is the distance, in meters, between the apartment building <SPAN CLASS="MATH"><I>i</I></SPAN> and apartment building <SPAN CLASS="MATH"><I>i</I> + 1</SPAN>.

<P>

<P>
<BR>
The apartment complex description is followed by an integer list of apartments to query for sunlight hours and is
terminated by a zero. The input file is terminated by a line consisting of the integer zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each apartment complex description, output its number in the sequence of descriptions. Then for each query,
output the corresponding sunlight hours, using the 24-hour time format. Truncate all times down to the nearest
second. If the query refers to an apartment that does not exist, indicate that the apartment does not exist. Follow the
format shown in the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
6 4
5 6 3 3 4
302 401 601 303 0
4
5 3
4 5 7 8 5 4 3
101 302 503 0
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Apartment Complex: 1

Apartment 302: 10:04:50 - 13:23:47

Apartment 401: 05:37:00 - 17:13:57

Apartment 601: Does not exist

Apartment 303: 09:21:19 - 18:17:00

Apartment Complex: 2

Apartment 101: 05:37:00 - 12:53:32

Apartment 302: 09:08:55 - 14:52:47

Apartment 503: 09:01:12 - 18:17:00
</PRE>

<P>

______________________________________________________
3274||||||false||||||
<P>Peter Longfoot is a student at the university of Suburbia. Every morning, Peter leaves home to walk to the university. Many other students are driving their cars or riding their bicycles to campus, but Peter prefers to walk, avoiding the chaotic traffic of the city as much as possible.<P><P><BR>Unfortunately, Peter cannot avoid the traffic entirely, since he has to cross streets in order to reach the university. Recently, Peter has wondered how to minimize the number of streets he has to cross. For example, in the following map, streets are drawn as horizontal and vertical lines. To reach the university starting at his home, Peter has to cross at least two streets. Peter cannot cross a street pair at an intersection and Peter cannot walk along a street.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3274.jpg ALT="\epsfbox{p3274.eps}"></DIV><P><DIV ALIGN="CENTER">Figure: Streets are shown as straight lines and the arrows show possible walking paths for Peter. The black arrows show one possible path for Peter where he only has to cross two streets. The gray arrows show a path for Peter where he needs to cross four streets. The path shown by the dotted arrows is not legal because it crosses two streets at an intersection. The figure above corresponds to the first sample input.</DIV><P>Peter knows the locations of all streets in the city, but he has trouble figuring out the best way to the university. So you must write a program to help him.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several descriptions of cities. Each description starts with a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3274.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3274.jpg ALT="$ \le$">500)</SPAN>, the number of streets in the city. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each containing four integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>, indicating that there is a street from coordinates <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> to <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>. All streets are parallel to either the <SPAN CLASS="MATH"><I>x</I></SPAN>- or <SPAN CLASS="MATH"><I>y</I></SPAN>-axis, since the city is built on a square grid. Streets can overlap, in which case they are counted as only one street. The city description is concluded by a line containing four integers <SPAN CLASS="MATH"><I>x</I><SUB>h</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>h</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>u</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>u</SUB></SPAN>, the coordinates <SPAN CLASS="MATH">(<I>x</I><SUB>h</SUB>, <I>y</I><SUB>h</SUB>)</SPAN> of Peter's home, and the coordinates <SPAN CLASS="MATH">(<I>x</I><SUB>u</SUB>, <I>y</I><SUB>u</SUB>)</SPAN> of the university, respectively. Neither Peter's home nor the university will be located on a street. You should consider the streets as straight-line segments, so the streets have no width. Although the endpoints of the streets are integers, Peter doesn't need to walk along the grids. He can walk in any direction he likes. The magnitudes of all integers in the input file are less than <SPAN CLASS="MATH">2&#215;10<SUP>9</SUP></SPAN>.<P><P><BR>The input is terminated by a line consisting of the integer zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each city description, first output its number in the sequence of descriptions. Then output the minimum number of streets that Peter has to cross to go from his home to the university.<P><P><BR>Follow the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8                                                           
6 0 24 0                                                     
24 0 24 4                                                   
24 4 6 4                                                     
6 4 6 0                                                     
12 1 26 1                                                   
26 1 26 6                                                   
26 6 12 6                                                   
12 6 12 1                                                   
0 1 17 3                                                    
1                                                           
10 10 20 10                                                 
1 1 30 30                                                   
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
City 1 
Peter has to cross 2 streets
City 2 
Peter has to cross 0 streets
</PRE><P>
______________________________________________________
3275||||||false||||||

<P>
A polygon is said to ``tile the plane" if a collection of identical copies of the polygon can be assembled to fill an 
unbounded two-dimensional plane without any gaps or overlap. For example, Figure 1 shows an L-shaped polygon, 
and Figure 2 shows how a portion of the plane can be tiled with copies of the polygon. You must write a program to 
determine whether a given polygon can tile the plane. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3275.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3275.jpg
 ALT="\epsfbox{p3275.eps}">
</DIV>

<P>
Each test case consists of a closed polygon in which every vertex is at a right angle and the length of every side is an 
integer multiple of a unit length. You may make as many copies of the polygon as you like, and you may move them 
over the plane, but you may not rotate or reflect any polygon. 

<P>

<P>
<BR>
You might find the following information useful: It is known that there are only two fundamentally different tilings
of the plane, the regular tiling by squares (chessboard tiling) and the tiling by regular hexagons (honeycomb tiling). 
A polygon can therefore tile the plane if and only if it satisfies one of the following two conditions: 

<P>
<DL COMPACT>
<DT>1.</DT>
<DD>There are points A, B, C, D in order on the polygon boundary (the points are not necessarily vertices of the
           polygon) such that the polygon boundaries from A to B and from D to C are congruent and the boundaries 
           from B to C and from A to D are congruent. This leads to a tiling equivalent to the square tiling. 
</DD>
<DT>2.</DT>
<DD>There are points A, B, C, D, E, F in order on the polygon boundary, such that the boundary pairs AB and 
           ED, BC and FE, CD and AF are congruent. This leads to a tiling equivalent to the hexagon tiling. 
</DD>
</DL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input contains the descriptions of several polygons, each description consisting of one input line. Each 
description begins with an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(4 \le n \le 50)$
 -->
<SPAN CLASS="MATH">(4<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3275.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3275.jpg
 ALT="$ \le$">50)</SPAN> that represents the number of sides of the polygon.
This number is followed by descriptions of <SPAN CLASS="MATH"><I>n</I></SPAN> line segments which (taken in order) form a counterclockwise traversal
of the
perimeter of the polygon. Each line segment description consists of a letter followed by an integer. The letter is `<TT>N</TT>',
`<TT>E</TT>', `<TT>S</TT>', or `<TT>W</TT>', representing the direction of the line segment as North, East, South, or West,
respectively. The
integer represents the length of the line segment as a multiple of the unit length. The described polygon will not 
touch or intersect itself. 

<P>

<P>
<BR>
The input is terminated by a line consisting of the integer zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each polygon in the input, print one output line. Print the number of the polygon in the input, followed by the 
word `<TT>Possible</TT>' if it is possible to tile the plane with the test polygon, or `<TT>Impossible</TT>' otherwise.
Follow the format of the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 N 3 W 1 S 4 E 4 N 1 W 3
8 E 5 N 1 W 3 N 3 E 2 N 1 W 4 S 5
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Polygon 1: Possible
Polygon 2: Impossible
</PRE>

<P>

______________________________________________________
3276||||||false||||||
<P>Hua and Shen have invented a simple solitaire board game that they call ``The Great Wall Game." The game is played with <SPAN CLASS="MATH"><I>n</I></SPAN> stones on an <SPAN CLASS="MATH"><I>n</I>&#215;<I>n</I></SPAN> grid. The stones are placed at random in the squares of the grid, at most one stone per square. In a single move, any single stone can move into an unoccupied location one unit horizontally or vertically in the grid. The goal of the puzzle is to create a ``wall," i.e., to line up all <SPAN CLASS="MATH"><I>n</I></SPAN> stones in a straight line either horizontally, vertically, or diagonally using the fewest number of moves. An example for the case <SPAN CLASS="MATH"><I>n</I> = 5</SPAN> is shown in Figure 1(a). In Figure 1(b) it is shown that with six moves we can line all the stones up diagonally. No smaller number of moves suffices to create a line of five stones. (However, there are other solutions using six moves, e.g., we can line up all five stones in the third column using six moves.)<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3276.jpg ALT="\epsfbox{p3276.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1. Starting board (a) and a 6-move solution (b) for <SPAN CLASS="MATH"><I>n</I> = 5</SPAN></DIV><P>There is just one problem - Hua and Shen have no idea what the minimum number of moves is for any given starting board. They would like you to write a program that can take any starting configuration and determine the fewest number of moves needed to create a wall.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple cases. Each case begins with a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3276.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3276.jpg ALT="$ \le$">15</SPAN>. The next line contains the row and column numbers of the first stone, followed by the row and column numbers of the second stone, and so on. Rows and columns are numbered as in the above diagram. The input data for the last case will be followed by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number <SPAN CLASS="MATH">(1, 2,...)</SPAN> followed by the minimum number of moves needed to line up the <SPAN CLASS="MATH"><I>n</I></SPAN> stones into a straight-line wall. Follow the format shown in the sample output. Print a blank line after each case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5                                                                
1 2 2 4 3 4 5 1 5 3                                             
2                                                                
1 1 1 2                                                         
3                                                                
3 1 1 2 2 2                                                       
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Board 1: 6 moves required.
  
Board 2: 0 moves required.
  
Board 3: 1 moves required.
</PRE><P>
______________________________________________________
3277||||||false||||||

<P>
The first Californian Conference on Holism took place back in 1979 in San Francisco. The term ``Californian" was a 
slight exaggeration, as all 23 participants actually lived in San Francisco. Several years later, in 1987, the conference
was truly Californian, with 337 participants from all over the state. Since then, the number of participants has been
growing like the size of memory chips. In 1993 the conference was renamed the American Conference on Holism
(2549 participants), and a second renaming (World Conference on Holism) followed in 1997, when the number of 
participants from all over the world had grown to 9973. The conference obtained its present name (Galactic 
Conference on Holism) in 2003 after some discussion as to whether or not the word Galactic was intended to 
exclude extragalactic life forms. Still the next year, all registered participants were terrestrial-though a few 
participants positively reported to have sensed extraterrestrial presence. 

<P>

<P>
<BR>
The number of workshops grew with the number of participants. For the upcoming conference, the organization has
to face some down to earth but very nasty scheduling problems. For the 2005 conference the board has decided to 
have no more than 1000 workshops concurrently. Nevertheless they had to rent every hall or classroom they could 
lay their hands on. Some of these rooms are available for a restricted time only. 

<P>

<P>
<BR>
In the morning of the first day the opening meeting takes place in a football stadium, and in the afternoon the
participants attend workshops. Before lunch each participant has to indicate which workshop he or she wants to join 
that afternoon. The organizing staff then has a list of all workshops, including the duration and the number of 
participants for each workshop. They also have a list of all available rooms, with the capacity of each room, and the 
time this specific room must be cleared. With this information the staff must schedule each workshop in a room of 
sufficient capacity and sufficient availability in time. As this problem is not necessarily solvable, some overflow 
capacity is supplied by tents in the football stadium. These tents have plenty of capacity, but they are unpleasantly 
warm and noisy. So the organizing staff wants the schedule to minimize the number of tent workshops-that is, 
workshops that are not assigned to a room. If there are multiple solutions that minimize the number of tent 
workshops, the staff wants to minimize the number of participants attending tent workshops.  

<P>

<P>
<BR>
We ask you to supply such a schedule (preferably before lunch is over).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several trials. Each trial consists of two parts: the list of workshops, and the list of rented 
rooms. 

<P>

<P>
<BR>
The list of workshops starts with a line containing the number of workshops <SPAN CLASS="MATH"><I>w</I></SPAN> <!-- MATH
 $(0 < w \le 1000)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>w</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3277img1.png
 ALT="$ \le$">1000)</SPAN>. Each of the next <SPAN CLASS="MATH"><I>w</I></SPAN>
lines contains two numbers, describing a workshop. The first number is the number <SPAN CLASS="MATH"><I>p</I></SPAN> of participants <!-- MATH
 $(0 < p \le 100)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>p</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3277img1.png
 ALT="$ \le$">100)</SPAN>, 
and the second number is the duration <SPAN CLASS="MATH"><I>d</I></SPAN> of the workshop in minutes <!-- MATH
 $(0 < d \le 300)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>d</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3277img1.png
 ALT="$ \le$">300)</SPAN>. For your convenience, other 
details of the workshops are omitted. All workshops start at 14:00.

<P>

<P>
<BR>
The list of rented rooms starts with a line containing the number of rented rooms <SPAN CLASS="MATH"><I>r</I></SPAN> <!-- MATH
 $(0 < r \le 1000)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>r</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3277img1.png
 ALT="$ \le$">1000)</SPAN>. Each of the
following <SPAN CLASS="MATH"><I>r</I></SPAN> lines contains the description of a rented room. A line describing a rented room contains the number <SPAN CLASS="MATH"><I>s</I></SPAN> of
seats in the room <!-- MATH
 $(0 < s \le 100)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>s</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3277img1.png
 ALT="$ \le$">100)</SPAN>, followed by the time when the room must be cleared, in the format <SPAN CLASS="MATH"><I>hh</I> : <I>mm</I></SPAN> where <SPAN CLASS="MATH"><I>hh</I></SPAN>
represents the hour and <SPAN CLASS="MATH"><I>mm</I></SPAN> represents the minute, using a 24-hour clock. All the rooms are available starting at
14:00. All times when rooms must be cleared are between 14:01 and 23:59, inclusive. 

<P>

<P>
<BR>
The input is terminated by a line consisting of the integer zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each trial in the input file the output must contain a line consisting of the trial number, the number of tent 
workshops, and the number of participants attending tent workshops. Follow the format shown in the sample output. Print a blank line after each trial.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1                  
20 60              
1                  
30 16:00 
2 
20 60 
50 30 
1 
30 14:50 
0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Trial 1: 0 0

Trial 2: 2 70

</PRE>  

<P>

______________________________________________________
3278||||||false||||||

<P>
Telephone poles are part of an outdated technology. Cell phones nowadays allow us to call whoever we want, 
wherever we want, independent of any wire. There is one problem - without a service tower nearby a cell phone is 
useless. 

<P>

<P>
<BR>
In the absence of hills and mountains, a service tower will provide coverage for a circular area. Instead of planning
where to place the wires, a wireless telephone company has to plan where to build its service towers. Building the 
towers too far apart causes holes in the coverage and increases complaints. Building the towers too close to each 
other results in large areas covered by more than one service tower, which is redundant and inefficient. 

<P>

<P>
<BR>
International Cell Phone Company is developing a network strategy to determine the optimal placement of service
towers. Since most customers have replaced their old wired home phones by cell phones, the strategy for planning 
service towers is therefore to cover as many homes of customers as possible. 

<P>

<P>
<BR>
The figure below shows the service areas for the five towers ICPC's strategic department planned to build this year.
Tower 5 will serve 24 customers, 6 of which are also served by tower 4. Towers 1, 2 and 3 have a common service 
area containing 3 customers. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3278.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3278.jpg
 ALT="\epsfbox{p3278.eps}">
</DIV>

<P>
Shortly after the plans for these five towers had been published, higher management issued a stop on all tower 
building. Protesting customers forced them to weaken this decree, and allow the building of three towers out of the 
five planned. These three towers should serve as many customers as possible, of course. Finding the best possible 
choice for the towers to build is not trivial (the best choice in this case is towers 2, 4 and 5, serving 68 customers).  

<P>

<P>
<BR>
You must write a program to help ICPC choose which towers to build in cases like these. If several choices of towers
serve the same number of customers, choices including tower 1 are preferable. If this rule still leaves room for more 
than one solution, solutions including tower 2 are preferable, and so on. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file contains several test cases. The first line of each test case contains two positive integers: the number
<SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(n \le 20)$
 -->
<SPAN CLASS="MATH">(<I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3278.jpg
 ALT="$ \le$">20)</SPAN> of towers planned, and the number of towers to be actually built. The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> numbers,
each giving the number of customers served by a planned tower. (The first number refers to the first tower, and so on.)
No tower serves more than a million people. The next line contains the number <SPAN CLASS="MATH"><I>m</I></SPAN> <!-- MATH
 $(m \le 10)$
 -->
<SPAN CLASS="MATH">(<I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3278.jpg
 ALT="$ \le$">10)</SPAN> of common service areas.
Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines contains the description of a common service area. Such a line starts with the number <SPAN CLASS="MATH"><I>t</I></SPAN> 
<SPAN CLASS="MATH">(<I>t</I> &gt; 1)</SPAN> of towers for which this is a common service area, followed by the <SPAN CLASS="MATH"><I>t</I></SPAN> numbers of the towers. The last number 
on the line is the number of customers in the common service area. The last line of the input file consists of the two 
integers `<TT>0 0</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, display the number of customers served and the best choice for the location of the towers. Follow 
the format of the sample output. All numbers are left-justified and there are no blank spaces at the end of any line.
Print a blank line after each test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>                                              

<P>
<PRE>
5  3                                                       
15 20 25 30 24                                             
5                                                           
2  1 2     7                                               
3  1 2 3   3                                               
2  2 3     2                                               
2  3 4     5                                                
2  4 5     6                                               
5  3                                                       
25 25 25 25 25                                             
4                                                           
2  1 2     5 
2  2 3     5 
2  3 4     5 
2  4 5     5 
5  3 
25 25 25 25 25 
0 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case Number  1 
Number of Customers: 68 
Locations recommended: 2 4 5 
  
Case Number  2 
Number of Customers: 75 
Locations recommended: 1 3 5 
  
Case Number  3 
Number of Customers: 75 
Locations recommended: 1 2 3
</PRE> 

<P>

______________________________________________________
3279||||||false||||||
<P>The people of ACMamia have a tradition of rolling a six sided die to determine who will choose where to dine that evening.<P>One person rolls the die, the other calls ``odd" or ``even". If the caller guesses correctly, then he or she gets to choose the restaurant; otherwise, the person throwing does. Hopefully, it is obvious that ``odd" wins when 1, 3 or 5 is rolled, and ``even" with 2, 4 or 6!<P>ACMamians also have a tradition of repeating the same call (either ``odd" or ``even") several times in succession.<P>Your task is to check the recorded rolls and determine how many times each person wins.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input for this problem consists of a sequence of one or more scenarios. Each scenario contains 3 lines.<P><UL><LI>The first line contains, in order, the names of two people, and one of the words ``odd" or ``even" (in lowercase), separated by a space. The first named person will always throw, and the second named person will always call either ``odd" or ``even", as indicated. In ACMamia, a name is a non-empty sequence of up to 20 (inclusive) letters (any of which may be uppercase or lowercase). </LI><LI>The second line will be an integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3279img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3279img1.png ALT="$ \le$">255</SPAN> <tex2html_verbatim_mark>, representing the number of die throws. </LI><LI>The third line contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers, each between 1 and 6 (inclusive), separated by single spaces, representing die throws. </LI></UL><P>The input will be terminated by a line consisting of three hash signs (<TT>#</TT>), separated by single spaces. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output will be a sequence of lines, one for each input scenario. Each line will contain in order the following items, separated by single spaces: the name of the first person (exactly as it appears in the input), the number of times the first person won, the name of the second person (exactly as it appears in the input), and the number of times the second person won.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Bill Susan even 
8 
1 6 5 3 4 2 5 5 
Sarah Tony odd 
15 
2 4 5 4 3 6 1 2 5 4 3 1 2 5 6 
# # #
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Bill 5 Susan 3 
Sarah 8 Tony 7
</PRE><P>
______________________________________________________
3280||||||false||||||
<P>In this part of the world it is quite common to abbreviate words - ``Uni" for ``University", and ``Bas" for ``Basil" are obvious examples.<P>In this problem, you will be given sets of words. In each set you must decide on the shortest abbreviation that will uniquely match each word within the set. In this context, an abbreviation is one or more adjacent letters from the word, starting with the first letter. So valid abbreviations for ``Basil" would be ``B", ``Ba", ``Bas", ``Basi" and ``Basil". The last is not strictly an abbreviation, but it is included to allow us to distinguish words such as ``wrong" and ``wrongly".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input for this problem consists of a sequence of one or more scenarios. Each scenario describes a set of words.<P><UL><LI>Each set of words will start with a single integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3280img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3280img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, on a line of its own, which is the number of words in the set. </LI><LI>This will be followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each consisting of one word. A word consists of a non-empty sequence of up to 100 (inclusive) lowercase letters. Words within a set will be unique, but not necessarily sorted. </LI></UL><P>The input will be terminated by a line consisting of a zero (<TT>0</TT>). This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input scenario, you must output the scenario number, starting with 1, on a line on its own, followed by one line for each word in the set, in the same order as they appear in the input. The word must be displayed, followed by a space, followed by the shortest abbreviation (as defined above, in lower case) that will uniquely match the word within the set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
cat
dog
mouse
horse
3
ant
antelope
anteater
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
cat c 
dog d 
mouse m 
horse h 
2 
ant ant 
antelope antel 
anteater antea
</PRE><P>
______________________________________________________
3281||||||false||||||
<P>The MCA Programming Contest differs from the ACM Contest in its scoring. In the MCA, each problem is graded and, if correctly solved, scores a number of points related to its difficulty. The system will not allow a team to resubmit again a solved problem. The team with the most points wins. If teams are tied on points, the tie is broken in favour of the team with the fewer correct solutions. If teams are still tied, the tie is broken in favour of the team with the fewer total submissions. If teams are still tied, the tie is broken in favour of the team with the smaller team number.<P>Your task is to find out the overall team ranking according to the above rules.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input for this problem consists of a sequence of one or more scenarios. Each scenario describes a contest.<P><UL><LI>The first line consists of 2 integers separated by a single space, <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3281img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3281img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3281img1.png ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3281img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, giving the number of teams taking part <SPAN CLASS="MATH">(<I>T</I>)</SPAN> <tex2html_verbatim_mark>, and the number of problems used <SPAN CLASS="MATH">(<I>P</I>)</SPAN> <tex2html_verbatim_mark>. Teams are numbered consecutively from 1, problems are lettered consecutively from uppercase A. </LI><LI>The second line contains <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> integers, separated by single spaces, giving the points score for each problem, in letter order. Each score will be in the range 1 to 100 (inclusive). </LI><LI>The third line consists of a single integer, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3281img1.png ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3281img1.png ALT="$ \le$">200</SPAN> <tex2html_verbatim_mark>, giving the total number of submissions during the contest. </LI><LI>There then follow <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> lines, each containing details of a single submission. The data for a submission are, in order: the team number, problem letter, followed by uppercase <TT>A</TT> for accepted or uppercase <TT>R</TT> for rejected, all separated by single spaces. </LI></UL><P>The input will be terminated by a line consisting of two zeros (<TT>0</TT>), separated by a single space. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each scenario, output the scenario number, starting with 1, on a single line. Follow that by the teams and their points, each on a single line, in order of their rankings (as defined by the rules above). For each team, output the team number, followed by a single space, followed by their score.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 2
5 10
2 
1 A A
2 B A
2 2
5 10
3 
1 B A
2 B A
1 A R
2 3
5 5 10
3 
1 A A
1 B A
2 C A
3 3
5 5 5
5 
1 A A
1 B R
2 B A
2 C R
3 C A
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
2 10
1 5
2 
2 10
1 10
3 
2 10
1 10
4 
3 5
1 5
2 5
</PRE><P>
______________________________________________________
3282||||||false||||||
<P>John wants to fence in all his trees, and happily his friend Bill has a fence building company.<P>Being a good friend, Bill has proposed to build the required fences for free, provided that costs are kept under control. Specifically, Bill agrees to build fences for up to three square paddocks, with sides parallel to the coordinate axes, with the condition that the side of the largest paddock(s) is as small as possible.<P>All paddocks must be square (have equal length sides) and paddocks must enclose all trees, considering trees as distinct points in the plane. The paddocks may intersect, or overlap on their borders, or even have 0-length sides, and a tree on a fence is considered enclosed.<P>A paddock may enclose only one tree, in which case its side length is 0. For example, the following diagram shows how three paddocks, of side lengths 1, 2, and 0, can be used to enclose 6 trees.<P><DIV ALIGN="CENTER"><IMG WIDTH="597" HEIGHT="495" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3282.jpg ALT="\epsfbox{p3282.eps}"> <tex2html_verbatim_mark></DIV><P>Your task is to find the minimum side of the largest paddock(s) that Bill needs to build. In the above diagram, the minimum such side is 2.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input for this problem consists of a sequence of one or more scenarios. Each scenario is described by several lines.<P><UL><LI>The first line contains, in order, the label of the scenario, a number, <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3282.jpg ALT="$ \le$"><I>s</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3282.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, followed by the number of the trees, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3282.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3282.jpg
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>, separated by a single space. 
</LI>
<LI>The first line will be followed by one or more lines containing <SPAN CLASS="MATH">2 <TT>x</TT> <I>n</I></SPAN>
<tex2html_verbatim_mark>ï¿½ integers, separated by single spaces or newlines, giving, in order, the coordinates of the trees, <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> before <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3282.jpg
 ALT="$ \le$"><I>x</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $y \le 1000000$
 -->
<SPAN CLASS="MATH"><I>y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/p3282.jpg
 ALT="$ \le$">1000000</SPAN>
<tex2html_verbatim_mark>. (Attention, for this program, input lines may contain up to 2000 characters each!) 
</LI>
</UL>

<P>
The input will be terminated by a line consisting of two zero numbers (<TT>0</TT>), separated by a single space. This line should not be processed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output will be a sequence of lines, one for each input scenario. Each line will contain in order the scenario label, followed by the minimum side of the largest paddock(s) required by the problem, separated by a single space. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 6 
1 0 2 1 3 2 4 3 4 4 6 0 
2 5 
1 0 2 1 3 
2 5 4 6 0 
3 1 
1 1 
4 2 
1 0 5 5 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 2 
2 2 
3 0 
4 0
</PRE> 

<P>

______________________________________________________
3283||||||false||||||
<P>A developer has designed a subdivision within a city such that all roads connect at intersections in a treelike design. This is to prevent all petrolhead hooligans from disturbing the residents by not having any road loops for races. Only the entering intersection is connected to the rest of the city. The developer is selling off land alongside roads between adjacent intersections. A real estate agent has produced a book indicating the expected dollar profit (positive, zero or negative) that can be obtained by purchasing the land alongside each road.<P>Potential buyers want to maximize their profit, but prefer to buy a contiguous stretch of land alongside a simple road chain that connects two intersections of the subdivision. Your task is to write a program to determine the maximum non negative profit that can be obtained this way, and return 0 if no such profit can be obtained.<P>As an example, consider the following representation of a subdivision, where road labels represent expected profits. In this scenario, the maximum non negative profit is 7, and can be obtained alongside the road chain between the intersections #2 and #5:<P><DIV ALIGN="CENTER"><IMG WIDTH="511" HEIGHT="263" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3283.jpg ALT="\epsfbox{p3283.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input for this problem consists of a sequence of one or more scenarios. Each scenario contains two or more lines.<P><UL><LI>The first line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3283.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3283.jpg ALT="$ \le$">500000</SPAN> <tex2html_verbatim_mark>, indicating the number of intersections, including the entrance intersection, implicitly labelled 0. </LI><LI>This is then followed by one or more lines, containing <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> pairs of integers. All integers are separated by single spaces or newlines. The <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-th intersection is defined by the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-th pair of integers `<SPAN CLASS="MATH"><I>x</I>&nbsp;<I>p</I></SPAN> <tex2html_verbatim_mark>', where <!-- MATH
 $1 \le y < n$
 --><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3283.jpg ALT="$ \le$"><I>y</I> &lt; <I>n</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 \le x < y$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3283.jpg ALT="$ \le$"><I>x</I> &lt; <I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">-1000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3283.jpg ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3283.jpg ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>. This pair indicates a road segment between <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and a previously defined intersection, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, with a profit value <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>.(Attention, for this program, input lines may contain up to 4096 characters each!) </LI></UL><P>The input will be terminated by a line consisting of one zero (<TT>0</TT>). This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output will be a sequence of lines, one for each input scenario. Each line will contain an integer, indicating the maximum nonnegative profit, over all possible simple road chains connecting two intersections of the subdivision. Write zero (<TT>0</TT>) if no profit can be obtained.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
0 -1 1 3 0 2 1 1 1 4 
6 
0 2 0 1 0 2 0 1 1 1 
5 
0 1 1 -3 0 -2 1 -2 
5 
0 -1 1 -3 0 -2 1 -2 
10 
0 -1 0 -1 0 0 1 3 1 4 2 4 2 2 3 
3 3 3 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 
5 
1 
0 
7
</PRE><P>
______________________________________________________
3284||||||false||||||
<P>Consider a tournament in which each team plays the same number of games, but does not necessarily play all the opposing teams the same number of times. For every team, every game can end in a win, a draw or a loss. Tournament points are accumulated in two ways: (a) for wins and draws (there are no points for a loss) and (b) for gaining bonus points during games.<P>During a game, a team can accumulate a final score based on three different events (<SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>), each with its own value. The final score for a game is the sum of the event values obtained, i.e., the number of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>'s accumulated times the value for an <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, plus the number of <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>'s accumulated times the value for a <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, plus the number of <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>'s accumulated times the value for a <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>.<P>A team gains 1 tournament bonus point if it scores <SPAN CLASS="MATH"><I>J</I></SPAN> <tex2html_verbatim_mark> or more A events in a game, regardless of the final outcome of the game. Furthermore, a team gains 1 tournament bonus point if they lose a game by no more than a final score difference of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>.<P>The governing board, which is responsible for choosing the points for a win or draw, the values for events <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, the number <SPAN CLASS="MATH"><I>J</I></SPAN> <tex2html_verbatim_mark>, and the value <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, decided to investigate the effect of changing those parameters on the team rankings.<P>Your task is to determine the highest possible ranking for each team (so that as few as possible teams do strictly better), by changing the values of the above parameters, subject to the following constraints:<P><UL><LI>a win must be worth between 2 and 5 points, </LI><LI>a draw must be worth at least 1 and be worth (strictly) less than a win, </LI><LI>the values for <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> are in the range 1 to 5, </LI><LI><SPAN CLASS="MATH"><I>J</I></SPAN> <tex2html_verbatim_mark> is in the range 1 to 5, </LI><LI><SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is in the range 1 to 10. </LI><LI>All quoted ranges include both endpoints. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input for this problem consists of a sequence of one or more scenarios. Each scenario describes a tournament.<P><UL><LI>The first line of a scenario contains two integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3284img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3284img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3284img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3284img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>, separated by a single space, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of teams and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> the number of games for each team. </LI><LI>Each of the following lines of the scenario describe a game in the following format, with items separated by single spaces:<P><P><BR><SPAN CLASS="MATH"><I>T</I><SUB>1</SUB>&nbsp;<I>A</I><SUB>1</SUB>&nbsp;<I>B</I><SUB>1</SUB>&nbsp;<I>C</I><SUB>1</SUB>&nbsp;<I>T</I><SUB>2</SUB>&nbsp;<I>A</I><SUB>2</SUB>&nbsp;<I>B</I><SUB>2</SUB>&nbsp;<I>C</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR><UL><LI><SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I> = 1, 2</SPAN> <tex2html_verbatim_mark>, are team labels, which are sequences of 1 to 20 characters, each character being either a lower-case letter, a digit, or a minus sign (-). </LI><LI><SPAN CLASS="MATH"><I>A</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I> = 1, 2</SPAN> <tex2html_verbatim_mark> are the number of events of type <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, respectively, accumulated by team <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> are integers from 0 to at most 9. </LI></UL></LI></UL><P>The input will be terminated by a line consisting of two zeros (<TT>0</TT>), separated by a single space. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each scenario, output the scenario number, starting with 1, on a single line. Follow that by one line for each team, sorted by team name. For each team, output the team name, followed by a single space, followed by its best possible ranking.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 2 
a-team 1 1 1 b-team 0 3 0 
b-team 0 0 3 a-team 1 1 1 
3 2 
bob 1 1 1 fred 0 1 1 
fred 2 1 0 jane 0 1 0 
jane 0 2 0 bob 0 2 0 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
a-team 1 
b-team 1 
2 
bob 1 
fred 1 
jane 3
</PRE><P>
______________________________________________________
3285||||||false||||||
<P>The Sudoku craze is sweeping the world. Practically every newspaper now carries a daily puzzle and there are even books of puzzles (and helpful hints about how to solve them) available from several publishers. This example shows a typical Sudoku puzzle (left) and its solution (right):<P><DIV ALIGN="CENTER"><IMG SRC="http://livearchive.onlinejudge.org/external/32/p3285.jpg ALT="\epsfbox{p3285.eps}"> <tex2html_verbatim_mark></DIV><P>The aim is to fill in the blank squares such that the digits 1 to 9 appear exactly once in each row, each column and each of the nine <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> sub-squares that are marked by shading in the above diagram. Typically, the given digits are carefully chosen and placed so that there is only one solution.<P>The Sudoku Problem Preparation Company wants to get in on this craze and sees it as a way of making money. Their idea is to publish a series of puzzles with substantial prizes offered to the submitters of the correct answer. They would charge an entry fee and the perception would be that this would fund the prizes.<P>However, they have a different idea - they intend to produce puzzles with several different solutions and then, when all the answers come in, they will claim that noone has won the prize and produce an answer that differs from all the submissions. Given that they expect lots of submissions, they obviously want to choose puzzles with several different solutions. This is where you come in.<P>Write a program that will read in details of several Sudoku puzzles and determine how many different solutions there are for each of them. None of the given puzzles will admit more than 10000 different solutions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input for this problem consists of a sequence of one or more scenarios. Each scenario contains 10 lines.<P><UL><LI>The first line contains a puzzle label, which is an integer, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3285.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3285.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. </LI><LI>The puzzle is described on the next 9 lines, each containing a string of 9 digits in the range 0 to 9, including the limits. Zeroes will denote the blanks that need to be filled in, other digits will denote themselves. </LI></UL><P>The input will be terminated by a line consisting of a single zero (<TT>0</TT>). This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output will be a sequence of lines, one for each input scenario. Each line will contain in order the puzzle label and the number of ways of solving that puzzle (0 if none), separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 
023708900 
000004000 
049000081 
090007806 
000000000 
508300020 
860000530 
000800000 
002103690 
20 
003708900 
000004000 
049000081 
090007806 
000000000 
508300020 
860000530 
000800000 
002103690 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 1 
20 2
</PRE><P>
______________________________________________________
3286||||||false||||||
<P>A popular Acmian strategy game consists of moving a robot on a terrain with fixed obstacles. The objective is to move the robot from a given initial position to a given target position.<P>In our case, the terrain is defined by a planar rectangular map. The robot and the obstacles have rectangular shapes, with corners on integer coordinates. All rectangles are proper, i.e., each side is at least 1 unit long. All obstacles and robot positions are completely within the rectangle bounding the map. The initial and target positions may overlap each other, but do not overlap existing obstacles. Obstacles themselves may overlap. Here, boundaries are not considered as belonging to the objects thus, the robot, the obstacles and the map may share some of their boundaries.<P>The robot has a fixed shape, cannot rotate, but can move by translations in any direction, within the map borders, as long as it avoids collisions with the obstacles and with the map limits. The robot is allowed to slide alongside the borders of the obstacles or of the map.<P>The following diagram gives an example of this game, where <SPAN CLASS="MATH"><I>R</I><SUB>I</SUB></SPAN> <tex2html_verbatim_mark> is the initial robot position, <SPAN CLASS="MATH"><I>R</I><SUB>T</SUB></SPAN> <tex2html_verbatim_mark> the target position, the other shaded areas are obstacles, and the dotted line suggests the shortest robot path.<P><DIV ALIGN="CENTER"><IMG WIDTH="374" HEIGHT="383" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3286.jpg ALT="\epsfbox{p3286.eps}"> <tex2html_verbatim_mark></DIV><P>Your task is to write a program that determines the length of a shortest robot path on such a map with obstacles, if such a path exists.<P><P><P><BR><B>Note:</B> For this problem, where necessary, use <B>double</B> floating point numbers, floating point additions, the <TT>sqrt()</TT> function, and the output display facilities, such as <TT>printf()</TT>, provided by your system. The final results must be displayed accurate to exactly 2 decimals. For example, in the above diagram scenario, report that the length of the shortest path is 5.65:<P><DIV ALIGN="CENTER">Sqrt(2) + 2 + Sqrt(5) = 1.4142 ...+ 2.0 + 2.2360 ...<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3286.jpg ALT="$ \approx$"></SPAN> <tex2html_verbatim_mark> 5.65</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input for this problem consists of a sequence of one or more scenarios. Each scenario is described by several lines.<P><UL><LI>The first line defines, in order, a numeric scenario label, <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3286.jpg ALT="$ \le$"><I>l</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3286.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, the number of obstacles, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3286.jpg ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3286.jpg ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, and the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the top-right corner of the rectangle bounding the map, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3286.jpg ALT="$ \le$"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3286.jpg ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>, separated by single spaces. </LI><LI>The second line defines the initial and target robot positions, specifically, in order, the initial <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of its bottom-left corner, the initial <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of its top-right corner, and the target <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of its bottom-left corner, separated by single spaces. </LI><LI>The next lines contain <SPAN CLASS="MATH">4 <TT>x</TT> <I>m</I></SPAN> <tex2html_verbatim_mark> integers, separated by single spaces or newlines. These integers define the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> obstacles, by giving in order, for each obstacle, the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of its bottom-left corner, and the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of its top-right corner. </LI><LI>All coordinates are bounded within the map rectangle, including the inferred <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the robot's top-right corner target position. </LI></UL><P>The input will be terminated by a line consisting of four zeros (<TT>0</TT>), separated by single spaces. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Output will be a sequence of lines, one for each input scenario. Each line will start with the scenario label, followed by the length of the shortest path, accurate to exactly 2 decimals, separated by a single space. If no such path exists, print the character minus (<TT>-</TT>) in place of the path length.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 3 6 6 
1 0 2 1 4 4 
1 2 2 3 3 2 5 3 4 1 6 3 
11 4 6 6 
1 0 2 1 4 4 
1 2 2 3 3 2 5 3 4 1 6 3 3 
4 4 5 
12 3 6 6 
1 0 3 1 4 4 
1 2 2 3 3 2 5 3 4 1 6 3 
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 5.65 
11 6.41 
12 -
</PRE><P>
______________________________________________________
3287||||||false||||||
<P>A Grant's cube is a <SPAN CLASS="MATH">3 <TT>x</TT> 3 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> cube made of (usually wooden) <SPAN CLASS="textit">blocks</SPAN>, also known as <SPAN CLASS="textit">polycubes</SPAN>. Each of the blocks is made up of a number of unit cubes, joined on faces. In the standard Grant's puzzle there are 3 <SPAN CLASS="textit">tetracubes</SPAN> (blocks made of 4 units), and 3 <SPAN CLASS="textit">pentacubes</SPAN> (blocks made of 5 units), making a total volume of 27 units. However, larger or smaller blocks are allowed in this problem.<P>Your task is to determine if a <SPAN CLASS="textit">candidate set of blocks</SPAN> can fit together to form a Grant's cube. Finding a solution may require rotation of some of the blocks from their initial orientations, and it is possible that no solution exists for a given set of blocks (that they can't form a cube at all). It does not matter whether the blocks can be physically brought together when determining if a solution exists. As long as they can be oriented so as to completely fill the <SPAN CLASS="MATH">3 <TT>x</TT> 3 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> space without overlapping, that is enough for this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file describes one or more scenarios. Each scenario is described on <SPAN CLASS="MATH"><I>k</I> + 1</SPAN> <tex2html_verbatim_mark> lines, where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the number of blocks forming a candidate set. The first line contains a label, which is a string of 1 to 5 digits, and the number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> of blocks in the set, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3287img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3287img1.png ALT="$ \le$">6</SPAN> <tex2html_verbatim_mark>, separated by single spaces.<P>Each of the next <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines encodes a single block. Each such line begins with three dimensions, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3287img1.png ALT="$ \le$"><I>d</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3287img1.png ALT="$ \le$">3</SPAN> <tex2html_verbatim_mark>, representing the smallest rectangular solid that the block fits into, followed by a list of <SPAN CLASS="MATH"><I>d</I> <TT>x</TT> <I>h</I> <TT>x</TT> <I>w</I></SPAN> <tex2html_verbatim_mark> binary digits, all items separated by single spaces. These binary digits are logically arranged in <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> groups of <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> groups of <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> integers, where a 1-digit means that the corresponding cell in the rectangular solid is part of the encoded block, whereas a 0-digit means that the corresponding cell is not part of the block. For an explanatory example, see the following diagram, which describes two blocks and their encodings:<P><DIV ALIGN="CENTER"><IMG WIDTH="863" HEIGHT="356" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3287img1.png ALT="\epsfbox{p3287.eps}"> <tex2html_verbatim_mark></DIV><P>The input will be terminated by a line consisting of two zeros (<TT>0</TT>), separated by a single space. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each scenario, i.e., for each input candidate block set, the program should output a single line of text. The line of text should consist of the scenario label, followed the word ``<TT>YES</TT>" (in uppercase) if there is at least a solution, otherwise ``<TT>NO</TT>" (in uppercase), separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
01 6 
2 2 3 1 0 0 0 0 0 1 1 1 1 0 0 
2 2 3 1 0 0 0 0 0 1 1 1 0 0 1 
2 2 3 0 1 1 0 0 0 1 1 0 1 0 0 
2 2 2 0 1 0 0 1 1 1 0 
2 2 2 0 0 1 0 1 1 1 0 
2 2 2 1 0 0 0 1 1 1 0 
001 3 
1 3 3 1 1 1 1 1 1 1 1 1 
3 1 3 1 1 1 1 1 1 1 1 1 
3 3 1 1 1 1 1 1 1 1 1 1
002 3 
1 3 3 1 1 1 1 1 1 1 1 1
1 3 3 1 1 1 1 1 1 1 0 0 
2 3 3 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1
003 3 
1 3 3 1 1 1 1 1 1 1 1 1 
1 3 3 1 1 1 1 1 1 1 0 0
2 3 3 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 1 
00
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
01 YES 
001 YES 
002 YES 
003 NO

______________________________________________________
3288||||||false||||||
<P>The harmonic mean (<SPAN CLASS="MATH"><I>H</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark>) of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> numbers <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB>...<I>a</I><SUB>N-1</SUB>, <I>a</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark> is defined as below:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>H</I><SUB>N</SUB> = <IMG WIDTH="247" HEIGHT="56" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3288img1.png ALT="$\displaystyle {N \over {{1 \over a_1} + {1 \over a_2} + {1 \over a_3} + \dots + {1 \over a_{N-1}} + {1 \over a_N}}}$"></DIV><P><tex2html_verbatim_mark></P><DIV ALIGN="CENTER"><IMG WIDTH="300" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3288img1.png ALT="\epsfbox{p3288.eps}"> <tex2html_verbatim_mark></DIV><P>So the harmonic mean of four numbers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> is defined as<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>H</I><SUB>4</SUB> = <IMG WIDTH="115" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3288img1.png ALT="$\displaystyle {4 \over {{1 \over a} + {1 \over b} + {1 \over c} + {1 \over d}}}$"></DIV><P><tex2html_verbatim_mark></P><P>In this problem your job is very simple: given <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 9</SPAN> <tex2html_verbatim_mark>) integers you will have to find their harmonic mean.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line of the input file contains an integer <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> (<!-- MATH
 $0 < S < 501$
 --> <SPAN CLASS="MATH">0 &lt; <I>S</I> &lt; 501</SPAN> <tex2html_verbatim_mark>), which indicates how many sets of inputs are there. Each of the next <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> lines contains one set of input. The description of each set is given below:<P>Each set starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 9</SPAN> <tex2html_verbatim_mark>), which indicates how many numbers are there in this set. This number is followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB>...<I>a</I><SUB>N-1</SUB>, <I>a</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark> (<!-- MATH
 $0 < a_i < 101$
 --> <SPAN CLASS="MATH">0 &lt; <I>a</I><SUB>i</SUB> &lt; 101</SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of input produce one line of output. This line contains the serial of output followed by two integers <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> separated by a front slash. These two numbers actually indicate that the harmonic mean of the given four numbers is <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="8" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3288img1.png ALT="$ \over$"><I>n</I></SPAN> <tex2html_verbatim_mark>. You must ensure that <SPAN CLASS="MATH">gcd(<I>m</I>, <I>n</I>) = 1</SPAN> <tex2html_verbatim_mark> or in other words <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> must be relative prime. The value of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> will fit into a 64-bit signed integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4 1 2 3 4
4 2 2 3 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 48/25
Case 2: 12/7
</PRE><P>
______________________________________________________
3289||||||false||||||
<P>Dr. Jemison is simulating the navigation system of a robot. He is using a 2D labyrinth containing several rectangular blocks. All blocks are placed either vertically or horizontally. Spaces are available around the blocks. A robot can use these empty places for its movement. While moving, the robot is not allowed to touch or pass through any block. Also, robots movement must be either horizontal or vertical. A sample scenario is given in the following picture, where rounded blocks indicate the position of robot.<P>The main aspect of Jemisons experiment is to test whether a robot can turn timely in the right direction and reach its destination. Jemison has already embedded the complete map of the labyrinth and its final position inside the robots memory. As turning is costly, Jemison wants the robot to reach its destination using minimum number of turns. For example, in the above figure, it requires at least two turns to reach the destination.<P><DIV ALIGN="CENTER"><IMG WIDTH="859" HEIGHT="471" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3289.jpg ALT="\epsfbox{p3289.eps}"> <tex2html_verbatim_mark></DIV><P>In this problem you will be given a labyrinth of infinite extent. There can be zero or more rectangular blocks inside the labyrinth. Each rectangular block will be defined by its bottom-left <SPAN CLASS="MATH">(<I>lx</I>, <I>by</I>)</SPAN> <tex2html_verbatim_mark> and top-right <SPAN CLASS="MATH">(<I>rx</I>, <I>ty</I>)</SPAN> <tex2html_verbatim_mark> corners. Rectangular blocks will not overlap one another but they can share a common border line. The starting and ending positions of the robot will be denoted by Cartesian coordinates. These positions will not touch any block or stay inside it. You have to find the minimum number of turns that the robot must make to reach its destinations from starting positions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>In the first line, there will be an integer, <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3289.jpg ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3289.jpg ALT="$ \le$">50</SPAN> <tex2html_verbatim_mark>) denoting the number of tests. Each input will start with an integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3289.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3289.jpg ALT="$ \le$">50</SPAN> <tex2html_verbatim_mark>), where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of rectangular blocks. Following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines will contain the description of a rectangular block. Each line will contain 4 integers <SPAN CLASS="MATH"><I>lx</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>by</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>rx</I></SPAN> <tex2html_verbatim_mark> (greater than <SPAN CLASS="MATH"><I>lx</I></SPAN> <tex2html_verbatim_mark>), <SPAN CLASS="MATH"><I>ty</I></SPAN> <tex2html_verbatim_mark> (greater than <SPAN CLASS="MATH"><I>by</I></SPAN> <tex2html_verbatim_mark>). Next line will contain another integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3289.jpg ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3289.jpg ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>) which is the number of queries. Each query will contain starting and ending coordinates of the robot in a line (two positions will be distinct always). The coordinates will be positive integer and will not exceed <SPAN CLASS="MATH">10<SUP>8</SUP></SPAN> <tex2html_verbatim_mark>.<P>Two successive input cases will be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input set, output must start with a line `<TT>Labyrinth #<SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark></TT>', where <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> is the test number starting from 1. It will be followed by minimum number of turns for each query in a separate line. If the robot somehow cannot reach to its destination, print `<TT>Impossible.</TT>'. See sample input output for clarification.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
0
2
10 10 20 20
10 10 10 20

1
10 10 100 100
2
9 10 101 10
1 1 1000 1000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Labyrinth #1
1
0
Labyrinth #2
2
1
</PRE><P>
______________________________________________________
3290||||||false||||||
<P>Rafiq lives in a strange square shaped country <B>FONO</B> where each city is equal in size and square in shape and connected to at most four cities. From the top view of the country, it looks like a grid. For simplicity, we assume that each city is recognized by two numbers: the row and column number, starting from <SPAN CLASS="MATH">(0, 0)</SPAN> <tex2html_verbatim_mark>. Each city is connected by road from those cities which share the same borderline. So from city <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark>, any one can go to city <SPAN CLASS="MATH">(<I>i</I> - 1, <I>j</I>)</SPAN> <tex2html_verbatim_mark> or city <SPAN CLASS="MATH">(<I>i</I> + 1, <I>j</I>)</SPAN> <tex2html_verbatim_mark> or city <SPAN CLASS="MATH">(<I>i</I>, <I>j</I> - 1)</SPAN> <tex2html_verbatim_mark> or city <SPAN CLASS="MATH">(<I>i</I>, <I>j</I> + 1)</SPAN> <tex2html_verbatim_mark> and no one can move more than one city in a day. The rules of the country are very simple: when any one stays in a city, he must pay an amount of money to that city which covers the cost of staying in that city for one day and the cost to reach any one of the neighbor cities where he wants to go. He can stay in a city as many days as he wants but he needs to pay for each day.<P><DIV ALIGN="CENTER"><IMG WIDTH="358" HEIGHT="371" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3290.jpg ALT="\epsfbox{p3290.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><EM>Fig: Country FONO</EM></DIV><P>Every year the government of <B>FONO</B> organizes a lottery and gives a chance to one person and his <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> friends to stay in any city of the country without any cost. This lottery is valid for only <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> days. This year Rafiq has won this lottery and has decided to invite 3 of his friends. He has also decided to bear the cost to reach that city for all of his friends. So he needs to calculate which city is suitable for him to invite that is minimum amount of money required to reach in that city by his friends. Suppose <SPAN CLASS="MATH"><I>F</I>1</SPAN> <tex2html_verbatim_mark> lives at City <SPAN CLASS="MATH">(0, 0)</SPAN> <tex2html_verbatim_mark>. To reach the city <SPAN CLASS="MATH">(0, 3)</SPAN> <tex2html_verbatim_mark>, he needs to pay 19. Because after reaching city <SPAN CLASS="MATH">(0, 3)</SPAN> <tex2html_verbatim_mark>, he need not to pay any money. (Remember that, the lottery is valid for only <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> days. So all of his friends must reach in the selected city within <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> days.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of cases (Less than 31). Each case starts with a line specifying three integer numbers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. Here <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (<!-- MATH
 $0 < N \le 25$
 --> <SPAN CLASS="MATH">0 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3290.jpg ALT="$ \le$">25</SPAN> <tex2html_verbatim_mark>) represents the size of the country, <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> (<!-- MATH
 $0 < F \le 5$
 --> <SPAN CLASS="MATH">0 &lt; <I>F</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3290.jpg ALT="$ \le$">5</SPAN> <tex2html_verbatim_mark>) represents the number of friends Rafiq wants to invite, and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> (<!-- MATH
 $0 < T \le 25$
 --> <SPAN CLASS="MATH">0 &lt; <I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3290.jpg ALT="$ \le$">25</SPAN> <tex2html_verbatim_mark>) represents the number of days within which the lottery is valid. After that, <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> positive numbers (<SPAN CLASS="MATH">&lt; 10000</SPAN> <tex2html_verbatim_mark>) are given which represents the cost of each city of the country. After that, there are F lines. Each line contains 2 numbers - <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> - representing the current position of Rafiqs friends. Input is terminated by a line where <SPAN CLASS="MATH"><I>N</I> = <I>F</I> = <I>T</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, first print the `<TT>Case #<SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>:</TT>' where <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is the test case number, and then print `<TT>Impossible.</TT>'. if it is not possible to find a city where each one can meet within the specified day. If it is possible, print the position of the city and the cost to reach that city. If more than one solution of minimum cost is possible, select the one with minimum row number. If still more than one solution found, print the one with minimum column number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3 3
4 5 10 20
40 30 40 10
18 53 4 32
52 37 42 43
0 0
0 3
2 3
4 3 2
4 5 10 20
40 30 40 10
18 53 4 32
52 37 42 43
0 0
0 3
2 3
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: Selected city (0,3) with minimum cost 61.
Case #2: Impossible.
</PRE><P>
______________________________________________________
3291||||||false||||||
<P>
Understanding recursion is not easy but unfortunately to
solve this problem you need to understand it quite well. Below you can see a
program written in plain C, which takes as input up to 40000, 32-bit 
integers and produces an output. It continues to do so until a number set
of zero elements appear. Given the input your job is to find out what output
will the following program will produce.

<P>
<PRE>
#include&lt;stdio.h&gt;
#include&lt;math.h&gt;
int const MAX=40000;
long nums[MAX];
long recur(int i,int j,int N)
{
    long t1=0,t2=0,t=0;
    if(i&lt;0 || j&lt;0 || i&gt;=N || j&gt;=N) return 0;
    if(i==j) t=recur(i+1,j+1,N);
    if(i&lt;=j) t1=(nums[i]&gt;nums[j])+recur(i,j+1,N);
    if(i&gt;=j) t2=(nums[i]&gt;nums[j])+recur(i,j-1,N);
    return t1+t2+t;
}
int main(void)
{
    long int i,j,N,kase=0;
    freopen("d.in","r",stdin);
    while(1)
    {
        scanf("%d",&amp;N);
        for(i=0;i&lt;N;i++)
            scanf("%ld",&amp;nums[i]);
        if(N==0) break;
        printf("Case %d: %ld\n",++kase,recur(0,0,N));
    }
    return 0;
}
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file
contains maximum 10 sets of input. The description of each set is given below:

<P>
The first line of each
set is an integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $0 \le N \le 40000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3291img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/32/3291img1.png
 ALT="$ \le$">40000</SPAN>
<tex2html_verbatim_mark>) which indicates how many numbers are in this set. 
Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines contains a number. All these numbers are less than 2000000001.

<P>
Input is terminated by a set where the value of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For the input file produce the
output that the program above will produce (assuming that it will run smoothly in
the computer and no stack overflow will occur) for the given input file. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
1
2
3
4
2
6
1
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 6
Case 2: 1
</PRE> 

<P>

______________________________________________________
3292||||||false||||||
<P>Matrissor is a special kind of processor which can multiply a sequence of matrices in quick time. It has certain capacity <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> which means the maximum number of computations (multiplications here) it can perform at one step. For example if <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is 1000, then it can multiply 2 matrices of 10 <SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark> 10 dimension. But it cannot multiply a (10 <SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark> 11) matrix and another (11 <SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark> 10) matrix which require 1100 multiplications. There is a limitation of matrissor. It cannot multiply a sequence of matrices optimally. If it is to multiply <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> matrices, it processes first <SPAN CLASS="MATH">(<I>m</I> - 1)</SPAN> <tex2html_verbatim_mark> matrices first and then multiples the resultant matrix with <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>th matrix.<P>Your task is to multiply a sequence of matrices optimally using the matrissor with capacity <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. Here optimality depends on one criterion. You have to use the matrissor minimum number of times. Say you have 4 matrices available - <SPAN CLASS="MATH"><I>M</I><SUB>1</SUB>(10 <TT>x</TT> 1)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>2</SUB>(1 <TT>x</TT> 10)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>3</SUB>(10 <TT>x</TT> 1)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I><SUB>4</SUB>(1 <TT>x</TT> 10)</SPAN> <tex2html_verbatim_mark>. Now if you use a 100 capacity matrissor, then you can multiply <SPAN CLASS="MATH"><I>M</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark> in one step and in last step you can multiply <SPAN CLASS="MATH"><I>M</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, (<SPAN CLASS="MATH"><I>M</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark>). This can be expressed as (<SPAN CLASS="MATH"><I>M</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, (<SPAN CLASS="MATH"><I>M</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark>)), where (<SPAN CLASS="MATH"><I>M</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark>) denotes the resultant matrix after multiplying <SPAN CLASS="MATH"><I>M</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains the number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> first, which is at most 30. Each test case begins with a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3292img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3292img1.png ALT="$ \le$">50</SPAN> <tex2html_verbatim_mark>) which is the number of matrices. Following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contain the dimensions of matrices, one line per matrix. Dimensions will be valid and any dimension will be in between 1 to 50. Next line will contain another integer <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark>( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3292img1.png ALT="$ \le$"><I>Q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3292img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>) which is the number of queries, followed by the capacities of the matrissor in one line. Each test case will be followed by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of input, print a line `<TT>Matrix #<SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark></TT>' in first line, where <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> is the test case number starting from 1. In next <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> lines print the minimum number of steps to multiply all the matrices. If it is not possible to multiply the matrices, then print `<TT>Impossible.</TT>'. Put a blank line after each output set. See sample output for details.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4
10 1
1 10
10 1
1 10
3
100 99 300

4
1 1
1 1
1 1
1 1
2
1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Matrix #1
2
Impossible.
1

Matrix #2
3
2
</PRE><P>
______________________________________________________
3293||||||false||||||
<P>If DEF is an acute triangle and DA, EB and FC are its three heights on EF, DF and DE respectively, then the triangle ABC is called the altitude triangle of triangle DEF. It is well known that DA, EB and FC are concurrent and let us assume that their common point of intersection is O. So point O is called the orthocenter of triangle DEF. It can be proved that O is the in center of triangle ABC. In this problem you will be given the altitude triangle ABC and your job is to find out the corresponding acute triangle DEF.<P><DIV ALIGN="CENTER"><IMG WIDTH="704" HEIGHT="538" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3293.jpg ALT="\epsfbox{p3293.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains at most 2000 lines of input. Each line contains six integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>. These six integers denote an altitude triangle with vertex A <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark>, B <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> and C <SPAN CLASS="MATH">(<I>x</I><SUB>3</SUB>, <I>y</I><SUB>3</SUB>)</SPAN> <tex2html_verbatim_mark> respectively. Input is terminated by a case where all six integers are zero. The points A, B and C will not be collinear.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input produce four lines of outputs. The description of these four lines is given below:<P><P><BR>The first line contains the serial of output. Each of the next three lines contains two floating-point numbers, which are actually the coordinate of D, E and F respectively. Note that for a given altitude triangle ABC, there can be four possible triangles DEF. But you are requested only to find the one that is acute. Also note that judge data will be such that precision errors should not occur if you use double precision floating-point numbers. Absolute values of none of the output numbers will be greater than 100000 and all the numbers should have three digits after the decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
682 1369 3981 1233 4333 4583
4131 734 1249 4705 2815 475
2815 475 4131 734 1249 4705
0 0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
6539.582 3443.107
-1528.155 7610.801
1491.578 -917.367
Case 2:
-1810.802 3068.269
3810.093 -82.858
6872.845 7713.274
Case 3:
6872.845 7713.274
-1810.802 3068.269
3810.093 -82.858
</PRE><P>
______________________________________________________
3294||||||false||||||
<P>Jingjing the panda lives in a forest containing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> pieces of bamboo land. Each bamboo land is very small and can be regarded as a single point. Bamboo land <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> contains <SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> bamboos and is associated with a ``deliciousness'' <SPAN CLASS="MATH"><I>W</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="363" HEIGHT="522" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3294.jpg ALT="\epsfbox{p3294.eps}"> <tex2html_verbatim_mark></DIV><P>Jingjing eats all bamboos in a selected bamboo land every day. He has a bad habit: the deliciousness of the bamboo land he selects must be strictly larger than that of the day before.<P>Moving from one land to another is very tiring. The longer Jingjing walks before arriving a bamboo land <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, the more bamboo he is expecting. If the distance he walked from the last bamboo land is strictly larger than the number of bamboos he finds in the current land (i.e <SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>), he will die of sadness.<P>Distance of two points <SPAN CLASS="MATH">(<I>x</I><SUB>0</SUB>, <I>y</I><SUB>0</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> equals to <SPAN CLASS="MATH">| <I>x</I><SUB>0</SUB> - <I>x</I><SUB>1</SUB>| + | <I>y</I><SUB>0</SUB> - <I>y</I><SUB>1</SUB>|</SPAN> <tex2html_verbatim_mark>, since Jingjing only moves north, south, east and west.<P>When you send Jingjing in one bamboo land someday, how many days can Jingjing survive (Jingjing is clever enough to find out the optimal way of living)?<P>We need this information so that we can bring him out before he dies.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3294.jpg ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3294.jpg ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>), the number of test cases. Each test case contains several lines.<P>The first line contains a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3294.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3294.jpg ALT="$ \le$">100, 000</SPAN> <tex2html_verbatim_mark>), the number of bamboo lands. The next n lines each contains 4 integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>W</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, indicating the coordinate of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th bamboo land, its deliciousness and number of bamboos.<P>You may assume that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3294.jpg ALT="$ \le$"><I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB>, <I>W</I><SUB>i</SUB>, <I>L</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3294.jpg ALT="$ \le$">1, 000, 000</SPAN> <tex2html_verbatim_mark>. No two lands have the same deliciousness. Two bamboo lands can be so close that they can be regarded as at the same point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number followed by the number of days Jingjing can survive. Look at the output for sample input for details.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
0 0 3 4
2 2 2 3
5 5 1 3
3
0 0 3 4 
2 2 2 3
5 5 1 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2
Case 2: 2
</PRE><P>
______________________________________________________
3295||||||false||||||
<P>Triangles are polygons with three sides and strictly positive area. Lattice triangles are the triangles all whose vertexes have integer coordinates. In this problem you have to find the number of lattice triangles in an <SPAN CLASS="MATH"><I>M</I> <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> grid. For example in a (1 <SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark> 2) grid there are 18 different lattice triangles as shown in the picture below:<P><DIV ALIGN="CENTER"><IMG WIDTH="931" HEIGHT="353" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3295.jpg ALT="\epsfbox{p3295.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains at most 21 sets of inputs.<P>Each set of input consists of two integers <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (<!-- MATH
 $0 < M, N \le 1000$
 --> <SPAN CLASS="MATH">0 &lt; <I>M</I>, <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3295.jpg ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>). These two integers denote that you have to count triangles in an <SPAN CLASS="MATH">(<I>M</I> <TT>x</TT> <I>N</I>)</SPAN> <tex2html_verbatim_mark> grid.<P>Input is terminated by a case where the value of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> are zero. This case should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of input produce one line of output. This output contains the serial of output followed by the number lattice triangles in the <SPAN CLASS="MATH">(<I>M</I> <TT>x</TT> <I>N</I>)</SPAN> <tex2html_verbatim_mark> grid. You can assume that number of triangles will fit in a 64-bit signed integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1
1 2
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 4
Case 2: 18
</PRE>
______________________________________________________
3296||||||false||||||
<P>The RSA encryption algorithm requires two large prime numbers to compute an encryption / decryption key pair. The bigger the prime numbers, the harder it becomes to compromise your encrypted data. Thus, the search for large prime numbers begins...<P>You have developed a novel algorithm for generating <SPAN CLASS="textit">potential</SPAN> prime numbers. However, since no known deterministic algorithm exists that generates prime numbers, you know that you will have a few non-primes in your output, so you have to filter your algorithm's output to extract the largest prime number.<P>Your task is simple: given a sequence of numbers, find the largest prime number amongst them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input will consist of a number of records. Each record is a sequence of integers in the range 2 to <SPAN CLASS="MATH">2<SUP>32</SUP> - 1</SPAN> <tex2html_verbatim_mark>, terminated by the value 0. The last record in the input set will be terminated by the number `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input record, your output should be the largest prime number in the sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
7 
21 
9 
11 
101 
13 
0 
65535 
131071 
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
101 
131071
</PRE><P>
______________________________________________________
3297||||||false||||||
<P>Nick and Sharon are practising for the ACM ICPC, which they do by setting really hard questions for each other. Sharon has set a really nasty question for Nick: she takes a list of all the numbers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, and shuffles them so that the first number in the list is 1, and the last number in the list is <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. The rest of the numbers in between 1 and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> are in some random order. She then writes the numbers out in this shuffled order on a <SPAN CLASS="MATH">1 <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> board and places some coin on several squares of the board. Nick must now move the coins on the board, subject to a few rules:<P><OL><LI>Each coin must always move forward (towards the last square, which has the number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> written on it). </LI><LI>If a coin is on a square with the number <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> written on it, then it _must_ move to the next square whose value is greater than <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>. </LI></OL><P>With these rules, Nick must work out how many moves in total it takes to move all the coins to the last square (with the number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> written on it). You must help him do this.<P><P><BR>For example, suppose Sharon writes down the list 1, 3, 2, 4, 5 on the board (so <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is 5 in this example). She puts coins on the first and third squares (with 1 and 2 written on them). From 1, the first coin would move to 3, then to 4 and finally to 5, meaning that it takes 3 moves to reach 5. From 2, the second coin would move to 4 and then to 5, meaning that it takes 2 moves to reach 5. Thus the total number of moves needed to move all the coins is 5.<P>However, just giving Nick one of these boards is too easy, so Sharon has prepared several of them, for which Nick needs to work out the answer. Your task is to help him do this.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of several boards, each starting with a line containing two integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> are both is -1, this means that the end of the input has been reached, and your program should stop.<P>If <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is not -1, then it represents the length of the board. <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3297img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3297img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the number of coins that Sharon puts onto the board. <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3297img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/3297img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>. The next line will contain exactly <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> space-separated integers, which represent the numbers on the board. The first number in the list will always be 1, and the last number will always be <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. Each number from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> will appear in the list exactly once. The next line will contain exactly <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> space-separated integers, which represent the squares on the board where the coins are placed. These are board positions, and do not refer to the numbers written on the board.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each board in the input, your program should output a line containing a single integer, which is the number of moves required to move all the coins to the last square.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 1 
1 3 2 4 
1 
6 2 
1 3 4 2 5 6 
2 4 
-1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT> </H2><P><PRE>
2 
5
</PRE><P>
______________________________________________________
3298||||||false||||||
<P>Dictionary-based compression algorithms, like those belonging to the LZ77 family, typically build up a table of codes representing strings (or <SPAN CLASS="textit">patterns</SPAN>) that appeared recently in the input. The idea is that when a pattern is encountered again in the input stream, the algorithm can output the code for that pattern, instead of the pattern itself. If the codes are constructed correctly, the code (representing the pattern) will be shorter than the pattern itself, thus achieving compression.<P>It just so happens that you have already written the hard part of the algorithm that constructs the table of codes and their corresponding patterns. All that is left to do is to parse the input stream optimally, so that, given more than one possible match from your code table, you choose the permutation that minimises the cost (or length) of the output stream.<P>Consider the following table of patterns, with their associated costs (note that the encodings of the actual codes have been omitted, since they are not relevant to this part of the algorithm):<P><DIV ALIGN="CENTER"><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Pattern</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Cost</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>abc</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>ab</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>bcaa</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD></TR></TABLE></DIV><P>Thus, given the table above, consider two possible ways in which the input stream<P><P><BR><TT>abcaaabbaabc</TT><P><P><BR>could be parsed. If your algorithm were to implement the ``greedy" strategy, the following parsing would result:<P><P><BR><TT>(abc)(a)(a)(ab)(b)(a)(abc)</TT><P><P><BR>with a total cost of 4 + 2 + 2 + 1 + 3 + 2 + 4 = 18. By careful inspection, it is possible to see that a better parsing of this input stream is possible, namely<P><P><BR><TT>(a)(bcaa)(ab)(b)(a)(abc)</TT><P><P><BR>with a total cost of 2 + 3 + 1 + 3 + 2 + 4 = 15.<P>Your objective is to implement an algorithm that will determine the optimal parsing of a given input stream, for a given code table. You must print the optimal cost as output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each input record will start with the number of codes in the table, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> pairs of the form<P><P><BR><!-- MATH
 $<cost> <pattern>$
 --><SPAN CLASS="MATH">&lt; <I>cost</I> &gt; &lt; <I>pattern</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>After the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> pairs, a single string, <SPAN CLASS="MATH">&lt; <I>data</I> &gt;</SPAN> <tex2html_verbatim_mark>, follows.<P>You may assume that the <SPAN CLASS="MATH">&lt; <I>pattern</I> &gt;</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">&lt; <I>data</I> &gt;</SPAN> <tex2html_verbatim_mark> elements contain only characters in the set `<TT>a</TT>' through `<TT>z</TT>'. Your input may contain any number of records of this form, with a value of <SPAN CLASS="MATH"><I>n</I> = - 1</SPAN> <tex2html_verbatim_mark> indicating the end of the input stream.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input record, you must output the cost of the optimal parsing of <SPAN CLASS="MATH">&lt; <I>data</I> &gt;</SPAN> <tex2html_verbatim_mark> given the code table.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
4 abc 
1 ab 
3 bcaa 
2 a 
3 b 
3 c 
abcaaabbaabc 
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
15
</PRE><P>
______________________________________________________
3299||||||false||||||
<P>You have just made a bet with a friend: he believes in the inherent randomness of the <SPAN CLASS="textit">Pachinko</SPAN> game, while you believe that it is governed by simple physics, and is therefore predictable. To prove your bet, you have to set up an experiment, and predict beforehand where the ball will end up. But first, the more fundamental question: What on earth is a <SPAN CLASS="textit">Pachinko</SPAN> game?<P>The diagram below illustrates the set-up: The game consists of a board, mounted vertically, with a number of cylindrical pegs fitted to it. The diagram illustrates the front view, <SPAN CLASS="textit">i.e.</SPAN> the cylinders are sticking out of the page (and are thus parallel to the surface of the earth). Below the pegs, a number of ``bins" have been painted on the board, along with the ``finish line", <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>.<P>The game starts when a small metal ball is released somewhere above the topmost peg. The ball then falls under the influence of gravity, bouncing off the pegs, until it crosses the line <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>. At the instant that the center of the ball falls exactly on the line <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, the bin which the ball falls inside of is recorded as the ``winning bin".<P><DIV ALIGN="CENTER"><IMG WIDTH="515" HEIGHT="429" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="\epsfbox{p3299.eps}"> <tex2html_verbatim_mark></DIV><P>Some people believe that the distribution of the balls (amongst the bins) can be influenced using psychic powers. You have wrapped some tinfoil around your friend's head, just in case. Your task is to write a simulation program to calculate in which bin the ball will end up, given that you know the exact starting position of the ball. You assumed the following physical model of the game:<P><OL><LI>The ball falls under the influence of gravity, and experiences linear drag.  </LI><LI>The ball starts falling from the initial position with an initial velocity of [0,0]. </LI><LI>The collisions between the ball and the peg are elastic, <SPAN CLASS="textit">i.e.</SPAN> no energy is lost. </LI><LI>The ball does not experience any additional friction when it makes contact with the pegs, therefore it does not rotate during collisions, it just bounces. </LI><LI>The initial direction in which the ball bounces off the peg is calculated by reflecting the incoming direction around the normal vector of the peg at the point of contact. </LI></OL><P>The motion of a body in free fall, experiencing only linear drag, can be represented using the equations<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\displaystyle \bf P$">(<I>t</I>) = <IMG WIDTH="28" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\displaystyle \bf C_{{v}}^{}$"><IMG WIDTH="23" HEIGHT="47" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\displaystyle {\frac{{m}}{{k}}}$"><I>e</I><SUP><IMG WIDTH="23" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\scriptstyle {\frac{{k\cdot t}}{{m}}}$"></SUP> - <IMG WIDTH="20" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\displaystyle \bf G$"><IMG WIDTH="64" HEIGHT="54" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\displaystyle {\frac{{m\cdot g\cdot t}}{{k}}}$"> + <IMG WIDTH="28" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\displaystyle \bf C_{{p}}^{}$"></DIV><P><tex2html_verbatim_mark></P>and<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="20" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\displaystyle \bf V$">(<I>t</I>) = <IMG WIDTH="28" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\displaystyle \bf C_{{v}}^{}$"><I>e</I><SUP><IMG WIDTH="23" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\scriptstyle {\frac{{k\cdot t}}{{m}}}$"></SUP> - <B>G</B><IMG WIDTH="45" HEIGHT="48" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$\displaystyle {\frac{{m\cdot g}}{{k}}}$"></DIV><P><tex2html_verbatim_mark></P>where<P><P><BR><TABLE COLS=3><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf P$">(<I>t</I>)</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>a vector indicating the position of the object at time <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf V$">(<I>t</I>)</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>a vector indicating the velocity of the object at time <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>time in seconds, <SPAN CLASS="MATH"><I>t</I> = 0</SPAN> <tex2html_verbatim_mark> when ball is released</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf C_{{v}}^{}$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf V$">(0) + <IMG WIDTH="20" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf G$"><IMG WIDTH="31" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ {\frac{{m\cdot g}}{{k}}}$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf V$">(0)</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>[initial horizontal velocity, initial vertical velocity]</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf G$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>[0, -1]. This is the direction of gravity</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>mass of object, in kg</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9.8 <SPAN CLASS="MATH"><I>ms</I><SUP>-2</SUP></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>viscosity coefficient = -1.0</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf C_{{p}}^{}$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf P$">(0) - <IMG WIDTH="28" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf C_{v}^{}$"><IMG WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ {\frac{{m}}{{k}}}$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \bf P$">(0)</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>[initial horizontal position, initial vertical position]</TD></TR></TABLE><P><P><BR>You may further assume the following values for the remaining constants:<P>Mass of ball, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> = 1.25<P>Radius of ball = 0.5<P>Radii of pegs = 1.0<P><P><BR>You may notice that your simulation (and thus your physical experiment) has rather large dimensions. Just in case the tinfoil fails.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input is a description of the configuration of the pegs and the bins, followed by a number of initial positions for the ball. The input thus assumes the following format:<P><P><BR><!-- MATH
 $<num. \ of \ pegs, N>$
 --><SPAN CLASS="MATH">&lt; <I>num</I>.&nbsp;<I>of</I>&nbsp;<I>pegs</I>, <I>N</I> &gt;</SPAN> <tex2html_verbatim_mark><P><!-- MATH
 $<peg\_1 \ x> \ <peg\_1 \ y>$
 --><SPAN CLASS="MATH">&lt; <I>peg</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_$">1&nbsp;<I>x</I> &gt; &nbsp; &lt; <I>peg</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_$">1&nbsp;<I>y</I> &gt;</SPAN> <tex2html_verbatim_mark><P><!-- MATH
 $<peg\_2 \ x> \ <peg\_2 \ y>$
 --><SPAN CLASS="MATH">&lt; <I>peg</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_$">2&nbsp;<I>x</I> &gt; &nbsp; &lt; <I>peg</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_$">2&nbsp;<I>y</I> &gt;</SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH">...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</SPAN> <tex2html_verbatim_mark><P><!-- MATH
 $<peg\_N \ x> \ <peg\_N \ y>$
 --><SPAN CLASS="MATH">&lt; <I>peg</I><IMG WIDTH="27" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_N$">&nbsp;<I>x</I> &gt; &nbsp; &lt; <I>peg</I><IMG WIDTH="27" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_N$">&nbsp;<I>y</I> &gt;</SPAN> <tex2html_verbatim_mark><P><!-- MATH
 $<num. \ of \ bins> \ <leftmost\_bin \ x> \ <finish \ line \ y> \ <bin \ width>$
 --><SPAN CLASS="MATH">&lt; <I>num</I>.&nbsp;<I>of</I>&nbsp;<I>bins</I> &gt; &nbsp; &lt; <I>leftmost</I><IMG WIDTH="35" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_bin$">&nbsp;<I>x</I> &gt; &nbsp; &lt; <I>finish</I>&nbsp;<I>line</I>&nbsp;<I>y</I> &gt; &nbsp; &lt; <I>bin</I>&nbsp;<I>width</I> &gt;</SPAN> <tex2html_verbatim_mark><P><!-- MATH
 $<ball\_1 \ x> \ <ball\_1 \ y>$
 --><SPAN CLASS="MATH">&lt; <I>ball</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_$">1&nbsp;<I>x</I> &gt; &nbsp; &lt; <I>ball</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_$">1&nbsp;<I>y</I> &gt;</SPAN> <tex2html_verbatim_mark><P><!-- MATH
 $<ball\_2 \ x> \ <ball\_2 \ y>$
 --><SPAN CLASS="MATH">&lt; <I>ball</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_$">2&nbsp;<I>x</I> &gt; &nbsp; &lt; <I>ball</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_$">2&nbsp;<I>y</I> &gt;</SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH">...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</SPAN> <tex2html_verbatim_mark><P><TT>-999</TT><P><P><BR>Note that an arbitrary number of ball coordinates may follow the last bin description, with the end of input indicated by a single value of -999. These initial positions represent sequential runs of the same peg configuration, but with different initial positions for the ball. There will only be one ball in the game at a time.<P>The bins are evenly spaced, with the first bin having an <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-interval of<P><P><BR><!-- MATH
 $[<leftmost\_bin \ x>, <leftmost\_bin \ x> + <bin \ width>)$
 --><SPAN CLASS="MATH">[ &lt; <I>leftmost</I><IMG WIDTH="35" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_bin$">&nbsp;<I>x</I> &gt; , &lt; <I>leftmost</I><IMG WIDTH="35" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_bin$">&nbsp;<I>x</I> &gt; + &lt; <I>bin</I>&nbsp;<I>width</I> &gt; )</SPAN> <tex2html_verbatim_mark>,<P><P><BR>and the second at<P><P><BR><!-- MATH
 $[<leftmost\_bin \ x> + <bin \ width>, <leftmost\_bin \ x> + 2*<bin \ width>)$
 --><SPAN CLASS="MATH">[ &lt; <I>leftmost</I><IMG WIDTH="35" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_bin$">&nbsp;<I>x</I> &gt; + &lt; <I>bin</I>&nbsp;<I>width</I> &gt; , &lt; <I>leftmost</I><IMG WIDTH="35" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/32/p3299.jpg ALT="$ \_bin$">&nbsp;<I>x</I> &gt; +2* &lt; <I>bin</I>&nbsp;<I>width</I> &gt; )</SPAN> <tex2html_verbatim_mark><P><P><BR>and so on. <P><P><BR>The value <!-- MATH
 $<finish \ line \ y>$
 --><SPAN CLASS="MATH">&lt; <I>finish</I>&nbsp;<I>line</I>&nbsp;<I>y</I> &gt;</SPAN> <tex2html_verbatim_mark> is the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> value of the finish line <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, that is, the bin into which the ball has fallen must be determined when the ball has reached this <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each initial ball position in the input, you must print out the number of the bin in which the ball will land when it crosses the finish line.<P>Bins are numbered from 1 through the number specified in the input.<P><P><BR><SPAN CLASS="textbf">Important:</SPAN> The time of contact, <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, in all collisions must be calculated accurate to a resolution of <SPAN CLASS="MATH">10<SUP>-10</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
 0 4 
-4 0 
 4 0 
3  -8  -4  8
 0.5 6 
-0.4 6 
-999
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
2
</PRE><P>
______________________________________________________
3300||||||false||||||
<P>Your favourite adventurer, Dr. Jones, happens to find himself in a bit of a tight spot (again). He has just liberated the sacred artifact from the temple of Doom<SPAN CLASS="MATH"><SUP>tm</SUP></SPAN> <tex2html_verbatim_mark> III, and the natives, being in a bad mood already, are in hot pursuit.<P>Now he faces a maze, resembling something like the diagram below:<P><DIV ALIGN="CENTER"><IMG WIDTH="444" HEIGHT="586" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="\epsfbox{p3300.eps}"> <tex2html_verbatim_mark></DIV><P>The maze consists of a square grid of pillars standing in a pit, with the distance between the pillars just exceeding the distance that Jones can safely jump across. Some of the gaps between the pillars are bridged with planks, so (in theory) it would be reasonably safe to cross. Falling down is not an option: the bottom of the pit is crawling with snakes.<P>The natives are closing in quickly (having spotted the pirated copy of the sacred artifact that Jones swapped out with the original much sooner than he had hoped), so Jones must cross the maze as quickly as possible.<P>Fortunately, Dr. Jones is in possession of a suitable plank that can be used to bridge one of the gaps between two of the pillars. He only has enough time to use it once, i.e. there is no time to pick it up and re-use it elsewhere.<P>It is up to you to calculate the shortest possible path through the maze, or Jones will face the same fate as those pesky marines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input consists of an arbitrary number of records, each record conforming to the following format:<P><P><BR><!-- MATH
 $<grid\_size>$
 --><SPAN CLASS="MATH">&lt; <I>grid</I><IMG WIDTH="42" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_size$"> &gt;</SPAN> <tex2html_verbatim_mark><P><!-- MATH
 $<bridge\_1\_endpoint\_1> \ <bridge\_1\_endpoint\_2>$
 --><SPAN CLASS="MATH">&lt; <I>bridge</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_$">1<IMG WIDTH="78" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_endpoint$"><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_$">1 &gt; &nbsp; &lt; <I>bridge</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_$">1<IMG WIDTH="78" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_endpoint$"><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_$">2 &gt;</SPAN> <tex2html_verbatim_mark><P><!-- MATH
 $<bridge\_2\_endpoint\_1> \ <bridge\_2\_endpoint\_2>$
 --><SPAN CLASS="MATH">&lt; <I>bridge</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_$">2<IMG WIDTH="78" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_endpoint$"><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_$">1 &gt; &nbsp; &lt; <I>bridge</I><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_$">2<IMG WIDTH="78" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_endpoint$"><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_$">2 &gt;</SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH">...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</SPAN> <tex2html_verbatim_mark><P><!-- MATH
 $<bridge\_n\_endpoint\_1> \ <bridge\_n\_endpoint\_2>$
 --><SPAN CLASS="MATH">&lt; <I>bridge</I><IMG WIDTH="21" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_n$"><IMG WIDTH="78" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_endpoint$"><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_$">1 &gt; &nbsp; &lt; <I>bridge</I><IMG WIDTH="21" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_n$"><IMG WIDTH="78" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_endpoint$"><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_$">2 &gt;</SPAN> <tex2html_verbatim_mark><P><TT>-1</TT><P><P><BR>The value <!-- MATH
 $<grid\_size>$
 --><SPAN CLASS="MATH">&lt; <I>grid</I><IMG WIDTH="42" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_size$"> &gt;</SPAN> <tex2html_verbatim_mark> represents the number of pillars in a row (and column).<P>The subsequent lines indicate the starting- and end-pillar number of each bridging plank. Pillars are numbered by row, starting from 1, as indicated in the diagram above. The pair of numbers <TT>2 3</TT> therefore indicate the presence of a plank (bridge) between pillars 2 and 3. You must calculate the shortest path from node 1 to node <!-- MATH
 $<grid\_size> * <grid\_size>$
 --><SPAN CLASS="MATH">&lt; <I>grid</I><IMG WIDTH="42" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_size$"> &gt; * &lt; <I>grid</I><IMG WIDTH="42" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3300.jpg ALT="$ \_size$"> &gt;</SPAN> <tex2html_verbatim_mark>. You can bridge one additional gap (only North-South or East-West, like the existing bridges) with the plank that Jones is carrying with him.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input record, your output should be the number of bridges that Jones used in his shortest path from the entrance to the exit of the maze.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
1 2 
2 3 
3 4 
4 8 
7 8 
9 10 
10 11 
7 11 
11 15 
13 14 
14 15 
15 16 
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6
</PRE><P>
______________________________________________________
3301||||||false||||||
<P>Given a set of arithmetic expressions in English, calculate their results and output the answer in English.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input will contain a single integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, which is the number of expressions that need to be evaluated. <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3301img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3301img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines will each contain an arithmetic expression of the form:<P><P><BR><!-- MATH
 $<NUMBER1> \ <OPERATION> \ <NUMBER2>$
 --><SPAN CLASS="MATH">&lt; <I>NUMBER</I>1 &gt; &nbsp; &lt; <I>OPERATION</I> &gt; &nbsp; &lt; <I>NUMBER</I>2 &gt;</SPAN> <tex2html_verbatim_mark><P>where <!-- MATH
 $<OPERATION>$
 --><SPAN CLASS="MATH">&lt; <I>OPERATION</I> &gt;</SPAN> <tex2html_verbatim_mark> is one of:<P><PRE>
plus 
minus 
times 
divided by
</PRE><P>and <SPAN CLASS="MATH">&lt; <I>NUMBER</I>1 &gt;</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">&lt; <I>NUMBER</I>2 &gt;</SPAN> <tex2html_verbatim_mark> are English representations of integers <SPAN CLASS="MATH"><I>NUM</I>1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>NUM</I>2</SPAN> <tex2html_verbatim_mark>, such that <SPAN CLASS="MATH">-999999999<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3301img1.png ALT="$ \le$"><I>NUM</I>1, <I>NUM</I>2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3301img1.png ALT="$ \le$">999999999</SPAN> <tex2html_verbatim_mark><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each arithmetic expression, your program should calculate the result of that expression, <SPAN CLASS="MATH"><I>ANS</I></SPAN> <tex2html_verbatim_mark>, and output the English representation <SPAN CLASS="MATH">&lt; <I>ANSWER</I> &gt;</SPAN> <tex2html_verbatim_mark>. If the operation is `<TT>divided by</TT>', then you are guaranteed that <SPAN CLASS="MATH"><I>NUM</I>2</SPAN> <tex2html_verbatim_mark> will divide into <SPAN CLASS="MATH"><I>NUM</I>1</SPAN> <tex2html_verbatim_mark> without any remainder. Also, <SPAN CLASS="MATH">-999999999<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3301img1.png ALT="$ \le$"><I>ANS</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3301img1.png ALT="$ \le$">999999999</SPAN> <tex2html_verbatim_mark>.<P><P><P><BR><B>Numbers and English</B><P><P><BR>Every integer from -999 999 999 to 999 999 999 except 0 can be represented as<P><P><BR><TT>[minus] [<SPAN CLASS="MATH">&lt; <I>prefix</I> &gt;</SPAN> <tex2html_verbatim_mark> million] [<SPAN CLASS="MATH">&lt; <I>prefix</I> &gt;</SPAN> <tex2html_verbatim_mark> thousand] [<SPAN CLASS="MATH">&lt; <I>prefix</I> &gt;</SPAN> <tex2html_verbatim_mark>] </TT><P><P><BR>where [...] means that the ... is optional, and <SPAN CLASS="MATH">&lt; <I>prefix</I> &gt;</SPAN> <tex2html_verbatim_mark> is represented as<P><P><BR><TT>[<SPAN CLASS="MATH">&lt; <I>digit</I> &gt;</SPAN> <tex2html_verbatim_mark> hundred] [[and] (<SPAN CLASS="MATH">&lt; <I>n</I> - <I>ty</I> &gt;</SPAN> <tex2html_verbatim_mark> [<SPAN CLASS="MATH">&lt; <I>digit</I> &gt;</SPAN> <tex2html_verbatim_mark>] | <SPAN CLASS="MATH">&lt; <I>teen</I> &gt;</SPAN> <tex2html_verbatim_mark> | ten | <SPAN CLASS="MATH">&lt; <I>digit</I> &gt;</SPAN> <tex2html_verbatim_mark>)] </TT><P><P><BR>where (x | y | z | ...) means exactly one of x, y, z, ... and <SPAN CLASS="MATH">&lt; <I>n</I> - <I>ty</I> &gt;</SPAN> <tex2html_verbatim_mark> is<P><P><BR><TT>(twenty | thirty | forty | fifty | sixty | seventy | eighty | ninety) </TT><P><P><BR>and <SPAN CLASS="MATH">&lt; <I>teen</I> &gt;</SPAN> <tex2html_verbatim_mark> is<P><P><BR><TT>(eleven | twelve | thirteen | fourteen | fifteen | sixteen | seventeen | eighteen | nineteen) </TT><P><P><BR>and <SPAN CLASS="MATH">&lt; <I>digit</I> &gt;</SPAN> <tex2html_verbatim_mark> is<P><P><BR><TT>(one | two | three | four | five | six | seven | eight | nine) </TT><P><P><BR>The number 0 is represented simply by<P><P><BR><TT>nought</TT><P><P><BR><P><BR>In the <SPAN CLASS="MATH">&lt; <I>prefix</I> &gt;</SPAN> <tex2html_verbatim_mark> definition, the [and] part is used iff either:<P><UL><LI>The [<SPAN CLASS="MATH">&lt; <I>digit</I> &gt;</SPAN> <tex2html_verbatim_mark> hundred] part of <SPAN CLASS="MATH">&lt; <I>prefix</I> &gt;</SPAN> <tex2html_verbatim_mark> is used </LI><LI>This is is the right-most <SPAN CLASS="MATH">&lt; <I>prefix</I> &gt;</SPAN> <tex2html_verbatim_mark> in the number and there is some other <SPAN CLASS="MATH">&lt; <I>prefix</I> &gt;</SPAN> <tex2html_verbatim_mark> left of this one </LI></UL><P><P><P><BR><B>Examples of numbers in English: </B><P><P><BR>131 - one hundred and thirty one<P>* note the use of the ``and" here because there's a ``hundred" part in the <SPAN CLASS="MATH">&lt; <I>prefix</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>2005 - two thousand and five<P>* note the use of the ``and" because there are two &lt;prefix&gt;'es here (``two" and ``and five") and ``and five" is the right-most of the two prefixes<P><P><BR>999 999 999 - nine hundred and ninety nine million nine hundred and ninety nine thousand nine hundred and ninety nine<P><P><BR>-450 002 - minus four hundred and fifty thousand and two<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
ten plus twenty 
minus three times two 
one hundred and twenty one divided by one hundred and twenty one 
two thousand minus minus one million
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
thirty 
minus six 
one 
one million and two thousand

______________________________________________________
3302||||||false||||||
<P><BLOCKQUOTE><SPAN CLASS="textit">The Disc, being flat, has no real horizon. Any adventurous sailors who get funny ideas from staring at eggs and oranges for too long and set out for the antipodes soon learned that the reason why distant ships sometimes looked as though they were disappearing over the edge of the world was that they were disappearing over the edge of the world.</SPAN></BLOCKQUOTE><P><DIV CLASS="rightline" ID="par154" ALIGN="RIGHT"><BLOCKQUOTE>(Terry Pratchett - Colour of Magic)</BLOCKQUOTE></DIV><P>Not so long time ago people used to believe that they live on 2-D world and if they will travel long enough in one direction, they will fall down over the edge. Even when it was proved that the Earth is rounded some of them were still afraid to travel to the southern hemisphere.<P>Try to imagine one 1-D (linear) world. On such world there are only two possible directions (left and right). All inhabitants of such world were created exactly at the same time and suddenly all of them start to move (all with same constant velocity) in one or the other direction. If two inhabitants encounter each other, they politely exchange greetings and then they turn around and start to move in an opposite direction. When an inhabitant reaches the end of the world he falls away and disappears.<P>Your task is to determine, for a given scenario of creation, which inhabitant and when (counting from the moment of creation) will be the last one to fall away. You can assume that the time required to exchange greetings and turn around is 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of multiple descriptions (data sets) of the creation moment. File structure is as follows:<P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>L V</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>DIR</I>&nbsp;<I>POS</I>&nbsp;<I>NAME</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark><P><P><BR>The first line defines the number of inhabitants (<SPAN CLASS="MATH"><I>N</I> &lt; 32000</SPAN> <tex2html_verbatim_mark>). Data set starting with value <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> represents the end of the input file. The second line contains length of the world <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>(float) and velocity of inhabitants <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>(float). Both values are always positive. In next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines the data about inhabitants are given in an order of increasing <SPAN CLASS="MATH"><I>POS</I></SPAN> <tex2html_verbatim_mark> (positive direction):<P><P><BR><SPAN CLASS="MATH"><I>DIR</I></SPAN> <tex2html_verbatim_mark> - initial direction (`<TT>p</TT>' or `<TT>P</TT>' for positive and `<TT>n</TT>' or `<TT>N</TT>' for negative)<P><SPAN CLASS="MATH"><I>POS</I></SPAN> <tex2html_verbatim_mark> - position in the time of creation ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3302img1.png ALT="$ \le$"><I>POS</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3302img1.png ALT="$ \le$"><I>L</I></SPAN> <tex2html_verbatim_mark>)<P><SPAN CLASS="MATH"><I>NAME</I></SPAN> <tex2html_verbatim_mark> - name of inhabitant (string up to 250 characters)<P><P><BR>Input values within one line are separated with at least one space and there will be no empty lines in input. You may assume that input is always correct and that each data set has only one unique solution.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of one line per each input data set. The first value should be the time when the last inhabitant will fall of the linear world counting from the moment of creation. Value should be printed truncated to two decimal places in a field 13 characters wide. The second value should be the name of the inhabitant. Values should be separated with single space character.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
13.5 2 
p 3.5 Smarty
4
10   1
p   1  Helga
n 3 Joanna
p   5   Venus
n  7  Clever
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
         5.00 Smarty
         9.00 Venus
</PRE><P>
______________________________________________________
3303||||||false||||||
<P>John Doe is a famous DJ and, therefore, has the problem of optimizing the placement of songs on his tapes. For a given tape and for each song on that tape John knows the length of the song and the frequency of playing that song. His problem is to record the songs on the tape in an order that minimizes the expected access time. If the songs are recorded in the order <SPAN CLASS="MATH"><I>S</I><SUB>(s1)</SUB>,..., <I>S</I><SUB>s(n)</SUB></SPAN> <tex2html_verbatim_mark> on the tape then the function that must be minimized is<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="27" HEIGHT="63" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3303img1.png ALT="$\displaystyle \sum^{{n}}_{{i=1}}$"><I>f</I><SUB>s(i)</SUB><IMG WIDTH="28" HEIGHT="75" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3303img1.png ALT="$\displaystyle \sum^{{s(i)}}_{{j=1}}$"><I>l</I><SUB>s(j)</SUB></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>f</I><SUB>s(i)</SUB></SPAN> <tex2html_verbatim_mark> is the frequency of playing the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th song and <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> is the length of the song. Can you help John?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The program input is from a text file. Each data set in the file stands for a particular set of songs that must be recorded on a tape. A data set starts with the number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>(fits a 16 bit integer) of songs. Follow <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> the song specifications, and in the end, a number representing the position of a song <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> on the optimized tape. A song specification consists of the song identifier (fits an integer), the length of the song (fits a 16 bit integer), and the frequency of playing the song (a floating-point number). The program prints the identifier of the song <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>.<P>White spaces can occur freely in the input. The input data are correct and terminate with an end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of data the program prints the result to the standard output from the beginning of a line.<P><P><BR><B>Note:</B> An input/output sample is in the table below. There is a single data set that contains 5 song specifications. The first song has the identifier 1, length 10 and playing frequency 45.5 etc. The result for the data set is the identifier of the 3rd song on the optimized tape. It is 2 for the given example.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
1      10     45.5
2      5      20 
30     20     10 
400    50     35 
15     17     89.9
3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
3304||||||false||||||
<P>Sudoku is a very simple task. A square table with 9 rows and 9 columns is divided to 9 smaller squares <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> as shown on the Figure. In some of the cells are written decimal digits from 1 to 9. The other cells are empty. The goal is to fill the empty cells with decimal digits from 1 to 9, one digit per cell, in such way that in each row, in each column and in each marked <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> subsquare, all the digits from 1 to 9 to appear. Write a program to solve a given Sudoku-task.<P><DIV ALIGN="CENTER"><IMG WIDTH="386" HEIGHT="364" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3304.jpg ALT="\epsfbox{p3304.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input data will start with the number of the test cases. For each test case, 9 lines follow, corresponding to the rows of the table. On each line a string of exactly 9 decimal digits is given, corresponding to the cells in this line. If a cell is empty it is represented by `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program should print the solution in the same format as the input data. The empty cells have to be filled according to the rules. If solutions is not unique, then the program may print any one of them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
103000509
002109400
000704000
300502006
060000050
700803004
000401000
009205800
804000107
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
143628579
572139468
986754231
391542786
468917352
725863914
237481695
619275843
854396127
</PRE><P>
______________________________________________________
3305||||||false||||||
<P>John Doe, a skilled pilot, enjoys traveling. While on vacation, he rents a small plane and starts visiting beautiful places. To save money, John must determine the shortest closed tour that connects his destinations. Each destination is represented by a point in the plane <!-- MATH
 $p_{i} = <x_{i},y_{i}>$
 --><SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> = &lt; <I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB> &gt;</SPAN> <tex2html_verbatim_mark>. John uses the following strategy: he starts from the leftmost point, then he goes strictly left to right to the rightmost point, and then he goes strictly right back to the starting point. It is known that the points have distinct <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinates.<P>Write a program that, given a set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points in the plane, computes the shortest closed tour that connects the points according to John's strategy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The program input is from a text file. Each data set in the file stands for a particular set of points. For each set of points the data set contains the number of points, and the point coordinates in ascending order of the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> coordinate. White spaces can occur freely in input. The input data are correct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of data, your program should print the result to the standard output from the beginning of a line. The tour length, a floating-point number with two fractional digits, represents the result.<P><P><BR><B>Note:</B> An input/output sample is in the table below. Here there are two data sets. The first one contains 3 points specified by their <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates. The second point, for example, has the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> coordinate 2, and the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinate 3. The result for each data set is the tour length, (6.47 for the first data set in the given example).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
1 1
2 3
3 1
4 
1 1 
2 3
3 1
4 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6.47
7.89
</PRE><P>
______________________________________________________
3306||||||false||||||
<P>Mothy is a small moth. Mothy and his mother are placed on a very old pair of jeans. Because the jeans are very old they are covered with patches. Sometimes the patches overlap each other. Every patch is a convex polygon and is made by some material different from cotton. Mothy wants to go to his mother in the fastest possible way. He cannot move without eating and because of his age he cannot eat anything except jeans and cotton thread. Despite his age Mothy is very intelligent, he can move following precise coordinates but he is unable to compute them. Write a program that calculates the length of the minimal path from the position of Mothy to the position of his mother. Mothy must be able to pass through this path. Consider that the pair of old jeans is placed on a plane surface and is big enough. Mothy can move only at the surface of the jeans because he is not big enough to penetrate through them.<P>Because Mothy is so small he should be considered as a point. Mothy also can move on the edges of any of the patches because they are sewed with cotton threads. Mothy can move on common edges but cannot be on top of any patch.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> indicating the number of test cases. Each test case starts with number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> of patches, and four integer numbers - the coordinates <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> of Mothy's position and coordinates <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> of his mother's position, separated by white spaces <SPAN CLASS="MATH">(- 10000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3306img1.png ALT="$ \le$"><I>X</I>, <I>Y</I>, <I>U</I>, <I>V</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3306img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>. Each patch is described on a separate line starting with the number of vertices and followed by a pair of integer coordinates <SPAN CLASS="MATH">(- 10000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3306img1.png ALT="$ \le$"><I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3306img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark> for each of the vertices of the patch, separated by white spaces. The total number of vertices of polygons will not exceed 300.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each of the test cases program has to output on a separate line the length of the shortest path between Mothy and his mother. The result should be rounded to 3 digits after the decimal point. The program has to output `<TT>-1</TT>' if Mothy cannot reach his mother.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1 0 0 4 3
3 1 1 4 4 1 4
2 0 0 5 5
4 1 0 4 0 4 1
3 3 3 4 4 5 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5.000 
7.236
</PRE><P>
______________________________________________________
3307||||||false||||||
<P>After a period of intensive development of the transportation infrastructure, the government of Ruritania decides to take firm steps to strengthen citizens' confidence in the national road network and sets up a compensation scheme for adventurous driving (CSAD). Those driving on a road with holes, bumps and other entertaining obstacles get compensation; those driving on a decent road pay tax. These compensations and taxes are obtained and paid in cash on entry on each road and depend on the entry point on the road. What you get and pay driving on a road from A to B may be different from what you get and pay driving on the same road from B to A. The Ruritarian authorities call <SPAN CLASS="textit">fee</SPAN> the amount of money paid as tax or obtained as compensation on entry on a road. A positive fee is a tax; a negative fee stands for compensation.<P>John Doe plans to take advantage of CSAD for saving money he needs to repair his old car. When driving from A to B, John follows a path he calls <SPAN CLASS="textit">optimal</SPAN>: a path that is <SPAN CLASS="textit">rewarding</SPAN> and has the minimal length out of the paths with the minimal <SPAN CLASS="textit">weight</SPAN> from A to B. In John's opinion, a path is rewarding if all the roads in the path are rewarding, and a road <SPAN CLASS="MATH">(<I>X</I>, <I>Y</I>)</SPAN> <tex2html_verbatim_mark> is rewarding if it has the minimal entry fee out of the roads leaving <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>. The weight of a path is the sum of the entry fees paid along the path. The length of a path cumulates the length of the roads in the path. The problem is helping John to compute the weight and the length of an optimal path from A to B on a given map.<P><DIV ALIGN="CENTER"><IMG WIDTH="535" HEIGHT="204" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="\epsfbox{p3307.eps}"> <tex2html_verbatim_mark></DIV><P>For example, on the illustrated road map vertices designate cities and edges stand for roads. The label <TT><SPAN CLASS="MATH"><I>fuv</I></SPAN> <tex2html_verbatim_mark>[<SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>]<SPAN CLASS="MATH"><I>fvu</I></SPAN> <tex2html_verbatim_mark></TT> of the road <SPAN CLASS="MATH">(<I>u</I>, <I>v</I>)</SPAN> <tex2html_verbatim_mark> shows the fee <SPAN CLASS="MATH"><I>fuv</I></SPAN> <tex2html_verbatim_mark> for driving from <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>, the fee <SPAN CLASS="MATH"><I>fvu</I></SPAN> <tex2html_verbatim_mark> for driving from <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark>, and the length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> of the road. The path (0,2,4,3,5) from 0 to 5 is optimal: it is rewarding, has weight 2 (-1+3+0+0) and length 50 (5+10+5+30). The path (0,1,4,3,5), although rewarding and of weight 2, has length 51. The path (0,3,5) has weight 0 and length 20 but it is not rewarding.<P><P><BR>Write a program that reads several data sets from a text file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each data set encodes a road map and starts with four integers: the number <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> of towns on the map, the number <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$">5000</SPAN> <tex2html_verbatim_mark> of roads, the departure town <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$"><I>A</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>, and the destination town <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>. Follow <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> data quintuples <SPAN CLASS="MATH">(<I>u</I>, <I>v</I>, <I>fuv</I>[<I>L</I>]<I>fvu</I>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> are town identifiers (integers in the range <SPAN CLASS="MATH">0..<I>n</I> - 1</SPAN> <tex2html_verbatim_mark>), <SPAN CLASS="MATH">-100<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$"><I>fuv</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>fvu</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> are integer fees for driving on the road <SPAN CLASS="MATH">(<I>u</I>, <I>v</I>)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3307.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> is the integer length of the road. The quintuples may occur in any order. Except the quintuples, which do not contain white spaces, white spaces may occur freely in input. Input data terminate with an end of file and are correct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, the program prints from the beginning of a line the weight and the length of an optimal path, according to John's oppinion, from A to B. If there is no optimal path from A to B the text `<TT>VOID</TT>' is printed. If the weight of the optimal path from A to B has no lower bound the text `<TT>UNBOUND</TT>' is printed.<P><P><BR><B>Note:</B> An input/output sample is in the table below. The first data set encodes a road map with no optimal path from 0 to 2. The second data set corresponds to a map whose optimal path from 0 to 2 has an unbound weight. The third data set encodes the road map shown in the above figure.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 0 2 (0,1,0[1]0) (0,2,1[1]0) (1,2,1[1]0) 
3 3 0 2 (0,1,-1[1]1) (0,2,0[1]0) (1,2,0[1]1) 
7 11 0 5 (0,1,-1[6]4) (0,2,-1[5]4) (0,3,0[1]0) (1,4,3[10]1) 
         (2,4,3[10]1) (3,4,0[5]0) (3,5,0[30]0) (3,5,1[20]0) 
         (4,6,0[3]1) (6,5,1[8]0) (6,6,0[2]-1)
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
VOID
UNBOUND
2 50
</PRE><P>
______________________________________________________
3308||||||false||||||
<P>A sequence consisting of one digit, the number 1 is initially written into a computer. At each successive time step, the computer simultaneously tranforms each digit 0 into the sequence 1 0 and each digit 1 into the sequence 0 1. So, after the first time step, the sequence 0 1 is obtained; after the second, the sequence 1 0 0 1, after the third, the sequence 0 1 1 0 1 0 0 1 and so on.<P>How many pairs of consequitive zeroes will appear in the sequence after <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> steps?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Every input line contains one natural number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < n \le 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3308img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> print the number of consequitive zeroes pairs that will appear in the sequence after <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> steps.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
1
</PRE><P>
______________________________________________________
3309||||||false||||||
<P>Two words are said to be <SPAN CLASS="textbf">anagrams of each other</SPAN> if the letters from one word can be rearranged to form the other word. For example, <SPAN CLASS="textit">occurs</SPAN> is an anagram of <SPAN CLASS="textit">succor</SPAN>; however, <SPAN CLASS="textit">dear</SPAN> is not an anagram of <SPAN CLASS="textit">dared</SPAN> (because the <SPAN CLASS="textit">d</SPAN> appears twice in <SPAN CLASS="textit">dared</SPAN>, but only once in <SPAN CLASS="textit">dear</SPAN>). The most famous anagram pair (in English) is <SPAN CLASS="textit">dog</SPAN> and <SPAN CLASS="textit">god</SPAN>.<P>The <SPAN CLASS="textbf">anagrammatic distance</SPAN> between any two words is the minimum number of letters which must be removed so that the remaining portions of the two words become anagrams. For example, given the words <SPAN CLASS="textit">sleep</SPAN> and <SPAN CLASS="textit">leap</SPAN>, we need to remove a minimum of three letters -- two from <SPAN CLASS="textit">sleep</SPAN> and one from <SPAN CLASS="textit">leap</SPAN> -- before what's left are anagrams of each other (in each case, <SPAN CLASS="textit">lep</SPAN>). With words such as <SPAN CLASS="textit">dog</SPAN> and <SPAN CLASS="textit">cat</SPAN>, where the two have absolutely no letters in common, the anagrammatic distance is an extreme (explicitly 6) since all the letters need to be removed. (Here, a word is always an anagram of itself.)<P>You must write a program to calculate the anagrammatic distance between any two given words.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input will contain a positive integer value <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (less than 60,000) indicating the number of cases. Each case will consist of two words, possibly empty, each given on a single line (for a total of <SPAN CLASS="MATH">2<I>N</I></SPAN> <tex2html_verbatim_mark> additional lines).<P>Although they may have zero length, the words are simple -- the letter are all lowercase and are taken from the usual twenty-six letter English alphabet (<SPAN CLASS="textit">abcdefghijklmnopqrstuvwxyz</SPAN>). The longest word is <SPAN CLASS="textit">pneumonoultramicroscopicsilicovolcanoconiosis</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should consist of the case number and the anagrammatic distance, formatted as shown.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
crocus 
succor 
dares 
seared 
empty 

smell 
lemon
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1:  0
Case #2:  1
Case #3:  5
Case #4:  4
</PRE><P>
______________________________________________________
3310||||||false||||||
<P>Tomato Automata are small cool programs. You give them an infinite sequence of ones and zeros, and they give you a sequence of numbers. They are widely used in the Stanescu Operating System (SOS). They are written in Tomato Programming Language that is very simple. Here is its specification, tutorial and reference:<P><OL><LI>Tomato is a very simple but powerful language. </LI><LI>Lines in a Tomato program are numerated with integers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3310img1.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark> in the order they appear in the input. </LI><LI>There is exactly one command on a line. </LI><LI>The execution starts from the first line. </LI><LI>There are exactly five Tomato commands - <SPAN CLASS="textbf">ifgo</SPAN>, <SPAN CLASS="textbf">jump</SPAN>, <SPAN CLASS="textbf">pass</SPAN>, <SPAN CLASS="textbf">loop</SPAN>, and <SPAN CLASS="textbf">die</SPAN>. </LI><LI>When executed, each command prints its line number (into the output sequence). </LI><LI>The <SPAN CLASS="textbf">ifgo</SPAN> command has one argument - the line number of another instruction. It reads one bit from the input stream. If the bit is one, the execution jumps to the line with the given as argument line number. Otherwise the execution continues with the next line. </LI><LI>The <SPAN CLASS="textbf">jump</SPAN> command has one argument - the line number of another instruction. When executed, the execution jumps to the line with the given line number. </LI><LI>The <SPAN CLASS="textbf">pass</SPAN> command has no arguments. It does nothing (except printing its line number like all other commands). Then the execution continues with the next line. </LI><LI>The <SPAN CLASS="textbf">die</SPAN> command has no arguments. It terminates the execution of the program (printing its line number before that). The <SPAN CLASS="textbf">die</SPAN> command can not be used inside a loop. </LI><LI>The <SPAN CLASS="textbf">loop</SPAN> command is the only one with two arguments. It may be used to construct loops. The first argument is the starting line number <SPAN CLASS="MATH">&lt; <I>line</I> &gt;</SPAN> <tex2html_verbatim_mark> (less than the line number of the <SPAN CLASS="textbf">loop</SPAN> command), and the second is a positive integer <SPAN CLASS="MATH">&lt; <I>count</I> &gt;</SPAN> <tex2html_verbatim_mark>. When executed, it loops from the start line a <SPAN CLASS="MATH">&lt; <I>count</I> &gt; - 1</SPAN> <tex2html_verbatim_mark> number of times (because it is already executed once). When the loop is executed the given number of times, the execution continues with the next line. </LI><LI>The <SPAN CLASS="textbf">jump</SPAN> and <SPAN CLASS="textbf">ifgo</SPAN> commands must be used only with line numbers in the scope of the innermost loop containing them (they can not jump outside of the innermost loop or inside loops nested in the innermost loop that does not contain the command). </LI><LI>The loop command can not be used to create overlapping loops. Nested loops must be strictly nested (they can not use the same starting line). </LI><LI>When the last line of the program is executed, the execution continues from the first except when the last line is <SPAN CLASS="textbf">die</SPAN> command. </LI><LI>White spaces may occur freely before or after the command name and their arguments. </LI><LI>The maximal length of a line in Tomato Programming Language is 80 characters including spaces. </LI></OL><P>Stanescu has lots of Tomato programs. He is interested in maximal length of output sequence that specific program can generate, where the length is the number of printed line numbers. Obviously, it is not possible to test each possible input sequence (of ones and zeros), so he needs a program that computes this.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several programs, separated with an empty line. Each of them is a correct Tomato program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each given program your solution has to print on a separate line the maximal length ofthe output sequence the program could generate. Print `<TT>infinity</TT>' if there is no maximal length for the 9 output sequence. When finite, the maximal length will not exceed <SPAN CLASS="MATH">10<SUP>9</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
Ifgo 2 
loop 1 3 
die 

ifgo 2 
ifgo 3 
pass 
die 

      pass 
            ifgo 4 
            jump 5 
            ifgo 3 
      loop 2 2 
      pass 
loop 1 2 
die
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 
4 
23
</PRE>
______________________________________________________
3311||||||false||||||
<P>Outsourcing the position of phone receptionist at Fast Intelligent Telephony (FIT) hasn't worked out very well. The company has decided to automate the receptionist position so that a caller is greeted by a recording and asked to use the numeric keypad on their phone to enter the first <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> letters of the last name of the person they are calling, where the value of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is a non-negative whole number whose value depends on the names in the company directory. If a last name contains fewer than <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> letters, then input is terminated by an octothorpe (<SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>). You are to write a program to determine the value of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, if it exists.<P><DIV ALIGN="CENTER"><IMG WIDTH="294" HEIGHT="282" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3311.jpg ALT="\epsfbox{p3311.eps}"> <tex2html_verbatim_mark></DIV><P>The telephone keypad used by FIT's customers is shown to the left. A name can be entered by pressing a sequence of digit buttons. For example, the name <SPAN CLASS="textit">Able</SPAN> can be entered as 2253, <SPAN CLASS="textit">Edward</SPAN> as 339273, and <SPAN CLASS="textit">George</SPAN> as 436743. Spaces in a name are ignored as are other nonletter characters such as apostrophes (`). Thus, for example, <SPAN CLASS="textit">Van Kamp</SPAN> is entered as 8265267 and <SPAN CLASS="textit">O'Shea</SPAN> as 67432.<P>In an attempt to minimize caller inconvenience and proclivity to enter wrong digits, the design of the system requires only the minimum sequence length to identify all names on the directory list. For <SPAN CLASS="textit">Able</SPAN>, <SPAN CLASS="textit">Edward</SPAN>, and <SPAN CLASS="textit">O'Shea</SPAN> this length is 1 since these three differ in their first digit. If the name <SPAN CLASS="textit">Edwin</SPAN> is added, this length becomes 4.<P>If a name is shorter than the determined minimum length <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, then a caller is required to enter an octothorpe (<SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>) key after the name. For example, if the last name <SPAN CLASS="MATH"><I>Xi</I></SPAN> <tex2html_verbatim_mark> is added to <SPAN CLASS="textit">Able</SPAN>, <SPAN CLASS="textit">Edward</SPAN>, <SPAN CLASS="textit">O'Shea</SPAN>, and <SPAN CLASS="textit">Edwin</SPAN>, then a caller enters <SPAN CLASS="MATH">94#</SPAN> <tex2html_verbatim_mark> to reach Dr. Xi. (Notice there should be at most one octothorpe used.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a sequence of test cases. Each test case will have <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> names, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3311.jpg ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3311.jpg ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>, one per line. Each name will have from 1 to 80 characters. The end of each test case will be a line containing just one octothorpe. Input will be terminated at the first test case with <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark> (this case should not be processed).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each test case should produce one line of output of the form either<P><TT>Impossible</TT><P>if no length exists sufficient to distinguish all names from each other, or<P><TT><SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> names needing minimum length <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark></TT><P>where <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the number of names in the test case, and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the minimum length as described above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Able 
Edward 
O'Shea 
# 
Able 
Edward 
O'Shea 
Edwin 
# 
Able 
Edward 
O'Shea 
Edwin 
Xi 
# 
Cone 
Smith 
Bond 
# 
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 names needing minimum length 1 
4 names needing minimum length 4 
5 names needing minimum length 4 
Impossible
</PRE><P>
______________________________________________________
3312||||||false||||||
<P>
The famous Ordnance Survey (OS) maps cover Great Britain in many levels of detail. The large scale maps are used as highway road atlases, the medium scale maps for driving in rural areas and the small scale maps for hiking. Being typically British, where the roads are measured in miles and degrees of longitude are measured from Greenwich, the OS maps are based on the metric system and don't use degrees of longitude and latitude. Instead they use the British Grid system. 

<P>
The entire island is overlaid with Grid Squares that are 100 kilometers on a side and assigned a two-letter name (see Figure 1). Each grid square is subdivided into cells which are numbered. 

<P>
There are two cell sizes used for grid references. Large scale maps tend to use a 1 kilometer cell size, thus a grid square is divided into 100 by 100 cells and a cell is referenced by a 4 digit number. Smaller scale maps use a 0.1 km cell and cells are referenced by a 6 digit number. In both cases, the first half of the reference counts cells in the Easterly direction from the lower left corner and the second half counts cells in the Northerly direction. For example, the grid reference SP4583 can be found by looking at the <SPAN CLASS="MATH">46<SUP>th</SUP></SPAN>
<tex2html_verbatim_mark> cell to the East and the <SPAN CLASS="MATH">84<SUP>th</SUP></SPAN>
<tex2html_verbatim_mark> cell to the North inside grid square SP.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3312.eps}$
 -->
<IMG
 WIDTH="299" HEIGHT="233" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3312.jpg
 ALT="\epsfbox{p3312.eps}">
<tex2html_verbatim_mark>
</DIV>

<!--P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
SJ </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> SK </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> TF </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SO </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> SP </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> TL </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>ST </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> SU </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> TQ </TD></TR>
</TBODY>
</TABLE>

</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P-->
<BR>
<DIV ALIGN="CENTER"><SPAN  CLASS="textbf">Figure 1 - Grid Squares </SPAN>

</DIV>

<P>

<P>
<BR>
Your task is to determine the distance (in kilometers) between two grid cells. You may assume that the problem will be restricted to the subset of the British Grid system that is shown in Figure 1 and that distances are measured from the center of one cell to the center of another.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of one or more data sets. Each data set is a single line containing a pair of grid references which will be whitespace delimited and may be surrounded by an arbitrary amount of whitespace. A grid reference is guaranteed to be two upper case letters followed by 4 (for 1 km cells) or 6 digits (for 0.1 km cells). 

<P>
You must check for invalid grid references. If the two letters are not shown in Figure 1, the reference is considered invalid. If the one reference is for a 1 km cell and the other is for 0.1 km cell, the line is invalid. 

<P>
End of input will be marked by end of file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, you should print the two grid references input, separated by the word ``to". If the input is invalid, you should then print the message ``Invalid Grid Reference". If the input is valid, you should print the distance in km between the two grid cells rounded to two decimal places. Your output should follow the format shown in the Sample Output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
ST1035   SO2158 
SK9320 TM1234 
  SP102085    ST201072 
  SU120456 TF1020
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
ST1035 to SO2158: 123.49 km 
SK9320 to TM1234: Invalid Grid Reference 
SP102085 to ST201072: 135.57 km 
SU120456 to TF1020: Invalid Grid Reference
</PRE> 

<P>

______________________________________________________
3313||||||false||||||
<P>The readability score of a piece of text is a measure of how difficult it is to read. There is a variety of ways readability can be computed. In this problem you will have to calculate various readability scores for a given set of texts.<P>The readability scores are defined in terms of simpler constructs:<UL><LI>Characters. The number of alphabetic characters (`a' `z', and `A' `Z') in the text. </LI><LI>Syllables. A syllable contains at least one alphabetic character. In the input texts you will be given, each multi-syllable word has already been split into its syllables. If a word contains more than one syllable, they are separated by a vertical bar (`<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>'). For instance, ``hap<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>pen" is a word containing 2 syllables, while ``no" is a word containing a single syllable. The vertical bar will be used exclusively in the text for the separation of syllables and will always be used correctly, so there will not be input like ``<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>cat" or ``dog<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>gie". </LI><LI>Words. A word is a series of alphabetic characters (with possible embedded vertical bars) surrounded by non-alphabetic characters, including the beginning and end of line. For instance, in the following text, there are 18 words:<DIV ALIGN="CENTER"><TT>Hello world! This is a sample text containing 18 words. B4 u rush through this, beware: This1is tricky.</TT></DIV>In particular, ``<TT>18</TT>" is not a word, ``<TT>B4</TT>" contains the word (``B"), and ``<TT>This1is</TT>" contains two words (``<TT>This</TT>" and ``<TT>is</TT>"). Since no words are divided into syllables, this text also has 18 syllables.<P>The following text has 6 words and 9 syllables:<P><TT>Hel|lo world! Guess what hap|pened to|day?</TT> </LI><LI>Sentences. A sentence is a series of one or more words followed by optional spaces, and then a period (`.'), a question mark (`?'), or an exclamation point (`!'). For instance, the following text contains two sentences (note that the blank line between them does not constitute a sentence in itself and the second exclamation point at the end does not count as ending a sentence, since there is no word between it and the previous sentence):<P><TT>When in the Course of human events, it becomes necessary for one people to dissolve the political bands which have connected them with another, and to assume among the powers of the earth, the separate and equal station to which the Laws of Nature and of Nature's God entitle them, a decent respect to the opinions of mankind requires that they should declare the causes which impel them to the separation. Yes !!</TT> </LI></UL><P>The following formulas define the readability scores you should calculate for each text:<P><UL><LI>Kincaid score <SPAN CLASS="MATH">= 11.8 <TT>x</TT> <IMG WIDTH="100" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ {\frac{{\mbox{SYLLABES}}}{{\mbox{WORDS}}}}$"> +0.39 <TT>x</TT> <IMG WIDTH="114" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ {\frac{{\mbox{WORDS}}}{{\mbox{SENTENCES}}}}$"></SPAN> <tex2html_verbatim_mark> </LI><LI>Automated Readability Index <SPAN CLASS="MATH">= 4.71 <TT>x</TT> <IMG WIDTH="132" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ {\frac{{\mbox{CHARACTERS}}}{{\mbox{WORDS}}}}$"> +0.5 <TT>x</TT> <IMG WIDTH="114" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ {\frac{{\mbox{WORDS}}}{{\mbox{SENTENCES}}}}$"> - 21.43</SPAN> <tex2html_verbatim_mark> </LI><LI>Coleman-Liau score <SPAN CLASS="MATH">= 5.89 <TT>x</TT> <IMG WIDTH="132" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ {\frac{{\mbox{CHARACTERS}}}{{\mbox{WORDS}}}}$"> -0.3 <TT>x</TT> <IMG WIDTH="114" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ {\frac{{\mbox{SENTENCES}}}{{\mbox{WORDS} \ast 100}}}$"> - 15.8</SPAN> <tex2html_verbatim_mark> </LI><LI>Fog Index <SPAN CLASS="MATH">= 0.4 <TT>x</TT> <IMG WIDTH="16" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ \left(\vphantom{\frac{\mbox{WORDS}}{\mbox{SENTENCES}}+100 \times \frac{\mbox{WORDS3}}{\mbox{WORDS}}}\right.$"><IMG WIDTH="114" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ {\frac{{\mbox{WORDS}}}{{\mbox{SENTENCES}}}}$"> +100 <TT>x</TT> <IMG WIDTH="84" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ {\frac{{\mbox{WORDS3}}}{{\mbox{WORDS}}}}$"><IMG WIDTH="16" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ \left.\vphantom{\frac{\mbox{WORDS}}{\mbox{SENTENCES}}+100 \times \frac{\mbox{WORDS3}}{\mbox{WORDS}}}\right)$"></SPAN> <tex2html_verbatim_mark> </LI><LI>Lix score <SPAN CLASS="MATH">= <IMG WIDTH="114" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ {\frac{{\mbox{WORDS}}}{{\mbox{SENTENCES}}}}$"> +100 <TT>*</TT> <IMG WIDTH="84" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ {\frac{{\mbox{WORDS6}}}{{\mbox{WORDS}}}}$"></SPAN> <tex2html_verbatim_mark> </LI></UL><P>where<P><UL><LI>WORDS: The number of words in the text </LI><LI>WORDS3: the number of words that contain 3 or more <SPAN CLASS="textit">syllables</SPAN> in the text </LI><LI>WORDS6: the number of words that contain 6 or more <SPAN CLASS="textit">characters</SPAN> in the text </LI><LI>SENTENCES: the number of sentences in the text </LI> <LI>SYLLABLES: the number of syllables in the text </LI><LI>CHARACTERS: the number of alphabetic characters in the text </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each data set starts with a line containing a single integer text size, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3313img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines comprising the text to be analyzed. Each piece of text to be analyzed will contain at least one sentence. The end of input is marked by a text size of 0. This data set should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, there should be a line reporting the readability scores for the corresponding text. This line should be formatted as follows:<P><P><BR><TT>K=<SPAN CLASS="MATH">&lt; <I>K</I> &gt;</SPAN> <tex2html_verbatim_mark> ARI=<SPAN CLASS="MATH">&lt; <I>ARI</I> &gt;</SPAN> <tex2html_verbatim_mark> CL=<SPAN CLASS="MATH">&lt; <I>CL</I> &gt;</SPAN> <tex2html_verbatim_mark> FOG=<SPAN CLASS="MATH">&lt; <I>FOG</I> &gt;</SPAN> <tex2html_verbatim_mark> LIX=<SPAN CLASS="MATH">&lt; <I>LIX</I> &gt;</SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <TT><SPAN CLASS="MATH">&lt; <I>K</I> &gt;</SPAN> <tex2html_verbatim_mark></TT> is the Kincaid score, <TT><SPAN CLASS="MATH">&lt; <I>ARI</I> &gt;</SPAN> <tex2html_verbatim_mark></TT> is the Automated Readability Index, <TT><SPAN CLASS="MATH">&lt; <I>CL</I> &gt;</SPAN> <tex2html_verbatim_mark></TT> is the Coleman-Liau score, <TT><SPAN CLASS="MATH">&lt; <I>FOG</I> &gt;</SPAN> <tex2html_verbatim_mark></TT> is the Fog Index, and <TT><SPAN CLASS="MATH">&lt; <I>LIX</I> &gt;</SPAN> <tex2html_verbatim_mark></TT> is the Lix score for the text. Each of these values must be printed with exactly two digits after the decimal point, rounded to the last digit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
Hel|lo World! Guess What Hap|pen|ed to|da|y ? 
3 
I am Sam. 
Sam I am. 
Do you like green eggs and ham? 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
K=22.80 ARI=5.19 CL=15.61 FOG=14.53 LIX=19.67 
K=13.49 ARI=-6.22 CL=0.51 FOG=1.73 LIX=4.33
</PRE><P>
______________________________________________________
3314||||||false||||||
<P>
The Altruistic Blood Center (ABC), a local blood bank with several donor centers, has noticed an increase in donors following last year's hurricane season. 

<P>
Each donor center has a number of nurses to process donors. For the sake of this problem, assume each nurse stays with his or her donor for the entire donation time. Centers are open from 9:00 AM to 6:00 PM. It takes 50 minutes to handle a donor. In order to ensure the blood can be shipped out at the end of the day, no donors can begin processing after 5:10.

<P>
There are two kinds of donors: those who have appointments and walk-ins. Appointments can be set up for any time from 9:00 AM to 5:10 PM, on the hour or at the 10, 20, 30, 40, or 50 minute mark past the hour. There may be more than one appointment set up for the same time, but there will never be more appointments made than can be handled at a time. For example, if a center can handle 3 concurrent donors, there may be appointments for 9:00, 9:30, and 9:40, but once these three appointments are made, there will not be another appointment until 9:50 or later. 

<P>
We need a program to handle the walk-in donors. Rather than have them wait, the ABC wants to tell them when to come back and let them go about their business. When a walk-in donor arrives, s/he will be processed immediately if there is a nurse available that will not be needed to handle an appointment in the next 50 minutes. Otherwise, s/he will be given an appointment at the next available time that will not cause a conflict. (This appointment does <SPAN  CLASS="textit">not</SPAN> have to be at one appointment slots at :00, :10, :20, etc.) If the walk-in cannot be scheduled on the current day, they should be asked to make an appointment for the following day. 

<P>
For example, suppose a donor center can process three concurrent donors and has appointments set up for 9:00, 9:30, 9:40, 10:00 and 10:30. A walk-in donor who arrives at 9:20 will need to wait until 9:50 for the 9:00 donor to be finished, but cannot start then because there wouldn't be a nurse available for the donor with an appointment at 10:00. Instead, the donor who arrives at 9:20 would be processed at 10:20, when the nurse working with the 9:30 donor was finished. If another walk-in donor arrives at 9:30, s/he could not be processed until 10:50. Graphically, the nurses would handle the donors in the order below:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3314.eps}$
 -->
<IMG
 WIDTH="839" HEIGHT="99" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="\epsfbox{p3314.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
where the shaded areas are when the nurse is not working with a donor.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of one or more data sets, each representing a different independent donor center. Each data set starts with a line containing a single integer, <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le n \le 20$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$">20</SPAN>
<tex2html_verbatim_mark>, the number of nurses available at the donor center. There will then be eight lines, each with six integers separated by one or more blanks. The first line represents the six appointment times available during the 9 AM hour, with the first number representing the number of appointments at 9:00, the second the number of appointments at 9:10, etc. The second through eighth lines represent the appointments for the 10 AM through 4 PM hours. There will then be a line with just two integers, representing the number of appointments for 5:00 and 5:10. These lines will be followed by an integer, <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le d \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$"><I>d</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, representing the total number of walk-in donors to process. Each walk-in donor is represented a line with the time at which a donor arrives, in twenty-four hour format, <TT>hhmm</TT>, <!-- MATH
 $09 \le hh \le 17$
 -->
<SPAN CLASS="MATH">09<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$"><I>hh</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$">17</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $00 \le mm \le 59$
 -->
<SPAN CLASS="MATH">00<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$"><I>mm</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$">59</SPAN>
<tex2html_verbatim_mark>. These will be in non-descending order, and must be handled first-come-first-serve. 

<P>
The last data set will have a single line with <SPAN CLASS="MATH"><I>n</I> =</SPAN>
<tex2html_verbatim_mark> <TT>0</TT>. This set should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set (corresponding to a donor center), print a line of the form 

<P>
<TT>Donor center <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>:</TT> 

<P>
where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the center number, starting with 1. Then, for each walk-in donor at this center, output a line in one of three forms as appropriate: 

<P>
<TT>Donor <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>: Please make an appointment for tomorrow</TT> 

<P>
if the donor could not be processed on the current day, or 

<P>
<TT>Donor <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>: We can handle you immediately</TT> 

<P>
if there is no waiting required, or 

<P>
<TT>Donor <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>: Please come back at <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark></TT> 

<P>
with <TT><SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark></TT> being the donor number, again starting with 1 for the current center, and t being the time the donor should return, in twelve-hour format (<TT>h:mm</TT>, where <!-- MATH
 $1 \le \texttt{h} \le 12$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$"><texttt>h</texttt><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$">12</SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $00 \le \texttt{mm} \le 59$
 -->
<SPAN CLASS="MATH">00<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$"><texttt>mm</texttt><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3314.jpg
 ALT="$ \le$">59</SPAN>
<tex2html_verbatim_mark>). 

<P>
Each data set's output should be followed by a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
1 0 0 1 1 0 
1  0 0 1 0 0 
0  0  0  0  0  0 
0  0  0  0  0  0 
0  0  0  0  0  0
0  0  0  0  0  0
0  0  0  0  0  0
0  0  0  0  0  0
0  2 
4 
0920 
0930 
1637 
1700 
1 
0 0 0 0 0 0 
0  0 0 0 0 0 
0  0  0  0  0  0
1  0  0  0  0  0
0  0  0  0  0  0
0  0  0  0  0  0
0  0  0  0  0  0
0  0  0  0  0  0
0  0 
4 
1127 
1158 
1516 
1517 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Donor center 1:  
Donor 1: Please come back at 10:20 
Donor 2: Please come back at 10:50 
Donor 3: We can handle you immediately 
Donor 4: Please make an appointment for tomorrow 

Donor center 2: 
Donor 1: Please come back at 12:50 
Donor 2: Please come back at 1:40 
Donor 3: We can handle you immediately 
Donor 4: Please come back at 4:06
</PRE> 

<P>

______________________________________________________
3315||||||false||||||
<P>Prime numbers provide a rich source of speculative mathematical ideas. Some of the mystical atmosphere that surrounds them can be traced back to Pythagoras and his followers who formed secret brotherhoods in Greece, during the 5th Century BC. The Pythagoreans believed that numbers had spiritual properties. The discovery that some numbers such as the square root of 2 cannot be expressed exactly as the ratio of two whole numbers was so shocking to Pythagoras and his followers that they hushed up the proof! Today, prime numbers are fascinating but they are also of commercial importance, since the best commercial and military ciphers depend on their properties.<P>In a letter dated June 7, 1742, Christian Goldbach wrote to Leonhard Euler what has become known through the mathematical ages as <SPAN CLASS="textbf"><SPAN CLASS="textit">The Goldbach Conjecture</SPAN></SPAN>. It is one of the oldest unsolved problems in number theory. In its modern form, it states that <SPAN CLASS="textit">every even number larger than two can be expressed as a sum of two prime numbers</SPAN>. It is also true that some odd numbers can also be expressed as summation of two primes.<P>For this problem, you will try to see when a similar proposal works for less restrictive requirements. The conditions in detail are:<P><UL><LI>You have to express a number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3315img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3315img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> as a summation of <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3315img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3315img1.png ALT="$ \le$">14)</SPAN> <tex2html_verbatim_mark> primes. </LI><LI>The number 1 is not prime. The only even prime is 2. </LI><LI>Among the <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> primes each odd primes can be present at most two times while the even prime can be present only once. For example, (3+3+5+5) is valid, but (3+3+3+7) or (2+2+3) is invalid according to this particular rule. </LI><LI>If there is more than one solution, print the one with the smallest prime number. If there are more than one with the smallest prime, print the one with the second smallest prime, etc. So, to represent 10 as the sum of 2 primes, you should use the combination (3+7), not (5+5), since 3 is smaller than 5. </LI><LI>It is possible there will not be a solution. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each line contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> as defined in the problem statement. The last line of the input file will be a line with just the two values <TT>0</TT> and <TT>0</TT>. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input there will be one line of output. It will be either<P><TT>No solution</TT><P>if there exists no possible summation having the restriction given above, or<P><TT><SPAN CLASS="MATH"><I>n</I> = <I>p</I><SUB>1</SUB> + <I>p</I><SUB>2</SUB> + <I>p</I><SUB>3</SUB> +...+ <I>p</I><SUB>t</SUB></SPAN> <tex2html_verbatim_mark></TT> where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is as described above, and the <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> subscripted <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>'s are the primes that add up to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>'s should be in non-decreasing order. The `<SPAN CLASS="MATH">=</SPAN> <tex2html_verbatim_mark>' is surrounded by single spaces, and otherwise there are no other spaces in the line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
20 10 
100 4 
10 2 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
No Solution 
100 = 3+3+5+89 
10 = 3+7
</PRE><P>
______________________________________________________
3316||||||false||||||
<P>Joe wants to make a simple air-hockey simulation game. Playing the game, Joe launches the puck giving it an initial position <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> (measured relative to the bottom-left of the table, in the diagram on the right), speed <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, and direction <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> (measured relative to the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-axis) whereupon it bounces around the table until it either drops into the goal at the opponent's or at Joe's end, or stops. The table has length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, width <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>, and has two goals each of width <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, centered on the ends of the table. The puck has radius <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="339" HEIGHT="452" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="\epsfbox{p3316a.eps}"> <tex2html_verbatim_mark></DIV><P>The physics is simple. The arrows on the diagram on the left represent the path of the center of the puck as it bounces off one of the table edges, touching the table edge at <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>. The angle of incidence, <SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \theta_{{1}}^{}$"></SPAN> <tex2html_verbatim_mark> is equal to the angle of reflection, <SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \theta_{{2}}^{}$"></SPAN> <tex2html_verbatim_mark> . The initial ``speed" (<SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>) of the puck is actually the maximum number of edges the puck can bounce off before it immediately comes to rest. If, after bouncing less than <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> times, the puck touches any part of either goal, it falls into that goal.<P><DIV ALIGN="CENTER"><IMG WIDTH="407" HEIGHT="206" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="\epsfbox{p3316b.eps}"> <tex2html_verbatim_mark></DIV><P>Given a set of Joe's puck launch specifications, we want to determine how many score a goal for Joe (i.e., land in the opponent's goal at the top of the diagram) and how many score a goal for the opponent. The remainder will just come to rest without scoring and not be counted.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each data set starts with a line containing table specifications: respectively, table length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(5.0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$">30.0)</SPAN> <tex2html_verbatim_mark>, table width <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(4.0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>W</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$">12.0)</SPAN> <tex2html_verbatim_mark> , goal width <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1.0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>G</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$">2.0)</SPAN> <tex2html_verbatim_mark>, and decimal puck radius <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0.5<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>G</I>)</SPAN> <tex2html_verbatim_mark>.<P>The next line contains a single value, being the number of launch specifications, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>. A value of zero here represents the last data set, which should not be processed.<P>The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines each contain a single launch specification: respectively, the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinates of the initial puck position <SPAN CLASS="MATH">(<I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>W</I> - <I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>L</I> - <I>R</I></SPAN> <tex2html_verbatim_mark>) , direction in degrees <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>A</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$">180)</SPAN> <tex2html_verbatim_mark>, and ``speed" <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3316a.jpg ALT="$ \le$">12)</SPAN> <tex2html_verbatim_mark>.<P>Other than <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, which are integer, all values are real numbers with at most 4 decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each data set should produce a line in the form<P><TT>Game <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark>: Joe <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, opponent <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>.</TT><P>Where <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> is the game (data set) number, starting at 1, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of goals scored by Joe, and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the number of goals scored by the opponent.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
12 12 2 1 
4 
10.9 3.0 68.5 9 
6.0 1.01 12.53 11 
6.6 3.0 68.5 7 
5.4 3.0 111.5 3 
22 12 2 1 
2 
5.4 5.0 101.14 10 
5.4 5.0 101.14 2 
12 12 2 1 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Game 1: Joe 1, opponent 2. 
Game 2: Joe 1, opponent 0.
</PRE><P>
______________________________________________________
3317||||||false||||||
<P>American Contour Mapping, ACM, is a company that determines the grade (or slope) of different hiking paths. They want to find the largest slope, either up or downhill, on each portion of a trail so they can warn hikers of the difficulty of the path. ACM has lists of checkpoints along each path and their altitudes. Each checkpoint is given as its horizontal distance from the start. Consider the path shown below, with altitudes listed above the line and checkpoint distance listed below:<P><DIV ALIGN="CENTER"><IMG WIDTH="722" HEIGHT="125" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3317.jpg ALT="\epsfbox{p3317.eps}"> <tex2html_verbatim_mark></DIV><P>Here, the path starts at 100 meters of altitude. It climbs to 130 meters at the 500 meter checkpoint. It then drops to 90 meters at the 600 meter checkpoint. The steepest segment of this path is from the 500 meter checkpoint to the 600 meter checkpoint with a slope of -0.4 (which is the change in the altitude, -40 meters, divided by the change in the distance, 100 meters). Write a program to find the steepest segment for each of a group of paths.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to this program will be information about one or more paths. The first line of data for each path will contain one integer, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3317.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3317.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> represents the number of checkpoints on the path. There will then be <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines of input, each with two integers, representing the checkpoints. The two integers will be separated by at least one space and may have extra spaces before and/or after the values. The first integer will be non-negative and represents the horizontal distance from the start to the checkpoint and the second represents the altitude of the checkpoint. No two checkpoints will be the same distance from the start. The checkpoints will be listed in ascending order, based on distance from start. The first checkpoint will always be 0 meters from the start.<P>End of input will be marked by a path with 0 as the number of checkpoints. This path should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each path, you should find the segment with the slope with the largest magnitude. You may assume no two segments of the path will have the same slope. For each path, print the line:<P><TT>Path</TT> <SPAN CLASS="textit"><SPAN ID="txt55">n</SPAN></SPAN> <TT>has steepest slope of</TT> <SPAN CLASS="textit"><SPAN ID="txt57">slope</SPAN></SPAN> <TT>between checkpoints</TT> <SPAN CLASS="textit"><SPAN ID="txt59">start</SPAN></SPAN> <TT>and</TT> <SPAN CLASS="textit"><SPAN ID="txt61">end</SPAN></SPAN><P>Where <SPAN CLASS="textit"><SPAN ID="txt62">n</SPAN></SPAN> is the path number starting with 1, <SPAN CLASS="textit"><SPAN ID="txt63">slope</SPAN></SPAN> is the slope of the segment, printed with exactly two digits after the decimal point, rounded to the last digit, and <SPAN CLASS="textit"><SPAN ID="txt64">start</SPAN></SPAN> and <SPAN CLASS="textit"><SPAN ID="txt65">end</SPAN></SPAN> are the checkpoint distances of the starting and ending of the segment.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
0 100 
500 130 
600 90 
1000 90 
1300 70 
1900 110 
3 
0 0 
1000 10 
2000 30 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Path 1 has steepest slope of -0.40 between checkpoints 500 and 600 

Path 2 has steepest slope of 0.02 between checkpoints 1000 and 2000
</PRE><P>
______________________________________________________
3318||||||false||||||
<P>Fully Intensive Testing, FIT, a major testing company, gives many different multiple choice exams. They are known for questions which give a group of <SPAN CLASS="textit">options</SPAN> and then a number of <SPAN CLASS="textit">answers</SPAN>, each of which is a combination of the options. A sample question of this sort is:<P>What does Florida have lots of?<P><DL COMPACT><DT>I.</DT><DD>Snow</DD><DT>II.</DT><DD>Tourists</DD><DT>III.</DT><DD>Mountains</DD><DT>IV.</DT><DD>Mosquitoes</DD></DL><P><DL COMPACT><DT>a)</DT><DD>I</DD><DT>b)</DT><DD>II</DD><DT>c)</DT><DD>IV</DD><DT>d)</DT><DD>I, IV, and II</DD><DT>e)</DT><DD>II and IV</DD><DT>f)</DT><DD>III</DD></DL><P>Here, FIT intends the correct answer to be e), but some test takers have argued that b) is also correct, since Florida has lots of tourists. (A similar argument can be made by those selecting c).)<P>To clarify their questions, FIT has decided to add the word ``only" after any answer that is a subset of another answer. So, since answer b) is included as a subset of answer d) (and also answer e)), it should be changed to read ``II only". Answer e) is a subset of answer d), so it should be changed to read ``II and IV only". The question above should be rewritten as:<P>What does Florida have lots of?<P><DL COMPACT><DT>I.</DT><DD>Snow</DD><DT>II.</DT><DD>Tourists</DD><DT>III.</DT><DD>Mountains</DD><DT>IV.</DT><DD>Mosquitoes</DD></DL><P><DL COMPACT><DT>a)</DT><DD>I only</DD><DT>b)</DT><DD>II only</DD><DT>c)</DT><DD>IV only</DD><DT>d)</DT><DD>I, IV, and II</DD><DT>e)</DT><DD>II and IV only</DD><DT>f)</DT><DD>III</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to this program will be one or more questions. Each question will consist of a stem, a blank line, opt options, a blank line, ans answers, and a blank line, with <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3318img1.png ALT="$ \le$"><I>opt</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3318img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3318img1.png ALT="$ \le$"><I>ans</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3318img1.png ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark>. The parts of a question are defined as:<P><UL><LI>A blank line is one with no characters except possibly spaces. </LI><LI>The stem will be 1 or more non-blank lines of text. </LI><LI>Each options will be numbered in order using only Roman numerals (I, II, III, IV, V, VI, VII, VIII, IX, and X). The number will be the first thing on the line. Any characters may follow the Roman numeral. </LI><LI>Each answer will be numbered in order using consecutive lowercase letters starting at `a', followed by a right parenthesis and a single space. Each answer will be either<UL><LI>a single Roman numeral, </LI><LI>a pair of two different Roman numerals, separated by the word ``and", with exactly one blank before and after the word. </LI><LI>a group of three or more different Roman numerals, where all except the last are followed immediately by a comma and a single blank and the last two are separated by the word ``and", with exactly one blank after the word. </LI></UL></LI><LI>Each of the Roman numerals in the answers will be one of the numbers used to number options (so if there are just 8 options, the Roman numerals IX and X will not be in the answers). </LI><LI>No two answers will represent the same set of options. </LI></UL><P>End of input will be marked by end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output from this program will be the input file repeated with one blank and the word ``only" added to answers when the answer is a proper subset of another answer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
What does Florida have 
lots of? 

I.   Snow  
II.  Tourists 
III. Mountains  
IV.  Mosquitoes

a) I 
b) II 
c) IV 
d) I, IV, and II 
e) II and IV 
f) III

How is the contest so far? 

I. Challenging 
II. Fun 

a) I and II 
b) II 
c) I
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
What does Florida have 
lots of? 

I.   Snow 
II.  Tourists 
III. Mountains 
IV.  Mosquitoes

a) I only  
b) II only 
c) IV only 
d) I, IV, and II 
e) II and IV only 
f) III

How is the contest so far? 

I. Challenging 
II. Fun 

a) I and II 
b) II only 
c) I only
</PRE><P>
______________________________________________________
3319||||||false||||||
<P>A (measurement) unit is here represented by a single word containing only lower-case letters. All units are written as singular both in input and in output. A conversion fact relates the size of two units.<P>You are to convert a quantity in one unit to the equivalent quantity in a different unit using only a given set of conversion facts. These conversion facts are self consistent; there is never more than one conversion chain from any unit to any other unit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will start with a number of lines (less than 1000), each containing a conversion fact in the form:<P><TT>&lt;<SPAN CLASS="MATH"><I>v</I>1</SPAN> <tex2html_verbatim_mark>&gt; &lt;<SPAN CLASS="MATH"><I>u</I>1</SPAN> <tex2html_verbatim_mark>&gt; = &lt;<SPAN CLASS="MATH"><I>v</I>2</SPAN> <tex2html_verbatim_mark>&gt; &lt;<SPAN CLASS="MATH"><I>u</I>2</SPAN> <tex2html_verbatim_mark>&gt;</TT><P>The elements <TT>&lt;<SPAN CLASS="MATH"><I>v</I>1</SPAN> <tex2html_verbatim_mark>&gt;</TT> and <TT>&lt;<SPAN CLASS="MATH"><I>v</I>2</SPAN> <tex2html_verbatim_mark>&gt;</TT> are positive real numbers (a sequence of decimal digits, containing at most one decimal point), and <TT>&lt;<SPAN CLASS="MATH"><I>u</I>1</SPAN> <tex2html_verbatim_mark>&gt;</TT> and <TT>&lt;<SPAN CLASS="MATH"><I>u</I>2</SPAN> <tex2html_verbatim_mark>&gt;</TT> are strings containing only lower case letters <!-- MATH
 $(1 \le length < 100)$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3319img1.png ALT="$ \le$"><I>length</I> &lt; 100)</SPAN> <tex2html_verbatim_mark> representing the name of a unit. The elements are separated by single spaces. The conversion fact asserts that the quantity <TT>&lt;<SPAN CLASS="MATH"><I>v</I>1</SPAN> <tex2html_verbatim_mark>&gt;&lt;<SPAN CLASS="MATH"><I>u</I>1</SPAN> <tex2html_verbatim_mark>&gt;</TT> is equal to the quantity <TT>&lt;<SPAN CLASS="MATH"><I>v</I>2</SPAN> <tex2html_verbatim_mark>&gt;&lt;<SPAN CLASS="MATH"><I>u</I>2</SPAN> <tex2html_verbatim_mark>&gt;</TT>.<P>There will then immediately follow a number of lines (less than 100) each representing a conversion request in the form:<P><TT>&lt;<SPAN CLASS="MATH"><I>v</I>3</SPAN> <tex2html_verbatim_mark>&gt; &lt;<SPAN CLASS="MATH"><I>u</I>1</SPAN> <tex2html_verbatim_mark>&gt; = ? &lt;<SPAN CLASS="MATH"><I>u</I>2</SPAN> <tex2html_verbatim_mark>&gt;</TT><P>The elements <TT>&lt;<SPAN CLASS="MATH"><I>u</I>1</SPAN> <tex2html_verbatim_mark>&gt;</TT> and <TT>&lt;<SPAN CLASS="MATH"><I>u</I>2</SPAN> <tex2html_verbatim_mark>&gt;</TT> are again unit names, which may or may not have occurred in the preceding conversion facts. The elements on the line are separated by single spaces.<P>The end of data is represented by end-of-file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each conversion request there should be either the line<P><TT>No conversion is possible.</TT><P>if insufficient conversion facts have been given, or a line of the form<P><TT>&lt;<SPAN CLASS="MATH"><I>v</I>3</SPAN> <tex2html_verbatim_mark>&gt; &lt;<SPAN CLASS="MATH"><I>u</I>1</SPAN> <tex2html_verbatim_mark>&gt; = &lt;<SPAN CLASS="MATH"><I>v</I>4</SPAN> <tex2html_verbatim_mark>&gt; &lt;<SPAN CLASS="MATH"><I>u</I>2</SPAN> <tex2html_verbatim_mark>&gt;</TT><P><UL><LI>where all elements are as in the conversion request, except that the `?' has been replaced by a decimal number <TT>&lt;<SPAN CLASS="MATH"><I>v</I>4</SPAN> <tex2html_verbatim_mark>&gt;</TT>, and is calculated, using only the given conversion facts previously given, so that the left and right-hand side quantities are equal. There should be a single space between all elements in the line. The numbers <TT>&lt;<SPAN CLASS="MATH"><I>v</I>3</SPAN> <tex2html_verbatim_mark>&gt;</TT> and <TT>&lt;<SPAN CLASS="MATH"><I>v</I>4</SPAN> <tex2html_verbatim_mark>&gt;</TT> must be formatted as follows: </LI><LI>If <TT>&lt;<SPAN CLASS="MATH"><I>v</I>4</SPAN> <tex2html_verbatim_mark>&gt;</TT> is greater than or equal to 1,000,000 or less than 0.1, it must be printed in scientific notation: a number between 1.000000 and 9.999999 printed with exactly six digits after the decimal point, followed by `<TT><SPAN CLASS="MATH"><I>e</I> + <I>nn</I></SPAN> <tex2html_verbatim_mark></TT>" or ``<TT><SPAN CLASS="MATH"><I>e</I> - <I>nn</I></SPAN> <tex2html_verbatim_mark></TT>", where `` <SPAN CLASS="MATH"><texttt>e</texttt></SPAN> <tex2html_verbatim_mark>" represents ``times ten to the power of", and ``<TT><SPAN CLASS="MATH"><I>nn</I></SPAN> <tex2html_verbatim_mark></TT>" is a two digit number. </LI><LI>Otherwise, <TT>&lt;<SPAN CLASS="MATH"><I>v</I>4</SPAN> <tex2html_verbatim_mark>&gt;</TT> must be printed in standard decimal notation, with a decimal point followed by exactly six digits. </LI><LI>In both cases, the number printed must be the closest such number to the true answer, i.e. round, don't truncate. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7200.0 second = 2 hour 
10.0 glob = 1 decaglob 
1 day = 24.0 hour 
1 minute = 60 second 
1 glob = 10 centiglob 
1 day = 24 hour 
1 year = 365.25 day 
50 centiglob = ? decaglob 
5.6 second = ? hour 
3 millisecond = ? hour 
5.6 second = ? day 
1 day = ? glob 
1 hour = ? second 
1 year = ? second
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
50.000000 centiglob = 0.500000 decaglob 
5.600000 second = 1.555556e-03 hour 
No conversion is possible. 
5.600000 second = 6.481481e-05 day 
No conversion is possible. 
1.000000 hour = 3600.000000 second 
1.000000 year = 3.155760e+07 second
</PRE><P>
______________________________________________________
3320||||||false||||||
<P>We are given a set of orthogonal line segments (i.e., ones that are parallel to either the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- or the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-axis).<P>The endpoints are defined on a unit grid. We would like to know if these form a simple polygon, that is, the given set of line segments forms a single (No part of the border is covered more than once.) border around a connected (It is possible to draw a curve from any point inside the polygon to any other point inside the polygon without crossing a border.), non-zero area. For example:<P><DIV ALIGN="CENTER"><IMG WIDTH="343" HEIGHT="292" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3320.jpg ALT="\epsfbox{p3320.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each line segment set specification will start with a line having a single integer, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3320.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3320.jpg ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, being the number of line segments in the set. This will be followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each having 4 integer values in the range -100 to +100, being respectively the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>- coordinate of one endpoint, followed by respectively the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinate of the other endpoint. The line segments are parallel to an axis, and have non-zero length. There will never be more than two lines having the same endpoint. The final line segment set will have <SPAN CLASS="MATH"><I>n</I> =</SPAN> <tex2html_verbatim_mark><TT>0</TT>, and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line segment set, there should be an output line of the form:<P><TT>Set <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> outlines a simple polygon</TT><P>or<P><TT>Set <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> does not outline a simple polygon</TT><P>where <TT>n</TT> is the number of the set (starting at 1).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
2 5 4 5
2 5 2 6
2 6 4 6
4 6 4 5
4 
2 5 5 5
2 5 2 6
2 6 4 6
4 6 4 5
4 
2 5 3 5
2 5 2 6
2 6 4 6
4 6 4 5
7 
1 -1 1 1 
4 -1 2 -1 
1 1 3 1 
3 1 3 0 
3 0 4 0 
4 -1 4 0 
2 -1 1 -1 
6
0 2 1 2
1 2 1 0
1 0 2 0
2 1 2 0
0 1 0 2
2 1 0 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Set 1 outlines a simple polygon 
Set 2 does not outline a simple polygon 
Set 3 does not outline a simple polygon 
Set 4 outlines a simple polygon 
Set 5 does not outline a simple polygon
</PRE><P>
______________________________________________________
3321||||||false||||||
<P>
The value of an integer can be represented by describing the digits in the integer. Consider the number 1123334. It begins with two 1's, then has one 2, three 3's, and one 4. Writing this description as an integer gives two 1's: 21, one 2: 12, three 3's: 33, and one 4: 14 for a complete description of 21123314. 

<P>
In order to ensure you can retrieve the original integer from the description, if the integer has more than nine of the same digit in a row, the description will have no count larger than nine and will use nine as a count as often as possible before any other count, so a description of twenty 6's will be represented as 969626. A count of zero will never be used. This process may be repeated using the result of the previous iteration as the input of the next. So, we can have: 

<P>

<P>
<BR>
<TABLE COLS=2>
<COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
Original integer: </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  1123334 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 

<P>
First description: </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 21123314  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 

<P>
Second description: </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 122112231114 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 

<P>
Third description: </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 11222122133114 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 

<P>
Fourth description: </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 2132112211232114 </TD></TR>
</TABLE>

<P>

<P>
<BR>
Write a program to take an original integer and a number of repetitions that will propagate these descriptions.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file will consist of one or more data sets. Each set will consist of two integers, one per line. The first line holds <SPAN  CLASS="textit">orig</SPAN>, the original value, 

<P>
<!-- MATH
 $1 \le orig < 1,000,000,000,000,000,000,000,000,000,000 \ (10^{30})$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3321img1.png
 ALT="$ \le$"><I>orig</I> &lt; 1, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000&nbsp;(10<SUP>30</SUP>)</SPAN>
<tex2html_verbatim_mark>. The second line holds <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, the number of times to iterate the description process, <!-- MATH
 $0 \le n \le 10$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3321img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3321img1.png
 ALT="$ \le$">10</SPAN>
<tex2html_verbatim_mark> . An <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> value of 0 indicates the end of input and that data set should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, output the last of the propagated descriptions. Each output description should be on a new line and should be preceded by a line containing ``<TT>Description</TT> <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <TT>of</TT> <SPAN CLASS="MATH"><I>orig</I></SPAN>
<tex2html_verbatim_mark>:" (where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>orig</I></SPAN>
<tex2html_verbatim_mark> are the input values, described above). For long descriptions, have a new line after every 60 characters. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1123334 
4 
7666666666666666666660 
2 
12 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Description 4 of 1123334: 
2132112211232114 
Description 2 of 7666666666666666666660: 
11171916191612161110

______________________________________________________
3322||||||false||||||
<P>Allocation of platforms to trains is a usual problem in a busy railway station. Trains arrive at a station, halt for specified times at a platform and finally depart from the platform. This apparently simple process is not so simple particularly because platforms are not always available at the time of arrival of trains. Department of Railways needs a program for allocation of platforms to trains.<P>Let there be <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> platforms in a railway station. Arrival times of trains are known for a period of one-hour. Times are recorded as integers; each integer represents a time in minutes counted from the beginning of the one-hour period under consideration. Arrival times vary from 0 to 60 while departure times may exceed 60 as well. On its arrival a train waits in the yard to get the signal to go to a platform. As and when a platform is available a waiting train in the yard with the least halting-time is selected arbitrarily for allocation of a platform. The halting-time of a train is the difference between the departure time and the arrival time. Assume that no extra time is needed for a train to move from the yard to a platform. The availability of platforms and the halting-time of trains if any in the yard, at the beginning of the one-hour period under consideration, are known.<P>You are required to write a program to find the sum <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>, of waiting times in minutes for all trains including trains if any waiting in the yard at the beginning of the one-hour period under consideration. The waiting time of a train is the time the train waits in the yard during the one-hour period under consideration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input may contain multiple test cases. Each test case consists of two input lines.<P>The first line contains a sequence of integers. The first integer in the line is the total number of platforms <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> integers represent times when platforms <SPAN CLASS="MATH">1, 2,..., <I>p</I></SPAN> <tex2html_verbatim_mark> respectively are available for the first time during the one-hour period under consideration. Next <SPAN CLASS="MATH"><I>k</I>(<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3322img1.png ALT="$ \ge$">0)</SPAN> <tex2html_verbatim_mark> integers in the line, if any, represent halting-times for <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> trains waiting in the yard from the beginning of the one-hour period under consideration.<P>The second line contains an even number of integers. Integers in an odd and the next even numbered positions in the line, give the arrival and the departure times of trains.<P>A line containing `<TT>0</TT>' terminates input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output the sum <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> defined above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 15 30
20 35 10 30 45 65
2 15 0
20 35 10 30 45 65
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
85
0
</PRE><P>
______________________________________________________
3323||||||false||||||
<P>An organization has a well-structured human resource. The Chief Executive Officer (CEO) is the top boss of the entire organization. He is the most important personnel and has no boss to report. All other personnel in the organization have a boss to report directly. A boss in tern has direct control over a number of subordinate personnel who are ordered according to their importance. A subordinate under the direct control of a boss may or may not be a boss.<P>All personnel including the CEO are ordered totally according to their importance in the organization. A personnel <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is considered more important than another personnel <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> if any of the following is true:<P><UL><LI><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is the CEO, </LI><LI><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is not the CEO but is the boss of <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>, </LI><LI><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> have the same boss and <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is more important than <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>, </LI><LI><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> have different bosses and boss of <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is more important than boss of <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>. </LI></UL><P>Let the organization has <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> personnel. A personnel is identified by a distinct integer <SPAN CLASS="MATH">1, 2,...</SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, called the ID of the personnel, according to the order of importance. The most important personnel viz., the CEO has ID equal to 1, while the least important personnel has ID equal to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P>A boss may communicate directly to a subordinate in 1 (one) unit of communication time (UCT) while a subordinate requires 2 (two) UCT to communicate with the boss.<P>The organization maintains a list <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> of all personnel identified by their IDs. A boss appears in <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> only after all direct subordinates appear in order of their importance. Given <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> and two personnel <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>, you are required to write a program that finds the time <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> in UCT for <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> to communicate a message to <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases.<P>Each test case contains data in two lines. The first line gives three integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> defined above. The next line gives a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers representing the list <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>. Fields in input are separated by space.<P>The input terminates when a line containing `<TT>0</TT>' appears.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output the required time <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> as an integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 2 4
2 6 7 4 5 3 1
7 4 2
2 6 7 4 5 3 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
5
</PRE><P>
______________________________________________________
3324||||||false||||||
<P>Dates are written using varying formats. A consulting firm deals with clients who use in their communications formats stated below for writing dates.<P><DL COMPACT><DT>1.</DT><DD>Formats for each field:<DL COMPACT><DT>a.</DT><DD>Date (<SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>): one digit as in 4 or two digits as in 04.</DD><DT>b.</DT><DD>Month (<SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>): one digit as in 2, two digits as in 02, name in full as in February.</DD><DT>c.</DT><DD>Year (<SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>): low order two digits for a year in the current century as in 05 or all four digits as in 1997 or 2005.</DD></DL></DD><DT>2.</DT><DD>Order of fields: <SPAN CLASS="MATH"><I>dmy</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>myd</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>mdy</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>ymd</I></SPAN> <tex2html_verbatim_mark>.</DD><DT>3.</DT><DD>Delimiters between fields: Any one of the following in a date; Colon (<TT>:</TT>), Dash (<TT>-</TT>), Dot (<TT>.</TT>) or Slash (<TT>/</TT>).</DD></DL><P>The firm maintains communications in chronological order with the most recent communication at the top. It is possible to have more than one communication on the same date.<P>A date is considered to be in standard format if it appears with full name of the month, significant digits of the date, all four digits of the year and delimiters space and comma, as in the date February 2, 2005.<P>You are required to write a program that converts each date in a given sequence of dates in chronological order, to the date in the standard format. If more than one interpretation exists for a date then select the most recent date. In case a date violates the assumptions stated above, ignore the defective date all together and consider other dates in chronological order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple test cases.<P>Each test case starts with a line that gives the total number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3324img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3324img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark> of dates in the given sequence. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines give <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> dates in chronological order, the first line containing the most recent date. Input terminates when <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is equal to 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print dates in standard format on <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines in the order of dates in input. For each defective date, output `<TT>?</TT>' against the date. Add a blank line to separate outputs of two test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
02-04-05
06/06/06
02.04.2005
2
02:04:23
02:04/23
2
02/February/03
02.April.01
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
April 2, 2005
?
April 2, 2005

April 2, 2023
?

February 2, 2003
April 1, 2002
</PRE><P>
______________________________________________________
3325||||||false||||||
<P>Examination halls in a college contain seats in <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> rows and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> columns. There are <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(n \le k < 10)$
 --><SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3325img1.png ALT="$ \le$"><I>k</I> &lt; 10)</SPAN> <tex2html_verbatim_mark> groups of students. Students of each group appear in the same paper; however students of different groups appear in different papers. Groups as well as seats are identified by integers <SPAN CLASS="MATH">1, 2,..., <I>k</I></SPAN> <tex2html_verbatim_mark>. A student of a group seats on a seat having the same identification number as that of the group. For allocations of seats in a hall following rules are followed:<P><DL COMPACT><DT>1.</DT><DD>Each row contains at most one student from a group.</DD><DT>2.</DT><DD>Each column contains an equal number of students of each group.</DD><DT>3.</DT><DD>No two students of the same group seat in neighbouring positions, i.e., next to each other in the same row, the same column or the same diagonal.</DD></DL><P>Controller of examination sends a team of staff to identify seats in halls following the rules stated above. However after identifying certain number of seats they find it difficult to identify other seats satisfying the rules. So Controller wants a program that can complete a partial allocation of seats in an examination hall.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input may contain of a number of test cases.<P>Each test case starts with a line that gives parameters <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> as integers.<P>The next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines give partial allocations of seats made by the staff; the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line gives the partial allocation in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th row, for <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>m</I></SPAN> <tex2html_verbatim_mark>. A string of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> represents a partial allocation in a row. The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th character in the string is an integer <SPAN CLASS="MATH">1, 2,...</SPAN> <tex2html_verbatim_mark>or <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> if the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th seat in the row is already allocated; otherwise the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th character is a `<TT>#</TT>', for <SPAN CLASS="MATH"><I>j</I> = 1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark>.<P>A line containing `<TT>0</TT>' terminates input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a complete allocation in <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines replacing each `<TT>#</TT>' in partial allocation by an appropriate integer <SPAN CLASS="MATH">1, 2,...</SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and separating two integers in a line by space. If a complete allocation is not feasible then output a line containing `'0. Separate outputs of two test cases by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 4 5
1###
#4##
##2#
###5
##1#
3 3 3
1##
#2#
##3
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 3 4
3 4 5 1
5 1 2 3
2 3 4 5
4 5 1 2

0
</PRE><P>
______________________________________________________
3326||||||false||||||
<P>Here is a problem on Geometry.<P>A square non-defective alloy steel plate is required to be cut off from a rectangular plate of the same material containing defects at a set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> given points. The defective points <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark>, are identified with reference to a 2-dimensional Cartesian coordinate system. Let two perpendicular sides of the given rectangular plate form the axes of coordinates and the line segment joining the points <SPAN CLASS="MATH">(0, 0)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> <tex2html_verbatim_mark> form a diagonal of the rectangular plate.<P>You are required to write a program that finds the area of a largest square plate that can be cut off from the given rectangular plate so that none of the defective points is inside the square plate. For simplicity consider only the squares whose sides are parallel to the coordinate axes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of test cases.<P>Each test case contains two lines of data. The first line gives an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and two real numbers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>. These are the parameters defining the total number of defective points and the rectangle itself.<P>The next line gives <SPAN CLASS="MATH">2<I>n</I></SPAN> <tex2html_verbatim_mark> real numbers specifying <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> given points. A number appearing in an odd numbered position in the line defines the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> coordinate while the next number defines the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinate of a point. You may assume that the magnitude of a coordinate is less than 100.<P>A line containing `<TT>0</TT>' terminates input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output the required area as a real number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 5.0 6.0
1.0 2.0 2.0 3.0 1.0 3.0 4.0 4.0
2 3.0 4.0
1.0 2.0 2.0 3.0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9.0
4.0
</PRE><P>
______________________________________________________
3327||||||false||||||
<P>A sports meet was organized at a ground close to a wide shallow stream. Animals cross the stream at ease, stepping on stones forming a path in a line from one bank A to the other bank B of the stream.<P>Apes are known for their intelligence as well as for their ability to imitate men. Two friendly groups of apes, one white and the other black, live together happily on two banks of the stream. They observed keenly from their home trees, sport events that went on, on the nearby ground. After the meet apes were seen crossing the stream in an organized manner. In fact they were playing, imitating Hop Step <SPAN CLASS="MATH">&amp;</SPAN> <tex2html_verbatim_mark> Jump in their own intelligent way.<P>Let there be a certain number of stones forming the path. At a given instant apes position themselves arbitrarily on stones in the path, keeping some stones empty. No two apes are on the same stone. White apes move toward bank A, while black apes move toward bank B until all of them reach the bank in the direction of motion. At no time an ape changes the direction of motion. Let <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> represent respectively a stone with an ape of one group, a stone with an ape of the other group and an empty stone. Thus a string of <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> represents an occupancy of apes on neighbouring stones at a given instant. The movement of an ape is restricted to the following valid moves:<P><DL COMPACT><DT>1.</DT><DD><SPAN CLASS="textbf">Step:</SPAN> An ape on <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> moves to the next empty stone, changing occupancy from <SPAN CLASS="MATH"><I>P</I>#</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH">#<I>P</I></SPAN> <tex2html_verbatim_mark> in the direction of motion of the ape.</DD><DT>2.</DT><DD><SPAN CLASS="textbf">Jump:</SPAN> An ape on <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> jumps over an ape on <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> and occupy the empty stone situated next to <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark>, changing occupancy from <SPAN CLASS="MATH"><I>PQ</I>#</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH">#<I>QP</I></SPAN> <tex2html_verbatim_mark> in the direction of motion of the ape.</DD><DT>3.</DT><DD><SPAN CLASS="textbf">Hop Step &amp; Jump:</SPAN> An ape on <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> hops over an ape on <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> to an empty stone and steps on to the next empty stone. Finally the ape jumps over another ape on a <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> to occupy the next empty stone. In other words the movement of the ape on <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> changes the occupancy from <SPAN CLASS="MATH"><I>PQ</I>##<I>Q</I>#</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH">#<I>Q</I>##<I>QP</I></SPAN> <tex2html_verbatim_mark> in the direction of motion of the ape.</DD><DT>4.</DT><DD><SPAN CLASS="textbf">Reach:</SPAN> An ape on <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> reaches the destination finally using a Step, a Jump or a Hop Stop &amp; Jump move, considering the destination bank as a stone.</DD></DL><P>Apes cooperate with one another irrespective of the group they belong to. They organize their movements with a clear objective: maximize the total number of Hop Stop &amp; Jump so that all of them reach their respective destinations. You are required to write a program that determines, for a given initial occupancy, the maximum number of Hop Stop &amp; Jump that can be used by apes to reach their respective destinations.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain a number of test cases. Each test case consists of a single input line that gives the initial occupancy of apes on stones. The line contains a string of `<TT>0</TT>', `<TT>1</TT>' and `<TT>#</TT>' that begins with `<TT>A</TT>' (or `<TT>B</TT>') and ends with `<TT>B</TT>' (or `<TT>A</TT>'). A zero (<TT>0</TT>) represents a stone with a white ape while a one (<TT>1</TT>) represents a stone with a black ape.<P>A line containing a single `<TT>#</TT>' terminates input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the maximum number of Hop Stop &amp; Jump that can be used by all apes jointly to reach their respective destinations. There could be a possibility of a deadlock when some apes cannot reach their destinations using the valid moves. In such a case output the value `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
A111####000B
B111####000A
A#01#1100B
B#01#1100A
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
0
-1
1

______________________________________________________
3328||||||false||||||
<P>A factorial number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> denoted by <SPAN CLASS="MATH"><I>N</I> = [<IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$ \sigma$">, <I>a</I>, <I>b</I>]</SPAN> <tex2html_verbatim_mark> consists of three parts:<P><UL><LI>the sign part <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$ \sigma$"></SPAN> <tex2html_verbatim_mark> wich is either 0 or 1, </LI><LI>the whole part <SPAN CLASS="MATH"><I>a</I> = [<I>a</I><SUB>n</SUB>,..., <I>a</I><SUB>1</SUB>, <I>a</I><SUB>0</SUB>]</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>a</I><SUB>k</SUB> = 0, 1,..., <I>k</I> + 1</SPAN> <tex2html_verbatim_mark>, for <SPAN CLASS="MATH"><I>k</I> = 0, 1, <I>l</I>..., <I>n</I></SPAN> <tex2html_verbatim_mark> and, </LI><LI>the fractional part <SPAN CLASS="MATH"><I>b</I> = [<I>b</I><SUB>1</SUB>, <I>b</I><SUB>2</SUB>,..., <I>b</I><SUB>m</SUB>]</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>b</I><SUB>k</SUB> = 0, 1,..., <I>k</I></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>k</I> = 1, 2,..., <I>m</I></SPAN> <tex2html_verbatim_mark> </LI></UL>such that <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is equivalent to the decimal number<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>N</I> = (- 1)<SUP><IMG WIDTH="13" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\scriptstyle \sigma$"></SUP> <TT>x</TT> <IMG WIDTH="19" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle \left(\vphantom{ \sum^{n}_{k=0} a_{k}(k+1)!+ \sum^{m}_{k=1}\frac{b_{k}}{(k+1)!}}\right.$"><IMG WIDTH="29" HEIGHT="63" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle \sum^{{n}}_{{k=0}}$"><I>a</I><SUB>k</SUB>(<I>k</I> + 1)! + <IMG WIDTH="29" HEIGHT="63" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle \sum^{{m}}_{{k=1}}$"><IMG WIDTH="66" HEIGHT="56" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle {\frac{{b_{k}}}{{(k+1)!}}}$"><IMG WIDTH="19" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle \left.\vphantom{ \sum^{n}_{k=0} a_{k}(k+1)!+ \sum^{m}_{k=1}\frac{b_{k}}{(k+1)!}}\right)$"></DIV><P><tex2html_verbatim_mark></P><P>For example, the factorial number <SPAN CLASS="MATH">[1,[3, 2, 1, 1, 1, 0],[0, 0, 2, 2]]</SPAN> <tex2html_verbatim_mark> is equivalent to<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">(- 1)<SUP>1</SUP> <TT>x</TT> <IMG WIDTH="18" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle \left(\vphantom{3(6!)+2(5!)+1(4!)+1(3!)+1(2!)+0(1!)+\frac{0}{2!}+\frac{0}{3!}+\frac{2}{4!}+\frac{2}{5!}}\right.$">3(6!) + 2(5!) + 1(4!) + 1(3!) + 1(2!) + 0(1!) + <IMG WIDTH="22" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle {\frac{{0}}{{2!}}}$"> + <IMG WIDTH="22" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle {\frac{{0}}{{3!}}}$"> + <IMG WIDTH="22" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle {\frac{{2}}{{4!}}}$"> + <IMG WIDTH="22" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle {\frac{{2}}{{5!}}}$"><IMG WIDTH="18" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$\displaystyle \left.\vphantom{3(6!)+2(5!)+1(4!)+1(3!)+1(2!)+0(1!)+\frac{0}{2!}+\frac{0}{3!}+\frac{2}{4!}+\frac{2}{5!}}\right)$"> = - 2432.1</DIV><P><tex2html_verbatim_mark></P>which is equivalent to the rational number <SPAN CLASS="MATH">-24321/10</SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH">24321/ - 10</SPAN> <tex2html_verbatim_mark>.<P>It can be shown that any rational number can be represented uniquely by a factorial number of the form <SPAN CLASS="MATH">[<IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$ \sigma$">, <I>a</I>, <I>b</I>]</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> are of finite lenghts.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>One line of input per case. The line represents a rational number <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> in the form <SPAN CLASS="MATH"><I>n</I>/<I>d</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> are integers with <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> not equal zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>One line of output per test case. The line represents the factorial number that corresponds to the rational number in the input. It must have the form<P><P><BR><TT>Case #<SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>:[<SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3328img1.png ALT="$ \sigma$"></SPAN> <tex2html_verbatim_mark>,[ <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB>,..., <I>a</I><SUB>1</SUB>, <I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>],[ <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB>, <I>b</I><SUB>2</SUB>,..., <I>b</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark>]]</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
-24321/10
1/3
54/-100
-100/1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1:[1,[3,2,1,1,1,0],[0,0,2,2]]
Case #2:[0,[0],[0,2]]
Case #3:[1,[0],[1,0,0,4,4,5,4,7,2]]
Case #4:[1,[4,0,2,0],[0]]
</PRE><P>
______________________________________________________
3329||||||false||||||
<P>A right-heavy tree is a binary tree where the value of a node is greater than or equal to the values of the nodes in its left subtree and less than the values of the nodes in its right subtree. A right-heavy tree could be empty.<P>Write a program that will create a right-heavy tree from a given input sequence and then traverse the tree and printing the value of the node each time a node is visited using inorder, preorder and postorder traversal.<P>The program should create the nodes in the tree dynamically. Thus, basically the tree can be of any size limited only by the amount of memory available in the computer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. </B><P><P><P><BR>The first number in the input indicates the number of nodes in the tree. Then, the input is followed by the integers comprising the values of the nodes of the tree.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>The output will be the sequence of node and labeled by the traversal method used, as shown in the sample output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 8 2 4 7 5 3 1 6
9 5 5 6 3 2 9 3 3 2
8 4 2 1 4 3 2 5 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Inorder: 1 2 3 4 5 6 7 8
Preorder: 8 2 1 4 3 7 5 6
Postorder: 1 3 6 5 7 4 2 8

Inorder: 2 2 3 3 3 5 5 6 9
Preorder: 5 5 3 2 2 3 3 6 9
Postorder: 2 3 3 2 3 5 9 6 5

Inorder: 1 1 2 2 3 4 4 5
Preorder: 4 2 1 1 2 4 3 5
Postorder: 1 2 1 3 4 2 5 4

Inorder:
Preorder:
Postorder:
</PRE><P>
______________________________________________________
3330||||||false||||||
<P>Web-based transactions need users to login with a user-name and password pair. The proper choice of password is critical for one's personal data security. However, with more websites requiring users to create a user-name and password pair, users often reuse passwords from another site or worse, use a dictionary-based password so it will be easy to remember.<P>Abigail Christine Mann, or ACM for short, devised a portable password purse. The purse, however, is virtual - passwords are not written on a piece of paper or a notebook nor are passwords saved and protected by software. The purse is made up of algorithms that ACM associates with each website that she registers with.<P>ACM devised three basic algorithms to determine a particular web site's password. She drops the top-level domains (TLD) such as <TT>.edu</TT>, <TT>.com</TT>, <TT>.edu.ph</TT>, <TT>.com.sg</TT>, etc., and then follows the algorithms below.<P><P><BR>1. If the domain name has less than 6 characters, append capitalized initials in between each character and replace all vowels (except the one from initials) to its numeric equivalent in the alphabet.<P><P><BR>Example:<P><P><BR><TT>apple.com</TT><BR>= <TT>aApCpMle</TT><BR>= <TT>1ApCpMl5</TT> (password)<P><P><BR>2. If the domain has an even number of letters, split the domain into two, add `<TT>%</TT>' at the middle, transpose the first set of letters using the rules below and the second set of letters are converted to alternating upper and lower case characters.<P><P><BR><TT>s = $, l = 7, e = 3, i = !, g = 6, o = 0</TT><P><P><BR>Example:<P><P><BR><TT>blogspot.com</TT><BR>= <TT>blog<SPAN CLASS="MATH">%</SPAN> <tex2html_verbatim_mark>spot</TT><BR>= <TT>b706<SPAN CLASS="MATH">%</SPAN> <tex2html_verbatim_mark>SpOt</TT><P><P><BR>3. If the domain has an odd number of letters, split the domain into two, replace the middle character with '<TT>_</TT>', transpose the second set of letters using the table above and the first set of letters are converted to alternating upper and lower case characters.<P><P><BR>Example:<P><P><BR><TT>microsoft.com</TT><BR>= <TT>micr_soft</TT><BR>= <TT>MiCr<SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3330img1.png ALT="$ \_$">$</SPAN> <tex2html_verbatim_mark>0ft</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input and Output</A>&nbsp;</FONT></H2>The task is to determine the passwords for each of the web-site on the list. The list is provided as a text file, with each site listed on each line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ibm.com
http://jedi.dev.java.net
hotmail.com
http://www.pldtplay.com/gameservers.php
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1:  9AbCmM
Case #2:  jA1CvM1
Case #3:  HoT_a!7
Case #4:  p7dt%PlAy
</PRE><P>
______________________________________________________
3331||||||false||||||
<P>A relation on a set <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is a relation from <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>. A relation <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> on a set <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is:<P><DL COMPACT><DT>i.</DT><DD><EM>reflexive</EM> if <SPAN CLASS="MATH">(<I>a</I>, <I>a</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>R</I></SPAN> <tex2html_verbatim_mark> for every element <SPAN CLASS="MATH"><I>a</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>A</I></SPAN> <tex2html_verbatim_mark></DD><DT>ii.</DT><DD><EM>symmetric</EM> if <SPAN CLASS="MATH">(<I>b</I>, <I>a</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>R</I></SPAN> <tex2html_verbatim_mark> whenever <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>R</I></SPAN> <tex2html_verbatim_mark>, for all <SPAN CLASS="MATH"><I>a</I>, <I>b</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>A</I></SPAN> <tex2html_verbatim_mark></DD><DT>iii.</DT><DD><EM>antisymmetric</EM> only if <SPAN CLASS="MATH"><I>a</I> = <I>b</I></SPAN> <tex2html_verbatim_mark> when <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>b</I>, <I>a</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>R</I></SPAN> <tex2html_verbatim_mark>, for all <SPAN CLASS="MATH"><I>a</I>, <I>b</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>A</I></SPAN> <tex2html_verbatim_mark></DD><DT>iv.</DT><DD><EM>transitive</EM> if whenever <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>b</I>, <I>c</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>R</I></SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH">(<I>a</I>, <I>c</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>R</I></SPAN> <tex2html_verbatim_mark>, for all <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>A</I></SPAN> <tex2html_verbatim_mark></DD></DL><P>Relations can be combined in any way two sets can be combined such as <EM>union</EM> ( <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB> <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \cup$"> <I>R</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>), <EM>intersection</EM> ( <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB> <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \cap$"> <I>R</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>), and <EM>difference</EM> ( <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB> - <I>R</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>). If <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is a relation from set <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to set <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>R</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is a relation from set <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> to set <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, the <EM>composite</EM> ( <SPAN CLASS="MATH"><I>R</I><SUB>2</SUB><TT>o</TT><I>R</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>) of relation <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is the relation consisting of ordered pairs <SPAN CLASS="MATH">(<I>a</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>a</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>C</I></SPAN> <tex2html_verbatim_mark>, and for which there exists an element <SPAN CLASS="MATH"><I>b</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>B</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>R</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>b</I>, <I>c</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3331img1.png ALT="$ \in$"> <I>R</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. The <EM>power</EM> <SPAN CLASS="MATH"><I>R</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> of relation <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is equivalent to <SPAN CLASS="MATH"><I>R</I><TT>o</TT><I>R</I></SPAN> <tex2html_verbatim_mark>.<P>Write a program that determines whether given relations or combinations of relations on given sets, satisfy or do not satisfy the properties defined.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file starts with 1 to 10 lines of set definitions, and followed by 1 to 30 lines (each being a test case) of relations or combined relations on any of the given sets. Set names and relation names consist of exactly 2 characters (1 alphabet character followed by 1 digit).<P>Each set contains 2 to 30 unique elements separated by commas. Each element is a string consisting of 1 to 5 alphabet or digit characters. Each relation contains unique elements separated by commas. Each element is an ordered pair enclosed in parenthesis.<P><EM>Union</EM> operator is represented as `<TT>+</TT>', <EM>intersection</EM> operator is represented as `<TT>*</TT>', and <EM>difference</EM> operator is represented as `<TT>-</TT>'. The <EM>composition</EM> operator is represented as `<TT>#</TT>' and <EM>power</EM> of 2 is represented as `<TT>2</TT>'. Assume that at most one operation may be used per test case.<P>Assume also that there are no empty relations being tested and that all set definitions and test cases are in the same format as the examples and are valid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each of the test cases, output `<TT>R</TT>', `<TT>S</TT>', `<TT>A</TT>', `<TT>T</TT>' respectively for <EM>reflexive</EM>, <EM>symmetric</EM>, <EM>antisymmetric</EM>, and <EM>transitive</EM>, if it satisfies the respective property.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
S1 = {a,b,c,d,e,f,g}
S3 = {10,20,30}
S2 = {Cat,Dog,Sheep}
K2 = {a,b,c,d}
Case 1: X3 on K2 = {(a,a),(a,b),(b,a),(b,b),(c,d),(d,a),(d,d)}
Case 2: X2 on K2 = {(a,a),(a,b),(a,d),(b,a),(b,b),(c,c),(d,a),(d,d)}
Case 3: X4 on K2 = {(b,a),(c,a),(c,b),(d,a),(d,b),(d,c)}
Case 4: X1 on K2 = {(a,a),(a,b),(a,c),(a,d),(b,b),(b,c),(b,d),(c,c),(c,d),(d,d)}
Case 5: R1 on S1 = {(a,b),(a,c),(c,a)}
Case 6: R2 on S3 = {(10,10),(20,20),(30,30)}
Case 7: R4 on S1 = {(a,c),(b,a)}
Case 8: R1 + R4
Case 9: R4 * R1
Case 10: R5 on S3 = {(10,20)}
Case 11: R1 - R4
Case 12: R2 + R5
Case 13: R1 # R4
Case 14: R1^2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
Case 2: R S
Case 3: A T
Case 4: R A T
Case 5:
Case 6: R S A T
Case 7: A
Case 8: S
Case 9: A T
Case 10: A T
Case 11: A
Case 12: R A T
Case 13: A T
Case 14: A T
</PRE><P>
______________________________________________________
3332||||||false||||||
<P>In some distant future, the human race had charted the space for exploration. A three dimensional (3D) coordinate system <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN> <tex2html_verbatim_mark> had been developed to identify a specific location in space. Each coordinate value is represented by a very long integer ranging from <SPAN CLASS="MATH">-2<SUP>4</SUP>0</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH">+2<SUP>4</SUP>0</SPAN> <tex2html_verbatim_mark>.<P>The Earth Command Center (ECC) sent you to explore a 3D space that is several light years away. Upon reaching the area, you started your exploration, gathering critical information of the area. Several days had passed without incident. Suddenly, your system picked up a strange erratic signal indicating high cosmic activity. Without warning, your ship was hit by a cosmic flare hitting your ship. With your quick reaction, you were able activate your cosmic shield saving everyone inside the ship, but the impact knocked off the engine and communication systems. Still within the area of exploration, your ship is motionless with only a few months of food supply left.<P>Checking out in detail your communication system, you figured out that you have one chance of sending a 3-byte data to the ECC. Glancing at your navigation panel, you can still read your current ships's position in <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN> <tex2html_verbatim_mark> coordinate system. Unfortunately, this is too long to compress into 3 bytes. Knowing that you are still in the assigned area of space exploration by the ECC, you recalled your glory days in spatial coding, where you can code a 3D area by dividing the 3D space into 8 equal cubes known as octant. These octants are then assigned a number from 0 to 7 (using only 3 bits each) as shown in Figure 1.<P><DIV ALIGN="CENTER"><IMG WIDTH="664" HEIGHT="232" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3332.gif ALT="\epsfbox{p3332.eps}"> <tex2html_verbatim_mark> </DIV><P><DIV ALIGN="CENTER">Figure 1: (a) Shows the axis values of the coordinate system; (b) Shows the division of a 3D space into 8 cubes/octants with its corresponding numeric label</DIV><P><DIV ALIGN="CENTER"><SMALL CLASS="SMALL">Octant 6 is behind Octant 4 and below Octant 2 </SMALL></DIV><P>This process of division can be applied recursively on each octant in order to code a smaller 3D space. If the ships's coordinates fall exactly on the boundary of two or more octants, it is said to belong to the octant with the lower code value. Given 3 bytes, you can perform the recursive division 8 times coding the 3D space that your ship is located and sending this to ECC for a search and rescue.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain several test cases. The first line will indicate the number of test cases. Each test case is composed of 3 sets of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> coordinates, namely top-left-front, bottom-right-rear and your ships's position.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is a 3 byte code representing the code of the 3D space containing your ship.<P>For this problem, all numbers are displayed in hexadecimal format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
+A000000000
+A000000000
+A000000000
+FF00000000
+FF00000000
+FF00000000
+A000000001
+A000000001
+A000000001
+A000000000
+A000000000
+A000000000
+FF00000000
+FF00000000
+FF00000000
+FEEEEEEEEE
+FEEEEEEEEE
+FEEEEEEEEE
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 000000
Case 2: FFFFFF
</PRE><P>
______________________________________________________
3333||||||false||||||
<P>In chess, a <EM>king</EM> (<TT>K</TT>) checks any piece that is 1 position away from him; a <EM>queen</EM> (<TT>Q</TT>) checks any piece that is in the same row, column, or diagonal where she is unless obstructed; a <EM>bishop</EM> (<TT>B</TT>) checks any piece that is at the same diagonal where he is unless obstructed; a <EM>rook</EM> (<TT>R</TT>) checks any piece that is at the same row or column where he is unless obstructed; a <EM>knight</EM> (<TT>N</TT>) checks any piece that is located in an <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> position from where he is (2 columns and 1 row away, or 1 column and 2 rows away) even with obstruction.<P>Write a program that checks which chess pieces (<TT>K</TT>, <TT>Q</TT>, <TT>B</TT>, <TT>R</TT>, <TT>N</TT>) checks which chess pieces on an <SPAN CLASS="MATH">8 <TT>x</TT> 8</SPAN> <tex2html_verbatim_mark> chess board.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of 1 to 50 lines (each being a test case) of chess piece assignments (row position and column position for each chess piece). There can be 2 to 20 chess pieces of any type for each test case. Assume that no two pieces have the same position. Also, assume that all input cases are in the same format as the examples and are valid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each of the test cases, output which piece at which row and column checks which piece at which row and column. This check-list should be sorted by row and column of the checker, and then by row and column of the piece checked. If no piece checks any piece, display `<TT>All pieces safe.</TT>'<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Q86B31N22R71Q45R13N12N67K84
Case 2: Q57Q61Q26Q38Q42Q73Q85
Case 3: K22K11K12K21
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
N12-B31
R13-N12
B31-N22
B31-Q86
Q45-N12
Q45-N67
N67-Q86
R71-B31
Q86-B31
Q86-K84
Case 2:
All pieces safe.
Case 3:
K11-K12
K11-K21
K11-K22
K12-K11
K12-K21
K12-K22
K21-K11
K21-K12
K21-K22
K22-K11
K22-K12
K22-K21
</PRE><P>
______________________________________________________
3334||||||false||||||
<P>
For the past few months there has been a series of bank robberies and the police were not able to catch the
robbers. Each time the robbers strike, it is executed with pr&#233;cised timing. In all cases, the bank alarm systems were disabled, leaving the bank employees helpless in contacting the police. The police are clueless even with the
surveillance videos, as the suspects wear ski masks and gloves, and flee in stolen vehicles.

<P>
A break came about when a badly tortured man was found left for dead in an alley. This man turned out to be the
IT administrator of the first bank that was robbed. The police were able to gather from him that a group of men abducted him and tortured him to give out the password that allows access to the banks's computer. The police quickly
found out that all banks that were robbed had one thing in common: the banks' computer systems had been accessed! 

<P>

<P>
<BR>
You were asked by the police to help solve the spree of bank robberies. You checked the computer systems of all the
robbed banks. You found out that the suspects accessed the feature that lists down all the banks having computers directly connected to the current bank's computer including its physical distance. The obtained list becomes the list to
look for the next bank to rob.

<P>
Studying carefully the pattern of bank robberies, you discovered that the first bank was chosen due to the fact
that the tortured man is an employee of the first bank. The second bank is the bank closest to the first bank; this is based on the list obtained in the first bank. With lists obtained from the first and second banks, the third bank is
the next closest bank based on the two lists. In the event that the list contains more than one bank of the same distance, the one from the older list is chosen. The more lists the suspects obtain the more bank robberies are
reported; however, no bank will be robbed more than once.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of several test cases. The first line of the input file indicates the number of 
test cases. Each case starts with the number of banks, the first victim and the number of banks 
robbed so far. This is followed by a series of strings consisting of the bank code, number of 
connections, and connected banks consisting of bank codes and physical distance.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output is the bank code of the next bank to be robbed (as you want the police to be prepared for 
the next bank robbery).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
10,5,4
1,3,2,6,4,7,8,8
2,2,9,9,10,10
3,2,4,11,6,12
4,2,1,13,3,14
5,3,7,1,9,2,10,3
6,2,3,15,9,16
7,2,1,4,10,5
8,2,1,17,9,18
9,3,5,19,6,20,8,21
10,3,2,22,7,23,5,24
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 1
</PRE> 

<P>

______________________________________________________
3335||||||false||||||
<P>A newly discovered language has an alphabet of 5 symbols. A sentence in this language is a finite sequence of symbols <SPAN CLASS="MATH"><I>k</I><SUB>1</SUB>...<I>k</I><SUB>i</SUB>...<I>k</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is in the set {L,I,N,U,X}.<P>In this language, the allowable sentences can be described by the following rules:<P><P><BR>L must be followed by I or U<P>I must be followed by N or L or X<P>N must be followed by U or I<P>U must be followed by N or X<P>X must be followed by L<P><P><BR>The sentence LINUXLUX is allowable (i.e., in the language) while the sentence LINUXILL is not allowable (i.e., not in the language).<P>Among the allowable sentences of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> beginning with letter <SPAN CLASS="MATH"><I>k</I><SUB>1</SUB>,..., <I>k</I><SUB>p</SUB></SPAN> <tex2html_verbatim_mark>, how many times did each of the symbols L,I,N,U,X appear in the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-th position?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple test cases. An integer value corresponding to the value of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> in the problem followed by starting symbols of the sentences describe each test case. <B>Your program should be able to handle sentences of length 30 and execute in reasonable time (less than 10 seconds).</B><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is presented in multiple lines for each test case. The first two lines describe the test case. The succeeding lines are the symbol frequency counts.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
4 LINX
10 LINUX
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Symbol Count for Sentences of Length=1.
Sentences starting with 
L:0
I:0
N:0
U:0
X:0
Symbol Count for Sentences of Length=4.
Sentences start with L, I, N, X
L:7
I:7
N:6
U:7
X:6
Symbol Count for Sentence of Length=10.
Sentences start with L, I, N, U, X
L:512
I:512
N:512
U:512
X:512

______________________________________________________
3336||||||false||||||
<P>
Given the tire descriptor typically found on the sidewall of
a passenger or light truck tire, you will calculate the tire's overall
circumference.  Each line of the sample input contains an example of a tire
descriptor.  The following diagram illustrates some of the terminology: 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3336.eps}$
 -->
<IMG
 WIDTH="430" HEIGHT="511" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3336.gif
 ALT="\epsfbox{p3336.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The tire descriptor contains the following items of
information:

<P>

<OL>
<LI>One or two upper case letters to specify the type of tire. For
our purposes, the tire types are ``P" (passenger), ``LT" (light truck), and 
``T" (temporary spare tire).
</LI>
<LI>The <EM>section width</EM> (of an inflated tire) in millimeters. This number is followed by a slash.
</LI>
<LI>The ratio of the section height to the section width, expressed as
a percentage. For example, the ratio 75 means that the section height
of an inflated tire is 75% of its section width.
</LI>
<LI>Information about the <EM>construction</EM> of the tire (one
upper-case letter), optionally preceded by the <EM>speed symbol</EM> (also one
upper-case letter). In the first, second, and fourth lines of the sample
output, the tire construction is specified by ``R", which means ``radial". In the
third line, it is ``D", which means ``diagonal". In the second line, ``R" is preceded by the optional speed symbol ``H".
</LI>
<LI>The nominal rim diameter in inches. It is called ``nominal"
because it does not include the rim's flanges.
</LI>
</OL>

<P>
The <EM>overall circumference</EM> (the goal of your calculations) is based on the <EM>overall diameter</EM>, which is the diameter of an inflated tire at the outermost surface of the tread.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of one or more lines, terminated by end-of-file. Each
line of the input will contain one tire descriptor, as discussed in the
preceding paragraphs. All numerical quantities will be positive integers.
Exactly one blank space will separate consecutive items (including the slash)
on the input line. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each line of input, the program will produce exactly one line
of output, consisting of: the input line, followed by a colon, one
blank space, and the overall circumference, expressed in centimeters,
rounded to the nearest integer. Note that 1 centimeter equals 10
millimeters, and 1 inch equals 2.54 centimeters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
P 195 / 75 R 14
P 205 / 60 H R 15
T 115 / 70 D 15
LT 245 / 75 R 16
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
P 195 / 75 R 14: 204
P 205 / 60 H R 15: 197
T 115 / 70 D 15: 170
LT 245 / 75 R 16: 243
</PRE>

<P>

______________________________________________________
3337||||||false||||||
<P>Random walks are used to model a wide range of phenomena, from Brownian motion to gambling. For example, a gambler who bets on heads or tails on a coin toss wins or loses his bet each turn. The amount of money the gambler has throughout the game is a random walk. Although the bets in each turn may be different, it is easy to see that the gambler wins the maximum amount of money if he wins every turn. Similarly, he loses the maximum amount if he loses every turn.<P>We consider the following two-dimensional variation of the random walk. We are given <EM>n</EM> two-dimensional nonzero vectors <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB> = (<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, no two of which are parallel. In step <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, a coin is flipped. If it is heads, we move <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> meters in the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> direction and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> meters in the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> direction. If it is tails, we move <SPAN CLASS="MATH">- <I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">- <I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> meters in the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> directions.<P>We are interested in computing the maximum distance we can be away from our starting point. This is easy in one-dimension, but it is not so easy in the two-dimensional version.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of test cases. Each test case starts with a line containing the integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, which is at most 100. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines gives a pair of integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> specifying <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. The coordinates are less than 1000 in magnitude. The end of input is specified by <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print on a line the maximum distance we can be away from the starting point, in the format shown below. Output the answer to 3 decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
3
1 1
0 1
-1 1
2
4 0
1 1
7
1 3
-2 -7
7 8
-2 9
-7 -3
4 -3
-2 -2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Maximum distance = 3.000 meters.
Maximum distance = 5.099 meters.
Maximum distance = 37.336 meters.
</PRE><P>
______________________________________________________
3338||||||false||||||
<P>You are given two large pails. One of them (known as the black pail) contains <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> gallons of black paint. The other one (known as the white pail) contains <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> gallons of white paint. You will go through a number of <SPAN CLASS="MATH"><B><I>iterations</I></B></SPAN> <tex2html_verbatim_mark> of pouring paint first from the black pail into the white pail, then from the white pail into the black pail. More specifically, in each iteration you first pour <SPAN CLASS="MATH"><B><I>C</I></B></SPAN> <tex2html_verbatim_mark> cups of paint from the black pail into the white pail (and thoroughly mix the paint in the white pail), then pour <SPAN CLASS="MATH"><B><I>C</I></B></SPAN> <tex2html_verbatim_mark> cups of paint from the white pail back into the black pail (and thoroughly mix the paint in the black pail). <SPAN CLASS="MATH"><B><I>B</I></B></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><B><I>W</I></B></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><B><I>C</I></B></SPAN> <tex2html_verbatim_mark> are positive integers; each of <SPAN CLASS="MATH"><B><I>B</I></B></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><B><I>W</I></B></SPAN> <tex2html_verbatim_mark> is less than or equal to 50, and <!-- MATH
 $C < 16 * B$
 --><SPAN CLASS="MATH"><B><I>C</I> &lt; 16*<I>B</I></B></SPAN> <tex2html_verbatim_mark> (recall that 1 gallon equals 16 cups). The white pail's capacity is at least <SPAN CLASS="MATH"><B><I>B</I> + <I>W</I></B></SPAN> <tex2html_verbatim_mark>.<P>As you perform many successive iterations, the ratio of black paint to white paint in each pail will approach <SPAN CLASS="MATH"><B><I>B</I>/<I>W</I></B></SPAN> <tex2html_verbatim_mark>. Although these ratios will never actually be equal to <SPAN CLASS="MATH"><B><I>B</I>/<I>W</I></B></SPAN> <tex2html_verbatim_mark> one can ask: how many iterations are needed to make sure that the black-to-white paint ratio in <EM>each</EM> of the two pails differs from <SPAN CLASS="MATH"><B><I>B</I>/<I>W</I></B></SPAN> <tex2html_verbatim_mark> by less than a certain tolerance. We define the tolerance to be 0.00001.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of lines. Each line contains input for one instance of the problem: three positive integers representing the values for <SPAN CLASS="MATH"><B><I>B</I></B></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><B><I>W</I></B></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><B><I>C</I></B></SPAN> <tex2html_verbatim_mark>, as described above. The input is terminated with a line where <SPAN CLASS="MATH"><B><I>B</I> = <I>W</I> = <I>C</I> = 0</B></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print one line of output for each instance. Each line of output will contain one positive integer: the smallest number of iterations required such that the black-to-white paint ratio in <EM>each</EM> of the two pails differs from <SPAN CLASS="MATH"><B><I>B</I>/<I>W</I></B></SPAN> <tex2html_verbatim_mark> by less than the tolerance value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
2 1 1
2 1 4
3 20 7
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
145
38
66
</PRE><P>
______________________________________________________
3339||||||false||||||
<P>Morphological operations are tools that are used for extracting image components to represent and describe region shapes. Two common morphological operations are open and close. Before we define these operations, we first have to define how images are represented.<P>Given a binary image <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> rows and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> columns, we can represent <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> as a set of the coordinates <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$"><I>M</I>, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$"><I>N</I>)</SPAN> <tex2html_verbatim_mark> such that the pixel at the specified coordinates is 1. The coordinates of the top-left corner are (1, 1). We are also given a binary image <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> (called the <EM>structuring element</EM>) with <SPAN CLASS="MATH">2<I>S</I> + 1</SPAN> <tex2html_verbatim_mark> rows and columns. The structuring element can be represented as a set as before, except that <SPAN CLASS="MATH">(- <I>S</I>, - <I>S</I>)</SPAN> <tex2html_verbatim_mark> are the coordinates of the pixel at the top-left corner.<P><P><BR>Two operations important in morphological image processing are dilation and erosion. Dilation of an image <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> by the structuring element <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> is defined by:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \wedge$"> <I>B</I> = {<I>a</I> + <I>b</I>&nbsp;|&nbsp;<I>a</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \in$"> <I>A</I>, <I>b</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \in$"> <I>B</I>} <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \cap$"> <I>Z</I></DIV><P><tex2html_verbatim_mark></P>where the addition of coordinates is defined componentwise, and <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark> is the set of coordinates <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>. Similarly, erosion of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> is defined by:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \vee$"> <I>B</I> = {<I>w</I>&nbsp;|&nbsp;<I>w</I> + <I>b</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \in$"> <I>A</I> for every <I>b</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \in$"> <I>B</I>}</DIV><P><tex2html_verbatim_mark></P><P>With these two operations defined, the opening of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> is defined by<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I><TT>o</TT><I>B</I> = (<I>A</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \vee$"> <I>B</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \wedge$"> <I>B</I></DIV><P><tex2html_verbatim_mark></P>and the closing of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> is defined by<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I><SUP> . </SUP><I>B</I> = (<I>A</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \wedge$"> <I>B</I>) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$\displaystyle \vee$"> <I>B</I></DIV><P><tex2html_verbatim_mark></P><P>Roughly speaking, the opening operation is used to remove small details while preserving the overall shape. The closing operation is used to fill in gaps while preserving the overall shape.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of cases. Each case starts with a line containing the integers <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> separated by spaces ( <SPAN CLASS="MATH">10<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$"><I>M</I>, <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$">256, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3339img1.png ALT="$ \le$">4</SPAN> <tex2html_verbatim_mark>). The next <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines contain the rows of the image <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> specified by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> characters that are `<TT>.</TT>' (0) or `<TT>*</TT>' (1). The next <SPAN CLASS="MATH">2<I>S</I> + 1</SPAN> <tex2html_verbatim_mark> lines specify the structuring element <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> in a similar manner. The input is terminated by <SPAN CLASS="MATH"><I>M</I> = <I>N</I> = <I>S</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print the case number followed by a blank line. Then display the result of <SPAN CLASS="MATH"><I>A</I><TT>o</TT><I>B</I></SPAN> <tex2html_verbatim_mark> followed by a blank line, followed by the result of <SPAN CLASS="MATH"><I>A</I><SUP> . </SUP><I>B</I></SPAN> <tex2html_verbatim_mark>. The format of the resulting images is the same as those of the input images. Separate the output for different cases by a line consisting of 75 equal signs (<TT>=</TT>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
10 12 1
............
..*.........
.***...***..
.***...***..
.*********..
.**********.
.*********..
.***...*.*..
............
............
***
***
***
10 12 1
............
..*.........
.***...***..
.***...***..
.*********..
.**********.
.*********..
.***...*.*..
............
............
.*.
***
.*.
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Case 1

............
............
.***...***..
.***...***..
.*********..
.*********..
.*********..
.***........
............
............

............
..*.........
.***...***..
.***...***..
.*********..
.**********.
.*********..
.***...***..
............
............
===========================================================================
Case 2

............
..*.........
.***....*...
.***...***..
.*********..
.**********.
.*********..
..**...*....
............
............

............
..*.........
.***...***..
.****.****..
.*********..
.**********.
.*********..
.***...*.*..
............
............
</PRE><P>
______________________________________________________
