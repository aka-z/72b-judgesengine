3340||||||false||||||
<P>You are given two hour glasses. They measure <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> minutes respectively. You wish to use these two hour glasses to measure a target period of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> minutes. Each hour glass consists of two glass bowls connected by a narrow section (the ``narrows") where sand can flow from one bowl into the other. If all of the sand is in the lower bowl and the hour glass is turned upside down (``flipped"), the sand will flow into the other bowl (which is now the lower bowl) in <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> minutes, respectively.<P>Initially (at time = 0), all of the sand is in the lower bowl in each of the hour glasses, and both hour glasses are flipped. Subsequently, one can flip one or both of the hour glasses according to the following rules.<P><OL><LI>When only one of the hour glasses expires at a particular instant, one has four choices of action:<DL COMPACT><DT>1.</DT><DD>flip the hour glass that expired;</DD><DT>2.</DT><DD>flip the hour glass that did not expire;</DD><DT>3.</DT><DD>flip both hour glasses;</DD><DT>4.</DT><DD>do not flip either one, just let one hour glass sit idle until the other one expires.</DD></DL></LI><LI>When both of the hour glasses happen to expire simultaneously, or if one hour glass has been sitting idle and the other one has just expired, one must flip at least one of the hour glasses. </LI><LI>Any hour glass may be flipped only at an instant when either the same hour glass, or the other one, or both have just expired. </LI></OL><P>A particular time <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> can be measured if there is a sequence of hour glass flips such that one (or both) of the hour glasses expires at time <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> during the sequence. You may assume that flipping an hour glass is instantaneous and does not take any time.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of lines, each representing one instance of the problem. Each line contains three positive integers which represent the values of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. You may assume that <!-- MATH
 $2 \le M < N \le 200$
 --><SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3340img1.png ALT="$ \le$"><I>M</I> &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3340img1.png ALT="$ \le$">200</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3340img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3340img1.png ALT="$ \le$">2000</SPAN> <tex2html_verbatim_mark>. The input is terminated by a line containing three zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each instance of the problem, print the shortest sequence of flips which measures the target time <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. For each flip, print on a single line the time, followed by a colon and a space, followed by the capacities of the hour glasses to be flipped (separated by a comma if both are flipped). The sequence of flips should be printed in chronological order. If there are multiple shortest sequences, any one is acceptable. If it is impossible to measure the target time <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, print `<TT>Impossible!</TT>' on a single line. The output for each instance of the problem should be followed by a line consisting of ten hyphens.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
4 17 21
4 17 22
8 13 23
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
0: 4,17
17: 4,17
----------
0: 4,17
4: 4
8: 4
12: 4
16: 4
17: 4
18: 4,17
----------
0: 8,13
8: 8
13: 8,13
18: 8,13
----------
</PRE><P>
______________________________________________________
3341||||||false||||||
<P>Given a number of distinct decimal digits, you can form one integer by choosing a non-empty subset of these digits and writing them in some order. The remaining digits can be written down in some order to form a second integer. Unless the resulting integer is 0, the integer may not start with the digit 0.<P><P><BR>For example, if you are given the digits 0, 1, 2, 4, 6 and 7, you can write the pair of integers 10 and 2467. Of course, there are many ways to form such pairs of integers: 210 and 764, 204 and 176, etc. The absolute value of the difference between the integers in the last pair is 28, and it turns out that no other pair formed by the rules above can achieve a smaller difference.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains the number of cases to follow. For each case, there is one line of input containing at least two but no more than 10 decimal digits. (The decimal digits are 0, 1, ..., 9.) No digit appears more than once in one line of the input. The digits will appear in increasing order, separated by exactly one blank space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write on a single line the smallest absolute difference of two integers that can be written from the given digits as described by the rules above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
1
0 1 2 4 6 7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
28
</PRE><P>
______________________________________________________
3342||||||false||||||
<P>
You are given a car odometer which displays the miles
traveled as an integer. The odometer has a defect, however: it proceeds from
the digit 3 to the digit 5, always skipping over the digit 4. This defect shows
up in all positions (the one's, the ten's, the hundred's, etc.). For example, if
the odometer displays 15339 and the car travels one mile, odometer reading
changes to 15350 (instead of 15340).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each line of input contains a positive integer in the range
1..999999999 which represents an odometer reading.  (Leading zeros
will not appear in the input.)  The end of input is indicated by a
line containing a single 0.  You may assume that no odometer reading
will contain the digit 4.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Each line of input will produce exactly one line of output,
which will contain: the odometer reading from the input, a colon, one blank
space, and the actual number of miles traveled by the car. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
13
15
2003
2005
239
250
1399
1500
999999
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
13: 12
15: 13
2003: 1461
2005: 1462
239: 197
250: 198
1399: 1052
1500: 1053
999999: 531440
</PRE>

<P>

______________________________________________________
3343||||||false||||||
<P>Exponentiation of one integer by another often produces very large results. In this problem, we will compute a function based on repeated exponentiation, but output only the last <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> digits of the result. Doing this efficiently requires careful thought about how to avoid computing the full answer.<P><P><BR>Given integers <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, we define the function <SPAN CLASS="MATH"><I>f</I> (<I>x</I>)</SPAN> <tex2html_verbatim_mark> recursively by <SPAN CLASS="MATH"><I>f</I> (<I>x</I>) = <I>b</I><SUP>f(x-1)</SUP></SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>x</I> &gt; 0</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>f</I> (0) = 1</SPAN> <tex2html_verbatim_mark>. Your job is to efficiently compute the last <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> decimal digits of <SPAN CLASS="MATH"><I>f</I> (<I>i</I>)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of test cases. Each test case starts with the integer <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3343img1.png ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3343img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> called the <B>base</B>. On the next line is the integer <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3343img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3343img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> called the <B>iteration count</B>. And finally, the last line contains the number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3343img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3343img1.png ALT="$ \le$">7)</SPAN> <tex2html_verbatim_mark>, which is the number of decimal digits to output. The input is terminated when <SPAN CLASS="MATH"><I>b</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print on one line the last <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> digits of <SPAN CLASS="MATH"><I>f</I> (<I>i</I>)</SPAN> <tex2html_verbatim_mark> for the base <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> specified. If the result has fewer than <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> digits, pad the result with zeroes on the left so that there are exactly <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
2
4
7
10
10
6
3
10
7
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
0065536
000000
4195387
</PRE><P>
______________________________________________________
3344||||||false||||||
<P>Bridge is a 4-player (two teams of two) card game with many complicated conventions that even experienced players have difficulty keeping track of. Fortunately, we are not interested in these conventions for this problem. In fact, it is not even important if you understand how to play the game.<P><P><BR>What is important to know is that the way the cards are distributed among your two opponents often determine whether you will be successful in your game. For example, suppose you and your partner hold 8 spades. The remaining 5 spades are held by your opponents (since there are 13 cards in each suit) and can be distributed in the following ways: 0-5, 1-4, 2-3. Notice that a 0-5 <TT>"</TT>split<TT>"</TT> can be realized in two ways--opponent 1 has no spade and opponent 2 has 5 spades, or vice versa.<P>Good bridge players know that the best line of play often depends on the distribution. Sometimes good players can <TT>"</TT>read their opponents' cards<TT>"</TT> and determine the distribution, but sometimes even good players have to guess. In those cases, knowing the probability of the different distributions would be useful in making an educated guess.<P><P><BR>You can assume that the 52 cards in a deck are dealt out randomly to 4 players, so that every player has 13 cards, and that you know which 26 cards your team holds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of cases. Each case consists of two integers <SPAN CLASS="MATH"><I>a</I>, <I>b</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3344img1.png ALT="$ \le$"><I>a</I>, <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3344img1.png ALT="$ \le$">13, <I>a</I> + <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3344img1.png ALT="$ \le$">13)</SPAN> <tex2html_verbatim_mark>. The input is terminated by <SPAN CLASS="MATH"><I>a</I> = <I>b</I> = - 1</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print the probability of a split of <SPAN CLASS="MATH"><I>a</I> + <I>b</I></SPAN> <tex2html_verbatim_mark> cards so that one opponent has <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> cards and the other has <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> cards in the format as shown in the sample output. You may assume that the remaining cards in the suit are held by you and your partner. Output the probabilities to 8 decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
2 2
3 3
4 2
-1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
2-2 split: 0.40695652
3-3 split: 0.35527950
4-2 split: 0.48447205
</PRE>
______________________________________________________
3345||||||false||||||
<P>Scientists and engineers have found a way for human to settle in a far-away planet. The new immigrants have started building small towns and communication links connecting nearby towns. In building the communication network, they first chose a town as a center. Then they connected each nearby town to the center by a communication link.<P>As more and more people migrate to the new planet, a number of such networks have been built. These networks need to be connected to make it possible for people in every town in the planet to communicate. They connected these networks by connecting the centers using a simple path.<P>The first group of immigrants are mostly scientists and engineers. They prefer numbering their towns rather than naming them. Consider <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> towns connected by a network with only one center. If we number the center 0 and the nearby towns by integers in <SPAN CLASS="MATH">{1, 2,..., <I>n</I> - 1}</SPAN> <tex2html_verbatim_mark>. There is an interesting property of this numbering method. Suppose that we label of each link by the absolute value of the difference of the numbers of the two towns it connects. All links will get a distinct label. Furthermore, the labels of the links are exactly <SPAN CLASS="MATH">{1, 2,..., <I>n</I> - 1}</SPAN> <tex2html_verbatim_mark>. Thus, links are numbered automatically. This is called perfect numbering of the towns.<P>The immigrants love the numbering metho d very much, and wants to know if the numbering can be extended to the networks with many centers. Therefore, you are invited to write a program to solve the problem.<P>Let us study more about perfect numbering of the towns. Assume that all towns are properly numbered. It is easy to see that if the numbers of any two towns connected to the same center are switched, then the new numbering is also perfect. Therefore, perfect numbering of the towns is not unique.<P>It is convenient to assign a name to each town. Assume that there are at most 26 centers, and they are labeled by <SPAN CLASS="MATH"><I>a</I>0, <I>b</I>0,..., <I>z</I>0</SPAN> <tex2html_verbatim_mark>. The towns connected to center <SPAN CLASS="MATH"><I>a</I>0</SPAN> <tex2html_verbatim_mark> will be called <SPAN CLASS="MATH"><I>a</I>1, <I>a</I>2,...</SPAN> <tex2html_verbatim_mark>, the towns connected to center <SPAN CLASS="MATH"><I>b</I>0</SPAN> <tex2html_verbatim_mark> will be called <SPAN CLASS="MATH"><I>b</I>1, <I>b</I>2,...</SPAN> <tex2html_verbatim_mark>, and so on.<P>To make the problem simple, we want a perfect numbering such that the numbers assign to the towns connected to the same center are ordered by their names. For example, <SPAN CLASS="MATH"><I>ai</I></SPAN> <tex2html_verbatim_mark>'s label will be smaller than <SPAN CLASS="MATH"><I>aj</I></SPAN> <tex2html_verbatim_mark>'s label whenever <SPAN CLASS="MATH"><I>i</I> &lt; <I>j</I></SPAN> <tex2html_verbatim_mark>. Finally, it is required to label <SPAN CLASS="MATH"><I>a</I>0</SPAN> <tex2html_verbatim_mark> with 0 whenever possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. Each test case is described in 2 lines. The first line is an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, which is the number of centers. The second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers. Each integer indicates the number of nearby towns connected to the corresponding center. For example,<P><P><BR><PRE>
4 
3 2 2 4
</PRE><P><P><BR>means that there are 4 centers <SPAN CLASS="MATH"><I>a</I>0, <I>b</I>0, <I>c</I>0</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>d</I>0</SPAN> <tex2html_verbatim_mark>. The center <SPAN CLASS="MATH"><I>a</I>0</SPAN> <tex2html_verbatim_mark> connects 3 nearby towns, the center <SPAN CLASS="MATH"><I>b</I>0</SPAN> <tex2html_verbatim_mark> connects 2 nearby towns, etc.<P>Assume that each center can connect at most 60 towns.<P>The last test case is followed by a `<TT>0</TT>', which signals the end of input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print out the labels of each town. The output should be ordered by labels, not by the names of the towns. Print 8 (<SPAN CLASS="textit">town,label</SPAN>) pairs in a line, except the last line. Print 1 blank line in front of each test case. If there are no solutions, print `<TT>no solutions</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
3 2 2 4 
5 
0 0 0 0 0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
(a0, 0) (b1, 1) (b2, 2) (c0, 3) (d1, 4) (d2, 5) (d3, 6) (d4, 7) 
(d0, 8) (c1, 9) (c2, 10) (b0, 11) (a1, 12) (a2, 13) (a3, 14) 

(a0, 0) (c0, 1) (e0, 2) (d0, 3) (b0, 4)
</PRE><P>
______________________________________________________
3346||||||false||||||
<P>The concept of domination in graph theory arises naturally from the facility lo cation problem in operations research. Consider a geographical area that is partitioned into regions. Facilities are going to be placed in some of the regions. The problem is to cho ose a minimum number of regions at which to place these service facilities, so that each region is served by a facility in it or at least one facility adjacent to it when there is no facility in this region. This lo cation problem can be mo deled by a graph problem to find a minimum-cardinality vertex subset of an input graph such that every vertex not in the subset is adjacent to at least one vertex in the subset. Depending on different requirements in various lo cation problems, domination has many variants. Here we consider one of the variants.<P>A <SPAN CLASS="textit">perfect dominating set</SPAN> of a graph <SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN> <tex2html_verbatim_mark> is a subset <SPAN CLASS="MATH"><I>D</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3346img1.png ALT="$ \subseteq$"> <I>V</I></SPAN> <tex2html_verbatim_mark> such that every vertex <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>V</I> - <I>D</I></SPAN> <tex2html_verbatim_mark> (that is, <SPAN CLASS="MATH"><I>v</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3346img1.png ALT="$ \in$"> <I>V</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I> <IMG WIDTH="16" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3346img1.png ALT="$ \not\in$"><I>D</I></SPAN> <tex2html_verbatim_mark> ) is adjacent to exactly one vertex in <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> . The <SPAN CLASS="textit">perfect domination problem</SPAN> is to find a <SPAN CLASS="textit">minimum-cardinality perfect dominating set</SPAN> <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, i.e., <SPAN CLASS="MATH">| <I>D</I>|</SPAN> <tex2html_verbatim_mark> is smallest among the cardinalities of all perfect dominating sets of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="textit">perfect domination number</SPAN> of a graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, denoted by <SPAN CLASS="MATH"><I>perfect</I>(<I>G</I>)</SPAN> <tex2html_verbatim_mark>, is the cardinality of a minimum-cardinality perfect dominating set of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>. In this problem, you need to write a program to find the perfect domination number of an input graph which is a tree.<P>For example, consider a 6-vertex tree <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> shown in Figure 1. In (a), vertices 3 and 5 do not form a perfect dominating set of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, because vertex 6 is not in <SPAN CLASS="MATH"><I>D</I> = {3, 5}</SPAN> <tex2html_verbatim_mark> and it is not adjacent to any vertex in <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> . Furthermore, vertices 4 is adjacent to both vertex 3 and 5. In (b), vertices 3 and 4 form a perfect dominating set. It is also easy to check that 3, 4 is a minimum-cardinality perfect dominating set of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. Therefore, the perfect domination number of this example equals 2.<P><DIV ALIGN="CENTER"><IMG WIDTH="884" HEIGHT="267" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3346img1.png ALT="\epsfbox{p3346.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: An illustration of a none perfect dominating set and a perfect dominating set</DIV><P>In this problem, the input graph is a tree <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> vertices <SPAN CLASS="MATH">{1, 2,..., <I>n</I>}</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3346img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3346img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>. Write a program to compute the perfect domination number of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of test cases. Each test case consists of one tree, which has the following format: The first line contains one positive integer <SPAN CLASS="MATH"><I>m</I> = <I>n</I> - 1</SPAN> <tex2html_verbatim_mark>, which is the number of edges of the tree. The next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contain <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> edges such that one line contains one edge. Each edge is represented by two positive integers; the first integer represents one end-vertex of the edge and the second one represents the other end-vertex. Finally, a `<TT>0</TT>' at the last line indicates the end of the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains one line for each test case. Each line contains an integer, which is the perfect domination number of the corresponding input tree.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
1 3
2 3 
3 4 
4 5 
4 6
1
1 2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
1
</PRE><P>
______________________________________________________
3347||||||false||||||
<P>It has been many years since the MacroSolved Cybercomputer has taken control of earth and enslaved most of the humanity to power its operation through some biological pro cess with an enormous matrix of cells each containing a paralyzed human prison. Now, even the city of Tuxville, the only know remaining habitat where humans can walk freely, is constantly raided and bombarded by fleets of giant flying robotic bugs sent by MacroSolved.<P>The engineers in Tuxville has recently developed a new technology called shield pro jector for protecting the city. The pro jector is placed on the ground and is fed enough energy so that it creates a semi-sphere dome of radius <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, within which no robotic bugs can enter. Of course the required energy is a strictly increasing function of <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>. The city council has requested the engineers to find the best spot to place the shield pro jector, so that it requires the minimal amount of energy while generating a dome of shield large enough to protect every building in the city. As a junior member of the engineering team, you are to compute the desired position (the <SPAN CLASS="MATH"><I>x</I> - <I>y</I></SPAN> <tex2html_verbatim_mark> coordinates) for the pro jector given the list of positions and heights of all buildings in Tuxville.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. Each test case begins with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3347img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3347img1.png ALT="$ \le$">30</SPAN> <tex2html_verbatim_mark>, the number of buildings in Tuxville. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contains 3 real numbers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> which gives the position and the height of one building. The last test case is followed by a line consisting of a single 0.<P>Every real number <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> in the input file has at most 3 digits after the decimal point and <SPAN CLASS="MATH">-999.999<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3347img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3347img1.png ALT="$ \le$">999.999</SPAN> <tex2html_verbatim_mark>.<P>Note that there may be two or more buildings of equal or different heights occupying the same position, such as buildings 3 and 5 in the second test case. There may also be three or more buildings lying on the same straight line as exemplified by buildings 1, 2, and 4 in the second test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print the <SPAN CLASS="MATH"><I>x</I> - <I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the desired position for each test case on one line. Round all numbers to 3 decimal places, printing the trailing 0's after the decimal place as necessary.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
 2.0  1.0  0.2
 1.0 -2.0  0.3
-0.2  1.3  7.9
-2.0  1.0  0.1
5 
 1.0  8.0  4.0
 8.0 -4.0  1.0
-4.0  1.0  8.0
 4.5  2.0  2.0
-4.0  1.0  3.0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
-0.200   1.300 
 0.000   0.000
</PRE><P>
______________________________________________________
3348||||||false||||||
<P>Captain Picard and the Enterprise crew is under a mission to study an interesting culture in a distant planet called Ba'ku. They decide to build an invisible observation station where they can watch and record how Ba'ku people live, without revealing the crew's presence or in any way disturbing the Ba'ku people.<P>The Ba'ku people live on a continent almost fully covered by the trees and completely surrounded by the o cean. There are populated villages, connected by trails. The trail system covers the entire continent and divides the continent into many forests. It is one of these forests that Picard and his crew will cho ose to build the station in. According to past experience and some correlation study, the level of exploration by the inhabitants is directly proportional to the collective population of the surrounding villages, and inversely proportional to the area of the forest. Please help Picard find the forest which is least explored by the Ba'ku inhabitants.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. Each test case b egins with a integer <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3348img1.png ALT="$ \le$"><I>V</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3348img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, the number of villages on the continent. Each of the next <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> lines contains 4 entries separated by spaces-the village name, the village population, and its position in <SPAN CLASS="MATH"><I>x</I> - <I>y</I></SPAN> <tex2html_verbatim_mark> coordinates. The next line contains an integer <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3348img1.png ALT="$ \le$"><I>E</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3348img1.png ALT="$ \le$">4950</SPAN> <tex2html_verbatim_mark>, the number of trails connecting villages. Each of the next <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> lines contains 2 village names separated by spaces. The last test case is followed by a line consisting of a single 0.<P>Every real number <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> in the input file has at most 3 digits after the decimal point and <SPAN CLASS="MATH">-999.999<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3348img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3348img1.png ALT="$ \le$">999.999</SPAN> <tex2html_verbatim_mark>. The names of the villages are in all capitals, and the length of a name is between 1 and 8, inclusive.<P>The villages and the trails do not appear in any particular order in the input file. A trail between two villages, say ``ALF" and ``BET", will appear only once, either as ``ALF BET" or as ``BET ALF". Trails do not meet each other except at the villages. Every village is directly or indirectly connected to every other village.<P>In computing the area of the forests, the trails are considered as straight line segments, and neither trails nor villages occupy significant areas. Assume that the outer rim of the trail system is built along the coast line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print on one line the smallest population density rounded to 3 decimal places, along with the desired forest denoted by its surrounding villages. For the population, print the trailing 0's after the decimal place as necessary. For the village names, print them in counter-clo ckwise order. Suppose the desired forest is surrounded by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> villages. Of all <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> possible output sequences, print the one beginning with the alphabetically first village. If there are more than one such sequences, print the one whose second city has the smallest alphabetical ordering. Thus we cho ose ``ALF BET ..." over ``ALF EPS ..." in the sample output.<P><DIV ALIGN="CENTER"><IMG WIDTH="800" HEIGHT="565" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3348img1.png ALT="\epsfbox{p3348.eps}"> <tex2html_verbatim_mark></DIV><P>In the sample input there are three forests. We find their surrounding populations, areas, and densities to be the following, and therefore output information describing the second forest. Note that each of ALF and BET only contributes once to the collective population of the second forest.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>population</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>area</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>density</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2000</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2.000</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1000.000</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3400</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>5.500</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>618.182</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1400</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>0.500</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2800.000</TD></TR></TBODY></TABLE></DIV><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 
ALF  500   0.000  2.000
BET  400   0.000  1.000
CALM 500  -3.000  0.000
DEL  400  -2.000  0.000
EPS  600  -1.000  0.000
FIE  500   0.000  0.000
GO   500   1.000  0.000
HUA  400   2.000  0.000
ING  500   0.000 -2.000
11 
DEL  CALM 
ING  DEL 
ING  HUA 
ING  EPS 
ALF  DEL 
ALF  HUA 
ALF  EPS 
ALF  BET 
BET  FIE 
BET  GO 
FIE  GO 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
618.182 ALF BET GO FIE BET ALF EPS ING HUA
</PRE><P>
______________________________________________________
3349||||||false||||||
<P>A magnetic disk is made up of the rotating disks, the heads to access disks, and an assembly arm that moves the heads into the specified cylinder. Generally, a disk task would specify the track location of data we want to retrieve. When serving the disk task, a seek-time is taken to move the disk arm to the appropriate cylinder. The seek-time to move the disk arm from track location <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> to track lo cation <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>b</I>| <I>x</I> - <I>y</I>|</SPAN> <tex2html_verbatim_mark>. Here b is a given constant, representing the speed of the disk, <SPAN CLASS="MATH">| <I>x</I> - <I>y</I>|</SPAN> <tex2html_verbatim_mark> is the distance (absolute value) between <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>.<P>Conventionally, the goal of disk scheduling is to maximize the disk-throughput for serving a given set of tasks. That is, all tasks must be scheduled and executed as so on as possible to minimize the execution time. However, in a time-critical application, the first goal of disk scheduling is to meet the specified real-time constraints. That is, all tasks must be finished before its deadlines. Maximizing the disk throughput is also important, but the schedule is meaningless if the specified real-time constraints are not satisfied. Therefore, the formal definition of the real-time disk scheduling is as follows:<P><BLOCKQUOTE>Given a set of real-time disk tasks <SPAN CLASS="MATH"><I>T</I> = {<I>T</I><SUB>1</SUB>, <I>T</I><SUB>2</SUB>,..., <I>T</I><SUB>n</SUB>}</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of input disk tasks. Each task has a deadline and a track location. We say that a schedule is feasible if all tasks meet their deadlines in the schedule. Our goal is to find a feasible schedule with minimum execution time.</BLOCKQUOTE><P>For example, assume that we have four tasks,<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">{<I>T</I><SUB>1</SUB>, <I>T</I><SUB>2</SUB>, <I>T</I><SUB>3</SUB>, <I>T</I><SUB>4</SUB>}</DIV><P><tex2html_verbatim_mark></P>whose deadlines are<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">{5, 10, 12, 24}</DIV><P><tex2html_verbatim_mark></P>and track lo cations at<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">{100, 40, 600, 70}.</DIV><P><tex2html_verbatim_mark></P><P>Assume that the current position of disk head is 20 and <SPAN CLASS="MATH"><I>b</I> = 0.01</SPAN> <tex2html_verbatim_mark>. The optimal solution is <SPAN CLASS="MATH">(2, 4, 1, 3)</SPAN> <tex2html_verbatim_mark>. That is, the tasks are scheduled in the order:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>T</I><SUB>2</SUB>, <I>T</I><SUB>4</SUB>, <I>T</I><SUB>1</SUB>, <I>T</I><SUB>3</SUB>.</DIV><P><tex2html_verbatim_mark></P><P>The minimum execution time for the schedule of this four tasks are<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">0.01(40 - 20) + 0.01(70 - 40) + 0.01(100 - 70) + 0.01(600 - 100) = 5.8.</DIV><P><tex2html_verbatim_mark></P><P>In this schedule, all tasks are scheduled before their deadlines. Note that the disk head can be at any position before the schedule starts, and can be at any position when the schedule ends.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file may contain several test cases. Each test case consists of a set of real-time disk tasks. The first line of test case is a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, representing the number of tasks. The second line of the test case has two numbers. The first number is a real number, representing the disk speed <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>. The second number is an integer <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, representing the current position of disk head. Starting from the third line, each line specifies a task. There are two integers in each line. The first integer is the track lo cation of the task. The second integer is the deadline of the task. All integers have the maximum value 1000000.<P>The last test case is followed by a line containing `<TT>0</TT>'. This signals the end of the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is a number <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, the minimum execution time of all tasks. If no feasible schedules exist, output `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
0.01 20 
100 5 
40 10 
600 12 
70 24 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sanple Output</A>&nbsp;</FONT></H2><P><PRE>
5.8
</PRE><P>
______________________________________________________
3350||||||false||||||
<P>Professor Abscentmind collects <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3350img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3350img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>, rocks during a field trip. His mission is to analyze the relations between the weights of the rocks. Unfortunately, the car carries Professor Abscentmind had an accident. In the accident, all of his scales were broken. The rocks are heavy and cannot be carried back. He can only hand design a balance that can only tell whether one rock is heavier than the other or not, and performs the experiments on the field. Professor Abscentmind can only put one rock on one end of the balance and one other rock on the other end of the balance. There is no way to put multiple ro cks or no rocks on one end of the balance.<P>Because the balance is hand made without fine tuning, it cannot tell whether two rocks are equal weight or not even if they are. Furthermore, when the weights of the two rocks are close, the balance may have a measurement error. That is, the balance may say rock 1 is heavier than rock 2 while actually rock 1 is lighter than rock 2. Professor Abscentmind marked the rocks from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and recorded the results of the balancing experiments. After he had used the balance <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3350img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3350img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>, times, the balance broke down and could not be repaired.<P>We call each time the balance is used a measurement. A measurement can be recorded as an ordered pair <SPAN CLASS="MATH">&lt; <I>i</I>, <I>j</I> &gt;</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> are the indices of the two rocks being balanced, and the result is rock <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is heavier than rock <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>. It is impossible to have a measurement <SPAN CLASS="MATH">&lt; <I>i</I>, <I>i</I> &gt;</SPAN> <tex2html_verbatim_mark>. Note that it is possible that two rocks are balanced more than once with same or different results. Each measurement counts no matter it is a duplicate or not.<P>After Professor Abscentmind returns to the laboratory, he wants to verify the correctness of his experimental data. He knows that if rock <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is heavier than rock <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> , and rock <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is heavier than rock <SPAN CLASS="MATH"><I>a</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, then rock <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> must be heavier than rock <SPAN CLASS="MATH"><I>a</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>. A measurement <SPAN CLASS="MATH">&lt; <I>i</I>, <I>j</I> &gt;</SPAN> <tex2html_verbatim_mark> is <EM>suspicious</EM> if there exists a sequence of measurements <!-- MATH
 $H =< j, b_{1} >, < b_{1} , b_{2} >, < b_{2} , b_{3} >, \ldots, < b_{k-1} , b_{k} >, < b_{k} , i >$
 --><SPAN CLASS="MATH"><I>H</I> = &lt; <I>j</I>, <I>b</I><SUB>1</SUB> &gt; , &lt; <I>b</I><SUB>1</SUB>, <I>b</I><SUB>2</SUB> &gt; , &lt; <I>b</I><SUB>2</SUB>, <I>b</I><SUB>3</SUB> &gt; ,..., &lt; <I>b</I><SUB>k-1</SUB>, <I>b</I><SUB>k</SUB> &gt; , &lt; <I>b</I><SUB>k</SUB>, <I>i</I> &gt;</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>k</I> &gt; 0</SPAN> <tex2html_verbatim_mark>. That is, the balance says <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is heavier than <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> , but you can deduce the contradictory result of <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is heavier than <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> by a sequence of measurements <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark> or there is another measurement <!-- MATH
 $H =< j, i >$
 --><SPAN CLASS="MATH"><I>H</I> = &lt; <I>j</I>, <I>i</I> &gt;</SPAN> <tex2html_verbatim_mark>.<P>Your task is to write a program to determine the number of suspicious measurements, counting all possible duplicates, giving a set of experimental records.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file may contain more than one set of experimental records. The first two line of each experimental record contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> respectively. Then follows by <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines, each line has two numbers <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> separated by a blank indicating the measurement result <SPAN CLASS="MATH">&lt; <I>i</I>, <I>j</I> &gt;</SPAN> <tex2html_verbatim_mark>. The last set of experimental records is followed by a line containing `<TT>0</TT>', indicating the end of test file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of experimental records, output the number of suspicious measurements.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
3 
1 2 
2 3 
3 1
2 
1 
1 2 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
0
</PRE><P>
______________________________________________________
3351||||||false||||||
<P>Sudoku is popular puzzle demanding logic and patience. The aim of the puzzle is to enter a numeral from 1 through 9 in each cell of a <SPAN CLASS="MATH">9 <TT>x</TT> 9</SPAN> <tex2html_verbatim_mark> grid made up of <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> sub-grids, starting with various numerals given in some cells. Each row, column and sub-grid must contain only one instance of each numeral. See Figure 2 and Figure 3 for a sample puzzle and its solution.<P><DIV ALIGN="CENTER"><IMG WIDTH="440" HEIGHT="370" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3351a.gif ALT="\epsfbox{p3351a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 2: An example of a Sudoku puzzle</DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="441" HEIGHT="372" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3351a.gif ALT="\epsfbox{p3351b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 3: A solution to the Sudoku puzzle</DIV><P>Some Sudoku puzzles may have <SPAN CLASS="textit">unique</SPAN> solution. Dr. Susie thinks it is a good tool to enhance children's patience. However, he wants to avoid difficult puzzles so that the children will be able to solve it in a reasonable amount of time. After some research, Dr. Susie noticed that the following two heuristics are easily understood by children:<P><DL COMPACT><DT>1.</DT><DD>Each numeral can appear in any row, column, and sub-grid only once. Therefore, if the union of the numeral appeared in the same row, column and sub-grid of some free cell contains 8 numerals, and leaves only one available numeral to be filled into that cell, then it should be filled with that numeral. For example, in Figure 4, the cell marked <TT>x</TT> can only be filled with 2 since all the other 8 numerals have appeared in the row, column and sub-grid of it.</DD><DT>2.</DT><DD>Each sub-grid has to contain all the numerals. Therefore, if a numeral has not appeared in some sub-grid, say numeral 1, if there is only one free cell which can be filled by 1, due to the fact that all the other free cells in that sub-grid have 1 in the same row or column, then fill that cell with numeral 1. For example, in Figure 5 only the cell marked <TT>x</TT> can be filled with 1, all the other free cells are ruled out for the possibility due to 1s appeared in other sub-grid.</DD></DL><P><DIV ALIGN="CENTER"><IMG WIDTH="396" HEIGHT="371" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3351a.gif ALT="\epsfbox{p3351c.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 4: Heuristic Rule 1</DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="380" HEIGHT="371" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3351a.gif ALT="\epsfbox{p3351d.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 5: Heuristic Rule 2</DIV><P>He decided that if a puzzle can be solved by only applying the two heuristics above, then it is an <SPAN CLASS="textit">easy</SPAN> puzzle, otherwise it is <SPAN CLASS="textit">not an easy puzzle</SPAN>. You are to write a program to tell whether puzzles are easy or not easy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3351a.gif ALT="$ \le$">15</SPAN> <tex2html_verbatim_mark>, indicating the number of puzzles. The following <SPAN CLASS="MATH">9<I>n</I></SPAN> <tex2html_verbatim_mark> rows contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> puzzles. Each puzzle consists of 9 rows. Each row contains 9 numerals-<TT>0</TT> indicates that the cell has to be filled, and other numerals indicate that the cell is given that numeral.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> bits. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th bit equals to `<TT>1</TT>' if the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th puzzle is easy, and `<TT>0</TT>' if the puzzle is not easy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
0 8 0 3 0 0 0 0 9
0 0 0 0 8 0 0 0 3
3 0 0 5 0 0 0 8 2
1 9 8 4 5 7 3 2 6
5 2 3 9 6 1 8 4 7
4 7 6 2 3 8 1 9 5
9 3 4 8 2 5 7 6 1
6 5 2 0 0 4 9 3 8
8 1 7 6 9 3 2 5 4
7 8 0 3 0 0 0 0 9
0 0 0 0 8 0 0 0 3
3 0 0 5 0 0 0 8 2
1 9 8 4 5 7 3 2 6
5 2 3 9 6 1 8 4 7
4 7 6 2 3 8 1 9 5
9 3 4 8 2 5 7 6 1
6 5 2 0 0 4 9 3 8
8 1 7 6 9 3 2 5 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
01
</PRE><P>
______________________________________________________
3352||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>B</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> denote the set of binary trees with n internal nodes (and thus with <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> leaves) and <SPAN CLASS="MATH"><I>T</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$ \in$"> <I>B</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> . We assume that all internal nodes of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, according to the in-order traversal of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. For each internal node <SPAN CLASS="MATH"><I>i</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$ \in$"> <I>T</I></SPAN> <tex2html_verbatim_mark> , the left sub-tree of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is the sub-tree of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> rooted at the left child of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. Then the <EM>left-weight</EM> of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, denoted by <SPAN CLASS="MATH"><I>w</I><SUB>l</SUB>(<I>T</I>, <I>i</I>)</SPAN> <tex2html_verbatim_mark>, is the number of leaves in the left sub-tree of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. The integer sequence <SPAN CLASS="MATH"><I>w</I><SUB>l</SUB>(<I>T</I>) = (<I>w</I><SUB>l</SUB>(<I>T</I>, 1), <I>w</I><SUB>l</SUB>(<I>T</I>, 2),..., <I>w</I><SUB>l</SUB>(<I>T</I>, <I>n</I>))</SPAN> <tex2html_verbatim_mark> is defined as the <SPAN CLASS="textit">left-weight sequence</SPAN> of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> and every binary tree can be characterized by its left-weight sequence. For example, Figure 6 shows a tree <SPAN CLASS="MATH"><I>T</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$ \in$"> <I>B</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>w</I><SUB>l</SUB>(<I>T</I>) = (1, 2, 1, 4, 1, 2)</SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="376" HEIGHT="378" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="\epsfbox{p3352.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 6: The left-weight sequence of a tree T.</DIV><P>The number of binary trees in Bn is given by the Catalan number<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>C</I><SUB>n</SUB> = <IMG WIDTH="49" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$\displaystyle {\frac{{1}}{{n+1}}}$">2<I>n</I><IMG WIDTH="27" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$\displaystyle \choose {n}$"></DIV><P><tex2html_verbatim_mark></P><P>For example, all the left-weight sequences of <SPAN CLASS="MATH"><I>T</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$ \in$"> <I>B</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark> are listed in Table 1 in lexicographic order. The rank of a left-weight sequence is its ordinal number in the lexicographic order list of all left-weight sequences in <SPAN CLASS="MATH"><I>B</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> . For example, the rank of the tree <SPAN CLASS="MATH"><I>T</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$ \in$"> <I>B</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>w</I><SUB>l</SUB>(<I>T</I>) = (1, 1, 2, 4)</SPAN> <tex2html_verbatim_mark> is 7.<P>Design a program for computing the rank of a specific binary tree <SPAN CLASS="MATH"><I>T</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$ \in$"> <I>B</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. Each test case starts with a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>. Then followed by a line which contains the left-weight sequence of a specific binary tree. The line containing a `<TT>0</TT>' indicates the end of test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the rank of the given left-weight sequence in one line.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Rank</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>weight sequence</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1111</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1112</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1113</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1114</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1121</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1123</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1124</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1131</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1134</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1211</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1212</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1214</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1231</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1234</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Table 1: Left-weight sequences of <SPAN CLASS="MATH"><I>T</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3352img1.png ALT="$ \in$"> <I>B</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
1 1 1 1 2 
8 
1 2 3 1 1 2 1 8 
10 
1 1 2 1 5 1 2 1 4 1 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
1323 
9000
</PRE><P>
______________________________________________________
3353||||||false||||||
<P>A big city wants to improve its bus transportation system. One of the improvement is to add scenic routes which go es through attractive places. Your task is to construct a bus-route-plan for sight-seeing buses in a city.<P>You are given a set of scenic lo cations. For each of these given lo cations, there should be only one bus route that passes this lo cation, and that bus route should pass this lo cation exactly once. The number of bus routes is unlimited. However, each route should contain at least two scenic lo cations.<P>From location <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to location <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> , there may or may not be a connecting street. If there is a street from location <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to location <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> , then we say <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is an out-neighbor of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. The length of the street from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>d</I> (<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark>. The streets might be one way. So it may happen that there is a street from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, but no street from <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. In case there is a street from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> and also a street from <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, the lengths <SPAN CLASS="MATH"><I>d</I> (<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I> (<I>j</I>, <I>i</I>)</SPAN> <tex2html_verbatim_mark> might be different. The route of each bus must follow the connecting streets and must be a cycle. For example, the route of Bus A might be from location 1 to location 2, from location 2 to location 3, and then from location 3 to location 1. The route of Bus B might be from location 4 to location 5, then from location 5 to location 4. The length of a bus route is the sum of the lengths of the streets in this bus route. The total length of the bus-route-plan is the sum of the lengths of all the bus routes used in the plan. A bus-route-plan is optimal if it has the minimum total length. You are required to compute the total length of an optimal bus-route-plan.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of a number of test cases. The first line of each test case is a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, which is the number of locations. These <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> locations are denoted by positive integers <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines are information about connecting streets between these lo cations. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line of these <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines consists of an even number of positive integers and a 0 at the end. The first integer is a lo cation <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> which is an out-neighbor of location <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, and the second integer is <SPAN CLASS="MATH"><I>d</I> (<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark>. The third integer is another location <SPAN CLASS="MATH"><I>j'</I></SPAN> <tex2html_verbatim_mark> which is an out-neighbor of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, and the fourth integer is <SPAN CLASS="MATH"><I>d</I> (<I>i</I>, <I>j'</I>)</SPAN> <tex2html_verbatim_mark>, and so on. In general, the <SPAN CLASS="MATH">(2<I>k</I> - 1)</SPAN> <tex2html_verbatim_mark>th integer is a location <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> which is an out-neighbor of location <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, and the <SPAN CLASS="MATH">2<I>k</I></SPAN> <tex2html_verbatim_mark>th integer is <SPAN CLASS="MATH"><I>d</I> (<I>i</I>, <I>t</I>)</SPAN> <tex2html_verbatim_mark>.<P>The next case starts immediately after these <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines. A line consisting of a single `<TT>0</TT>' indicates the end of the input file.<P>Each test case has at most 99 locations. The length of each street is a positive integer less than 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains one line for each test case. If the required bus-route-plan exists, then the output is a positive number, which is the total length of an optimal bus-route-plan. Otherwise, the output is a letter `<TT>N</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
2 2 3 1 0 
1 1 3 2 0 
1 3 2 7 0  
8 
2 3 3 1 0 
3 3 1 1 4 4 0
1 2 2 7 0 
5 4 6 7 0 
4 4 3 9 0 
7 4 8 5 0 
6 2 5 8 8 1 0
6 6 7 2 0
3 
2 1 0 
3 1 0 
2 1 0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 
25 
N

______________________________________________________
3354||||||false||||||
<P>There is an objective test result such as ``<TT>OOXXOXXOOO</TT>". An `<TT>O</TT>' means a correct answer of a problem and an `<TT>X</TT>' means a wrong answer. The score of each problem of this test is calculated by itself and its just previous consecutive `<TT>O</TT>'s only when the answer is correct. For example, the score of the 10th problem is 3 that is obtained by itself and its two previous consecutive `<TT>O</TT>'s.<P>Therefore, the score of ``<TT>OOXXOXXOOO</TT>" is 10 which is calculated by ``1+2+0+0+1+0+0+1+2+3".<P>You are to write a program calculating the scores of test results.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing a string composed by `<TT>O</TT>' and `<TT>X</TT>' and the length of the string is more than 0 and less than 80. There is no spaces between `<TT>O</TT>' and `<TT>X</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. The line is to contain the score of the test case.<P>The following shows sample input and output for five test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
OOXXOXXOOO 
OOXXOOXXOO 
OXOXOXOXOXOXOX 
OOOOOOOOOO 
OOOOXOOOOXOOOOX
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 
9 
7 
55 
30
</PRE><P>
______________________________________________________
3355||||||false||||||
<P>For a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, the digit-sum of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is defined as the sum of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> itself and its digits. When <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the digitsum of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, we call <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> a <SPAN CLASS="textit">generator</SPAN> of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>.<P>For example, the digit-sum of <TT>245</TT> is <TT>256 (= 245 + 2 + 4 + 5)</TT>. Therefore, <TT>245</TT> is a generator of <TT>256</TT>.<P>Not surprisingly, some numbers do not have any generators and some numbers have more than one generator. For example, the generators of <TT>216</TT> are <TT>198</TT> and <TT>207</TT>.<P>You are to write a program to find the smallest generator of the given integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case takes one line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3355img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3355img1.png ALT="$ \le$">100, 000</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. The line is to contain a generator of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> for each test case. If <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> has multiple generators, print the smallest. If <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> does not have any generators, print <TT>0</TT>.<P>The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
216 
121 
2005
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
198 
0 
1979
</PRE><P>
______________________________________________________
3356||||||false||||||
<P>Figure 1 shows an apple tree in which each node has exactly one apple and every internal node has at least two children nodes.<P><DIV ALIGN="CENTER"><IMG WIDTH="492" HEIGHT="417" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3356a.gif ALT="\epsfbox{p3356a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1</DIV><P>Consider a worm in the apple tree. The worm visits apples (i.e., nodes) following the order of depth-first traversal from the root of the apple tree. (Notice that, the branching priority of an internal node is left-first order.) Figure 2 shows a binary representation of the depth-first traversal by a worm in the apple tree.<P><DIV ALIGN="CENTER"><IMG WIDTH="259" HEIGHT="288" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3356a.gif ALT="\epsfbox{p3356b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 2</DIV><P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=11 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Binary representation</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>first visited node</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>returned node</TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD></TR></TBODY></TABLE></DIV><P><P><BR>The binary representation is defined as follows: During the depth-first traversal,<P><P><BR><DL COMPACT><DT>``0"</DT><DD>is printed, if a new node is visited, and</DD><DT>``1"</DT><DD>is printed, if a node is returned after visiting all descendent nodes.</DD></DL><P><P><BR>The second line of the table shows the first visited node corresponding to each ``0" and the third line shows the returned node corresponding to each ``1". For example, the apple tree in Figure 1 can be represented by the definition above.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=109 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Binary representation</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>first visited node</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>f</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>g</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>h</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>i</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>j</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>k</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>l</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>m</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>n</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>o</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>p</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>q</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>r</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>returned node</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>g</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>h</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>f</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>l</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>m</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>n</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>k</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>p</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>q</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>o</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>j</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>r</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>i</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD></TR></TBODY></TABLE></DIV><P><P><BR>If there are wormy apples in the apple tree, we should remove them. When we cut a node z, every apple in the subtree rooted at node z (including the apple of node z) is going down. For example, apples <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> are going down by cutting node <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and apples <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> are going down by cutting node <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> in the apple tree in Figure 1. In order to remove wormy apples, we should find the subtree rooted at a node in which every wormy apple exists, and then cut the node.<P>Given two wormy apples (possibly same) in an apple tree, the problem is to find a node satisfying that two wormy apples must drop and the minimum number of normal apples drop simultaneously by cutting the node. For example, suppose that nodes <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> are given as wormy apples in the apple tree in Figure 1. By cutting nodes <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> , two wormy apples can be removed. However, the smaller number of normal apples drop by cutting node <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> than the case that we cut node <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>. So, we want to find the node <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case is composed of three lines. In first line, the number of nodes <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3356a.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3356a.gif ALT="$ \le$">2000)</SPAN> <tex2html_verbatim_mark> is given. In next second line, <SPAN CLASS="MATH">2<I>N</I></SPAN> <tex2html_verbatim_mark> binary representation of an apple tree is given. There is no space between each representation. In last third line, two indices <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3356a.gif ALT="$ \le$"><I>A</I>, <I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3356a.gif ALT="$ \le$">2<I>N</I>)</SPAN> <tex2html_verbatim_mark> corresponding to two wormy apples in the binary representation are given. These two indices are not corresponding to node directly but index of binary representation. Notice that, the value of each index can be ``0" or ``1".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. For each test case, find a node satisfying that the wormy apples must be removed and the minimum number of normal apples are removed simultaneously by cutting the node, and then print an index of ``0" where the node was first visited and the other index of ``1" where the node was returned in the binary representation. Print exactly one line for each test case index of ``0" first, and index of ``1" later. And there must be a single space between two indices. The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
18 
000010110010111000010101100101110111 
4 11 
18 
000010110010111000010101100101110111 
11 12 
18 
000010110010111000010101100101110111 
5 12
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 15 
9 14 
2 15
</PRE><P>
______________________________________________________
3357||||||false||||||
<P>``Pinary" number is a positive number using only two digits ``0" and ``1" with usual rule that it must not begin with a 0, and the additional rule that two successive digits must not be both ``1". This means that the factor ``11" is forbidden in the string. So the allowed Pinary writings are <SPAN CLASS="MATH">1, 10, 100, 101, 1000, 1001,..., 100010101010100010001</SPAN> <tex2html_verbatim_mark>. For example, ``100101000" is a Pinary number, but neither ``0010101" nor ``10110001" are Pinary numbers.<P>Each Pinary number represents a positive integer in the order they appear (using length order, lexicographic order), that is, 1 is mapped to 1, 10 is mapped to 2. And 100, 101 and 1000 are mapped to 3, 4 and 5, respectively. You are to write a program to generate Pinary number representations for integers given.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing a postive integer <!-- MATH
 $2 < K < 90,000,000$
 --><SPAN CLASS="MATH">2 &lt; <I>K</I> &lt; 90, 000, 000</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. For each test case, print the Pinary number representation for input integer. The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
7 
2000 
22
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1010 
1001000001001000 
1000001
</PRE><P>
______________________________________________________
3358||||||false||||||
<P>
A treasure hunter got a map of an ancient pyramid where the sacred treasure is enshrined. He started on a journey to excavate the treasure. Once he arrived at the gate of the pyramid, the earthquake occurred. As a result, some rocks fell from the ceiling to the floor on the inner pyramid. He found two rocks blocked the way to the treasure. He couldn't pull any rocks because they are too large and heavy. One thing he could do is to push a single rock moving one block forward. Now, he is going to reach to the treasure and pushing the rocks if necessary. If he will push a rock to a wrong direction, he cannot advance any more, thus he will have to give up the treasure. 

<P>
In a map of Figure 1, white blocks represent open paths and black blocks represent barriers. Black circles represent rocks, and E and T represent the position of the entrance and the treasure, respectively. A person and rocks can move to a direction of north, east, west, and south. In order to push a rock, the forward and the backward blocks of the position of the rock should be both white. In Figure 1, the person on E can push the rock on (2, 3) to north or east. But, he cannot push it to west and south because he can't move to the positions (2, 4) and (1, 3). If he will push it to east, he cannot push it to east any more because he cannot push two rocks at the same time. If he will push the rock on (2, 5) to north, the treasure will be broken down. In order to get the treasure, he has to push the rock on (2, 3) to north and then push the rock on (2, 5) to east. Notice that any rock cannot be moved outside the pyramid. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3358.eps}$
 -->
<IMG
 WIDTH="828" HEIGHT="232" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3358.gif
 ALT="\epsfbox{p3358.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
A map is represented by a matrix as Figure 2. In a matrix, <TT>0</TT>, <TT>1</TT>, <TT>2</TT>, <TT>3</TT>, and <TT>4</TT> represent an open path, a barrier, the entrance, the treasure, and a rock, respectively. The entrance, the treasure, and the rocks are positioned on open paths in the map. 

<P>
Write a program for computing the minimum number of pushing rocks so as to reach to the treasure. For an example in Figure 1, the answer is <TT>2</TT>. If there is a path to the treasure without pushing any rocks, the answer is <TT>0</TT>. If there doesn't exist a path, the answer is <TT>-1</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>, the number of rows and the number of columns of a map, <SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3358.gif
 ALT="$ \le$"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3358.gif
 ALT="$ \le$">50</SPAN>
<tex2html_verbatim_mark>. Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> integers of <TT>0</TT>, <TT>1</TT>, <TT>2</TT>, <TT>3</TT>, or <TT>4</TT>, they represent each row of the map, where <TT>0</TT>, <TT>1</TT>, <TT>2</TT>, <TT>3</TT>, and <TT>4</TT> represent an open path, a barrier, the entrance, the treasure, and a rock, respectively. There are exactly a single <TT>2</TT>, a single <TT>3</TT>, and two <TT>4</TT>'s in the map. There is a single space between the integers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program is to write to standard output. Print exactly one line for each test case. Print the minimum number of pushing rocks if they can get to the treasure. Otherwise, print <TT>-1</TT>. 

<P>
The following shows sample input and output for three test cases. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
4 6 
1 1 0 1 3 1
1 0 4 0 4 0
1 0 0 1 0 1
2 0 0 0 0 0
5 6 
1 1 1 0 1 1
1 0 0 0 4 1
1 0 4 1 0 0
1 1 0 1 0 3
2 0 0 1 1 1
4 4 
2 0 0 3 
1 4 0 0 
0 0 4 1 
1 1 0 1
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
-1 
0
</PRE> 

<P>

______________________________________________________
3359||||||false||||||
<P>
My department, Department of Computer Science, has a seminar room equipped with luxurious conveniences. Many research groups want to utilize the seminar room among others. To make out a weekly schedule of the seminar room, each research group was requested to submit a candidate time interval for its own seminar. Having realized that some candidate time intervals were overlapped, the department chairman Prof. Yang fell in a difficult situation. In order to assign the seminar room to the groups as fair as possible, he decided to request the seminar groups to submit two candidate time intervals. The two time intervals submitted by a group can be overlapped; however, one should not be contained in the other. Now, Prof. Yang's problem of preparing a weekly schedule is to assign one of the candidate time intervals submitted by each group to the group so that the time intervals assigned to groups do not overlap each other. If the finish time of one time interval coincides with the start time of the other, the two time intervals are not considered to be overlapped. 

<P>
A candidate time interval is specified by a pair of the start time and finish time. The time is written in format <TT><SPAN CLASS="MATH"><I>ddd</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>hh</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>mm</I></SPAN>
<tex2html_verbatim_mark></TT> , where <SPAN CLASS="MATH"><I>ddd</I></SPAN>
<tex2html_verbatim_mark> are three capital letters representing the day of a week, <SPAN CLASS="MATH"><I>hh</I></SPAN>
<tex2html_verbatim_mark> are two digits representing full hours <!-- MATH
 $(00 \le hh \le 23)$
 -->
<SPAN CLASS="MATH">(00<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3359img1.png
 ALT="$ \le$"><I>hh</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3359img1.png
 ALT="$ \le$">23)</SPAN>
<tex2html_verbatim_mark> , and <SPAN CLASS="MATH"><I>mm</I></SPAN>
<tex2html_verbatim_mark> are two digits representing minutes <!-- MATH
 $(00 \le mm \le 59)$
 -->
<SPAN CLASS="MATH">(00<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3359img1.png
 ALT="$ \le$"><I>mm</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3359img1.png
 ALT="$ \le$">59)</SPAN>
<tex2html_verbatim_mark>. On Sundays, a reservation will not be made. Thus, <SPAN CLASS="MATH"><I>ddd</I></SPAN>
<tex2html_verbatim_mark> are one of MON, TUE, WED, THU, FRI, SAT. 

<P>
For example, suppose you are given three seminar groups and its candidate time intervals as shown in the table below. 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
seminar group 1    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      MON:09:00 MON:11:00 </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      MON:10:00 MON:12:00 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>seminar group 2    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      MON:09:00 MON:11:30 </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      TUE:13:25 TUE:14:27 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>seminar group 3    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      MON:09:30 MON:11:00 </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      MON:23:00 TUE:01:00 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
If three time intervals [MON 09:00 - MON 11:00], [TUE 13:25 - TUE 14:27], and [MON 23:00 - TUE 01:00] are assigned to seminar groups 1, 2, and 3, respectively, the time intervals do not overlap each other, and thus all the seminar groups will be happy. 

<P>
Now, Prof. Yang wants to find an efficient method to determine, for given two candidate time intervals per each seminar group, whether or not one of the candidate time intervals can be assigned to each group so that all the time intervals assigned to groups do not overlap each other. Write a program that can help Prof. Yang. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $n \le 1,000$
 -->
<SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3359img1.png
 ALT="$ \le$">1, 000</SPAN>
<tex2html_verbatim_mark>, representing the number of seminar groups. In the next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines, each line contains two candidate time intervals for a seminar group in the form <TT><!-- MATH
 $d_{1}d_{1}d_{1}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>1</SUB><I>d</I><SUB>1</SUB><I>d</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $h_{1}h_{1}$
 -->
<SPAN CLASS="MATH"><I>h</I><SUB>1</SUB><I>h</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $m_{1}m_{1}$
 -->
<SPAN CLASS="MATH"><I>m</I><SUB>1</SUB><I>m</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark></TT>, <TT><!-- MATH
 $d_{2}d_{2}d_{2}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>2</SUB><I>d</I><SUB>2</SUB><I>d</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $h_{2}h_{2}$
 -->
<SPAN CLASS="MATH"><I>h</I><SUB>2</SUB><I>h</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $m_{2}m_{2}$
 -->
<SPAN CLASS="MATH"><I>m</I><SUB>2</SUB><I>m</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark></TT>, <TT><!-- MATH
 $d_{3}d_{3}d_{3}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>3</SUB><I>d</I><SUB>3</SUB><I>d</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $h_{3}h_{3}$
 -->
<SPAN CLASS="MATH"><I>h</I><SUB>3</SUB><I>h</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $m_{3}m_{3}$
 -->
<SPAN CLASS="MATH"><I>m</I><SUB>3</SUB><I>m</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark></TT>, and <TT><!-- MATH
 $d_{4}d_{4}d_{4}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>4</SUB><I>d</I><SUB>4</SUB><I>d</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $h_{4}h_{4}$
 -->
<SPAN CLASS="MATH"><I>h</I><SUB>4</SUB><I>h</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $m_{4}m_{4}$
 -->
<SPAN CLASS="MATH"><I>m</I><SUB>4</SUB><I>m</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark></TT>. The two candidate time intervals are <TT>[<!-- MATH
 $d_{1}d_{1}d_{1}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>1</SUB><I>d</I><SUB>1</SUB><I>d</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $h_{1}h_{1}$
 -->
<SPAN CLASS="MATH"><I>h</I><SUB>1</SUB><I>h</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $m_{1}m_{1}$
 -->
<SPAN CLASS="MATH"><I>m</I><SUB>1</SUB><I>m</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> - <!-- MATH
 $d_{2}d_{2}d_{2}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>2</SUB><I>d</I><SUB>2</SUB><I>d</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $h_{2}h_{2}$
 -->
<SPAN CLASS="MATH"><I>h</I><SUB>2</SUB><I>h</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $m_{2}m_{2}$
 -->
<SPAN CLASS="MATH"><I>m</I><SUB>2</SUB><I>m</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>]</TT> and <TT>[<!-- MATH
 $d_{3}d_{3}d_{3}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>3</SUB><I>d</I><SUB>3</SUB><I>d</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $h_{3}h_{3}$
 -->
<SPAN CLASS="MATH"><I>h</I><SUB>3</SUB><I>h</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $m_{3}m_{3}$
 -->
<SPAN CLASS="MATH"><I>m</I><SUB>3</SUB><I>m</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> - <!-- MATH
 $d_{4}d_{4}d_{4}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>4</SUB><I>d</I><SUB>4</SUB><I>d</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $h_{4}h_{4}$
 -->
<SPAN CLASS="MATH"><I>h</I><SUB>4</SUB><I>h</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark>:<!-- MATH
 $m_{4}m_{4}$
 -->
<SPAN CLASS="MATH"><I>m</I><SUB>4</SUB><I>m</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark>]</TT>. There is a single space between the start time and finish time of a time interval and between the two time intervals.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program is to write to standard output. Print exactly one line for each test case. Print `<TT>YES</TT>' if one of the candidate time intervals can be assigned to each group so that all the time intervals assigned to groups do not overlap each other. Otherwise, print `<TT>NO</TT>'. The following shows sample input and output for three test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
3 
MON:09:00 MON:11:00 MON:10:00 MON:12:00
MON:09:00 MON:11:30 TUE:13:25 TUE:14:27
MON:09:30 MON:11:00 MON:23:00 TUE:01:00
2 
SAT:08:00 SAT:09:00 FRI:13:13 FRI:14:14
SAT:08:00 SAT:09:00 FRI:13:13 FRI:14:14
4 
FRI:13:13 FRI:14:14 SAT:08:00 SAT:09:00
FRI:13:13 FRI:14:14 SAT:08:00 SAT:09:00
FRI:13:13 FRI:14:14 SAT:08:00 SAT:09:00
FRI:13:13 FRI:14:14 SAT:08:00 SAT:09:00
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
YES 
YES 
NO
</PRE> 

<P>

______________________________________________________
3360||||||false||||||
<P>A game called janggi is a variant of chess played in Korea. It is played by two players on a board with <SPAN CLASS="MATH">9 <TT>x</TT> 10</SPAN> <tex2html_verbatim_mark> size. Each player has 16 pieces of 7 kinds - 1 king, 2 chariots, 2 cannons, 2 horses, 2 elephants, 2 guards and 5 pawns. In janggi, the cannon's move has several restrictions. The cannon moves and captures the opponent's piece by jumping over exactly one piece along a straight line.<P>Here you are to write a program for the one-dimensional janggi. The board consists of linear cells. Four kinds of pieces are given: <TT>C</TT> (cannon), <TT>E</TT> (enemy), <TT>F</TT> (friend) and <TT>K</TT> (king). <TT>C</TT> and <TT>F</TT> are your pieces, and <TT>E</TT> and <TT>K</TT> are the opponent's ones. Only one <TT>C</TT> and one <TT>K</TT> are given. Your have to capture <TT>K</TT> using a sequence of valid moves.<P>The rules of one-dimensional janggi are:<P><DL COMPACT><DT>1.</DT><DD>You can move only <TT>C</TT>.</DD><DT>2.</DT><DD><TT>C</TT> can move by jumping over exactly one piece of <TT>K</TT>, <TT>E</TT> or <TT>F</TT>.</DD><DT>3.</DT><DD>The next position of <TT>C</TT> is either an unoccupied position or a position occupied by opponent's pieces.</DD><DT>4.</DT><DD>When <TT>C</TT> moves to a position occupied by an opponent's piece, we say ``<TT>C</TT> captures <TT>E</TT> (or <TT>K</TT>)" and the captured piece is removed from the board. Obviously <TT>C</TT> can not capture a friendly piece, <TT>F</TT>.</DD><DT>5.</DT><DD>The game is over when <TT>C</TT> captures <TT>K</TT>.</DD></DL><P>For example, in the following board, <TT>C</TT> is in position 6. In this position, <TT>C</TT> can move to 2 (by capturing <TT>E</TT>), 3, 4, 9 or 10 (by capturing <TT>E</TT>). Other positions are not reachable by a single move.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=14 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD></TR></TBODY></TABLE></DIV><P><P><BR>After <TT>C</TT> captures <TT>E</TT> in 10, the board changes as follows. Now <TT>C</TT> can move to 6, 7, 12 or 13 (by capturing <TT>K</TT>).<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=14 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT></TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD></TR></TBODY></TABLE></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case takes one line containing a string which represents the configuration of the one-dimensional janggi board. Occupied cells are denoted by <TT>C</TT>, <TT>E</TT>, <TT>F</TT> and <TT>K</TT>; and unoccupied cells are denoted by <TT>B</TT>. The length of the string is at least 5 and at most 200.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT> </H2><P>Your program is to write to standard output. Print exactly one line for each test case. For each test case, print the minimum number of moves to capture <TT>K</TT>. If it is impossible to capture <TT>K</TT>, print <TT>0</TT>.<P>The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
BEBBFCBEBEFBKB 
BEEBKCE 
BCBEFFEK
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
3 
0
</PRE><P>
______________________________________________________
3361||||||false||||||
<P>Tom is a chemist who has an interest in molecular structure. Recently he found a new atom and named it <SPAN CLASS="textit">tomatom</SPAN>. Two or more tomatoms are joined by bonds to make a molecule called <SPAN CLASS="textit">tomolecule</SPAN>. In chemistry, the term valency is used to indicate the number of bonds joining an atom to its neighboring atoms. Tomatoms in a tomolecule are joined satisfying the following conditions:<P><DL COMPACT><DT>(1)</DT><DD>Each tomatom is joined by at least one bond, and there can be multiple bonds between two tomatoms.</DD><DT>(2)</DT><DD>A tomolecule is connected, that is, does not have isolated components. That means there is a path composed of bonds between every two tomatoms in a tomolecule.</DD><DT>(3)</DT><DD>There is no bond between a tomatom and itself.</DD></DL><P>Currently Tom is trying to investigate the property of valency in a tomolecule. Precisely speaking, given some positive integers, Tom wants to know whether there can be a tomolecule whose valency numbers of tomatoms are same to the integers and satisfying the above conditions.<P>For example, suppose a tomolecule is composed of three tomatoms and given integers are 50, 60, and 70. For convenience, we name three tomatoms as <SPAN CLASS="MATH"><I>A</I><SUP>1</SUP>, <I>A</I><SUP>2</SUP>, <I>A</I><SUP>3</SUP></SPAN> <tex2html_verbatim_mark>. If there are 20 bonds between <SPAN CLASS="MATH"><I>A</I><SUP>1</SUP></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>A</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>, 30 bonds between <SPAN CLASS="MATH"><I>A</I><SUP>1</SUP></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>A</I><SUP>3</SUP></SPAN> <tex2html_verbatim_mark> , and 40 bonds between <SPAN CLASS="MATH"><I>A</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>A</I><SUP>3</SUP></SPAN> <tex2html_verbatim_mark> , the valency of <SPAN CLASS="MATH"><I>A</I><SUP>1</SUP>, <I>A</I><SUP>2</SUP>, <I>A</I><SUP>3</SUP></SPAN> <tex2html_verbatim_mark> are 50, 60, 70, respectively. So, there can be a tomolecule corresponding to such integers. If 10, 20, 40 are given, it is easy to know that there can be no tomolecule whose valency numbers of tomatoms are such integers. As another example, suppose four tomatoms and four integers 1, 1, 1, 1 are given, there can be no tomolecule satisfying the above condition (2).<P>You are to write a program to help Tom. For given positive integers, your program should determine whether there can be a tomolecule whose valency numbers of tomatoms are same to the integers and satisfying the above conditions. Also, in case such a tomolecule exists, your program should find one possible structure.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, the number of tomatoms, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3361img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3361img1.png ALT="$ \le$">200</SPAN> <tex2html_verbatim_mark>. In the next line, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> nondecreasing positive integers are given. Assume <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-th integer in the line represents the valency of tomatom <SPAN CLASS="MATH"><I>A</I><SUP>k</SUP></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3361img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3361img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>. There is a single space between the integers, and the integers are between 1 and 10,000, both inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. For each test case, print `<TT>YES</TT>' at the first line if there can be a tomolecule corresponding to the integers in the input. Otherwise, print `<TT>NO</TT>'. If your program printed `<TT>YES</TT>' at the first line, your program should find one possible structure and print the number of bonds between tomatom <SPAN CLASS="MATH"><I>A</I><SUP>k</SUP></SPAN> <tex2html_verbatim_mark> and tomatoms <SPAN CLASS="MATH"><I>A</I><SUP>k+1</SUP>, <I>A</I><SUP>k+2</SUP>,..., <I>A</I><SUP>N</SUP></SPAN> <tex2html_verbatim_mark> at <SPAN CLASS="MATH"><I>k</I> + 1</SPAN> <tex2html_verbatim_mark>-th line, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3361img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3361img1.png ALT="$ \le$"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>. There should be a single space between the numbers.<P>The following shows sample input and output for five test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
3 
50 60 70
3 
10 20 40
4 
1 1 1 1  
6 
1 1 1 1 1 5 
6 
1 1 1 1 4 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
YES 
20 30 
40 
NO 
NO 
YES 
0 0 0 0 1 
0 0 0 1
0 0 1 
0 1 
1 
YES 
0 0 0 1 0
0 0 1 0
0 0 1 
0 1 
2
</PRE><P>
______________________________________________________
3362||||||false||||||
<P>
You are going to build a new house. To know the minimum construction cost of the roof, you want to know its height. But you have the information only on the boundary of the house, so you have to compute the height of the roof from the boundary information. The formal description is as follows. The boundary of a house is defined as a rectilinear polygon with only axis-parallel edges, horizontal or vertical. Let <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> be the rectilinear polygon with <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> vertices. A <SPAN  CLASS="textit">straight skeleton</SPAN> SK(<SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>) is a trace of the vertices of <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> when <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> is shrunk, each edge moving at the same speed and keeping the same direction. Figure 1 (a) and (b) show the shrinking process for <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> and SK(<SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>), respectively. 

<P>
Now we assume that <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> is on the XY plane, and <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> is shrunk at unit speed while moving upward (+Z-direction) at unit speed. Then <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> traces a three dimensional polyhedral surface, called <SPAN  CLASS="textit">terrain</SPAN>, and SK(<SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>) can be seen as the projection of the edges of this terrain onto the XY plane. From the definition, each face of this terrain lies inside a plane that makes a dihedral angle 45Âº with XY plane. Another fact for this terrain is that each of its faces is bounded by at least one edge of <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>. We call this terrain the <SPAN  CLASS="textit">roof</SPAN> of the polygon <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>. For instance, Figure 1 (c) shows the roof. The height of a point <SPAN CLASS="MATH"><I>q</I></SPAN>
<tex2html_verbatim_mark> on the roof is the altitude, i.e., distance between <SPAN CLASS="MATH"><I>q</I></SPAN>
<tex2html_verbatim_mark> and its projected point on the XY plane. The height of a roof is the maximum height of points on the roof. 

<P>
Your task is to compute the height of the roof of the input rectilinear polygon <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3362.eps}$
 -->
<IMG
 WIDTH="892" HEIGHT="231" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3362.gif
 ALT="\epsfbox{p3362.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program is to read the input from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, the number of vertices of the input polygon <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $4 \le n \le 1,000$
 -->
<SPAN CLASS="MATH">4<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3362.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3362.gif
 ALT="$ \le$">1, 000</SPAN>
<tex2html_verbatim_mark>. In the next line, <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark>-coordinates of the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> vertices of <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> are given according to the counterclockwise order. The first pair of integers is <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> coordinates of the first vertex of <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>, and the second pair is <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> coordinates of the second vertex of <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>, and so on. The coordinates are separated by a single space, and are positive integer values between 1 and 100,000, both inclusive. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program is to write to standard output. Print exactly one line for each test case. For each test case, print the height of the roof of <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> with exactly one digit in the fraction part. The following shows sample input and output for three test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
4
1 1 4 1 4 4 1 4 
6
4 1 8 1 8 6 1 6 1 4 4 4 
14 
1 1 4 1 4 2 7 2 7 1 11 1 11 10 8 10 8 8 
1 8 1 6 3 6 3 4 1 4
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1.5 
2.0 
3.0
</PRE> 

<P>

______________________________________________________
3363||||||false||||||
<P>Run Length Encoding(RLE) is a simple form of compression. RLE consists of the process for searching for a repeated runs of a single character in a string to be compressed, and replacing them by a single instance of the character and a run count. For example, a string <TT>abcccddddddefgggggggggghijk</TT> is encoded into a string <TT>ab3c6def10ghijk</TT> by RLE.<P>A new compression method similar to RLE is devised and the rule of the method is as follows: if a substring <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is repeated <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> times, replace <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> copies of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>k</I>(<I>S</I>)</SPAN> <tex2html_verbatim_mark>. For example, <TT>letsgogogo</TT> is compressed into <TT>lets3(go)</TT>. The length of <TT>letsgogogo</TT> is 10, and the length of <TT>lets3(go)</TT> is 9. In general, the length of <SPAN CLASS="MATH"><I>k</I>(<I>S</I>)</SPAN> <tex2html_verbatim_mark> is (number of digits in <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>) + (length of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>) + 2 (for `(' and `)'). For example, the length of <TT>123(abc)</TT> is 8. It is also possible to nest compression, so the substring <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> may itself be a compressed string. For example, <TT>nowletsgogogoletsgogogo</TT> could be compressed as a <TT>now2(lets3(go))</TT>, and <TT>nowletsgogogoletsgogogoandrunrunrun</TT> could be compressed as <TT>now2(lets3(go))and3(run)</TT>.<P>Write a program that, for a given string, gives a shortest compressed string using the compression rules as described above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case consists of a single line containing one string of no more than 200 characters drawn from a lower case alphabet. The length of shortest input string is 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. For each test case, print the length of the shortest compressed string.<P>The following shows sample input and output for four test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
ababcd 
letsgogogo 
nowletsgogogoletsgogogo 
nowletsgogogoletsgogogoandrunrunrun
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6 
9 
15 
24

______________________________________________________
3364||||||false||||||
<P>
The president is in a predicament: should he select a judge with different opinions of the judges currently on the court, or should he stick with a judge like those currently on the court? Picking a candidate that shares the opinions of the existing judges on the court results in a harmonious court; on the other hand, selecting a candidate with different opinions results in a more diverse court. 

<P>
Judges are trained at law schools, and the professors and students they work with at the law school influence their thinking, and ultimately their opinions: think of a law school as a set of persons sharing common thoughts. At different times a person may belong to a different law school, even several at one time, and thus share some more common thoughts.

<P>
The thoughts are what matters. If you pick a judge, you pick the thoughts of the members of whatever law schools he or she was in - call this the first circle. Each school, however, might well share the thoughts of the additional schools all of its members were in - the second circle. You can continue to form additional circles as long as there are more members to be linked. 

<P>
Now consider a court. It's thoughts depend on the thoughts of all the law schools which the court's judges attended - the union of their first circles. Additionally, you can consider the union of the second circles - the additional schools all those school's members attended - or even further. 

<P>
You can define a distance for each member of a circle (or union of circles): assign distance 0 to the member (or entire court) at the center, distance 1 to the members in the first circle (or in the union of first circles), and so on out until distance <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> to the remaining persons in the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>'th circle (or union) that is considered.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3364.eps}$
 -->
<IMG
 WIDTH="505" HEIGHT="476" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3364.gif
 ALT="\epsfbox{p3364.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
For a candidate, this defines distance in <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> circles around the candidate. For a court, this defines distance in <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> unions of circles around the court. Consider a person <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> who appears in both, a candidate's <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark>'th circle and a court's <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark>'th union of circles: <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> has distance a from the candidate and <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> from the court. <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> contributes <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> times <SPAN CLASS="MATH"><I>n</I> - <I>b</I></SPAN>
<tex2html_verbatim_mark> to the candidate's diversity, which is defined to be the sum over the contributions of all such persons <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>.

<P>
In the example given below, <TT>whale</TT>'s first circle contains <TT>cato</TT>, <TT>pablo</TT>, and <TT>nathan</TT>, who have distance 0, 1, and 1 from the court. Because of <TT>pablo</TT>, <TT>whale</TT>'s second circle contains <TT>jeffy</TT> and <TT>wanton</TT> with distance 1 and 2 from the court. The example considers two circles, therefore, <TT>cato</TT> contributes 2, <TT>pablo</TT> and <TT>nathan</TT> each contribute 1, and <TT>jeffy</TT> contributes 2 to <TT>whale</TT>'s diversity of 6. 

<P>
There is, however, a dark horse rule: If a candidate's circles and the court's circles do not have any members in common, the candidate is called a dark horse and cannot be considered for the court position. 

<P>
You are asked to write a program that will help the president select a candidate for the court. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to your program consists of a line with the court, a line with candidates, a line with a number indicating how many circles (and unions) to consider, a line with the number of law schools, and finally the sequence of law schools, one per line. Each line for court, candidates, or law school consists of a sequence of names, separated by white space. Names themselves do not contain white space and comparison ignores the case of characters. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program will output one line labeled harmonious with the names of all candidates for a <TT>harmonious</TT> court that have the same smallest diversity value followed by that value, a second line labeled <TT>diverse</TT> with the names of all candidates for a diverse court that have the same largest diversity value, again followed by that value, and finally a line labeled <TT>dark horse</TT> with the names of all candidates subject to the dark horse rule, if any. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
cato cesar cicero 
wanton wishful whopper whale 
2 
5 
cato pablo nathan whale 
cesar penelope jeffy wishful 
cicero hito mike 
pablo wanton jeffy 
whopper hannah
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
harmonious whale wishful 6 
diverse wanton 18 
dark horse whopper
</PRE> 

<P>

______________________________________________________
3365||||||false||||||
<P>Biologists use bacteria to clone DNA for sequencing. These bacteria are injected with the DNA that needs to be cloned and then allowed to reproduce on a large plate. As these bacteria reproduce they form colonies. Only bacteria from healthy colonies will be used for sequencing.<P>Your program will be given a pixelized snapshot of a plate, <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> pixels wide and <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark> pixels high. Pixel <SPAN CLASS="MATH">(0, 0)</SPAN> <tex2html_verbatim_mark> is in the upper left hand corner of the snapshot, and pixel <SPAN CLASS="MATH">(<I>W</I> - 1, <I>H</I> - 1)</SPAN> <tex2html_verbatim_mark> is at the bottom right hand corner of the snapshot. Each pixel in the snapshot is either a 0, which indicates no bacteria present at that location, or 1 indicating the presence of bacteria.<P>We are interested in finding colonies consisting of healthy bacteria that grow in a very specific way. Bacteria in these colonies have the property that when they grow, bacteria from every cell in the entire colony will grow into each of the 4 adjacent cells that have either the same row, or column as the original cell. Therefore a healthy colony consists of 5 or more cells, as illustrated by the following two examples:<P><PRE>
                        *                    *
                       ***                  ***
                        *                  *****
                                            ***
                                             *
</PRE><P>The following are examples of unhealthy colonies:<P><PRE>
                        *
         ***           * *          ****
                        *             ****
</PRE><P>Furthermore, to avoid cross contamination, colonies must not be too close to the edge of the plate or each other. The diameter of a healthy colony is the number of pixels in the largest row or column of the colony. Every cell on the boundary of a healthy colony must be at least <SPAN CLASS="textit">diameter</SPAN> pixels away, measured horizontally and vertically, from any edge of the plate and any other pixel that contains bacteria outside of the colony.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will consist of a line containing two positive integer values separated by blanks; <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> the width, and <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark> the height of a plate. The next <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark> lines of input will each contain <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> zeros or ones indicating the status of the corresponding pixel (i.e. `<TT>0</TT>' meaning no bacteria present, `<TT>1</TT>' meaning bacteria is present), starting with row 0 and ending with row <SPAN CLASS="MATH"><I>H</I> - 1</SPAN> <tex2html_verbatim_mark>.<P>Your program will determine which colonies on the plate are healthy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>It will produce as output the count of the number of healthy colonies, followed by the coordinates of the center pixel of each healthy colony (if any).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
15 15 
000000001000000 
000000000100000 
000000000010000 
000000000001000 
000000000000100 
000000010000010 
000000111000001 
000001111100000 
000000111000000 
000000010000000 
000000000000000 
000000000000000 
000000000000010 
000000000000111
000000000000010
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Number of healthy colonies: 1
Colony 1: 7, 7
</PRE><P>
______________________________________________________
3366||||||false||||||
<P>James is not known for keeping his room very clean. Scattered about his room are rectangular boxes of computer parts, which makes it very difficult to get from one location in the room to another. Although James is not very neat, he is very careful about the way in which the boxes are placed in the room. The boxes are placed in such a way that the sides of the boxes facing a wall are parallel to the wall.<P>The challenge that James faces is to find a path, consisting of a specific number of straight line segments which end on points with integer coordinates that gets him from one location in his room to another without stepping on or over any boxes. The diagram below shows a possible configuration of James' room containing five boxes, and a path consisting of three line segments that lead from start to end.<P><DIV ALIGN="CENTER"><IMG WIDTH="896" HEIGHT="755" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3366.gif ALT="\epsfbox{p3366.eps}"> <tex2html_verbatim_mark></DIV><P>You are to write a program that given the dimension of James' room, his starting location and desired destination, the number of line segments in the path, and the location of the boxes, prints the path if one exists.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input to your program will contain seven integers <SPAN CLASS="MATH"><I>X</I>, <I>Y</I>, <I>X</I><SUB>S</SUB>, <I>Y</I><SUB>S</SUB>, <I>X</I><SUB>D</SUB>, <I>Y</I><SUB>D</SUB>, <I>S</I></SPAN> <tex2html_verbatim_mark> that specify the extent of the room in x- and y-direction, the coordinates of the location where James will start his walk, the coordinates of the location of his destination, and the number of straight line segments in the path. <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> will be positive, start and destination will be within the boundary of the room, and <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> will be 2 or more.<P>The second line of input will contain a single positive integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, that gives the number of boxes in the room. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines will contain four positive integers <SPAN CLASS="MATH"><I>X</I><SUB>1</SUB>, <I>Y</I><SUB>1</SUB>, <I>X</I><SUB>2</SUB>, <I>Y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> that specify the location of two opposite corners of a box and will be within the boundary of the room. The boxes will not overlap, but may touch (and James cannot touch a box).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>If a path exists your program will print integer coordinates of the <SPAN CLASS="MATH"><I>S</I> - 1</SPAN> <tex2html_verbatim_mark> intermediate points, in order, for a path containing <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> straight line segments that starts at location <SPAN CLASS="MATH"><I>X</I><SUB>S</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Y</I><SUB>S</SUB></SPAN> <tex2html_verbatim_mark>, and ends at location <SPAN CLASS="MATH"><I>X</I><SUB>D</SUB>, <I>Y</I><SUB>D</SUB></SPAN> <tex2html_verbatim_mark>. If such a path (with integer coordinates) does not exist the program will print the word `<TT>impossible</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
25 20 4 16 21 0 3 
5 
0 8 9 12 
12 12 20 18 
18 8 25 11 
12 5 21 7 
11 0 14 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
14 9 
8 6
</PRE><P>
______________________________________________________
3367||||||false||||||
<P>A technician has been training the monkeys used in the lab where she works to open and close doors. Next to the lab is a long hallway that contains a number of offices which initially have closed doors. The offices in the hallway are numbered starting at 1 and ending at <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of offices in the hallway. Interestingly the number of monkeys in the lab is exactly equal to the number of doors in the hallway.<P>At night the technician lets the monkeys out of their cages one at a time for exercise. The first monkey that is let out of the cage runs down the hallway and opens every door (i.e., 1, 2, 3, 4, ...). The second monkey runs down the hallway and closes all of the even numbered doors (i.e., 2, 4, 6, 8, ...). The third monkey runs down the hallway and examines every third door (i.e., 3, 6, 9, 12, ...). The monkey will open any closed door that it examines, and close any open door that it examines. The fourth monkey examines every fourth door, and so. This process continues until all of the monkeys have been let out of their cages and allowed to run down the hallway - the last monkey will only examine the last door.<P>It would be nice to know which doors are left open at the end of the night. The technician has decided to write a grant to fund this work and has asked you for help. She needs you to write a program, that will be given as input the number of doors in a hallway - assuming that there are as many monkeys as there are doors, and that all of the doors are initially closed. Your program will output a list of numbers, one per line, that identify the doors that will be open after all of the monkeys have been let out of their cages.<P>For example, given a hallway that contains 5 doors (and 5 monkeys), after all the monkeys have been let out of their cages doors 1 and 4 will be open.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will consist of a single positive integer value that specifies the number of doors in the hallway.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program will produce as output a list that specifies the doors that are open after all of the monkeys have been let out of their cages.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
4
</PRE><P>
______________________________________________________
3368||||||false||||||
<P>In a Suduko puzzle you are presented with a <SPAN CLASS="MATH">9 <TT>x</TT> 9</SPAN> <tex2html_verbatim_mark> grid that is divided into smaller <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> non-overlapping sections or ``regions". Some cells in the grid will be prepopulated with the digits 1 to 9. An example of a Sudoku puzzle is shown below:<P><DIV ALIGN="CENTER"><IMG WIDTH="414" HEIGHT="415" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3368.gif ALT="\epsfbox{p3368.eps}"> <tex2html_verbatim_mark></DIV><P>Your task is to fill the remaining empty cells so that each row, column and <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> region contains one instance of every digit from 1 to 9.<P>Write a program that reads the 81 digits for the grid cells in row order, separated by white space, where a 0 indicates that the cell is not yet filled and any other digit indicates a digit already placed into the cell.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain several test cases, each of them as described above. Consecutive test cases are separated by a single blank line.<P>The input representing the puzzle shown is given below, as the first sample case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program will produce as output either a filled-in grid or the word `<TT>Impossible</TT>'. You may assume for grids for which a solution exists, there is only one valid solution.<P>The outputs of two consecutive cases will be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0 0 1 0 0 7 0 2
0 3 0 9 5 0 0 0 0
0 0 1 0 0 2 0 0 3
5 9 0 0 0 0 3 0 1
0 2 0 0 0 0 0 7 0
7 0 3 0 0 0 0 9 8
8 0 0 2 0 0 1 0 0
0 0 0 0 8 5 0 6 0
6 0 5 0 0 9 0 0 0

0 0 0 1 0 0 7 0 2
0 3 0 9 5 0 0 0 0
0 0 1 0 0 2 0 0 3
5 9 0 0 0 0 3 0 1
0 2 0 0 3 0 0 7 0
7 0 3 0 0 0 0 9 8
8 0 0 2 0 0 1 0 0
0 0 0 0 8 5 0 6 0
6 0 5 0 0 9 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9 5 6 1 3 8 7 4 2
2 3 7 9 5 4 8 1 6
4 8 1 6 7 2 9 5 3
5 9 4 8 6 7 3 2 1
1 2 8 5 9 3 6 7 4
7 6 3 4 2 1 5 9 8
8 7 9 2 4 6 1 3 5
3 1 2 7 8 5 4 6 9
6 4 5 3 1 9 2 8 7

Impossible
</PRE><P>
______________________________________________________
3369||||||false||||||
<P>
Orange computers, a fierce competitor of another well-known fruit-oriented computing company, has announced plans to develop the pPod. The pPod is an MP3 player that uses a revolutionary software system to manage its memory. Currently all pPods come with 4096 megabytes of storage. 

<P>
Songs are placed into the pPod's memory contiguously (i.e., one after another) starting at location 0. When a song is deleted, the space allocated to that song is marked as unused. The memory in the pPod can be viewed as a contiguous sequence of memory segments that either contain songs or are unused. Each memory segment is identified by a unique integer value that is equal to the address of the first byte in the segment. When adding a song to the pPod, the memory segments are scanned, in ascending order by identifier, looking for the first unused segment that is large enough to hold the song. If the segment is larger than the song, the segment is broken up into two pieces, one for the song and one for the remaining unused memory. There is memory recombination but no shifting of songs. 

<P>
You are to write program that will test your memory management system using a simple text interface. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program will accept the following commands (note that all sizes are given in megabytes):

<P>

<P>
<BR>
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=JUSTIFY WIDTH="4in">
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>
<B>Command</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> <B>Syntax</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> <B>Description</B></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Add </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>a</TT> <!-- MATH
 $song\_title \ size$
 -->
<SPAN CLASS="MATH"><I>song</I><IMG
 WIDTH="43" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3369img1.png
 ALT="$ \_title$">&nbsp;<I>size</I></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288">  Add the specified song title with the given size to 
 the pPod. The song will be added if the title has not already been added to the pPod and a memory 
 segment of a suitable size can be found. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Delete </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>d</TT> <!-- MATH
 $song\_title$
 -->
<SPAN CLASS="MATH"><I>song</I><IMG
 WIDTH="43" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3369img1.png
 ALT="$ \_title$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288"> Remove the specified song from the pPod. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>List </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>l</TT> <!-- MATH
 $song\_title$
 -->
<SPAN CLASS="MATH"><I>song</I><IMG
 WIDTH="43" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3369img1.png
 ALT="$ \_title$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288"> If the song title is in the pPod, display the starting 
address of the song in memory, the size of the
song, and the title in the format shown below: 

<P>

<P>
<BR>
<TT><SPAN CLASS="MATH"><I>aaaa</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>ssss</I></SPAN>
<tex2html_verbatim_mark> - <!-- MATH
 $song\_title$
 -->
<SPAN CLASS="MATH"><I>song</I><IMG
 WIDTH="43" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3369img1.png
 ALT="$ \_title$"></SPAN>
<tex2html_verbatim_mark></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>aaaa</I></SPAN>
<tex2html_verbatim_mark> is the address, <SPAN CLASS="MATH"><I>ssss</I></SPAN>
<tex2html_verbatim_mark> is the size and <!-- MATH
 $song\_title$
 -->
<SPAN CLASS="MATH"><I>song</I><IMG
 WIDTH="43" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3369img1.png
 ALT="$ \_title$"></SPAN>
<tex2html_verbatim_mark> is the song title. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Memory </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>m</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288"> The segments are listed in ascending order by 
 identifier. Occupied segments use the same 
 format as for the list command, unused segments 
 are displayed without a title. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Exit </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <TT>e</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="288"> Terminate the program. </TD></TR>
</TBODY>
</TABLE>

<P>

<P>
<BR>
Song titles do not contain any spaces. All string comparisons are case insensitive (i.e., Song, song, SONG are all the same). 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
If any error occurs while processing a command, your program will print `<TT>??</TT>', and read the next command.

<P>

<P><P>
<BR>

<B>Sample Run:</B> A sample run of the program is given follows. It corresponds to the sample input and sample output below. Lines printed on the left represent input to the program.

<P>
<PRE>
a aqualung 1024
a thick as a brick
                              ??
a aqualung 1024
                              ??
a thick_as_a_brick 4096
                              ??
a bouree 512
a songs_from_the_woods 512
m
                              0:1024 -- aqualung
                              1024:512 -- bouree
                              1536:512 -- songs_from_the_woods
                              2048:2048
d bouree
m
                              0:1024 -- aqualung
                              1024:512
                              1536:512 -- songs_from_the_woods
                              2048:2048
l passion_play
                              ??
a passion_play 1024
m
                              0:1024 -- aqualung
                              1024:512
                              1536:512 -- songs_from_the_woods
                              2048:1024 -- passion_play
                              3072:1024
l passion_play
                              2048:1024 -- passion_play
d songs_from_the_woods
m
                              0:1024 -- aqualung
                              1024:1024
                              2048:1024 -- passion_play
                              3072:1024
e
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
a aqualung 1024
a thick as a brick
a aqualung 1024
a thick_as_a_brick 4096
a bouree 512
a songs_from_the_woods 512
m
d bouree
m
l passion_play
a passion_play 1024
m
l passion_play
d songs_from_the_woods
m
e
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
??
??
??
0:1024 -- aqualung
1024:512 -- bouree
1536:512 -- songs_from_the_woods
2048:2048
0:1024 -- aqualung
1024:512
1536:512 -- songs_from_the_woods
2048:2048
??
0:1024 -- aqualung
1024:512
1536:512 -- songs_from_the_woods
2048:1024 -- passion_play
3072:1024
2048:1024 -- passion_play
0:1024 -- aqualung
1024:1024
2048:1024 -- passion_play
3072:1024
</PRE>

<P>

______________________________________________________
3370||||||false||||||
<P>
FALSE, the Flatland Agency for Lustful Space Exploration, has just issued their TRUE proposal - Terrific Rooms Uniting Easily, a multi-billion-flop to be (recall that flop is the unit of currency in this charming two-dimensional country).

<P>
TRUE's come in two flavors: Couches, each consisting of a dome with a single tunnel, will be used as private spaces for the FALSE astronauts. Hives, each consisting of a dome with four tunnels, will connect couches and other hives and will serve as laboratories and conference rooms. 

<P>
Of course, connections are made only from one tunnel to another, and no tunnel may be left unconnected to avoid accidents in the void. Unfortunately, FALSE astronauts tend to get lost easily; therefore, the TRUE proposal explicitly forbids any tunnel connections that would form cycles or, even worse, connect a hive to itself. 

<P>
Here are a few TRUE stations:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3370.eps}$
 -->
<IMG
 WIDTH="831" HEIGHT="649" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3370.gif
 ALT="\epsfbox{p3370.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Although (b) and (c) contain the same number of hives, they are still different from each other. Of course, they are both different from (a) which consists of two hives. (a) and (d) are equal, but for position. 

<P>
Not unlike other government agencies, FALSE believes in standards, especially in multi-billion-flop standards. They are asking that you create a LOUSY (Limit On Uniting Space Yokes) program which computes the number of different TRUE stations that can be constructed from a given number of hives. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to your program consists of several test cases, each of them is a line with a positive integer value designating the number of hives to be used for one station.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case, your program will print in a different line a single integer value - the number of different TRUE stations that can be created from this many hives.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
9
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1
35
</PRE> 

<P>

______________________________________________________
3371||||||false||||||
<P>
A wooden block is standing on a large board with 1" squares. The block is one inch deep, 2 inches wide and 4 inches tall. The block is sitting on exactly two squares. The top of the block is black, the bottom is white, the front is green, the back is red, the left face is blue, and the right face is yellow. 

<P>
The block is moved to a new location on the board by rolling it. The block is rolled in such a way that one edge is always in contact with a line of the board at all times. The block never slides. 

<P>
There are four basic operations that can be performed on the block: 

<P>
<DL COMPACT>
<DT>F:</DT>
<DD>Roll the block forward 
</DD>
<DT>B:</DT>
<DD>Roll the block backwards 
</DD>
<DT>L:</DT>
<DD>Roll the block to the left 
</DD>
<DT>R:</DT>
<DD>Roll the block to the right
</DD>
</DL>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3371.eps}$
 -->
<IMG
 WIDTH="641" HEIGHT="424" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3371.gif
 ALT="\epsfbox{p3371.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The diagram shows the original position of the block (center) and the aspect <SPAN  CLASS="textit">but not the exact board location</SPAN> of the block after each of the four basic operations. 

<P>
Write a program that when given a string containing several letters from the set F, B, L, and R, calculates the resulting position of the block following the sequence of basic operations specified in the string and prints out the new location of the front left corner of the block relative to the original location shown above and prints out the colors on the front, left, and top of the block. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to your program consists of several test cases, each of them is a line with a string containing several letters from the set `<TT>F</TT>', `<TT>B</TT>', `<TT>L</TT>', and `<TT>R</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case, your program will print in a different line a the answer following exactly the format of the sample output below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
FRBL
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
x: -2, y: 0, front: yellow, left: black, top: red
</PRE> 


______________________________________________________
3372||||||false||||||
<P>
The sadists who design problems for ACM programming contests often like to include the abbreviation ``ACM" somewhere in their problem descriptions. Thus, in years past, the World Finals has had problems involving ``Apartment Construction Management," the ``Atheneum of Culture and Movies," the ``Association of Cover Manufacturers," ``ACM Airlines," the ``Association for Computational Marinelife," and even an insect named ``Amelia Cheese Mite." However, the number of word combinations beginning with A, C, and M that make sense is finite and the problem writers are starting to run out of ideas (it's hard to think of problems about ``Antidisestablishmentarianistic Chthonian Metalinguistics"). Fortunately, modern culture allows more flexibility in designing abbreviations - consider, for example: 

<P>

<P>
<BR>
GDB - Gnu DeBugger 

<P>
LINUX - either ``LINus's UniX" or ``LINUs's miniX" or ``Linux Is Not UniX" 

<P>
SNOBOL - StriNg Oriented symBOlic Language 

<P>
SPITBOL - SPeedy ImplemenTation of snoBOL 

<P>

<P>
<BR>
The rules used in these examples seem to be:  

<P>

<UL>
<LI>Insignificant words (such as ``of ", ``a", ``the", etc.) are ignored.  
</LI>
<LI>The letters of the abbreviation must app ear, in the correct order, as an ordered sublist of the letters in the significant words of the phrase to b e abbreviated.  
</LI>
<LI>At least one letter of the abbreviation must come from every significant word (multiple occurrences of a letter are, of course, treated as distinct). 
</LI>
</UL>

<P>
Of course these rules are often broken in real life. For instance, RADAR is an abbreviation for ``RAdio Detecting And Ranging". Under our rules (assuming that ``and" is an insignificant word), this would not be a valid abbreviation (however, RADR or RADRAN or DODGING would b e valid). You have been asked to take a list of insignificant words and a list of abbreviations and phrases and to determine in how many ways each abbreviation can b e formed from the corresponding phrase according to the rules above.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file consists of multiple scenarios. Each scenario b egins with an integer <!-- MATH
 $100 \ge n \ge 1$
 -->
<SPAN CLASS="MATH">100<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3372img1.png
 ALT="$ \ge$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3372img1.png
 ALT="$ \ge$">1</SPAN>
<tex2html_verbatim_mark> followed by <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> insignificant words, all in lower case, one p er line with no extra white space. (A line containing 0 indicates end of input.) Following this are one or more test cases for this scenario, one per line, followed by a line containing the phrase `<TT>LAST CASE</TT>'. Each line containing a test case begins with an abbreviation (uppercase letters only) followed by a phrase (lowercase letters and spaces only). The abbreviation has length at least 1 and the phrase contains at least one significant word. No input line (including abbreviation, phrase, and spaces) will contain more than 150 characters. Within these limits, however, abbreviations and phrase words may be any length.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the abbreviation followed by either 

<P>

<P>
<BR>

<TT>is not a valid abbreviation</TT> 

<P>

<P>
<BR>
or 

<P>

<P>
<BR>

<TT>can be formed in <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> ways</TT> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> is the number of different ways in which the letters of the abbreviation may be assigned to the letters in the phrase according to the rules above. The value of <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> will not exceed the range of a 32-bit signed integer.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
and 
of 
ACM academy of computer makers 
RADAR radio detection and ranging 
LAST CASE 
2 
a 
an 
APPLY an apple a day 
LAST CASE 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
ACM can be formed in 2 ways 
RADAR is not a valid abbreviation 
APPLY can be formed in 1 ways
</PRE> 

<P>

______________________________________________________
3373||||||false||||||
<P>
Ann Sister owns a genealogical database service, which maintains family tree history for her clients. When clients login to the system, they are presented with a variety of services: searching, printing, querying, etc. One recent question that came up which the system was not quite prepared for was the following: ``Which member of my family had the most grandchildren?" The client who posed this question eventually had to answer it by manually searching the family tree database herself. Ann decided to have software written in case this question (or ones similar to it asking for great-grandchildren, or great-great-grandchildren, etc.) is asked in the future.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of multiple test cases. The first line of the input will contain a single integer indicating the number of test cases. Each test case starts with a single line containing two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> indicates the number of lines to follow containing information about the family tree, and <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> indicates the specific question being asked about the tree: if <SPAN CLASS="MATH"><I>d</I> = 1</SPAN>
<tex2html_verbatim_mark>, then we are interested in persons with the most children (1 generation away); if <SPAN CLASS="MATH"><I>d</I> = 2</SPAN>
<tex2html_verbatim_mark>, then we are interested in persons with the most grandchildren (2 generations away), and so on. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines are of the form 

<P>

<P>
<BR>

<!-- MATH
 $name \ m dname_{1} \ dname_{2} \ \ldots \ dname_{m}$
 -->
<SPAN CLASS="MATH"><I>name</I>&nbsp;<I>mdname</I><SUB>1</SUB>&nbsp;<I>dname</I><SUB>2</SUB>&nbsp;...&nbsp;<I>dname</I><SUB>m</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
where name is one of the family members' names, <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> is the number of his/her children, and <SPAN CLASS="MATH"><I>dname</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> through <SPAN CLASS="MATH"><I>dname</I><SUB>m</SUB></SPAN>
<tex2html_verbatim_mark> are the names of the children. These lines will be given in no particular order. You may assume that all <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines describe one single, connected tree. There will be no more than 1000 people in any one tree, and all names will be at most 10 characters long.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the three names with the largest number of specified descendants in order of number of descendants. If there are ties, output the names within the tie in alphabetical order. Print fewer than three names if there are fewer than three people who match the problem criteria (you should not print anyone's name who has 0 of the specified descendants), and print more than three if there is a tie near the bottom of the list. Print each name one per line, followed by a single space and then the number of specified descendants. The output for each test case should start with the line 

<P>

<P>
<BR>

<TT>Tree</TT> <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>: 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> is the test case number (starting at 1). Separate the output for each problem with a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
8 2 
Barney 2 Fred Ginger 
Ingrid 1 Nolan 
Cindy 1 Hal 
Jeff 2 Oliva Peter 
Don 2 Ingrid Jeff 
Fred 1 Kathy 
Andrea 4 Barney Cindy Don Eloise 
Hal 2 Lionel Mary 
6 1 
Phillip 5 Jim Phil Jane Joe Paul 
Jim 1 Jimmy 
Phil 1 Philly 
Jane 1 Janey 
Joe 1 Joey 
Paul 1 Pauly 
6 2 
Phillip 5 Jim Phil Jane Joe Paul 
Jim 1 Jimmy 
Phil 1 Philly 
Jane 1 Janey 
Joe 1 Joey 
Paul 1 Pauly
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Tree 1: 
Andrea 5 
Don 3 
Cindy 2 

Tree 2: 
Phillip 5 
Jane 1 
Jim 1 
Joe 1 
Paul 1 
Phil 1 

Tree 3: 
Phillip 5
</PRE> 

<P>

______________________________________________________
3374||||||false||||||
<P>
Almost anyone who has ever taken a class in computer science is familiar with the ``Game of Life," John Conway's cellular automata with extremely simple rules of birth, survival, and death that can give rise to astonishing complexity. 

<P>
The game is played on a rectangular field of cells, each of which has eight neighbors (adjacent cells). A cell is either occupied or not. The rules for deriving a generation from the previous one are:  

<P>

<UL>
<LI>If an occupied cell has 0, 1, 4, 5, 6, 7, or 8 occupied neighbors, the organism dies (0, 1: of loneliness; 4 thru 8: of overcrowding).  
</LI>
<LI>If an occupied cell has two or three occupied neighbors, the organism survives to the next generation.  
</LI>
<LI>If an unoccupied cell has three occupied neighbors, it becomes occupied (a birth occurs). 
</LI>
</UL>

<P>
One of the major problems researchers have looked at over the years is the existence of so-called ``Garden of Eden" configurations in the Game of Life - configurations that could not have arisen as the result of the application of the rules to some previous configuration. We're going to extend this question, which we'll call the ``Game of Efil": Given a starting configuration, how many possible parent configurations could it have? To make matters easier, we assume a finite grid in which edge and corner cells ``wrap around" (i.e., a toroidal surface). For instance, the 2 by 3 configuration:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3374a.eps}$
 -->
<IMG
 WIDTH="281" HEIGHT="204" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3374a.jpg
 ALT="\epsfbox{p3374a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
has exactly three possible parent configurations; they are:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3374b.eps}$
 -->
<IMG
 WIDTH="908" HEIGHT="173" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/p3374a.jpg
 ALT="\epsfbox{p3374b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
You should note that when counting neighbors of a cell, another cell may be counted as a neighbor more than once, if it touches the given cell on more than one side due to the wrap around. This is the case for the configurations above.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple test cases. Each case will start with a line containing a pair of positive integers <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, indicating the number of rows and columns of the configuration, respectively. The next line will contain a nonnegative integer <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> indicating the number of ``live" cells in the configuration. The following <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> lines each contain the row and column number of one live cell, where row and column numbering both start at zero. The final test case is followed by a line where <SPAN CLASS="MATH"><I>m</I> = <I>n</I> = 0</SPAN>
<tex2html_verbatim_mark> - this line should not be processed. You may assume that the product of <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is no more than 16.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case you should print one line of output containing the case number and the number of possible ancestors. Imitate the sample output below. Note that if there are 0 ancestors, you should print out 

<P>

<P>
<BR>

<TT>Garden of Eden.</TT>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 3
2 
0 0
0 1
3 3
4 
0 0
0 1
0 2
1 1
3 3
5 
0 0
1 0
1 2
2 1
2 2
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 3 possible ancestors. 
Case 2: 1 possible ancestors. 
Case 3: Garden of Eden.
</PRE> 

<P>

______________________________________________________
3375||||||false||||||
<P>You all are familiar with the famous 8-queens problem which asks you to place 8 queens on a chess board so no two attack each other. In this problem, you will be given locations of queens and knights and pawns and asked to find how many of the unoccupied squares on the board are not under attack from either a queen or a knight (or both). We'll call such squares ``safe" squares. Here, pawns will only serve as blockers and have no capturing ability. The board below has 6 safe squares. (The shaded squares are safe.)<P><DIV ALIGN="CENTER"><IMG WIDTH="333" HEIGHT="334" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3375.jpg ALT="\epsfbox{p3375.eps}"> <tex2html_verbatim_mark></DIV><P>Recall that a knight moves to any unoccupied square that is on the opposite corner of a <SPAN CLASS="MATH">2 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> rectangle from its current position; a queen moves to any square that is visible in any of the eight horizontal, vertical, and diagonal directions from the current position. Note that the movement of a queen can be blocked by another piece, while a knight's movement can not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple test cases. Each test case will consist of 4 lines. The first line will contain two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, indicating the dimensions of the board, giving rows and columns, respectively. Neither integer will exceed 1000. The next three lines will each be of the form<P><P><BR><SPAN CLASS="MATH"><I>k</I>&nbsp;<I>r</I><SUB>1</SUB>&nbsp;<I>c</I><SUB>1</SUB>&nbsp;<I>r</I><SUB>2</SUB>&nbsp;<I>c</I><SUB>2</SUB><SUP> ... </SUP><I>r</I><SUB>k</SUB>&nbsp;<I>c</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR>indicating the location of the queens, knights and pawns, respectively. The numbering of the rows and columns will start at one. There will be no more than 100 of any one piece. Values of <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> <tex2html_verbatim_mark> indicate end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each test case should generate one line of the form<P><P><BR><TT>Board <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> has <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> safe squares.</TT><P><P><BR>where <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is the number of the board (starting at one) and you supply the correct value for <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 4 
2 1 4 2 4 
1 1 2 
1 2 3 
2 3 
1 1 2 
1 1 1 
0 
1000 1000 
1 3 3 
0 
0 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Board 1 has 6 safe squares. 
Board 2 has 0 safe squares. 
Board 3 has 996998 safe squares.
</PRE><P>
______________________________________________________
3376||||||false||||||
<P>
You're in charge of designing a campus network between buildings and are very worried ab out its reliability and its cost. So, you've decided to build some redundancy into your network while keeping it as inexp ensive as p ossible. Sp ecifically, you want to build the cheap est network so that if any one line is broken, all buildings can still communicate. We'll call this a <SPAN  CLASS="textit">minimal reliable net</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple test cases for this problem. Each test case will start with a pair of integers <!-- MATH
 $n (\le 15)$
 -->
<SPAN CLASS="MATH"><I>n</I>(<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3376img1.png
 ALT="$ \le$">15)</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $m (\le 20)$
 -->
<SPAN CLASS="MATH"><I>m</I>(<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3376img1.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark> on a line indicating the number of buildings (numbered 1 through <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>) and the number of potential inter-building connections, respectively. (Values of <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN>
<tex2html_verbatim_mark> indicate the end of the problem.) The following <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines are of the form <!-- MATH
 $b_{1} \ b_{2} \ c$
 -->
<SPAN CLASS="MATH"><I>b</I><SUB>1</SUB>&nbsp;<I>b</I><SUB>2</SUB>&nbsp;<I>c</I></SPAN>
<tex2html_verbatim_mark> (all positive integers) indicating that it costs <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> to connect building <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>. All connections are bidirectional.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case you should print one line giving the cost of a minimal reliable net. If there is a minimal reliable net, the output line should b e of the form: 

<P>

<P>
<BR>

<TT>The minimal cost for test case <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark>.</TT> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> is the numb er of the test case (starting at 1) and <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> is the cost. If there is no reliable net possible, output a line of the form: 

<P>

<P>
<BR>

<TT>There is no reliable net possible for test case</TT> <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 5 
1 2 1
1 3 2
2 4 2
3 4 1
2 3 1
2 1 
1 2 5
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
The minimal cost for test case 1 is 6. 
There is no reliable net possible for test case 2.
</PRE> 

<P>

______________________________________________________
3377||||||false||||||
<P>Little Bobby Roberts, age 8, has been dragged to yet another museum by his parents. While they while away the hours studying Etruscan pottery and Warhol soup cans, Bobby must depend on himself for entertainment. Having a mathematical bent, he recently started counting all the square tiles on the floors of the museum. He soon realized that the tiles could be grouped into larger squares that needed to be added to the count. The problem became a bit more complicated when he started counting squares contained in multiple rooms, since some squares overlapped both rooms. For example, the two rooms shown below contain a total of 86 squares: 45 <SPAN CLASS="MATH">1 <TT>x</TT> 1</SPAN> <tex2html_verbatim_mark> squares, 28 <SPAN CLASS="MATH">2 <TT>x</TT> 2</SPAN> <tex2html_verbatim_mark> squares and 13 <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> squares. (Note the opening between the two rooms is only 3 squares wide.)<P><DIV ALIGN="CENTER"><IMG WIDTH="414" HEIGHT="276" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3377.jpg ALT="\epsfbox{p3377.eps}"> <tex2html_verbatim_mark></DIV><P>While this helped kill several days' worth of museum visits, it soon became rather tedious, so Bobby is now looking for a program to automate the counting process for him.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. The first line of each case will be a positive integer <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3377.jpg ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark> which will indicate the number of rooms in the museum. After this will be <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each containing a description of one room. Each room will be rectangular in shape and will be described by a line of the form<P><P><BR><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> are opposing corner coordinates (integers) of the room. No two rooms will overlap, though they may share a side. If the shared side is of length <SPAN CLASS="MATH"><I>m</I> &gt; 2</SPAN> <tex2html_verbatim_mark>, then a door of length <SPAN CLASS="MATH"><I>m</I> - 2</SPAN> <tex2html_verbatim_mark> exists between the two rooms, centered along the shared length. No square of any size will overlap more than two rooms. All <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> values will be <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3377.jpg ALT="$ \le$">1, 000, 000</SPAN> <tex2html_verbatim_mark>. An input line of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark> terminates input and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the total number of squares on a single line in the format shown below. All answers will fit within a 32-bit integer and cases are enumerated starting at 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
0 0 9 3 
10 6 4 3 
3 
11 20 15 24 
11 17 15 20 
15 16 20 24 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 86 
Case 2: 152
</PRE><P>
______________________________________________________
3378||||||false||||||
<P>
Hugh F. Oh, in his never-ending quest to prove the existence of extraterrestrials, has gotten hold of a number of nighttime photographs taken by a research group that is examining glowing swamp gas. Hugh wants to see if any of the photos show, not swamp gas, but Little Grey Men in glowing suits. The photographs consist of bright dots appearing against a black background. Unfortunately, at the time the photos were taken, trains were travelling through the area (there is a train trestle over the swamp), and occasional lights from the train windows also appear in the photographs. Hugh, being a fastidious researcher, wants to eliminate these spots from the images. He can't tell from the photos exactly where the tracks are, or from what direction the photos were taken, but he knows that the tracks in that area are perfectly straight, so he's decided on the following approach: he will find the line with the maximum number of spots lying on it and, if there are four or more spots on the line, he will eliminate those points from his calculations, assuming that those are windows on the train. If two or more lines have the maximum number of points, Hugh will just randomly select one such set and delete it from the photo (he's not all that fastidious - after all, he believes in Little Grey Men). If there are fewer than four points lying along a common line, Hugh will assume that there is no train in the photograph and won't delete any points. Please write a program for him to process a set of photographs.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be a series of test cases. Each test case is one photograph described by a line containing a positive integer <!-- MATH
 $n (\le 1000)$
 -->
<SPAN CLASS="MATH"><I>n</I>(<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3378img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>, the number of distinct spots in the photograph, followed by <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines containing the integer coordinates of the spots, one <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark> pair per line. All coordinates are between 0 and 10000. The last photo description is followed by a line containing a zero, marking the end of the input. This line should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the photo number followed by the number of points eliminated from the photograph. Imitate the sample output below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 
0 1
0 2
1 2
2 2
4 5
5 6
4 
3 5
4 4
6 5
7 4
0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Photo 1: 4 points eliminated 
Photo 2: 0 points eliminated
</PRE> 

<P>

______________________________________________________
3379||||||false||||||
<P>
In the two-player game ``Two Ends", an even number of cards is laid out in a row. On each card, face up, is written a positive integer. Players take turns removing a card from either end of the row and placing the card in their pile. The player whose cards add up to the highest number wins the game. Now one strategy is to simply pick the card at the end that is the largest - we'll call this the greedy strategy. However, this is not always optimal, as the following example shows: (The first player would win if she would first pick the 3 instead of the 4.) 

<P>

<P>
<BR>
3 2 10 4 

<P>

<P>
<BR>
You are to determine exactly how bad the greedy strategy is for different games when the second player uses it but the first player is free to use any strategy she wishes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple test cases. Each test case will be contained on one line. Each line will start with an even integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> followed by <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> positive integers. A value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>
<tex2html_verbatim_mark> indicates end of input. You may assume that <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is no more than 1000. Furthermore, you may assume that the sum of the numb ers in the list does not exceed 1,000,000.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case you should print one line of output of the form: 

<P>

<P>
<BR>

<TT>In game <SPAN CLASS="MATH"><I>m</I></SPAN><tex2html_verbatim_mark>, the greedy strategy might lose by as many as <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> points.</TT> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> is the number of the game (starting at game 1) and <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> is the maximum possible difference between the first player's score and second player's score when the second player uses the greedy strategy. When employing the greedy strategy, always take the larger end. If there is a tie, remove the left end.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 3 2 10 4 
8 1 2 3 4 5 6 7 8 
8 2 2 1 5 3 8 7 3 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
In game 1, the greedy strategy might lose by as many as 7 points. 
In game 2, the greedy strategy might lose by as many as 4 points. 
In game 3, the greedy strategy might lose by as many as 5 points.

______________________________________________________
3380||||||false||||||
<P>Write a program that can evaluate expressions from the following roughly BNF (Backus Naur Form) grammar:<P><P><BR><PRE>
expr ::= term | expr `+' term | expr `-' term 
unary_op ::= `+' term | `-' term 
term ::= `(' expr `)' | `(' unary_op `)' | literal 
literal ::= [0-9]
</PRE><P><P><BR>There will be no whitespace within an expression. All expressions will consist solely of the characters `<TT>(</TT>', `<TT>)</TT>', `<TT>+</TT>', `<TT>-</TT>', and the digits 0 through 9. You may assume that all input is well-formed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input will consist of one expression per line followed by a newline. There will be no blank lines in the file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each expression, output its integer value, followed by a single newline.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
(-2)+3 
(1-(2+3)) 
(1-2+3) 
(1-(+(2-3)))
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
1 
-4 
2 
2
</PRE><P>
______________________________________________________
3381||||||false||||||
<P>Your task is to decide if a specified sequence of moves in the board game Connect ends with a winning move.<P><DIV ALIGN="CENTER"><IMG WIDTH="890" HEIGHT="296" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3381.jpg ALT="\epsfbox{p3381.eps}"> <tex2html_verbatim_mark></DIV><P>In this version of the game, different board sizes may be specified. Pegs are placed on a board at integer coordinates in the range [<SPAN CLASS="MATH">0, <I>N</I></SPAN> <tex2html_verbatim_mark>]. Players Black and White use pegs of their own color. Black always starts and then alternates with White, placing a peg at one unoccupied position <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark>. Black's endzones are where <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> equals 0 or <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, and White's endzones are where <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> equals 0 or <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. Neither player may place a peg in the other player's endzones. After each play, the latest position is connected by a segment to every position with a peg of the same color that is a chess knight's move away (2 away in one coordinate and 1 away in the other), provided that a new segment will touch no segment already added, except at an endpoint. Play stops after a winning move, which is when a player's segments complete a connected path between the player's endzones.<P>For example, Figure 1 shows a board with <SPAN CLASS="MATH"><I>N</I> = 4</SPAN> <tex2html_verbatim_mark> after the moves (0,2), (2,4), and (4,2). Figure 2 adds the next move (3,2). Figure 3a shows a poor next move of Black to (2,3). Figure 3b shows an alternate move for Black to (2,1) which would win the game.<P>Figure 4 shows the board with <SPAN CLASS="MATH"><I>N</I> = 7</SPAN> <tex2html_verbatim_mark> after Black wins in 11 moves:<P>(0, 3), (6, 5), (3, 2), (5, 7), (7, 2), (4, 4), (5, 3), (5, 2), (4, 5), (4, 0), (2, 4)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input contains from 1 to 20 datasets followed by a line containing only two zeroes, `<TT>0 0</TT>'. The first line of each dataset contains the maximum coordinate <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(3 < N < 21)$
 --><SPAN CLASS="MATH">(3 &lt; <I>N</I> &lt; 21)</SPAN> <tex2html_verbatim_mark> and the number of total moves, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(4 < M < 250)$
 --><SPAN CLASS="MATH">(4 &lt; <I>M</I> &lt; 250)</SPAN> <tex2html_verbatim_mark>, with <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> odd, so Black will always be the last player. The dataset ends with one or more lines each containing two or more coordinate pairs, with a total of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> coordinate pairs. All numbers on any line will be separated by blanks. All data will be legal. There will never be a winning move before the last move.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output contains one line for each data set: `<TT>yes</TT>' if the last move is a winning move and `<TT>no</TT>' otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 5 
0 2 2 4 4 2 3 2 2 3
4 5 
0 2 2 4 4 2 3 2 2 1 
7 11 
0 3 6 5 3 2 5 7 7 2 4 4 
5 3 5 2 4 5 4 0 2 4 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
no 
yes 
yes
</PRE><P>
______________________________________________________
3382||||||false||||||
<P>As a recruiting ploy, Google once posted billboards in Harvard Square and in the Silicon Valley area just stating ``{first 10-digit prime found in consecutive digits of e}.com". In other words, find that 10-digit sequence and then connect to the web site - and find out that Google is trying to hire people who can solve a particular kind of problem.<P>Not to be outdone, Gaggle (a loosey-goosey fuzzy logic search firm), has devised its own recruiting problem. Consider the <SPAN CLASS="textit">base</SPAN> 7 expansion of a rational number. For example, the first few digits of the <SPAN CLASS="textit">base 7</SPAN> expansion of <SPAN CLASS="MATH">1/5<SUB>10</SUB> = 0.12541<IMG WIDTH="32" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3382img1.png ALT="$ \ldots_{{7}}^{}$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">33/4<SUB>10</SUB> = 11.15151<IMG WIDTH="32" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3382img1.png ALT="$ \ldots_{{7}}^{}$"></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">6/49<SUB>10</SUB> = 0.06000<SUB>7</SUB></SPAN> <tex2html_verbatim_mark>. From this expansion, find the digits in a particular range of positions to the right of the ``decimal" point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file begins with a line containing a single integer specifying the number of problem sets in the file. Each problem set is specified by four base 10 numbers on a single line, <SPAN CLASS="MATH"><I>n</I>&nbsp;<I>d</I>&nbsp;<I>f</I>&nbsp;<I>l</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> are the numerator and denominator of the rational number and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3382img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3382img1.png ALT="$ \le$">5, 000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3382img1.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3382img1.png ALT="$ \le$">5, 000</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> are the first and last positions for the desired range of digits, with <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3382img1.png ALT="$ \le$"><I>f</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>l</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3382img1.png ALT="$ \le$">250</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3382img1.png ALT="$ \le$">(<I>l</I> - <I>f</I> )<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3382img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>. Note that 0 is the position immediately to the right of the decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Each problem set will be numbered (beginning at one) and will generate a single line:<P><P><BR><TT>Problem set <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>n</I>/<I>d</I></SPAN> <tex2html_verbatim_mark>, base 7 digits <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> through <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is replaced by the problem set number, <SPAN CLASS="textit">result</SPAN> is your computed result, and the other values are the corresponding input values. Make sure your output is formatted as shown in the sample output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
1 5 0 0 
6 49 1 3 
33 4 2 7 
511 977 122 126
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Problem set 1: 1 / 5, base 7 digits 0 through 0: 1
Problem set 2: 6 / 49, base 7 digits 1 through 3: 600
Problem set 3: 33 / 4, base 7 digits 2 through 7: 151515
Problem set 4: 511 / 977, base 7 digits 122 through 126: 12425
</PRE><P>
______________________________________________________
3383||||||false||||||
<P>
Even for a single architecture - or even a single processor - there may be multiple assembler (or assembly) languages with different syntax rules, different directives (or ``pseudo-ops"), and different mnemonics for the operation codes. Even the definition of integer constants can differ! 

<P>
For example, one assembler for the Intel IA-32 architecture (that is, the x86, Pentium, and Xeon), uses a letter following a number to indicate the base, while another uses C/C++/Java style constants:

<P>

<P>
<BR>

<code>1f34h =     0x1f34   </code>(a hex constant; C/C++/Java uses a leading <TT>0x</TT>) 
<BR><code>11001100b = 0xc0     </code>(binary, but no direct C equivalent, so use hex) 
<BR><code>377o =      0377     </code>(octal; C/C++/Java uses a leading zero) 
<BR><code>925 =       925      </code>(decimal; C/C++/Java decimals must NOT begin with <TT>0</TT>) 
<BR><code>925d =      925      </code>(also decimal)

<P>

<P>
<BR>
And if that wasn't sufficient, the directives used to allocate and initialize storage for constants also differ: 

<P>

<P>
<BR>

<code>db =      .byte          </code>(one byte) 
<BR><code>dw =      .word          </code>(two bytes) 
<BR><code>dd =      .long          </code>(four bytes) 
<BR><code>dq =      .quad          </code>(eight bytes)

<P>

<P>
<BR>
So using the assembler "A" (Intel IA-32 Architecture) we might write

<P>

<P>
<BR>

<code>db   1fh,  377o,  99d</code>

<P>

<P>
<BR>
but for assembler "B" (C/C++/Java style) we'd have to write

<P>

<P>
<BR>

<code>.byte 0x1f, 0377, 99</code>

<P>

<P>
<BR>
Each line of input for this problem will contain a directive that allocates and initializes storage, written in the style of assembler ``A". Translate each such to the style required by assembler ``B" and display it. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 
Each input line contains, in order, the following items:

<P>

<UL>
<LI>zero or more whitespace characters (blanks and/or tabs) 
</LI>
<LI>one of the directives `<TT>db</TT>', `<TT>dw</TT>', `<TT>dd</TT>', or `<TT>dq</TT>', in lowercase 
</LI>
<LI>one or more whitespace characters 
</LI>
<LI>one or more constants, separated from each other by a comma and zero or more whitespace characters (in any order)
</LI>
<LI>zero or more trailing whitespace characters 
</LI>
<LI>the end of line character
</LI>
</UL>

<P>
There will be no more than 100 characters in any input line. The last input line (line with data) is followed by a line that contains only whitespace followed by an end of line character.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 
For each input line you are to display one output line. The line is to contain the equivalent assembler ``B" line for the input assembler ``A" line. Specifically, it will contain, in order, the following items:     

<P>

<UL>
<LI>exactly one tab character 
</LI>
<LI>one of the directives `<TT>.byte</TT>, `<TT>.word</TT>', `<TT>.long</TT>' or `<TT>.quad</TT>', in lowercase letters, corresponding to the directive in the input line 
</LI>
<LI>exactly one tab character 
</LI>
<LI>one or more constants, separated from each other by a comma and then a blank. Each constant must be in the style supported by assembler ``B", and (if possible) use the same base as that given for the corresponding constant in the input line. For each binary constant in the assembler ``A" form, use the hexadecimal form for assembler ``B". 
</LI>
<LI>the end of line character
</LI>
</UL>

<P>
You are <SPAN ID="txt64">not</SPAN> to consider whether the given constant will fit in the storage allocated by the directive. Thus input like `<TT>db 99999 </TT>' is acceptable, even though that value will not fit in a byte. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
    dd    1,2  ,   13h,   1010b  , 12d,   377o 
               dw  each  ,   0001b,  999999999999d
      dq   1234h, 1200h
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
.long   1, 2, 0x13, 0xa, 12, 0377
.word   0xeac, 0x1, 999999999999
.quad   0x1234, 0x1200
</PRE> 

<P>

______________________________________________________
3384||||||false||||||
<P>Any <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3384img1.png ALT="$ \star$"></SPAN> <tex2html_verbatim_mark>true<SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3384img1.png ALT="$ \star$"></SPAN> <tex2html_verbatim_mark> algorithm junkie knows that a linear system with multiple inputs (vector <SPAN CLASS="textbf">x</SPAN>) and multiple outputs (vector <SPAN CLASS="textbf">y</SPAN>) can be characterized by a matrix <SPAN CLASS="textbf">M</SPAN>. Each column of <SPAN CLASS="textbf">M</SPAN> contains the values of the system outputs when the input with the same number as that column is unity, and all other inputs are zero. Because the system is linear, the outputs for an arbitrary configuration of inputs can be obtained from a linear combination of the columns of <SPAN CLASS="textbf">M</SPAN>, using the equation:<P><P><BR><SPAN CLASS="textbf">y = Mx</SPAN><P><P><BR>Your challenge is to determine the inputs (<SPAN CLASS="textbf">x</SPAN>) that produce a given output (<SPAN CLASS="textbf">y</SPAN>), given the matrix (<SPAN CLASS="textbf">M</SPAN>). Your solution must read the matrix <SPAN CLASS="textbf">M</SPAN> from a text file that contains the number of rows (<SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, an integer) on the first line, the number of columns (<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, an integer) on the second line, and one row of the matrix for each following line (floating point numbers separated by whitespace). It must then read the output vector which contains one output value per line (<SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> floating point numbers). <SPAN ID="txt58">There is a single test case in the input file.</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>In other words, you are being given the matrix <SPAN CLASS="textbf">M</SPAN> of dimensions <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> and the <SPAN ID="txt61">column</SPAN> vector <SPAN CLASS="textbf">y</SPAN> of dimension <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. Your assignment is to discover the column vector <SPAN CLASS="textbf">x</SPAN> of dimension <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (with exactly three non-zero entries) that makes the following equation true (shown with <SPAN CLASS="MATH"><I>m</I> = 3</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I> = 4</SPAN> <tex2html_verbatim_mark>):<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="4" HEIGHT="31" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3384img1.png ALT="$\displaystyle \pmatrix$"><I>y</I><SUB>1</SUB><I>y</I><SUB>2</SUB><I>y</I><SUB>3</SUB> = <IMG WIDTH="4" HEIGHT="31" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3384img1.png ALT="$\displaystyle \pmatrix$"><I>m</I><SUB>11</SUB> &amp; <I>m</I><SUB>12</SUB> &amp; <I>m</I><SUB>13</SUB> &amp; <I>m</I><SUB>14</SUB><I>m</I><SUB>21</SUB> &amp; <I>m</I><SUB>22</SUB> &amp; <I>m</I><SUB>23</SUB> &amp; <I>m</I><SUB>24</SUB><I>m</I><SUB>31</SUB> &amp; <I>m</I><SUB>32</SUB> &amp; <I>m</I><SUB>33</SUB> &amp; <I>m</I><SUB>34</SUB><I>m</I><SUB>41</SUB> &amp; <I>m</I><SUB>42</SUB> &amp; <I>m</I><SUB>43</SUB> &amp; <I>m</I><SUB>44</SUB><IMG WIDTH="4" HEIGHT="31" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3384img1.png ALT="$\displaystyle \pmatrix$"><I>x</I><SUB>1</SUB><I>x</I><SUB>2</SUB><I>x</I><SUB>3</SUB><I>x</I><SUB>4</SUB></DIV><P><tex2html_verbatim_mark></P><P>Your solution must handle cases where the number of inputs (<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>) is larger than the number of outputs (<SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>). In other words, the matrix <SPAN CLASS="textbf">M</SPAN> is underdetermined and the system has a many-to-one mapping (more than one input, <SPAN CLASS="textbf">x</SPAN>, can produce a given output, <SPAN CLASS="textbf">y</SPAN>). In this case, however, <SPAN ID="txt100">you are guaranteed that <SPAN CLASS="textbf">x</SPAN> has exactly 3 non-zero entries.</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your solution should be printed to standard out and should give the indices of the non-zero entries in <SPAN CLASS="textbf">x</SPAN> as integer values 1 through <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, inclusive, along with the value of those <SPAN ID="txt88">three</SPAN> inputs. An example problem is:<P>Matrix <SPAN CLASS="textbf">M</SPAN>, when multiplied by your solution for <SPAN CLASS="textbf">x</SPAN>, should be able to reproduce each entry in vector <SPAN CLASS="textbf">y</SPAN> to within 0.01%. The three indices that you output need not appear in increasing order, but they must match the correct solution exactly. The value you print for each index must be correct to 3 significant digits, but you are free to output extra digits<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
8 
0.484734 -0.147660 -0.224671 -0.060712 -0.324758 0.209435 -0.461233 -0.402469 
-0.215098 0.008685 -0.254425 0.423113 -0.033949 0.003395 0.126518 -0.099603 
0.048778 0.156349 0.228357 0.068926 0.418765 -0.480551 -0.026597 -0.202028 
-0.317657 -0.181216 -0.043709 -0.207515 0.396223 0.028521 -0.091552 0.419526 
-0.000758 0.163841 0.294449 -0.223812 -0.456281 0.239201 0.452864 0.284574 
0.034654 
-2.504212 
-4.200988 
3.153023 
3.517523
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
input 1 = -4.0365696 
input 4 = -8.028227 
input 6 = 7.180792
</PRE><P>
______________________________________________________
3385||||||false||||||
<P>
Your platoon of wandering lizards has entered a strange room in the labyrinth you are exploring. As you are looking around for hidden treasures, one of the rookies steps on an innocent-looking stone and the room's floor suddenly disappears! Each lizard in your platoon is left standing on a fragile looking pillar, and a fire begins to rage below<SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark> 

<P>

<P><P>
<BR>
Leave no lizard behind! Get as many lizards as possible out of the room, and report the number of casualties. 

<P>
The pillars in the room are aligned as a grid, with each pillar one unit away from the pillars to its east, west, north and south. Pillars at the edge of the grid are one unit away from the edge of the room (safety). Not all pillars necessarily have a lizard. A lizard is able to leap onto any unoccupied pillar that is within <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> units of his current one. A lizard standing on a pillar within leaping distance of the edge of the room may always leap to safety<SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark> but there's a catch: each pillar becomes weakened after each jump, and will soon collapse and no longer be usable by other lizards. Leaping onto a pillar does not cause it to weaken or collapse; only leaping off of it causes it to weaken and eventually collapse. Only one lizard may be on a pillar at any given time. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 
The input file will begin with a line containing a single integer representing the number of test cases, which is at most 25. Each test case will begin with a line containing a single positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> representing the number of rows in the map, followed by a single non-negative integer <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> representing the maximum leaping distance for the lizards. Two maps will follow, each as a map of characters with one row per line. The first map will contain a digit (0-3) in each position representing the number of jumps the pillar in that position will sustain before collapsing (0 means there is no pillar there). The second map will follow, with an `<TT>L</TT>' for every position where a lizard is on the pillar and a `<TT>.</TT>' for every empty pillar. There will never be a lizard on a position where there is no pillar.

<P>

<UL>
<LI>Each input map is guaranteed to be a rectangle of size <SPAN CLASS="MATH"><I>n</I> <TT>*</TT> <I>m</I></SPAN>
<tex2html_verbatim_mark>, where <!-- MATH
 $1 \le n \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3385img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3385img1.png
 ALT="$ \le$">20</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $1 \le m \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3385img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3385img1.png
 ALT="$ \le$">20</SPAN>
<tex2html_verbatim_mark>.
</LI>
<LI>Leaping distance is guaranteed to be in the range [1, 3].
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 
For each input case, you should return the number of lizards that could not escape. There should be a newline after each case, and your output format should follow the sample provided below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 
<PRE>
4 
3 1 
1111 
1111 
1111 
LLLL 
LLLL 
LLLL 
3 2 
00000 
01110 
00000 
..... 
.LLL. 
..... 
3 1 
00000 
01110 
00000 
..... 
.LLL. 
..... 
5 2 
00000000 
02000000 
00321100 
02000000 
00000000 
........ 
........ 
..LLLL.. 
........ 
........
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case #1: 2 lizards were left behind. 
Case #2: no lizard was left behind. 
Case #3: 3 lizards were left behind. 
Case #4: 1 lizard was left behind.
</PRE> 

<P>

______________________________________________________
3386||||||false||||||
<P>
The following scenario takes place between 8:00AM and 9:00AM. In the headquarters of the Counter Terrorist Agency (CTA), you are tasked to aid Jack prevent the next terror attack. The CTA has been tracking the terrorists for over a week. It was discovered that the terrorists operate in separate independent groups. Each group carries a specific chemical which is harmless by itself. Though it is not readily available, possession of such chemical even in huge quantity is not illegal. Thus these groups cannot be apprehended even if they are spotted in possession of the chemical. However, if the groups meet in the same city, they can mix the chemical that they have at hand and form a nerve agent, which they can release within the next hour. 

<P>
To track down and prevent the next attack, it was determined that all groups move independently of each other using forward then left protocol in 16 cities as shown in Figure 3. The protocol means forward to the next city followed by the city on the left. In the case when there is no city in front, the group heads to the next city to the left. If there is no city to the left, the group backtracks to the previous city. In both cases, the move in the protocol is skipped, as it is replaced by the alternate movement. If there are no cities to backtrack into, (e.g. if there is no information on its previous location) the group stay put in the city and simply wait it out. 

<P>
The attack is carried out only when all groups meet in the same city. Figure 3 illustrates a map of the cities, where each city is labelled using <SPAN CLASS="MATH"><I>x</I>, <I>y</I></SPAN> coordinates. Moving forward implies maintaining the same direction from previous to current. For example, if the group is currently at city 3,3 and previously at 4,3 moving forward means going to 2,3, if the group is previously at 3,4, then the group moves to 3,2; if the group is previously at 2,3, then it proceeds to 4,3 and if previously at 2,3, the group goes to 4,3. 

<P>
A <SPAN CLASS="MATH"><I>left</I></SPAN> implies moving counterclockwise based on the current and previous location. For example, if the group is currently at city 3,3 and previously at 4,3 moving left means going to 3,4; if the group is previously at 3,4 then the group goes to 2,3; if the group is previously at 3,2, the group moves to 4,3; and if the groups is previously at 2,3, it proceeds to 3, 2. 

<P>
It was also learned that all groups can move from one city to the next city in exactly 20 minutes. Since the group cannot be apprehended if they are carrying only the single chemical, they have to be apprehended in the act of preparing the nerve agent. Since you lack man power to track all groups simultaneously, you are tasked to determine the time and place all groups will meet to prepare the nerve agent. 

<P>
Satellite tracking can only show the whereabouts of each group at the start of the hour. Time is running out fast. When and where should you send Jack to take down these terror groups? However, if all groups were not able to meet within 24 hours, the threat alert level is dropped, as the terrorist will disband and decide on the next attack sometime in the future. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input will contain several test cases. The first line will indicate the number of test cases. Each test case starts with the number of terror groups moving about the 16 cities. Then it is followed by the coordinate values <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> of each group taken at the start of the hour followed by the next direction either forward (F) or left (L) that they will be initially moving. For the initial movement, we will assume that a <SPAN  CLASS="textit">forward</SPAN> is a decrease in the <SPAN CLASS="MATH"><I>y</I></SPAN> coordinate and a left is a decrease in the <SPAN CLASS="MATH"><I>x</I></SPAN> coordinate value. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output must show in which city all the groups will meet and the time (24-hour time format) in which Jack must be situated to take down the terrorist. Otherwise, it outputs a plain text stating ``no terror threat" if the groups do not converge within 24 hours. 

<P>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p3386.eps}$
 -->
<IMG
 WIDTH="894" HEIGHT="511" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3386img1.png
 ALT="\epsfbox{p3386.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 3: Map of 16 cities that all terror groups move about and a group starting at 4,3 with a <SPAN CLASS="MATH"><I>left</I></SPAN>.

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1 
2 
2, 3, F 
3, 4, F
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1: 1, 3, 900

______________________________________________________
3387||||||false||||||
<P>Your team is setting up a computing resource devoted to batch processing of compute-bound jobs. In addition, you have decided to use static scheduling for each period of time. Naturally, you wish to maximize the income for each set of jobs run, and <SPAN ID="txt48">you</SPAN> have been given the responsibility of finding an optimal mix of jobs for each set of candidate jobs. The jobs are submitted by an open bid process: clients will specify the amount of processor time they wish to reserve and the dollar amount that they wish to pay. If a job finishes early, the client will still pay the full amount, and if a job exceeds the requested time, it will be terminated and (of course) the client will still pay the full amount. For purposes of scheduling, your team assumes that each job will in fact use its entire scheduled time slot. In the interests of good customer relations, though, you are not to include a bid in the schedule if there is not sufficient time available to satisfy it - we're not going to over-book like the airlines do, and then hope someone doesn't use the full allotment!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file begins with a line containing a single integer (no white space) specifying the number of problem sets in the file.<P><P><BR>Each problem set consists of <SPAN CLASS="MATH">(<I>n</I> + 2)</SPAN> <tex2html_verbatim_mark> lines (no white space except as specified):<P><UL><LI>a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3387img1.png ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark>) specifying the number of candidate jobs to be scheduled </LI><LI><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines giving the bid as an integer specifying the number of seconds followed by a single space and then a dollar amount given in decimal form (always showing two digits to the right of the decimal point) </LI><LI>a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3387img1.png ALT="$ \le$">2000</SPAN> <tex2html_verbatim_mark>) specifying the amount of time to be scheduled with these jobs </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Each problem set will be numbered (beginning at one) and will generate a single line:<P><P><BR><TT>Problem <SPAN CLASS="MATH">&lt; <I>k</I> &gt;</SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH">&lt; <I>t</I> &gt;</SPAN> <tex2html_verbatim_mark> seconds scheduled for $<SPAN CLASS="MATH"><I>abc</I>.<I>de</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <SPAN CLASS="MATH">&lt; <I>k</I> &gt;</SPAN> <tex2html_verbatim_mark> is replaced by the problem set number, <SPAN CLASS="MATH">&lt; <I>t</I> &gt;</SPAN> <tex2html_verbatim_mark> is replaced with the total time <SPAN CLASS="textit"><SPAN CLASS="textbf">actually</SPAN></SPAN> scheduled (possibly not the full input time), and <TT>$<SPAN CLASS="MATH"><I>abc</I>.<I>de</I></SPAN> <tex2html_verbatim_mark></TT> is replaced by the dollar amount, given always with the leading currency symbol and with two digits to the right of the decimal point. There will be no blank lines, and the final line will end with the new-line character.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
10 
19 0.78 
12 0.31 
17 0.77 
22 0.77 
8 0.56 
10 0.33 
17 0.35 
24 0.12 
22 0.70 
5 0.52 
120
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Problem 1: 120 seconds scheduled for \$4.78
</PRE><P>
______________________________________________________
3388||||||false||||||
<P>The <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>-Queens problem is an obvious expansion of the eight-queens problem that has been around for a <SPAN CLASS="textit">long</SPAN> time: Given a board with <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> squares and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> queens, position the queens on the board such that no two queens can attack each other; in other words, so that no two queens sit on the same horizontal row, vertical column, or along either possible diagonal (row+column = <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> for one, row-column = <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> for the other).<P>Finding <SPAN CLASS="textit">all</SPAN> the solutions to the problem for a given <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is known to be worse than exponential in difficulty -<SPAN CLASS="MATH"><I>O</I>(<I>N</I>!)</SPAN> <tex2html_verbatim_mark>. One can, however, find a <SPAN CLASS="textit">single</SPAN> solution to the problem in significantly less time if one looks beyond the standard backtracking solution to another possible solution strategy.<P>This problem asks you to find such a solution strategy. Note that the solution found may not necessarily be the one obtained first in the backtracking approach.<P>Since there is a huge number of candidate solutions for any but the very smallest values of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, the judges have access to a solution validation program. Consequently it is critical that you abide by the output specifications, since they constitute the input specifications for the validator.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file begins with a line containing a single integer (no white space) specifying the number of problem specifications in the file. Exactly that many lines follow, each giving the value of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (with no white space) for which you are to solve the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>-queens problem. The values of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> may range from 4 up through 300; in other words, you should be able to find <SPAN CLASS="textit"><SPAN CLASS="textbf">some</SPAN></SPAN> solution to the 300-Queens problem in less than 120 seconds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem, output on a single line that number (<SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>). Following that, give the permutation vector of column positions (0 through <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>) that specify the queen's position on each succeeding row. The permutation vector is to be of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers separated by white space. You may choose for yourself whether you use simple blanks for white space (giving the solution vector on one line) or you put each value on a separate line. In the interest of printing, the sample output here will use an approach that generates lines of values that do not exceed 65 characters in length. You are not held to that format. Then, the sample output is one of a very large number of possible outputs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
4 
8 
25 
50
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
 2 0 3 1 
8 
 2 7 3 6 0 5 1 4 
25 
 14 7 18 22 13 10 24 11 1 20 6 0 15 8 5 16 23 17 4 21 12 2 19 3 9 
50 
 22 13 15 44 27 3 1 4 19 40 20 5 31 49 7 29 18 6 2 36 28 12 38 43 
 39 11 26 14 0 30 34 8 41 9 16 10 17 33 45 42 46 24 47 35 32 23 
 25 37 21 48
</PRE><P>
______________________________________________________
3389||||||false||||||
<P>
J.P. Flathead's Grocery Store hires cheap labor to man the checkout stations.  The people he hires (usually high school kids) often make mistakes making change for the customers.  Flathead, who's a bit of a tightwad, figures he loses more money from these mistakes than he makes; that is, the employees tend to give more change to the customers than they should get.

<P>
Flathead wants you to write a program that calculates the number of quarters ($0.25), dimes ($0.10), nickels ($0.05) and pennies ($0.01) that the customer should get back.  Flathead always wants to give the customer's change in coins if the amount due back is $5.00 or under.  He also wants to give the customers back the smallest total number of coins.  For example, if the change due back is $1.24, the customer should receive 4 quarters, 2 dimes, 0 nickels, and 4 pennies.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of input contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> which is the number of datasets that follow. Each dataset consists of a single line containing a single integer which is the change due in cents, <SPAN CLASS="MATH"><I>C</I></SPAN>, <!-- MATH
 $(1 \le C \le 500)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3389img1.png
 ALT="$ \le$"><I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3389img1.png
 ALT="$ \le$">500)</SPAN>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, print out the dataset number, a space, and the string:

<P>
<DIV ALIGN="CENTER">
<SPAN CLASS="MATH"><I>Q</I></SPAN> <TT>QUARTER(S),</TT> <SPAN CLASS="MATH"><I>D</I></SPAN> <TT>DIME(S),</TT> <SPAN CLASS="MATH"><I>n</I></SPAN> <TT>NICKEL(S),</TT> <SPAN CLASS="MATH"><I>P</I></SPAN> <TT>PENNY(S)</TT>

</DIV>

<P>
Where <SPAN CLASS="MATH"><I>Q</I></SPAN> is he number of quarters, <SPAN CLASS="MATH"><I>D</I></SPAN> is the number of dimes, <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of nickels and <SPAN CLASS="MATH"><I>P</I></SPAN> is the number of pennies.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
124
25
194
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 4 QUARTER(S), 2 DIME(S), 0 NICKEL(S), 4 PENNY(S)
2 1 QUARTER(S), 0 DIME(S), 0 NICKEL(S), 0 PENNY(S)
3 7 QUARTER(S), 1 DIME(S), 1 NICKEL(S), 4 PENNY(S)
</PRE> 

<P>

______________________________________________________
3390||||||false||||||
<P>An <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> game board is populated with integers, one nonnegative integer per square. The goal is to travel along any legitimate path from the upper left corner to the lower right corner of the board. The integer in any one square dictates how large a step away from that location must be. If the step size would advance travel off the game board, then a step in that particular direction is forbidden. All steps must be either to the right or toward the bottom.<P>Consider the <SPAN CLASS="MATH">4 <TT>x</TT> 4</SPAN> <tex2html_verbatim_mark> board shown in Figure 1, where the solid circle identifies the start position and the dashed circle identifies the target. Figure 2 shows the three paths from the start to the target, with the irrelevant numbers in each removed.<P><IMG WIDTH="172" HEIGHT="172" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3390a.jpg ALT="$\textstyle \parbox{.24\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=1.5in
\epsfbox{p3390a.eps}
\par
\medskip
Figure 1
\end{center}}$"><IMG WIDTH="517" HEIGHT="172" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3390a.jpg ALT="$\textstyle \parbox{.75\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=4.5in
\epsfbox{p3390b.eps}
\par
\medskip
Figure 2
\end{center}}$"><P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Figure 1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Figure 2<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT> </H2>The input contains data for one to thirty boards, followed by a final line containing only the integer `<TT>-1</TT>'. The data for a board starts with a line containing a single positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">4<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3390a.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/p3390a.jpg ALT="$ \le$">34</SPAN> <tex2html_verbatim_mark>, which is the number of rows in this board. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> rows of data. Each row contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> single digits, 0-9, with no spaces between them..<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output consists of one line for each board, containing a single integer, which is the number of paths from the upper left corner to the lower right corner. There will be fewer than <SPAN CLASS="MATH">2<SUP>63</SUP></SPAN> <tex2html_verbatim_mark> paths for any board.<P><P><P><BR><B>Warning:</B> Brute force methods examining every path will likely exceed the allotted time limit. 64-bit integer values are available as <SPAN CLASS="textit">long</SPAN> values in Java or <SPAN CLASS="textit">long long</SPAN> values in C/C++ compilers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
2331 
1213 
1231 
3110 
4 
3332 
1213 
1232 
2120 
5 
11111 
11111 
11111 
11111 
11111 
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
0 
70
</PRE><P>
______________________________________________________
3391||||||false||||||
<P>
Agnes C. Mulligan is a fanatical bibliophile - she is constantly
buying new books, and trying to find space for those books. In
particular, she has a shelf for her ``to be read" books, where she puts
her newest books. When she decides to read one of these books, she
removes it from the shelf, making space for more books. Sometimes,
however, she buys a new book and puts it on the shelf, but because of
limited space, this pushes one or more books off the shelf at the other
end. She always adds books on the left side of the shelf, making books
fall off the right side. Of course, she can remove a book from any
location on the shelf when she wants to read one. 

<P>
Your task will be to write a simulator that will keep track of books
added and removed from a shelf. At the end of the simulation, display
the books remaining on the shelf, in order from left to right. Books in
each simulation will be identified by a unique, positive integer, <!-- MATH
 $0 < I \le 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>I</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3391img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>. There are three
types of events in the simulation:

<P>

<UL>
<LI><TT>Add</TT>: A new book is pushed on the left end of the shelf, pushing
other books to the right as needed. No book moves to the right unless
it is pushed by an adjacent (touching) book on its left. Any book that
is not <SPAN  CLASS="textit">entirely</SPAN> on the shelf falls off the right edge. No single book will ever be wider than the given shelf.
No book that is currently on the shelf will be added again. 
</LI>
<LI><TT>Remove</TT>: If the book is on the shelf, then the book is removed
from the shelf, leaving a hole. If the book isn't on the shelf, the operation is ignored.
</LI>
<LI><TT>End</TT>: End the simulation for this case and print the contents of
the shelf.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file will contain data for one or more simulations. The end of the input is
signalled by a line containing `<TT>-1</TT>'. Each simulation will begin with the integer width of the shelf, <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $5 \le s \le 100$
 -->
<SPAN CLASS="MATH">5<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3391img1.png
 ALT="$ \le$"><I>s</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3391img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, followed by a series of <SPAN  CLASS="textit">add</SPAN> and <SPAN  CLASS="textit">remove</SPAN> events. An <SPAN  CLASS="textit">add</SPAN> event is a single line
beginning with an upper case `<TT>A</TT>' followed by the book ID, followed by the integer width of the book, <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 < w \le s$
 -->
<SPAN CLASS="MATH">0 &lt; <I>w</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3391img1.png
 ALT="$ \le$"><I>s</I></SPAN>
<tex2html_verbatim_mark>. A <SPAN  CLASS="textit">remove</SPAN> event is a single line beginning with an upper case `<TT>R</TT>'
followed by the book ID. Finally, the end event is a line containing only a single upper case `<TT>E</TT>'. Each number in an event is preceded by a single blank.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each simulation case, print a single line containing a label (as shown in the output
sample), followed by the list of IDs of books remaining on the shelf, in order
from left to right.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
10
R 3
A 6 5
A 42 3
A 3 5
A 16 2
A 15 1
R 16
E
7
A 49 6
A 48 2
R 48
E
5
A 1 1
A 2 1
A 3 1
R 2
A 4 1
A 5 1
R 5
R 4
A 6 1
A 7 4
E
-1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
PROBLEM 1: 15 3
PROBLEM 2:
PROBLEM 3: 7 6
</PRE>

<P>

______________________________________________________
3392||||||false||||||
<P>The <SPAN CLASS="MATH"><I>n</I></SPAN>-th <SPAN CLASS="textit">Triangular</SPAN> number, <SPAN CLASS="MATH"><I>T</I>(<I>n</I>) = 1 +...+ <I>n</I></SPAN>, is the sum of the first <SPAN CLASS="MATH"><I>n</I></SPAN> integers. It is the number of points in a triangular array with <SPAN CLASS="MATH"><I>n</I></SPAN> points on side. For example <SPAN CLASS="MATH"><I>T</I>(4)</SPAN>:<P><DIV ALIGN="CENTER"><TT>X</TT></DIV><P><DIV ALIGN="CENTER"><TT>X X</TT></DIV><P><DIV ALIGN="CENTER"><TT>X X X</TT></DIV><P><DIV ALIGN="CENTER"><TT>X X X X</TT></DIV><P>Write a program to compute the weighted sum of triangular numbers:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>W</I>(<I>n</I>) = <I>SUM</I>[<I>k</I> = 1..<I>n</I>;<I>k</I> <TT>*</TT> <I>T</I>(<I>k</I> + 1)]</DIV><P></P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3392img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3392img1.png ALT="$ \le$">1000)</SPAN> which is the number of datasets that follow.<P>Each dataset consists of a single line of input containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3392img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3392img1.png ALT="$ \le$">300)</SPAN>, which is the number of points on a side of the triangle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output on a single line the dataset number, (1 through <SPAN CLASS="MATH"><I>N</I></SPAN>), a blank, the value of <SPAN CLASS="MATH"><I>n</I></SPAN> for the dataset, a blank, and the weighted sum, <SPAN CLASS="MATH"><I>W</I>(<I>n</I>)</SPAN>, of triangular numbers for <SPAN CLASS="MATH"><I>n</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
3
4
5
10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3 45
2 4 105
3 5 210
4 10 2145
</PRE><P>
______________________________________________________
3393||||||false||||||
<P>What do you do if you need to copy a 560<SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark>400mm image onto a standard sheet of US letter-size paper (which is about 216<SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark>280mm), while keeping the image as large as possible? You can rotate the image 90 degrees (so that it is in ``landscape" mode), then reduce it to 50% of its original size so that it is 200<SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark>280mm. Then it will fit on the paper without overlapping any edges. Your job is to solve this problem in general.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of one or more test cases, each of which is a single line containing four positive integers <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>, separated by a space, representing an <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark><SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark><SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>mm image and a <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark><SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark><SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>mm piece of paper. All inputs will be less than one thousand. Following the test cases is a line containing four zeros that signals the end of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, if the image fits on the sheet of paper without changing its size (but rotating it if necessary), then the output is 100%. If the image must be reduced in order to fit, the output is the largest <SPAN CLASS="textit">integer</SPAN> percentage of its original size that will fit (rotating it if necessary). Output the percentage exactly as shown in the examples below. You can assume that no image will need to be reduced to less than 1% of its original size, so the answer will always be an integer percentage between 1% and 100%, inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
560 400 218 280
10 25 88 10
8 13 5 1
9 13 10 6
199 333 40 2
75 90 218 280
999 99 1 10
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
50%
100%
12%
66%
1%
100%
1%
</PRE><P>
______________________________________________________
3394||||||false||||||
<P>Consider the following example. A student is required to take 4 courses, <SPAN CLASS="textit">mt42</SPAN>, <SPAN CLASS="textit">cs123</SPAN>, <SPAN CLASS="textit">cs456</SPAN>, and <SPAN CLASS="textit">cs789</SPAN>. <SPAN CLASS="textit">mt42</SPAN> is only offered in the fall semester and has no prerequisites. Similarly, <SPAN CLASS="textit">cs123</SPAN> is only offered in the spring semester and has no prerequisites. <SPAN CLASS="textit">cs456</SPAN> is only offered in the spring semester and has both <SPAN CLASS="textit">cs123</SPAN> and <SPAN CLASS="textit">mt42</SPAN> as prerequisites. Finally, <SPAN CLASS="textit">cs789</SPAN> is offered in both fall and spring and has <SPAN CLASS="textit">cs456</SPAN> as its only prerequisite. The shortest time to graduate is 5 semesters, by taking <SPAN CLASS="textit">mt42</SPAN> in the fall, <SPAN CLASS="textit">cs123</SPAN> in the next spring, <SPAN CLASS="textit">cs456</SPAN> the following spring (since it is not offered in the fall) and finally <SPAN CLASS="textit">cs789</SPAN> the following fall.<P>For this problem, there are only two semesters, fall and spring. Always start counting semesters from the fall.<P>In addition to the fall/spring scheduling issues, there is one slight complication. In order to keep the dormitories full, each university limits the number of courses that can be taken in any semester. This limit appears as part of the input data. The third example below illustrates this issue.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are one to twenty-five data sets, followed by a final line containing only the integers `<TT>-1 -1</TT>'. A data set starts with a line containing two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3394img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3394img1.png ALT="$ \le$">12</SPAN> <tex2html_verbatim_mark>, which is the number of courses in this data set and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3394img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3394img1.png ALT="$ \le$">6</SPAN> <tex2html_verbatim_mark>, which is the maximum number of courses that can be taken in any single semester. The next line contains the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> course identifiers. Each is a 1-5 character string from the set {<TT>a-z, 0-9</TT>}. Following the course identifiers is the individual course information. This consists of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, one line for each course, containing the course identifier, semester offered (`<TT>F</TT>'=Fall, `<TT>S</TT>'=Spring, `<TT>B</TT>'=Both semesters), the number of prerequisite courses, <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3394img1.png ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3394img1.png ALT="$ \le$">5</SPAN> <tex2html_verbatim_mark>, and finally <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> prerequisite course identifiers. The first example data set below corresponds to the problem described above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The output contains one line for each data set, formatted as shown in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 6 
cs123 mt42 cs456 cs789 
mt42 F 0 
cs123 S 0 
cs456 S 2 cs123 mt42 
cs789 B 1 cs456 
3 6 
math1 comp2 comp3 
comp3 S 1 comp2 
math1 S 0 
comp2 F 1 math1 
4 3 
m10 m20 c33 c44 
m10 B 0 
m20 B 0 
c33 B 0 
c44 B 0 
-1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The minimum number of semesters required to graduate is 5. 
The minimum number of semesters required to graduate is 4. 
The minimum number of semesters required to graduate is 2.
</PRE><P>
______________________________________________________
3395||||||false||||||
<P>The local toy store sells small fingerpainting kits with between three and twelve 50ml bottles of paint, each a different color. The paints are bright and fun to work with, and have the useful property that if you mix <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> ml each of any three different colors, you get <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> ml of gray. (The paints are thick and ``airy", almost like cake frosting, and when you mix them together the volume doesn't increase, the paint just gets more dense.) None of the individual colors are gray; the only way to get gray is by mixing exactly three distinct colors, but it doesn't matter which three. Your friend Emily is an elementary school teacher and every Friday she does a fingerpainting project with her class. Given the number of different colors needed, the amount of each color, and the amount of gray, your job is to calculate the number of kits needed for her class.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more test cases, followed by a line containing only zero that signals the end of the input. Each test case consists of a single line of five or more integers, which are separated by a space. The first integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of different colors <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3395img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3395img1.png ALT="$ \le$">12)</SPAN> <tex2html_verbatim_mark>. Following that are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> different nonnegative integers, each at most 1,000, that specify the amount of each color needed. Last is a nonnegative integer <SPAN CLASS="MATH"><I>G</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3395img1.png ALT="$ \le$">1, 000</SPAN> <tex2html_verbatim_mark> that specifies the amount of gray needed. All quantities are in ml.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the smallest number of fingerpainting kits sufficient to provide the required amounts of all the colors and gray. Note that all grays are considered equal, so in order to find the minimum number of kits for a test case you may need to make grays using different combinations of three distinct colors.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 40 95 21 0
7 25 60 400 250 0 60 0 500
4 90 95 75 95 10
4 90 95 75 95 11
5 0 0 0 0 0 333
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
8
2
3
4
</PRE><P>
______________________________________________________
3396||||||false||||||
<P>As a recruiting ploy, Google once posted billboards in Harvard Square and in the Silicon Valley area just stating ``{first 10-digit prime found in consecutive digits of e}.com". In other words, find that 10-digit sequence and then connect to the web site - and find out that Google is trying to hire people who can solve a particular kind of problem.<P>Not to be outdone, Gaggle (a loosey-goosey fuzzy logic search firm), has devised its own recruiting problem. Consider the <SPAN CLASS="textit">base</SPAN> 7 expansion of a rational number. For example, the first few digits of the <SPAN CLASS="textit">base 7</SPAN> expansion of <SPAN CLASS="MATH">1/5<SUB>10</SUB> = 0.12541<IMG WIDTH="32" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3396img1.png ALT="$ \ldots_{{7}}^{}$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">33/4<SUB>10</SUB> = 11.15151<IMG WIDTH="32" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3396img1.png ALT="$ \ldots_{{7}}^{}$"></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">6/49<SUB>10</SUB> = 0.06000<SUB>7</SUB></SPAN> <tex2html_verbatim_mark>. From this expansion, find the digits in a particular range of positions to the right of the ``decimal" point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file begins with a line containing a single integer specifying the number of problem sets in the file. Each problem set is specified by four base 10 numbers on a single line, <SPAN CLASS="MATH"><I>n</I>&nbsp;<I>d</I>&nbsp;<I>b</I>&nbsp;<I>e</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> are the numerator and denominator of the rational number and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3396img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3396img1.png ALT="$ \le$">5, 000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3396img1.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3396img1.png ALT="$ \le$">5, 000</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> are the beginning and ending positions for the desired range of digits, with <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3396img1.png ALT="$ \le$"><I>b</I>, <I>e</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3396img1.png ALT="$ \le$">250</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3396img1.png ALT="$ \le$">(<I>e</I> - <I>b</I>)<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/33/3396img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>. Note that 0 is the position immediately to the right of the decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Each problem set will be numbered (beginning at one) and will generate a single line:<P><P><BR><TT>Problem set <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>n</I>/<I>d</I></SPAN> <tex2html_verbatim_mark>, base 7 digits <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> through <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is replaced by the problem set number, <SPAN CLASS="textit">result</SPAN> is your computed result, and the other values are the corresponding input values. Make sure your output is formatted as shown in the sample output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
1 5 0 0 
6 49 1 3 
33 4 2 7 
511 977 122 126
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Problem set 1: 1 / 5, base 7 digits 0 through 0: 1
Problem set 2: 6 / 49, base 7 digits 1 through 3: 600
Problem set 3: 33 / 4, base 7 digits 2 through 7: 151515
Problem set 4: 511 / 977, base 7 digits 122 through 126: 12425
</PRE><P>
______________________________________________________
3397||||||false||||||
<P>
Your platoon of wandering lizards has entered a strange room in the labyrinth you are exploring. As you are looking around for hidden treasures, one of the rookies steps on an innocent-looking stone and the room's floor suddenly disappears! Each lizard in your platoon is left standing on a fragile looking pillar, and a fire begins to rage below<SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark> 

<P>

<P><P>
<BR>
Leave no lizard behind! Get as many lizards as possible out of the room, and report the number of casualties. 

<P>
The pillars in the room are aligned as a grid, with each pillar one unit away from the pillars to its east, west, north and south. Pillars at the edge of the grid are one unit away from the edge of the room (safety). Not all pillars necessarily have a lizard. A lizard is able to leap onto any unoccupied pillar that is within <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> units of his current one. A lizard standing on a pillar within leaping distance of the edge of the room may always leap to safety<SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark> but there's a catch: each pillar becomes weakened after each jump, and will soon collapse and no longer be usable by other lizards. Leaping onto a pillar does not cause it to weaken or collapse; only leaping off of it causes it to weaken and eventually collapse. Only one lizard may be on a pillar at any given time. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 
The input file will begin with a line containing a single integer representing the number of test cases, which is at most 25. Each test case will begin with a line containing a single positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> representing the number of rows in the map, followed by a single non-negative integer <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> representing the maximum leaping distance for the lizards. Two maps will follow, each as a map of characters with one row per line. The first map will contain a digit (0-3) in each position representing the number of jumps the pillar in that position will sustain before collapsing (0 means there is no pillar there). The second map will follow, with an `<TT>L</TT>' for every position where a lizard is on the pillar and a `<TT>.</TT>' for every empty pillar. There will never be a lizard on a position where there is no pillar.

<P>

<P>
<BR>
Each input map is guaranteed to be a rectangle of size <!-- MATH
 $n \times m$
 -->
<SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>m</I></SPAN>
<tex2html_verbatim_mark>, where <!-- MATH
 $1 \le n \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3397img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3397img1.png
 ALT="$ \le$">20</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $1 \le m \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3397img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3397img1.png
 ALT="$ \le$">20</SPAN>
<tex2html_verbatim_mark>. The leaping distance is always <!-- MATH
 $1 \le d \le 3$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3397img1.png
 ALT="$ \le$"><I>d</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/33/3397img1.png
 ALT="$ \le$">3</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 
For each input case, print a single line containing the number of lizards that could not escape. The format should follows the samples provided below.

<P>

<P>
<BR>

<B>Note:</B> Brute force methods examining every path will likely exceed the allotted time limit.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 
<PRE>
4 
3 1 
1111 
1111 
1111 
LLLL 
LLLL 
LLLL 
3 2 
00000 
01110 
00000 
..... 
.LLL. 
..... 
3 1 
00000 
01110 
00000 
..... 
.LLL. 
..... 
5 2 
00000000 
02000000 
00321100 
02000000 
00000000 
........ 
........ 
..LLLL.. 
........ 
........
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case #1: 2 lizards were left behind. 
Case #2: no lizard was left behind. 
Case #3: 3 lizards were left behind. 
Case #4: 1 lizard was left behind.
</PRE> 

<P>

______________________________________________________
3398||||||false||||||
<P>Mr. Manners teaches netiquette (``net etiquette", particularly as it applies to email) at the local community college. There are many different aspects to proper netiquette, including courtesy, correct spelling, and correct grammar. Through experience Mr. Manners has found that his college's email system does a good job of catching most spelling and grammatical errors, and he's also found that most of his students are courteous. So there are four violations of netiquette that Mr. Manners pays careful attention to, and he's devised a quick way to test for them. A message is <SPAN CLASS="textit">suspicious</SPAN> if it contains any of the following:<P><OL><LI>two adjacent uppercase letters,<BR>(because you might be SHOUTING) </LI><LI>a digit adjacent to a letter,<BR>(because you might be l33t, d00d) </LI><LI>an isolated character other than <EM>a</EM>, <EM>A</EM>, or <EM>I</EM>,<BR>(because u r probably abbreviating words; the spell checker doesn't catch this for some reason) </LI><LI>two adjacent punctuation marks, unless one of them is a double quote (the character `<TT>"</TT>').<BR>(because you might be using an emoticon :-) </LI></OL><P>For this problem, all characters in an email message are printable ASCII characters with codes in the range 32..126 (inclusive). A <SPAN CLASS="textit">punctuation mark</SPAN> is any character other than a letter, digit, or space. Two characters are <SPAN CLASS="textit">adjacent</SPAN> if they are right next to each other, with no characters in between. An <SPAN CLASS="textit">isolated character</SPAN> is one whose only adjacent characters (if any) are spaces. Your job is to write a program that can tell if a one-line email message is suspicious.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more email messages, followed by a line containing only # that signals the end of the input. Each message is on a line by itself, does not begin or end with a space, and does not contain consecutive spaces. End-of-line characters occur at the end of every line (of course), but they are not considered to be part of the message. A message will contain 1..80 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each message, output `<TT>suspicious</TT>' if it meets one or more of the four criteria defined above, and output `<TT>OK</TT>' otherwise. In the examples below, the second email meets all four criteria, and the fourth and sixth emails meet one criterion each.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
"This is a safe message," said 50 wise men.
DON'T b l8 for the Apple ][ user's group meeting.
I ate at "Al's Big Burritos" for lunch!
It's not OK to burp at your grandmother.
*BuT* YoU _CaN_ Do ThIs, YoU KnOw.
We 8 eight oranges.
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
OK
suspicious
OK
suspicious
OK
suspicious

______________________________________________________
3399||||||false||||||
<P>Some positive integers can be represented by a sum of one or more consecutive prime numbers. How many such representations does a given positive integer have? For example, the integer 53 has two representations <SPAN CLASS="MATH">5 + 7 + 11 + 13 + 17</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">53</SPAN> <tex2html_verbatim_mark>. The integer <SPAN CLASS="MATH">41</SPAN> <tex2html_verbatim_mark> has three representations <SPAN CLASS="MATH">2 + 3 + 5 + 7 + 11 + 13</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">11 + 13 + 17</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">41</SPAN> <tex2html_verbatim_mark>. The integer 3 has only one representation, which is 3. The integer 20 has no such representations. Note that summands must be consecutive prime numbers, so neither <SPAN CLASS="MATH">7 + 13</SPAN> <tex2html_verbatim_mark> nor <SPAN CLASS="MATH">3 + 5 + 5 + 7</SPAN> <tex2html_verbatim_mark> is a valid representation for the integer 20. Your mission is to write a program that reports the number of representations for the given positive integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of positive integers each in a separate line. The integers are between 2 and 10000, inclusive. The end of the input is indicated by a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be composed of lines each corresponding to an input line except the last zero. An output line includes the number of representations for the input integer as the sum of one or more consecutive prime numbers. No other characters should be inserted in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2 
3 
17 
41
20 
666 
12 
53 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
1 
2 
3 
0 
0 
1 
2
</PRE><P>
______________________________________________________
3400||||||false||||||
<P>The deadline of Prof. Hachio ji's assignment is tomorrow. To complete the task, students have to copy pages of many reference books in the library.<P>All the reference books are in a storeroom and only the librarian is allowed to enter it. To obtain a copy of a reference book's page, a student should ask the librarian to make it. The librarian brings books out of the storeroom and makes page copies according to the requests. The overall situation is shown in Figure 1.<P>Students queue up in front of the counter. Only a single book can be requested at a time. If a student has more requests, the student goes to the end of the queue after the request has been served.<P>In the storeroom, there are <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> desks <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB>,..., <I>D</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark>, and a shelf. They are placed in a line in this order, from the door to the back of the room. Up to <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> books can be put on each of the desks. If a student requests a book, the librarian enters the storeroom and looks for it on <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB>,..., <I>D</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark> in this order, and then on the shelf. After finding the book, the librarian takes it and gives a copy of a page to the student.<P><DIV ALIGN="CENTER"><IMG WIDTH="900" HEIGHT="297" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3400.jpg ALT="\epsfbox{p3400.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: The Library</DIV><P>Then the librarian returns to the storeroom with the requested book, to put it on <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> according to the following procedure.<P><UL><LI>If <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is not full (in other words, the number of books on <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB> &lt; <I>c</I></SPAN> <tex2html_verbatim_mark>), the librarian puts the requested book there. </LI><LI>If <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is full, the librarian<UL><LI>temporarily puts the requested book on the non-full desk closest to the entrance or, in case all the desks are full, on the shelf, </LI><LI>finds the book on <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> that has not been requested for the longest time (i.e. the least recently used book) and takes it, </LI><LI>puts it on the non-full desk (except <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>) closest to the entrance or, in case all the desks except <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> are full, on the shelf, </LI><LI>takes the requested book from the temporary place, </LI><LI>and finally puts it on <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>. </LI></UL></LI></UL><P>Your task is to write a program which simulates the behaviors of the students and the librarian, and evaluates the total cost of the overall process. Costs are associated with <SPAN CLASS="textit">accessing</SPAN> a desk or the shelf, that is, putting/taking a book on/from it in the description above. The cost of an access is <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> for desk <SPAN CLASS="MATH"><I>D</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I> + 1</SPAN> <tex2html_verbatim_mark> for the shelf. That is, an access to <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB>,<SUP> ... </SUP>, <I>D</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark> , and the shelf costs <SPAN CLASS="MATH">1,<SUP> ... </SUP>, <I>m</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>m</I> + 1</SPAN> <tex2html_verbatim_mark>, respectively. Costs of other actions are ignored.<P>Initially, no books are put on desks. No new students appear after opening the library.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets. The end of the input is indicated by a line containing three zeros separated by a space. It is not a dataset.<P>The format of each dataset is as follows.<P><P><BR><SPAN CLASS="MATH"><I>m</I>&nbsp;<I>c</I>&nbsp;<I>n</I></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>k</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>b</I><SUB>11</SUB>&nbsp;<SUP> ... </SUP>&nbsp;<I>b</I><SUB>1k<SUB>1</SUB></SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3400.jpg ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>k</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>b</I><SUB>n1</SUB>&nbsp;<SUP> ... </SUP>&nbsp;<I>b</I><SUB>nk<SUB>n</SUB></SUB></SPAN> <tex2html_verbatim_mark><P><P><BR>Here, all data items are positive integers. <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the number of desks not exceeding 10. <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is the number of books allowed to put on a desk, which does not exceed 30. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of students not exceeding 100. <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the number of books requested by the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th student, which does not exceed 50. <SPAN CLASS="MATH"><I>b</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> is the ID number of the book requested by the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th student on the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th turn. No two books have the same ID number. Note that a student may request the same book more than once. <SPAN CLASS="MATH"><I>b</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> is less than 100.<P>Here we show you an example of cost calculation for the following dataset.<P><P><BR><PRE>
3 1 2 
3 
60 61 62 
2 
70 60
</PRE><P><P><BR>In this dataset, there are 3 desks <SPAN CLASS="MATH">(<I>D</I><SUB>1</SUB>, <I>D</I><SUB>2</SUB>, <I>D</I><SUB>3</SUB>)</SPAN> <tex2html_verbatim_mark>. At most 1 book can be put on each desk. The number of students is 2. The first student requests 3 books of which IDs are 60, 61, and 62, respectively, and the second student 2 books of which IDs are 70 and 60, respectively.<P>The calculation of the cost for this dataset is done as follows. First, for the first request of the first student, the librarian takes the book 60 from the shelf and puts it on <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and the first student goes to the end of the queue, costing 5. Next, for the first request of the second student, the librarian takes the book 70 from the shelf, puts it on <SPAN CLASS="MATH"><I>D</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, moves the book 60 from <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>D</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, and finally moves the book 70 from <SPAN CLASS="MATH"><I>D</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, costing 13. Similarly, the cost for the books 61, 60, and 62, are calculated as 14, 12, 14, respectively. Therefore, the total cost is 58.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output the total cost of processing all the requests, in a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 1 1 
1 
50 
2 1 2 
1 
50 
1 
60 
2 1 2 
2 
60 61 
1 
70 
4 2 3 
3 
60 61 62 
1 
70 
2 
80 81 
3 1 2 
3 
60 61 62 
2 
70 60 
1 2 5 
2 
87 95 
3 
96 71 35 
2 
68 2 
3 
3 18 93 
2 
57 2 
2 2 1 
5 
1 2 1 3 1 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
16 
28 
68 
58 
98 
23
</PRE><P>
______________________________________________________
3401||||||false||||||
<P>There are several colored cubes. All of them are of the same size but they may be colored differently. Each face of these cubes has a single color. Colors of distinct faces of a cube may or may not be the same.<P>Two cubes are said to be <SPAN CLASS="textit">identically colored</SPAN> if some suitable rotations of one of the cubes give identical looks to both of the cubes. For example, two cubes shown in Figure 2 are identically colored. A set of cubes is said to be identically colored if every pair of them are identically colored.<P>A cube and its mirror image are not necessarily identically colored. For example, two cubes shown in Figure 3 are not identically colored.<P>You can make a given set of cubes identically colored by repainting some of the faces, whatever colors the faces may have. In Figure 4, repainting four faces makes the three cubes identically colored and repainting fewer faces will never do.<P>Your task is to write a program to calculate the minimum number of faces that needs to be repainted for a given set of cubes to become identically colored.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of datasets. A dataset consists of a header and a body appearing in this order. A header is a line containing one positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and the body following it consists of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines. You can assume that <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3401img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3401img1.png ALT="$ \le$">4</SPAN> <tex2html_verbatim_mark>. Each line in a body contains six color names separated by a space. A color name consists of a word or words connected with a hyphen (-). A word consists of one or more lowercase letters. You can assume that a color name is at most 24-characters long including hyphens.<P>A dataset corresponds to a set of colored cubes. The integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> corresponds to the number of cubes. Each line of the body corresponds to a cube and describes the colors of its faces. Color names in a line is ordered in accordance with the numbering of faces shown in Figure 5. A line<P><P><BR><SPAN CLASS="MATH"><I>color</I><SUB>1</SUB>&nbsp;<I>color</I><SUB>2</SUB>&nbsp;<I>color</I><SUB>3</SUB>&nbsp;<I>color</I><SUB>4</SUB>&nbsp;<I>color</I><SUB>5</SUB>&nbsp;<I>color</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR>corresponds to a cube colored as shown in Figure 6.<P>The end of the input is indicated by a line containing a single zero. It is not a dataset nor a part of a dataset.<P><DIV ALIGN="CENTER"><IMG WIDTH="805" HEIGHT="239" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3401img1.png ALT="\epsfbox{p3401a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 2: Identically colored cubes</DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="824" HEIGHT="240" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3401img1.png ALT="\epsfbox{p3401b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 3: cubes that are not identically colored</DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="815" HEIGHT="479" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3401img1.png ALT="\epsfbox{p3401c.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 4: An example of recoloring</DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="804" HEIGHT="240" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3401img1.png ALT="\epsfbox{p3401d.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 5: Numbering of faces Figure 6: Coloring</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output a line containing the minimum number of faces that need to be repainted to make the set of cub es identically colored.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
scarlet green blue yellow magenta cyan 
blue pink green magenta cyan lemon 
purple red blue yellow cyan green 
2 
red green blue yellow magenta cyan 
cyan green blue yellow magenta red 
2 
red green gray gray magenta cyan 
cyan green gray gray magenta red 
2 
red green blue yellow magenta cyan 
magenta red blue yellow cyan green 
3 
red green blue yellow magenta cyan 
cyan green blue yellow magenta red 
magenta red blue yellow cyan green 
3 
blue green green green green blue 
green blue blue green green green 
green green green green green sea-green 
3 
red yellow red yellow red yellow 
red red yellow yellow red yellow 
red red red red red red 
4 
violet violet salmon salmon salmon salmon 
violet salmon salmon salmon salmon violet 
violet violet salmon salmon violet violet 
violet violet violet violet salmon salmon 
1 
red green blue yellow magenta cyan 
4 
magenta pink red scarlet vermilion wine-red 
aquamarine blue cyan indigo sky-blue turquoise-blue 
blond cream chrome-yellow lemon olive yellow 
chrome-green emerald-green green olive vilidian sky-blue 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
2 
0 
0 
2 
3 
4 
4 
0 
16
</PRE><P>
______________________________________________________
3402||||||false||||||
<P>
In the good old Hachioji railroad station located in the west of Tokyo, there are several parking lines, and lots of freight trains come and go every day. 

<P>
All freight trains travel at night, so these trains containing various types of cars are settled in your parking lines early in the morning. Then, during the daytime, you must reorganize cars in these trains according to the request of the railroad clients, so that every line contains the ``right" train, i.e. the right number of cars of the right types, in the right order. 

<P>
As shown in Figure 7, all parking lines run in the East-West direction. There are exchange lines connecting them through which you can move cars. An exchange line connects two ends of different parking lines. Note that an end of a parking line can be connected to many ends of other lines. Also note that an exchange line may connect the East-end of a parking line and the West-end of another.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3402a.eps}$
 -->
<IMG
 WIDTH="741" HEIGHT="370" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3402a.jpg
 ALT="\epsfbox{p3402a.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 7: Parking lines and exchange lines

</DIV>

<P>
Cars of the same type are not discriminated between each other. The cars are symmetric, so directions of cars don't matter either. 

<P>
You can divide a train at an arbitrary position to make two sub-trains and move one of them through an exchange line connected to the end of its side. Alternatively, you may move a whole train as is without dividing it. Anyway, when a (sub-) train arrives at the destination parking line and the line already has another train in it, they are coupled to form a longer train. 

<P>
Your superautomatic train organization system can do these without any help of locomotive engines. Due to the limitation of the system, trains cannot stay on exchange lines; when you start moving a (sub-) train, it must arrive at the destination parking line before moving another train. 

<P>
In what follows, a letter represents a car type and a train is expressed as a sequence of letters. For example in Figure 8, from an initial state having a train ``<TT>aabbccdee</TT>" on line 0 and no trains on other lines, you can make ``<TT>bbaadeecc</TT>" on line 2 with the four moves shown in the figure.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3402b.eps}$
 -->
<IMG
 WIDTH="834" HEIGHT="700" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3402a.jpg
 ALT="\epsfbox{p3402b.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 8: An example movement sequence

</DIV>

<P>
To cut the cost out, your b oss wants to minimize the numb er of (sub-) train movements. For example, in the case of Figure 8, the numb er of movements is 4 and this is the minimum. 

<P>
Given the configurations of the train cars in the morning (arrival state) and evening (departure state), your job is to write a program to find the optimal train reconfiguration plan.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of one or more datasets. A dataset has the following format: 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<!-- MATH
 $p_{1}P_{1}q_{1}Q_{1}$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>1</SUB><I>P</I><SUB>1</SUB><I>q</I><SUB>1</SUB><I>Q</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<!-- MATH
 $p_{2}P_{2}q_{2}Q_{2}$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>2</SUB><I>P</I><SUB>2</SUB><I>q</I><SUB>2</SUB><I>Q</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3402a.jpg
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark>

<P>

<!-- MATH
 $p_{y}P_{y}q_{y}Q_{y}$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>y</SUB><I>P</I><SUB>y</SUB><I>q</I><SUB>y</SUB><I>Q</I><SUB>y</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<SPAN CLASS="MATH"><I>s</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3402a.jpg
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark>

<P>

<SPAN CLASS="MATH"><I>s</I><SUB>x-1</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<SPAN CLASS="MATH"><I>t</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3402a.jpg
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> 

<P>

<SPAN CLASS="MATH"><I>t</I><SUB>x-1</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> is the number of parking lines, which are numbered from 0 to <SPAN CLASS="MATH"><I>x</I> - 1</SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is the number of exchange lines. Then <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> lines of the exchange line data follow, each describing two ends connected by the exchange line; <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are integers between 0 and <SPAN CLASS="MATH"><I>x</I> - 1</SPAN>
<tex2html_verbatim_mark> which indicate parking line numbers, and <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Q</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are either ``<TT>E</TT>" (East) or ``<TT>W</TT>" (West) which indicate the ends of the parking lines. 

<P>
Then <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> lines of the arrival (initial) configuration data, <!-- MATH
 $s_{0} , \ldots, s_{x-1}$
 -->
<SPAN CLASS="MATH"><I>s</I><SUB>0</SUB>,..., <I>s</I><SUB>x-1</SUB></SPAN>
<tex2html_verbatim_mark> , and <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> lines of the departure (target) configuration data, <!-- MATH
 $t_{0}, \cdots t_{x-1}$
 -->
<SPAN CLASS="MATH"><I>t</I><SUB>0</SUB>,<SUP> ... </SUP><I>t</I><SUB>x-1</SUB></SPAN>
<tex2html_verbatim_mark> , follow. Each of these lines contains one or more lowercase letters ``<TT>a</TT>", ``<TT>b</TT>",<SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> , ``<TT>z</TT>", which indicate types of cars of the train in the corresponding parking line, in west to east order, or alternatively, a single ``<TT>-</TT>" when the parking line is empty. 

<P>
You may assume that <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> does not exceed 4, the total numb er of cars contained in all the trains does not exceed 10, and every parking line has sufficient length to park all the cars. 

<P>
You may also assume that each dataset has at least one solution and that the minimum number of moves is between one and six, inclusive. 

<P>
Two zeros in a line indicate the end of the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, output the number of moves for an optimal reconfiguration plan, in a separate line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 5 
0W 1W 
0W 2W 
0W 2E 
0E 1E 
1E 2E 
aabbccdee 
-
-
-
-
bbaadeecc 
3 3 
0E 1W 
1E 2W 
2E 0W 
aabb 
bbcc 
aa 
bbbb 
cc 
aaaa 
3 4 
0E 1W 
0E 2E 
1E 2W 
2E 0W 
ababab
-
-
aaabbb 
-
-
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
2 
5
</PRE> 

<P>

______________________________________________________
3403||||||false||||||
<P>There is a mysterious planet called Yaen, whose space is 2-dimensional. There are many beautiful stones on the planet, and the Yaen people love to collect them. They bring the stones back home and make nice mobile arts of them to decorate their 2-dimensional living rooms.<P>In their 2-dimensional world, a mobile is defined recursively as follows:<P><UL><LI>a stone hung by a string, or </LI><LI>a rod of length 1 with two sub-mobiles at both ends; the rod is hung by a string at the center of gravity of sub-mobiles. When the weights of the sub-mobiles are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, and their distances from the center of gravity are <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> respectively, the equation <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>a</I> = <I>m</I> <TT>x</TT> <I>b</I></SPAN> <tex2html_verbatim_mark> holds. </LI></UL><P><DIV ALIGN="CENTER"><IMG WIDTH="203" HEIGHT="102" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3403a.jpg ALT="\epsfbox{p3403a.eps}"> <tex2html_verbatim_mark></DIV><P>For example, if you got three stones with weights 1, 1, and 2, here are some possible mobiles and their widths:<P><DIV ALIGN="CENTER"><IMG WIDTH="818" HEIGHT="179" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3403a.jpg ALT="\epsfbox{p3403b.eps}"> <tex2html_verbatim_mark></DIV><P>Given the weights of stones and the width of the room, your task is to design the widest possible mobile satisfying both of the following conditions.<P><UL><LI>It uses all the stones. </LI><LI>Its width is less than the width of the room. </LI></UL><P>You should ignore the widths of stones. In some cases two sub-mobiles hung from both ends of a rod might overlap (see the figure on the right). Such mobiles are acceptable. The width of the example is <SPAN CLASS="MATH">(1/3) + 1 + (1/4)</SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="230" HEIGHT="140" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3403a.jpg ALT="\epsfbox{p3403c.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input gives the number of datasets. Then the specified number of datasets follow. A dataset has the following format.<P><P><BR><SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>w</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3403a.jpg ALT="$ \vdots$"></SPAN><P><SPAN CLASS="MATH"><I>w</I><SUB>s</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> is a decimal fraction representing the width of the room, which satisfies <!-- MATH
 $0 < r < 10$
 --><SPAN CLASS="MATH">0 &lt; <I>r</I> &lt; 10</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> is the number of the stones. You may assume <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3403a.jpg ALT="$ \le$"><I>s</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3403a.jpg ALT="$ \le$">6</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the weight of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th stone, which is an integer. You may assume <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3403a.jpg ALT="$ \le$"><I>w</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3403a.jpg ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>.<P>You can assume that no mobiles whose widths are between <SPAN CLASS="MATH"><I>r</I> - 0.00001</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I> + 0.00001</SPAN> <tex2html_verbatim_mark> can be made of given stones.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset in the input, one line containing a decimal fraction should be output. The decimal fraction should give the width of the widest possible mobile as defined above. An output line should not contain extra characters such as spaces.<P>In case there is no mobile which satisfies the requirement, answer `<TT>-1</TT>' instead.<P>The answer should not have an error greater than 0.00000001. You may output any numb er of digits after the decimal point, provided that the ab ove accuracy condition is satisfied.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
1.3 
3 
1 
2 
1 
1.4 
3 
1 
2 
1 
2.0 
3 
1 
2 
1 
1.59 
4 
2 
1 
1 
3 
1.7143 
4 
1 
2 
3 
5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
-1 
1.3333333333333335 
1.6666666666666667 
1.5833333333333335 
1.7142857142857142
</PRE><P>
______________________________________________________
3404||||||false||||||
<P>
In the year 2020, a race of atomically energized cars will b e held. Unlike today's car races, fueling is not a concern of racing teams. Cars can run throughout the course without any refueling. Instead, the critical factor is tire (tyre). Teams should carefully plan where to change tires of their cars. 

<P>
The race is a road race having <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> checkpoints in the course. Their distances from the start are <!-- MATH
 $a_{1}, a_{2} , \cdots$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,<SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> (in kilometers). The <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>-th checkpoint is the goal. At the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th checkpoint (<SPAN CLASS="MATH"><I>i</I> &lt; <I>n</I></SPAN>
<tex2html_verbatim_mark>), tires of a car can be changed. Of course, a team can choose whether to change or not to change tires at each checkpoint. It takes <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> seconds to change tires (including overhead for braking and accelerating). There is no time loss at a checkpoint if a team chooses not to change tires. 

<P>
A car cannot run fast for a while after a tire change, because the temperature of tires is lower than the designed optimum. After running long without any tire changes, on the other hand, a car cannot run fast because worn tires cannot grip the road surface well. The time to run an interval of one kilometer from <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>x</I> + 1</SPAN>
<tex2html_verbatim_mark> is given by the following expression (in seconds). Here <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> is a nonnegative integer denoting the distance (in kilometers) from the latest checkpoint where tires are changed (or the start). <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>e</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>f</I></SPAN>
<tex2html_verbatim_mark> are given constants. 

<P>

<P>
<BR>
<!-- MATH
 $1/(v - e \times (x - r)) \qquad (\mbox{if } x \ge r)$
 -->
<SPAN CLASS="MATH">1/(<I>v</I> - <I>e</I> <TT>x</TT> (<I>x</I> - <I>r</I>))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if <I>x</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3404img1.png
 ALT="$ \ge$"><I>r</I>)</SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $1/(v - f \times (r - x)) \qquad (\mbox{if } x < r )$
 -->
<SPAN CLASS="MATH">1/(<I>v</I> - <I>f</I> <TT>x</TT> (<I>r</I> - <I>x</I>))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if <I>x</I> &lt; <I>r</I>)</SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
Your mission is to write a program to determine the best strategy of tire changes which minimizes the total time to the goal.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets each corresponding to a race situation. The format of a dataset is as follows. 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<!-- MATH
 $a_{1} \ a_{2} \ldots a_{n}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>&nbsp;<I>a</I><SUB>2</SUB>...<I>a</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<!-- MATH
 $r \ v \ e \ f$
 -->
<SPAN CLASS="MATH"><I>r</I>&nbsp;<I>v</I>&nbsp;<I>e</I>&nbsp;<I>f</I></SPAN>
<tex2html_verbatim_mark>

<P>
The meaning of each of the input items is given in the problem statement. If an input line contains two or more input items, they are separated by a space. 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is a p ositive integer not exceeding 100. Each of <!-- MATH
 $a_{1} , a_{2} ,\cdots$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,<SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> , and <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> is a positive integer satisfying <!-- MATH
 $0 < a_{1} < a_{2} < \ldots < a_{n} \le 10000$
 -->
<SPAN CLASS="MATH">0 &lt; <I>a</I><SUB>1</SUB> &lt; <I>a</I><SUB>2</SUB> &lt;...&lt; <I>a</I><SUB>n</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3404img1.png
 ALT="$ \le$">10000</SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> is a positive decimal fraction not exceeding 100.0. <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> is a nonnegative integer satisfying <!-- MATH
 $0 \le r \le a_{n} - 1$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3404img1.png
 ALT="$ \le$"><I>r</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3404img1.png
 ALT="$ \le$"><I>a</I><SUB>n</SUB> - 1</SPAN>
<tex2html_verbatim_mark>. Each of <SPAN CLASS="MATH"><I>v</I>, <I>e</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>f</I></SPAN>
<tex2html_verbatim_mark> is a positive decimal fraction. 
You can assume that <!-- MATH
 $v - e \times (a_{n} - 1 - r) \ge 0.01$
 -->
<SPAN CLASS="MATH"><I>v</I> - <I>e</I> <TT>x</TT> (<I>a</I><SUB>n</SUB> -1 - <I>r</I>)<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3404img1.png
 ALT="$ \ge$">0.01</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $v - f \times r \ge 0.01$
 -->
<SPAN CLASS="MATH"><I>v</I> - <I>f</I> <TT>x</TT> <I>r</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3404img1.png
 ALT="$ \ge$">0.01</SPAN>
<tex2html_verbatim_mark>. 

<P>
The end of the input is indicated by a line with a single zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset in the input, one line containing a decimal fraction should b e output. The decimal fraction should give the elapsed time at the goal (in seconds) when the best strategy is taken. An output line should not contain extra characters such as spaces. 

<P>
The answer should not have an error greater than 0.001. You may output any number of digits after the decimal point, provided that the above accuracy condition is satisfied.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
2 3 
1.0 
1 1.0 0.1 0.3 
5 
5 10 15 20 25 
0.15 
1 1.0 0.04 0.5 
10 
1783 3640 3991 4623 5465 5481 6369 6533 6865 8425 
4.172 
72 59.4705 0.0052834 0.0611224 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3.5397 
31.9249 
168.6682
</PRE>

______________________________________________________
3405||||||false||||||
<P>
Gilbert is the network admin of Ginkgo company. His boss is mad about the messy network cables on the floor. He finally walked up to Gilbert and asked the lazy network admin to illustrate how computers and switches are connected. Since he is a programmer, he is very reluctant to move throughout the office and examine cables and switches with his eyes. He instead opted to get this job done by measurement and a little bit of mathematical thinking, sitting down in front of his computer all the time. Your job is to help him by writing a program to reconstruct the network topology from measurements. 

<P>
There are a known number of computers and an unknown number of switches. Each computer is connected to one of the switches via a cable and to nothing else. Specifically, a computer is never connected to another computer directly, or never connected to two or more switches. Switches are connected via cables to form a tree (a connected undirected graph with no cycles). No switches are `useless.' In other words, each switch is on the path between at least one pair of computers. 

<P>
All in all, computers and switches together form a tree whose leaves are computers and whose internal nodes switches (See Figure 9). 

<P>
Gilbert measures the distances between <SPAN  CLASS="textit">all pairs of computers</SPAN>. The distance between two computers is simply the number of switches on the path between the two, plus one. Or equivalently, it is the number of cables used to connect them. You may wonder how Gilbert can actually obtain these distances solely based on measurement. Well, he can do so by a very sophisticated statistical processing technique he invented. Please do not ask the details. 

<P>
You are therefore given a matrix describing distances between leaves of a tree. Your job is to construct the tree from it.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input is a series of distance matrices, followed by a line consisting of a single `0'. Each distance matrix is formatted as follows. 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=4>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>a</I><SUB>11</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>12</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>1N</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>a</I><SUB>21</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>22</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>2N</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3405img1.png
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3405img1.png
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="25" HEIGHT="29" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3405img1.png
 ALT="$ \ddots$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3405img1.png
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>a</I><SUB>N1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>N2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>NN</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TABLE>

</DIV>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3405.eps}$
 -->
<IMG
 WIDTH="863" HEIGHT="536" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3405img1.png
 ALT="\epsfbox{p3405.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 9: Computers and Switches

</DIV>

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the size, i.e. the number of rows and the number of columns, of the matrix. <SPAN CLASS="MATH"><I>a</I><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark> gives the distance between the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th leaf node (computer) and the <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>-th. You may assume <!-- MATH
 $2 \le N \le 50$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3405img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3405img1.png
 ALT="$ \le$">50</SPAN>
<tex2html_verbatim_mark> and the matrix is symmetric whose diagonal elements are all zeros. That is, <!-- MATH
 $a_{ii} = 0$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>ii</SUB> = 0</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $a_{ij} = a_{ji}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>ij</SUB> = <I>a</I><SUB>ji</SUB></SPAN>
<tex2html_verbatim_mark> for each <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>. Each non-diagonal element <!-- MATH
 $a_{ij} (i \neq j )$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>ij</SUB>(<I>i</I> <IMG
 WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3405img1.png
 ALT="$ \neq$"> <I>j</I>)</SPAN>
<tex2html_verbatim_mark> satisfies <!-- MATH
 $2 \le a_{ij} \le 30$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3405img1.png
 ALT="$ \le$"><I>a</I><SUB>ij</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3405img1.png
 ALT="$ \le$">30</SPAN>
<tex2html_verbatim_mark>. You may assume there is always a solution. That is, there is a tree having the given distances between leaf nodes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each distance matrix, find a tree having the given distances between leaf nodes. Then output the degree of each internal node (i.e. the number of cables adjoining each switch), all in a single line and in ascending order. Numbers in a line should be separated by a single space. A line should not contain any other characters, including trailing spaces.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
  0  2  2  2 
  2  0  2  2
  2  2  0  2
  2  2  2  0
4 
  0  2  4  4 
  2  0  4  4
  4  4  0  2
  4  4  2  0
2
  0 12
 12  0
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
2 3 3 
2 2 2 2 2 2 2 2 2 2 2
</PRE> 

<P>

______________________________________________________
3406||||||false||||||
<P>A Bingo game is played by one gamemaster and several players. At the beginning of a game, each player is given a card with <SPAN CLASS="MATH"><I>M</I> <TT>x</TT> <I>M</I></SPAN> <tex2html_verbatim_mark> numbers in a matrix (See Figure 10).<P><DIV ALIGN="CENTER"><IMG WIDTH="396" HEIGHT="383" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="\epsfbox{p3406a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 10: A Card</DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="843" HEIGHT="358" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="\epsfbox{p3406b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 11: Bingo patterns of <SPAN CLASS="MATH">4 <TT>x</TT> 4</SPAN> <tex2html_verbatim_mark> card</DIV><P>As the game proceeds, the gamemaster announces a series of numbers one by one. Each player punches a hole in his card on the announced number, if any.<P>When at least one `Bingo' is made on the card, the player wins and leaves the game. The `Bingo' means that all the <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> numbers in a line are punched vertically, horizontally or diagonally (See Figure 11).<P><DIV ALIGN="CENTER"><IMG WIDTH="805" HEIGHT="1022" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="\epsfbox{p3406c.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 12: Example of Bingo Game Process</DIV><P>The gamemaster continues announcing numbers until all the players make a Bingo.<P>In the ordinary Bingo games, the gamemaster chooses numb ers by a random process and has no control on them. But in this problem the gamemaster knows all the cards at the b eginning of the game and controls the game by choosing the numb er sequence to b e announced at his will.<P>Specifically, he controls the game to satisfy the following condition.<P><P><BR><SPAN CLASS="MATH"><I>Card</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> makes a Bingo no later than <SPAN CLASS="MATH"><I>Card</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>, for <SPAN CLASS="MATH"><I>i</I> &lt; <I>j</I></SPAN> <tex2html_verbatim_mark> . (*)<P><P><BR>Figure 12 shows an example of how a game proceeds. The gamemaster cannot announce `5' b efore `16', because <SPAN CLASS="MATH"><I>Card</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark> makes a Bingo before <SPAN CLASS="MATH"><I>Card</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Card</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> , violating the condition (*).<P>Your job is to write a program which finds the minimum length of such sequence of numbers for the given cards.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets. The format of each dataset is as follows.<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=13><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>1</SUP><SUB>11</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>1</SUP><SUB>12</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>1</SUP><SUB>1M</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>1</SUP><SUB>21</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>1</SUP><SUB>22</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>1</SUP><SUB>2M</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>1</SUP><SUB>M1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>1</SUP><SUB>M2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>1</SUP><SUB>MM</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>2</SUP><SUB>11</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>2</SUP><SUB>12</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>2</SUP><SUB>1M</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>2</SUP><SUB>21</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>2</SUP><SUB>22</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>2</SUP><SUB>2M</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>2</SUP><SUB>M1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>2</SUP><SUB>M2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>2</SUP><SUB>MM</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>P</SUP><SUB>11</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>P</SUP><SUB>12</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>P</SUP><SUB>1M</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>P</SUP><SUB>21</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>P</SUP><SUB>22</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>P</SUP><SUB>2M</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>P</SUP><SUB>M1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>P</SUP><SUB>M2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I><SUP>P</SUP><SUB>MM</SUB></SPAN> <tex2html_verbatim_mark></TD></TR></TABLE></DIV><P><P><BR>All data items are integers. <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is the number of the cards, namely the number of the players. <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the number of rows and the number of columns of the matrix on each card. <SPAN CLASS="MATH"><I>N</I><SUP>k</SUP><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> means the number written at the position <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> on the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-th card. If <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>) <IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="$ \neq$"> (<I>p</I>, <I>q</I>)</SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>N</I><SUP>k</SUP><SUB>ij</SUB> = <I>N</I><SUP>k</SUP><SUB>pq</SUB></SPAN> <tex2html_verbatim_mark>. The parameters <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> satisfy the conditions <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="$ \le$">4</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="$ \le$">4</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="$ \le$"><I>N</I><SUP>k</SUP><SUB>ij</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3406a.jpg ALT="$ \le$">99.</SPAN> <tex2html_verbatim_mark><P>The end of the input is indicated by a line containing two zeros separated by a space. It is not a dataset.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output the minimum length of the sequence of numb ers which satisfy the condition (*). Output a zero if there are no such sequences. Output for each dataset must be printed on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3 
10 25 11 20 6 2 1 15 23 
5 21 3 12 23 17 7 26 2 
8 18 4 22 13 27 16 5 11 
19 9 24 2 11 5 14 28 16 
4 3 
12 13 20 24 28 32 15 16 17 
12 13 21 25 29 33 16 17 18 
12 13 22 26 30 34 17 18 15 
12 13 23 27 31 35 18 15 16 
4 3 
11 12 13 14 15 16 17 18 19 
21 22 23 24 25 26 27 28 29 
31 32 33 34 35 36 37 38 39 
41 42 43 44 45 46 47 48 49 
4 4 
2 6 9 21 15 23 17 31 33 12 25 4 8 24 13 36
22 18 27 26 35 28 3 7 11 20 38 16 5 32 14 29
26 7 16 29 27 3 38 14 18 28 20 32 22 35 11 5
36 13 24 8 4 25 12 33 31 17 23 15 21 9 6 2 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 
4 
12 
0
</PRE><P><P><P><BR><B>Note:</B> For your convenience, sequences satisfying the condition (<SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark>) for the first three datasets are shown below. There may be other sequences of the same length satisfying the condition, but no shorter.<P><PRE>
11, 2, 23, 16, 5 
15, 16, 17, 18 
11, 12, 13, 21, 22, 23, 31, 32, 33, 41, 42, 43
</PRE><P>
______________________________________________________
3407||||||false||||||
<P>You are given two solid polygons and their positions on the <SPAN CLASS="MATH"><I>xy</I></SPAN> <tex2html_verbatim_mark>-plane. You can move one of the two along the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-axis (they can overlap during the move). You cannot move it in other directions. The goal is to place them as compactly as possible, subject to the following condition: the distance between any point in one polygon and any point in the other must not be smaller than a given minimum distance <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>.<P>We define the <SPAN CLASS="textit">width</SPAN> of a placement as the difference between the maximum and the minimum <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinates of all points in the two polygons.<P>Your job is to write a program to calculate the minimum width of placements satisfying the above condition.<P>Let's see an example. If the polygons in Figure 13 are placed with <SPAN CLASS="MATH"><I>L</I> = 10.0</SPAN> <tex2html_verbatim_mark>, the result will be 100. Figure 14 shows one of the optimal placements.<P><DIV ALIGN="CENTER"><IMG WIDTH="613" HEIGHT="409" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3407a.jpg ALT="\epsfbox{p3407a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 13: Initial position of the two polygons</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets. Each dataset is given in the following format.<P><P><BR><TABLE COLS=1><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>Polygon</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>Polygon</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD></TR></TABLE><P><DIV ALIGN="CENTER"><IMG WIDTH="371" HEIGHT="370" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3407a.jpg ALT="\epsfbox{p3407b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 14: One of the optimal placements <SPAN CLASS="MATH">(<I>L</I> = 10.0)</SPAN> <tex2html_verbatim_mark></DIV><P><SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> is a decimal fraction, which means the required distance of two polygons. <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> is greater than 0.1 and less than 50.0.<P><P><BR>The format of each polygon is as follows.<P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>x</I><SUB>2</SUB><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3407a.jpg ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>x</I><SUB>n</SUB><I>y</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is a positive integer, which represents the number of vertices of the polygon. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is greater than 2 and less than 15.<P>Remaining lines represent the vertices of the polygon. A vertex data line has a pair of nonnegative integers which represent the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinates of a vertex. <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinates are separated by a single space, and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinate is immediately followed by a newline. <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> are less than 500.<P>Edges of the polygon connect vertices given in two adjacent vertex data lines, and vertices given in the last and the first vertex data lines. You may assume that the vertices are given in the counterclockwise order, and the contours of polygons are simple, i.e. they do not cross nor touch themselves.<P>Also, you may assume that the result is not sensitive to errors. In concrete terms, for a given pair of polygons, the minimum width is a function of the given minimum distance <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>. Let us denote the function <SPAN CLASS="MATH"><I>w</I>(<I>l</I> )</SPAN> <tex2html_verbatim_mark>. Then you can assume that <!-- MATH
 $|w(L \pm 10^{-7}) - w(L)| < 10^{-4}$
 --><SPAN CLASS="MATH">| <I>w</I>(<I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3407a.jpg ALT="$ \pm$">10<SUP>-7</SUP>) - <I>w</I>(<I>L</I>)| &lt; 10<SUP>-4</SUP></SPAN> <tex2html_verbatim_mark> .<P>The end of the input is indicated by a line that only contains a zero. It is not a part of a dataset.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should consist of a series of lines each containing a single decimal fraction. Each number should indicate the minimum width for the corresponding dataset. The answer should not have an error greater than 0.0001. You may output any number of digits after the decimal point, provided that the above accuracy condition is satisfied.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10.5235 
3 
0 0 
100 100 
0 100 
4 
0 50 
20 50 
20 80 
0 80 
10.0 
4 
120 45 
140 35 
140 65 
120 55 
8 
0 0 
100 0 
100 100 
0 100 
0 55 
80 90 
80 10 
0 45 
10.0 
3
0 0 
1 0 
0 1 
3 
0 100 
1 101 
0 101 
10.0 
3 
0 0 
1 0 
0 100 
3 
0 50 
100 50 
0 51 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
114.882476 
100 
1 
110.5005

______________________________________________________
3408||||||false||||||
<!--!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>A - Unequalled Consumption</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="problem.css">
</head>
<body>

<h1>Problem A - Unequalled Consumption</h1>
<h3>Time limit: 4 seconds</h3--><p><center><img align="right" src="http://livearchive.onlinejudge.org/external/34/p3408.jpg></center>The Association of Candy Makers is preparing to launch a new product. Its idea is old with a novel twist: it simply sells boxes of candies. But since people are what they consume and everyone wants to be unique these days, the ACM wants <i>every</i> candy box to be unique, in the sense that no two boxes should contain the same composition of candy types.<p>The ACM is only able to make a small number n of different types of candy, but while limited in imagination, it is virtually limitless in resources, so it is able to produce as many as it wants of each type of candy. Furthermore, the candy types have different weights (though some may weigh the same), and in order to simplify pricing matters, the ACM wants all candy boxes to have the same total weight.<p>With these restrictions, the ACM will only be able to make a limited number of boxes. For instance, if there are three types of candy, weighing 5, 5 and 10 grams respectively, 4 different boxes can be made with total weight 10 grams (using either two of type 1, or two of type 2, or one of type 3, or one each of types 1 and 2). The ACM would like to be able to make at least one box for everyone in the cosmos. So, given queries in the form of the number of people P in the cosmos, your job is to find the smallest possible total weight w such that P different boxes containing exactly w grams of candies can be made.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of several data sets (at most 20). Each data set consists of four lines.  The first line contains an integer 1 &le; n &le; 5, the number of candy types. The next line contains n integers w<sub>1</sub>, ..., w<sub>n</sub>, where 1 &le; w<sub>i</sub> &le; 10 is the weight (in grams) of the i:th candy type. The third line contains an integer 1 &le; q &le; 10, the number of queries. The last line of a data set contains q integers P<sub>1</sub>, ..., P<sub>q</sub>, where 1 &le; P<sub>j</sub> &le; 10<sup>15</sup> is the j:th query. Input is terminated by an incomplete data set where n = 0, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For the i:th data set, write a line <tt>"Set i"</tt>, followed by q lines giving, for each query P<sub>j</sub>, the minimal possible positive weight W<sub>j</sub> (in grams) of a candy box. If there is no weight W<sub>j</sub> such that at least P<sub>j</sub> candy boxes can be made, print <tt>"no candy for you"</tt> for that query. You may assume that W<sub>j</sub>, if it exists, will be at most 100 &middot; P<sub>j</sub>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
3
5 5 10
1
4
4
3 1 4 2
2
142 700
1
10
1
100
0
</pre><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
Set 1
10
Set 2
23
42
Set 3
no candy for you
</pre><p>
______________________________________________________
3409||||||false||||||
<!--DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>B - Declaration of Content</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="problem.css">
</head>
<body>

<h1>Problem B - Declaration of Content</h1>
<h3>Time limit: 4 seconds</h3--><p><center><img align="right" src="http://livearchive.onlinejudge.org/external/34/p3409.jpg></center>Most food you can buy at your local grocery store has a declaration of content. The declaration of content lists the ingredients of the product. It does not necessarily tell you the exact amount of every ingredient, only the ordering of the ingredients, from most common to least common. For some ingredients, an exact percentage might be given, either required by law or because the producer wants you to know how much of the fine expensive ingredients they have used. Given a set of different products and their respective declarations of content you should determine which contain the most or the least of some given ingredients. For simplicity, we assume in this problem that the percentage of each ingredient always is an integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input consists of several test cases. Each test case consists of two parts.<p>The first part of a test case begins with an integer P, 1 &le; P &le; 10, the number of different products in this test case, on a line of its own. Then follows the description of the P products. Each product description consists of a line giving the name of the product, followed by a line containing an integer n, 1 &le; n &le; 100, giving the number of ingredients in this product. Then follow n lines, the i:th of which contains the name of the i:th most common ingredient of the product. In case of ties, the ingredients will be listed in arbitrary order. Optionally, every ingredient name can be followed by space, an integer p, 0 &le; p &le; 100 and a percentage sign. If this is present, it specifies the exact amount of this ingredient in the product. Otherwise, because all percentages in this problem are integers, the ingredient makes up at least one percent of the total product.<p>The second part of a test case begins with an integer Q, 1 &le; Q &le; 100, the number of queries. Then follow Q lines, each containing a query. A query is of the form <tt>"least X"</tt>, or <tt>"most X"</tt>, where X is the name of an ingredient. In the <tt>"most X"</tt> case, the ingredient X is guaranteed to be present in at least one of the products.<p>A name of a product or an ingredient is a string of alphabetic characters (A-Z and a-z), digits (0-9) and underscore. Case is significant. No name will be longer than 30 characters. You may assume that each declaration of content is valid.<p>The last test case to be processed is followed by a line consisting of the integer 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>The output consists of one line for every query in the input data. For each query, output the name of the product containing the most or the least of ingredient X, as indicated by the query. If there are several possible such products, output all of them, in the same order as the products were presented in the test case input data. The product names should be separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
3
Product_1
3
A
B
C
Product_2
3
C
B
A
Product_3
2
B
C 35%
4
most A
most B
most C
least D
0
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
Product_1
Product_3
Product_2 Product_3
Product_1 Product_2 Product_3
</pre><p>
______________________________________________________
3410||||||false||||||
<!--DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>C - Laserbox</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="problem.css">
</head>
<body>

<h1>Problem C - Laserbox</h1>
<h3>Time limit: 1 second</h3--><p><center><img align="right" src="http://livearchive.onlinejudge.org/external/34/p3410.jpg></center>A laserbox is a game involving some optical equipment. The game board is a square n&times;n grid. On each grid point, a gadget called a right-turner can be placed and several such gadgets are included. Finally, there is a ruby laser, and if the laser is mounted at the bottom end of a column, the beam will be directed northwards through that column. Analogously, the laser beam may be directed southwards from the top of a column, eastwards from the start of a row or westwards from the end of the row.<p>The game starts with some right-turners being spread out on some grid points and the laser (switched off) being mounted somewhere along the border of the rectangle. The player then tries to deduce where the beam will emerge when the laser is switched on. The effect of a right-turner is to deflect the beam ninety degrees to the right, regardless of from which of the four directions it enters.<p>Your program must do exactly what the player is supposed to do.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>On the first line of the input is a single positive integer, telling the number of test cases to follow. The first line of each test case consists of two integers n r, where 1 &le; n &le; 50 is the size of the board and 1 &le; r &le; 50 the number of right-turners. The following r lines contain the coordinates x y of the right-turners. No two right-turners will have the same coordinates.<p>Finally, a line with two integers indicating the laser position follows. The bottom of column six is denoted by 6 0 and the start of row seven by 0 7. If the zeroes are replaced by n+1, the laser is placed at the top of column six and the end of row seven, respectively.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case, output one line containing the coordinates X Y of the beam as it leaves the board. The same rules as for the laser apply, so X may equal 0 or n+1 or else Y equal 0 or n+1. If the beam gets caught and does not leave the board, the output should be 0 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
2 3
1 1
1 2
2 2
3 1
3 6
1 1
1 3
2 2
2 3
3 1
3 2
2 0
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
2 0
0 2
</pre><p>
______________________________________________________
3411||||||false||||||
<!--DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>D - Bowlstack</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="problem.css">
</head>
<body>

<h1>Problem D - Bowlstack</h1>
<h3>Time limit: 3 seconds</h3--><p>Baking bread is my favourite spare-time pursuit. I have a number of stainless steel mixing bowls with straight sides, a circular bottom and a wider circular top opening. Geometrically, my bowls are truncated circular cones and for this problem, the thickness of the metal may be disregarded.<p>I store these bowls stacked in the natural way, that is with a common vertical axis, and I stack them in an order that minimises the total height of the stack. Finding this minimum is the purpose of your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>On the first line of the input is a positive integer, telling the number of test cases to follow. Each case starts with one line containing an integer n, the number of bowls (2 &le; n &le; 9). The following n lines each contain three positive integers h, r, R, specifying the height, the bottom radius and the top radius of the bowl, and r < R holds true. You may also assume that h, r, R < 1000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case, output one line containing the minimal stack height, truncated to an integer (note: truncated, not rounded).<center><img class="figure" src="http://livearchive.onlinejudge.org/external/34/p3411.png></center><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
2
60 20 30
40 10 50
3
50 30 80
35 25 70
40 10 90
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
70
55
</pre><p>
______________________________________________________
3412||||||false||||||
<!--DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>E - Pesky Heroes</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="problem.css">
</head>
<body>

<h1>Problem E - Pesky Heroes</h1>
<h3>Time limit: 4 seconds</h3--><p><center><img align="right" src="http://livearchive.onlinejudge.org/external/34/p3412.jpg></center>"Pesky Heroes!" &mdash; the evil mage stormed into his throneroom &mdash; "They don't have <itany</i> respect for us evil masterminds anymore. They've gone and invaded my cave again, and while the traps were down for maintenance! And they've set up their camp in the cave! The nerve!"<p>"But, milord, then surely they will be doomed when the traps have been re-activated," were the last words of a servant, uttered milliseconds before he... well, you get the picture. "Not necessarily, I may have to teleport my trained orcs to seal their fate. You there, figure out where I should send them. Now!"<p>Inspired by the fate of the last servant to speak, you hurry off with a map of the cave. The map is a complete map of the cave, with the positions of all traps marked, and you see that the cave has a single entrance. On the map, there are n strategic <i>key points</i> which have been marked with the numbers 1 to n. All passages in the cave connect two key points. All traps have been placed at key points, and all dead ends are key points. Your mathematically inclined mind quickly discovers that for every key point there are at most three passages connecting to it.<p>Your master can open a magic gateway from the throneroom to any passage (but not to key points), and the trained orcs will be sent in. Despite their long training, the orcs are still not too bright. When they've gone through the gateway, they will begin walking away from the light coming from the entrance (there will always be a unique path from each point in the cave to the entrance). In each intersection, they will normally always choose the left path, and when they come back to the gateway, they will come back to the throneroom, ready to be teleported to a new location, if necessary.<p>These orcs have been trained, so they're smarter than the average bear, erm, orc. You can give them a number t when they walk in, and the t:th time they are at an intersection, they will turn right instead of left. Despite their eight years of training, they can still only be trusted to remember one number until they return.<p>"Oh, and one last thing. I saw the heroes in my crystal ball, they've set up camp in a dead-end.", the mage shouts after you.<p>To maximize your chances of survival, you want your master to have to work as little as possible (i.e. to open as few gateways as possible), but you must have the orcs search every dead-end in the cave which can reach the entrance without passing any traps. The orcs are very dear to your master, so you better make sure they don't walk into any traps!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input will consist of several data sets. Each set will start with a line consisting of two numbers, n, m where 2 &le; n &le; 50000 is the number of key points on the map and 0 &le; m &le; 500 is the number of traps.<p>The next n lines will consist of 2 to 4 space-separated integers. Line i contains an integer n<sub>i</sub>, 1 &le; n<sub>i</sub> &le; 3, the number of passages connecting to key point i, followed by a list of the n<sub>i</sub> key points that the passages lead to, in clockwise order. The next m lines consist of single integers, the key points at which there are traps. Key points are labelled 1, ..., n and key point 1 is the (implicit) entrance to the outside world. Key point 1 is guaranteed to always have exactly one passage.<p>The last case will be followed by a line with m = n = 0, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each case, output the minimum number of gateways required, on a line by itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
5 1
1 2
3 1 4 3
1 2
2 2 5
1 4
3
4 1
1 2
2 1 3
2 2 4
1 3
4
0 0
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
1
0
</pre><p>
______________________________________________________
3413||||||false||||||
<!--DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>F - Reduced ID Numbers</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="problem.css">
</head>
<body>

<h1>Problem F - Reduced ID Numbers</h1>
<h3>Time limit: 3 seconds</h3--><p>T. Chur teaches various groups of students at university U. Every U-student has a unique Student Identification Number (SIN). A SIN s is an integer in the range 0 &le; s &le; MaxSIN with MaxSIN = 10<sup>6</sup>-1. T. Chur finds this range of SINs too large for identification within her groups. For each group, she wants to find the smallest positive integer m, such that within the group all SINs reduced modulo m are unique.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>On the first line of the input is a single positive integer N, telling the number of test cases (groups) to follow. Each case starts with one line containing the integer G (1 &le; G &le; 300): the number of students in the group. The following G lines each contain one SIN. The SINs within a group are distinct, though not necessarily sorted.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case, output one line containing the smallest modulus m, such that all SINs reduced modulo m are distinct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
1
124866
3
124866
111111
987651
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
1
8
</pre><p>
______________________________________________________
3414||||||false||||||
<!--DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>G - Tantrix</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="problem.css">
</head>
<body>

<h1>Problem G - Tantrix</h1>
<h3>Time limit: 4 seconds</h3--><p><center><img align="right" src="http://livearchive.onlinejudge.org/external/34/p3414a.png></center>Tantrix is a two player game played with 56 hexagonal tiles. Each tile contains three <i>links</i> in different colours. Both players have five tiles in hand and take turns in placing them on the playing field. The figure to the right shows how the game could have progressed after nine played tiles.<p>There are four different link colours: red, green, yellow and blue. No two tiles are identical, and no tile is rotation symmetric. A tile will be described in the input as a six letter string, specifying the link colours in clockwise direction. The uppercase letters <tt>'R'</tt>, <tt>'G'</tt>, <tt>'Y'</tt> and <tt>'B'</tt> will be used for red, green, yellow and blue, respectively.<p>In this problem, a move is defined as placing one of the tiles in hand somewhere on the playing field, subject to these rules:<ul><li>A tile must always be placed next to tiles already played. <li>The links in all touching tiles must match colour. <li>An empty space which is surrounded by three tiles is called a <i>forced space</i>. If the player can place one of his tiles in a forced space, he must do so. If there are several forced spaces, and several ways to place a tile in a forced space, he may select any of those. <li>It's not allowed to place a tile so that a forced space is created containing three links of the same colour (since no tile could ever be placed there). <li>The two sides along a forced space are called <i>controlled sides</i>. It's not allowed to place a tile along a controlled side.</ul><p><center><img align="right" src="http://livearchive.onlinejudge.org/external/34/p3414a.png></center>If there are one or more forced spaces and the player can't place any of his tiles in hand in those spaces, he will have to play any other legal move. Note that a player may not be allowed to place a tile in a forced space due to rule 4.<p>The figure on the right illustrates these rules. There are three forced spaces. The interposed tile may not be placed in the lower left forced space, as that would create a new forced space with three red links. The dark gray spaces lie on controlled sides created by the forced spaces; no tiles may be placed there. If the player to move can't place a tile in any of the three forced spaces, he must place a tile in any of the white spaces.<p>Your task is to count the number of legal moves the player to move has, given the position and orientation of already played tiles and the tiles in hand for the player to move. If a tile can be placed at several locations, or in several orientations, each such combination is counted as a distinct move.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p><center><img align="right" src="http://livearchive.onlinejudge.org/external/34/p3414a.png></center>The first line in the input will contain the number of cases (at most 50).<p>Each case begins with a single line containing an integer n (1 &le; n &le; 20), the number of tiles that have already been played. Then follow n lines containing the coordinates and description of these tiles. The first character in the tile description belongs to the link facing up; the remaining colours follow as per usual in clockwise direction. Then follows a line with the description of the five tiles in hand, the tile descriptions being separated with a single space.<p>The mapping between the spaces and the coordinates is shown in the figure below (note that the playing field is infinite and not restricted to these coordinates). All tiles in the input will be valid and distinct. The layout will represent a position that could have arisen from a legal game. One of the played tiles will have coordinates 0,0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case, output a single line containing an integer: the number of legal moves.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
6
0 0 BRYRBY
1 0 GRGBRB
-1 1 GGYBYB
0 1 YYBBGG
-2 2 YYBGBG
-3 3 BYGYGB
BBRRGG GBYBYG RBRBGG GYBGBY GRBBRG
4
0 0 BYYGBG
-1 1 GRGBBR
1 0 YRBRYB
2 0 YGGRRY
RBBRYY GBGYBY YBBRYR YBYBRR RBBRGG
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
46
2
</pre><p><b>(Tantrix is copyrighted by Tantrix Games Ltd)</b><p>
______________________________________________________
3415||||||false||||||
<!--DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>H - Guardian of Decency</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="problem.css">
</head>
<body>

<h1>Problem H - Guardian of Decency</h1>
<h3>Time limit: 15 seconds</h3--><p>Frank N. Stein is a very conservative high-school teacher. He wants to take some of his students on an excursion, but he is afraid that some of them might become couples. While you can never exclude this possibility, he has made some rules that he thinks indicates a low probability two persons will become a couple:<ul><li>Their height differs by more than 40 cm. <li>They are of the same sex. <li>Their preferred music style is different. <li>Their favourite sport is the same (they are likely to be fans of different teams and that would result in fighting).</ul><p>So, for <i>any two</i> persons that he brings on the excursion, they must satisfy <i>at least one</i> of the requirements above. Help him find the maximum number of persons he can take, given their vital information.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The first line of the input consists of an integer T &le; 100 giving the number of test cases. The first line of each test case consists of an integer N &le; 500 giving the number of pupils. Next there will be one line for each pupil consisting of four space-separated data items:<ul><li>an integer h giving the height in cm; <li>a character <tt>'F'</tt> for female or <tt>'M'</tt> for male; <li>a string describing the preferred music style; <li>a string with the name of the favourite sport.</ul><p>No string in the input will contain more than 100 characters, nor will any string contain any whitespace.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each test case in the input there should be one line with an integer giving the maximum number of eligible pupils.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
4
35 M classicism programming
0 M baroque skiing
43 M baroque chess
30 F baroque soccer
8
27 M romance programming
194 F baroque programming
67 M baroque ping-pong
51 M classicism programming
80 M classicism Paintball
35 M baroque ping-pong
39 F romance ping-pong
110 M romance Paintball
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
3
7
</pre><p>
______________________________________________________
3416||||||false||||||
<!--DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>I - Up the Stairs</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="problem.css">
</head>
<body>

<h1>Problem I - Up the Stairs</h1>
<h3>Time limit: 1 second</h3--><p><center><img align="right" src="http://livearchive.onlinejudge.org/external/34/p3416.jpg></center>John is moving to the penthouse of a tall sky-scraper. He packed all his stuff in boxes and drove them to the entrance of the building on the ground floor. Unfortunately the elevator is out of order, so the boxes have to be moved up the stairs.<p>Luckily John has a lot of friends that want to help carrying his boxes up. They all walk the stairway at the same speed of 1 floor per minute, regardless of whether they carry a box or not. The stairway however is so narrow that two persons can't pass each other on it. Therefore they deciced to do the following: someone with a box in his hands is always moving up and someone empty-handed is always moving down. When two persons meet each other somewhere on the stairway, the lower one (with a box) hands it over to the higher one (without a box). (And then the lower one walks down again and the higher one walks up.) The box exchange is instantaneous. When someone is back on the ground floor, he picks up a box and starts walking up. When someone is at the penthouse, he drops the box and walks down again.<p>After a while the persons are scattered across the stairway, some of them with boxes in their hands and some without. There are still a number of boxes on the ground floor and John is wondering how much more time it will take before all the boxes are up. Help him to find out!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>One line with a positive number: the number of test cases. Then for each test case:<ul><li>One line with three numbers N, F, B with 1 &le; N,F &le; 1000 and 1 &le; B &le; 1000000: the number of persons, the number of floors (0=ground floor, F=penthouse) and the number of boxes that are still on the ground floor. <li>N lines with two numbers f<sub>i</sub> and b<sub>i</sub> with 0 &le; f<sub>i</sub> &le; F and b<sub>i</sub> = 0 or b<sub>i</sub> = 1: the floors where the persons are initially and whether or not they have a box in their hands (1=box, 0=no box).</ul><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>One line with the amount of time (in minutes) it will take to get all the remaining boxes to the penthouse.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><pre>
2
3 10 5
0 0
0 0
0 0
2 5 1
2 1
3 0
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><pre>
30
8
</pre><p>
______________________________________________________
3417||||||false||||||
<P>The display of the percentage of games won for various computer-based games is frequently reported as an integer, with any fractional part truncated. For example, if you had won 7 out of 11 games, the winning percentage would be reported as 63 percent, even though the actual percentage is closer to 64 percent (63.6363... percent).<P>Suppose you are told the winning percentage (as described above, with the fractional part truncated). You are to find the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> smallest numbers of games played and the corresponding number of those that you won that will yield the reported winning percentage.<P>For example, with a winning percentage of 63 percent, the first 3 pairs (Won, Played) would be (7, 11), (12, 19), and (14, 22).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. The input for each case will consist of two integers. The first of these, <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, is the percentage of games won - as displayed by the game. This will obviously be no larger than 100. The second integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, is the number of pairs (Won, Played) you are to determine.<P>Input for the last case will be followed by a pair of zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (they start with 1 and increase sequentially) and the values of <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> from the input. Then, on separate additional lines, display the pairs (Won, Played) that will yield the specified integer percentage. The first such pair will have the smallest value of <EM>Played</EM> that is possible, and the entire set of pairs will be displayed in ascending order on the number of games played. Your output should resemble that shown in the sample below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 5 
50 4 
75 5 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: p = 0, n = 5 
    0 games out of 1 
    0 games out of 2 
    0 games out of 3 
    0 games out of 4 
    0 games out of 5 
Case 2: p = 50, n = 4 
    1 games out of 2 
    2 games out of 4 
    3 games out of 6 
    4 games out of 8 
Case 3: p = 75, n = 5 
    3 games out of 4 
    6 games out of 8 
    9 games out of 12 
    12 games out of 16 
    15 games out of 20
</PRE><P><P><P><BR><B>Clarifications:</B><P>Integers in this problem will comfortably fit in 32 bits.<P>In the output for all cases (except when <SPAN CLASS="MATH"><I>P</I> = 0</SPAN> <tex2html_verbatim_mark>), each line of the output must represent a different number of games won. Thus output of the form<P><PRE>
7 games out of XXX 
7 games out of YYY
</PRE>will NOT BE CORRECT.<P>Another way of stating this would be to replace the last sentence of the second paragraph as follows (underlined words have changed): ``You are to find the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> smallest numbers of games <SPAN CLASS="textbf">won</SPAN> and the corresponding number of <SPAN CLASS="textbf">games</SPAN> that you <SPAN CLASS="textbf">played</SPAN> that will yield the reported winning percentage."<P>
______________________________________________________
3418||||||false||||||
<P>A common pastime for poker players at a poker table is to shuffle stacks of chips. Shuffling chips is performed by starting with two stacks of poker chips, <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN>, each stack containing <SPAN CLASS="MATH"><I>C</I></SPAN> chips. Each stack may contain chips of several different colors.<P>The actual shuffle operation is performed by interleaving a chip from <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> with a chip from <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN> as shown below for <SPAN CLASS="MATH"><I>C</I> = 5</SPAN>:<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="805" HEIGHT="320" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3418img1.png ALT="\epsfbox{p3418.eps}"></DIV><P>The single resultant stack, <SPAN CLASS="MATH"><I>S</I><SUB>12</SUB></SPAN>, contains <SPAN CLASS="MATH">2 <TT>*</TT> <I>C</I></SPAN> chips. The bottommost chip of <SPAN CLASS="MATH"><I>S</I><SUB>12</SUB></SPAN> is the bottommost chip from <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN>. On top of that chip, is the bottommost chip from <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN>. The interleaving process continues taking the 2-nd chip from the bottom of <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN> and placing that on <SPAN CLASS="MATH"><I>S</I><SUB>12</SUB></SPAN>, followed by the 2-nd chip from the bottom of <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> and so on until the topmost chip from <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> is placed on top of <SPAN CLASS="MATH"><I>S</I><SUB>12</SUB></SPAN>.<P>After the shuffle operation, <SPAN CLASS="MATH"><I>S</I><SUB>12</SUB></SPAN> is split into 2 new stacks by taking the bottommost <SPAN CLASS="MATH"><I>C</I></SPAN> chips from <SPAN CLASS="MATH"><I>S</I><SUB>12</SUB></SPAN> to form a new <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> and the topmost <SPAN CLASS="MATH"><I>C</I></SPAN> chips from <SPAN CLASS="MATH"><I>S</I><SUB>12</SUB></SPAN> to form a new <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN>. The shuffle operation may then be repeated to form a new <SPAN CLASS="MATH"><I>S</I><SUB>12</SUB></SPAN>.<P>For this problem, you will write a program to determine if a particular resultant stack <SPAN CLASS="MATH"><I>S</I><SUB>12</SUB></SPAN> can be formed by shuffling two stacks some number of times.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3418img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3418img1.png ALT="$ \le$">1000)</SPAN> which is the number of datasets that follow.<P>Each dataset consists of four lines of input. The first line of a dataset specifies an integer <SPAN CLASS="MATH"><I>C</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3418img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3418img1.png ALT="$ \le$">100)</SPAN> which is the number of chips in each initial stack (<SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN>). The second line of each dataset specifies the colors of each of the <SPAN CLASS="MATH"><I>C</I></SPAN> chips in stack <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN>, starting with the bottommost chip. The third line of each dataset specifies the colors of each of the <SPAN CLASS="MATH"><I>C</I></SPAN> chips in stack <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN> starting with the bottommost chip. Colors are expressed as a single uppercase letter (<TT>A</TT> through <TT>H</TT>). There are no blanks or separators between the chip colors. The fourth line of each dataset contains <SPAN CLASS="MATH">2 <TT>*</TT> <I>C</I></SPAN> uppercase letters, (<TT>A</TT> through <TT>H</TT>), representing the colors of the desired result of the shuffling of <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN> zero or more times. The bottommost chip's color is specified first.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output for each dataset consists of a single line that displays the dataset number (1 though <SPAN CLASS="MATH"><I>N</I></SPAN>), a space, and an integer value which is the <SPAN CLASS="textit">minimum</SPAN> number of shuffle operations required to get the desired resultant stack. If the desired result can not be reached using the input for the dataset, display the value negative 1 (<TT>-1</TT>) for the number of shuffle operations.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4
AHAH
HAHA
HHAAAAHH
3
CDE
CDE
EEDDCC
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2
2 -1
</PRE><P>
______________________________________________________
3419||||||false||||||
<P>A fully-parenthesized expression has, as you might expect, parentheses surrounding every pair of operands of a binary operator. Consider a language where all binary operators have the same precedence so that parentheses are required to guarantee a particular order of evaluation. For example, an expression such as<P><P><BR><TT>1+2-3*4-5</TT><P><P><BR>can be parenthesized in 14 ways:<P><PRE>
((((1+2)-3)*4)-5)                 ((1+2)-((3*4)-5))
(((1+(2-3))*4)-5)                 ((1+2)-(3*(4-5)))
(((1+2)-(3*4))-5)                 (1+(((2-3)*4)-5))
(((1+2)-3)*(4-5))                 (1+((2-(3*4))-5))
((1+((2-3)*4))-5)                 (1+((2-3)*(4-5)))
((1+(2-(3*4)))-5)                 (1+(2-((3*4)-5)))
((1+(2-3))*(4-5))                 (1+(2-(3*(4-5))))
</PRE><P>Assume that each expression utilizes only integer constants consisting of one or more decimal digits, and that each binary operator is represented by one of the characters `<TT>+</TT>' , `<TT>-</TT>' , `<TT>*</TT>' or `<TT>/</TT>' (without the quotes, of course). Write a program that will read expressions, each contained on one input line and then generate all possible fully-parenthesized expressions for each one. No duplicates are allowed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. The input for each case will be an unparenthesized expression of the form described above, immediately followed by an end of line character. That is, each input line will contain an integer constant, followed by zero or more occurrences of an operator and an integer constant, followed by the end of line character. Input for the last case will be followed by a line containing only the end of line character.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, first display the case number (they start with 1 and increase sequentially) and the number of unique fully parenthesized expressions, both on the same line. Follow this line with additional lines containing the parenthesized expressions, one per line, each indented by four spaces from the beginning of the line. The expressions may appear in any order. No output expression will contain more than 128 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1+2*3 
1/2/3/4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2 expressions 
    ((1+2)*3) 
    (1+(2*3)) 
Case 2: 5 expressions 
    (((1/2)/3)/4) 
    ((1/2)/(3/4)) 
    ((1/(2/3))/4) 
    (1/((2/3)/4)) 
    (1/(2/(3/4)))
</PRE><P>
______________________________________________________
3420||||||false||||||
<P>A long time ago - before aluminum cans and plastic bottles, Coke used to actually come in glass bottles. A case of Coke consisted of a box or carton that had 24 bottles, arranged as 4 rows of 6 bottles each. Unfortunately in this box one bottle is missing:<P><DIV ALIGN="CENTER"><IMG WIDTH="274" HEIGHT="157" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3420a.gif ALT="\epsfbox{p3420a.eps}"> <tex2html_verbatim_mark></DIV><P>In this instance the missing bottle comes from row 3 column 5; the rows are numbered from 1 to 4, and the columns are numbered from 1 to 6.<P>We will play a game based on this diagram. You can ``jump over" a bottle, either horizontally or vertically, and remove the bottle you have jumped over. That is, you can move a bottle over another bottle to an empty space in the box, and then remove the bottle over which you jumped. For example, I can take the bottle in row 3 column 3, jump over the one in row 3 column 4, and land in row 3, column 5. Since I can do this, I can remove the bottle from row 3 column 4:<P><DIV ALIGN="CENTER"><IMG WIDTH="275" HEIGHT="157" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3420a.gif ALT="\epsfbox{p3420b.eps}"> <tex2html_verbatim_mark></DIV><P>Now the next move from here might be to jump from row 1 column 3, over row 2 column 3, and into row 3 column 3, removing the bottle in row 2 column 3:<P><DIV ALIGN="CENTER"><IMG WIDTH="275" HEIGHT="155" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3420a.gif ALT="\epsfbox{p3420c.eps}"> <tex2html_verbatim_mark></DIV><P>Possible moves from here include:<P><P><BR>[3,2] to [3,4] removing [3,3] (moving right from [3,2])<P>[4,3] to [2,3] removing [3,3] (moving up from [4,3])<P>[3,6] to [3,4] removing [3,5] (moving left from [3,6])<P>etc.<P><P><BR>Can you eventually get to a point where there is only one bottle left? The very last move might be something like this, where we can move from row 2 column 5 over row 2 column 4, and into row 2 column 3 (left from [2,5]):<P><DIV ALIGN="CENTER"><IMG WIDTH="274" HEIGHT="151" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3420a.gif ALT="\epsfbox{p3420d.eps}"> <tex2html_verbatim_mark></DIV><P>In this problem you are given the description of a hypothetical Coke case containing fewer than 10 rows and 10 columns, the position (row and column) of a missing bottle, and the maximum number of bottles that can be left. Your job is to determine a sequence of ``jumps" that will achieve this task. The valid moves are to jump up and over, down and over, left and over, or right and over. Diagonal jumps are not allowed; you may not drink the Cokes to create empty spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. For each case the input will contain five integers. The first two integers specify the number of rows and columns of the Coke case; neither of these will be larger than 9 or smaller than 1. The second two integers specify the row and column where a bottle is initially missing. The last integer specifies the maximum number of bottles that may be left. The last input case will be followed by five zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, first display the case number (they start with 1 and increase sequentially). If there is no solution for the case, then display the message ``<TT>No solution</TT>". Otherwise, starting on the next line, display the sequence of ``jumps" that will leave just the specified number of bottles in the case. Each jump is specified in the form <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>, <I>dir</I>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> specify the row and column number of the bottle that jumps (NOT the jumped bottle), and <SPAN CLASS="MATH"><I>dir</I></SPAN> <tex2html_verbatim_mark> is the direction that the bottle moved (<TT>U</TT>, <TT>D</TT>, <TT>L</TT>, or <TT>R</TT> for up, down, left, or right). Display these in the style shown in the sample output below, with as many jumps per line as possible, but with no more than 80 characters per output line, including four blank characters of indentation at the beginning of each line. Separate the output for consecutive cases with a blank line. If there are multiple valid jump sequences, any of them is acceptable.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 6 1 1 1
1 3 1 1 1
3 3 2 2 1
3 3 1 1 4
0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
    (3,1,U), (3,3,L), (4,1,U), (4,3,L), (4,5,L), (3,5,L), (1,5,D), (3,6,L), 
    (3,4,L), (2,3,R), (1,6,D), (4,6,U), (2,6,L), (1,4,D), (1,1,D), (4,1,U), 
    (1,3,L), (1,1,D), (3,1,R), (4,3,U), (2,2,R), (3,4,U) 

Case 2: 
    (1,3,L) 

Case 3: No solution 

Case 4: 
    (3,1,U), (3,3,L), (1,3,D), (1,2,D)
</PRE><P>
______________________________________________________
3421||||||false||||||
<P>
The game of Blackjack (as defined here) is played with a deck containing no more than 500 cards, on each of which is printed an integer in the range 1 to 10. In each game there are two players: you and the house. At the beginning of each game the first card is dealt to you, the next is dealt to the house, the next one to you, and finally another is dealt to the house. 

<P>
The goal of the game is to obtain a set of cards with a total larger than your opponent's total, without exceeding 21. A card containing the integer ``1" can be counted as either 1 or 11, as desired by the player. This rule applies to you and to the house. After the first four cards are dealt, you may draw as many additional cards from the deck as you wish, but you must stop if your total exceeds 21. Then the house is required to draw cards from the deck until its total is 17 or larger (counting a 1 as 11, if possible, without exceeding 21). 

<P>
When both you and the house have finished taking cards, the totals of the cards you each hold are compared to determine the outcome. If <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark> is your total and <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> is the house total, here are the six possible outcomes: 

<P>

<P>
<BR>
<TABLE COLS=2>
<COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN CLASS="MATH"><I>Y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3421img1.png
 ALT="$ \le$">21</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>H</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3421img1.png
 ALT="$ \le$">21</SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>Y</I> &gt; <I>H</I></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>               you win  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>Y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3421img1.png
 ALT="$ \le$">21</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>H</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3421img1.png
 ALT="$ \le$">21</SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>Y</I> &gt; <I>H</I></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>              house wins </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
<SPAN CLASS="MATH"><I>Y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3421img1.png
 ALT="$ \le$">21</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>H</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3421img1.png
 ALT="$ \le$">21</SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>Y</I> &gt; <I>H</I></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>             tie  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>Y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3421img1.png
 ALT="$ \le$">21</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>H</I> &gt; 21</SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>            you win </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
<SPAN CLASS="MATH"><I>Y</I> &gt; 21</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>H</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3421img1.png
 ALT="$ \le$">21</SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>           house wins </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
<SPAN CLASS="MATH"><I>Y</I> &gt; 21</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>H</I> &gt; 21</SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>          tie </TD></TR>
</TABLE>

<P>

<P>
<BR>
In this problem you are told the number and order of the cards in the deck, and are to determine the manner in which you should play (that is, how many cards you should draw in each game) in order to obtain the most favorable outcome (for you). A win is better than a tie, and a tie is better than a loss. Play as many games as possible. If necessary, reuse the deck (in exactly the same order as originally input) from its beginning to complete the last game. Draw the smallest number of cards required to yield the best possible outcome for each game (for you). 

<P>
Let's consider an example. Suppose the deck contains the cards 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10, in that order. At the beginning of the first game you would have 1 and 3 (a total of 14, counting the 1 as 11) and the house would have 2 and 4. If you choose to draw no more cards, the house then would draw 5 and 6, yielding a total of 17, and the house would win. If you had taken one more card, you'd then have 1, 3 and 5 (a total of 19, again counting the 1 as 11); the house would then draw 6 and 7, yielding a total of 19 - a tie. If you took 2 additional cards, you'd then have 1, 3, 5, and 6 (a total of 15, counting the 1 as a 1), and house would draw 7 and 8 for a total of 21 - you would lose. Finally, if you try taking 3 additional cards, you would have 1, 3, 5, 6, and 7, for a total of 22. The house would draw 8 and 9, for a total of 23. This would also be a tie, since both you and the house exceeded 21. The first tie (with a total of 19) required the smallest number of cards to yield the best possible outcome, so you draw only one card in this game. 

<P>
Since the deck has not yet been exhausted, we can play another game. The first card not used in the previous game was 8, so you are dealt 8 and 10. The house is dealt 9 and 1 (since we start reusing the deck to complete the game). You have 18, and the house has 20 (counting the 1 as 11), so the house would win. If you take an additional card, you'd have 8, 10, and 2 giving a total of 20. The house has a total of 20, so this would be a tie. If you take two additional cards you'd have 8, 10, 2 and 3, for a total of 23. The house, with 20, would still win. The best outcome for you is a tie.

<P>
Since the deck has been completely used, no more games can be played; the best outcome is 0 wins, 2 ties, and 0 losses (for you). 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will contain multiple cases. Each case consists of an integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le N \le 500)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3421img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3421img1.png
 ALT="$ \le$">500)</SPAN>
<tex2html_verbatim_mark> that specifies the number of cards in the deck, followed by the deck - <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> additional integers, each in the range 1 to 10. Input for the last case will be followed with an integer <TT>0</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, first display the case number (they start with 1 and increase sequentially). Then display the number of games you won, the number of ties, and the number of games you lost, with appropriate labels for the values.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 1 2 3 4 5 6 7 8 9 10 
       13 8 4 9 1 4 9 2 
10 7 3 1 4 4 
20 4 6 3 7 10 1 5 5 6 10 1 8 
         4 4 10 9 2 2 1 5         0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1: 0 wins, 0 losses, 2 ties 
Case 2: 1 win, 0 losses, 1 tie 
Case 3: 3 wins, 1 loss, 0 ties
</PRE> 

<P>

______________________________________________________
3422||||||false||||||
<P>A contour map consists of some number of regions, frequently corresponding to geographic areas. One use for such maps is to show elevations and surface configuration. These usually have various lines corresponding to equal elevations. You may also see contour maps used in weather, to illustrate regions of equal barometric pressure or temperature. Even J. B. Johnston, back in 1971, used contour maps to describe the execution of block-structured programming languages! To the right is a contour map showing the elevations in a particular a geographic region.<P><DIV ALIGN="CENTER"><IMG WIDTH="431" HEIGHT="342" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3422a.gif ALT="\epsfbox{p3422a.eps}"> <tex2html_verbatim_mark></DIV><P>The contours we deal with in this problem are simple, and consist of convex polygons with either three or four line segments as edges. On the right, for example, is one of the contour maps with which we'll be concerned. To make things even simpler, edge endpoints (marked with large black dots in the diagram) are specified as a pair of integral values <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark>, with <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> giving the point's Cartesian coordinates. The numbers shown inside each contour in this example are used to identify the contours.<P><DIV ALIGN="CENTER"><IMG WIDTH="460" HEIGHT="312" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3422a.gif ALT="\epsfbox{p3422b.eps}"> <tex2html_verbatim_mark></DIV><P>Assume that you have been given a unique integer ID for each contour and the coordinates of the endpoints of the line segments that form each contour. You are then to produce a hierarchical listing of the contour IDs. For the example just shown, the hierarchical listing will look like this:<P><PRE>
   1 
      2 
         4
      3
</PRE><P>The IDs of the outermost contours (those not enclosed by any other contours) appear in the leftmost column of the hierarchical listing. The ID of a contour immediately enclosed by a outermost contour appears in the second column on a line below the enclosing outermost contour. Similarly, the ID of a contour immediately enclosed by a second-level contour appears in the third column below the line for the enclosing second-level contour. Additional examples appear in the sample input and output shown below. The IDs for several contours at the same hierarchical level and enclosed by the same contour (or no contour at all) should appear in the hierarchical listing in the same order as the contours appear in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There may be multiple input cases. Each case contains the description of one or more contours. Each contour description contains a unique integer ID (in the range 1 to 99) and an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (either 3 or 4) giving the number of points defining the lines bounding the contour, followed by <SPAN CLASS="MATH">2<I>N</I></SPAN> <tex2html_verbatim_mark> integers, each in the range -10000 to +10000, giving the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of those points. The points are given in clockwise order, so every consecutive pair of points corresponds to a boundary line, as does the first and last point specified for each contour. The last contour in each case is followed by an integer <TT>0</TT>. The last input case is also followed by an integer <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case you should display a line that includes the case number (they are numbered sequentially starting with <TT>1</TT>). Follow this with the hierarchical list of the contour ID numbers, one per line. Each of the contours that are not enclosed in any other contours will have their IDs listed right-justified in the first 3-character column. Those contours that are enclosed in exactly one contour will appear in the second (from the left) 3-character column, and so forth. Separate the output for consecutive cases with a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 4 5 20 25 95 195 95 185 5 
2 3 150 55 50 35 30 85 
3 4 170 85 180 20 160 25 155 75 
4 3 60 67 80 55 60 55
0 

1 3 0 0 0 3 4 0 
2 3 1 1 1 2 2 1 
0 

7 4 32 2 32 500 500 500 500 -99 
6 4 1 1 1 1000 20 1000 20 1 
3 4 43 2 43 5 44 4 44 3 
1 4 13 3 13 900  18 902 18 4 
4 4 2 2 2 910 19 920 19 2 
2 4 3 3 3 4 4 4 4 3 
5 4 23 3 23 999 24 998 24 3
0 

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
  1 
     2 
        4 
     3 

Case 2: 
  1 
     2 

Case 3: 
  7 
     3 
  6 
     4 
        1
        2
  5
</PRE><P>
______________________________________________________
3423||||||false||||||
<P>Agnes C. Mulligan is a fanatical bibliophile. She is continually buying new books. She has a shelf where she puts her newest books. When she decides to read one of these books, she removes it from its location on the shelf, leaving a ``hole" equal to the width of the book. When she buys a new book she places it on the left side of the shelf, which may push one or more books already on the shelf toward the right. This action may cause one or more books to fall off the right end of the shelf.<P>Your task is to write a program that simulates the addition of books to, and the removal of books from a shelf with a given width. At the end of the simulation, your program is to identify the books on the shelf. Each book has an unique integer identifier in the range 1 to 1000, and has an integral width (in inches) less than or equal to the width of the shelf. A book falls off the shelf if any part of it extends beyond the right end of the shelf.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases, the number of which is specified by the first integer in the input. Each case begins with an integer that specifies the width of the shelf, in inches; this width will be no smaller than 5 inches. This is followed by a sequence of ``events," each on a separate line. The type of event is specified by the capital letter `<TT>A</TT>' (add a book), `<TT>R</TT>' (remove a book), or `<TT>X</TT>' (end the simulation); this letter appears in the first column of the line. For an `<TT>A</TT>' event the line also contains integers giving the book identifier and its width, in inches. For an `<TT>R</TT>' event the line also contains the integer book identifier. An `<TT>X</TT>' event line contains no additional information.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (they start with 1 and increase sequentially) and the integer identifiers of the books on the shelf, in order from left to right. Separate the output for consecutive cases by a blank line. Your output should resemble that shown in the sample below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
10 
A 6 5 
A 42 3 
A 3 5 
A 16 2 
A 15 1 
R 16 
X 
5 
A 1 1 
A 2 1 
A 3 1 
R 2 
A 4 1 
A 5 1 
R 5 
R 4 
A 6 1 
A 7 4 
X
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
15 
3 

Case 2: 
7 
6
</PRE><P><P><BR><B>Clarifications:</B> Integers in this problem will comfortably fit in 32 bits.<P>
______________________________________________________
3424||||||false||||||
<P>
When scheduling the use of a resource (like a CPU), one measure of the schedule is the average length of time a client has to wait for the resource. That is, after a client indicates they want to use the resource, and for how long they want to use it, how long must they wait? This clearly depends on how many other clients want to use the resource, and when they are allowed to use it. 

<P>
Assume that a particular resource is scheduled in integral units of time (for example, milliseconds), and that once a client is granted the use of the resource, they have complete (unshared) use of the resource for the length of time they requested. A schedule is just the order in which a group of clients are allowed to use the resource. 

<P>
Suppose we know, in advance, the length of time each client wants to use the resource. Your task in this problem is to determine the minimum average time clients must wait before being allowed to use the resource. 

<P>
For example, suppose we have three clients that want to use the resource. One (client A) wants it for 10 units of time. Another (client B) wants the resource for 13 units of time. Client C wants to use the resource for 6 units of time. If we let client A use the resource first, it waits 0 units of time. If we let B use it second (after A), then B waited a total of 10 units of time  exactly the length of time the resource was used by client A. Finally, client C uses the resource after waiting 10 units of time for A to finish and another 13 units of time for B to finish. So C had to wait 23 units of time. The average wait time is (0 + 10 + 23) / 3, or 11 units of time. As it turns out, the best schedule would require an average wait time of only 7 1/3 units of time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will contain multiple cases. The number of cases is specified by the first integer in the input. The input for each case will consist of an unknown number of requests for the use of the resource. Each of these is represented by a positive integer separated from the others by whitespace. The last request in each case is followed by a negative number.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, display the case number (they start with 1 and increase sequentially), the number of requests for the resource, and the minimum average time clients had to wait for the resource. Display this number with three fractional digits. Your output should resemble that shown in the sample below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 10 13 6 -1 54 95 10 57 -1 20 
23 6 7 18 34 17 92 4 75 90 24 94 
47 68 86 46 29 68 77 28 94 82 16 
47 40 44 61 31 55 89 53 95 22 61 -1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 3 requests scheduled. Average wait: 7.333 
Case 2: 4 requests scheduled. Average wait: 48.750 
Case 3: 35 requests scheduled. Average wait: 555.714
</PRE> 

<P>

<P>
<BR>

<B>Clarifications:</B>
Integers in this problem will comfortably fit in 32 bits.

<P>

______________________________________________________
3425||||||false||||||
<P>Suppose you are given the radius for each of three circles that are tangent to each other. Assume a triangle is then drawn with each of its sides is tangent to exactly two of the circles. The figure below illustrates one such possible set of circles and the triangle.<P><DIV ALIGN="CENTER"><IMG WIDTH="288" HEIGHT="154" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3425a.gif ALT="\epsfbox{p3425a.eps}"> <tex2html_verbatim_mark></DIV><P>This triangle can be inscribed with a single circle which is tangent to all three sides, as shown below.<P><DIV ALIGN="CENTER"><IMG WIDTH="288" HEIGHT="155" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3425a.gif ALT="\epsfbox{p3425b.eps}"> <tex2html_verbatim_mark></DIV><P>What is the radius of this inscribed circle?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. For each case the input will contain three positive, non-zero, real numbers less than or equal to 100.0 giving the radii of the three circles. You may assume that these values are such that the construction of the triangle is possible. The last case will be followed by three negative real numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (they start with 1 and increase sequentially), and the radius of the inscribed circle with three fractional digits. Separate the output for consecutive cases with a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1.0 1.0 1.0 
1.0 1.5 2.0 
100.0 100.0 90.0 
-1.0 -1.0 -1.0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: radius = 1.577 

Case 2: radius = 2.283 

Case 3: radius = 152.308

______________________________________________________
3426||||||false||||||
<P>Write a program to help prepare these nutritional labels by computing that percentage from the information on the amount present in one serving and the amount constituting the minimum daily requirement.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of one or more lines, each of the form:<P><P><BR><SPAN CLASS="MATH"><I>A</I>&nbsp;<I>U</I>&nbsp;<I>R</I>&nbsp;<I>V</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is the amount of a vitamin/mineral present in one serving of the food product, <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> is the units in which <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is measured, <TT>R</TT> is the minimum daily requirement for that vitamin/mineral, measured in the same units as <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> is the name of that vitamin/mineral. <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> will be floating point numbers. <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> will be a string of alphabetic characters with no embedded spaces. <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> will be a string of characters, possibly including spaces. <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> will be separated from one another by exactly one space, and <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> is terminated by the end of the input line. End of the input is signaled by a line in which <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is negative.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input data, your program should determine the percentage of the recommended daily requirement being provided for that vitamin/mineral. If it is at least <SPAN CLASS="MATH">1%</SPAN> <tex2html_verbatim_mark>, your program should print a line of the form<P><P><BR><SPAN CLASS="MATH"><I>V</I>&nbsp;<I>A</I>&nbsp;<I>U</I>&nbsp;<I>P</I></SPAN> <tex2html_verbatim_mark><TT>%</TT><P><P><BR>where <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> are the quantities from the input, and <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is the percentage of the minimum daily requirement represented by the amount <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>.<P><SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> should be printed left-justified on the line. <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> should be printed with 1 digit precision, and <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> with zero digits precision. <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> should be separated by one space each.<P>After the last such line, your program should print a line stating<P><PRE>
Provides no significant amount of:
</PRE>followed by a list of the names of all vitamins/minerals which are provided as less than <SPAN CLASS="MATH">1%</SPAN> <tex2html_verbatim_mark> of the minimum daily requirement. These should be printed one name per line, in the order they occurred within the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3500.0 iu 5000.0 Vitamin A 
60.0 mg 60.0 Vitamin C 
0.15 g 25.0 Fiber 
109. mg 990. Phosphorus 
0.0 mg 1000.0 Calcium 
25.0 mg 20.0 Niacin 
-1.0 x 0.0 x
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Vitamin A 3500.0 iu 70% 
Vitamin C 60.0 mg 100% 
Phosphorus 109.0 mg 11% 
Niacin 25.0 mg 125% 
Provides no significant amount of: 
Fiber 
Calcium
</PRE><P>
______________________________________________________
3427||||||false||||||
<P>A domino is a <SPAN CLASS="MATH">2 <TT>x</TT> 1</SPAN> <tex2html_verbatim_mark> oblong comprising two squares, each square marked with a set of ``pips" denoting a non-negative integer. A blank square denotes the number 0 (zero).<P>In a standard ``double-<SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>" set of dominoes, each pair of integers in the range <SPAN CLASS="MATH">0...<I>K</I></SPAN> <tex2html_verbatim_mark> occurs on one domino. In other words, the dominoes are numbered:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">(0, 0),(0, 1),...(0, <I>K</I>),(1, 1),...(1, <I>K</I>),(2, 2),...,(<I>K</I>, <I>K</I>)</DIV><P><tex2html_verbatim_mark></P><P>Given a set of dominoes and a rectangular area of width <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> and height <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>, write a program to pack that entire set of dominoes into that area subject to the limitation that, whenever two dominoes touch one another either horizontally or vertically, the numbers on the touching squares must be identical. Note that the area might not be completely covered, and, space permitting, some dominoes might not touch any others.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of one or more lines, each containing 3 positive integers. The first integer, <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, indicates the size of the set of dominoes - a "double-<SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> set" as described above. The remaining integers, <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>, indicate the size of the area in which the dominoes should be placed, measured in units the same size as one of the constituent squares of a domino. The end of input will be signaled by a non-positive <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input, print one line containing the values <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>, as defined above, followed either by a line with the string ``<TT>No packing is possible</TT>" or by a report consisting of <SPAN CLASS="MATH"><IMG WIDTH="88" HEIGHT="45" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3427img1.png ALT="$ {\frac{{(K +1)(K +2)}}{{2}}}$"></SPAN> <tex2html_verbatim_mark> lines, each line describing one domino, ordered as described above in the definition of a ``double<SPAN CLASS="MATH"><SUB>K</SUB></SPAN> <tex2html_verbatim_mark>" set.<P>Each line of that report will contain 6 integers<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>d</I><SUB>1</SUB>&nbsp;<I>d</I><SUB>2</SUB>&nbsp;<I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB></DIV><P><tex2html_verbatim_mark></P><P>where <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> are the numbers on that domino, <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> is the coordinates of the number <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> in the packed layout, and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> is the coordinates of number <SPAN CLASS="MATH"><I>d</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. Coordinates are specified as integers with (0,0) denoting the lower-left corner of the packing area.<P>If multiple packings are possible, any packing meeting the criteria outlined above will be accepted.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 5 3 
3 5 2 
-1 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 5 3 
0 0 0 0 0 1 
0 1 1 0 2 0 
1 1 3 0 3 1 
3 5 2 
No packing is possible
</PRE><P><P><P><BR><B>Note:</B> This output corresponds to the packing shown here and is only one of many possible correct responses.<P><DIV ALIGN="CENTER"><IMG WIDTH="465" HEIGHT="283" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3427img1.png ALT="\epsfbox{p3427.eps}"> <tex2html_verbatim_mark></DIV><P>
______________________________________________________
3428||||||false||||||
<P>
The Acme Extrusion Company specializes in the production of steel bars with custom-designed cross-sections. The manufacturing process involves cutting a hole in a thick metal plate, the shape of the hole being determined by the customer's specifications. 

<P>
Molten metal is then forced through the hole to form a long bar. The shape of the hole determines the shape of the cross-section of the resulting bar. 

<P>
Given a description of a polygonal hole and the volume of molten metal available, determine how long a bar can be formed by this process.

<P>

<P>
<BR>

<IMG
 WIDTH="254" HEIGHT="212" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3428a.gif
 ALT="$\textstyle \parbox{.45\textwidth}{
\begin{center}
\mbox{}
\epsfbox{p3428a.eps}
\end{center}}$"><IMG
 WIDTH="254" HEIGHT="332" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3428a.gif
 ALT="$\textstyle \parbox{.45\textwidth}{
\begin{center}
\mbox{}
\epsfbox{p3428b.eps}
\end{center}}$">
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of one or more data sets consisting of the following information:  

<P>

<UL>
<LI>An integer, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> , indicating the number of vertices making up the polygon. End of input is signaled by any <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> less than 3.  
</LI>
<LI>Next are <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines, each containing a pair of floating-point numbers, <!-- MATH
 $(x_{i} , y_{i})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark>, each denoting one vertex of the polygon. Vertices will be presented in clockwise order (relative to the closest interior point) proceeding around the perimeter of the polygon. The <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> values are in units of meters.  
</LI>
<LI>The data set is terminated by a floating point value indicating the amount of molten metal available (in cubic meters).
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, the program should produce a single line of output of the form: 

<P>

<P>
<BR>

<TT>BAR LENGTH: <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark></TT>

<P>

<P>
<BR>
where ``<SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>" is the maximum bar length, a floating point number expressed with two digits precision. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
0.0 0.0 
0.0 0.1 
0.1 0.1 
0.1 0.0 
1.0 
7 
0.5 1.25 
0.9 1.6 
0.9  1.1 
0.85 1.0 
0.9 0.85 
0.9 0.5 
0.5 0.75 
100.0 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
BAR LENGTH: 100.00 
BAR LENGTH: 318.73
</PRE> 

<P>

______________________________________________________
3429||||||false||||||
<P>You are part of a team implementing an HTML editor and have been tasked with the problem of implementing the cut/copy/paste functions. One of your goals is to preserve the formatting of selected text, even though that formatting may be determined by HTML tags outside the range of the actual selected text.<P>You will be provided with a block of formatted text, a starting position B, and an ending position E. Your program should output the text of the substring of that text from B (inclusive) to E (exclusive), prepending and appending formatting tags as necessary so that the output is well formed and has the same format as it had in its original position.<P>For the purposes of this problem, format tags consist of an opening tag (such as ``<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark><TT>b</TT><SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark>"), followed by some text, followed by a closing tag (such as ``<SPAN CLASS="MATH">&lt; /</SPAN> <tex2html_verbatim_mark><TT>b</TT><SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark>"). Opening and closing tags are paired (``<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark><SPAN CLASS="textit">/whatever</SPAN><SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark>" closes ``<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark><SPAN CLASS="textit">whatever</SPAN><SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark>") and are considered opened between the opening tag and the closing tag. A tag may not be closed unless it is the most recent unclosed tag (e.g., ``<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark><TT>i</TT><SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark><TT>abc</TT><SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark><TT>b</TT><SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark><TT>def</TT><SPAN CLASS="MATH">&lt; /</SPAN> <tex2html_verbatim_mark><TT>i</TT><SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark><TT>ghi</TT><SPAN CLASS="MATH">&lt; /</SPAN> <tex2html_verbatim_mark><TT>b</TT><SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark>" is illegal). A tag may not be opened if it is already open (e.g., ``<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark><TT>b</TT><SPAN CLASS="MATH">&gt; &lt;</SPAN> <tex2html_verbatim_mark><TT>b</TT><SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark><TT>recursive b</TT><SPAN CLASS="MATH">&lt; /</SPAN> <tex2html_verbatim_mark><TT>b</TT><SPAN CLASS="MATH">&gt; &lt; /</SPAN> <tex2html_verbatim_mark><TT>b</TT><SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark>" is illegal).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input data will consist of multiple test cases. Each test case will consist of one line of input of the form<P><P><BR><SPAN CLASS="MATH"><I>B</I>&nbsp;<I>E</I>&nbsp;<I>TEXT</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> is an integer giving the (inclusive) beginning location of the substring, <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> is an integer giving the (exclusive) ending location of the substring, and <SPAN CLASS="MATH"><I>TEXT</I></SPAN> <tex2html_verbatim_mark> contains the text from which to extract the substring. The <SPAN CLASS="MATH"><I>TEXT</I></SPAN> <tex2html_verbatim_mark> begins after a single blank character immediately following <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>, and continues to the end of the line. <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> will be specified so that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3429img1.png ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3429img1.png ALT="$ \le$"><I>E</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3429img1.png ALT="$ \le$"><I>length</I>(<I>TEXT</I>)</SPAN> <tex2html_verbatim_mark>.<P>End of input will be signaled by the line ``<TT>-1 -1 </TT>" with a single space following the second <TT>-1</TT>.<P>No input line will be longer than 200 characters.<P>The <SPAN CLASS="MATH"><I>TEXT</I></SPAN> <tex2html_verbatim_mark> will be composed of characters with an ASCII value <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3429img1.png ALT="$ \ge$">32</SPAN> <tex2html_verbatim_mark> (the ASCII space) and <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3429img1.png ALT="$ \le$">126</SPAN> <tex2html_verbatim_mark> (the ASCII ' '). Opening tags will be of the form ``<SPAN CLASS="MATH">&lt; <I>X</I> &gt;</SPAN> <tex2html_verbatim_mark>" where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> contains at least 1 character and is composed entirely of the characters `a' to `z', `A' to `Z', `0' to `9', and `-'. Closing tags will be of the form ``<SPAN CLASS="MATH">&lt; /<I>X</I> &gt;</SPAN> <tex2html_verbatim_mark>". The character `<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark>' will only occur in the input as the first character of an opening or closing tag.<P>The input text will be well formed - all opening tags will be matched with a closing tag, all closing tags will match an opening tag, each closing tag will close the most recent unclosed tag, and tags will not be recursive (each tag must be closed prior to reopening).<P><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3429img1.png ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3429img1.png ALT="$ \le$"><I>E</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3429img1.png ALT="$ \le$"><I>length</I>(<I>TEXT</I>)</SPAN> <tex2html_verbatim_mark>. Neither <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> nor <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> will reference a character that is part of an opening or closing tag except for the character `<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program should print a single line containing the substring of TEXT from <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> (inclusive) to <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> (exclusive), prepending the substring with opening tags and appending the substring with closing tags as necessary so that the output line is well formed and has the same set of open tags as when it was included in the original <SPAN CLASS="MATH"><I>TEXT</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 15 Testing&lt;b&gt;!&lt;/b&gt; 
18 23 &lt;big&gt;100, &lt;bigger&gt;1000, &lt;biggest&gt;10000&lt;/biggest&gt;&lt;/bigger&gt;&lt;/big&gt; 
4 4 &lt;b&gt;123&lt;/b&gt; 
0 16 :-/ :-&gt; :-) :-&lt;-&gt; &lt;/-&gt; 
-1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Testing&lt;b&gt;!&lt;/b&gt; 
&lt;big&gt;&lt;bigger&gt;1000,&lt;/bigger&gt;&lt;/big&gt; 
&lt;b&gt;&lt;/b&gt; 
  :-/ :-&gt; :-) :-
</PRE><P>
______________________________________________________
3430||||||false||||||
<P>Alabama Mobiles Inc. designs and manufactures <SPAN CLASS="textit">mobiles</SPAN>, lightweight ``kinetic sculptures" consisting of a bar hanging from a string tied about its center. From each end of the bar hangs a string supporting either a small decorative object of some kind or another, smaller mobile. A well-designed mobile must have the weights of all the decorative items balanced, so that each bar in the mobile will naturally tend to hang horizontally. In addition, the lengths of the bars must be chosen so that each bar can rotate freely without striking the other bars, decorative objects, or the strings connecting them.<P><DIV ALIGN="CENTER"><IMG WIDTH="152" HEIGHT="165" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3430.gif ALT="\epsfbox{p3430.eps}"> <tex2html_verbatim_mark></DIV><P>Write a program to read a partial design for a new mobile and determine if it can be balanced and if, once balanced, the elements will swing freely without bumping or entangling with one another.<P>Each mobile will be described as a collection of bars and decorative objects. You will be given the lengths of the bars, the weights of all but one object, and all information on how the bars and objects are connected to one another. You may assume that the bars are made of a lightweight material so that their weight and the weight of the connecting strings are negligible compared to the weights of the decorative objects. You should assume that all connecting strings are of the same length. Every mobile will have at least one bar.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of mobile design specifications. Each mobile design is given as a series of numbered elements, beginning with number 1 and increasing sequentially until the end of the specification.<P>Each element is described on one line, beginning with the the element number. The next nonblank character will be either `<TT>B</TT>' or `<TT>D</TT>' to indicate that the element is a bar or a decorative object, respectively.<P>If the element is a bar, the `<TT>B</TT>' indicator is followed by a floating-point number denoting the length of the bar, and then two integers giving the element numbers of the two elements hanging from the two ends of the bar. Every element in the input except the top bar will listed as hanging from one end of some bar.<P>If the element is a decorative object, the `<TT>D</TT>' is followed either by a single floating point number denoting the weight of that object or by the character `<TT>X</TT>' indicating that the weight of that object has not been determined. There will be exactly one `<TT>X</TT>' object in each mobile specification.<P>In each line describing an element, the numbers and characters making up that line are separated by one or more blank spaces.<P>The end of a specification is indicated by a line containing a non-positive value in the place of the element number. If that number is negative, it indicates the end of the final mobile specification in the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each mobile specification, the program should print one or two lines of output. The first will either be<P><P><BR><TT>Object <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> must have weight <SPAN CLASS="MATH"><I>NN</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>or<PRE>
The mobile cannot be balanced.
</PRE>where <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is replaced by the element number of the `<TT>X</TT>' object and <SPAN CLASS="MATH"><I>NN</I></SPAN> <tex2html_verbatim_mark> by the weight for that element that will balance the entire mobile (printed with two digits after the decimal point.) The second alternative should be printed if and only if no positive weight exists that will balance the mobile.<P>If the mobile can be balanced, the second line of output will either be<P><PRE>
The mobile will swing freely.
</PRE>or<PRE>
The mobile will not swing freely.
</PRE>depending upon whether, when the strings are hanging straight down, all bars are separated by a positive distance no matter how they swing around on the string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 B 4.0 2 5 
2 D 6.0 
3 D X 
4 D 3.0 
5 B 3.0 3 4
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Object 3 must have weight 3.00 
The mobile will swing freely.
</PRE><P>
______________________________________________________
3431||||||false||||||
<P>
You recently installed a stylish clock in your office that is perfectly round and has no markings that identify its orientation. After accidentally bumping it, you realized that 12 o'clock might no longer be at the top. Nonetheless, you want to figure out what time it is. Fortunately you recently overheard A a coworker giving the time and you have a protractor and can measure the angle between the hour and minute hands. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3431.eps}$
 -->
<IMG
 WIDTH="225" HEIGHT="227" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3431.gif
 ALT="\epsfbox{p3431.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Your program should print the first time that has the correct angle between the hour and minute hands and that is on or after the overheard time. The angle (0 to 359 degrees, inclusive) will be measured clockwise from the hour hand to the minute hand. Assume that the clock hands move smoothly.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of one test case per line, of the form 

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>HH</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>MM</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>SS</I></SPAN>
<tex2html_verbatim_mark></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> is the integral number of degrees that must be traversed clockwise to get from the hour hand to the minute hand and <SPAN CLASS="MATH"><I>HH</I> : <I>MM</I> : <I>SS</I></SPAN>
<tex2html_verbatim_mark> is the overheard time in 24 hour form. <!-- MATH
 $0 \le A \le 359$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3431.gif
 ALT="$ \le$"><I>A</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3431.gif
 ALT="$ \le$">359</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le HH \le 23$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3431.gif
 ALT="$ \le$"><I>HH</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3431.gif
 ALT="$ \le$">23</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le MM \le 59$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3431.gif
 ALT="$ \le$"><I>MM</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3431.gif
 ALT="$ \le$">59</SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $0 \le SS \le 59$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3431.gif
 ALT="$ \le$"><I>SS</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3431.gif
 ALT="$ \le$">59</SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>HH</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>MM</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>SS</I></SPAN>
<tex2html_verbatim_mark> will be exactly two digits with a leading zero if necessary. 

<P>
End of input will be signaled by the line 

<P>
<PRE>
-1 00:00:00
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output will consist of one line per test case, of the form 

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH"><I>HH</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>MM</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>SS</I></SPAN>
<tex2html_verbatim_mark></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>HH</I> : <I>MM</I> : <I>SS</I></SPAN>
<tex2html_verbatim_mark> is the first time on or after the input time where the angle from the hour hand to the minute hand is exactly <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> degrees, rounded down to the nearest second. <SPAN CLASS="MATH"><I>HH</I>, <I>MM</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>SS</I></SPAN>
<tex2html_verbatim_mark> should be zero padded to two digits and in the same range as the input (<!-- MATH
 $0 \ldots 23$
 -->
<SPAN CLASS="MATH">0...23</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \ldots 59$
 -->
<SPAN CLASS="MATH">0...59</SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $0 \ldots 59$
 -->
<SPAN CLASS="MATH">0...59</SPAN>
<tex2html_verbatim_mark> respectively).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
270 14:45:00 
0 12:00:00 
0 12:00:01 
300 13:30:00 
180 08:30:00 
-1 00:00:00
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
15:00:00 
12:00:00 
13:05:27 
14:00:00 
09:16:21
</PRE> 

<P>

______________________________________________________
3432||||||false||||||
<P>
A common approach to navigating garden mazes is to, upon entry to the maze, to place one's hand upon the wall to right of the entrance, and then to walk forward, keeping that right hand in contact with a wall at all times. 

<P>
It's well known that this technique allows one to pass through one-entrance, one-exit mazes, but it does not always suffice with mazes where one is supposed to reach some goal location or locations in the interior of the maze. 

<P>
Write a program to read in a description of a maze marked with a goal location and one or more entrances, and to determine whether the goal can be found by applying the right-hand rule until the goal is found or until the rule causes you to pass outside the maze through one of the entrances. 

<P>
We assume that people walking through the maze will look around as they do so. Consequently, a goal is considered to have been ``found" if the person steps directly onto that location or reaches any position with an unimpeded view to the goal along a vertical or horizontal line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of one or more mazes. Each maze begins with a line containing two integers, <SPAN CLASS="MATH"><I>W</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark>, denoting the width and the height of the maze. End of input is indicated when either of these values is less than 3. 

<P>
This is followed by <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark> lines of input. In each of these lines, only the first <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> characters are significant. If the input line contains fewer than <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> characters, you should treat the missing characters as `<TT>X</TT>'. 

<P>
The interpretation of the characters in these lines is as follows:  

<P>

<UL>
<LI>' ' denotes an open space  
</LI>
<LI>'<TT>G</TT>' is an open space representing a goal location - there will be exactly one of these in any maze.  
</LI>
<LI>'<TT>X</TT>' denotes a wall  
</LI>
<LI>'<TT>E</TT>' is an open space representing an entrance. All entrances will occur on the outer perimeter (as defined by the <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark> values) of the maze and no two entrances will be adjacent. 
</LI>
</UL>

<P>
All mazes will be completely enclosed by a combination of '<TT>X</TT>' and '<TT>E</TT>' characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each maze, print a single line of output of the form 

<P>
<PRE>
The goal would be found from ? out of ? entrances.
</PRE>  
replacing the first '<TT>?</TT>' by the number of entrances from which the right-hand-rule allows one to find the goal and the second '<TT>?</TT>' by the total number of entrances.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
31 15 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
X                             X 
X                             X 
X                             X 
X   XXXX XXXXX                X 
X   X        X                X 
X   X   G    X                X 
X   X        X                X 
X   X        X                X 
X   XXXXXXXXXX                X 
X                             X 
X                             X 
X                 XXXXXXXXXXXXX 
X                             X 
XXXXXXEXXXXXXXXXXXXXXXEXXXXXXXX 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
The goal would be found from 1 out of 2 entrances.
</PRE> 

<P>

______________________________________________________
3433||||||false||||||
<P>As editor of a small-town newspaper, you know that a substantial number of your readers enjoy the daily word games that you publish, but that some are getting tired of the conventional crossword puzzles and word jumbles that you have been buying for years. You decide to try your hand at devising a new puzzle of your own.<P>Given a collection of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> words, find an arrangement of the words that divides them among <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, padding them with leading spaces to maximize the number of non-space characters that are the same as the character immediately above them on the preceding line. Your score for this game is that number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input data will consist of one or more test sets.<P>The first line of each set will be an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3433img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3433img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> giving the number of words in the test case. The following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines will contain the words, one word per line. Each word will be made up of the characters 'a' to 'z' and will be between 1 and 10 characters long (inclusive).<P>End of input will be indicated by a non-positive value for <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program should output a single line containing the maximum possible score for this test case, printed with no leading or trailing spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
abc 
bcd 
cde 
aaa 
bfcde 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
</PRE><P><P><P><BR><B>Note:</B> One possible arrangement yielding this score is:<PRE>
aaa 
abc 
 bcd
  cde 
bfcde

______________________________________________________
3434||||||false||||||
<P>
Plinko is a game played on a nearly vertical board populated with offset
rows of pegs.  The player chooses one of five slots in the top of the
board, drops the chip into it, and watches as the chip bounces down the
board.  Each time the chip encounters a peg, it will either bounce left
or right.  On a fair Plinko board, the chance would be an even 50 percent
each way (except on the board edges, where only one choice exists).
The chip eventually ends up at the bottom row, with the ending column
determining the prize.

<P>
As a player in a dishonest Plinko tournament, you know that all the
boards are rigged.  The chances for the chip to go right or left at
each peg are not always fair.  Luckily, you have found a set of
schematics that show the percentage chance that a chip will go right
for each peg on each board.  Now you just need a program to calculate the
odds of particular drop point leading to the chip landing in specified
columns.

<P>
Here's an example of how a fair Plinko game's probabilities would look:

<P>

<P>
<BR>
<PRE> 
	a chip starts in one of five lettered
	columns at the top:
	                           prob. chip will go right
	# A # B # C # D # E #            at each peg:
	#                   #       
	# *   *   *   *   * #  =======&gt; 1/1 1/2 1/2 1/2 0/1
	#                   #
	#   *   *   *   *   #  =======&gt; 1/2 1/2 1/2 1/2
	#                   #
	# *   *   *   *   * #  =======&gt; 1/1 1/2 1/2 1/2 0/1
	#                   #
	# A * B * C * D * E #  =======&gt; 1/2 1/2 1/2 1/2
	#####################

	a chip ends at the bottom
</PRE>

<P>

<P>
<BR>
Here is one possible path for a chip dropped in the <SPAN  CLASS="textbf">A</SPAN> column:

<P>

<P>
<BR>
<PRE> 
	# | # B # C # D # E #      prob. chip will go right:
	#  \                #
	# * \ *   *   *   * #  =======&gt; 1/1 1/2 1/2 1/2 0/1
	#   /               #
	#  /*   *   *   *   #  =======&gt; 1/2 1/2 1/2 1/2
	#  \                #
	# * \ *   *   *   * #  =======&gt; 1/1 1/2 1/2 1/2 0/1
	#    \              #
	# A * | * C * D * E #  =======&gt; 1/2 1/2 1/2 1/2
	#####################
</PRE>

<P>

<P>
<BR>
What are the odds that this exact path would be taken?  Well, the
probability that it would first go right was 1/1, the second move (left)
was 1/2, the third move (right) was 1/1, and the last move (right) was
1/2.  This means the probability of this path being taken was:

<P>

<P>
<BR>
<PRE> 
	1/1 * 1/2 * 1/1 * 1/2 = 1/4 = 25%
</PRE>

<P>

<P>
<BR>
However, there are other paths the chip could have taken to arrive at the
bottom row in column <SPAN  CLASS="textbf">B</SPAN>, and they would also have to be considered when
determining the probability that the chip would end up in that particular
spot.

<P>
Notice that the pegs directly below the `A' and `E' marks have special
values.  Since these columns are on the edge of the board, there is only
one way for the chip to go.  Even the rigged boards follow that rule.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to this problem will begin with a line containing a single integer
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> indicating the number of Plinko boards that require analysis.
The following lines contain the boards.  Each board has four lines
representing the probabilities that each peg will cause a chip falling
on it to go right as a fraction (see the Introduction; the numerator and
denominator of each fraction will be a single digit).  Each board is
followed by three lines, containing starting and ending column letters
for the three chips dropped.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each board in the input, print a header `<TT>Data set #<SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark></TT>'
where <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> is 1 for the first data set, 2 for the second, etc.
Then, for each starting/ending column pair, display
`<TT><SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>-&gt;<SPAN CLASS="MATH"><I>Z</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> paths, <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark>% chance</TT>' where
<SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Z</I></SPAN>
<tex2html_verbatim_mark> are the starting/ending columns from the input,
<SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> is the number of distinct paths connecting the starting/ending
columns, and <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> is the percentage chance that a chip dropped into
the starting column slot will end up in the ending column on the bottom
row. Truncate any fractional percentages from the chance before
displaying.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
2
1/1 1/2 1/2 1/2 0/1
1/2 1/2 1/2 1/2
1/1 1/2 1/2 1/2 0/1
1/2 1/2 1/2 1/2
A A
A E
C B
1/1 1/1 4/5 0/1 0/1
1/1 1/4 1/1 0/1
1/1 0/1 4/5 1/1 0/1
0/1 1/1 1/1 1/1
C C
C D
C E
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
Data set #1
A-&gt;A 2 paths, 37% chance
A-&gt;E 0 paths, 0% chance
C-&gt;B 4 paths, 25% chance
Data set #2
C-&gt;C 1 paths, 1% chance
C-&gt;D 1 paths, 4% chance
C-&gt;E 1 paths, 80% chance
</PRE>

<P>

______________________________________________________
3435||||||false||||||
<P>
As a homework assignment, you have been tasked with creating a program
that provides the meanings for many different words.  As you dislike
the idea of writing a program that just prints definitions of
words, you decide to write a program that can print definitions of many
variations of just a handful of different root words.  You do this by
recognizing common prefixes and suffixes.  Since your program is smart
enough to recognize up to one prefix and one suffix per word, it can
process many forms of each word, significantly reducing the number of
rote definitions required.

<P>

<P>
<BR>
For this problem, you'll be writing the prefix/suffix processing
portion of the program.

<P>

<P>
<BR>
Valid prefixes and their meanings are:

<P>

<P>
<BR>
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
anti<SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  against <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>post<SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  after <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>pre<SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  before <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>re<SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> again </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>un<SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  not <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TBODY>
</TABLE>

<P>

<P>
<BR>
Valid suffixes and their meanings are:

<P>

<P>
<BR>
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark>er  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  one who <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark>s </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark>ing </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  to actively <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark>ize </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  change into <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark>s   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  multiple instances of <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark>tion </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  the process of <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>word<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark>ing </TD></TR>
</TBODY>
</TABLE>

<P>

<P>
<BR>
Note that suffixes are tied more tightly to their root word and should
therefore be expanded last.  For example, the word ``vaporize" would be
expanded through the following steps:

<P>

<P>
<BR>
<PRE> 
	unvaporize
	not vaporize
	not change into vapor
</PRE>

<P>

<P>
<BR>
Of course, the definitions are not exactly right, but how much polish
does the professor expect for a single homework grade?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to this problem will begin with a line containing a single integer
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> indicating the number of words to define. Each of the following
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines will contain a single word.  You need to expand at most
one prefix and one suffix, and each word is guaranteed to have a non-empty
root (i.e., if the prefix and/or suffix are removed, a non-empty string
will remain).  Each word will be composed of no more than 100 printable
characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each word in the input, output the expanded form of the word by
replacing the prefix and/or suffix with its meaning.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
6
vaporize
prewar
recooking
root
repopularize
uninforming
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
change into vapor
before war
to actively cook again
root
change into popular again
not to actively inform
</PRE>

<P>

______________________________________________________
3436||||||false||||||
<P>You are a beta tester for a new online game, <EM>Jetpack Sniper 3000 Fragfest Extreme</EM>. In this game, players with jetpacks fly around major metropolitan areas and attempt to shoot each other with laser guns. The only obstacles behind which players can hide are the ever-present glass towers of cubicle farms, skyscrapers.<P>To assist you in playing the game, you've written a program that will tell you which players could currently shoot (or be shot) by you. These are the players who have an unobstructed view of your position.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will begin with a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of cities in the input. Each city is made of 100 city blocks <SPAN CLASS="MATH">(10 <TT>x</TT> 10)</SPAN> <tex2html_verbatim_mark>, each of which contains a skyscraper of an integer height from 0 to 9. A city is represented in the input as 10 lines of 10 integers, where the integers are the height values of the corresponding skyscrapers. This is followed by one line with four sets of coordinates. The first denotes your position; the other three denote the positions of players A, B, and C, respectively. Positions are given in the format ( <SPAN CLASS="MATH"><I>x</I>, <I>y</I>, <I>height</I></SPAN> <tex2html_verbatim_mark>), where <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is measured from left to right on the input city grid, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> is measured from top to bottom, <SPAN CLASS="MATH"><I>height</I></SPAN> <tex2html_verbatim_mark> is measured from the ground up, and (0,0,0) is at the top left of the input city grid at ground level.<P><P><BR><B>Note:</B><UL><LI>The coordinates of player positions may contain floating point numbers. </LI><LI>Neither you nor any of the other players will ever be inside a building or on one of its edges or sides. Your line of sight to another player will never be tangent to the side, edge, or corner of a building in such a way that it changes the outcome of the program. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each city in the input, output the header `<TT>Fragfest City #<SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark></TT>' where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is 1 for the first city, 2 for the second, etc. Follow this line with one line for each of players A, B, and C and print either `<TT>Player <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> is in sight</TT>' or `<TT>Player <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> is hiding</TT>' depending on whether or not a building obstructs your view of that player.<P><P><BR>Please make these two simplifying assumptions:<OL><LI>A skyscraper is a rectangular solid with dimensions <SPAN CLASS="MATH">1 <TT>x</TT> 1 <TT>x</TT> <I>height</I></SPAN> <tex2html_verbatim_mark>; </LI><LI>a player is the size and shape of a point; </LI><LI>and a player does not block the view of another player. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
2
0000005000
0000005000
0000005000
0000005000
9999999999
0000000000
0000000000
0000000000
0000000000
0000000000
(0,0,0) (10, 10, 10) (5.5, 5.5, 5.5) (9, 1.0, 9)
0123456789
1000000000
2064646400
3045555600
4065005400
5045005600
6065555400
7046464600
8000000000
9123456789
(4.5, 4.5, 5.5) (7.5, 4.5, 5.5) (1.5, 4.5, 5.1) (7.5, 4.5, 6.5)
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Fragfest City #1
Player A is hiding
Player B is hiding
Player C is in sight
Fragfest City #2
Player A is in sight
Player B is hiding
Player C is in sight
</PRE><P>
______________________________________________________
3437||||||false||||||
<P>
Peg games may be played on a variety of boards, but the goal is always
the same, to end the game with as few pegs on the board as possible.
This is accomplished by making a sequence of moves, where one peg `jumps'
an adjacent peg to the empty space on the opposite side.  Pegs which are
jumped by other pegs are immediately removed.

<P>
Given the starting configuration of a peg board, your program should
determine the number of pegs that will remain on the board if the player
makes the best possible sequence of moves.

<P>
One standard peg board is a <SPAN CLASS="MATH">5 <TT>x</TT> 5</SPAN>
<tex2html_verbatim_mark> cross (shown below with periods indicating
empty peg holes and pound signs indicating non-playable space).  Figure A
shows an empty board.  Figure B shows a board with five pegs, indicated by
lower-case letter <TT>o</TT>'s. and Figure C shows the result of an optimal
sequence of moves from Figure B's starting position.  Note that this ends
with 1 peg, the best possible result for any game.  Also note that the
optimal sequence of moves used to generate Figure C is not unique; there
are at least two sets of moves that leave only one peg.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<TT>#...#</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>#.o.#</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>#...#</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<TT>.....</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>..o..</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>.....</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<TT>.....</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>oo.o.</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>...o.</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<TT>.....</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>.....</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>.....</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<TT>#...#</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>#...#</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>#...#</TT> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Figure A </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Figure B </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Figure C </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Note that not all of the peg boards given to you will be the same shape!
They will all be <SPAN CLASS="MATH">5 <TT>x</TT> 5</SPAN>
<tex2html_verbatim_mark>, and will all have at least one peg, at least one
empty cell, and at least four non-playable spaces, but the layout may
differ drastically from the above.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to this problem will begin with a line containing a single integer
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> indicating the number of boards that require analysis.  The
following <SPAN CLASS="MATH">5<I>n</I></SPAN>
<tex2html_verbatim_mark> lines contain the boards.  Each board has a
representation like that in the figure above, with a period
(<TT>.</TT>) representing an empty space, lower case `<TT>o</TT>'
representing a peg, and `<TT>#</TT>' representing a non-playable space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each board in the input, print the message `<TT>The best case ends with <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark> pegs.</TT>' where <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark> is replaced with the number of pegs remaining after an optimal set of jumps.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
3
#.o.#
..o..
oo.o.
.....
#...#
#...#
o.o.o
....o
...o.
#o..#
#..##
.o..#
ooo.o
.o.o.
#..o#
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
The best case ends with 1 pegs.
The best case ends with 4 pegs.
The best case ends with 2 pegs.
</PRE>

<P>

______________________________________________________
3438||||||false||||||
<P>Janken, also known by the name <EM>rock paper scissors</EM>, is a popular Japanese childrens' game. In the grand tradition of game development, one company has decided to put a strategic twist on a classic title. The resulting war ``simulation," <EM>Janken Tactics</EM>, is in development as we speak. You have been hired onto the team as a programmer, and put to work on the move validation code.<P><P><BR><EM>Janken Tactics</EM> takes place on a map represented by a hex-hex grid with five cells on each side. Each cell on the grid has a certain <EM>terrain type</EM>, which helps or hinders movement through the cell. Normally, moving into an adjacent cell costs one <EM>movement point</EM>, but the terrain on that cell may cause it to cost more:<P><P><BR><UL><LI>Moving into a <B>F</B>ield costs no extra movement points (one total); </LI><LI>Moving into the <B>W</B>oods costs one extra movement point (two total); </LI><LI>Moving into the <B>H</B>ills costs two extra movement points (three total); </LI><LI>Moving into the <B>M</B>ountains costs three extra movement points (four total); </LI><LI>and no units may move into <B>U</B>nderwater cells. (They will not start in an underwater cell either.) </LI></UL><P><P><BR>The layout and coordinate system for the hexagonal grid is as follows:<P><PRE> 
      4 5 6 7 8 9
     3 \ \ \ \ \ \                
    2 \ \ * * * * * -- A
   1 \ \ * * * * * * -- B
    \ \ * * * * * * * -- C
     \ * * * * * * * * -- D
      * * * * * * * * * -- E
       * * * * * * * * -- F
        * * * * * * * -- G
         * * * * * * -- H
          * * * * * -- I
</PRE>with letters coming first in the coordinate system. The center cell of the top row is A7, the rightmost point of the grid is E9, and so on. On the hex grid above, adjacent cells are those to the immediate left and right and those immediately along the diagonals. For example, the cells adjacent to E5 are D5, D6, E4, E6, F4, and F5.<P>As one might expect of a game based on Janken, there are three unit types: the <EM>Guardian</EM> (rock), the <EM>Mage</EM> (paper), and the <EM>Swordsman</EM> (scissors). Units also have <B>10</B> movement points that they can expend per move. And, as in Janken, the units each have their strengths and weaknesses:<P><UL><LI>Guardians can defeat Swordsmen but are defeated by Mages; </LI><LI>Mages can defeat Guardians but are defeated by Swordsmen; </LI><LI>and Swordsmen can defeat Mages but are defeated by Guardians. </LI></UL><P>You are not working on the combat code for <EM>Janken Tactics</EM>, but the strengths and weaknesses are important for another reason: during a move, a unit cannot pass over an enemy unit, <B>NOR</B> can they pass within one cell of an enemy unit that is strong against them (that is, a Guardian cannot pass within one cell of a Mage, a Mage cannot pass within one cell of a Swordsman, and a Swordsman cannot pass within one cell of a Guardian). They may, however, end a move in a cell adjacent to (but not the same as) any enemy unit, and may pass through cells occupied by allied units of all types. The destination cell must not have any unit (allied or enemy) inside. There will never be more than one unit in a cell between moves.<P><P><BR>Your goal is to determine whether a given unit can execute a certain move, and if so how many movement points are left over after the move. The code should maximize the number of movement points left at the end of the move, so that the unit has more choices during any potential combat that may occur. Invalid moves may occur if:<P><UL><LI>the starting cell has no occupying unit; </LI><LI>the destination cell is already occupied; </LI><LI>moving to the destination cell costs too many movement points; </LI><LI>or the destination cell is impossible to reach without passing over Underwater cells, enemy units, or passing next to enemy units which are strong against the moving unit. </LI></UL><P>You will be processing a sequence of moves, so <EM>if a move is invalid, leave the unit which attempted to move (if any) in its starting location.</EM> Every move in a particular data set takes place one after the other, so do not reset the grid to its initial condition after each move.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will begin with a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of data sets. For each data set, the next six lines are a representation of the hex-hex grid's terrain, with <TT>F</TT> representing fields, <TT>W</TT> representing woods, <TT>H</TT> representing hills, <TT>M</TT> representing mountains, and <TT>U</TT> representing underwater cells.<P>The next line of each data set will consist of two integers <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3438img1.png ALT="$ \le$"><I>M</I>, <I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3438img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> representing the number of units on each side of the battle. Following that are <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines with two values <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is the type of unit (<TT>G</TT> for Guardian, <TT>M</TT> for Mage, <TT>S</TT> for Swordsman) and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> is the starting location for that unit represented as described above. The <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> lines following that are a similar representation for the second side.<P>The next line of each data set consists of an integer <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3438img1.png ALT="$ \le$"><I>V</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3438img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> representing the number of moves to test. The next <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> lines contain two values <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> are coordinates in the proper format describing the starting cell (and therefore unit) and attempted ending cell for that move. Note that moves may involve either of the sides.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, first print `<TT>Game #<SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark></TT>' where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is the number of the data set, starting with 1. For each move in each data set, print `<TT>Move #<SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> -&gt; <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>): Successful (<SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> points left)</TT>' if the move was successful, or `<TT>Move #<SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> -&gt; <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>): Unsuccessful</TT>' if the move was unsuccessful. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the move number, starting at 1; <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is the starting coordinate and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> the destination coordinate, in the representation described above; <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the number of movement points left at the end of the move.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
1
    U U U W W
   U F F F F W
  W F H H H F W
 W F H F F H F W
W F H F F F F F W
 W F H F F H H H
  W F H M M M M
   W F F F F F
    W W W W W
3 3
G E5
M D5
S F4
G F8
M A8
S C4
2
E5 E9
D5 F8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Game #1
Move #1 (E5 -&gt; E9): Successful (5 points left)
Move #2 (D5 -&gt; F8): Unsuccessful
</PRE><P>
______________________________________________________
3439||||||false||||||
<P>Bingo is a game in which players try to form patterns on a <SPAN CLASS="MATH">5 <TT>x</TT> 5</SPAN> <tex2html_verbatim_mark> grid (or <EM>card</EM>). Each column on the card is represented by a letter in the game's namesake: B, I, N, G, or O. Each square on the grid contains a number. Players mark numbers as they are chosen randomly until a person has a card with a winning pattern marked (or <EM>bingo</EM>). An exception to this is the center square in the grid, which is a <EM>free spot</EM> and is already marked for all players at the beginning of each game. The possible numbers called are 1-75, inclusive, with each set of fifteen numbers corresponding to a letter: B for 1-15, I for 16-30, N for 31-45, G for 46-60, and O for 61-75.<P>Given the amount of numbers for each letter already called and information used to determine the set of winning patterns, write a program to determine the fewest amount of numbers that still need to be called for a possible bingo.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will begin with a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of data sets. The first line in each data set will be in the format <SPAN CLASS="MATH"><I>B</I>&nbsp;<I>I</I>&nbsp;<I>N</I>&nbsp;<I>G</I>&nbsp;<I>O</I>&nbsp;<I>X</I>&nbsp;<I>Y</I></SPAN> <tex2html_verbatim_mark> where:<P><OL><LI><SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> is the amount of numbers in the B category that have already been called; </LI><LI><SPAN CLASS="MATH"><I>I</I></SPAN> <tex2html_verbatim_mark> is the amount of numbers in the I category that have already been called; </LI><LI><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the amount of numbers in the N category that have already been called; </LI><LI><SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> is the amount of numbers in the G category that have already been called; </LI><LI><SPAN CLASS="MATH"><I>O</I></SPAN> <tex2html_verbatim_mark> is the amount of numbers in the O category that have already been called; </LI><LI><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> (where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3439img1.png ALT="$ \le$"><I>X</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3439img1.png ALT="$ \le$">19</SPAN> <tex2html_verbatim_mark>) is the number of input patterns (the winning patterns are described through combinations of the input patterns); </LI><LI>and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> (where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3439img1.png ALT="$ \le$"><I>Y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3439img1.png ALT="$ \le$">minimum(5, <I>X</I>)</SPAN> <tex2html_verbatim_mark>) is the minimum number of input patterns that must be combined to form a winning pattern. </LI></OL><P>The next 5 lines in each data set will be a series of <SPAN CLASS="MATH">5 <TT>x</TT> 5</SPAN> <tex2html_verbatim_mark> grids of the input patterns in a format where <TT>X</TT> represents a square that must be marked and <TT>O</TT> represents a square that does not have to be marked. Using the input patterns and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> given above, the entire set of winning patterns can be determined.<P><P><BR>For example, given an <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> of 4, a <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> of 2, and a set of input patterns as follows:<P><PRE> 
XXOOO OOOXX OOOOO OOOOO
XXOOO OOOXX OOOOO OOOOO
OOOOO OOOOO OOOOO OOOOO
OOOOO OOOOO XXOOO OOOXX
OOOOO OOOOO XXOOO OOOXX
</PRE><P>the set of winning patterns (of which only one must be marked to have a bingo) is:<P><PRE> 
XXOXX XXOOO XXOOO OOOXX OOOXX OOOOO
XXOXX XXOOO XXOOO OOOXX OOOXX OOOOO
OOOOO OOOOO OOOOO OOOOO OOOOO OOOOO
OOOOO XXOOO OOOXX XXOOO OOOXX XXOXX
OOOOO XXOOO OOOXX XXOOO OOOXX XXOXX
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, output a single line containing the fewest amount of numbers that still need to be called to form a bingo.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
3
0 1 0 2 1 4 2
XXOOO OOOXX OOOOO OOOOO
XXOOO OOOXX OOOOO OOOOO
OOOOO OOOOO OOOOO OOOOO
OOOOO OOOOO XXOOO OOOXX
OOOOO OOOOO XXOOO OOOXX
1 1 0 1 1 5 1
XXXXX OOOOO OOOOO OOOOO OOOOO
OOOOO XXXXX OOOOO OOOOO OOOOO
OOOOO OOOOO XXXXX OOOOO OOOOO
OOOOO OOOOO OOOOO XXXXX OOOOO
OOOOO OOOOO OOOOO OOOOO XXXXX
15 15 15 15 4 1 1
XXXXX
XXXXX
XXXXX
XXXXX
XXXXX
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
4
0
1
</PRE><P>
______________________________________________________
3440||||||false||||||
<P>Conway's Game of Life is a simulation run on a square grid of cells. Each cell is either <EM>alive</EM> or <EM>dead</EM>, and each turn of the simulation is based on the contents of the previous turn; that is, each cell's state in turn <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> is based on its state in turn <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> along with the states of the eight cells surrounding it. In the standard Game of Life, a cell remains alive if it has two or three neighbours, and an empty cell becomes alive if it has precisely three neighbours: otherwise, a cell <EM>dies</EM> or stays empty. The figure below shows three generations of a simple but surprisingly complex Conwayian structure called a glider:<P><PRE> 
   0       1       2       3       4
....... ....... ....... ....... .......
....... ...A... ..AA... ..AA... .AAA...
..AAA.. ..AA... ..A.A.. .AA.... .A.....
..A.... ..A.A.. ..A.... ...A... ..A....
...A... ....... ....... ....... .......
....... ....... ....... ....... .......
</PRE><P>As one can see, the entire structure has in fact moved one cell up and one cell to the left after four turns. There are many other much more complex structures in the Game of Life; it is even possible to build a (very, very slow) Turing Machine on the grid, or simulate the Game of Life itself!<P><P><BR>The <EM>ruleset</EM> for the original Game of Life can be described as <B>23/3</B>; that is, a cell stays alive in turn <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> if it has two or three live neighbours in turn <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, and a dead cell turns live if it has precisely three neighbours. There are many other ``Conway-like" rulesets that can be described with the same notation. Note that a ruleset like <B>/234</B> (that is, all currently live cells die, but any dead cells with two, three, or four neighbors come alive) is perfectly valid (and quite interesting); rulesets with no ``birth values" are also valid but (unsurprisingly) dull. Your goal is to simulate a number of these rules...at the same time on the same grid.<P>Because there is more than one ruleset running on the same grid, a number of clarifications are required:<P><UL><LI>Each cell can be occupied by at most one cell from one species (a ruleset represented by a particular letter); </LI><LI>Only cells of the same species count towards the state of the next turn for that species; </LI><LI>When there is a conflict as to the state of a cell in the next turn, resolution is as follows:<OL><LI>If one ruleset will place a live cell and all others leave the cell dead, place a live cell of the ruleset that allows it; </LI><LI>If more than one ruleset will place a live cell in that location, the ruleset whose representation is first in alphabetical order wins (that is, if species B and D would both have a live cell in a location, the cell becomes a live cell with species B.) </LI></OL></LI><LI>One can assume that the board is surrounded by an infinite number of dead cells that cannot become alive. </LI></UL><P>After running a simulation for a given number of turns, you are to report the maximum and minimum population of each species involved.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will begin with a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of simulations in the file. For each simulation, the first line contains three integers <SPAN CLASS="MATH"><I>X</I>&nbsp;<I>Y</I>&nbsp;<I>S</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3440img1.png ALT="$ \le$"><I>X</I>, <I>Y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3440img1.png ALT="$ \le$">50;1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3440img1.png ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3440img1.png ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> represent the width and height of the board and <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> represents the number of different species represented on the board. The next <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> lines are a textual representation of the board in turn 0, as shown above. The following <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> lines are the definitions of the rulesets for each species, given in the format described above. The last line of each data set is an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> representing the number of turns to simulate. (For example, the figure above was a simulation of 4 turns.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, first print `<TT>Simulation #<SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark></TT>' where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of the data set, starting at 1. Then print <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> lines, each of the format `<TT>Species <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>: At most <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> live, at least <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> live.</TT>' where <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is the letter representation of the species (starting with A), <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the maximum number of that species alive in any turn of the simulation (including turn 0), and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> is the least number of that species alive in any turn of the simulation (including turn 0).<P><P><BR><B>Special Note:</B> The below diagram shows the initial state plus the four following states of the second sample input:<P><PRE> 
  0     1     2     3     4
..A.. ..... ..A.. ..... ..A..
..A.. .AAA. ..A.. .AAA. ..A..
..A.. ..... ..A.. ..B.. ..A..
..... ..B.. .BBB. .B.B. .B.B.
.BBB. .BBB. .BBB. .B.B. .B.B.
</PRE><P>Note that in turn 4 the A species takes over a cell that would have otherwise stayed as a B.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
2
7 6 1
.......
.......
..AAA..
..A....
...A...
.......
23/3
4
5 5 2
..A..
..A..
..A..
.....
.BBB.
23/3
123/36
4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Simulation #1
Species A: At most 5 live, at least 5 live.
Simulation #2
Species A: At most 3 live, at least 3 live.
Species B: At most 6 live, at least 3 live.
</PRE><P>
______________________________________________________
3441||||||false||||||
<P>As an unnamed space agency endured the ridicule following their now-infamous metric/English unit conversion, they made a vow to never let that error happen again. Unfortunately, they over-hired poor college students with excellent metric/English unit conversion skills but not calculus skills. In fact, nobody at this agency can now remember how to calculate the derivative of a polynomial, let alone evaluate the derivative of a polynomial for a given value of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>.<P>As any good government agency would do in this case, they've decided to outsource the task... to you. And not only do they want you to do the work, they want you to show how you did each step of your calculation so that they might re-learn the skill.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will begin with a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of input polynomials. Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain:<P><OL><LI>a value of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> at which the first derivative of the polynomial is to be evaluated; </LI><LI>and the polynomial. </LI></OL><P>All polynomials are expressed in terms of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, with single-digit integer coefficients (positive or negative) and non-negative single-digit integer powers of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. Polynomials do not contain spaces. Coefficients and powers of 1 (and powers of 0) are omitted from the notation, as is any `<TT>+</TT>' sign that might apply to the leading term. The leading term has the highest order, and is followed by the one (if any) with the next-highest order and so on.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each polynomial in the input, output the following lines:<P><OL><LI>The string `<TT>POLYNOMIAL <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark></TT>' where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is 1 for the first polynomial, 2 for the second, etc.; </LI><LI>The polynomial, exactly as in the input; </LI><LI>The first derivative of the polynomial from line 2; </LI><LI>The polynomial in line 3 with <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> replaced by its value in parenthesis (e.g., if <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is 6, ``<SPAN CLASS="MATH">2<I>x</I> <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3441img1.png ALT="$ \wedge$"> 3</SPAN> <tex2html_verbatim_mark>" becomes `` <SPAN CLASS="MATH">2(6) <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3441img1.png ALT="$ \wedge$"> 3</SPAN> <tex2html_verbatim_mark>"); </LI><LI>The polynomial in step 4 with each term fully evaluated; </LI><LI>and the resulting integer, which is equivalent to <SPAN CLASS="MATH"><I>f'</I>(<I>x</I>)</SPAN> <tex2html_verbatim_mark> evaluated at the given value of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
3
5 2x^7+x^2+3x-9
0 -5x^7+x^3+1
-3 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
POLYNOMIAL 1
2x^7+x^2+3x-9
14x^6+2x+3
14(5)^6+2(5)+3
218750+10+3
218763
POLYNOMIAL 2
-5x^7+x^3+1
-35x^6+3x^2
-35(0)^6+3(0)^2
0+0
0
POLYNOMIAL 3
5
0
0
0
0

______________________________________________________
3442||||||false||||||
<P>
An enterprising group of Swamp County College business students have thought of an idea to improve the lives oftheir fellow students and perhaps make a few dollars at the same time. They want to automate comparison-shopping for groceries so students can stretch their food budgets. A student who wants to use the service submits a list of commonlypurchased groceries along with some other parameters about their shopping habits, and the service responds with the store that will give him or her the best deal on those items that week. The business students hope either to market theservice or to attract sponsors who will support it.

<P>
The business students want your team to develop the software that will take each student's shopping list anddetermine which of up to five nearby stores will provide the lowest net total cost for the selected items. They will hire other students to collect and enter the data from promotional advertising and in-store visits.

<P>
Students vary in the amount of effort they will put in to stretch their grocery dollars. Some will clip coupons,others won't. Some will accept house-brand substitutes from certain stores, others insist on brand-name goods. Your program is to take all this into account when determining which store offers the best deal for each student.

<P>
Some supermarkets offer to double manufacturer's coupons on brand-name items as a promotional tool. Storesthat do this share common policies about the promotion: a coupon will only be doubled up to a maximum of one dollar, and the most you can get by using a coupon that is doubled is to get the promoted item for free. A coupon for $1.50 would be worth a total of $2.50 at a store that doubles coupons. An item that costs $1.75 before using a "doubled" $1.00 off coupon would be free-but the shopper doesn't get an additional 25 cents back.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to your program begins with information about neighborhood stores and the current week's prices in the following format:

<P>

<UL>
<LI>The first line contains the number of stores as a single digit number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> in the first column.
</LI>
<LI>The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines contain information about the stores in the neighborhood. Each line contains the letter ``<TT>Y</TT>"or ``<TT>N</TT>", a single space, and the store name. ``<TT>Y</TT>" indicates that the store doubles coupons; ``<TT>N</TT>" indicates that the store does not double coupons.
</LI>
<LI>The following 2-500 lines contain comma-delimited lists with the inventory, one item per line. The item identifier is followed by the brand-name item price and the house-brand substitute price at each store in the order of thestores given in the list. This list is terminated by an empty line (that is, a line that contains nothing but the end-of-line character.)
</LI>
</UL>

<P>
The remainder of the input contains the names of student shoppers, their lists of items, flags showing whether or notthey will allow house-brand substitution for each item at each store, and the value of any brand-name manufacturer's
coupon they have for each item. The student names are on lines that begin with asterisks. The lines that follow astudent's name represent the items in that student's shopping list. Each shopping list entry consists of the name of the desired item (possibly in a case other than the way it appears in the inventory list), followed by the character ``<TT>Y</TT>" or ``<TT>N</TT>"indicating acceptance or rejection of house-brand items at each store, optionally followed by the amount of any valid manufacturer's coupon that the shopper has. Commas separate fields from each other. The house-brand substitutionflags appear in the same order as the stores in the inventory list. A shopping list ends when either a new student name appears or the end-of-file is reached.

<P>
All store names and item names are unique. Names of stores, items, and students consist of between one andthirty alphanumeric characters, hyphens, apostrophes, and periods. All stores have house-brand substitutes for every brand-name item. All stores have all items in stock. Shoppers are purchasing only one of each item. No item costsmore than $499.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your output should consist of a series of lines corresponding to the shoppers in the same order they appear inthe input. Each line should contain the name of the shopper starting in the first column, a space, the name of the recommended store, a space, and the total amount of money needed printed in dollars and cents (including the leadingdollar sign). Since the stores appear in the list in distance order from the campus, if multiple stores offer the same net total price, recommend the store that appears earliest in the list.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 
Y Vons 
Y Ralphs 
N Wal-Mart 
Ragu,1.69,1.48,1.79,1.39,1.64,1.38 
Pepsi,2.99,1.99,2.99,2.49,2.99,1.59 
Cheetos,1.59,1.39,1.69,1.39,1.69,1.29 
Cheerios,3.99,2.99,3.79,2.79,3.59,2.99

*Joe 
Ragu,Y,Y,N,.25 
Pepsi,Y,N,N 
Cheetos,N,N,N,.35 
Cheerios,Y,Y,Y 
*Mary 
cheetos,N,Y,N,.35 
cheerios,Y,Y,Y,1.00 
ragu,Y,N,N
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Joe Vons $7.06 
Mary Vons $4.36
</PRE> 

<P>

______________________________________________________
3443||||||false||||||
<P>
You are working for a major credit card company. Your group maintains the software that approves or declinescustomer applications for credit. For many years the trusty mainframe called ``Big Momma" has worked day and night processing credit card applications for the company. But she has become ill, and since she was built over thirty yearsago, spare parts are not available. Your job is to reproduce the algorithms and code that ``Big Momma" used in a modern programming language, using a modern computer system.

<P>
The only code that is available on ``Big Momma" is compiled COBOL, so you will have to rely on the businesspolicy makers for the current credit card policies. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input is a nightly batch file that contains customer information and scores from three credit bureaus, one application per line. Each line is supposed to be in the following format: 

<P>

<P>
<BR>

<TABLE COLS=4>
<COL ALIGN=LEFT><COL ALIGN=RIGHT><COL ALIGN=LEFT><COL ALIGN=JUSTIFY WIDTH="3in">
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN  CLASS="textbf">Field Name</SPAN> </TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> <SPAN  CLASS="textbf">Bytes</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN  CLASS="textbf">Field Type</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216"> <SPAN  CLASS="textbf">Comments</SPAN> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
First Name </TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 1-12 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Alphanumeric </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216"> No leading white space. Other non-alphanumeric characters in the name are part of the name and should remain. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
Last Name </TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 13-30 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Alphanumeric </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216"> No leading white space. Other non-alphanumeric characters in the name are part of the name and should remain. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
Address, city, state, zip code </TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 31-71 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Alphanumeric </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216"> With comma separators. Each separated field does not have leading white space.

<P>
The address may contain non-alphanumeric characters, including embedded spaces. 

<P>
The city may contain embedded spaces. 

<P>
The state is an alphabetic two byte field. 

<P>
The zip code is a numeric five byte field. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Social Security Number </TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 72-80 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Numeric </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Credit Bureau 1 </TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 81-83 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Numeric </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216"> Valid range is 200-800. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
Credit Bureau 2 </TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 84-86 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Numeric </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216"> Valid range is 200-800. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
Credit Bureau 3 </TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 87-89 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Numeric </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216"> Valid range is 200-800. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
A semicolon </TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP> 90 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Literal semicolon </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="216"> This is the last character on the line.

<P>
It is followed by a newline. </TD></TR>
</TABLE>


<P>

<P>
<BR>
The business rules you should use to determine if an application is approved or denied, in order of precedence,are: 

<P>
<DL COMPACT>
<DT>1.</DT>
<DD>If any field is empty (null or all white space), the application is declined. 
</DD>
<DT>2.</DT>
<DD>If any field does not follow the valid format listed above, the application is declined. 
</DD>
<DT>3.</DT>
<DD>If any Credit Bureau score is below 400 the application is declined. 
</DD>
<DT>4.</DT>
<DD>If the mean of the credit scores is below 500 the application is declined.
</DD>
</DL>

<P>
If none of the above rules apply the application is approved.

<P>
As soon as an application fails a business rule that application is declined. White space for ``Big Momma" wasonly spaces. The input will not contain other white space characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Print the following information for each application on a new line: 

<P>

<P>
<BR>

<TABLE COLS=3>
<COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
Bytes 1-15 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> A sequential numeric identifier in the following format:</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Bytes 1-4    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Current Year in YYYY format </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Bytes 5-6   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   Current Month in MM format </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Bytes 7-8   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>   Current day of the current month in DD format </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Bytes 9-15   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  A sequential number starting at 0. All bytes 9-15 must be numeric. </TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Fill spaces with zeroes. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
Bytes 16-24 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> Social Security Number</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Bytes 25-36 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> First Name</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Bytes 37-54 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> Last Name</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Bytes 55-62 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> Either ``Approved" or ``Declined" depending on the Business Rules above</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Byte 63 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> A numeric reason for the rejection: use the numbers 1, 2, 3 or 4</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> corresponding to the business rule which is the cause of the rejection.</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> If the application is accepted this field is blank.</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Bytes 64-79 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> Blank</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Byte 80 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2> Semicolon</TD></TR>
</TABLE>


<P>

<P>
<BR>
Print the Social Security Number, First Name, and Last Name exactly as you received them.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
John        Smith             55512 Main Street,Smallville,OK,22334    790000001578600778;
Jane        Doe               10202 apt #11 beach road,Blythe,CA,90120 790000002455489505;
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
200511130000000790000001John        Smith             Approved                 ; 
200511130000001790000002Jane        Doe               Declined4                ;
</PRE> 

<P>

______________________________________________________
3444||||||false||||||
<P>The power mean <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> numbers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is defined as<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="19" HEIGHT="70" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$\displaystyle \left(\vphantom{\frac{1}{n} \sum^{N}_{i=1}(X^{P}_{i}) }\right.$"><IMG WIDTH="19" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$\displaystyle {\frac{{1}}{{n}}}$"><IMG WIDTH="27" HEIGHT="70" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$\displaystyle \sum^{{N}}_{{i=1}}$">(<I>X</I><SUP>P</SUP><SUB>i</SUB>)<IMG WIDTH="44" HEIGHT="79" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$\displaystyle \left.\vphantom{\frac{1}{n} \sum^{N}_{i=1}(X^{P}_{i}) }\right)^{{1/P}}_{}$"></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is a real number and the <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> are real numbers <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$ \ge$"> 0</SPAN> <tex2html_verbatim_mark>.<P><SPAN CLASS="MATH"><I>P</I> = 1</SPAN> <tex2html_verbatim_mark> is the familiar average or mean, <SPAN CLASS="MATH"><I>P</I> = - 1</SPAN> <tex2html_verbatim_mark> is the harmonic mean, <SPAN CLASS="MATH"><I>P</I> = 2</SPAN> <tex2html_verbatim_mark> is the quadratic or root mean square. <SPAN CLASS="MATH"><I>P</I> = 0</SPAN> <tex2html_verbatim_mark> is the geometric mean, but this requires taking limits or using the more familiar product representation.<P>Your team is to write a program that will compute the power mean for given values of <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program will be a series of test cases, one test case per line. Each line has a series of real numbers separated by whitespace. The first number is <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, . <SPAN CLASS="MATH">5<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$ \le$">| <I>P</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>. The rest of the numbers are the <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$ \le$"><I>X</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3444img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the power mean <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> starting in the first column, rounding to 3 places after the decimalpoint. Add a leading zero only if the result is <SPAN CLASS="MATH">&lt; 1</SPAN> <tex2html_verbatim_mark>, as in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
-1.0 4.3 10.18 37.0 5.0 83.5 64.1 5 72.62 
1.0 4.3 10.18 37.0 5.0 83.5 64.1 5.0 72.62 
0.5 4.3 10.18 37.0 5.0 83.5 64.1 5.0 72.62 
-0.5 4.3 10.18 37.0 5.0 83.5 64.1 5.0 72.62 
10.0 4.3 10.18 37.0 5.0 83.5 64.1 5.0 72.62 
4.0 0.0 
5.0 0.0 1.4 47.7 9.13 9.8 2.83 61.31 
-3.7 2.83 1.1 2.11 6.90 41.0 7.7 0.01 31.6 83.73
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10.010 
35.213 
26.891 
13.149 
69.727 
0.000 
43.683 
0.018
</PRE><P>
______________________________________________________
3445||||||false||||||
<P>The mean of a list of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> real numbers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is defined as:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="24" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3445img1.png ALT="$\displaystyle {\frac{{1}}{{N}}}$"><IMG WIDTH="27" HEIGHT="70" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3445img1.png ALT="$\displaystyle \sum^{{N}}_{{i=1}}$"><I>X</I><SUB>i</SUB></DIV><P><tex2html_verbatim_mark></P><P>The median of a sorted list of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> real numbers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is defined as:<P><UL><LI>If <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is odd: <SPAN CLASS="MATH"><I>X</I><SUB>(N+1)/2</SUB></SPAN> <tex2html_verbatim_mark> </LI><LI>If <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is even: <SPAN CLASS="MATH">(<I>X</I><SUB>N/2</SUB> + <I>X</I><SUB>(N/2)+1</SUB>)/2</SPAN> <tex2html_verbatim_mark> </LI></UL><P>In a recently published paper, H. Schultz and R. Shiflett have discovered that given a list of real numbers, if you add a number to the list such that the mean of the new list is equal to the median of the previous list, and then repeat the process, eventually the mean and median become and remain the same. They call these <SPAN CLASS="textit">M<SPAN CLASS="MATH">&amp;</SPAN> <tex2html_verbatim_mark>m sequences</SPAN> and the finalvalue the <SPAN CLASS="textit">stable</SPAN> value. The <SPAN CLASS="textit">length</SPAN> of the sequence is defined as the length of the sequence after the first calculated stable value has been added.<P>For example: given the initial list [5 17 23], the list with the first calculated stable value is [5 17 23 23 32 38 23] with a length of 7. <P>Your team's job is to develop a program to investigate these sequences. The program will be given a series of cases that consist of an upper limit on sequence length and an initial list of real numbers. For each case, the program must determine the mean and median values of the initial list. If they are not the same, find the real number that when added to the list will make the mean of the extended list equal to the previously found median. Add that number to the list and repeat unless adding another number would make the length of the list exceed the limit. If the mean and median are the same, add the stable value to the list and report the length of the extended list.<P>For this program, use floating point numbers and consider <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> to be equal if <!-- MATH
 $|a - b| < 10^{-8}$
 --><SPAN CLASS="MATH">| <I>a</I> - <I>b</I>| &lt; 10<SUP>-8</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program will be a series of test cases, one test case per line. Each line will contain a series of numbers separated from each other by white space. The first number is the length limit as an integer <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 < l \le 100$
 --><SPAN CLASS="MATH">0 &lt; <I>l</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3445img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, and the remaining numbers are the elements of the initial list as real numbers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3445img1.png ALT="$ \le$"><I>X</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3445img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. The line will be at most 80 characters in length.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, if the length of the M<SPAN CLASS="MATH">&amp;</SPAN> <tex2html_verbatim_mark>m sequence does not exceed the limit, your program is to print the length of the M<SPAN CLASS="MATH">&amp;</SPAN> <tex2html_verbatim_mark>m sequence starting in the first column. If it does exceed the limit, print ``<SPAN CLASS="MATH">&gt; <I>l</I></SPAN> <tex2html_verbatim_mark>" starting in the first column, where <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> is the limit for the test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 5.0 17 23 
14 6 46 78 
15 78 6 46 
100 5 5.5 33.9 
5 17.4 17.4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 
>14 
15 
73 
3
</PRE><P>
______________________________________________________
3446||||||false||||||
<P>Many new automobiles have built-in fuel consumption meters that report how far the vehicle can travel beforerunning out of fuel (the <SPAN CLASS="textit">distance to empty</SPAN>, or <SPAN CLASS="textit">DTE</SPAN>) based upon the car's current gas mileage (miles per gallon).Unfortunately, older cars have only an odometer and a fuel gauge. An upstart PDA maker has contracted your team to write a program that can report the same information for older cars based upon the most recently computed gas mileage.Instead of a real-time display of distance to empty, your program needs to report the odometer reading at which the gas tank is expected to be empty.<P>To predict an odometer reading, the driver must enter information in the PDA about the odometer reading andquantity of fuel purchased when refueling. Because there is no fuel consumption meter to compare against an odometer, the only accurate way to compute gas mileage is between fill-ups. Furthermore, the driver is not expected to know thecapacity of the fuel tank-your program must infer the tank capacity by tracking refuelings and observing the greatest amount of fuel purchased in a single refueling up through the current time.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program is a log of PDA entries, with one line per refueling. Each line contains four values separatedby whitespace: the date (in the form dd-Mon-yyyy), the amount of gas purchased (a floating point constant), the cost of the fuel in dollars and cents (a floating point constant), and the integer odometer reading. If the tank was refueled tocapacity, the odometer reading is a positive value. If the gas tank was not topped off, the odometer reading is recorded as a non-positive number. You do not have to worry about the odometer either starting at zero or rolling over throughzero: those features are deferred until the release of the more costly deluxe version of your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to print a series of lines representing fuel purchase dates and the PDA's predicted DTE odometerreading as of those dates. For each PDA entry, print a line containing the date, a single space, and the predicted empty-tank odometer reading, rounded to the nearest mile. When there is insufficient information to predict a DTEodometer reading, print the phrase ``<TT>watch the fuel gauge</TT>" in place of a value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
01-Nov-2004 10.001 30.05 -123456 
07-Nov-2004  9.723 29.95 -123803 
16-Nov-2004 11.234 35.82  124225 
24-Nov-2004  2.001  5.00 -124320 
26-Nov-2004 10.994 35.27  124772 
30-Nov-2004  4.522 15.14 -125172 
04-Dec-2004 13.670 34.95  125388
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
01-Nov-2004 watch the fuel gauge 
07-Nov-2004 watch the fuel gauge 
16-Nov-2004 watch the fuel gauge 
24-Nov-2004 watch the fuel gauge 
26-Nov-2004 125245 
30-Nov-2004 125435 
04-Dec-2004 125851
</PRE><P>
______________________________________________________
3447||||||false||||||
<P>As part of the discovery process for a lawsuit your organization must produce old instrument data collection files.Your team is making the first pass looking for and validating files that are of interest to the attorneys. Unfortunately, some of these files are over twenty years old, and they reside on 160KB floppies in proprietary SwampOS 1.0 format.The good news is that a data conversion company has been able to read them and deliver each floppy as a 163840 byte binary file. Here are the details of these images.<P>The floppy image consists of 160 Allocation Units (ALUs) of 1024 bytes each, numbered 0 through 159. ALU 0has boot information and is not of interest. ALUs 1 and 2 contain the directory consisting of 64 32 byte extents. ALUs 3-159 contain file data.<P>There are three types of extents: free, directory, and allocation. The type is determined by byte 0: <TT>0</TT> means free,<TT>1</TT> means allocation, and <TT>2</TT> means directory.<P>Allocation extent format:<P><PRE>
1Laaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
</PRE><P>Directory extent format:<P><PRE>
2LSsnnnnnnnnnnnnnnnnnnnnnnnnnnnn
</PRE><P>The letters in the above format tempates are defined as follows:<P><DL COMPACT><DT><SPAN CLASS="textbf">L</SPAN>:</DT><DD>extent number (0-63) of the next extent on an allocation chain or the first in the chain in the directory extentcase. The chain is terminated by 255. The first ALUs of the file are in the first allocation extent followed by those in the next links.</DD><DT><SPAN CLASS="textbf">a</SPAN>:</DT><DD>the allocation units of the file from earlier to later order in the low to high order bytes of the extent. If theextent is not full, it is terminated by 255.</DD><DT><SPAN CLASS="textbf">S</SPAN>:</DT><DD>the high order byte of the amount of data in the last file ALU.</DD><DT><SPAN CLASS="textbf">s</SPAN>:</DT><DD>the low order byte of the amount of data in the last file ALU.</DD><DT><SPAN CLASS="textbf">n</SPAN>:</DT><DD>the file name, a zero-byte-terminated string.</DD></DL><P>Note that a file of 0 length will have no allocation extents.<P>Here is a hex dump of the start of ALU 1 of a floppy image:<P><PRE>
000 0201004774666f6f0000000000000000 00000000000000000000000000000000 
020 01ff03ff000000000000000000000000 00000000000000000000000000000000 
040 02030012746261636b75700000000000 00000000000000000000000000000000 
060 01ff04ff000000000000000000000000 00000000000000000000000000000000 
080 02050400747465737400000000000000 00000000000000000000000000000000 
0a0 01ff0506ff0000000000000000000000 00000000000000000000000000000000 
0c0 0207039d66702e706466000000000000 00000000000000000000000000000000 
0e0 01080708090a0b0c0d0e0f1011121314 15161718191a1b1c1d1e1f2021222324 
100 010925262728292a2b2c2d2e2f303132 333435363738393a3b3c3d3e3f404142 
120 010a434445464748494a4b4c4d4e4f50 5152535455565758595a5b5c5d5e5f60 
140 010b6162636465666768696a6b6c6d6e 6f707172737475767778797a7b7c7d7e 
160 01ff7f808182838485868788898a8b8c ff000000000000000000000000000000 
180 00000000000000000000000000000000 00000000000000000000000000000000
</PRE><P>The files you are looking for are ASCII text files which contain only the printing characters <SPAN CLASS="MATH">21<SUB>16</SUB></SPAN> <tex2html_verbatim_mark>-7E<SPAN CLASS="MATH"><SUB>16</SUB></SPAN> <tex2html_verbatim_mark> and thewhitespace characters <SPAN CLASS="MATH">20<SUB>16</SUB></SPAN> <tex2html_verbatim_mark>, 0A<SPAN CLASS="MATH"><SUB>16</SUB></SPAN> <tex2html_verbatim_mark>, and 0D<SPAN CLASS="MATH"><SUB>16</SUB></SPAN> <tex2html_verbatim_mark>.<P>Each desired instrument data collection file contains a series of whitespace delimited items. The first three itemsare strings representing a controller ID, a date, and a sequence ID. The instrument data follows as a series of unsigned integers without leading zeroes. Valid files end with the end-of-data indicator ``<SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>" and the count of data points as aninteger. Note that an incorrect count is not to be considered a format error. The following example would be a valid data collection file:<P><PRE>
swamptron415 3/18/82 run0132 1245 33478 
1487 3224 1087 # 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Your program will be given a 160KB binary floppy image on standard input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Your program should print one line for each file in the order it appears in the directory. For each file that is in theproper format as described above print the filename, one space, the size of the file in bytes, one space, the first 3 items in the file separated from each other by single spaces, one space, the number of data items seen, one space, and thecount at the end of the file.<P>If the format is incorrect, print the name, one space, the size of the file in bytes, one space, and the word ``fail".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P>The sample input for this problem is available as <SPAN CLASS="textit">sample6.inp</SPAN>. You may use the <SPAN CLASS="textit">xxd</SPAN> command to display and edit the contents of a binary file as hexadecimal bytes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
test40.dat 614 bison 3-18-82 45 98 99 
work87.run 680 fail
wiffle.test 680 fail 
tryagain 30721 fail 
melvin-project 623 bear 5/13/84 x278 100 100 
wonder bar.run 50184 abstest 4-sep-83 r23a 8375 8375 
zoomdata 30720 fail 
firstdata.dat 1024 fail 
test32.dat 6013 pentagon 4/1/80 37 1001 1001 
calibrate 0 fail 
error.txt 71 fail
</PRE><P>
______________________________________________________
3448||||||false||||||
<P>The gameboard shown in Figure 7-1 is a regular grid of equilateral triangles. Two players take turns drawingline segments that connect any two neighboring vertices on the grid. When a player completes one of the equilateral triangles, that player receives a point for that triangle (Figure 7-2). If the player completes two triangles with a singlesegment, the player receives a point for each triangle (Figure 7-3). Points are awarded as triangles are completed. A game is completed when all segments on the grid have been drawn. The game is also subject to the following additionaldefinitions and constraints:<P><DL COMPACT><DT>1.</DT><DD>The starting gameboard will always have the shape of an equilaterial triangle itself; also, it will not have missingor extra vertices or line segments.</DD><DT>2.</DT><DD>A vertex is a neighbor of another vertex if a gridline connects the two vertices and no vertices lie between them.</DD><DT>3.</DT><DD>The vertices on the gameboard are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, where 1 is the topmost vertex and the remaining rowsare numbered successively from left to right within a row through the last vertex <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (Figure 7-1).</DD><DT>4.</DT><DD>A line segment may not connect two vertices that are not neighbors.</DD><DT>5.</DT><DD>A player may draw only a single line segment per turn.</DD><DT>6.</DT><DD>A given segment may be used (drawn) only once.</DD><DT>7.</DT><DD>Points are awarded when a line segment a player draws completes one or more of the smallest equilateral triangleson the grid.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will take as input the size of the gameboard, the number of moves for a single game, and the series of moves for that game. The first line of input will contain the size, which represents the number of segments along one edge of the gameboard. The size will be expressed as an integer between 3 and 60. The second line of input willcontain the number of moves for the game, expressed as a positive integer. The remaining lines of input contain the moves in order, one move per line. Each move is represented by a pair of integers that are the starting and endingvertices (in that order) of the line segment drawn by a player for a given turn. For convenience, we'll refer to the first player to move as Player A and the second as Player B. The moves will be legal according to the rules stated above,but they may or may not form a complete game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to calculate the scores of Player A and Player B as of the last move and print Player A's scorefollowed by Player B's score. Print the scores as integers separated by one space on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
16 
1 2 
5 3 
2 4 
8 5 
7 4 
8 12 
7 11 
17 12 
10 14 
14 20 
15 20 
10 15 
14 15 
2 3 
1 3 
5 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 1
</PRE><P>
______________________________________________________
3449||||||false||||||
<P>When the <EM>Tattler</EM> introduced a Sudoku puzzle in their ``Entertainment Section" (do they have anything else in their so-called newspaper?), Eliza Hargroves, editor-in-chief of the <SPAN CLASS="textit">Informer</SPAN>, was understandably upset. She had beencontemplating adding one to her own ``Amusements" section, but her motto is ``the <SPAN CLASS="textit">Informer</SPAN> always leads", and howcould she lead in Sudoku when the <SPAN CLASS="textit">Tattler</SPAN> had already beat her to it?<P>Then the thought struck her-Sudoku is based on three-by-three squares of three-by-three squares. If the <SPAN CLASS="textit">Informer</SPAN> came up with a puzzle based on four-by-four squares of four-by-four squares, it would be bigger and better than Sudoku, and put the <SPAN CLASS="textit">Informer</SPAN> firmly in the lead.<P>Naming her new puzzle ``4square", she asked a friend at the local university to work out the details and providesome sample puzzles for the paper. A week or so later, he delivered the puzzles and promptly left on an extended visit to his family's ancestral home in some remote part of Africa.<P>He left her enough puzzles and solutions for all the time he would be away, but didn't provide any guide to howdifficult the puzzles were. That's where your team comes in. Your task is to write a program that will read a 4square puzzle and determine whether it is easy, moderate or hard.<P>The rules are similar to Sudoku. You are given a 16-by-16 grid of squares that is subdivided into a 4-by-4 grid ofboxes containing 4-by-4 grids. A number of the squares have hexadecimal digits in them (one of ``0", ``1", ``2", ``3", ``4", ``5", ``6", ``7", ``8", ``9", ``A", ``B", ``C", ``D", ``E" or ``F"). To solve the puzzle, a hexadecimal digit must be placed ineach of the remaining squares, so that only one of each digit appears in every row, column or 4-by-4 box. Each puzzle has a unique solution.<P>Three puzzle solving rules can be derived directly from the basic puzzle rules. If a square has a digit assigned toit, then no other square in the row, column or box that the square is in can be assigned the same digit. If, through the application of the other rules, there is only one digit that can be assigned to a square, then it must be assigned to thatsquare. If, through the application of the other rules, only one square in a row, column or box can be assigned a certain digit, then it must be assigned that digit, no matter how many other digits seem to be possible for that square. A puzzlethat can be solved by applying these rules is considered easy.<P><P><BR>Working with these puzzles, further rules can be deduced.<P>One can be called the rule of exclusive shares. A row or column shares four different squares with each of the fourboxes it crosses. If, through applying the rules, a certain digit can appear in a row or column only in the squares shared with a single one of the boxes, then that digit cannot appear in any other squares in that box, since if it did, there wouldbe no square in that row or column where that digit could appear. Similarly, if a digit can only appear in a certain row or column in a box, it cannot appear in any other box along that row or column in the puzzle.<P>Another rule can be called the rule of cliques, since it's used to throw out squares or digits that are not in the clique. If two squares in a row, column or box have only two digits that they could contain, then those digits cannot appear in any other square in that group, since, if it did, you would be left with two squares in the group that must be assigned the same digit. Similarly, if there are two digits that can only be placed in either of the same two squares, then no other digits could appear in either of those squares, since, if they did, there would be no square in the group to place one ofthose two digits. This rule can be extended to cliques of more than two squares or digits. Note that, with more than two squares or digits, not all of the digits need to be possible in all of the squares in the clique. A square with 0 and 1as possibilities, another with 1 and 2, and another with 0 and 2 could form a clique of three, if the other requirements are met. Note also that the two rules for finding cliques are exclusive. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> digits must only be possible in <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> squares, or <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> squares must only have <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> possible digits. If it appears that one of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> squares can have a digit that's not in the clique and one of the digits in the clique can appear in a square that's not in the clique, then, if it's a clique at all, it's a clique of more than <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> members.<P>Puzzles that require the application of these two additional rules are considered moderate, while puzzles that cannot be solved using any of these rules, but must be solved using more complex rules, or through guessing and backtracking if the guess was wrong, are considered hard.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input will be read from the standard input stream, and will contain some number of puzzles terminated byend-of-file. Each puzzle will contain 16 lines of 16 characters each. Each character will be either a hexadecimal digit to indicate the value of the corresponding square, or a period (<TT>.</TT>) for a square whose value must be solved. Puzzles will be separated from each other by a single empty line. A single newline character will immediately follow the last character (if any) in each line, terminating it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your output will consist of the solved puzzles, 16 lines of 16 characters each. Each solved puzzle is to be followedby a line containing the word `<TT>easy</TT>', `<TT>moderate</TT>' or `<TT>hard</TT>' starting in the first column, based on the difficulty as determined by your program. This will be immediately followed by the next puzzle, if any, with no blank lines separating them. Hard puzzles should not be completely solved - just output periods for the squares that could not be solved using the given rules.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
C....5...D.07... 
E8A7.61....9.C.0 
..9.7..CA.4....D 
..F239.0.....5.. 
.FE....6....D27. 
.5..8.4.1....E03 
.9...A..8....... 
6..120.34.E....9 
8....C.F9.5A4..B 
.......8..2...3. 
B31....E.8.6..C. 
.DC0....3....78. 
..D.....2.63F4.. 
F....3.4E..B.9.. 
1.8.9....40.63B2 
...EB.C...7....5

6.3A...1D....9.. 
8D..0.F7...2C..1 
..7.....1..A.BD. 
....3..BCE0.7A.. 
C5B....F..D6.24E 
.....6.....1.D8B 
.....4....7F.... 
1ED3C..5.0...7.. 
..5...2.8..3B01A 
....B7....6..... 
9BF.4.....E..... 
42A.E9..B....536 
..42.E796..0.... 
.A1.6..0.....4.. 
0..DF...58.9..E7 
..E....87...56.2

5...A...3.C..... 
..7..C.8.2...4.9 
E49.....5B..3D8. 
...0...791..2... 
8163.0.D7....... 
.C..35....0B.... 
...2..8E.C.A.15. 
4.....A.E.1.7..6 
9..A.3.5.8.....4 
.0B.E.C.16..5... 
....42....B3..9. 
.......90.4.CAE7 
...9..538...F... 
.50E..7A.....9CD 
2.A...B.C.E..7.. 
.....4.6...1...3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
C....5...D.07.9. 
E8A7.61D...9.C.0 
..9.7..CA.4....D 
D.F239.0.....5.. 
.FE8C..6...5D27. 
.5..8.4.16...E03 
.9...A..8....... 
6..120.34.E....9 
8..6.C3F9.5A4..B 
.......8..2...3. 
B31....E.8.6..C. 
.DC0....3....78. 
..D.....2.63F4.. 
F....3.4E..B.9.. 
1.8.9....40.63B2 
...EB.C..97....5 
hard 
6C3A85E1D7FB4920 
8D9B0AF74632CE51 
507E2C64198AFBD3 
F1243D9BCE057A68 
C5B7980F3AD6124E 
A40F763E2C519D8B 
296814ADEB7F03C5 
1ED3C2B5904867AF 
E75CDF268493B01A 
D381B75A026CEF94 
9BF64013A5ED287C 
42A0E98CBF17D536 
38425E7961B0ACFD 
7A1563C0FD2E84B9 
06CDFB4258A931E7 
BFE9A1D873C45602 
easy 
528FA94B30CD6E71
6D715C38F2AE04B9 
E49C01F25B763D8A 
BA30D6E7918425FC 
8163B09D7F25AC4E 
ACE73514690B82DF 
0FD2678E4C3A915B 
495B2FACED187036 
9E2A7305D8FC1B64 
D0B4EACF16975328 
78C54261AEB3DF90 
F3168BD90542CAE7 
1B49CE5387D0F6A2 
350E187A246FB9CD 
26A8FDB0C3E94715 
C7FD9426BA51E803 
moderate

______________________________________________________
3450||||||false||||||
<P>Recently the ACM (Advanced Component Manufacturer) plans to develop a novel pizza maker machine named IPM (Iterating Pizza Maker). An IPM is composed of several components which are connected by tunnels. Tunnels are unidirectional. There are three kinds of tunnels, material tunnel (MT), intermediate tunnel (IT), and product tunnel (PT). Materials enter IPM from MTs and flow by the ``path" of IPM. A path is composed of several components and ITs connecting them. And as you can imagine, the ``release edition" of pizza comes out through PTs.<P><DIV ALIGN="CENTER"><IMG WIDTH="892" HEIGHT="370" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3450a.gif ALT="\epsfbox{p3450a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1 basic structure of an IPM</DIV><P>When materials pass through a component, they are transformed and sent to tunnels start from the component (if any). Using the structure above, we can make any kind of pizza we want!<P>For example, if we want to make a hexagonal pizza with pentagonal tomato pieces on it. It's a strange pizza, but we can do it with IPM. Now, we assemble an IPM like this:<P><DIV ALIGN="CENTER"><IMG WIDTH="856" HEIGHT="348" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3450a.gif ALT="\epsfbox{p3450b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 2 the IPM which makes strange pizzas</DIV><P>Here is the process of making ONE strange pizza mentioned above: One tomato goes into Component A through MT<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>. Component A cuts the tomato into pentagonal pieces and passed them to Component B through IT<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>. Some flour goes into Component B through MT<SPAN CLASS="MATH"><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. Component B mixes flour with water, casts the semi-finished pizza hexagonal, places tomato pieces on it, and sends it into Component C through IT<SPAN CLASS="MATH"><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. Component C is actually an oven and the finished pizza is sent out through PT. Accordingly, if we put N tomatoes into MT<SPAN CLASS="MATH"><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, we can produce N strange pizzas.<P>Assembling IPM costs lots of time, so the ACM plans to release a suit of software which simulates the process of IPM; so that customers can be aware of the behavior of the IPM they are going to assemble and adjust the assemble chart before real assembling.<P><P><P><BR>Now, the ACM asks you, an excellent programmer, to implement the core feature of the software. You are to implement an IPM behavior simulator module. In this problem, you only need to develop the prototype / demo. So, to simplify the problem, we have following definitions:<P><P><BR><SPAN CLASS="textbf">Source</SPAN>: The raw material, denoted by strings containing only letters and spaces.<P><P><BR><SPAN CLASS="textbf">Component</SPAN>: Each component has at least one input end, which connects directly to source or to output end of another component. There is only one output end on each component, which is connected to another component (through IT) or to product outlet (through PT). Each component has a pattern indicating the behavior of that component. Patterns are strings composed of letters, spaces, new-lines and references of input ends. References of input ends are like ``<SPAN CLASS="MATH">{<I>i</I>}</SPAN> <tex2html_verbatim_mark>" (with no additional characters), where <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is the sequence number of input end referenced (starts from 0). References are replaced by objects from corresponding input ends. It's guaranteed that each reference will be unique in the pattern and all references are valid.<P><P><BR><SPAN CLASS="textbf">Component behavior</SPAN>: Suppose a component has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> input ends, <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th input end has <SPAN CLASS="MATH"><I>N</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> objects in it. One output object of that component is the pattern in which references are replaced by one object from corresponding input end. Objects in each input end are fetched one after another by the component until one input end is empty. Objects in one input end are fetched only if that input end is referenced in the pattern of component.<P><P><BR>Sources and Components can be reused, when reused, they are considered as different and independent ones.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is only one test case. The first line is an integer number <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3450a.gif ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3450a.gif ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> indicating the number of source. Then <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> lines follow, <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line denotes materials in <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th source. Materials are separated by only one comma. There will be at most 100 objects in a source.<P>After the source definitions, there is another integer <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3450a.gif ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3450a.gif ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> indicating the number components. Then <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> component definitions follow. Each component is as following:<P><P><BR><!-- MATH
 $<input \ ends>$
 --><SPAN CLASS="MATH">&lt; <I>input</I>&nbsp;<I>ends</I> &gt;</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH">&lt; <I>pattern</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>The definition of one input end is ``<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark><TT>S</TT><SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark><TT>C</TT><SPAN CLASS="MATH">&gt; <I>index</I></SPAN> <tex2html_verbatim_mark>". `<TT>S</TT>' is for source, `<TT>C</TT>' is for component, <SPAN CLASS="MATH"><I>index</I></SPAN> <tex2html_verbatim_mark> starts from 0. For example, `<TT>S0</TT>' denotes the input end is connected to the first source, and `<TT>C3</TT>' denotes the input end is connected to the output end of the fourth component. Input ends are separated by only one space. It's guaranteed that there is no circle in the component graph. There will be at most 100 input ends in a component.<P>The definition of pattern may occupy at most 20 lines. The last line of each pattern is `<TT>###</TT>' and may not be considered as part of pattern.<P>After the component definitions, there is a line specifying the output ends which are connected to product outlet. This line is composed of at most 20 integers separated by only one space. Each integer indicates the corresponding component (starts from 0) which has the output end. It's guaranteed that all these output ends are not connected to other components.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each output end connecting to product outlet, first print a line `<TT>Output of Component #<SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>:</TT>', then print the output of the component. After print each output object, please append a new line character. After each output, please print a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
a,b,c,d
1,2,3,4 
3 
S1 S0 
{0}{1} 
### 
C0 S1 
{0} 
{1} 
### 
C0 S1 S0 
{0}{2} 
### 
2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Output of Component #2: 
1aa 
2bb 
3cc 
4dd 

Output of Component #1: 
1a 
1 
2b 
2 
3c
3 
4d 
4
</PRE><P>
______________________________________________________
3451||||||false||||||
<P>Given <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> strings, you are to calculate the length of their longest common substring.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3451img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3451img1.png ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark> indicating the number of strings in this test case. Then, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> strings will be given in the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines. A string may consist of alphabetic letters and digits only. It is guaranteed that the total length of all strings in each test case is not longer than 100000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the length of the longest common substring in a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
windows 
dog 
commandos
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
3452||||||false||||||
<P>Alice and Bob are friends and they like playing a card game in spare time.<P>The game is very simple. Alice has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> cards in hand, each marked with a unique integer number. Bob knows numbers on the cards are different, but he doesn't know their exact values. When the game starts, Alice takes out a card randomly, shows it to Bob, and then she asks Bob to guess whether it's the one with the largest number. If Bob answers ``yes", the game ends; otherwise, Alice takes out another card at random and repeats this process. If the game reaches the last card, Bob will always answer ``yes".<P>Recently, Bob has designed a good strategy to find out the card with the largest number. In the first <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3452img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3452img1.png ALT="$ \le$"><I>N</I> - 1)</SPAN> <tex2html_verbatim_mark> rounds, he always answers ``no", so that he could examine <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> cards first. Then, when a card whose number is larger than that of all previous cards appears, he answers ``yes".<P>You may have noticed that <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is critical to Bob's strategy. So please choose the optimal <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> for Bob to maximize the probability of getting the card with the largest number. If more than one <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> found, choose the smallest one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases. Each contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3452img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3452img1.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print the optimal <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> in a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
4 
5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
1 
2
</PRE><P>
______________________________________________________
3453||||||false||||||
<P>Steve owns an orchard where he plants some apple trees. In the harvest time there comes a thief who wishes to steal the delicious apples. The thief is very strong, so Steve cannot drive him away. But the thief does not want to hurt Steve, because he just wants the apples.<P>To minimize the number of apples the thief gets, what Steve can do is to pick the apples before the thief steals them or prevent the thief from stealing the apples. It is supposed that Steve and the thief are both highly intelligent. Your job is to calculate how many apples the thief can get.<P>The orchard is modeled by a two-player board game on a 5 by 6 square board. There are three kinds of squares: floor square, apple-tree square and wall square. The orchard has four apple-tree squares, each of which contains one apple tree with exactly three apples. Steve and the thief can locate on either floor square or apple-tree square. But they cannot locate on a square which is already occupied by the other.<P>The simulation begins with a move by the thief, followed with a move by Steve. They move in turn until the thief can not get apple anymore.<P>There are two principles to pick apples:<DL COMPACT><DT>1.</DT><DD>When one arrives at an apple-tree square which has some apples, he can get one apple immediately.</DD><DT>2.</DT><DD>One can stay on an apple-tree square to pick one apple instead of moving to any other square in his turn.</DD></DL><P>In each turn, the thief or Steve located at square <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> can move to the square <SPAN CLASS="MATH">(<I>x</I> + 1, <I>y</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>x</I> - 1, <I>y</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>x</I>, <I>y</I> - 1)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>x</I>, <I>y</I> + 1)</SPAN> <tex2html_verbatim_mark> if the target square is neither a wall square nor occupied by the other guy, or move to <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> in two situations as follows:<P><DL COMPACT><DT>1.</DT><DD>He is on an apple-tree square, no matter whether the apple tree in this square has apple or not.</DD><DT>2.</DT><DD>There is no square to move to. It means all nearby squares <SPAN CLASS="MATH">(<I>x</I> + 1, <I>y</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>x</I> - 1, <I>y</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>x</I>, <I>y</I> - 1)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>x</I>, <I>y</I> + 1)</SPAN> <tex2html_verbatim_mark> are wall squares or have been occupied by the other person.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several scenarios. For each scenario you need to determine how many apples the thief can get. The first line is a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3453img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3453img1.png ALT="$ \le$">17)</SPAN> <tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> scenarios. Each scenario consists of 5 rows and each row consists of 6 characters. There are 5 types of characters {`<TT>.</TT>', `<TT>#</TT>', `<TT>3</TT>', `<TT>S</TT>', `<TT>T</TT>'} describing the orchard board:<P><DL COMPACT><DT>`<TT>.</TT>'</DT><DD>- a floor square</DD><DT>`<TT>#</TT>'</DT><DD>- a wall square</DD><DT>`<TT>3</TT>'</DT><DD>- an apple-tree square</DD><DT>`<TT>S</TT>'</DT><DD>- Steve</DD><DT>`<TT>T</TT>'</DT><DD>the thief</DD></DL><P>There are exactly one `<TT>S</TT>' and one `<TT>T</TT>' in each scenario indicating Steve and the thief's start positions respectively, which must be floor squares at the initial state. In any scenario at least half of all the squares are wall squares. Each scenario, including the last one, ends with a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each scenario, there should be one line of output, indicating how many apples the thief can get.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
T3333. 
#####S 
###### 
###### 
###### 

####.. 
.3.3.. 
33.T.S 
###### 
###### 

##3### 
##.##3 
TS3### 
##.### 
##3###
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9 
12 
0
</PRE><P><P><P><BR><SPAN CLASS="textbf">Tips: </SPAN>Since Steve does his best to minimize the number of apples the thief gets, in some scenarios, the state may loop. Here is an example:<P><DIV ALIGN="CENTER"><IMG WIDTH="165" HEIGHT="188" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3453img1.png ALT="\epsfbox{p3453.eps}"> <tex2html_verbatim_mark></DIV><P>After Steve moved to the `A' square and got all the apples in the square, the best move of Steve is to stay on the `A' square forever. So, the game is over and the output of this scenario is 0.<P>
______________________________________________________
3454||||||false||||||
<P>No doubt Gauss is a great genius in mathematics. He showed an outstanding mathematical talent ever since his childhood. You must have heard of the widespread story about his formula to sum from 1 to 100. Now, I will tell you another story about Gauss when he was in high school.<P>One day, after a math class, the teacher assigned the following homework to all students.<P><P><P><BR><B>Problem:</B><P>Suppose we denote the set <SPAN CLASS="MATH">{1, 2, 3, 4,..., <I>N</I>}</SPAN> <tex2html_verbatim_mark> as Q, and the empty set <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3454img1.png ALT="$ \emptyset$"></SPAN> <tex2html_verbatim_mark> as Y. And given <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> subsets of Q, denoted as A, B, C, ...in order. The task is to calculate the number of collections of subsets which conform to some constraints. The pattern of constraint is:<P><P><BR>Constraint ::= Constraint1 <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> Constraint2<P>Constraint1 ::= TSet(`<TT>+</TT>' TSet)* = Q (`<TT>+</TT>' represents union of two sets)<P>Constraint2 ::= TSet(`<TT>*</TT>' TSet)* = Y (`<TT>*</TT>' represents intersection of two sets)<P>TSet ::= A<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>B<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>C<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>...<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>P<P><P><BR>Gauss thought two minutes and then got the answer. Now it's time for you who are as clever as Gauss to solve this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases. The first line of each test case contains three non-negative integers: <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3454img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3454img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3454img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3454img1.png ALT="$ \le$">16)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3454img1.png ALT="$ \le$"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3454img1.png ALT="$ \le$">16)</SPAN> <tex2html_verbatim_mark>. Then <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> lines follow, each gives a constraint.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print one integer representing the number of qualified collections of subsets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 4 2 
A+B+C+D=Q 
A*B*C=Y
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
169
</PRE><P><P><P><BR><SPAN CLASS="textbf">Tips: </SPAN><P>A = {1}, B = {1, 2} and A = {1, 2}, B = {1} are considered as two different collections of subsets.<P>
______________________________________________________
3455||||||false||||||
<P>While teamwork becomes an important part of the world, computers are eager to work together to execute a program collaboratively. Despite lots of libraries for designing parallel programs, programmers still need an automatic program parallelizing tool for those old programs written sequentially. How can the tool be built? The Automatic Computing Machinery (ACM) employs you to help them.<P>At first we define some terminologies. Let <SPAN CLASS="MATH"><I>IN</I>(<I>x</I>)</SPAN> <tex2html_verbatim_mark> be the collection of input variables of statement <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>OUT</I>(<I>x</I>)</SPAN> <tex2html_verbatim_mark> be the collection of output (left value) variables of statement <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. For simplicity, <SPAN CLASS="MATH"><I>a</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \in$"> <I>IN</I>(<I>x</I>)</SPAN> <tex2html_verbatim_mark> even when statement <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>b</I> = <I>a</I> - <I>a</I></SPAN> <tex2html_verbatim_mark> . If statement <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is written prior to statement <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, then we say <SPAN CLASS="MATH"><I>x</I> &lt; <I>y</I></SPAN> <tex2html_verbatim_mark>. Binary relation between two statements <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> are defined by the rules below.<P>Given a variable <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>, statement <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> depends on statement <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> if and only if<P><P><!-- MATH
 \begin{displaymath}
V \in IN ( x ), V \in OUT ( y ), y < x
\end{displaymath}
 --></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>V</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$\displaystyle \in$"> <I>IN</I>(<I>x</I>), <I>V</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$\displaystyle \in$"> <I>OUT</I>(<I>y</I>), <I>y</I> &lt; <I>x</I></DIV><P><tex2html_verbatim_mark></P><P><P><!-- MATH
 \begin{displaymath}
\mbox{OR} V \in OUT ( x),V \in IN ( y ), y < x
\end{displaymath}
 --></P><DIV ALIGN="CENTER" CLASS="mathdisplay">OR<I>V</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$\displaystyle \in$"> <I>OUT</I>(<I>x</I>), <I>V</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$\displaystyle \in$"> <I>IN</I>(<I>y</I>), <I>y</I> &lt; <I>x</I></DIV><P><tex2html_verbatim_mark></P><P><P><!-- MATH
 \begin{displaymath}
\mbox{OR} V \in OUT ( x),V \in OUT ( y ), y < x
\end{displaymath}
 --></P><DIV ALIGN="CENTER" CLASS="mathdisplay">OR<I>V</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$\displaystyle \in$"> <I>OUT</I>(<I>x</I>), <I>V</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$\displaystyle \in$"> <I>OUT</I>(<I>y</I>), <I>y</I> &lt; <I>x</I></DIV><P><tex2html_verbatim_mark></P><P><P><BR>If we treat each statement as a node, and add an edge from <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> depends on <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, we will obtain a DAG (easy to prove). Moreover, if there are edge <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> and edge <SPAN CLASS="MATH">(<I>y</I>, <I>z</I>)</SPAN> <tex2html_verbatim_mark>, edge <SPAN CLASS="MATH">(<I>x</I>, <I>z</I>)</SPAN> <tex2html_verbatim_mark> is no longer needed whatever <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> depends on <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. The DAG indicates each node can start running only when all nodes connected to it completed (zero-degree nodes can run immediately when program starts). The DAG could be called Concurrent Control Flow (CCF). In this way, CPUs know how to collaborate with each other while they choose independent nodes for running. Figure 1 depicts the CCF of statements below.<P><DIV ALIGN="CENTER"><IMG WIDTH="382" HEIGHT="343" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="\epsfbox{p3455a.eps}"> <tex2html_verbatim_mark></DIV><DIV ALIGN="CENTER"><TABLE COLS=6><COL ALIGN=RIGHT><COL ALIGN=JUSTIFY WIDTH="1in"><COL ALIGN=RIGHT><COL ALIGN=JUSTIFY WIDTH="1in"><COL ALIGN=RIGHT><COL ALIGN=JUSTIFY WIDTH="1in"><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>o:</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72"><SPAN CLASS="MATH"><I>t</I> = 1</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>p:</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72"><SPAN CLASS="MATH"><I>a</I> = 0</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>q:</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72"><SPAN CLASS="MATH"><I>b</I> = <I>a</I> + 1</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>r:</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72"><SPAN CLASS="MATH"><I>c</I> = <I>a</I> - 2</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>s:</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72"><SPAN CLASS="MATH"><I>d</I> = <I>b</I> + 2</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>t:</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72"><SPAN CLASS="MATH"><I>a</I> = <I>b</I> + 1</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>u:</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72"><SPAN CLASS="MATH"><I>e</I> = <I>c</I> - 1</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>v:</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="72"><SPAN CLASS="MATH"><I>f</I> = <I>b</I> - 1</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>w:</TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="92"><SPAN CLASS="MATH"><I>g</I> = <I>e</I> + <I>f</I> + 5</SPAN> <tex2html_verbatim_mark></TD></TR></TABLE></DIV><P>However, not all CCF can be tree-like represented, which means impossible representation of XML; To take advantage of XML for data interchange, we need a way to refactor CCF to make them fit for XML serialization.<P>We introduce a pair of nodes to embrace concurrent branches, we denotes it as <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \varepsilon$"></SPAN> <tex2html_verbatim_mark> node. In this way, programs are concreted by the composition of two elements: <SPAN CLASS="textit">sequence</SPAN> and <SPAN CLASS="textit">branch(s)</SPAN>, both elements can contain each other as child elements. <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \varepsilon$"></SPAN> <tex2html_verbatim_mark> pair hold positions of the start and the end of concurrent branches. We name the structure that mixes such two elements as Serializable Concurrent Control Flow (SCCF). It's easy to serialize SCCF into XML, so you need to translate CCF to its equivalent SCCF.<P>SCCF is a structure type similar with tree, it has a single root node and each non- <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \varepsilon$"></SPAN> <tex2html_verbatim_mark> node has only one parent. We define the collection of nodes contained in the path from node <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> to the root as COVER(<SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>), define the collection of the dependents of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> as DEPENDENT(<SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>).<P>Let <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> be the collection of the parent nodes of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I> = {<I>y</I><SUB>1</SUB>, <I>y</I><SUB>2</SUB>,..., <I>y</I><SUB>n</SUB>}</SPAN> <tex2html_verbatim_mark> , COVER(<SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>) is defined as below:<P><DIV ALIGN="CENTER"><IMG WIDTH="390" HEIGHT="1084" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="\epsfbox{p3455b.eps}"> <tex2html_verbatim_mark></DIV><P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>COVER</I>(<I>x</I>) = <IMG WIDTH="19" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$\displaystyle \left\{\vphantom{\begin{array}{ll}
COVER (y_{1}) \bigcup COVER ( ...
...{2}) \bigcup \ldots \bigcup COVER (y_{n}) &amp; x=\varepsilon
\end{array} }\right.$"><IMG WIDTH="495" HEIGHT="61" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$\displaystyle \begin{array}{ll}
COVER (y_{1}) \bigcup COVER ( y_{2}) \bigcup \l...
...COVER (y_{2}) \bigcup \ldots \bigcup COVER (y_{n}) &amp; x=\varepsilon
\end{array}$"></DIV><P><tex2html_verbatim_mark></P><P>The equivalent SCCF to specific CCF is defined as below:<P>If CCF has a single zero indegree node, the node will be inserted into the SCCF as the root, else if CCF has multiple zero indegree nodes, the root of SCCF will be a <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \varepsilon$"></SPAN> <tex2html_verbatim_mark> node, whose children are these zero-indegree nodes.<P>For each statement <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \in$"> <I>CCF</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I> <IMG WIDTH="16" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \not\in$"><I>SCCF</I></SPAN> <tex2html_verbatim_mark>. If there exists a node <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \in$"> <I>SCCF</I></SPAN> <tex2html_verbatim_mark>, makes condition <SPAN CLASS="MATH"><I>DEPENDENT</I>(<I>x</I>) <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \subseteq$"> <I>COVER</I>(<I>y</I>)</SPAN> <tex2html_verbatim_mark> true, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> should be inserted into SCCF immediately in the way that, if there are multiple nodes <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> that <SPAN CLASS="MATH"><I>DEPENDENT</I>(<I>x</I><SUB>i</SUB>) <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \subseteq$"> <I>COVER</I>(<I>y</I>)</SPAN> <tex2html_verbatim_mark>, there will be a start-of-branch <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \varepsilon$"></SPAN> <tex2html_verbatim_mark> node inserted after node <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> are then inserted as the children of the <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \varepsilon$"></SPAN> <tex2html_verbatim_mark> node, else if there is only one <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> satisfy the condition, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> will be inserted immediately after node <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>.<P>By the way, the end-of-branch <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \varepsilon$"></SPAN> <tex2html_verbatim_mark> node are inserted when its corresponding branches finished. You should apply the rule until all nodes in CCF are inserted into SCCF. For instance, Figure 2 depicts the SCCF corresponding to CCF in figure 1.<P>When SCCF has been built, it's easy to serialize an SCCF to an XML document. The XML contains several elements: <SPAN CLASS="textit">sequence</SPAN>, <SPAN CLASS="textit">branches</SPAN>, <SPAN CLASS="textit">branch</SPAN> and <SPAN CLASS="textit">statement</SPAN>. <SPAN CLASS="textit">Sequence</SPAN> can have multiple child elements <SPAN CLASS="textit">branches</SPAN> and <SPAN CLASS="textit">statement</SPAN>, <SPAN CLASS="textit">branches</SPAN> must have one or more child element <SPAN CLASS="textit">branch</SPAN>, and the <SPAN CLASS="textit">branch</SPAN> element can have one and exact one child <SPAN CLASS="textit">sequence</SPAN>. Now let's explain how SCCF nodes are mapped to these XML elements.<P>The root of document is a <SPAN CLASS="textit">sequence</SPAN>, the <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \varepsilon$"></SPAN> <tex2html_verbatim_mark> pair will be serialized as the branches element, each child of the start-of-branch <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \varepsilon$"></SPAN> <tex2html_verbatim_mark> and its subsequences will be serialized as a <SPAN CLASS="textit">branch</SPAN>, which contains an element <SPAN CLASS="textit">sequence</SPAN>, containing statements and inner branches, branches should be ordered by input order. Recursively we can serialize the whole SCCF.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several test cases, each test case begins with a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3455img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, indicates there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines of statement in the test case; each statement occupies a single line, terminated with a semicolon, a statement won't be longer than 100 characters. For simplicity, statements are all assignments, the EBNF is:<P><DIV ALIGN="CENTER"></DIV><DL COMPACT><DT></DT><DD>var ::= <SPAN CLASS="MATH">(<I>a</I> - <I>z</I>)</SPAN> <tex2html_verbatim_mark>( <SPAN CLASS="MATH">(<I>a</I> - <I>z</I>)|(0 - 9)</SPAN> <tex2html_verbatim_mark>)<SPAN CLASS="MATH"><SUP>*</SUP></SPAN> <tex2html_verbatim_mark></DD><DT></DT><DD><SPAN CLASS="MATH"><I>const</I></SPAN> <tex2html_verbatim_mark> ::= (<SPAN CLASS="MATH">(1 - 9)</SPAN> <tex2html_verbatim_mark><TT>+</TT> <SPAN CLASS="MATH">(0 - 9)<SUP>*</SUP>)| 0</SPAN> <tex2html_verbatim_mark></DD><DT></DT><DD>exp ::= (var|<SPAN CLASS="MATH"><I>const</I></SPAN> <tex2html_verbatim_mark>)(('<TT>+</TT>'<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>'<TT>-</TT>')(var|<SPAN CLASS="MATH"><I>const</I></SPAN> <tex2html_verbatim_mark>))<SPAN CLASS="MATH"><SUP>*</SUP></SPAN> <tex2html_verbatim_mark></DD><DT></DT><DD><SPAN CLASS="MATH"><I>statement</I></SPAN> <tex2html_verbatim_mark> ::= var' <TT>=</TT> 'exp;</DD></DL><DIV ALIGN="CENTER"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you should output a segment of XML representation of input statements' SCCF. The XML should be well formed with a 2-blank indent. The <SPAN CLASS="textit">statement</SPAN> element should occupy a single line, with the assignment in it; other element tags should occupy a single line each. There should be a blank line between each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
a=0; 
9 
t=1; 
a=0;
b=a+1; 
c=a-2; 
d=b+2; 
a=b+1; 
e=c-1; 
f=b-1; 
g=e+f+5;
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
&lt;sequence&gt;
  &lt;statement&gt;a=0&lt;/statement&gt; 
&lt;/sequence&gt; 

&lt;sequence&gt; 
  &lt;branches&gt; 
    &lt;branch&gt; 
      &lt;sequence&gt; 
        &lt;statement&gt;t=1&lt;/statement&gt; 
      &lt;/sequence&gt; 
    &lt;/branch&gt; 
    &lt;branch&gt;
      &lt;sequence&gt; 
        &lt;statement&gt;a=0&lt;/statement&gt; 
        &lt;branches&gt; 
          &lt;branch&gt; 
            &lt;sequence&gt; 
              &lt;statement&gt;b=a+1&lt;/statement&gt; 
              &lt;branches&gt; 
                &lt;branch&gt; 
                  &lt;sequence&gt; 
                    &lt;statement&gt;d=b+2&lt;/statement&gt; 
                  &lt;/sequence&gt; 
                &lt;/branch&gt; 
                &lt;branch&gt; 
                  &lt;sequence&gt; 
                    &lt;statement&gt;f=b-1&lt;/statement&gt; 
                  &lt;/sequence&gt;
                &lt;/branch&gt; 
              &lt;/branches&gt; 
            &lt;/sequence&gt; 
          &lt;/branch&gt; 
          &lt;branch&gt; 
            &lt;sequence&gt; 
              &lt;statement&gt;c=a-2&lt;/statement&gt;
              &lt;statement&gt;e=c-1&lt;/statement&gt; 
            &lt;/sequence&gt; 
          &lt;/branch&gt; 
        &lt;/branches&gt; 
        &lt;branches&gt; 
          &lt;branch&gt; 
            &lt;sequence&gt; 
              &lt;statement&gt;a=b+1&lt;/statement&gt; 
            &lt;/sequence&gt; 
          &lt;/branch&gt; 
          &lt;branch&gt; 
            &lt;sequence&gt; 
              &lt;statement&gt;g=e+f+5&lt;/statement&gt; 
            &lt;/sequence&gt; 
          &lt;/branch&gt; 
        &lt;/branches&gt; 
      &lt;/sequence&gt; 
    &lt;/branch&gt; 
  &lt;/branches&gt; 
&lt;/sequence&gt;
</PRE><P>
______________________________________________________
3456||||||false||||||
<P>An isomorphic communication network consists of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> workstations which are connected by E1 fibers. Each E1 fiber enables bidirectional communication between the two workstations it directly connects. No two workstations can be directly connected by more than one E1 fiber. Every workstation can communicate with any other workstation through exactly one link of E1 fibers at the beginning.<P>Every week, a workstation will be selected out in round robin manner for maintenance. The workstation in maintenance will be out of service. So, the weekly maintenance may have impact to communication between other workstations. ACM (Assurance of Communication teaM) is a team who aims at providing better connectivity for the network. After an investigation, they decide to add some E1 fibers between workstations, so that when a workstation is out of service, the communication between any other pair of workstations is not interrupted.<P>Please write a program for ACM to determine the minimum number of additional E1 fibers needed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases separated by blank lines. For each test case, an integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3456img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3456img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> will be given in the first line, which is the number of workstations; then <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> lines follow, each contains two integers representing the two workstations connected by an E1 fiber. The workstations are labeled from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing an integer indicating the minimum number of E1 fibers added.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
1 2
2 3 
3 4 

6 
1 2
1 3
1 4 
4 5 
4 6

5
1 2
1 3
1 4
1 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
2 
3
</PRE><P>
______________________________________________________
3457||||||false||||||
<P>
Dimensionality reduction is mapping a multidimensional space into a space of fewer dimensions. It is sometimes the case that analysis such as regression or classification can be carried out in the reduced space more accurately than in the original space. 

<P>
The general principle of dimensionality reduction is finding the dimensions that capture the most variance. 

<P>
In this problem, let's consider a simple scenario: mapping 3-dimensional to one dimension. Given <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> 3-dimensional points denoted as <!-- MATH
 $(a_{i}, b_{i}, c_{i})$
 -->
<SPAN CLASS="MATH">(<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>, <I>c</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le i \le N$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3457img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3457img1.png
 ALT="$ \le$"><I>N</I></SPAN>
<tex2html_verbatim_mark>, you are to find a line in 3-dimensional space on which the projections (denoted as <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le i \le N$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3457img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3457img1.png
 ALT="$ \le$"><I>N</I></SPAN>
<tex2html_verbatim_mark>) of these points are mostly scattered. The scatter degree in one dimensional space is measured by:

<P>
<P><!-- MATH
 \begin{displaymath}
\sum^{N}_{i=1}(x_{i}-m)^{2}, \mbox{ where } m = \frac{1}{N} \sum^{N}_{i=1}x_{i}.
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<IMG
 WIDTH="27" HEIGHT="70" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3457img1.png
 ALT="$\displaystyle \sum^{{N}}_{{i=1}}$">(<I>x</I><SUB>i</SUB> - <I>m</I>)<SUP>2</SUP>, where <I>m</I> = <IMG
 WIDTH="24" HEIGHT="55" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3457img1.png
 ALT="$\displaystyle {\frac{{1}}{{N}}}$"><IMG
 WIDTH="27" HEIGHT="70" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3457img1.png
 ALT="$\displaystyle \sum^{{N}}_{{i=1}}$"><I>x</I><SUB>i</SUB>.
</DIV><P>
<tex2html_verbatim_mark></P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are multiple test cases. For each test case, an integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le N \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3457img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3457img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark> will be given in the first line, and then points are given in the next <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines. Coordinates are integers in [0, 10000].

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the maximum scatter degree of projections with precision of two decimal places in a single line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
0 0 3 
1 1 3 
2 2 3
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4.00
</PRE> 

<P>

______________________________________________________
3458||||||false||||||
<P>
It is known that when we do something, the efficiency may vary from time to time. That's related with what we usually refer to as physical ``state". To be more specific, we could make use of biorhythms to describe it. Most physical properties are subject to biorhythmic cycles, which may be roughly categorized as physiological cycles and psychological cycles, such as mental cycles, manual cycles, etc. 

<P>
The theory of biorhythms is widely applied in practice. For instance, Osaka Transportation in Japan schedules time tables for its automobile drivers with the help of the theory, both avoiding many accidents and promoting work efficiency as well. In the field of sports, right here in China, there have also been efforts in applying biorhythms. Analysis in China's failure in the Women's Basketball Championship held in Hong Kong has revealed the fact that on the very day, seven team members of China were either at low tide or critical tide and only one out of the five main members was at high tide. The outstanding Russian composer Tchaikovsky also told people that all of his success attributed to that he did regular things in the regular period of time everyday, and that he kept a sound mental state. So, only did one gain full knowledge of his or her biorhythmic cycles, can he or she achieve something within limited time and energy. 

<P>
In this problem, cycles are discretized, being equally sliced into consecutive intervals and it can be assumed that the ``state" mentioned above keeps invariant in an interval and all of cycles shares the same interval length. The state, for simplicity, will be measured by non-negative integer values called ``state values". Suppose that there are <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> different cycles with length not exceeding 20 (the length of a cycle is the number of intervals constituting the cycle), how can we find the interval during which a maximum sum of state values may be acquired. It is now up to you to decide.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
An integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le N \le 3000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3458img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3458img1.png
 ALT="$ \le$">3000)</SPAN>
<tex2html_verbatim_mark> is given on the first line, representing the number of different cycles. Then <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines follow, each depicting a single cycle. A cycle line starts with the length of that cycle <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark>, which is followed by the sequence of corresponding state values of intervals. State values will not exceed <SPAN CLASS="MATH">10<SUP>6</SUP></SPAN>
<tex2html_verbatim_mark>. Integers within one cycle line are separated by a single space character. And initially, all the first intervals shown in each cycle line is aligned with respect to time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Print in one line the maximum possible sum of state values across the given cycles at the same time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
3 5 3 10 
2 1 8
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
18
</PRE> 

<P>

<P><P>
<BR>

<B>Tips:</B>

______________________________________________________
3459||||||false||||||
<P>Here is a geometric problem. You have an angle and some squares in the first quadrant of the plane rectangular coordinates. The vertex of the angle is fixed on the origin <SPAN CLASS="MATH"><I>O</I></SPAN> <tex2html_verbatim_mark> of the coordinates, and both of its radial lines are specified by the input. The sizes of the squares are also specified by the input, and the squares can shift vertically and horizontally. Now your job is to use the squares and the radial lines of the angle to enclose the maximum area, which excludes the area of the squares (see Figure 1). You should note that the edges of the squares must be parallel to the axes.<P><DIV ALIGN="CENTER"><IMG WIDTH="335" HEIGHT="341" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3459.gif ALT="\epsfbox{p3459.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. Each test case starts with a line consisting of one positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < N < 10)$
 --><SPAN CLASS="MATH">(0 &lt; <I>N</I> &lt; 10)</SPAN> <tex2html_verbatim_mark>, which is the number of the squares. The next line contains four decimal numbers: <SPAN CLASS="MATH"><I>x</I><SUB>a</SUB>, <I>y</I><SUB>a</SUB>, <I>x</I><SUB>b</SUB>, <I>y</I><SUB>b</SUB></SPAN> <tex2html_verbatim_mark>, which denote two points <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>x</I><SUB>a</SUB>, <I>y</I><SUB>a</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>x</I><SUB>b</SUB>, <I>y</I><SUB>b</SUB>)</SPAN> <tex2html_verbatim_mark>. The radial lines <SPAN CLASS="MATH"><I>OA</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>OB</I></SPAN> <tex2html_verbatim_mark> form the angle. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contains a decimal number, which is the edge length of a square. All the decimal numbers mentioned above are in the range [1, 20]. A test case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> ends the input, and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data case, output one line containing a decimal number, which is the maximum area that can be enclosed by the radial lines of the angle and the squares. The value should be rounded to three digits after the decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
2.000 3.000 3.000 2.000 
1.000 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2.000
</PRE><P>
______________________________________________________
3460||||||false||||||
<P>
Ratish is a young man who always dreams of being a hero. One day his friend Luffy was caught by Pirate Arlong. Ratish set off at once to Arlong's island. When he got there, he found the secret place where his friend was kept, but he could not go straight in. He saw a large door in front of him and two locks in the door. Beside the large door, he found a strange rock, on which there were some odd words. The sentences were encrypted. But that was easy for Ratish, an amateur cryptographer. After decrypting all the sentences, Ratish knew the following facts: 

<P>
Behind the large door, there is a nesting prison, which consists of <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> floors. Each floor except the deepest one has a door leading to the next floor, and there are two locks in each of these doors. Ratish can pass through a door if he opens either of the two locks in it. There are <SPAN CLASS="MATH">2<I>N</I></SPAN>
<tex2html_verbatim_mark> different types of locks in all. The same type of locks may appear in different doors, and a door may have two locks of the same type. There is only one key that can unlock one type of lock, so there are <SPAN CLASS="MATH">2<I>N</I></SPAN>
<tex2html_verbatim_mark> keys for all the <SPAN CLASS="MATH">2<I>N</I></SPAN>
<tex2html_verbatim_mark> types of locks. These <SPAN CLASS="MATH">2<I>N</I></SPAN>
<tex2html_verbatim_mark> keys were divided into <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> pairs, and once one key in a pair is used, the other key will disappear and never show up again. 

<P>
Later, Ratish found <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> pairs of keys under the rock and a piece of paper recording exactly what kinds of locks are in the <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> doors. But Ratish doesn't know which floor Luffy is held, so he has to open as many doors as possible. Can you help him to choose <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> keys to open the maximum number of doors?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several test cases. Every test case starts with a line containing two positive integers <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le N \le 2^{10})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3460img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3460img1.png
 ALT="$ \le$">2<SUP>10</SUP>)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le M \le 2^{11})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3460img1.png
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3460img1.png
 ALT="$ \le$">2<SUP>11</SUP>)</SPAN>
<tex2html_verbatim_mark> separated by a space, the first integer represents the number of types of keys and the second integer represents the number of doors. The <SPAN CLASS="MATH">2<I>N</I></SPAN>
<tex2html_verbatim_mark> keys are numbered <!-- MATH
 $0, 1, 2, \ldots, 2N - 1$
 -->
<SPAN CLASS="MATH">0, 1, 2,..., 2<I>N</I> - 1</SPAN>
<tex2html_verbatim_mark>. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines contains two different integers, which are the numbers of two keys in a pair. After that, each of the following <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> lines contains two integers, which are the numbers of two keys corresponding to the two locks in a door. You should note that the doors are given in the same order that Ratish will meet. A test case with <SPAN CLASS="MATH"><I>N</I> = <I>M</I> = 0</SPAN>
<tex2html_verbatim_mark> ends the input, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output one line containing an integer, which is the maximum number of doors Ratish can open.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
36 
03 
12 
45 
01 
02 
41 
42 
35 
22 
00
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4
</PRE> 

<P>

______________________________________________________
3461||||||false||||||
<P>Mike is the owner of a cheese factory. He has <SPAN CLASS="MATH">2<SUP>N</SUP></SPAN> <tex2html_verbatim_mark> cheeses and each cheese is given a binary number from <SPAN CLASS="MATH">00...0</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH">11...1</SPAN> <tex2html_verbatim_mark>. To keep his cheese free from viruses, he made himself a purifying machine to clean virus-infected cheese. As a talented programmer, his purifying machine is built in a special way. His purifying machine has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> switches, each switch has three states, <TT>1</TT>, <TT>0</TT> and <TT>*</TT>. An operation of this machine is a cleaning action according to the states of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> switches. During one operation, at most one switch can be turned to state <TT>*</TT>, which can substitute for either <TT>1</TT> or <TT>0</TT>. When the machine is turned to a specific state, an operation will clean all the cheeses with corresponding binary numbers. For example, if <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> equals 6 and the switches are turned to <TT>01*100</TT>, the cheeses numbered <TT>010100</TT> and <TT>011100</TT> are under operation by the machine.<P>One day, Mike's machine was infected. When Mike found out, he had already done some operations and the cheeses operated by this infected machine were infected too. He cleaned his machine as quickly as he could, and now he needs to clean the infected cheeses with the minimum number of operations. If a cheese is infected, cleaning this cheese with the machine one or more times will make this cheese free from virus again; but if a cheese is not infected, operation on this cheese will make it go bad.<P>Now given the infected operations Mike has done, you need to find out the minimum number of operations that must be performed to clean all the infected cheeses without making any clean cheese go bad.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. Each test case starts with a line containing two numbers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3461img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3461img1.png ALT="$ \le$">10, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3461img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3461img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of switches in the machine and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the number of infected operations Mike has done. Each of the following <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines contains a switch state of the machine. A test case with <SPAN CLASS="MATH"><I>N</I> = <I>M</I> = 0</SPAN> <tex2html_verbatim_mark> ends the input and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output one line containing an integer, which is the minimum number of operations Mike needs to do.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
33 
*01 
100 
011 
00
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
3462||||||false||||||
<P>
Once upon a time, there was a young man who loved adventure. He found an old lambskin in his grandfather's relic which described a secret buried treasure. The old lambskin told him to go to a particular deserted island. There was a big stretch of lawn on the north shore of the island. On the lawn there was an oak tree, a pine tree and a gallows. The instructions were as following: Walk from the gallows to the oak tree and remember the distance, turn right and walk the same distance, and make a mark there. Then return to the gallows, walk towards the pine tree and remember the distance, turn left and walk the same distance, and also make a mark. Excavate at the middle point of the segment between the two marks, and the treasure will be there (see Figure 1).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3462.eps}$
 -->
<IMG
 WIDTH="681" HEIGHT="309" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3462.gif
 ALT="\epsfbox{p3462.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The young man found that island and also found the oak tree and the pine tree, but the gallows was destroyed due to the abrasion of time. The young person was disappointed and went back. What a pity! If the young man had some geometry knowledge, he would discover that the position of the treasure is independent from the position of the gallows. But I believe you will not make similar mistakes. Given a general description of how to find the treasure, your job is to find the position of the treasure, if the position can be fixed. First you will be given some points of original marks. The positions of some of these points are known, but the others are unknown. Then you will be given some instructions to make new marks. There are three kinds of instructions: 

<P>

<P>
<BR>
<DL COMPACT>
<DT>1.</DT>
<DD>Given two marks A and B, the new mark is at the middle point between A and B.
</DD>
<DT>2.</DT>
<DD>Given two marks A and B, walk from A to B, turn left, walk the same distance as the distance between A and B, and then make a mark.
</DD>
<DT>3.</DT>
<DD>Given two marks A and B, walk from A to B, turn right, walk the same distance as the distance between A and B, and then make a mark.
</DD>
</DL>

<P>

<P>
<BR>
At last, you will be asked for the position of a mark.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several test cases. Each test case has three parts of input. The first part contains several lines indicating the original marks with the one of the following two formats:

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
or: 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>M</I>&nbsp;<I>x</I>&nbsp;<I>y</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
Here <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> is the mark symbol, and <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> are integers in the range of [0, 100]. The first format means that we don't know the position of the mark. The second format means that we know the position of the mark is <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark>. In this part, one mark will be mentioned at most once. 

<P>
The second part contains some instructions with the following formats: 

<P>

<P>
<BR>

<!-- MATH
 $N \ A \ B \ C$
 -->
<SPAN CLASS="MATH"><I>N</I>&nbsp;<I>A</I>&nbsp;<I>B</I>&nbsp;<I>C</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
Here <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> (= 1, 2 or 3) indicates which kind of instruction is used. <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> are symbols of the marks you have already had, and <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> is the symbol of a new mark you will get. You may assume that <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> are different marks and have been mentioned before, and it's the first time for <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> to show up. 

<P>
The third part is one line containing a mark symbol, of which we want to know the position. It is assured that this mark has been mentioned before. 

<P>
A line with `<TT>END</TT>' indicates the end of the input. 

<P>
To make it easier, we use `<TT>A</TT>', `<TT>B</TT>', ...and `<TT>Z</TT>' as mark symbols, which implies there are no more than 26 marks.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output one line containing two decimal numbers <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>, which means <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark> is the position we want to know. These numbers should be rounded two digits after the decimal point. If the position is uncertain, output `<TT>UNCERTAIN!</TT>' instead.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
B 0 0 
A 
C 100 0 
3 A B D 
2 A C E 
1 D E F 
F 
END
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
50.00 50.00
</PRE> 

<P>

______________________________________________________
3463||||||false||||||
<P>Mr. and Mrs. Smith are going to the seaside for their holiday. Before they start off, they need to choose a hotel. They got a list of hotels from the Internet, and want to choose some candidate hotels which are cheap and close to the seashore. A candidate hotel M meets two requirements:<P><DL COMPACT><DT>1.</DT><DD>Any hotel which is closer to the seashore than M will be more expensive than M.</DD><DT>2.</DT><DD>Any hotel which is cheaper than M will be farther away from the seashore than M.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. The first line of each test case is an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3463img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3463img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>, which is the number of hotels. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines describes a hotel, containing two integers <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3463img1.png ALT="$ \le$"><I>D</I>, <I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3463img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> means the distance from the hotel to the seashore, and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> means the cost of staying in the hotel. You can assume that there are no two hotels with the same <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>. A test case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> ends the input, and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you should output one line containing an integer, which is the number of all the candidate hotels.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
300 100 
100 300 
400 200 
200 400 
100 500 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
3464||||||false||||||
<P>John's college will hold a programming contest, and now it's calling for problems. John wants to contribute a problem to this contest. After finishing the problem, he found some trouble in verifying the programmer's output. For most programming problems, you can just compare the programmer's output against the correct answer, and if they are literally the same, the programmer's output is correct, otherwise it's wrong. But for this problem, there may be many correct answers and they can be different from each other literally. So John must write a program to verify programmers' output (We can call this program ``Special Judge"). Soon, he found the Special Judge is too difficult for him, so he turns to you for help.<P><P><BR>Here is the description of John's original problem:<P><hr><P><P><BR><BIG CLASS="XLARGE"><B>Original Problem</B></BIG><P><P><P><BR>/* Adapted from ``Help the problem setter", Ulm Local 2005 */<P><P><P><BR>Let us define a <SPAN CLASS="textbf">binary search tree</SPAN> inductively as follows:<P><UL><LI>The empty tree which has no node is a binary search tree; </LI><LI>Each non-empty binary search tree has a root, which is a node labeled with an integer, and two binary search trees as left and right subtrees of the root; </LI><LI>The labels of the nodes in the left subtree are all less than the label of the root; </LI><LI>The labels of the nodes in the right subtree are all greater than the label of the root. </LI></UL><P>Given such a binary search tree, the following search procedure can be used to locate a node in the tree: Start with the root node. Compare the label of the current node with the desired label. If it is the same, you have found the right node. Otherwise, if the desired label is smaller, search in the left subtree, otherwise search in the right subtree.<P><P><BR>The <SPAN CLASS="textbf">access frequency</SPAN> of a node is the frequency you search for the node. The <SPAN CLASS="textbf">access cost</SPAN> to locate a node is the number of nodes you have to visit until you find the right node. Given some nodes labeled with integers and the access frequency of every node, an <SPAN CLASS="textbf">optimal binary search tree</SPAN> is a binary search tree consisting of these nodes with the minimum expected access cost.<P><P><BR>Here is your task: Given a binary search tree, try to specify the access frequency of every node, for which this binary search tree is the <SPAN CLASS="textbf">unique optimal binary search tree</SPAN> (The unique optimal binary search tree has the minimum expected access cost, which is less than any other binary search tree consisting of the same nodes with the same access frequencies).<P><P><BR><BIG CLASS="XLARGE"><B>Original Problem's Input</B></BIG><P><P><BR>The input contains one test case. The test case starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3464img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3464img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark>, the number of nodes in the optimal binary search tree. For simplicity, the labels of the nodes will be integers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines describe the structure of the tree. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line contains the labels of the roots of the left and right subtrees of the node with label <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> (or `<TT>-1</TT>' for an empty subtree). You can assume that the input always defines a valid binary search tree.<P><P><BR><BIG CLASS="XLARGE"><B>Original Problem's Output</B></BIG><P><P><BR>For the test case, write one line containing the access frequency for each node in increasing order of the labels of the nodes. To avoid problems with floating point precision, the frequencies should be written as non-negative integers without leading zeros (meaning the access probability for a node will be the frequency divided by the sum of all frequencies). Make sure that you do not write any integer bigger than <SPAN CLASS="MATH">10<SUP>15</SUP></SPAN> <tex2html_verbatim_mark>.<P><P><P><BR><BIG CLASS="XLARGE"><B>Original Problem's Sample Input</B></BIG><P><P><BR><TT>3<BR>-1 -1<BR>1 3<BR>-1 -1</TT><P><P><P><BR><BIG CLASS="XLARGE"><B>Original Problem's Sample Output</B></BIG><P><P><BR><TT>1 1 1</TT><P><P><P><BR><SPAN CLASS="textbf">Original Problem's Hint</SPAN><P>Note that the test case in the sample input describes a tree looking like:<P><PRE>
  2
 / \
1   3
</PRE><P><hr><P><BR>You will be given the input of the original problem and the output of a programmer, your task is to determine whether the programmer's output is correct or not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases, and there are two sections in each test case. The first section is the original problem's input started by `<TT>#Start Input#</TT>' and ended by `<TT>#End Input#</TT>'. The second section is the programmer's output started by `<TT>#Start Programmer's Output#</TT>' and ended by `<TT>#End Programmer's Output#</TT>'. A line with `<TT>#End#</TT>' indicates the end of the input.<P>You can assume that all the data in the first section is valid, but the second section may contain anything except the string `<TT>#End Programmer's Output#</TT>'. The valid programmer's output always contains 1 line, which means if you find that the programmer's output is less or more than 1 line, it's obviously wrong. Each line in the programmer's output will not exceed 2000 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output `<TT>Accepted</TT>' if the programmer's output is correct corresponding to the original problem, or `<TT>Wrong</TT>' if it's wrong. You should ignore the extra spaces or tabs (`<TT> <SPAN CLASS="MATH">&#92;</SPAN> <tex2html_verbatim_mark>t</TT>') in the programmer's output and you can only ignore these 2 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
#Start Input# 
3 
-1 -1 
1 3 
-1 -1 
#End Input# 
#Start Programmer's Output# 
1 1 1 
#End Programmer's Output# 
#Start Input# 
10 
-1 2 
-1 3 
-1 4 
-1 5 
-1 6 
-1 7 
-1 8 
-1 9 
-1 10 
-1 -1 
#End Input# 
#Start Programmer's Output# 
512 256 128 64 32 16 8 4 2 89798 
#End Programmer's Output# 
#End#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Accepted 
Wrong
</PRE><P><P><P><BR><SPAN CLASS="textbf">Hint:</SPAN> If you use the functions ``scanf" and ``printf" to input and output 64bit integers, you should not use "%lld", but "%I64d". This is a bug of the windows version of GCC.<P>
______________________________________________________
3465||||||false||||||
<P>
David the Great has just become the king of a desert country. To win the respect of his people, he decided to build channels all over his country to bring water to every village. Villages which are connected to his capital village will be watered. As the dominate ruler and the symbol of wisdom in the country, he needs to build the channels in a most elegant way. 

<P>
After days of study, he finally figured his plan out. He wanted the average cost of each mile of the channels to be minimized. In other words, the ratio of the overall cost of the channels to the total length must be minimized. He just needs to build the necessary channels to bring water to all the villages, which means there will be only one way to connect each village to the capital. 

<P>
His engineers surveyed the country and recorded the position and altitude of each village. All the channels must go straight between two villages and be built horizontally. Since every two villages are at different altitudes, they concluded that each channel between two villages needed a vertical water lifter, which can lift water up or let water flow down. The length of the channel is the horizontal distance between the two villages. The cost of the channel is the height of the lifter. You should notice that each village is at a different altitude, and different channels can't share a lifter. Channels can intersect safely and no three villages are on the same line. 

<P>
As King David's prime scientist and programmer, you are asked to find out the best solution to build the channels.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several test cases. Each test case starts with a line containing a number <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(2 \le N \le 1000)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3465img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3465img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>, which is the number of villages. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines contains three integers, <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le x, y < 10000, 0 \le z < 10000000)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3465img1.png
 ALT="$ \le$"><I>x</I>, <I>y</I> &lt; 10000, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3465img1.png
 ALT="$ \le$"><I>z</I> &lt; 10000000)</SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark> is the position of the village and <SPAN CLASS="MATH"><I>z</I></SPAN>
<tex2html_verbatim_mark> is the altitude. The first village is the capital. A test case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>
<tex2html_verbatim_mark> ends the input, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output one line containing a decimal number, which is the minimum ratio of overall cost of the channels to the total length. This number should be rounded three digits after the decimal point.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
0 0 0 
0 1 1 
1 1 2 
1 0 3 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1.000
</PRE> 

<P>

______________________________________________________
3466||||||false||||||
<P>
Robocode is an educational game designed to help learn Java. The players write programs that control tanks fighting with each other on a battlefield. The idea of this game may seem simple, but it takes a lot of effort to write a winning tank's program. Today we are not going to write an intelligent tank, but to design a simplified robocode game engine. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3466a.eps}$
 -->
<IMG
 WIDTH="586" HEIGHT="224" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="\epsfbox{p3466a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Assuming the whole battlefield is <SPAN CLASS="MATH">120*120</SPAN>
<tex2html_verbatim_mark> (pixel). Each tank can ONLY move in vertical and horizontal direction on the fixed path (There are paths every 10 pixels in the battlefield in both vertical and horizontal direction. In all there are 13 vertical paths and 13 horizontal paths available for tanks, as shown in Figure 1). The shape and size of the tank are negligible and one tank has <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $x, y \in [0, 120]$
 -->
<SPAN CLASS="MATH"><I>x</I>, <I>y</I> <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \in$"> [0, 120]</SPAN>
<tex2html_verbatim_mark>) representing its coordinate position and <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $\alpha \in {0, 90, 180, 270}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"> <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \in$"> 0, 90, 180, 270</SPAN>
<tex2html_verbatim_mark>) representing its facing direction ( <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"></SPAN>
<tex2html_verbatim_mark> = 0, 90, 180 or 270 means facing right, up, left or down respectively). They have a constant speed of 10 pixels/second when they move and they can't move out of the boundary (they will stop moving, staying in the direction that they are currently facing, when touching any boundary of the battlefield). The tank can shoot in the direction it's facing whether it's moving or still. The shot moves at the constant speed 20 pixel/second and the size of the shot is also negligible. It will explode when it meets a tank on the path. It's possible for more than one shot to explode in the same place if they all reach a tank at the exact same time. The tank being hit by the explosion will be destroyed and will be removed from the battlefield at once. A shot exploding or flying out of the boundary will also be removed. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3466b.eps}$
 -->
<IMG
 WIDTH="755" HEIGHT="638" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="\epsfbox{p3466b.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1

</DIV>

<P>
When the game begins, all the tanks are stopped at different crosses of the vertical and horizontal paths. Given the initial information of all the tanks and several commands, your job is to find the winner - the last living tank when all the commands are executed (or omitted) and no shot exists in the battlefield (meaning that no tank may die in the future).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several test cases. The battlefield and paths are all the same for all test cases as shown in Figure 1. Each test case starts with integers <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le N \le 10)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \le$">10)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le M \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>, separated by a blank. <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> represents the number of the tanks playing in the battlefield, and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> represents the number of commands to control the tanks' moving. The following <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines give the initial information (at time 0) of each tank, in the format: 

<P>

<P>
<BR>

<!-- MATH
 $Name \ x \ y \ \alpha$
 -->
<SPAN CLASS="MATH"><I>Name</I>&nbsp;<I>x</I>&nbsp;<I>y</I>&nbsp;<IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
The <SPAN  CLASS="textit">Name</SPAN> of a tank is consisted of no more than 10 letters. <!-- MATH
 $x, y, \alpha$
 -->
<SPAN CLASS="MATH"><I>x</I>, <I>y</I>,<IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"></SPAN>
<tex2html_verbatim_mark> are integers and <!-- MATH
 $x, y \in \{0, 10, 20, \ldots, 120\}$
 -->
<SPAN CLASS="MATH"><I>x</I>, <I>y</I> <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \in$"> {0, 10, 20,..., 120}</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $\alpha \in \{0, 90, 180, 270\}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"> <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \in$"> {0, 90, 180, 270}</SPAN>
<tex2html_verbatim_mark>. Each field is separated by a blank. 

<P>
The following <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> lines give commands in such format: 

<P>

<P>
<BR>

<!-- MATH
 $Time \ Name \ Content$
 -->
<SPAN CLASS="MATH"><I>Time</I>&nbsp;<I>Name</I>&nbsp;<I>Content</I></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
Each field is separated by a blank. All the commands are giving in the ascending order of <SPAN CLASS="MATH"><I>Time</I></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $0 \le Time \le 30$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \le$"><I>Time</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \le$">30</SPAN>
<tex2html_verbatim_mark>), which is a positive integer meaning the timestamp when the commands are sent. <SPAN CLASS="MATH"><I>Name</I></SPAN>
<tex2html_verbatim_mark> points out which tank will receive the command. The <SPAN CLASS="MATH"><I>Content</I></SPAN>
<tex2html_verbatim_mark> has different types as follows:

<P>

<P>
<BR>
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=JUSTIFY WIDTH="5in">
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<TT>MOVE</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360"> When receiving the command, the tank starts to move in its facing direction. If 
      the tank is already moving, the command takes no effect. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>STOP</TT>  </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360"> When receiving the command, the tank stops moving. If the tank is already 
      stopped, the command takes no effect. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>TURN <SPAN CLASS="MATH"><I>angle</I></SPAN>
<tex2html_verbatim_mark></TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360"> When receiving the command, the tank changes the facing direction <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"></SPAN>
<tex2html_verbatim_mark> 
      to be (<!-- MATH
 $(\alpha + angle + 360) \bmod 360$
 -->
<SPAN CLASS="MATH">(<IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"> + <I>angle</I> + 360) mod 360</SPAN>
<tex2html_verbatim_mark>), no matter whether it is moving or not. You are 
      guaranteed that (<!-- MATH
 $(\alpha + angle + 360) \bmod 360) \in \{0, 90, 180, 270\}$
 -->
<SPAN CLASS="MATH">(<IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"> + <I>angle</I> + 360) mod 360) <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \in$"> {0, 90, 180, 270}</SPAN>
<tex2html_verbatim_mark>. TURN 
      command doesn't affect the moving state of the tank. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>SHOOT</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">  When receiving the command, the tank will shoot one shot in the direction it's facing. </TD></TR>
</TBODY>
</TABLE>

<P>

<P>
<BR>
Tanks take the corresponding action as soon as they receive the commands. E.g., if the tank at 
<SPAN CLASS="MATH">(0, 0)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $\alpha = 90$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"> = 90</SPAN>
<tex2html_verbatim_mark>, receives the command <TT>MOVE</TT> at time 1, it will start to move at once and will reach <SPAN CLASS="MATH">(0, 1)</SPAN>
<tex2html_verbatim_mark> at time 2. Notice that a tank could receive multiple commands in one second and take the action one by one. E.g., if the tank at <SPAN CLASS="MATH">(0, 0)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $\alpha = 90$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"> = 90</SPAN>
<tex2html_verbatim_mark>, receives a command sequence of `<TT>TURN 90; SHOOT; TURN -90</TT>', it will turn to the direction <!-- MATH
 $\alpha = 180$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/p3466a.gif
 ALT="$ \alpha$"> = 180</SPAN>
<tex2html_verbatim_mark>, shoot a shot and then turn back. If the tank receives a command sequence of `<TT>MOVE; STOP</TT>', it will keep still in the original position.

<P>
Some more notes you need to pay attention:

<P>

<UL>
<LI>If a tank is hit by an explosion, it will take no action to all the commands received at that moment. Of course, all the commands sent to the already destroyed tank should also be omitted. 
</LI>
<LI>Although the commands are sent at discrete seconds, the movement and explosions of tanks and shots happen in the continuous time domain. 
</LI>
<LI>No two tanks will meet on the path guaranteed by the input data, so you don't need to consider about that situation. 
</LI>
<LI>All the input contents will be legal for you.
</LI>
</UL>

<P>
A test case with <SPAN CLASS="MATH"><I>N</I> = <I>M</I> = 0</SPAN>
<tex2html_verbatim_mark> ends the input, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the winner's name in one line. The winner is defined as the last living tank. If there is no tank or more than one tank living at the end, output `<TT>NO WINNER!</TT>' in one line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 2 
A 0 0 90 
B 0 120 180 
1 A MOVE 
2 A SHOOT 
2 2 
A 0 0 90 
B 0 120 270 
1 A SHOOT 
2 B SHOOT 
2 6
A 0 0 90
B 0 120 0
1 A MOVE
2 A SHOOT
6 B MOVE
30 B STOP
30 B TURN 180
30 B SHOOT
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
A 
NO WINNER!
B
</PRE> 

<P>

______________________________________________________
3467||||||false||||||
<P>We all know that there is an exciting F1 circuit in Shanghai, but how many of you know how to design an F1 circuit? Designing an F1 circuit is a very complex task. For example, you should know how much time the best F1 driver will take to finish a lap. In this task, we will ask you to solve this problem.<P>An F1 circuit consists of straight raceways, turns and a starting point. We use `<TT>-</TT>' (with ASCII number 45) or `<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>' (with ASCII number 124) to describe a section of straight raceways, and use `<TT>+</TT>' (with ASCII number 43) to describe a turn. If two straight raceways connect to a turn, we call the turn a simple turn, and the speed of an F1 race car entering and leaving a simple turn should not exceed 45 m/s. If two turns are connected with each other, this is a composite turn, and the speed of an F1 racing car entering and leaving a composite turn should not exceed 20 m/s.<P>A simple turn is in one of the four formats shown in Figure 1:<P><DIV ALIGN="CENTER"><IMG WIDTH="454" HEIGHT="161" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3467a.gif ALT="\epsfbox{p3467a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1 Formats of simple turns</DIV><P>A composite turn is in one of the eight formats shown in Figure 2:<P><DIV ALIGN="CENTER"><IMG WIDTH="884" HEIGHT="147" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3467a.gif ALT="\epsfbox{p3467b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 2 Formats of composite turns</DIV><P>You may assume that in an F1 circuit there are only the two types of turns we mentioned above.<P>The starting point of an F1 circuit is the beginning and ending position of an F1 race car. A starting point is in one of the four formats shown in Figure 3, meaning that the start direction is going up (`<SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3467a.gif ALT="$ \wedge$"></SPAN> <tex2html_verbatim_mark>' with ASCII number 94), down (`<TT>v</TT>' with ASCII number 118), left (`<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark>' with ASCII number 60) or right (`<SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark>' with ASCII number 62) respectively:<P><DIV ALIGN="CENTER"><IMG WIDTH="433" HEIGHT="147" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3467a.gif ALT="\epsfbox{p3467c.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 3 Formats of starting point</DIV><P>The straight raceways, turns and a starting point mentioned above will compose a closed F1 circuit.<P>We know that a section of straight raceway is <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> meters long, which indicates that a `<TT>-</TT>' or `<SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark>' equals to <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> meters. To make the problem easier, we ignore the length of turns and the start point. The F1 race car enters and leaves a turn with the same speed.<P>An F1 driver will run 3 laps in each circuit. On the first lap, the initial speed of the car leaving the starting point should be zero. There is no restriction for the second lap. On the last lap, the speed of the car arriving at the start point should also be zero. We record the running time of the second lap as the best lap time. What you need to do is to calculate the minimum best lap time.<P>What you may also know is that the acceleration of an F1 car doesn't exceed 10 m/s<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>, and the deceleration doesn't exceed 30 m/s<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3467a.gif ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3467a.gif ALT="$ \le$">200</SPAN> <tex2html_verbatim_mark>), which is the length of a section of straight raceways. The next several lines will contain a map of an F1 circuit. A circuit map only contains the circuit, some white spaces and some blank lines. The description will occupy 50 lines or less, and the number of characters in each line will not exceed 100. A test case with <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark> ends the input, and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line containing the best loop time in seconds. You should round the result to two digits after the decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
199 
+-------------+
+----+        |
+----+++      ^
|     ||      |
|     ||      |
+-----++------+
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
97.34

______________________________________________________
3468||||||false||||||
<P>
Is this crazy weather the result of mankind's continuous interference in the environment? Or is it simply the normal cycle of climate changes through the ages? No one seems to know for sure, but the fact is that natural phenomena such as tornadoes and hurricanes have been hitting our country with more force and frequence than in past decades. 

<P>
One tornado has just hit Silverado Farm, a cattle and milk producer, and made havoc. The barn roof was torn, several trees were uprooted, the farm truck was overturned... But the worst thing is that the tornado destroyed several sections of the fence that surrounded the property. The fence was very well built, with concrete posts every two meters, and barbed wire enclosing the whole farm perimeter (the perimeter, in meters, is an even number, making the fence perfectly regular). 

<P>
Now several posts are broken or missing, and there are gaps in the fence. To prevent the cattle from getting out of the property, the fence must be restored as quickly as possible. Reconstructing the fence to its original form, with concrete posts, will take a long time. In the meantime, the farm owners decided to close the gaps with a temporary fence, made with wooden posts. Wooden posts will be placed in exactly the same spots where missing/broken concrete posts were/are. However, in order to make the temporary reconstruction faster and less expensive, the owners decided to use fewer posts: a wooden post will be used to replace a missing/broken concrete post only if the length of the barbed wired needed to close the distance to the next post (wooden or concrete) exceeds four meters.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3468.eps}$
 -->
<IMG
 WIDTH="451" HEIGHT="159" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3468img1.png
 ALT="\epsfbox{p3468.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Given the description of which posts are missing/broken, you must write a program to determine the smallest number of wooden posts needed to close all the gaps in the fence, according to the owners' decision.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several test cases. The first line of a test case contains one integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> indicating the number of original concrete posts in the fence <!-- MATH
 $(5 \le N \le 5000)$
 -->
<SPAN CLASS="MATH">(5<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3468img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3468img1.png
 ALT="$ \le$">5000)</SPAN>
<tex2html_verbatim_mark>. The second line of a test case contains <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> indicating the state of each concrete post after the tornado <!-- MATH
 $(0 \le X_{i} \le 1 for 1 \le i \le N )$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3468img1.png
 ALT="$ \le$"><I>X</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3468img1.png
 ALT="$ \le$">1<I>for</I>1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3468img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3468img1.png
 ALT="$ \le$"><I>N</I>)</SPAN>
<tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB> = 1</SPAN>
<tex2html_verbatim_mark> post <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> is in good condition, if <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB> = 0</SPAN>
<tex2html_verbatim_mark> post <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> is broken or missing. Note that post <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is next to post 1. The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input your program must produce one line of output, containing an integer indicating the smallest number of wooden posts that are needed to restore the fence, according to the owners' decision. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
10
1 0 0 1 0 0 1 0 1 1
11
1 0 0 1 0 0 0 1 1 0 1
12
0 0 0 0 0 1 1 0 0 0 1 1
0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
2
3
</PRE> 

<P>

______________________________________________________
3469||||||false||||||
<P>
You have been hired to explore enemy territory. It is risky business, you know that. So, you'd better be prepared! The enemy has placed a number of security points all over his country, from which radars are detecting any moving vehicle within their range of cover. Any such detected ob ject will be immediately destroyed. Fortunately enough, you have been given by your government a map of the enemy territory, consisting of coordinates and radius of coverage of each radar. You have also a list of local informers (together with their locations) that you should contact in order to obtain valuable information. Your mission is to try to contact one of these informers, preferably the one with highest <SPAN  CLASS="textit">insider-coefficient</SPAN>. The insider-coefficient of each informer is simply the distance from the informer to the border of the country, where such a distance is defined as the minimum over all distances from the location of the informer to each point of the border. In intuitive sense, the informer with highest insider-coefficient is that who is located as inside the country as possible, and will presumably have more valuable information about the country. 

<P>
Your first thought is then to design a computer program which will check if there is a path from your initial location, always the point (2000, 2000), to any of the informers' location, without crossing any region which is covered by radar. Whenever possible, the program should indicate which reachable informer is the one to be contacted, according to the insider-coefficient criteria described above.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3469.eps}$
 -->
<IMG
 WIDTH="491" HEIGHT="328" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="\epsfbox{p3469.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1: Possible Scenario 

</DIV>

<P>
The enemy country has the shape of a <SPAN  CLASS="textit">simple polygon</SPAN> (<SPAN  CLASS="textit">not necessarily convex</SPAN>). Recall that a polygon is called simple if it is described by a single, non-intersecting boundary. The borders of the country will be given as a sequence of X,Y-coordinates corresponding to the sequence of vertexes of the polygon. You may assume that all the radar's centres and the informers' coordinates are located within the country's border. Notice, however, that the area covered by the radars might include regions outside the border.

<P>
In the sample scenario of Figure 1, informer <SPAN CLASS="MATH"><I>I</I></SPAN>
<tex2html_verbatim_mark>1 cannot be contacted since he is inside the region covered by radars. The informer <SPAN CLASS="MATH"><I>I</I></SPAN>
<tex2html_verbatim_mark>2, although outside the radar's region, can't be contacted either since any trip to his location would go through the deadly radar-covered regions. Both informers <SPAN CLASS="MATH"><I>I</I></SPAN>
<tex2html_verbatim_mark>3 and <SPAN CLASS="MATH"><I>I</I></SPAN>
<tex2html_verbatim_mark>4 could be contacted, so that informer <SPAN CLASS="MATH"><I>I</I></SPAN>
<tex2html_verbatim_mark>4 is chosen since his insider-coefficient is greater than that of <SPAN CLASS="MATH"><I>I</I></SPAN>
<tex2html_verbatim_mark>3.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of several test cases. The first line of each test case describes the border of the enemy country, in the format 

<P>

<P>
<BR>

<!-- MATH
 $B \ X1 \ Y1 \ X2 \ Y2 \dots XB \ YB$
 -->
<SPAN CLASS="MATH"><I>B</I>&nbsp;<I>X</I>1&nbsp;<I>Y</I>1&nbsp;<I>X</I>2&nbsp;<I>Y</I>2...<I>XB</I>&nbsp;<I>YB</I></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
where <!-- MATH
 $3 \le B \le 1000$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="$ \le$"><I>B</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark> is the number of border points, and each <!-- MATH
 $X{i} \ Y{i}$
 -->
<SPAN CLASS="MATH"><I>Xi</I>&nbsp;<I>Yi</I></SPAN>
<tex2html_verbatim_mark> is the coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th point in the border. The border of the country consists of line segments between points <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>i</I> + 1</SPAN>
<tex2html_verbatim_mark>, and between points <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> and 1. The second line gives the number of informers and their respective positions, in the format 

<P>

<P>
<BR>

<!-- MATH
 $N \ X1 \ Y1 \ X2 \ Y2 \dots XN \ YN$
 -->
<SPAN CLASS="MATH"><I>N</I>&nbsp;<I>X</I>1&nbsp;<I>Y</I>1&nbsp;<I>X</I>2&nbsp;<I>Y</I>2...<I>XN</I>&nbsp;<I>YN</I></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
where <!-- MATH
 $1 \le N \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark> is the number of informers, and <!-- MATH
 $X{i} \ Y{i}$
 -->
<SPAN CLASS="MATH"><I>Xi</I>&nbsp;<I>Yi</I></SPAN>
<tex2html_verbatim_mark> is the coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th informer. The third line describes the position and radius of the radars, in the format 

<P>

<P>
<BR>

<!-- MATH
 $M \ X1 \ Y1 \ R1 \ X2 \ Y2 \ R2 \dots XM \ YM \ RM$
 -->
<SPAN CLASS="MATH"><I>M</I>&nbsp;<I>X</I>1&nbsp;<I>Y</I>1&nbsp;<I>R</I>1&nbsp;<I>X</I>2&nbsp;<I>Y</I>2&nbsp;<I>R</I>2...<I>XM</I>&nbsp;<I>YM</I>&nbsp;<I>RM</I></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
where <!-- MATH
 $1 \le M \le 30$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="$ \le$">30</SPAN>
<tex2html_verbatim_mark> is the number of radars, <!-- MATH
 $X{i} \ Y{i}$
 -->
<SPAN CLASS="MATH"><I>Xi</I>&nbsp;<I>Yi</I></SPAN>
<tex2html_verbatim_mark> is the coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th radar, and <SPAN CLASS="MATH"><I>Ri</I></SPAN>
<tex2html_verbatim_mark> is the radius of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th radar. All the coordinates are integers <!-- MATH
 $0 \le X, Y \le 1000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="$ \le$"><I>X</I>, <I>Y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>. The radius of the radars are integers in the range <!-- MATH
 $1 \le R \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="$ \le$"><I>R</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3469img1.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>. A test case where <!-- MATH
 $B = N = M = 0$
 -->
<SPAN CLASS="MATH"><I>B</I> = <I>N</I> = <I>M</I> = 0</SPAN>
<tex2html_verbatim_mark> indicates the end of the input. This test case must not be processed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input, your program must produce one line containing either 
`<TT>Mission impossible</TT>' or `<TT>Contact informer <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark></TT>', where `<SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>' is the index of the informer (as given in the input) with highest insider-coefficient which can be reached by the spy without going inside any radar coverage area. If there are more than one informer satisfying this condition, choose the one among them with lowest index. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 0 0 0 200 200 200 200 0 
2 70 70 120 120 
1 100 100 100 
4 0 0 0 200 200 200 200 0 
3 100 102 70 80 20 10 
4 70 70 35 130 70 35 130 130 35 70 130 35
0 
0 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Mission impossible 
Contact informer 3
</PRE> 

<P>

______________________________________________________
3470||||||false||||||
<P>Pascal University, one of the oldest in the country, needs to renovate its Library Building, because after all these centuries the building started to show the effects of supporting the weight of the enormous amount of books it houses.<P>To help in the renovation, the Alumni Association of the University decided to organize a series of fund-raising dinners, for which all alumni were invited. These events proved to be a huge success and several were organized during the past year. (One of the reasons for the success of this initiative seems to be the fact that students that went through the Pascal system of education have fond memories of that time and would love to see a renovated Pascal Library.)<P>The organizers maintained a spreadsheet indicating which alumni participated in each dinner. Now they want your help to determine whether any alumnus or alumna took part in all of the dinners.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of a test case contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> indicating respectively the number of alumni and the number of dinners organized <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3470img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3470img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3470img1.png ALT="$ \le$"><I>D</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3470img1.png ALT="$ \le$">500)</SPAN> <tex2html_verbatim_mark>. Alumni are identified by integers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> . Each of the next <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> lines describes the attendees of a dinner, and contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> indicating if the alumnus/alumna <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> attended that dinner <SPAN CLASS="MATH">(<I>X</I><SUB>i</SUB> = 1)</SPAN> <tex2html_verbatim_mark> or not <SPAN CLASS="MATH">(<I>X</I><SUB>i</SUB> = 0)</SPAN> <tex2html_verbatim_mark>. The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = <I>D</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input your program must produce one line of output, containing either the word `<TT>yes</TT>', in case there exists at least one alumnus/alumna that attended all dinners, or the word `<TT>no</TT>' otherwise.<P><P><P><BR><B>Note:</B><P><SPAN CLASS="textit">Alumna:</SPAN> a former female student of a particular school, college or university.<P><SPAN CLASS="textit">Alumnus:</SPAN> a former male student of a particular school, college or university.<P><SPAN CLASS="textit">Alumni:</SPAN> former students of either sex of a particular school, college or university.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3
1 1 1 
0 1 1 
1 1 1 
7 2
1 0 1 0 1 0 1
0 1 0 1 0 1 0
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
yes 
no
</PRE><P>
______________________________________________________
3471||||||false||||||
<P>International Concrete Projects Company (ICPC) is a construction company which specializes in building houses for the high-end market. The company is the most profitable company in the world due to a very efficient land division method which has been used in its housing development pro jects since last year. Recently there was a chaos at ICPC, because employees refused to work arguing that they did not earn enough. Worried about the loss in profit due to the strike, the company board proposed a new method to calculate the salaries which was luckily accepted by everyone.<P>The salary of a worker reflects the significance of the tasks that he/she has to perform and is influenced by the way tasks depend on each other.<P>A task <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="textit">depends</SPAN> on a task <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> if either (<SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>) <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="textit">depends directly</SPAN> on <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> , or (<SPAN CLASS="MATH"><I>ii</I></SPAN> <tex2html_verbatim_mark>) there exists a task <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> depends directly on <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> depends on <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> . Since in ICPC all tasks must be performed, there is no circularity in the task dependence relation. Also, a task may be performed by more than one worker.<P>A <SPAN CLASS="textit">basic significance</SPAN> is associated with each task reflecting its importance (for example, developing the efficient land division method is more important than building the houses themselves). The <SPAN CLASS="textit">significance</SPAN> of a task <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is then defined as the basic significance of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> plus the significance of every task which depends directly on <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. Note that if no other tasks depend directly on task <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, the basic significance and the significance of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> are the same.<P>The salary of a worker is the sum of the significances of all the tasks he/she performs which do not depend on any other task performed by him/her. In other words, a value equal to the significance of task <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> will be added to the salary of a worker <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> that works in task <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> if there is no other task <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> on which <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> depends, and <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> works also in <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>.<P>ICPC wants you to help them to determine the salary of each of its employees.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases.<P>The first line of a test case contains two integers <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> indicating respectively the number of tasks and the number of employees ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3471img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3471img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3471img1.png ALT="$ \le$"><I>E</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3471img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>). Tasks are numbered from 1 to <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> and employees from 1 to <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>.<P>Then it will come a sequence of lines describing the tasks 1 to <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> in ascending order. Each task is described by two lines. The first of these lines contains three integers <SPAN CLASS="MATH"><I>BS</I></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>ND</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>NE</I></SPAN> <tex2html_verbatim_mark> , representing respectively the basic significance of the task, the number of tasks that depend directly on it, and the number of employees who perform it (<!-- MATH
 $1 \le  BS \le 1000, 0 \le ND < T$
 --> <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3471img1.png ALT="$ \le$"><I>BS</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3471img1.png ALT="$ \le$">1000, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3471img1.png ALT="$ \le$"><I>ND</I> &lt; <I>T</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3471img1.png ALT="$ \le$"><I>NE</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3471img1.png ALT="$ \le$"><I>E</I></SPAN> <tex2html_verbatim_mark>). The second line contains <SPAN CLASS="MATH"><I>ND</I> + <I>NE</I></SPAN> <tex2html_verbatim_mark> integers corresponding first to the <SPAN CLASS="MATH"><I>ND</I></SPAN> <tex2html_verbatim_mark> directly dependent tasks and then the <SPAN CLASS="MATH"><I>NE</I></SPAN> <tex2html_verbatim_mark> employees who perform the task.<P>The end of input is indicated by <SPAN CLASS="MATH"><I>T</I> = <I>E</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Test cases must be answered in the order that they were presented. For each test case you must print:<P><UL><LI>a single line containing five stars `<TT>*****</TT>' indicating the beginning of the case </LI><LI>for each employee <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, one line with two integers <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, separated by a blank, meaning that <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> has a salary of <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 
100 2 2 
2 3 1 2 
40 0 1 
1 
60 0 1 
2 
7 2 
10 2 1 
2 3 1 
10 2 1 
4 5 2 
10 2 1 
6 7 2 
10 0 1 
1 
10 0 1 
1 
10 0 1 
1 
10 0 1 
1 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
***** 
1 200 
2 200 
***** 
1 70 
2 60
</PRE><P>
______________________________________________________
3472||||||false||||||
<P>A far away developing country is trying to improve its communication infrastructure. Currently, each city in the country has its local computer network, but there is no fast communication between the cities. The Autonomous Communications Ministry (ACM) of the country decided to create a fast, optical fiber network connecting every city. In order to do this, they decided to take the following approach. Pairs of cities were chosen to have an optical fiber link installed between them. The choice was such that there will be only one fiber path between any pair of cities, in order to reduce the cost. The pairs of cities were chosen considering many factors, including analysis of estimated demand and distance between the cities.<P>Each city will have one optical router installed, which will be used to connect all the optical links with one end in that city. In each city, there are many different locations where the optical router can be installed. Your task, as an engineer working on this pro ject, is to develop a computer program to pick up the locations in each city in order to minimize the total length of fiber that will be necessary for this pro ject.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case starts with a line containing the number of cities <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3472img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3472img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> in the country. Following, for each city, there is a sequence of lines. The first line contains the (unique) name of the city (only capital letters, at most 15), and the number of candidate sites <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3472img1.png ALT="$ \le$"><I>C</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3472img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark> where the optical router can be installed. Then, there is one line per candidate site, containing two integers <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> representing the coordinates of the site <SPAN CLASS="MATH">(- 10000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3472img1.png ALT="$ \le$"><I>X</I>, <I>Y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3472img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>. You should use the euclidean distance between the sites to compute the corresponding fiber length necessary to connect them. After the description of each city with its candidate sites, there are <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> lines, each containing the names of two cities that will have a fiber link installed between them. The end of the input is indicated by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program should print a line with the minimum total length of optical fiber to connect the requested cities. Your answer should be rounded to one decimal digit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
AUSTIN 1 
500 500 
DALLAS 2 
1000 10 
990 -10 
ELPASO 2 
0 0 
30 0 
ELPASO AUSTIN 
DALLAS ELPASO 
3 
HUSTON 3 
100 0 
100 50 
100 100 
AUSTIN 2 
200 0 
180 40 
SANANTONIO 2 
0 -10 
10 -50 
HUSTON AUSTIN 
HUSTON SANANTONIO 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1646.3 
189.9
</PRE><P>
______________________________________________________
3473||||||false||||||
<P>
One way that scientists try to measure how one species evolved into another is to find out how the ancestor's genome changed into the other's. Closely related species have several genes in common and it turns out that a good way to compare them is comparing how the common genes changed place. 

<P>
One of the most common mutations that change the order of a genomes' genes is the reversal. If we model a genome as a sequence of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> genes with each gene being an integer from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> , then a reversal is a mutation that changes the genome by reverting the order of a block of consecutive genes. A reversal can be described by two indexes <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le i \le j \le N$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$"><I>j</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$"><I>N</I></SPAN>
<tex2html_verbatim_mark> , indicating that it reverts the order of the genes within indexes from <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>. So, when it is applied to a genome <!-- MATH
 $[g_{1}, \cdot , g_{i-1} , g_{i} , g_{i+1} , \cdots , g_{j-1} , g_{j} , g_{j+1} , \cdots , g_{N}]$
 -->
<SPAN CLASS="MATH">[<I>g</I><SUB>1</SUB>,<SUP> . </SUP>, <I>g</I><SUB>i-1</SUB>, <I>g</I><SUB>i</SUB>, <I>g</I><SUB>i+1</SUB>,<SUP> ... </SUP>, <I>g</I><SUB>j-1</SUB>, <I>g</I><SUB>j</SUB>, <I>g</I><SUB>j+1</SUB>,<SUP> ... </SUP>, <I>g</I><SUB>N</SUB>]</SPAN>
<tex2html_verbatim_mark>, we obtain the genome <!-- MATH
 $[g_{1} , \cdots , g_{i-1} , g_{j} , g_{j-1} , \cdots , g_{i+1} , g_{i} , g_{j+1} , \cdots , g_{N}]$
 -->
<SPAN CLASS="MATH">[<I>g</I><SUB>1</SUB>,<SUP> ... </SUP>, <I>g</I><SUB>i-1</SUB>, <I>g</I><SUB>j</SUB>, <I>g</I><SUB>j-1</SUB>,<SUP> ... </SUP>, <I>g</I><SUB>i+1</SUB>, <I>g</I><SUB>i</SUB>, <I>g</I><SUB>j+1</SUB>,<SUP> ... </SUP>, <I>g</I><SUB>N</SUB>]</SPAN>
<tex2html_verbatim_mark>. As an example, the reversal (3, 6) applied to the genome [1, 2, 3, 4, 5, 6, 7] gives [1, 2, 6, 5, 4, 3, 7]. If after that the reversal (1, 3) is applied, we obtain the genome [6, 2, 1, 5, 4, 3, 7]. 

<P>
A scientist studying the evolution of a species wants to try a series of reversals on its genome. Then he wants to query the final position of several genes. Would you take the challenge and help him?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several test cases. The first line of a test case contains one integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> indicating the number of genes in the genome <!-- MATH
 $(1 \le N \le 50000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$">50000)</SPAN>
<tex2html_verbatim_mark>. You may assume that the initial order of the genes is the sequence of integers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> in increasing order. The second line of a test case contains one integer <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le R \le 1000)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$"><I>R</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> indicating the number of reversals to be applied to the genome. Then <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> lines follow, each containing two integers <SPAN CLASS="MATH"><I>i</I>, <I>j</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le i \le j \le N)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$"><I>j</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$"><I>N</I>)</SPAN>
<tex2html_verbatim_mark>, separated by a single space, indicating the two indexes that define the corresponding reversal. After the description of the reversals there is a line containing one integer <SPAN CLASS="MATH"><I>Q</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le Q \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$"><I>Q</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3473img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>, indicating the number of queries for genes, followed by <SPAN CLASS="MATH"><I>Q</I></SPAN>
<tex2html_verbatim_mark> lines, where each line contains an integer representing a gene whose final position you must determine. 

<P>
The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input your program must produce <SPAN CLASS="MATH"><I>Q</I> + 1</SPAN>
<tex2html_verbatim_mark> lines of output. The first line must contain the string ``Genome" followed by the number of the test case. The following <SPAN CLASS="MATH"><I>Q</I></SPAN>
<tex2html_verbatim_mark> lines must contain one integer each representing the answers of the queries. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
9 
1 
3 6 
4 
1 
3 
5 
1 
5 
2 
1 2 
1 5 
2 
5 
2 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Genome 1 
1 
6 
4 
1 
Genome 2 
1 
5
</PRE> 

<P>

______________________________________________________
3474||||||false||||||
<P>A very famous DJ has been recently invited to play in the closing party of a Computer Science conference. Trying to impress the participants of the event, he decided to use a program in order to choose the songs he would play at this party. However, the result was a disaster, since the way the program chose the songs was quite weird and repetitive.<P>First of all, the DJ has selected <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> songs among the set of songs he had available. The program used by the DJ then labels each of the songs using one different character from `A' to `Z'. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th song is labeled using the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th character of the sequence `A'-`Z'. The program chooses the songs to be played in the party in the order that their labels appear in the following infinite sequence of characters: first come all the words with one character in lexicographical order; then all the words with two characters in lexicographical order; then all the words with three characters in lexicographical order; and so on. For <SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark>, this sequence would be ABCAAABACBABBBCCACBCCAAAAABAACABAABBABC...<P>At the end of the party, some people asked the DJ if he remembered which the first song played was. Others would like to know which the 25-th was, and so on. The DJ remembers nothing but the strange pattern of repetition of the songs, so he urges you to help him and write a program which answers such queries.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each test case consists of three lines. The first line of a test case contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> indicating respectively the number of songs chosen by the DJ and the number of queries made by the participants ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3474img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3474img1.png ALT="$ \le$">26</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3474img1.png ALT="$ \le$"><I>Q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3474img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>). In the second line, there will be the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> titles of the songs (the title of a song is a chain of alphanumerical characters of at least one and at most 100 characters) separated by single spaces. The last line of a test case contains a sequence of queries. Each query is a number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3474img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3474img1.png ALT="$ \le$">100000000)</SPAN> <tex2html_verbatim_mark> corresponding to the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-th song played in the party. The end of the input is indicated by <SPAN CLASS="MATH"><I>N</I> = <I>Q</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each query number k in a test case, you shall print a single line containing the name of the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-th song played in the party. A blank line must follow each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 3 
S0 S1 S2 S3 S4 S5 S6 S7 S8 S9 
3 6 10 
3 5 
Pathethique TurkishMarch Winter 
1 2 3 4 16 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
S2 
S5 
S9 

Pathethique 
TurkishMarch 
Winter 
Pathethique 
Winter
</PRE><P>
______________________________________________________
3475||||||false||||||
<P>Pretty Networks Inc. is a company that builds some curious artifacts whose purpose is to transform a set of input values in a given way. The transformation is determined by what they call a p-network. The following picture shows an example of a p-network.<P><DIV ALIGN="CENTER"><IMG WIDTH="430" HEIGHT="103" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="\epsfbox{p3475.eps}"> <tex2html_verbatim_mark></DIV><P>In the general case, a <SPAN CLASS="textit">p-network of order <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and size <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark></SPAN> ,has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> horizontal wires numbered <SPAN CLASS="MATH">1, 2,...<I>N</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> vertical strokes. Each stroke connects two consecutive wires. There are no two different strokes touching the same point of any wire, and there is no stroke touching the leftmost or rightmost point of any wire. The above example is a p-network of order 5 and size 9.<P>The transformation determined by a p-network can be explained using a set of rules that govern the way a p-network should be traversed:<P><OL><LI>start at the leftmost point of one wire, and go to the right; </LI><LI>each time a stroke appears move to the connected wire, and keep going from left to right; </LI><LI>stop when the rightmost point of one wire is reached. </LI></OL><P>If starting at wire <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> the traversing ends at wire <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, we say that the p-network transforms <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, and we denote this with <SPAN CLASS="MATH"><I>i</I> <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \rightarrow$"> <I>j</I></SPAN> <tex2html_verbatim_mark> . In the above example the p-network determines the set of transformations<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">{1 <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$\displaystyle \rightarrow$"> 3, 2 <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$\displaystyle \rightarrow$"> 5, 3 <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$\displaystyle \rightarrow$"> 4, 4 <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$\displaystyle \rightarrow$"> 1, 5 <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$\displaystyle \rightarrow$"> 2}.</DIV><P><tex2html_verbatim_mark></P><P>Pretty Networks Inc. hired you to solve the following p-network design problem: given a number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and a set of transformations <SPAN CLASS="MATH">{1 <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \rightarrow$"> <I>i</I><SUB>1</SUB>, 2 <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \rightarrow$"> <I>i</I><SUB>2</SUB>,...<I>N</I> <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \rightarrow$"> <I>i</I><SUB>N</SUB>}</SPAN> <tex2html_verbatim_mark>, decide if a p-network of order <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> can be built to accomplish them and, in this case, give one that does it.<P>When there exists a solution with a certain size, in many cases there is another solution with a greater size. Scientists at Pretty Networks Inc. have stated that if there exists a solution for a p-network design problem, then there is a solution with size less than <SPAN CLASS="MATH">4<I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> . Therefore, they are interested only in solutions having a size below this bound.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input has a certain number of p-network design problems. Each problem is described in just one line that contains the values <SPAN CLASS="MATH"><I>N</I>, <I>i</I><SUB>1</SUB>, <I>i</I><SUB>2</SUB>,..., <I>i</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark> , separated by a single blank space. The value <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the order of the desired p-network, i.e., its number of wires <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>. The values <SPAN CLASS="MATH"><I>i</I><SUB>1</SUB>, <I>i</I><SUB>2</SUB>,...<I>i</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark> represent that the p-network should determine the set of transformations <SPAN CLASS="MATH">{1 <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \rightarrow$"> <I>i</I><SUB>1</SUB>, 2 <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \rightarrow$"> <I>i</I><SUB>2</SUB>,..., <I>N</I> <IMG WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \rightarrow$"> <I>i</I><SUB>N</SUB>}</SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>i</I><SUB>j</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>, for each <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>). The input ends with a line in which <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark>; this line must not be processed as a p-network design problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each p-network design problem in the input, the output must contain a single line. If the problem has no solution the line must be `<TT>No solution</TT>'. Otherwise the line must contain a description of any p-network (with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> wires and less than <SPAN CLASS="MATH">4<I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> strokes) that accomplishes the requested set of transformation. This description is given by a set of values <SPAN CLASS="MATH"><I>M</I>, <I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>,..., <I>s</I><SUB>M</SUB></SPAN> <tex2html_verbatim_mark>, where consecutive values are separated by a single blank space. The value <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the size of the p-network, i.e., its number of strokes. The values <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>,...<I>s</I><SUB>M</SUB></SPAN> <tex2html_verbatim_mark> describe the strokes of the p-network; it should be understood that the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th stroke from left to right, connects the wires <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1 + <I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>M</I></SPAN> <tex2html_verbatim_mark>). Notice that <!-- MATH
 $0 \le M < 4N^{2}$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>M</I> &lt; 4<I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>, while <!-- MATH
 $1 \le s_{i} < N$
 --><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>s</I><SUB>i</SUB> &lt; <I>N</I></SPAN> <tex2html_verbatim_mark> for each <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3475img1.png ALT="$ \le$"><I>M</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 3 5 4 1 2 
3 1 1 3 
2 1 2 
2 1 2 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9 1 3 2 4 1 3 2 3 4 
No solution 
0 
2 1 1
</PRE><P>
______________________________________________________
3476||||||false||||||
<P>Light Up is a puzzle set in a rectangular board divided in smaller squares. Some squares in the board are ``empty" (white squares the figure below), some squares are ``barriers" (dark squares in the figure below). A barrier square may have an integer number i associated to it <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$">4)</SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="318" HEIGHT="143" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="\epsfbox{p3476.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 2: (a) Puzzle with 6 rows, 7 columns and 7 barriers; (b) a solution to the puzzle.</DIV><P>In this puzzle the goal is to ``light up" all the empty squares by placing lamps in some of them (lamps are depicted as circles in the figure). Each lamp illuminates the square it is on, plus all squares in line with it, horizontally or vertically, up to a barrier square or the board end.<P>A winning configuration satisfies the following conditions:<P><UL><LI>all empty squares must be lit; </LI><LI>no lamp may be lit by another lamp; </LI><LI>all numbered barrier squares must have exactly that number of lamps adjacent to them (in the four squares above, below, and to the side); </LI><LI>non-numbered barrier squares may have any number of lamps adjacent to them. </LI></UL><P>You must write a program to determine the smallest number of lamps that are needed to reach a winning configuration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of a test case contains two integers <SPAN CLASS="MATH"><I>N</I>, <I>M</I></SPAN> <tex2html_verbatim_mark> indicating respectively the number of rows and the number of columns of the board <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$">7, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$">7)</SPAN> <tex2html_verbatim_mark>. The second line contains one integer <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> indicating the number of barrier squares <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$"><I>N</I> <TT>x</TT> <I>M</I>)</SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> lines describe a barrier, containing three integers <SPAN CLASS="MATH"><I>R</I>, <I>C</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> , representing respectively the row number <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$"><I>N</I>)</SPAN> <tex2html_verbatim_mark>, the column number <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$"><I>M</I>)</SPAN> <tex2html_verbatim_mark> and the barrier number <SPAN CLASS="MATH">(- 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3476img1.png ALT="$ \le$">4)</SPAN> <tex2html_verbatim_mark>; <SPAN CLASS="MATH"><I>K</I> = - 1</SPAN> <tex2html_verbatim_mark> means the barrier is unnumbered. The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = <I>M</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input your program must produce one line of output, containing either an integer indicating the smallest number of lamps needed to reach a winning configuration, in case such a configuration exists, or the words `<TT>No solution</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 2 
0 
2 2 
1 
2 2 1
6 7 
7 
2 3 -1
3 3 0 
4 2 1 
5 4 3 
5 6 2 
1 7 -1
6 5 -1
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
No solution 
8
</PRE>
______________________________________________________
3477||||||false||||||
<P>Sudoku is a placement puzzle. The goal is to enter a symbol in each cell of a grid, most frequently a <SPAN CLASS="MATH">9 <TT>x</TT> 9</SPAN> <tex2html_verbatim_mark> grid made up of <SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> <tex2html_verbatim_mark> subgrids. Each row, column and subgrid must contain only one instance of each symbol. Sudoku initially became popular in Japan in 1986 and attained international popularity in 2005.<P><DIV ALIGN="CENTER"><IMG WIDTH="957" HEIGHT="315" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3477.gif ALT="\epsfbox{p3477.eps}"> <tex2html_verbatim_mark></DIV><P>The word Sudoku means ``single number" in Japanese. The symbols in Sudoku puzzles are often numerals, but arithmetic relationships between numerals are irrelevant.<P><P><BR>According to wikipedia:<P><BLOCKQUOTE>The number of valid Sudoku solution grids for the standard <SPAN CLASS="MATH">9 <TT>x</TT> 9</SPAN> <tex2html_verbatim_mark> grid was calculated by Bertram Felgenhauer in 2005 to be 6,670,903,752,021,072,936,960, which is roughly the number of micrometers to the nearest star. This number is equal to <SPAN CLASS="MATH">9! <TT>*</TT> 72<SUP><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3477.gif ALT="$\scriptstyle \wedge$"></SUP>2 <TT>*</TT> 2<SUP><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3477.gif ALT="$\scriptstyle \wedge$"></SUP>7 <TT>*</TT> 27, 704, 267, 971</SPAN> <tex2html_verbatim_mark>, the last factor of which is prime. The result was derived through logic and brute force computation. The number of valid Sudoku solution grids for the <SPAN CLASS="MATH">16 <TT>x</TT> 16</SPAN> <tex2html_verbatim_mark> derivation is not known.</BLOCKQUOTE><P>Write a program to find a solution to a <SPAN CLASS="MATH">9 <TT>x</TT> 9</SPAN> <tex2html_verbatim_mark> Sudoku puzzle given a starting configuration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line will contain an integer specifying the number of puzzles to be solved. The remaining lines will specify the starting configuration for each of the puzzles. Each line in a starting configuration will have nine characters selected from the numerals 1-9 and the underscore which indicates an empty cell.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each puzzle, the output should specify the puzzle number (starting at one) and describe the solution characteristics. If there is a single solution, it should be printed. Otherwise, a message indicating whether there are no solutions or multiple solutions should be printed. The output should be similar to that shown below. All input cases have less than 10,000 solutions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
________4
1____9_7_
__37_28__
____7_26_
4_______8
_91_6____
__42_36__
_3_14___9
9________
7_9__2___
3_____891
___39___4
48__6____
__5___6__
____4__23
2___57___
568_____7
___8__4_2
82_______
___5__2__
__6_4_7__
_5___1_7_
9_2_5_4_1
_3_8_6_9_
__3_6_1__
__5__2___
_______34
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Puzzle 1 has 6 solutions

Puzzle 2 solution is
719482365
324675891
856391274
482563719
135729648
697148523
243957186
568214937
971836452

Puzzle 3 has no solution
</PRE><P>
______________________________________________________
3478||||||false||||||
<P>If you have good observations skills, you may found that building a Magic Square is simple. A Magic Square has only an odd number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> of rows and columns. For this problem you could expect the values to be <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3478img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3478img1.png ALT="$ \le$">15</SPAN> <tex2html_verbatim_mark>. A Magic Square is created by integer numbers in the range from 1 to <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>, with a peculiar property, the ``sum of the numbers" in each row, column and diagonal is the same value.<P><P><BR>For example the case for <SPAN CLASS="MATH"><I>n</I> = 3</SPAN> <tex2html_verbatim_mark> is:<P><PRE>
M. Square                Rows          Columns       Diagonals
 8 1 6                   8+1+6 = 15    8+3+4 = 15    8+5+2 = 15
 3 5 7                   3+5+7 = 15    1+5+9 = 15    4+5+6 = 15
 4 9 2                   4+9+2 = 15    6+7+2 = 15
</PRE><P><P><BR><B>Hint:</B> Imagine that the square is rounded. That is, the last row is connected with the first row and the last column is connected with the first column. As shown in the examples, the starting point is the center of the first row and observe how the numbers are placed following diagonals. There is only one more thing to observe, what happens when you find a cell that is already in use.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>A file with several lines, each line has the value of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input line, print <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and the sum in the first line, followed by the magic square. To see a nice looking square, take into account the maximum length in characters of <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> and print each number with the maximum length preceded by one space or blank character. Print one line between squares.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
n=3, sum=15
 8 1 6
 3 5 7
 4 9 2

n=5, sum=65
 17 24  1  8 15
 23  5  7 14 16
  4  6 13 20 22
 10 12 19 21  3
 11 18 25  2  9
</PRE><P>
______________________________________________________
3479||||||false||||||
<P>Atomic clusters of chemical compounds are used to build materials for new applications in nanoelectronic circuits design, protein folding, etc. Frequently the face centered cubic (fcc) geometry is used to configure that clusters. In this geometry the atoms are distributed by layers like we pile oranges in a box. The pile structure is showed in the next figure:<P><DIV ALIGN="CENTER"><IMG WIDTH="447" HEIGHT="462" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3479a.gif ALT="\epsfbox{p3479a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: Atomic Pile</DIV><P>We suppose that the layers are parallel to the XY plane. The figure 2 shows a basic square pyramid formed with atoms of two consecutive layers.<P><DIV ALIGN="CENTER"><IMG WIDTH="348" HEIGHT="312" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3479a.gif ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}\mbox{}
\epsfxsize=3in
\epsfbox{p3479b.eps}
\end{center}}$"><IMG WIDTH="276" HEIGHT="175" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3479a.gif ALT="$\textstyle \parbox{.49\textwidth}{
$\overline{P1P2} = \overline{P1P2} = \overli...
...e base
\par
$V$: top vertex
\par
\medskip
Order points:
\par
$P1, P2, P3, P4$
}$"></DIV><P><DIV ALIGN="CENTER">Figure 2: Square pyramid properties</DIV><P>The task is to develop a program to calculate the coordinates of the atoms in the upper vertex of square pyramids, given the coordinates of the four atoms in the square base for each pyramid. The vertexes of the square base of the pyramids are given in the order showed in the figure 2.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consist of sets of three real numbers <SPAN CLASS="MATH">(<I>x</I>&nbsp;<I>y</I>&nbsp;<I>z</I>)</SPAN> <tex2html_verbatim_mark>, separated by a space, which represent the coordinates of vertexes of the bases of the square pyramids, where <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3479a.gif ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3479a.gif ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3479a.gif ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3479a.gif ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3479a.gif ALT="$ \le$"><I>z</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3479a.gif ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>. The sets representing the square bases are separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The list of the upper vertexes coordinates of the square bases given in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1 4
1 5 4
5 1 4
5 5 4

37.5 232.4 165
37.5 275.9 165
81 275.9 165
81 232.4 165

32 19.3 642.2
32 35 642.2
52 35 642.2
52 19.3 642.2

14 32 10
14 49.5 10
31.5 49.5 10
31.5 32 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 3 2.82
59.25 254.14 30.75
42 27.15 9.21
22.75 40.75 12.37
</PRE><P>
______________________________________________________
3480||||||false||||||
<P>
Due to climatic phenomenon like the ``Ni&#241;o" that produced strong changes in the weather of the earth, we need to sense the temperatures along different areas of the earth.

<P>
We get lectures of temperatures in several areas of the planet by random infrared sweeping using a satellite, each register of them contain the value of temperature in Kelvin grades <!-- MATH
 $(0 \le T \le 10000)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3480img1.png
 ALT="$ \le$"><I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3480img1.png
 ALT="$ \le$">10000)</SPAN>
<tex2html_verbatim_mark>, and the coordinates of its position, which for practical use we will put them in an XY plane in the interval [0,100], in both axes.

<P>
The interval is divided in 100 areas with dimension of <!-- MATH
 $10 \times 10$
 -->
<SPAN CLASS="MATH">10 <TT>x</TT> 10</SPAN>
<tex2html_verbatim_mark> kilometers each, counted from the origin like we show in the next diagram:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3480.eps}$
 -->
<IMG
 WIDTH="601" HEIGHT="284" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3480img1.png
 ALT="\epsfbox{p3480.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
For each area we need to determinate the maximum temperature for the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> sweeps; besides if the maximum temperature for an area is greater than 473<SPAN CLASS="MATH"><SUP>o</SUP></SPAN>
<tex2html_verbatim_mark>K the area will be defined as a fire risk area. 

<P>
A point situated at the edge between areas must be considerate in all of them.

<P>
The task is to report the fire risk areas.

<P>
The areas without temperature value will be considerate to have a temperature value of 0<SPAN CLASS="MATH"><SUP>o</SUP></SPAN>
<tex2html_verbatim_mark>K

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line contains the number of sweeps, <!-- MATH
 $1 \le n \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3480img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3480img1.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>, the following lines contains the registers corresponding to the n sweeps. Each sweep separated by one empty line.

<P>
Each register is formed by three numbers, the first is a real number indicating the temperature, the next two integers represent the <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark> coordinates of the lecture point separated by one space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output consist of the sequence of fire risk areas, in ascending order by area number.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2
200.3 12 23
1200 18 25
500 30 25
100.8 38 22
323 45 42
200 48 41
900 90 30
1000 100 25

400.3 87 23
100 23 25
50 43 25
100.2 38 22
500 95 24
254.3 88 41
98.8 77 32
324.3 10 50
123.4 80 80
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
22
23
24
29
30
39
40
30
</PRE> 

<P>

______________________________________________________
3481||||||false||||||
<P>Karell Incorporated has designed a new exploration robot that has the ability to explore new terrains, this new robot can move in all kinds of terrain, it only needs more fuel to move in rough terrains, and less fuel in plain terrains. The only problem this robot has is that it can only move orthogonally, the robot can only move to the grids that are at the North, East, South or West of its position.<P>The Karell`s robot can communicate to a satellite dish to have a picture of the terrain that is going to explore, so it can select the best route to the ending point, The robot always choose the path that needs the minimum fuel to complete its exploration, however the scientist that are experimenting with the robot, need a program that computes the path that would need the minimum amount of fuel. The maximum amount of fuel that the robot can handle is 9999 units<P>The Terrain that the robot receives from the satellite is divided into a grid, where each cell of the grid is assigned to the amount of fuel the robot would need to pass thought that cell. The robot also receives the starting and ending coordinates of the exploration area.<P><DIV ALIGN="CENTER"><IMG WIDTH="256" HEIGHT="221" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3481.gif ALT="\epsfbox{p3481.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Path Example</DIV><P><DIV ALIGN="CENTER">From (1,1) to (5,5)</DIV><P><DIV ALIGN="CENTER">Fuel needed 10</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file is the number of tests that must be examined.<P>The first line of the test is the number of rows and columns that the grid will contain. The rows and columns will be <!-- MATH
 $0 < row \le 100$
 --><SPAN CLASS="MATH">0 &lt; <I>row</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3481.gif ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 < column \le 100$
 --><SPAN CLASS="MATH">0 &lt; <I>column</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3481.gif ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark><P>The next lines are the data of the terrain grid<P>The last line of the test has the starting and ending coordinates.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>One line, for each test will have the amount of fuel needed by the robot<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Imput</A>&nbsp;</FONT></H2><P><PRE>
3
5 5
1 1 5 3 2
4 1 4 2 6
3 1 1 3 3 
5 2 3 1 2
2 1 1 1 1
1 1 5 5 
5 4
2 2 15 1
5 1 15 1
5 3 10 1
5 2 1 1 
8 13 2 15
1 1 1 4 
10 10
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 10 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10
15
19
</PRE><P>
______________________________________________________
3482||||||false||||||
<P>With the introduction of the X-Box, Game-cube, and other Play Station games, Nallely is worried that her son may grow up under a bad influence. She has therefore decided to make her son play the following classical game.<P>On a rectangular board a labyrinth is described; the labyrinth has 3 little balls on it (each ball, the size of a cell on the labyrinth), which have to get to three final positions (simultaneously). These positions are always the three bottom cells of the rightmost column.<P><IMG WIDTH="438" HEIGHT="420" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3482a.gif ALT="$\textstyle \parbox{.6\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=4in
\epsfbox{p3482a.eps}
\par
Fig. 1. Test case A
\end{center}}$"><IMG WIDTH="279" HEIGHT="522" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3482a.gif ALT="$\textstyle \parbox{.39\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=2.5in
\epsfbox{p3482b.eps}
\par
Fig. 2. Test case B
\end{center}}$"><P>The rules are simple:<P><DL COMPACT><DT>a)</DT><DD>The board is initially held up in the air in a horizontal position.</DD><DT>b)</DT><DD>In each step, the player slightly tilts the board in one of four directions: north, south, east or west. Gravity then causes each ball to roll down, unless a wall or another (stationary) ball is in its way. When the balls have rolled down one cell (if they move at all), the player straightens up the board to a horizontal position, halting the balls' motion.</DD><DT>c)</DT><DD>The balls cannot fall off the board.</DD></DL><P>Pablito, Nallely's son, played this game and found it very amusing, but every time he finished a game, his mother would rearrange the walls of the labyrinth, making it each time harder for him to complete the job, until he will be unable to do it.<P>You have to help Pablito solve each puzzle, telling him the directions in which to tilt the board. He knows that you are a very good programmer and you like challenges. He therefore asks you to actually print the solution with the <SPAN CLASS="textit">least number of steps. In case multiple solutions with the minimum number of steps exist, select the smallest of them according to lexicographical order.</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>For each test case you get <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3482a.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3482a.gif ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3482a.gif ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3482a.gif ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark>, which correspond to the number of rows and columns on the board. The rows are numbered 1 through <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> from top to bottom, and the columns 1 through <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, from left to right. A cell of the board is identified by a pair (row, column) of integers separated by space. In each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> rows of input you get m numbers that describe the walls position in the labyrinth in the following way.<P>The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th number of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th row of input, <SPAN CLASS="MATH"><I>A</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3482a.gif ALT="$ \le$"><I>A</I><SUB>ij</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3482a.gif ALT="$ \le$">15)</SPAN> <tex2html_verbatim_mark>, indicates, when written in base 2, which sides of cell <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> of the board are solid walls. The most significant bit corresponds to the western side of the cell, the second most significant bit corresponds to the southern side of the cells, the third most significant bit corresponds to the eastern side of the cell, and the least significant bit corresponds to the northern side of the cell. When a bit is on, there is a wall on the corresponding side; when it is off, there is no wall. For example:<P><DIV ALIGN="CENTER"><IMG WIDTH="883" HEIGHT="147" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3482a.gif ALT="\epsfbox{p3482c.eps}"> <tex2html_verbatim_mark></DIV><P>In each of the last three lines, you get two integers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> that indicate the position <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> of a ball. These three positions will always be different.<P>The output ends when <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> are equal to zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case you have to print `<TT>Case <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark></TT>', where <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> runs from 1 to the number of test cases, and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the least number of steps that have to be performed to solve the corresponding puzzle. In the next line print those steps (`<TT>N</TT>' for tilting the board to the north, `<TT>E</TT>' for tilting it to the east, `<TT>S</TT>' for south, and `<TT>W</TT>' for west). If there is no way to solve the puzzle, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> must be `<TT>-1</TT>', and the next line must contain the word `<TT>Impossible</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3
9 5 3
8 3 10
12 6 14
3 1
3 2
2 2
4 3
9 1 7
8 4 3
10 15 10
12 7 14
2 3
4 2
1 3
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 14
WNENESESWNNESE
Case 2: 9
SWNNNSESE
</PRE><P><P><P><BR><B>Note:</B> The first test case of this input corresponds to Fig. 1 and the second, to Fig. 2. which are the starting position of each case. The final positions are not shown.<P>
______________________________________________________
3483||||||false||||||
<P>
The program must switch the text lines in a backward order and split them by the middle, processing the input lines in pairs. If an empty or blank line is found, it is considered as a line but it is not printed out to the output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will be a  text file with text lines.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Standard output with the switched and splitted lines.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
This lines must be printed backwards and splitted in the middle.
And each line too!
hellow my friend
how are you today
i hope you're fine

be cool, be nice.
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
hcae dnAÂ¡oot enil
wkcab detnirp eb tsum senil sihT.elddim eht ni dettilps dna sdra
y era wohyadot uo
m wollehdneirf y
oy epoh ienif er'u
 ,looc eb.ecin eb

______________________________________________________
3484||||||false||||||
<P>Recently the auction house has introduced a new type of auction, the lowest price auction. In this new system, people compete for the lowest bid price, as opposed to what they did in the past. What an amazing thing! Now you could buy cool stuff with one penny. Your task is to write the software to automate this auction system.<P>First the auctioneer puts an upper limit on bid price for each item. Only positive price less than or equal to this price limit is a valid bid. For example, if the price limit is 100, then 1 to 100, inclusive, are all valid bid prices. Bidder can not put more than one bid for the same price on a same item. However they can put many bids on a same item, as long as the prices are different. After all bids are set, the auctioneer chooses the winner according to the following rules:<P><OL><LI>If any valid price comes from only one bidder, the price is a "unique bid". If there are unique bids, then the unique bid with the lowest price wins. This price is the winning price and the only bidder is the winning bidder. </LI><LI>If there are no unique bids, then the price with fewest bids is the winning bid. If there are more than one price which has the same lowest bid count, choose the lowest one. This price is the winning price. The bidder who puts this bid first is the winning bidder. </LI></OL><P>Given the price limit and all the bids that happen in order, you will determine the winning bidder and the winning price.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Standard input will contain multiple test cases. The first line of the input is a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3484img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3484img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> which is the number of test cases. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases follow, each preceded by a single blank line.<P>The first line of each test case contains two integers: <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3484img1.png ALT="$ \le$"><I>U</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3484img1.png ALT="$ \le$">10, 000)</SPAN> <tex2html_verbatim_mark>, the price upper limit and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3484img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3484img1.png ALT="$ \le$">100, 000)</SPAN> <tex2html_verbatim_mark>, the total number of bids. <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines follow, each of which presents a single bid. The bid contains the bidder's name (consecutive non-whitespace characters) and the price <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3484img1.png ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3484img1.png ALT="$ \le$"><I>U</I>)</SPAN> <tex2html_verbatim_mark>, separated with a single space. All bids in the input are guaranteed to be valid ones.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Results should be directed to standard output. Start each case with "<TT>Case <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>:</TT>" on a single line, where <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.<P>For each test case, print the sentence "<TT>The winner is <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>.</TT>" on the first line, and "<TT>The price is <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>.</TT>" on the second. Replace <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> with the winning bidder's name and the winning price.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

3 3
Alice 1
Bob 2
Carl 3

3 6
Alice 1
Alice 2
Alice 3
Bob 1
Bob 3
Carl 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
The winner is Alice.
The price is 1.

Case 2:
The winner is Alice.
The price is 2.
</PRE><P>
______________________________________________________
3485||||||false||||||
<P>A suspension bridge suspends the roadway from huge main cables, which extend from one end of the bridge to the other. These cables rest on top of high towers and are secured at each end by anchorages. The towers enable the main cables to be draped over long distances.<P>Suppose that the maximum distance between two neighboring towers is <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>, and that the distance from the top of a tower to the roadway is <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark>. Also suppose that the shape of a cable between any two neighboring towers is the same symmetric parabola (as shown in the figure). Now given <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, the length of the bridge and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, the total length of the cables, you are asked to calculate the distance between the roadway and the lowest point of the cable, with minimum number of towers built (Assume that there are always two towers built at the two ends of a bridge).<P><DIV ALIGN="CENTER"><IMG WIDTH="780" HEIGHT="369" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3485.gif ALT="\epsfbox{p3485.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Standard input will contain multiple test cases. The first line of the input is a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3485.gif ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3485.gif ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> which is the number of test cases. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases follow, each preceded by a single blank line.<P>For each test case, 4 positive integers are given on a single line.<P><DL COMPACT><DT><SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark></DT><DD>- the maximum distance between two neighboring towers;</DD><DT><SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark></DT><DD>- the distance from the top of a tower to the roadway;</DD><DT><SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark></DT><DD>- the length of the bridge; and</DD><DT><SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark></DT><DD>- the total length of the cables.</DD></DL><P>It is guaranteed that <SPAN CLASS="MATH"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3485.gif ALT="$ \le$"><I>L</I></SPAN> <tex2html_verbatim_mark>. The cable will always be above the roadway.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Results should be directed to standard output. Start each case with "<TT>Case <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>:</TT>" on a single line, where <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.<P>For each test case, print the distance between the roadway and the lowest point of the cable, as is described in the problem. The value must be accurate up to two decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

20 101 400 4042

1 2 3 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
1.00

Case 2:
1.60
</PRE><P>
______________________________________________________
3486||||||false||||||
<P>Scientists are conducting research on the behavior of a newly discovered Agamic Cellular Microbe. This special kind of microbe is capable of massively reproducing by itself in a short time. The lifetime of an ACM consists of three phases:<P><OL><LI>The infancy phase, which starts from its birth and lasts for approximately several seconds; </LI><LI>The multiplication phase, in which one ACM can procreate up to 100 offspring in only several milliseconds; </LI><LI>The mature phase, in which it remains inactive for the rest of its life. </LI></OL><P>At the beginning of the experiment, a newborn, single cell of ACM, is put into a suitable circumstance for its production. This cell, numbered as 0, starts to multiply and its descendants are numbered, starting from 1, according to their positions in the family hierarchy. During the experiment special equipment is used to record the numbers of the offspring generated by each of the ACM's. The experiment is stopped after a certain time period.<P><DIV ALIGN="CENTER"><IMG WIDTH="479" HEIGHT="466" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3486.gif ALT="\epsfbox{p3486.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">The family tree of ACM's in the first case of sample input</DIV><P>Your task is to help the scientists to determine whether one ACM is an ancestor of another.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Standard input will contain multiple test cases. The first line of the input is a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3486.gif ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3486.gif ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> which is the number of test cases. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases follow, each preceded by a single blank line.<P>Each test case starts with a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3486.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3486.gif ALT="$ \le$">300, 000)</SPAN> <tex2html_verbatim_mark> which is the number of ACM's that have their descendants recorded. The following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers (not necessarily on a same line), <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 \le i < N, 0 \le C_{i} \le 100)$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3486.gif ALT="$ \le$"><I>i</I> &lt; <I>N</I>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3486.gif ALT="$ \le$"><I>C</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3486.gif ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, give the number of offspring of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th ACM. The next line contains an integer <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3486.gif ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3486.gif ALT="$ \le$">1, 000, 000)</SPAN> <tex2html_verbatim_mark> which is the number of queries. <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines follow, each contains two integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, querying whether the <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>-th ACM is an ancestor of the <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>-th ACM.<P>The total number of ACM's may be greater than <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, but would never exceed 20,000,000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Results should be directed to standard output. Start each case with "<TT>Case <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>:</TT>" on a single line, where <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.<P>For each query, print either ``<TT>Yes</TT>" or ``<TT>No</TT>" on a single line, which is the answer to the query.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

6
3 2 1 1 0 2
5
0 1
2 4
3 5
1 8
6 9

5
2 0 3 0 1
4
2 6
1 6
2 3
3 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
Yes
No
No
Yes
No

Case 2:
Yes
No
Yes
No
</PRE><P>
______________________________________________________
3487||||||false||||||
<P>The mobile network market in country XYZ used to be dominated by two large corporations, XYZ Telecom and XYZ Mobile. The central government recently has realized that radio frequency spectrum is a scarce resource and wants to regulate its usage. The spectrum currently in use is divided into 300,000 channels. Any wireless service provider who wishes to use certain spectrum should apply for licenses on these channels. While some services may require use of multiple channels, a single channel can not be shared by different services.<P>The central government wants to maximize its revenue from the spectrum by putting the channels up to an auction. The only two bidders are XYZ Telecom and XYZ Mobile. They are allowed to place bids on combinations of channels, through which their services can communicate with the customers. Furthermore, the government stipulates that a company can only place at most one bid on a specific channel.<P>The government can only accept a subset of the bids so none of them would conflict with each other. However, officials soon find out that it is a difficult task to determine the winning bids in order to maximize the revenue, and they are asking for your help.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Standard input will contain multiple test cases. The first line of the input is a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3487img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3487img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> which is the number of test cases. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases follow, each preceded by a single blank line.<P>Each test case has two bid description sections, which are for XYZ Telecom and XYZ Mobile, respectively. Each section starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3487img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3487img1.png ALT="$ \le$">3, 000)</SPAN> <tex2html_verbatim_mark>, which is the number of bids that follow. The next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines each contain the description for one bid, the first integer <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3487img1.png ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3487img1.png ALT="$ \le$">1, 000)</SPAN> <tex2html_verbatim_mark> gives the price of that bid, followed by the channel numbers required by this service. A service would require at least 1 channel and at most 32 channels. Each channel number is a positive integer and will never exceed 300,000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Results should be directed to standard output. Start each case with "<TT>Case <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>:</TT>" on a single line, where <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.<P>For each test case, print the maximized revenue the government is able to collect by issuing licenses on the channels.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

3
45 1
51 2
62 3
4
54 1
15 2
33 3
2 4 5

5
20 1
18 2
23 4
54 3 5 6
17 7
4
36 1 2 3
28 5
47 4 7
16 6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
169

Case 2:
139
</PRE><P>
______________________________________________________
3488||||||false||||||
<P>It is said that Columbus once invented card games. After thousands of years, all kinds of card games have spread all over the world. Shuffling the deck is an inevitable task, because no one wants to play the same game twice. There are usually 54 cards in a deck, and we usually shuffle the deck by repeatedly taking out a sequence of cards and put them onto the top of the deck. The following figure illustrates the effect of a single shuffle.<P><DIV ALIGN="CENTER"><IMG WIDTH="649" HEIGHT="205" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="\epsfbox{p3488.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">A single shuffle with <SPAN CLASS="MATH"><I>P</I> = 2</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I> = 3</SPAN> <tex2html_verbatim_mark> will move the white cards onto the top</DIV><P>To help people shuffle, Edison invented a machine, namely Automated Card-shuffling Machine. The machine is controlled by instructions, which give the starting position <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> and the length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> of the sequence. Of course the instructions are generated by a randomizer. Unfortunately it is discovered that the randomizer has a bug that leads to repetitive instructions. That is, several consecutive instructions may be exactly the same. Though despaired, Edison decides to pack the repetitive instructions into a single ``extended instruction" and ship this machine off to the market. An extended instruction consists of not only <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> for a sequence, but also the number of times <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> it repeats.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Standard input will contain multiple test cases. The first line of the input is a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> which is the number of test cases. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases follow, each preceded by a single blank line.<P>The first line of each test case contains two integers <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < C \le 1,000,000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$">1, 000, 000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$">5, 000)</SPAN> <tex2html_verbatim_mark>. The deck holds <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> cards, numbered from 0 to <SPAN CLASS="MATH"><I>C</I> - 1</SPAN> <tex2html_verbatim_mark>, and we will do <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> shuffles.<P>The following <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> lines contain three integers each, <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 \le P_{i} < C)$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$"><I>P</I><SUB>i</SUB> &lt; <I>C</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$"><I>L</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$"><I>C</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$"><I>R</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$"><I>S</I></SPAN> <tex2html_verbatim_mark>. Each line represents an extended instruction. Note that the card on the top has a position of 0. It is guaranteed that <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB> + <I>L</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3488.gif ALT="$ \le$"><I>C</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Results should be directed to standard output. Start each case with "<TT>Case <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>:</TT>" on a single line, where <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.<P>For each test case, print the sum of the card numbers at odd positions of deck after shuffling.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

10 1
5 3 1

10 3
5 3 1
2 4 1
7 2 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
24

Case 2:
23
</PRE><P><P><P><BR><B>HINT:</B> The cards on the decks after shuffling would be:<P><PRE>
Case 1 - 5 6 7 0 1 2 3 4 8 9 (5 + 7 + 1 + 3 + 8 = 24)
Case 2 - 6 3 4 8 7 0 1 2 5 9 (6 + 4 + 7 + 1 + 5 = 23)
</PRE><P>
______________________________________________________
3489||||||false||||||
<P>Modern applications are usually built upon a certain framework to handle a group of common tasks. Java web applications can utilize the Apache Struts framework to implement the controller logic. The controller receives user requests and dispatches them to appropriate actions. Once the action finishes handling the request it can choose to forward the request to either another action for further handling or to a server page to render the user interface.<P>For instance if the user hits the path ``/submitOrder" with the necessary information, the controller will first locate the action configured to serve that path and forward the request to it. The action will determine the validity of the request, and choose within one of the three forwards ``success", ``failure" or ``login". These forwards may map to different paths, for instance, ``success" to ``/processCreditCard", which is handled by another action to initiate the credit card transaction, and ``login" to ``/login.jsp" to require the user to log into the website before submitting the order.<P><DIV ALIGN="CENTER"><IMG WIDTH="519" HEIGHT="213" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3489.gif ALT="\epsfbox{p3489.eps}"> <tex2html_verbatim_mark></DIV><P>Due to the time constraint of the contest, we are not planning to cope with any serious business logic. Instead we have created a random action that will send the request to one of configured forwards with equal probability. The request will be rendered once it reaches a server page. Given a set of action configuration and a request path, we need to know which server page we are most likely to reach.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Standard input will contain multiple test cases. The first line of the input is a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3489.gif ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3489.gif ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> which is the number of test cases. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases follow, each preceded by a single blank line.<P>Each test case starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(5 \le N < 40,000)$
 --><SPAN CLASS="MATH">(5<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3489.gif ALT="$ \le$"><I>N</I> &lt; 40, 000)</SPAN> <tex2html_verbatim_mark> and a request path. The following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contain the XML segments for the action configuration.<P>One or more <TT>&lt;action&gt;</TT> elements will reside in an <TT>&lt;action-mappings&gt;</TT> document, with each action containing one or more <TT>&lt;forward&gt;</TT> elements. The format of the input will accurately follow the samples. To make it simple, each <TT>path</TT> attribute will consist of lower case English letters only.<P>The number of actions in a test case will not exceed 200, nor will the forwards in an action exceed 200. A path is a server page if and only if it is not configured to any actions. It is guaranteed that multiple actions will never serve the same path, and that the request path will also be served by one of the actions. Each action will have at least one forward that is a server page.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Results should be directed to standard output. Start each case with ``<TT>Case <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>:</TT>" on a single line, where <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.<P>For each test case, print the sentence ``<TT>Most likely to see <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> with the probability of <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark>%.</TT>" on the first line, where <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is the path of the server page that is most likely to be rendered, and <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> is the probability in percentage format. Print the sentence ``<TT>These page(s) are expected to go through <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> forwards.</TT>" on the second line, where <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the expected number of forwards it goes through in order to see the page.<P>If multiple pages with maximum <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> exist, choose the ones with minimum <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>. If there are still multiple pages satisfy the requirement, print them in lexicographical order, separated with a single space. <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> should be accurate up to eight decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

6 a
&lt;action-mappings&gt;
&lt;action path="a"&gt;
  &lt;forward path="b" /&gt;
  &lt;forward path="c" /&gt;
&lt;/action&gt;
&lt;/action-mappings&gt;

13 a
&lt;action-mappings&gt;
&lt;action path="a"&gt;
  &lt;forward path="b" /&gt;
  &lt;forward path="c" /&gt;
&lt;/action&gt;
&lt;action path="b"&gt;
  &lt;forward path="c" /&gt;
  &lt;forward path="d" /&gt;
&lt;/action&gt;
&lt;action path="d"&gt;
  &lt;forward path="e" /&gt;
&lt;/action&gt;
&lt;/action-mappings&gt;
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
Most likely to see b c with the probability of 50.00000000%.
These page(s) are expected to go through 1.00000000 forwards.

Case 2:
Most likely to see c with the probability of 75.00000000%.
These page(s) are expected to go through 1.33333333 forwards.
</PRE><P>
______________________________________________________
3490||||||false||||||
<P>We can generate a random string by generating a sequence of random characters and concatenating them together. Each character is chosen independently from the first <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> letters in the English alphabet with equal probability. Only capital letters are used in this problem. The generation is stopped as soon as a specific pattern occurs in the random string.<P>Your task is to predict the expected length of the generated string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Standard input will contain multiple test cases. The first line of the input is a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3490img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3490img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> which is the number of test cases. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases follow, each preceded by a single blank line.<P>Each test case consists of a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3490img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3490img1.png ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark> which is the number of letters used, and a pattern, which is a non-empty string consisting of letters chosen from the first <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> upper case English letters. The length of any pattern will not exceed 12.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Results should be directed to standard output. Start each case with ``<TT>Case <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>:</TT>" on a single line, where <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.<P>For each test case, print the expected length of the generated random string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5

2 A

2 ABA

3 AAAAA

26 ACMICPC

26 ZJUZJU
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
2

Case 2:
10

Case 3:
363

Case 4:
8031810176

Case 5:
308933352
</PRE><P>
______________________________________________________
3491||||||false||||||
<P>Little Billy likes drawing with chalks of all colors. As a child of his age, all he can do is to draw straight lines. Today he has been told that hills are of the shape of triangles, and he brought out a lot of his works and tried to identify as many hills as he could. Being one of his best friends, you gladly joined his effort. However after working for a while you are desperate to find the huge number of sketches he has produced. You suggested this alternative plan - to code up a program for him.<P><DIV ALIGN="CENTER"><IMG WIDTH="347" HEIGHT="265" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3491.gif ALT="\epsfbox{p3491.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">This sample figure only contains a single ``hill"</DIV><P>Keep in mind that in Billy's pictures all the lines are connected, and no line will have an end point right on another line. We would only count the hills that are not cut by other lines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Standard input will contain multiple test cases. The first line of the input is a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3491.gif ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3491.gif ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> which is the number of test cases. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases follow, each preceded by a single blank line.<P>Each test case starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 < N \le 500)$
 --><SPAN CLASS="MATH">(1 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/p3491.gif ALT="$ \le$">500)</SPAN> <tex2html_verbatim_mark>, which is the number of lines on the picture. The next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contain a line segment's two end points. The coordinates are all integers <!-- MATH
 $(-10,000 < x, y < 10,000)$
 --><SPAN CLASS="MATH">(- 10, 000 &lt; <I>x</I>, <I>y</I> &lt; 10, 000)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Results should be directed to standard output. Start each case with ``<TT>Case <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark>:</TT>" on a single line, where <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.<P>For each test case, print the number of hills on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3

3
-1 0 3 0
0 -1 0 3
-1 3 3 -1

4
-3 0 3 0
-3 -1 1 3
3 -1 -1 3
0 3 0 -1

6
-3 -2 3 -2
-2 -3 -2 3
-3 2 3 2
2 -3 2 3
-3 -3 3 3
1 -1 -1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
1

Case 2:
2

Case 3:
0
</PRE><P>
______________________________________________________
3492||||||false||||||
<P>
Mark I is the first generation robot designed by the corporation for mine exploration. The area to explore is always partitioned into grids. Each grid may or may not have mine underground. The robot's task is to explore the mines in the area.

<P>
The robot can perform actions according to the following four instructions:

<P>

<P>
<BR>

<PRE><TT>
<TT>Forward</TT>		 The robot will move forward by one grid; 
<BR><TT>Turn Left</TT> 		 The robot will turn to its left; 
<BR><TT>Turn Right</TT> 		 The robot will turn to its right; 
<BR><TT>Scan</TT> 		 The robot will scan the grid in front of itself.
</TT></PRE> 

<P>

<P>
<BR>
Mark I is so popular that it brings considerable profit to the corporation. However some other companies begin to devise similar products. In order to defeat those opponents, Mark II comes to the world. Since many customers complain about the complexity of the former product, Mark II no long uses the old instructions. Instead it supports only 2 instructions - Move and Scan.

<P>

<P>
<BR>
Move instruction is in the following form:

<P>

<P>
<BR>

<TT>Move <SPAN CLASS="MATH"><I>DIR</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark></TT>

<P>
<SPAN CLASS="MATH"><I>DIR</I></SPAN>
<tex2html_verbatim_mark> can be either ``<TT>Forward</TT>", ``<TT>Back</TT>", ``<TT>Left</TT>" or ``<TT>Right</TT>". <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is a positive number. It will make the robot move forward by <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> grids. If <SPAN CLASS="MATH"><I>DIR</I></SPAN>
<tex2html_verbatim_mark> is not ``<TT>Forward</TT>", the robot will turn to the specified direction before making the movements.

<P>

<P>
<BR>
Scan command is in the following form:

<P>

<P>
<BR>

<TT>Scan <SPAN CLASS="MATH"><I>DIR</I></SPAN>
<tex2html_verbatim_mark></TT>

<P>
<SPAN CLASS="MATH"><I>DIR</I></SPAN>
<tex2html_verbatim_mark> can be either ``<TT>Forward</TT>", ``<TT>Back</TT>", ``<TT>Left</TT>" or ``<TT>Right</TT>". It will make the robot scan the grid in front of itself. If <SPAN CLASS="MATH"><I>DIR</I></SPAN>
<tex2html_verbatim_mark> is not ``<TT>Forward</TT>", the robot will turn to the specified direction before performing the scans.

<P>

<P>
<BR>
In order to persuade those original customers with Mark I to upgrade their products, the corporation plans to install a new chip into Mark II, which can translate the old instruction scripts into the equivalent new version. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Standard input will contain multiple test cases. The first line of the input is a single integer <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le T \le 10)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3492img1.png
 ALT="$ \le$"><I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3492img1.png
 ALT="$ \le$">10)</SPAN>
<tex2html_verbatim_mark> which is the number of test cases. <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases follow, each preceded by a single blank line.

<P>
Each test case is an old instruction script. It starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le N \le 1,000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3492img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3492img1.png
 ALT="$ \le$">1, 000)</SPAN>
<tex2html_verbatim_mark> which is the number of instructions in the script. The following <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines give the complete script, with one instruction on each line. The area is considered boundless.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Results should be directed to standard output. Start each case with ``<TT>Case <SPAN CLASS="MATH">#</SPAN>
<tex2html_verbatim_mark>:</TT>" on a single line, where <SPAN CLASS="MATH">#</SPAN>
<tex2html_verbatim_mark> is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.

<P>
For each test case, print the minimum number of instructions in the equivalent new instruction script. The robot must start from the same location and face the same direction, and will scan the same grids in the same order.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

8
Forward
Forward
Turn Left
Forward
Scan
Turn Right
Scan
Forward
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1:
4

HINT: A possible translation would be:
Move Forward 2
Move Left 1
Scan Forward
Scan Right

______________________________________________________
3493||||||false||||||
<P>Adding binary numbers is a very simple task, and very similar to the longhand addition of decimal numbers. As with decimal numbers, you start by adding the bits (digits) one column at a time, from right to left. Unlike decimal addition, there is little to memorize in the way of rules for the addition of binary bits:<P><PRE>
   0 + 0 = 0 
   1 + 0 = 1 
   0 + 1 = 1 
   1 + 1 = 10 
   1 + 1 + 1 = 11
</PRE><P>Just as with decimal addition, when the sum in one column is a two-bit (two-digit) number, the least significant figure is written as part of the total sum and the most significant figure is ``carried" to the next left column. Consider the following examples:<P><PRE>
                       11  1 &lt;-- Carry bits --&gt; 1   11 
  1001101             1001001                    1000111 
+ 0010010           + 0011001                  + 1010110 
 --------           ---------                  ---------
  1011111             1100010                   10011101
</PRE><P>The addition problem on the left did not require any bits to be carried, since the sum of bits in each column was either 1 or 0, not 10 or 11. In the other two problems, there definitely were bits to be carried, but the process of addition is still quite simple.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3493img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3493img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, which is the number of binary addition problems that follow. Each problem appears on a single line containing two binary values separated by a single space character. The maximum length of each binary value is 80 bits (binary digits). Note: The maximum length result could be 81 bits (binary digits).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each binary addition problem, print the problem number, a space, and the binary result of the addition. Extra leading zeroes must be omitted.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
1001101 10010 
1001001 11001 
1000111 1010110
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1011111 
2 1100010 
3 10011101
</PRE><P>
______________________________________________________
3494||||||false||||||
<P>Customers of the <SPAN CLASS="textit">Bank of Kalii</SPAN> handle their banking transactions similar to the way they handle their taxes: be as terse as possible. As a result, when a customer writes a check or fills out a deposit or withdrawal form, they leave off the year on any date they write down. So, instead of writing: 09/20/2005, they would write: 9/20 and be done with it. In general, the year can be inferred since it will be relatively close to the date the transaction is actually processed by the bank.<P>Without going into the intricate details of how the <SPAN CLASS="textit">Bank of Kalii</SPAN> calculates interest and banking fees (that is a problem for another time...), suffice to say the bank must determine the actual date the customer wrote on the check or form, and calculate the number of days prior (or in the future) the document is dated. You see, <SPAN CLASS="textit">Kaliian</SPAN> bankers, like their government officials, are overworked, so they may not get around to processing transactions for up to a week. The customers know this, so they often date their checks and forms a several days in the future - this complicates the bankers' duties as well.<P><P><BR>Your job is to write a program to compare a date written on a check or form with the date the transaction is being processed, and, determine the full date the customer meant as well as how many days prior (or in the future) the document is dated.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> which is the number of datasets that follow <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. Each dataset consists of a single line containing two dates: the transaction date and the document date; there is a single space between them. The transaction date is of the form <SPAN CLASS="MATH"><I>M</I>/<I>D</I>/<I>Y</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the month number <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$">12)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> is the day of month <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$"><I>D</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$"><I>md</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> is the year <SPAN CLASS="MATH">(2000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$"><I>Y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$">2200)</SPAN> <tex2html_verbatim_mark>. The document date is of the form <SPAN CLASS="MATH"><I>m</I>/<I>d</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the month number <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$">12)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> is the day of month <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$"><I>md</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>. The values of <SPAN CLASS="MATH"><I>md</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>md</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> will not exceed the number of days in the respective months <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset print out the dataset number followed by a space followed by the result of the date comparison as shown in the table below:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Result to print</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Criteria</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>m</I>/<I>d</I> /<I>y</I></SPAN> <tex2html_verbatim_mark> <TT>IS</TT> <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <TT>DAY(S) PRIOR</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>If the document date occurs before the</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>transaction date and is within 7 days in the past</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>m</I>/<I>d</I> /<I>y</I></SPAN> <tex2html_verbatim_mark> <TT>IS</TT> <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <TT>DAY(S) AFTER</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>If the document date occurs after the transaction</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>date and is within 7 days in the future</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>SAME DAY</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>If the dates are the same.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>OUT OF RANGE</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>All other results not with +/- 7 days.</TD></TR></TBODY></TABLE></DIV><P><P><P><BR><B>Notes:</B> When printing the result date, <SPAN CLASS="MATH"><I>m</I>/<I>d</I> /<I>y</I></SPAN> <tex2html_verbatim_mark>, you will have to determine the year value <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1999<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3494img1.png ALT="$ \le$">2201)</SPAN> <tex2html_verbatim_mark>. This is not necessarily the same as the transaction date's year value <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>. Since the <SPAN CLASS="textit">Kalii</SPAN> taxation fiasco a couple of years back, the <SPAN CLASS="textit">Kaliian</SPAN> government decided to switch to the standard Gregorian calendar. As such, Gregorian leap year rules apply. A year is a leap year (February has 29 days instead of 28) if the year if evenly divisible by 4, except for century years (those ending in 00), which are leap years only if they are evenly divisible by 400. 2000 and 2004 are leap years, but 2100 and 2101 are not. For those who do not know, the months of January, March, May, July, August, October and December all have 31 days in them. February has 28 days (unless in a leap year, then it has 29). The remainder of the months has 30 days.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 
11/20/2005 11/21 
11/20/2005 11/17 
11/20/2005 11/20 
11/20/2005 11/13 
11/20/2005 11/28 
1/2/2005 12/30 
12/31/2100 1/3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 11/21/2005 IS 1 DAY AFTER 
2 11/17/2005 IS 3 DAYS PRIOR 
3 SAME DAY
4 11/13/2005 IS 7 DAYS PRIOR 
5 OUT OF RANGE
6 12/30/2004 IS 3 DAYS PRIOR
7 1/3/2101 IS 3 DAYS AFTER
</PRE><P>
______________________________________________________
3495||||||false||||||
<P>Given any string of decimal digits, ending in 1, 3, 7 or 9, there is always a decimal number, which when cubed has a decimal expansion ending in the original given digit string. The number need never have more digits than the given digit string.<P>Write a program, which takes as input a string of decimal digits ending in 1, 3, 7 or 9 and finds a number of at most the same number of digits, which when cubed, ends in the given digit string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input begins with a line containing only the count of problem instances, nProb, as a decimal integer, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3495img1.png ALT="$ \le$"><I>nProb</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3495img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>. This is followed by <SPAN CLASS="MATH"><I>nProb</I></SPAN> <tex2html_verbatim_mark> lines, each of which contains a string of between 1 and 10 decimal digits ending in 1, 3, 7 or 9.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, there should be one line of output consisting of the number, which when cubed, ends in the given digit string. The number should be output as a decimal integer with no leading spaces and no leading zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
123 
1234567 
435621 
9876543213
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
947 
2835223 
786941 
2916344917
</PRE><P>
______________________________________________________
3496||||||false||||||
<P>The WeeOnes Kindergarten has a strange ceremony as part of its graduation: The children line up with the girls on the left and the boys on the right with a single space between the boys and the girls. By making a sequence of the following four moves, the children are to end up with all the boys on the left and all the girls on the right with a single space between the boys and the girls.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Move</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Operation</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Slide left (<TT>s</TT>)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>The child to the right of the empty space moves into the empty</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>space.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Slide right (<TT>S</TT>)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>The child to the left of the empty space moves into the empty space.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Hop left (<TT>h</TT>)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>The child two spaces to the right of the open space leapfrogs over</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>the intervening child to the open space.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Hop right (<TT>H</TT>)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>The child two spaces to the left of the open space leapfrogs over</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>the intervening child to the open space.</TD></TR></TBODY></TABLE></DIV><P><P><BR>In each case, the previous position of the child who moved becomes the new open space.<P>For example, with two girls and two boys we begin with:<P><PRE>
GG_BB
</PRE><P>the following moves give the desired result:<P><PRE>
s: GGB_B
H: G_BGB
S: _GBGB
h: BG_GB
h: BGBG_
S: BGB_G
H: B_BGG
s: BB_GG
</PRE><P>The teacher would like this process to end in a reasonable amount of time so the parents can go home (the children are probably willing to do this all day). Write a program which takes as input the numbers of girls and boys (<SPAN CLASS="MATH"><I>nGirls</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>nBoys</I></SPAN> <tex2html_verbatim_mark> respectively) and finds a sequence of at most <SPAN CLASS="MATH">(<I>nGirls</I> <TT>*</TT> <I>nBoys</I> + <I>nGirls</I> + <I>nBoys</I>)</SPAN> <tex2html_verbatim_mark> moves which takes you from the starting position to the ending position. [Each girl must leapfrog over (or be leapfrogged over by) each boy and, on average, each child must move past the empty space.]<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input begins with the number of problems <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3496img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3496img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, on a line by itself followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> problem instances each on its own line. A problem instance has the form:<P><P><BR><SPAN CLASS="MATH"><I>probNumber</I>&nbsp;<I>nGirls</I>&nbsp;<I>nBoys</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where<P><DL COMPACT><DT></DT><DD><SPAN CLASS="MATH"><I>probNumber</I></SPAN> <tex2html_verbatim_mark> increases sequentially from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.</DD><DT></DT><DD><SPAN CLASS="MATH"><I>nGirls</I></SPAN> <tex2html_verbatim_mark> is the number of girls.</DD><DT></DT><DD><SPAN CLASS="MATH"><I>nBoys</I></SPAN> <tex2html_verbatim_mark> is the number of boys.</DD></DL><P>There is at least 1 child and at most 24 children in a class.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, output the problem number at the beginning of the line then a single space, then the number of moves on a line. On each following line, output the codes for the required moves in order. Each line except the last should have 50 move characters with the remainder, if any, on the final line. The last line of a problem instance result should be a single blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
1 2 2 
2 4 0 
3 5 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 8 
sHShhSHs 

2 2 
HH 

3 65 
sHShhsHHHShhhhsHHHHHshhhhhsHHHHHshhhhhsHHHHHshhhhh 
SHHHHshhhSHHshS
</PRE><P><P><P><BR><B>Note:</B> Other solutions are possible; for instance:<P><OL><LI><TT>ShsHHshS</TT> is also a solution to problem 1 </LI><LI><TT>SSSS, HSS,</TT> etc. are also acceptable answers to problem 2. </LI></OL><P>
______________________________________________________
3497||||||false||||||
<P>brainf*ck is the ungodly creation of Urban Mller, whose goal was apparently to create a Turing-complete language for which he could write the smallest compiler ever. <SPAN ID="txt48">http://en.wikipedia.org</SPAN> defines it as ``a computer programming language designed to challenge and amuse programmers, and is not suitable for practical use. Its name has been variously euphemized, as in <SPAN CLASS="textit">brainf*ck</SPAN>."<P>A brainf*ck program has an implicit byte pointer, called ``the pointer", which is free to move around within an array of 32768 bytes, initially all set to zero. The pointer itself is initialized to point to the beginning of this array.<P>The brainf*ck programming language consists of seven commands, each of which is represented as a single character. Note: ``Industry standard" brainf*ck actually has eight commands, but for the purposes of this problem one command was intentionally omitted.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">COMMAND</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">OPERATION</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>&gt;</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Increment the pointer.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Incrementing a pointer value of 32767</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>results in a pointer value of 0.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>&lt;</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrement the pointer.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrementing a pointer value of 0</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>results in a pointer value of 32767.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>+</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Increment the byte at the pointer.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Incrementing the byte value 255 results</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>in the byte value 0.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>-</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrement the byte at the pointer.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrementing the byte value 0 results</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>in the byte value 255.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>.</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Output the character whose ASCII</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>value is the byte at the pointer</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>[</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Jump forward past the matching <TT>]</TT> if the</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>byte at the pointer is zero.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>]</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Jump backward to the matching <TT>[</TT></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>unless the byte at the pointer is zero.</TD></TR></TBODY></TABLE></DIV><P><P><BR>For this problem, you will write a program that reads in, parses and executes a brainf*ck program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3497img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3497img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, which is the number of brainf*ck programs that follow. Each program consists of one or more lines of brainf*ck commands ending with a line that consists of the word `<TT>end</TT>'. Your program should ignore any illegal characters (I.E. any character not in the set: <TT>&lt;&gt;+=.[]</TT>), If a percent sign (<TT>%</TT>) is encountered during parsing, the remainder of the line should be discarded. This constitutes a comment. The maximum number of commands in a brainf*ck program is 128000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each brainf*ck program, your program should output the text `<TT>PROGRAM #<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>:</TT>' on a single line (where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the program number: <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3497img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3497img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>), followed by the output generated by the brainf*ck program, followed by a single newline character. The only possible parsing error that can occur is if there is an unmatched <TT>[</TT> or <TT>]</TT> in the brainf*ck program. If your program encounters such an error, it should simply print `<TT>COMPILE ERROR</TT>' instead of executing the program. All brainf*ck programs will use no more than the specified 32768 bytes of memory.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
++++++++[&gt;+++++++++ % hello-world.
&lt;-]&gt;.&lt;+++++[&gt;++++++&lt;-]&gt;-.+++++++.. 
+++.&lt;++++++++[&gt;&gt;++++&lt;&lt;-]&gt;&gt;.&lt;&lt;++++[&gt; 
------&lt;-]&gt;.&lt;++++[&gt;++++++&lt;-]&gt;.+++. 
------.--------.&gt;+. 
end 
+++[&gt;+++++++[. 
end 
%% Print alphabet, A-Z. 
+ + + + + +++++++++++++++++++++&gt; 
++++++++++++++++++++++++++++++++ 
++++++++++++++++++++++++++++++++ 
+&lt; [ &gt;.+&lt;- ] 
end
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
PROGRAM #1: 
Hello World! 
PROGRAM #2: 
COMPILE ERROR 
PROGRAM #3: 
ABCDEFGHIJKLMNOPQRSTUVWXYZ
</PRE><P>
______________________________________________________
3498||||||false||||||
<P>The <SPAN CLASS="textit">Frobozz Magic Lock Company</SPAN> is in the business of manufacturing push button style combination door locks. A <SPAN CLASS="textit">push button</SPAN> door lock consists of a number of push buttons <SPAN CLASS="MATH"><I>B</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3498img1.png ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3498img1.png ALT="$ \le$">11)</SPAN>, labeled ``1" through ``<SPAN CLASS="MATH"><I>B</I></SPAN>". The lock is opened by pressing the correct sequence of button combinations and then turning the doorknob. If the sequence of presses is correct, the door <SPAN CLASS="textit">magically</SPAN> opens.<P>A <SPAN CLASS="textit">combination</SPAN> consists of 1 or more buttons being pressed simultaneously. A <SPAN CLASS="textit">sequence</SPAN> consists of a series of combinations. A sequence must have at least one combination. Once a button has been used in a combination, it may not be used again in the same sequence. In addition, it is not necessary to use all the buttons in a sequence. For example, for <SPAN CLASS="MATH"><I>B</I> = 8</SPAN>:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">(1 - 2 - 3)(4)(7 - 8)</DIV><P></P>is a valid sequence with 3 combinations <SPAN CLASS="MATH">(1 - 2 - 3)</SPAN>, <SPAN CLASS="MATH">(4)</SPAN>, and <SPAN CLASS="MATH">(7 - 8)</SPAN>. Note that buttons 5 and 6 are not used in this sequence.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">(1 - 2 - 3)(2 - 4)(5 - 6)</DIV><P></P>is not a valid sequence, since button 2 appears in 2 combinations <SPAN CLASS="MATH">(1 - 2 - 3)</SPAN> and <SPAN CLASS="MATH">(2 - 4)</SPAN>.<P>The CEO of Frobozz, <SPAN CLASS="textit">J. Pierpont Flathead</SPAN>, wants you to write a program that determines the number of valid sequences possible for given values of <SPAN CLASS="MATH"><I>B</I></SPAN>. The program must be able to process a list of lock orders (datasets) from customers and generate a report showing the order number, the value of <SPAN CLASS="MATH"><I>B</I></SPAN>, and the number of valid sequences possible. This list will always contain at least one dataset, but no more than 100 datasets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3498img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3498img1.png ALT="$ \le$">100)</SPAN>, representing the number of datasets that follow. Each dataset consists of a single line of data containing a single integer <SPAN CLASS="MATH"><I>B</I></SPAN>, which is the number of buttons for the lock.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, display the dataset number, a blank, the value <SPAN CLASS="MATH"><I>B</I></SPAN>, a blank, and the number of valid sequences.<P><DIV ALIGN="CENTER">J. Pierpont Flathead</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
3
4
3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3 25
2 4 149
3 3 25
</PRE><P><P><BR>Reference Materials:<P><DIV ALIGN="CENTER">=3in <IMG WIDTH="473" HEIGHT="608" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/34/3498img1.png ALT="\epsfbox{p3498.eps}"></DIV><P>
______________________________________________________
3499||||||false||||||
<P>
The recent Texas Hold'em craze has spawned a bunch of on-line Poker sites. These sites tend to breed a group of poor players whose primary strategy is to never fold or throw away a hand. These players will always play and bet on every card on every hand  no matter what the cost or what cards they have. You have decided to take advantage of these stupid players by developing your own poker site that allows you to always beat these players. 

<P>

<P>
<BR>
The way your site will work is: there are only two players in each game: you and your opponent (this is called a <SPAN  CLASS="textit">heads-up</SPAN> game). Each of the two players will get two ``hole cards"; these cards are dealt face down so, presumably, only the player can see them. Four of the five community cards (cards shared by both players) will be dealt face up on the table. We will dispense with any betting for the purpose of this problem: it is irrelevant since each player will always call every bet right to the ``river" (the fifth and final community card). You will always be seated at position 1, and your opponent at position 2. The program knows what seat you are sitting at and the hole cards for both players, therefore, it can compute all the cards that remain in the deck that will <SPAN  CLASS="textit">maximize</SPAN> the amount of money you would get playing the hand folding is <SPAN  CLASS="textit">not</SPAN> an option. In the event there is no card that would allow you to win or tie the hand, you will be forced to take a loss on that hand (after all, it looks good if you lose <SPAN  CLASS="textit">sometimes</SPAN>). 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The first line of input contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> which is the number of data sets that follow <!-- MATH
 $(1 \le N \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3499img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/34/3499img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>. Each data set consists of three lines. The first line of each dataset specifies your two hole cards. The second line is your opponent's hole cards. The third line is the four community cards. A card is specified by two characters: it's rank (A,2,3,4,5,6,7,8,9,T,J,Q,K) and it's suit (S,D,H,C) for Spades, Diamonds, Hearts, and Clubs respectively. For example, the <SPAN  CLASS="textit">Ace of Hearts</SPAN> would be <TT>AH</TT>, the <SPAN  CLASS="textit">Nine of Spades</SPAN> would be <TT>9S</TT>. Within a line, there are no spaces or invalid characters. All input will be valid. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each data set, your program will output (on a new line) the data set number followed by a colon, followed by a space, and a list of card(s) that will <SPAN  CLASS="textit">maximize</SPAN> the amount of money you could get playing the hand. If no card will allow you to win or tie, just display `<TT>LOSER</TT>' instead of the cards. Each card should be separated by a single space. Your program will display up to 15 cards on each output line. If more than one output line is required for a dataset, additional lines should be indented by exactly 3 spaces. Cards should be output in suit order (S,D,H,C) and rank order within each suit (Ace high).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 
JD3S 
KH5S 
KDAC2DQD 
2S3S 
2C3C 
4D5DJHAH 
4S7D 
KHKD 
AHADKSKC
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1: TS 3D 4D 5D 6D 7D 8D 9D TD AD TH TC
2: 4S 5S 6S 7S 8S 9S TS JS QS KS AS 2D 3D 6D 7D 
   8D 9D TD JD QD KD AD 2H 3H 4H 5H 6H 7H 8H 9H
   TH QH KH 4C 5C 6C 7C 8C 9C TC JC QC KC AC
3: LOSER
</PRE> 

<P>

______________________________________________________
3500||||||false||||||
<P>One method used to determine the height achieved by a model rocket is the <SPAN CLASS="textit">geodesic</SPAN> method. Two observers <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are spaced 100 feet apart along a base line along one edge of the flat test field. The launch platform is equidistant from observers <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> and 50 feet from the base line. Each observer has a theodolite or some other device for measuring angle above the horizontal (elevation angle) of a distant object and the azimuth angle (the angle the vertical plane of the sight line makes with the line from <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> through <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> measured counter-clockwise). Each measuring device is on a stand. <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>'s device is <SPAN CLASS="MATH"><I>HA</I></SPAN> <tex2html_verbatim_mark> feet above the launch platform and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>'s device is <SPAN CLASS="MATH"><I>HB</I></SPAN> <tex2html_verbatim_mark> feet above the launch platform. When a rocket is fired, near the top of its flight, it deploys a parachute and emits a puff of smoke. Each observer measures the elevation angle and azimuth angle of the puff of smoke from their location. If the peak location is on the wrong side of the baseline or outside the lines determined by <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> perpendicular to the base line, it is out of bounds and disqualified. From this information, the height of the rocket may be determined as follows:<P>On each sight line, find the point on that sight line closest to the other sight line. The point halfway between these two points is assumed to be the location of the rocket at the top of its flight. The height achieved by the rocket is the vertical distance of this point above the launch platform.<P><P><BR>This problem is to write a program which, given the parameters <SPAN CLASS="MATH"><I>HA</I></SPAN> <tex2html_verbatim_mark> (the distance of the measuring device <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> above the launch platform in feet), <SPAN CLASS="MATH"><I>HB</I></SPAN> <tex2html_verbatim_mark> (the distance of the measuring device <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> above the launch platform in feet), <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> (the elevation angle of the rocket in degrees measured by the left observer <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>), <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \beta$"></SPAN> <tex2html_verbatim_mark> (the elevation angle of the rocket in degrees observed by the right observer <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>), <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \gamma$"></SPAN> <tex2html_verbatim_mark> (the azimuth angle in degrees measured by the left observer <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>) and <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \delta$"></SPAN> <tex2html_verbatim_mark> (the azimuth angle in degrees measured by the right observer <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>), computes the height of the rocket above the launch platform in feet to the nearest foot.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains the number of shots that follow <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> and the parameters <SPAN CLASS="MATH"><I>HA</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>HB</I></SPAN> <tex2html_verbatim_mark> in that order as decimal values (the values are separated by one or more spaces). These values would be measured once at the beginning of the day and remain fixed through all <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> rocket shots. Each succeeding line of input will contain the angles <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \alpha$">,<IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \beta$">,<IMG WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \gamma$"></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \delta$"></SPAN> <tex2html_verbatim_mark> in that order (measured in degrees) as decimal values. The angles <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \alpha$">,<IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \beta$"></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \gamma$"></SPAN> <tex2html_verbatim_mark> will be strictly between 0 and 90 degrees and <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3500img1.png ALT="$ \delta$"></SPAN> <tex2html_verbatim_mark> will be strictly between 90 degrees and 180 degrees.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of four angles (other than the end indicator), the output contains a line with the shot number, <SPAN CLASS="MATH">(1...<I>N</I>)</SPAN> <tex2html_verbatim_mark>, a colon, a space and finally the height above the field in feet to the nearest foot with no leading spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 5.25 2.92 
39.6 36.0 35.4 151.2
65.1 71.2 16.5 160.6
59.4 59.5 43.8 139.0
45.0 41.2 32.9 152.6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1: 50 
2: 135 
3: 119 
4: 58
</PRE><P>
______________________________________________________
3501||||||false||||||
<P>Most positive integers may be written as a sum of a sequence of at least two consecutive positive integers. For instance,<P><PRE>
6 = 1 + 2 + 3 
9 = 5 + 4 = 2 + 3 + 4
</PRE><P>but <TT>8</TT> cannot be so written.<P>Write a program which will compute how many different ways an input number may be written as a sum of a sequence of at least two consecutive positive integers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input will contain the number of problem instances <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> on a line by itself, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3501img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3501img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. This will be followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, one for each problem instance. Each problem line will have the problem number, a single space and the number to be written as a sequence of consecutive positive integers. The second number will be less than 2<code>^</code>31 (so will fit in a 32-bit integer).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each problem instance will be a single line containing the problem number, a single space and the number of ways the input number can be written as a sequence of consecutive positive integers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 
1 6 
2 9 
3 8 
4 1800 
5 987654321 
6 987654323 
7 987654325
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1 
2 2 
3 0 
4 8 
5 17 
6 1 
7 23
</PRE>
______________________________________________________
3502||||||false||||||
<P>One of the reasons for which &#201;cole polytechnique (nicknamed ``X" for reasons to be explained during the debriefing talk) is so deeply rooted in French society is its famous network of <SPAN CLASS="textit">camarades</SPAN> - former students of the same school. When one camarade wants something (money, job, etc.), he can ask this network for help and support. In practice, this means that when he/she wants to reach some other camarade, not always of the same year, then surely he can find intermediate camarades to get to her/him. Note that the ``camarade" relationship is symmetric. Due to the magic of the X network, there is always a means to reach anybody.<P>The program you have to write is supposed to help to minimize the number of these intermediate camarades.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR>The huge file of all living camarades is simplified so as to obey the following format. The first line in the file is the number of camarades, say <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, an integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3502img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3502img1.png ALT="$ \le$">10<SUP>5</SUP></SPAN> <tex2html_verbatim_mark>. Camarades are labeled from 0 to <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>. Follow <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines. Each line starts with the camarade label <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, followed by the number of other camarades he/she knows, say <SPAN CLASS="MATH"><I>n</I><SUB>c</SUB></SPAN> <tex2html_verbatim_mark>, followed by the labels of those <SPAN CLASS="MATH"><I>n</I><SUB>c</SUB></SPAN> <tex2html_verbatim_mark> camarades. All these integers are separated by a single blank. It is assumed that <SPAN CLASS="MATH"><I>n</I><SUB>c</SUB></SPAN> <tex2html_verbatim_mark> is always less than 100. The last line in the file is the label of the camarade seeking help (say <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>) followed by the label of the camarade he wants help from, say <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB> <IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3502img1.png ALT="$ \neq$"> <I>c</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>Your program should output three integers separated by a blank: <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and the minimal number of <SPAN CLASS="textit">intermediate</SPAN> camarades to reach <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

4
0 3 1 2 3
1 1 0
2 2 0 3
3 2 0 2
1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 1
</PRE><P>
______________________________________________________
3503||||||false||||||
<P>A set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> 1-dimensional items have to be packed in identical bins. All bins have exactly the same length <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> and each item <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> has length <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3503img1.png ALT="$ \le$"><I>l</I></SPAN> <tex2html_verbatim_mark>. We look for a minimal number of bins <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> such that<P><UL><LI>each bin contains at most 2 items, </LI><LI>each item is packed in one of the <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> bins, </LI><LI>the sum of the lengths of the items packed in a bin does not exceed <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>. </LI></UL><P>You are requested, given the integer values <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>l</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, ..., <SPAN CLASS="MATH"><I>l</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, to compute the optimal number of bins <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR>The first line of the input file contains the number of items <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3503img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3503img1.png ALT="$ \le$">10<SUB>5</SUB>)</SPAN> <tex2html_verbatim_mark>. The second line contains one integer that corresponds to the bin length <SPAN CLASS="MATH"><I>l</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3503img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>. We then have <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines containing one integer value that represents the length of the items.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>For each input file, your program has to write the minimal number of bins required to pack all items.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

10
80
70
15
30
35
10
80
20
35
10
30
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6
</PRE><P><P><P><BR><B>Note:</B> The sample instance and an optimal solution is shown in the figure below. Items are numbered from 1 to 10 according to the input order.<P><DIV ALIGN="CENTER"><IMG WIDTH="626" HEIGHT="471" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3503img1.png ALT="\epsfbox{p3503.eps}"> <tex2html_verbatim_mark></DIV><P>
______________________________________________________
3504||||||false||||||
<P>In the laundry next to my flat, clothes are stored on coat hangers that are put on hooks fixed on a circular rail moved electrically by a computer. Hooks are numbered so that finding a cloth is easy. The rail moves in front of a mark.<P><P><BR><B>Details</B><P><P><BR>We model the rail as an array of dimension <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> , referenced in a circular way, that is <SPAN CLASS="textit">indices are to be considered modulo</SPAN> <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> . When a batch of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> clothes must be stored, the launderer types the number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> on a keyboard. The computer then looks for the first location of <SPAN CLASS="MATH"><I>n</I> + 2</SPAN> <tex2html_verbatim_mark> free hooks, from the current position of the rail to the right, yielding zone <SPAN CLASS="MATH"><I>k</I>..<I>k</I> + <I>n</I> + 1</SPAN> <tex2html_verbatim_mark> (all indices considered modulo <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> ). Once this is done, the rail moves so that hook numbered <SPAN CLASS="MATH"><I>k</I> + <I>n</I> + 1</SPAN> <tex2html_verbatim_mark> arrives on the mark, and the launderer puts the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> clothes on the hooks <SPAN CLASS="MATH"><I>k</I> + 1..<I>k</I> + <I>n</I></SPAN> <tex2html_verbatim_mark>. Hooks <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I> + <I>n</I> + 1</SPAN> <tex2html_verbatim_mark> are not used to store clothes, but are used as ``separators" between batches of clothes. The launderer then gives the ticket number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> to the customer. Hooks used to hang the clothes of some customer are assigned to the customer, even during the actual cleaning of the batch of clothes.<P>When the customer comes back with the ticket number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, the launderer types <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> on the keyboard and the computer makes the rail moves so that the separating hook <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> of the corresponding batch is in front of the mark. The launderer takes the batch back (during this operation, the rail does not move) and gives it back to the customer. When a cloth is handed back to a customer, the corresponding hook is then free. Note that, when both its left and right neighbors are empty, a separating hook can be used for any purpose (either to hang a cloth or to become a separating hook again).<P><SPAN CLASS="textit">The aim of the program is to model deposits and withdrawals of batches of clothes.</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR>An input file has the following format. The first line contains the number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> of hooks, ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3504img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3504img1.png ALT="$ \le$">300</SPAN> <tex2html_verbatim_mark>). We then have the number <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> of lines in the file after the current one. Follow <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> lines with two different possible formats. The first one is:<P><P><BR><TT>D <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>to deposit <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> clothes. The second one is:<P><P><BR><TT>W <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>to indicate that clothes corresponding to ticket <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> must be withdrawn (<!-- MATH
 $0 \le k < N$
 --> <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3504img1.png ALT="$ \le$"><I>k</I> &lt; <I>N</I></SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>When the customer makes a deposit of clothes, the program looks for an empty place <SPAN CLASS="textit">for the whole batch</SPAN>. If this cannot be found, the program's output is<P><P><BR><TT>No space left, please come back later.</TT><P><P><BR>If ticket <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> can be issued, the program's output is<P><P><BR><TT>The launderer gives ticket <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>.</TT><P><P><BR>When ticket <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is given back, the program's output is<P><P><BR><TT>The launderer gives back batch <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>.</TT><P><P><BR>and all hooks used to hang the clothes of the corresponding customer are made free. Moreover, a separating hook of a batch that has been removed is also made free if both its right and left neighbors are free.<P>Whenever hooks <SPAN CLASS="MATH"><I>h</I>,..., <I>h</I> + <I>q</I></SPAN> <tex2html_verbatim_mark> become free, the program should output<P><P><BR><TT><SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is freed.</TT><P><P><BR>for all <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> between <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I> + <I>q</I></SPAN> <tex2html_verbatim_mark>.<P>We assume that at the beginning of the reading, the rail is empty and that hook 0 is in front of the mark. Only clothes that have been deposited can be withdrawn.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

22
5
D 1
D 3
W 0
D 3
D 11

7
7
D 2
D 1
W 0
D 4
D 1
W 5
D 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The launderer gives ticket 0.
The launderer gives ticket 2.
The launderer gives back batch 0.
0 is freed.
1 is freed.
The launderer gives ticket 6.
The launderer gives ticket 10.

The launderer gives ticket 0.
The launderer gives ticket 3.
The launderer gives back batch 0.
0 is freed.
1 is freed.
2 is freed.
The launderer gives ticket 5.
No space left, please come back later.
The launderer gives back batch 5.
6 is freed.
0 is freed.
1 is freed.
2 is freed.
The launderer gives ticket 5.
</PRE><P><P><P><BR><SPAN CLASS="textbf">Sample 1 explanation:</SPAN> In that case, <SPAN CLASS="MATH"><I>N</I> = 22</SPAN> <tex2html_verbatim_mark>. The starting position looks like<P><DIV ALIGN="CENTER"><IMG WIDTH="437" HEIGHT="184" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3504img1.png ALT="\epsfbox{p3504a.eps}"> <tex2html_verbatim_mark></DIV><P>We first read ``<TT>D 1</TT>" and the program looks for a zone with three hooks free in a row. Since the rail is empty, we select hooks 0, 1, 2 and we store the cloth on hook 1 (hooks 0 and 2 are separators and remain empty). The rail moves and stops when 2 is in front of the mark. So the position is exactly<P><DIV ALIGN="CENTER"><IMG WIDTH="437" HEIGHT="183" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3504img1.png ALT="\epsfbox{p3504b.eps}"> <tex2html_verbatim_mark></DIV><P>A ticket is given and we write ``<TT>The launderer gives ticket 0.</TT>" in the output file. Next we read ``<TT>D 3</TT>" and we look for an empty zone with 5 hooks, this corresponds to a zone starting at hook 2 (used as a separator), which enables us to store the three clothes on hooks 3, 4, 5; which brings hook 6 in front of the mark:<P><DIV ALIGN="CENTER"><IMG WIDTH="437" HEIGHT="183" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3504img1.png ALT="\epsfbox{p3504c.eps}"> <tex2html_verbatim_mark></DIV><P>We write ``<TT>The launderer gives ticket 2.</TT>" in the output file. When the customer asks for ``<TT>W 0</TT>" the rail comes back to hook 0<P><DIV ALIGN="CENTER"><IMG WIDTH="438" HEIGHT="183" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3504img1.png ALT="\epsfbox{p3504d.eps}"> <tex2html_verbatim_mark></DIV><P>and we write ``<TT>0 is freed.</TT>" and ``<TT>1 is freed.</TT>" in the output file. When we get ``<TT>D 3</TT>" clothes are stored on hooks 7, 8, 9 (6 and 10 are separators)<P><DIV ALIGN="CENTER"><IMG WIDTH="438" HEIGHT="183" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3504img1.png ALT="\epsfbox{p3504e.eps}"> <tex2html_verbatim_mark></DIV><P>and we write ``<TT>The launderer gives ticket 6.</TT>" in the output file. The last deposit is ``<TT>D 11</TT>" which yields to<P><DIV ALIGN="CENTER"><IMG WIDTH="437" HEIGHT="183" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3504img1.png ALT="\epsfbox{p3504f.eps}"> <tex2html_verbatim_mark></DIV><P>and we write ``<TT>The launderer gives ticket 10.</TT>" in the output file.<P>
______________________________________________________
3505||||||false||||||
<P>
World Wide Networks (WWN) is a leading company that operates large telecommunication networks. WWN would like to setup a new network in Borduria, a nice country that recently managed to get rid of its military dictator Kurvi-Tasch and which is now seeking for investments of international companies (for a complete description of Borduria, have a look to the following Tintin albums ``King Ottokar's Sceptre", ``The Calculus Affair" and ``Tintin and the Picaros"). You are requested to help WWN todecide how to setup its network for a minimal total cost.

<P>

<P><P>
<BR>

<SPAN  CLASS="textbf">Problem</SPAN>

<P>

<P>
<BR>
There are several local companies running small networks (called subnetworks in the following) that partially cover the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> largest cities of Borduria. WWN would like to setup a network that connects all <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> cities. To achieve this, it can either build edges between cities from scratch or it can buy one or several subnetworks from local companies. You are requested to help WWN to decide how to setup its network for a minimal total cost.

<P>

<UL>
<LI>All <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> cities are located by their two-dimensional Cartesian coordinates.
</LI>
<LI>There are <SPAN CLASS="MATH"><I>q</I></SPAN>
<tex2html_verbatim_mark> existing subnetworks. If <SPAN CLASS="MATH"><I>q</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3505img1.png
 ALT="$ \ge$">1</SPAN>
<tex2html_verbatim_mark> then each subnetwork <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $1 \le c \le q$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3505img1.png
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3505img1.png
 ALT="$ \le$"><I>q</I></SPAN>
<tex2html_verbatim_mark>) is defined by a set of interconnected cities (the exact shape of a subnetwork is not relevant to our problem).
</LI>
<LI>A subnetwork <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> can be bought for a total cost <SPAN CLASS="MATH"><I>w</I><SUB>c</SUB></SPAN>
<tex2html_verbatim_mark> and it cannot be split (i.e., the network cannot be fractioned).
</LI>
<LI>To connect two cities that are not connected through the subnetworks bought, WWN has to build an edge whose cost is exactly the square of the Euclidean distance between the cities.
</LI>
</UL>

<P>
You have to decide which existing networks you buy and which edges you setup so that the total cost is minimal. Note that the number of existing networks is always very small (typically smaller than 8).

<P>

<P><P>
<BR>

<SPAN  CLASS="textbf">A 115 Cities Instance </SPAN>

<P>

<P>
<BR>
Consider a 115 cities instance of the problem with 4 subnetworks (the 4 first graphs in Figure 1). As mentioned earlier the exact shape of a subnetwork is not relevant still, to keep figures easy to read, we have assumed an arbitrary tree like structure for each subnetworks. The bottom network in Figure 1 corresponds to the solution in which the first and the third networks have been bought. Thin edges correspond to edges build from scratch while thick edges are those from one of the initial networks.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<B>The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</B>

<P>

<P><P>
<BR>
Each test case is described by one input file that contains all the relevant data. The first line contains the number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> of cities in the country (<!-- MATH
 $1 \le n \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3505img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3505img1.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>) followed by the number <SPAN CLASS="MATH"><I>q</I></SPAN>
<tex2html_verbatim_mark> of existing subnetworks (<!-- MATH
 $0 \le q \le 8$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3505img1.png
 ALT="$ \le$"><I>q</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3505img1.png
 ALT="$ \le$">8</SPAN>
<tex2html_verbatim_mark>). Cities are identified by a unique integer value ranging from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>. The first line is followed by <SPAN CLASS="MATH"><I>q</I></SPAN>
<tex2html_verbatim_mark> lines (one per subnetwork), all of them following the same pattern: The first integer is the number of cities in the subnetwork. The second integer is the the cost of the subnetwork (not greater than <!-- MATH
 $2 \times 10^{6}$
 -->
<SPAN CLASS="MATH">2 <TT>x</TT> 10<SUP>6</SUP></SPAN>
<tex2html_verbatim_mark>). The remaining integers on the line (as many as the number of cities in the subnetwork) are the identifiers of the cities in the subnetwork. The last part of the file contains <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines that provide the coordinates of the cities (city 1 on the first line, city 2 on the second one, etc). Each line is made of 2 integer values (ranging from 0 to 3000) corresponding to the integer coordinates of the city.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<B>For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>
For each input file, your program has to write the optimal total cost to interconnect all cities.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

7 3
2 4 1 2
3 3 3 6 7
3 9 2 4 5
0 2
4 0
2 0
4 2
1 3
0 5
4 4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
17
</PRE>

<P>
<SPAN  CLASS="textbf">Sample Explanation:</SPAN>
The above instance is shown in Figure 2. An optimal solution is described in Figure 3 (thick edges come from an existing network while thin edges have been setup from scratch).

<P>

<DIV ALIGN="CENTER">
Figure 1: A 115 Cities Instance and a Solution (Buying the First and the Third Network)
</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3505a.eps}$
 -->
<IMG
 WIDTH="576" HEIGHT="901" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3505img1.png
 ALT="\epsfbox{p3505a.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">
</DIV>

<P>

<DIV ALIGN="CENTER">
Figure 2: The 7 City instance of the first sample input
</DIV>
<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3505b.eps}$
 -->
<IMG
 WIDTH="659" HEIGHT="202" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3505img1.png
 ALT="\epsfbox{p3505b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<P><P>
<BR>
<DIV ALIGN="CENTER">
Figure 3: An optimal solution of the 7 City instance in which which the first and second existing networkshave been bought while two extra edges (1 , 5) and (2, 4) have been setup
</DIV>
<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3505c.eps}$
 -->
<IMG
 WIDTH="165" HEIGHT="198" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3505img1.png
 ALT="\epsfbox{p3505c.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

______________________________________________________
3506||||||false||||||
<P>The SUM problem can be formulated as follows: given four lists <SPAN CLASS="MATH"><I>A</I>, <I>B</I>, <I>C</I>, <I>D</I></SPAN> <tex2html_verbatim_mark> of integer values, compute how many quadruplet <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>, <I>c</I>, <I>d</I> ) <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3506img1.png ALT="$ \in$"> <I>A</I> <TT>x</TT> <I>B</I> <TT>x</TT> <I>C</I> <TT>x</TT> <I>D</I></SPAN> <tex2html_verbatim_mark> are such that <SPAN CLASS="MATH"><I>a</I> + <I>b</I> + <I>c</I> + <I>d</I> = 0</SPAN> <tex2html_verbatim_mark>. In the following, we assume that all lists have the same size <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR>The first line of the input file contains the size of the lists <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (this value can be as large as 4000). We then have <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines containing four integer values (with absolute value as large as <SPAN CLASS="MATH">2<SUP>28</SUP></SPAN> <tex2html_verbatim_mark>) that belong respectively to <SPAN CLASS="MATH"><I>A</I>, <I>B</I>, <I>C</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>For each input file, your program has to write the number quadruplets whose sum is zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

6
-45 22 42 -16
-41 -27 56 30
-36 53 -37 77
-36 30 -75 -46
26 -38 -10 62
-32 -54 -6 45
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5
</PRE><P><P><P><BR><SPAN CLASS="textbf">Sample Explanation:</SPAN> Indeed, the sum of the five following quadruplets is zero: (-45, -27, 42, 30), (26, 30, -10, -46), (-32, 22, 56, -46),(-32, 30, -75, 77), (-32, -54, 56, 30).<P>
______________________________________________________
3507||||||false||||||
<P>Simon and Garfunkel Corporation (SG Corp.) is a large steel-making company with thousand of customers. Keeping the customer satisfied is one of the major objective of Paul and Art, the managers.<P>Customers issue orders that are characterized by two integer values <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, the amount of steel required (in tons) and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, the due date (a calender date converted in seconds). The due date has to be met if SG Corp. accepts the order. Stated another way, when an order is accepted, the corresponding amount of steel has to be produced before its due date. Of course, the factory can process no more than one order at a time.<P>Although the manufacturing process is rather complex, it can be seen as a single production line with a constant throughput. In the following, <SPAN CLASS="textit">we assume that producing <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> tons of steel takes exactly <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> seconds</SPAN> (i.e., throughput is 1). The factory runs on a monthly production plan. Before the beginning of the month, all customers' orders are collected and Paul and Art determine which of them are going to be <SPAN CLASS="textit">accepted</SPAN> and which ones are to be <SPAN CLASS="textit">rejected</SPAN> in the next production period. A production schedule is then designed. To keep customers satisfied, Paul and Art want to <SPAN CLASS="textit">minimize the total number of orders that are rejected</SPAN>. In the following, we assume that the beginning of the next production plan (i.e., the first day of the next month) corresponds to date 0.<P>Hogdson and Moore have been appointed as Chief Scientific Officers and you are requested to help them to compute an optimal solution and to build a schedule of all accepted orders (starting time and completion time).<P><P><P><BR><SPAN CLASS="textbf">Small Example</SPAN><P><P><BR>Consider the following data set made of 6 orders <SPAN CLASS="MATH"><I>J</I><SUB>1</SUB>,..., <I>J</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark>. For a given order, <SPAN CLASS="MATH"><I>J</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> denotes the amount of steel required and <SPAN CLASS="MATH"><I>d</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> is the associated due date.<P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Order</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>q</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>d</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>J</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>J</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>J</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>J</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>J</I><SUB>5</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>J</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>22</TD></TR></TBODY></TABLE></DIV><P>You can check by hand that all orders cannot be accepted and it's very unlikely you could find a solution with less than two rejected orders. Here is an optimal solution: Reject <SPAN CLASS="MATH"><I>J</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>J</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark>, accept all other orders and process them as follows.<P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Accepted Order</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Starting Time</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Completion Time</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>J</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>J</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>J</I><SUB>5</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>J</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>19</TD></TR></TBODY></TABLE></DIV><P>Note that the production line is never idle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR>Data Each test case is described by one input file that contains all the relevant data: The first line contains the number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> of orders (<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> can be as large as 800000 for some test cases). It is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines. Each of which describes an order made of two integer values: the amount of steel (in tons) required for the order (lower than 1000) and its due date (in seconds; lower than <SPAN CLASS="MATH">2 <TT>x</TT> 10<SUP>6</SUP></SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>You are required to compute an optimal solution and your program has to write the number of orders that are accepted.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1

6
7 15
8 20
6 8
4 9
3 21
5 22
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
</PRE><P><P><P><BR><SPAN CLASS="textbf">Some Hints from Hogdson and Moore</SPAN><P><UL><LI>Hogdson and Moore claim that it is optimal to sequence <SPAN CLASS="textit">accepted</SPAN> orders in non-decreasing order of due dates. </LI><LI>They also claim that there is an optimal solution such that for any two orders <SPAN CLASS="MATH"><I>J</I><SUB>u</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>J</I><SUB>v</SUB></SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>q</I><SUB>u</SUB> &gt; <I>q</I><SUB>v</SUB></SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $d_{u} < d_{v}$
 --><SPAN CLASS="MATH"><I>d</I><SUB>u</SUB> &lt; <I>d</I><SUB>v</SUB></SPAN> <tex2html_verbatim_mark>, if <SPAN CLASS="MATH"><I>J</I><SUB>u</SUB></SPAN> <tex2html_verbatim_mark> is accepted then <SPAN CLASS="MATH"><I>J</I><SUB>v</SUB></SPAN> <tex2html_verbatim_mark> is also accepted. </LI><LI>Finally, Hogdson and Moore advise you to ``Keep the Customer Satisfied" </LI></UL><P><P><P><BR><SPAN CLASS="textbf">Keep the Customer Satisfied</SPAN><P><P><BR><PRE>
Gee but it's great to be back home 
Home is where I want to be. 
I've been on the road so long my friend, 
And if you came along
I know you couldn't disagree.

It's the same old story 
Everywhere I go, 
I get slandered, 
Libeled, 
I hear words I never heard 
In the bible 
And I'm on step ahead of the shoe shine 
Two steps away from the county line 
Just trying to keep my customers satisfied, 
Satisfied.

Deputy sheriff said to me 
Tell me what you come here for, boy. 
You better get your bags and flee. 
You're in trouble boy, 
And you're heading into more.
</PRE><P>&#169;Simon &amp; Garfunkel<P>
______________________________________________________
3508||||||false||||||
<P>
Bob and Alice live in Roswell (New Mexico, USA) and they have found some strange item on the floor left by an Unidentified Flying Object (UFO). Let us recall that on July 8, 1947, as stated by Col. William Blanchard, Commander of the 509th Bomb Group at Roswell, ``the wreckage of a crashed disk has been recovered". We believe that this strange item comes from this crash. It looks like a big cube of size <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le s \le 2^{15}$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3508img1.png
 ALT="$ \le$"><I>s</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3508img1.png
 ALT="$ \le$">2<SUP>15</SUP></SPAN>
<tex2html_verbatim_mark> with tiny holes. It shines differently on every face. Bob and Alice are rather smart and they have quickly understood that some complex system inside the cube reflects the light of the sun so that sunlight emerges from some but not all holes of every face.

<P>
Experiments led by Bob and Alice have shown that the cube is full of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le n \le 10^{6}$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3508img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3508img1.png
 ALT="$ \le$">10<SUP>6</SUP></SPAN>
<tex2html_verbatim_mark> double-sided mirrors. Mirrors are located at integer coordinates. They are small (less than one unit in diameter).
They are oriented in one of the following directions:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3508a.eps}$
 -->
<IMG
 WIDTH="694" HEIGHT="189" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3508img1.png
 ALT="\epsfbox{p3508a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Bob and Alice analyze the cube by putting a light sensor in front of each face of the cube. This simple experiment allows them to compute the amount of light reflected through the corresponding face (i.e., the number of holes through which a light ray emerges). More precisely, the cube is oriented in the following way (the sun is on the <SPAN CLASS="MATH"><I>y</I> &lt; 0</SPAN>
<tex2html_verbatim_mark> axis) and there is one unit of light which enters the cube on every integer coordinate of the upper face (<!-- MATH
 $y = 0, 0 \le x \le s, 0 \le z \le s$
 -->
<SPAN CLASS="MATH"><I>y</I> = 0, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3508img1.png
 ALT="$ \le$"><I>x</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3508img1.png
 ALT="$ \le$"><I>s</I>, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3508img1.png
 ALT="$ \le$"><I>z</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3508img1.png
 ALT="$ \le$"><I>s</I></SPAN>
<tex2html_verbatim_mark>).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3508b.eps}$
 -->
<IMG
 WIDTH="348" HEIGHT="251" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3508img1.png
 ALT="\epsfbox{p3508b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
You are requested to simulate the behavior of the cube. Given the position and the orientation of each mirror, you are kindly asked to compute, for each face, the number of rays that go out of the face of and the total number of times the corresponding rays have been deviated. Note that when the direction of a ray belongs to the plane of a mirror, it passes through without any interaction.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<B>The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
</B>

<P>

<P><P>
<BR>
The first integer (on the first line) is the size <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> of the box. The second line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> that corresponds to the total number of mirrors in the box. We then have <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines, each of which containing 4 integers : the coordinates <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN>
<tex2html_verbatim_mark> of the corresponding mirror and its orientation (with respect to the above figure). Notice that the coordinates <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN>
<tex2html_verbatim_mark> of mirrors are pairwise distinct.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<B>For each test case, the output must follow the description below.
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>
The output is made of 12 integers (one per line). The 12 integers are made of 6 groups of 2 integers, each group is related to a different face <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> of the cube ordered as shown in the above figure. In each group, the first integer is the number of rays (the amount of light) that go out of the face <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> and the second one is the number of times the corresponding rays have been deviated.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

5
4
4 4 0 0
1 3 0 1
1 1 0 0
4 1 0 1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0
0
0
0
1
1
1
1
34
0
0
0
</PRE>

<P>

______________________________________________________
3509||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="291" HEIGHT="298" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3509.jpg ALT="\epsfbox{p3509.eps}"> <tex2html_verbatim_mark></DIV><P>Physicists study atoms hidden in a ``black box". So as to get information on the position of atoms in the box, they cast a laser beam through gates and look at where light gets out from the box. As a computer scientist you are (kindly) requested to interpret the physicists experiments.<P><P><P><BR><SPAN CLASS="textbf">Problem</SPAN><P><P><BR>By weighting the box, the physicists already managed to count how many atoms there are <SPAN CLASS="MATH">(<I>K</I> = 5)</SPAN> <tex2html_verbatim_mark>. Besides, they adopt a grid model. First, the box is quite simple: this is a flat, <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> box <SPAN CLASS="MATH">(<I>N</I> = 8)</SPAN> <tex2html_verbatim_mark>, with <SPAN CLASS="MATH">32 = 4 <TT>*</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> gates, which are numbered as shown above. Additionally, following the famous ``no border principle" and a loose application of Pauli exclusion principle, the physicists restrict the available positions to the central <SPAN CLASS="MATH">36 = (<I>N</I> - 2)<SUP>2</SUP></SPAN> <tex2html_verbatim_mark> positions, and they assume that no two atoms occupy the same position. Besides, in the grid model, light is also quite simple:<P><UL><LI>Light travels at infinite speed in either of the fourth directions, east, north, west or south. For instance, if the beam enters the box from the west, then it travels eastward. </LI><LI>In the absence of obstacles, light goes straight ahead. See the beam entering at gate 7. </LI><LI>In case it enters a position occupied by an atom, light is absorbed. Then, there is no output gate. See the beam entering at gate 3. </LI><LI>Light is deviated by atoms. Before entering a position whose left (resp. right) neighbor contains an atom, light turns right (resp. left). See the beam entering at gate 0 for an example of a left deviation, and the beam entering at gate 29 for for an example of a right deviation. </LI><LI>Absorption takes precedence over deviation. See the beam entering at position 27. </LI><LI>When a beam is deviated both left and right at the same time, it turns back. See the beam entering at gate 10 and leaving at the same gate 10, because of such a double deviation. </LI><LI>Laws of light combine. See the beam entering at gate 21, which is absorbed after a left deviation. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR>Input is a log of experiments performed over a given box. The first line is an integer <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < e \le 32)$
 --><SPAN CLASS="MATH">(0 &lt; <I>e</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3509.jpg ALT="$ \le$">32)</SPAN> <tex2html_verbatim_mark>. Integer <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> is the number of experiments performed. Then, come <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> lines, each line being made of two integers. The first integer <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is a gate number expressing that the beam enters the box at gate <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. The second integer <SPAN CLASS="MATH"><I>o</I></SPAN> <tex2html_verbatim_mark> is either a gate number, expressing that the beam leaves the box at gate <SPAN CLASS="MATH"><I>o</I></SPAN> <tex2html_verbatim_mark>, or the integer `<TT>-1</TT>', expressing that the beam is absorbed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>If the atom positions can be deduced from the experiments, then your program should output an ascii representation of the box, as <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> characters, with atoms being shown as `<TT>+</TT>' and empty positionsas `<TT>-</TT>' -- See the first example below. Otherwise, your program should output `<TT>NO</TT>' on a single line. Notice that `<TT>NO</TT>' is the correct answer in several situations. More specifically, the experiments may be contradictory (there does not exist a repartition of atoms compatible with the experiments) or non-concluding (there exist several repartitions of atoms compatible with the experiments).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

7
0 29
27 -1
21 -1
10 10
3 -1
16 7
6 12

10
0 23
1 28
7 8
20 -1
19 25
10 16
2 31
4 5
12 -1
29 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Output</A>&nbsp;</FONT></H2><P><PRE>
--------
---++---
--------
-+-+----
--------
-----+--
--------
--------

NO
</PRE><P><P><P><BR><B>Note:</B> Observe that the first output describes the box shown in the introduction.<P>
______________________________________________________
3510||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="257" HEIGHT="264" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="\epsfbox{p3510a.eps}"> <tex2html_verbatim_mark></DIV><P>Shuffling the pixels in a bitmap image sometimes yields random looking images. However, by repeating the shuffling enough times, one finally recovers the original images. This should be no surprise, since ``shuffling" means applying a one-to-one mapping (or permutation) over the cells of the image, which come in finite number.<P><P><P><BR><SPAN CLASS="textbf">Problem</SPAN><P><P><BR>Your program should read a number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, and a series of elementary transformations that define a ``shuffling" <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="$ \phi$"></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> images. Then, your program should compute the minimal number <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>m</I> &gt; 0)</SPAN> <tex2html_verbatim_mark>, such that <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> applications of <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="$ \phi$"></SPAN> <tex2html_verbatim_mark> always yield the original <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> image.<P>For instance if <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="$ \phi$"></SPAN> <tex2html_verbatim_mark> is counter-clockwise 90<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark> rotation then <SPAN CLASS="MATH"><I>m</I> = 4</SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="433" HEIGHT="84" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="\epsfbox{p3510b.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR>Input is made of two lines, the first line is number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="$ \le$">2<SUP>10</SUP></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> even). The number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the size of images, one image is represented internally by a <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> pixel matrix <SPAN CLASS="MATH">(<I>a</I><SUP>j</SUP><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is the row number and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is the column number. The pixel at the upper left corner is at row 0 and column 0.<P>The second line is a non-empty list of at most 32 words, separated by spaces. Valid words are the keywords <SPAN CLASS="textbf">id</SPAN>, <SPAN CLASS="textbf">rot</SPAN>, <SPAN CLASS="textbf">sym</SPAN>, <SPAN CLASS="textbf">bhsym</SPAN>, <SPAN CLASS="textbf">bvsym</SPAN>, <SPAN CLASS="textbf">div</SPAN> and <SPAN CLASS="textbf">mix</SPAN>, or a keyword followed by ``<SPAN CLASS="textbf">-</SPAN>". Each keyword key designates an elementary transform (as defined by Figure 1), and <SPAN CLASS="textbf">key-</SPAN> designates the inverse of transform <SPAN CLASS="textbf">key</SPAN>. For instance, <SPAN CLASS="textbf">rot-</SPAN> is the inverse of counter-clockwise 90<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark> rotation, that is clockwise 90<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark> rotation. Finally, the list <SPAN CLASS="MATH"><I>k</I><SUB>1</SUB>, <I>k</I><SUB>2</SUB>,..., <I>k</I><SUB>p</SUB></SPAN> <tex2html_verbatim_mark> designates the compound transform <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="$ \phi$"> = <I>k</I><SUB>1</SUB><TT>o</TT><I>k</I><SUB>2</SUB><TT>o</TT><SUP> ... </SUP><TT>o</TT><I>k</I><SUB>p</SUB></SPAN> <tex2html_verbatim_mark>. For instance, ``<SPAN CLASS="textbf">bvsym rot-</SPAN>" is the transform that first performs clockwise 90<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark> rotation and then vertical symmetry on the lower half of the image.<P><DIV ALIGN="CENTER"><IMG WIDTH="169" HEIGHT="84" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="\epsfbox{p3510c.eps}"> <tex2html_verbatim_mark></DIV><P><P><P><BR><DIV ALIGN="CENTER">Figure 1: Transformations of image <SPAN CLASS="MATH">(<I>a</I><SUP>j</SUP><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> into image <SPAN CLASS="MATH">(<I>b</I><SUP>j</SUP><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark></DIV><P><P><BR><IMG WIDTH="393" HEIGHT="737" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="$\textstyle \parbox{.70\textwidth}{
\begin{description}
\vspace{.25in}
\item[\te...
... , a^{n/2+1}_{2k+1} , \cdots, a^{n-1}_{2k}, a^{n-1}_{2k+1}$.
\end{description}}$"><IMG WIDTH="143" HEIGHT="669" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="$\textstyle \parbox{.25\textwidth}{
\begin{center}
\mbox{}
\epsfbox{p3510d.eps}
\end{center}}$"><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>Your program should output a single line whose contents is the minimal number <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>m</I> &gt; 0)</SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3510a.jpg ALT="$ \phi^{{m}}_{}$"></SPAN> <tex2html_verbatim_mark> is the identity. You may assume that, for all test input, you have <!--ATH
 $m < 2^{31}$
 --><SPAN CLASS="MATH"><I>m</I> &lt; 2<SUP>31</SUP></SPAN> <tex2html_verbatim_mark>. <P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

256
rot- div rot div

256
bvsym div mix
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8

63457
</PRE><P>
______________________________________________________
3511||||||false||||||
time schedule is represented by a 0-1 matrix with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> columns. Each line represents a person and each column an event. All the persons participating to an event have a one in the corresponding entry of their line. Persons not attending the event have a zero entry in that column. Events occur consecutively.<P><P><P><BR>Problem<P><P><BR>Problem Write a program that finds a smart permutation of the events where each person attends all its events in a row. In other words, permute the columns of the matrix so that all ones are consecutive in each line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs. </B><P><P><P><BR>The first line of the input consists in the number <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3511img1.png ALT="$ \le$">400</SPAN> <tex2html_verbatim_mark> of lines. The second line contains <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3511img1.png ALT="$ \le$">400</SPAN> <tex2html_verbatim_mark>, the number of columns. Then comes the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines of the matrix. Each line consists in <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> characters `<TT>0</TT>' or `<TT>1</TT>'.<P>The input matrix is chosen so that there exists only one smart permutation which preserves column 0 in position 0. To make things easier, any two columns share few common one entries.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>The output consists of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> numbers indicating the smart permutation of the columns. The first number must be 0 as column 0 does not move. The second number indicate the index (in the input matrix) of the second column, and so on.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3

3
4
0110
0001
1101

6
5
01010
01000
10101
10100
00011
00101

21
20
00101000000000000000
10010010010110010100
00101101000000000000
01000000000000001000
00000101100000100000
01000000100000100000
00000010000110000000
01000000000001001000
00000000001001000011
00001000000000000000
10000000000000000100
00010010011000010011
01111101111001111011
01000000000001101011
01100101100001101001
00100101100000000000
00010000001001000011
01010000101001111011
00000010010010010000
00010010011111010111
00101001000000000000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
3
1
2

0
2
4
3
1

0
17
11
12
6
9
15
3
10
18
19
13
16
1
14
8
5
7
2
4

______________________________________________________
3512||||||false||||||
<P>
Michael and Nick are living near the famous top-secret ``Area 51" facility. The facility is enclosed by a fence and is so large that for the purpose of this problem we consider the fence being a line that stretches infinitely into both directions. 

<P>
Only extremely brave boys are not scared to go to the fence and peek at the facility. Nick is among the brave ones. He once came to the fence and saw a number of chimneys with distinct shapes. As a proof of his bravery he tells everybody what chimneys he saw from his left to his right. 

<P>
Michael's father is working at ``Area 51" and has a facility's map at his home. Michael found this map and he can now verify Nick's claim of being near the facility's fence. However, it turns out to be complicated, and your task is to write a program to perform this verification. 

<P>
On a map distinctly shaped chimneys are denoted by capital letters from A to Z. Each letter denotes a distinct shape, but chimneys with this shape can appear more than once on a map. The map uses Cartesian coordinate system oriented so that the fence is <SPAN CLASS="MATH"><I>Ox</I></SPAN>
<tex2html_verbatim_mark> axis and all chimneys are located on a half-plane with a positive <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> coordinate. All chimneys are considered to be points (their sizes and actual geometrical shapes are ignored for the purpose of this problem).

<P>
Nick claims that he looked from a point on the fence where no two chimneys were on the same line of his sight (a line that originates from his point of view). It means that at the point he looked from, all the chimneys he saw had a well-defined order from left to right. 

<P>
Michael have already made a preliminary verification of Nick's claim. He made sure that the number of distinctly shaped chimneys matches their number on the map. Now Michael needs to perform a final verification - to get a list of <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> coordinates on a fence (if any) where the corresponding arrangement of chimneys could be seen from. This information shall be presented as an ordered list of open intervals <!-- MATH
 $(a_{1} , b_{1}), (a_{2} , b_{2}), \ldots , (a_{n} , b_{n})$
 -->
<SPAN CLASS="MATH">(<I>a</I><SUB>1</SUB>, <I>b</I><SUB>1</SUB>),(<I>a</I><SUB>2</SUB>, <I>b</I><SUB>2</SUB>),...,(<I>a</I><SUB>n</SUB>, <I>b</I><SUB>n</SUB>)</SPAN>
<tex2html_verbatim_mark>, so that <!-- MATH
 $a_{1} < b_{1} \le a_{2} < b_{2} \le \ldots \le a_{n} < b_{n}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB> &lt; <I>b</I><SUB>1</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \le$"><I>a</I><SUB>2</SUB> &lt; <I>b</I><SUB>2</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \le$">...<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \le$"><I>a</I><SUB>n</SUB> &lt; <I>b</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> . Asterisk symbol (``<TT>*</TT>") is used in place of <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and/or <SPAN CLASS="MATH"><I>b</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> to denote interval that extends to infinity on the left or on the right correspondingly. Note, that <!-- MATH
 $b_{i} = a_{i+1} = x$
 -->
<SPAN CLASS="MATH"><I>b</I><SUB>i</SUB> = <I>a</I><SUB>i+1</SUB> = <I>x</I></SPAN>
<tex2html_verbatim_mark> in case where Nick could not have been at the point <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> on a fence, because he would have seen more than one chimney on a single line of his sight, but being to the left or to the right of <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> yields the order of chimneys that he saw.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>

<P>

<P><P>
<BR>
The first line of the input file contains an integer number <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> - the number of chimneys at the ``Area 51" facility <!-- MATH
 $(1 \le m \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>. The second line of the input file contains a string of <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> letters from A to Z that describe the chimneys that Nick saw from his left to his right. A single letter can be used more than once (if Nick saw the same shape more than once). Then follow <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines that describe chimneys on the map. Each line contains three tokens separated by spaces - chimney shape letter (from A to Z), and two integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> - chimney coordinates <!-- MATH
 $(-100 \le x_{i} \le 100, 0 < y_{i} \le 100)$
 -->
<SPAN CLASS="MATH">(- 100<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \le$"><I>x</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \le$">100, 0 &lt; <I>y</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>. On these <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines letters appear in arbitrary order, but each letter from A to Z appears the same number of times as on the second line of the input file. No two chimneys have the same coordinates.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>

<P>

<P><P>
<BR>
Write to the first line of the output file a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> - the number of intervals that describe <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> coordinates on a fence where Nick could have seen the corresponding arrangement of chimneys from. Write to the second line of the output file <SPAN CLASS="MATH">2<I>n</I></SPAN>
<tex2html_verbatim_mark> numbers <!-- MATH
 $a_{1} , b_{1} , \ldots , a_{n} , b_{n}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>b</I><SUB>1</SUB>,..., <I>a</I><SUB>n</SUB>, <I>b</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> using ``<TT>*</TT>" instead of a number <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and/or <SPAN CLASS="MATH"><I>b</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> to denote infinity. Numbers must be precise up to <SPAN CLASS="MATH">10<SUP>-6</SUP></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 
CDDC 
C 0 7 
D 4 5 
C -2 1 
D -2 3

4 
DCCD 
C 0 7 
D 4 5 
C -2 1 
D -2 3

4 
DCDC 
C 0 7 
D 4 5 
C -2 1 
D -2 3
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
* -11 -11 -3.5 14 *

2 
-3.5 -2.333333 -2.333333 -2

0
</PRE> 

<P>

<P><P>
<BR>

<B>Hint:</B> The picture below shows that if the boy looks from the point <SPAN CLASS="MATH"><I>x</I> = - 7</SPAN>
<tex2html_verbatim_mark> he sees the chimneys in the following order: C, D, D, C. It is so for any point from the set <!-- MATH
 $(-\infty, -11) \cup (-11, -3.5) \cup (14, +\infty)$
 -->
<SPAN CLASS="MATH">(- <IMG
 WIDTH="22" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \infty$">, -11) <IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \cup$"> (- 11, -3.5) <IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \cup$"> (14, + <IMG
 WIDTH="22" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="$ \infty$">)</SPAN>
<tex2html_verbatim_mark> - the first example from the problem statement.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3512.eps}$
 -->
<IMG
 WIDTH="878" HEIGHT="408" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3512img1.png
 ALT="\epsfbox{p3512.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

______________________________________________________
3513||||||false||||||
<P>Let us consider arithmetic expressions that consist of variables denoted by lower-case letters ``a" to ``z"; four <SPAN CLASS="textit">binary</SPAN> arithmetic operations: addition (``<TT>+</TT>"), subtraction (``<TT>-</TT>"), multiplication (``<TT>*</TT>"), and division (``<TT>/</TT>"); opening (``<TT>(</TT>") and closing (``<TT>)</TT>") round brackets. The normal order of precedence is used - multiplication and division have the highest precedence, addition and subtraction have the lowest precedence. Operations of the same precedence are evaluated from left to right (for example <SPAN CLASS="MATH"><I>a</I> - <I>b</I> + <I>c</I> = (<I>a</I> - <I>b</I>) + <I>c</I></SPAN> <tex2html_verbatim_mark>).<P>Thus, the grammar for the expressions is the following:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3><COL ALIGN=RIGHT><COL ALIGN=CENTER><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<\mbox{expression}>$
 --><SPAN CLASS="MATH">&lt; expression &gt;</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="32" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3513img1.png ALT="$ \longrightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<\mbox{term}> | <\mbox{expression}> + <\mbox{term}> | <\mbox{expression}> - <\mbox{term}>$
 --><SPAN CLASS="MATH">&lt; term &gt; | &lt; expression &gt; + &lt; term &gt; | &lt; expression &gt; - &lt; term &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<\mbox{term}>$
 --><SPAN CLASS="MATH">&lt; term &gt;</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="32" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3513img1.png ALT="$ \longrightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<\mbox{factor}> | <\mbox{term}> \ast <\mbox{factor}> | <\mbox{term}> / <\mbox{factor}>$
 --><SPAN CLASS="MATH">&lt; factor &gt; | &lt; term &gt; <TT>*</TT> &lt; factor &gt; | &lt; term &gt; / &lt; factor &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<\mbox{factor}>$
 --><SPAN CLASS="MATH">&lt; factor &gt;</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="32" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3513img1.png ALT="$ \longrightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<\mbox{variable}> | (<\mbox{expression}>)$
 --><SPAN CLASS="MATH">&lt; variable &gt; |( &lt; expression &gt; )</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<\mbox{variable}>$
 --><SPAN CLASS="MATH">&lt; variable &gt;</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="32" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3513img1.png ALT="$ \longrightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>a</I>| <I>b</I>|...| <I>z</I></SPAN> <tex2html_verbatim_mark></TD></TR></TABLE></DIV><P><P><BR>Your task is to rewrite the given expression so that its semantics is not changed, but the resulting expression has the minimal number of round brackets.<P>You can remove any excessive brackets that do not change the order of evaluation, for example<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT">(<I>a</I> + <I>b</I>) + (<I>c</I>)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3513img1.png ALT="$\displaystyle \Rightarrow$"></TD><TD ALIGN="LEFT" NOWRAP WIDTH="50%"><I>a</I> + <I>b</I> + <I>c</I>,</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT">(<I>a</I> <TT>*</TT> <I>b</I>)/(<I>c</I>)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP><IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3513img1.png ALT="$\displaystyle \Rightarrow$"></TD><TD ALIGN="LEFT" NOWRAP WIDTH="50%"><I>a</I> <TT>*</TT> <I>b</I>/<I>c</I>,</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL">and you can rewrite expressions using the following rules:<P><UL><LI>If <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are arbitrary expressions, you can change <SPAN CLASS="MATH"><I>A</I> + (<I>B</I>)</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>A</I> + <I>B</I></SPAN> <tex2html_verbatim_mark> , for example<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>a</I> - <I>g</I>/<I>h</I> + (<I>b</I> + <I>c</I> - <I>d</I> + <I>e</I> <TT>*</TT> (<I>f</I> + <I>h</I> - <I>i</I>)) <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3513img1.png ALT="$\displaystyle \Rightarrow$"> <I>a</I> - <I>g</I>/<I>h</I> + <I>b</I> + <I>c</I> - <I>d</I> + <I>e</I> <TT>*</TT> (<I>f</I> + <I>h</I> - <I>i</I>).</DIV><P><tex2html_verbatim_mark></P><P></LI><LI>If <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are arbitrary expressions, you can change <SPAN CLASS="MATH"><I>A</I> - (<I>B</I>)</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>A</I> - <I>B</I>`</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>B</I>`</SPAN> <tex2html_verbatim_mark> is obtained from <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> by replacing all top-level ``+" operations to `-" operations and vice versa, for example<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>a</I> - <I>g</I>/<I>h</I> - (<I>b</I> + <I>c</I> - <I>d</I> + <I>e</I> <TT>*</TT> (<I>f</I> + <I>h</I> - <I>i</I>)) <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3513img1.png ALT="$\displaystyle \Rightarrow$"> <I>a</I> - <I>g</I>/<I>h</I> - <I>b</I> - <I>c</I> + <I>d</I> - <I>e</I> <TT>*</TT> (<I>f</I> + <I>h</I> - <I>i</I>)).</DIV><P><tex2html_verbatim_mark></P><P></LI><LI>If <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are arbitrary terms, you can change <SPAN CLASS="MATH"><I>A</I> <TT>*</TT> (<I>B</I>)</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>A</I> <TT>*</TT> <I>B</I></SPAN> <tex2html_verbatim_mark> , for example<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>x</I>/(<I>y</I> + <I>z</I>) <TT>*</TT> (<I>a</I> <TT>*</TT> (<I>b</I> - <I>c</I>)/<I>d</I> /(<I>e</I>/<I>f</I> )) <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3513img1.png ALT="$\displaystyle \Rightarrow$"> <I>x</I>/(<I>y</I> + <I>z</I>) <TT>*</TT> <I>a</I> <TT>*</TT> (<I>b</I> - <I>c</I>)/<I>d</I> /(<I>e</I>/<I>f</I> ).</DIV><P><tex2html_verbatim_mark></P><P></LI><LI>If <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are arbitrary terms, you can change <SPAN CLASS="MATH"><I>A</I>/(<I>B</I>)</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>A</I>/<I>B</I>`</SPAN> <tex2html_verbatim_mark> , where <SPAN CLASS="MATH"><I>B</I>`</SPAN> <tex2html_verbatim_mark> is obtained from <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> by replacing all top-level ``<TT>*</TT>" operations to ``<SPAN CLASS="MATH">/</SPAN> <tex2html_verbatim_mark>" operations and vice versa, for example<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>x</I>/(<I>y</I> + <I>z</I>)/(<I>a</I> <TT>*</TT> (<I>b</I> - <I>c</I>)/<I>d</I> /(<I>e</I>/<I>f</I> )) <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3513img1.png ALT="$\displaystyle \Rightarrow$"> <I>x</I>/(<I>y</I> + <I>z</I>)/<I>a</I>/(<I>b</I> - <I>c</I>) <TT>*</TT> <I>d</I> <TT>*</TT> (<I>e</I>/<I>f</I> ).</DIV><P><tex2html_verbatim_mark></P></LI></UL><P>You can think about these transformations as ones that only use ``+" and ``<TT>*</TT>" associativity, the fact that ``-" is the reverse operation to ``+", ``/" is the reverse operation to ``<TT>*</TT>", and nothing else.<P>You can apply the described transformations and remove excessive brackets as many times as you need to get the expression with the minimal number of round brackets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases, and each of them consists of a single line with the expression. Expression does not have any leading, trailing, or inner spaces and consists of at most 1000 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, write to the output a single line with the same expression that is rewritten with the minimal number of round brackets. Do not write any spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT> </H2><P><PRE>
((a-b)-(c-d)-(z*z*g/f)/(p*(t))*((y-u)))
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
a-b-c+d-z*z*g/f/p/t*(y-u)
</PRE><P>
______________________________________________________
3514||||||false||||||
<P><SPAN CLASS="textit">Cactus</SPAN> is a connected undirected graph in which every edge lies on at most one simple cycle. Intuitively cactus is a generalization of a tree where some cycles are allowed. Your task first is to verify if the given graph is a cactus or not. Important difference between a cactus and a tree is that a cactus can have a number of spanning subgraphs that are also cactuses. The number of such subgraphs (including the graph itself ) determines <SPAN CLASS="textit">cactusness</SPAN> of a graph (this number is one for a cactus that is just a tree). The cactusness of a graph that is not a cactus is considered to be zero.<P><DIV ALIGN="CENTER"><IMG WIDTH="739" HEIGHT="336" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3514.gif ALT="\epsfbox{p3514.eps}"> <tex2html_verbatim_mark></DIV><P>The first graph on the picture is a cactus with cactusness 35. The second graph is not a cactus because edge (2, 3) lies on two cycles. The third graph is not a cactus because it is not connected.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </B><P><P><P><BR><P>The first line of the input contains two integer numbers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3514.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3514.gif ALT="$ \le$">20000, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3514.gif ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3514.gif ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. Here <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of vertices in the graph. Vertices are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Edges of the graph are represented by a set of edge-distinct paths, where <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the number of such paths.<P>Each of the following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains a path in the graph. A path starts with an integer number <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3514.gif ALT="$ \le$"><I>k</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3514.gif ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> followed by <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> integers from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. These <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> integers represent vertices of a path. Path can go to the same vertex multiple times, but every edge is traversed exactly once in the whole input file. There are no multiedges in the graph (there is at most one edge between any two vertices).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>Write to the output file a single integer number - the cactusness of the given graph. Note that cactusness can be quite a large number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
14 3 
9 1 2 3 4 5 6 7 8 3 
7 2 9 10 11 12 13 10 
2 2 14

10 2 
7 1 2 3 4 5 6 1 
6 3 7 8 9 10 2

5 1 
4 1 2 3 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
35

0

0
</PRE><P>
______________________________________________________
3515||||||false||||||
<P>
Double Patience is a single player game played with a standard 36-card deck. The cards are shuffled and laid down on a table in 9 piles of 4 cards each, faces up. 

<P>
After the cards are laid down, the player makes turns. In a turn he can take top cards of the same rank from any two piles and remove them. If there are several possibilities, the player can choose any one. If all the cards are removed from the table, the player wins the game, if some cards are still on the table and there are no valid moves, the player loses. 

<P>
George enjoys playing this patience. But when there are several possibilities to remove two cards, he doesn't know which one to choose. George doesn't want to think much, so in such case he just chooses a random pair from among the possible variants and removes it. George chooses among all possible pairs with equal probability. 

<P>
For example, if the top cards are KS, KH, KD, 9H, 8S, 8D, 7C, 7D, and 6H, he removes any particular pair of (KS, KH), (KS, KD), (KH, KD), (8S, 8D), and (7C, 7D) with the equal probability of 1/5. 

<P>
Once George's friend Andrew came to see him and noticed that he sometimes doesn't act optimally. George argued, that it is not important - the probability of winning any given patience with his strategy is large enough. 

<P>
Help George to prove his statement - given the cards on the table in the beginning of the game, find out what is the probability of George winning the game if he acts as described.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several test cases, each of them consists of nine lines. Each line contains the description of four cards that form a pile in the beginning of the game, from the bottom card to the top one. 

<P>
Each card is described with two characters: one for rank, one for suit. Ranks are denoted as `<TT>6</TT>' for six, `<TT>7</TT>' for seven, `<TT>8</TT>' for eight, `<TT>9</TT>' for nine, `<TT>T</TT>' for ten, `<TT>J</TT>' for jack, `<TT>Q</TT>' for queen, `<TT>K</TT>' for king, and `<TT>A</TT>' for ace. Suits are denoted as `<TT>S</TT>' for spades, `<TT>C</TT>' for clubs, `<TT>D</TT>' for diamonds, and `<TT>H</TT>' for hearts. For example, ``<TT>KS</TT>" denotes the king of spades. 

<P>
Card descriptions are separated from each other by one space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output a line with one real number - the probability that George wins the game if he plays randomly. Your answer must be accurate up to <SPAN CLASS="MATH">10<SUP>-6</SUP></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
AS 9S 6C KS
JC QH AC KH
7S QD JD KD
QS TS JS 9H
6D TD AD 8S
QC TH KC 8D
8C 9D TC 7C
9C 7H JH 7D
8H 6S AH 6H
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0.589314
</PRE>  

<P>

______________________________________________________
3516||||||false||||||
<P>Archaeologists have discovered a new set of hidden caves in one of the Egyptian pyramids. The decryption of ancient hieroglyphs on the walls nearby showed that the caves structure is as follows. There are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> caves in a pyramid, connected by narrow passages, one of the caves is connected by a passage to the outer world. The system of the passages is organized in such a way, that there is exactly one way to get from outside to each cave along passages. All caves are located in the basement of the pyramid, so we can consider them being located in the same plane. Passages do not intersect. Each cave has its walls colored in one of several various colors.<P>The scientists have decided to create a more detailed description of the caves, so they decided to use an exploring robot. The robot they are planning to use has two types of memory - the output tape, which is used for writing down the description of the caves, and the operating memory organized as a stack.<P>The robot first enters the cave connected to the outer world along the passage. When it travels along any passage for the first time, it puts its description on the top of its stack. When the robot enters any cave, it prints the color of its walls to its output tape. After that it chooses the leftmost passage among those that it has not yet travelled and goes along it. If there is no such passage, the robot takes the passage description from the top of its stack and travels along it in the reverse direction. The robot's task is over when it returns to the outside of the pyramid. It is easy to see that during its trip the robot visits each cave at least once and travels along each passage exactly once in each direction.<P>The scientists have sent the robot to its mission. After it returned they started to study the output tape. What a great disappointment they have had after they have understood that the output tape does not describe the cave system uniquely. Now they have a new problem - they want to know how many different cave systems could have produced the output tape they have. Help them to find that out.<P>Since the requested number can be quite large, you should output it modulo 1 000 000 000. Please note, that the absolute locations of the caves are not important, but their relative locations are important, so the caves (c) and (d) on the picture below are considered different.<P><DIV ALIGN="CENTER"><IMG WIDTH="842" HEIGHT="191" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3516.gif ALT="\epsfbox{p3516.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases, and each of them consists of a single line with the output tape that the archaeologists have. The output tape is the sequence of colors of caves in order the robot visited them. The colors are denoted by capital letters of the English alphabet. The length of the tape does not exceed 300 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, write to the output a single line containing one integer number - the number of different cave systems (modulo 1 000 000 000) that could produce the output tape.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ABABABA 
AB
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 
0
</PRE><P>
______________________________________________________
3517||||||false||||||
<P>Bill is developing a new mathematical theory for human emotions. His recent investigations are dedicated to studying how good or bad days influent people's memories about some period of life.<P>A new idea Bill has recently developed assigns a non-negative integer value to each day of human life. Bill calls this value the <SPAN CLASS="textit">emotional value</SPAN> of the day. The greater the emotional value is, the better the day was. Bill suggests that the value of some period of human life is proportional to the sum of the emotional values of the days in the given period, multiplied by the smallest emotional value of the day in it. This schema reflects that good on average period can be greatly spoiled by one very bad day.<P>Now Bill is planning to investigate his own life and find the period of his life that had the greatest value. Help him to do so.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </B><P><P><P><BR><P>The first line of the input file contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> - the number of days of Bill's life he is planning to investigate <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3517img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3517img1.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark>. The rest of the file contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integer numbers <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> ranging from 0 to <SPAN CLASS="MATH">10<SUP>6</SUP></SPAN> <tex2html_verbatim_mark> - the emotional values of the days. Numbers are separated by spaces and/or line breaks.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>On the first line of the output file print the greatest value of some period of Bill's life.<P>On the second line print two numbers <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> such that the period from <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>-th to <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>-th day of Bill's life (inclusive) has the greatest possible value. If there are multiple periods with the greatest possible value, then print the shortest one. If there are still several possibilities, print the one that occurs first..<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
3 1 6 4 5 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
60 
3 5
</PRE><P>
______________________________________________________
3518||||||false||||||
<P>Agency of Criminal Matters (ACM) provides protection for corporate offices. The agency employs security guards that work in 12 hours shifts. Every 24 hours day consists of a 12 hours <SPAN CLASS="textit">daylight shift</SPAN> and 12 hours <SPAN CLASS="textit">nighttime shift</SPAN> (day starts with a daylight shift).<P>Security guards are hired to work on different schedules. Some schedules are simply periodic (certain pattern repeats in a specified number of days), while others are weekly (with a standard 7 days week) or depend on the day of the week. For this purpose Monday through Friday are considered to be <SPAN CLASS="textit">workdays</SPAN>; Saturday and Sunday are considered to be <SPAN CLASS="textit">weekends</SPAN>.<P>Each security guard works on one of the following four schedules:<P><DL COMPACT><DT>1.</DT><DD>Day of work (daylight and nighttime shifts) and two days (daylight and nighttime) of rest work every third day.<P><DIV ALIGN="CENTER"><IMG WIDTH="660" HEIGHT="115" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3518a.gif ALT="\epsfbox{p3518a.eps}"> <tex2html_verbatim_mark></DIV><P></DD><DT>2.</DT><DD>Only daylight shifts on 5 workdays of a week (no work in nighttime and weekends).<P><DIV ALIGN="CENTER"><IMG WIDTH="826" HEIGHT="92" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3518a.gif ALT="\epsfbox{p3518b.eps}"> <tex2html_verbatim_mark></DIV><P></DD><DT>3.</DT><DD>Day of work (daylight and nighttime), day of rest (daylight and nighttime), daylight shift of work, nighttime of rest, and one more day (daylight and nighttime) of rest - 3 shifts of work every 4 days.<P><DIV ALIGN="CENTER"><IMG WIDTH="659" HEIGHT="115" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3518a.gif ALT="\epsfbox{p3518c.eps}"> <tex2html_verbatim_mark></DIV><P></DD><DT>4.</DT><DD>Day of work (daylight and nighttime), day of rest (daylight and nighttime), day of work only during daylight (rest during nighttime), day of work (daylight and nighttime), day of rest (daylight and nighttime); but if any daylight shift falls on the weekend then it is cancelled - 3 daylight shifts and 2 nighttime shifts every 5 days with the exception of weekends (where only nighttime shifts are possible).<P><DIV ALIGN="CENTER"><IMG WIDTH="738" HEIGHT="152" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3518a.gif ALT="\epsfbox{p3518d.eps}"> <tex2html_verbatim_mark></DIV></DD></DL><P>ACM has to provide protection for a location based on the following requirements. There has to be at least a certain number of guards during daylight shifts on workdays, at least a certain number of guards during daylight shifts on weekends, and at least a certain number of guards during nighttime shifts (it does not matter whether it is a workday or a weekend).<P>As an additional requirement (for simplicity of planning) the schedule of protection for every location has to be <SPAN CLASS="textit">regular</SPAN>. In a regular schedule there is a fixed number of guards that work on any particular schedule during every daylight workday shift, nighttime workday shift, daylight weekend shift, and nighttime weekend shift. For example, if 4 guards on the 1st schedule work on some daylight workday shift, then 4 guards on the 1st schedule work on all daylight workday shifts (they might be different persons, though).<P>Your task is to determine the minimal number of guards that have to be hired for protection of the specific location given its requirements.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases, each of them consists of a line with three integer numbers - <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> , and <SPAN CLASS="MATH"><I>n</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3518a.gif ALT="$ \le$"><I>n</I><SUB>1</SUB>, <I>n</I><SUB>2</SUB>, <I>n</I><SUB>3</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3518a.gif ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. Here <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is the minimum required number of guards during daylight shifts on workdays, <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is the minimum required number of guards during daylight shifts on weekends, and <SPAN CLASS="MATH"><I>n</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> is the minimum required number of guards during nighttime shifts.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write to the output a single line with four integer numbers - <SPAN CLASS="MATH"><I>m</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>m</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> , and <SPAN CLASS="MATH"><I>m</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark> . Here <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the number of security guards working on <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th schedule that are needed to establish security of a location with the given requirements. You have to write an answer that requires minimal number of guards in total, choosing any answer among those.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100 99 99 
100 60 40
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
285 0 8 5 
0 25 120 25
</PRE><P>
______________________________________________________
3519||||||false||||||
<P>John owns a furniture workshop. His clients are very rich people, so they often order furniture suites made of precious sorts of hardwood.<P>Recently John has got a series of orders from his clients, so now he needs to cut a hardwood board to several pieces. The board has a rectangular form of <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> feet. John has marked the outlines of the pieces to cut out on the board, and is planning to use his circular saw to cut it.<P>However, there is a little problem. Due to the construction of the circular saw, it is only possible to make straight cuts starting at the edge of the board. Although, after cutting away a part of the board John can take it away and make a cut from the new part of the edge, some pieces still cannot be separated using a circular saw. For example, pieces `C' and `D' on the picture below cannot be separated, neither can `E' and `Z'. To deal with such situations John will need to use his fret-saw to finish the cutting.<P>Now John wonders what is the maximal number of parts he can cut the board to with his circular saw, so that he needs less work to do with his fret-saw. Help him to find that out. After cutting some part away John can rearrange the parts in any way he likes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain several test cases, each of them as described below.<P>The first line of the input contains two integer numbers <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> - the sizes of the board <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3519img1.png ALT="$ \le$"><I>m</I>, <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3519img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>.<P>The following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contain <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> characters each and describe the marking of the board. Each unit square foot of the initial board is marked with some English letter or digit. Unit squares that belong to the same piece are marked with the same character. All unit squares that are marked with some character form an edge-connected piece of hardwood. Capital and lower-case letters are considered different.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line with the number of parts that John can cut the board to with his circular saw.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 7 
CCCDDAA 
CCDDDAa 
EEEEEEE 
EEEZEEE 
EEEZEGG 
EEEZEGG
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5
</PRE><P><P><P><BR><B>Note:</B> The picture below represents the Sample Input case.<P><DIV ALIGN="CENTER"><IMG WIDTH="829" HEIGHT="391" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3519img1.png ALT="\epsfbox{p3519.eps}"> <tex2html_verbatim_mark></DIV><P>
______________________________________________________
3520||||||false||||||
<P>
Alex is administrator of IP networks. His clients have a bunch of individual IP addresses and he decided to group all those IP addresses into the smallest possible IP network. 

<P>
Each IP address is a 4-byte number that is written byte-by-byte in a decimal dot-separated notation ``byte0.byte1.byte2.byte3" (quotes are added for clarity). Each byte is written as a decimal number from 0 to 255 (inclusive) without extra leading zeroes. 

<P>
IP network is described by two 4-byte numbers - network address and network mask. Both network address and network mask are written in the same notation as IP addresses. 

<P>
In order to understand the meaning of network address and network mask you have to consider their binary representation. Binary representation of IP address, network address, and network mask consists of 32 bits: 8 bits for byte0 (most significant to least significant), followed by 8 bits for byte1, followed by 8 bits for byte2, and followed by 8 bits for byte3. 

<P>
IP network contains a range of <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN>
<tex2html_verbatim_mark> IP addresses where <!-- MATH
 $0 \le n \le 32$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3520img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3520img1.png
 ALT="$ \le$">32</SPAN>
<tex2html_verbatim_mark>. Network mask always has <SPAN CLASS="MATH">32 - <I>n</I></SPAN>
<tex2html_verbatim_mark> first bits set to one, and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> last bits set to zero in its binary representation. Network address has arbitrary <SPAN CLASS="MATH">32 - <I>n</I></SPAN>
<tex2html_verbatim_mark> first bits, and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> last bits set to zero in its binary representation. IP network contains all IP addresses whose <SPAN CLASS="MATH">32 - <I>n</I></SPAN>
<tex2html_verbatim_mark> first bits are equal to <SPAN CLASS="MATH">32 - <I>n</I></SPAN>
<tex2html_verbatim_mark> first bits of network address with arbitrary <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> last bits. We say that one IP network is smaller than the other IP network if it contains fewer IP addresses. 

<P>
For example, IP network with network address 194.85.160.176 and network mask 255.255.255.248 contains 8 IP addresses from 194.85.160.176 to 194.85.160.183 (inclusive).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file will contain several test cases, each of them as described below.

<P>
The first line of the input file contains a single integer number <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le m \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3520img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3520img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines contain IP addresses, one address on a line. Each IP address may appear more than once in the input file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, write to the output file two lines that describe the smallest possible IP network that contains all IP addresses from the input file. Write network address on the first line and network mask on the second line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 
194.85.160.177 
194.85.160.183 
194.85.160.178
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
194.85.160.176 
255.255.255.248
</PRE> 

<P>

______________________________________________________
3521||||||false||||||
<P>Joseph likes taking part in programming contests. His favorite problem is, of course, Joseph's problem. It is stated as follows.<P><P><BR><BLOCKQUOTE><SPAN CLASS="textit">There are n persons numbered from 0 to n - 1 standing in a circle. The person number k, counting from the person number 0, is executed. After that the person number k of the remaining persons is executed, counting from the person after the last executed one. The process continues until only one person is left. This person is a survivor. The problem is, given n and k detect the survivor's number in the original circle.</SPAN></BLOCKQUOTE><P><P><BR>Of course, all of you know the way to solve this problem. The solution is very short, all you need is one cycle:<P><P><BR><PRE>
     r := 0; 
     for i from 1 to n do 
         r := (r + k) mod i; 
     return r;
</PRE><P><P><BR>Here ``<TT>x mod y</TT>" is the remainder of the division of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark><P>But Joseph is not very smart. He learned the algorithm, but did not learn the reasoning behind it. Thus he has forgotten the details of the algorithm and remembers the solution just approximately.<P>He told his friend Andrew about the problem, but claimed that the solution can be found using the following algorithm:<P><P><BR><PRE>
     r := 0; 
     for i from 1 to n do 
         r := r + (k mod i); 
     return r;
</PRE><P><P><BR>Of course, Andrew pointed out that Joseph was wrong. But calculating the function Joseph described is also very interesting.<P>Given <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, find <SPAN CLASS="MATH"><IMG WIDTH="44" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3521img1.png ALT="$ \sum^{{n}}_{{i=1}}$">(<I>k</I> mod <I>i</I>)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases, each of them consists of a line containing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3521img1.png ALT="$ \le$"><I>n</I>, <I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3521img1.png ALT="$ \le$">10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line containing the sum requested.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7
</PRE><P>
______________________________________________________
3522||||||false||||||
<P>
The Evil Empire is devising a plan to destroy the world. This plan is called ``Operation Knockdown". The plan is to place a number of high-yield nuclear bombs in different places around the world, so that their simultaneous detonation will destroy everything on the planet. For the purpose of planning this operation, bombs have <SPAN  CLASS="textit">destruction distance</SPAN> - the distance from the point of bomb's detonation to all the places where everything is considered destroyed. 

<P>
Places for the bombs have been already selected. Now the Evil Empire wants to minimize the cost of production for the bombs. It is expensive to design atomic bombs tailored for different destruction distances, so the idea is to design a bomb with a specific destruction distance and to produce bombs according to this design for all the selected places. The problem is to find the minimal required destruction distance for the bomb design, so that destruction of the whole world is ensured.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3522.eps}$
 -->
<IMG
 WIDTH="297" HEIGHT="298" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3522.gif
 ALT="\epsfbox{p3522.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
For this problem the world is modeled as a sphere of a unit radius. The coordinates of the selected points for the bombs are specified in geographic coordinate system with latitude <SPAN CLASS="MATH">&#248;</SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(-90^o < \o < 90^o)$
 -->
<SPAN CLASS="MATH">(- 90<SUP>o</SUP> &lt; &#248; &lt; 90<SUP>o</SUP>)</SPAN>
<tex2html_verbatim_mark> and longitude <SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3522.gif
 ALT="$ \lambda$"></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(-180^o < \lambda \le 180^o)$
 -->
<SPAN CLASS="MATH">(- 180<SUP>o</SUP> &lt; <IMG
 WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3522.gif
 ALT="$ \lambda$"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3522.gif
 ALT="$ \le$">180<SUP>o</SUP>)</SPAN>
<tex2html_verbatim_mark>. Latitude is the angle between a point and the equator, and longitude is the angle between a point and the prime meridian. The bombs are never placed on the poles, so their latitude is always less than 90 degrees by its absolute value. 

<P>
Distances for destruction purposes are measured on the sphere. For example, the distance between the poles is exactly <SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3522.gif
 ALT="$ \pi$"></SPAN>
<tex2html_verbatim_mark>. The world is considered destroyed if the distance from any point on the sphere to the closest bomb is less or equal to the destruction radius.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will contain several test cases, each of them as described below.

<P>
The first line of the input file contains a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 20)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3522.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3522.gif
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark> - the number of the bombs. The following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines describe the places of the bombs. Each line contains two integer numbers <SPAN CLASS="MATH">&#248;<SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $\lambda_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3522.gif
 ALT="$ \lambda_{{i}}^{}$"></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(-90 < \o_{i} < 90, -180 < \lambda_{i} \le 180)$
 -->
<SPAN CLASS="MATH">(- 90 &lt; &#248;<SUB>i</SUB> &lt; 90, -180 &lt; <IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3522.gif
 ALT="$ \lambda_{{i}}^{}$"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3522.gif
 ALT="$ \le$">180)</SPAN>
<tex2html_verbatim_mark> - latitude and longitude of the bomb. No two bombs are situated in the same place.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, write to the output a line with a single number - the minimal destruction radius of the bombs that ensures destruction of the whole world. The answer must be precise up to <SPAN CLASS="MATH">10<SUP>-6</SUP></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
59 30
53 83
41 69
41 41
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2.864479
</PRE> 


______________________________________________________
3523||||||false||||||
<P>Being a knight is a very attractive career: searching for the Holy Grail, saving damsels in distress, and drinking with the other knights are fun things to do. Therefore, it is not very surprising that in recent years the kingdom of King Arthur has experienced an unprecedented increase in the number of knights. There are so many knights now, that it is very rare that every Knight of the Round Table can come at the same time to Camelot and sit around the round table; usually only a small group of the knights isthere, while the rest are busy doing heroic deeds around the country.<P>Knights can easily get over-excited during discussions-especially after a couple of drinks. After some unfortunate accidents, King Arthur asked the famous wizard Merlin to make sure that in the future no fights break out between the knights. After studying the problem carefully, Merlin realized that the fights can only be prevented if the knights are seated according to the following two rules:<P><UL><LI>The knights should be seated such that two knights who hate each other should not be neighbors at the table. (Merlin has a list that says who hates whom.) The knights are sitting around a roundtable, thus every knight has exactly two neighbors. </LI><LI>An odd number of knights should sit around the table. This ensures that if the knights cannot agree on something, then they can settle the issue by voting. (If the number of knights is even, then itcan happen that ``yes" and ``no" have the same number of votes, and the argument goes on.) </LI></UL><P>Merlin will let the knights sit down only if these two rules are satisfied, otherwise he cancels the meeting. (If only one knight shows up, then the meeting is canceled as well, as one person cannot sit around a table.) Merlin realized that this means that there can be knights who cannot be part of any seating arrangements that respect these rules, and these knights will never be able to sit at the Round Table (one such case is if a knight hates every other knight, but there are many other possible reasons). If a knight cannot sit at the Round Table, then he cannot be a member of the Knights of the Round Table and must be expelled from the order. These knights have to be transferred to a less-prestigious order, such as the Knights of the Square Table, the Knights of the Octagonal Table, or the Knights of the Banana-Shaped Table. To help Merlin, you have to write a program that will determine the number of knights that must be expelled.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing two integers <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3523img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3523img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3523img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3523img1.png ALT="$ \le$">1000000</SPAN> <tex2html_verbatim_mark>. The number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of knights. The next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines describe which knight hates which knight. Each of these <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains two integers <SPAN CLASS="MATH"><I>k</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, which means that knight number <SPAN CLASS="MATH"><I>k</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and knight number <SPAN CLASS="MATH"><I>k</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> hate each other (the numbers <SPAN CLASS="MATH"><I>k</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> are between 1 and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>).<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case you have to output a single integer on a separate line: the number of knights that have to be expelled.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 5
1 4
1 5
2 5
3 4
4 5
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
3524||||||false||||||
<P>
Texas is the state having the largest number of cows in the US: according to the 2005 report of the NationalAgricultural Statistics Service, the bovine population of Texas is 13.8 million. This is higher than thepopulation of the two runner-up states combined: there are only 6.65 million cows in Kansas and 6.35millions cows in Nebraska.

<P>
There are several diseases that can threaten a herd of cows, the most feared being ``Mad Cow Disease" or Bovine Spongiform Encephalopathy (BSE); therefore, it is very important to be able to diagnose certain illnesses. Fortunately, there are many tests available that can be used to detect these diseases.

<P>
A test is performed as follows. First a blood sample is taken from the cow, then the sample is mixed with a test material. Each test material detects a certain number of diseases. If the test material is mixed with a blood sample having any of these diseases, then a reaction takes place that is easy to observe. However, if a test material can detect several diseases, then we have no way to decide which of these diseases is present in the blood sample as all of them produce the same reaction. There are materials that detect many diseases (such tests can be used to rule out several diseases at once) and there are tests thatdetect only a few diseases (they can be used to make an accurate diagnosis of the problem).

<P>
The test materials can be mixed to create new tests. If we have a test material that detects diseases A and B; and there is another test material that detects diseases B and C, then they can be mixed toobtain a test that detects diseases A, B, and C. This means that if we have these two test materials, then there is no need for a test material that tests diseases A, B, and C-such a material can be obtained bymixing these two.

<P>
Producing, distributing, and storing many different types of test materials is very expensive, and inmost cases, unnecessary. Your task is to eliminate as many unnecessary test materials as possible. Ithas to be done in such a way that if a test material is eliminated, then it should be possible to mix an equivalent test from the remaining materials. (``Equivalent" means that the mix tests exactly the samediseases as the eliminated material, not more, not less).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several blocks of test cases. Each case begins with a line containing two integers: the number <!-- MATH
 $1 \le n \le 300$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3524img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3524img1.png
 ALT="$ \le$">300</SPAN>
<tex2html_verbatim_mark> of diseases, and the number <!-- MATH
 $1 \le m \le 200$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3524img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3524img1.png
 ALT="$ \le$">200</SPAN>
<tex2html_verbatim_mark> of test materials. The next <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines correspond to the <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> test materials. Each line begins with an integer, the number <!-- MATH
 $1 \le k \le 300$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3524img1.png
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3524img1.png
 ALT="$ \le$">300</SPAN>
<tex2html_verbatim_mark> of diseases that the material can detect. This is followed by <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> integers describing the <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> diseases. These integers are between 1 and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>. 

<P>
The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, you have to output a line containing a single integer: the maximum number of test materials that can be eliminated.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 5
2 1 2
2 2 3
3 1 2 3
4 1 2 3 4
1 4
3 7
1 1
1 2 
1 3
2 1 2
2 1 3
2 3 2
3 1 2 3
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
4
</PRE> 

<P>

______________________________________________________
3525||||||false||||||
<P>
Once upon a time in the west...  The quiet life of the villages on the western frontier are often stirred up by the appearance of mysterious strangers. A stranger might be a bounty hunter looking for a notorious villain, or he might be a dangerous criminal escaping the hand of justice. The number of strangers has become so large that they formed the Mysterious Strangers' Union. If you want to be a mysterious stranger, then you have to apply to the Union, and you have to pass three exams that test the three most important skills: shooting, fist-fighting, and harmonica playing. For each skill, the Admission Committeegives a score between 1 (worst) and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> (best). Interestingly enough, there are no two members in the Union having exactly the same skills: for every two member, there is always at least one skill for which they have diofferent scores. Furthermore, it turns out that for every possible combination of scores there is exactly one member having these scores. This means that there are exactly <SPAN CLASS="MATH"><I>m</I><SUP>3</SUP></SPAN>
<tex2html_verbatim_mark> strangers in the union.

<P>
Recently, some members left the Union and they formed the Society of Evil Mysterious Strangers. 
The aim of this group is to commit as many evil crimes as possible, and they are quite successful at 
it. Therefore, the Steering Committee of the Union decided that a Hero is needed who will destroy 
this evil society. A Hero is a mysterious stranger who can defeat every member of the Society of Evil 
Mysterious Strangers. A Hero can defeat a member if the Hero has a higher score in <SPAN  CLASS="textit">at least</SPAN> 
one skill. For example, if the evil society has two members, 

<P>

<UL>
<LI>Colonel Bill, with a score of 7 for shooting, 5 for knife throwing and 3 for harmonica playing, and
</LI>
<LI>Rabid Jack, with a score 10 for shooting, 6 for knife throwing and 8 for harmonica playing,
</LI>
</UL>
then a Hero with score 8 for shooting, 7 for knife throwing and 3 for harmonica playing can defeat both ofthem. However, someone with a score of 8 for shooting 6 for knife throwing and 8 for harmonica playing cannot be the Hero. Moreover, the Hero cannot be a member of the evil society.

<P>
Your task is to determine whether there is a member in the Union who can be the Hero. If so, thenyou have to count how many members are potential heroes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several blocks of test cases. Each block begins with a line containing two integers: the number
<!-- MATH
 $1 \le n \le 100000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3525img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3525img1.png
 ALT="$ \le$">100000</SPAN>
<tex2html_verbatim_mark> of members in the Society of Evil Mysterious Strangers and the maximum value <!-- MATH
 $2 \le m \le 100000$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3525img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3525img1.png
 ALT="$ \le$">100000</SPAN>
<tex2html_verbatim_mark> of the scores. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines describe these members. Each line contains three integers between 1 and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>: the scores for the three skills.

<P>
The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, you have to output a single line containing the number of members in the Union who satisfy the requirements for becoming a Hero. If there is no such member, then output `<TT>0</TT>'. It can be assumed that the output is always at most <SPAN CLASS="MATH">10<SUP>18</SUP></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 10
2 8 5
6 3 5
1 3 9
1 3
2 2 2
1 10000
2 2 2
0 0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
848
19
999999999992
</PRE> 

<P>

______________________________________________________
3526||||||false||||||
<P>The <SPAN CLASS="textit">National Transportation Communications for ITS Protocol</SPAN> (NTCIP) for communicating with highway signs with dynamic messages describes the messages using <SPAN CLASS="textit">Markup Language for Transportation Information</SPAN> (MULTI). A MULTI string consists of text to be displayed together with embedded tags which describe formatting of the text and included dynamic elements. Tags begin with the open bracket (`<TT>[</TT>') character and end with the close bracket (`<TT>]</TT>') character. If an open bracket character is to appear in the text, it is represented as two open bracket characters. Similarly, if a close bracket character is to appear in the text, it is represented as two close bracket characters. This problem is concerned with formatting for character cell displays, which are rectangular arrays of character cells each of which can display a single character.<P>The tags to be supported for this problem are:<P><P><BR><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Tag</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Description</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[nl]</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Start a new row of the array</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[sc<SPAN CLASS="MATH">&lt; <I>digit</I> &gt;</SPAN>]</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Insert <SPAN CLASS="MATH">&lt; <I>digit</I> &gt;</SPAN> blank character cells between each pair of text characters in</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>the following string until changed.</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[/sc]</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Set inter-character spacing to zero (equivalent to <TT>[sc0]</TT>).</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[jl2]</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Set left justified text (the first character of the text is the leftmost character</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>of the line).</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[jl3]</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Set center justified text (the number of character positions before and after</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>the text on the line is the same or the number after is one more than the</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>number before).</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[jl4]</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Set right justified text (the final character of the string is the rightmost</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>character on the line).</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[jl5]</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Set fully justified text (an equal number of blank character spaces, as</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>large as possible for the line length, is placed between each pair of</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>characters in the text; the resulting string is centered in the line as for</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>centered text).</TD></TR></TBODY></TABLE><P><P><BR>For example, on a 24 character line (<code> </code>indicates a blank character cell):<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Format String</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Generated Output</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[jl2]MESSAGE</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>MESSAGE </code></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[jl3]MESSAGE</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>MESSAGE </code></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[jl4]MESSAGE</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>MESSAGE</code></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[jl2][sc2]MESSAGE</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>M E S S A G E </code></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[jl5]MESSAGE</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>M E S S A G E </code></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>[jl2]THIS[jl3]IS A[jl4]MESSAGE</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><code>THIS IS A MESSAGE</code></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><P><BR>Letters within tags are case-insensitive. That is <TT>[nl] = [NL] = [Nl] = [nL]</TT>.<P>The default justification at the beginning of a message is left justification and the default character spacing is 0.<P>Justification and character spacing are maintained across <TT>[nl]</TT> tags.<P>The <TT>[jl2]</TT> and <TT>[jl5]</TT> tags may only be used before any text has been output on a line. Otherwise it is an error (<TT>TAG CONFLICT</TT>).<P>Once <TT>[jl5]</TT> text has been output on a line, no other justification tag may be set on that line. Otherwise it is an error (<TT>TAG CONFLICT</TT>).<P>The <TT>[jl3]</TT> tag may not be used after right justified text (<TT>[jl4]</TT>) has been output on a line. Otherwise it is an error (<TT>TAG CONFLICT</TT>).<P>A justification tag <TT>[jl<SPAN CLASS="MATH">?</SPAN>]</TT> with the same value as the current value does not cause a <TT>TAG CONFLICT</TT> error.<P>Extra character spacing specified by the <TT>[sc<SPAN CLASS="MATH">?</SPAN>]</TT> tag is ignored on lines with fully justified text. The full justification rules determine the extra spaces.<P>If too many characters are required on a line or too many lines are required in a message, it is an error (<TT>TOO BIG</TT>). A <TT>[nl]</TT> tag does not begin a new line unless followed by text output.<P>If left justified text and center justified text appear on the same line, there must be at least one blank character cell between the last character of left justified text and the first character of center justified text. Otherwise it is an error (<TT>TOO BIG</TT>).<P>If center justified text and right justified text appear on the same line, there must be at least one blank character cell between the last character of center justified text and the first character of right justified text. Otherwise it is an error (<TT>TOO BIG</TT>).<P>If left justified text and right justified text appear on the same line, there must be at least one blank character cell between the last character of left justified text and the first character of right justified text. Otherwise it is an error (<TT>TOO BIG</TT>).<P>The only tags allowed in a message are the seven tags listed above otherwise it is an error (<TT>BAD TAG</TT>). A malformed tag or an unmatched single open or closed bracket is a <TT>BAD TAG</TT> error.<P><P><BR>For this problem you will write a program which takes as input the dimensions of the character cell array and a MULTI string and either outputs an error string or a correctly formatted message.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \le$">100)</SPAN>, which is the number of datasets that follow. Each dataset consists of a single line containing an integer <SPAN CLASS="MATH"><I>R</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \le$">25)</SPAN>, a blank, an integer <SPAN CLASS="MATH"><I>C</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \le$">80)</SPAN>, a blank, and the remainder of the line is a <SPAN CLASS="textbf"><SPAN CLASS="textit">MULTI-Text</SPAN></SPAN> string. <SPAN CLASS="MATH"><I>R</I></SPAN> is the number of rows in the character cell array, <SPAN CLASS="MATH"><I>C</I></SPAN> is the number of columns in the character cell array, and the <SPAN CLASS="textbf"><SPAN CLASS="textit">MULTI-Text</SPAN></SPAN> is the text to be formatted.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output the dataset number on a line by itself, followed by one of the error strings (<TT>TAG CONFLICT</TT>, <TT>TOO BIG</TT>, <TT>BAD TAG</TT>) on a line by itself in the case of an error, or, <SPAN CLASS="MATH"><I>R</I></SPAN> lines each of which has exactly <SPAN CLASS="MATH"><I>C</I></SPAN> characters (other than terminating newlines) representing the formatted message using space characters for empty character cells. The last line of output for a dataset result should be a single blank line.<P><P><P><BR><SPAN CLASS="textbf">Note:</SPAN> For ease in grading, a dataset that contains an error will only contain one type of error.<P><P><BR><SPAN CLASS="textbf">Note for Sample Output:</SPAN> (<code>^</code> added after the last character of the lines for illustrative purposes. It should NOT appear in program output.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7
4 24 [jl2]MESSAGE[nl][jl3]MESSAGE[nl][jl4]MESSAGE
2 24 This[jl3]is a[jl4]message
2 24 This is a very long message which will not fit
4 24 This[nl]message[nl]has[nl]too[nl]many[nl]lines
2 32 [jl3]This message has a [[ and a ]]
2 32 This is a bad tag[xy34]
2 32 [jl3]This message [jl5] has a tag conflict.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
MESSAGE                 ^
        MESSAGE         ^
                 MESSAGE^
                        ^

2
This      is a   message^
                        ^

3
TOO BIG

4
TOO BIG

5
  This message has a [ and a ]  ^
                                ^

6
BAD TAG

7
TAG CONFLICT
</PRE><P>
______________________________________________________
3527||||||false||||||
<P>Doubleville, a small town in Texas, was attacked by the aliens. They have abducted some of the residents and taken them to the a spaceship orbiting around earth. After some (quite unpleasant) human experiments, the aliens cloned the victims, and released multiple copies of them back in Doubleville. So now it might happen that there are 6 identical person named Hugh F. Bumblebee: the original person and its 5 copies. The Federal Bureau of Unauthorized Cloning (FBUC) charged you with the task of determining how many copies were made from each person. To help you in your task, FBUC have collected a DNA sample from each person. All copies of the same person have the same DNA sequence, and different people have different sequences (we know that there are no identical twins in the town, this is not an issue).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing two integers: the number <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3527img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3527img1.png ALT="$ \le$">20000</SPAN> <tex2html_verbatim_mark> people, and the length <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3527img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3527img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark> of the DNA sequences. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain the DNA sequences: each line contains a sequence of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> characters, where each character is either `<TT>A</TT>', `<TT>C</TT>', `<TT>G</TT>' or `<TT>T</TT>'.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each line containing a single integer. The first line contains the number of different people that were not copied. The second line contains the number of people that were copied only once (i.e., there are two identical copies for each such person.) The third line contains the number of people that are present in three identical copies, and so on: the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line contains the number of persons that are present in <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> identical copies. For example, if there are 11 samples, one of them is from John Smith, and all the others are from copies of Joe Foobar, then you have to print `<TT>1</TT>' in the first andthe tenth lines, and `<TT>0</TT>' in all the other lines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 6
AAAAAA
ACACAC
GTTTTG
ACACAC
GTTTTG
ACACAC
ACACAC
TCCCCC
TCCCCC
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
2
0
1
0
0
0
0
0
</PRE><P>
______________________________________________________
3528||||||false||||||
<P>Secret Agent <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \Theta$"> - 7</SPAN> <tex2html_verbatim_mark> has found the secret weapon warehouse of the mad scientist Dr. Matroid. The warehouse is full of large boxes (possibly with deadly weapons inside the boxes). While inspecting the warehouse, <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \Theta$"> - 7</SPAN> <tex2html_verbatim_mark> accidentally triggered the alarm system. The warehouse has a very effective protection against intruders: if the alarm is triggered, then the floor is filled with deadly acid. Therefore, the only way <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \Theta$"> - 7</SPAN> <tex2html_verbatim_mark> can escape is to climb onto the boxes and somehow reach the exit on top of them. The exit is a hole in the ceiling,if <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \Theta$"> - 7</SPAN> <tex2html_verbatim_mark> can climb through this hole then he can escape using the helicopter parked on the roof. There is a ladder and a box below the hole, thus the goal is to reach this box.<P>The floor of the warehouse can be divided into a grid containing <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> cells, the size of each cell is 1 meter <SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark> 1 meter. Each cell is either fully occupied by one box or unoccupied. Each box is rectangular: the size of the base is 1 meter <SPAN CLASS="MATH"><TT>x</TT></SPAN> <tex2html_verbatim_mark> 1 meter, and the height is either 2, 3, or 4 meters. In figure (a), you can see an example warehouse, where the numbers show the height of the boxes, E shows the exit, and the circle shows that Secret Agent <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \Theta$"> - 7</SPAN> <tex2html_verbatim_mark> is currently on the top of that box.<P><DIV ALIGN="CENTER"><IMG WIDTH="1186" HEIGHT="328" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="\epsfbox{p3528.eps}"> <tex2html_verbatim_mark></DIV><P><SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \Theta$"> - 7</SPAN> <tex2html_verbatim_mark> can do two things:<P>If he is standing on top of a box, and in an adjacent cell there is another box, then he can move to the top of this other box. For example, in the situation depicted in figure (a), he can move either to north or east, but not to west or south. Note that only these four directions are allowed, diagonal moves are not possible. The height difference between the two boxes does not matter.<P>The second thing <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \Theta$"> - 7</SPAN> <tex2html_verbatim_mark> can do is that he can topple the box he is standing on in one of the four directions.The effect of toppling is best show by an example: in the situation shown in figure (b), he can topple the box west (figure (c)) or north (figure (d)). If a box of height <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> is toppled north (west, south, etc.) then it will occupy <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> consecutive cells to the north (west, south, etc.) of its original position. The original position will be unoccupied (but can be later occupied again by toppling another box). A box can onlybe toppled if the cells where it will fall are unoccupied. For example, in figure (a), the box where <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \Theta$"> - 7</SPAN> <tex2html_verbatim_mark> is standing cannot be toppled in any of the four directions.<P>By toppling a box, <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \Theta$"> - 7</SPAN> <tex2html_verbatim_mark> jumps one step in the direction that the box is toppled (see figures (c) and(d)). If a box is toppled, then it cannot be toppled again later. Recall that there is a box below the exit (at the cell marked with E in the figure), thus it is not possible to topple a box over this cell. The alarm system will soon release mutant poisonous biting bats, so <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \Theta$"> - 7</SPAN> <tex2html_verbatim_mark> has to leave the warehouse as quickly as possible. You have to help him by writing a program that will determine the minimum number of steps required to reach the exit. Moving to an adjacent box, or toppling a box is counted as one step.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. The first line of each block contains three integers: the size <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3528img1.png ALT="$ \le$">8</SPAN> <tex2html_verbatim_mark> of the warehouse, and two integers <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> that describe the starting position of the secretagent. These numbers are between 1 and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>; the row number is given by <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, the column number is given by <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describe the warehouse. Each line contains a string of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> characters. Each character corresponds to a cell of the warehouse. If the character is `<TT>.</TT>', then the cell is unoccupied. The characters `<TT>2</TT>', `<TT>3</TT>' and `<TT>4</TT>' correspond to boxes of height 2, 3 and 4, respectively. Finally, the character `<TT>E</TT>' shows the location of the exit.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>i</I> = <I>j</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a single line containing an integer: the minimum number of stepsrequired to reach the exit. If it is not possible to reach the exit, then output the text `<TT>Impossible.</TT>'(without quotes).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 5 3
.2..E
...2.
4....
....4
..2..
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
18
</PRE><P>
______________________________________________________
3529||||||false||||||
<P>The widget factory produces several different kinds of widgets. Each widget is carefully built by a skilled widgeteer. The time required to build a widget depends on its type: the simple widgets need only 3 days, but the most complex ones may need as many as 9 days.<P>The factory is currently in a state of complete chaos: recently, the factory has been bought by a new owner, and the new director has fired almost everyone. The new staff know almost nothing about building widgets, and it seems that no one remembers how many days are required to build each diofferent type of widget. This is very embarrassing when a client orders widgets and the factory cannot tell the client how many days are needed to produce the required goods. Fortunately, there are records that say for each widgeteer the date when he started working at the factory, the date when he was fired and what types of widgets he built. The problem is that the record does not say the exact date of starting and leaving the job, only the day of the week. Nevertheless, even this information might be helpful in certain cases: for example, if a widgeteer started working on a Tuesday, built a Type 41 widget, and was fired on a Friday,then we know that it takes 4 days to build a Type 41 widget. Your task is to figure out from these records (if possible) the number of days that are required to build the different types of widgets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing two integers: the number <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3529img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3529img1.png ALT="$ \le$">300</SPAN> <tex2html_verbatim_mark> of the different types, and the number <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3529img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3529img1.png ALT="$ \le$">300</SPAN> <tex2html_verbatim_mark> of the records. This line is followed by a description of the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> records. Each record is described by two lines. The first line contains the total number <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3529img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3529img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark> of widgets built by this widgeteer, followed by the day of week when he/she started working and the day of the week he/she was fired. The days of the week are given bythe strings `<TT>MON</TT>', `<TT>TUE</TT>', `<TT>WED</TT>', `<TT>THU</TT>', `<TT>FRI</TT>', `<TT>SAT</TT>' and `<TT>SUN</TT>'. The second line contains <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> integers separated by spaces. These numbers are between 1 and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, and they describe the diofferent types of widgets that the widgeteer built. For example, the following two lines mean that the widgeteer started working on a Wednesday, built a Type 13 widget, a Type 18 widget, a Type 1 widget, again a Type 13 widget,and was fired on a Sunday.<P><P><BR><PRE>
4 WED SUN
13 18 1 13
</PRE><P><P><BR>Note that the widgeteers work 7 days a week, and they were working on every day between their first and last day at the factory (if you like weekends and holidays, then do not become a widgeteer!).<P>The input is terminated by a test case with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a single line containing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers separated by spaces: the number of days required to build the different types of widgets. There should be no space before the first number or after the last number, and there should be exactly one space between two numbers. If there is more than one possible solution for the problem, then write `<TT>Multiple solutions.</TT>' (without the quotes). If you are sure that there is no solution consistent with the input, then write `<TT>Inconsistent data.</TT>'(without the quotes).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 3
2 MON THU
1 2
3 MON FRI
1 1 2
3 MON SUN
1 2 2
10 2
1 MON TUE 
3
1 MON WED
3
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8 3
Inconsistent data.
</PRE><P>
______________________________________________________
3530||||||false||||||
<P>The NASA Space Center, Houston, is less than 200 miles from San Antonio, Texas (the site of the ACM Finals this year). This is the place where the astronauts are trained for Mission Seven Dwarfs, the next giant leap in space exploration. The Mars Odyssey program revealed that the surface of Mars is very rich in yeyenum and bloggium. These minerals are important ingredients for certain revolutionary new medicines, but they are extremely rare on Earth. The aim of Mission Seven Dwarfs is to mine these minerals on Mars and bring them back to Earth.<P>The Mars Odyssey orbiter identified a rectangular area on the surface of Mars that is rich in minerals. The area is divided into cells that form a matrix of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> rows and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> columns, where the rows go from east to west and the columns go from north to south. The orbiter determined the amount of yeyenum and bloggium in each cell. The astronauts will build a yeyenum refinement factory west of the rectangular area and a bloggium factory to the north. Your task is to design the conveyor belt system that will allow them to mine the largest amount of minerals.<P>There are two types of conveyor belts: the first moves minerals from east to west, the second moves minerals from south to north. In each cell you can build either type of conveyor belt, but you cannot build both of them in the same cell. If two conveyor belts of the same type are next to each other, then they can be connected. For example, the bloggium mined at a cell can be transported to the bloggium refinement factory via a series of south-north conveyor belts.<P>The minerals are very unstable, thus they have to be brought to the factories on a straight path without any turns. This means that if there is a south-north conveyor belt in a cell, but the cell north of it contains an east-west conveyor belt, then any mineral transported on the south-north conveyor beltwill be lost. The minerals mined in a particular cell have to be put on a conveyor belt immediately, in the same cell (thus they cannot start the transportation in an adjacent cell). Furthermore, any bloggium transported to the yeyenum refinement factory will be lost, and vice versa.<P><DIV ALIGN="CENTER"><IMG WIDTH="492" HEIGHT="297" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3530.gif ALT="\epsfbox{p3530.eps}"> <tex2html_verbatim_mark></DIV><P>Your program has to design a conveyor belt system that maximizes the total amount of minerals mined,i.e., the sum of the amount of yeyenum transported to the yeyenum refinery and the amount of bloggium transported to the bloggium refinery.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing two integers: the number <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3530.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3530.gif ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark> of rows, and the number <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3530.gif ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3530.gif ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark> of columns. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describe the amount of yeyenum that can be found in the cells. Each of these <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers. The first line corresponds to the northernmost row; the first integer of each line corresponds to the westernmost cell of the row. The integers are between 0 and 1000. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describe in a similar fashion theamount of bloggium found in the cells.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a single integer on a separate line: the maximum amount of mineralsthat can be mined.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 4
0 0 10 9
1 3 10 0
4 2 1 3 
1 1 20 0
10 0 0 0
1 1 1 30
0 0 5 5
5 10 10 10
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
98
</PRE><P>
______________________________________________________
3531||||||false||||||
<P>A word ring is a sequence of words where the last two letters of each word are the same as the first two letters of the next word (and the last two letters of the last word are the same as the first two letters of the first word). For example, the following sequence is a word ring:<P><P><BR><PRE>
intercommunicational
alkylbenzenesulfonate 
tetraiodophenolphthalein
</PRE><P><P><BR>Your task is to write a program that, given a list of words, finds a word ring. You have to make the word ring as impressive as possible: the average length of the words in the ring has to be as large as possible. In the above example, the average length is <SPAN CLASS="MATH">(20 + 21 + 24)/3 <IMG WIDTH="18" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3531img1.png ALT="$ \approx$"> 21.6666</SPAN> <tex2html_verbatim_mark>, which makes it somewhat impressive. Note that each word can be used at most once in the ring, and the ring can consist of a single word.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing a single integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3531img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3531img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>, the number of possible words that can be used. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain these words. The words contain only the characters `<TT>a</TT>'-`<TT>z</TT>' and the length of each word is at most 1000.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, you have to output a single number on a separate line: the maximum average length of a ring composed from (a subset of) the words given in the input. The average length should be presented as a real number with two digits of precision. If it is not possible to compose a ring from these words, then output `<TT>No solution.</TT>' (without quotes). To avoid rounding problems, we accept solutions with a maximum of <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3531img1.png ALT="$ \pm$">0.01</SPAN> <tex2html_verbatim_mark> error.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
intercommunicational
alkylbenzenesulfonate
tetraiodophenolphthalein
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
21.66
</PRE><P>
______________________________________________________
3532||||||false||||||
<P>The Great Plain of Algorithmia plays an extremely important role in the agriculture of the Bandulu Kingdom: this is the only place where barley (<SPAN CLASS="textit">Hordeum vulgare</SPAN>), an essential ingredient of beer, can be produced. Unfortunately, it is not possible to grow barley on the full area of the plain, as several nuclear plants have recently been built, and you cannot grow barley near a nuclear plant (since you do not want to produce giant-size, aggressive, man-eating barley-mutants). Your task is to write a program that determines the size of the area that can be used for growing barley.<P>The Great Plain of Algorithmia is an <SPAN CLASS="MATH"><I>n</I>km <TT>x</TT> <I>m</I>km</SPAN> <tex2html_verbatim_mark> rectangle, the coordinates of the four corners being <SPAN CLASS="MATH">(0, 0),(0, <I>m</I>),(<I>n</I>, 0)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>n</I>, <I>m</I>)</SPAN> <tex2html_verbatim_mark>. There are two types of nuclear plants: small and large. You are not allowed to grow barley within 0.58km of a small nuclear plant or within 1.31km of a large nuclear plant.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each block begins with a line containing four integers: <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3532img1.png ALT="$ \le$"><I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3532img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark> describe the size of the plain, <SPAN CLASS="MATH"><I>k</I><SUB>s</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3532img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> is the number of small nuclear plants, and <SPAN CLASS="MATH"><I>k</I><SUB>l</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3532img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> is the number of large nuclear plants. The next <SPAN CLASS="MATH"><I>k</I><SUB>s</SUB></SPAN> <tex2html_verbatim_mark> lines describe the coordinates of the small nuclear plants, each line contains two integers <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3532img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3532img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3532img1.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3532img1.png ALT="$ \le$"><I>m</I></SPAN> <tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>k</I><SUB>l</SUB></SPAN> <tex2html_verbatim_mark> lines describe the large nuclear plants in a similar fashion.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = <I>k</I><SUB>s</SUB> = <I>k</I><SUB>l</SUB> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a single line containing the area that can be used for growing barley. This number should be a real value with two digits of precision. To avoid rounding problems, we acceptsolutions with a maximum of <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3532img1.png ALT="$ \pm$">0.01</SPAN> <tex2html_verbatim_mark> error.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 10 2 2
2 2
4 4
5 6
1 8
10 10 1 0
5 5
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
87.46
98.94
</PRE>
______________________________________________________
3533||||||false||||||
<P>Consider the following language:<P><P><BR><SPAN CLASS="MATH"><I>expression</I> = <IMG WIDTH="19" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3533img1.png ALT="$ \left\{\vphantom{ \begin{array}{ll}
c &amp; \mbox{\textit{where c is a single, low...
...t{zero or more expressions followed by a natural number}}
\end{array} }\right.$"><IMG WIDTH="561" HEIGHT="60" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3533img1.png ALT="$ \begin{array}{ll}
c &amp; \mbox{\textit{where c is a single, lower-case letter}} \...
...ox{\textit{zero or more expressions followed by a natural number}}
\end{array}$"></SPAN> <tex2html_verbatim_mark><P><P><BR>The left column of the table b elow includes sample expressions of this language. Now the flattening of an expression is defined as follows: A single letter is flattened to itself. An expression of the form <SPAN CLASS="MATH">(<I>e</I><SUB>1</SUB>&nbsp;<I>e</I><SUB>2</SUB>&nbsp;<SUP> ... </SUP>&nbsp;<I>e</I><SUB>t</SUB>&nbsp;<I>n</I>)</SPAN> <tex2html_verbatim_mark> is flattened by concatenating <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> copies of the concatenation of the flattening of <SPAN CLASS="MATH"><I>e</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. In other words, if <SPAN CLASS="MATH"><I>f</I> (<I>e</I>)</SPAN> <tex2html_verbatim_mark> is the flattening of <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark>, and + symbolizes concatenation, then <SPAN CLASS="MATH"><I>f</I> ((<I>e</I><SUB>1</SUB>&nbsp;<I>e</I><SUB>2</SUB>&nbsp;<SUP> ... </SUP>&nbsp;<I>e</I><SUB>t</SUB>&nbsp;<I>n</I>))</SPAN> <tex2html_verbatim_mark> is:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="208" HEIGHT="62" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3533img1.png ALT="$\displaystyle \underbrace{{f (e_{1}) + f (e_{2}) + \cdots + f (e_{t})}}_{{once}}^{}\,$"> + <IMG WIDTH="208" HEIGHT="84" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3533img1.png ALT="$\displaystyle \overbrace{{f(e_{1}) + f (e_{2} ) + \cdots + f (e_{t})}}^{{twice}}_{}\,$"> + <SUP>... </SUP>+ <IMG WIDTH="208" HEIGHT="73" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3533img1.png ALT="$\displaystyle \underbrace{{f (e_{1} ) + f (e_{2} ) + \cdots + f (e_{t})}}_{{\mbox{the }n^{th} \mbox{ time}}}^{}\,$"></DIV><P><tex2html_verbatim_mark></P><P>The following tables show some sample expressions and the result of flattening each.<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BELOW RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">expression</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">flattened expression</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>w</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>w</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>(c 4)</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>cccc</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>(a (b c 2) 3)</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>abcbcabcbcabcbc</TD></TR></TBODY></TABLE></DIV><P><P><BR>Write a program to flatten a given expression.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will b e tested on one or more test cases. Each test case is made of one correctly formed expression written on a separate line. A `<TT>$</TT>' character identifies the end of line. The last line of the input, which is not part of the test cases, contains a `<TT>$</TT>' by itself (possibly with leading and/or trailing white spaces). Every expression in the input is grammatically correct according to the grammar specified above. Note that an expression may contain leading, trailing, and/or embedded spaces. Such spaces should be ignored. Letters and numb ers are separated from each other by at least one space character.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case expression, write its flattening on a separate line. There should be no spaces (other than newlines) in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
w$ 
(c 4)$ 
(a (b c 2) 3)$ 
$
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
w 
cccc 
abcbcabcbcabcbc
</PRE><P>
______________________________________________________
3534||||||false||||||
<P>Two finite, strictly increasing, integer sequences are given. Any common integer between the two sequences constitute an intersection point. Take for example the following two sequences where intersection points are printed in bold:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE><TR VALIGN="MIDDLE"><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><B>First</B> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3 5 <SPAN CLASS="textbf">7</SPAN> 9 20 <SPAN CLASS="textbf">25</SPAN> 30 40 <SPAN CLASS="textbf">55</SPAN> 56 <SPAN CLASS="textbf">57</SPAN> 60 62</TD></TR><TR VALIGN="MIDDLE"><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><B>Second</B> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1 4 <SPAN CLASS="textbf">7</SPAN> 11 14 <SPAN CLASS="textbf">25</SPAN> 44 47 <SPAN CLASS="textbf">55</SPAN> <SPAN CLASS="textbf">57</SPAN> 100</TD></TR></TABLE></DIV><P><tex2html_verbatim_mark></P><P><P><BR>You can ``walk" over these two sequences in the following way:<P><OL><LI>You may start at the beginning of any of the two sequences. Now start moving forward. </LI><LI>At each intersection point, you have the choice of either continuing with the same sequence you're currently on, or switching to the other sequence. </LI></OL><P><DIV ALIGN="CENTER"><IMG WIDTH="220" HEIGHT="640" BORDER="0" align="right" SRC="http://livearchive.onlinejudge.org/external/35/p3534.gif ALT="\epsfbox{p3534.eps}"> <tex2html_verbatim_mark></DIV><P>The objective is finding a path that produces the maximum sum of data you walked over. In the above example, the largest possible sum is 450 which is the result of adding 3, 5, 7, 9, 20, 25, 44, 47, 55, 56, 57, 60, and 62.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT> </H2><P>Your program will be tested on a number of test cases. Each test case will be specified on two separate lines. Each line denotes a sequence and is specified using the following format:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>n</I>&nbsp;<I>v</I><SUB>1</SUB>&nbsp;<I>v</I><SUB>2</SUB>&nbsp;...&nbsp;<I>v</I><SUB>n</SUB></DIV><P><tex2html_verbatim_mark></P><P>Where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the length of the sequence and <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the ith element in that sequence. Each sequence will have at least one element but no more than 10,000. All elements are b etween -10,000 and 10,000 (inclusive).<P>The last line of the input includes a single zero, which is not part of the test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write on a separate line, the largest possible sum that can be produced.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
13 3 5 7 9 20 25 30 40 55 56 57 60 62 
11 1 4 7 11 14 25 44 47 55 57 100 
4 -5 100 1000 1005 
3 -12 1000 1001 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
450 
2100
</PRE><P>
______________________________________________________
3535||||||false||||||
<P>Given two strings <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, we'll say that the relation ``<SPAN CLASS="textit">alpha of degree k</SPAN>" holds between <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, written as <SPAN CLASS="MATH">(<I>s</I><IMG WIDTH="42" HEIGHT="28" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \;\stackrel{{\alpha^{k}}}{{\longrightarrow}}\;$"><I>t</I>)</SPAN> <tex2html_verbatim_mark>, iff there exists a suffix of <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> with a minimum length of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> characters which is also a prefix of <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>. Note that the alpha relation is not defined for <SPAN CLASS="MATH"><I>k</I> = 0</SPAN> <tex2html_verbatim_mark>.<P>For example, the word ``<TT>telnet</TT>" is <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="38" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \alpha^{{3}}_{}$"></SPAN> <tex2html_verbatim_mark> to ``<TT>network</TT>" while ``<TT>block</TT>" is <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="38" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \alpha^{{4}}_{}$"></SPAN> <tex2html_verbatim_mark> (and <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="38" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \alpha^{{3}}_{}$"></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="38" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \alpha^{{2}}_{}$"></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="38" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \alpha^{{1}}_{}$"></SPAN> <tex2html_verbatim_mark>) related to ``<TT>locker</TT>".<P>An <SPAN CLASS="MATH"><IMG WIDTH="24" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \alpha^{{k}}_{}$"></SPAN> <tex2html_verbatim_mark> chain of length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> (where <SPAN CLASS="MATH"><I>L</I> &gt; 0</SPAN> <tex2html_verbatim_mark>) from word <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> to word <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> is a list of <SPAN CLASS="MATH"><I>L</I> + 1</SPAN> <tex2html_verbatim_mark> words where <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> is the first word, <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> is the last word, and an <SPAN CLASS="MATH"><IMG WIDTH="24" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \alpha^{{k}}_{}$"></SPAN> <tex2html_verbatim_mark> relation holds between each two consecutive words. For example, here's an <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="38" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \alpha^{{2}}_{}$"></SPAN> <tex2html_verbatim_mark> chain of length 4 between ``<TT>cartoon</TT>" and ``<TT>manual</TT>".<P><DIV ALIGN="CENTER"><TT>cartoon</TT> <SPAN CLASS="MATH"><IMG WIDTH="42" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \;\stackrel{{\alpha^{2}}}{{\longrightarrow}}\;$"></SPAN> <tex2html_verbatim_mark> <TT>one</TT> <SPAN CLASS="MATH"><IMG WIDTH="42" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \;\stackrel{{\alpha^{2}}}{{\longrightarrow}}\;$"></SPAN> <tex2html_verbatim_mark> <TT>new</TT> <SPAN CLASS="MATH"><IMG WIDTH="42" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \;\stackrel{{\alpha^{2}}}{{\longrightarrow}}\;$"></SPAN> <tex2html_verbatim_mark> <TT>newsman</TT> <SPAN CLASS="MATH"><IMG WIDTH="42" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \;\stackrel{{\alpha^{2}}}{{\longrightarrow}}\;$"></SPAN> <tex2html_verbatim_mark> <TT>manual</TT></DIV><P>Given a dictionary of words <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, two words <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> (taken from the dictionary), and two integers <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, write a program that determines if there is an <SPAN CLASS="MATH"><IMG WIDTH="24" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \alpha^{{k}}_{}$"></SPAN> <tex2html_verbatim_mark> chain between <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> where the chain's length doesn't exceed <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> and all words in the chain are from <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. The first line of the input specifies a single integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> which represents the number of test cases.<P>Each test case specifies a dictionary of words and a number of queries on that dictionary. The first line of each test case specifies two integers <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> is the number of words in this test case's dictionary and <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> is the number queries to be performed on that dictionary. Note that <!-- MATH
 $0 < W < 50,000$
 --><SPAN CLASS="MATH">0 &lt; <I>W</I> &lt; 50, 000</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < Q < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>Q</I> &lt; 100</SPAN> <tex2html_verbatim_mark>.<P>The dictionary is listed starting at line 2 of each test case, one word on each line, all words are composed of lower case letters, there are no duplicates, no spaces, and no word is longer than 64 characters.<P>Following the dictionary, <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> queries are specified. Each query is specified on a separate line by specifying two strings <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> and two integers <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>.<P>For each query, determine if, using words found in the dictionary, there is an <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> chain from <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> whose length doesn't exceed <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each query, write the result on a separate line. If there is no chain that satisfies the given constrains, your program should print:<P><P><BR><TT><SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>.<SPAN CLASS="MATH"><I>b</I> <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \sqcup$"></SPAN> <tex2html_verbatim_mark>none</TT><P><P><BR>where <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is the query numb er within this test case (again starting at 1.)<P>If, however, there is a chain, your program should print the following:<P><P><BR><TT><SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>b</I> <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \sqcup$"> <I>c</I> <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \sqcup$"> <I>word</I> - 1 <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \sqcup$"> <I>word</I> - 2 <IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \sqcup$">...<IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3535img1.png ALT="$ \sqcup$"> <I>word</I> - <I>n</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>Where <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> are as described previously, <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is the length of the chain. <SPAN CLASS="MATH"><I>word</I> - 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>word</I> - 2</SPAN> <tex2html_verbatim_mark>, ...<SPAN CLASS="MATH"><I>word</I> - <I>n</I></SPAN> <tex2html_verbatim_mark> is the chain, where each two consecutive words are separated by a single space.<P>If there are more than one solution for a query, just print anyone of them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
8 3 
news 
perusal 
symbolic 
newspaper 
salon 
longstreet 
cartoon 
streetcar 
news cartoon 3 8 
news cartoon 3 4 
news cartoon 1 4
2 2  
link 
blink 
blink link 3 10 
link blink 2 100
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1.1 6 news newspaper perusal salon longstreet streetcar cartoon 
1.2 none 
1.3 4 news salon longstreet streetcar cartoon 
2.1 1 blink link 
2.2 none
</PRE><P>
______________________________________________________
3536||||||false||||||
<P>Given a queue <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark>, a stack <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, and a stack <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, and the following operations:<P><DL><DT><STRONG><SPAN CLASS="MATH"><B><I>QA</I>(<I>n</I>) :</B></SPAN> <tex2html_verbatim_mark></STRONG></DT><DD>dequeue an item from <SPAN CLASS="MATH"><B><I>Q</I></B></SPAN> <tex2html_verbatim_mark>, pushing it on <SPAN CLASS="MATH"><B><I>A</I></B></SPAN> <tex2html_verbatim_mark>; repeat <SPAN CLASS="MATH"><B><I>n</I></B></SPAN> <tex2html_verbatim_mark> times</DD><DT><STRONG><SPAN CLASS="MATH"><B><I>QB</I>(<I>n</I>) :</B></SPAN> <tex2html_verbatim_mark></STRONG></DT><DD>dequeue an item from <SPAN CLASS="MATH"><B><I>Q</I></B></SPAN> <tex2html_verbatim_mark>, pushing it on <SPAN CLASS="MATH"><B><I>B</I></B></SPAN> <tex2html_verbatim_mark>; repeat <SPAN CLASS="MATH"><B><I>n</I></B></SPAN> <tex2html_verbatim_mark> times</DD><DT><STRONG><SPAN CLASS="MATH"><B><I>QQ</I>(<I>n</I>) :</B></SPAN> <tex2html_verbatim_mark></STRONG></DT><DD>dequeue an item from <SPAN CLASS="MATH"><B><I>Q</I></B></SPAN> <tex2html_verbatim_mark>, enqueue it again in <SPAN CLASS="MATH"><B><I>Q</I></B></SPAN> <tex2html_verbatim_mark>; repeat <SPAN CLASS="MATH"><B><I>n</I></B></SPAN> <tex2html_verbatim_mark> times</DD><DT><STRONG><SPAN CLASS="MATH"><B><I>AQ</I>(<I>n</I>) :</B></SPAN> <tex2html_verbatim_mark></STRONG></DT><DD>pop an item from <SPAN CLASS="MATH"><B><I>A</I></B></SPAN> <tex2html_verbatim_mark>, enqueue it in <SPAN CLASS="MATH"><B><I>Q</I></B></SPAN> <tex2html_verbatim_mark>; repeat <SPAN CLASS="MATH"><B><I>n</I></B></SPAN> <tex2html_verbatim_mark> times</DD><DT><STRONG><SPAN CLASS="MATH"><B><I>BQ</I>(<I>n</I>) :</B></SPAN> <tex2html_verbatim_mark></STRONG></DT><DD>pop an item from <SPAN CLASS="MATH"><B><I>B</I></B></SPAN> <tex2html_verbatim_mark>, enqueue it in <SPAN CLASS="MATH"><B><I>Q</I></B></SPAN> <tex2html_verbatim_mark>; repeat <SPAN CLASS="MATH"><B><I>n</I></B></SPAN> <tex2html_verbatim_mark> times</DD><DT><STRONG><SPAN CLASS="MATH"><B><I>AB</I>(<I>n</I>) :</B></SPAN> <tex2html_verbatim_mark></STRONG></DT><DD>pop an item from <SPAN CLASS="MATH"><B><I>A</I></B></SPAN> <tex2html_verbatim_mark>, push it on <SPAN CLASS="MATH"><B><I>B</I></B></SPAN> <tex2html_verbatim_mark>; repeat <SPAN CLASS="MATH"><B><I>n</I></B></SPAN> <tex2html_verbatim_mark> times</DD><DT><STRONG><SPAN CLASS="MATH"><B><I>BA</I>(<I>n</I>) :</B></SPAN> <tex2html_verbatim_mark></STRONG></DT><DD>pop an item from <SPAN CLASS="MATH"><B><I>B</I></B></SPAN> <tex2html_verbatim_mark>, push it on <SPAN CLASS="MATH"><B><I>A</I></B></SPAN> <tex2html_verbatim_mark>; repeat <SPAN CLASS="MATH"><B><I>n</I></B></SPAN> <tex2html_verbatim_mark> times.</DD></DL><P>Note that each of the above is considered a single operation, regardless of the value of <SPAN CLASS="MATH"><B><I>n</I></B></SPAN> <tex2html_verbatim_mark>.<P>Now assume that the queue is already populated with numbers and that both stacks are empty, what is the minimum number of operations needed to have the same numbers in the queue but sorted in an ascending order? (smallest in front.)<P>For example, the queue <TT>(4 3 1 2 0)</TT> where 4 is at the front, can be sorted in three steps as follows: <SPAN CLASS="MATH"><B><I>QA</I>(2)</B></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><B><I>QQ</I>(2)</B></SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><B><I>AQ</I>(2)</B></SPAN> <tex2html_verbatim_mark>. The queue <TT>(5 4 1 3 2 0)</TT> can be sorted in four operations as follows: <SPAN CLASS="MATH"><B><I>QB</I>(2)</B></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><B><I>QQ</I>(1)</B></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><B><I>QB</I>(2)</B></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><B><I>BQ</I>(4)</B></SPAN> <tex2html_verbatim_mark>.<P>Write a program that determines the minimum number of operations needed to sort a given queue.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on a number of test cases. Each test case is specified on a single line. Each test case is made of <SPAN CLASS="MATH"><B><I>N</I> + 1</B></SPAN> <tex2html_verbatim_mark> integers. The first integer specifies <SPAN CLASS="MATH"><B><I>N</I></B></SPAN> <tex2html_verbatim_mark> which is the number of elements in the queue. A queue of <SPAN CLASS="MATH"><B><I>N</I></B></SPAN> <tex2html_verbatim_mark> elements will have in it the integers from 0 to <SPAN CLASS="MATH"><B><I>N</I> - 1</B></SPAN> <tex2html_verbatim_mark> in some random order. The integers in the queue are specified from the front of the queue to the back. No queue will have more than 10 elements.<P>The end of the test cases is identified with an input line that contains a single integer <SPAN CLASS="MATH"><B><I>N</I> = 0</B></SPAN> <tex2html_verbatim_mark> (which is not part of the test cases.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the result on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 4 3 1 2 0 
6 5 4 1 3 2 0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
4
</PRE><P>
______________________________________________________
3537||||||false||||||
<P>One way for young children in elementary schools to practice addition is to make them write down an addition table. An addition table of size <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is an <SPAN CLASS="MATH">(<I>N</I> + 1) <TT>x</TT> (<I>N</I> + 1)</SPAN> <tex2html_verbatim_mark> square matrix, where the top row and the left column are labeled with some random integers, (except for their intersection cell where we normally put the plus sign.) The child's task is now to put in each cell the result of adding the label of the row, and the label of the column. For example, the table on the right is an addition table of size 3.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>+</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">3</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">-2</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">5</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">1</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">4</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">-2</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY></TABLE></DIV><P><P><BR>Once students grow up and enter intermediate-level schools, we can give them the opp osite. Give them an <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> table, and let them decide how to add labels for it to be a valid addition table (if it is indeed an addition table.) Given an <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> table, which does not include any labels, your job is to decide whether it is possible to properly label it or not. We're not interested in the labels themselves, just decide if it is an addition table or not. For example, the <SPAN CLASS="MATH">2 <TT>x</TT> 2</SPAN> <tex2html_verbatim_mark> table on the left is not an addition table, while the one on the right is.<P><IMG WIDTH="282" HEIGHT="101" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3537img1.png ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert c\vert}
\hline
1 &amp; 4 \\
\hline
3 &amp; 5 \\
\hline
\end{tabular}\end{center}}$"><IMG WIDTH="227" HEIGHT="101" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3537img1.png ALT="$\textstyle \parbox{.4\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert c\vert}
\hline
3 &amp; 6 \\
\hline
2 &amp; 5 \\
\hline
\end{tabular}\end{center}}$"><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. The first line in the input is an integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> representing the number of cases. The first line of each test case is an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3537img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, representing the size of the table. Following that, there will be <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers representing the <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> table in a row-major format. Each number in the table is between -10,000 and 10,000 (inclusive).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><TT><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3537img1.png ALT="$ \sqcup$"> <I>result</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark> is ``<TT>YES</TT>" if the test case is an addition table, or ``<TT>NO</TT>" if it's not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
3 
4 -1 6 
7  2 9 
1 -4 3 
2 
1 4 
3 5 
2 
3 6 
2 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. YES 
2. NO 
3. YES
</PRE><P>
______________________________________________________
3538||||||false||||||
<P>Two binary trees (called <SPAN CLASS="textbf">A</SPAN> and <SPAN CLASS="textbf">B</SPAN>) are <SPAN CLASS="textit">equivalent</SPAN> if and only if one of the following two conditions holds:<P><OL><LI>Both trees are empty. Or, </LI><LI>The root nodes of both trees are equal, and either:<DL COMPACT><DT>(a)</DT><DD>the left subtree of <SPAN CLASS="textbf">A</SPAN> is <SPAN CLASS="textit">equivalent</SPAN> to the left subtree of <SPAN CLASS="textbf">B</SPAN>, and the right subtree of <SPAN CLASS="textbf">A</SPAN> is equivalent to the right subtree of <SPAN CLASS="textbf">B</SPAN>. Or,</DD><DT>(b)</DT><DD>the left subtree of <SPAN CLASS="textbf">A</SPAN> is <SPAN CLASS="textit">equivalent</SPAN> to the right subtree of <SPAN CLASS="textbf">B</SPAN>, and the right subtree of <SPAN CLASS="textbf">A</SPAN> is equivalent to the left subtree of <SPAN CLASS="textbf">B</SPAN>.</DD></DL></LI></OL><P>For example, the three trees on the left of the following figure are all equivalent to each other but none is equivalent to the right-most tree.<P><DIV ALIGN="CENTER"><IMG WIDTH="815" HEIGHT="239" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3538.gif ALT="\epsfbox{p3538.eps}"> <tex2html_verbatim_mark></DIV><P>Write a program that determines if two given binary trees are equivalent or not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on a number of test cases. The first line of the input contains an integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> which represents the number of test cases. Each test case is specified on two lines. The first line specifies the first tree, with the second tree sp ecified on the second line. Each tree is sp ecified using a left-to-right <SPAN CLASS="textit">postfix</SPAN> notation where each empty subtree is explicitly specified using the keyword <TT>nil</TT>. All data in the tree are upper-case letters. The end of the line is specified using the keyword `<TT>end</TT>'. For example, the tree on the left of the figure is specified as:<P><P><BR><TT>nil nil nil G F nil nil C nil nil E nil D B A end</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print on a separate line, the word ``<TT>true</TT>" if the two trees are equivalent. Otherwise print ``<TT>false</TT>".<P>The two test cases in the following sample I/O represent the four trees drawn on the previous page (from left to right)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
nil nil nil G F nil nil C nil nil E nil D B A end
nil nil C nil nil E nil D B nil nil G nil F A end
nil nil nil E D nil nil C B nil nil nil G F A end
nil nil nil E C nil nil D B nil nil nil G F A end
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
true 
false
</PRE><P>
______________________________________________________
3539||||||false||||||
<P>Consider a classical 2-arm 12-hour clock. Now imagine a really precise one. One that can indicate the time in hours, minutes, seconds, and hundredths of a second. Such clock can specify the time between 0:0:0.00 and 11:59:59.99 inclusive. (We'll use the format hour:minute:second.hundredths) to write the time displayed on such clock. Now, you are given two identical clocks of this type, each of them showing some time where the first is strictly before the second. You also know the radius of the clock face. We're interested in computing the area of the clock face determined by the two small (hour) clock-arms on the two clocks. The area starts from the position of the first hour clock-arm and continues in the clockwise way till the position of the second hour clock-arm.<P><DIV ALIGN="CENTER"><IMG WIDTH="199" HEIGHT="795" BORDER="0" align="right" SRC="http://livearchive.onlinejudge.org/external/35/p3539.gif ALT="\epsfbox{p3539.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. The first line in the input specifies a single integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> representing the number of test cases. The first line will be followed by <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> test cases, where each case is specified on three lines. The first line in a test case specifies four integers denoting the time on the first clock using the following format:<P><P><BR><SPAN CLASS="MATH"><I>H</I>&nbsp;<I>M</I>&nbsp;<I>S</I>&nbsp;<I>U</I></SPAN> <tex2html_verbatim_mark><P><P><BR>with <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark> for hours, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> for minutes, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> for seconds, and <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> for hundredth of a second. Note that <!-- MATH
 $0 \le H < 12$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3539.gif ALT="$ \le$"><I>H</I> &lt; 12</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 \le M < 60$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3539.gif ALT="$ \le$"><I>M</I> &lt; 60</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 \le S < 60$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3539.gif ALT="$ \le$"><I>S</I> &lt; 60</SPAN> <tex2html_verbatim_mark>, and <!-- MATH
 $0 \le U < 100$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3539.gif ALT="$ \le$"><I>U</I> &lt; 100</SPAN> <tex2html_verbatim_mark>. The second line of a test case specifies the time on the second clock, using the same format as the first.<P>The third line specifies a real number denoting the radius of the clock. The maximum for the radius is 10,000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><TT><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>.<SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3539.gif ALT="$ \sqcup$"> <I>f</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> is the answer, rounded to three decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
4 10 20 55 
8 30 5 10 
20.5 
3 58 58 44 
10 10 7 22 
22.25
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 476.286 
2. 801.720
</PRE><P>
______________________________________________________
3540||||||false||||||
<P>Given a non-empty string composed of digits only, we may group these digits into sub-groups (but maintaining their original order) if, for every sub-group but the last one, the sum of the digits in a sub-group is less than or equal to the sum of the digits in the sub-group immediately on its right. Needless to say, each digit will be in exactly one sub-group.<P>For example, the string <TT>635</TT> can only be grouped in one sub-group [<TT>635</TT>] or in two sub-groups as follows: [<TT>6-35</TT>] (since <SPAN CLASS="MATH">6 &lt; 8</SPAN> <tex2html_verbatim_mark>.)<P>Another example is the string <TT>1117</TT> which can be grouped in one sub-group [<TT>1117</TT>] or as in the following: [<TT>1-117</TT>], [<TT>1-1-17</TT>], [<TT>1-11-7</TT>], [<TT>1-1-1-7</TT>] , [<TT>11-17</TT>] , and [<TT>111-7</TT>] but not any more, hence the total number of possibilities is 7.<P>Write a program that computes the total number of possibilities of such groupings for a given string of digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on a number of test cases. Each test case is specified on a separate line. Each line contains a single string no longer than 25, and is made of decimal digits only. The end of the test cases is identified by a line made of the word ``<TT>bye</TT>" (without the quotes.) Such line is not part of the test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the result using the following format:<P><P><BR><TT><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>.<SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3540img1.png ALT="$ \sqcup$"> <I>n</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the result of this test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
635 
1117 
9876 
bye
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 2 
2. 7 
3. 2
</PRE><P>
______________________________________________________
3541||||||false||||||
<P>Imagine a 2D diagram drawn in the following way: Starting at the origin, you're given a sequence of letters which is entirely made of the following four letters `<TT>U</TT>', `<TT>D</TT>', `<TT>L</TT>', and `<TT>R</TT>'. A `<TT>U</TT>' is an instruction for you to move one unit upward and drawing a segment at the same time. Similarly, `<TT>D</TT>' is for moving down, `<TT>L</TT>' for left, and `<TT>R</TT>' for right. For example, figure (a) is drawn by giving the sequence `<TT>UURDLL</TT>' while figure (b) is the result of `<TT>UURRRDLLLLUURRRDDD</TT>' (in both figures, the starting point is identified by a small circle.)<P>While segments are allowed to intersect, they're not allowed to overlap. In other words, any two segments will have, at most, one point in common. We're interested in knowing the number of closed polygons, not containing any lines inside, in such diagrams. Figure (a), has only one closed polygon while figure (b) has three. Write a program to do exactly that.<P><DIV ALIGN="CENTER"><IMG WIDTH="257" HEIGHT="479" BORDER="0" align="right" SRC="http://livearchive.onlinejudge.org/external/35/p3541.gif ALT="\epsfbox{p3541.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is sp ecified on a separate line. The diagram is specified using a sequence made entirely of <TT>(U|D|L|R)</TT> and terminated by the letter `<TT>Q</TT>'. All letters are capital letters. None of the segments in a test case will overlap. The end of test cases is identified by the letter `<TT>Q</TT>' on a line by itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the answer on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
UURDLLQ 
UURRRDLLLLUURRRDDDQ 
Q
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
3
</PRE><P>
______________________________________________________
3542||||||false||||||
<P>Consider the series of numbers whose all prime factors have 3 as their least (right-most) digit. For example, the first 10 numbers in this series are:<P><P><BR><TT>3 9 13 23 27 39 43 53 69 73</TT><P><P><BR>The numbers 3, 13, 23, 43, 53, and 73 are in this series since they're all primes whose least digit is a 3. Whereas <SPAN CLASS="MATH">9(3 <TT>*</TT> 3), 27(3 <TT>*</TT> 3 <TT>*</TT> 3), 39(3 <TT>*</TT> 13)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">69(23 <TT>*</TT> 3)</SPAN> <tex2html_verbatim_mark> are in since all their prime factors have a 3 as their least digit. Write a program that takes a list of positive integers and determines if each integer is in this series or not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains a list of one or more positive integers, each given on a separate line. Each integer is less than a million. The last line of the file contains a `<TT>-1</TT>' (which is not part of the list.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each number in the input, write, on a separate line, the number itself followed by the word ``<TT>YES</TT>" if the number is in the series described above, or ``<TT>NO</TT>" if it isn't. Separate the number from the answer by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
13 
33 
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 YES 
13 YES 
33 NO

______________________________________________________
3543||||||false||||||
<P>The scientists have found an ancient device that works in a strange way. The device has a keyboard and an output tape. The keyboard has 26 keys, with symbols `<TT>A</TT>' through `<TT>Z</TT>' on them. Each key has an LED on it (like the Caps Lock key on some keyboards). Each time you press a key, the LED on it toggles (changes its state from <SPAN CLASS="textit">off</SPAN> to <SPAN CLASS="textit">on</SPAN> or vice versa). All LEDs are <SPAN CLASS="textit">off</SPAN> initially.<P>To study the output written on the tape, we consider the device in discrete time steps. Suppose we are in time <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>. If no LED is <SPAN CLASS="textit">on</SPAN>, no output is written on the tape. If there are <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> LEDs <SPAN CLASS="textit">on</SPAN>, the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th letter of the English alphabet is written on the tape. For example, if three LEDs are <SPAN CLASS="textit">on</SPAN> at a time step, a letter `<TT>C</TT>' is written on the tape. This process repeats at every time step.<P>You are asked to write a program that simulates the ancient device.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains multiple test cases. The first line of the input, contains <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, the number of test cases that follow. Each of the following <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> blocks, describes a test case.<P>The first line of each block contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3543img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3543img1.png ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark>. After this, there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each containing one capital alphabet letter, followed by two integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $(0 \le a < b \le 1000)$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3543img1.png ALT="$ \le$"><I>a</I> &lt; <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3543img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. The capital letter shows the key pressed. The number <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> is the first time step at which the key is pressed and the number <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is the second time step at which the key is pressed. During the interval <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I> + 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I> - 1</SPAN> <tex2html_verbatim_mark>, the LED of the key is on. You can assume that, in each test case, these letters are distinct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output one line containing the output string that is written on the tape.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 
X 2 6 
Y 4 9
3 
A 1 5
B 4 8
C 9 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
AABBAAA 
AAABAAAA
</PRE><P>
______________________________________________________
3544||||||false||||||
<P>Using SMS today is more than a pleasing hobby. As the number of messages one sends through this service grows, the need to type them fast is better felt. Sometimes, one wonders how fast a message can be typed. Changing some words to their synonyms, might help type the whole message faster, if we were able to quickly calculate the time needed for a specific message.<P>In the following, we assume that each message is a string of capital English letters and space character. The letters `<TT>A</TT>' through `<TT>Z</TT>' are assigned to keys `<TT>2</TT>' to `<TT>9</TT>', as in the following figure. To type a letter, one should press its key 1, 2, 3, or 4 times, depending on the position of the letter from left to right.<P><DIV ALIGN="CENTER"><IMG WIDTH="190" HEIGHT="267" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3544.gif ALT="\epsfbox{p3544.eps}"> <tex2html_verbatim_mark></DIV><P>If two consecutive letters of the message are mapped to one key, one should wait for the first letter to be fixed on the screen and then use the key again to type the second one. For instance, to type the letter `<TT>X</TT>', one should press `<TT>9</TT>' twice. If the next letter of the message is not on the same key, one can continue to type the rest of the message. Otherwise, one has to wait for some time, so that the typed `<TT>X</TT>' is fixed, and then the next letter (`<TT>W</TT>', `<TT>X</TT>', `<TT>Y</TT>', or `<TT>Z</TT>') can be typed. To type whitespace, we use the key `<TT>1</TT>'. As there is no letter mapped to the key `<TT>1</TT>', the whitespace needs no time to be fixed.<P>You are given the time needed to press any key, and the time one should wait for a letter to be fixed. Your program should find the minimum time needed to type a nonempty string, given the above rules.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. The first line of the input, contains <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, the number of test cases that follow. Each of the following <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> blocks, describes a test case. The first line of each block contains <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3544.gif ALT="$ \le$"><I>p</I>, <I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3544.gif ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, which show the amount of time in milliseconds for pressing a letter and waiting for it to be fixed, respectively. The second line contains a non-empty string of length at most 1000, consisting of spaces or capital English letters. There is no leading or trailing spaces in a line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output one line showing the time needed to type the message in milliseconds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
2 10 
ABBAS SALAM
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
72
</PRE><P>
______________________________________________________
3545||||||false||||||
<P>You are working for OTC, the Olandican Telecommunication Company. Unfortunately, OTC does not decide wisely in assigning telephone numbers to the clients. For example, it did not make a good estimate on demand increase. As a result, it had to increase the number of digits in the local telephone numbers of Oland (the capital) from six to seven, and then again from seven to eight digits.<P>As usual, a telephone number consists of two parts: an area code, and the local number within that area code. For example, if <TT>021</TT> is the area code of the Oland city, a telephone number in that city may be <TT>0211234567</TT>. Note that no area code is the prefix of another area code.<P>The process of changing telephone numbers is not easy though. It requires updates to several databases of millions of records. Fortunately, these changes follow a limited number of rules as follows:<P><OL><LI>For all local numbers in a given area code, repeat the ith digit. For example, for the area code 021, repeating the second digit causes the number 0211234567 change to 02112234567. </LI><LI>For all numbers in a given area code, swap the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th and the <SPAN CLASS="MATH">(<I>i</I> + 1)</SPAN> <tex2html_verbatim_mark>th digit. For example, for the area code <TT>021</TT>, swapping the second and the third digits causes the number <TT>0211234567</TT> change to <TT>0211324567</TT>. </LI><LI>Change a given area code. For example, changing <TT>021</TT> to <TT>0211</TT> causes the number <TT>0211234567</TT> change to <TT>02111234567</TT>. </LI></OL><P>Note that changing area codes in the third rule preserves the property that no area code is the prefix of another. You are to write a program that given the area code information, and the set of all telephone numbers, plus a given set of rules, determine the resulting telephone numbers after the changes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first part of the input describes the set of area codes. It starts with a line containing a single integer <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3545img1.png ALT="$ \le$"><I>A</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3545img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, which is the number of area codes in Olandica, followed by <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> lines of the following form:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>area</I> - <I>code</I>&nbsp; &nbsp;<I>area</I> - <I>name</I></DIV><P><tex2html_verbatim_mark></P><P>where <SPAN CLASS="MATH"><I>area</I> - <I>code</I></SPAN> <tex2html_verbatim_mark> is a string of at least one, and at most 5 digits, and <SPAN CLASS="MATH"><I>area</I> - <I>name</I></SPAN> <tex2html_verbatim_mark> is a string of at least one, and at most 20 letters (both uppercase and lowercase). There are no two lines with the same area-code or area-name.<P>The second part of the input describes the rules applied by OTC. The first line of this part contains a single integer <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3545img1.png ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3545img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>, the number of rules applied, followed by <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines of the following form:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>year</I>&nbsp; &nbsp;<I>rule</I> - <I>info</I></DIV><P><tex2html_verbatim_mark></P><P>where <SPAN CLASS="MATH"><I>year</I></SPAN> <tex2html_verbatim_mark> is the year in which the rule is applied. You may assume the rule is applied on the first day of the year, and at most one rule is applied each year. The <SPAN CLASS="MATH"><I>rule</I> - <I>info</I></SPAN> <tex2html_verbatim_mark> part depends on the specific rule applied. The following list shows the rule-info formats corresponding to the rules described in the problem statement:<P><UL><LI><TT>1</TT> <SPAN CLASS="MATH"><I>area</I> - <I>name</I>&nbsp; <I>i</I></SPAN> <tex2html_verbatim_mark> </LI><LI><TT>2</TT> <SPAN CLASS="MATH"><I>area</I> - <I>name</I>&nbsp; <I>i</I></SPAN> <tex2html_verbatim_mark> </LI><LI><TT>3</TT> <SPAN CLASS="MATH"><I>area</I> - <I>name</I>&nbsp; <I>new</I> - <I>area</I> - <I>code</I></SPAN> <tex2html_verbatim_mark> </LI></UL><P>You can assume that input data is consistent; i.e. in the rules section, indices are not out of range, and an area code will never be prefix of another, at any fixed time. The third part of the input consists of several lines of the following form:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>year</I><SUB>1</SUB>&nbsp; <I>year</I><SUB>2</SUB>&nbsp; <I>number</I></DIV><P><tex2html_verbatim_mark></P><P>The query says that in <SPAN CLASS="MATH"><I>year</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, there was a telephone number <SPAN CLASS="MATH"><I>number</I></SPAN> <tex2html_verbatim_mark>, and asks for that number in <SPAN CLASS="MATH"><I>year</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH"><I>year</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3545img1.png ALT="$ \le$"><I>year</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>). You must change the number according to the rules applied in the years between <SPAN CLASS="MATH"><I>year</I><SUB>1</SUB> + 1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>year</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> in that order. The queries end with a line containing three zeros. The years are positive integers less than <SPAN CLASS="MATH">10<SUP>9</SUP></SPAN> <tex2html_verbatim_mark>.<P>In every line in the input containing more than one data item (number or name), the data items are separated by one or more spaces. There may be arbitrary number of leading or trailing spaces too. Each data item is at least one character. Each line of the input is at most 50 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains one line corresponding to each query containing the changed number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
021 Oland 
0511 Moland 
0311 Boland 
03121 Kamand 
7 
2002 1 Moland 2 
2001 3 Moland 0515 
2003 2 Boland 3 
2005 1 Kamand 1 
2000 1 Kamand 1 
1999 1 Kamand 1 
1998 3 Oland 012345 
2000 2005 0311243426 
2000 2005 05113837462 
2000 2005 03121437478 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0311244326 
051538837462 
031214437478
</PRE><P>
______________________________________________________
3546||||||false||||||
<P>
Hassan, helping with his younger brother's homework, found out that when you multiply 102564 by 4, its right-most digit moves to the left, and the other digits move one position to the right; i.e. <!-- MATH
 $4 \times 102564 = 410256$
 -->
<SPAN CLASS="MATH">4 <TT>x</TT> 102564 = 410256</SPAN>
<tex2html_verbatim_mark>. We call a number that has this property when multiplied by <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, an <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>-dramatic number. For instance, 102564 and 128205 are both 4-dramatic. Given two one-digit numbers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>, the goal is to find the smallest <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>-dramatic number that its rightmost digit is <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
On the first line of the input, there is an integer <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>, which is the number of cases that follow. Each test case, is on a line by itself, and contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>, where <!-- MATH
 $1 \le n \le 9$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3546img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3546img1.png
 ALT="$ \le$">9</SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $1 \le k \le 9$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3546img1.png
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3546img1.png
 ALT="$ \le$">9</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output a single integer on a line by itself, which is the smallest <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>-dramatic number that its rightmost digit is <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>. If no such number exists, output `<TT>0</TT>' instead.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
4 5 
2 1
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
128205 
0
</PRE>  

<P>

______________________________________________________
3547||||||false||||||
<P>ACM-ICPC judges, sometimes, play computer games, such as <SPAN CLASS="textit">Alphariz</SPAN>. In the game of <SPAN CLASS="textit">Alphariz</SPAN>, you are given a table (e.g., Table I) of alphabetic characters. At each step of the game, you choose a table entry <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> containing a non-blank character <SPAN CLASS="MATH"><I>ch</I></SPAN> <tex2html_verbatim_mark>. Then, you recursively identify all the friends of <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>. The friends are the existing table entries containing the same character <SPAN CLASS="MATH"><I>ch</I></SPAN> <tex2html_verbatim_mark> which are located immediately to the left, right, up, and down directions of <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>, and their friends in turn, until no new friends can be located. Then, you replace the characters in <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> and its found friends with blanks. Table II shows the result of applying the latter rule on Table I, starting at entry <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> in row 1 and column 2, where <SPAN CLASS="MATH"><I>ch</I></SPAN> <tex2html_verbatim_mark> is `<TT>a</TT>'.<P><IMG WIDTH="282" HEIGHT="159" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3547img1.png ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert c...
...
\hline
a &amp; b &amp; b &amp; a &amp; a \\
\hline
\end{tabular}\par
Table I.
\end{center}
}$"><IMG WIDTH="227" HEIGHT="159" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3547img1.png ALT="$\textstyle \parbox{.4\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert c...
...\
\hline
&amp; b &amp; b &amp; a &amp; a \\
\hline
\end{tabular}\par
Table II.
\end{center}}$"><P>Then, while still in the same step, you shift all the non-blank characters to the left and the blanks to the right, as is shown in Table III. Next, you shift all non-blank characters down and the blanks are shifted up as is shown in Table IV. Note that possible full blank rows or columns are to be deleted.<P><IMG WIDTH="282" HEIGHT="159" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3547img1.png ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert c...
... \\
\hline
b &amp; b &amp; a &amp; a \\
\hline
\end{tabular}\par
Table III.
\end{center}}$"><IMG WIDTH="227" HEIGHT="159" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3547img1.png ALT="$\textstyle \parbox{.4\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert c...
...&amp; \\
\hline
b &amp; b &amp; a &amp; a \\
\hline
\end{tabular}\par
Table IV.
\end{center}}$"><P>You are to write a program that given the initial table and a sequence of selected table entries, apply the above rules for each given table entry, one after another, and report the final resulting table.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. Each test case starts with the character map which is given in <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> characters <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3547img1.png ALT="$ \le$"><I>m</I>, <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3547img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. Characters in the initial map are all lowercase letters. After this, there is a single line containing a single integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> which is the number of selected table entries, followed by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines, containing two integers <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3547img1.png ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3547img1.png ALT="$ \le$"><I>m</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3547img1.png ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3547img1.png ALT="$ \le$"><I>n</I>)</SPAN> <tex2html_verbatim_mark> which are the row and the column numbers of the table entry, respectively. Besides, the items are always inside the current table.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th test case should start with a line in the following format:<P><P><BR><TT>Test case #<SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>:</TT><P><P><BR>After the first line, the final map should be written with the same format as in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
aabbb 
abaab 
aaaba 
abbaa 
1 
1 2 
aba 
bbc 
2 
1 3 
2 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Test case #1: 
bb 
bb 
bab 
bbaa 
Test case #2: 
a 
c
</PRE><P>
______________________________________________________
3548||||||false||||||
<P>
In his fabulous trip to El Dorado, Kamran made his fortune. After helping the king solve a difficult math problem, the king granted a piece of royal garden to Kamran. The king wrote a letter to the gardener, so that a rectangular region of the royal garden with a specified area, be given to Kamran. You could guess that the trees in El Dorado are made from Gold! 

<P>
After taking the letter to the royal gardener, Kamran found out that, unfortunately, there is no specific pattern for the location of the trees in the garden. To get the most profit, Kamran talked to the gardener and convinced him that it would not matter much, if Kamran chose the location of his rectangular share, and if he would choose a share smaller than the letter suggests. However, the gardener insisted that Kamran's subgarden should have sides parallel to the garden sides (which is itself a rectangle), and that vertices should have integer coordinates. The area of the piece of land must be positive, so that the king would not suspect anything. 

<P>
Now, given the locations of the trees in the garden and the maximum allowed area of his share, Kamran should find a rectangular sub-garden with maximum number of trees inside; if a tree is on the border of the sub-garden, he can safely claim it.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The only number of the first line, <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark>, is the number of different instances to be solved. <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> blocks follow, which describe different independent problems. 

<P>
The first line of a block, contains two integers <!-- MATH
 $0 \le F \le 1000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3548img1.png
 ALT="$ \le$"><I>F</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3548img1.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>, the number of trees in the field, and the specified area <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>F</I></SPAN>
<tex2html_verbatim_mark> lines, each describes the location of a tree, by two nonnegative integers <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le x, y \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3548img1.png
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3548img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>. No two trees have the same position.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each block in the input, write a single integer, which is the maximum number of trees that Kamran can obtain.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1 
3 3
1 1
1 3
1 5
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
</PRE> 

<P>

______________________________________________________
3549||||||false||||||
<P>Attending a boring weekly session, our professor started drawing on a grid in a page of his calendar. He started at a boundary grid point <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>; note that <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is a corner of one or two grid cells. He drew a diameter of one of those cells and continued on a straight line until reaching point <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> on another edge of the grid. Then he started another line from <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark>, perpendicular to the line <SPAN CLASS="MATH"><I>PQ</I></SPAN> <tex2html_verbatim_mark> until hitting another edge at point <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>. He kept drawing lines as above, until he could not draw a new line, either because a perpendicular line would not start with a cell diameter or it would fall on an already drawn line. Then he was puzzling how he would be able to count the number of minimal rectangles he has created on the grid. At this time, the chair of the session noticed him and asked him what he was doing. ``Sorry, I was designing a problem for the ACM-ICPC Tehran site," he said.<P><DIV ALIGN="CENTER"><IMG WIDTH="439" HEIGHT="338" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3549.gif ALT="\epsfbox{p3549.eps}"> <tex2html_verbatim_mark></DIV><P>You are to write a program to, given the dimensions <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> of a grid, the coordinates <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> of a point <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> on one of the edges of the grid, and the direction (up, left), (down, left), (up, right), or (down, right) of the first line, help the professor to find out the number of minimal rectangles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. The first line of the input, contains <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, the number of test cases that follow. Each of the following <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> blocks, describes a test case.<P>The first line of each block, contains two positive integers <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, which are the number of horizontal and vertical gridlines, respectively <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3549.gif ALT="$ \le$"><I>R</I>, <I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3549.gif ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. The coordinates of the starting point comes on the next line, as two positive integers <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3549.gif ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3549.gif ALT="$ \le$"><I>R</I>, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3549.gif ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3549.gif ALT="$ \le$"><I>C</I>)</SPAN> <tex2html_verbatim_mark>; for the upper-left point of the grid, we have <SPAN CLASS="MATH"><I>x</I> = <I>y</I> = 1</SPAN> <tex2html_verbatim_mark>. The third line of each test case, contains a two-character code which is one of the following:<P><UL><LI>``<TT>DR</TT>", the first move is in the down-right direction, </LI><LI>``<TT>DL</TT>", the first move is in the down-left direction, </LI><LI>``<TT>UL</TT>", the first move is in the up-left direction, </LI><LI>``<TT>UR</TT>", the first move is in the up-right direction. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output one line containing the number of non-overlapping rectangles formed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
4 5 
2 1 
DR 
4 5 
4 1 
UR
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
3
</PRE>
______________________________________________________
3550||||||false||||||
<P>Zebel, the tour coordinator, has reserved a limited number of hotel rooms for his clients. Rooms have different capacities and naturally, different prices. Zebel decides to find the least cost assignment of the tour participants to the available rooms. His strategy is to fill the rooms with appropriate collection of people to minimize the overall room cost, but he is facing some restrictions that no two people of different sex that are not married may stay in the same room, and if a room is assigned to a married couple, no other person may stay in that room. Note that it is not necessary to put a married couple in the same room. It is also possible that we do not fill a room to its capacity.<P>You are to write a program to help Zebel find a least cost assignment of the tour participants to the reserved hotel rooms.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The only number in the first line is <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, the number of test cases that follow. The first line of each test case contains four integer numbers, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark> the number of male tour participants, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \le$"><I>f</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark> the number of female tour participants, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark> the number of rooms reserved by Zebel, and <SPAN CLASS="MATH"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \ge$"> 0</SPAN> <tex2html_verbatim_mark> which is the number of marriage relations between tour participants. Note that polygamy is not allowed in the tour; i.e. each participant is either single or has a unique mate.<P>The description of the reserved rooms comes on the following <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> lines. Each line describes a room, by two integer numbers <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \le$"><I>b</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \le$">5</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \le$"><I>p</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3550img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>, which are the capacity and price of this room.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, output the minimum cost of assigning the rooms to the tour participants. If this is not possible, output the phrase ``<TT>Impossible</TT>" instead.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 1 3 1 
3 5 
2 1 0 
2 4 
1 1 1 0
1 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9 
Impossible
</PRE><P>
______________________________________________________
3551||||||false||||||
<P>
Our country is under enemy's attack. Hostile bombers are going to fly towards the capital and destroy everything. To defend the capital, we have a number of missiles, ready to launch and hit the enemy's bombers, before they reach the capital. Unfortunately, there are passenger planes in the sky, which we do not want to hit by our missiles. 

<P>
We have been able to gather useful information regarding enemy's bombers. While they taxi over our missile defense zone, bombers travel in a fixed altitude. All bombers fly with the same speed. The same applies to airplanes, and our missiles. We know the location of each bomber and each airplane at time zero. Our missiles are placed on the ground, and their locations are also known.

<P>
You should write a program, that given the information about the bombers, and the locations of passenger planes in the sky, determines the maximum number of bombers that can be successfully hit by our missiles. Then, we pray for the rest of bombers to explode by themselves! 

<P>
To simplify your task, The following are assumed:

<P>

<UL>
<LI>We consider a flat two-dimensional model of the earth. Thus, the <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinate of the airplanes, and attacking bombers, does not change during their movement over our defense zone.  
</LI>
<LI>Each defending missile can be fired, at time zero or afterwards.  
</LI>
<LI>The <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinate of bombers, and airplanes are distinct positive integers.  
</LI>
<LI>Each bomber or airplane, has unit length, while our missiles have no length.  
</LI>
<LI>If a missile hits, or just touches the edge of a target in the sky, our missile will explode, while the target keeps moving normally on its path for a while before it explodes. Assume that the hit bomber will explode after passing all defending missiles, i.e. after surpassing the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinate of all our missiles. Note that during this time, it may be hit by other missiles.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains multiple test cases. The first line of the input, contains <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>, the number of test cases that follow. Each of the following <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark> blocks, describes a test case, and is preceded by a blank line. 

<P>
The first line of each block contains three integers, <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le m, n, k \le 300)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3551img1.png
 ALT="$ \le$"><I>m</I>, <I>n</I>, <I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3551img1.png
 ALT="$ \le$">300)</SPAN>
<tex2html_verbatim_mark>, which are the number of bombers, airplanes, and our missiles, respectively. The second line contains three integers, <SPAN CLASS="MATH"><I>v</I><SUB>m</SUB></SPAN>
<tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>v</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> , and <SPAN CLASS="MATH"><I>v</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le v_{m} , v_{n} , v_{k} \le 10,000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3551img1.png
 ALT="$ \le$"><I>v</I><SUB>m</SUB>, <I>v</I><SUB>n</SUB>, <I>v</I><SUB>k</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3551img1.png
 ALT="$ \le$">10, 000)</SPAN>
<tex2html_verbatim_mark>, which are the respective velocity of bombers, airplanes and our missiles. Airplanes and enemy's bombers, are assumed to move to the right, for simplicity, while our missile move upwards, without changing their <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinates. 

<P>
Next come <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines, that each gives the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> coordinate of the head of a bomber, at time zero. The planes in the sky, are described similarly, in the following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines. The last line contains <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> integers, each being the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinate of a defending missile which is ready to launch. The coordinates are all nonnegative integers less than 10,000.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output one line showing the maximum number of hit bombers, without any airplane being hit. Follow the format of the sample.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1 

2 1 3 
1 1 1 
0 100 
1 99 
2 50 
100 200 300
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Mission #1: 1 bomber(s) exploded
</PRE> 

<P>

______________________________________________________
3552||||||false||||||
<P>
A computer professor, who is fond of programming, has come to Tehran to pay a visit to our regional contest. After hearing about such an event, he has tried his best to be able to participate in the contest as a visitor. He would decide to hold such contests in his university, if he finds it fun enough. 

<P>
As could be predicted, he has been lost in our large and crowded city, Tehran. He does not know where to go. Getting really tired, he is standing in a city intersection when he suddenly remembers the phone number of a friend in the organizing committee, and instantly calls him. The friend understands the situation and wants to route the professor through mobile phone calls. He plans to give the professor directions at each intersection; i.e. he tells the tired professor in which direction to move, and after reaching the next intersection, there is another phone call, to get the new direction, etc. This process continues, until the professor sees his friend at the destination intersection, waiting for him. Due to poor telecommunications installment, not all city intersections are accessible through mobile network. 

<P>
The professor should get to the regional contest location as soon as possible. There are a number of antennas located in some of city intersections. A city intersection is accessible through the network if an antenna can see the point; i.e. there is an imaginary straight line connecting the intersection to any part of the antenna. The line can never cross a building, but touching a boundary does not block the mobile connection. The city is composed of <!-- MATH
 $R \times C$
 -->
<SPAN CLASS="MATH"><I>R</I> <TT>x</TT> <I>C</I></SPAN>
<tex2html_verbatim_mark> rectangular blocks. Each block is a building having 10 meters width and length. 

<P>
You should write a program to find out the shortest possible mobile route; i.e. a route that lets the professor call his friend from each intersection, until reaching the destination. The program is given <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> and height of each building and each antenna, and the location of antennas.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The only number of the first line, <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(1 \le T \le 20)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$"><I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark> is the number of different test cases to be solved. <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> input blocks follow, which describe different independent test cases. 

<P>
The first line of a block, contains two integers <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le R, C \le 50)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$"><I>R</I>, <I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$">50)</SPAN>
<tex2html_verbatim_mark>, the number of rows and columns of the city map, respectively. Next <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> lines, each contains <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> non-negative integers, <!-- MATH
 $0 \le H_{ij} \le 1000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$"><I>H</I><SUB>ij</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>, describing the building heights. The first entry is the leftmost building in the uppermost row. The coordinates of the starting and ending points are given next; the row coordinates come first in each line. The lower and rightmost intersection is <SPAN CLASS="MATH">(<I>R</I>, <I>C</I>)</SPAN>
<tex2html_verbatim_mark>, while the opposite intersection is <SPAN CLASS="MATH">(0, 0)</SPAN>
<tex2html_verbatim_mark>. 

<P>
Followed is <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(0 \le A \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$"><I>A</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>, the number of mobile antennas. Next <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> lines describe the antennas by three numbers, <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(0 \le r \le R, 0 \le c \le C)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$"><I>r</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$"><I>R</I>, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$"><I>C</I>)</SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(0 \le h \le 1000)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$"><I>h</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3552img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>. It means that there is an antenna with height <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark> at the intersection <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>)</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each block of the input, write a single integer, which is the least distance the professor is to travel before getting to the contest, in meters. If there is no mobile route, and the professor's friend is to choose another way for the routing, output `<TT>-1</TT>' instead.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
3 2 
0  10 
20 15 
5  4 
3 0 
1 2 
1 
0 0 6
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
40

______________________________________________________
3553||||||false||||||
<P>Can you mop the given tiled flooring in an artistic fashion? Use the following hint to get the complete ordered tile listing and give the same in a linear array.<P><DIV ALIGN="CENTER"><IMG WIDTH="999" HEIGHT="253" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3553a.gif ALT="\epsfbox{p3553a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">(a). TL-BR Zig-Zag (b). TR-BL Zig-Zag</DIV><P>Likewise BL-TR Zig-Zag Mopping, BR-TL Zig-Zag Mopping are also possible mop-modes. Your program should get the type of scan as the input and perform the corresponding traversal to copy the tiles along the mop into a <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> array.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple test cases. First line indicates the number of test cases. Second line gives the dimension of the matrix. Next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contain the elements of each row separated by a space. <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> <tex2html_verbatim_mark>-th line indicates the mop-mode. Input file terminates with `<TT>*</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> array consisting of the elements falling along the scanned path.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
4 x 4
1 2 3 4
5 6 7 8
1 2 3 4
5 6 7 8
TL-BR
*
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 5 1 6 3 4 7 2 5 6 3 8 4 7 8
</PRE><P>
______________________________________________________
3554||||||false||||||
<P>
John is a software engineer in India and busy winding up his work on 15th December to head back to the US for Christmas to join his family. His friend informs him that his flight would go over the Bermuda jungle during the course of the journey. John's anxiety increases as he listens to his friend's narration of the `Jungle of No Return' which is depicted below by a colored grid: 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3554.eps}$
 -->
<IMG
 WIDTH="1102" HEIGHT="417" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3554.gif
 ALT="\epsfbox{p3554.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1

</DIV>

<P>
Each land in the jungle has its own pros and cons: 

<P>

<OL>
<LI>Land of Penguins is a beautiful snow land where penguins give a hearty welcome and serve you with delicious fish. The guest will have to stay for 3 days and leave immediately after the third day. A person can leave the Penguin Land only through the east by one position. 
</LI>
<LI>Land of flying monkeys is a unique land with monkeys having wings. They serve you with lot of fruit and take you for a free aerial trip. You cannot escape without this trip which lasts 48 hours. After the trip they drop you in the direction which has a displacement of 2 positions towards the west and one towards the north. 
</LI>
<LI>The land of dancing devils is a frightening place. The devils would like to dance for you for 5 full days without giving you any food. On the sixth day they throw you 3 positions exactly opposite to the termination point they are located.
</LI>
<LI>The land of thousand Squirrels is a busy place. The squirrels carry you on their back and leave you at a displacement of 1 position towards the south. The hard work of Squirrels goes on for 72 hours. 
</LI>
<LI>Once you are into the river of crocodiles they will feed you with coconut water from the coconut trees along the banks of the river. The crocodiles always threaten you to take the shortest path to reach either end of the river. It takes 1 day to cross each square of the river. 
</LI>
<LI>At last, the land of Savior Angles is the safest landing place. You always ask a wish to be dropped at your home which is duly granted immediately. 
</LI>
</OL>

<P>
Assume that John's flight meets with an accident right above the Bermuda Jungle and John falls into the jungle without much injury. The input is the coordinate point where John lands. Write a program that could output all the events faced by John. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark> coordinate where John lands in the jungle. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
A story narrating John's adventure in the Bermuda Jungle. The last line should state whether John was able to join his family for Christmas. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
0,0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Mr.John's found himself in land of squirrels after the plane crash. 
The squirrels carried him in the southern direction for 3 days. 
Next he again landed in the land of squirrels. 
The squirrels carried him in the southern direction for 3 days. 
Next he landed in the land of penguins. 
The penguins fed him with delicious fish for 3 days and gave send off towards east. 
Next he again landed in the land of penguins. 
The penguins fed him with delicious fish for 3 days and gave send off towards east. 
Next he again landed in the land of penguins.
The penguins fed him with delicious fish for 3 days and gave send off towards east. 
Next he again landed in the land of penguins. 
The penguins fed him with delicious fish for 3 days and gave send off towards east. 
Next he falls into the river of crocodiles 
He enjoyed the coconut water and swimmed for 2 days. 
Next he again landed in the land of penguins. 
The penguins fed him with delicious fish for 3 days and gave send off towards east. 
Next he again landed in the land of penguins. 
The penguins fed him with delicious fish for 3 days and gave send off towards east. 
Next he landed in the land of devils. 
The devils danced for him for 5 days keeping him hungry and threw him.. 
Next he again landed in the land of penguins. 
The penguins fed him with delicious fish for 3 days and gave send off towards east. 
Next he again falls into the river of crocodiles 
He enjoyed the coconut water and swimmed for 3 days. 
Next he landed in the land of Flying Monkeys. 
The monkeys fed him with fruits and provided him an aerial trip for 2 days. 
Then the monkey dropped him. 
Next he again landed in the land of squirrels. 
The squirrels carried him in the southern direction for 3 days. 
Next he again landed in the land of squirrels. 
The squirrels carried him in the southern direction for 3 days. 
Next he again landed in the land of Flying Monkeys. 
The monkeys fed him with fruits and provided him an aerial trip for 2 days. 
Then the monkey dropped him. 
Next he again landed in the land of penguins. 
The penguins fed him with delicious fish for 3 days and gave send off towards east. 
Next he again landed in the land of squirrels. 
The squirrels carried him in the southern direction for 3 days. 
Next he again falls into the river of crocodiles
He enjoyed the coconut water and swimmed for 4 days. 
Next he again landed in the land of penguins.
The penguins fed him with delicious fish for 3 days and gave send off towards east. 
Next he again landed in the land of penguins. 
The penguins fed him with delicious fish for 3 days and gave send off towards east. 
At last Mr.John reached the Land of Savior Angels. 
The angels safely dropped him at home. 
Mr John missed Christmas with his family.
</PRE> 

<P>

______________________________________________________
3555||||||false||||||
<P>A vehicle is fitted with an uncalibrated 2-axis accelerometer with outputs <SPAN CLASS="MATH"><I>Xout</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Yout</I></SPAN> <tex2html_verbatim_mark>, signifying the acceleration values along <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>-axis and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>-axis respectively. The vehicle is considered to move along a surface lying on the horizontal <SPAN CLASS="MATH"><I>X</I> - <I>Y</I></SPAN> <tex2html_verbatim_mark> plane having no significant elevations or pits. In other words, the effects of any vertical motion of the vehicle caused by any form of elevations or pits can be ignored. The acceleration <SPAN CLASS="MATH"><I>Ax</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Ay</I></SPAN> <tex2html_verbatim_mark> along <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> axes respectively in <SPAN CLASS="MATH"><I>m</I>/<I>s</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> are given by:<P><P><BR><SPAN CLASS="MATH"><I>Ax</I> = <I>Kx</I> <TT>*</TT> <I>Xout</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>Ay</I> = <I>Ky</I> <TT>*</TT> <I>Yout</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH"><I>Kx</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Ky</I></SPAN> <tex2html_verbatim_mark> are calibration constants, which are positive and real-valued. The accelerometer is connected to a data logger which samples the acceleration values every second. It is assumed that the acceleration remains constant between two consecutive samplings. To calibrate the accelerometer the vehicle is started up from rest, made to travel for a well-defined distance, may be along a zig-zag path. <SPAN CLASS="MATH"><I>Re</I></SPAN> <tex2html_verbatim_mark> represents the Euclidean distance between start and end points, while <SPAN CLASS="MATH"><I>Rx</I></SPAN> <tex2html_verbatim_mark> represents the <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>-axis component of <SPAN CLASS="MATH"><I>Re</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR>Write a program that takes the data logger output and either computes the calibration constants given <SPAN CLASS="MATH"><I>Re</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Rx</I></SPAN> <tex2html_verbatim_mark> or computes the total distance traveled given the calibration constants <SPAN CLASS="MATH"><I>Kx</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Ky</I></SPAN> <tex2html_verbatim_mark>.<P>The data logger output is given to the program in following format<P><P><BR><!-- MATH
 $<F> \ <P0> \ <P1> \ <Xout0> \ <Yout0> \ <T0> \ldots <Xoutn> \ <Youtn> \ <Tn>$
 --><SPAN CLASS="MATH">&lt; <I>F</I> &gt; &nbsp; &lt; <I>P</I>0 &gt; &nbsp; &lt; <I>P</I>1 &gt; &nbsp; &lt; <I>Xout</I>0 &gt; &nbsp; &lt; <I>Yout</I>0 &gt; &nbsp; &lt; <I>T</I>0 &gt;...&lt; <I>Xoutn</I> &gt; &nbsp; &lt; <I>Youtn</I> &gt; &nbsp; &lt; <I>Tn</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH">&lt; <I>F</I> &gt;</SPAN> <tex2html_verbatim_mark> is a code for the function to be formed and its value is either `<TT>c</TT>' (for calibration constants computation), or `<TT>d</TT>' for distance computation.<P><SPAN CLASS="MATH"><I>P</I>0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I>1</SPAN> <tex2html_verbatim_mark> are function-dependent parameters defined as:<P><P><BR><SPAN CLASS="MATH"><I>P</I>0 = <I>Kx</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I>1 = <I>Ky</I></SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH">&lt; <I>F</I> &gt; =</SPAN> <tex2html_verbatim_mark> `<TT>d</TT>'<BR><SPAN CLASS="MATH"><I>P</I>0 = <I>Re</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I>1 = <I>Rx</I></SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH">&lt; <I>F</I> &gt; =</SPAN> <tex2html_verbatim_mark> `<TT>c</TT>'<P><P><BR>The sequence <!-- MATH
 $<Xoutn> \ <Youtn> \ <Tn>$
 --><SPAN CLASS="MATH">&lt; <I>Xoutn</I> &gt; &nbsp; &lt; <I>Youtn</I> &gt; &nbsp; &lt; <I>Tn</I> &gt;</SPAN> <tex2html_verbatim_mark> means that the output <SPAN CLASS="MATH"><I>Xout</I></SPAN> <tex2html_verbatim_mark> of accelerometer had the value <SPAN CLASS="MATH">&lt; <I>Xoutn</I> &gt;</SPAN> <tex2html_verbatim_mark> and output <SPAN CLASS="MATH"><I>Yout</I></SPAN> <tex2html_verbatim_mark> had the value <SPAN CLASS="MATH">&lt; <I>Youtn</I> &gt;</SPAN> <tex2html_verbatim_mark> for time <SPAN CLASS="MATH">&lt; <I>Tn</I> &gt;</SPAN> <tex2html_verbatim_mark> (in seconds).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The program should read the input from command line and display the calibration constants <SPAN CLASS="MATH"><I>Kx</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Ky</I></SPAN> <tex2html_verbatim_mark> or the total distance (not the Euclidean distance) traveled by the vehicle, depending on the value of <SPAN CLASS="MATH">&lt; <I>F</I> &gt;</SPAN> <tex2html_verbatim_mark>.<P>For both calibration and distance computation, the vehicle can be assumed to start from rest and <SPAN CLASS="MATH">&lt; <I>Xout</I>0 &gt;</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">&lt; <I>Yout</I>0 &gt;</SPAN> <tex2html_verbatim_mark> gives the initial acceleration values. The vehicle may still be traveling and need not come to rest at the end point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output of the program must be in the following format:<P><P><BR>For <SPAN CLASS="MATH">&lt; <I>F</I> &gt; =</SPAN> <tex2html_verbatim_mark> `<TT>c</TT>' output format is:<P><P><BR><!-- MATH
 $<Kx> \ <Ky>$
 --><SPAN CLASS="MATH">&lt; <I>Kx</I> &gt; &nbsp; &lt; <I>Ky</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>For <SPAN CLASS="MATH">&lt; <I>F</I> &gt; =</SPAN> <tex2html_verbatim_mark> `<TT>d</TT>' output format is:<P><P><BR><!-- MATH
 $<Total \ Distance>$
 --><SPAN CLASS="MATH">&lt; <I>Total</I>&nbsp;<I>Distance</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH">&lt; <I>Kx</I> &gt;</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">&lt; <I>Ky</I> &gt;</SPAN> <tex2html_verbatim_mark>, and <!-- MATH
 $<Total \ Distance>$
 --><SPAN CLASS="MATH">&lt; <I>Total</I>&nbsp;<I>Distance</I> &gt;</SPAN> <tex2html_verbatim_mark> are the computed values (real numbers) of <SPAN CLASS="MATH"><I>Kx</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Ky</I></SPAN> <tex2html_verbatim_mark>, and the total distance traveled.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
c 5643.98 -4140.00 -2 2 9 -4 1 2 -5 0 8 -4 1 1 -3 3 6
d 4.00 8.00 -2 2 9 -4 1 2 -5 0 8 -4 1 1 -3 3 6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4.00 8.00 
5724.91
</PRE><P>
______________________________________________________
3556||||||false||||||
<P>Ms. Angel has a degree in computing and also fashion design. Working as a fashion designer she takes photographs of textures she comes across and creates designs based on these textures. Being a smart programmer, she thought she could use her computing background to automatically extract patterns from a captured texture. For example, consider the following sample texture (figure 1):<P><DIV ALIGN="CENTER"><IMG WIDTH="360" HEIGHT="380" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3556a.gif ALT="\epsfbox{p3556a.eps}"> <tex2html_verbatim_mark></DIV><P>This texture is built up from two basic tiles: a vertical striped tile and the horizontal striped tile:<P><DIV ALIGN="CENTER"><IMG WIDTH="77" HEIGHT="113" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3556a.gif ALT="\epsfbox{p3556b.eps}"> <tex2html_verbatim_mark></DIV><P>Given these two tiles, Ms Angel is interested in three kinds of bigger patterns: Even-Symmetric pattern, Odd-symmetric pattern, and Unit pattern. She extracts a portion of the texture and terms it as even-symmetric if one half of the portion (in either the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- or <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-direction) is same as the other half, and as odd-symmetric if one half matches the other half leaving out the center column or row.<P>Examples of the Even-Symmetric patterns in figure 1 are:<P><DIV ALIGN="CENTER"><IMG WIDTH="979" HEIGHT="162" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3556a.gif ALT="\epsfbox{p3556c.eps}"> <tex2html_verbatim_mark></DIV><P>Examples of Odd-Symmetric patterns in figure 1 are:<P><DIV ALIGN="CENTER"><IMG WIDTH="872" HEIGHT="115" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3556a.gif ALT="\epsfbox{p3556d.eps}"> <tex2html_verbatim_mark></DIV><P>The Unit patterns present in figure 1 are:<P><DIV ALIGN="CENTER"><IMG WIDTH="1059" HEIGHT="380" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3556a.gif ALT="\epsfbox{p3556e.eps}"> <tex2html_verbatim_mark></DIV><P>A Unit pattern is one that can be repeated a number of times in order to get the captured texture of figure 1. This poses an interesting problem:<P><BLOCKQUOTE>Given a <SPAN CLASS="MATH"><I>M</I> <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> texture grid, generate all the even-symmetric, odd-symmetric and unit patterns present in it, and also the number of occurrences of each.</BLOCKQUOTE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line indicates the number of test cases. Second line is a pair of numbers: <SPAN CLASS="MATH"><I>M</I>&nbsp;<I>N</I></SPAN> <tex2html_verbatim_mark> [separated by a space]. The next set of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines each has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> values representing the type of pattern. That is, <SPAN CLASS="MATH"><I>M</I> <TT>x</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> is the size of the captured pattern. Assume <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3556a.gif ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3556a.gif ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3556a.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3556a.gif ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The type and number of occurrences of Even-symmetric patterns, Odd-symmetric patterns and Unit patterns. The patterns are separated by a comma. <P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1 4 
1212 
2 2 
11 
11
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Even-Symmetric Patterns - 1 
1212 
Odd-Symmetric Patterns - 2 
121, 
212 
Unit Patterns - 2 
12, 
1212 
Even-Symmetric Patterns - 3 
11, 
1 
1 
11 
11 
Odd-Symmetric Patterns - 0 
Unit Patterns - 3 
1, 
11, 
11 
11
</PRE><P>
______________________________________________________
3557||||||false||||||
<P>You are made the in charge of services at the Taj group of hotels, which has decided to start <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> number of branches in Jaipur, a city known for its water scarcity. Anticipating the heavy water requirement, you meet the Managing Director (MD) of the Water Authorities in Jaipur seeking their help. Your hotel management has asked you to minimize the cost of pipe-laying, and hence you obtain from MD the distances between all pairs of Taj branches in Jaipur. There may be cases where a pair of Taj branch hotels are on either side of a terrain and it may be impossible to have a pipeline between them. The MD also suggests that you should get the metro water pipeline connected to a central Taj branch hotel, and from there on Taj can pump the water to all its branches. Since Taj wishes to minimize the power consumption for pumping water, this central location should also be carefully chosen - the cost of pumping water to a branch hotel is proportional to its distance from the central location. The problem is to determine the optimum pipeline connectivity, along with the central point where you need to connect the metro water pipeline and the pump. The distances of the pipeline on either side of the central point should be very much balanced.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input will consist of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> - the number of Taj branch hotels. The next set of <SPAN CLASS="MATH"><I>N</I>(<I>N</I> - 1)/2</SPAN> <tex2html_verbatim_mark> lines each consists of: (i) a pair of Taj hotels, (ii) whether it is possible to lay a pipeline between them <SPAN CLASS="MATH">(<I>p</I>/<I>n</I>)</SPAN> <tex2html_verbatim_mark>, and (iii) the length of pipeline if the answer to (ii) is <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Display the optimal pipeline connectivity and the node to locate the pump.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
1 2 P 5
1 3 P 4
1 4 N
1 5 P 5
1 6 N
2 3 P 3
2 4 P 4
2 5 N
2 6 N
3 4 P 4
3 5 P 3
3 6 N
4 5 P 6
4 6 P 2
5 6 P 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3 4
2 3 3
2 4 4
3 5 3
4 6 2
3
</PRE><P>
______________________________________________________
3558||||||false||||||
<P><SPAN CLASS="textbf">Problem:</SPAN><P>A college conducts interview to recruit a Maths Professor who also has good programming knowledge. So, they select a problem which tests both the mathematical and programming skills. The problem is:<P><BLOCKQUOTE>Given a set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> distinct digits (where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is even), form two subsets of size <SPAN CLASS="MATH"><I>n</I>/2</SPAN> <tex2html_verbatim_mark> such that whose product of the two numbers denoted by the digits in these two sets is maximized.</BLOCKQUOTE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>First line of the input indicates the number of test cases. The input to each of the test case is a numerical character array of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 10</SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input, display the two substrings that yield the maximum product. If two or more combinations of substrings exist, all the substrings must be displayed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4213
62841375
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
41 * 32 = 1312
7642 * 8531 = 65193902
</PRE><P>
______________________________________________________
3559||||||false||||||
<P>Mr. Crazy wishes to write a program to multiply two big numbers, i.e., whose sizes are bigger than that supported by the integer data type of standard languages such as Java, C++, etc. . Mr. Crazy is ready to pay your air tickets to Texas if you could write a program with the standard languages (such as C, C++, Java) for this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>1-st line indicates the number of test cases followed by test-case data. Two Numbers separated by a Comma.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The Product<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
65432198721,65432198721
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4281372629464434035841
</PRE><P>
______________________________________________________
3560||||||false||||||
<P>Marsians know only ternary number system. A Marsian visited Earth and got trapped in one of the houses. He would like to read the calendar present in the house so that he would exactly know the date at his native land. Alas, English names of the months and decimal number system followed on earth left him clueless.<P>You need to write a program that helps the Marsian understand the date on earth, so that with his own formula he can calculate the exact date at his native land. Your program accepts date only in the following formats: dd-mm-yy or<P><P><BR><SPAN CLASS="MATH"><I>dd</I> - <I>mon</I> - <I>yy</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>dd</I> - <I>mm</I> - <I>yyyy</I></SPAN> <tex2html_verbatim_mark>, or <SPAN CLASS="MATH"><I>dd</I> - <I>mon</I> - <I>yyyy</I></SPAN> <tex2html_verbatim_mark>. Any other format is considered invalid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>First line indicates the number of test cases. Each of the next line contains the date specified on earthly format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Date in ternary system<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
20-Jun-75 
03-05-70 
15/10/2005
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
202-20-2210 
10-12-2121 
?

______________________________________________________
3561||||||false||||||
<P>
Air fares are crazy! The cost of a ticket is determined by numerous factors, and is usually not directly related to the distance traveled. Many travelers try to be creative, sometimes using only parts of tickets with stops in various cities to achieve lower-cost travel. However, the airlines are aware of this behavior, and usually require that the travel covered by a ticket be completed in order and without intervening travel. For example, if you have a ticket for travel from City-1 to City-2 then to City-3, you are not allowed to use only the portion of the ticket for travel from City-2 to City-3. You must always start at the first city on the ticket. In addition, you are not allowed to travel from City-1 to City-2, fly elsewhere and return, and then continue your journey from City-2 to City-3. 

<P>

<P>
<BR>
Let's consider an example. Suppose you are allowed to purchase three types of tickets: 

<P>

<P>
<BR>
<TABLE COLS=3>
<COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
Ticket #1: </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> City-1 to City-3 to City-4 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> $225.00 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Ticket #2: </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> City-1 to City-2 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> $200.00 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Ticket #3: </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> City-2 to City-3 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> $50.00 </TD></TR>
</TABLE>

<P>

<P>
<BR>
Suppose you wanted to travel from City-1 to City-3. There are two ways to get there using only the available ticket choices: 

<P>

<P>
<BR>
<TABLE COLS=1>
<COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
Purchase Ticket #1 for $225.00 and use only the first leg of the ticket. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
Purchase Ticket #2 for $200.00 and Ticket #3 for $50. </TD></TR>
</TABLE>

<P>

<P>
<BR>
The first choice is the cheapest. 

<P>

<P>
<BR>
Given a set of airline ticket offers, and one or more trip itineraries, you must determine how to purchase tickets in order to minimize the cost of travel. Each trip will be possible.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of multiple test cases, each describing a set of ticket offers and a set of trip itineraries. 

<P>
Each case begins with a line containing <SPAN CLASS="MATH"><I>NT</I></SPAN>, the number of ticket offers, followed by <SPAN CLASS="MATH"><I>NT</I></SPAN> offer descriptions, one to a line. Each description consists of a positive integer specifying the price of the ticket, the number of cities in the ticket's route, and then that many cities. Each city in a case has an arbitrary, but unique, integer identification number. Note that several tickets may be purchased from the same offer. 

<P>
The next line contains <SPAN CLASS="MATH"><I>NI</I></SPAN>, the number of trips that are to have their cost minimized. <SPAN CLASS="MATH"><I>NI</I></SPAN> lines follow, giving the itineraries for each trip. Each line consists of the number of cities in the itinerary (including the starting city), followed by that many city identification numbers, given in the order they are to be visited. 

<P>
There will be no more than 20 ticket offers or 20 itineraries in a test case. Each offer and itinerary lists from 2 to 10 cities. No ticket price exceeds $10,000. Adjacent cities in a route or itinerary will be distinct. Tickets and trips are numbered sequentially in each set, starting with 1. 

<P>
The last case is followed by a line containing a zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each trip, output two lines containing the case number, the trip number, the minimum cost of the trip, and the numbers of the tickets used for the trip, in the order they will be used. Follow the output format shown below. The output will always be unique.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
225 3 1 3 4 
200 2 1 2 
50 2 2 3 
1 
2 1 3 
3 
100 2 2 4 
100 3 1 4 3 
200 3 1 2 3 
2 
3 1 4 3 
3 1 2 4 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1, Trip 1: Cost = 225
  Tickets used: 1
Case 2, Trip 1: Cost = 100
  Tickets used: 2
Case 2, Trip 2: Cost = 300
  Tickets used: 3 1
</PRE> 

<P>
<p>
<b>Claimer:</b>
The data used in this problem is unofficial data
prepared by Derek Kisman. So any mistake here does not
imply mistake in the offcial judge data. Only Derek
Kisman is responsible for the mistakes. Report
mistakes to dkisman@acm.org


______________________________________________________
3562||||||false||||||
<P>
Hugh Samston owns the ``You Want It, Hugh Got It" catering service, which has been asked to supply desserts for the participants in this year's ICPC World Finals. Hugh will provide pie slices topped with ice cream at the various social functions scheduled throughout the week. As with any other dedicated entrepreneur, Hugh would like to offer the best service possible, so he has ordered a wide variety of pies and ice creams to satisfy even the most eclectic tastes. 

<P>
Hugh plans to serve each pie slice with a single scoop of ice cream, leaving the exact combination up to the whim of the customer. But of course, as with any other dedicated entrepreneur, Hugh would also like to make as much profit as possible from this enterprise. He knows ahead of time how much profit he can make on each combination of pie slice and ice cream scoop, as well as which combinations of pie and ice cream should never be put together (example: Peppermint Banana Chunk ice cream on Key Lime pie). 

<P>
Given this information, along with the number of slices and scoops he has of each variety of pie and ice cream, Hugh figures he can determine both the minimum and maximum profits he can expect. Since he hopes to be the caterer at subsequent World Finals, he would like a general program to solve this and future problems.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of multiple problem instances. Each problem instance will start with a line containing two integers <SPAN CLASS="MATH"><I>P</I></SPAN> <!-- MATH
 $(P \le 50)$
 -->
<SPAN CLASS="MATH">(<I>P</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3562img1.png
 ALT="$ \le$">50)</SPAN> and <SPAN CLASS="MATH"><I>I</I></SPAN> <!-- MATH
 $(I \le 50)$
 -->
<SPAN CLASS="MATH">(<I>I</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3562img1.png
 ALT="$ \le$">50)</SPAN>, indicating the number of types of pie and ice cream, respectively. The next line will contain <SPAN CLASS="MATH"><I>P</I></SPAN> integers indicating the number of slices available for each of the pie types. The line after that will contain <SPAN CLASS="MATH"><I>I</I></SPAN> integers indicating the number of scoops available for each of the ice cream types. The total number of pie slices will always equal the total number of ice cream scoops available, and it is assumed that all pie slices and ice cream scoops will be used. 

<P>
Each problem instance will end with <SPAN CLASS="MATH"><I>P</I></SPAN> lines each containing <SPAN CLASS="MATH"><I>I</I></SPAN> floating point numbers indicating the profit for each pie/ice cream combination: the first value indicates the profit if a slice of pie type 0 is topped with a scoop of ice cream type 0; the next value indicates the profit if a slice of pie type 0 is topped with a scoop of ice cream type 1, and so on. A profit value of `<TT>-1</TT>' indicates that no combinations of that pie type and ice cream type should ever be sold. All other integers (number of slices for each type of pie and number of scoops for each type of ice cream) will be less than or equal to 100 and the profit on each one of the pie/ice cream combinations (other than `<TT>-1</TT>') will be larger than 0 and less than or equal to 10, with at most two digits after the decimal point. 

<P>
The last problem instance is followed by a line containing two zeroes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each problem instance, output the problem number (starting at 1) followed by the minimum and maximum profits, using the format shown in the sample output. Display all numbers with two fractional digits. All problem instances are guaranteed to have at least one solution using all of the pie slices and ice cream scoops.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 3 
40 50 
27 30 33 
1.11 1.27 0.70 
-1 2 0.34 
4 4 
10 10 10 10 
10 10 10 10 
1.01 -1 -1 -1 
-1 1.01 -1 -1 
-1 -1 1.01 -1 
-1 -1 -1 1.01 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Problem 1: 91.70 to 105.87 
Problem 2: 40.40 to 40.40
</PRE> 

<P>
<p>
<b>Claimer:</b>
The data used in this problem is unofficial data
prepared by Derek Kisman. So any mistake here does not
imply mistake in the offcial judge data. Only Derek
Kisman is responsible for the mistakes. Report
mistakes to dkisman@acm.org


______________________________________________________
3563||||||false||||||
<P>
You have been struck with inspiration, and are designing a beautiful new art sculpture for the foyer of your local museum. For highly important artistic reasons, you are designing it using very specific materials. However, you are not sure if physics is on your side. Will your sculpture actually stand up? 

<P>
The sculpture will be composed of various ball joints weighing 1 kilogram each, and various rods (of negligible weight) connecting the joints. Rods cannot be stretched or compressed, and they can never detach from a joint. However, they are free to rotate around the joints in any direction. The joints that lie on the ground are glued in place; all others are free to move. For simplicity, you may ignore the effects of intersections of rods; each rod exerts force only on the 2 joints connected to it. Also, any joint that is in the air will have at least one rod coming out that is not parallel to the ground. This prevents the degenerate case where a ball is supported only horizontally by a rigid structure. In real life, it would sag just a little. 

<P>
Write a program to determine whether your structure is static (that is, will not immediately move from the effects of gravity). Note that each rod can transmit an arbitrarily large tensional force along its length, and that ``being static" means that the tensional forces at each joint balance the weight of the joint. 

<P>
If the structure is static, you must also determine whether it is stable (that is, will not move if perturbed slightly by pulling its joints).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several sculpture descriptions. Every description begins with a line containing integers <SPAN CLASS="MATH"><I>J</I></SPAN> and <SPAN CLASS="MATH"><I>R</I></SPAN>, the number of joints and rods in the structure, respectively. Joints are numbered from 1 to <SPAN CLASS="MATH"><I>J</I></SPAN>. The description continues with <SPAN CLASS="MATH"><I>J</I></SPAN> lines, one per joint, each containing 3 floating point numbers giving the <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, <SPAN CLASS="MATH"><I>z</I></SPAN> coordinates of that joint. Following are <SPAN CLASS="MATH"><I>R</I></SPAN> lines, one per rod, with 2 distinct integers indicating the joints connected by that rod. 

<P>
Each rod is exactly the right length to connect its joints. The <SPAN CLASS="MATH"><I>z</I></SPAN> coordinates will always be non-negative; a <SPAN CLASS="MATH"><I>z</I></SPAN> coordinate of 0 indicates that the joint is on the ground and fixed in place. There are at most 100 joints and 100 rods. 

<P>
The last description is followed by a line containing two zeroes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each sculpture description, output `<TT>NON-STATIC</TT>', `<TT>UNSTABLE</TT>', or 
`<TT>STABLE</TT>', as shown in the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 3 
0 0 0 
-1.0 -0.5 1.0 
1.0 -0.5 1.0 
0 1.0 1.0 
1 2 
1 3 
1 4 
4 6 
0 0 0 
-1.0 -0.5 1.0 
1.0 -0.5 1.0 
0 1.0 1.0 
1 2 
1 3 
1 4 
2 3 
2 4 
3 4 
7 9 
0 0 0 
-1.0 -0.5 1.0 
1.0 -0.5 1.0 
0 1.0 1.0 
-1.0 -0.5 0 
1.0 0.5 0 
0 1.0 0 
1 2 
1 3 
1 4 
2 3 
2 4 
3 4 
2 5 
3 6 
4 7 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Sculpture 1: NON-STATIC 
Sculpture 2: UNSTABLE 
Sculpture 3: STABLE
</PRE> 

<P>
<p>
<b>Claimer:</b>
The data used in this problem is unofficial data
prepared by Derek Kisman. So any mistake here does not
imply mistake in the offcial judge data. Only Derek
Kisman is responsible for the mistakes. Report
mistakes to dkisman@acm.org


______________________________________________________
3564||||||false||||||
<P>The executive officers of the company where you work want to send each other encrypted messages. Rather than use off-the-shelf encryption software such as PGP, they have tasked the IT staff with handling the encryption problem. The IT staff decided on a solution that requires ``public" and ``private" integer keys. The idea is that everyone can see your public key, but only you know your private key.<P>Your best friend in the company is a wonderful person but a not-so-wonderful programmer. He has created a publicprivate key scheme as follows. A public key can be any positive integer. The corresponding private key is the smallest bipartite number that is greater than and a multiple of the public key.<P>A bipartite number is any positive integer that contains exactly 2 distinct decimal digits <SPAN CLASS="MATH"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> such that <SPAN CLASS="MATH"><I>s</I></SPAN> is not 0 and all occurrences of <SPAN CLASS="MATH"><I>s</I></SPAN> precede all occurrences of <SPAN CLASS="MATH"><I>t</I></SPAN>. For example 44444411 is bipartite (<SPAN CLASS="MATH"><I>s</I></SPAN> is 4 and <SPAN CLASS="MATH"><I>t</I></SPAN> is 1), So are 41, 10000000, and 5555556. However, neither 4444114 nor 44444 are bipartite.<P>Notice that the large bipartite number 88888888888800000 can be nicely described as 12 8's followed by 5 0's. You can express any bipartite number using four numbers: <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH"><I>s</I></SPAN> <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH"><I>t</I></SPAN>. The numbers <SPAN CLASS="MATH"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> are the leading and trailing digits as described above, <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of times the digit <SPAN CLASS="MATH"><I>s</I></SPAN> appears in the bipartite number, and <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of times the digit <SPAN CLASS="MATH"><I>t</I></SPAN> appears.<P>The trouble with your friend's scheme is that it is not too difficult to compute a private key if you know the public key. You need to convince your friend that his public-private key scheme is inadequate before he loses his job over his bad decision! You must write a program that takes public keys as input and displays the corresponding private keys.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. Each test case is on a separate line, and it consists of a single public key in the range <SPAN CLASS="MATH">1...99999</SPAN>.<P>The last case is followed by a line containing the integer zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, display a line consisting of the public key, a colon, then 4 integers <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH"><I>s</I></SPAN> <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH"><I>t</I></SPAN> where <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>s</I></SPAN>, and <SPAN CLASS="MATH"><I>t</I></SPAN> are as described above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
125 
17502 
2005 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
125: 1 5 2 0 
17502: 4 7 4 8 
2005: 3 2 3 5
</PRE><P><p><b>Claimer:</b> The data used in this problem is unofficial data prepared by Derek Kisman. So any mistake here does not imply mistake in the offcial judge data. Only Derek Kisman is responsible for the mistakes. Report mistakes to dkisman@acm.org 
______________________________________________________
3565||||||false||||||
<P>The aim of data compression is to reduce redundancy in stored or communicated data. This increases effective data density and speeds up data transfer rates. One possible method to compress any binary message is the following:<P><BLOCKQUOTE>Replace any maximal sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> 1's with the binary version of <SPAN CLASS="MATH"><I>n</I></SPAN> whenever it shortens the length of the message.</BLOCKQUOTE><P>For example, the compressed form of the data <SPAN CLASS="textbf">11111111</SPAN>00100<SPAN CLASS="textbf">111111111111111</SPAN>0011 becomes <SPAN CLASS="textbf">1000</SPAN>00100<SPAN CLASS="textbf">1111</SPAN>0011. The original data is 32 bits long while the compressed data is only 17 bits long.<P>The drawback of this method is that sometimes the decompression process yields more than one result for the original message, making it impossible to obtain the original message. Write a program that determines if the original message can be obtained from the compressed data when the length of the original message (<SPAN CLASS="MATH"><I>L</I></SPAN>), the number of 1's in the original message (<SPAN CLASS="MATH"><I>N</I></SPAN>) and the compressed data are given. The original message will be no longer than 16 Kbytes and the compressed data will be no longer than 40 bits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. Each test case has two lines. The first line contains <SPAN CLASS="MATH"><I>L</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN> and the second line contains the compressed data.<P>The last case is followed by a line containing two zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line containing the case number (starting with 1) and a message `<TT>YES</TT>', `<TT>NO</TT>' or `<TT>NOT UNIQUE</TT>'. `<TT>YES</TT>' means that the original message can be obtained. `<TT>NO</TT>' means that the compressed data has been corrupted and the original message cannot be obtained. `<TT>NOT UNIQUE</TT>' means that more than one message could have been the original message. Follow the format shown in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
32 26 
10000010011110011 
9 7 
1010101 
14 14 
111111 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: YES 
Case #2: NOT UNIQUE 
Case #3: NO
</PRE><P><p><b>Claimer:</b> The data used in this problem is unofficial data prepared by Derek Kisman. So any mistake here does not imply mistake in the offcial judge data. Only Derek Kisman is responsible for the mistakes. Report mistakes to dkisman@acm.org 
______________________________________________________
3566||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="455" HEIGHT="434" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3566.gif ALT="\epsfbox{p3566.eps}"></DIV><P>In Old Town Square in the city of Prague, there is a beautiful Astronomical Clock, constructed in the year 1410. For centuries, the clockmaker's art consisted of using gears to connect a shaft, turning at a known rate, to other shafts until, by the proper combination of gears, two shafts could be made to turn at the correct rates to represent minutes and hours.<P>You must write a program that, given an input shaft speed and a collection of gears, computes how the gears can be connected to create a clock with an hour hand and a minute hand. You may use as many shafts as you like, but each shaft may have a maximum of three gears. All the gears on a shaft turn at the same rate. If a gear having <SPAN CLASS="MATH"><I>T</I>1</SPAN> teeth turning at a rate <SPAN CLASS="MATH"><I>R</I>1</SPAN> is engaged with another gear having <SPAN CLASS="MATH"><I>T</I>2</SPAN> teeth, the turning rate of the second gear is <SPAN CLASS="MATH">- <I>R</I>1(<I>T</I>1/<I>T</I>2)</SPAN>. Your solution must include two shafts, a minute shaft that turns clockwise at the rate of one revolution per hour, and an hour shaft that turns clockwise at the rate of one revolution per twelve hours. Your solution is not required to use all the available gears.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several trials, each described by one line of input. Each input line begins with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3566.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3566.gif ALT="$ \le$">6)</SPAN>, the number of gears available for building a clock. <SPAN CLASS="MATH"><I>N</I></SPAN> is followed by another integer <SPAN CLASS="MATH"><I>R</I></SPAN> <SPAN CLASS="MATH">(- 3600<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3566.gif ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3566.gif ALT="$ \le$">3600, <I>R</I> <IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3566.gif ALT="$ \neq$"> 0)</SPAN>, the turning rate of the input shaft, which is the number of revolutions made by the shaft in 24 hours. (A positive number represents clockwise rotation, and a negative number represents counter-clockwise rotation.) <SPAN CLASS="MATH"><I>R</I></SPAN> is followed by <SPAN CLASS="MATH"><I>N</I></SPAN> gear descriptions. Each gear description is a pair: a one-character name that identifies the gear, followed by an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <SPAN CLASS="MATH">(6<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3566.gif ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3566.gif ALT="$ \le$">120)</SPAN>, that is the number of teeth on the gear. The names and numbers on each input line are separated by spaces, as shown in the sample input.<P>The last trial is followed by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each trial, print a line containing the trial number, as shown in the sample output. If it is possible to construct a clock using the given set of gears, the line containing the trial number must be followed by two more output lines, one for the minute hand and one for the hour hand. Otherwise, the line containing the trial number must end with the words `<TT>IS IMPOSSIBLE</TT>' as shown in the sample output.<P>The line for the minute hand starts with `<TT>Minutes:</TT>' followed by a plan that shows how the input shaft is connected by a sequence of gears to the minute shaft. The plan consists of a sequence of shafts, separated by hyphens. Each shaft is represented by one or two characters. The first character is the name of the driven gear --- the gear on the shaft that is engaged with a gear on the previous shaft. For the input shaft, use an asterisk (<TT>*</TT>) to represent the absence of a driven gear. The second character describing a shaft is the name of the driving gear --- the gear on the shaft that is engaged with a gear on the next shaft. The driven gear and the driving gear can be the same gear, in which case the shaft is described by a single character which is the name of this gear. The last shaft in the plan is the minute shaft, described by a single letter which is the name of its driven gear.<P>The line for the hour hand starts with `<TT>Hours:</TT>' followed by a plan for connecting the input shaft to the hour shaft. Use the same format as the minute plan.<P>Each gear may occur only once in the clock. The minute plan and the hour plan may have an initial part in common, however. A gear in a common initial part will occur both in the minute plan and the hour plan. For the same reason, a given shaft can be used in both the hour plan and the minute plan. If a shaft is used in both plans, it may or may not have the same description in both plans. For example, a shaft containing a single gear named A will be represented as A in both plans. On the other hand, a shaft containing three gears named A, B, and C might be represented as AB in the minute plan (if B is the driving gear in that plan) and as AC in the hour plan (if C is the driving gear in that plan).<P>The following lines represent valid output lines:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=JUSTIFY WIDTH="5"><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Hours:</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>*A-BC-D</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">An input shaft having one gear, engaged with an intermediate shaft having two gears, engaged with an hour shaft having one gear.</TD></TR><TR><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Minutes:</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>*A-B-C</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">An input shaft having one gear, engaged with an intermediate shaft having one gear, engaged with a minute shaft having one gear.</TD></TR><TR><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Minutes:</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>*</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="360">A plan in which no gears are needed because the input shaft is turning at the correct rate for the minute shaft. </TD></TR></TABLE></DIV><P><P><BR>If there are multiple ways to build a clock using the given gears, print the solution that uses the minimum number of shafts. In case of a tie for the minimum number of shafts, print the solution that uses the minimum number of gears. In case of a tie for both the minimum numbers of shafts and gears, print the solution whose string description is alphabetically first. The string description of a solution is its minute plan, followed by its hour plan, concatenated together with asterisks and hyphens removed. For example, a solution in which the minute plan is `<TT>*A-B</TT>' and the hour plan is `<TT>*A-BC-D-E</TT>' has the string description `<TT>ABABCDE</TT>'.<P>Print one blank line between trials.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 40 P 7 Q 84 R 50 A 40 B 30 C 14 
6 40 P 7 Q 84 R 45 A 40 B 30 C 14 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Trial 1 
Minutes: *B-A-R  
Hours:   *B-A-RP-C-Q

Trial 2 IS IMPOSSIBLE
</PRE><P><p><b>Claimer:</b> The data used in this problem is unofficial data prepared by Derek Kisman. So any mistake here does not imply mistake in the offcial judge data. Only Derek Kisman is responsible for the mistakes. Report mistakes to dkisman@acm.org 
______________________________________________________
3567||||||false||||||
<P>Jack is making a long distance walk with some friends along the old pilgrim road from V&#233;zelay to Santiago de Compostela. Jack administers money for the group. His administration is quite simple. Whenever an amount (&euro; 60, say) has to be paid for the common good he will pay it, and write in his booklet: <TT>PAY 60</TT>.<P>When needed, Jack will ask every member of the group, including himself, to pay an amount (&euro; 50, say) to the collective purse, and write in his booklet: <TT>COLLECT 50</TT>. If the group size is 7, he collects &euro; 350 in total.<P>Unfortunately some of the group members cannot participate in the full walk. So sometimes the group will grow, sometimes it will shrink. How does Jack handle these comings and goings of group members in terms of collective money? Suppose, for example, the group size is 7, and that Jack has &euro; 140 in cash, which is &euro; 20 for every group member. If two group members leave, each will receive &euro; 20, and Jack will write in his booklet: <TT>OUT 2</TT>. If under the same circumstances three new group members arrive, they will each have to pay &euro; 20, and Jack will write: <TT>IN 3</TT>.<P>In these cases the amount in cash could easily be divided, without fractions. As a strange coincidence, this happened during the whole trip. Jack never had to make calculations with fractional numbers of euros.<P>Near the end of the trip, Jack was joined by all his fellow travelers. Nobody was willing to miss the glorious finale of the trip. It was then that Jack tried to remember what the group size had been during each part of the trip. He could not remember.<P>Given a page of Jack's booklet, could you figure out the size of the group at the beginning of that page?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. Each test case is a sequence of lines in Jack's booklet. The first line of each test case will give the number <SPAN CLASS="MATH"><I>N</I></SPAN> <!-- MATH
 $(0 < N \le 50)$
 --><SPAN CLASS="MATH">(0 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3567img1.png ALT="$ \le$">50)</SPAN> of lines to follow. The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines have the format: <SPAN CLASS="MATH">&lt; <I>keyword</I> &gt;</SPAN> <SPAN CLASS="MATH">&lt; <I>num</I> &gt;</SPAN>, where<P><P><BR><SPAN CLASS="MATH">&lt; <I>keyword</I> &gt;</SPAN> = <TT>PAY <SPAN CLASS="MATH">|</SPAN> COLLECT <SPAN CLASS="MATH">|</SPAN> IN <SPAN CLASS="MATH">|</SPAN> OUT</TT><P><P><BR>and <SPAN CLASS="MATH">&lt; <I>num</I> &gt;</SPAN> is a positive integer, with the following restrictions:<P><P><BR><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>IN</TT> <SPAN CLASS="MATH"><I>k</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3567img1.png ALT="$ \le$">20</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>OUT</TT> <SPAN CLASS="MATH"><I>k</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3567img1.png ALT="$ \le$">20</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>COLLECT</TT> <SPAN CLASS="MATH"><I>k</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3567img1.png ALT="$ \le$">200</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>PAY</TT> <SPAN CLASS="MATH"><I>k</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3567img1.png ALT="$ \le$">2000</SPAN></TD></TR></TABLE><P><P><BR>The last case is followed by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a single line describing the size of the group at the beginning of the part of the trip described in the test case. This line contains:<P><UL><LI>The word `<TT>IMPOSSIBLE</TT>', if the data are inconsistent. </LI><LI>A single number giving the size of the group just prior to the sequence of lines in Jack's booklet, if this size is uniquely determined by the data. </LI><LI>Several numbers, in increasing order, separated by spaces, giving the possible sizes of the group, in case the number of solutions is finite, but the solution is not unique. </LI><LI>A statement in the format: `<TT>SIZE &gt;= <SPAN CLASS="MATH"><I>N</I></SPAN></TT>', giving a lower bound for the size of the group, in case the number of solutions is infinite. Observe that the inequality <TT>SIZE &gt;= <SPAN CLASS="MATH">1</SPAN></TT> always applies, since at least Jack himself did the whole trip. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
IN 1 
PAY 7 
IN 1 
PAY 7 
IN 1 
7 
IN 1 
COLLECT 20 
PAY 30 
PAY 12 
IN 2 
PAY 30 
OUT 3 
3 
IN 1 
PAY 8 
OUT 3 
1 
OUT 5 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
IMPOSSIBLE 
2 
3 7 
SIZE &gt;= 6
</PRE><P><p><b>Claimer:</b> The data used in this problem is unofficial data prepared by Derek Kisman. So any mistake here does not imply mistake in the offcial judge data. Only Derek Kisman is responsible for the mistakes. Report mistakes to dkisman@acm.org 
______________________________________________________
3568||||||false||||||
<P>Origami, or the art of paper folding, often makes use of ``pockets" of paper, particularly in complicated models made from multiple pieces of paper where a tab on one piece of paper needs to fit into a pocket in another piece of paper. In this problem you must count pockets in a flat folded square of paper. A pocket is defined as any opening (lying between two surfaces of paper) that is accessible from the boundary of the folded piece of paper. Note that one accessible opening can account for several pockets since each open side contributes one pocket. Figure 1 shows an example. Observe that the ``middle" opening (between the second and third layers of paper) contributes 3 to the total pocket count.<P><DIV ALIGN="CENTER"><IMG WIDTH="902" HEIGHT="265" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3568a.gif ALT="\epsfbox{p3568a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: Pockets</DIV><P>Assume the paper is initially lying on a flat surface and is never completely lifted from the surface. All folds will be horizontal or vertical. Fold lines will fall only along equally-spaced crease lines, <SPAN CLASS="MATH"><I>N</I></SPAN> in each direction. On the original unfolded square, creases and edges are numbered from top to bottom and from left to right as shown in Figure 2. Each fold reduces the boundary of the folded piece of paper to a smaller rectangle; the final fold results in a square one unit in each direction. Folds are described using a crease line and a direction. For instance, `<TT>2 U</TT>' means to fold the bottom edge up using horizontal crease 2; `<TT>1 L</TT>' means to fold the right edge to the left using crease 1. (See Figure 2.) After several folds, creases may be aligned (for instance, creases 1 and 3 in Figure 2). Either number may be used to specify a fold along that line (so, in Figure 2, `<TT>1 D</TT>' and `<TT>3 D</TT>' are equivalent instructions after the first fold). Pockets are to be counted for the boundary of the final one-unit square. Once a crease is made it cannot be undone. All creases go through every layer of paper from top to bottom; disregard paper thickness.<P><DIV ALIGN="CENTER"><IMG WIDTH="969" HEIGHT="320" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3568a.gif ALT="\epsfbox{p3568b.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input is a sequence of test cases. Each test case begins with a line containing two integers, <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN>. <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of horizontal crease lines (the same as the number of vertical crease lines) of the square. Creases are numbered <SPAN CLASS="MATH">1, 2,..., <I>N</I></SPAN> from top to bottom and from left to right. <SPAN CLASS="MATH"><I>K</I></SPAN> is the number of folds to be made. <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN> are each less than or equal to 64.<P>Following <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN> are <SPAN CLASS="MATH"><I>K</I></SPAN> fold descriptions. Each fold description consists of an integer crease number <SPAN CLASS="MATH"><I>C</I></SPAN> and a direction, either <TT>U</TT>, <TT>D</TT>, <TT>L</TT>, or <TT>R</TT> (for up, down, left or right) separated by whitespace. Whitespace also precedes and follows each fold description.<P>The final result for each test case will be a square one unit in size.<P>The final test case is followed by a line containing two zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number followed by the number of pockets in the final one-unit square. Use the format shown in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 2 
1 R 1 U 
3 5 
2 U 1 L 
  3   D 
3 R 2 L 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 7 pockets 
Case 2: 17 pockets
</PRE><P><p><b>Claimer:</b> The data used in this problem is unofficial data prepared by Derek Kisman. So any mistake here does not imply mistake in the offcial judge data. Only Derek Kisman is responsible for the mistakes. Report mistakes to dkisman@acm.org 
______________________________________________________
3569||||||false||||||
<P>In our increasingly interconnected world, it has been speculated that everyone on Earth is related to everyone else by no more than six degrees of separation. In this problem, you must write a program to find the maximum degree of separation for a network of people.<P>For any two people, the degree of separation is the minimum number of relationships that must be traversed to connect the two people. For a network, the maximum degree of separation is the largest degree of separation between any two people in the network. If there is a pair of people in the network who are not connected by a chain of relationships, the network is disconnected.<P>As shown below, a network can be described as a set of symmetric relationships each of which connects two people. A line represents a relationship between two people. Network A illustrates a network with 2 as the maximum degree of separation. Network B is disconnected.<P><DIV ALIGN="CENTER"><IMG WIDTH="827" HEIGHT="237" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3569.gif ALT="\epsfbox{p3569.eps}"> Network A: Max. degree of separation = 2 Network B: Disconnected</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of data sets that describe networks of people. For each data set, the first line has two integers: <SPAN CLASS="MATH"><I>P</I></SPAN> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3569.gif ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3569.gif ALT="$ \le$">50)</SPAN>, the number of people in the network, and <SPAN CLASS="MATH"><I>R</I></SPAN> <SPAN CLASS="MATH">(<I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3569.gif ALT="$ \ge$">1)</SPAN>, the number of network relationships. Following that first line are <SPAN CLASS="MATH"><I>R</I></SPAN> relationships. Each relationship consists of two strings that are names of people in the network who are related. Names are unique and contain no blank spaces. Because a person may be related to more than one other person, a name may appear multiple times in a data set.<P>The final test case is followed by a line containing two zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each network, display the network number followed by the maximum degree of separation. If the network is disconnected, display `<TT>DISCONNECTED</TT>'. Display a blank line after the output for each network. Use the format illustrated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4  4 
Ashok  Kiyoshi   Ursala  Chun   Ursala  Kiyoshi 
Kiyoshi  Chun 
4  2 
Ashok  Chun   Ursala  Kiyoshi 
6 5 
Bubba  Cooter   Ashok  Kiyoshi   Ursala  Chun 
Ursala  Kiyoshi   Kiyoshi  Chun 
0  0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Network 1: 2 

Network 2: DISCONNECTED 

Network 3: DISCONNECTED
</PRE><P><p><b>Claimer:</b> The data used in this problem is unofficial data prepared by Derek Kisman. So any mistake here does not imply mistake in the offcial judge data. Only Derek Kisman is responsible for the mistakes. Report mistakes to dkisman@acm.org 
______________________________________________________
3570||||||false||||||
<P>As more and more transactions between companies and people are being carried out electronically over the Internet, secure communications have become an important concern. The Internet Cryptographic Protocol Company (ICPC) specializes in secure business-to-business transactions carried out over a network. The system developed by ICPC is peculiar in the way it is deployed in the network.<P>A network like the Internet can be modeled as a directed graph: nodes represent machines or routers, and edges correspond to direct connections, where data can be transmitted along the direction of an edge. For two nodes to communicate, they have to transmit their data along directed paths from the first node to the second, and from the second node to the first.<P><DIV ALIGN="CENTER"><IMG WIDTH="1166" HEIGHT="764" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3570.gif ALT="\epsfbox{p3570.eps}"></DIV><P>To perform a secure transaction, ICPC's system requires the installation of their software not only on the two endnodes that want to communicate, but also on all intermediate nodes on the two paths connecting the end-nodes. Since ICPC charges customers according to how many copies of their software have to be installed, it would be interesting to have a program that for any network and end-node pair finds the cheapest way to connect the nodes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several descriptions of networks. The first line of each description contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3570.gif ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3570.gif ALT="$ \le$">100)</SPAN>, the number of nodes and edges in the network, respectively. The nodes in the network are labeled <SPAN CLASS="MATH">1, 2,..., <I>N</I></SPAN>, where nodes 1 and 2 are the ones that want to communicate. The first line of the description is followed by <SPAN CLASS="MATH"><I>M</I></SPAN> lines containing two integers <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3570.gif ALT="$ \le$"><I>X</I>, <I>Y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3570.gif ALT="$ \le$"><I>N</I>)</SPAN>, denoting that there is a directed edge from <SPAN CLASS="MATH"><I>X</I></SPAN> to <SPAN CLASS="MATH"><I>Y</I></SPAN> in the network.<P>The last description is followed by a line containing two zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each network description in the input, display its number in the sequence of descriptions. Then display the minimum number of nodes on which the software has to be installed, such that there is a directed path from node 1 to node 2 using only the nodes with the software, and also a path from node 2 to node 1 with the same property. (Note that a node can be on both paths but a path need not contain all the nodes.) The count should include nodes 1 and 2.<P>If node 1 and 2 cannot communicate, display `<TT>Impossible</TT>' instead.<P>Follow the format in the sample given below, and display a blank line after each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 12
1 3 
3 4 
4 2 
2 5 
5 6 
6 1 
1 7 
7 1 
8 7 
7 8 
8 2 
2 8 

2 1 
1 2 

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Network 1 
Minimum number of nodes = 4 

Network 2 
Impossible
</PRE><p><p><b>Claimer:</b> The data used in this problem is unofficial data prepared by Shahriar Manzoor. So any mistake here does not imply mistake in the offcial judge data. Only Shahriar Manzoor is responsible for the mistakes. Report mistakes to Shahriar_manzoor@yahoo.com 
______________________________________________________
3571||||||false||||||
<P>A lattice point <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> in the first quadrant (<SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are integers greater than or equal to 0), other than the origin, is <SPAN CLASS="textit">visible</SPAN> from the origin if the line from (0, 0) to <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> does not pass through any other lattice point. For example, the point (4, 2) is not visible since the line from the origin passes through (2, 1). The figure below shows the points <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> with <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3571img1.png ALT="$ \le$"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3571img1.png ALT="$ \le$">5</SPAN> with lines from the origin to the visible points.<P><DIV ALIGN="CENTER"><IMG WIDTH="352" HEIGHT="340" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3571img1.png ALT="\epsfbox{p3571.eps}"></DIV><P>Write a program which, given a value for the size, <SPAN CLASS="MATH"><I>N</I></SPAN>, computes the number of visible points <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> with <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3571img1.png ALT="$ \le$"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3571img1.png ALT="$ \le$"><I>N</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>C</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3571img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3571img1.png ALT="$ \le$">1000)</SPAN> which is the number of datasets that follow.<P>Each dataset consists of a single line of input containing a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3571img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3571img1.png ALT="$ \le$">1000)</SPAN>, which is the size.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, there is to be one line of output consisting of: the dataset number starting at 1, a single space, the size, a single space and the number of visible points for that size.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
2
4
5
231
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 5
2 4 13
3 5 21
4 231 32549
</PRE><P>
______________________________________________________
3572||||||false||||||
<P>
A ``queen" piece on a triangular array of cells, <SPAN CLASS="MATH"><I>N</I></SPAN> cells on a side, can attack any cell on a file parallel to one of the sides containing the queen's cell.  For example, in the array in Figure 1, a queen on the black cell, attacks all of the shaded cells.  The Triangular N-Queens Problem of size <SPAN CLASS="MATH"><I>N</I></SPAN>, is to find a maximal set of queen positions in a triangular array with <SPAN CLASS="MATH"><I>N</I></SPAN> cells on a side so that no queen is attacking any other queen. For example, the black cells in Figure 2 give a maximal set of queen positions in a size 6 array.  It turns out that a size <SPAN CLASS="MATH"><I>N</I></SPAN> array always has  <!-- MATH
 $floor((2 \ast N + 1)/3)$
 -->
<SPAN CLASS="MATH"><I>floor</I>((2 <TT>*</TT> <I>N</I> + 1)/3)</SPAN> as the maximal number of non-attacking queen positions.

<P>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p3572.eps}$
 -->
<IMG
 WIDTH="870" HEIGHT="399" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3572img1.png
 ALT="\epsfbox{p3572.eps}">
</DIV>

<P>
Write a program, which, given the size, <SPAN CLASS="MATH"><I>N</I></SPAN>, of the triangular array, finds a maximal set of non-attacking queen positions on the array <!-- MATH
 $(floor((2 \ast N + 1)/3)$
 -->
<SPAN CLASS="MATH">(<I>floor</I>((2 <TT>*</TT> <I>N</I> + 1)/3)</SPAN> of them).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input begins with a line containing an integer value specifying the number of datasets that follow, <SPAN CLASS="MATH"><I>C</I></SPAN>, <!-- MATH
 $(1 \le C \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3572img1.png
 ALT="$ \le$"><I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3572img1.png
 ALT="$ \le$">1000)</SPAN>. Each dataset consists of a single line containing a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $(1 \le N \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3572img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3572img1.png
 ALT="$ \le$">1000)</SPAN>, which is the size of the triangular array.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The first output line for each problem gives the problem number starting at 1, a single space, the input size, a single space and the number of queen positions.  Following the first line will be the queen positions, 8 positions per line except perhaps for the last line of positions.  Each position has the format open bracket (`<TT>[</TT>'), row number starting with 1, a comma, the position from the left within the row starting at 1 and a close bracket (`<TT>]</TT>'). Positions within a line are separated by a single space.  For example, the queen positions in Figure 2 are <TT>[1,1] [4,2] [5,4] [6,3]</TT>.  The lines of position values are followed by a single blank line.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Notes</SPAN>

<OL>
<LI>There may be many different correct answers to a  particular problem, so your answers need not be the same as those in the <SPAN  CLASS="textbf">Sample Output</SPAN> below.
</LI>
<LI>Some solution methods for this problem may cause the time limit to be exceeded.  Be sure to try the larger values before submitting your solution.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6
3
6
9
10
14
18
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 3 2
[1,1] [3,2] 

2 6 4
[3,1] [4,3] [5,5] [6,2] 

3 9 6
[4,1] [5,3] [6,5] [7,7] [8,2] [9,4] 

4 10 7
[4,1] [5,3] [6,5] [7,7] [8,2] [9,4] [10,6] 

5 14 9
[6,1] [7,3] [8,5] [9,7] [10,9] [11,11] [12,2] [13,4]
[14,6] 

6 18 12
[7,1] [8,3] [9,5] [10,7] [11,9] [12,11] [13,13] [14,2]
[15,4] [16,6] [17,8] [18,10]

</PRE> 

<P>

______________________________________________________
3573||||||false||||||
<P>Every positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> can be written in at least one way as a sum of terms of the form <SPAN CLASS="MATH">(2<SUP>a</SUP>)(3<SUP>b</SUP>)</SPAN> where no term in the sum exactly divides any other term in the sum. For example:<P><TT>1 = (2<SPAN CLASS="MATH"><SUP>0</SUP></SPAN>)(3<SPAN CLASS="MATH"><SUP>0</SUP></SPAN>)</TT><P><TT>7 = (2<SPAN CLASS="MATH"><SUP>2</SUP></SPAN>)(3<SPAN CLASS="MATH"><SUP>0</SUP></SPAN>) + (2<SPAN CLASS="MATH"><SUP>0</SUP></SPAN>)(3<SPAN CLASS="MATH"><SUP>1</SUP></SPAN>)</TT><P><TT>31 = (2<SPAN CLASS="MATH"><SUP>4</SUP></SPAN>)(3<SPAN CLASS="MATH"><SUP>0</SUP></SPAN>) + (2<SPAN CLASS="MATH"><SUP>0</SUP></SPAN>)(3<SPAN CLASS="MATH"><SUP>2</SUP></SPAN>) + (2<SPAN CLASS="MATH"><SUP>1</SUP></SPAN>)(3<SPAN CLASS="MATH"><SUP>1</SUP></SPAN>) = (2<SPAN CLASS="MATH"><SUP>2</SUP></SPAN>) + (3<SPAN CLASS="MATH"><SUP>3</SUP></SPAN>)</TT><P>Note from the example of 31 that the representation is not unique.<P>Write a program which takes as input a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> and outputs a representation of <SPAN CLASS="MATH"><I>N</I></SPAN> as a sum of terms of the form <SPAN CLASS="MATH">(2<SUP>a</SUP>)(3<SUP>b</SUP>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>C</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3573img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3573img1.png ALT="$ \le$">1000)</SPAN> which is the number of datasets that follow.<P>Each dataset consists of a single line of input containing a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $(1 \le N < 2^{31})$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3573img1.png ALT="$ \le$"><I>N</I> &lt; 2<SUP>31</SUP>)</SPAN>, which is the number to be represented as a sum of terms of the form <SPAN CLASS="MATH">(2<SUP>a</SUP>)(3<SUP>b</SUP>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, the output will be a single line consisting of: The dataset number, a single space, the number of terms in your sum as a decimal integer followed by a single space followed by representations of the terms in the form <TT>[<!-- MATH
 $<2 \ exponent>$
 --> <SPAN CLASS="MATH">&lt; 2&nbsp;<I>exponent</I> &gt;</SPAN>,<!-- MATH
 $<3 \ exponent>$
 --> <SPAN CLASS="MATH">&lt; 3&nbsp;<I>exponent</I> &gt;</SPAN>]</TT> with terms separated by a single space. <TT><!-- MATH
 $<2 \ exponent>$
 --><SPAN CLASS="MATH">&lt; 2&nbsp;<I>exponent</I> &gt;</SPAN></TT> is the power of 2 in the term and <TT><!-- MATH
 $<3 \ exponent>$
 --><SPAN CLASS="MATH">&lt; 3&nbsp;<I>exponent</I> &gt;</SPAN></TT> is the power of 3 in the term.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
1
7
31
7776
531441
123456789
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1 [0,0]
2 2 [2,0] [0,1]
3 3 [4,0] [0,2] [1,1]
4 1 [5,5]
5 1 [0,12]
6 8 [3,13] [4,12] [2,15] [7,8] [9,6] [0,16] [10,5] [15,2]
</PRE><P>
______________________________________________________
3574||||||false||||||
<P>One of the more popular activities in San Antonio is to enjoy margaritas in the park along the river know as the <SPAN CLASS="textit">River Walk</SPAN>. Margaritas may be purchased at many establishments along the River Walk from fancy hotels to <SPAN CLASS="textit">Joe's Taco and Margarita stand</SPAN>. (The problem is not to find out how Joe got a liquor license. That involves Texas politics and thus is much too difficult for an ACM contest problem.) The prices of the margaritas vary depending on the amount and quality of the ingredients and the ambience of the establishment. You have allocated a certain amount of money to sampling different margaritas.<P>Given the price of a single margarita (including applicable taxes and gratuities) at each of the various establishments and the amount allocated to sampling the margaritas, find out how many different maximal combinations, choosing at most one margarita from each establishment, you can purchase. A valid combination must have a total price no more than the allocated amount and the unused amount (<SPAN CLASS="textit">allocated amount - total price</SPAN>) must be less than the price of any establishment that was not selected. (Otherwise you could add that establishment to the combination.)<P>For example, suppose you have $25 to spend and the prices (whole dollar amounts) are:<P><DIV ALIGN="CENTER"><TABLE COLS=7 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Vendor</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>H</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>J</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Price</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>16</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR></TBODY></TABLE></DIV><P>Then possible combinations (with their prices) are:<P><P><BR>ABC(25), ABD(24), ABJ(22), ACD(23), ACJ(21), ADJ( 20), AH(24), BCD(24), BCJ(22), BDJ(21), BH(25), CDJ(20), CH(24), DH(23) and HJ(21).<P><P><BR>Thus the total number of combinations is 15.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input begins with a line containing an integer value specifying the number of datasets that follow, <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3574img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3574img1.png ALT="$ \le$">1000)</SPAN>. Each dataset starts with a line containing two integer values <SPAN CLASS="MATH"><I>V</I></SPAN> and <SPAN CLASS="MATH"><I>D</I></SPAN> representing the number of vendors <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3574img1.png ALT="$ \le$"><I>V</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3574img1.png ALT="$ \le$">30)</SPAN> and the dollar amount to spend <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3574img1.png ALT="$ \le$"><I>D</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3574img1.png ALT="$ \le$">1000)</SPAN> respectively. The two values will be separated by one or more spaces. The remainder of each dataset consists of one or more lines, each containing one or more integer values representing the cost of a margarita for each vendor. There will be a total of <SPAN CLASS="MATH"><I>V</I></SPAN> cost values specified. The cost of a margarita is always at least one (1). Input values will be chosen so the result will fit in a 32 bit unsigned integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, the output will be a single line containing the dataset number, followed by a single space and then the number of combinations for that problem instance.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> Some solution methods for this problem may be exponential in the number of vendors. For these methods, the time limit may be exceeded on problem instances with a large number of vendors such as the second example below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
6 25
8 9 8 7 16 5
30 250
1 2 3 4 5 6 7 8 9 10 11
12 13 14 15 16 17 18 19 20
21 22 23 24 25 26 27 28 29 30
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 15
2 16509438

______________________________________________________
3575||||||false||||||
<P>Bridge is a very complicated card game, and the bidding part is particularly difficult to master. The bidding is made even more difficult because players use different bidding conventions (meanings assigned to bids). In this problem, you are asked to write a program that suggests the first bid that should be made. The bidding conventions described below are simplified from those used by a certain person who shall remain nameless.<P>A bridge hand consists of 13 cards. Each card has a suit (spades, hearts, diamonds, or clubs) and a rank (A, K, Q, J, T, 9, 8, 7, 6, 5, 4, 3, 2). Here, the letter T denotes the card whose rank is 10. Before making a bid, an experienced bridge player studies the number of high card points (hcp) in the hand, as well as the distribution (the number of cards in each suit). The hcp contributed by each card is completely determined by its rank as follows:<P><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">Rank</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">hcp</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>K</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Q</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>J</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>others</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY></TABLE></DIV><P>For example, if the hand is:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 RULES=GROUPS><COL ALIGN=RIGHT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>Spades: </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>A, 2</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>Hearts:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>K, J, T, 9, 2</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>Diamonds:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>Clubs:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>K, Q, 7, 4, 3</TD></TR></TABLE></DIV><P><P><BR>Then this hand has 13 hcp and a distribution of 5-5-2-1 (the distribution is usually listed in non-increasing order). A balanced distribution is any one of 4-3-3-3, 4-4-3-2, and 5-3-3-2.<P>In bridge, an opening bid is either ``pass" or consists of a level (1-7) and a trump suit. The trump suits are no trump, spades, hearts, diamonds, clubs ranked in decreasing order. Once a hand has been evaluated, the player applies the following list of (simplified) rules to determine the appropriate opening bid. In cases where multiple rules apply, the first one that applies should be used. An ``x" in a distribution can be substituted with any non-negative number. Multiple ``x"s in a distribution are not necessarily the same.<P><OL><LI>With at least 10 hcp and a <SPAN CLASS="MATH"><I>y</I> - <I>x</I> - <I>x</I> - <I>x</I></SPAN> distribution (<SPAN CLASS="MATH"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3575img1.png ALT="$ \ge$">8</SPAN>), bid the suit with y cards at the 4 level. This is known as a preemptive bid. </LI><LI>With 10-13 hcp and a <SPAN CLASS="MATH">7 - <I>x</I> - <I>x</I> - <I>x</I></SPAN> distribution, bid the suit with 7 cards at the 3-level. This is known as a preemptive bid. </LI><LI>With 8-9 hcp and a <SPAN CLASS="MATH"><I>y</I> - <I>x</I> - <I>x</I> - <I>x</I></SPAN> distribution (<SPAN CLASS="MATH"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3575img1.png ALT="$ \ge$">7</SPAN>), bid the suit with y cards at the 2-level if the y-card suit is Spades or Hearts. This is known as a ``weak-two" bid. </LI><LI>With 8-11 hcp and a <SPAN CLASS="MATH">6 - <I>x</I> - <I>x</I> - <I>x</I></SPAN> distribution, in which Spades or Hearts is one of the 6-card suits, bid the higher rank suit at the 2 level. This is known as a ``weak-two" bid. </LI><LI>With 11-15 hcp, a distribution of 4-4-4-1 or 5-4-4-0, and at least 4 spades, bid Diamonds at the 2 level. This is called the ``Mini Roman Convention". </LI><LI>With 15-17 hcp and a balanced distribution, bid No Trump at the 1 level provided that at least 3 suits are ``stopped." A suit is considered stopped if the suit contains at least one of the following:<UL><LI>an A; </LI><LI>a K and one other; </LI><LI>a Q and two others; or </LI><LI>a J and three others; </LI></UL></LI><LI>With 20-22 hcp and a balanced distribution, bid No Trump at the 2 level. </LI><LI>With at least 22 hcp, bid Clubs at the 2 level. </LI><LI>With 13-16 hcp:<OL><LI>If there is a 5-card or longer suit in Spades or Hearts, bid it at the 1 level. If both bids are possible, bid the longer suit. If both suits have the same length, bid the higher ranking suit. </LI><LI>Without a 5-card suit in Spades or Hearts, bid the longer of Diamonds or Clubs at the 1 level (whichever one has the most number of cards) . If there is a tie, bid the higher ranking suit. </LI></OL></LI><LI>With at least 17 hcp, bid the longest suit at the 1 level. If there is a tie, bid the lowest ranking suit. This is known as a ``reverse". </LI><LI>If none of the rules above is applicable, bid Pass. </LI></OL><P>In the example above, rule 9a applies and a bid of 1 Hearts should be made.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of cases. The bridge hand for each case is specified on one line, with a single space separating each of  the 13 cards in the hand. Each card is given as a two-character string. The first letter is the suit (S, H, D, C) and the second character is the rank (A, K, Q, J, T, 9, 8, 7, 6, 5, 4, 3, 2). The end of input is terminated by end-of-file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print the hand number (starting from 1), followed by a colon and a space, and then the suggested bid on a single line (see below for the exact format). Each bid is either ``<TT>Pass</TT>" or a level and a suit (``<TT>No Trump</TT>", ``<TT>Spades</TT>", ``<TT>Hearts</TT>", ``<TT>Diamonds</TT>", ``<TT>Clubs</TT>") separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
SA S2 HK HJ HT H9 H2 D3 CK CQ C7 C4 C3
SK SQ HT H8 H4 CA CQ CT C5 DK DQ DJ D8
SA SK SQ S3 S2 HT D7 D9 CA CK CQ C7 C5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Hand #1: 1 Hearts
Hand #2: 1 No Trump
Hand #3: 1 Clubs
</PRE><P>
______________________________________________________
3576||||||false||||||
<P>You are given <SPAN CLASS="MATH"><I>N</I></SPAN> baskets of gold coins. The baskets are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>. In all except one of the baskets, each gold coin weighs <SPAN CLASS="MATH"><I>w</I></SPAN> grams. In the one exceptional basket, each gold coin weighs <SPAN CLASS="MATH"><I>w</I> - <I>d</I></SPAN> grams. A wizard appears on the scene and takes 1 coin from Basket 1, 2 coins from Basket 2, and so on, up to and including <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> coins from Basket <SPAN CLASS="MATH"><I>N</I> - 1</SPAN>. He does not take any coins from Basket <SPAN CLASS="MATH"><I>N</I></SPAN>. He weighs the selected coins and concludes which of the <SPAN CLASS="MATH"><I>N</I></SPAN> baskets contains the lighter coins. Your mission is to emulate the wizard's computation.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of one or more lines; each line will contain data for one instance of the problem. More specifically, each line will contain four positive integers, separated by one blank space. The first three integers are, respectively, the numbers <SPAN CLASS="MATH"><I>N</I>, <I>w</I></SPAN>, and <SPAN CLASS="MATH"><I>d</I></SPAN>, as described above. The fourth integer is the result of weighing the selected coins.<P><SPAN CLASS="MATH"><I>N</I></SPAN> will be at least 2 and not more than 8000. The value of <SPAN CLASS="MATH"><I>w</I></SPAN> will be at most 30. The value of <SPAN CLASS="MATH"><I>d</I></SPAN> will be less than <SPAN CLASS="MATH"><I>w</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each instance of the problem, your program will produce one line of output, consisting of one positive integer: the number of the basket that contains lighter coins than the other baskets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
10 25 8 1109
10 25 8 1045
8000 30 12 959879400
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
2
10
50
</PRE><P>
______________________________________________________
3577||||||false||||||
<P>A toothpick expression uses toothpicks to represent a positive integer. The expression consists of operands and operators.<P>Each operand consists of one or more vertical toothpicks (``<SPAN CLASS="MATH">|</SPAN>"); the value of the operand is the number of toothpicks.<P>The operators that can appear in an expression are addition and multiplication. The addition operator is the plus sign (``+"), which consists of one vertical and one horizontal toothpick. The multiplication operator is the letter ``x", which also consists of two toothpicks. Multiplication has precedence over addition.<P>The expression must begin with an operand. Thereafter, operators and operands alternate. Finally, the expression must end with an operand. Given a positive integer, your program must represent it as a toothpick expression, using the smallest number of toothpicks.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of one or more lines; each line will contain data for one instance of the problem. More specifically, each line will contain one positive integer, not exceeding 5000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each line of input will give rise to one line of output, consisting of: the number of toothpicks used in the expression, the expression, and the given integer from the input, formatted as shown in the sample output. The word ``toothpicks" (even if the answer is 1) will be preceded by one blank space and followed by a colon and one blank space. An equal sign (but no blank spaces) will separate the expression from the given number. The expression should not contain any spaces.<P>If there are multiple expressions which use the smallest number of toothpicks, any such expression is acceptable.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
35
37
53
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
14 toothpicks: |||||||x|||||=35
17 toothpicks: ||||||x||||||+|=37
21 toothpicks: |||||x|||||x||+|||=53
</PRE><P>
______________________________________________________
3578||||||false||||||
<P>A classic ice-breaking exercise is for a group of <SPAN CLASS="MATH"><I>n</I></SPAN> people to form a circle and then arbitrarily join hands with one another. This forms a ``human knot" since the players' arms are most likely intertwined. The goal is then to unwind the knot to form a circle of players with no arms crossed.<P>We now adapt this game to a more general and more abstract setting where the physical constraints of the problem are gone. Suppose we represent the initial knot with a 2-regular graph inscribed in a circle (i.e., we have a graph with <SPAN CLASS="MATH"><I>n</I></SPAN> vertices with exactly two edges incident on each vertex). Initially, some edges may cross other edges and this is undesirable. This is the ``knot" we wish to unwind.<P>A ``move" involves moving any vertex to a new position on the circle, keeping its edges intact. Our goal is to make the fewest possible moves such that we obtain one <SPAN CLASS="MATH"><I>n</I></SPAN>-sided polygon with no edge-crossings remaining.<P>For example, here is a knot on 4 vertices inscribed in a circle, but two edges cross each other. By moving vertex 4 down to the position between 2 and 3, a graph without edge-crossings emerges. This was achieved in a single move, which is clearly optimal in this case.<P><DIV ALIGN="CENTER"><IMG WIDTH="589" HEIGHT="228" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3578a.gif ALT="\epsfbox{p3578a.eps}"></DIV><P>When <SPAN CLASS="MATH"><I>n</I></SPAN> is larger, things may not be quite as clear. Below we see a knot on 6 vertices. We might consider moving vertex 4 between 5 and 6, then vertex 5 between 1 and 2, and finally vertex 6 between 3 and 4; this unwinds the knot in 3 moves.<P><DIV ALIGN="CENTER"><IMG WIDTH="936" HEIGHT="211" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3578a.gif ALT="\epsfbox{p3578c.eps}"></DIV><P>But clearly we can unwind the same knot in only two moves:<P><DIV ALIGN="CENTER"><IMG WIDTH="902" HEIGHT="259" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3578a.gif ALT="\epsfbox{p3578b.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of cases. Each case starts with a line containing the integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3578a.gif ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3578a.gif ALT="$ \le$">500)</SPAN>, giving the number of vertices of the graph. The vertices are labelled clockwise from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines gives a pair of neighbors, where line <SPAN CLASS="MATH"><I>i</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3578a.gif ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3578a.gif ALT="$ \le$"><I>n</I>)</SPAN> specifies the two vertices adjacent to vertex <SPAN CLASS="MATH"><I>i</I></SPAN>. The input is terminated by <SPAN CLASS="MATH"><I>n</I> =</SPAN> <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, if there is no solution, print ``<TT>Not solvable.</TT>" on a line by itself. If there is a solution, print ``<TT>Knot solvable.</TT>" on a line by itself, followed by the minimum number of moves required to solve the problem, on a line by itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
6
4 5
3 5
2 6
1 6
1 2
3 4
6
2 6
1 4
5 6
2 5
3 4
1 3
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
Knot solvable.
2
Knot solvable.
1
</PRE><P>
______________________________________________________
3579||||||false||||||
<P>Professor Permula gave a number of permutations of the <SPAN CLASS="MATH"><I>n</I></SPAN> integers <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> to her students. For each integer <SPAN CLASS="MATH"><I>i</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3579img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3579img1.png ALT="$ \le$"><I>n</I>)</SPAN>, she asks the students to write down the number of integers greater than <SPAN CLASS="MATH"><I>i</I></SPAN> that appears before <SPAN CLASS="MATH"><I>i</I></SPAN> in the given permutation. This number is denoted <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>. For example, if <SPAN CLASS="MATH"><I>n</I> = 8</SPAN> and the permutation is 2,7,3,5,4,1,8,6, then <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB> = 5</SPAN> because there are 5 numbers (2, 7, 3, 5, 4) greater than 1 appearing before it. Similarly, <SPAN CLASS="MATH"><I>a</I><SUB>4</SUB> = 2</SPAN> because there are 2 numbers (7, 5) greater than 4 appearing before it.<P>John, one of the students in the class, is studying for the final exams now. He found out that he has lost the assignment questions. He only has the answers (the <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>'s) but not the original permutation. Can you help him determine the original permutation, so he can review how to obtain the answers?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of test cases. Each test case starts with a line containing the integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3579img1.png ALT="$ \le$">500)</SPAN>. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines give the values of <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>,..., <I>a</I><SUB>n</SUB></SPAN>. The input ends with <SPAN CLASS="MATH"><I>n</I> =</SPAN> <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line specifying the original permutation. Adjacent elements of a permutation should be separated by a comma. Note that some cases may require you to print lines containing more than 80 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
8
5
0
1
2
1
2
0
0
10
9
8
7
6
5
4
3
2
1
0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
2,7,3,5,4,1,8,6
10,9,8,7,6,5,4,3,2,1
</PRE><P>
______________________________________________________
3580||||||false||||||
<P>Each of three baskets contains a certain number of marbles. You may move from one basket into another basket as many marbles as are already there, thus doubling the quantity in the basket that received the marbles. You must find a sequence of moves that will yield the same number of marbles in the three baskets. Moreover, you must achieve the goal in the smallest possible number of moves. Your program must also recognize the case in which there is no such sequence of moves.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each line of the input file will contain data for one instance of the problem: three positive integers, with one blank space separating adjacent integers. The three integers represent the initial numbers of marbles in the three baskets. The sum of the three integers will be at most 60.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output will begin with the initial configuration from the input. Thereafter, on successive lines, the number of marbles in the respective baskets will be printed after each move, concluding with the line in which the three numbers are identical. As stated above, the goal must be achieved in the smallest possible number of moves. (The correct output is not unique, however. There may be different sequences of moves which achieve the goal correctly in the smallest possible number of steps.) If there is no sequence of moves to achieve the goal, only the initial configuration will be printed. Each integer in the output will be right-justified in a field of width 4. Each instance of the problem will be concluded by a line of 12 equal signs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
6 7 11
15 18 3
5 6 7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
   6   7  11
   6  14   4
  12   8   4
   8   8   8
============
  15  18   3
  12  18   6
  12  12  12
============
   5   6   7
============
</PRE><P>
______________________________________________________
3581||||||false||||||
<P>
The organizers of the Annual Computing Meeting have invited a number
of vendors to set up booths in a large exhibition hall during the meeting to
showcase their latest products.  As the vendors set up their booths at
their assigned locations, they discovered that the organizers did not
take into account an important fact--each vendor supports either
the Doors operating system or the Penguin operating system, but not
both.  A vendor supporting one operating system does not want a booth
next to one supporting another operating system.

<P>
Unfortunately the booths have already been assigned and even set up.
There is no time to reassign the booths or have them moved.  To make
matter worse, these vendors in fact do not even want to be in the
same room with vendors supporting a different operating system.

<P>
Luckily, the organizers found some portable partition screens to
build a wall that can separate the two groups of vendors.  They have
enough material to build a wall of any length.  The screens can only
be used to build a straight wall.  The organizers need your help to
determine if it is possible to separate the two groups of vendors by a
single straight wall built from the portable screens.  The wall built
must not touch any vendor booth (but it may be arbitrarily close to
touching a booth).  This will hopefully prevent one of the vendors from
knocking the wall over accidentally.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of a number of cases.  Each case starts with 2
integers on a line separated by a single space: <SPAN CLASS="MATH"><I>D</I></SPAN> and <SPAN CLASS="MATH"><I>P</I></SPAN>,
the number of vendors supporting the Doors and Penguins operating
system, respectively <!-- MATH
 $(1 \le D, P \le 500)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3581img1.png
 ALT="$ \le$"><I>D</I>, <I>P</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3581img1.png
 ALT="$ \le$">500)</SPAN>.
The next <SPAN CLASS="MATH"><I>D</I></SPAN> lines specify the locations of the vendors
supporting Doors.  This is followed by <SPAN CLASS="MATH"><I>P</I></SPAN> lines specifying
the locations of the vendors supporting Penguins.  The location of
each vendor is specified by four positive integers:
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>.
(<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>) specifies the
coordinates of the southwest corner of the booth while
(<SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>) specifies the
coordinates of the northeast corner.  The coordinates satisfy
<!-- MATH
 $x_{1} < x_{2}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> &lt; <I>x</I><SUB>2</SUB></SPAN> and <!-- MATH
 $y_{1} < y_{2}$
 -->
<SPAN CLASS="MATH"><I>y</I><SUB>1</SUB> &lt; <I>y</I><SUB>2</SUB></SPAN>.  All booths are rectangular and have sides
parallel to one of the compass directions.  The coordinates of the
southwest corner of the exhibition hall is (0,0) and the coordinates
of the northeast corner is (15000, 15000).  You
may assume that all vendor booths are completely inside the exhibition
hall and do not touch the walls of the hall.  The booths do not
overlap or touch each other.

<P>
The end of input is indicated by <SPAN CLASS="MATH"><I>D</I> = <I>P</I> =</SPAN> <TT>0</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, print the case number (starting from 1), followed by a
colon and a space.  Next, print the sentence:

<P>
<PRE> 
It is possible to separate the two groups of vendors.
</PRE>
if it is possible to do so.  Otherwise, print the sentence:

<P>
<PRE> 
It is not possible to separate the two groups of vendors.
</PRE>

<P>
Print a blank line between consecutive cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
3 3
10 40 20 50
50 80 60 90
30 60 40 70
30 30 40 40
50 50 60 60
10 10 20 20
2 1
10 10 20 20
40 10 50 20
25 12 35 40
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE> 
Case 1: It is possible to separate the two groups of vendors.

Case 2: It is not possible to separate the two groups of vendors.
</PRE>

<P>

______________________________________________________
3582||||||false||||||
<P>An even number <SPAN CLASS="MATH"><I>N</I></SPAN> of strands are stuck through a wall. On one side of the wall, a girl ties <SPAN CLASS="MATH"><I>N</I>/2</SPAN> knots between disjoint pairs of strands. On the other side of the wall, the girl's groom-to-be also ties <SPAN CLASS="MATH"><I>N</I>/2</SPAN> knots between disjoint pairs of strands. You are to find the probability that the knotted strands form one big loop (in which case the couple will be allowed to marry).<P>For example, suppose that <SPAN CLASS="MATH"><I>N</I> = 4</SPAN> and you number the strands 1, 2, 3, 4. Also suppose that the girl has created the following pairs of strands by tying knots: {(1, 4), (2,3)}. Then the groom-to-be has two choices for tying the knots on his side: {(1,2), {3,4)} or {(1,3), (2,4)}.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of one or more lines. Each line of the input file contains a positive even integer, less than or equal to 100. This integer represents the number of strands in the wall.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line of input, the program will produce exactly one line of output: the probability that the knotted strands form one big loop, given the number of strands on the corresponding line of input. Print the probability to 5 decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
4
20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
0.66667
0.28377
</PRE><P>
______________________________________________________
3583||||||false||||||
<P>We all understand equations such as:<P><P><BR><PRE> 
    3 + 8 = 4 + 7
</PRE><P><P><BR>But what happens if we look at equations with strings instead of numbers? What would addition and equality mean?<P>Given two strings <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>, we define <SPAN CLASS="MATH"><I>x</I> + <I>y</I></SPAN> to be the concatenation of the two strings. We also define <SPAN CLASS="MATH"><I>x</I> = <I>y</I></SPAN> to mean that <SPAN CLASS="MATH"><I>x</I></SPAN> is an anagram of <SPAN CLASS="MATH"><I>y</I></SPAN>. That is, the characters in <SPAN CLASS="MATH"><I>x</I></SPAN> can be permuted to form <SPAN CLASS="MATH"><I>y</I></SPAN>.<P>You are given <SPAN CLASS="MATH"><I>n</I></SPAN> distinct nonempty strings, each containing at most 10 lowercase characters. You may also assume that at most 10 distinct characters appear in all the strings. You need to determine if you can choose strings to put on both sides of an equation such that the ``sums" on each side are ``equal" (by our definitions above). You may use each string on either side 0 or more times, but no string may be used on both sides.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of cases. Each case starts with a line containing the integer <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3583img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/3583img1.png ALT="$ \le$">100)</SPAN>. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain the <SPAN CLASS="MATH"><I>n</I></SPAN> strings. The input is terminated with <SPAN CLASS="MATH"><I>n</I> =</SPAN> <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print either ``<TT>yes</TT>" or ``<TT>no</TT>" on one line indicating whether it is possible to form an equation as described above. If it is possible, print on each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines how many times each string is used, with the strings listed in the same order as the input. On each line, print the string, followed by a space, followed by the letter ``<TT>L</TT>", ``<TT>R</TT>", or ``<TT>N</TT>" indicating whether the string appears on the left side, the right side, or neither side in the equation. Finally, this is followed by a space and an integer indicating how many times the string appears in the equation. Each numeric output should fit in a 64-bit integer.<P>If there are multiple solutions, any solution is acceptable.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE> 
2
hello
world
7
i
am
lord
voldemort
tom
marvolo
riddle
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
no
yes
i L 1
am L 1
lord L 1
voldemort L 1
tom R 1
marvolo R 1
riddle R 1

______________________________________________________
3584||||||false||||||

Pick a number, any number. Reverse its digits. Add the new number to the original. Repeat the process. Do this enough times and you will likely arrive at a palindrome (a number that reads the same forwards and backwards). For example starting with 23 the sequence looks like: 

<DIV ALIGN="CENTER">
<!-- MATH
 $\begin{array}{rl}
\texttt{23} & \mbox{the original number} \\
\texttt{\underline{+ 32}} & \mbox{reverse its digits} \\
\texttt{55} & \mbox{a palindrome} \\
\end{array}$
 -->
<SPAN CLASS="MATH"><TABLE>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><texttt>23</texttt></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>the original number</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><IMG
 WIDTH="35" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3584img1.png
 ALT="$ \underline{{+ 32}}$"></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>reverse its digits</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><texttt>55</texttt></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>a palindrome</TD></TR>
</TABLE></SPAN>
<tex2html_verbatim_mark>
</DIV>

<P>
<BR>
Sometimes this may take multiple repetitions. Consider the number 99988877:

<DIV ALIGN="CENTER">
<!-- MATH
 $\begin{array}{rl}
\texttt{99988877}               &  \mbox{the original number}      \\
\texttt{\underline{+ 77888999}}   &  \mbox{reverse its digits}       \\
\texttt{177877876}                &  \mbox{not a palindrome}         \\
\texttt{\underline{+ 678778771}}  &  \mbox{reverse the result's digits}  \\
\texttt{856656647}                &  \mbox{not a palindrome}        \\
\texttt{\underline{+ 746656658}}  &  \mbox{etc.}                  \\
\texttt{1603313305}               &             \\
\texttt{\underline{+ 5033133061}} &             \\
\texttt{6636446366}               &  \mbox{a palindrome} \\
\end{array}$
 -->
<SPAN CLASS="MATH"><TABLE>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><texttt>99988877</texttt></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>the original number</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><IMG
 WIDTH="88" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3584img1.png
 ALT="$ \underline{{+ 77888999}}$"></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>reverse its digits</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><texttt>177877876</texttt></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>not a palindrome</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><IMG
 WIDTH="96" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3584img1.png
 ALT="$ \underline{{+ 678778771}}$"></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>reverse the result's digits</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><texttt>856656647</texttt></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>not a palindrome</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><IMG
 WIDTH="97" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3584img1.png
 ALT="$ \underline{{+ 746656658}}$"></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>etc.</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><texttt>1603313305</texttt></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><IMG
 WIDTH="105" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3584img1.png
 ALT="$ \underline{{+ 5033133061}}$"></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><texttt>6636446366</texttt></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>a palindrome</TD></TR>
</TABLE></SPAN>
<tex2html_verbatim_mark>
</DIV>
Notice that although all the original numbers you are given will be representable by the standard integer types, the result may be much larger than the largest integer representable by the standard integer types in your programming language.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input will consist of one or more integers, one per line. The last line will have the value <TT>-1</TT>, which should not be processed. Each other integer will be a value greater than or equal to 1 and will represent a separate test case.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, echo the input value and give either the first palindrome that results from the DRAM process or a message that no such palindrome exists if there is not a palindrome in the first 1,000 iterations of the process. Use the format in the sample output below.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<PRE>
9 
23 
99988877 
9898 
-1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
Initial value: 9 gives palindrome 9 
Initial value: 23 gives palindrome 55 
Initial value: 99988877 gives palindrome 6636446366 
Initial value: 9898 No palindrome found
</PRE>

______________________________________________________
3585||||||false||||||

Your little brother, Joey, has recently learned that if the sum of digits in a number is divisible by 3 the number is divisible by 3. Joey now thinks that all numbers that are divisible by the sum of their digits are divisible by 3. 

You tell Joey that the number 2 is divisible by the sum of its digits but not divisible by 3, so Joey decides all numbers <SPAN  CLASS="textit">greater than 10</SPAN> that are divisible by the sum of their digits are divisible by 3. You think fast and tell Joey that the number 20 is divisible by the sum of its digits but not divisible by 3, so Joey decides all numbers <SPAN  CLASS="textit">greater than 20</SPAN> that are divisible by the sum of their digits are divisible by 3. 

You're quickly getting tired of doing math, so decide to write a program that will find the smallest number greater than a given number that is divisible by the sum of its digits, but not divisible by 3.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input to this program will be one or more lines with one integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> per line, <!-- MATH
 $0 \le n \le 1,000,000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3585img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3585img1.png
 ALT="$ \le$">1, 000, 000</SPAN>
<tex2html_verbatim_mark>. End of input will be marked by <SPAN CLASS="MATH"><I>n</I> =</SPAN>
<tex2html_verbatim_mark><TT>0</TT>. This value should not be processed.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, print the smallest value, <SPAN CLASS="MATH"><I>result</I></SPAN>
<tex2html_verbatim_mark>, that is greater than or equal to <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> that is divisible by the sum of its digits but not divisible by 3. Use the format:

<P>
<BR>

<TT>For</TT> <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark><TT>, tell Joey</TT> <SPAN CLASS="MATH"><I>result</I></SPAN>
<tex2html_verbatim_mark>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
9 
10 
11 
143 
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
For 9, tell Joey 10. 
For 10, tell Joey 10. 
For 11, tell Joey 20. 
For 143, tell Joey 152.
</PRE>

______________________________________________________
3586||||||false||||||

A piece of cardboard of the shape given below can be folded at the dashed lines into a cube. 

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3586a.eps}$
 -->
<IMG
 WIDTH="243" HEIGHT="192" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3586a.jpg
 ALT="\epsfbox{p3586a.eps}">
<tex2html_verbatim_mark>
</DIV>
The faces are colored on one side (top as shown) with distinct colors symbolized by uppercase letters of the alphabet. The faces on the other side (bottom as shown) will be on the inside of the cube, and thus be hidden and immaterial. 

Another piece of cardboard with the same shape, but with faces colored as follows, will form a cube that is identical (in all but orientation). 

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3586b.eps}$
 -->
<IMG
 WIDTH="228" HEIGHT="179" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3586a.jpg
 ALT="\epsfbox{p3586b.eps}">
<tex2html_verbatim_mark>
</DIV>
Given pairs of cardboard pieces, all of the shape above, with specified face colors, we would like to know if the cubes are identical.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Each piece of unfolded cardboard is specified by three lines of input, having respectively one, four, and one uppercase alphabetic character(s), representing the distinct colors on the six faces. Each data set contains two sets of 3-line specifications. The end of data is the end of the file.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each data set, output a line looking like

<P>
<BR>

<TT>Cube pair <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN>
<tex2html_verbatim_mark> is <SPAN CLASS="MATH">&lt; <I>d</I> &gt;</SPAN>
<tex2html_verbatim_mark></TT>

<P>
<BR>
Where <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the dataset starting at 1, and <SPAN CLASS="MATH">&lt; <I>d</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the word ``<TT>identical</TT>" or ``<TT>different</TT>" as appropriate.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
A 
BCDC 
D 
C 
DDAB 
C 
A 
BCDC 
D 
C 
DADB 
C 
A 
BDEF 
C 
F 
EABC 
D
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
Cube pair 1 is identical 
Cube pair 2 is different 
Cube pair 3 is different
</PRE>

______________________________________________________
3587||||||false||||||

All the lawns I mow are rectangular, having a width and length measured in discrete units corresponding to the cutting diameter of my lawn mower blade. Thus, the lawns can be thought of as made up of unit squares. The first two lawns in the example diagram below have a width of 6, and a length of 5. 

My self-propelled lawn mower takes time <SPAN CLASS="MATH"><I>t</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark> to traverse a unit square while moving in a straight direction, <SPAN CLASS="MATH"><I>t</I><SUB>c</SUB></SPAN>
<tex2html_verbatim_mark> when I have to make a 90<SPAN CLASS="MATH"><SUP><TT>o</TT></SUP></SPAN>
<tex2html_verbatim_mark> turn, and <SPAN CLASS="MATH"><I>t</I><SUB>r</SUB></SPAN>
<tex2html_verbatim_mark> is the total time to make two consecutive 90Â° turns. (I don't worry about missing corners of the unit areas due to circular cutting.) 

I can mow the lawn in either a back-and-forth pattern, or in a spiral pattern (see figures below), but I always want to do it in the least time. To help me to decide which pattern to use, I need a program to calculate the time required to mow the lawn using either one of the patterns. 

I always start in the upper-left corner, initially facing in the rightward direction. The last square mowed never involves a turn (unless it has to).

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3587a.eps}$
 -->
<IMG
 WIDTH="345" HEIGHT="294" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3587a.jpg
 ALT="\epsfbox{p3587a.eps}">
<tex2html_verbatim_mark>

<SPAN  CLASS="textit">Back-and-forth Pattern</SPAN>. Here, the time needed to mow this area is <!-- MATH
 $22 \times t_{s} + 4 \times t_{r}$
 -->
<SPAN CLASS="MATH">22&#215;<I>t</I><SUB>s</SUB> +4&#215;<I>t</I><SUB>r</SUB></SPAN>
<tex2html_verbatim_mark> . The last area mowed is bottom-right.

</DIV>

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3587b.eps}$
 -->
<IMG
 WIDTH="333" HEIGHT="294" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3587a.jpg
 ALT="\epsfbox{p3587b.eps}">
<tex2html_verbatim_mark>

<SPAN  CLASS="textit">Spiral Pattern</SPAN>. Here, the time needed to mow this area is <!-- MATH
 $22 \times t_{s} + 6 \times t_{c} + t_{r}$
 -->
<SPAN CLASS="MATH">22&#215;<I>t</I><SUB>s</SUB> +6&#215;<I>t</I><SUB>c</SUB> + <I>t</I><SUB>r</SUB></SPAN>
<tex2html_verbatim_mark>. The last area mowed is near the middle of the lawn.

</DIV>

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3587c.eps}$
 -->
<IMG
 WIDTH="155" HEIGHT="241" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3587a.jpg
 ALT="\epsfbox{p3587c.eps}">
<tex2html_verbatim_mark>

In special cases when the yard is just one unit wide or long, the back-andforth and spiral patterns will be identical. If necessary, I will turn 90 degrees and then mow the length or width of the yard.

</DIV>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

The input comprises a sequence of data sets. Each data set gives, on a single line, values for <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> (width of lawn), <SPAN CLASS="MATH"><I>l</I></SPAN>
<tex2html_verbatim_mark> (length of lawn), <SPAN CLASS="MATH"><I>t</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I><SUB>c</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>t</I><SUB>r</SUB></SPAN>
<tex2html_verbatim_mark>. All values are integers such that <SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3587a.jpg
 ALT="$ \le$"><I>w</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>l</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3587a.jpg
 ALT="$ \le$">200</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 < t_{s} , t_{c} , t_{r} \le 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>t</I><SUB>s</SUB>, <I>t</I><SUB>c</SUB>, <I>t</I><SUB>r</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3587a.jpg
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>. The input terminates if either <SPAN CLASS="MATH"><I>l</I></SPAN>
<tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> is zero, and that data set should not be processed.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Each line of the output corresponds to an input data set. There are two numeric values and a text label on each line, each separated by a single space. The first value is the time required to mow the area in a back-and-forth pattern. The second is the time required to mow the area in a spiral pattern. In each case, assume you start mowing at the top-left corner, initially facing toward the right. The third item on the line is the string ``<TT>Spiral</TT>" if the spiral pattern requires the least time, ``<TT>Back-and-forth</TT>" if the back-and-forth pattern requires the least time, or otherwise ``<TT>TIE</TT>".

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<PRE>
5 5 1 2 3 
5 4 2 1 2 
4 5 1 3 3 
5 4 1 3 7 
0 3 1 2 3
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
29 32 Back-and-forth 
34 34 TIE 
24 31 Back-and-forth 
35 33 Spiral
</PRE>

______________________________________________________
3588||||||false||||||

You have probably all seen maze problems where the maze is described using ASCII characters. For example, a maze might be described as:

<P>
<BR>

<PRE>
.XX 
... 
XX.
</PRE>

<P>
<BR>
where `<TT>.</TT>' represents a free space in the maze and `<TT>X</TT>' represents a wall. 

But there are other ways to represent mazes that are based on the logical structure of the maze instead of its appearance. One such way uses parentheses and underscores to represent the structure of a maze. These are used as follows:

<UL>
<LI>`<TT>_</TT>': a location occupied by a wall; 
</LI>
<LI>`<TT>(</TT>' <SPAN  CLASS="textit">north-loc-desc</SPAN> `<TT>,</TT>'<SPAN  CLASS="textit">west-loc-desc</SPAN>`<TT>,</TT>'<SPAN  CLASS="textit">south-loc-desc</SPAN>`<TT>,</TT>'<SPAN  CLASS="textit">east-loc-desc</SPAN>`<TT>)</TT>': an empty location that has not been described previously. Within the set of parentheses will be four other descriptions, defining the neighbors of this empty location; 
</LI>
<LI>`<SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark>': an empty location that has already been described.
</LI>
</UL>

Any space outside the boundaries of the maze will be represented as containing a wall, but these extra walls will not be shown in the final maze. So the description <TT>(_,_,_,_)</TT> describes an empty location with walls to its north, west, south, and east, or the maze:

<P>
<BR>

<PRE>
.
</PRE>

<P>
<BR>

(That's just a single empty location.) 

A slightly more complicated maze is represented by the description <TT>(_,_,(<SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark>,_,_(_,<SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark>,_,_)),_)</TT>. Here there are walls to the north and the west of the starting empty location. The cell to the south of the starting location is described by <TT>(<SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark>,_,_(_,<SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark>,_,_))</TT>. The cell to the north is a cell that's previously been described. There are walls to the west and south. The cell to the east is defined by <TT>(_,<SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark>,_,_)</TT>, an empty cell with walls to the north, south, and east and a previously described location to the west. All of this description ultimately gives the maze:

<P>
<BR>

<PRE>
.X 
..
</PRE>

<P>
<BR>
You are to write a program that will translate from the parenthesized description of a maze to an ASCII version of the maze.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input to your program will be one or more data sets, each with a description of a maze, in the parenthesized version described above. The first line of each data set will be a pair of integers, row and column, with <!-- MATH
 $0 \le row \le 20$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3588img1.png
 ALT="$ \le$"><I>row</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3588img1.png
 ALT="$ \le$">20</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le column \le 20$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3588img1.png
 ALT="$ \le$"><I>column</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3588img1.png
 ALT="$ \le$">20</SPAN>
<tex2html_verbatim_mark>, giving the overall maze dimensions. The values row and column will only be equal in the maze indicating the end of input. The second line of each data set will be a pair of integers <SPAN CLASS="MATH"><I>startrow</I></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $startcolumn$
 -->
<SPAN CLASS="MATH"><I>startcolumn</I></SPAN>
<tex2html_verbatim_mark>, with <!-- MATH
 $0 \le startrow < row$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3588img1.png
 ALT="$ \le$"><I>startrow</I> &lt; <I>row</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le startcolumn < column$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3588img1.png
 ALT="$ \le$"><I>startcolumn</I> &lt; <I>column</I></SPAN>
<tex2html_verbatim_mark>, giving the location initially being described, where (0, 0) is the upper left hand location of the maze. There will then be a syntactically valid description of the starting location and adjacent locations. There may be extra blanks and ends of line in the data. 

The last input set will have the <SPAN CLASS="MATH"><I>row</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>column</I></SPAN>
<tex2html_verbatim_mark> equal to <TT>0</TT>. This set should not be processed.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each maze, first output a line with the number of the maze, formatted as in the sample output and starting with 1, then the ASCII version of the maze, using `<TT>X</TT>' to represent a wall and `<TT>.</TT>' to represent an empty location. You should assume all descriptions are valid and any space not described is a wall.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<PRE>
5 3 
0 1 
(_,_,_,_) 
5 5 
2 2 
(_,_,(*,_,_(_,*,_,_)),_) 
3 3 
0 0 
( _, 
  _, 
  ( *, 
    _, 
    _, 
    ( _,  
      *, 
      _, 
      ( _, 
        *, 
       (*,_,_,_) 
       ,_) 
      ) 
    ), 
  _) 
0 0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
Maze number 1 
X.X 
XXX 
XXX 
XXX 
XXX 
Maze number 2 
XXXXX 
XXXXX 
XX.XX 
XX..X 
XXXXX 
Maze number 3 
.XX 
... 
XX.
</PRE>

______________________________________________________
3589||||||false||||||

In an old Chinese game, there is some number of piles of pebbles. You and your opponent take turns in removing any positive number of pebbles from a single pile. The objective is to be in a position to remove the last pile. 

There is a winning strategy: express the number of pebbles in the piles in binary and see to it that, after your turn, the total number of non-zero digits in any binary place value is even. Of course, if this is already true when it is your turn, it will no longer be true after your turn. In that case, you simply remove one pebble from the first largest pile (and hope that your opponent doesn't know the winning strategy!). 

Say that 4 piles have the following numbers of pebbles:

<P>
<BR>

<TT> 8 = 1000<SPAN CLASS="MATH"><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark></TT> 
 
<TT> 9 = 1001<SPAN CLASS="MATH"><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark></TT> 

<TT> 3 = 0011<SPAN CLASS="MATH"><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark></TT> 

<TT>11 = 1011<SPAN CLASS="MATH"><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark></TT>

<P>
<BR>
The first, and last binary place values (columns) have an odd number of non-zero digits. There are three ways to make all place values even: reduce the first pile to 1, reduce the second pile to zero, or reduce the fourth pile to 2. To provide a unique answer, we will specify that we should always take pebbles from the first largest pile for which it is possible to make all place values even. Thus, in the above case, you should remove 9 pebbles from the fourth pile. 

We would like to have a program that tells us what to do on our turn for various game situations.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

For each game situation, the first line of input has a single integer, <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, being the number of piles <!-- MATH
 $(0 \le n \le 5)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3589img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3589img1.png
 ALT="$ \le$">5)</SPAN>
<tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines each contain a single positive integer <!-- MATH
 $(\le 1000000000)$
 -->
<SPAN CLASS="MATH">(<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3589img1.png
 ALT="$ \le$">1000000000)</SPAN>
<tex2html_verbatim_mark> representing the number of pebbles in the pile. The last case is when <SPAN CLASS="MATH"><I>n</I> =</SPAN>
<tex2html_verbatim_mark> <TT>0</TT>, and should not be processed.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

The output line should look like

<P>
<BR>

<TT><SPAN CLASS="MATH">&lt; <I>p</I> &gt;</SPAN>
<tex2html_verbatim_mark> pebbles should be removed from the <SPAN CLASS="MATH">&lt; <I>i</I> &gt;</SPAN>
<tex2html_verbatim_mark> pile.</TT>

<P>
<BR>
Where <SPAN CLASS="MATH">&lt; <I>p</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the number of pebbles to be removed, and <SPAN CLASS="MATH">&lt; <I>i</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the appropriate word from the list ``<TT>first</TT>", ``<TT>second</TT>", ``<TT>third</TT>", ``<TT>fourth</TT>", or ``<TT>fifth</TT>".

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
4 
8 
9 
3 
11 
4 
3 
3 
9 
9 
3 
2 
10 
10 
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
9 pebbles should be removed from the fourth pile. 
1 pebbles should be removed from the third pile. 
2 pebbles should be removed from the second pile.
</PRE>

______________________________________________________
3590||||||false||||||

You have a rectangular grid of cells, each of which can contain:

<UL>
<LI>an unmovable wall <SPAN  CLASS="textit">brick</SPAN> (<!-- MATH
 $\epsfbox{p3590a.eps}$
 -->
<IMG
 WIDTH="18" HEIGHT="20" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3590a.jpg
 ALT="\epsfbox{p3590a.eps}">
<tex2html_verbatim_mark>
 in the diagram below), or an unmoveable <SPAN  CLASS="textit">hole</SPAN> (<!-- MATH
 $\epsfbox{p3590b.eps}$
 -->
<IMG
 WIDTH="20" HEIGHT="24" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3590a.jpg
 ALT="\epsfbox{p3590b.eps}">
<tex2html_verbatim_mark>) 
</LI>
<LI>a moveable pusher (<!-- MATH
 $\diamondsuit$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="20" ALIGN="bottom" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3590a.jpg
 ALT="$ \diamondsuit$"></SPAN>
<tex2html_verbatim_mark>), 
</LI>
<LI>a moveable block (<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3590a.jpg
 ALT="$ \Box$"></SPAN>
<tex2html_verbatim_mark>), 
</LI>
<LI>nothing.
</LI>
</UL>

Cells containing a brick cannot contain anything else. Bricks exist in at least all border cells of the grid. In any initial configuration, there is exactly one cell containing a pusher, and exactly one (different) cell containing a block. Since the block is smaller than a hole, it will fall into it (and disappear), if it is moved to a hole (i.e., a cell having a hole). Since the pusher is larger than the hole, it can move into and over a cell having a hole without falling in. The pusher is allowed to move into a horizontally or vertically adjacent cell, unless that cell contains a brick. If the pusher is moved into a cell containing the block, the block moves one cell over in the same direction (i.e., the block is `pushed' by the pusher). However, a pusher move is not allowed if it would push a block into a cell containing a brick. The goal is, by a sequence of allowed pusher moves, to eventually push the block to a specified position, (without, of course, the block having fallen into a hole). 

Consider the following initial grid configuration below, in which the goal is to move the block from initial position (using <!-- MATH
 $(row, column)$
 -->
<SPAN CLASS="MATH">(<I>row</I>, <I>column</I>)</SPAN>
<tex2html_verbatim_mark> coordinates) (2,3) to a target position at (1,1). This is possible by moving the pusher to (1,3) via an existing path of empty cells. The pusher can then be moved downward to (3,3), at the same time pushing the block downward to (4,3). After moving the pusher from (3,3) to (4,4) via a path of empty cells, the block can then be pushed to (4,2). The pusher can then be moved to (5,2), then to (4,2), pushing the block to (3,2). The pusher is then moved to (3,3) and then to (3,2), pushing the block to (3,1). Finally, the pusher is moved to (4,1) (over the hole), and then to (2,1), pushing the block to its target destination, (1,1).

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3590.eps}$
 -->
<IMG
 WIDTH="269" HEIGHT="294" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3590a.jpg
 ALT="\epsfbox{p3590.eps}">
<tex2html_verbatim_mark>
</DIV>
Now consider again the same grid configuration as above, but where the target position is (1,2). The goal is not achievable (try it!). 

For given initial grid configurations, we would like to know if it is possible to push the object block into a given target position. That is, we want to know if there exists at least one way to ``solve" the configuration.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Each grid configuration starts with a line containing two integers, <SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3590a.jpg
 ALT="$ \le$"><I>r</I></SPAN>
<tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>c</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/p3590a.jpg
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark> , being the number of rows, and the number of columns respectively. The last configuration has <SPAN CLASS="MATH"><I>r</I> =</SPAN>
<tex2html_verbatim_mark> <TT>0</TT> and <SPAN CLASS="MATH"><I>c</I> =</SPAN>
<tex2html_verbatim_mark> <TT>0</TT> , and should not be processed. The following <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> lines contain strings of <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> characters taken from the set {`<TT>W</TT>', `<TT>H</TT>',`<TT>.</TT>'} representing respectively cell contents: (wall) brick, hole, empty cell. The next three lines each contain a pair of integers representing respectively the initial position (i.e., zero-based row and column indices) of the pusher block, the initial position of the object block, and the target position, all of which are within the range of the grid. The initial and final positions of the block will not be coincident with a brick or a hole. The initial pusher position will not be coincident with a brick.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Each configuration should produce a line like

<P>
<BR>

<TT>Configuration <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN>
<tex2html_verbatim_mark> can be solved.</TT>

<P>
<BR>
or

<P>
<BR>

<TT>Configuration <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN>
<tex2html_verbatim_mark> can not be solved.</TT>

<P>
<BR>
where <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the configuration number starting at 1.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
7 6 
WWWWWW 
W...WW 
W.W.WW 
W...WW 
WH...W 
W....W 
WWWWWW 
2 1 
2 3 
1 1 
7 6 
WWWWWW 
W...WW 
W.W.WW 
W...WW 
WH...W 
W....W 
WWWWWW 
2 1 
2 3 
1 2 
0 0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
Configuration 1 can be solved. 
Configuration 2 can not be solved.
</PRE>

______________________________________________________
3591||||||false||||||

The local park has two parallel walking tracks, each of which is booked on Saturday mornings by two walking clubs; the Greater Strolling Unicorns (GSU), and the Unparalleled Speedwalking Association (USA). Both of these tracks have a common entrance that also serves as its exit, and requires all members to walk the same direction. Each member of both clubs is totally consistent and always takes the same amount of time to complete a lap. 

USA members are super competitive, and are a little more happy each time they pass a GSU member, and a little less happy each time they are passed by a GSU member. Since members of both clubs don't slow down or speed up, USA has figured out that they can maximize their members' happiness by having them change their starting time. Of course, they can't change the start timing too much, but they've discovered members are willing to stretch up to 5 minutes longer, so can change the start time by at most that much. 

USA wants to try optimizing each individual member's happiness by changing his/her start time and is asking you to write a program to determine that member's optimal start time, given a group of GSU members using the other track.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input to this program will be a series of scenarios Each scenario will begin with a single line, giving the scenario description, a string. There will then be a line containing a single integer, <SPAN CLASS="MATH"><I>gsu</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le gsu \le 100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3591img1.png
 ALT="$ \le$"><I>gsu</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3591img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, the number of people in GSU using the first track. There will then be <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines, each in the form:

<P>
<BR>

<!-- MATH
 $start-time \ lap-time \ laps$
 -->
<SPAN CLASS="MATH"><I>start</I> - <I>time</I>&nbsp;<I>lap</I> - <I>time</I>&nbsp;<I>laps</I></SPAN>
<tex2html_verbatim_mark>

<P>
<BR>
Each line describes a single person on the track. The start-time is given in <!-- MATH
 $minutes:seconds$
 -->
<SPAN CLASS="MATH"><I>minutes</I> : <I>seconds</I></SPAN>
<tex2html_verbatim_mark> where <!-- MATH
 $0 \le minutes \le 600$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3591img1.png
 ALT="$ \le$"><I>minutes</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3591img1.png
 ALT="$ \le$">600</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le seconds \le 59$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3591img1.png
 ALT="$ \le$"><I>seconds</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3591img1.png
 ALT="$ \le$">59</SPAN>
<tex2html_verbatim_mark>. The lap-time is the time to complete one lap, also in <!-- MATH
 $minutes:seconds$
 -->
<SPAN CLASS="MATH"><I>minutes</I> : <I>seconds</I></SPAN>
<tex2html_verbatim_mark> format and laps is a positive integer less than 100. The list of <SPAN CLASS="MATH"><I>gsu</I></SPAN>
<tex2html_verbatim_mark> people using the track will be in order of start time. 

After the list of GSU people using the track will be a line containing a single integer, <SPAN CLASS="MATH"><I>usa</I></SPAN>
<tex2html_verbatim_mark>, the number of USA people using the second track for whom we are trying to optimize happiness. After this line there will be <SPAN CLASS="MATH"><I>usa</I></SPAN>
<tex2html_verbatim_mark> lines, each in the form:

<P>
<BR>

<!-- MATH
 $arrival-time \ lap-time \ laps$
 -->
<SPAN CLASS="MATH"><I>arrival</I> - <I>time</I>&nbsp;<I>lap</I> - <I>time</I>&nbsp;<I>laps</I></SPAN>
<tex2html_verbatim_mark>

<P>
<BR>
Each line describes a person who arrives to walk, but is willing to wait up to 5 minutes if it means passing more people and/or being passed by fewer. The arrival-time, lap-time, and laps are formatted the same as for GSU people. 

End of input is indicated by end of file.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each scenario, echo the scenario description. Then, for each of the <SPAN  CLASS="textit">usa</SPAN> USA people looking for happiness, compute the maximum possible happiness where happiness is defined to be the number of GSU people passed minus the number of GSU people who pass this person. If a person enters or leaves the track at the same time they would pass or be passed by another person, one person is <SPAN  CLASS="textbf"><SPAN  CLASS="textit">not</SPAN></SPAN> considered to have passed the other. If there is more than one possible start time that results in the same happiness, pick the earliest. Print a line with the person number, the best start time, and the happiness score, using the format in the sample output below. 

Have a blank line after the data for each track.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<PRE>
Some slow strollers 
3 
15:00 4:00 6 
17:00 5:00 2 
27:00 6:00 4 
3 
10:00 2:00 6 
14:00 3:45 5 
27:30 2:00 3 
Very short track 
4 
0:00 0:10 60 
0:00 0:20 30 
11:00 2:00 5 
12:00 3:00 10 
2 
0:00 1:00 1 
9:00 0:30 10
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
Some slow strollers 
Member 1: start at 14:00 to get happiness 7. 
Member 2: start at 15:15 to get happiness 3. 
Member 3: start at 29:00 to get happiness 5.

Very short track 
Member 1: start at 0:00 to get happiness -5. 
Member 2: start at 12:30 to get happiness 20.
</PRE>

______________________________________________________
3592||||||false||||||

Halloween is coming soon and you've been asked to create a program to help parents and children get just what they want. Parents want to give children an upper bound on the amount of candy they can receive and children want as much candy as they get without upsetting their parents. 

Fortunately, in our neighborhoods, we know in advance exactly how many pieces of candy each home hands out to the children. A child has to take all the candy given by the home so they don't seem rude, and they can't throw away or eat any candy on the way. Children also have to stop at every home in the sequence of homes. 

Given these conditions, write a program to find the best sequence of homes for children to visit.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input will consist of information about one or more neighborhoods. The first line contains a single integer, <SPAN CLASS="MATH"><I>homes</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 < homes \le 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>homes</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3592img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, that represents the maximum number of homes on the block. The next line contains a single integer, <SPAN CLASS="MATH"><I>max</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le max \le 100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3592img1.png
 ALT="$ \le$"><I>max</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3592img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, representing the maximum number of pieces of candy that the child may collect. There will then be <SPAN CLASS="MATH"><I>homes</I></SPAN>
<tex2html_verbatim_mark> lines, each containing an integer, <SPAN CLASS="MATH"><I>pieces</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le pieces \le 100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3592img1.png
 ALT="$ \le$"><I>pieces</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3592img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, representing the number of pieces given at each home. Homes are numbered consecutively starting at 1. 

The last neighborhood will be followed by a line containing just the value <TT>0</TT>. This line should not be processed.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each neighborhood, first give the number of the neighborhood, starting with 1, using the format shown in the sample output below. Then, if there is no way to select one or more consecutive homes where the sum of pieces of candy is <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3592img1.png
 ALT="$ \le$"><I>max</I></SPAN>
<tex2html_verbatim_mark> on a single line, print ``<TT>Don't go here</TT>". Otherwise, in the format shown below, for the sequence of homes that yield the largest number of pieces of candy <SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3592img1.png
 ALT="$ \le$"><I>max</I></SPAN>
<tex2html_verbatim_mark>, include the number of the first home to visit, the number of the last home to visit, and the sum of pieces of candy. 

If there is more than one such sequence of homes, select the one with the lowest numbered first home. Have a blank line after the data for each neighborhood.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
5 
10 
2 
4 
3 
2
1 
5 
1 
2 
4 
3 
2 
2 
3 
10 
2 
4 
1 
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
Neighborhood 1 
Start at home 2 and go to home 5 getting 10 pieces of candy 

Neighborhood 2 
Don't go here 

Neighborhood 3 
Start at home 1 and go to home 3 getting 7 pieces of candy
</PRE>

______________________________________________________
3593||||||false||||||

To encourage people to live up to its name--Convivialville--the town has inaugurated the Whoop-de-doo club. The by-laws of the club are as follows: 

<DL COMPACT>
<DT>I.</DT>
<DD>Membership is restricted to two-handed people over the age of 16.  
</DD>
<DT>II.</DT>
<DD>The club will meet at or about 8 PM on Saturdays in the local fire station. 
</DD>
<DT>III.</DT>
<DD>The first member to arrive will not participate in the fun (see below), but will be secretary for the current meeting [hint: don't arrive too early!]. The duty of secretary is preparing a box of 26 name tags labeled only with the upper-case characters A though Z (to keep anonymity), and making sure that at least 26 blindfolds are available 
</DD>
<DT>IV.</DT>
<DD>As members arrive they will randomly choose a name tag from the box. In the rare event the box is empty, those members will be turned away [hint: don't arrive too late!] 
</DD>
<DT>V.</DT>
<DD>At some point in the evening, the secretary blows one blast on a whistle, and everyone puts on a blindfold. Then, when everyone is blindfolded, the secretary blows two blasts, everyone has to move around, and organize themselves such that each hand is holding the hand of a different person. 
</DD>
<DT>VI.</DT>
<DD>When all hands are held, the secretary quickly writes down (for the minutes of the meeting) all pairs of hands held. The notation ``A B" represents that the person with name tag A holds the hand of the person with name tag B. This fact could equivalently have been noted as ``B A" (duh<SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark>) 
</DD>
<DT>VII.</DT>
<DD>The secretary then determines from his/her minutes whether the handholding group forms a single cyclic chain. If it is, the secretary gives a triple blast, and everyone yells ``Whoop-de-doo!" Otherwise, the secretary blows one long blast, and everyone says a mournful ``Ohh". 
</DD>
<DT>VIII.</DT>
<DD>Then everyone removes their blindfolds, has some more fruit punch, and, in any case, goes home with an added sense of conviviality.
</DD>
</DL>

Your job is to make the secretary's job easier by determining, from the notations in the minutes, whether everyone forms a single cyclic chain. Unfortunately, the secretary in his/her eagerness not to overlook any handholding pairs may accidentally include redundant information. In spite of this eagerness, occasionally, he/she may forget to note a handholding pair (but never more than one).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

For each meeting, the first line contains a single integer, <!-- MATH
 $3 \le n \le 100$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3593img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/35/3593img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, represents the number of notations for pairs of hands held. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines each containing two different uppercase letters separated by a single space (using the notation described in by-law VI) , representing a pair of held hands. A value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>
<tex2html_verbatim_mark> represents the end of data.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each meeting there should be an output line looking like

<P>
<BR>

<TT>Meeting <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN>
<tex2html_verbatim_mark>: Whoop-de-doo! <SPAN CLASS="MATH">&lt; <I>list</I> &gt;</SPAN>
<tex2html_verbatim_mark></TT>

<P>
<BR>
or

<P>
<BR>

<TT>Meeting <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN>
<tex2html_verbatim_mark>: Ohh</TT>

<P>
<BR>
where <SPAN CLASS="MATH">&lt; <I>x</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the meeting number starting with 1, and <SPAN CLASS="MATH">&lt; <I>list</I> &gt;</SPAN>
<tex2html_verbatim_mark> is a string representing the chain of people. This list should be the lexicographically smallest string.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
6 
F B
P Y
B P
F B
B F
F Y
6 
A B
B A
F B
C D
D E
E C
2 
A B
B C
7 
A B
B C
D F
D E
E F
E F
F E
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
Meeting 1: Whoop-de-doo! BFYP
Meeting 2: Ohh 
Meeting 3: Whoop-de-doo! ABC 
Meeting 4: Ohh
</PRE> 

______________________________________________________
3594||||||false||||||
<P>A checksum is an algorithm that scans a packet of data and returns a single number. The idea is that if the packet is changed, the checksum will also change, so checksums are often used for detecting transmission errors, validating document contents, and in many other situations where it is necessary to detect undesirable changes in data.<P>For this problem, you will implement a checksum algorithm called Quicksum. A Quicksum packet allows only uppercase letters and spaces. It always begins and ends with an uppercase letter. Otherwise, spaces and letters can occur in any combination, including consecutive spaces.<P>A Quicksum is the sum of the products of each character's position in the packet times the character's value. A space has a value of zero, while letters have a value equal to their position in the alphabet. So, <TT>A</TT>=1, <TT>B</TT>=2, etc., through <TT>Z</TT>=26. Here are example Quicksum calculations for the packets ``<TT>ACM</TT>" and ``<TT>MID CENTRAL</TT>":<P><P><BR><TT>ACM</TT>: <SPAN CLASS="MATH">1 <TT>*</TT> 1 + 2 <TT>*</TT> 3 + 3 <TT>*</TT> 13 = 46</SPAN><P><P><BR><TT>MID CENTRAL</TT>: <SPAN CLASS="MATH">1 <TT>*</TT> 13 + 2 <TT>*</TT> 9 + 3 <TT>*</TT> 4 + 4 <TT>*</TT> 0 + 5 <TT>*</TT> 3 + 6 <TT>*</TT> 5 + 7 <TT>*</TT> 14 + 8 <TT>*</TT> 20 + 9 <TT>*</TT> 18 + 10 <TT>*</TT> 1 + 11 <TT>*</TT> 12 = 650</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more packets followed by a line containing only <TT>#</TT> that signals the end of the input. Each packet is on a line by itself, does not begin or end with a space, and contains from 1 to 255 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each packet, output its Quicksum on a separate line in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ACM 
MID CENTRAL 
REGIONAL PROGRAMMING CONTEST 
ACN 
A C M 
ABC 
BBC 
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
46 
650 
4690 
49 
75 
14 
15
</PRE><P>
______________________________________________________
3595||||||false||||||
<P>This problem is inspired by <SPAN ID="txt48">Pachinko</SPAN>, a popular game in Japan. A traditional Pachinko machine is a cross between a vertical pinball machine and a slot machine. The player launches small steel balls to the top of the machine using a plunger as in pinball. A ball drops through a maze of pins that deflect the ball, and eventually the ball either exits at a hole in the bottom and is lost, or lands in one of many gates scattered throughout the machine which reward the player with more balls in varying amounts. Players who collect enough balls can trade them in for prizes.<P>For the purposes of this problem, a <SPAN CLASS="textit">linear</SPAN> Pachinko machine is a sequence of one or more of the following: holes (``<TT>.</TT>"), floor tiles (``<TT>_</TT>"), walls (``<TT>|</TT>"), and mountains (``<code>/\</code>"). A wall or mountain will never be adjacent to another wall or mountain. To play the game, a ball is dropped at random over some character within a machine. A ball dropped into a hole falls through. A ball dropped onto a floor tile stops immediately. A ball dropped onto the left side of a mountain rolls to the left across any number of consecutive floor tiles until it falls into a hole, falls off the left end of the machine, or stops by hitting a wall or mountain. A ball dropped onto the right side of a mountain behaves similarly. A ball dropped onto a wall behaves as if it were dropped onto the left or right side of a mountain, with a 50<SPAN CLASS="MATH">%</SPAN> chance for each. If a ball is dropped at random over the machine, with all starting positions being equally likely, what is the probability that the ball will fall either through a hole or off an end? For example, consider the following machine, where the numbers just indicate character positions and are not part of the machine itself:<P><P><BR><PRE>
123456789 
/\.|__/\.
</PRE><P><P><BR>The probabilities that a ball will fall through a hole or off the end of the machine are as follows, by position: <SPAN CLASS="MATH">1 = 100%</SPAN>, <SPAN CLASS="MATH">2 = 100%</SPAN>, <SPAN CLASS="MATH">3 = 100%</SPAN>, <SPAN CLASS="MATH">4 = 50%</SPAN>, <SPAN CLASS="MATH">5 = 0%</SPAN>, <SPAN CLASS="MATH">6 = 0%</SPAN>, <SPAN CLASS="MATH">7 = 0%</SPAN>, <SPAN CLASS="MATH">8 = 100%</SPAN>, <SPAN CLASS="MATH">9 = 100%</SPAN>. The combined probability for the whole machine is just the average, which is approximately <SPAN CLASS="MATH">61.111%</SPAN>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input consists of one or more linear Pachinko machines, each 1â79 characters long and on a line by itself, followed by a line containing only "<TT>#</TT>" that signals the end of the input. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each machine, compute as accurately as possible the probability that a ball will fall through a hole or off the end when dropped at random, then output a single line containing that percentage truncated to an integer by dropping any fractional part.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
/\.|__/\. 
_._/\_|.__/\./\_ 
... 
___ 
./\. 
_/\_ 
_|.|_|.|_|.|_ 
____|_____ 
#
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
61 
53 
100 
0 
100 
50 
53 
10
</PRE> 

<P>

______________________________________________________
3596||||||false||||||
<P>The <SPAN CLASS="textit">D-pairs</SPAN> of a string of letters are the ordered pairs of letters that are distance D from each other. A string is <SPAN CLASS="textit">D-unique</SPAN> if all of its D-pairs are different. A string is <SPAN CLASS="textit">surprising</SPAN> if it is D-unique for every possible distance D.<P>Consider the string <TT>ZGBG</TT>. Its 0-pairs are <TT>ZG</TT>, <TT>GB</TT>, and <TT>BG</TT>. Since these three pairs are all different, <TT>ZGBG</TT> is 0-unique. Similarly, the 1-pairs of <TT>ZGBG</TT> are <TT>ZB</TT> and <TT>GG</TT>, and since these two pairs are different, <TT>ZGBG</TT> is 1-unique. Finally, the only 2-pair of <TT>ZGBG</TT> is <TT>ZG</TT>, so <TT>ZGBG</TT> is 2-unique. Thus <TT>ZGBG</TT> is surprising. (Note that the fact that <TT>ZG</TT> is both a 0-pair and a 2-pair of <TT>ZGBG</TT> is irrelevant, because 0 and 2 are different distances.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more nonempty strings of at most 79 uppercase letters, each string on a line by itself, followed by a line containing only an asterisk that signals the end of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each string of letters, output whether or not it is surprising using the exact output format shown below.<P><P><BR><SPAN CLASS="textbf">Acknowledgement:</SPAN> This problem is inspired by the ``Puzzling Adventures" column in the December 2003 issue of <SPAN CLASS="textit">Scientific American</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ZGBG 
X 
EE 
AAB 
AABA
AABB 
BCBABCC 
*
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ZGBG is surprising. 
X is surprising. 
EE is surprising. 
AAB is surprising. 
AABA is surprising. 
AABB is NOT surprising. 
BCBABCC is NOT surprising.
</PRE><P>
______________________________________________________
3597||||||false||||||
<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="796" HEIGHT="248" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/35/p3597.png ALT="\epsfbox{p3597.eps}"></DIV><P>Imagine disks of ice falling, one at a time, into a box, each ending up at the lowest point it can reach without overlapping or moving previous disks. Each disk then freezes into place, so it cannot be moved by later disks. Your job is to find the overall height of the final combination of disks.<P>So that the answer is unique, assume that any disk reaching the bottom of the box rolls as far to the left as possible. Also the data is chosen so there will be a unique lowest position for any disk that does not reach the bottom. The data is also such that there are no ``perfect fits": each disk that lands will be in contact with only two other points, on previous circles or the sides of the box. The illustrations above show white filled disks labeled with the order in which they fall into their boxes. The gray circle in the fourth illustration is not intended to be a disk that fell in. The gray disk is included to demonstrate a point: the gray disk is the same size as disk 2, so there is <SPAN CLASS="textit">space</SPAN> for disk 2 on the very bottom of its box, but disk 2 cannot <SPAN CLASS="textit">reach</SPAN> that position by falling from the top. It gets caught on disk 1 and the side of the box.<P>One way to find the top intersection point of two intersecting circles is as follows. Suppose circle 1 has center <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> and radius <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN>, and suppose circle 2 has center <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>, and radius <SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN>. Also assume that circle 1 is to the left of circle 2, i.e., <!-- MATH
 $x_{1} < x_{2}$
 --><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> &lt; <I>x</I><SUB>2</SUB></SPAN>. Let<P><DL COMPACT><DT></DT><DD><SPAN CLASS="MATH"><I>dx</I> = <I>x</I><SUB>2</SUB> - <I>x</I><SUB>1</SUB></SPAN>,</DD><DT></DT><DD><SPAN CLASS="MATH"><I>dy</I> = <I>y</I><SUB>2</SUB> - <I>y</I><SUB>1</SUB></SPAN>,</DD><DT></DT><DD><SPAN CLASS="MATH"><I>D</I> = <I>sqrt</I>(<I>dx</I> <TT>*</TT> <I>dx</I> + <I>dy</I> <TT>*</TT> <I>dy</I>)</SPAN>,</DD><DT></DT><DD><SPAN CLASS="MATH"><I>E</I> = (<I>r</I>1 <TT>*</TT> <I>r</I>1 - <I>r</I>2 <TT>*</TT> <I>r</I>2 + <I>D</I> <TT>*</TT> <I>D</I>)/(2 <TT>*</TT> <I>D</I>)</SPAN>,</DD><DT></DT><DD><SPAN CLASS="MATH"><I>F</I> = <I>sqrt</I>(<I>r</I>1 <TT>*</TT> <I>r</I>1 - <I>E</I> <TT>*</TT> <I>E</I>)</SPAN>;</DD></DL><P>then the upper intersection point is <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB> + (<I>E</I> <TT>*</TT> <I>dx</I> - <I>F</I> <TT>*</TT> <I>dy</I>)/<I>D</I>, <I>y</I><SUB>1</SUB> + (<I>F</I> <TT>*</TT> <I>dx</I> + <I>E</I> <TT>*</TT> <I>dy</I>)/<I>D</I>)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more data sets, followed by a line containing only 0 that signals the end of the input. Each data set is on a line by itself and contains a sequence of three or more blank-separated positive integers, in the format <SPAN CLASS="MATH"><I>w</I>, <I>n</I>, <I>d</I><SUB>1</SUB>, <I>d</I><SUB>2</SUB>, <I>d</I><SUB>3</SUB>,..., <I>d</I><SUB>n</SUB></SPAN>, where <SPAN CLASS="MATH"><I>w</I></SPAN> is the width of the box, <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of disks, and the remaining numbers are the diameters of the disks, in the order in which they fall into the box. You can assume that <SPAN CLASS="MATH"><I>w</I> &lt; 100</SPAN>, that <SPAN CLASS="MATH"><I>n</I> &lt; 10</SPAN>, and that each diameter is less than <SPAN CLASS="MATH"><I>w</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, output a single line containing the height of the pile of disks, rounded to two places beyond the decimal point.<P>The example data matches the illustrations above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 3 5 2 3 
8 2 5 5 
11 3 10 2 4 
9 3 4 4 6 
10 6 5 4 6 3 5 2 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5.00 
9.00 
12.99 
9.58 
14.19
</PRE><P>
______________________________________________________
3598||||||false||||||
<P>
For this problem you will write a search engine that takes a query, searches a collection of words, and finds the lexicographically smallest word that matches the query (i.e., the matching word that would appear first in an English dictionary). A <SPAN  CLASS="textit">query</SPAN> is a sequence of one or more terms separated by single vertical bars (``<TT>|</TT>"). A <SPAN  CLASS="textit">term</SPAN> is one or more letters followed by zero or more signed letters. A <SPAN  CLASS="textit">signed</SPAN> letter is either <TT>+</TT><SPAN CLASS="MATH"><I>s</I></SPAN> (`positive" <SPAN CLASS="MATH"><I>s</I></SPAN>) or <TT>-</TT><SPAN CLASS="MATH"><I>s</I></SPAN> (``negative" <SPAN CLASS="MATH"><I>s</I></SPAN>), where <SPAN CLASS="MATH"><I>s</I></SPAN> is a single letter. All letters are lowercase, and no letter will appear more than once within a term. A query will not contain spaces. A term matches a word if the word contains at least one of the unsigned letters, all of the positive letters, and none of the negative letters; a query matches a word if at least one of its terms matches the word. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input consists of one or more test cases followed by a line containing only ``<TT>#</TT>" that signals the end of the input. Each test case consists of 1â100 words, each on a line by itself, followed by a line containing only ``<TT><SPAN CLASS="MATH"><TT>*</TT></SPAN></TT>" that marks the end of the word list, followed by one or more queries, each on a line by itself, followed by a line containing only ``<TT><SPAN CLASS="MATH"><TT>*</TT> <TT>*</TT></SPAN></TT>" that marks the end of the test case. Each word will consist of 1-20 lowercase letters. All words within a test case will be unique. Each query will be as defined above and will be 1-79 characters long. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each query, output a single line containing the lexicographically smallest word <SPAN  CLASS="textit">within that test case</SPAN> that matches the query, or the word <TT>NONE</TT> if there is no matching word. At the end of each test case, output a dollar sign on a line by itself. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
elk 
cow 
bat 
* 
ea 
acm+e 
nm+o|jk+l 
** 
debian 
slackware 
gentoo 
ubuntu 
suse 
fedora 
mepis 
* 
yts 
cab-e+n 
r-e|zjq|i+t|vs-p+e-u-c 
** 
#
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
bat 
NONE 
elk 
$ 
gentoo 
ubuntu 
NONE 
$
</PRE> 

<P>

______________________________________________________
3599||||||false||||||
<P>The Gorelians travel through space using warp links. Travel through a warp link is instantaneous, but for safety reasons, an individual can only warp once every 10 hours. Also, the cost of creating a warp link increases directly with the linear distance between the link endpoints.<P>The Gorelians, being the dominant force in the known universe, are often bored, so they frequently conquer new regions of space in the following manner.<P><OL><LI>The initial invasion force finds a suitable planet and conquers it, establishing a Regional Gorelian Galactic Government, hereafter referred to as the RGGG, that will govern all Gorelian matters in this region of space. </LI><LI>When the next planet is conquered, a single warp link is constructed between the new planet and the RGGG planet. Planets connected via warp links in this manner are said to be part of the Regional Gorelian Planetary Network, that is, the RGPN. </LI><LI>As additional planets are conquered, each new planet is connected with a single warp link to the nearest planet already in the RGPN, thus keeping the cost of connecting new planets to the network to a minimum. If two or more planets are equidistant from the new planet, the new planet is connected to whichever of them was conquered first. </LI></OL><P>This causes a problem however. Since planets are conquered in a more-or-less random fashion, after a while, the RGGG will probably not be in an ideal location. Some Gorelians needing to consult with the RGGG might only have to make one or two warps, but others might require dozens--very inconvenient when one considers the 10-hour waiting period between warps.<P>So, once each Gorelian year, the RGGG analyzes the RGPN and relocates itself to an optimal location. The optimal location is defined as a planet that minimizes the maximum number of warps required to reach the RGGG from any planet in the RGPN. As it turns out, there is always exactly one or two such planets. When there are two, they are always directly adjacent via a warp link, and the RGGG divides itself evenly between the two planets.<P>Your job is to write a program that finds the optimal planets for the RGGG. For the purposes of this problem, the region of space conquered by the Gorelians is defined as a cube that ranges from (0,0,0) to (1000,1000,1000).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a set of scenarios where the Gorelians conquer a region of space. Each scenario is independent. The first line of the scenario is an integer <SPAN CLASS="MATH"><I>N</I></SPAN> that specifies the total number of planets conquered by the Gorelians. The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines of the input specify, in the order conquered, the <SPAN CLASS="MATH"><I>ID</I></SPAN>s and coordinates of the conquered planets to be added to the RGPN, in the format <SPAN CLASS="MATH"><I>ID</I>&nbsp;<I>X</I>&nbsp;<I>Y</I>&nbsp;<I>Z</I></SPAN>. An <SPAN CLASS="MATH"><I>ID</I></SPAN> is an integer from 1 to 1000. <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN>, and <SPAN CLASS="MATH"><I>Z</I></SPAN> are integers from 0 to 1000. A single space separates the numbers. A value of <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> marks the end of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input scenario, output the <SPAN CLASS="MATH"><I>ID</I></SPAN>s of the optimal planet or planets where the RGGG should relocate. For a single planet, simply output the planet <SPAN CLASS="MATH"><I>ID</I></SPAN>. For two planets, output the planet <SPAN CLASS="MATH"><I>ID</I></SPAN>s, smallest <SPAN CLASS="MATH"><I>ID</I></SPAN> first, separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
1 0 0 0 
2 0 0 1 
3 0 0 2 
4 0 0 3 
5 0 0 4 
5 
1 0 0 0 
2 1 1 0 
3 3 2 0 
4 2 1 0 
5 3 0 0 
10 
21 71 76 4 
97 32 5 69 
70 33 19 35 
3 79 81 8 
31 91 17 67 
52 31 48 75 
48 90 14 4 
41 73 2 21 
83 74 41 69 
26 32 30 24 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
2 4 
31 97
</PRE><P>
______________________________________________________
3600||||||false||||||
<P>Given positive integers <SPAN CLASS="MATH"><I>B</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>, find an integer <SPAN CLASS="MATH"><I>A</I></SPAN> such that <SPAN CLASS="MATH"><I>A</I><SUP>N</SUP></SPAN> is as close as possible to <SPAN CLASS="MATH"><I>B</I></SPAN>. (The result <SPAN CLASS="MATH"><I>A</I></SPAN> is an approximation to the <SPAN CLASS="MATH"><I>N</I></SPAN>th root of <SPAN CLASS="MATH"><I>B</I></SPAN>.) Note that <SPAN CLASS="MATH"><I>A</I><SUP>N</SUP></SPAN> may be less than, equal to, or greater than <SPAN CLASS="MATH"><I>B</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more pairs of values for <SPAN CLASS="MATH"><I>B</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>. Each pair appears on a single line, delimited by a single space. A line specifying the value zero for both <SPAN CLASS="MATH"><I>B</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN> marks the end of the input. The value of <SPAN CLASS="MATH"><I>B</I></SPAN> will be in the range 1 to 1,000,000 (inclusive), and the value of <SPAN CLASS="MATH"><I>N</I></SPAN> will be in the range 1 to 9 (inclusive).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each pair <SPAN CLASS="MATH"><I>B</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN> in the input, output <SPAN CLASS="MATH"><I>A</I></SPAN> as defined above on a line by itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3 
5 3 
27 3 
750 5 
1000 5 
2000 5 
3000 5 
1000000 5 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
2 
3 
4 
4 
4 
5 
16

______________________________________________________
3601||||||false||||||
<DIV ALIGN="CENTER"><IMG WIDTH="540" HEIGHT="335" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3601.jpg ALT="\epsfbox{p3601.eps}"> <tex2html_verbatim_mark></DIV>Digital clocks usually show the time in the form <SPAN CLASS="MATH"><I>hh</I> : <I>mm</I> : <I>ss</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>hh</I></SPAN> <tex2html_verbatim_mark> is a number between 00 and 23, and both <SPAN CLASS="MATH"><I>mm</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>ss</I></SPAN> <tex2html_verbatim_mark> are numbers between 00 and 59. Removing the colons from <SPAN CLASS="MATH"><I>hh</I> : <I>mm</I> : <I>ss</I></SPAN> <tex2html_verbatim_mark> will result in an integer <SPAN CLASS="MATH"><I>hhmmss</I></SPAN> <tex2html_verbatim_mark>, which is called a <SPAN CLASS="textit">clock integer</SPAN>. For example, the clock integer of <TT>17:05:13</TT> is 170513 and the clock integer of <TT>00:07:37</TT> is 737. You are given a time interval and you are to determine the number of clock integers in it that are multiples of 3. A time interval will be given by specifying its start and end time. For example, the time interval [<TT>00:59:58, 01:01:24</TT>] has a total of 1+1+60+25=87 clock integers, namely, 5958, 5959, 10000 through 10059, and 10100 through 10124. How many of them are multiples of 3? Note that a time interval that includes midnight may have a start time greater than its end time, as in [<TT>22:47:03, 01:03:24</TT>]. You may assume that a time interval is at least one second long and shorter than 24 hours. Write a program that can determine the number of multiples of 3 in a time interval.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case consists of a single line that contains the start time and end time of a time interval, which are separated by a single space.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Your program is to write to standard output. Each test case outputs exactly one line. Print the number of multiples of 3 among the clock integers in the time interval. The following shows a sample input with three test cases and its output.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 
00:59:58 01:01:24 
22:47:03 01:03:24 
00:00:09 00:03:37
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
29 
2727 
70
</PRE>
______________________________________________________
3602||||||false||||||
<DIV ALIGN="CENTER"><IMG WIDTH="422" HEIGHT="596" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3602.jpg ALT="\epsfbox{p3602.eps}"> <tex2html_verbatim_mark> Figure 1.</DIV>DNA (Deoxyribonucleic Acid) is the molecule which contains the genetic instructions. It consists of four different nucleotides, namely Adenine, Thymine, Guanine, and Cytosine as shown in Figure 1. If we represent a nucleotide by its initial character, a DNA strand can be regarded as a long string (sequence of characters) consisting of the four characters A, T, G, and C. For example, assume we are given some part of a DNA strand which is composed of the following sequence of nucleotides:<P><BR>``Thymine-Adenine-Adenine-Cytosine-Thymine-Guanine-Cytosine-Cytosine-Guanine-Adenine-Thymine"<P><BR>Then we can represent the above DNA strand with the string ``TAACTGCCGAT." The biologist Prof. Ahn found that a gene X commonly exists in the DNA strands of five different kinds of animals, namely dogs, cats, horses, cows, and monkeys. He also discovered that the DNA sequences of the gene X from each animal were very alike. See Figure 2.<P><BR><DIV ALIGN="CENTER"><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=CENTER><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>DNA sequence of gene X</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Cat:</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">GCATATGGCTGTGCA</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Dog:</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">GCAAATGGCTGTGCA</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Horse:</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">GCTAATGGGTGTCCA</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Cow:</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">GCAAATGGCTGTGCA</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Monkey:</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">GCAAATCGGTGAGCA</SPAN></TD></TR></TABLE></DIV><P><BR><DIV ALIGN="CENTER">Figure 2. DNA sequences of gene X in five animals.</DIV><P><BR>Prof. Ahn thought that humans might also have the gene X and decided to search for the DNA sequence of X in human DNA. However, before searching, he should define a representative DNA sequence of gene X because its sequences are not exactly the same in the DNA of the five animals. He decided to use the Hamming distance to define the representative sequence. The Hamming distance is the number of different characters at each position from two strings of equal length. For example, assume we are given the two strings ``<TT>AGCAT</TT>" and ``<TT>GGAAT</TT>." The Hamming distance of these two strings is 2 because the 1st and the 3rd characters of the two strings are different. Using the Hamming distance, we can define a representative string for a set of multiple strings of equal length. Given a set of strings <SPAN CLASS="MATH"><I>S</I> = <I>s</I><SUB>1</SUB>,..., <I>s</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark> of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the consensus error between a string <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and the set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is the sum of the Hamming distances between <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and each <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. If the consensus error between <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is the minimum among all possible strings <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> is called a consensus string of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. For example, given the three strings ``<TT>AGCAT</TT>" ``<TT>AGACT</TT>" and ``<TT>GGAAT</TT>" the consensus string of the given strings is ``<TT>AGAAT</TT>" because the sum of the Hamming distances between ``<TT>AGAAT</TT>" and the three strings is 3 which is minimal. (In this case, the consensus string is unique, but in general, there can be more than one consensus string.) We use the consensus string as a representative of the DNA sequence. For the example of Figure 2 above, a consensus string of gene X is ``<TT>GCAAATGGCTGTGCA</TT>" and the consensus error is 7.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> which are separated by a single space. The integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(4<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3602.jpg ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3602.jpg ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark> represents the number of DNA sequences and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(4<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3602.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3602.jpg ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> represents the length of the DNA sequences, respectively. In each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines, each DNA sequence is given.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Your program is to write to standard output. Print the consensus string in the first line of each case and the consensus error in the second line of each case. If there exists more than one consensus string, print the lexicographically smallest consensus string. The following shows sample input and output for three test cases.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 
5 8 
TATGATAC 
TAAGCTAC 
AAAGATCC 
TGAGATAC 
TAAGATGT 
4 10 
ACGTACGTAC 
CCGTACGTAG 
GCGTACGTAT 
TCGTACGTAA 
6 10 
ATGTTACCAT 
AAGTTACGAT 
AACAAAGCAA 
AAGTTACCTT 
AAGTTACCAA 
TACTTACCAA
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
TAAGATAC 
7 
ACGTACGTAA 
6 
AAGTTACCAA 
12
</PRE>
______________________________________________________
3603||||||false||||||
<DIV ALIGN="CENTER"><IMG WIDTH="255" HEIGHT="255" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3603a.jpg ALT="\epsfbox{p3603a.eps}"> <tex2html_verbatim_mark></DIV>There is a factory where grid panels are produced. Sometimes a newly made panel has some faults, which are holes at grid points of the panel. The workers in the factory gather all panels with faults, and then cut off the portions containing holes, finally replacing them with faultless pieces of panels. They have to cut along grid lines and remove a connected region containing all grid cells adjacent to each hole from a faulty panel. The connected region must satisfy the following conditions:<DL COMPACT><DT>(i)</DT><DD>It contains all grid cells adjacent to each hole.</DD><DT>(ii)</DT><DD>It contains all grid cells on a row or a column of the panel which is selected as a base cutting strip.</DD><DT>(iii)</DT><DD>It is a rectilinear convex polygon.</DD><DT>(iv)</DT><DD>It is a region with the minimum area among all rectilinear polygons satisfying (i), (ii), and (iii).</DD></DL>A polygon is said to be a rectilinear polygon if its boundary consists of horizontal or vertical line segments only. A rectilinear polygon is said to be a rectilinear convex polygon if its intersection with every horizontal or vertical line is either empty or a line segment. For example, consider an <SPAN CLASS="MATH">8&#215;7</SPAN> <tex2html_verbatim_mark> panel with 6 holes in Fig. 1(a). If the fourth row from the bottom is selected as a base cutting strip, a connected region with 29 grid cells is removed (see Fig. 1(b)). If the fourth column from the left is selected, a connected region with 27 grid cells is removed (see Fig. 1(c)), which is the smallest rectilinear convex polygon.<DIV ALIGN="CENTER"><IMG WIDTH="930" HEIGHT="278" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3603a.jpg ALT="\epsfbox{p3603b.eps}"> <tex2html_verbatim_mark> Figure 1</DIV>Given the dimensions of a panel and the positions of holes, write a program for computing the smallest rectilinear convex polygon satisfying the above conditions. Since the area of a grid cell is 1, the area of the rectilinear convex polygon in Fig. 1(c) is 27.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>, the width and the height of a panel, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3603a.jpg ALT="$ \le$"><I>w</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>h</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3603a.jpg ALT="$ \le$">50, 000</SPAN> <tex2html_verbatim_mark>. In the second line, an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3603a.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3603a.jpg ALT="$ \le$">1, 000)</SPAN> <tex2html_verbatim_mark> is given, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of holes. Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contains two integers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3603a.jpg ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3603a.jpg ALT="$ \le$"><I>w</I>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3603a.jpg ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3603a.jpg ALT="$ \le$"><I>h</I>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> represents the coordinate of a hole. Assume that the left-bottom corner of a panel is the origin of the coordinate system. There is a single space between the integers.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Your program is to write to standard output. Print exactly one line for each test case. Print an integer, the area of the rectilinear convex polygon which minimally covers all holes on the panel. The following shows sample input and output for three test cases.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 
4 4 
1 
2 2 
8 7 
6 
2 2 
3 1 
8 3 
5 5 
4 6 
3 4 
12 10 
15 
2 7 
3 8 
4 6 
4 7 
5 5 
5 7 
6 4 
6 5 
7 3 
7 5 
8 2 
8 3 
9 4 
9 5 
10 3
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
6 
27 
44
</PRE>
______________________________________________________
3604||||||false||||||

Kim works in a traveling agency in Korea. Recently, his foreign customer gave him an international call and asked him to make a travel plan in Korea. The customer wants to visit two famous roads along which beautiful flowers are in full blossom. The customer would like to fly to a city in the plan and rent a car, enjoy his travel, and return to the city where he started. He does not want to visit the same city or the same road twice. Also, he hates to travel along any toll roads. It does not matter how many cities are included in the plan. Can Kim make a travel plan satisfying the requirements? 

For example, see the maps in Figure 1. In the figure a circle represents a city and the line between two cities represents the road between them. The two bold lines represent the famous roads that the customer wants to visit and the dotted line is a toll road.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3604.eps}$
 -->
<IMG
 WIDTH="715" HEIGHT="294" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="\epsfbox{p3604.eps}">
<tex2html_verbatim_mark>

Figure 1

</DIV>
In case of Figure 1(a), Kim can make travel plans such as <!-- MATH
 $1 \rightarrow 2 \rightarrow 4 \rightarrow 5 \rightarrow 3 \rightarrow 1$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \rightarrow$"> 2 <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \rightarrow$"> 4 <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \rightarrow$"> 5 <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \rightarrow$"> 3 <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \rightarrow$"> 1</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $2 \rightarrow 3 \rightarrow 5 \rightarrow 4 \rightarrow 2$
 -->
<SPAN CLASS="MATH">2 <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \rightarrow$"> 3 <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \rightarrow$"> 5 <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \rightarrow$"> 4 <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \rightarrow$"> 2</SPAN>
<tex2html_verbatim_mark>. In case of Figure 1(b), Kim can not make any plan satisfying the requirements. 

You are to write a program to help Kim. For a given map with two famous roads and some toll roads, your program should determine whether there can be a travel plan satisfying the requirements.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> , the number of cities and the number of roads in the map, respectively, where <!-- MATH
 $5 \le N \le 1000$
 -->
<SPAN CLASS="MATH">5<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>. In the next <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> lines, each line contains two positive integers that represent a road connecting two cities. In the next two lines, each line contains a road that the customer wants to visit. In the next line, the number of toll roads <SPAN CLASS="MATH"><I>F</I></SPAN>
<tex2html_verbatim_mark> is given, <!-- MATH
 $0 \le F \le M$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \le$"><I>F</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3604.jpg
 ALT="$ \le$"><I>M</I></SPAN>
<tex2html_verbatim_mark>. In the next <SPAN CLASS="MATH"><I>F</I></SPAN>
<tex2html_verbatim_mark> lines, each line contains toll roads. Assume the cities are labeled from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> and there is at most one road between two cities. Also, assume the two roads that the customer wants to visit are not toll roads.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Your program is to write to standard output. Print exactly one line for each test case. For each test case, print <TT>YES</TT> if there can be a travel plan satisfying the requirements. Otherwise, print <TT>NO</TT>. 

The following shows sample input and output for three test cases.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3 
6 8
2 1
1 3
4 5
2 4
5 3
2 3
3 6
5 6
3 5
2 4
1 
6 5
6 8
2 1
1 3
4 5
2 4
5 3
2 3
3 6
5 6
2 3
3 5
1 
4 2
5 4
1 2
2 3
3 4
4 5
1 2
4 5
2 
2 3
3 4
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
YES 
NO 
NO
</PRE>

______________________________________________________
3605||||||false||||||

A college student Ji-Sung has a roommate, Young-Pyo, who shares a room with him in the dormitory. Since they have lived together for a long time, they also share household facilities, for example, a hair dryer, an electric iron, a battery charger, etc. So the time periods when they want to use one facility should not overlap. 

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3605a.eps}$
 -->
<IMG
 WIDTH="473" HEIGHT="383" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="\epsfbox{p3605a.eps}">
<tex2html_verbatim_mark>
</DIV>
Some day, Ji-Sung and Young-Pyo both have a sequence of facilities <!-- MATH
 $O_{i_{1}} , O_{i_{2}} , \ldots , O_{i_{n}}$
 -->
<SPAN CLASS="MATH"><I>O</I><SUB>i<SUB>1</SUB></SUB>, <I>O</I><SUB>i<SUB>2</SUB></SUB>,..., <I>O</I><SUB>i<SUB>n</SUB></SUB></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $O_{j_{1}} , O_{j_{2}} , \ldots , O_{j_{m}}$
 -->
<SPAN CLASS="MATH"><I>O</I><SUB>j<SUB>1</SUB></SUB>, <I>O</I><SUB>j<SUB>2</SUB></SUB>,..., <I>O</I><SUB>j<SUB>m</SUB></SUB></SPAN>
<tex2html_verbatim_mark> , respectively, which they want to use in this order. Here a facility can be used more than once, that is, <!-- MATH
 $O_{i_{k}} = O_{i_{l}}$
 -->
<SPAN CLASS="MATH"><I>O</I><SUB>i<SUB>k</SUB></SUB> = <I>O</I><SUB>i<SUB>l</SUB></SUB></SPAN>
<tex2html_verbatim_mark> , for some <SPAN CLASS="MATH"><I>k</I>, <I>l</I></SPAN>
<tex2html_verbatim_mark>. It takes <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> time units that Ji-Sung and Young-Pyo use the facility <SPAN CLASS="MATH"><I>o</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, respectively. The problem is to minimize the finishing time by which they have used all facilities. 

For example, Ji-Sung and Young-Pyo share household facilities <!-- MATH
 $O_{1}, O_{2}, O_{3}$
 -->
<SPAN CLASS="MATH"><I>O</I><SUB>1</SUB>, <I>O</I><SUB>2</SUB>, <I>O</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> which they use during 1, 2, 1 and 2, 1, 3 time units, respectively. At some day, they use the facilities <!-- MATH
 $O_{1}, O_{3}, O_{1}, O_{2}$
 -->
<SPAN CLASS="MATH"><I>O</I><SUB>1</SUB>, <I>O</I><SUB>3</SUB>, <I>O</I><SUB>1</SUB>, <I>O</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $O_{1}, O_{2}, O_{1} , O_{3}$
 -->
<SPAN CLASS="MATH"><I>O</I><SUB>1</SUB>, <I>O</I><SUB>2</SUB>, <I>O</I><SUB>1</SUB>, <I>O</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> in order, respectively. Then the following figure represents the schedule which minimizes the finishing time. The minimum finishing time is 8 in this example.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3605b.eps}$
 -->
<IMG
 WIDTH="912" HEIGHT="217" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="\epsfbox{p3605b.eps}">
<tex2html_verbatim_mark>
</DIV>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given on the first line of the input. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> , <!-- MATH
 $1 \le n \le 50$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="$ \le$">50</SPAN>
<tex2html_verbatim_mark>, the number of facilities. The second and third line of each test case contain a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> integers between 1 and 100, where the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th number, <!-- MATH
 $1 \le i \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="$ \le$"><I>n</I></SPAN>
<tex2html_verbatim_mark>, represents the number of time units during which Ji-Sung and Young-Pyo use the facility <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>, respectively. The fourth line of each test case contains two integer numbers <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="$ \alpha$"></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="$ \beta$"></SPAN>
<tex2html_verbatim_mark> , <!-- MATH
 $1 \le \alpha$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="$ \le$"><IMG
 WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="$ \alpha$"></SPAN>
<tex2html_verbatim_mark> , <!-- MATH
 $\beta \le 300$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="$ \beta$"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3605a.jpg
 ALT="$ \le$">300</SPAN>
<tex2html_verbatim_mark> , the lengths of the sequences of facilities which Ji-Sung and Young-Pyo will use at the day, respectively. The fifth and sixth line of each test case contain a sequence of integers between 1 and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, representing a sequence of facilities which Ji-Sung and Young-Pyo will use in order at the day, respectively.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Your program is to write to standard output. Print exactly one line for each test case. The line contains the minimum time by which both Ji-Sung and Young-Pyo finish to use all the facilities. 

The following shows sample input and ouput for three test cases.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3 
2 
1 2 
2 1 
2 2 
1 2 
1 2 
2 
2 1 
1 3 
3 2 
1 2 1
2 1 
3 
2 1 3 
1 2 1
4 4 
1 2 1 3 
1 3 1 2
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
4 
6 
8
</PRE>

______________________________________________________
3606||||||false||||||

We have <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> test tubes <SPAN CLASS="MATH">{<I>t</I><SUB>i</SUB>}</SPAN>
<tex2html_verbatim_mark> containing different liquid chemicals. And we have <SPAN CLASS="MATH"><I>M</I>&nbsp;<I>mg</I></SPAN>
<tex2html_verbatim_mark> (milligram) of another chemical C in a beaker. If we put <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> mg of C into a test tube <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> , then G (a sort of gas) is produced in <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. The amount of G produced in each <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is determined by a linear <SPAN  CLASS="textit">tube</SPAN> function <!-- MATH
 $f (x_{i}) = a_{i} \cdot x_{i} + b_{i}$
 -->
<SPAN CLASS="MATH"><I>f</I> (<I>x</I><SUB>i</SUB>) = <I>a</I><SUB>i</SUB><SUP> . </SUP><I>x</I><SUB>i</SUB> + <I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> (unit is <SPAN  CLASS="textit">mg</SPAN>), where <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is the amount of C put into <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. Note that we can only measure integer amount of C, and so every <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> should be an integer.

Assume that <!-- MATH
 $f_{3}(x) = 3 \bullet x + 2$
 -->
<SPAN CLASS="MATH"><I>f</I><SUB>3</SUB>(<I>x</I>) = 3<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3606img1.png
 ALT="$ \bullet$"><I>x</I> + 2</SPAN>
<tex2html_verbatim_mark> for test tube <SPAN CLASS="MATH"><I>t</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark>. If we put <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>=40 <SPAN  CLASS="textit">mg</SPAN> of C into <SPAN CLASS="MATH"><I>t</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> , then 122 <SPAN  CLASS="textit">mg</SPAN> of G is produced. This experiment has a requirement, that is, we must equalize the amount of G produced in every <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> by carefully distributing <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> over all <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> tubes, that is <!-- MATH
 $x_{1} + x_{2} + \ldots + x_{n} = M$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> + <I>x</I><SUB>2</SUB> +...+ <I>x</I><SUB>n</SUB> = <I>M</I></SPAN>
<tex2html_verbatim_mark>. 

For example, if we have only three test tubes with tube functions <!-- MATH
 $f_{1}(x) = 3 \bullet x + 5$
 -->
<SPAN CLASS="MATH"><I>f</I><SUB>1</SUB>(<I>x</I>) = 3<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3606img1.png
 ALT="$ \bullet$"><I>x</I> + 5</SPAN>
<tex2html_verbatim_mark> , <!-- MATH
 $f_{2}(x) = 4 \bullet x + 3$
 -->
<SPAN CLASS="MATH"><I>f</I><SUB>2</SUB>(<I>x</I>) = 4<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3606img1.png
 ALT="$ \bullet$"><I>x</I> + 3</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $f_{3}(x) = 1 \bullet x + 7$
 -->
<SPAN CLASS="MATH"><I>f</I><SUB>3</SUB>(<I>x</I>) = 1<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3606img1.png
 ALT="$ \bullet$"><I>x</I> + 7</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I> = 27</SPAN>
<tex2html_verbatim_mark>, then we can make 23 <SPAN  CLASS="textit">mg</SPAN> of G in each tube by assigning <!-- MATH
 $x_{1} = 6, x_{2} = 5, x_{3} = 16$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> = 6, <I>x</I><SUB>2</SUB> = 5, <I>x</I><SUB>3</SUB> = 16</SPAN>
<tex2html_verbatim_mark>. But it is impossible to equalize the amount of G produced in each tube if we are given <SPAN CLASS="MATH"><I>M</I> = 26</SPAN>
<tex2html_verbatim_mark>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>n</I> &lt; 20</SPAN>
<tex2html_verbatim_mark>, the number of integer pairs, <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. A pair of two integers, <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, is given in the following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines. And finally <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark>, the initial amount of C is given in the next line. There is at least a single space between <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> , where <!-- MATH
 $1 \le a_{i} \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3606img1.png
 ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3606img1.png
 ALT="$ \le$">10</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $1 \le b_{i} \le 1,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3606img1.png
 ALT="$ \le$"><I>b</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3606img1.png
 ALT="$ \le$">1, 000</SPAN>
<tex2html_verbatim_mark>. And <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> is a positive integer less than 10,000.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Your program is to write to standard output. Print exactly one line for each test case. Print the amount of G produced in each tube, if it is possible to equalize the amount of in each tube. Print `<TT>0</TT>', if it is impossible to equalize the amount of G in each tube. 

The following shows sample input and output for three test cases.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3 
3 
3 5 4 3 1 7 
27 
3 
3 5 4 3 1 7 
26 
8 
2 156 2 2 2 216 4 12 3 24 5 36 1 96 3 6 
695
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
23 
0 
276
</PRE>

______________________________________________________
3607||||||false||||||

You have <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> points <!-- MATH
 $P = \{ p_{1} , p_{2} , \ldots, p_{n}\}$
 -->
<SPAN CLASS="MATH"><I>P</I> = {<I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>n</SUB>}</SPAN>
<tex2html_verbatim_mark> in the plane. The points should be connected to form a tree. But you know only the degree information of points of the tree (not the tree itself). Each point <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> has degree <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, which means that <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is connected to <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> other points of <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>. Figure 1(a) shows an example in which each point is associated with its degree. Figure 1(b) shows a tree for the point set in Figure 1(a) such that a node of the tree corresponds to a point <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> in one-to-one manner and its degree is <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. Tree edges must be drawn as straight-line segments and they do not cross each other.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3607.eps}$
 -->
<IMG
 WIDTH="900" HEIGHT="419" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3607.jpg
 ALT="\epsfbox{p3607.eps}">
<tex2html_verbatim_mark>

Figure 1

</DIV>
The formal definition of the problem is as follows. You are given a point set <!-- MATH
 $P = \{ p_{1} , p_{2} , \ldots , p_{n}\}$
 -->
<SPAN CLASS="MATH"><I>P</I> = {<I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>n</SUB>}</SPAN>
<tex2html_verbatim_mark> in the plane where each <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> has a positive integral value <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> as its degree; the degrees satisfy

<P><!-- MATH
 \begin{displaymath}
\sum^{n}_{i=1}d_{i}=2n-2
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<IMG
 WIDTH="28" HEIGHT="63" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3607.jpg
 ALT="$\displaystyle \sum^{{n}}_{{i=1}}$"><I>d</I><SUB>i</SUB> = 2<I>n</I> - 2
</DIV><P>
<tex2html_verbatim_mark></P>
It is known that it is always possible to draw a tree such that each tree node of degree <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> corresponds to a point <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and each edge is drawn as a straight-line segment without edge crossings. Your program should find the tree for a given input.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Your program is to read the input from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, the number of input points, <!-- MATH
 $4 \le n \le 1,000$
 -->
<SPAN CLASS="MATH">4<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3607.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3607.jpg
 ALT="$ \le$">1, 000</SPAN>
<tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines contain <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinates, <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinates, degrees of the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> points; the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th line represents the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th point <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and contains three positive integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. The values <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are separated by a single space, and <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are between 1 and 10,000, both inclusive.

The input points are such that no three or more points lie on the same line, all <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinates are distinct, and all <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinates are distinct.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Your program is to write to standard output. Print edges of the tree in <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>
<tex2html_verbatim_mark> lines for each test case. Note that the solution for each test case is not unique. Each line contains an edge of the tree â if the edge connects two points <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I><SUB>j</SUB></SPAN>
<tex2html_verbatim_mark>, then just print <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>, separated by a single space. 

The following shows sample input and output for three test cases.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3 
4 
1 5 1 
2 1 1 
3 3 3 
5 2 1 
6 
6 6 1 
5 4 3 
1 1 2 
2 7 1 
3 2 2 
4 8 1 
8 
1 1 1 
2 6 2 
3 8 1 
4 4 3 
6 7 3 
7 2 2 
8 3 1  
10 9 1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
3 2
3 1
3 4
3 4
3 5
5 2
2 6
2 1
1 2
2 4
4 5
4 6
5 3
5 8
7 6
</PRE>

______________________________________________________
3608||||||false||||||

Given two strings <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> over an alphabet <SPAN CLASS="MATH"><IMG
 WIDTH="21" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3608img1.png
 ALT="$ \sum$"></SPAN>
<tex2html_verbatim_mark>, the <SPAN  CLASS="textit">edit distance</SPAN> between <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> is the minimum number of edit operations needed to convert <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>. The three edit operations are the following: 

<DL COMPACT>
<DT>(i)</DT>
<DD><SPAN  CLASS="textit">change</SPAN>: replace one character of <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> by another single character of <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>. 
</DD>
<DT>(ii)</DT>
<DD><SPAN  CLASS="textit">deletion</SPAN>: delete one character from <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>. 
</DD>
<DT>(iii)</DT>
<DD><SPAN  CLASS="textit">insertion</SPAN>: insert one character of <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>. 
</DD>
</DL>

For example, the following figure shows that the edit distance between the strings <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>=<TT>abcdefg</TT> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>=<TT>ahcefig</TT> is 3. The edit operations are a change (i.e., replacing <TT>b</TT> of <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> by <TT>h</TT> of <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>), a deletion (i.e., deleting <TT>d</TT> from <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>), and an insertion (i.e., inserting <TT>i</TT> of <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>).

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3608.eps}$
 -->
<IMG
 WIDTH="752" HEIGHT="255" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3608img1.png
 ALT="\epsfbox{p3608.eps}">
<tex2html_verbatim_mark>
</DIV>
We now define a period of a repetitive string as follows: The string <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> is called the exact period of a string <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> can be written as <SPAN CLASS="MATH"><I>x</I> = <I>p</I><SUP>k</SUP></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3608img1.png
 ALT="$ \ge$">1</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> is the shortest string. For example, if <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> =<TT>abababab</TT> then <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> = (<TT>abababab</TT>)<SPAN CLASS="MATH"><SUP>1</SUP></SPAN>
<tex2html_verbatim_mark> = (<TT>abab</TT>)<SPAN CLASS="MATH"><SUP>2</SUP></SPAN>
<tex2html_verbatim_mark> = (<TT>ab</TT>)<SPAN CLASS="MATH"><SUP>4</SUP></SPAN>
<tex2html_verbatim_mark>. Thus, the string <TT>ab</TT> is the exact period of <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>. 

We define an approximate period similarly. Given two strings <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>, suppose that the string <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> is partitioned into substrings <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le i \le t$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3608img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3608img1.png
 ALT="$ \le$"><I>t</I></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is not a null string, i.e., <!-- MATH
 $x = p_{1} \cdot p_{2} \cdot p_{3} \cdots p_{t}$
 -->
<SPAN CLASS="MATH"><I>x</I> = <I>p</I><SUB>1</SUB><SUP> . </SUP><I>p</I><SUB>2</SUB><SUP> . </SUP><I>p</I><SUB>3</SUB><SUP> ... </SUP><I>p</I><SUB>t</SUB></SPAN>
<tex2html_verbatim_mark>. If the edit distance between a string <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> and each substring <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is less than or equal to an integer <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>, string <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is called a <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>-<SPAN  CLASS="textit">approximate period</SPAN> of string <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>. 

In this problem, given two strings <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>, we want to find the minimum <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> such that string <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is a <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>-approximate period of string <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>. For example, suppose that two strings <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> = <TT>abcdabcabb</TT> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>=<TT>abc</TT> are given. Since <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> may be partitioned into <!-- MATH
 $x = p_{1} \cdot p_{2} \cdot p_{3} = \texttt{abcd} \cdot \texttt{abc} \cdot \texttt{abb}$
 -->
<SPAN CLASS="MATH"><I>x</I> = <I>p</I><SUB>1</SUB><SUP> . </SUP><I>p</I><SUB>2</SUB><SUP> . </SUP><I>p</I><SUB>3</SUB> = <texttt>abcd</texttt><SUP> . </SUP><texttt>abc</texttt><SUP> . </SUP><texttt>abb</texttt></SPAN>
<tex2html_verbatim_mark> and the edit distances between string <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>=<TT>abc</TT> and each substring <TT>abcd</TT>, <TT>abc</TT>, and <TT>abb</TT> equal to 1, 0, and 1, respectively, <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is a 1-approximate period of <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>. Hence, the minimum <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> is one.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. For each test case, a string <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is given in the first line and the string <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> is given in the next line. The length of string <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is at least 1 and at most 50, the length of string <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> is at least 1 and at most 5000, and the alphabet <SPAN CLASS="MATH"><IMG
 WIDTH="21" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3608img1.png
 ALT="$ \sum$"></SPAN>
<tex2html_verbatim_mark> is the set of lowercase English characters.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Your program is to write to standard output. Print exactly one line for each test case. Print the minimum integer value <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> such that string <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is a <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>-approximate period of string <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>. 

The following shows sample input and output for three test cases.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3 
abc 
abcdabcabb 
abab 
abababababab 
xyz 
abcdefghikjlmn
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
1 
0 
3
</PRE>

______________________________________________________
3609||||||false||||||

A mountainous region had many forest fires in the dry season of the last year. Prior to the dry season of this year, to watch the forest fire, you are planning to construct a fire tower which enables us to watch all mountain slopes. To minimize the construction cost, you want to minimize the height of the fire tower. 

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3609a.eps}$
 -->
<IMG
 WIDTH="652" HEIGHT="470" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3609a.jpg
 ALT="\epsfbox{p3609a.eps}">
<tex2html_verbatim_mark>
</DIV>
A polyhedral terrain can be thought of as the surface of a mountain range with flat faces and with no curves or overhangs. In this problem, we consider only the 2-dimensional case, which simplifies the polyhedral terrain into a 2-dimensional <SPAN  CLASS="textit">polygonal chain</SPAN> in the plane. This polygonal chain is represented by <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> consecutive vertices <!-- MATH
 $v_{1} , v_{2} ,\ldots, v_{n}$
 -->
<SPAN CLASS="MATH"><I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>,..., <I>v</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> that are given by increasing order of <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinate of the vertices and <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>
<tex2html_verbatim_mark> edges which connect two adjacent vertices <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>i+1</SUB></SPAN>
<tex2html_verbatim_mark> for <!-- MATH
 $1 \le i \le n â 1$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3609a.jpg
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3609a.jpg
 ALT="$ \le$"><I>n</I>â1</SPAN>
<tex2html_verbatim_mark>. 

Following figure shows the minimum height fire tower of a polygonal chain.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3609b.eps}$
 -->
<IMG
 WIDTH="856" HEIGHT="765" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3609a.jpg
 ALT="\epsfbox{p3609b.eps}">
<tex2html_verbatim_mark>
</DIV>
Your task is to compute the minimum height of the fire tower on a polygonal chain such that every point on the polygonal chain is visible from the top of the fire tower. Note that the fire tower can be placed on a vertex or an edge of the polygonal chain. You can assume that there are no cases where the minimum height of the fire tower is zero.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, the number of input points, <!-- MATH
 $4 \le n \le 1,000$
 -->
<SPAN CLASS="MATH">4<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3609a.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3609a.jpg
 ALT="$ \le$">1, 000</SPAN>
<tex2html_verbatim_mark>. In the next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines, the coordinates of a polygonal chain's vertices are given in increasing order of <SPAN CLASS="MATH"><I>x</I></SPAN><tex2html_verbatim_mark>-coordinate. Each line contains two positive integers <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> that represent the coordinates of the vertex, <SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3609a.jpg
 ALT="$ \le$"><I>x</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $y \le 100,000$
 -->
<SPAN CLASS="MATH"><I>y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3609a.jpg
 ALT="$ \le$">100, 000</SPAN>
<tex2html_verbatim_mark>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Your program is to write to standard output. Print exactly one line for each test case. For each test case, print the minimum height of the fire tower that watches the given polygonal chain with rounded one fractional digit. If the height of the fire tower is greater than 1,000 then print <TT>IMPOSSIBLE</TT>. 

The following shows a sample input with three test cases and its output.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3 
12 
1 8 
3 11 
5 1 
7 4 
9 3 
10 1 
12 7 
14 4 
16 3 
19 2 
20 13 
22 12 
11 
11 9 
16 215 
21 9 
26 215 
31 9 
36 1 
41 9 
46 215 
51 9 
56 215 
61 9 
8 
7 8 
12 18 
17 8 
27 23 
37 23 
47 8 
52 18 
57 8
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
10.5 
IMPOSSIBLE 
35.0
</PRE>

______________________________________________________
3610||||||false||||||

There are sports facilities in the mountain at the back of our village for the villagers to build up their physical strength. One of the facilities consists of many logs placed along a straight trail through the forest. All the logs are of the same length and are placed in a parallel direction to the trail. `Log jumping' is one of the famous games played in the facility. The game, which involves mental skills, is to visit as many logs as possible in the following way.

<OL>
<LI>One first selects an arbitrary log and visits the log. Visiting means jumping on the log. Moving on the log is allowed. 
</LI>
<LI>Next, he/she selects an unvisited log and visits it. The direction of jumping should be perpendicular to the direction of logs. Repeat Step 2 if he/she wants. 
</LI>
<LI>The last log visited should be identical to the first one. Visiting a log except the first/last one is allowed at most one time. When one returns to the first log, the game ends.
</LI>
</OL>

For example, let us have eight logs of length five numbered from 1 to 8 as depicted in the figure below. Starting with Log 2, we can jump on Log 4, then jump on Log 7, Log 8, Log 5, and finally we can return to Log 2 visiting totally five logs. We can not visit more than five logs according to the above way, so the maximum number of logs one can visit is five.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3610.eps}$
 -->
<IMG
 WIDTH="943" HEIGHT="242" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3610.jpg
 ALT="\epsfbox{p3610.eps}">
<tex2html_verbatim_mark>
</DIV>
Given the length and positions of logs, Ha-Jin wants to find an efficient method to determine the maximum number of logs she can visit. Write a program that can help her. When the position of the right endpoint of a log coincides with the position of the left endpoint of another log, it is assumed that one can jump from one log to the other log, and vice versa. In the above figure, jumping from Log 1 to Log 4 or jumping from Log 4 to Log 1 is possible.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> which represent the number and the length of logs, respectively, <!-- MATH
 $1 \le n \le 5,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3610.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3610.jpg
 ALT="$ \le$">5, 000</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le k \le 100,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3610.jpg
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3610.jpg
 ALT="$ \le$">100, 000</SPAN>
<tex2html_verbatim_mark>. In the next line, <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> integers <!-- MATH
 $x_{1}, x_{2}, \ldots, x_{n}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> are given. Here, <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le i \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3610.jpg
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3610.jpg
 ALT="$ \le$"><I>n</I></SPAN>
<tex2html_verbatim_mark>, represents the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinate of the left endpoint of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th log, <!-- MATH
 $- 1,000,000 \le x_{i} \le 1,000,000$
 -->
<SPAN CLASS="MATH">-1, 000, 000<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3610.jpg
 ALT="$ \le$"><I>x</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3610.jpg
 ALT="$ \le$">1, 000, 000</SPAN>
<tex2html_verbatim_mark>. There is a single space between two integers given in the same line.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Your program is to write to standard output. Print exactly one line for each test case. The line should contain the maximum number of logs one can visit. 

The following shows sample input and output for four test cases.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
4 
8 5 
-4 4 -5 1 7 -3 4 7 
4 5 
-5 -4 -3 1 
2 10 
-1 5 
2 3 
-1 5
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<PRE>
5 
4 
2 
1
</PRE>

______________________________________________________
3611||||||false||||||
<P>You have an insider at the New York Times who sends you a list of the answers for the crossword puzzle, but his list does not say which answer goes with which clue. His list occasionally contains errors or omissions, but is usually correct. Given the list of answers and the shape of the crossword puzzle, figure out a valid assignment.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of one or more problem sets.<P>Each problem set begins with a line containing two integers <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>. Zero values for these will indicate the end of the problem sets. <SPAN CLASS="MATH"><I>M</I></SPAN> denotes the number of words to be placed into the puzzle and will be in the range <SPAN CLASS="MATH">1...150</SPAN>. <SPAN CLASS="MATH"><I>N</I></SPAN> denotes the number of rows in the puzzle and will be in the range <SPAN CLASS="MATH">1...16</SPAN>. This is followed by <SPAN CLASS="MATH"><I>M</I></SPAN> lines, each containing a single word, left-justified on the line. A word will contain only alphabetic characters and words will not be duplicated within any problem set. Words will be <SPAN CLASS="MATH">2...16</SPAN> characters in length. This is followed by <SPAN CLASS="MATH"><I>N</I></SPAN> lines denoting a puzzle template as a series of `<TT>.</TT>' and `<TT>#</TT>' characters, left-justified and followed immediately by the end of line. Each line will contain the same number of these characters. That number may range from <SPAN CLASS="MATH">1...16</SPAN>. A `<TT>.</TT>' indicates a position in the puzzle where a character may be written. A `<TT>#</TT>' indicates a position at which a character may not appear.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program should determine if all the given words can be arranged into the puzzle template in such a way as to leave no `<TT>.</TT>' positions unfilled and without filling any `<TT>#</TT>' positions. Vertical and horizontal words may intersect at a common letter, but two horizontal or two vertical words may neither intersect nor be adjacent to one another without at least one intervening `<TT>#</TT>'. Your program should print the string ``<TT>Problem</TT>" followed by the problem set number. If no solution is possible, it should then print, on the remainder of that output line, the string ``<TT>: No layout is possible.</TT>". If a solution is possible, then the program should, beginning on the next line after the problem set number, print the <SPAN CLASS="MATH"><I>N</I></SPAN> lines of the crossword puzzle as presented in the input but with the appropriate characters substituted for the `<TT>.</TT>' positions. If multiple solutions are possible, you may print any solution.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 4 
tow 
cat 
row 
care 
... 
.#. 
... 
.## 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Problem 1 
cat 
a#o 
row 
e## 
Problem 2: no layout is possible.
</PRE><P>
______________________________________________________
3612||||||false||||||
<P>
``The number of infestations is getting worse", said the Ranger. ``If we don't get those moths under control, there won't be a healthy tree left in the whole park. Let me show you." 

<P>
He spread out a map, liberally decorated with red X's. ``With our remote-control camera atop Mount Hiabove, we can easily spot the infested trees. Each mark on this map shows an infested site." 

<P>
``Well", said the Park Manager, ``we have a congressional delegation visiting tomorrow. I don't think they'll be impressed by a map, but if we could show them the feed from that camera as it pans around <SPAN CLASS="MATH">...</SPAN>" 

<P>
``That's a problem", said the Ranger. ``The temperature on the mountain is dropping. By the time they get here, the camera will probably be frozen in place. We better not assume we'll be able to move the camera. And, remember, it doesn't have a very wide field of view. It only shows a rather narrow angle." 

<P>
``We'll have to do the best we can", said the Manager. ``Let's point the camera right now in the direction that will show the most infested trees. Let's see <SPAN CLASS="MATH">...</SPAN>". He began to study the map.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of one or more data sets. 

<P>
In each data set, line 1 contains the non-negative number <SPAN CLASS="MATH"><I>N</I></SPAN> of infested trees. A value of 0 indicates end of input. 

<P>
For each data set, line 2 contains the X,Y coordinates of the camera and the field of view of the camera. Lines <!-- MATH
 $3 \ldots N + 2$
 -->
<SPAN CLASS="MATH">3...<I>N</I> + 2</SPAN> each contain the X,Y coordinates of an infested tree. None of these will be the same as the coordinates of the camera. 

<P>
Coordinates are given as floating point numbers in the range <!-- MATH
 $-500.0 \ldots 500.0$
 -->
<SPAN CLASS="MATH">-500.0...500.0</SPAN>. The field of view is given as a floating-point angle, in degrees, in the range <!-- MATH
 $0.1 \ldots 179.9$
 -->
<SPAN CLASS="MATH">0.1...179.9</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Determine the angle <SPAN CLASS="MATH"><I>A</I></SPAN> that maximizes the number of infested trees visible within the angular range <!-- MATH
 $A \pm V /2$
 -->
<SPAN CLASS="MATH"><I>A</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3612img1.png
 ALT="$ \pm$"><I>V</I>/2</SPAN> where <SPAN CLASS="MATH"><I>V</I></SPAN> is the angular field of view of the camera. The camera positioning system is calibrated in tenths of a degree and ``clicks" into place at each tenth of a degree - intermediate values are not possible. A tree is considered ``visible" if it lies inside the <!-- MATH
 $A \pm V /2$
 -->
<SPAN CLASS="MATH"><I>A</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3612img1.png
 ALT="$ \pm$"><I>V</I>/2</SPAN> - trees that lie exactly on the border are not considered visible.
<B>Note:</B> For contest purposes, judging data will not rely upon calculations resolving trees' locations to within a finer precision than the closest 0.01 degree. 

<P>
The angle 0.0 corresponds to the positive Y axis and the angle 90.0 corresponds to the positive X axis. Assume that distance is not a factor in the visibility of trees. 

<P>
If more than one angle allows viewing of the same maximal number of infestations, choose the smallest such angle. 

<P>
For each input set, produce a single line of output of the form: 

<P>

<P>
<BR>

<PRE>
Point the camera at angle ### to view ## infested trees.
</PRE> 

<P>

<P>
<BR>
The angle should be printed in degrees in the range <!-- MATH
 $0.0 \ldots 359.9$
 -->
<SPAN CLASS="MATH">0.0...359.9</SPAN> with one digit after the decimal. The number of visible infested trees should be printed as an integer.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
5 
25.0 25.0 45.0 
25.5 35.0 
35.0 30.0 
45.0 45.0 
40.0 48.5 
20.0 18.0
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Point the camera at angle 22.6 to view 3 infested trees.
</PRE> 

<P>

______________________________________________________
3613||||||false||||||
<P>Design a program that can read a description of two systems of measurement for some common quantity (e.g., length, weight, area, time, etc.), a conversion rule that relates the two systems to one another, and a quantity expressed in one measurement system, and that can express that same quantity in the other system.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of 1 or more problem sets. Each problem set consists of specifications for two systems of measurement, a conversion rule, and a set of quantities to be converted.<P>Each problem set begins with a specification of the first system of measurement.<P>The first line of this specification gives the unit names for the system, presented as a set of one or more words on a single line, separated by single blanks. This line will be at most 80 characters long. Each word on that line names a single unit of measurement and is made up entirely of alphabetic characters. The order of the words will be from the largest unit to the smallest within that system of measurement, and no unit name will be repeated within this line.<P>This is followed by <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> lines (where <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of units named on the first line) giving internal conversion rules in the form<P><P><BR><TT>### unit1 = ### unit2</TT><P><P><BR>where the <TT>###</TT> are positive integer or floating point numbers and ``<TT>unit1</TT>" and ``<TT>unit2</TT>" are unit names drawn from the first line of the specification. This set of <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> lines will be well-formed in the sense of providing enough information to convert any unit in the system into an appropriate value in any other unit.<P>The first system specification is followed immediately by a second, in the same format.<P>The second specification is followed by a conversion rule, in the same format as the internal conversion rule described above, but ``<TT>unit1</TT>" will be drawn from the first system of measurement and ``<TT>unit2</TT>" from the second.<P>The conversion rule is followed by one or more lines, each line giving a quantity in the first system. A quantity is expressed as one or more pairs, each pair consisting of a non-negative number followed by a unit name. Unit names in a quantity will be presented in descending order of size, though not all units in the system will necessarily be mentioned in every quantity.<P>All specification rules, conversion rules, and quantities will be restricted to ranges for which the desired output (see below) can be contained in normal (not ``long") integers.<P>The end of the list of quantities, and the end of that problem set, is indicated by a completely empty line.<P>If the next line after that empty one is non-empty, it represents the start of another problem set. If that next line is also empty, however, that indicates the end of the input to this program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input quantity, print a single line giving the equivalent quantity in the second system of measurement. The output will be presented as a series of pairs, each pair a number and a unit name, with all units in the system included (even if the corresponding number for that unit is zero). The pairs must be presented in decreasing order by unit size and should maximize the value of the larger units over the smaller. All numbers will be integers, and the number for the smallest unit will be rounded to the nearest integral value. Within the output line, numbers and unit names shall be separated from one another by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
miles yards feet 
5280 feet = 1 miles 
3 feet = 1 yards 
km m cm 
1000 m = 1 km 
0.01 m = 1 cm 
1 feet = 30.48 cm 
2 miles 1 feet 
0.0833 feet 

furlongs fathoms 
1 furlongs = 110 fathoms 
feet inches 
12 inches = 1 feet 
1 fathoms = 6 feet 
1 furlongs 
0.5 furlongs 0.25 fathoms
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 km 218 m 99 cm 
0 km 0 m 3 cm 
660 feet 0 inches 
331 feet 6 inches
</PRE><P>
______________________________________________________
3614||||||false||||||
<P>
``You want to build an office building in our town? Wonderful! We're so glad to have you!" The mayor was beaming as he led me back into City Hall. ``We just need to make sure your building permit application meets all the town zoning regulations. We can check that immediately." 

<P>
He led me through a door labelled ``Zoning". I was staggered by the sight of a huge room with row after row of desks. At each desk sat a clerk with a logbook, an inbox, and a generaous supply of pencils and erasers. 

<P>
The mayor took my application form, then flourished a sheet of paper containing several lines of numbered boxes. He placed the paper in the inbox of the nearest desk and said, ``We just run this past our zoning clerks, and if it gets back to this desk with all the boxes checked, then your application is approved." The clerk at the desk grabbed the form from the inbox, marked checks in a few boxes, wrote a few lines into a logbook on his desk, then ran to a nearby copier, made copies of the form and distributed to several other desks. I watched as the clerks at those other desks each added more checks but also erased some, wrote in their logbooks, made copies, and distributed the altered forms. Soon copies of the form seemed to be flying all around the room. 

<P>
I turned to the mayor and said, ``But none of them actually <SPAN  CLASS="textit">looked</SPAN> at my application!". 

<P>
``Oh no", said the Mayor, ``each of our clerks has carefully studied a few parts of our zoning regulations. Some are convinced that <SPAN  CLASS="textit">any</SPAN> application will automatically satisfy some of the zoning rules. They also believe that <SPAN  CLASS="textit">no</SPAN> application will ever satisfy some of the other rules. So each clerk simply checks off some boxes and erases the check marks from some others." 

<P>
``We're very proud", he added, ``of the decisive nature of our zoning process. We recruit our staff from the nearby law school and choose only the most officious and argumentative junior students." 

<P>
``How," I asked, ``do they decide where the marked-up copies should go?" 

<P>
``I'm not really sure," said the mayor. ``I think they mainly give them to their fellow clerks that they most dislike, trying to increase the workload of their enemies." Just then a sheet of paper was placed on the closest desk. ``Let's see how you're coming along", he said, picking up the paper. ``No, still four boxes left empty. We'll just have to wait and see if you can do better." 

<P>
I sighed and said, ``It seems to me that this could go on forever." 

<P>
``No", said the mayor. ``Each clerk keeps a logbook recording all the versions of your application that they have sent on. When they get a form, they start by adding all marks they have ever seen on prior versions of the form, then do their own marks and erasures. If, after all that, it matches one of the previous versions, they won't send it on a second time." 

<P>
I resigned myself to a long wait.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of one or more problem sets. 

<P>
The first line in each set contains the number of boxes on the form and the number of clerks in the office. Both are positive integers. The end of input is signalled by a line with zeros for both of these numbers. 

<P>
The remainder of the input consists of three lines of data for each clerk, starting with clerk #0. (Boxes and clerks are both identified by number, starting at 0.) Each line will contain 0 or more integers, separated by whitespace, as follows: 

<P>

<UL>
<LI>One line contains the numbers of the boxes that always marked by that clerk. 
</LI>
<LI>The next line contains the numbers of the boxes that are always erased by that clerk. 
</LI>
<LI>The third line contains the numbers of all those clerks to whom this one sends copies of the altered form.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each problem set, print a single line containing the numbers of the boxes marked on the last copy of the form that leaves the desk of clerk #0. The numbers should be printed in ascending order, separated by a single blank space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
6 5 
1 

1 2 
2 3 
4 
4 
5 
1 
3 
2 

1 
4 
2 
1 0 
0 0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1 3 4 5
</PRE> 

<P>

______________________________________________________
3615||||||false||||||
<P>Dr. Montgomery Moreau has been observing a population of Northern Madagascar Pie-bald Shrews in the wild for many years. He has made careful observations of all the shrews in the area, noting their distinctive physical characteristics and naming each one.<P>He has made a list of significant physical characteristics (e.g., brown fur, red eyes, white feet, prominent incisor teeth, etc.) and taken note of which if these appear to be dominant (if either parent has this characteristic, their children will have it) or recessive (the children have this characteristic only if both parents have it).<P>Unfortunately, his funding from the International Zoological Institute expired and he was forced to leave the area for several months until he could obtain a new grant. During that time a new generation was born and began to mature. Upon returning, Dr. Moreau hopes to resume his work, starting by determining the likely parentage of the each member of the new generation.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. The first line of each dataset will containing a sequence of 1 to 80 consecutive `D' and `R' characters describing a list of physical characteristics, indicating whether each is dominant or recessive.<P>After this line will follow several lines, each describing a single adult shrew. Each shrew is described by a name of 1-32 non-blank characters terminated by a blank space, then a single <TT>M</TT> or <TT>F</TT> character indicating the gender of the animal, another blank space, then a list of consecutive <TT>0</TT> or <TT>1</TT> characters, describing the animal. A <TT>1</TT> indicates that the animal possesses that physical characteristic, a <TT>0</TT> indicates that it does not. The list of adults is terminated by a line containing only the string ``<TT>***</TT>".<P>This is followed by one or more lines describing juvenile animals. These contain a name and description, each formatted identically to those for the adults, separated by a blank space. The list of juveniles is terminated by a line containing only the string ``<TT>***</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each juvenile animal, print a single line consisting of the animal's name, the string ``<TT>by</TT>", then a (possibly empty) list of all possible parents for that animal. A set of parents should be printed as the name of the mother, a hyphen, then the name of the father. If the animal has multiple pairs of possible parents, these pairs should be printed in alphabetic (lexicographic) order first by the mother's name, then by the father's name among pairs where the mother is the same. Each pair should be printed separated by the string ``<TT>or</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
RDDR 
Speedy M 0101 
Jumper F 0101 
Slowpoke M 1101 
Terror F 1100 
Shadow F 1001 
*** 
Frisky 0101 
Sleepy 1101
***
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Frisky by Jumper-Slowpoke or Jumper-Speedy or Shadow-Speedy 
Sleepy by Shadow-Slowpoke

______________________________________________________
3616||||||false||||||
<P>One of the questions children often ask is ``How many stars are there in the sky?'' Under ideal conditions, even with the naked eye, nearly eight thousands are observable in the northern hemisphere. With a decent telescope, you may find many more, but, as the sight field will be limited, you may find much less at a time.<P>Children may ask the same questions to their parents on a planet of some solar system billions of light-years away from the Earth. Their telescopes are similar to ours with circular sight fields, but alien kids have many eyes and can look into different directions at a time through many telescopes.<P>Given a set of positions of stars, a set of telescopes and the directions they are looking to, your task is to count up how many stars can be seen through these telescopes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of one or more datasets. The number of datasets is less than 50. Each dataset describes stars and the parameters of the telescopes used.<P>The first line of a dataset contains a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> not exceeding 500, meaning the number of stars. Each of the <SPAN CLASS="MATH"><I>n</I></SPAN> lines following it contains three decimal fractions, <SPAN CLASS="MATH"><I>s</I><SUB>x</SUB></SPAN>, <SPAN CLASS="MATH"><I>s</I><SUB>y</SUB></SPAN>, and <SPAN CLASS="MATH"><I>s</I><SUB>z</SUB></SPAN>. They give the position <SPAN CLASS="MATH">(<I>s</I><SUB>x</SUB>, <I>s</I><SUB>y</SUB>, <I>s</I><SUB>z</SUB>)</SPAN> of the star described in Euclidean coordinates. You may assume <SPAN CLASS="MATH">-1000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$"><I>s</I><SUB>x</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$">1000</SPAN>, <SPAN CLASS="MATH">-1000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$"><I>s</I><SUB>y</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$">1000</SPAN>, <SPAN CLASS="MATH">-1000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$"><I>s</I><SUB>z</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$">1000</SPAN> and <SPAN CLASS="MATH">(<I>s</I><SUB>x</SUB>, <I>s</I><SUB>y</SUB>, <I>s</I><SUB>z</SUB>)<IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \ne$">(0, 0, 0)</SPAN>.<P>Then comes a line containing a positive integer <SPAN CLASS="MATH"><I>m</I></SPAN> not exceeding 50, meaning the number of telescopes. Each of the following <SPAN CLASS="MATH"><I>m</I></SPAN> lines contains four decimal fractions, <SPAN CLASS="MATH"><I>t</I><SUB>x</SUB></SPAN>, <SPAN CLASS="MATH"><I>t</I><SUB>y</SUB></SPAN>, <SPAN CLASS="MATH"><I>t</I><SUB>z</SUB></SPAN>, and <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \psi$"></SPAN>, describing a telescope.<P>The first three numbers represent the direction of the telescope. All the telescopes are at the origin of the coordinate system <SPAN CLASS="MATH">(0, 0, 0)</SPAN> (we ignore the size of the planet). The three numbers give the point <SPAN CLASS="MATH">(<I>t</I><SUB>x</SUB>, <I>t</I><SUB>y</SUB>, <I>t</I><SUB>z</SUB>)</SPAN> which can be seen in the center of the sight through the telescope. You may assume <SPAN CLASS="MATH">-1000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$"><I>t</I><SUB>x</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$">1000</SPAN>, <SPAN CLASS="MATH">-1000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$"><I>t</I><SUB>y</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$">1000</SPAN>, <SPAN CLASS="MATH">-1000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$"><I>t</I><SUB>z</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$">1000</SPAN> and <SPAN CLASS="MATH">(<I>t</I><SUB>x</SUB>, <I>t</I><SUB>y</SUB>, <I>t</I><SUB>z</SUB>)<IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \ne$">(0, 0, 0)</SPAN>.<P>The fourth number <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \psi$"></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$"><IMG WIDTH="16" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \psi$"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \le$"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \pi$">/2</SPAN>) gives the angular radius, in radians, of the sight field of the telescope.<P>Let us define that <SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \theta_{{i,j}}^{}$"></SPAN> is the angle between the direction of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th star and the center direction of the <SPAN CLASS="MATH"><I>j</I></SPAN>-th telescope and <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \psi_{j}^{}$"></SPAN> is the angular radius of the sight field of the <SPAN CLASS="MATH"><I>j</I></SPAN>-th telescope. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th star is observable through the <SPAN CLASS="MATH"><I>j</I></SPAN>-th telescope if and only if <SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \theta_{{i,j}}^{}$"></SPAN> is less than <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \psi_{j}^{}$"></SPAN>. You may assume that <SPAN CLASS="MATH">|<IMG WIDTH="28" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \theta_{{i,j}}^{}$"> - <IMG WIDTH="23" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="$ \psi_{j}^{}$">| &gt; 0.00000001</SPAN> for all pairs of <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN>.<P><DIV ALIGN="CENTER"><IMG WIDTH="733" HEIGHT="575" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3616img1.png ALT="\epsfbox{p3616.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: Direction and angular radius of a telescope</DIV><P>The end of the input is indicated with a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, one line containing an integer meaning the number of stars observable through the telescopes should be output. No other characters should be contained in the output. Note that stars that can be seen through more than one telescope should not be counted twice or more.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
100 0 500 
-500.243 -200.1 -300.5 
0 300 200 
2 
1 1 1 0.65 
-1 0 0 1.57 
3 
1 0 0 
0 1 0 
0 0 1 
4 
1 -1 -1 0.9553 
-1 1 -1 0.9554
-1 -1 1 0.9553
-1 1 -1 0.9554
3 
1 0 0 
0 1 0 
0 0 1 
4 
1 -1 -1 0.9553
-1 1 -1 0.9553
-1 -1 1 0.9553
-1 1 -1 0.9553
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
1 
0
</PRE><P>
______________________________________________________
3617||||||false||||||
<P>After counting so many stars in the sky in his childhood, Isaac, now an astronomer and a mathematician, uses a big astronomical telescope and lets his image processing program count stars. The hardest part of the program is to judge if a shining object in the sky is really a star. As a mathematician, the only way he knows is to apply a mathematical definition of <SPAN CLASS="textit">stars</SPAN>.<P>The mathematical definition of a star shape is as follows: A planar shape <SPAN CLASS="MATH"><I>F</I></SPAN> is <SPAN CLASS="textit">star-shaped</SPAN> if and only if there is a point <SPAN CLASS="MATH">C <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3617img1.png ALT="$ \in$"> <I>F</I></SPAN> such that, for any point <SPAN CLASS="MATH">P <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3617img1.png ALT="$ \in$"> <I>F</I></SPAN>, the line segment <SPAN CLASS="MATH">CP</SPAN> is contained in <SPAN CLASS="MATH"><I>F</I></SPAN>. Such a point <SPAN CLASS="MATH">C</SPAN> is called a <SPAN CLASS="textit">center</SPAN> of <SPAN CLASS="MATH"><I>F</I></SPAN>. To get accustomed to the definition, let's see some examples below.<P><DIV ALIGN="CENTER"><IMG WIDTH="893" HEIGHT="484" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3617img1.png ALT="\epsfbox{p3617.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2: Star shapes (the first one) and non-star shapes (the second row)</DIV><P>The first two are what you would normally call stars. According to the above definition, however, all shapes in the first row are star-shaped. The two in the second row are not. For each star shape, a center is indicated with a dot. Note that a star shape in general has infinitely many centers. For example, for the third quadrangular shape, all points in it are centers.<P>Your job is to write a program that tells whether a given polygonal shape is star-shaped or not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of datasets followed by a line containing a single zero. Each dataset specifies a polygon, and is formatted as follows.<P><BLOCKQUOTE><SPAN CLASS="MATH"><TABLE><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>n</I></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>x</I><SUB>1</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>y</I><SUB>1</SUB></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>x</I><SUB>2</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>y</I><SUB>2</SUB></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=2><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3617img1.png ALT="$ \vdots$"></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>x</I><SUB>n</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>y</I><SUB>n</SUB></TD></TR></TABLE></SPAN></BLOCKQUOTE><P>The first line is the number of vertices, <SPAN CLASS="MATH"><I>n</I></SPAN>, which satisfies <SPAN CLASS="MATH">4 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3617img1.png ALT="$ \leq$"> <I>n</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3617img1.png ALT="$ \leq$"> 50</SPAN>. Subsequent <SPAN CLASS="MATH"><I>n</I></SPAN> lines are the <SPAN CLASS="MATH"><I>x</I></SPAN>- and <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinates of the <SPAN CLASS="MATH"><I>n</I></SPAN> vertices. They are integers and satisfy <SPAN CLASS="MATH">0 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3617img1.png ALT="$ \leq$"> <I>x</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3617img1.png ALT="$ \leq$"> 10000</SPAN> and <SPAN CLASS="MATH">0 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3617img1.png ALT="$ \leq$"> <I>y</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3617img1.png ALT="$ \leq$"> 10000</SPAN> ( <SPAN CLASS="MATH"><I>i</I> = 1,..., <I>n</I></SPAN>). Line segments <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)-(<I>x</I><SUB>i+1</SUB>, <I>y</I><SUB>i+1</SUB>)</SPAN> ( <SPAN CLASS="MATH"><I>i</I> = 1,..., <I>n</I> - 1</SPAN>) and the line segment <SPAN CLASS="MATH">(<I>x</I><SUB>n</SUB>, <I>y</I><SUB>n</SUB>)-(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> form the border of the polygon in the counterclockwise order. That is, these line segments see the inside of the polygon in the left of their directions.<P>You may assume that the polygon is <SPAN CLASS="textit">simple</SPAN>, that is, its border never crosses or touches itself. You may also assume that no three edges of the polygon meet at a single point even when they are infinitely extended.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output ``<TT>1</TT>'' if the polygon is star-shaped and ``<TT>0</TT>'' otherwise. Each number must be in a separate line and the line should not contain any other characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
66 13 
96 61 
76 98 
13 94 
4 0 
45 68 
8 
27 21 
55 14 
93 12 
56 95 
15 48 
38 46 
51 65 
64 31 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
0
</PRE><P>
______________________________________________________
3618||||||false||||||
<P>
Let's play a puzzle using eight cubes placed
on a <!-- MATH
 $3 \times 3$
 -->
<SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> board leaving one empty square.

<P>
Faces of cubes are painted with three colors.  As a puzzle step, you
can roll one of the cubes to the adjacent empty square.  Your goal is
to make the specified color pattern visible from above by a number of
such steps.

<P>
The rules of this puzzle are as follows.

<P>

<OL>
<LI><B>Coloring of Cubes:</B>
All the cubes are colored in the same way 
as shown in Figure 3.
The opposite faces have the same color.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3618a.eps}$
 -->
<IMG
 WIDTH="206" HEIGHT="178" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3618a.png
 ALT="\epsfbox{p3618a.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 3: Coloring of a cube 

</DIV>

<P>
</LI>
<LI><B>Initial Board State:</B>
Eight cubes are placed on the <!-- MATH
 $3 \times 3$
 -->
<SPAN CLASS="MATH">3 <TT>x</TT> 3</SPAN> board leaving one empty
square.  All the cubes have the same orientation as shown in Figure
4.  As shown in the figure, squares on the board are
given <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates, (1, 1), (1, 2), ..., and (3, 3).
The position of the initially empty square may vary.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3618b.eps}$
 -->
<IMG
 WIDTH="452" HEIGHT="228" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3618a.png
 ALT="\epsfbox{p3618b.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 4: Initial board state

</DIV>

<P>
</LI>
<LI><B>Rolling Cubes:</B>
At each step, we can choose one of the cubes adjacent to the empty
square and roll it into the empty square, leaving the original position
empty.  Figure 5 shows an example.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3618c.eps}$
 -->
<IMG
 WIDTH="548" HEIGHT="162" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3618a.png
 ALT="\epsfbox{p3618c.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 5: Rolling a cube 

</DIV>

<P>
</LI>
<LI><B>Goal:</B>
The goal of this puzzle is to arrange the cubes so that their top
faces form the specified color pattern by a number of cube rolling
steps described above.
</LI>
</OL>

<P>
Your task is to write a program that finds the minimum number of steps
required to make the specified color pattern from the given initial
state.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input is a sequence of datasets.  The end of the input is
indicated by a line containing two zeros separated by a space.  The
number of datasets is less than 16.  Each dataset is formatted as
follows.

<P>
<BLOCKQUOTE>
<!-- MATH
 $\begin{array}{lll}
x &  y \\
F_{11} & F_{21} & F_{31} \\
F_{12} & F_{22} & F_{32} \\
F_{13} & F_{23} & F_{33} \\
\end{array}$
 -->
<SPAN CLASS="MATH"><TABLE>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>x</I></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>y</I></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>F</I><SUB>11</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>F</I><SUB>21</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>F</I><SUB>31</SUB></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>F</I><SUB>12</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>F</I><SUB>22</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>F</I><SUB>32</SUB></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>F</I><SUB>13</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>F</I><SUB>23</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>F</I><SUB>33</SUB></TD></TR>
</TABLE></SPAN>
</BLOCKQUOTE>

<P>
The first line contains two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> separated by a space,
indicating the position <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> of the initially empty square.
The values of <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are 1, 2, or 3.

<P>
The following three lines specify the color pattern to make.  Each
line contains three characters <!-- MATH
 $F_{1j}, F_{2j},$
 -->
<SPAN CLASS="MATH"><I>F</I><SUB>1j</SUB>, <I>F</I><SUB>2j</SUB>,</SPAN> and <SPAN CLASS="MATH"><I>F</I><SUB>3j</SUB></SPAN>,
separated by a space.  Character <SPAN CLASS="MATH"><I>F</I><SUB>ij</SUB></SPAN> indicates the top color of
the cube, if any, at position <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> as follows:
<DL COMPACT>
<DT><TT>B</TT>:</DT>
<DD>Blue,
</DD>
<DT><TT>W</TT>:</DT>
<DD>White,
</DD>
<DT><TT>R</TT>:</DT>
<DD>Red,
</DD>
<DT><TT>E</TT>:</DT>
<DD>the square is Empty.
</DD>
</DL>
There is exactly one `<TT>E</TT>' character in each dataset.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, output the minimum number of steps to achieve the
goal, when the goal can be reached within 30 steps.
Otherwise, output ``<TT>-1</TT>'' for the dataset.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 2 
W W W 
E W W 
W W W 
2 1 
R B W 
R W W 
E W W 
3 3 
W B W 
B R E 
R B R 
3 3 
B W R 
B W R 
B E R 
2 1 
B B B 
B R B 
B R E 
1 1 
R R R 
W W W 
R R E 
2 1 
R R R 
B W B 
R R E 
3 2 
R R R 
W E W 
R R R
0 0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
0 
3 
13 
23 
29 
30 
-1 
-1
</PRE> 

<P>

______________________________________________________
3619||||||false||||||
<P>A positive integer may be expressed as a sum of different prime numbers (primes), in one way or another. Given two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN>, you should count the number of ways to express <SPAN CLASS="MATH"><I>n</I></SPAN> as a sum of <SPAN CLASS="MATH"><I>k</I></SPAN> different primes. Here, two ways are considered to be the same if they sum up the same set of the primes. For example, <SPAN CLASS="MATH">8</SPAN> can be expressed as <SPAN CLASS="MATH">3 + 5</SPAN> and <SPAN CLASS="MATH">5 + 3</SPAN> but they are not distinguished.<P>When <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> are <SPAN CLASS="MATH">24</SPAN> and <SPAN CLASS="MATH">3</SPAN> respectively, the answer is two because there are two sets <SPAN CLASS="MATH">{2, 3, 19}</SPAN> and <SPAN CLASS="MATH">{2, 5, 17}</SPAN> whose sums are equal to <SPAN CLASS="MATH">24</SPAN>. There are no other sets of three primes that sum up to <SPAN CLASS="MATH">24</SPAN>. For <SPAN CLASS="MATH"><I>n</I> = 24</SPAN> and <SPAN CLASS="MATH"><I>k</I> = 2</SPAN>, the answer is three, because there are three sets <SPAN CLASS="MATH">{5, 19}</SPAN>, <SPAN CLASS="MATH">{7, 17}</SPAN> and <SPAN CLASS="MATH">{11, 13}</SPAN>. For <SPAN CLASS="MATH"><I>n</I> = 2</SPAN> and <SPAN CLASS="MATH"><I>k</I> = 1</SPAN>, the answer is one, because there is only one set <SPAN CLASS="MATH">{2}</SPAN> whose sum is <SPAN CLASS="MATH">2</SPAN>. For <SPAN CLASS="MATH"><I>n</I> = 1</SPAN> and <SPAN CLASS="MATH"><I>k</I> = 1</SPAN>, the answer is zero. As <SPAN CLASS="MATH">1</SPAN> is not a prime, you shouldn't count <SPAN CLASS="MATH">{1}</SPAN>. For <SPAN CLASS="MATH"><I>n</I> = 4</SPAN> and <SPAN CLASS="MATH"><I>k</I> = 2</SPAN>, the answer is zero, because there are no sets of two different primes whose sums are <SPAN CLASS="MATH">4</SPAN>.<P>Your job is to write a program that reports the number of such ways for the given&nbsp;<SPAN CLASS="MATH"><I>n</I></SPAN> and&nbsp;<SPAN CLASS="MATH"><I>k</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of datasets followed by a line containing two zeros separated by a space. A dataset is a line containing two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> separated by a space. You may assume that <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3619img1.png ALT="$ \le$">1120</SPAN> and <SPAN CLASS="MATH"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3619img1.png ALT="$ \le$">14</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be composed of lines, each corresponding to an input dataset. An output line should contain one non-negative integer indicating the number of ways for <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> specified in the corresponding dataset. You may assume that it is less than <SPAN CLASS="MATH">2<SUP>31</SUP></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
24 3 
24 2 
2 1 
1 1 
4 2 
18 3 
17 1 
17 3 
17 4 
100 5 
1000 10 
1120 14 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
3 
1 
0 
0 
2 
1 
0 
1 
55 
200102899 
2079324314
</PRE><P>
______________________________________________________
3620||||||false||||||
<P>There is a rectangular area containing <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>m</I></SPAN> cells. Two cells are marked with ``2'', and another two with ``3''. Some cells are occupied by obstacles. You should connect the two ``2''s and also the two ``3''s with non-intersecting lines. Lines can run only vertically or horizontally connecting centers of cells without obstacles.<P>Lines cannot run on a cell with an obstacle. Only one line can run on a cell at most once. Hence, a line cannot intersect with the other line, nor with itself. Under these constraints, the total length of the two lines should be minimized. The length of a line is defined as the number of cell borders it passes. In particular, a line connecting cells sharing their border has length 1.<P>Fig. 6(a) shows an example setting. Fig. 6(b) shows two lines satisfying the constraints above with minimum total length 18.<P><DIV ALIGN="CENTER"><IMG WIDTH="535" HEIGHT="288" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3620.png ALT="\epsfbox{p3620.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 6: An example setting and its solution</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets, each in the following format.<P><BLOCKQUOTE><TABLE COLS=1><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>n</I></SPAN>&nbsp;&nbsp;&nbsp;&nbsp;<SPAN CLASS="MATH"><I>m</I></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>row<SPAN CLASS="MATH"><SUB>1</SUB></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3620.png ALT="$ \vdots$"></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>row<SPAN CLASS="MATH"><SUB>n</SUB></SPAN></TD></TR></TABLE></BLOCKQUOTE><SPAN CLASS="MATH"><I>n</I></SPAN> is the number of rows which satisfies <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3620.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3620.png ALT="$ \le$">9</SPAN>. <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of columns which satisfies <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3620.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3620.png ALT="$ \le$">9</SPAN>. Each row<SPAN CLASS="MATH"><SUB>i</SUB></SPAN> is a sequence of <SPAN CLASS="MATH"><I>m</I></SPAN> digits separated by a space. The digits mean the following.<P><DL COMPACT><DT><TT>0</TT>:</DT><DD>Empty</DD><DT><TT>1</TT>:</DT><DD>Occupied by an obstacle</DD><DT><TT>2</TT>:</DT><DD>Marked with ``2''</DD><DT><TT>3</TT>:</DT><DD>Marked with ``3''</DD></DL><P>The end of the input is indicated with a line containing two zeros separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, one line containing the minimum total length of the two lines should be output. If there is no pair of lines satisfying the requirement, answer ``<TT>0</TT>'' instead. No other characters should be contained in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 5
0 0 0 0 0
0 0 0 3 0
2 0 2 0 0
1 0 1 1 1
0 0 0 0 3
2 3
2 2 0
0 3 3
6 5
2 0 0 0 0
0 3 0 0 0
0 0 0 0 0
1 1 1 0 0
0 0 0 0 0
0 0 2 3 0
5 9
0 0 0 0 0 0 0 0 0
0 0 0 0 3 0 0 0 0
0 2 0 0 0 0 0 2 0
0 0 0 0 3 0 0 0 0
0 0 0 0 0 0 0 0 0
9 9
3 0 0 0 0 0 0 0 2
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
2 0 0 0 0 0 0 0 3
9 9
0 0 0 1 0 0 0 0 0
0 2 0 1 0 0 0 0 3
0 0 0 1 0 0 0 0 2
0 0 0 1 0 0 0 0 3
0 0 0 1 1 1 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
9 9
0 0 0 0 0 0 0 0 0
0 3 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 2 3 2
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
18
2
17
12
0
52
43
</PRE><P>
______________________________________________________
3621||||||false||||||
<P>Starting with&nbsp;<SPAN CLASS="MATH"><I>x</I></SPAN> and repeatedly multiplying by&nbsp;<SPAN CLASS="MATH"><I>x</I></SPAN>, we can compute&nbsp;<SPAN CLASS="MATH"><I>x</I><SUP>31</SUP></SPAN> with thirty multiplications:<BLOCKQUOTE><SPAN CLASS="MATH"><I>x</I><SUP>2</SUP> = <I>x</I> <TT>x</TT> <I>x</I></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>3</SUP> = <I>x</I><SUP>2</SUP> <TT>x</TT> <I>x</I></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>4</SUP> = <I>x</I><SUP>3</SUP> <TT>x</TT> <I>x</I></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH">... &nbsp;,</SPAN>&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>31</SUP> = <I>x</I><SUP>30</SUP> <TT>x</TT> <I>x</I></SPAN>.</BLOCKQUOTE>The operation of squaring can appreciably shorten the sequence of multiplications. The following is a way to compute&nbsp;<SPAN CLASS="MATH"><I>x</I><SUP>31</SUP></SPAN> with eight multiplications:<BLOCKQUOTE><SPAN CLASS="MATH"><I>x</I><SUP>2</SUP> = <I>x</I> <TT>x</TT> <I>x</I></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>3</SUP> = <I>x</I><SUP>2</SUP> <TT>x</TT> <I>x</I></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>6</SUP> = <I>x</I><SUP>3</SUP> <TT>x</TT> <I>x</I><SUP>3</SUP></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>7</SUP> = <I>x</I><SUP>6</SUP> <TT>x</TT> <I>x</I></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>14</SUP> = <I>x</I><SUP>7</SUP> <TT>x</TT> <I>x</I><SUP>7</SUP></SPAN>,<BR><SPAN CLASS="MATH"><I>x</I><SUP>15</SUP> = <I>x</I><SUP>14</SUP> <TT>x</TT> <I>x</I></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>30</SUP> = <I>x</I><SUP>15</SUP> <TT>x</TT> <I>x</I><SUP>15</SUP></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>31</SUP> = <I>x</I><SUP>30</SUP> <TT>x</TT> <I>x</I></SPAN>.</BLOCKQUOTE>This is not the shortest sequence of multiplications to compute&nbsp;<SPAN CLASS="MATH"><I>x</I><SUP>31</SUP></SPAN>. There are many ways with only seven multiplications. The following is one of them:<BLOCKQUOTE><SPAN CLASS="MATH"><I>x</I><SUP>2</SUP> = <I>x</I> <TT>x</TT> <I>x</I></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>4</SUP> = <I>x</I><SUP>2</SUP> <TT>x</TT> <I>x</I><SUP>2</SUP></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>8</SUP> = <I>x</I><SUP>4</SUP> <TT>x</TT> <I>x</I><SUP>4</SUP></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>10</SUP> = <I>x</I><SUP>8</SUP> <TT>x</TT> <I>x</I><SUP>2</SUP></SPAN>,<BR><SPAN CLASS="MATH"><I>x</I><SUP>20</SUP> = <I>x</I><SUP>10</SUP> <TT>x</TT> <I>x</I><SUP>10</SUP></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>30</SUP> = <I>x</I><SUP>20</SUP> <TT>x</TT> <I>x</I><SUP>10</SUP></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>31</SUP> = <I>x</I><SUP>30</SUP> <TT>x</TT> <I>x</I></SPAN>.</BLOCKQUOTE>There however is no way to compute&nbsp;<SPAN CLASS="MATH"><I>x</I><SUP>31</SUP></SPAN> with fewer multiplications. Thus this is one of the most efficient ways to compute&nbsp;<SPAN CLASS="MATH"><I>x</I><SUP>31</SUP></SPAN> only by multiplications.<P>If division is also available, we can find a shorter sequence of operations. It is possible to compute&nbsp;<SPAN CLASS="MATH"><I>x</I><SUP>31</SUP></SPAN> with six operations (five multiplications and one division):<BLOCKQUOTE><SPAN CLASS="MATH"><I>x</I><SUP>2</SUP> = <I>x</I> <TT>x</TT> <I>x</I></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>4</SUP> = <I>x</I><SUP>2</SUP> <TT>x</TT> <I>x</I><SUP>2</SUP></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>8</SUP> = <I>x</I><SUP>4</SUP> <TT>x</TT> <I>x</I><SUP>4</SUP></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>16</SUP> = <I>x</I><SUP>8</SUP> <TT>x</TT> <I>x</I><SUP>8</SUP></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>32</SUP> = <I>x</I><SUP>16</SUP> <TT>x</TT> <I>x</I><SUP>16</SUP></SPAN>,&nbsp;&nbsp;&nbsp;&nbsp; <SPAN CLASS="MATH"><I>x</I><SUP>31</SUP> = <I>x</I><SUP>32</SUP> &#247; <I>x</I></SPAN>.</BLOCKQUOTE>This is one of the most efficient ways to compute&nbsp;<SPAN CLASS="MATH"><I>x</I><SUP>31</SUP></SPAN> if a division is as fast as a multiplication.<P>Your mission is to write a program to find the least number of operations to compute <SPAN CLASS="MATH"><I>x</I><SUP>n</SUP></SPAN> by multiplication and division starting with&nbsp;<SPAN CLASS="MATH"><I>x</I></SPAN> for the given positive integer&nbsp;<SPAN CLASS="MATH"><I>n</I></SPAN>. Products and quotients appearing in the sequence of operations should be <SPAN CLASS="MATH"><I>x</I></SPAN> to a positive integer's power. In other words, <SPAN CLASS="MATH"><I>x</I><SUP>-3</SUP></SPAN>, for example, should never appear.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of one or more lines each containing a single integer&nbsp;<SPAN CLASS="MATH"><I>n</I></SPAN>. <SPAN CLASS="MATH"><I>n</I></SPAN> is positive and less than or equal to 1000. The end of the input is indicated by a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program should print the least total number of multiplications and divisions required to compute <SPAN CLASS="MATH"><I>x</I><SUP>n</SUP></SPAN> starting with&nbsp;<SPAN CLASS="MATH"><I>x</I></SPAN> for the integer&nbsp;<SPAN CLASS="MATH"><I>n</I></SPAN>. The numbers should be written each in a separate line without any superfluous characters such as leading or trailing spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
31
70
91
473
512
811
953
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
6
8
9
11
9
13
12
</PRE><P>
______________________________________________________
3622||||||false||||||
<P>
The ultimate Tantra is said to have been kept in the most
distinguished temple deep in the sacred forest somewhere in Japan.
Paleographers finally identified its location, surprisingly a small
temple in Hiyoshi, after years of eager research.  The temple has an
underground secret room built with huge stones.  This underground
megalith is suspected to be where the Tantra is enshrined.

<P>
The room door is, however, securely locked.  Legends tell that the key
of the door lock was an integer, that only highest priests knew.  As
the sect that built the temple decayed down, it is impossible to know
the integer now, and the Agency for Cultural Affairs bans breaking up
the door.  Fortunately, a figure of a number of rods that might be
used as a clue to guess that secret number is engraved on the door.

<P>
Many distinguished scholars have challenged the riddle, but no one
could have ever succeeded in solving it, until recently a brilliant
young computer scientist finally deciphered the puzzle.  Lengths of
the rods are multiples of a certain unit length.  He found that, to
find the secret number, all the rods should be placed on a grid of the
unit length to make one convex polygon.  Both ends of each rod must be
set on grid points.  Elementary mathematics tells that the polygon's
area ought to be an integer multiple of the square of the unit length.
The area size of the polygon with the largest area is the secret
number which is needed to unlock the door.

<P>
For example, if you have five rods whose lengths are 1, 2, 5,
5, and 5, respectively, you can make essentially only three kinds of
polygons, shown in Figure 7.  Then, you know that the
maximum area is 19.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3622.eps}$
 -->
<IMG
 WIDTH="1008" HEIGHT="303" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3622.png
 ALT="\epsfbox{p3622.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 7: Convex polygons consisting of five rods of lengths 1, 2, 5, 5, and 5 16

</DIV>

<P>
Your task is to write a program to find the maximum area of convex
polygons using all the given rods whose ends are on grid points.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets, followed by a line containing
a single zero which indicates the end of the input.  The format of a
dataset is as follows.
<BLOCKQUOTE>
<SPAN CLASS="MATH"><I>n</I></SPAN>
<BR><SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN>&nbsp;&nbsp;&nbsp;&nbsp;<SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN>&nbsp;&nbsp;&nbsp;&nbsp;<SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>&nbsp;&nbsp;&nbsp;&nbsp;<SPAN CLASS="MATH"><I>r</I><SUB>n</SUB></SPAN>
</BLOCKQUOTE>
<SPAN CLASS="MATH"><I>n</I></SPAN> is an integer which means the number of rods and satisfies
<!-- MATH
 $3 \le n \le 6$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3622.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3622.png
 ALT="$ \le$">6</SPAN>.
<SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> is an integer which means the length of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th rod and satisfies
<!-- MATH
 $1 \le r_i \le 300$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3622.png
 ALT="$ \le$"><I>r</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3622.png
 ALT="$ \le$">300</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, output a line containing an integer which is the
area of the largest convex polygon.  When there are no possible convex
polygons for a dataset, output ``<TT>-1</TT>''.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
3 4 5
5
1 2 5 5 5
6
195 221 255 260 265 290
6
130 145 169 185 195 265
3
1 1 2
6
3 3 3 3 3 3
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
6
19
158253
-1
-1
18
</PRE>

<P>

______________________________________________________
3623||||||false||||||
<P>
In the year 29XX, the government of a small country somewhere on the
earth introduced a law restricting first names of the people only to
traditional names in their culture, in order to preserve their
cultural uniqueness.  The linguists of the country specifies a set of
rules once every year, and only names conforming to the rules are
allowed in that year.  In addition, the law also requires each person
to use a name of a specific length calculated from one's birth date
because otherwise too many people would use the same very popular
names.  Since the legislation of that law, the common task of the
parents of new babies is to find the name that comes first in the
alphabetical order among the legitimate names of the given length
because names earlier in the alphabetical order have various benefits
in their culture.

<P>
Legitimate names are the strings consisting of only lowercase letters
that can be obtained by repeatedly applying the rule set to the
initial string ``S'', a string consisting only of a single uppercase
S.

<P>
Applying the rule set to a string is to choose one of the rules and
apply it to the string.  Each of the rules has the form <!-- MATH
 $A\rightarrow
\alpha$
 -->
<SPAN CLASS="MATH"><I>A</I> <IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \rightarrow$"> <IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \alpha$"></SPAN>, where <SPAN CLASS="MATH"><I>A</I></SPAN> is an uppercase letter and <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \alpha$"></SPAN> is a string
of lowercase and/or uppercase letters.  Applying such a rule to a
string is to replace an occurrence of the letter <SPAN CLASS="MATH"><I>A</I></SPAN> in the string to
the string <SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \alpha$"></SPAN>.  That is, when the string has the form ``<!-- MATH
 $\beta
A\gamma$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \beta$"><I>A</I><IMG
 WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \gamma$"></SPAN>'', where <SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \beta$"></SPAN> and <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \gamma$"></SPAN> are arbitrary (possibly empty)
strings of letters, applying the rule rewrites it into the string
``<!-- MATH
 $\beta\alpha\gamma$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \beta$"><IMG
 WIDTH="16" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \alpha$"><IMG
 WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \gamma$"></SPAN>''.  If there are two or more occurrences of <SPAN CLASS="MATH"><I>A</I></SPAN>
in the original string, an arbitrary one of them can be chosen for the
replacement.

<P>
Below is an example set of rules.
<BLOCKQUOTE>
<TABLE COLS=5>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>aAB</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>(1)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \rightarrow$"></SPAN></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>(2)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Aa</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>(3)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>AbbA</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>(4)</TD></TR>
</TABLE>

</BLOCKQUOTE>

<P>
Applying the rule (1) to ``S'', ``aAB'' is obtained.  Applying (2) to
it results in ``aB'', as A is replaced by an empty string.  Then, the
rule (4) can be used to make it ``aAbbA''.  Applying (3) to the first
occurrence of A makes it ``aAabbA''.  Applying the rule (2) to the A at
the end results in ``aAabb''.  Finally, applying the rule (2) again to
the remaining A results in ``aabb''.  As no uppercase letter remains
in this string, ``aabb'' is a legitimate name.

<P>
We denote such a rewriting process as follows.
<BLOCKQUOTE>
S<!-- MATH
 $\;\stackrel{\mbox{\tiny (1)}}{\longrightarrow}\;$
 -->
<SPAN CLASS="MATH">&nbsp;<IMG
 WIDTH="42" HEIGHT="25" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \;\stackrel{{\mbox{\tiny (1)}}}{{\longrightarrow}}\;$"> &nbsp;</SPAN>aAB<!-- MATH
 $\;\stackrel{\mbox{\tiny (2)}}{\longrightarrow}\;$
 -->
<SPAN CLASS="MATH">&nbsp;<IMG
 WIDTH="42" HEIGHT="25" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \;\stackrel{{\mbox{\tiny (2)}}}{{\longrightarrow}}\;$"> &nbsp;</SPAN>aB<!-- MATH
 $\;\stackrel{\mbox{\tiny (4)}}{\longrightarrow}\;$
 -->
<SPAN CLASS="MATH">&nbsp;<IMG
 WIDTH="42" HEIGHT="25" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \;\stackrel{{\mbox{\tiny (4)}}}{{\longrightarrow}}\;$"> &nbsp;</SPAN>aAbbA<!-- MATH
 $\;\stackrel{\mbox{\tiny (3)}}{\longrightarrow}\;$
 -->
<SPAN CLASS="MATH">&nbsp;<IMG
 WIDTH="42" HEIGHT="25" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \;\stackrel{{\mbox{\tiny (3)}}}{{\longrightarrow}}\;$"> &nbsp;</SPAN>aAabbA
<!-- MATH
 $\;\stackrel{\mbox{\tiny (2)}}{\longrightarrow}\;$
 -->
<SPAN CLASS="MATH">&nbsp;<IMG
 WIDTH="42" HEIGHT="25" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \;\stackrel{{\mbox{\tiny (2)}}}{{\longrightarrow}}\;$"> &nbsp;</SPAN>aAabb<!-- MATH
 $\;\stackrel{\mbox{\tiny (2)}}{\longrightarrow}\;$
 -->
<SPAN CLASS="MATH">&nbsp;<IMG
 WIDTH="42" HEIGHT="25" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \;\stackrel{{\mbox{\tiny (2)}}}{{\longrightarrow}}\;$"> &nbsp;</SPAN>aabb

</BLOCKQUOTE>

<P>
Linguists of the country may sometimes define a ridiculous rule set
such as follows.
<BLOCKQUOTE>
<TABLE COLS=5>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
S</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>sA</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>(1)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>aS</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>(2)</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
B</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \rightarrow$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>b</TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>(3)</TD></TR>
</TABLE>

</BLOCKQUOTE>
The only possible rewriting sequence with this rule set is:
<BLOCKQUOTE>
S<!-- MATH
 $\;\stackrel{\mbox{\tiny (1)}}{\longrightarrow}\;$
 -->
<SPAN CLASS="MATH">&nbsp;<IMG
 WIDTH="42" HEIGHT="25" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \;\stackrel{{\mbox{\tiny (1)}}}{{\longrightarrow}}\;$"> &nbsp;</SPAN>sA<!-- MATH
 $\;\stackrel{\mbox{\tiny (2)}}{\longrightarrow}\;$
 -->
<SPAN CLASS="MATH">&nbsp;<IMG
 WIDTH="42" HEIGHT="25" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \;\stackrel{{\mbox{\tiny (2)}}}{{\longrightarrow}}\;$"> &nbsp;</SPAN>saS<!-- MATH
 $\;\stackrel{\mbox{\tiny (1)}}{\longrightarrow}\;$
 -->
<SPAN CLASS="MATH">&nbsp;<IMG
 WIDTH="42" HEIGHT="25" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \;\stackrel{{\mbox{\tiny (1)}}}{{\longrightarrow}}\;$"> &nbsp;</SPAN>sasA<!-- MATH
 $\;\stackrel{\mbox{\tiny (2)}}{\longrightarrow}\;$
 -->
<SPAN CLASS="MATH">&nbsp;<IMG
 WIDTH="42" HEIGHT="25" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \;\stackrel{{\mbox{\tiny (2)}}}{{\longrightarrow}}\;$"> &nbsp;</SPAN><SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
</BLOCKQUOTE>
which will never terminate.  No legitimate names exist in this case.
Also, the rule (3) can never be used, as its left hand side, B, does
not appear anywhere else.

<P>
It may happen that no rules are supplied for some uppercase letters
appearing in the rewriting steps.  In its extreme case, even S might
have no rules for it in the set, in which case there are no legitimate
names, of course.  Poor nameless babies, sigh!

<P>
Now your job is to write a program that finds the name earliest in the
alphabetical order among the legitimate names of the given length
conforming to the given set of rules.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input is a sequence of datasets, followed by a line containing two
zeros separated by a space representing the end of the input.  Each
dataset starts with a line including two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>l</I></SPAN>
separated by a space, where <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1\leq n\leq 50$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \leq$"> <I>n</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \leq$"> 50</SPAN>) is the number of
rules and <SPAN CLASS="MATH"><I>l</I></SPAN> (<!-- MATH
 $0\leq l\leq 20$
 -->
<SPAN CLASS="MATH">0 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \leq$"> <I>l</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \leq$"> 20</SPAN>) is the required length of the name.
After that line, <SPAN CLASS="MATH"><I>n</I></SPAN> lines each representing a rule follow.  Each of
these lines starts with one of uppercase letters, A to Z,
followed by the character ``='' (instead of ``<!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3623img1.png
 ALT="$ \rightarrow$"></SPAN>'') and
then followed by the right hand side of the rule which is a string
of letters A to Z and a to z.  The length of the string does not
exceed 10 and may be zero.  There appears no space in the lines
representing the rules.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output consists of the lines showing the answer to each dataset in
the same order as the input.  Each line is a string of lowercase
letters, a to z, which is the first legitimate name conforming to the
rules and the length given in the corresponding input dataset.  When
the given set of rules has no conforming string of the given length,
the corresponding line in the output should show a single hyphen,
``<TT>-</TT>''.  No other characters should be included in the output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 3
A=a
A=
S=ASb
S=Ab
2 5
S=aSb
S=
1 5
S=S
1 0
S=S
1 0
A=
2 0
A=
S=AA
4 5
A=aB
A=b
B=SA
S=A
4 20
S=AAAAAAAAAA
A=aA
A=bA
A=
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
abb
-
-
-
-

aabbb
aaaaaaaaaaaaaaaaaaaa
</PRE>

<P>

______________________________________________________
3624||||||false||||||
<P>Isaac is tired of his daily trip to his office, using the same shortest route everyday. Although this saves his time, he must see the same scenery again and again. He cannot stand such a boring commutation any more.<P>One day, he decided to improve the situation. He would change his route everyday at least slightly. His new scheme is as follows. On the first day, he uses the shortest route. On the second day, he uses the second shortest route, namely the shortest except one used on the first day. In general, on the <SPAN CLASS="MATH"><I>k</I></SPAN>-th day, the <SPAN CLASS="MATH"><I>k</I></SPAN>-th shortest route is chosen. Visiting the same place twice on a route should be avoided, of course.<P>You are invited to help Isaac, by writing a program which finds his route on the <SPAN CLASS="MATH"><I>k</I></SPAN>-th day. The problem is easily modeled using terms in the graph theory. Your program should find the <SPAN CLASS="MATH"><I>k</I></SPAN>-th shortest path in the given directed graph.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets, each in the following format.<P><BLOCKQUOTE><SPAN CLASS="MATH"><TABLE><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>n</I></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>m</I></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>k</I></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>a</I></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>b</I></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>x</I><SUB>1</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>y</I><SUB>1</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>d</I><SUB>1</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>x</I><SUB>2</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>y</I><SUB>2</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>d</I><SUB>2</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=3><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \vdots$"></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>x</I><SUB>m</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>y</I><SUB>m</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><I>d</I><SUB>m</SUB></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>&nbsp;</TD></TR></TABLE></SPAN></BLOCKQUOTE><P>Every input item in a dataset is a non-negative integer. Two or more input items in a line are separated by a space.<P><SPAN CLASS="MATH"><I>n</I></SPAN> is the number of nodes in the graph. You can assume the inequality <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$">50</SPAN>. <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of (directed) edges. <SPAN CLASS="MATH"><I>a</I></SPAN> is the start node, and <SPAN CLASS="MATH"><I>b</I></SPAN> is the goal node. They are between 1 and <SPAN CLASS="MATH"><I>n</I></SPAN>, inclusive. You are required to find the <SPAN CLASS="MATH"><I>k</I></SPAN>-th shortest path from <SPAN CLASS="MATH"><I>a</I></SPAN> to <SPAN CLASS="MATH"><I>b</I></SPAN>. You can assume <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$">200</SPAN> and <SPAN CLASS="MATH"><I>a</I><IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \ne$"><I>b</I></SPAN>.<P>The <SPAN CLASS="MATH"><I>i</I></SPAN>-th edge is from the node <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> to <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> with the length <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$"><I>m</I></SPAN>). Both <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> are between 1 and <SPAN CLASS="MATH"><I>n</I></SPAN>, inclusive. <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> is between 1 and 10000, inclusive. You can directly go from <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> to <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>, but not from <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> to <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> unless an edge from <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> to <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> is explicitly given. The edge connecting the same pair of nodes is unique, if any, that is, if <SPAN CLASS="MATH"><I>i</I><IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \ne$"><I>j</I></SPAN>, it is never the case that <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> equals <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> equals <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB></SPAN>. Edges are not connecting a node to itself, that is, <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> never equals <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>. Thus the inequality <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$"><I>n</I>(<I>n</I> - 1)</SPAN> holds.<P>Note that the given graph may be quite unrealistic as a road network. Both the cases <SPAN CLASS="MATH"><I>m</I> = 0</SPAN> and <SPAN CLASS="MATH"><I>m</I> = <I>n</I>(<I>n</I> - 1)</SPAN> are included in the judges' data.<P>The last dataset is followed by a line containing five zeros (separated by a space).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset in the input, one line should be output as specified below. An output line should not contain extra characters such as spaces.<P>If the number of distinct paths from <SPAN CLASS="MATH"><I>a</I></SPAN> to <SPAN CLASS="MATH"><I>b</I></SPAN> is less than <SPAN CLASS="MATH"><I>k</I></SPAN>, the string <TT>None</TT> should be printed. Note that the first letter of <TT>None</TT> is in uppercase, while the other letters are in lowercase.<P>If the number of distinct paths from <SPAN CLASS="MATH"><I>a</I></SPAN> to <SPAN CLASS="MATH"><I>b</I></SPAN> is <SPAN CLASS="MATH"><I>k</I></SPAN> or more, the node numbers visited in the <SPAN CLASS="MATH"><I>k</I></SPAN>-th shortest path should be printed in the visited order, separated by a hyphen (minus sign). Note that <SPAN CLASS="MATH"><I>a</I></SPAN> must be the first, and <SPAN CLASS="MATH"><I>b</I></SPAN> must be the last in the printed line.<P>In this problem the term <SPAN CLASS="textit">shorter</SPAN> (thus <SPAN CLASS="textit">shortest</SPAN> also) has a special meaning. A path <SPAN CLASS="MATH"><I>P</I></SPAN> is defined to be shorter than <SPAN CLASS="MATH"><I>Q</I></SPAN>, if and only if one of the following conditions holds.<P><OL><LI>The length of <SPAN CLASS="MATH"><I>P</I></SPAN> is less than the length of <SPAN CLASS="MATH"><I>Q</I></SPAN>. The length of a path is defined to be the sum of lengths of edges on the path.<P></LI><LI>The length of <SPAN CLASS="MATH"><I>P</I></SPAN> is equal to the length of <SPAN CLASS="MATH"><I>Q</I></SPAN>, and <SPAN CLASS="MATH"><I>P</I></SPAN>'s sequence of node numbers comes earlier than <SPAN CLASS="MATH"><I>Q</I></SPAN>'s in the dictionary order. Let's specify the latter condition more precisely. Denote <SPAN CLASS="MATH"><I>P</I></SPAN>'s sequence of node numbers by <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>s</SUB></SPAN>, and <SPAN CLASS="MATH"><I>Q</I></SPAN>'s by <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>, <I>q</I><SUB>2</SUB>,..., <I>q</I><SUB>t</SUB></SPAN>. <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB> = <I>q</I><SUB>1</SUB> = <I>a</I></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>s</SUB> = <I>q</I><SUB>t</SUB> = <I>b</I></SPAN> should be observed. The sequence <SPAN CLASS="MATH"><I>P</I></SPAN> comes earlier than <SPAN CLASS="MATH"><I>Q</I></SPAN> in the dictionary order, if for some <SPAN CLASS="MATH"><I>r</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3624img1.png ALT="$ \le$"><I>t</I></SPAN>), <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB> = <I>q</I><SUB>1</SUB>,..., <I>p</I><SUB>r-1</SUB> = <I>q</I><SUB>r-1</SUB></SPAN>, and <SPAN CLASS="MATH"><I>p</I><SUB>r</SUB> &lt; <I>q</I><SUB>r</SUB></SPAN> (<SPAN CLASS="MATH"><I>p</I><SUB>r</SUB></SPAN> is numerically smaller than <SPAN CLASS="MATH"><I>q</I><SUB>r</SUB></SPAN>). </LI></OL><P>A path visiting the same node twice or more is not allowed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 20 10 1 5
1 2 1
1 3 2
1 4 1
1 5 3
2 1 1
2 3 1
2 4 2
2 5 2
3 1 1
3 2 2
3 4 1
3 5 1
4 1 1
4 2 1
4 3 1
4 5 2
5 1 1
5 2 1
5 3 1
5 4 1
4 6 1 1 4
2 4 2
1 3 2
1 2 1
1 4 3
2 3 1
3 4 1
3 3 5 1 3
1 2 1
2 3 1
1 3 1
0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1-2-4-3-5
1-2-3-4
None
</PRE><P><P><P><BR><SPAN CLASS="textbf">Note:</SPAN> In the case of the first dataset, there are 16 paths from the node 1 to 5. They are ordered as follows (The number in parentheses is the length of the path).<P><BLOCKQUOTE><TABLE COLS=7><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(3)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-2-3-5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(5)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-2-3-4-5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(3)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-2-5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(5)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-2-4-3-5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(3)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-3-5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(5)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-2-4-5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(3)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-4-3-5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(5)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-3-4-5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(3)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-4-5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(6)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-3-2-5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(3)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(6)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-3-4-2-5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(4)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-4-2-3-5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(6)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-4-3-2-5</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(4)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-4-2-5</TD><TD></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>16</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>(8)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1-3-2-4-5</TD></TR></TABLE>
______________________________________________________
3625||||||false||||||
<P>For a given number, if greater than ten, round it to the nearest ten, then (if that result is greater than 100) take the result and round it to the nearest hundred, then (if that result is greater than 1000) take that number and round it to the nearest thousand, and so on <SPAN CLASS="MATH">...</SPAN><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will begin with a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> indicating the number of integers to round. The next <SPAN CLASS="MATH"><I>n</I></SPAN> lines each contain a single integer <SPAN CLASS="MATH"><I>x</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3625img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3625img1.png ALT="$ \le$">99999999)</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each integer in the input, display the rounded integer on its own line.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> Round up on fives.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 
15 
14 
4 
5 
99 
12345678 
44444445 
1445 
446
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
20 
10 
4 
5 
100 
10000000 
50000000 
2000 
500
</PRE><P>
______________________________________________________
3626||||||false||||||
<P>
You've got a queue. And you just got to mess with it. Given a queue of items and a series of queue operations, return the resulting queue. Queue operations are defined as follows:

<P>

<P>
<BR>

<!-- MATH
 $starting-position$
 -->
<SPAN CLASS="MATH"><I>starting</I> - <I>position</I></SPAN> to <!-- MATH
 $requested-position$
 -->
<SPAN CLASS="MATH"><I>requested</I> - <I>position</I></SPAN>

<P>

<P>
<BR>
meaning one wants the item at the starting position to be moved to the requested position. So if the queue of items were:

<P>

<P>
<BR>

<!-- MATH
 $Item1 \ Item2 \ Item3 \ Item4 \ Item5$
 -->
<SPAN CLASS="MATH"><I>Item</I>1&nbsp;<I>Item</I>2&nbsp;<I>Item</I>3&nbsp;<I>Item</I>4&nbsp;<I>Item</I>5</SPAN>

<P>

<P>
<BR>

(<SPAN CLASS="MATH"><I>Item</I>1</SPAN> being in position 1, <SPAN CLASS="MATH"><I>Item</I>2</SPAN> in position 2, etc.) 

<P>

<P>
<BR>
after applying the queue operation: 5 to 2 the resulting queue would be:

<P>

<P>
<BR>

<!-- MATH
 $Item1 \ Item5 \ Item2 \ Item3 \ Item4$
 -->
<SPAN CLASS="MATH"><I>Item</I>1&nbsp;<I>Item</I>5&nbsp;<I>Item</I>2&nbsp;<I>Item</I>3&nbsp;<I>Item</I>4</SPAN>

<P>

<P>
<BR>
as <SPAN CLASS="MATH"><I>Item</I>5</SPAN> (the item in position 5) was moved to position 2. Multiple queue operations are applied at the same time, however; e.g., given the queue of items:

<P>

<P>
<BR>

<!-- MATH
 $Item1 \ Item2 \ Item3 \ Item4 \ Item5 \ Item6 \ Item7 \ Item8$
 -->
<SPAN CLASS="MATH"><I>Item</I>1&nbsp;<I>Item</I>2&nbsp;<I>Item</I>3&nbsp;<I>Item</I>4&nbsp;<I>Item</I>5&nbsp;<I>Item</I>6&nbsp;<I>Item</I>7&nbsp;<I>Item</I>8</SPAN>

<P>

<P>
<BR>
If the following queue operations were applied:

<P>

<P>
<BR>
2 to 6; 6 to 3; 4 to 5; 5 to 2; 7 to 4; 8 to 1

<P>

<P>
<BR>
then the resulting queue would be:

<P>

<P>
<BR>

<!-- MATH
 $Item8 \ Item5 \ Item6 \ Item7 \ Item4 \ Item2 \ Item1 \ Item3$
 -->
<SPAN CLASS="MATH"><I>Item</I>8&nbsp;<I>Item</I>5&nbsp;<I>Item</I>6&nbsp;<I>Item</I>7&nbsp;<I>Item</I>4&nbsp;<I>Item</I>2&nbsp;<I>Item</I>1&nbsp;<I>Item</I>3</SPAN>

<P>

<P>
<BR>
As you can see, the queue operations are strictly enforced, with other items (not involved in queue operations) maintaining their order and moving to vacant positions in the queue. Note that no two queue operations will have the same <SPAN  CLASS="textit">starting-position</SPAN> or same <SPAN  CLASS="textit">requested-position</SPAN> defined.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to this problem will begin with a line containing a single integer <SPAN CLASS="MATH"><I>x</I></SPAN> indicating the number of datasets. Each data set consists of three components: 

<P>

<OL>
<LI>Start line - A single line, ``<SPAN CLASS="MATH"><I>m</I>&nbsp;<I>n</I></SPAN>" <!-- MATH
 $(1 \le m, n \le 20$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3626img1.png
 ALT="$ \le$"><I>m</I>, <I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3626img1.png
 ALT="$ \le$">20</SPAN>) where <SPAN CLASS="MATH"><I>m</I></SPAN> indicates the number of items in the queue and <SPAN CLASS="MATH"><I>n</I></SPAN> indicates the number of queue operations. 
</LI>
<LI>Queue items - A line of short (between 1 and 8 characters) alphanumeric names for the items in the queue. Names are unique for a given data set and contain no whitespace. 
</LI>
<LI>Queue operations - <SPAN CLASS="MATH"><I>n</I></SPAN> lines of queue operations in the format ``<!-- MATH
 $starting-position \ requested-position$
 -->
<SPAN CLASS="MATH"><I>starting</I> - <I>position</I>&nbsp;<I>requested</I> - <I>position</I></SPAN>".
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each dataset, output the queue after the queue operations have been applied. Print the elements of the queue on a single line, starting from the first and ending with the last, with a single space separating each item. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
5 1 
alpha beta gamma delta epsilon 
5 2 
8 6 
a b c d e f g h 
2 6 
6 3 
4 5 
5 2 
7 4 
8 1 
3 2 
foo bar baz 
3 1 
1 3
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
alpha epsilon beta gamma delta 
h e f g d b a c 
baz bar foo
</PRE> 

<P>

______________________________________________________
3627||||||false||||||
<P>The local ACM Newsletter has decided to start running a crossword puzzle in each issue. Instead of purchasing premade puzzles, however, the editors would like to be able to make puzzles in various shapes and with words of their own choosing. They've turned to you for the development of the puzzles <SPAN CLASS="MATH">...</SPAN> and as a programmer, you've decided to turn to your computer and solve the problem once and for all.<P>A crossword grid looks like this:<P><PRE>
..#...... 
#.#...... 
######### 
#.#.#...# 
#.#.....# 
######..# 
#.#......
</PRE><P>Each continuous row or column of two or more hash marks represents a single word, one letter per mark. Where rows and columns cross, the letter in the shared mark must be the same.<P>Your goal is to write a program that fills a given grid with a given set of words such that:<P><P><BR><UL><LI>every mark in the grid contains a letter; </LI><LI>no other cells in the grid contain a letter; </LI><LI>every word in the word list appears once and only once in the grid with no unused words left over;<P>and </LI><LI>no words (or other sequences of letters) not in the word list appear in the grid </LI></UL><P><P><BR>Words inside of other words (BRIGHT inside of BRIGHTLY, for example) do not count as an appearance of the sub-word. You may assume that every word in the word list is unique in that puzzle. You may also assume that there is at most one possible layout for a given grid and word list.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of data will be a number representing the number of datasets in the file. For each dataset, the first line consists of two integers <SPAN CLASS="MATH"><I>w</I>&nbsp;<I>h</I></SPAN> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3627img1.png ALT="$ \le$"><I>w</I>, <I>h</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3627img1.png ALT="$ \le$">15)</SPAN> where <SPAN CLASS="MATH"><I>w</I></SPAN> is the width of the puzzle and <SPAN CLASS="MATH"><I>h</I></SPAN> is the height. The next <SPAN CLASS="MATH"><I>h</I></SPAN> lines of the dataset are a representation of the crossword puzzle grid, as shown above. All word spaces in the puzzle will be at least two characters in length. The next line consists of an integer <SPAN CLASS="MATH"><I>c</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3627img1.png ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3627img1.png ALT="$ \le$">100)</SPAN> representing the number of words in the crossword. The next <SPAN CLASS="MATH"><I>c</I></SPAN> lines contain the words in the word list.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset in the input, output the heading ``<TT>Puzzle #</TT><SPAN CLASS="MATH"><I>x</I></SPAN>", where <SPAN CLASS="MATH"><I>x</I></SPAN> is 1 for the first dataset, 2 for the second, and so on. Then print either ``<TT>I cannot generate this puzzle.</TT>" if the puzzle is impossible to generate given that grid and word list, or print a solved representation of the puzzle as shown below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
9 7 
..#...... 
#.#...... 
######### 
#.#.#...# 
#.#.....# 
######..# 
#.#...... 
6 
COMPUTE 
LAMPSHADE 
EDIT
SO 
PLAYER 
ESTEEM 
5 5 
##### 
#.#.# 
##### 
#.#.# 
##### 
6 
ADAGE 
ANGRY 
YEARN 
NEEDS 
FLUTE 
XYZZY
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Puzzle #1 
..C...... 
P.O...... 
LAMPSHADE 
A.P.O...D 
Y.U.....I 
ESTEEM..T 
R.E...... 
Puzzle #2 
I cannot generate this puzzle.
</PRE><P>
______________________________________________________
3628||||||false||||||
<P>The Genographic Project is a research partnership between IBM and The National Geographic Society that is analyzing DNA from hundreds of thousands of contributors to map how the Earth was populated.<P>As an IBM researcher, you have been tasked with writing a program that will find commonalities amongst given snippets of DNA that can be correlated with individual survey information to identify new genetic markers.<P>A DNA base sequence is noted by listing the nitrogen bases in the order in which they are found in the molecule. There are four bases: adenine (<TT>A</TT>), thymine (<TT>T</TT>), guanine (<TT>G</TT>), and cytosine (<TT>C</TT>). A 6-base DNA sequence could be represented as <TT>TAGACC</TT>.<P>Given a set of DNA base sequences, determine the longest series of bases that occurs in all of the sequences.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will begin with a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> indicating the number of datasets. Each dataset consists of the following components:<P><OL><LI>A single positive integer <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3628img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3628img1.png ALT="$ \le$">10)</SPAN> indicating the number of base sequences in this dataset. </LI><LI><SPAN CLASS="MATH"><I>m</I></SPAN> lines each containing a single base sequence consisting of <SPAN CLASS="textbf">60</SPAN> bases. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset in the input, output the longest base subsequence common to all of the given base sequences. If the longest common subsequence is less than three bases in length, display the string ``<TT>no significant commonalities</TT>" instead. If multiple subsequences of the same longest length exist, output only the subsequence that comes first in alphabetical order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
2 
GATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 
3 
GATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATA
GATACTAGATACTAGATACTAGATACTAAAGGAAAGGGAAAAGGGGAAAAAGGGGGAAAA 
GATACCAGATACCAGATACCAGATACCAAAGGAAAGGGAAAAGGGGAAAAAGGGGGAAAA
3 
CATCATCATCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
ACATCATCATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 
AACATCATCATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
no significant commonalities 
AGATAC 
CATCATCAT
</PRE><P>
______________________________________________________
3629||||||false||||||
<P><SPAN CLASS="textit">Core Wars</SPAN> is a game in which two opposing warrior programs attempt to destroy each other in the memory of a virtual machine. They do this by overwriting each other's instructions, and the first program to execute an illegal instruction is declared the loser. Each program is written in an assembly-like language called <SPAN CLASS="textbf">Redcode</SPAN>, and the virtual machine which executes the two programs is known as the <SPAN CLASS="textbf">Memory Array Redcode Simulator</SPAN> (MARS). Your goal is to write a MARS that will read in two Redcode programs, simulate them, and print out which program was the winner.<P>MARS simulates a somewhat unusual environment compared to other virtual machines and processor architectures. The following list describes these differences in detail:<P><OL><LI>MARS simulates a machine with 8000 memory locations and each location stores exactly one Redcode instruction. In fact, a memory location can only store instructions and cannot directly store any data. However, each instruction includes two numeric operands, and these in turn can be manipulated by other instructions for data storage. This also makes self-modifying code possible. </LI><LI>The memory locations are arranged as a continuous array with the first location having address 0 and the last having 7999. All address calculations are performed using modulo 8000 arithmetic. Put in another way, memory addresses wrap around so that addresses 8000, 8001, and 8002 refer to same memory locations respectively as addresses 0, 1, and 2. This also works for negative numbers. For example, -7481, -15481, 519, and 8519 all refer to the same memory location. </LI><LI>All arithmetic and comparison operations are performed modulo 8000. Additions must normalize their final result to be in the range of 0 to 7999 (inclusive) before writing that result into memory. This also implies that -124 is considered to be <SPAN CLASS="textit">greater</SPAN> than 511 since after normalization, -124 becomes 7876, and 7876 is greater than 511. </LI><LI>The simulator maintains two separate instruction pointers (IPs) that store the address of the next instruction to be executed by the warrior programs. After loading both programs into memory, these IPs are initialized to the first instruction of each program. As the programs run, the IP is incremented by one (modulo 8000) after each instruction is executed. If a jump/skip instruction is executed, then the IP is instead loaded with the destination address of the jump/skip and execution continues from this new address. </LI><LI>The simulator ``time slices" between warriors by executing one instruction at a time, and alternating between programs after each instruction. For example, if the two programs were loaded at addresses 2492 and 6140, the first six instructions would be executed in this order (assuming no jump/skip instruction were executed): 2492, 6140, 2493, 6141, 2494, 6142. </LI></OL><P>Every instruction in MARS consists of an opcode, written as a three letter mnemonic, and two operands called the A and B fields. Each operand is a number in the range 0-7999 (inclusive) and each can use one of three addressing modes: immediate, direct, and indirect. These modes are explained in more detail below:<P><UL><LI>Immediate operands are written with a ``<TT>#</TT>" sign in front, as in <TT>#1234</TT>. An immediate operand specifies a literal value for the instruction to operate on. For example, the first operand (i.e. the A field) of an ADD instruction (which performs integer addition) can be an immediate. In that case, the literal value specified by the first operand provides one of the numbers being added. </LI><LI>Direct operands identify the memory locations which an instruction is to access. They are written with a ``<SPAN CLASS="MATH">$</SPAN>" sign in front, as in $1234. One example would be <TT>ADD #5 $3</TT>. A direct operand is actually an offset relative to the current IP address. For example, if the <TT>ADD #5 $3</TT> instruction were stored in memory location 4357, it would actually be adding together a literal number five with a second value stored in the B field of location 4360 (4357 + 3). However, if that same instruction were stored at location 132 it would be adding five to a value in the B field of location 135 (132 + 3). </LI><LI>Indirect operands are analogous to how pointers in some programming languages work. Indirect operands are written with a ``" sign in front of the number, as in <TT>ADD #5 3</TT>. Like before, the indirect operand is an offset relative to the current IP address, and therefore identifies a particular memory location. However, the value stored in the B field of this memory location is then used as an offset relative to <SPAN CLASS="textit">that</SPAN> location to <SPAN CLASS="textit">identify</SPAN> a second location. It is the B field of this second location which will actually be operated on by the instruction itself. For example, if location 4357 contained <TT>ADD 1 3</TT>, location 4358 contained 11 in its B field, and location 4360 contained 7996 in its B field, then this instruction would actually be adding the values stored in locations 4369 (4358 + 11) and 4356 (4360 + 7996 modulo 8000). </LI></UL><P>The list below explains what each instruction does based on its opcode. Although not all instructions use both of their operands, these must still be specified since other instructions might use these operands for data storage. <SPAN CLASS="textbf">Some instructions update the B field of another instruction; this only affects the numerical value of the field, but does <SPAN CLASS="textit">not</SPAN> change its addressing mode.</SPAN><P><DL COMPACT><DT><TT>DAT</TT></DT><DD>This instruction has two purposes. First, it can be used as a generic placeholder for arbitrary data. Second, attempting to execute this instruction terminates the simulation and the program which tried to execute it loses the match. This is the only way that a program can terminate, therefore each warrior attempts to overwrite the other one's program with <TT>DAT</TT> instructions. Both A and B operands must be immediate.</DD><DT><TT>MOV</TT></DT><DD>If the A operand is immediate, the value of this operand is copied into the B field of the instruction specified by <TT>MOV</TT>'s B operand. If neither operand is immediate, the entire instruction (including all field values and addressing modes) at location A is copied to location B. The B operand cannot be immediate.</DD><DT><TT>ADD</TT></DT><DD>If the A operand is immediate, its value is added to the value of the B field of the instruction specified by <TT>ADD</TT>'s B operand, and the final result is stored into the B field of that same instruction. If neither operand is immediate, then they both specify the locations of two instructions in memory. In this case, the A and B fields of one instruction are respectively added to the A and B fields of the second instruction, and both results are respectively written to the A and B fields of the instruction specified by the ADD's B operand. The B operand cannot be immediate.</DD><DT><TT>JMP</TT></DT><DD>Jump to the address specified by the A operand. In other words, the instruction pointer is loaded with a new address (instead of being incremented), and the next instruction executed after the <TT>JMP</TT> will be from the memory location specified by A. The A operand cannot be immediate. The B operand must be immediate, but is not used by this instruction.</DD><DT><TT>JMZ</TT></DT><DD>If the B field of the instruction specified by <TT>JMZ</TT>'s B operand is zero, then jump to the address specified by the A operand. Neither the A nor B operand can be immediate.</DD><DT><TT>SLT</TT></DT><DD>If A is an immediate operand, its value is compared with the value in the B field of the instruction specified by <TT>SLT</TT>'s B operand. If A is not immediate, the B fields of the two instructions specified by the operands are compared instead. If the first value (i.e the one specified by A) is less than the second value, then the next instruction is skipped. The B operand cannot be immediate.</DD><DT><TT>CMP</TT></DT><DD>The entire contents of memory locations specified by A and B are checked for equality. If the two locations are equal, then the next instruction is skipped. Memory locations are considered equal to another if they both have the same opcodes <SPAN CLASS="textbf">and</SPAN> they have the same values and addressing modes in their respective operand fields. The A or B operands cannot be immediate.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input begins with a line containing a single integer n indicating the number of independant simulations to run. For each simulation the input will contain a pair of programs, designated as warrior number one and warrior number two. Each warrior program is specified using the following format:<P>One line with integer <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3629img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3629img1.png ALT="$ \le$">8000)</SPAN> indicating the number of instructions to load for this warrior. A second line containing an integer <SPAN CLASS="MATH"><I>a</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3629img1.png ALT="$ \le$"><I>a</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3629img1.png ALT="$ \le$">7999)</SPAN> gives the address at which to start loading the warrior's code. These two lines are then followed by <SPAN CLASS="MATH"><I>m</I></SPAN> additional lines containing the warrior's instructions, with one instruction per line. If the warrior is loaded at the end of memory, the address will wrap around and the instructions continue loading from the beginning of memory.<P>The address ranges occupied by the two programs will not overlap. <SPAN CLASS="textbf">All other memory locations which were not loaded with warrior code must be initialized to <TT>DAT #0 #0</TT></SPAN>. Execution always begins with warrior number one (i.e. the warrior read in first from the input file).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each simulation continues running until either warrior executes a <TT>DAT</TT> instruction or until a total of 32000 instructions (counting both warriors) are executed. If one warrior program executes a <TT>DAT</TT>, the other is declared the winner; display ``<TT>Program #<SPAN CLASS="MATH"><I>x</I></SPAN> is the winner.</TT>", where <SPAN CLASS="MATH"><I>x</I></SPAN> is either 1 or 2 and represents the number of the winning warrior. If neither program executes a <TT>DAT</TT> after the maximum instruction count is reached, then the programs are tied; display ``<TT>Programs are tied.</TT>"<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3 
185 
ADD #4 $2 
JMP $-1 #0 
DAT #0 #-3 
5 
100 
JMP $2 #0
DAT #0 #-1 
ADD #5 $-1 
MOV $-2 @-2 
JMP $-2 #0 
1 
5524 
MOV $0 $1 
5 
539 
JMP $2 #0 
DAT #0 #-1 
ADD #5 $-1 
MOV $-2 @-2 
JMP $-2 #0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Program #2 is the winner. 
Programs are tied.
</PRE><P>
______________________________________________________
3630||||||false||||||
<P>When writing game programs, it is often useful to determine when two polygons intersect one another. This is especially useful in arcade games like <SPAN CLASS="textit">Asteroids</SPAN> where one polygon could represent a spaceship while another represents a huge, unyielding chunk of space rock.<P>Write a program that can determine which polygons of a given set intersect one another.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem will begin with a line containing a single integer n indicating the number of datasets. Each data set consists of the following components:<P><UL><LI>A line containing a single positive integer <SPAN CLASS="MATH"><I>m</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3630img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3630img1.png ALT="$ \le$">10)</SPAN> indicating the number of polygons to analyze. </LI><LI><SPAN CLASS="MATH"><I>m</I></SPAN> lines, each representing a single polygon, with the first line describing polygon 1, the second line describing polygon 2, and so on. Each line begins with a single positive integer <SPAN CLASS="MATH"><I>v</I></SPAN> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3630img1.png ALT="$ \le$"><I>v</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3630img1.png ALT="$ \le$">20)</SPAN> indicating the number of vertices describing this polygon. This is followed by <SPAN CLASS="MATH"><I>v</I></SPAN> <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinate pairs <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3630img1.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3630img1.png ALT="$ \le$">100)</SPAN>, each of which is a vertex of this polygon. The vertices are connected by edges in the order listed with the last vertex connected back to the first by a final edge. All polygons are ``simple"; they do not self-intersect. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset in the input, output the heading ``<TT>Data Set #</TT><SPAN CLASS="MATH"><I>z</I></SPAN>", where <SPAN CLASS="MATH"><I>z</I></SPAN> is 1 for the first dataset, 2 for the second, etc. If this data set contained no intersecting polygons, output the message ``<TT>no collisions</TT>" on its own line. Otherwise, output the list of all pairs of intersecting polygons, one pair per line, each pair formatted with the lowest-numbered polygon first. Output the polygon pairs in ascending order, sorting first by the lowest-numbered polygon in the set and then the second.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> The definition of ``intersecting" for the purpose of this problem means that two polygons either share an interior region (i.e., they overlap), or they share boundary points (i.e., they touch at a point or along an edge).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2
4 0,0 1,0 1,1 0,1 
4 2,2 3,2 3,3 2,3 
4 
3 2,1 1,2 2,3 
3 2,1 3,2 2,3 
5 2,0 4,2 2,4 5,4 5,0 
4 3,3 1,3 1,5 3,5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Data Set #1 
no collisions 
Data Set #2 
1 2 
1 4 
2 4 
3 4
</PRE><P>
______________________________________________________
3631||||||false||||||
<P>
The cornfield maze is a popular Halloween treat. Visitors are shown the entrance and must wander through the maze facing zombies, chainsaw-wielding psychopaths, hippies, and other terrors on their quest to find the exit. 

<P>
One popular maze-walking strategy guarantees that the visitor will eventually find the exit. Simply choose either the right or left wall, and follow it. Of course, there's no guarantee which strategy (left or right) will be better, and the path taken is seldom the most efficient. (It also doesn't work on mazes with exits that are not on the edge; those types of mazes are not represented in this problem.) 

<P>
As the proprieter of a cornfield that is about to be converted into a maze, you'd like to have a computer program that can determine the left and right-hand paths along with the shortest path so that you can figure out which layout has the best chance of confounding visitors. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input to this problem will begin with a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> indicating the number of mazes. Each maze will consist of one line with a width, <SPAN CLASS="MATH"><I>w</I></SPAN>, and height, <SPAN CLASS="MATH"><I>h</I></SPAN> <!-- MATH
 $(3 \le w, h \le 40)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3631img1.png
 ALT="$ \le$"><I>w</I>, <I>h</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3631img1.png
 ALT="$ \le$">40)</SPAN>, followed by <SPAN CLASS="MATH"><I>h</I></SPAN> lines of <SPAN CLASS="MATH"><I>w</I></SPAN> characters each that represent the maze layout. Walls are represented by hash marks (`<SPAN CLASS="MATH">#</SPAN>'), empty space by periods (`.'), the start by an `<TT>S</TT>' and the exit by an `<TT>E</TT>'. Exactly one `<TT>S</TT>' and one `<TT>E</TT>' will be present in the maze, and they will always be located along one of the maze edges and never in a corner. The maze will be fully enclosed by walls (`<SPAN CLASS="MATH">#</SPAN>'), with the only openings being the `<TT>S</TT>' and `<TT>E</TT>'. The `<TT>S</TT>' and `<TT>E</TT>' will also be separated by at least one wall (`<SPAN CLASS="MATH">#</SPAN>'). You may assume that the maze exit is always reachable from the start point. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each maze in the input, output on a single line the number of (not necessarily unique) squares that a person would visit (including the `<TT>S</TT>' and `<TT>E</TT>') for (in order) the left, right, and shortest paths, separated by a single space each. Movement from one square to another is only allowed in the horizontal or vertical direction; movement along the diagonals is not allowed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
8 8
######## 
#......# 
#.####.# 
#.####.# 
#.####.# 
#.####.# 
#...#..# 
#S#E#### 
9 5 
######### 
#.#.#.#.# 
S.......E 
#.#.#.#.# 
#########
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
37 5 5 
17 17 9
</PRE> 

<P>

______________________________________________________
3632||||||false||||||
<P>
You are the lead programmer for the Securitron 9042, the latest and greatest in home security software from Jellern Inc. (Motto: We secure your stuff so YOU can't even get to it). The software is designed to ``secure" a room; it does this by determining the minimum number of locks it has to perform to prevent access to a given room from one or more other rooms. Each door connects two rooms and has a single control panel that will unlock it. This control panel is accessible from only one side of the door. So, for example, if the layout of a house looked like this:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3632.eps}$
 -->
<IMG
 WIDTH="492" HEIGHT="324" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3632.png
 ALT="\epsfbox{p3632.eps}">
</DIV>
with rooms numbered 0-6 and control panels marked with the letters ``CP" (each next to the door it can unlock and in the room that it is accessible from), then one could say that the minimum number of locks to perform to secure room <SPAN  CLASS="textbf">2</SPAN> from room <SPAN  CLASS="textbf">1</SPAN> is two; one has to lock the door between room <SPAN  CLASS="textbf">2</SPAN> and room <SPAN  CLASS="textbf">1</SPAN> <SPAN  CLASS="textit">and</SPAN> the door between room <SPAN  CLASS="textbf">3</SPAN> and room <SPAN  CLASS="textbf">1</SPAN>. Note that it is impossible to secure room <SPAN  CLASS="textbf">2</SPAN> from room <SPAN  CLASS="textbf">3</SPAN>, since one would always be able to use the control panel in room <SPAN  CLASS="textbf">3</SPAN> that unlocks the door between room <SPAN  CLASS="textbf">3</SPAN> and room <SPAN  CLASS="textbf">2</SPAN>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input to this problem will begin with a line containing a single integer <SPAN CLASS="MATH"><I>x</I></SPAN> indicating the number of datasets. Each data set consists of two components: 

<P>

<OL>
<LI>Start line - a single line ``<SPAN CLASS="MATH"><I>m</I>&nbsp;<I>n</I></SPAN>" <!-- MATH
 $(1 \le m \le 20; 0 \le n \le 19)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3632.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3632.png
 ALT="$ \le$">20;0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3632.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3632.png
 ALT="$ \le$">19)</SPAN> where <SPAN CLASS="MATH"><I>m</I></SPAN> indicates the number of rooms in the house and <SPAN CLASS="MATH"><I>n</I></SPAN> indicates the room to secure (the panic room). 
</LI>
<LI>Room list - a series of <SPAN CLASS="MATH"><I>m</I></SPAN> lines. Each line lists, for a single room, whether there is an intruder in that room (``<TT>I</TT>" for intruder, ``<TT>NI</TT>" for no intruder), a count of doors <SPAN CLASS="MATH"><I>c</I></SPAN> <!-- MATH
 $(0 \le c \le 20)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3632.png
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3632.png
 ALT="$ \le$">20)</SPAN> that lead to other rooms and have a control panel in this room, and a list of rooms that those doors lead to. For example, if room 3 had no intruder, and doors to rooms 1 and 2, and each of those doors' control panels were accessible from room 3 (as is the case in the above layout), the line for room 3 would read ``<TT>NI 2 1 2</TT>". The first line in the list represents room 0. The second line represents room 1, and so on until the last line, which represents room <SPAN CLASS="MATH"><I>m</I> - 1</SPAN>. On each line, the rooms are always listed in ascending order. It is possible for rooms to be connected by multiple doors and for there to be more than one intruder! 
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each dataset, output the fewest number of locks to perform to secure the panic room from all the intruders. If it is impossible to secure the panic room from all the intruders, output ``<TT>PANIC ROOM BREACH</TT>". Assume that all doors start out unlocked and there will not be an intruder in the panic room. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
7 2 
NI 0 
I 3 0 4 5 
NI 2 1 6 
NI 2 1 2 
NI 0 
NI 0 
NI 0 
7 2 
I 0 
NI 3 0 4 5 
NI 2 1 6 
I 2 1 2 
NI 0 
NI 0 
NI 0 
4 3 
I 0 
NI 1 2 
NI 1 0 
NI 4 1 1 2 2
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
PANIC ROOM BREACH 
1

______________________________________________________
3633||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>A - Sudoku</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem A - Sudoku</h1><h3>Time limit: 5 seconds</h3><p>Oh no! Bill just realized that the sudoku puzzle he had spent the last ten minutes trying to solve essentially was last week's puzzle, only rotated counterclockwise. How cheap! Couldn't the magazine afford to make a new one every week? Of course, he had no way of knowing about this before he started to solve it, as the holes to fill with digits were other than last week. Nevertheless, realizing that this week's puzzle was a simple derivative of last week's certainly took the fun out of solving the rest of it.<p><img src="http://livearchive.onlinejudge.org/external/36/p3633.png> The sudoku board consists of 9&times;9 cells. These can be grouped into 3&times;3 <em>regions</em> of 3&times;3 cells each. Some of the cells are filled with a digit 1 through 9 while the rest of them are left empty. The aim of the game is to fill each empty cell with a digit 1...9 so that every row, every column and every region contains each of the numbers 1...9 exactly once. A proper sudoku puzzle always has exactly one solution.<p>Help Bill avoid unpleasant surprises by creating a program that checks whether an unsolved sudoku puzzle is in fact derived from an earlier puzzle by simple operations.<p>The allowed operations are:<ul><li>Rotating the entire puzzle clockwise or counterclockwise. <li>Swapping two columns within a 3&times;9 column segment. <li>Swapping two rows within a 9&times;3 row segment. <li>Swapping entire row or column segments. <li>Applying a permutation <em>f</em> of the digits 1...9 to every cell (i.e. replace <em>x</em> by <em>f(x)</em> in every cell).</ul><p>An operation is considered being performed on the sudoku solution (rather than on the unsolved puzzle) and always guarantees that if the board before the transformation was a solution to a sudoku puzzle, it still is afterwards.<h2>Input</h2><p>The input starts with the number of test cases 0 &le; <em>N</em> &le; 50 on a single line.<p>Then for every test case follow nine lines describing last week's puzzle solution, from top to bottom. Each line corresponds to a row in the puzzle and consists of nine digits (1...9), describing the contents of the cell from left to right.<p>Last week's solution is followed by nine lines describing this week's unsolved puzzle. Here, also, every line corresponds to a puzzle row and every digit (0...9) describes the contents of a cell. 0 indicates that the cell is empty. The rows are presented ordered from top to bottom, and within each row, the cells are ordered from left to right.<p>After every test case except the last one follows a blank line. Every unsolved puzzle is guaranteed to be uniquely solvable and last week's solution is always a proper sudoku solution.<h2>Output</h2>For every test case, output <tt>Yes</tt> if the sudoku puzzle can be derived from the given solved puzzle using the allowed operations, or <tt>No</tt> if this is not possible.<div class="sample"><h2>Sample Input</h2><pre>
2
963174258
178325649
254689731
821437596
496852317
735961824
589713462
317246985
642598173
060104050
200000001
008305600
800407006
006000300
700901004
500000002
040508070
007206900

534678912
672195348
198342567
859761423
426853791
713924856
961537284
287419635
345286179
010900605
025060070
870000902
702050043
000204000
490010508
107000056
040080210
208001090
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
Yes
No
</pre></div><div class="source">The 2006 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3634||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>B - The SetStack Computer</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem B - The SetStack Computer</h1><h3>Time limit: 3 seconds</h3><p><img src="http://livearchive.onlinejudge.org/external/36/p3634.jpg> Background from Wikipedia: <q>Set theory is a branch of mathematics created principally by the German mathematician Georg Cantor at the end of the 19th century. Initially controversial, set theory has come to play the role of a foundational theory in modern mathematics, in the sense of a theory invoked to justify assumptions made in mathematics concerning the existence of mathematical objects (such as numbers or functions) and their properties. Formal versions of set theory also have a foundational role to play as specifying a theoretical ideal of mathematical rigor in proofs.</q><p>Given this importance of sets, being the basis of mathematics, a set of eccentric theorist set off to construct a supercomputer operating on sets instead of numbers. The initial SetStack Alpha is under construction, and they need you to simulate it in order to verify the operation of the prototype.<p>The computer operates on a single stack of sets, which is initially empty. After each operation, the cardinality of the topmost set on the stack is output. The cardinality of a set <em>S</em> is denoted |<em>S</em>| and is the number of elements in <em>S</em>. The instruction set of the SetStack Alpha is <tt>PUSH</tt>, <tt>DUP</tt>, <tt>UNION</tt>, <tt>INTERSECT</tt>, and <tt>ADD</tt>}.<ul><li><tt>PUSH</tt> will push the empty set {} on the stack. <li><tt>DUP</tt> will duplicate the topmost set (pop the stack, and then push that set on the stack twice). <li><tt>UNION</tt> will pop the stack twice and then push the union of the two sets on the stack. <li><tt>INTERSECT</tt> will pop the stack twice and then push the intersection of the two sets on the stack. <li><tt>ADD</tt> will pop the stack twice, add the first set to the second one, and then push the resulting set on the stack.</ul><p>For illustration purposes, assume that the topmost element of the stack is<p><em>A</em> = { {}, {{}} },<p>and that the next one is<p><em>B</em> = { {}, {{{}}} }.<p>For these sets, we have |<em>A</em>| = 2 and |<em>B</em>| = 2. Then:<ul><li><tt>UNION</tt> would result in the set { {}, {{}}, {{{}}} }. The output is 3. <li><tt>INTERSECT</tt> would result in the set { {} }. The output is 1. <li><tt>ADD</tt> would result in the set { {}, {{{}}}, {{},{{}}} }. The output is 3.</ul><h2>Input</h2><p>An integer 0 &le; <em>T</em> &le; 5 on the first line gives the cardinality of the set of test cases. The first line of each test case contains the number of operations 0 &le; <em>N</em> &le; 2000. Then follow <em>N</em> lines each containing one of the five commands. It is guaranteed that the SetStack computer can execute all the commands in the sequence without ever popping an empty stack.<h2>Output</h2><p>For each operation specified in the input, there will be one line of output consisting of a single integer. This integer is the cardinality of the topmost element of the stack after the corresponding command has executed. After each test case there will be a line with <tt>***</tt> (three asterisks).<div class="sample"><h2>Sample Input</h2><pre>
2
9
PUSH
DUP
ADD
PUSH
ADD
DUP
ADD
DUP
UNION
5
PUSH
PUSH
ADD
PUSH
INTERSECT
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
0
0
1
0
1
1
2
2
2
***
0
0
1
0
0
***
</pre></div><div class="source">The 2006 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3635||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>C - Pie</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem C - Pie</h1><h3>Time limit: 1 second</h3><p><img src="http://livearchive.onlinejudge.org/external/36/p3635.jpg> My birthday is coming up and traditionally I'm serving pie. Not just one pie, no, I have a number <em>N</em> of them, of various tastes and of various sizes. <em>F</em> of my friends are coming to my party and each of them gets a piece of pie. This should be one piece of one pie, not several small pieces since that looks messy. This piece can be one whole pie though.<p>My friends are very annoying and if one of them gets a bigger piece than the others, they start complaining. Therefore all of them should get equally sized (but not necessarily equally shaped) pieces, even if this leads to some pie getting spoiled (which is better than spoiling the party). Of course, I want a piece of pie for myself too, and that piece should also be of the same size.<p>What is the largest possible piece size all of us can get? All the pies are cylindrical in shape and they all have the same height 1, but the radii of the pies can be different.<h2>Input</h2><p>One line with a positive integer: the number of test cases. Then for each test case:<ul><li>One line with two integers <em>N</em> and <em>F</em> with 1 &le; <em>N, F</em> &le; 10000: the number of pies and the number of friends. <li>One line with <em>N</em> integers <em>r<sub>i</sub></em> with 1 &le; <em>r<sub>i</sub></em> &le; 10000: the radii of the pies.</ul><h2>Output</h2>For each test case, output one line with the largest possible volume <em>V</em> such that me and my friends can all get a pie piece of size <em>V</em>. The answer should be given as a floating point number with an absolute error of at most 10<sup>-3</sup>.<div class="sample"><h2>Sample Input</h2><pre>
3
3 3
4 3 3
1 24
5
10 5
1 4 2 3 4 5 6 5 4 2
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
25.1327
3.1416
50.2655
</pre></div><div class="source">The 2006 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3636||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>D - Ticket to Ride</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem D - Ticket to Ride</h1><h3>Time limit: 2 seconds</h3><p><img src="http://livearchive.onlinejudge.org/external/36/p3636.png> Ticket to Ride is a board game for up to 5 players. The goal of the game is to set up train lines (and to thwart the opponents' attempts at setting up their train lines). At the beginning of play, each player is assigned four train lines. A player may choose to discard as many of these four assignments as she likes. Each assignment has a score, corresponding to its difficulty (so, typically, a train line between e.g. Stockholm and Tokyo would be worth more than a train line between e.g. Stockholm and Utrecht). At the end of the game, each player gets points for the assignments that they have successfully completed, and penalty points for the assignments that they have failed to complete.<p>An assignment consists of a pair of cities that are to be connected by a series of shorter railway routes. A route can be claimed (for a certain cost associated with the route), but things are complicated by the fact that there is only a limited number of routes, and once a player claims a route, none of the other players can claim it. A player has successfully set up a train line between two cities if there is a path between the two cities using only routes that have been claimed by this player. For simplicity, we will ignore all additional aspects of the game (including the actual process of claiming routes and additional ways to score points).<p>For instance, if your assignment is to connect Stockholm and Amsterdam in the Figure above, you would probably want to claim the routes between Stockholm and Copenhagen, and between Copenhagen and Amsterdam. But if another player manages to claim the route between Copenhagen and Stockholm before you, your train line would have to use some other routes, e.g. by going to Copenhagen via Oslo.<p>In this problem, we will consider the rather bold strategy of trying to complete all four assignments (typically, this will be quite hard). As a preliminary assessment of the difficulty of achieving this, we would like to calculate the minimum cost of setting up all four lines assuming that none of the other players interfere with our plans. Your job is to write a program to determine this minimum cost.<h2>Input</h2><p>The input consists of several (at most 20) games to be analyzed. Each game starts with two integers 1 &le; <em>n</em> &le; 30, 0 &le; <em>m</em> &le; 1000, giving the number of cities and railway routes in the map, respectively. Then follow <em>n</em> lines, giving the names of the <em>n</em> cities. City names are at most 20 characters long and consist solely of lower case letters (<tt>'a'-'z'</tt>).<p>After this follow <em>m</em> lines, each containing the names of two different cities and an integer 1 &le; <em>c</em> &le; 10000, indicating that there is a railway route with cost <em>c</em> between the two cities. Note that there may be several railway routes between the same pair of cities. You may assume that it is always possible to set up a train line from any city to any other city.<p>Finally, there will be four lines, each containing the names of two cities, giving the four train line assignments.<p>The input is terminated by a case where <em>n</em> = <em>m</em> = 0. This case should not be processed.<h2>Output</h2>For each game, output a single line containing a single integer, the minimum possible cost to set up all four train lines.<div class="sample"><h2>Sample Input</h2><pre>
10 15
stockholm
amsterdam
london
berlin
copenhagen
oslo
helsinki
dublin
reykjavik
brussels
oslo stockholm 415
stockholm helsinki 396
oslo london 1153
oslo copenhagen 485
stockholm copenhagen 522
copenhagen berlin 354
copenhagen amsterdam 622
helsinki berlin 1107
london amsterdam 356
berlin amsterdam 575
london dublin 463
reykjavik dublin 1498
reykjavik oslo 1748
london brussels 318
brussels amsterdam 173
stockholm amsterdam
oslo london
reykjavik dublin
brussels helsinki
2 1
first
second
first second 10
first first
first first
second first
first first
0 0
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
3907
10
</pre></div><div class="source">The 2006 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3637||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>E - The Bookcase</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem E - The Bookcase</h1><h3>Time limit: 5 seconds</h3><p><img src="http://livearchive.onlinejudge.org/external/36/p3637a.jpg> No wonder the old bookcase caved under the massive piles of books Tom had stacked on it. He had better build a new one, this time large enough to hold all of his books. Tom finds it practical to have the books close at hand when he works at his desk. Therefore, he is imagining a compact solution with the bookcase standing on the back of the desk. Obviously, this would put some restrictions on the size of the bookcase, it should preferably be as small as possible. In addition, Tom would like the bookcase to have exactly three shelves for aesthetical reasons.<p>Wondering how small his bookcase could be, he models the problem as follows. He measures the height <em>h<sub>i</sub></em> and thickness <em>t<sub>i</sub></em> of each book <em>i</em> and he seeks a partition of the books in three non-empty sets <em>S<sub>1</sub></em>, <em>S<sub>2</sub></em>, <em>S<sub>3</sub></em> such that<p><img class="figure" src="http://livearchive.onlinejudge.org/external/36/p3637a.jpg><p>is minimized, i.e. the area of the bookcase as seen when standing in front of it (the depth needed is obviously the largest width of all his books, regardless of the partition). Note that this formula does not give the exact area of the bookcase, since the actual shelves cause a small additional height, and the sides cause a small additional width. For simplicity, we will ignore this small discrepancy.<p>Thinking a moment on the problem, Tom realizes he will need a computer program to do the job.<h2>Input</h2><p>The input begins with a positive number on a line of its own telling the number of test cases (at most 20). For each test case there is one line containing a single positive integer <em>N</em>, 3 &le; <em>N</em> &le; 70 giving the number of books. Then <em>N</em> lines follow each containing two positive integers <em>h<sub>i</sub></em>, <em>t<sub>i</sub></em>, satisfying 150 &le; <em>h<sub>i</sub></em> &le; 300 and 5 &le; <em>t<sub>i</sub></em> &le; 30, the height and thickness of book <em>i</em> respectively, in millimeters.<h2>Output</h2><p>For each test case, output one line containing the minimum area (height times width) of a three-shelf bookcase capable of holding all the books, expressed in square millimeters.<div class="sample"><h2>Sample Input</h2><pre>
2
4
220 29
195 20
200 9
180 30
6
256 20
255 30
254 15
253 20
252 15
251 9
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
18000
29796
</pre></div><div class="source">The 2006 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3638||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>F - Printer Queue</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem F - Printer Queue</h1><h3>Time limit: 1 second</h3><p><img src="http://livearchive.onlinejudge.org/external/36/p3638.jpg> The only printer in the computer science students' union is experiencing an extremely heavy workload. Sometimes there are a hundred jobs in the printer queue and you may have to wait for hours to get a single page of output.<p>Because some jobs are more important than others, the Hacker General has invented and implemented a simple priority system for the print job queue. Now, each job is assigned a priority between 1 and 9 (with 9 being the highest priority, and 1 being the lowest), and the printer operates as follows.<ul><li>The first job <em>J</em> in queue is taken from the queue. <li>If there is some job in the queue with a higher priority than job <em>J</em>, then move <em>J</em> to the end of the queue without printing it. <li>Otherwise, print job <em>J</em> (and do not put it back in the queue).</ul><p>In this way, all those important muffin recipes that the Hacker General is printing get printed very quickly. Of course, those annoying term papers that others are printing may have to wait for quite some time to get printed, but that's life.<p>Your problem with the new policy is that it has become quite tricky to determine when your print job will actually be completed. You decide to write a program to figure this out. The program will be given the current queue (as a list of priorities) as well as the position of your job in the queue, and must then calculate how long it will take until your job is printed, assuming that no additional jobs will be added to the queue. To simplify matters, we assume that printing a job always takes exactly one minute, and that adding and removing jobs from the queue is instantaneous.<h2>Input</h2>One line with a positive integer: the number of test cases (at most 100). Then for each test case:<ul><li>One line with two integers <em>n</em> and <em>m</em>, where <em>n</em> is the number of jobs in the queue (1 &le; <em>n</em> &le; 100) and <em>m</em> is the position of your job (0 &le; m &le; n-1). The first position in the queue is number 0, the second is number 1, and so on. <li>One line with <em>n</em> integers in the range 1 to 9, giving the priorities of the jobs in the queue. The first integer gives the priority of the first job, the second integer the priority of the second job, and so on.</ul><h2>Output</h2>For each test case, print one line with a single integer; the number of minutes until your job is completely printed, assuming that no additional print jobs will arrive.<div class="sample"><h2>Sample Input</h2><pre>
3
1 0
5
4 2
1 2 3 4
6 0
1 1 9 1 1 1
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
1
2
5
</pre></div><div class="source">The 2006 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3639||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>G - Prime Path</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem G - Prime Path</h1><h3>Time limit: 1 second</h3><p><img src="http://livearchive.onlinejudge.org/external/36/p3639.jpg> The ministers of the cabinet were quite upset by the message from the Chief of Security stating that they would all have to change the four-digit room numbers on their offices.<br>&mdash; It is a matter of security to change such things every now and then, to keep the enemy in the dark.<br>&mdash; But look, I have chosen my number 1033 for good reasons. I am the Prime minister, you know!<br>&mdash; I know, so therefore your new number 8179 is also a prime. You will just have to paste four new digits over the four old ones on your office door.<br>&mdash; No, it's not that simple. Suppose that I change the first digit to an 8, then the number will read 8033 which is not a prime!<br>&mdash; I see, being the prime minister you cannot stand having a non-prime number on your door even for a few seconds.<br>&mdash; Correct! So I must invent a scheme for going from 1033 to 8179 by a path of prime numbers where only one digit is changed from one prime to the next prime.<p>Now, the minister of finance, who had been eavesdropping, intervened.<br>&mdash; No unnecessary expenditure, please! I happen to know that the price of a digit is one pound.<br>&mdash; Hmm, in that case I need a computer program to minimize the cost. You don't know some very cheap software gurus, do you?<br>&mdash; In fact, I do. You see, there is this programming contest going on...<p>Help the prime minister to find the cheapest prime path between any two given four-digit primes! The first digit must be nonzero, of course. Here is a solution in the case above.<pre>
    1033
    1733     
    3733     
    3739     
    3779
    8779
    8179     
</pre>The cost of this solution is 6 pounds. Note that the digit 1 which got pasted over in step 2 can not be reused in the last step &ndash; a new 1 must be purchased.<h2>Input</h2>One line with a positive number: the number of test cases (at most 100). Then for each test case, one line with two numbers separated by a blank. Both numbers are four-digit primes (without leading zeros).<h2>Output</h2>One line for each case, either with a number stating the minimal cost or containing the word <tt>Impossible</tt>.<div class="sample"><h2>Sample Input</h2><pre>
3
1033 8179
1373 8017
1033 1033
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
6
7
0
</pre></div><div class="source">The 2006 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3640||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>H - Lineland's Airport</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem H - Lineland's Airport</h1><h3>Time limit: 2 seconds</h3><p>Lineland is a strange country. As the name suggests, it's shape (as seen from above) is just a straight line, rather than some two-dimensional shape. The landscape along this line is very mountainous, something which occasionally leads to some problems. One such problem now occurs: in this modern era the king wants to build an airport to stimulate the country's economy. Unfortunately, it's impossible for airplanes to land on steep airstrips, so a horizontal piece of land is needed. To accommodate for the larger airplanes, this strip needs to have length at least <em>L</em>.<p>Over the years, the inhabitants of Lineland have become very proficient in flattening pieces of land. Given a piece a land, they can remove rock quickly. They don't want to add rock for that may lead to an unstable landing strip. To minimize the amount of effort, however, they want to remove the least amount of rock necessary to reach their goal: a flat piece of land of length <em>L</em>. What is this minimum amount? Because of the low-dimensional nature of Lineland, the amount of rock that needs to be removed is measured as the total area of land above the place where the landing strip is placed, rather than the volume (so in the Figure below, the amount of land removed is given by the lightly shaded area).<p><img class="figure" src="http://livearchive.onlinejudge.org/external/36/p3640.png><h2>Input</h2><p>One line with a positive number: the number of test cases (at most 25). Then for each test case:<ul><li>One line with an integer <em>N</em>, 2 &le; <em>N</em> &le; 500, the number of points, and an integer <em>L</em>, 1 &le; <em>L</em> &le; 10000, the necessary length to flatten. <li><em>N</em> lines with two integers <em>x<sub>i</sub></em> and <em>y<sub>i</sub></em> with 0 &le; <em>x<sub>i</sub></em>, <em>y<sub>i</sub></em> &le; 10000 describing the landscape of Lineland. The <em>x<sub>i</sub></em> are in (strictly) ascending order. At position <em>x<sub>i</sub></em> the height of the landscape is <em>x<sub>i</sub></em>. Between two <em>x<sub>i</sub></em> the landscape has constant slope. (So the landscape is piecewise linear). The difference between <em>x<sub>N</sub></em> and <em>x<sub>1</sub></em> is greater than or equal to <em>L</em>.</ul><h2>Output</h2><p>For each test case, output one line with the minimum amount of rock which must be removed in order to build the airport. The answer should be given as a floating point number with an absolute error of at most 10<sup>-3</sup>.<div class="sample"><h2>Sample Input</h2><pre>
4
3 5
0 2
4 2
14 0
4 3
0 2
2 0
4 0
5 3
3 10
10 2
30 2
35 7
2 777
222 333
4444 5555
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
0.9000
0.3750
0.0000
373362.4867
</pre></div><div class="source">The 2006 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3641||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>I - Leonardo's Notebook</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem I - Leonardo's Notebook</h1><h3>Time limit: 1 second</h3><p><img src="http://livearchive.onlinejudge.org/external/36/p3641.jpg> &mdash; I just bought Leonardo's secret notebook!<br>Rare object collector Stan Ucker was really agitated but his friend, special investigator Sarah Keptic was unimpressed.<br>&mdash; How do you know it is genuine?<br>&mdash; Oh, it must be, at that price. And it is written in the da Vinci code.<br>Sarah browsed a few of the pages. It was obvious to her that the code was a substitution cipher, where each letter of the alphabet had been substituted by another letter.<br>&mdash; Leonardo would have written the plain-text and left it to his assistant to encrypt, she said. And he must have supplied the substitution alphabet to be used. If we are lucky, we can find it on the back cover!<br>She turned up the last page and, lo and behold, there was a single line of all 26 letters of the alphabet:<br><blockquote>QWERTYUIOPASDFGHJKLZXCVBNM</blockquote>&mdash; This may be Leonardo's instructions meaning that each A in the plain-text was to be replaced by Q, each B with W, etcetera. Let us see...<br>To their disappointment, they soon saw that this could not be the substitution that was used in the book. Suddenly, Stan brightened.<br>&mdash; Maybe Leonardo really wrote the substitution alphabet on the last page, and by mistake his assistant coded that line as he had coded the rest of the book. So the line we have here is the result of applying some permutation TWICE to the ordinary alphabet!<br>Sarah took out her laptop computer and coded fiercely for a few minutes. Then she turned to Stan with a sympathetic expression.<br>&mdash; No, that couldn't be it. I am afraid that you have been duped again, my friend. In all probability, the book is a fake.<br>Write a program that takes a permutation of the English alphabet as input and decides if it may be the result of performing some permutation twice.<h2>Input</h2><p>The input begins with a positive number on a line of its own telling the number of test cases (at most 500). Then for each test case there is one line containing a permutation of the 26 capital letters of the English alphabet.<h2>Output</h2><p>For each test case, output one line containing <tt>Yes</tt> if the given permutation can result from applying some permutation twice on the original alphabet string ABC...XYZ, otherwise output <tt>No</tt>.<div class="sample"><h2>Sample Input</h2><pre>
2
QWERTYUIOPASDFGHJKLZXCVBNM
ABCDEFGHIJKLMNOPQRSTUVWXYZ
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
No
Yes
</pre></div><div class="source">The 2006 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3642||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content=Cubessquared><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Cubessquared_files/filelist.xml"><link rel=Edit-Time-Data href="Cubessquared_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Cubessquared</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Office 2004 Test Drive User</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>
  <o:Revision>1</o:Revision>
  <o:TotalTime>0</o:TotalTime>
  <o:Created>2006-11-18T19:05:00Z</o:Created>
  <o:LastSaved>2006-11-18T19:05:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Lines>1</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:Version>11.768</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
 </w:WordDocument>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:"Courier New";
	panose-1:0 2 7 3 9 2 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	font-weight:bold;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
table.MsoNormalTable
	{mso-style-parent:"";
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.Code, li.Code, div.Code
	{mso-style-name:Code;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Courier;}
@page Section1
	{size:595.0pt 842.0pt;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1153"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><span lang=EN-GB style='font-size:20.0pt'>CubesSquared</sup><o:p></o:p></span></p><p class=MsoBodyText style='margin-bottom:6.0pt'><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText style='margin-bottom:6.0pt'><span lang=EN-GB>Cube Factory Ltd is an enterprise that sells <i>hcubes</i></span><span lang=EN-GB> (short of "harmonic cubes"), a very fashionable item nowadays providing great profits for his owner, Mr. Tesseract (his friends call him Mr.T). </span></p><p class=MsoBodyText style='margin-bottom:6.0pt'><span lang=EN-GB>Mr. T just bought a very large space to fit his increasing stock of <i>hcubes</i></span><span lang=EN-GB>. <i>Hcubes</i></span><span lang=EN-GB> have a plain cube format and are not hard to stock. However, Mr. T has a (rather harmless?) mania: he only admits two valid ways to pile them: (a) in cube format or (b) in squared pyramids (i.e., where each new step holds an increasing square number of elements). </span></p><p class=MsoBodyText><span lang=EN-GB>One example of each type (holding, respectively, 4<sup>3</sup>=64 <i>hcubes</i></span><span lang=EN-GB> and 1<sup>2</sup>+2<sup>2</sup>+3<sup>2</sup>+4<sup>2 </sup>= 30&nbsp;<i>hcubes</i></span><span lang=EN-GB>):</span></p><center><img src="http://livearchive.onlinejudge.org/external/36/p3642.jpg></center><p class=MsoBodyText style='margin-top:6.0pt'><span lang=EN-GB>Given N <i>hcubes</i></span><span lang=EN-GB>, find the minimal number of valid piles to stock them according to Mr. T rules.</span></p><p class=MsoBodyText style='margin-top:6.0pt'><span lang=EN-GB>Example: to stock 38 <i>hcubes</i></span><span lang=EN-GB> we only need two piles: e.g., one cube of height 2 (holding 8 <i>hcubes</i></span><span lang=EN-GB>) and a pyramid of height 4 (holding 30 <i>hcubes</i></span><span lang=EN-GB>).<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Input<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB>The input file contains several lines. Each line consists of a single integer representing the number N of <i>hcubes</i></span><span lang=EN-GB> (0 </span><span lang=EN-GB style='font-family:Symbol;mso-char-type:
symbol;mso-symbol-font-family:Symbol'><span style='mso-char-type:symbol;
mso-symbol-font-family:Symbol'><=</span></span><span lang=EN-GB> N </span><span
lang=EN-GB style='font-family:Symbol;mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'><=</span></span><span
lang=EN-GB> 400.000). The file ends in a line with the number &#8211;1.</span></p>

<p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Output<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB>For each N in the input file, a line
containing the corresponding result.</span></p>

<p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Input<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>38<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>60<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>12<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>39101<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>-1<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Output<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>2<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>2<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>4<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>4<o:p></o:p></b></span></p>

<p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

</div>

</body>

</html>

______________________________________________________
3643||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content=BlindFold><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="BlindFold_files/filelist.xml"><title>BlindFold</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Office 2004 Test Drive User</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:Created>2006-11-18T18:57:00Z</o:Created>
  <o:LastSaved>2006-11-18T18:59:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Lines>1</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:Version>11.768</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
 </w:WordDocument>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:"Courier New";
	panose-1:0 2 7 3 9 2 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	font-weight:bold;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
table.MsoNormalTable
	{mso-style-parent:"";
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.Code, li.Code, div.Code
	{mso-style-name:Code;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Courier;}
@page Section1
	{size:595.0pt 842.0pt;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><span lang=EN-GB style='font-size:16.0pt'>BlindFold<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>A labyrinth is a set of interconnected rooms. Each room has a few doors, each door is labelled, just on one side, by either "A", "B", "C" or "D". There might be more than one door in a room with the same label, and each door in a room always leads to a room (sometimes the same room!) in the labyrinth, through a dark and convoluted tunnel. Moreover, doors may only be opened from their labelled side, so after getting through a door to another room, you may only use the new labelled doors you may find there.</span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>Given two labyrinths L1 and L2, and a room R1 of L1 and R2 of L2, we say that R1 is equivalent to R2 if the two following conditions hold:</span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>1. For each door labelled with <i>x</i></span><span lang=EN-GB> in R1 one may choose a door labelled with the same label <i>x</i></span><span lang=EN-GB> in R2 such that the two doors lead to equivalent rooms R1Õ and R2Õ (of L1 and L2 respectively).</span></p><p class=MsoBodyText><span lang=EN-GB>2. For each door labelled with <i>x</i></span><span lang=EN-GB> in R2 one may choose a door labelled with the same label <i>x</i></span><span lang=EN-GB> in R1 such that the two doors lead to equivalent rooms R2Õ and R1Õ (of L2 and L1 respectively).</span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>Notice that if R1 and R2 are equivalent rooms then the set of door labels in R1 is the same as the set of door labels of R2.</span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>We say that the labyrinths L1 and L2 are equivalent if their initial rooms are equivalent. We are asked to write a program that checks whether two labyrinths are equivalent according to the definition above.</span><span lang=EN-GB style='font-size:9.0pt'><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Input<o:p></o:p></b></span></p><b>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </b><p><p><p class=MsoBodyText><span lang=EN-GB>The input file specifies the structure of the two labyrinths, one after the other. The specification of each labyrinth is as follows. First, an integer N indicates the total number of doors in the labyrinth. Then, for each each door, a line of the form <b><i>i</i></b></span><span lang=EN-GB> <b><i>a</i></b></span><span lang=EN-GB> <b><i>d</i></b></span><span lang=EN-GB> follows, where <b><i>i</i></b></span><span lang=EN-GB> is an integer indicating the initial room, <b><i>a</i></b></span><span lang=EN-GB> is the door label (one of "A", "B", "C", "D") and <b><i>d </i></b></span><span lang=EN-GB>is an integer indicating the destination room. Different doors in a room may well be labelled with the same letter. By convention, the visitor starts the visit in room 1.</span></p><p class=MsoBodyText><span lang=EN-GB>The labyrinths considered will not have more than 200 rooms. Rooms are numbered 1,2, ..., etc.</span></p><p class=MsoBodyText><span lang=EN-GB style='font-size:9.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Output<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB>For each test case, a single line containing "</span><span lang=EN-GB style='font-family:Courier'>yes</span><span lang=EN-GB>" if the two labyrinths are equivalent, and "</span><span lang=EN-GB style='font-family:
Courier'>no</span><span lang=EN-GB>" if they are not equivalent.</span><span lang=EN-GB style='font-size:9.0pt'><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Input<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>2<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>1 A 2<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>2 A 1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>3<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>1 A 1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>1 A 2<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>2 A 2</b></span><span <p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>4<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>1 A 2<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>2 B 1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>2 A 3<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>3 C 1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>5<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>1 A 2<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>1 A 4<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>2 A 3<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>3 C 1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>4 B 1</b></span><span lang=EN-GB style='font-family:"Courier New"'><b><o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Output<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>yes<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>no<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p></div></body></html>
______________________________________________________
3644||||||false||||||
<html><head><meta name=Title content=X-Plosives><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="X_files/filelist.xml"><title>X-Plosives</title> <style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;}
@font-face
	{font-family:"Courier New";
	panose-1:0 2 7 3 9 2 2 5 2 4;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	font-size:14.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:"Times New Roman";}
table.MsoNormalTable
	{font-size:10.0pt;
	font-family:"Times New Roman";}
p.Code, li.Code, div.Code
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	font-size:12.0pt;
	font-family:Courier;}
@page Section1
	{size:595.0pt 842.0pt;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><span lang=EN-GB style='font-size:16.0pt'>X-Plosives</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>A secret service developed a new kind of explosive that attain its volatile property only when a specific association of products occurs. Each product is a mix of two different simple compounds, to which we call a <i>binding pair</i></span><span lang=EN-GB>. If N&gt;2, then mixing N different binding pairs containing N simple compounds creates a powerful explosive<b>. </b></span><span lang=EN-GB>For example, the binding pairs A+B, B+C, A+C (three pairs, three compounds) result in an explosive, while A+B, B+C, A+D (three pairs, four compounds) does not.</span></p><p class=MsoBodyText><span lang=EN-GB style='font-size:9.0pt'>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>You are not a secret agent but only a guy in a delivery agency with one dangerous problem: receive binding pairs in sequential order and place them in a cargo ship. However, you must avoid placing in the same room an explosive association. So, after placing a set of pairs, if you receive one pair that might produce an explosion with some of the pairs already in stock, you must refuse it, otherwise, you must accept it.</span></p><p class=MsoBodyText><span lang=EN-GB style='font-size:9.0pt'>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>An example. LetÕs assume you receive the following sequence: A+B, G+B, D+F, A+E, E+G, F+H. You would accept the first four pairs but then refuse E+G since it would be possible to make the following explosive with the previous pairs: A+B, G+B, A+E, E+G (4 pairs with 4 simple compounds). Finally, you would accept the last pair, F+H.</span></p><p class=MsoBodyText><span lang=EN-GB style='font-size:9.0pt'>&nbsp;</span></p><p class=MsoBodyText style='margin-top:6.0pt'><span lang=EN-GB>Compute the number of refusals given a sequence of binding pairs.</span></p><p class=MsoBodyText><span lang=EN-GB style='font-size:9.0pt'>&nbsp;</span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Input</b></span></p><b>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </b><p><p><p class=MsoBodyText><span lang=EN-GB>Instead of letters we will use integers to represent compounds. The input contains several lines. Each line (except the last) consists of two integers (each integer lies between 0 and 10<sup>5</sup>) separated by a single space, representing a binding pair. The input ends in a line with the number &#8211;1. You may assume that no repeated binding pairs appears in the input.</span></p><p class=MsoBodyText><span lang=EN-GB style='font-size:9.0pt'>&nbsp;</span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Output</b></span></p><p class=MsoBodyText><span lang=EN-GB>For each test case, a single line with the number of refusals.</span></p><p class=MsoBodyText><span lang=EN-GB style='font-size:9.0pt'>&nbsp;</span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Input</b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>1 2</b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>3 4</b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>3 5</b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>3 1</b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>2 3</b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>4 1</b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>2 6</b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>6 5</b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>-1 </b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'>&nbsp;</span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Output</b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Courier New"'><b>3</b></span></p><p class=MsoNormal><span lang=EN-GB>&nbsp;</span></p></div></body></html>
______________________________________________________
3645||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Objective: Berlin"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Objective_files/filelist.xml"><title>Objective: Berlin</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Office 2004 Test Drive User</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>
  <o:Revision>1</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2006-11-18T19:08:00Z</o:Created>
  <o:LastSaved>2006-11-18T19:09:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Lines>1</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:Version>11.768</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
 </w:WordDocument>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:"Courier New";
	panose-1:0 2 7 3 9 2 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	font-weight:bold;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
table.MsoNormalTable
	{mso-style-parent:"";
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.Code, li.Code, div.Code
	{mso-style-name:Code;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Courier;}
@page Section1
	{size:595.0pt 842.0pt;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><span lang=EN-GB style='font-size:16.0pt'>Objective: Berlin<o:p></o:p></span></p><p class=MsoBodyText><span style='mso-ansi-language:EN-US'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span style='mso-ansi-language:EN-US'>The administration of a well-known football team has made a study about the lack of support in international away games. This study has concluded that the only reason for this lack of support is the difficulty in organizing the travel arrangements. To help solving this problem, the administration has asked you to build a program that computes the maximum number of people that can fly from a departure city to a destination city, using the available places in regular flights in a given day, and arriving at or before a given time. When traveling from one city to another, a person may make multiple transfers. Each transfer is, at least, 30 minutes long, i.e., the departure time should be, at least 30 minutes after the arrival time. Given a set of flights for a single day and the latest arrival time, your program should compute the maximum number of persons that can fly, directly or indirectly, from a departure city to a destination city, arriving at or before the latest arrival time.<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Input<o:p></o:p></b></span></p><b>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </b><p><p><p class=MsoBodyText><span style='mso-ansi-language:EN-US'>The first line contains an integer (smaller or equal to 150) indicating the number of cities that have flight connections. The second line contains a string indicating the city of departure. The third line contains a string indicating the destination city. The fourth line contains the latest arrival time, in the format HHMM, where HH is the hour in the day (from 00 to 23) and MM is the minute in the hour (from 00 to 59). The fifth line contains an integer N (smaller or equal to 5000), with the number of existing flights.<o:p></o:p></span></p><p class=MsoBodyText><span style='mso-ansi-language:EN-US'>Each of the following N lines contains the info for each flight. Each such line contains two strings and three integers, separated by blank spaces, O E C D A, where O and E are, respectively, the origin and destination of a flight, C is the number of available places in the flight (from 0 to 300), and D and A are the departure and arrival times in the previously defined format HHMM. All flights start and end in the same day. City names may have up to 8 characters.<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Output<o:p></o:p></b></span></p><p class=MsoBodyText><span style='mso-ansi-language:EN-US'>For each test case, the output consists of one single line with an integer stating the maximum number of people that can fly from the origin to the destination city, using the given flights and arriving at or before the given latest arrival time.<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Input<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>4<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>lisbon<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>berlin<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>1500<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>9<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>lisbon london 6 1000 1100<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>london lisbon 6 1130 1230<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>lisbon paris 5 1000 1100<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>paris lisbon 4 1130 1230<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>london paris 1 1130 1300<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>london berlin 2 1340 1510<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>berlin london 2 1300 1430<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>paris berlin 10 1330 1500<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-size:11.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'><b>berlin paris 9 1300 1430<o:p></o:p></b></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Output<o:p></o:p></b></span></p><p class=MsoBodyText><span style='font-family:"Courier New";mso-ansi-language:
EN-US'><b>6</b></span><span lang=EN-GB style='font-family:"Courier New"'><b><o:p></o:p></b></span></p></div></body></html>
______________________________________________________
3646||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content=Transcript><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Transcript_files/filelist.xml"><title>Transcript</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Office 2004 Test Drive User</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>
  <o:Revision>1</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2006-11-18T19:11:00Z</o:Created>
  <o:LastSaved>2006-11-18T19:12:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Lines>1</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:Version>11.768</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
 </w:WordDocument>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:Arial;
	panose-1:0 2 11 6 4 2 2 2 2 2;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:SimSun;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:\5B8B\4F53;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:1 135135232 16 0 262144 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
p
	{margin-right:0in;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";}
table.MsoNormalTable
	{mso-style-parent:"";
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.Code, li.Code, div.Code
	{mso-style-name:Code;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Courier;
	mso-ansi-language:EN-GB;}
@page Section1
	{size:595.0pt 842.0pt;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:389617324;
	mso-list-type:hybrid;
	mso-list-template-ids:1331576 984073 1639433 1770505 984073 1639433 1770505 984073 1639433 1770505;}
@list l0:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal align=center style='margin-top:6.0pt;text-align:center'><span lang=EN-GB style='font-size:16.0pt'><b>Transcript<o:p></o:p></b></span></p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt;text-align:justify'><span lang=EN-GB>A company wants to hire a new employee. The selection process consists of several attention tests, one of them consists in: each candidate must type each character he sees in a flashing screen, using a given keyboard. You are asked to write down a program to score the candidates, given the original sequence of characters, and what the candidate actually typed. Scoring is based on the kind of actions the candidate may perform. For each character flashing in the screen, she may only: <o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.35in;margin-bottom:.0001pt;text-align:justify;text-indent:-.25in;
mso-list:l0 level1 lfo1;tab-stops:list .5in'><![if !supportLists]><span lang=EN-GB>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span lang=EN-GB>Correctly type the character;<o:p></o:p></span></p><p class=MsoNormal style='margin-left:.35in;text-align:justify;text-indent:
-.25in;mso-list:l0 level1 lfo1;tab-stops:list .5in'><![if !supportLists]><span lang=EN-GB>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span lang=EN-GB>Omit the character;<o:p></o:p></span></p><p class=MsoNormal style='margin-left:.35in;text-align:justify;text-indent:
-.25in;mso-list:l0 level1 lfo1;tab-stops:list .5in'><![if !supportLists]><span lang=EN-GB>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span lang=EN-GB>By mistake, type a different character.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>The score or penalty given to each action depends on the keyboard layout considered. The keyboard is a matrix of <i>n</i></span><span lang=EN-GB> rows and <i>m</i></span><span lang=EN-GB> columns.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>The <b>distance</b></span><span lang=EN-GB> between the characters at coordinates (i<sub>1</sub>,j<sub>1</sub>) and (i<sub>2</sub>,j<sub>2</sub>) is given by the maximum of |i<sub>1</sub>- i<sub>2</sub>| and |j<sub>1</sub>-j<sub>2</sub>|. For example, in the keyboard below (3 rows by 5 columns), the distance between the character "</span><span lang=EN-GB style='font-family:Courier'>a</span><span lang=EN-GB>", at (2,1), and the character "</span><span lang=EN-GB style='font-family:Courier'>h</span><span lang=EN-GB>" at (3,5) is 4, and the distance between the character "</span><span lang=EN-GB style='font-family:Courier'>o</span><span lang=EN-GB>" and "</span><span lang=EN-GB style='font-family:Courier'>h</span><span lang=EN-GB>" is 2. In this example, the largest distance between any two characters is 4. For any keyboard the largest distance between any two characters is conventionally referred to by TOP.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><div align=center><table border=0 cellspacing=0 cellpadding=0 width=98 style='width:98.0pt;
 margin-left:2.75pt;border-collapse:collapse;mso-padding-alt:0in 3.5pt 0in 3.5pt'><tr style='height:12.75pt'><td width=23 nowrap valign=bottom style='width:23.0pt;padding:0in 3.5pt 0in 3.5pt;
  height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'>1<o:p></o:p></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border:solid windowtext .5pt;
  background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>e<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border:solid windowtext .5pt;
  border-left:none;background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>g<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border:solid windowtext .5pt;
  border-left:none;background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>y<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border:solid windowtext .5pt;
  border-left:none;background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>i<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border:solid windowtext .5pt;
  border-left:none;background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>m<o:p></o:p></b></span></p></td></tr><tr style='height:12.75pt'><td width=23 nowrap valign=bottom style='width:23.0pt;padding:0in 3.5pt 0in 3.5pt;
  height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'>2<o:p></o:p></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border:solid windowtext .5pt;
  border-top:none;background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>a<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border-top:none;
  border-left:none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>n<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border-top:none;
  border-left:none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>o<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border-top:none;
  border-left:none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>w<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border-top:none;
  border-left:none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>s<o:p></o:p></b></span></p></td></tr><tr style='height:12.75pt'><td width=23 nowrap valign=bottom style='width:23.0pt;padding:0in 3.5pt 0in 3.5pt;
  height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'>3<o:p></o:p></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border:solid windowtext .5pt;
  border-top:none;background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>u<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border-top:none;
  border-left:none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>f<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border-top:none;
  border-left:none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>l<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border-top:none;
  border-left:none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>t<o:p></o:p></b></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;border-top:none;
  border-left:none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  background:silver;padding:0in 3.5pt 0in 3.5pt;height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'><b>h<o:p></o:p></b></span></p></td></tr><tr style='height:12.75pt'><td width=23 nowrap valign=bottom style='width:23.0pt;padding:0in 3.5pt 0in 3.5pt;
  height:12.75pt'><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:
  ZH-CN'><o:p></o:p></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;padding:0in 3.5pt 0in 3.5pt;
  height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'>1<o:p></o:p></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;padding:0in 3.5pt 0in 3.5pt;
  height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'>2<o:p></o:p></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;padding:0in 3.5pt 0in 3.5pt;
  height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'>3<o:p></o:p></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;padding:0in 3.5pt 0in 3.5pt;
  height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'>4<o:p></o:p></span></p></td><td width=15 nowrap valign=bottom style='width:15.0pt;padding:0in 3.5pt 0in 3.5pt;
  height:12.75pt'><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB style='font-size:10.0pt;font-family:Arial;mso-fareast-language:ZH-CN'>5<o:p></o:p></span></p></td></tr></table></div><p style='text-align:justify'><span lang=EN-GB style='mso-ansi-language:EN-GB'>The score given to the correct transcription of one character is TOP+1. The penalty given for the omission of one character (action 2) is TOP+1. The score given for changing a character for another (action 3) is TOP+1 minus the distance between the two characters involved in the mistake.<span style="mso-spacerun:
yes">&nbsp; </span>For example, considering the keyboard shown above, the following action scores apply: Score for the correct transcript of one character: 5; Penalty for the omission of one character: 5; Score for changing character "o" to character "h": 5-2=3.<o:p></o:p></span></p><p style='text-align:justify'><span lang=EN-GB style='mso-ansi-language:EN-GB'>A scoring of a test is the sum of the scores given to each character typed minus the sum of the penalties for each character omitted. Since the scoring is only done after the test finishes, it is not possible to be sure about when specific actions were realized (e.g, did the candidate skip a character, or mistyped it?). To avoid complaints, the final score given is the <b>highest possible value for scoring</b></span><span lang=EN-GB style='mso-ansi-language:EN-GB'> the candidate, according to the rules explained above. For example, if the text to transcribe is "time" and the candidate types "yme", we may score it in several ways: <o:p></o:p></span></p><p style='margin:0in;margin-bottom:.0001pt'><span lang=EN-GB style='mso-ansi-language:
EN-GB'>To omit "t", change<span style="mso-spacerun: yes">&nbsp; </span>"i" for "y" and correctly transcribe "m" and "e";<o:p></o:p></span></p><p style='margin:0in;margin-bottom:.0001pt'><span lang=EN-GB style='mso-ansi-language:
EN-GB'>To change "t" for "y", omit "i" and correctly transcribe "m" and "e";<o:p></o:p></span></p><p style='margin:0in;margin-bottom:.0001pt'><span lang=EN-GB style='mso-ansi-language:
EN-GB'>To change "t" for "y", change "i" for "m", omit "m" and correctly transcribe "e";<o:p></o:p></span></p><p style='margin:0in;margin-bottom:.0001pt'><span lang=EN-GB style='mso-ansi-language:
EN-GB'>To change "t" for "y", change "i" for "m", change "m" for "e" and omit "e".<o:p></o:p></span></p><p style='text-align:justify'>Each one of these possibilities has one score associated (9, 8, 7, and 3 points, respectively). Thus, the candidateÕs final score is 9 points. Write a program that, considering the shape of a keyboard, the text to be transcribed by the candidate, and the actual transcript produced by the candidate returns the final score of the candidate.<o:p></o:p></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Input<o:p></o:p></b></span></p><p class=MsoNormal style='margin-left:.25in'><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>The input file contains several test cases, each of them as described below.<br><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>The first line contains an integer N, stating the number of rows in the keyboard. The next N lines, all with the same length, contain a string with the sequence of characters in the corresponding keyboard row. <span style="mso-spacerun:
yes">&nbsp;</span>The keyboard will not have more than 20 rows and 30 columns. Then, the next two lines contains the text to be transcribed by the candidate, and the text typed by the candidate. These texts will be no longer than 500 characters each.<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Output<o:p></o:p></b></span></p><p class=MsoNormal style='margin-left:-.25in'><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB>For each test case, a single line containing an integer stating the final score of the candidate.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Input<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><b>3<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><b>egyim<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><b>anows<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><b>uflth<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><b>time<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><b>yme<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Output<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><b>9<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p></div></body></html>
______________________________________________________
3647||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="The Right Tip"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="The%20Right%20Tip_files/filelist.xml"><title>The Right Tip</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Office 2004 Test Drive User</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>
  <o:Revision>1</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2006-11-18T19:14:00Z</o:Created>
  <o:LastSaved>2006-11-18T19:15:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Lines>1</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:Version>11.768</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
 </w:WordDocument>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	font-weight:bold;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
table.MsoNormalTable
	{mso-style-parent:"";
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.Code, li.Code, div.Code
	{mso-style-name:Code;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Courier;}
@page Section1
	{size:595.0pt 842.0pt;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><span lang=EN-GB style='font-size:16.0pt'>The Right Tip<o:p></o:p></span></p><p class=MsoBodyText><span style='mso-ansi-language:EN-US'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>During the recent Football Worldcup, a group of friends worked at a courtyard caf&eacute; to pay for their holidays. Everyday they would collect all the tips given by the customers on a jar, and at the end of the day they wanted to split the tips equally between them. After a few days, they reached the conclusion that (given the various face values of euro coins) sometimes it was not possible to equally split the collect of the day between them.<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>Write a program to help the friends determine if it is possible (or not) to equally split the collect of the day between them.<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Input<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB>The input will consist of a sequence of pairs of lines, each pair represents a coin division problem to be solved. For each such pair the first line contains the number of friends (a positive integer not greater than 5). The second line contains eight space separated non-negative integers n<sub>1</sub>, n<sub>2</sub>,..., n<sub>8</sub>, where n<sub>i</sub> is the number of coins of value i (0.01, 0.02, 0.05, 0.10, 0.20, 0.50, 1.00 and 2.00 euros respectively, e.g., the number of 5 cents coins will be denoted by n<sub>3</sub>). The maximum number of coins is 10000. Input is terminated by a single line with the number -1.<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Output<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB>For each coin division problem print either "</span><span lang=EN-GB style='font-family:Courier'>yes</span><span lang=EN-GB>" or "</span><span lang=EN-GB style='font-family:Courier'>no</span><span lang=EN-GB>", depending on whether it is possible or not to divide equally the tips by the friends.<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Input<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>2<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>1 1 1 1 1 1 1 1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>2<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>2 1 2 1 5 2 2 1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>3423 234 324 972 740 12 234 901<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>4<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>147 5502 3486 434 76 66 267 20<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>5<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>3015 3590 1559 1219 78 507 23 8<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>-1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Output<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>no<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>yes<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>yes<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>no<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>yes<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p></div></body></html>
______________________________________________________
3648||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Booby Traps"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Booby%20Traps_files/filelist.xml"><title>Booby Traps</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Office 2004 Test Drive User</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>
  <o:Revision>1</o:Revision>
  <o:Created>2006-11-18T19:17:00Z</o:Created>
  <o:LastSaved>2006-11-18T19:19:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Lines>1</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:Version>11.768</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
 </w:WordDocument>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	font-weight:bold;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
table.MsoNormalTable
	{mso-style-parent:"";
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.Code, li.Code, div.Code
	{mso-style-name:Code;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Courier;}
@page Section1
	{size:595.0pt 842.0pt;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><span lang=EN-GB>Booby Traps<o:p></o:p></span></p><p class=MsoTitle><span style='mso-ansi-language:EN-US'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>Tomb raiders are used to explore complex labyrinths searching treasures. Nowadays, they do it more effectively with the help of hi-tech. However, a team of Chinese tomb raiders have found labyrinths so complex that they can't handle them using their usual techniques. These labyrinths are made of cells, many of them with traps. If one moves into a cell with a trap, then the trap gets triggered. Moreover, if a trap gets triggered, its cell becomes blocked, and cannot be used anymore in a path. To make things worse, they have discovered that traps may have effects at a distance on other traps: if one triggers a trap, then traps associated to it also become triggered. They also discovered that the association between traps comes from a "domination ordering" defined on trap kinds, in such a way that triggering a trap of kind </span><span lang=EN-GB style='font-family:Symbol'>a</span><span lang=EN-GB> causes all traps of kind "less than or equal to" </span><span lang=EN-GB style='font-family:Symbol'>a</span><span lang=EN-GB> in the domination ordering to become also triggered.<span style="mso-spacerun: yes">&nbsp; </span>You are asked to write a program that given a labyrinth such as this, indicates the minimum number of moves needed to reach the end position from the start position. A move consists in going up, down, left or right (no diagonal moves).<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
14.0pt'><b>Input<o:p></o:p></b></span></p>The input file contains several test cases, each of them as described below.<br><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>The input contains the domination ordering on the trap kinds, the map, and the start and end positions. The first line of the input contains a string with 26 distinct characters defining the domination order of the trap kinds. The first character indicates the weakest trap kind (that only triggers its own kind), the last character is the strongest (that triggers traps of all kinds). The second line contains two integers that indicate the width (<i>w</i></span><span lang=EN-GB>) and height (<i>h</i></span><span lang=EN-GB>) of the map, where <i>h</i></span><span lang=EN-GB>&times;<i>w</i></span><span lang=EN-GB> do not exceed 40000. The following <i>h</i></span><span lang=EN-GB> lines of the input contain <i>w</i></span><span lang=EN-GB> symbols that define the cells of the map (separated by an empty space). The following codes are used: '</span><span lang=EN-GB style='font-family:Courier'>x</span><span lang=EN-GB>' represents a cell with solid wall, a symbol </span><span lang=EN-GB style='font-family:Symbol'><i>alpha</i></span><span lang=EN-GB> from '</span><span lang=EN-GB style='font-family:Courier'>A</span><span lang=EN-GB>' to '</span><span lang=EN-GB style='font-family:Courier'>Z</span><span lang=EN-GB>' identifies a cell containing a trap of kind </span><span lang=EN-GB style='font-family:Symbol'><i>alpha</i></span><span lang=EN-GB>, and '</span><span lang=EN-GB style='font-family:Courier'>o</span><span lang=EN-GB>' represents an empty cell. The two last lines define the coordinates of the start and end positions, with two integers for the <i>x</i></span><span lang=EN-GB> (column) and <i>y</i></span><span lang=EN-GB> (line) coordinates in the grid, starting from 0. <o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
14.0pt'><b>Output<o:p></o:p></b></span></p>For each test case.<br><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>If the input describes a problem with a solution, then the output must be an integer in a single line indicating the minimum number of moves needed to reach the end position from the start position. If no solution exists, then the output should contain just "</span><span lang=EN-GB style='font-family:Courier'>IMPOSSIBLE</span><span lang=EN-GB>" in a single line.<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
14.0pt'><b>Sample Input<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>ZYXWVUTSRQPONMLKJIHGFEDCBA<br>8 8<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>x x x x o x x x<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>x o o C o o o x<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>x A x x x x D x<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>x o o o o o o x<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>x x x o x x x x<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>x o o B o o o x<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>x A x x x B x x<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>o o o o o o o o<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>4 0<o:p></o:p></b></span></p><p class=Code><span style='font-size:11.0pt'><b>4 7<o:p></o:p></b></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
14.0pt'><b>Sample Output<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-size:11.0pt;font-family:Courier'><b>17</b></span><span lang=EN-GB style='font-size:11.0pt'><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p></div></body></html>
______________________________________________________
3649||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Fire Lane"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Fire%20Lane_files/filelist.xml"><title>Fire Lane</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Office 2004 Test Drive User</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:Created>2006-11-18T19:20:00Z</o:Created>
  <o:LastSaved>2006-11-18T19:23:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Lines>1</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:Version>11.768</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
 </w:WordDocument>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	font-weight:bold;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
table.MsoNormalTable
	{mso-style-parent:"";
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.Code, li.Code, div.Code
	{mso-style-name:Code;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Courier;}
@page Section1
	{size:595.0pt 842.0pt;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><span lang=EN-GB style='font-size:16.0pt'>Fire Lane<o:p></o:p></span></p><p class=MsoBodyText><span style='mso-ansi-language:EN-US'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>The ambulances of Lilliput City Fire Department often have trouble to get across a particularly busy crossroads in the down town. Frequently, ambulance drivers have to shout orders asking drivers to remove cars from a certain lane in the street,<span style="mso-spacerun: yes">&nbsp; </span>a special lane reserved for emergency vehicles, the "Fire Lane". <o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>To model the situation, we consider an imaginary grid representing the street. Vehicles occupy one or more cells in this grid. The vehicles always move forward (no turns), towards the exterior of the grid, and towards a definite direction (N,S,W,E). Unfortunately, there might be other vehicles blocking their way. Your objective is to compute the necessary orders to clear the Fire Lane of those blocking vehicles so that the ambulance can pass through.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>The Fire Lane consists of two distinguished consecutive columns in the grid. Consider, for instance, the following grid:<o:p></o:p></span></p><p class=Code align=center style='text-align:center'><br>. 0 0 <span style='background:silver;mso-highlight:silver'>0 0</span> . . .<o:p></o:p></p><p class=Code align=center style='text-align:center'>. 4 1 <span style='background:silver;mso-highlight:silver'>1 1</span> . . .<o:p></o:p></p><p class=Code align=center style='text-align:center'>. 4 . <span style='background:silver;mso-highlight:silver'>. .</span> . . . <o:p></o:p></p><p class=Code align=center style='text-align:center'>. . . <span style='background:silver;mso-highlight:silver'>3 3</span> 3 . . <o:p></o:p></p><p class=Code align=center style='text-align:center'>. . 2 <span style='background:silver;mso-highlight:silver'>. .</span> . . .<o:p></o:p></p><p class=Code align=center style='text-align:center'>. . 2 <span style='background:silver;mso-highlight:silver'>. .</span> . . .<o:p></o:p></p><p class=Code align=center style='text-align:center'>. . 2 <span style='background:silver;mso-highlight:silver'>. .</span> . . . <o:p></o:p></p><p class=Code align=center style='text-align:center'>. . . <span style='background:silver;mso-highlight:silver'>. .</span> . . .<o:p></o:p></p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>In this picture, the symbols '</span><span lang=EN-GB style='font-family:Courier'>.</span><span lang=EN-GB>' denote free cells, the numbers mark the vehicles, and the gray shadow identify columns 3 and 4 as being the Fire Lane. Suppose that vehicles </span><span lang=EN-GB style='font-family:Courier'>0</span><span lang=EN-GB> and </span><span lang=EN-GB style='font-family:Courier'>3</span><span lang=EN-GB> are moving East (right), vehicle </span><span lang=EN-GB style='font-family:Courier'>1</span><span lang=EN-GB> is moving West (left), vehicle </span><span lang=EN-GB style='font-family:Courier'>2</span><span lang=EN-GB> is moving South (down), and vehicle </span><span lang=EN-GB style='font-family:Courier'>4</span><span lang=EN-GB> is moving North (up). Your program must compute which vehicles must be moved away, and list them. In this example, the vehicles to be moved are just 0, 3, 4 and 1, in this order.<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Input<o:p></o:p></b></span></p><b>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </b><p><p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>The first line of the input contains two integers indicating the size of the grid (width and height up to 100). Positions in the grid are represented by integer coordinates <i>x</i></span><span lang=EN-GB> and <i>y</i></span><span lang=EN-GB>, starting from 0, where <i>x</i></span><span lang=EN-GB> denotes the column and <i>y</i></span><span lang=EN-GB> the row, with origin the upper left corner. The second line of the input contains an integer <i>N</i></span><span lang=EN-GB> that indicates the number of vehicles to be listed. The third line contains an integer that indicates the <i>x</i></span><span lang=EN-GB> coordinate of the left column of the Fire Lane (which always has 2 columns). The next <i>N</i></span><span lang=EN-GB> lines give information for each of the <i>N</i></span><span lang=EN-GB> vehicles in the grid. For each line, describing a vehicle, there are two integers <i>x</i></span><span lang=EN-GB>, <i>y</i></span><span lang=EN-GB> indicating its coordinates in the grid, an integer for the length of the vehicle (the vehicles are 1 cell wide), and a character for the direction (</span><span lang=EN-GB style='font-family:Courier'>N</span><span lang=EN-GB>, </span><span lang=EN-GB style='font-family:Courier'>S</span><span lang=EN-GB>, </span><span lang=EN-GB style='font-family:Courier'>W</span><span lang=EN-GB> or </span><span lang=EN-GB style='font-family:Courier'>E</span><span lang=EN-GB>) towards which the vehicle extends and may move, starting from its position <i>x</i></span><span lang=EN-GB>, <i>y</i></span><span lang=EN-GB>. The numeric code of a vehicle is given by its position in the input sequence, starting with 0.<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Output<o:p></o:p></b></span></p><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>The output of your program is a list of vehicle numbers, each number in a separate line, to present a solution, or the word "</span><span lang=EN-GB style='font-family:
Courier'>Jammed</span><span lang=EN-GB>" if there are no solutions to the given problem. In case there is a solution, it should refer just to vehicles that need indeed to be removed. To list all the vehicles to be removed, you should at each step select among the vehicles that may be moved away (i.e., that are not blocked) the one with the least code number.</span><span lang=EN-GB style='font-size:16.0pt'><b><o:p></o:p></b></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Input<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=Code><b>8 8<o:p></o:p></b></p><p class=Code><b>5<o:p></o:p></b></p><p class=Code><b>3<o:p></o:p></b></p><p class=Code><b>1 0 4 E<o:p></o:p></b></p><p class=Code><b>4 1 3 W<o:p></o:p></b></p><p class=Code><b>2 4 3 S<o:p></o:p></b></p><p class=Code><b>3 3 3 E<o:p></o:p></b></p><p class=Code><b>1 2 2 N<o:p></o:p></b></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Output<o:p></o:p></b></span></p><p class=Code><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><p class=Code><b>0<o:p></o:p></b></p><p class=Code><b>3<o:p></o:p></b></p><p class=Code><b>4<o:p></o:p></b></p><p class=Code><b>1<o:p></o:p></b></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p></div></body></html>
______________________________________________________
3650||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content=Gap><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Gap_files/filelist.xml"><title>Gap</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Office 2004 Test Drive User</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:Created>2006-11-18T19:25:00Z</o:Created>
  <o:LastSaved>2006-11-18T19:28:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Lines>1</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:Version>11.768</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
 </w:WordDocument>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Times New Roman";
	panose-1:0 2 2 6 3 5 4 5 2 3;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
@font-face
	{font-family:"Lucida Grande";
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:50331648 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	font-weight:bold;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
table.MsoNormalTable
	{mso-style-parent:"";
	font-size:10.0pt;
	font-family:"Times New Roman";}
p.Code, li.Code, div.Code
	{mso-style-name:Code;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Courier;}
@page Section1
	{size:595.0pt 842.0pt;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><!--p class=MsoTitle><span lang=EN-GB style='font-size:16.0pt'>Gap<o:p></o:p></span></p>

<p class=MsoBodyText><span style='mso-ansi-language:EN-US'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p--><p class=MsoBodyText><span lang=EN-GB>There are many different ways of saying things and also of writing things. Sometimes there are much more different ways of saying things than things that are worth to be said. Sometimes people invent funny ways of telling things, sometimes people find complicated ways of not telling anything. This is true not only of people professionally engaged in the communication business, but also of everyone else. It is hard to communicate (do you see what we mean?). </span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>To help you correlate what some people may want to say (or not) you decided to workout a tool that may be used to compare two texts with gaps, and tell whether the patches may be filled so that the resulting texts will become the same. Gaps in the text are named by strings and have a length attached. For example, the sequence of characters </span><span lang=EN-GB style='font-family:Courier'>&lt;firstname:10&gt; </span><span lang=EN-GB>identifies a gap named "firstname" of length 10. Here is an example of texts with gaps (just to clarify, we identify here blank spaces in the input with the symbol </span><span lang=EN-GB style='font-family:"Lucida Grande"'>_ </span><span lang=EN-GB>, but this symbol doesn't exist in the input file, that matches exactly the Sample Input below's format). </span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'>&lt;name:3&gt;'s</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>boat</span><span lang=EN-GB style='font-family:
"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>is</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>no</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>longer</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>than</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>Anne's.</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>If</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>Joe</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>likes<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>&lt;food:7&gt;</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>then</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>so</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>do</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>I.</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>Usually,</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>&lt;food:7&gt;</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>are</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>yellow.<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'>&lt;thing:10&gt;</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>is</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>no</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>longer</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>than</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>Anne's.</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>If</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>&lt;name:3&gt;</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>likes<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>bananas</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>then</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>so</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>do</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>I.</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>Usually,</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>bananas</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:
Courier'>are</span><span lang=EN-GB style='font-family:"Lucida Grande"'>_</span><span lang=EN-GB style='font-family:Courier'>&lt;color:6&gt;.<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>The texts may be matched by consistently replacing each named gap by some string of the appropriate length. The same named gap may appear in either text, always with the same associated length. In the example above, we may set:</span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'>color yellow<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'>food bananas<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'>name Joe<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'>thing Joe's boat<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>Your goal is to write a program that given two texts with gaps will determine if the texts can be matched, in which case it must list how to fill the gaps, or not.<o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Input<o:p></o:p></b></span></p><b>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </b><p><p><p class=MsoBodyText><span lang=EN-GB>The input consists of two texts, in sequence. A text is given as a sequence of printable characters, for convenience split into several lines. Each text is specified by an integer N, in a single line, indicating how many lines the text has, followed by precisely N lines. To obtain the text from its lines, you should just concatenate the contents of all the lines, in order. The text may contain the usual alphabetic and punctuation characters, and also sequences of the form </span><span lang=EN-GB style='font-family:Courier'>&lt;<i>identifier</i></span><span lang=EN-GB style='font-family:Courier'>:<i>integer</i></span><span lang=EN-GB style='font-family:Courier'>&gt; </span><span lang=EN-GB>indicating a gap in the text. The </span><span lang=EN-GB style='font-family:Courier'><i>identifier</i></span><span lang=EN-GB> is a sequence of alphabetic characters, with the name of the gap, and </span><span lang=EN-GB style='font-family:Courier'><i>integer</i></span><span lang=EN-GB> is an integer (between 0 and 32), with the length of the gap. Every gap </span><span lang=EN-GB style='font-family:Courier'><i>identifier</i></span><span lang=EN-GB> in a gap is always associated to the same </span><span lang=EN-GB style='font-family:Courier'><i>integer</i></span><span lang=EN-GB>. The number of lines in each test does not exceed 100 lines, and each line does not exceed 400 characters.</span></p><p class=MsoBodyText><span lang=EN-GB style='font-size:16.0pt'><b><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></b></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Output<o:p></o:p></b></span></p><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b><p><p><p class=MsoBodyText><span lang=EN-GB>If the texts can be matched, the output will contain "</span><span lang=EN-GB style='font-family:Courier'>yes</span><span lang=EN-GB>" in the first line, followed by the strings that have been chosen to fill the gaps. For each gap, you should list the gap identifier, followed by a single space, and the text selected to fill the given gap. This list should appear by alphabetic order of the gap identifiers. If your matching is not able to identify some character precisely, then such character must be printed as "</span><span lang=EN-GB style='font-family:Courier'>*</span><span lang=EN-GB>" in the output.</span></p><p class=MsoBodyText><span lang=EN-GB>If the texts cannot be matched, the output should contain "</span><span lang=EN-GB style='font-family:Courier'>no</span><span lang=EN-GB>" in a single line. </span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Input<o:p></o:p></b></span></p><pre>
2
&lt;name:3&gt;'s boat is no longer than Anne's. If Joe likes
 &lt;food:7&gt; then so do I. Usually, &lt;food:7&gt; are yellow.
2
&lt;thing:10&gt; is no longer than Anne's. If &lt;name:3&gt; likes
 bananas then so do I. Usually, bananas are &lt;color:6&gt;.

1
potato&lt;bingo:6&gt;.
1
po&lt;bobo:6&gt; ppp.
</pre><!--p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>2<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>&lt;name:3&gt;'s</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>boat</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>is</b></span><span lang=EN-GB style='font-family:
"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>no</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>longer</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>than</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>Anne's.</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>If</b></span><span lang=EN-GB style='font-family:
"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>Joe</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>likes</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b></b></span><span lang=EN-GB
style='font-family:Courier'><b><o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span
lang=EN-GB style='font-family:Courier'><b>&lt;food:7&gt;</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>then</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>so</b></span><span lang=EN-GB style='font-family:
"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>do</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>I.</b></span><span lang=EN-GB style='font-family:
"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>Usually,</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>&lt;food:7&gt;</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>are</b></span><span lang=EN-GB style='font-family:
"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>yellow.<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB><b>2<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>&lt;thing:10&gt;</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>is</b></span><span lang=EN-GB style='font-family:
"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>no</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>longer</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>than</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>Anne's.</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>If</b></span><span lang=EN-GB style='font-family:
"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>&lt;name:3&gt;</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>likes<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span
lang=EN-GB style='font-family:Courier'><b>bananas</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>then</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>so</b></span><span lang=EN-GB style='font-family:
"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>do</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>I.</b></span><span lang=EN-GB style='font-family:
"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>Usually,</b></span><span
lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>bananas</b></span><span lang=EN-GB
style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB
style='font-family:Courier'><b>are</b></span><span lang=EN-GB style='font-family:
"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>&lt;color:6&gt;.<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>potato&lt;bingo:6&gt;.<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB><b>1<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>po&lt;bobo:6&gt;<o:p></o:p></b></span><span lang=EN-GB style='font-family:"Lucida Grande"'><b>_</b></span><span lang=EN-GB style='font-family:Courier'><b>ppp.<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p--><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:
16.0pt'><b>Sample Output<o:p></o:p></b></span></p><pre>
yes
color yellow
food bananas
name Joe
thing Joe's boat

yes
bingo ** ppp
bobo tato**
</pre><!--p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>yes<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>color
yellow<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>food bananas<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>name Joe<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>thing
Joe's boat<o:p></o:p></b></span></p>

<p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>yes<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>bingo ** ppp<o:p></o:p></b></span></p><p class=MsoBodyText><span lang=EN-GB style='font-family:Courier'><b>bobo tato**<o:p></o:p></b></span></p--><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p></div></body></html>
______________________________________________________
3651||||||false||||||
<P>Some people are against lotteries on moral grounds, some governments forbid lotteries, but with the advent of Internet this popular form of gambling, which started in China and helped finance the Great Wall, is thriving.<P>But the odds of winning a national lottery are tiny, and therefore your college classmates decided to organize a private lottery, with draws every Friday. The lottery is based on a popular style: a student who wants to bet chooses <SPAN CLASS="MATH"><I>C</I></SPAN> distinct numbers from 1 to <SPAN CLASS="MATH"><I>K</I></SPAN> and pays US$ 1.00 (notice that traditional lotteries such as US National Lotto use <SPAN CLASS="MATH"><I>C</I> = 6</SPAN> and <SPAN CLASS="MATH"><I>K</I> = 49</SPAN>). On Friday during lunch <SPAN CLASS="MATH"><I>C</I></SPAN> numbers (also from 1 to <SPAN CLASS="MATH"><I>K</I></SPAN>) are drawn. The student whose bet has the largest number of correct guesses receives the amount collected in the bets. This amount is shared in case of ties and accumulates to next week if no one guessed any of the numbers drawn.<P>Some of your colleagues do not believe in the laws of probability and asked you to write a program that determines the numbers that have been drawn the fewest times considering all previous draws, so that they can bet on those numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of a test case contains three integers <SPAN CLASS="MATH"><I>N</I></SPAN> , <SPAN CLASS="MATH"><I>C</I></SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN> which indicate respectively the number of draws that have already happened <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3651img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3651img1.png ALT="$ \le$">10000)</SPAN>, how many numbers comprises a bet <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3651img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3651img1.png ALT="$ \le$">10)</SPAN> and the maximum value of the numbers to be chosen in a bet <!-- MATH
 $(C < K \le 100)$
 --><SPAN CLASS="MATH">(<I>C</I> &lt; <I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3651img1.png ALT="$ \le$">100)</SPAN>. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains <SPAN CLASS="MATH"><I>C</I></SPAN> distinct integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> indicating the numbers drawn in each previous contest <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3651img1.png ALT="$ \le$"><I>X</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3651img1.png ALT="$ \le$"><I>K</I></SPAN>, for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3651img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3651img1.png ALT="$ \le$"><I>C</I>)</SPAN>. The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = <I>C</I> = <I>K</I> =</SPAN> <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input your program must write one line of output, containing the set of numbers that have been drawn the fewest times. This set must be printed as a list, in increasing order of numbers. Leave one blank space between two consecutive numbers in the list.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 4 6 
6 2 3 4 
3 4 6 5 
2 3 6 5 
4 5 2 6 
2 3 6 4
4 3 4 
3 2 1 
2 1 4 
4 3 2 
1 4 3 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
1 2 3 4
</PRE><P>
______________________________________________________
3652||||||false||||||
<P>Mr. Frog lives in a grid-like marsh of rectangular shape, composed of equally-sized cells, some of which are dry, some of which are only watery places. Mr. Frog lives in a dry cell and can jump only from a dry cell to another dry cell on his wanderings around the marsh.<P>Mr. Frog wants to visit his girlfriend, Ms. Toad, who also lives in a dry cell in the same marsh. But Mr. Frog is lazy, and wants to spend the minimum amount of energy in his jumping way to Ms. Toad's home. Mr. Frog knows how much energy he spends in any of his jumps. For any single jump, Mr. Frog always uses the following figure to determine which are the possible target cells from his current position (the cell marked <SPAN CLASS="textbf">F</SPAN>), and the corresponding energy spent in the jump, in calories. Any other cell is unreachable from Mr. Frog's current position with a single jump.<P><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf">F</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD></TR></TBODY></TABLE></DIV><P>Your task is to determine the minimum amount of energy that Mr. Frog needs to spend to get from his home to Ms. Toad's home.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of a test case contains two integers, <SPAN CLASS="MATH"><I>C</I></SPAN> and <SPAN CLASS="MATH"><I>R</I></SPAN>, indicating respectively the number of columns and rows of the marsh <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>C</I>, <I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$">1000)</SPAN>. The second line of a test case contains four integers <SPAN CLASS="MATH"><I>C</I><SUB>f</SUB></SPAN> , <SPAN CLASS="MATH"><I>R</I><SUB>f</SUB></SPAN> , <SPAN CLASS="MATH"><I>C</I><SUB>t</SUB></SPAN> , and <SPAN CLASS="MATH"><I>R</I><SUB>t</SUB></SPAN> , where <SPAN CLASS="MATH">(<I>C</I><SUB>f</SUB>, <I>R</I><SUB>f</SUB>)</SPAN> specify Mr. Frog's home location and <SPAN CLASS="MATH">(<I>C</I><SUB>t</SUB>, <I>R</I><SUB>t</SUB>)</SPAN> specify Ms. Toad's home location <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>C</I><SUB>f</SUB>, <I>C</I><SUB>t</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>C</I></SPAN> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>R</I><SUB>f</SUB>, <I>R</I><SUB>t</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>R</I>)</SPAN>. The third line of a test case contains an integer <SPAN CLASS="MATH"><I>W</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>W</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$">1000)</SPAN> indicating the number of watery places in the marsh. Each of the next <SPAN CLASS="MATH"><I>W</I></SPAN> lines contains four integers <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB></SPAN> ,<SPAN CLASS="MATH"><I>R</I><SUB>1</SUB></SPAN> ,<SPAN CLASS="MATH"><I>C</I><SUB>2</SUB></SPAN> , and <SPAN CLASS="MATH"><I>R</I><SUB>2</SUB></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>C</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>C</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>C</I></SPAN> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>R</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>R</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>R</I>)</SPAN> describing a rectangular watery place comprising cells whose coordinates <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> are so that <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>C</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3652img1.png ALT="$ \le$"><I>R</I><SUB>2</SUB></SPAN> . The end of input is indicated by <SPAN CLASS="MATH"><I>C</I> = <I>R</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, your program must produce one line of output, containing the minimum calories consumed by Mr. Frog to go from his home location to Ms. Toad's home location. If there is no way Mr. Frog can get to Ms. Toad's home, your program should output `<TT>impossible</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 4 
1 1 4 2
2 
2 1 3 3
4 3 4 4
4 4 
1 1 4 2
1 
2 1 3 4
7 6 
4 2 7 6
5 
4 1 7 1
5 1 5 5
2 4 3 4
7 5 7 5
6 6 6 6
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
14 
impossible 
12
</PRE><P>
______________________________________________________
3653||||||false||||||
<P>The ICPC judges are preparing a party for the opening ceremony. For the party, they intend to add a playlist with some songs to the jukebox software (a simple MP3 player). However, there are so many songs in the computer that it is diffcult to find the ones they want to add. As a consequence, they need to use the search feature many times.<P>In this jukebox, when you search for a string <SPAN CLASS="MATH"><I>s</I></SPAN>, the software returns every music whose title or artist name contains <SPAN CLASS="MATH"><I>s</I></SPAN> as a substring. String <SPAN CLASS="MATH"><I>s</I></SPAN> is a substring of string <SPAN CLASS="MATH"><I>t</I></SPAN> if <SPAN CLASS="MATH"><I>t</I></SPAN> contains all characters of <SPAN CLASS="MATH"><I>s</I></SPAN> as a contiguous sequence (for example, `bc' is a substring of `abcd', but `ac' is not). To save their precious time, while looking for a song, they always use one of the song's <SPAN CLASS="textit">golden string</SPAN>, i.e. one of the shortest strings for which the search returns as a result only the song they want.<P><DIV ALIGN="CENTER"><IMG WIDTH="971" HEIGHT="407" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3653a.jpg ALT="\epsfbox{p3653a.eps}"></DIV><P>In the example above, a possible golden string for the song `johnnatan' is `ta'. Note that `ta' is not a substring of the name of another song nor a substring of the artist of another song. Note also that there is no string of size equal to 1 that could identify uniquely the song `johnnatan'.<P><DIV ALIGN="CENTER"><IMG WIDTH="971" HEIGHT="422" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3653a.jpg ALT="\epsfbox{p3653b.eps}"></DIV><P>They discovered that if they remove the artist fields from some of the songs they can get even smaller golden strings. For the song `john', there is no golden string. However, if one removes the artist field from all other songs, the string `c' becomes the golden string for the song `john'.<P>Given the song list (each song with name and artist), your job is to determine the minimum sum of the golden string sizes for all songs that can be obtained if one is allowed to remove some of the artist fields. In the figure above you can see a possible best result with the golden strings in bold. The minimum sum of the golden string sizes in this case is 10.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of each test case contains one integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3653a.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3653a.jpg ALT="$ \le$">30)</SPAN>, which indicates the number of songs. Following there will be <SPAN CLASS="MATH"><I>N</I></SPAN> pairs of lines (<SPAN CLASS="MATH">2 <TT>*</TT> <I>N</I></SPAN> lines), one pair for each song. The first line of a pair will contain the song name, the second line will contain the artist name. Both artist and song names are strings containing only lower case letters or underlines and having at least 1 and at most 30 characters. There will be at most 6 different artists in the list. The end of the input is given by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program must output one single line with the minimum sum of the golden string sizes. You may assume that there will always be a solution.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 
a_flor 
los_hermanos 
anna_julia 
los_hermanos 
quem_sabe 
los_hermanos 
pierrot 
los_hermanos 
azedume 
los_hermanos 
johnny 
massacration 
johnnatan 
massacration 
john 
massacration 
4 
c 
axc 
b 
axc 
d 
cc 
xc 
cc 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 
5
</PRE><P>
______________________________________________________
3654||||||false||||||
<P>Bubble Inc. is developing a new technology for browsing a map at different zoom levels. Their new technology assumes that the region to be mapped is a rectangular plane surface and it divides this surface in rectangular sub-regions, which represent deeper zoom levels.<P>Bubble Inc. technology represents maps using a structure known as <SPAN CLASS="textit">quad-tree</SPAN>. In a quadtree, a rectangular region named <SPAN CLASS="MATH"><I>x</I></SPAN> may be divided in half, both horizontally and vertically, resulting in four equal-sized rectangular sub-regions. Those sub-regions are called child regions of <SPAN CLASS="MATH"><I>x</I></SPAN>, and are named <SPAN CLASS="MATH"><I>xp</I></SPAN> for the top-left, <SPAN CLASS="MATH"><I>xq</I></SPAN> for the top-right, <SPAN CLASS="MATH"><I>xr</I></SPAN> for the bottom-right and <SPAN CLASS="MATH"><I>xs</I></SPAN> for the bottom-left regions, where <SPAN CLASS="MATH"><I>xc</I></SPAN> represents the concatenation of string <SPAN CLASS="MATH"><I>x</I></SPAN> and character <SPAN CLASS="MATH"><I>c</I> =</SPAN> `p', `q', `r' or `s'. For example, if the base region to be mapped is called <SPAN CLASS="MATH"><I>m</I></SPAN>, the child regions of <SPAN CLASS="MATH"><I>m</I></SPAN> are, from top-left in clockwise order: <SPAN CLASS="MATH"><I>mp</I></SPAN>, <SPAN CLASS="MATH"><I>mq</I></SPAN>, <SPAN CLASS="MATH"><I>mr</I></SPAN> and <SPAN CLASS="MATH"><I>ms</I></SPAN>, as illustrated below.<P><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>mp</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>mq</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>ms</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>mr</TD></TR></TBODY></TABLE></DIV><P>Any region can be further subdivided. For example, the region named <SPAN CLASS="MATH"><I>ms</I></SPAN> can be further divided into sub-regions <SPAN CLASS="MATH"><I>msp</I></SPAN>, <SPAN CLASS="MATH"><I>msq</I></SPAN>, <SPAN CLASS="MATH"><I>msr</I></SPAN> and <SPAN CLASS="MATH"><I>mss</I></SPAN>, as illustrated below.<P><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msp</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msq</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>mss</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msr</TD></TR></TBODY></TABLE></DIV><P>As another example, the figure below shows the result of subdividing the child sub-regions of the region named <SPAN CLASS="MATH"><I>msr</I></SPAN>.<P><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrpp</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrpq</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrqp</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrqq</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrps</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrpr</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrqs</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrqr</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrsp</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrsq</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrrp</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrrq</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrss</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrsr</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrrs</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>msrrr</TD></TR></TBODY></TABLE></DIV><P>Sub-regions with names of the same length have the same zoom level, since they represent regions of the same size. Sub-regions in the same zoom level that share a common side are said to be <SPAN CLASS="textit">neighbors</SPAN>.<P>Anything that lies outside the base region <SPAN CLASS="MATH"><I>m</I></SPAN> is not mapped and, for every zoom level, all sub-regions of <SPAN CLASS="MATH"><I>m</I></SPAN> are mapped.<P>Bubble's map technology provides a way for the user to navigate from a given sub-region to neighboring sub-regions in the directions up, down, left and right. You mission is to help Bubble Inc. in finding the neighboring sub-regions of a given sub-region. That is, given the name of a rectangular sub-region, you must determine the names of its four neighboring sub-regions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line contains one integer <SPAN CLASS="MATH"><I>N</I></SPAN> indicating the number of test cases. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines represents a test case, containing the name of a region composed by <SPAN CLASS="MATH"><I>C</I></SPAN> characters <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3654img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3654img1.png ALT="$ \le$">5000)</SPAN>, the first always being the letter `m' and the following being either `p', `q', `r' or `s'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input your program must produce one line of output, containing the names of the four neighboring regions of the given region in the order of direction up, down, left, right. For the neighbors that are not mapped you should output `<TT>&lt;none&gt;</TT>' instead of its name. Leave one blank space between two consecutive names.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
mrspr 
mps
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
mrspq mrssq mrsps mrsqs 
mpp msp &lt;none&gt; mpr
</PRE><P>
______________________________________________________
3655||||||false||||||
<P>Dr. Kabal, a well recognized biologist, has recently discovered a liquid that is capable of curing the most advanced diseases. The liquid is extracted from a very rare onion that can be found in a country called Onionland. But not all onions of Onionland are worth to take to the lab for processing. Only those onions with an odd number of layers contain the miraculous liquid. Quite an odd discovery!<P><DIV ALIGN="CENTER"><IMG WIDTH="562" HEIGHT="217" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3655a.jpg ALT="\epsfbox{p3655a.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: Onion from Onionland</DIV><P>Dr. Kabal has hired a lot of research assistants to collect and analyse onions for him. Since he does not want to share his discovery with the world yet, he didn't tell the assistants to look for onions with an odd number of layers. Instead, each assistant was given the task of collecting onions, and selecting points from each of the layer's outer borders, so that an approximation of the layer structure of the onion can be reconstructed later. Dr. Kabal told the assistants that the next step will be a ``complicated analysis'' of these points. In fact, all he will do is simply to use the points to count the number of layers in each of the onions, and select the ones with an odd number of layers.<P><DIV ALIGN="CENTER"><IMG WIDTH="575" HEIGHT="230" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3655a.jpg ALT="\epsfbox{p3655b.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 2: Points collected by an assistant</DIV><P>It is clear that the approximation obtained by Dr. Kabal, from the points collected, might have a different <SPAN CLASS="textit">shape</SPAN> than the original onion. For instance, only some of the points of the onion shown in Figure 1 would be extracted in the process, giving rise to a set of points as shown in Figure 2. With these points Dr. Kabal will try to approximate the original layers of the onion, obtaining something like what is shown in Figure 3. The approximation procedure followed by Dr. Kabal (whose result is shown in Figure 3) is simply to recursively find nested convex polygons such that at the end every point belongs to precisely one of the polygons. The assistants have been told to select points in such a way that the number <SPAN CLASS="textit">of layers in the approximation, if done in this recursive manner, will be the same as in the original onion</SPAN>, so that is fine with Dr. Kabal. The assistants are also aware that they need at least three points to approximate a layer, even the innermost one.<P><DIV ALIGN="CENTER"><IMG WIDTH="575" HEIGHT="243" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3655a.jpg ALT="\epsfbox{p3655c.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 3: Dr. Kabal's approximation</DIV><P>Your task is to write a program that, given a set of points collected by an assistant (as shown in Figure 2), determines if the respective onion should be taken to the laboratory.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each test case consists of an integer <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3655a.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3655a.jpg ALT="$ \le$">2000</SPAN> in a single line, indicating the number of points collected by the assistants. Following, there are <SPAN CLASS="MATH"><I>N</I></SPAN> lines, each containing two integers <SPAN CLASS="MATH">-2000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3655a.jpg ALT="$ \le$"><I>X</I>, <I>Y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3655a.jpg ALT="$ \le$">2000</SPAN> corresponding to the coordinates of each point. The input is finished by a problem with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> points, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There should be one line of output for each test case in the input. For each test case print the string<P><PRE>
Take this onion to the lab!
</PRE>if the onion should be taken to the laboratory or<P><PRE>
Do not take this onion to the lab!
</PRE>if the onion should not be taken to the laboratory.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 
0 0 
0 8 
1 6 
3 1 
6 6 
8 0 
8 8 
11 
2 6 
3 2 
6 6 
0 0 
0 11 
1 1 
1 9 
7 1 
7 9 
8 10 
8 0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Do not take this onion to the lab! 
Take this onion to the lab!
</PRE><P>
______________________________________________________
3656||||||false||||||
<P>There are several versions of Odd or Even, a game played by competitors to decide random issues (such as ``who will code this problem?"). In one of the versions, for two players, the game starts with each player calling either odds or evens. Then they count to three (some people chant ``Once, twice, three, SHOOT!"). On three, both players hold out one of their hands, showing a number of fingers (from zero to five). If the fingers add to an even number, then the person who called evens wins. If the fingers add to an odd number, then the person who called odds wins.<P>John and Mary played several games of Odd or Even. In every game John chose odds (and, consequently, Mary chose evens). During the games each player wrote down, in small cards, how many fingers he/she showed, using one card for each game - Mary used blue cards, John used red cards. Their objective was to be able to re-check the results later, looking at the cards for each game. However, at the end of the day John dropped the deck of cards, and although they could separate the cards by color, they are now out of order.<P>Given the set of numbers written on red cards and on blue cards, you must write a program to determine the minimum number of games that Mary certainly won.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of a test case contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> representing the number of games played <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3656img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3656img1.png ALT="$ \le$">100)</SPAN>. The second line of a test case contains <SPAN CLASS="MATH"><I>N</I></SPAN> integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> , indicating the number of fingers shown by Mary in each of the games ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3656img1.png ALT="$ \le$"><I>X</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3656img1.png ALT="$ \le$">5</SPAN>, for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3656img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3656img1.png ALT="$ \le$"><I>N</I></SPAN>). The third line of a test case contains <SPAN CLASS="MATH"><I>N</I></SPAN> integers <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN> , indicating the number of fingers shown by John in each of the games ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3656img1.png ALT="$ \le$"><I>Y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3656img1.png ALT="$ \le$">5</SPAN>, for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3656img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3656img1.png ALT="$ \le$"><I>N</I></SPAN>). The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program must write one line, containing one integer, indicating the minimum number of games that Mary certainly won.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
1 0 4 
3 1 2 
9 
0 2 2 4 2 1 2 0 4 
1 2 3 4 5 0 1 2 3 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 
3
</PRE><P>
______________________________________________________
3657||||||false||||||
<P>Demand for electricity grew rapidly in the country over recent years, and is projected to grow even faster in the next twenty years. To cope with this increase in demand, the government is planning to privatize the country's electricity power-generation sector, ending the monopoly of the state-owned company, ICPC (Independent Circuit Power Corporation).<P>ICPC owns a set of power-generation plants (hydroelectric and nuclear). ICPC's plants are connected by <SPAN CLASS="textit">power lines</SPAN> that cross the country. Each power line connects two distinct power plants and is constructed in a straight line. A <SPAN CLASS="textit">power path</SPAN> is a sequence of power lines <SPAN CLASS="MATH"><I>l</I><SUB>1</SUB>, <I>l</I><SUB>2</SUB>,..., <I>l</I><SUB>m</SUB></SPAN>, with each power line <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> connecting directly plants <SPAN CLASS="MATH"><I>p</I><SUB>i-1</SUB></SPAN> and <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> , such that any two consecutive power lines <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>l</I><SUB>i+1</SUB></SPAN> are linked to a common power plant <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>.<P>Power plants were built over several years, one at a time, due to budget restrictions. Also due to budget restrictions, every time a new power plant was built, only one new power line was constructed to integrate the new plant to the existing ICPC system. The new power line always linked the newly built power plant to the nearest power plant already in the system. If more than one such plant existed (that is, if more than one plant was located at a minimum distance from the new plant), the oldest plant was chosen.<P>In the privatization project, the aim is to break up the ICPC power-generation system into smaller companies, each company owning a set of power plants (each power plant will be owned by only one company). After the privatization, ICPC will cease to exist; only the new companies will own the power plants. The division of power plants among new companies must obey the following restrictions:<P><UL><LI>the <SPAN CLASS="textit">total capacity</SPAN> of every new company must be at least <SPAN CLASS="MATH"><I>C</I></SPAN>, where <SPAN CLASS="MATH"><I>C</I></SPAN> is a value in MW (Mega Watts) decided by the government. The total capacity of a set of power plants is the sum of capacities of those plants; </LI><LI>power paths between any two plants owned by a new company must include only plants owned by that company. You have been hired by ICPC to determine which is the largest number of new companies that can be created in the privatization process. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of a test case contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>C</I></SPAN> indicating respectively the total number of power plants owned by ICPC <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3657img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3657img1.png ALT="$ \le$">10000)</SPAN> and the minimum total capacity, in MW, that every new company must have <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3657img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3657img1.png ALT="$ \le$">10000)</SPAN>. Power plants are identified by integers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> ; plant 1 was the first to be built, plant 2 the second to be built, and so on. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines describes a power plant; the first line describes power plant 1, the second line describes power plant 2, and so on. Each description consists of three integers <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN> and <SPAN CLASS="MATH"><I>P</I></SPAN> , where <SPAN CLASS="MATH">(<I>X</I>, <I>Y</I>)</SPAN> is the plant location <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3657img1.png ALT="$ \le$"><I>X</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3657img1.png ALT="$ \le$">1000</SPAN> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3657img1.png ALT="$ \le$"><I>Y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3657img1.png ALT="$ \le$">1000)</SPAN> and <SPAN CLASS="MATH"><I>P</I></SPAN> is the plant capacity <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3657img1.png ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3657img1.png ALT="$ \le$">1000)</SPAN>. Plants were built at different locations (that is, no two plants have the same location). The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = <I>C</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input your program must produce one line of output, containing only one integer: the largest number of new companies that can be created in the privatization process.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 22 
0 0 20 
10 20 30 
4 430 
10 20 100 
20 10 400 
50 10 50 
25 25 500 
3 100 
10 10 33 
0 10 33 
10 0 33 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
2 
0
</PRE><P>
______________________________________________________
3658||||||false||||||
<P>At the end of the week, John asked Mary to send him an urgent sales report. Mary was in a hurry because she was leaving for her holiday. She then copy-pasted the sales sheet on an email, sent it to John and went out. She did not want to be annoyed with work issues, so she left without telling anyone where she would be. She announced that she would be simply not available for the next two weeks, turned off her cell phone, and left.<P>When John received the message he realized that the report had no spaces at all! He knew that the report should have a header line with product codes of the form <TT>P1</TT>, <TT>P2</TT>, ..., <TT>P<SPAN CLASS="MATH"><SUB>N</SUB></SPAN></TT> and the word <TT>Totals</TT> at the end. Then there would be several lines reporting product sales for the different sellers of Mary's office. Each seller was identified with a name composed by one word (only alphabetical characters). The line corresponding to a seller should begin with his/her name, followed by the number of sold products, according to the columns' report. The last line of the report should begin with the two letters <TT>TP</TT> followed by the totals of each column in the report (of course, no seller's name began with the letters <TT>TP</TT>). John knew that there were no negative numbers in the report, a zero quantity was reported with a single <TT>0</TT>, and there were no leading zeros when reporting a positive quantity.<P>At this point, John decided to reconstruct Mary's report. He knew that there could be more than one possible result, but he wanted to do it anyway with the first consistent solution that he could find (maybe he could fix any mistakes when Mary comes back).<P>Could you help John with the recovering of Mary's sales report?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line in the input contains an integer <SPAN CLASS="MATH"><I>C</I></SPAN> specifying the number of test cases. The first line of a report is a header line, containing the product codes <TT>P1</TT>, <TT>P2</TT>, ..., <TT>P<SPAN CLASS="MATH"><SUB>N</SUB></SPAN></TT> and the word Totals, as described above. The numbering of products in this header line is consecutive, from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> , with <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3658img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3658img1.png ALT="$ \le$">5</SPAN>. Then there are a number of lines, each representing a row of the report, as described above. The last line of the report starts with the letters <TT>TP</TT> and have the format described above. Consider that each seller sold less than 1000 units of each product. There are no more than 4 sellers on each test case. Each seller name will not exceed 10 characters (only uppercase and lowercase letters).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input your program must produce one possible Mary's report. Each line of the answer must be left aligned, with its items separated by a single space, and with no space at its end.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
P1P2P3Totals 
Amanda121100131 
Charles5141772 
Monique14121238 
TP1862629241 
P1P2Totals 
Ingrid9519851936 
Candid49212504 
Peter10313 
Camila000 
TP145310002453
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
P1 P2 P3 Totals 
Amanda 121 10 0 131 
Charles 51 4 17 72 
Monique 14 12 12 38 
TP 186 26 29 241 
P1 P2 Totals 
Ingrid 951 985 1936 
Candid 492 12 504 
Peter 10 3 13 
Camila 0 0 0 
TP 1453 1000 2453
</PRE><P>
______________________________________________________
3659||||||false||||||
<P>Turkish Roulette is a betting game that uses a roulette with <SPAN CLASS="MATH"><I>S</I></SPAN> slots, each one numbered with an integer between -64 and 64. In each turn of the game players bet on B balls, each one also numbered from -64 to 64. For each of the <SPAN CLASS="MATH"><I>B</I></SPAN> balls, exactly one player will bet on it.<P>After spinning the roulette, the dealer throws in the <SPAN CLASS="MATH"><I>B</I></SPAN> balls sequentially. When the roulette stops, each ball is lodged <SPAN CLASS="textit">over</SPAN> two (adjacent) slots, as depicted in the figure below, which shows a roulette with thirty two slots and four balls. Notice that, as the figure illustrates, a ball occupies the space of two adjacent slots, and therefore there is room for at most <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \lfloor$"><I>S</I>/2<IMG WIDTH="12" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \rfloor$"></SPAN> balls in the roulette.<P><DIV ALIGN="CENTER"><IMG WIDTH="484" HEIGHT="486" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="\epsfbox{p3659.eps}"></DIV><P>Balls end up lodged in the same relative positions that they were thrown in the roulette. That is, if balls <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN> are thrown in that sequence, they end up lodged such that, in clockwise direction, <SPAN CLASS="MATH"><I>a</I></SPAN> is followed by <SPAN CLASS="MATH"><I>b</I></SPAN> which is followed by <SPAN CLASS="MATH"><I>c</I></SPAN> which is followed by <SPAN CLASS="MATH"><I>a</I></SPAN>.<P>The <SPAN CLASS="textit">value</SPAN> of a ball in a turn is calculated by multiplying the ball's number by the sum of the numbers of the two adjacent slots over which the ball is lodged. If a ball's value is positive, the player who bet on that ball receives that amount (the ball's value) from the dealer; if a ball's value is negative, the player who bet on that ball must pay that amount to the dealer. The <SPAN CLASS="textit">profit</SPAN> of the dealer in a turn is the total amount received minus the total amount paid.<P>For example, in the figure above, the dealer pays $5.00 for ball numbered -1, pays $7.00 for ball numbered -7, receives $24.00 for ball numbered 12 and does not pay nor receive anything for ball numbered 3. Therefore, in this turn the dealer makes a profit of $12.00 <SPAN CLASS="MATH">(24 - 5 - 7)</SPAN>; note that the dealer's profit in a turn may be negative (loss).<P>You will be given the description of the roulette, the description of the balls and the sequence in which the balls are thrown into the roulette. Write a program to determine the maximum profit that the dealer can make in one turn.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several test cases. The first line of a test case contains two integers <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>B</I></SPAN> which indicate respectively the number of slots in the roulette <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$">250)</SPAN> and the number of balls used <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$"><IMG WIDTH="12" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \lfloor$"><I>S</I>/2<IMG WIDTH="12" HEIGHT="35" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \rfloor$">)</SPAN>. The second line of a test case contains <SPAN CLASS="MATH"><I>S</I></SPAN> integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN>, indicating the numbers associated to the roulette's slots, in clockwise direction <SPAN CLASS="MATH">(- 64<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$"><I>X</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$">64</SPAN>, for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$"><I>S</I>)</SPAN>. The third line of a test case contains <SPAN CLASS="MATH"><I>B</I></SPAN> integers <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN> , indicating the numbers associated to the balls <SPAN CLASS="MATH">(- 64<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$"><I>Y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$">64</SPAN>, for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3659img1.png ALT="$ \le$"><I>B</I>)</SPAN>, in the sequence the balls are thrown into the roulette (notice it is in this order that they end lodged in the roulette, in clockwise direction). The end of input is indicated by <SPAN CLASS="MATH"><I>S</I> = <I>B</I> = 0</SPAN>. The input must be read from standard input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input your program must write one line of output, containing an integer indicating the maximum profit the dealer can make in one turn. The output must be written to standard output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 2 
-1 0 2 -1 
-1 1 
5 2 
3 2 -1 7 1 
2 3 
7 3 
-4 3 2 1 0 -4 -2 
-10 0 1 
4 2 
0 2 3 0 
-2 -2 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
-11 
56 
10

______________________________________________________
3660||||||false||||||
<P>There is a robot in each grid of an <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>M</I></SPAN> Grid. These robots can execute commands. Commands include:<P><DL><DT><STRONG>NORTH</STRONG></DT><DD>All robots move one grid north.</DD><DT><STRONG>SOUTH</STRONG></DT><DD>All robots move one grid south.</DD><DT><STRONG>WEST</STRONG></DT><DD>All robots move one grid west.</DD><DT><STRONG>EAST</STRONG></DT><DD>All robots move one grid east.</DD></DL><P>If a robot stays outside of the Grid after executing the command, it will be destroyed immediately.<P>Given the total number of each type of command, you task is to arrange an order of these commands, so that the maximized number of commands (i.e. the maximal sum of the number of commands executed by each robot) are executed by these <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>M</I></SPAN> robots. (Note: a destroyed robot can not execute commands anymore.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several cases.<P>The first line of each case contains two positive integers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN> indicating the number of rows and columns in the grid ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3660img1.png ALT="$ \leq$"> <I>N</I>, <I>M</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3660img1.png ALT="$ \leq$"> 10<SUP>5</SUP></SPAN>). The second line contains four integers indicating the number of each type of command : NORTH, SOUTH, WEST and EAST respectively. Each of the four numbers will not exceed <SPAN CLASS="MATH">10<SUP>5</SUP></SPAN>.<P>The last case is followed by a line containing two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each case, output an integer indicating the maximized number of commands that these robots can execute. The answer will be fit in a 64-bit signed integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2 2
1 0 0 0
2 2
1 1 1 1
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1: 4
Case 2: 9
</PRE><P>
______________________________________________________
3661||||||false||||||
<P>Animals are living their painful lives in the zoo. Their activities are limited in a small area without any fun of snacks, alcohol, love or games. They are so upset that they decide to escape in a night.<P>As shown in Figure 1, the paths in the zoo can be expressed by a grid with <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>m</I></SPAN> nodes. All the paths in the grid are two-way, horizontal or vertical or diagonal. Animals start from the upper left corner, and they are free if they can reach the lower right through paths.<P><DIV ALIGN="CENTER"><IMG WIDTH="500" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3661img1.png ALT="\epsfbox{p3661.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: This is a <SPAN CLASS="MATH">3 <TT>x</TT> 4</SPAN> nodes grid, the number beside the path indicating how many staff shall be sent to block this path</DIV><P>To protect public safety, the police are sent to block some paths to catch all the escaping animals. As it needs certain police staff to block a path, you are required to write a program for the police officer, and tell him how many staff at least shall be sent in order to defeat this Animal Escape.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several cases, each describes one escape action.<P>Each case begins with two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH">3 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3661img1.png ALT="$ \leq$"> <I>n</I>, <I>m</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3661img1.png ALT="$ \leq$"> 1000</SPAN>.<P>For the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines, there are <SPAN CLASS="MATH"><I>m</I> - 1</SPAN> integers in each line, indicating how many staff shall be sent to block the horizontal paths respectively.<P>For the following <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> lines, there are <SPAN CLASS="MATH"><I>m</I></SPAN> integers in each line, indicating how many staff shall be sent to block the vertical paths respectively.<P>For the following <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> lines, there are <SPAN CLASS="MATH"><I>m</I> - 1</SPAN> integers in each line, indicating how many staff shall be sent to block the diagonal paths respectively.<P>Each line describes the paths from left to right. All integers in input file are no more than <SPAN CLASS="MATH">1, 000, 000</SPAN>.<P>The last case is followed by a line containing two zeros. The size of the input data is about <SPAN CLASS="MATH">16<I>MB</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each case, output how many staff at least shall be sent to block all animals. Please output in the following format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3 4
5 6 4
4 3 1
7 5 3
5 6 7 8
8 7 6 5
5 5 5
6 6 6
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Minimum = 14
</PRE><P>
______________________________________________________
3662||||||false||||||
<P>For a given point set <SPAN CLASS="MATH"><I>P</I> = {(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>) : 1 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3662img1.png ALT="$ \leq$"> <I>i</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3662img1.png ALT="$ \leq$"> <I>n</I>}</SPAN>, then construct a complete graph <SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>, <I>W</I>)</SPAN> with <SPAN CLASS="MATH"><I>n</I></SPAN> vertexes. The weight function for any two vertexes is <SPAN CLASS="MATH"><I>w</I>(<I>v</I><SUB>i</SUB>, <I>v</I><SUB>j</SUB>) = | <I>x</I><SUB>i</SUB> - <I>x</I><SUB>j</SUB>| + | <I>y</I><SUB>i</SUB> - <I>y</I><SUB>j</SUB>|</SPAN>. Please calculate the minimum spanning tree of <SPAN CLASS="MATH"><I>G</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Hint</A>&nbsp;</FONT></H2>For the graph below, there exists a minimum spanning tree in which there is at most one vertex connected with <SPAN CLASS="MATH"><I>A</I></SPAN> in the shadow area. You can extend this property to solve the problem.<P><DIV ALIGN="CENTER"><IMG WIDTH="200" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3662img1.png ALT="\epsfbox{p3662.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several cases.<P>Each cases begins with an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3662img1.png ALT="$ \leq$"> <I>n</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3662img1.png ALT="$ \leq$"> 100, 000</SPAN>, to indicate the size of the point set. The points in the point set have serial numbers from <SPAN CLASS="MATH">1</SPAN> to <SPAN CLASS="MATH"><I>n</I></SPAN>.<P>Each line of the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains two non-negative integers <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> (no more than <SPAN CLASS="MATH">10<SUP>7</SUP></SPAN>) to describe the coordinate for each point. Any two points' coordinates are different.<P>The last case is followed by a line containing a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Output</A>&nbsp;</FONT></H2>For each case, output the case's serial number and the weighted sum of all minimum spanning tree edges in the following format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
0 0
2 0
0 3
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1: Total Weight = 5
</PRE><P>
______________________________________________________
3663||||||false||||||
<P>``Connect it" is a popular game for all ages. Newman loves the game very much. ``Connect it" has a stronger version with slightly different rules.<P>The game venue is expressed by size. When the game starts, there are <SPAN CLASS="MATH">2<I>size</I> <TT>x</TT> 2<I>size</I></SPAN> diamonds, each diamond is a square whose side length is <SPAN CLASS="MATH">1</SPAN> with different patterns on it. The diamonds form a Big Square whose side length is <SPAN CLASS="MATH">2<I>size</I></SPAN>. Each time, a player can choose two diamonds with the same patterns. If exists a broken line which can connect the center point of two diamonds with one turning at most and which doesn't go through any other diamond, these two diamonds will be eliminated at the same time. Such a broken line is called ``valid broken line". Players continue to eliminate diamonds until all diamonds are eliminated or no diamonds can be eliminated.<P>To enhance visual effect, we set a boundary for game venue. The boundary is a circle whose center is the center of the Big Square and whose radius is <SPAN CLASS="MATH">2<I>size</I></SPAN>. Any part of the broken line cannot go beyond the circle, but can be in (or on) the circle.<P>Newman's task is to complete a part of the game, i.e. for a given middle status or start status in the game, determine whether two diamonds can be connected by a ``valid broken line". Suppose the two diamonds have the same patterns, Newman hopes you can help him.<P>Here are two examples of valid broken line:<P><DIV ALIGN="CENTER"><A NAME="65"></A><TABLE><CAPTION ALIGN="BOTTOM"><STRONG>Figure 1:</STRONG> Two examples of valid broken line.</CAPTION><TR><TD><TABLE WIDTH="50%"><TR><TD><!--DIV ALIGN="CENTER">

</DIV--><DIV ALIGN="CENTER"><IMG WIDTH="195" HEIGHT="194" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3663img1.png ALT="\epsfbox{p3663a.eps}"></DIV><P></TD></TR></TABLE></td><td><TABLE WIDTH="45%"><TR><TD><!--
</DIV--><DIV ALIGN="CENTER"><IMG WIDTH="191" HEIGHT="191" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3663img1.png ALT="\epsfbox{p3663b.eps}"></DIV><P></TD></TR></TABLE></TD></TR></TABLE></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several cases.<P>For each case, the first line is an integer <SPAN CLASS="MATH"><I>size</I></SPAN>, ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3663img1.png ALT="$ \leq$"> <I>size</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3663img1.png ALT="$ \leq$"> 50</SPAN>) to indicate the size of game venue.<P>A character matrix with <SPAN CLASS="MATH">2<I>size</I></SPAN> rows and <SPAN CLASS="MATH">2<I>size</I></SPAN> columns follows to indicate the <SPAN CLASS="MATH">2<I>size</I> <TT>x</TT> 2<I>size</I></SPAN> places respectively.<P>``." means the place is empty, otherwise there is a diamond. A normal diamond is indicated by ``#". The two diamonds to be connected are indicated by ``S" and ``E". We assure there exactly one ``S" and ``E". The total number of diamonds is no more than <SPAN CLASS="MATH">400</SPAN>.<P>The last case is followed by a line containing only a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each case, output ``<TT>Yes</TT>" (quotes for clarity) if the valid broken line between the two diamonds exists or output ``<TT>No</TT>" (quotes for clarity) otherwise. Please output in the following format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
S..#
###.
###E
###.
2
S..#
####
###E
###.
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1: Yes
Case 2: No
</PRE><P>
______________________________________________________
3664||||||false||||||
<P>A competition was just over. It had <SPAN CLASS="MATH">3</SPAN> problems and <SPAN CLASS="MATH"><I>n</I></SPAN> players. Each player had an ID number from <SPAN CLASS="MATH">1</SPAN> to <SPAN CLASS="MATH"><I>n</I></SPAN>. The final rank was decided by the total score of the <SPAN CLASS="MATH">3</SPAN> problems. The higher the total score was, the higher a player ranked (the smaller the rank number). If two players got the same total score, the one with the smaller ID number got a higher rank. We've known for each problem, how much score each player might get if he din't solve totally wrong (if solved totally wrong, the player got zero in the problem). However, we don't know whether a player did get score in a problem. For a predicted final rank, you need to judge if the rank is possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several cases. For each case, the first line is an integer <SPAN CLASS="MATH"><I>n</I></SPAN>, ( <SPAN CLASS="MATH"><I>n</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3664img1.png ALT="$ \leq$"> 16384</SPAN>) to indicate the number of players, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines, the <SPAN CLASS="MATH"><I>i</I><SUP>th</SUP></SPAN> of which contains three real numbers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>, <SPAN CLASS="MATH"><I>c</I></SPAN> (<!-- MATH
 $0 \leq a, b, c < 1000$
 --> <SPAN CLASS="MATH">0 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3664img1.png ALT="$ \leq$"> <I>a</I>, <I>b</I>, <I>c</I> &lt; 1000</SPAN>. <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN> have <SPAN CLASS="MATH">2</SPAN> decimal places at most.) to respectively indicate the score of each problem Player <SPAN CLASS="MATH"><I>i</I></SPAN> might get if he didn't solve totally wrong. Another line containing <SPAN CLASS="MATH"><I>n</I></SPAN> integers follows to indicate the player ID number in the order from rank <SPAN CLASS="MATH">1<SUP>st</SUP></SPAN> to rank <SPAN CLASS="MATH"><I>n</I><SUP>th</SUP></SPAN>.<P>The last case is followed by a line containing only a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each case, if the rank is possible, output the highest possible total score for the player with the lowest rank (calculate to <SPAN CLASS="MATH">2</SPAN> decimal places), otherwise output ``<TT>No solution</TT>" (quotes for clarity).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
100 200 300
100 200 300
100 200 300
1 2 3
3
100 200 300
100 200 300
100 200 300
3 2 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1: 600.00
Case 2: 400.00
</PRE><P><P><P><BR><B>Sample Explanation:</B><P><P><BR>Case 1:<P><P><BR><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Rank</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Player ID Number</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Problem 1's Score</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Problem 2's Score</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Problem 3's Score</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>200</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>300</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>200</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>300</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>200</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>300</TD></TR></TBODY></TABLE><P><P><BR>Case 2:<P><P><BR><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Rank</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Player ID Number</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Problem 1's Score</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Problem 2's Score</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Problem 3's Score</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>200</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>300</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0 (wrong)</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>200</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>300</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0 (wrong)</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>300</TD></TR></TBODY></TABLE><P>
______________________________________________________
3665||||||false||||||
<P>
XAR lab recently develops a new computer for data compression -
``XAR08".  Each time, XAR08 will get an integer sequence from input,
and output it after compression.

<P>
XAR08 is composed of several <SPAN CLASS="MATH">8</SPAN>-bit binary storage units. Each
storage unit can store an <SPAN CLASS="MATH">8</SPAN>-bit unsigned integer and support <SPAN CLASS="MATH">4</SPAN>
directives. A program in XAR08 is a directive sequence composed of
these <SPAN CLASS="MATH">4</SPAN> directives as follows:

<P>
<DL>
<DT><STRONG>X n</STRONG></DT>
<DD>the integer in each storage unit XOR <SPAN CLASS="MATH"><I>n</I></SPAN>, <!-- MATH
 $0 \leq n<256$
 -->
<SPAN CLASS="MATH">0 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3665img1.png
 ALT="$ \leq$"> <I>n</I> &lt; 256</SPAN>,

<P>
Equivalence: V=V&#94;n
  
</DD>
<DT><STRONG>A n</STRONG></DT>
<DD>add n to each storage unit and mod <SPAN CLASS="MATH">256</SPAN>, <!-- MATH
 $0 \leq n<256$
 -->
<SPAN CLASS="MATH">0 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3665img1.png
 ALT="$ \leq$"> <I>n</I> &lt; 256</SPAN>,

<P>
Equivalence: V=(V+n)%256
  
</DD>
<DT><STRONG>R n</STRONG></DT>
<DD>rotate each storage unit n-bit binary left, <!-- MATH
 $0 \leq n<8$
 -->
<SPAN CLASS="MATH">0 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3665img1.png
 ALT="$ \leq$"> <I>n</I> &lt; 8</SPAN>,

<P>
Equivalence: V=(((V&#187;(8-n))|(V&#171;n))&amp;0xFF)
  
</DD>
<DT><STRONG>E n</STRONG></DT>
<DD>the program ends, <!-- MATH
 $0 \leq n<256$
 -->
<SPAN CLASS="MATH">0 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3665img1.png
 ALT="$ \leq$"> <I>n</I> &lt; 256</SPAN>, ignore the value of <SPAN CLASS="MATH"><I>n</I></SPAN>.
  Every program should end with this directive.
</DD>
</DL>

<P>
Each time, XAR08 gets an integer sequence with the length of <SPAN CLASS="MATH"><I>N</I></SPAN>
from input. These <SPAN CLASS="MATH"><I>N</I></SPAN> integers will be stored in the first <SPAN CLASS="MATH"><I>N</I></SPAN>
storage units in order (The number of storage units is enough).
After compression, the value in these <SPAN CLASS="MATH"><I>N</I></SPAN> storage units will be sent
to output in the same order.

<P>
XAR08's data compression operation is based on a transformation <SPAN CLASS="MATH"><I>f</I></SPAN>:
Transform the input sequence (all elements are different) <!-- MATH
 $D=(d_0,
d_1, \ldots d_{n-1})$
 -->
<SPAN CLASS="MATH"><I>D</I> = (<I>d</I><SUB>0</SUB>, <I>d</I><SUB>1</SUB>,...<I>d</I><SUB>n-1</SUB>)</SPAN> to the sequence <!-- MATH
 $(0, 1, \ldots, n-1)$
 -->
<SPAN CLASS="MATH">(0, 1,..., <I>n</I> - 1)</SPAN>, i.e.
<!-- MATH
 $f(d_i)=i (0 \leq i < n)$
 -->
<SPAN CLASS="MATH"><I>f</I> (<I>d</I><SUB>i</SUB>) = <I>i</I>(0 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3665img1.png
 ALT="$ \leq$"> <I>i</I> &lt; <I>n</I>)</SPAN>.

<P>
Your task is, for each input sequence, write an XAR08 program
composed of the above four directives to implement the
transformation <SPAN CLASS="MATH"><I>f</I></SPAN>. XAR08 is still in research stage, so it can only
execute a program with no more than <SPAN CLASS="MATH">40, 000</SPAN> directives.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input contains several cases. The first line in each case contains
an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $n \leq 128$
 -->
<SPAN CLASS="MATH"><I>n</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3665img1.png
 ALT="$ \leq$"> 128</SPAN>), which is the length of sequence <SPAN CLASS="MATH"><I>D</I></SPAN>,
followed by a line of <SPAN CLASS="MATH"><I>n</I></SPAN> different integers, <!-- MATH
 $d_0, d_1, \ldots,
d_{n-1}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>0</SUB>, <I>d</I><SUB>1</SUB>,..., <I>d</I><SUB>n-1</SUB></SPAN>, <!-- MATH
 $0 \leq d_i < 128$
 -->
<SPAN CLASS="MATH">0 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3665img1.png
 ALT="$ \leq$"> <I>d</I><SUB>i</SUB> &lt; 128</SPAN>.

<P>
The last case is followed by a line containing a zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, the first line outputs ``<TT>Case <SPAN CLASS="MATH">?</SPAN>:</TT>". If exists a XAR08
program composed of no more than <SPAN CLASS="MATH">40, 000</SPAN> directives, output the
program from the second line. Otherwise output ``<TT>Impossible!</TT>"
(quotes for clarity) in the second line.

<P>
Don't print any extra spaces or blank lines.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
123
3
2 1 0
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1:
X 123
E 0
Case 2:
X 3
A 255
E 0
</PRE> 

<P>

______________________________________________________
3666||||||false||||||
<P>
Bob is a graph theory lover. He likes to research all kinds of
graphs. Recently, Bob is researching on a special graph. In this
graph, we can't find out four different vertexes <SPAN CLASS="MATH"><I>v</I><SUB>a</SUB></SPAN>, <SPAN CLASS="MATH"><I>v</I><SUB>b</SUB></SPAN>,
<SPAN CLASS="MATH"><I>v</I><SUB>c</SUB></SPAN>, <SPAN CLASS="MATH"><I>v</I><SUB>d</SUB></SPAN>, such that there are exactly three edges: <SPAN CLASS="MATH"><I>v</I><SUB>a</SUB> - <I>v</I><SUB>b</SUB></SPAN>,
<SPAN CLASS="MATH"><I>v</I><SUB>b</SUB> - <I>v</I><SUB>c</SUB></SPAN>, <SPAN CLASS="MATH"><I>v</I><SUB>c</SUB> - <I>v</I><SUB>d</SUB></SPAN> connected between them. Bob names such graph as
SpecialG.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3666.eps}$
 -->
<IMG
 WIDTH="500" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3666img1.png
 ALT="\epsfbox{p3666.eps}">
</DIV>

<P>
You are given a task by Bob: for a given simple graph <SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN>,
determine if it is a SpecialG.

<P>
Note: A simple graph is an unweighted, undirected graph containing
no self-loops or multiple edges.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input contains several cases. Each case describes a graph which
needs determination.

<P>
Each case begins with integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>m</I></SPAN>, <!-- MATH
 $1 \leq n \leq 10000$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3666img1.png
 ALT="$ \leq$"> <I>n</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3666img1.png
 ALT="$ \leq$"> 10000</SPAN>,
<!-- MATH
 $1 \leq m \leq 100000$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3666img1.png
 ALT="$ \leq$"> <I>m</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3666img1.png
 ALT="$ \leq$"> 100000</SPAN>, indicating the number of vertexes and edges
in the graph respectively. Vertexes are numbered <SPAN CLASS="MATH">1</SPAN> to <SPAN CLASS="MATH"><I>n</I></SPAN>.

<P>
Then for the <SPAN CLASS="MATH"><I>m</I></SPAN> lines, each line contains two integers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN>,
which means there is an edge between vertex <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>. <SPAN CLASS="MATH"><I>a</I> <IMG
 WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3666img1.png
 ALT="$ \neq$"> <I>b</I></SPAN>,
<!-- MATH
 $1 \leq a, b \leq n$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3666img1.png
 ALT="$ \leq$"> <I>a</I>, <I>b</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3666img1.png
 ALT="$ \leq$"> <I>n</I></SPAN>.

<P>
The last case is followed by a line containing two zeros.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, output whether the graph is a SpecialG in the
following format.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5 6
1 2
1 3
2 3
2 4
2 5
3 5
5 4
1 2
2 3
3 4
4 5
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1: YES
Case 2: NO
</PRE> 

<P>

______________________________________________________
3667||||||false||||||
<P>Xiaoming wants to make a special ruler, which can directly measure several given lengths. Xiaoming hopes to find a way, making the scale on ruler as few as possible, while for a given length, there exists two scales on ruler and the distance between the two scales is equal to the given length. For scales as few as possible, we also hope the length of ruler as short as possible to save the material cost.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input contains several cases. Each case has two lines. The first line is an integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3667img1.png ALT="$ \leq$"> <I>n</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3667img1.png ALT="$ \leq$"> 50</SPAN>) to specify how many given lengths need to measure. The second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> integers <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>, <I>d</I><SUB>2</SUB>,...<I>d</I><SUB>n</SUB></SPAN>, indicating the length values respectively ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3667img1.png ALT="$ \leq$"> <I>d</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3667img1.png ALT="$ \leq$"> 10<SUP>6</SUP>, <I>i</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3667img1.png ALT="$ \in$"> [1, <I>n</I>]</SPAN>).<P>The last case is followed by a line containing a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each case, output three lines. The first line contains the case number. The second line is an integer <SPAN CLASS="MATH"><I>M</I></SPAN> to specify the minimized number of scales needed. The third line is <SPAN CLASS="MATH"><I>M</I></SPAN> integers to specify the distance between the leftmost scales and the other <SPAN CLASS="MATH"><I>M</I></SPAN> scales respectively.<P><P><BR><B>Note:</B> output scales in ascending order, the first number is always <SPAN CLASS="MATH">0</SPAN>. You can assume that <SPAN CLASS="MATH"><I>M</I></SPAN> won't exceed <SPAN CLASS="MATH">7</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
6
5 15 20 25 35 40
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case 1:
4
0 5 25 40
</PRE><P>
______________________________________________________
3668||||||false||||||
<P>The funny stone game is coming. There are <SPAN CLASS="MATH"><I>n</I></SPAN> piles of stones, numbered with <SPAN CLASS="MATH">0, 1, 2,..., <I>n</I> - 1</SPAN>. Two persons pick stones in turn. In every turn, each person selects three piles of stones numbered <SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>j</I></SPAN>, <SPAN CLASS="MATH"><I>k</I></SPAN> (<SPAN CLASS="MATH"><I>i</I> &lt; <I>j</I></SPAN>, <SPAN CLASS="MATH"><I>j</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3668img1.png ALT="$ \leq$"> <I>k</I></SPAN> and at least one stone left in pile <SPAN CLASS="MATH"><I>i</I></SPAN>). Then, the person gets one stone out of pile <SPAN CLASS="MATH"><I>i</I></SPAN>, and put one stone into pile <SPAN CLASS="MATH"><I>j</I></SPAN> and pile <SPAN CLASS="MATH"><I>k</I></SPAN> respectively. (Note: if <SPAN CLASS="MATH"><I>j</I> = <I>k</I></SPAN>, it will be the same as putting two stones into pile <SPAN CLASS="MATH"><I>j</I></SPAN>). One will fail if he can't pick stones according to the rule.<P>David is the player who first picks stones and he hopes to win the game. Can you write a program to help him?<P>The number of piles, <SPAN CLASS="MATH"><I>n</I></SPAN>, does not exceed <SPAN CLASS="MATH">23</SPAN>. The number of stones in each pile does not exceed <SPAN CLASS="MATH">1000</SPAN>. Suppose the opponent player is very smart and he will follow the optimized strategy to pick stones.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input contains several cases. Each case has two lines. The first line contains a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3668img1.png ALT="$ \leq$"> <I>n</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3668img1.png ALT="$ \leq$"> 23</SPAN>) indicating the number of piles of stones. The second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> non-negative integers separated by blanks, <SPAN CLASS="MATH"><I>S</I><SUB>0</SUB>,...<I>S</I><SUB>n-1</SUB></SPAN> ( <SPAN CLASS="MATH">0 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3668img1.png ALT="$ \leq$"> <I>S</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3668img1.png ALT="$ \leq$"> 1000</SPAN>), indicating the number of stones in pile <SPAN CLASS="MATH">0</SPAN> to pile <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> respectively.<P>The last case is followed by a line containing a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each case, output a line in the format ``<TT>Game <SPAN CLASS="MATH"><I>t</I></SPAN>: <SPAN CLASS="MATH"><I>i</I></SPAN> <SPAN CLASS="MATH"><I>j</I></SPAN> <SPAN CLASS="MATH"><I>k</I></SPAN></TT>". <SPAN CLASS="MATH"><I>t</I></SPAN> is the case number. <SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>j</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> indicates which three piles David shall select at the first step if he wants to win. If there are multiple groups of <SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>j</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN>, output the group with the minimized lexicographic order. If there are no strategies to win the game, <SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>j</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> are equal to <SPAN CLASS="MATH">-1</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
1 0 1 100
3
1 0 5
2
2 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Game 1: 0 2 3
Game 2: 0 1 1
Game 3: -1 -1 -1

______________________________________________________
3669||||||false||||||
<P>Let's consider a string <SPAN CLASS="MATH"><I>s</I></SPAN> of length <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(0< n <10 000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I> &lt; 10000)</SPAN> containing only characters from <TT>a</TT> to <TT>z</TT>. We define a cut <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <!-- MATH
 $(0 < i < n)$
 --><SPAN CLASS="MATH">(0 &lt; <I>i</I> &lt; <I>n</I>)</SPAN> is an action splitting the string s into 2 substrings <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> so that <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> consists of first <SPAN CLASS="MATH"><I>i</I></SPAN> characters of <SPAN CLASS="MATH"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> consists of remaining characters from <SPAN CLASS="MATH"><I>s</I></SPAN>. Each cut is associated with a cost which equals to the total number of characters consisted in either <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> or <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> but not in both. For example, let <SPAN CLASS="MATH"><I>s</I> =</SPAN> `<TT>abcbacbd</TT>', the cut <SPAN CLASS="MATH"><I>c</I><SUB>5</SUB></SPAN> will break <SPAN CLASS="MATH"><I>s</I></SPAN> into <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB> =</SPAN> `<TT>abcba</TT>' and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB> =</SPAN> `<TT>cbd</TT>' with the cost of 2.<P>The original string can be cut into <SPAN CLASS="MATH"><I>k</I> + 1</SPAN> substrings after applying <SPAN CLASS="MATH"><I>k</I></SPAN> cuts sequentially to the string and its subsequent substrings. In order to simply describe these <SPAN CLASS="MATH"><I>k</I></SPAN> cuts, we specify the position of the cuts with regard to the original string.<P>Let's consider an example where we sequentially apply 3 cuts at positions 5, 3 and 6 to the string <SPAN CLASS="MATH"><I>s</I> =</SPAN> `<TT>ababccd</TT>'. After the first cut at position 5, we have two substrings <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB> =</SPAN> `<TT>ababc</TT>' and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB> =</SPAN> `<TT>cd</TT>' with the cost of 3. The second cut at position 3 breaks <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> into two substrings <SPAN CLASS="MATH"><I>s</I><SUB>11</SUB> =</SPAN> `<TT>aba</TT>' and <SPAN CLASS="MATH"><I>s</I><SUB>12</SUB> =</SPAN> `<TT>bc</TT>' with the cost of 2. The last cut at position 6 breaks <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> into two substrings <SPAN CLASS="MATH"><I>s</I><SUB>21</SUB> =</SPAN> `<TT>c</TT>' and <SPAN CLASS="MATH"><I>s</I><SUB>22</SUB> =</SPAN> `<TT>d</TT>' with the cost of 2. The total cost for the 3 cuts is 3+2+2=7. Given a string and their cuts, your task is to write a program to compute the total cost for the cut.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, the first line contains the integer number <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3669img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3669img1.png ALT="$ \le$">1000)</SPAN>. The second line contains <SPAN CLASS="MATH"><I>k</I></SPAN> positive integer numbers describing the position of <SPAN CLASS="MATH"><I>k</I></SPAN> cuts. The third line contains the string which will be cut.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write in one line the total cost of the cuts.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3 
5 3 6 
ababccd 
2 
4 2 
ababcd
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 
4
</PRE><P>
______________________________________________________
3670||||||false||||||
<P>A robot has to patrol around a rectangular area which is in a form of <SPAN CLASS="MATH"><I>m</I> <TT>x</TT> <I>n</I></SPAN> grid (<SPAN CLASS="MATH"><I>m</I></SPAN> rows and <SPAN CLASS="MATH"><I>n</I></SPAN> columns). The rows are labeled from 1 to <SPAN CLASS="MATH"><I>m</I></SPAN>. The columns are labeled from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. A cell <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> denotes the cell in row <SPAN CLASS="MATH"><I>i</I></SPAN> and column <SPAN CLASS="MATH"><I>j</I></SPAN> in the grid. At each step, the robot can only move from one cell to an adjacent cell, i.e. from <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> to <SPAN CLASS="MATH">(<I>x</I> + 1, <I>y</I>)</SPAN>, <SPAN CLASS="MATH">(<I>x</I>, <I>y</I> + 1)</SPAN>, <SPAN CLASS="MATH">(<I>x</I> - 1, <I>y</I>)</SPAN> or <SPAN CLASS="MATH">(<I>x</I>, <I>y</I> - 1)</SPAN>. Some of the cells in the grid contain obstacles. In order to move to a cell containing obstacle, the robot has to switch to turbo mode. Therefore, the robot cannot move continuously to more than <SPAN CLASS="MATH"><I>k</I></SPAN> cells containing obstacles.<P>Your task is to write a program to find the shortest path (with the minimum number of cells) from cell (1, 1) to cell <SPAN CLASS="MATH">(<I>m</I>, <I>n</I>)</SPAN>. It is assumed that both these cells do not contain obstacles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, the first line contains two positive integer numbers <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> separated by space <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3670img1.png ALT="$ \le$"><I>m</I>, <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3670img1.png ALT="$ \le$">20)</SPAN>. The second line contains an integer number <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3670img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3670img1.png ALT="$ \le$">20)</SPAN>. The <SPAN CLASS="MATH"><I>i</I><SUP>th</SUP></SPAN> line of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines contains <SPAN CLASS="MATH"><I>n</I></SPAN> integer <SPAN CLASS="MATH"><I>a</I><SUB>ij</SUB></SPAN> separated by space <SPAN CLASS="MATH">(<I>i</I> = 1, 2,..., <I>m</I>;<I>j</I> = 1, 2,..., <I>n</I>)</SPAN>. The value of <SPAN CLASS="MATH"><I>a</I><SUB>ij</SUB></SPAN> is <TT>1</TT> if there is an obstacle on the cell <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN>, and is <TT>0</TT> otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, if there exists a way for the robot to reach the cell <SPAN CLASS="MATH">(<I>m</I>, <I>n</I>)</SPAN>, write in one line the integer number <SPAN CLASS="MATH"><I>s</I></SPAN>, which is the number of moves the robot has to make; <TT>-1</TT> otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
2 5 
0 
0 1 0 0 0 
0 0 0 1 0 
4 6 
1 
0 1 1 0 0 0
0 0 1 0 1 1
0 1 1 1 1 0
0 1 1 1 0 0
2 2 
0 
0 1 
1 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 
10 
-1
</PRE><P>
______________________________________________________
3671||||||false||||||
<P>There are many tasks which need to be done in order to construct a building. In order to perform these tasks, there should be a reasonable schedule. There might be relations between tasks. The difficulty we meet in creating a schedule is that the schedule has to satisfy all given relations among the given tasks.<P>Given a set of tasks and their relations, your task is to write a program to check whether it is possible to create a schedule to perform the tasks.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, the first line contains two integer numbers <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3671img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3671img1.png ALT="$ \le$">500)</SPAN>, and <SPAN CLASS="MATH"><I>k</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3671img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3671img1.png ALT="$ \le$">20000)</SPAN> separated by spaces, where <SPAN CLASS="MATH"><I>n</I></SPAN> denotes the total number of tasks, and <SPAN CLASS="MATH"><I>k</I></SPAN> denotes the total number of relations. The next <SPAN CLASS="MATH"><I>k</I></SPAN> following lines describe <SPAN CLASS="MATH"><I>k</I></SPAN> relations among the tasks. Let <SPAN CLASS="MATH"><I>t</I><SUB>j</SUB></SPAN> be a starting time of the task <SPAN CLASS="MATH"><I>j</I></SPAN>, <SPAN CLASS="MATH"><I>j</I> = 1, 2,..., <I>n</I></SPAN>. Each relation is in one of the two forms:<P><UL><LI><SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I>&nbsp;<I>v</I></SPAN> means task <SPAN CLASS="MATH"><I>x</I></SPAN> must not start after task <SPAN CLASS="MATH"><I>y</I></SPAN> starts <SPAN CLASS="MATH"><I>v</I></SPAN> days, i.e. <SPAN CLASS="MATH"><I>t</I><SUB>x</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3671img1.png ALT="$ \le$"><I>t</I><SUB>y</SUB> + <I>v</I></SPAN>, </LI><LI><SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I>&nbsp; - <I>v</I></SPAN> means task <SPAN CLASS="MATH"><I>x</I></SPAN> must not start before task <SPAN CLASS="MATH"><I>y</I></SPAN> starts <SPAN CLASS="MATH"><I>v</I></SPAN> days, i.e. <SPAN CLASS="MATH"><I>t</I><SUB>x</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3671img1.png ALT="$ \ge$"><I>t</I><SUB>y</SUB> + <I>v</I></SPAN>, where <SPAN CLASS="MATH"><I>v</I></SPAN> is a positive integer not greater than 10 000. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write in one line ``<TT>YES</TT>" if it is possible to construct a schedule to satisfy all the given relations among the given tasks, ``<TT>NO</TT>" otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 2 
1 2 -2 
1 2 1 
2 1 
1 2 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
NO 
YES
</PRE><P>
______________________________________________________
3672||||||false||||||
<P>Reconstructing the evolutionary relationships among species is one of major subjects in biology. Typically, each species is presented by a sequence over four nucleotide types: A, C, G, and T. A nucleotide mutation is said to be happened at position <SPAN CLASS="MATH"><I>i</I></SPAN> between two sequences <SPAN CLASS="MATH"><I>X</I> = (<I>x</I><SUB>1</SUB>,..., <I>x</I><SUB>l</SUB>)</SPAN> and <SPAN CLASS="MATH"><I>Y</I> = (<I>y</I><SUB>1</SUB>,..., <I>y</I><SUB>l</SUB>)</SPAN> if <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3672img1.png ALT="$ \ne$"><I>y</I><SUB>i</SUB></SPAN>. The distance between two sequences <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> is calculated as the total nucleotide mutations between them.<P>There are <SPAN CLASS="MATH"><I>n</I></SPAN> contemporary species, which are labeled from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>. The evolutionary relationships among species are depicted by a binary rooted tree where <SPAN CLASS="MATH"><I>n</I></SPAN> leaves represent <SPAN CLASS="MATH"><I>n</I></SPAN> contemporary species, internal nodes represent ancestor species, and branch lengths represent distances between species (see figure below). This tree can be represented in text form using brackets as ((0,1),((3,4),2)).<P><DIV ALIGN="CENTER"><IMG WIDTH="921" HEIGHT="656" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3672img1.png ALT="\epsfbox{p3672.eps}"></DIV><P><DIV ALIGN="CENTER">An evolutionary tree of five species with the length of the tree of 5</DIV><P>Since nucleotide sequences are not available for ancestor species, our task is to determine one nucleotide sequence for each ancestor species such that the tree length (total branch lengths) is minimized.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, the first line containing two integer numbers separated by space <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3672img1.png ALT="$ \le$">10, <I>l</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3672img1.png ALT="$ \le$">100)</SPAN> indicating the number of contemporary species and the length of nucleotide sequences, respectively. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line of the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains the nucleotide sequence of the contemporary species labeled <SPAN CLASS="MATH"><I>i</I> - 1</SPAN>. The last line contains the text representation of the tree topology.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, write in one line an integer number indicating the minimum length of the tree.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 3 
AGG 
CGT 
(0,1) 
5 5 
ACGTG 
ACATG 
CTATG 
ATATG 
GTATT 
((0,1),(2,(3,4)))
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
5
</PRE><P>
______________________________________________________
3673||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>M</I></SPAN> be a grid of <SPAN CLASS="MATH"><I>n</I></SPAN> rows and <SPAN CLASS="MATH"><I>n</I></SPAN> columns. The rows are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> and the columns are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. A cell <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> denotes the cell in row <SPAN CLASS="MATH"><I>i</I></SPAN> and column <SPAN CLASS="MATH"><I>j</I></SPAN> in the grid. Each cell is colored in black or white. Let <SPAN CLASS="MATH"><I>C</I><SUB>ij</SUB></SPAN> denote the color of the cell <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN>. All cells of the form <SPAN CLASS="MATH">(<I>i</I>, <I>i</I>)</SPAN> for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3673img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3673img1.png ALT="$ \le$"><I>n</I></SPAN> are called diagonal cells.<P><EM>Swapping</EM> rows <SPAN CLASS="MATH"><I>i</I></SPAN> and <SPAN CLASS="MATH"><I>j</I></SPAN> of the grid <SPAN CLASS="MATH"><I>M</I></SPAN> denotes the following action: we swap the values of <SPAN CLASS="MATH"><I>C</I><SUB>ik</SUB></SPAN> and <SPAN CLASS="MATH"><I>C</I><SUB>jk</SUB></SPAN> for <SPAN CLASS="MATH"><I>k</I> = 1, 2,..., <I>n</I></SPAN>. Swapping two columns is defined analogously.<P>We say that <SPAN CLASS="MATH"><I>M</I></SPAN> is <EM>white-colorable</EM> if it is possible to swap some of the pairs of rows and some of the pairs of columns (in any sequence) so that, after all the swappings, all the diagonal cells of <SPAN CLASS="MATH"><I>M</I></SPAN> are white. For example, Fig 1 shows a white-colorable grid.<P><DIV ALIGN="CENTER"><IMG WIDTH="966" HEIGHT="270" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3673img1.png ALT="\epsfbox{p3673.eps}"></DIV><P><DIV ALIGN="CENTER">Fig. 1. <SPAN CLASS="MATH"><I>M</I></SPAN> is white-colorable</DIV><P>Your task is to write a program that determines whether given grid <SPAN CLASS="MATH"><I>M</I></SPAN> is white-colorable.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets. 

<P>
For each data set, the first line contains a single positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(n \le 1000)$
 -->
<SPAN CLASS="MATH">(<I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3673img1.png
 ALT="$ \le$">1000)</SPAN> â the size of the grid. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th line of the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains <SPAN CLASS="MATH"><I>n</I></SPAN> character <SPAN CLASS="MATH"><I>C</I><SUB>ij</SUB></SPAN> <!-- MATH
 $(i = 1, 2, \ldots, n; j = 1, 2, \ldots, n)$
 -->
<SPAN CLASS="MATH">(<I>i</I> = 1, 2,..., <I>n</I>;<I>j</I> = 1, 2,..., <I>n</I>)</SPAN> specifying color pattern of the grid. Character <SPAN CLASS="MATH"><I>C</I><SUB>ij</SUB></SPAN> is B or W indicating that the color of cell <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> is black or white respectively.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, write in one line `<TT>YES</TT>' if given grid is white-colorable or `<TT>NO</TT>' otherwise.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
3 
WWW 
WBB 
WBB 
3 
BWB 
BWW 
WWB
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
NO 
YES
</PRE> 

<P>

______________________________________________________
3674||||||false||||||
<P>
There are <SPAN CLASS="MATH"><I>n</I></SPAN> major cities in the world. These cities are labeled from 0 to <SPAN CLASS="MATH"><I>n</I>â1</SPAN>, which in order to form a convex polygon on a single plane (see the figure below). Each year, the ACM-ICPC Committee has to select one city from these cities to host the ACM-ICPC world final. The selection process is described as follows: 

<P>
<DL COMPACT>
<DT>-</DT>
<DD>At the first phase, they create a shortlist. In order to do so, with a starting city <SPAN CLASS="MATH"><I>s</I></SPAN> and a selection step <SPAN CLASS="MATH"><I>d</I></SPAN>, they put all the cities with label <!-- MATH
 $s + i \ast d$
 -->
<SPAN CLASS="MATH"><I>s</I> + <I>i</I> <TT>*</TT> <I>d</I></SPAN> into the shortlist for all <SPAN CLASS="MATH"><I>i</I></SPAN> such that <SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$"><I>i</I></SPAN> and <!-- MATH
 $s + i \ast d < n$
 -->
<SPAN CLASS="MATH"><I>s</I> + <I>i</I> <TT>*</TT> <I>d</I> &lt; <I>n</I></SPAN>. 
</DD>
<DT>-</DT>
<DD>At the second phase, one city will be selected from the shortlist to organize the ACM-ICPC world final. At that year, they might choose the city which is the most to the North (maximal <SPAN CLASS="MATH"><I>y</I></SPAN> coordinate), to the South (minimum <SPAN CLASS="MATH"><I>y</I></SPAN> coordinate), to the East (maximum <SPAN CLASS="MATH"><I>x</I></SPAN> coordinate) or to the West X (minimum <SPAN CLASS="MATH"><I>x</I></SPAN> coordinate). It is assumed that there are no two cities having the same <SPAN CLASS="MATH"><I>x</I></SPAN>, or <SPAN CLASS="MATH"><I>y</I></SPAN> coordinate. 
</DD>
</DL>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3674.eps}$
 -->
<IMG
 WIDTH="652" HEIGHT="575" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="\epsfbox{p3674.eps}">
</DIV>

<P>
There is a cost associated with each city to organize the ACM-ICPC world final. It is assumed that this cost does not change over years. Your task is to compute the total cost the ACM-ICPC Committee has to pay to organize the ACM-ICPC world finals for a given number of years.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets. 

<P>
For each data set, the first line contains the integer number <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(1 \le n \le 100 000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$">100000)</SPAN>. Each line of the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines describes one city, which contains three integer numbers <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, and <SPAN CLASS="MATH"><I>c</I></SPAN> separated by space. The pair <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> is a 2-D coordinate specifying the location of the city <!-- MATH
 $(-200 000 \le x, y \le 200 000)$
 -->
<SPAN CLASS="MATH">(- 200000<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$">200000)</SPAN>. <SPAN CLASS="MATH"><I>c</I></SPAN> is the associated cost to organize the ACM-ICPC world final in that city <!-- MATH
 $(1 \le c \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$"><I>c</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$">1000)</SPAN>. The next line contains an integer number <SPAN CLASS="MATH"><I>m</I></SPAN>, which is the number of years the ACM-ICPC Committee want to compute the cost to organize the ACM-ICPC world finals <!-- MATH
 $(1 \le m \le 10 000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$">10000)</SPAN>. Each line of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines contains three integer numbers <SPAN CLASS="MATH"><I>s</I></SPAN>, <SPAN CLASS="MATH"><I>d</I></SPAN> <!-- MATH
 $(0 \le s < n; 1 \le d)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$"><I>s</I> &lt; <I>n</I>;1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3674img1.png
 ALT="$ \le$"><I>d</I> )</SPAN>, and <SPAN CLASS="MATH"><I>p</I></SPAN> separated by space. The value of <SPAN CLASS="MATH"><I>p</I></SPAN> can be <TT>0</TT>, <TT>1</TT>, <TT>2</TT> or <TT>3</TT> for selecting the city most to the North, the South, the East or the West respectively.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, write in one line the total cost for the ACM-ICPC Committee to organize the ACMICPC world finals.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
4 
-1 1 2 
0 4 3 
5 3 2 
1 -1 2 
2 
0 1 0 
0 2 1 
3 
0 0 2 
1 1 3 
2 10 2 
2 
1 1 1 
0 2 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
5
</PRE> 

<P>

______________________________________________________
3675||||||false||||||
<P>
Let's consider the 32 bit representation of all integers <SPAN CLASS="MATH"><I>i</I></SPAN> from <SPAN CLASS="MATH"><I>m</I></SPAN> up to <SPAN CLASS="MATH"><I>n</I></SPAN> inclusive <!-- MATH
 $(m \le i \le n; m \times n \ge 0, -2^{31} \le m < n \le 2^{31}-1)$
 -->
<SPAN CLASS="MATH">(<I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3675img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3675img1.png
 ALT="$ \le$"><I>n</I>;<I>m</I> <TT>x</TT> <I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3675img1.png
 ALT="$ \ge$">0, -2<SUP>31</SUP><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3675img1.png
 ALT="$ \le$"><I>m</I> &lt; <I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3675img1.png
 ALT="$ \le$">2<SUP>31</SUP> - 1)</SPAN>. Note that a negative number is represented in 32 bit Additional Code. That is the 32 bit sequence, the binary sum of which and the 32 bit representation of the corresponding positive number is <SPAN CLASS="MATH">2<SUP>32</SUP></SPAN> (1 0000 0000 0000 0000 0000 0000 0000 0000 in binary). 

<P>
For example, the 32 bit representation of 6 is 

<P>

<P>
<BR>
0000 0000 0000 0000 0000 0000 0000 0110 

<P>

<P>
<BR>
and the 32 bit representation of -6 is 

<P>

<P>
<BR>
1111 1111 1111 1111 1111 1111 1111 1010 

<P>

<P>
<BR>
and 

<P>

<P>
<BR>
0000 0000 0000 0000 0000 0000 0000 0110  <SPAN CLASS="MATH">&nbsp; &nbsp;</SPAN> (6)

<P>

+ 

<P>
1111 1111 1111 1111 1111 1111 1111 1010  <SPAN CLASS="MATH">&nbsp; &nbsp;</SPAN> (-6)

<P>
-----------------------------

<P>

= 1 0000 0000 0000 0000 0000 0000 0000 0000   <SPAN CLASS="MATH">&nbsp; &nbsp;</SPAN> (<SPAN CLASS="MATH">2<SUP>32</SUP></SPAN>) 

<P>

<P>
<BR>
Let's sort the 32 bit representations of these numbers in increasing order of the number of bit 1. If two 32 bit representations that have the same number of bit 1, they are sorted in lexicographical order. 

<P>
For example, with <SPAN CLASS="MATH"><I>m</I> = 0</SPAN> and <SPAN CLASS="MATH"><I>n</I> = 5</SPAN>, the result of the sorting will be 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN  CLASS="textit">No.</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN  CLASS="textit">Decimal number</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <SPAN  CLASS="textit">Binary 32 bit representation</SPAN> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  0  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>              0000 0000 0000 0000 0000 0000 0000 0000 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  1   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>             0000 0000 0000 0000 0000 0000 0000 0001 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  2    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>            0000 0000 0000 0000 0000 0000 0000 0010 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  4     </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>           0000 0000 0000 0000 0000 0000 0000 0100 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  3      </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>          0000 0000 0000 0000 0000 0000 0000 0011 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  5       </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>         0000 0000 0000 0000 0000 0000 0000 0101 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
with <SPAN CLASS="MATH"><I>m</I> = - 5</SPAN> and <SPAN CLASS="MATH"><I>n</I> = - 2</SPAN>, the result of the sorting will be 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN  CLASS="textit">No.</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN  CLASS="textit">Decimal number</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <SPAN  CLASS="textit">Binary 32 bit representation</SPAN> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  -4   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      1111 1111 1111 1111 1111 1111 1111 1100 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  -5   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>      1111 1111 1111 1111 1111 1111 1111 1011 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  -3    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>     1111 1111 1111 1111 1111 1111 1111 1101 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  -2     </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    1111 1111 1111 1111 1111 1111 1111 1110 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Given <SPAN CLASS="MATH"><I>m</I>, <I>n</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> <!-- MATH
 $(1 \le k \le$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3675img1.png
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3675img1.png
 ALT="$ \le$"></SPAN> min<!-- MATH
 $\{n - m + 1,\ 2\ 147\ 473\ 547 \})$
 -->
<SPAN CLASS="MATH">{<I>n</I> - <I>m</I> + 1,&nbsp;2&nbsp;147&nbsp;473&nbsp;547})</SPAN>, your task is to write a program to find a number corresponding to <SPAN CLASS="MATH"><I>k</I></SPAN>-th representation in the sorted sequence.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets. 

<P>
For each data set, the only line contains 3 integers <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> separated by space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, write in one line the <SPAN CLASS="MATH"><I>k</I></SPAN>-th number of the sorted numbers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
0 5 3 
-5 -2 2
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
-5
</PRE> 

<P>

______________________________________________________
3676||||||false||||||
<P>A set of double-six dominoes with 28 tiles is the most popular size of dominoes set. In a double-six domino set, the numbers on the tiles range from 0 (or blank) to 6. In a double-six set, there are seven suits (0 or blank, 1, 2, 3, 4, 5, 6), each with seven members.<P><DIV ALIGN="CENTER"><IMG WIDTH="639" HEIGHT="345" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3676a.jpg ALT="\epsfbox{p3676a.eps}"></DIV><P>The game can be started with any tile. Until the first double played, the game layout has only 2 ``end'' opens. After the first double played (which is called <SPAN CLASS="textit">spinner</SPAN>), the game can be played on two additional edges (the game layout has 4 ``open'' ends now). All subsequent doubles can only played as other tiles except that its value is counted twice when calculating the score of the game layout.<P>In one play turn, a tile can be added to an ``open'' end if the number of points in the added head of the tile matches the number of points in this ``open'' end.<P>The Domino game usually is played by at least 2 persons. Let's consider a game played by just a single person. The object of the game is to create as much as possible situations where the open ends of the game layout added up to a multiple of five (5, 10, 15, 20, etc.). The score at each play turn is the total sum of open ends when they added up to a multiple of five. This score is added up to the current score of the game.<P>In this case, the game is quite simple. At first, a sequence of 28 tiles in random order is given. Then the tiles are taken from the sequence one by one. For each tile, the player might add it into the game layout or leave it out.<P>Your task is to write a program to play the game in order to obtain the highest total score.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20.<P>The following lines describe the data sets. For each data set, a single line contains 56 numbers separated by space represents 28 tiles of the game, 2 consecutive numbers for each tile.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, write in one line the highest score that can be obtained.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
01362511160324054446061523450056043355340266123522131426 
15332224061135023613550403254544261405460001345666161223
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
150 
145
</PRE><P><P><P><BR><SPAN CLASS="textbf">Notes:</SPAN><P>Examples of how to calculate the score at each play turn:<P><DIV ALIGN="CENTER"><IMG WIDTH="961" HEIGHT="1123" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3676a.jpg ALT="\epsfbox{p3676b.eps}"></DIV><P>Examples of how to calculate the score at each play turn:<P><DIV ALIGN="CENTER"><IMG WIDTH="976" HEIGHT="918" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3676a.jpg ALT="\epsfbox{p3676c.eps}"></DIV><P>The game layout to obtain the highest score for the first data set in the sample input<P><DIV ALIGN="CENTER"><IMG WIDTH="987" HEIGHT="459" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3676a.jpg ALT="\epsfbox{p3676d.eps}"></DIV><P>The game layout to obtain the highest score for the second data set in the sample input<P><DIV ALIGN="CENTER"><IMG WIDTH="986" HEIGHT="479" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3676a.jpg ALT="\epsfbox{p3676e.eps}"> 
______________________________________________________
3677||||||false||||||

<P>
We have a paragraph of text to print. A text is a sequence of words and each word consists
of characters. When we print a text, we print the words from the text one at a time, according
to the order the words appear in the text. The words are printed in lines, and we can print at
most <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> characters in a line. If there is space available, we could print more than one word in a
line. However, when we print more than one word in a line, we need to place exactly one space
character between two adjacent words in a line. For example, when we are given a text like the
following: 

<P>

<P>
<BR>
<PRE>
This is a text of fourteen words and the longest word has ten characters
</PRE> 

<P>

<P>
<BR>
Now we can print this text into lines of no more than 20 characters as the following.

<P>

<P>
<BR>
<PRE>
This is
a text of
fourteen words
and the longest
word has ten characters
</PRE> 

<P>

<P>
<BR>
However, when you print less than 20 characters in a line, you need to pay a penalty, which is
equal to the square of the dierence between 20 and the actual number of characters you printed
in that line. For example in the rst line we actually printed seven characters so the penalty is
<!-- MATH
 $(20 - 7)^{2} = 169$
 -->
<SPAN CLASS="MATH">(20 - 7)<SUP>2</SUP> = 169</SPAN>
<tex2html_verbatim_mark>. The total penalty is the sum of all penalties from all lines. Given the text and
the number of maximum number of characters allowed in a line, compute the minimum penalty
to print the text.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input is the number of test cases (<SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark>). The first line of a test case is the
maximum number of characters allowed in a line (<SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark>). The second line of a test case is the
number of words in the text (<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>). The following <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines are the length (in character) of each
word in the text. It is guaranteed that no word will have more than <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> characters, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>
is at most 10000, and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> is at most 100.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output has <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> lines. Each line has the minimum penalty one needs to pay in order to print
the text in that test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
20 
14 
4 
2 
1 
4 
2 
8 
5 
3 
3 
7 
4 
3 
3 
10 
30 
14 
4 
2 
1 
4 
2 
8 
5 
3 
3 
7 
4 
3 
3 
10
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
33 
146
</PRE> 

<P>

______________________________________________________
3678||||||false||||||

<P>
Mr. Macdonald is a farmer. He has a huge land to manage. To monitor the number of bugs
in his land, he asks help from the famous professor T. Professor T is an expert on computer
science. 

<P>
Professor T studies several efficient approach and suggests Mr. Macdonald to setup a wireless 
sensor system in his land. The system will be setup as follows:

<P>
In each predened location, one wireless sensor will be established. Since all sensors are
operated by batteries, the powers consumed by the sensors are determined by the eective com-
munication distance (ECD) between sensors. Mr. Macdonald is a nice old man. He prefers not
to trouble professor T much. Therefore, he decides that all sensors will be set in the same power
level. That is, all sensors will have the same eective communication distance.

<P>
The land is so huge that it is not possible to cover all spots by the sensors. However, each
sensor can broadcast the collected data to their neighbors as long as the neighbors are in its
eective communication distance. But the total number of sensors is relative small comparing
to the land. Mr. Macdonald needs to travel the whole land to collect the data from sensors
everyday. 

<P>
Mr. Macdonald is getting old. He hopes that the computer in his house can collect all data
from all sensors automatically. Again, he called professor T for help. This time, professor T
suggests Mr. Macdonald to setup a base station in his house. The house is right in the center
of the land.

<P>
Due to the limited budget, the number of receiver/transmitter Mr. Macdonald can aord
is limited and is relatively small comparing to the total number of sensors. It is impossible
to assign receiver/transmitter to every sensor. Therefore, sensors with no receiver/transmitter
need to send their data to the sensor with receiver/transmitter (directly or indirect) rst, After
that, the sensor with receiver/transmitter sends all data it receives from other sensors along with
the data it collects back to the base station. You may assume that the receiver/transmitter has
enough power such that it always can send data back to the base station.

<P>
Professor T promises to write the necessary software to make all sensors work together in
this way, but one important issue need to be studied. If all sensors are set at the maximum
power level, all sensors might be able to send their data back without troubles, but the battery
will be out-of-power soon. To save power, professor T need to decide the minimum power level
needed such that the battery can have longest operating time while all sensor data can be col-
lected by the base station.

<P>
Although professor T is good in programming, he is weak in algorithm design. Your goal
is to help professor T to write a program to determine the minimum power level needed to set
all sensors accordingly. To simplify our problem, please report the ECD corresponding to the
minimum power level. Please apply the ceiling function to your answer.

<P>
Here is an example:

<P>
Assume that the land is <!-- MATH
 $10 \times 10$
 -->
<SPAN CLASS="MATH">10&#215;10</SPAN>
<tex2html_verbatim_mark>. There are three sensors, located at (1,1), (2,1) and (8,7).
We also assume that there are 2 receiver/transmitters. In this example, the ECD of all sensors
need to be set at 1.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The first line contains the number of test cases <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le w \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3678img1.png
 ALT="$ \le$"><I>w</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3678img1.png
 ALT="$ \le$">10</SPAN>
<tex2html_verbatim_mark>.
Then the <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> test cases are
listed one by one. In each test case, the first line is a single integer, representing the number of
receiver/transmitters for that test case. After that, the test case consists of some lines with two
numbers each line:

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>X</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
Here two numbers are separated by a single blank, <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> is an integer, denoting the x-coordinate
of the sensor, and <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark> is also an integer, denoting the y-coordinate of the same sensor. Each test
case is ended by the following line: `<TT>-1</TT>'

<P>
Please note that the land is a rectangle with dimemsions <!-- MATH
 $100000 \times 100000$
 -->
<SPAN CLASS="MATH">100000&#215;100000</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the corresponding ECD.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
2 
1 1
2 1
8 7
-1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
</PRE> 

<P>

______________________________________________________
3679||||||false||||||
<P>For professional baseball team managers, it is an important task to decide the starting pitcher for each game. In the information era, massive data has been collected in professional sports. The manager knows the winning percentage of each pitcher against each team. Unfortunately, when playing against a certain team you cannot always pick the pitcher with the highest winning percentage against that team because there is a rule saying that after pitching a game the pitcher has to rest for at least four days. There are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> pitchers <SPAN CLASS="MATH">(5<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3679img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3679img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> opponent teams <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3679img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3679img1.png ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark>, and there are <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3679img1.png ALT="$ \le$"><I>g</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3679img1.png ALT="$ \le$">200)</SPAN> <tex2html_verbatim_mark> games in a season, and the season lasts for <SPAN CLASS="MATH"><I>g</I> + 10</SPAN> <tex2html_verbatim_mark> days. Furthermore, there is at most one game per day. You are given an <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> matrix <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, where an element in <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark>, denote the winning percentage of pitcher <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> against team <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, and a list of <SPAN CLASS="MATH"><I>g</I> + 10</SPAN> <tex2html_verbatim_mark> numbers, <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>, <I>d</I><SUB>2</SUB>,..., <I>d</I><SUB>g+10</SUB></SPAN> <tex2html_verbatim_mark>, to represent the schedule of the team, where <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> denotes the opponent team and <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB> = 0</SPAN> <tex2html_verbatim_mark> denotes that there is no game at the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th day of the season. Your task is to decide the starting pitcher for each game so that the expected number of winning game is maximized.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains an integer <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3679img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3679img1.png ALT="$ \le$">5)</SPAN> <tex2html_verbatim_mark> indicating the number of teams that need your help. The data about these <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> teams follows. For each team, the first line contains the number of pitchers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of opponent teams <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, and the number of games in a season <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains the information about winning percentage of each pitcher against each team; the first line is <SPAN CLASS="MATH"><I>p</I><SUB>11</SUB>, <I>p</I><SUB>12</SUB>,..., <I>p</I><SUB>1n</SUB></SPAN> <tex2html_verbatim_mark>, and the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line is <SPAN CLASS="MATH"><I>p</I><SUB>i1</SUB>, <I>p</I><SUB>i2</SUB>,..., <I>p</I><SUB>in</SUB></SPAN> <tex2html_verbatim_mark>, where each <SPAN CLASS="MATH"><I>p</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> is a two-digit number (for example, 92 represents 0.92). The next <SPAN CLASS="MATH"><I>g</I> + 10</SPAN> <tex2html_verbatim_mark> lines describe the schedule of the season, <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>, <I>d</I><SUB>2</SUB>,..., <I>d</I><SUB>g+10</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The maximum value of expected game won for these <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> teams in the order of their appearance in the input file, output the answer for each team in separated lines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
5 3 6
91 90 50 50 50
65 40 60 60 60
66 40 60 60 60
1 
2 
3 
3 
2 
1 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4.26
</PRE><P>
______________________________________________________
3680||||||false||||||

<P>
Have you ever wondered why normally an year has 365 days, not 400 days? Why August
have 31 days, but February have only 28 days? Why there are 7 days, not 6 days, in a week? Do
people in ancient time use the same calendar as we do? There are many interesting conjectures
and theories about those problems. Now we will tell you one story that may help explaining
plausible answers to these questions. Using information in the story, you are then ask to solve
an interesting problem using computer. Note that there are many theories about the calendar
system discussed. This problem set will tell only one of them in a simplified way.

<P>
Throughout history, people keep track of time by observing the relative positions of the
earth, the moon and the sun. A <SPAN  CLASS="textit">day</SPAN> is the amount of time the earth completes a self rotation.
An <SPAN  CLASS="textit">year</SPAN> is defined to be the amount of time the earth orbits the sun. The earth takes roughly
365.242190 days to orbit the sun with some small variations. For practical purpose, a calendar
year needs to have an integral number of days. Hence people need to add <SPAN  CLASS="textit">leap</SPAN> days to keep the
calendar synchronized with the sun. If you keep a calendar year to have 365 years, you need to
add one more day in a leap year roughly about every 4 years. However, this kind of calendar will
not be in perfect synchronization with the earth's position orbiting the sun because it advanced
365.25 days in average, which is slightly more than the actual period.

<P>
Depending on how accurate you can measure the period of the earth orbiting the sun, you
need to invent different formulas for leap years. Several famous Western calendar systems have
been invented, not to mention the more complex Oriental systems. In order to save programmers'
eorts, we will not discuss the Oriental, such as Chinese, calendar systems. We will focus on
major Western calendar systems. The earliest one may be the Julian calendar created by Julius
Caesar in 46 BC. It is not accurate enough and will have one day off every 128 years. The next
one is the Astronomical Julian calendar invented by Joseph Justus Scaliger around the 16th
century. Both have simple formulas to determine which year is a leap year.

<P>
The next major one is called Gregorian calendar that was invented at the year 1582 because
the synchronization of the earth's orbiting and the calendar is finally noticed by people. In this
system, a leap year is dropped every 100 years unless it is every 400 years. By doing this
modification, the average number of days in a calendar year is 365.2425. Note that this system
is also not perfect. It adds one more day every 3289 years. There are other more modifications
suggested, such as the one by Astronomer John Herschel, the Greek Orthodox, and the SPAWAR
group in the US Navy. For simplicity, people use Gregorian calendar system though it may not
be perfect. 

<P>
The following is the formula for the Gregorian calendar to determine whether an year is a
leap year or not. An year <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $y \ge 1582$
 -->
<SPAN CLASS="MATH"><I>y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3680img1.png
 ALT="$ \ge$">1582</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $y \neq 1700$
 -->
<SPAN CLASS="MATH"><I>y</I> <IMG
 WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3680img1.png
 ALT="$ \neq$"> 1700</SPAN>
<tex2html_verbatim_mark>, is a leap year if and only if

<P>

<UL>
<LI><SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is divisible by 4, and
</LI>
<LI><SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is not divisible by 100 unless it is divisible by 400.
</LI>
</UL>

<P>
An year <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 < y < 1582$
 -->
<SPAN CLASS="MATH">0 &lt; <I>y</I> &lt; 1582</SPAN>
<tex2html_verbatim_mark> is a leap year if and only if

<P>

<UL>
<LI><SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is divisible by 4. 
</LI>
</UL>

<P>
Hence year 4 is a leap year, year 100 is a leap year, year 1900 is not a leap year, but year
2000 is a leap year. A leap year has 366 days with the extra day February 29. A non-leap year
has 365 days.

<P>
During your computation, you may also want to observe the following facts about Gregorian
calendar. Many calendar systems were used by people in different areas in the Western world
at the same time. The current Western calendar system, primarily follows Gregorian calendar,
and is so called the Gregorian Reformation, was adopted by Britain and the possessions on
September 3, 1752. For lots of reasons that we are sure you do not want to read in this problem
description, 11 days are eliminated starting September 3, 1752 in order for people not to rewrite
history. That is, in the Gregorian calendar, there is no days in between September 3, 1752 and
September 13, 1752. Note that Rome adopted the Gregorian calendar at the year 1582, when it
was invented. Also for historical reasons, the year 1700 is declared a leap year in the Gregorian
calendar. There are other variations about the Gregorian calendar system, however, we will use
the one that is dened above.

<P>
A lunar <SPAN  CLASS="textit">month</SPAN> is defined to be the average time between successive new or full moons
which is 29.531 days. People observe in average 12.368 full moons in an year. Unfortunately,
this is also not an integral number in terms of days. Hence if we set an year to have 12 months
with each month having 30 days, we need to add several days each year. To save the trouble,
an alternative way is to have the number of days in a month to alternative between 30 and 31.
However, this introduces one extra day. After lots of struggle, the Gregorian calendar defined
the numbers of days in each month during a non-leap year to be 31, 28, 31, 30, 31, 30, 31, 31,
30, 31, 30, 31, respectively from the first month to the 12th month. One more day is added
on February in the leap year. The names for the months in sequence from the first month --
January, February, March, April, May, June, July, August, September, October, November, and
December, are also very interesting and have lots of stories associated with them. For example,
the Roman Senate named the month of July after Julius Caesar to honor him for reforming
their calendar. However, we do not have time to cover them here.

<P>
In ancient time, a <SPAN  CLASS="textit">week</SPAN> may have different number of days, say from 4 to 10 days. In
the Gregorian calendar system, a week corresponds roughly to the moon's quarter phase whose
position can be clearly observed by people. Hence people can easily measure a week. Also for
some other reasons, such as religion, it is defined as 7 days. The names of the 7 days in sequence
-- Sunday, Monday, Tuesday, Wednesday, Thursday, Friday and Saturday, all have interesting
stories. However, we also do not have time to cover them here.

<P>
Throughout history, people believe the relative positions of the stars can decide their fate.
This is also true for people living in an island <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark>. In island <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark>, people are working from Monday
through Friday every week and enjoy holidays on every Saturday and Sunday without exceptions.
There is no other holidays. From ancient tales, a month is called <SPAN  CLASS="textit">lucky</SPAN> if the last working day in
this month is Friday. For examples, the last working day of September, 2006 is September 29,
2006 -- which is Friday. Hence it is lucky. The last working day of July, 2006 is July 31, 2006
-- which is Monday. Hence it is not lucky. The last working day of August, 2006 is August
31, 2006 -- which is Thursday. Hence it is also not lucky. It is believed that if one eats only
vegetable everyday during a lucky month, he/she will have a good fortune in getting rich.

<P>
Also from ancient tales, a month is called <SPAN  CLASS="textit">good</SPAN> if the first working day in this month is
Monday. For examples, the first working day of July, 2006 is July 3, 2006 -- which is Monday.
Hence it is good. The first working day of October, 2006 is October 2, 2006 -- which is Monday.
Hence it is also good. The first working day of August, 2006 is August 1, 2006 -- which is
Tuesday. Hence it is not good. The first working day of September, 2006 is September 1, 2006
-- which is Friday. Hence it is also not good. It is believed that if one goes to bed before 10
PM every day during a good month, he/she will be very healthy. A month can be both good
and lucky at the same time.

<P>
Given a period of time, your task is to report the number of lucky months and the number
good months during this period of time using the described Gregorian calendar system.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line contains the number of test cases <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le w \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3680img1.png
 ALT="$ \le$"><I>w</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3680img1.png
 ALT="$ \le$">10</SPAN>
<tex2html_verbatim_mark>.
Then the <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> test cases are listed one by one. Each test case consists of 1 line with four numbers:

<P>

<P>
<BR>

<!-- MATH
 $Y_{s} \ M_{s} \ Y_{e} \ M_{e}$
 -->
<SPAN CLASS="MATH"><I>Y</I><SUB>s</SUB>&nbsp;<I>M</I><SUB>s</SUB>&nbsp;<I>Y</I><SUB>e</SUB>&nbsp;<I>M</I><SUB>e</SUB></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
where two numbers are separated by a single blank, <SPAN CLASS="MATH"><I>Y</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark> is an integer, <!-- MATH
 $0 < Y_{s} < 10000$
 -->
<SPAN CLASS="MATH">0 &lt; <I>Y</I><SUB>s</SUB> &lt; 10000</SPAN>
<tex2html_verbatim_mark>,
denoting the starting year in western style, <SPAN CLASS="MATH"><I>M</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark> is an integer, <!-- MATH
 $1 \le M_{s} \le 12$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3680img1.png
 ALT="$ \le$"><I>M</I><SUB>s</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3680img1.png
 ALT="$ \le$">12</SPAN>
<tex2html_verbatim_mark>,
denoting the starting month, <SPAN CLASS="MATH"><I>Y</I><SUB>e</SUB></SPAN>
<tex2html_verbatim_mark> is an integer, <!-- MATH
 $0 < Y_{e} < 10000$
 -->
<SPAN CLASS="MATH">0 &lt; <I>Y</I><SUB>e</SUB> &lt; 10000</SPAN>
<tex2html_verbatim_mark>,
denoting the ending year in western style, <SPAN CLASS="MATH"><I>M</I><SUB>e</SUB></SPAN>
<tex2html_verbatim_mark> is an integer, <!-- MATH
 $1 \le M_{e} \le 12$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3680img1.png
 ALT="$ \le$"><I>M</I><SUB>e</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3680img1.png
 ALT="$ \le$">12</SPAN>
<tex2html_verbatim_mark>,
denoting the ending month.

<P>
Note that you can be sure the month indicated by <SPAN CLASS="MATH"><I>M</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Y</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark>
is never before the month indicated by <SPAN CLASS="MATH"><I>M</I><SUB>e</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Y</I><SUB>e</SUB></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the number of lucky months and the number of good
month in between the month <SPAN CLASS="MATH"><I>M</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark> of the year <SPAN CLASS="MATH"><I>Y</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark>
(including this month) and the month <SPAN CLASS="MATH"><I>M</I><SUB>e</SUB></SPAN>
<tex2html_verbatim_mark> of the year <SPAN CLASS="MATH"><I>Y</I><SUB>e</SUB></SPAN>
<tex2html_verbatim_mark>
(including this month) in one line. The two numbers are separated by a single blank.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
2006 9 2006 9
2006 7 2006 9
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 0
1 1
</PRE> 

<P>

______________________________________________________
3681||||||false||||||

<P>
Superior Island is a very picturesque island and only bicycles are allowed on the island.
Therefore, there are many one-way bicycle roads connecting the dierent best photo-shooting
spots on the island. To help the visitors plan their trip to the island, the tourism commission
wants to designate <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> different bicycle routes that go through some of the best photo-shooting
spots on the island. Given a map of all the bicycle roads on the island and a list of the best
photo-shooting spots to be included on each of the three planned routes (non-listed spots must
not be included in the route), please write a program to plan each of the <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> routes so that the
distance on each route is minimal. Note that each best photo-shooting spot may only appear
at most once on the route.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
There are two parts to the input. The first part of input gives the information of the bicycle
roads on the island. The first line contains two integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3681img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>
and <SPAN CLASS="MATH"><I>r</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3681img1.png
 ALT="$ \le$">10</SPAN>
<tex2html_verbatim_mark>, indicating that there are <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> best photo-shooting spots on the island and there are 
<SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> routes to be planned.
The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines (line 2 through line <SPAN CLASS="MATH"><I>n</I> + 1</SPAN>
<tex2html_verbatim_mark>) contains <!-- MATH
 $n \times n$
 -->
<SPAN CLASS="MATH"><I>n</I>&#215;<I>n</I></SPAN>
<tex2html_verbatim_mark>
integers (<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines with <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> integers on each line), where the <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>-th
integer on line <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> denotes the distance from best photo-shooting spot
<SPAN CLASS="MATH"><I>i</I> - 1</SPAN>
<tex2html_verbatim_mark> to best photo-shooting spot <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>; the distances are all between 0 and 10, where 0 indicates that
there is no one-way road going from best photo-shooting spot <SPAN CLASS="MATH"><I>i</I> - 1</SPAN>
<tex2html_verbatim_mark> to spot <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>.

<P>
The second part of input has <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> lines, denoting the <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> sightseeing routes to be planed. Each
line lists the best photo-shooting stops to be included in that route. The integers on each line
denote the recommended photo-shooting stops on that particular sightseeing route. The first
integer on the line is the starting point of the route and the last integer is the last stop on the
route. However, the stops in between can be visited in any order.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
Output <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> integers on <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> lines (one integer per line) indicating the distance of each of the <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> planned routes. If a route is not possible, output `<TT>0</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 3
0 1 2 0 1 1
1 0 1 1 1 0
0 2 0 1 3 0
4 3 1 0 0 0
0 0 1 1 0 0
1 0 0 0 0 0
1 3 5
6 3 2 5
6 1 2 3 4 5
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
0 
7
</PRE>  

<P>

______________________________________________________
3682||||||false||||||
<P>A <SPAN CLASS="textit">cryptosystem</SPAN> is a method to convert a <SPAN CLASS="textit">message</SPAN> into a <SPAN CLASS="textit">cipher</SPAN>, which is diffcult to understand by unauthorized people. Assume that both the message and the cipher are strings over the alphabet <SPAN CLASS="MATH">{<I>a</I>, <I>b</I>,..., <I>z</I>}</SPAN> <tex2html_verbatim_mark>.<P>A <SPAN CLASS="textit">shift cipher</SPAN> is a cryptosystem that shifts each character in the message by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> positions. For example, if <SPAN CLASS="MATH"><I>k</I> = 3</SPAN> <tex2html_verbatim_mark>, then <TT>a</TT> is converted into <TT>d</TT>, <TT>b</TT> into <TT>e</TT>, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, <TT>x</TT> into <TT>a</TT>, <TT>y</TT> into <TT>b</TT>, and <TT>z</TT> into <TT>c</TT>. The number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is called the <SPAN CLASS="textit">key</SPAN> of the cryptosystem.<P>To make the cipher more diffcult to understand, spaces and all punctuations are removed from the message before encryption. For example, assume that <SPAN CLASS="MATH"><I>k</I> = 3</SPAN> <tex2html_verbatim_mark>, the message:<P><P><BR><TT>we will meet at midnight.</TT><P><P><BR>is encrypted into the cipher:<P><P><BR><TT>zhzloophhwdwplgqljkw</TT><P><P><BR>Since there are only 26 different keys, given a cipher text, it is easy to convert each character back to the original message. However, by using a computer, it may not be trivial to insert spaces so that the original message can be recovered automatically.<P>For simplicity, we assume that a message is recovered if spaces are inserted into the text so that each word separated by spaces is a word in the dictionary. Given a cipher text, write a program to recover the message. You may assume that each cipher is less than 256 characters, and each word used in the message appears in the dictionary. The dictionary is located in<P><P><BR><DIV ALIGN="CENTER">/usr/share/dict/american-english.</DIV><P><P><BR>This dictionary is a text file; each line contains a word. There are words with capital or special letters in the dictionary. These words will not be used in our system. You may want to look at the dictionary before programming. It is not necessary to check if the sentence is grammatically correct or not. The answer will be considered correct if no adjacent words are single character and the average number of characters in the words is greater than 2.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input data is a set of ciphers. Each cipher is written in a lines. A line containing only the character `<TT>0</TT>' signals the end of a test data.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is the key <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and the recovered message for each of the cipher. Print the solution of each test case in a line. If the solution is not unique, print the solution with minimum number of words. If there is no solution, print ``<TT>NO SOLUTIONS</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
zhzloophhwdwplgqljkw 
lowder 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
k=3: we will meet at midnight
NO SOLUTIONS
</PRE><P>
______________________________________________________
3683||||||false||||||
<P>There is a set of jobs, say <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, to be scheduled. Each job needs one day to complete. Your task is to schedule the jobs so that they can be nished in a minimum number of days. There are two types of constraints: <SPAN CLASS="textit">Conflict constraints</SPAN> and <SPAN CLASS="textit">Precedence constraints</SPAN>.<P><SPAN CLASS="textbf">Conflict constraints</SPAN>: Some pairs of jobs cannot be done on the same day. (Maybe job <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and job <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> need to use the same machine. So they must be done in different dates).<P><SPAN CLASS="textbf">Precedence constraints</SPAN>: For some pairs of jobs, one needs to be completed before the other can start. For example, maybe job <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> cannot be started before job <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> is completed.<P>The scheduling needs to satisfy all the constraints.<P>To record the constraints, we build a graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> whose vertices are the jobs: <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>. Connect <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> by an undirected edge if <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> cannot be done on the same day. Connect <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> by a directed edge from <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> needs to be completed before <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> starts.<P>If the graph is complicated, the scheduling problem is very hard. Now we assume that for our problems, the constraints are not very complicated: The graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> we need to consider are always trees (after omitting the directions of the edges). Your task is to nd out the number of days needed in an optimal scheduling for such inputs. You can use the following result:<P><SPAN CLASS="textit">If <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> is a tree, then the number of days needed is either <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>k</I> + 1</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the maximum number of vertices contained in a directed path of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, i.e., a path <SPAN CLASS="MATH"><I>P</I> = (<I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>k</SUB>)</SPAN> <tex2html_verbatim_mark>, where for each <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>k</I> - 1</SPAN> <tex2html_verbatim_mark>, there is a directed edge from <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>x</I><SUB>i+1</SUB></SPAN> <tex2html_verbatim_mark>.</SPAN><P>Figure 1 below is such an example. There are six jobs: 1, 2, 3, 4, 5, 6. From this figure, we know that job 1 and job 2 must be done in different dates. Job 1 needs to be done before job 3, job 3 before job 5, job 2 before job 4 and job 4 before job 6. It is easy to verify that the minimum days to finish all the jobs is 4 days. In this example, the maximum number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> of vertices contained in a directed path is 3.<P><DIV ALIGN="CENTER"><IMG WIDTH="179" HEIGHT="292" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3683.jpg ALT="\epsfbox{p3683.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: Example</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of trees (whose edges may be directed or undirected), say <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB>, <I>T</I><SUB>2</SUB>,..., <I>T</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3683.jpg ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>. Each tree has at most 200 vertices. We represent each tree as a rooted tree (just for convenience of presentation, the root is an arbitrarily chosen vertex). Information of each of the trees are contained in a number of lines. Each line starts with a vertex (which is a positive integer) followed by all its sons (which are also positive integers), then followed by a 0. Note that 0 is not a vertex, and it indicates the end of that line. Now some of the edges are directed. The direction of an edge can be from father to son, and can also be from son to father. If the edge is from father to son, then we put a letter ``<TT>d</TT>" after that son (meaning that it is a downward edge). If the edge is from son to father, then we put a letter ``<TT>u</TT>" after that son (meaning that it is an upward edge). If the edge is undirected then we do not put any letter after the son.<P>The first case of the sample input below is the example in Figure 1.<P>Consecutive vertices (numbers or numbers with a letter after it) in a line are separated by a single space. A line containing a single <TT>0</TT> means the end of that tree. The next tree starts in the next line. Two consecutive lines of single <TT>0</TT> means the end of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains one line for each test case. Each line contains a number, which is the minimum number of days to finish all the jobs in that test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 2 3d 0
2 4d 0
3 5d 0
4 6d 0
0 
1 2d 3u 4 0
0 
1 2d 3 0
2 4d 5d 10 0
3 6d 7d 11 0
6 8d 9 12 0
0 
1 2 3 4 0
2 5d 0
3 6d 0
4 7d 0
5 8d 0
6 9d 0
7 10d 0
0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
3 
4 
3
</PRE><P>
______________________________________________________
3684||||||false||||||
<P>In many graphic drawing applications, you can click on a line object. A well-known approach to detect if a line is clicked by a mouse is to compute the distance between the click position and the line. For example, in Figure 1, the line is said to be <SPAN CLASS="textit">selected</SPAN> if the distance <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> is less than a threshold <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3684img1.png ALT="$ \le$"><I>D</I>)</SPAN> <tex2html_verbatim_mark><DIV ALIGN="CENTER"><IMG WIDTH="320" HEIGHT="204" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3684img1.png ALT="\epsfbox{p3684.eps}"> <tex2html_verbatim_mark></DIV><P>Give you a set of lines (with equation of the form <SPAN CLASS="MATH"><I>ax</I> + <I>by</I> + <I>c</I> = 0</SPAN> <tex2html_verbatim_mark>), please compute the minimum clicks to select all the lines. For example, to select two lines, the minimum number of clicks is one, that is, you can make a click near the cross point of the two lines.<P>Note: In the test data, each line at least intersects with another line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input data begins with a number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> -the number of test cases. Each test case begins with two integers <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3684img1.png ALT="$ \le$">200)</SPAN> <tex2html_verbatim_mark> is the number of lines and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>D</I> &gt; 0)</SPAN> <tex2html_verbatim_mark> is the threshold for testing if a line is selected. The data of lines listed one by one. Each line is represented by <SPAN CLASS="MATH">(<I>ax</I> + <I>by</I> + <I>c</I> = 0)</SPAN> <tex2html_verbatim_mark>. The three <SPAN CLASS="textit">floating</SPAN> numbers <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I></SPAN> <tex2html_verbatim_mark>,, separated by space are given to represent the line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Please output the minimum number of clicks in a new line for each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 5
0 1 0
1 0 0
3 1
0 1 0
1 0 0
1 1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
2
</PRE><P>
______________________________________________________
3685||||||false||||||
<P>A network is composed of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> computers connected by <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> communication links such that any two computers can be communicated via a unique route. Two computers are said to be <SPAN CLASS="textit">adjacent</SPAN> if there is a communication link between them. The <SPAN CLASS="textit">neighbors</SPAN> of a computer is the set of computers which are adjacent to it. In order to quickly access and retrieve large amounts of information, we need to select some computers acting as <SPAN CLASS="textit">servers</SPAN> to provide resources to their neighbors. Note that a server can serve all its neighbors. A set of servers in the network forms a <SPAN CLASS="textit">perfect service</SPAN> if every client (non-server) is served by <SPAN CLASS="textbf">exactly one</SPAN> server. The problem is to find a minimum number of servers which forms a perfect service, and we call this number <SPAN CLASS="textit">perfect service number</SPAN>.<P>We assume that <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3685img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark> is a positive integer and these <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> computers are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. For example, Figure 1 illustrates a network comprised of six computers, where black nodes represent servers and white nodes represent clients. In Figure 1(a), servers 3 and 5 do not form a perfect service because client 4 is adjacent to both servers 3 and 5 and thus it is served by two servers which contradicts the assumption. Conversely, servers 3 and 4 form a perfect service as shown in Figure 1(b). This set also has the minimum cardinality. Therefore, the perfect service number of this example equals two.<P><DIV ALIGN="CENTER"><IMG WIDTH="982" HEIGHT="383" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3685img1.png ALT="\epsfbox{p3685.eps}"> <tex2html_verbatim_mark></DIV><P>Your task is to write a program to compute the perfect service number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of test cases. The format of each test case is as follows: The first line contains one positive integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, which represents the number of computers in the network. The next <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> lines contain all of the communication links and one line for each link. Each line is represented by two positive integers separated by a single space. Finally, a `<TT>0</TT>' at the <SPAN CLASS="MATH">(<I>N</I> + 1)</SPAN> <tex2html_verbatim_mark>-th line indicates the end of the first test case.<P>The next test case starts after the previous ending symbol `<TT>0</TT>'. A `<TT>-1</TT>' indicates the end of the whole inputs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains one line for each test case. Each line contains a positive integer, which is the perfect service number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
1 3
2 3
3 4
4 5
4 6
0 
2 
1 2
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
1
</PRE>
______________________________________________________
3686||||||false||||||
<P>Chip and Dale have devised an encryption method to hide their passwords. They first agree secretly on a number that will be used as the number of columns in a matrix. The sender prepares an intermediate format using the following rules:<P><OL><LI>- The password is formed with lowercase letters only. </LI><LI>- Each letter will be represented in binary code according to ASCII table. </LI></OL><P>The sender then enters the letters of the intermediate format along the diagonals of the matrix and pads with extra characters `0' (zero) so as to make a rectangular array of letters. These additional characters do not comprise the Password<P>For example, if the password is: ``<TT>iteso</TT>" and there are five columns, Dale would write down<P><IMG WIDTH="289" HEIGHT="292" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3686.png ALT="$\textstyle \parbox{.50\textwidth}{
\begin{center}
\mbox{}
\epsfbox{p3686.eps}
\end{center}}$"><IMG WIDTH="254" HEIGHT="99" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3686.png ALT="$\textstyle \parbox{.45\textwidth}{
For example, for the letter \lq i':
\par
Letter = i
\par
ASCII Code = 105
\par
Binary Code = 1 1 0 1 0 0 1
}$"><P>Note how Dale includes only the binary code of each letter and writes them all in lower case. Dale then sends the password to Chip by writing the binary code in each row. So, the password in its intermediate format would be encrypted as<P><DIV ALIGN="CENTER"></DIV><PRE>
111100011101001100101111001110011001100010000
</PRE><DIV ALIGN="CENTER"></DIV><P>Your job is to recover the password that was sent from Chip to Dale.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple input sets. Input for each set will consist of two lines. The first line will contain an integer in the range <SPAN CLASS="MATH">2...20</SPAN> <tex2html_verbatim_mark> indicating the number of columns used. The next line is a string of up to 400 characters (<TT>1</TT>'s and <TT>0</TT>'s). The last input set is followed by a line containing a single zero (<TT>0</TT>). This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each input set should generate one line of output, giving the password.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
111100011101001100101111001110011001100010000 
3 
110001010101011101101 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
iteso
acm
</PRE><P>
______________________________________________________
3687||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="789" HEIGHT="299" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3687.png ALT="\epsfbox{p3687.eps}"> <tex2html_verbatim_mark></DIV><P>The football foundation (FOFO) has been researching on soccer; they created a set of sensors to describe the ball behavior based on a grid uniformly distributed on the field. They found that they could predict the ball movements based on historical analysis. Each square sensor of the grid can detect the following patterns:<P><P><BR><TT>N</TT> north (up the field)<P><TT>S</TT> south (south the field)<P><TT>E</TT> east (to the right on the field)<P><TT>W</TT> west (to the left on the field)<P><P><BR>For example, in grid 1, suppose the ball was thrown into the field from north side into the field. The path the sensors detected for this movement follows as shown. The ball went through 10 sensors before leaving the field.<P>Comparing with what happened on grid 2, the ball went through 3 sensors only once, and started a loop through 8 instructions and never exits the field.<P>You are selected to write a program in order to evaluate line judges job, with the following out put based on each grid of sensors, the program needs to determine how long it takes to the ball to get out of the grid or how the ball loops around.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be one or more grids of sensors for the same game. The data for each is in the following form. On the first line are three integers separated by blanks: The number of rows in the grid, the number of columns in the grid, and the number of the column in which the ball enters from the north. The grid column's number starts with one at the left. Then come the rows of direction instructions. The lines of instructions contain only the characters <TT>N</TT>, <TT>S</TT>, <TT>E</TT> or <TT>W</TT>, with no blanks.<P>The end of input is indicated by a grid containing `<TT>0 0 0</TT>' as limits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each grid in the input there is one line of output. Either the ball follows a certain number of sensors and exits the field on any one of the four sides or else the ball follows the behavior on some number of sensors repeatedly. The sample input below corresponds to the two grids above and illustrates the two forms of output. The word ``<TT>step</TT>" is always immediately followed by ``(<TT>s</TT>)" whether or not the number before is 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 6 5 
NEESWE 
WWWESS 
SNWWWW 
4 5 1 
SESWE 
EESNW 
NWEEN 
EWSEN 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 step(s) to exit 
3 step(s) before a loop of 8 step(s)
</PRE><P>
______________________________________________________
3688||||||false||||||
<P>After September 11, 2001, improve the security has become a crucial challenge for intelligence departments around the world. A crucial issue about this task is to identify terrorism patterns represented by attacks in different locations (dots), relations between terrorism activities (connections) and, attributes (dots and connections labels) that describes the acts committed by political groups or persons. A natural representation for this information is a graph, and the ability to discover and test known patterns in such information could lead to significant improvement in our ability to identify potential threats.<P>Based on the above problem description, our task consists on developing a tool that identifies a terrorism patterns into a set of potential terrorism activities using a graph-based representation where all graphs are undirected and labeled (thus, all vertices and edges has a label). The task of this problem consists on finding if there exist a subgraph S of G where S have the same number of vertices and edges of G' and there exist one to one association between vertices and edges from S and G' with the same label (isomorphism).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will be a file, where different terrorism activities are represented by different graphs. Consider that each graph have a name, where graph ``<TT>XS G</TT><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>" represents a recognized terrorism pattern associated to a terrorism group and ``<TT>XP G</TT><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>" represents a set of attacked locations. By notation, ``<SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>'' is an integer number between 1 to 5, where each of one is a test. Consider that ``<TT>XS G</TT>1" is the graph to search for in ``<TT>XP G</TT>1" and so on. Moreover, ``<TT>XS G</TT>1" appears in the input file immediately before of ``<TT>XP G</TT>1".<P>For all cases, <SPAN CLASS="MATH">#<I>vertices</I></SPAN> <tex2html_verbatim_mark> of ``<TT>XS G<SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark></TT>" is lower than <SPAN CLASS="MATH">#<I>vertices</I></SPAN> <tex2html_verbatim_mark> of ``<TT>XP G</TT><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>" and <!-- MATH
 $0 < \#vertices \le 150$
 --><SPAN CLASS="MATH">0 &lt; #<I>vertices</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3688img1.png ALT="$ \le$">150</SPAN> <tex2html_verbatim_mark> for each ``<TT>XP G</TT><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>" and for all graphs, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3688img1.png ALT="$ \le$">#<I>edges</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3688img1.png ALT="$ \le$">5000</SPAN> <tex2html_verbatim_mark>. Also, vertex and edge labels contains 500 printable ASCII characters (or less) without single spaces.<P>Both ``<TT>XS G</TT><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>" and ``<TT>XP G</TT><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>" are represented based on the following format. First, there is a line with the graph name. As an example, the line for ``<TT>XS G</TT>1" is:<P><P><BR><TT>XS G1</TT><P><P><BR>Next, there are <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines (each line represents a vertex), <!-- MATH
 $0 < k \le 150$
 --><SPAN CLASS="MATH">0 &lt; <I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3688img1.png ALT="$ \le$">150</SPAN> <tex2html_verbatim_mark>, each one using the following format:<P><P><BR><TT>v <SPAN CLASS="MATH"><I>id</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>label</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>Consider that <SPAN CLASS="MATH"><I>id</I></SPAN> <tex2html_verbatim_mark> is a positive integer, <!-- MATH
 $0 < id \le 150$
 --><SPAN CLASS="MATH">0 &lt; <I>id</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3688img1.png ALT="$ \le$">150</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>label</I></SPAN> <tex2html_verbatim_mark> is a string (vertex' label). There are not two lines with the same <SPAN CLASS="MATH"><I>id</I></SPAN> <tex2html_verbatim_mark> value and all lines are sorted in an increased order based on <SPAN CLASS="MATH"><I>id</I></SPAN> <tex2html_verbatim_mark>.<P>The next <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> lines represent all edges into the graph, each one using the following format:<P><P><BR><TT>e <SPAN CLASS="MATH"><I>idx</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>idy</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>label</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>Consider that <SPAN CLASS="MATH"><I>idx</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>idy</I></SPAN> <tex2html_verbatim_mark> are positive integers associated to a vertex into the graph. On the other hand, <SPAN CLASS="MATH"><I>label</I></SPAN> <tex2html_verbatim_mark> is a string (edge' label).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each pair of graphs (``<TT>XS G</TT><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>", ``<TT>XP G</TT><SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>"), <SPAN CLASS="MATH"><I>X</I> = 1,..., 5</SPAN> <tex2html_verbatim_mark>, if it does not exist a subgraph <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> of ``<TT>XS G</TT><SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>" where ``<TT>XP G</TT><SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>" is isomorphic to <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, print the message (just to clarify, we identify here blank spaces in the output with the symbol _ , but this symbol doesn't exist in the output file, that matches exactly the Sample Output below's format):<P><P><BR><TT>XS_G<SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>_&lt;-&gt;_XP_G<SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark></TT><BR><TT>There are not instances!</TT><P><P><BR>Otherwise, each instance is reported based on the following format. First, print the message:<P><P><BR><TT>XS_G<SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>_&lt;-&gt;_XP_G<SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark></TT><BR><TT>Vertices_(G')_&lt;-&gt;_Vertices_(G)</TT><P><P><BR>The next lines are the vertices and edges from <TT>G'</TT> associated to vertices and edges from <TT>G</TT>. The format is as follows:<P><P><BR><TT>v<SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>,v<SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>_&lt;-&gt;_v<SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>,v<SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are positive integers and each of one represents a vertex valid id, where <SPAN CLASS="MATH"><I>X</I> &lt; <I>Y</I></SPAN> <tex2html_verbatim_mark>. All lines are sorted based on the id's of <TT>G'</TT> in an increasing order:<P><P><BR>Line <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>: <TT>v<SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>,v<SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>_&lt;-&gt;_v<SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>,v<SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark></TT><BR>Line <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark>: <TT>v<SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>',v<SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>'_&lt;-&gt;_v<SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>',v<SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>'</TT><BR>Exactly when <SPAN CLASS="MATH"><I>X</I> &lt; <I>X</I></SPAN> <tex2html_verbatim_mark>' or <SPAN CLASS="MATH"><I>X</I> = <I>X</I></SPAN> <tex2html_verbatim_mark>' and <SPAN CLASS="MATH"><I>Y</I> &lt; <I>Y</I></SPAN> <tex2html_verbatim_mark>'<P><P><BR><SPAN CLASS="textbf">Restrictions:</SPAN> If there exist a isomorphic subgraph, it is unique. There are not empty lines for inputs and output files. There are not two different edges between a pair of vertices.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
XS G1 
v 1 a 
v 2 b 
v 3 a 
v 4 b 
e 1 2 d  
e 1 3 d 
e 1 4 c 
e 2 3 d 
XP G1 
v 1 b 
v 2 a 
v 3 b 
v 4 a 
e 1 2 d 
e 1 3 d 
e 1 4 d  
e 2 3 c 
e 2 4 d 
e 3 4 e 
XS G2 
v 1 house 
v 2 attacked 
e 1 2 yesterday 
XP G2 
v 1 house 
v 2 attacked 
e 1 2 yesterday 
XS G3 
v 1 WTC 
v 2 AlQaeda 
e 1 2 atacked_by 
XP G3 
v 1 WTC 
v 2 ETA 
e 1 2 atacked_by
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
XS G1 &lt;--&gt; XP G1 
Vertices (G') &lt;--&gt; Vertices (G)
{v1,v2} &lt;--&gt; {v2,v1} 
{v1,v3} &lt;--&gt; {v2,v4} 
{v1,v4} &lt;--&gt; {v2,v3} 
{v2,v3} &lt;--&gt; {v1,v4} 
XS G2 &lt;--&gt; XP G2 
Vertices (G') &lt;--&gt; Vertices (G) 
{v1,v2} &lt;--&gt; {v1,v2} 
XS G3 &lt;--&gt; XP G3 
There are not instances!
</PRE><P>
______________________________________________________
3689||||||false||||||
<P>R2-D2 (our well known friendly robot) needs to perform some operations quickly to save his space ship. These operations require computing long summations and a division. Moreover, he needs to find the exact solution and he is required to present a report with the results. For that, he needs to simplify his solution as much as possible.<P>We assume that there is an array available <SPAN CLASS="MATH">(<I>X</I>1, <I>X</I>2,....)</SPAN> <tex2html_verbatim_mark> of 99999999 elements.<P>The array has the peculiar property that the average of the first <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> numbers is equal to the average of the index <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> and the number 1.<P>R2-D2 needs to do the following: Given a natural number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> less than 99999999, his assignment is to compute the function:<P><P><BR><SPAN CLASS="MATH"><I>F</I>(<I>N</I>) = <I>F</I>1(<I>N</I>)/<I>F</I>2(<I>N</I>)</SPAN> <tex2html_verbatim_mark><P><P><BR>where:<P><P><BR><SPAN CLASS="MATH"><I>F</I>1(<I>N</I>) = <I>N</I>&#215;(<IMG WIDTH="65" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3689img1.png ALT="$ \Sigma_{{0 \le k \le N}}^{}$"><I>k</I><SUP>4</SUP>/<I>X</I><SUB>k</SUB>)</SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>F</I>2(<I>N</I>) = (<IMG WIDTH="65" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3689img1.png ALT="$ \Sigma_{{0 \le k \le N}}^{}$"><I>k</I><SUP>3</SUP>/<I>X</I><SUB>k</SUB>)&#215;(<IMG WIDTH="65" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3689img1.png ALT="$ \Sigma_{{0 \le k \le N}}^{}$"><I>k</I><SUP>2</SUP>/<I>X</I><SUB>k</SUB>)</SPAN> <tex2html_verbatim_mark><P><P><BR>That is,<P><P><BR><SPAN CLASS="MATH"><I>F</I>1(<I>N</I>) = <I>N</I>&#215;(1/<I>X</I><SUB>1</SUB> +16/<I>X</I><SUB>2</SUB> +...+ <I>N</I><SUP>4</SUP>/<I>X</I><SUB>N</SUB>)</SPAN> <tex2html_verbatim_mark><P><P><BR>and<P><P><BR><SPAN CLASS="MATH"><I>F</I>2(<I>N</I>) = (1/<I>X</I><SUB>1</SUB> +8/<I>X</I><SUB>2</SUB> +...+ <I>N</I><SUP>3</SUP>/<I>X</I><SUB>N</SUB>)&#215;(1/<I>X</I><SUB>1</SUB> +4/<I>X</I><SUB>2</SUB> +...+ <I>N</I><SUP>2</SUP>/<I>X</I><SUB>N</SUB>)</SPAN> <tex2html_verbatim_mark><P><P><BR>Since R2-D2 needs an exact solution, we ask him to report the following:<P><BLOCKQUOTE>The solution needs to be given as a pair of relative prime numbers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>f</I> (<I>N</I>) = <I>a</I>/<I>b</I></SPAN> <tex2html_verbatim_mark> if the solution is not an exact integer. Otherwise just give the exact integer. The numbers processed by R2-D2 were of eight digits (99999999). Remember that R2-D2 was built long long time ago. His circuits are not that fast but he is clever. R2-D2 was able to perform one of these operations in less than one second. Can you do this assignment as fast as R2-D2 did it???</BLOCKQUOTE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>You will receive an input line with natural numbers separated by comma. Each number is less than 99999999. You will receive no more than 20 numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>You need to give a sequence of lines each one with the solution of the corresponding input case. The solution is either a pair of natural numbers separated by the symbol `<TT>/</TT>' representing the pair <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> mentioned above (when the division is not exact) or just one natural number (when the division is exact). Notice that these numbers could require more than 8 digits.<P><P><BR><SPAN CLASS="textbf">NOTE:</SPAN> The computing time expected of your algorithm is 10 seconds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1,2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
6/5
</PRE><P>
______________________________________________________
3690||||||false||||||

<P>
Mr. Smyth wants to leave his son, Peter, a part of his land as inheritance. This is a very big piece of land which is in the shape of a simple polygon. The only condition is that his son has to start building walls within his father's land in such a way that he has an area of land that is also in the shape of a simple polygon. 

<P>
Peter is a very lazy person and prefers to pay someone to build the walls. However, the people contracted by Peter forgot the boundaries that limit Mr. Smyth's land. But they did not worry about this and went ahead and built the walls. On the contrary, if they told Peter that they had forgotten the boundaries of Mr. Smyth's land Peter could get angry and he may fired his employee. 

<P>
Mr. Smyth knows his son very well and he will only leave land to his son if he builds walls that do not invade the land of his neighbors', (that is, no wall must be outside Mr. Smyth's land), and the walls built by his son must form an enclosed area. 

<P>
Finally, Mr. Smyth wants to know the area of the land left for himself.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input begins with a single positive integer on a line by itself indicating the number of the cases (a integer between 1 and 20) following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs.

<P>

<UL>
<LI>The next line defines Mr. Smyth's land which is a simple polygon (without crossing edges or touching borders), defined by a list of vertexes (there are at most 100 vertices in a polygon); each vertex is defined by its coordinates <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark> in decimal format (positive real numbers less than 1000). The vertexes are ordered according to their sequence in the polygon. 
</LI>
<LI>The next line contains the number <SPAN CLASS="MATH"><I>NB</I></SPAN>
<tex2html_verbatim_mark> which defines the number of walls (there are at most 100 walls).
</LI>
<LI>Next, <SPAN CLASS="MATH"><I>NB</I></SPAN>
<tex2html_verbatim_mark> lines are defined, each line having 4 integer numbers (positive integers less than 1000) <!-- MATH
 $X_{0} \ Y_{0} \ X_{1} \ Y_{1}$
 -->
<SPAN CLASS="MATH"><I>X</I><SUB>0</SUB>&nbsp;<I>Y</I><SUB>0</SUB>&nbsp;<I>X</I><SUB>1</SUB>&nbsp;<I>Y</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> (separated by a single space), which represent the starting points and end points of each wall (the walls don't have any order)
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. 

<P>

<UL>
<LI>If Peter doesn't invade the neighbors' land and he obtained an enclosing area, then the output has a line which states `<TT>The area free for your father is <SPAN CLASS="MATH"><I>totalarea</I></SPAN>
<tex2html_verbatim_mark></TT>' where <SPAN CLASS="MATH"><I>totalarea</I></SPAN>
<tex2html_verbatim_mark> is the total area of Mr. Smyth's land minus the area of Peter's land. <SPAN CLASS="MATH"><I>totalarea</I></SPAN>
<tex2html_verbatim_mark> must be printed exact to three digits to the right of the decimal point (round up).

<P>
Followed by the Peter's inheritance in next line, this part must be represented by coordinates <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark> ordered according to their sequence in the polygon, beginning with <SPAN CLASS="MATH"><I>P</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> of first wall and so on. 
</LI>
<LI>If Peter invades the neighbors' land , output should contain a line stating `<TT>Trying to steal neighbors' land</TT>'. If Peter does not invades the neighbors' land and does not succeed in enclosing an area with the walls built, then the output should contain a line skating `<TT>Sorry, your assignment do not deserve an inheritance</TT>'
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 

2 2 16 2 14 12 4 12 
7 
5 7 8 10 
13 6 11 3 
5 5 8 5 
5 5 5 7 
8 10 12 9 
12 9 13 6 
11 3 8 5 

2 2 16 2 14 12 4 12 
7 
5 7 8 10 
13 6 11 3 
5 5 8 5 
5 5 5 7 
8 10 16 11 
16 11 13 6 
11 3 8 5 

10 10 20 10 20 20 10 20 
5 
15 15 15 19
25 19 25 17
17 17 17 15
15 19 25 19
17 17 25 17
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
The area free for your father is: 85.000 and your land is: 5 7 8 10 12 9 13 6 11 3 8 5 5 5

Trying to steal neighbours' land

Trying to steal neighbours' land
</PRE> 

<P>

<P><P>
<BR>
The picture corresponds to the first case in the sample input

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3690.eps}$
 -->
<IMG
 WIDTH="590" HEIGHT="449" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/p3690.png
 ALT="\epsfbox{p3690.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

______________________________________________________
3691||||||false||||||
<P>An explorer must decide where to construct a way to arrive from a point A to point B. In order to help him, the explorer has made a map with the obstacles that exist. He drew into squares his map and he wants a way that passed through the smaller number of squares. The way only can go from a square to another one if they have a side in common, that is to say, cannot advance in diagonal, and it cannot happen through a square that contains an obstacle. Each square of the map is identified by its coordinates, column and row. The columns are numbered of left to right initiating with the <TT>0</TT>. The rows are numbered from top to down initiating with the <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple input sets. The first line contains the incoming number of input to evaluate. Each input will be formed of the following way: first, a line containing two integer numbers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, separated by spaces, indicate the number of columns and lines, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3691img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3691img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. In each one of the following <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines there is <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> numbers, separated by spaces, that can be 0 or 1, 0 if there is not obstacle in corresponding square and 1 if there is it. In the penultimate line the column and row of point A. In the last line the column and row of point B. All the cases of test will have at least a way to arrive from A at B.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT> </H2><P>The number of squares through which it passes a minimum way between A and B.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3 3 
1 0 0 
1 0 0 
0 0 1
2 0 
0 2 
5 4 
0 1 0 0 0
0 0 1 1 0
0 1 0 0 0
0 0 0 0 0
1 3 
2 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 
9
</PRE>
______________________________________________________
3692||||||false||||||

<P>
The ACM-ICPC brings together the top student programmers from all over the world, and provides them with opportunities to develop critical skills which will give them a competitive edge when they launch careers in information technology areas. More than 5,600 teams from 84 countries had competed in regional contests last year. An ever larger number of teams - more than 7,000 teams from different countries worldwide - have registered in this year's regional contests. However, due to the limited capacity of each site, only a small amount of the registered teams can be allowed to participate in the on-site contest. It is really hard for the contest organizers to determine which teams should be allowed to participate. One of the possible solutions is to hold a preliminary internet contest before the on-site competition. The following part describes a simplified version of rules for team selection: 

<P>
Up to three teams from each school can participate in the on-site contest, depending on how many following conditions the school in question meets: 

<P>
<DL COMPACT>
<DT>a)</DT>
<DD>A team from this school has solved at least <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> problems in the preliminary contest; 
</DD>
<DT>b)</DT>
<DD>Some of the teams from this school ranked top 20 in previous World Finals; 
</DD>
<DT>c)</DT>
<DD>This school has hosted a provincial contest this year. 
</DD>
</DL>

<P>
Your task is to write a program to help the contest holders to calculate how many teams are allowed to participate in the on-site final contest.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are multiple test cases in the input file. Each test case starts with three integers <SPAN CLASS="MATH"><I>S</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le S \le 100, 1 \le T \le 2000, 0 \le M \le 10)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$"><I>S</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$">100, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$"><I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$">2000, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$">10)</SPAN>
<tex2html_verbatim_mark>, representing the number of schools, the number of teams participating in the preliminary contest, and the minimum number of problems which is required to be solved in order to enter the on-site competition, respectively. 

<P>
Each of the following <SPAN CLASS="MATH"><I>S</I></SPAN>
<tex2html_verbatim_mark> lines consists of three integers <SPAN CLASS="MATH"><I>Id</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Q</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(1 \le Id \le S, 0 \le P, Q \le 1)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$"><I>Id</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$"><I>S</I>, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$"><I>P</I>, <I>Q</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$">1)</SPAN>
<tex2html_verbatim_mark>, representing the <SPAN CLASS="MATH"><I>Id</I></SPAN>
<tex2html_verbatim_mark> of the school, whether this school satisfies condition b), and whether this school satisfies condition c). 

<P>
The last part of each test case consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> lines. There are two integers on each of the <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> lines, <SPAN CLASS="MATH"><I>Sid</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Tot</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le Sid \le S, 0 \le T ot \le 10)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$"><I>Sid</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$"><I>S</I>, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$"><I>Tot</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3692img1.png
 ALT="$ \le$">10)</SPAN>
<tex2html_verbatim_mark>, meaning that a team from school <SPAN CLASS="MATH"><I>Sid</I></SPAN>
<tex2html_verbatim_mark> had solved <SPAN CLASS="MATH"><I>Tot</I></SPAN>
<tex2html_verbatim_mark> problems in the preliminary contest. 

<P>
Two consecutive test cases are separated by a blank line. <SPAN CLASS="MATH"><I>S</I> =</SPAN>
<tex2html_verbatim_mark> <TT>0</TT>, <SPAN CLASS="MATH"><I>T</I> =</SPAN>
<tex2html_verbatim_mark> <TT>0</TT>, <SPAN CLASS="MATH"><I>M</I> =</SPAN>
<tex2html_verbatim_mark> <TT>0</TT> indicates the end of input and should not be processed by your program.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the total number of teams which are allowed to participate in the on-site competition on a separate line in the format as indicated in the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 8 6 
5 0 1 
4 0 0 
1 0 0 
3 1 1 
2 1 1
2 6 
3 3 
2 9 
5 7 
4 8 
3 6 
2 8 
1 6 

5 8 6 
3 0 1 
5 1 1 
2 0 1 
1 1 1 
4 1 0
5 7 
2 5 
4 5 
5 5 
3 3 
5 6 
2 0 
4 7 

0 0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1:  10
Case 2:  9
</PRE> 

<P>

______________________________________________________
3693||||||false||||||
<P>You are given a strange scale (see the figure below), and you are wondering how to balance this scale. After several attempts, you have discovered the way to balance it -- you need to put different numbers on different squares while satisfying the following two equations:<P><P><BR><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>x</I><SUB>1</SUB> <TT>*</TT> 4 + <I>x</I><SUB>2</SUB> <TT>*</TT> 3 + <I>x</I><SUB>3</SUB> <TT>*</TT> 2 + <I>x</I><SUB>4</SUB> = <I>x</I><SUB>5</SUB> + <I>x</I><SUB>6</SUB> <TT>*</TT> 2 + <I>x</I><SUB>7</SUB> <TT>*</TT> 3 + <I>x</I><SUB>8</SUB> <TT>*</TT> 4</DIV><P><tex2html_verbatim_mark></P><P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>y</I><SUB>1</SUB> <TT>*</TT> 4 + <I>y</I><SUB>2</SUB> <TT>*</TT> 3 + <I>y</I><SUB>3</SUB> <TT>*</TT> 2 + <I>y</I><SUB>4</SUB> = <I>y</I><SUB>5</SUB> + <I>y</I><SUB>6</SUB> <TT>*</TT> 2 + <I>y</I><SUB>7</SUB> <TT>*</TT> 3 + <I>y</I><SUB>8</SUB> <TT>*</TT> 4</DIV><P><tex2html_verbatim_mark></P><P><P><BR>How many ways can you balance this strange scale with the given numbers?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><DIV ALIGN="CENTER"><IMG WIDTH="532" HEIGHT="484" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3693.jpg ALT="\epsfbox{p3693.eps}"> <tex2html_verbatim_mark></DIV><P>There are multiple test cases in the input file. Each test case consists of 16 distinct numbers in the range [1, 1024] on one separate line. You are allowed to use each number only once.<P>A line with one single integer <TT>0</TT> indicates the end of input and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, if it is possible to balance the scale in question, output one number, the number of different ways to balance this scale, in the format as indicated in the sample output. Rotations and reversals of the same arrangement should be counted only once.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
87 33 98 83 67 97 44 72 91 78 46 49 64 59 85 88 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 15227223
</PRE><P>
______________________________________________________
3694||||||false||||||

<P>
In the new ACM-ICPC Regional Contest, a special monitoring and submitting system will be set up, and students will be able to compete at their own universities. However there's one problem. Due to the high cost of the new judging system, the organizing committee can only afford to set the system up such that there will be only one way to transfer information from one university to another without passing the same university twice. The contestants will be divided into two connected regions, and the difference between the total numbers of students from two regions should be minimized. Can you help the juries to find the minimum difference?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are multiple test cases in the input file. Each test case starts with two integers <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(1 \le N \le 100000, 1 \le M \le 1000000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3694img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3694img1.png
 ALT="$ \le$">100000, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3694img1.png
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/36/3694img1.png
 ALT="$ \le$">1000000)</SPAN>
<tex2html_verbatim_mark>, the number of universities and the number of direct communication line set up by the committee, respectively. Universities are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>. The next line has <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> integers; the <SPAN CLASS="MATH"><I>K</I><SUP>th</SUP></SPAN>
<tex2html_verbatim_mark> integer is equal to the number of students in university numbered K. The number of students in any university does not exceed 100000000. Each of the following <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> lines has two integers <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>, and describes a communication line connecting university <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> and university <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>. All communication lines of this new system are bidirectional. 

<P>
<SPAN CLASS="MATH"><I>N</I> =</SPAN>
<tex2html_verbatim_mark> <TT>0</TT>, <SPAN CLASS="MATH"><I>M</I> =</SPAN>
<tex2html_verbatim_mark> <TT>0</TT> indicates the end of input and should not be processed by your program.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For every test case, output one integer, the minimum absolute difference of students between two regions in the format as indicated in the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
7 6 
1 1 1 1 1 1 1 
1 2 
2 7 
3 7 
4 6 
6 2 
5 7 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 1
</PRE> 

<P>

______________________________________________________
3695||||||false||||||
<P>You are observing a distant galaxy using a telescope above the Astronomy Tower, and you think that a rectangle drawn in that galaxy whose edges are parallel to coordinate axes and contain maximum star systems on its edges has a great deal to do with the mysteries of universe. However you do not have the laptop with you, thus you have written the coordinates of all star systems down on a piece of paper and decide to work out the result later. Can you finish this task?<P><DIV ALIGN="CENTER"><IMG WIDTH="856" HEIGHT="580" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3695.jpg ALT="\epsfbox{p3694.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case starts with one integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3695.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/p3695.jpg ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, the number of star systems on the telescope. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines follow, each line consists of two integers: the <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> coordinates of the <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>-th planet system. The absolute value of any coordinate is no more than <SPAN CLASS="MATH">10<SUP>9</SUP></SPAN> <tex2html_verbatim_mark>, and you can assume that the planets are arbitrarily distributed in the universe.<P><SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of input file and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT> </H2><P>For each test case, output the maximum value you have found on a single line in the format as indicated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 
2 3 
9 2 
7 4 
3 4 
5 7 
1 5 
10 4 
10 6 
11 4 
4 6 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 7
</PRE><P>
______________________________________________________
3696||||||false||||||
<P><BLOCKQUOTE><SPAN CLASS="textit">Without turning his head, Vader snarled through his mask, ``The Millennium Falcon?" </SPAN></BLOCKQUOTE><P><BLOCKQUOTE><SPAN CLASS="textit">Piett paused a moment before replying. He would have preferred to avoid that issue. ``Our tracking scanners are on it now," he responded a bit fearfully. </SPAN></BLOCKQUOTE><P><BLOCKQUOTE><SPAN CLASS="textit">Vader turned to face the admiral, his towering figure looming over the frightened officer. Piett felt a chill course through his veins, and when the Dark Lord spoke again his voice conveyed an image of the dreadful fate that would be inflicted if his commands were not executed.</SPAN></BLOCKQUOTE><P><BLOCKQUOTE><SPAN CLASS="textit">``I want that ship," he hissed. </SPAN></BLOCKQUOTE><P><BLOCKQUOTE><SPAN CLASS="textit">The ice planet was rapidly shrinking to a point of dim light as the Millennium Falcon sped into space. Soon that planet seemed nothing more than one of the billions of light specks scattered throughout the black void. </SPAN></BLOCKQUOTE><P><BLOCKQUOTE><SPAN CLASS="textit">But the Falcon was not alone in its escape into deep space. Rather, it was followed by an Imperial fleet that included the Avenger Star Destroyer and a half-dozen TIE fighter. The fighters moved ahead of the huge, slower-moving Destroyer, and closed in on the fleeing Millennium Falcon. </SPAN></BLOCKQUOTE><P><BLOCKQUOTE><DIV ALIGN="RIGHT"><SPAN CLASS="textit">-- Star Wars, Episode V, the Empire Strikes Back</SPAN></DIV></BLOCKQUOTE><P><P><BR>You are driving Millennium Falcon, the fastest starship of the entire galaxy, to escape Imperial pursuit. There are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> planet systems, numbered from 0 to <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>, and some of them are connected by one-way hyperspace tunnels. Some hyperspace tunnels are passable at all times, while others are only available at certain times. Initially you are at the ice planet <SPAN CLASS="textit">Hoth</SPAN>, the system numbered 0, at time 0 and you need to get to <SPAN CLASS="textit">Sullust</SPAN>, the system numbered <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>. Since there are <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> Imperial Star Destroyers following you, and they will also make the jump into the hyperspace to continue the pursuit, you have decided to use the <SPAN CLASS="MATH">(<I>K</I> + 1)</SPAN> <tex2html_verbatim_mark>-th shortest path from <SPAN CLASS="textit">Hoth</SPAN> to <SPAN CLASS="textit">Sullust</SPAN> so as to minimize the possibility of being attacked halfway by Imperial starships; furthermore, in order to avoid detection, you do not want to risk staying at a system longer than <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> seconds.<P>Note that multiple shortest paths may require same travel time, and your travel path may not be simple (i.e. you are allowed to visit some systems and use some hyperspace tunnels more than once during your journey).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case starts with four integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$">100, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$">500, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$">9, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, the number of planet systems, the number of hyperspace tunnels between them, the pursuing Imperial Star Destroyers, and the maximal allowed time to stay at the same system, respectively. <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines follow, each line describes one of the hyperspace tunnels: four integers <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$"><I>U</I>, <I>V</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$"><I>N</I> - 1, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$">10, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$"><I>W</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \le$">1000000)</SPAN> <tex2html_verbatim_mark> meaning there's a tunnel from <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>, traveling through this path requires <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> seconds and it is only available every <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> seconds, starting from time 0 (i.e. <SPAN CLASS="MATH">0, <I>C</I>, 2 <TT>*</TT> <I>C</I>, 3 <TT>*</TT> <I>C</I>...</SPAN> <tex2html_verbatim_mark> seconds).<P>Two successive inputs are separated by a blank line. <SPAN CLASS="MATH"><I>N</I> =</SPAN> <tex2html_verbatim_mark> <TT>0</TT>, <SPAN CLASS="MATH"><I>M</I> =</SPAN> <tex2html_verbatim_mark> <TT>0</TT>, <SPAN CLASS="MATH"><I>K</I> =</SPAN> <tex2html_verbatim_mark> <TT>0</TT>, <SPAN CLASS="MATH"><I>T</I> =</SPAN> <tex2html_verbatim_mark> <TT>0</TT> indicates the end of input and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For every test case, you should output one integer on a separate line, the total time we need to reach <SPAN CLASS="textit">Sullust</SPAN> in the format as indicated in the sample output; output <TT>-1</TT> if no such path can be found.<P><P><P><BR><SPAN CLASS="textbf">Explanation for Sample Input / Output</SPAN><P><P><BR>The <SPAN CLASS="MATH">1<SUP>st</SUP></SPAN> <tex2html_verbatim_mark> shortest path in this example is <SPAN CLASS="MATH">0 <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \rightarrow$"> 4</SPAN> <tex2html_verbatim_mark>, with a total travel time of 4 seconds; the <SPAN CLASS="MATH">2<SUP>nd</SUP></SPAN> <tex2html_verbatim_mark> shortest path is 0 (Wait 2 seconds) <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> 2 (Wait 2 seconds) <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> 4, with a total travel time of 18 seconds; the <SPAN CLASS="MATH">3<SUP>rd</SUP></SPAN> <tex2html_verbatim_mark> shortest path is 0 (Wait 2 seconds) <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> 2 (Wait 2 seconds) <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> 3 <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> 0 <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3696img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> 4, with a total travel time of 28 seconds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 9 2 2 
1 2 5 5 
2 4 6 6 
0 2 1 8 
1 4 4 3 
3 0 1 8 
1 3 5 10
0 4 4 4 
2 3 3 4 
3 1 5 10

10 0 0 0 

0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:  28
Case 2:  -1
</PRE><P>
______________________________________________________
3697||||||false||||||
<P><BLOCKQUOTE><SPAN CLASS="textit">``There is no denying the clues. They are clearly there; you can't miss them. But are we interpreting the clues correctly? That is where the author tricks us. There are most definitely more than one way to look at a clue and what it signifies, but the way the author has laid them out, (like a breadcrumb trail) we are inclined to believe they lead us to the end conclusion . . ." </SPAN></BLOCKQUOTE><P><P><BR>You have been reading Harry Potter series for some time. Since the final book will not be out in the store until 2007, and you are curious about what could happen in the final book of the series, you have decided to do some guessing by yourself. After rereading the series for some days, you have divided every piece of information you currently have into three categories:<P><DL COMPACT><DT>A.</DT><DD><SPAN CLASS="textit">Extracts.</SPAN> Extracts are taken from the previous published books in the series, and you don't need to check for their validities;</DD><DT>B.</DT><DD><SPAN CLASS="textit">Assumptions.</SPAN> Assumptions are based on different interpretations of other assumptions / extracts from the books. An assumption is plausible if and only if some of the assumptions (or extracts from the book) this assumption relies on are interpreted in ways that support this assumption. No assumption requires itself to be plausible, whether directly or indirectly.</DD><DT>C.</DT><DD><SPAN CLASS="textit">Theories.</SPAN> Theories are based on extracts and assumptions. If all the extracts and assumptions one theory depends on are believable and interpreted to support this theory, then we say this theory can be argued as believable.</DD></DL><P>Note that extracts and assumptions may have many different exclusive explanations leading to other theories and/or assumptions.<P>Because of personal preferences, you want to see some scenes in the next book come true much more than the others, thus you have assigned different values to different theories, each being an exponent of 2, less or equal to <SPAN CLASS="MATH">2<SUP>(number&nbsp;of&nbsp;theories-1)</SUP></SPAN> <tex2html_verbatim_mark> . You want to know what the maximal possible value of theories that can be argued as believable at the same time is; furthermore, since the less guesswork you do, the more reliable your theories are, you are interested in the minimum number of explanations you must make to make all those theories acceptable. Can you accomplish this seemingly impossible task?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several cases, each followed by a blank line.<P>Each test case starts with three integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3697img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3697img1.png ALT="$ \le$">1000, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3697img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3697img1.png ALT="$ \le$">5000, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3697img1.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3697img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, the number of extracts from the book, the number of assumptions and the number of theories, respectively.<P>The following part describes extracts and assumptions. Extracts are always described before assumptions. Each description starts with one string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, the name of the <SPAN CLASS="textit">extract / assumption</SPAN>, and an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> in the next line, the number of different explanations you have come up with; <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> lines follow, on each line there is a string <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>, the explanation which leads to another <SPAN CLASS="textit">assumption / theory</SPAN>.<P>The next part of test case consists of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> descriptions of theories. Each description starts with one string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, the name of the theory, followed by one integer <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> , the value which you have assigned to this theory.<P>Two successive descriptions are separated by a line with one single character `<TT>-</TT>'. It is guaranteed that the total numbers of explanations which extracts and assumptions have does not exceed 50000, and you may assume every string's length is less or equal to 20, and only consists of letters from alphabet and numbers <SPAN CLASS="MATH">0...9</SPAN> <tex2html_verbatim_mark>.<P><SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>K</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of input file and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For every test case, output the maximum value followed by the minimum number of explanations you have to make in the format as indicated in the sample output. Print all the plausible theories (with the maximum total value) on the following lines. Separate the result of two successive inputs with one blank line.<P><P><P><BR><SPAN CLASS="textbf">Explanation for Sample Input / Output</SPAN><P><P><BR>In order to make <TT>Theory1</TT> believable, <TT>Extract1</TT>, <TT>Extract2</TT>, <TT>Assumption1</TT>, and <TT>Assumption3</TT>'s explanations must be <TT>Assumption1</TT>, <TT>Assumption3</TT>, <TT>Theory1</TT> and <TT>Theory1</TT>, respectively. Thus the total number of explanations we must make is <TT>4</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 3 1 
Extract1 
2 
Assumption1 
Assumption2 
-
Extract2 
2 
Assumption2 
Assumption3 
-
Assumption1 
2 
Assumption2 
Theory1 
-
Assumption2 
0 
-
Assumption3 
1 
Theory1 
-
Theory1 
1 

0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
1 
4 
Theory1
</PRE><P>
______________________________________________________
3698||||||false||||||
<P>It is the 22<SPAN CLASS="MATH"><SUP>th</SUP></SPAN> <tex2html_verbatim_mark> century, and machines with supreme artificial intelligence have conquered the world. Humans are kept alive by a computer controlled program, the Matrix, for no other purpose than providing energy to the machines. Only a small group of freedom fighters have escaped the Matrix and built a secret resist base, Zion, near the core of the earth. However the machines have discovered this and send down millions of sentinels to destroy Zion.<P>The underground world is actually the sewers of the previous cities in ruin -- gigantic tunnels connecting the ground, Zion, and various other intersections. However all sewers have been destroyed when the machines first conquered the mankind. Because of limited time, the sewers have been repaired by people from Zion such that there will always be no more than one path from one intersection to another. No tunnel connects an intersection to itself. The best weapon we have is EMP (electromagnetic pulse) charge, an extremely powerful weapon to use against machines. Blowing an EMP charge will cause any electronic device within its range to stop functioning, therefore destroying the machines within range completely. However it can also cause another EMP charge within the range to malfunction, so the distance between any two EMP charges must be no less than their range.<P>The council has decided to put EMP on certain intersections to minimize the possibility of the machines destroying Zion. Since our resources are limited, we can only afford to put EMP charges on certain intersections of the underground tunnels. Deploying an EMP charge on a certain intersection has a non-negative cost. What is the maximal distance you can cover with EMP charges, and what's the minimum cost to achieve that maximal distance?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case starts with three integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3698img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3698img1.png ALT="$ \le$">300, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3698img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3698img1.png ALT="$ \le$">3000)</SPAN> <tex2html_verbatim_mark>, the number of intersections, the number of edges, and the range of each EMP charge, respectively. Intersections are numbered from 0 to <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>. The following line consists of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers, the cost of deploying an EMP charge on intersection <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines each consists of three integers <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3698img1.png ALT="$ \le$"><I>S</I>, <I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3698img1.png ALT="$ \le$"><I>N</I> - 1, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3698img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3698img1.png ALT="$ \le$">20000)</SPAN> <tex2html_verbatim_mark>, meaning that intersection <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> are connected by a tunnel whose length is <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>. Every test case ends with one blank line indicating the end of test case.<P><SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>D</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of input file and should not be processed by your system.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output two integers in the format as indicated in the sample output: the maximum distance EMPs can cover and the minimum cost you've found on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 1 3 
5 6 
1 0 6 

0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 6 11
</PRE><P>
______________________________________________________
3699||||||false||||||
<P>We believe that every inhabitant of this universe eventually will find a way to live together in harmony and peace; that trust, patience, kindness and loyalty will exist between every living being of this earth; people will find a way to appreciate and cooperate with each other instead of continuous bickering, arguing and fighting. Harmony -- the stage of society so many people dream of and yet it seems so far away from now <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark><P>Fortunately, the method of unlocking the key to true Harmony is just discovered by a group of philosophers. It is recorded on a strange meteorite which has just hit the earth. You need to decipher the true meaning behind those seemingly random symbols <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> More precisely, you are to write a program which will support the following two kinds of operation on an initially empty set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>:<P><DL COMPACT><DT>1.</DT><DD><SPAN CLASS="MATH"><I>B</I>&nbsp;<I>X</I></SPAN> <tex2html_verbatim_mark>: Add number <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> to set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="MATH"><I>K</I><SUP>th</SUP></SPAN> <tex2html_verbatim_mark> command in the form of <SPAN CLASS="MATH"><I>B</I>&nbsp;<I>X</I></SPAN> <tex2html_verbatim_mark> always happens at time <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, and number <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> does not belong to set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> before this operation.</DD><DT>2.</DT><DD><SPAN CLASS="MATH"><I>A</I>&nbsp;<I>Y</I></SPAN> <tex2html_verbatim_mark> : Of all the numbers in set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> currently, find the one which has the minimum remainder when divided by <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>. In case a tie occurs, you should choose the one which appeared latest in the input. Report the time when this element is inserted.</DD></DL><P>It is said that if the answer can be given in the minimum possible time, true Harmony can be achieved by human races. You task is to write a program to help us.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case starts with one integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3699img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3699img1.png ALT="$ \le$">40000</SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> lines each describe an operation, either in the form of ``<SPAN CLASS="MATH"><I>B</I>&nbsp;<I>X</I></SPAN> <tex2html_verbatim_mark>" or ``<SPAN CLASS="MATH"><I>A</I>&nbsp;<I>Y</I></SPAN> <tex2html_verbatim_mark>" where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3699img1.png ALT="$ \le$"><I>X</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/36/3699img1.png ALT="$ \le$">500000</SPAN> <tex2html_verbatim_mark>.<P><SPAN CLASS="MATH"><I>T</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of input file and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print the result of each test case in the format as indicated in the sample output. For every line in the form of ``<SPAN CLASS="MATH"><I>A</I>&nbsp;<I>Y</I></SPAN> <tex2html_verbatim_mark>", you should output one number, the requested number, on a new line; output <TT>-1</TT> if no such number can be found. Separate the results of two successive inputs with one single blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
B 1 
A 5 
B 10 
A 5 
A 40 
2 
B 1 
A 2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
1 
2 
1 

Case 2: 
1
</PRE><P>
______________________________________________________
3700||||||false||||||
<P>Harry is a Junior middle student. He is very interested in the story told by his mathematics teacher about the Yang Hui triangle in the class yesterday. After class he wrote the following numbers to show the triangle our ancestor studied.<P><P><BR><DIV ALIGN="CENTER"></DIV><PRE>
                         1
                    1         1
                1        2        1
            1       3         3       1
         1      4        6        4      1
      1     5       10        10      5     1
   1     6      15       20       15     6     1
1     7     21      35        35      21    7     1
                       ......
</PRE><DIV ALIGN="CENTER"></DIV><P><P><BR>He found many interesting things in the above triangle. It is symmetrical, and the first and the last numbers on each line is 1; there are exactly i numbers on the line i.<P>Then Harry studied the elements on every line deeply. Of course, his study is comprehensive.<P>Now he wanted to count the number of elements which are the multiple of 3 on each line. He found that the numbers of elements which are the multiple of 3 on line 2, 3, 4, 5, 6, 7, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> are 0, 0, 2, 1, 0, 4, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> So the numbers of elements which are not divided by 3 are 2, 3, 2, 4, 6, 3, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> , respectively. But he also found that it was not an easy job to do so with the number of lines increasing. Furthermore, he is not satisfied with the research on the numbers divided only by 3. So he asked you, an erudite expert, to offer him help. Your kind help would be highly appreciated by him.<P>Since the result may be very large and rather difficult to compute, you only need to tell Harry the last four digits of the result.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case contains two numbers <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> , <!-- MATH
 $(P < 1000, N \le 10^{9})$
 --><SPAN CLASS="MATH">(<I>P</I> &lt; 1000, <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3700img1.png ALT="$ \le$">10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is a prime number and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is a positive decimal integer.<P><SPAN CLASS="MATH"><I>P</I> =</SPAN> <tex2html_verbatim_mark> <TT>0</TT>, <SPAN CLASS="MATH"><I>N</I> =</SPAN> <tex2html_verbatim_mark> <TT>0</TT> indicates the end of input file and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the last four digits of the number of elements on the <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> <tex2html_verbatim_mark> line on Yang Hui Triangle which can not be divided by <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> in the format as indicated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 4 
3 48 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:  0004
Case 2:  0012
</PRE><P>
______________________________________________________
3701||||||false||||||
<P>When John studied the timed automaton, he met the problem about how to trigger the machine. With the problem deeply studied, he found that it can be ascribed to the clock constraints of the timed automaton. The timed automation in question is described below:<P>The clock variables, or simply clocks, are variables whose values are integers. Of course, time passes at the same rate for all clocks, and any clock can be reset to zero. John uses <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> to denote the finite set of clocks, and defines the clock constraints for <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> as follows:<P><P><BR><DL COMPACT><DT>(1)</DT><DD>All inequalities of the form <SPAN CLASS="MATH"><I>t</I>#<I>c</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>c</I>#<I>t</I></SPAN> <tex2html_verbatim_mark> are clock constraints, where <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> is a clock, <SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark> is either <SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$ \le$"></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is an integer.</DD><DT>(2)</DT><DD>If <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>A</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> are clock constraints, then <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB> <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$ \wedge$"> <I>A</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is a clock constraint.</DD></DL><P><P><BR>John notes that a clock constraint can define several regions in some multidimensional space. He wants to know such regions, so he defines the clock zones recursively as follows.<P><P><!-- MATH
 \begin{displaymath}
A=x<c | x \le c|c<x|c \le x|x-y <c|x-y \le c | A_{1} \wedge A_{2}
\end{displaymath}
 --></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I> = <I>x</I> &lt; <I>c</I>| <I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$\displaystyle \le$"><I>c</I>| <I>c</I> &lt; <I>x</I>| <I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$\displaystyle \le$"><I>x</I>| <I>x</I> - <I>y</I> &lt; <I>c</I>| <I>x</I> - <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$\displaystyle \le$"><I>c</I>| <I>A</I><SUB>1</SUB> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$\displaystyle \wedge$"> <I>A</I><SUB>2</SUB></DIV><P><tex2html_verbatim_mark></P><P>For simplicity, he let <SPAN CLASS="MATH"><I>C</I><SUB>0</SUB> = <I>C</I> <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$ \cup$"> {<I>x</I><SUB>0</SUB>}</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>x</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> is a reference clock whose value is always 0. The clock zone <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> can be described by a Difference Bound Matrix <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> (called a <SPAN CLASS="textit">DBM</SPAN>) which is a matrix <SPAN CLASS="MATH">(<I>D</I><SUB>ij</SUB>)</SPAN> <tex2html_verbatim_mark> of size <SPAN CLASS="MATH">| <I>C</I><SUB>0</SUB>|&#215;| <I>C</I><SUB>0</SUB>|</SPAN> <tex2html_verbatim_mark>. Each <SPAN CLASS="MATH"><I>D</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> has the form <SPAN CLASS="MATH">(<I>d</I><SUB>ij</SUB>,#)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>d</I><SUB>ij</SUB> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$ \in$"> <I>Z</I> <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$ \cup$"> {$}</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $\# \in \{<,\le \}$
 --><SPAN CLASS="MATH"># <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$ \in$"> { &lt; ,<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$ \le$">}</SPAN> <tex2html_verbatim_mark>. The value of <SPAN CLASS="MATH"><I>D</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> can be evaluated in the following form:<P>For every inequality <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> - <I>x</I><SUB>j</SUB>#<I>d</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> in clock zone <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, let <SPAN CLASS="MATH"><I>D</I><SUB>ij</SUB> = (<I>d</I><SUB>ij</SUB>,#)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> are two clocks. If the bound of <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> - <I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> is unknown, let <!-- MATH
 $D_{ij} = (\$, <)$
 --><SPAN CLASS="MATH"><I>D</I><SUB>ij</SUB> = ($, &lt; )</SPAN> <tex2html_verbatim_mark>.<P>For example, DBM of the clock zone given by <!-- MATH
 $x_{1} - x_{2} < 2 \wedge 0 < x_{2} \le 2 \wedge 1 \le x_{1}$
 --><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> - <I>x</I><SUB>2</SUB> &lt; 2 <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$ \wedge$"> 0 &lt; <I>x</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$ \le$">2 <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png ALT="$ \wedge$"> 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \le$"><I>x</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> is shown
below: ï£« 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<!-- MATH
 $\left ( \begin{array}{ccc}
\texttt{(0, <=)} & \texttt{(-1, <=)} & \texttt{(0, <)} \\
\texttt{(\$, <)} & \texttt{(0, <=)} & \texttt{(2, <)} \\ï£­
\texttt{(2, <=)} & \texttt{(\$, <)} & \texttt{(0, <=)} \\
\end{array} \right )$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="20" HEIGHT="84" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \left(\vphantom{ \begin{array}{ccc}
\texttt{(0, &lt;=)} &amp; \texttt{(-1, &lt;=)} &amp; \te...
...texttt{(2, &lt;=)} &amp; \texttt{(\$, &lt;)} &amp; \texttt{(0, &lt;=)} \\
\end{array} }\right.$"><IMG
 WIDTH="254" HEIGHT="82" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \begin{array}{ccc}
\texttt{(0, &lt;=)} &amp; \texttt{(-1, &lt;=)} &amp; \texttt{(0, &lt;)} \\  ...
...\  ï£­
\texttt{(2, &lt;=)} &amp; \texttt{(\$, &lt;)} &amp; \texttt{(0, &lt;=)} \\
\end{array}$"><IMG
 WIDTH="20" HEIGHT="84" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \left.\vphantom{ \begin{array}{ccc}
\texttt{(0, &lt;=)} &amp; \texttt{(-1, &lt;=)} &amp; \te...
...texttt{(2, &lt;=)} &amp; \texttt{(\$, &lt;)} &amp; \texttt{(0, &lt;=)} \\
\end{array} }\right)$"></SPAN>
<tex2html_verbatim_mark>
</DIV>

<P>

<P>
<BR>
The representation of a clock zone by a DBM is not unique. In this example, there are some implied constraints that are not reflected in the DBM. Since <!-- MATH
 $x_{1} - x_{2} < 2$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> - <I>x</I><SUB>2</SUB> &lt; 2</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $x_{2} \le 2$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>2</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \le$">2</SPAN>
<tex2html_verbatim_mark>, it must be the case <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> &lt; 4</SPAN>
<tex2html_verbatim_mark>. Since <SPAN CLASS="MATH"><I>x</I><SUB>0</SUB> = 0</SPAN>
<tex2html_verbatim_mark>, the original <!-- MATH
 $D_{10} = (\$, <)$
 -->
<SPAN CLASS="MATH"><I>D</I><SUB>10</SUB> = ($, &lt; )</SPAN>
<tex2html_verbatim_mark> can be changed into <!-- MATH
 $D_{10} = (4, <)$
 -->
<SPAN CLASS="MATH"><I>D</I><SUB>10</SUB> = (4, &lt; )</SPAN>
<tex2html_verbatim_mark>. Such adjusting operation is called the tighten operation. 

<P>
Now John wants to do the similar adjusting operations of difference bounds for all clocks <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN>
<tex2html_verbatim_mark> until further application of this tighten operation does not change the matrix. John obtains the following new canonical difference bound matrix: ï£« ï£¶ 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<!-- MATH
 $\left ( \begin{array}{ccc}
\texttt{(0, <=)} & \texttt{(-1, <=)} & \texttt{(0, <)} \\
\texttt{(4, <)} & \texttt{(0, <=)} & \texttt{(2, <)} \\ï£­
\texttt{(2, <=)} & \texttt{(1, <)} & \texttt{(0, <=)} \\
\end{array} \right )$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="20" HEIGHT="84" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \left(\vphantom{ \begin{array}{ccc}
\texttt{(0, &lt;=)} &amp; \texttt{(-1, &lt;=)} &amp; \te...
...\texttt{(2, &lt;=)} &amp; \texttt{(1, &lt;)} &amp; \texttt{(0, &lt;=)} \\
\end{array} }\right.$"><IMG
 WIDTH="253" HEIGHT="82" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \begin{array}{ccc}
\texttt{(0, &lt;=)} &amp; \texttt{(-1, &lt;=)} &amp; \texttt{(0, &lt;)} \\  ...
...\\  ï£­
\texttt{(2, &lt;=)} &amp; \texttt{(1, &lt;)} &amp; \texttt{(0, &lt;=)} \\
\end{array}$"><IMG
 WIDTH="20" HEIGHT="84" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \left.\vphantom{ \begin{array}{ccc}
\texttt{(0, &lt;=)} &amp; \texttt{(-1, &lt;=)} &amp; \te...
...\texttt{(2, &lt;=)} &amp; \texttt{(1, &lt;)} &amp; \texttt{(0, &lt;=)} \\
\end{array} }\right)$"></SPAN>
<tex2html_verbatim_mark>
</DIV>

<P>

<P>
<BR>
Note that some clock zone may contain contrary conditions and has not canonical difference bound matrix. 

<P>
But John can not obtain a canonical difference bound matrix for a complex clock zone. He asks for your help.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file is a single integer <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le T \le 20)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \le$"><I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark>, which is the number of test
cases you must process, followed by <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases: 

<P>
Each test case consists of several lines. Four integers <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> are given on each line, representing a constraint <!-- MATH
 $x_{i} - x_{j} < d$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> - <I>x</I><SUB>j</SUB> &lt; <I>d</I></SPAN>
<tex2html_verbatim_mark> or <!-- MATH
 $x_{i} - x_{j} \le d (0 \le i, j \le m, -10000 < d < 10000)$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> - <I>x</I><SUB>j</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \le$"><I>d</I> (0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \le$"><I>i</I>, <I>j</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \le$"><I>m</I>, -10000 &lt; <I>d</I> &lt; 10000)</SPAN>
<tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>r</I> = 0</SPAN>
<tex2html_verbatim_mark>, then this line represents an inequality in the form of <!-- MATH
 $x_{i} - x_{j} < d$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> - <I>x</I><SUB>j</SUB> &lt; <I>d</I></SPAN>
<tex2html_verbatim_mark>, otherwise it represents an inequality in the form of <!-- MATH
 $x_{i} - x_{j} \le d$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> - <I>x</I><SUB>j</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \le$"><I>d</I></SPAN>
<tex2html_verbatim_mark>. The maximal index <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> of clocks indicates that the indexes of the clocks are <!-- MATH
 $0, 1, \ldots, m, (1 \le m \le 100)$
 -->
<SPAN CLASS="MATH">0, 1,..., <I>m</I>,(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3701img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>. Note that you have to get the value of <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> by yourself. 

<P>
A symbol # given on a single line indicates the end of a test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, first output ``<TT>Case</TT> #<TT>:</TT>" on a single line, where # is the case number starting from 1. Print a blank line after each test case. 

<P>
For each test case, output the description of the canonical difference bound matrix. If it doesn't have a canonical difference bound matrix, print ``<TT>Canonical DBM does not exist.</TT>" (without quotes); If it has a such canonical difference bound matrix, print the matrix in the format as indicated in the sample output. Every element <SPAN CLASS="MATH"><I>D</I><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark> of the matrix should be written in the form <!-- MATH
 $(d_{ij} , \#)$
 -->
<SPAN CLASS="MATH">(<I>d</I><SUB>ij</SUB>,#)</SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH">#</SPAN>
<tex2html_verbatim_mark> is either <TT>&lt;</TT> or <TT>&lt;=</TT>. If the bound of <!-- MATH
 $x_{i} - x_{j}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> - <I>x</I><SUB>j</SUB></SPAN>
<tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN>
<tex2html_verbatim_mark> is unknown, print <TT>($,&lt;)</TT> at the position <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN>
<tex2html_verbatim_mark>. Two consecutive elements on each row should be separated by a single space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
1 2 2 0 
0 2 0 0 
2 0 2 1 
0 1 -1 1
#
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 
(0,&lt;=) (-1,&lt;=) (0,&lt;) 
(4,&lt;) (0,&lt;=) (2,&lt;) 
(2,&lt;=) (1,&lt;=) (0,&lt;=)

______________________________________________________
3702||||||false||||||
<P>ASCII art is an art of creating pictures with a grid of ASCII characters. There are many styles of ASCII art, but we are interested in the most primitive one, where just an overall character density is used to represent differently shaded areas of the picture.<P>You should write a proof-of-concept program that renders a filled closed polygon with a rectangular grid of ASCII characters. The whole process is explained in detail below.<P>Let <SPAN CLASS="MATH"><I>OXY</I></SPAN> <tex2html_verbatim_mark> be a Cartesian coordinate system with <SPAN CLASS="MATH"><I>OX</I></SPAN> <tex2html_verbatim_mark> pointing to the right and <SPAN CLASS="MATH"><I>OY</I></SPAN> <tex2html_verbatim_mark> pointing up. Drawing canvas is bounded with (0, 0) - (<SPAN CLASS="MATH"><I>w</I>, <I>h</I></SPAN> <tex2html_verbatim_mark>) rectangle. Pixels on the canvas are <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> - <SPAN CLASS="MATH">(<I>x</I> + 1, <I>y</I> + 1)</SPAN> <tex2html_verbatim_mark> squares where <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> are integers such that <!-- MATH
 $0 \le x < w$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="$ \le$"><I>x</I> &lt; <I>w</I></SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 \le y < h$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="$ \le$"><I>y</I> &lt; <I>h</I></SPAN> <tex2html_verbatim_mark>. A filled closed polygon without selfintersections and self-touchings (but not necessarily convex) is drawn on the canvas. Pixels of the canvas become partially filled during the process. Each pixel is represented by an ASCII character depending on the percentage of its filled area according to the following table:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textit">Pixel percentage area filled</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textit">Character name</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textit">Glyph</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textit">ASCII code</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>From 0% inclusive to 25% exclusive</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Full stop</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>.</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>46</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>From 25% inclusive to 50% exclusive</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Plus sign</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>+</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>43</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>From 50% inclusive to 75% exclusive</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Small letter o</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>o</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>111</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>From 75% inclusive to 100% exclusive</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Dollar sign</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>$</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>36</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>100%</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Number sign</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>#</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>35</TD></TR></TBODY></TABLE></DIV><P><P><BR>The resulting ASCII characters for all pixels are printed top-to-bottom and left-to-right to get a visual representation of the drawing.<P><DIV ALIGN="CENTER"><IMG WIDTH="281" HEIGHT="255" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="\epsfbox{p3702.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </B><P><P><P><BR><P>The first line of the input contains integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="$ \le$">100, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="$ \le$"><I>w</I>, <I>h</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> -- number of vertices in the polygon, width and height of the canvas respectively. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain coordinates of the polygon vertices in clockwise order. Point <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is described by two integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="$ \le$"><I>x</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="$ \le$"><I>w</I>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="$ \le$"><I>y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3702img1.png ALT="$ \le$"><I>h</I>)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>Write to the output <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> lines with <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> ASCII characters each that represent ASCII art drawing of the given polygon.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 8 7 
7 6 
1 0 
1 7 
5 5 
2 4 
2 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
.$+..... 
.##$+... 
.#$oo+.. 
.#+$o... 
.##o.... 
.#o..... 
.o......
</PRE><P>
______________________________________________________
3703||||||false||||||
<P>In the world of telecommunications phone calls to different phone numbers have to be charged using different rate or different billing plan. International Carrier of Phone Communications (ICPC) has an antique billing table that determines which phone call has to be charged using which billing plan.<P>Each international phone number has 11 digits. The billing table has <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines. Each line specifies a range of prefixes of phone numbers like ``<TT>7919 - 921</TT>". This specification means that all phone numbers starting from 7919, 7920, and 7921 match this line. A billing plan name is specified for each prefix. To determine a billing plan for a call, the table is scanned from top to bottom and the first matching line determines the billing plan. If no match is found, the phone number is invalid and no billing plan is needed. A special billing plan named ``<TT>invalid</TT>" (without quotes) is used as an alternative way to define invalid phone numbers. Some billing plans are used for quite differently looking phone numbers and their names may be specified on difffferent lines in different places of the table.<P>ICPC's billing table is old and contains many entries. Some of those entries may not be even used anymore. It is very hard to figure out which phone numbers each billing plan is actually used for. The ICPC's management has reached a decision to transform this billing table into a more legible format. In this new format table consists of the lexicographically ordered list of simple prefixes (without the ``-" range feature of the old format) with a billing plan name for each prefix. No prefix of this new billing table should be a prefix of any other prefix from the table. Thus, a simple dictionary lookup (binary search, for example) will be sufficient to figure out a billing plan for a given phone number. Finding all phone numbers for a given billing plan will also become quite a simple task. The number of lines in the new billing table should be minimized. Billing plan named ``<TT>invalid</TT>" should not be present in the new billing table at all, since invalid phone numbers will be denoted by absence of the corresponding prefix in the new billing table.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </B><P><P><P><BR><P>The first line of the input contains a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3703img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3703img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> -- the number of lines in the old billing table. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describe the old billing table with one rule on a line. Each rule contains four tokens separated by spaces -- prefix <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, minus sign (``<TT>-</TT>"), prefix <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, and billing plan name. Prefixes contain from 1 to 11 digits each, and the billing plan name contains from 1 to 20 lower case letters.<P>Further, let us denote with <SPAN CLASS="MATH">| <I>A</I>|</SPAN> <tex2html_verbatim_mark> the number of digits in the prefix <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>. It is true that <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3703img1.png ALT="$ \le$">| <I>B</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3703img1.png ALT="$ \le$">| <I>A</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3703img1.png ALT="$ \le$">11</SPAN> <tex2html_verbatim_mark>. Moreover, last <SPAN CLASS="MATH">| <I>B</I>|</SPAN> <tex2html_verbatim_mark> digits of prefix <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> form a string that is lexicographically equal or precedes <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>.<P>Such pair of prefixes <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> matches all phone numbers with the first <SPAN CLASS="MATH">| <I>A</I>|</SPAN> <tex2html_verbatim_mark> - <SPAN CLASS="MATH">| <I>B</I>|</SPAN> <tex2html_verbatim_mark> digits matching the first digits of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and with the following <SPAN CLASS="MATH">| <I>B</I>|</SPAN> <tex2html_verbatim_mark> digits being lexicographically between the last <SPAN CLASS="MATH">| <I>B</I>|</SPAN> <tex2html_verbatim_mark> digits of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> (inclusive).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>Write to the output file a single integer number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> -- the minimal number of lines that the new table should contain to describe the given old billing table. Then write <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines with the lexicographically ordered new billing table. Write two tokens separated by a space on each line -- the prefix and the billing plan name. Note, that the prefix in the new billing table shall contain at least one digit.<P>If all phone numbers are invalid (every phone number has no matching line or matches line with billing plan ``<TT>invalid</TT>") then the output file should contain just number zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 
7919 - 921 cell 
7921800 - 999 priv 
1 - 1 usa 
760 - 9 rsv 
7928 - 29 rsv 
7600 - 7899 spec 
73 - 77 invalid 
7 - 7 cis
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
35 
1 usa 
70 cis 
71 cis 
72 cis 
76 rsv 
77 spec 
78 spec 
790 cis 
7910 cis 
7911 cis 
7912 cis 
7913 cis 
7914 cis 
7915 cis 
7916 cis 
7917 cis 
7918 cis 
7919 cell 
7920 cell 
7921 cell 
7922 cis 
7923 cis 
7924 cis 
7925 cis 
7926 cis 
7927 cis 
7928 rsv 
7929 rsv 
793 cis 
794 cis 
795 cis 
796 cis 
797 cis 
798 cis 
799 cis
</PRE><P>
______________________________________________________
3704||||||false||||||
<P>A <SPAN CLASS="textit">cellular automaton</SPAN> is a collection of cells on a grid of specified shape that evolves through a number of discrete time steps according to a set of rules that describe the new state of a cell based on the states of neighboring cells. The <SPAN CLASS="textit">order of the cellular automaton</SPAN> is the number of cells it contains. Cells of the automaton of order <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P>The <SPAN CLASS="textit">order of the cell</SPAN> is the number of different values it may contain. Usually, values of a cell of order <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> are considered to be integer numbers from 0 to <SPAN CLASS="MATH"><I>m</I> - 1</SPAN> <tex2html_verbatim_mark>.<P>One of the most fundamental properties of a cellular automaton is the type of grid on which it is computed. In this problem we examine the special kind of cellular automaton -- circular cellular automaton of order <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> with cells of order <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. We will denote such kind of cellular automaton as <SPAN CLASS="MATH"><I>n</I>, <I>m</I> - <I>automaton</I></SPAN> <tex2html_verbatim_mark>.<P>A distance between cells <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>n</I>, <I>m</I></SPAN> <tex2html_verbatim_mark>-automaton is defined as min <SPAN CLASS="MATH">(| <I>i</I> - <I>j</I>|, <I>n</I> - | <I>i</I> - <I>j</I>|)</SPAN> <tex2html_verbatim_mark>. A <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>-<SPAN CLASS="textit">environment of a cell</SPAN> is the set of cells at a distance not greater than <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>.<P>On each <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>-<SPAN CLASS="textit">step</SPAN> values of all cells are simultaneously replaced by new values. The new value of cell <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> after <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>-step is computed as a sum of values of cells belonging to the <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>-enviroment of the cell <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> modulo <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>.<P>The following picture shows 1-step of the 5,3-automaton.<P><DIV ALIGN="CENTER"><IMG WIDTH="447" HEIGHT="191" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3704.jpg ALT="\epsfbox{p3704.eps}"> <tex2html_verbatim_mark></DIV><P>The problem is to calculate the state of the <SPAN CLASS="MATH"><I>n</I>, <I>m</I></SPAN> <tex2html_verbatim_mark>-automaton after <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>-steps.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases, each of them consists of two lines, as described below.<P>The first line of the input contains four integer numbers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 500, 1 \le m \le 1 000 000, 0 \le d < {n \over 2} , 1 \le k
\le 10 000 000)$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3704.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3704.jpg ALT="$ \le$">500, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3704.jpg ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3704.jpg ALT="$ \le$">1000000, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3704.jpg ALT="$ \le$"><I>d</I> &lt; <IMG WIDTH="16" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3704.jpg ALT="$ {n \over 2}$">, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3704.jpg ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3704.jpg ALT="$ \le$">10000000)</SPAN> <tex2html_verbatim_mark>. The second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integer numbers 2 from 0 to <SPAN CLASS="MATH"><I>m</I> - 1</SPAN> <tex2html_verbatim_mark> -- initial values of the automaton's cells.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, write to the output, on a line by itself, the values of the <SPAN CLASS="MATH"><I>n</I>, <I>m</I></SPAN> <tex2html_verbatim_mark>-automaton's cells after <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>-steps.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 3 1 1 
1 2 2 1 2 
5 3 1 10 
1 2 2 1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 2 2 2 1 
2 0 0 2 2
</PRE><P>
______________________________________________________
3705||||||false||||||

<P>
Contrary to the popular belief, alien flying saucers cannot fly 
arbitrarily around our planet Earth. Their touch down and take off 
maneuvers are extremely energy consuming, so they carefully plan their mission 
to Earth to touch down in one particular place, then hover above the 
ground carrying out their mission, then take off. It was all so easy 
when human civilization was in its infancy, since flying saucers can 
hover above all the trees and building, and their shortest path from one 
mission point to the other was usually a simple straight line -- the 
most efficient way to travel. However, modern cities have so tall 
skyscrapers that flying saucers cannot hover above them and the task of 
navigating modern city became quite a complex one. You were hired by an alien 
spy to write a piece of software that will ultimately give flying 
saucers driving directions throughout the city. As your first assignment 
(to prove your worth to your alien masters) you should write a program 
that computes the shortest distance for a flying saucer from one point 
to another. This program will be used by aliens as an aid in planning 
of mission energy requirements. 

<P>
The problem is simplified by several 
facts. First of all, since flying saucer can hover above most of the 
buildings, you are only concerned with locations of skyscrapers. Second, 
the problem is actually twodimensional -- you can look at everything 
``from above" and pretend that all objects are situated on <SPAN CLASS="MATH"><I>OXY</I></SPAN>
<tex2html_verbatim_mark> 
Cartesian plane. Flying saucer is represented by a circle of radius <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark>, and 
since modern cities with skyscrapers tend to be regular, every skyscraper 
is represented with a rectangle whose sides are parallel to <SPAN CLASS="MATH"><I>OX</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>OY</I></SPAN>
<tex2html_verbatim_mark> 
axes. 

<P>
By definition, the location of flying saucer is the location of 
its center, and the length of the path it travels is the length of the 
path its center travels. During its mission flying saucer can touch 
skyscrapers but it cannot intersect them. 

<P>
At the first picture a flying 
saucer of <SPAN CLASS="MATH"><I>r</I> = 1</SPAN>
<tex2html_verbatim_mark> has to get from point <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> to point <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>. The straight dashed 
line would have been the shortest path if not for skyscraper 1. The 
shortest way to avoid skyscraper 1 is going around its top right corner, 
but skyscraper 2 is too close to fly there. Thus, the answer is to go 
around the bottom left corner of skyscraper 1 for a total path length of 
10.570796. 

<P>
In the second picture it is impossible for a flying saucer 
of <SPAN CLASS="MATH"><I>r</I> = 2</SPAN>
<tex2html_verbatim_mark> to get from point <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> to point <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>, since all skyscrapers are too 
close to fly in between them. 

<P>
In the third picture flying saucer of <SPAN CLASS="MATH"><I>r</I> = 1</SPAN>
<tex2html_verbatim_mark> has to fly in a slalom-like way around two skyscrapers in order to 
achieve the shortest path of length 11.652892 between <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3705.eps}$
 -->
<IMG
 WIDTH="946" HEIGHT="307" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3705.jpg
 ALT="\epsfbox{p3705.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several test cases, each of them as described below.

<P>
The first line of the input file contains integer numbers <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1
\le r \le 100, 0 \le n \le 30)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3705.jpg
 ALT="$ \le$"><I>r</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3705.jpg
 ALT="$ \le$">100, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3705.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3705.jpg
 ALT="$ \le$">30)</SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> is the radius of the flying 
saucer, and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of skyscrapers. The next line contains four 
integer numbers <SPAN CLASS="MATH"><I>x</I><SUB>A</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>A</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>B</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>y</I><SUB>B</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(-1000 \le x_{A}, y_{A}, x_{B}, y_{B} \le 1000)$
 -->
<SPAN CLASS="MATH">(- 1000<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3705.jpg
 ALT="$ \le$"><I>x</I><SUB>A</SUB>, <I>y</I><SUB>A</SUB>, <I>x</I><SUB>B</SUB>, <I>y</I><SUB>B</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3705.jpg
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>, where <!-- MATH
 $(x_{A}
, y_{A})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>A</SUB>, <I>y</I><SUB>A</SUB>)</SPAN>
<tex2html_verbatim_mark> are the coordinates of the starting point of the flying 
saucer's mission and <!-- MATH
 $(x_{B}, y_{B})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>B</SUB>, <I>y</I><SUB>B</SUB>)</SPAN>
<tex2html_verbatim_mark> are the coordinates of its finishing point. 

<P>
The following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines describe skyscrapers. Each skyscraper is 
represented by four integer numbers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $y_{2} (-1000 \le x_{1}, y_{1}, x_{2}, y_{2} \le 1000, x_{1} < x_{2} , y_{1} < y_{2})$
 -->
<SPAN CLASS="MATH"><I>y</I><SUB>2</SUB>(- 1000<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3705.jpg
 ALT="$ \le$"><I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3705.jpg
 ALT="$ \le$">1000, <I>x</I><SUB>1</SUB> &lt; <I>x</I><SUB>2</SUB>, <I>y</I><SUB>1</SUB> &lt; <I>y</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark> -- coordinates of the corners 
of the corresponding rectangle. 

<P>
Skyscrapers neither intersect nor touch 
each other. Starting and finishing points of the flying saucer's 
mission are valid locations for flying saucer, that is, it does not 
intersect any skyscraper in those points, but may touch some of them.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, write to the output a line with the text ``<TT>no solution</TT>" (without quotes) if 
the flying saucer cannot reach its finishing point from the starting 
one. Otherwise, write to the output a line with a single number -- the 
shortest distance that the flying saucer needs to travel to get from the 
starting point to the finishing point. Answer has to be precise to at 
least 6 digits after the decimal point.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1 3 
2 7 7 1 
3 2 6 4 
7 5 9 8 
1 8 5 9 
2 4 
0 0 5 6 
8 3 10 6 
5 9 9 10 
1 4 2 8 
3 1 5 3 
1 2 
0 5 10 5 
2 2 4 5 
6 5 8 8
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10.570796 
no solution 
11.652892
</PRE>  

<P>

______________________________________________________
3706||||||false||||||
<P>You are taking part in a large project to automate operations for Northeastern Exchange of Resources and Commodities (NEERC). Different resources and commodities are traded on this exchange via public auction. Each resource or commodity is traded independently of the others and your task is to write a core engine for this exchange -- its order book. There is a separate instance of an order book for each traded resource or commodity and it is not your problem to get the correct orders into order books. The order book instance you will be writing is going to receive the appropriate orders from the rest of exchange system.<P>Order book receives a stream of <SPAN CLASS="textit">messages</SPAN>. Messages are <SPAN CLASS="textit">orders</SPAN> and requests to cancel previously issued orders. Orders that were not cancelled are called <SPAN CLASS="textit">active</SPAN>. There are orders to <SPAN CLASS="textit">buy</SPAN> and orders to <SPAN CLASS="textit">sell</SPAN>. Each order to buy or to sell has a positive <SPAN CLASS="textit">size</SPAN> and a positive <SPAN CLASS="textit">price</SPAN>. Order book maintains a list of active orders and generates <SPAN CLASS="textit">quotes</SPAN> and <SPAN CLASS="textit">trades</SPAN>. Active order to buy at the highest price is the best buy order and its price is called <SPAN CLASS="textit">bid</SPAN> price. Active order to sell at the lowest price is the best sell order and its price is called <SPAN CLASS="textit">ask</SPAN> price. Ask price is always lower than bid price, that is, buyers are willing to pay less than sellers want to receive in return.<P>A current quote from the order book contains current bid size, bid price, ask size, and ask price. Here bid and ask sizes are sums of the the sizes of all active orders with the current bid price and the current ask price correspondingly.<P>A trade records information about transaction between buyer and seller. Each trade has size and price.<P>If an order to buy arrives to the order book at a price greater or equal to the current ask price, then the corresponding orders are <SPAN CLASS="textit">matched</SPAN> and trade happens -- buyer and seller reached agreement on a price. Vice versa, if an order to sell arrives to the order book at a price less or equal to the current bid price, then trade happens, too. For the purpose of order matching, order book works like a FIFO queue for orders with the same price (read further for details).<P>When an order to buy arrives to the order book at a price greater or equal to the current ask price it is not immediately entered into the order book. First, a number of trades is generated, possibly reducing the size of incoming order. Trade is generated between incoming buy order and the best order to sell. If there are multiple best orders (at the ask price), then the order that entered the order book first is chosen. Trade is generated at the current ask price with the size of the trade being equal to the smaller of the sizes of two matching orders. Sizes of both matching orders are reduced by the size of the trade. If that reduces the size of sell order to zero, then it becomes inactive and is removed from the order book. If the size of incoming buy order becomes zero, then the process is over -- incoming order becomes inactive. If the size of incoming buy order is still positive and there is another sell order to match with, then the process continues generating further trades at the new ask price (ask price can increase as sell orders are traded against and become inactive). If there is no sell order to match with (current ask price became greater than incoming buy order price), then incoming buy order is added to the order book with its remaining size.<P>For incoming sell order everything works similarly -- it is matched with buy orders from the order book and trades are generated on bid price.<P>On incoming cancel request the corresponding order is simply removed from the order book and becomes inactive. Note, that by the time of the cancel request the quantity of the corresponding order might have been already partially reduced or the order might have become inactive. Requests to cancel inactive order do not change anything in the order book.<P>On every incoming message the order book has to generate all trades it causes and the current quote (bid size, bid price, ask size, ask price) after processing of the corresponding message, even when nothing has changed in the order book as a result of this message. Thus, the number of quotes the order book generates is always equal to the number of incoming messages.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </B><P><P><P><BR><P>The first line of the input contains a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3706img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3706img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark> -- the number of incoming messages that the order book has to process. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain messages. Each line starts with a word describing the message type -- <TT>BUY</TT>, <TT>SELL</TT>, or <TT>CANCEL</TT> followed after a space by the message parameters.<P><TT>BUY</TT> and <TT>SELL</TT> denote an order to buy or to sell correspondingly, and are followed by two integers <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3706img1.png ALT="$ \le$"><I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3706img1.png ALT="$ \le$">99999, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3706img1.png ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3706img1.png ALT="$ \le$">99999)</SPAN> <tex2html_verbatim_mark> -- order size and price. <TT>CANCEL</TT> denotes a request to cancel previously issued order. It is followed by a single integer <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> which is the number of the message with some preceding order to buy or to sell (messages are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>Write to the output a stream of quotes and trades that the incoming messages generate. For every trade write <TT>TRADE</TT> followed after space by the trade size and price. For every quote write <TT>QUOTE</TT> followed after space by the quote bid size, bid price, minus sign (``<TT>-</TT>"), ask size, ask price (all separated by spaces).<P>There is a special case when there are no active orders to buy or to sell in the order book (bid and/or ask are not defined). This case is treated as follows. If there is no active order to buy, then it is assumed that bid size is zero and bid price is zero. If there is no active order to sell, then it is assumed that ask size is zero and ask price is 99 999. Note, that zero is not a legal price, but 99 999 is a legal price. Recipient of quote messages distinguishes actual 99 999 ask price from the special case of absent orders to sell by looking at its ask size.<P>See example for further clarification.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
11 
BUY 100 35 
CANCEL 1 
BUY 100 34 
SELL 150 36 
SELL 300 37 
SELL 100 36 
BUY 100 38 
CANCEL 4 
CANCEL 7 
BUY 200 32 
SELL 500 30
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
QUOTE 100 35 - 0 99999 
QUOTE 0 0 - 0 99999 
QUOTE 100 34 - 0 99999 
QUOTE 100 34 - 150 36 
QUOTE 100 34 - 150 36 
QUOTE 100 34 - 250 36 
TRADE 100 36 
QUOTE 100 34 - 150 36 
QUOTE 100 34 - 100 36 
QUOTE 100 34 - 100 36 
QUOTE 100 34 - 100 36 
TRADE 100 34 
TRADE 200 32 
QUOTE 0 0 - 200 30
</PRE><P>
______________________________________________________
3707||||||false||||||

<P>
A card game, often called ``Fool's Game", is quite popular in Russia. We will describe a game 
for two players. A standard deck of 36 cards is used. One suit is declared to be a <SPAN  CLASS="textit">trump</SPAN>. 

<P>
A game consists of rounds. Before the round each 
player has several cards, one of the players is <SPAN  CLASS="textit">starting</SPAN>, the other one is 
<SPAN  CLASS="textit">covering</SPAN>. The starting player starts by laying one or several cards of 
the same rank down on the table. The number of cards must not exceed 
the number of cards the covering player has. The covering player must in 
turn <SPAN  CLASS="textit">cover</SPAN> all the cards with some of her cards, laying them on the 
table above the uncovered cards. A card can cover another if one of the 
following is true: 

<P>

<UL>
<LI>it has the same suit and higher rank (ranks are ordered as usually: 6, 7, 8, 9, 10, J, Q, K, A); 
</LI>
<LI>it is a trump and the card to cover is not a trump (a trump can only be covered by a higher trump). 
</LI>
</UL>

<P>
After the cards on the table are all covered, the starting 
player can <SPAN  CLASS="textit">toss</SPAN> some more cards to be covered. The rank of each card tossed 
must be among the ranks of the cards already on the table at the 
moment. Now the newly added cards must be covered by the covering player, 
after that the starting player can toss more cards, and so on. The 
starting player cannot toss more cards than the covering player has at the 
moment. 

<P>
The round ends when either the covering player cannot or does not 
want to cover all uncovered cards on the table, or when the starting 
player cannot or does not want to toss more cards. 

<P>
In the first case, when the covering player declares that she does not want to cover all 
uncovered cards on the table, the starting player is given a chance to 
toss in more cards. The ranks of the cards tossed must be among the ranks 
of the cards already on the table. The number of uncovered cards on the 
table cannot exceed the number of cards that the covering player has at 
the moment. After that, the covering player loses the round and takes 
all the cards from the table, adding them to her cards. Starting player 
keeps her starting role and moves again in the next round. 

<P>
In the second case, when all cards on the table are covered and the starting player 
cannot or does not want to toss more cards, the covering player wins 
the round and the cards on the table are removed from the game. The 
players' roles for the next round are swapped: the covering player becomes 
the starting one and vice versa. 

<P>
If, after the end of the round, one of the players has no cards, and the other one has one or more cards, then 
the player with no cards wins the game. If both players have no cards, 
then the player who was starting in the last round wins the game. 

<P>
Given the trump suit and the cards the players initially have, find out who 
wins the game if both play optimally. Both players have full 
information about cards in the game.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several test cases, each of them consists of three lines as described below.

<P>
The first line of the input contains <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> -- the number of 
cards that each of the players has in the beginning of the round <!-- MATH
 $(1 \le
n_{1} , n_{2} \le 6)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3707img1.png
 ALT="$ \le$"><I>n</I><SUB>1</SUB>, <I>n</I><SUB>2</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3707img1.png
 ALT="$ \le$">6)</SPAN>
<tex2html_verbatim_mark>, and the trump suit (suit is specified using one 
letter: `<TT>S</TT>' for spades, `<TT>C</TT>' for clubs, `<TT>D</TT>' for diamonds, `<TT>H</TT>' 
for hearts). 

<P>
The second line contains <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> card descriptions -- the 
cards of the first player. Each card is specified by its rank (`<TT>6</TT>' <SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark> 
`<TT>9</TT>', `<TT>T</TT>' for 10, `<TT>J</TT>' for Jack, `<TT>Q</TT>' for Queen, `<TT>K</TT>' 
for King, `<TT>A</TT>' for Ace) followed by its suit. The third line 
contains <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> card descriptions -- the cards of the covering player. The first 
player is the starting player in the first round. 

<P>
All cards in players' hands are different.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, write to the output, on a line by itself, ``<TT>FIRST</TT>" if the first player wins the game, or ``<TT>SECOND</TT>" 
if the second player does. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 2 S 
KC AD 
6S 7S 
2 2 D 
KC AD 
6S 7S 
4 5 C 
AS 6S 7S 8S 
9S TS JS QS KS 
3 2 C 
6H JS 
JD AD 6C
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
SECOND 
FIRST
SECOND
FIRST
</PRE> 

<P>

______________________________________________________
3708||||||false||||||
<P>Programming contests became so popular in the year 2397 that the governor of New Earck -- the largest human-inhabited planet of the galaxy -- opened a special Alley of Contestant Memories (ACM) at the local graveyard. The ACM encircles a green park, and holds the holographic statues of famous contestants placed equidistantly along the park perimeter. The alley has to be renewed from time to time when a new group of memorials arrives.<P>When new memorials are added, the exact place for each can be selected arbitrarily along the ACM, but the equidistant disposition must be maintained by moving some of the old statues along the alley.<P>Surprisingly, humans are still quite superstitious in 24th century: the graveyard keepers believe the holograms are holding dead people souls, and thus always try to renew the ACM with minimal possible movements of existing statues (besides, the holographic equipment is very heavy). Statues are moved along the park perimeter. Your work is to find a renewal plan which minimizes the sum of travel distances of all statues. Installation of a new hologram adds no distance penalty, so choose the places for newcomers wisely!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file contains several test cases, each of them consists of a a line that contains two integer numbers: <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> -- the number of holographic statues initially located at the ACM, and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> -- the number of statues to be added <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3708img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3708img1.png ALT="$ \le$">1000, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3708img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3708img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. The length of the alley along the park perimeter is exactly 10 000 feet.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, write to the output a line with a single real number -- the minimal sum of travel distances of all statues (in feet). The answer must be precise to at least 4 digits after decimal point.<P><DIV ALIGN="CENTER"><IMG WIDTH="984" HEIGHT="217" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3708img1.png ALT="\epsfbox{p3708.eps}"> <tex2html_verbatim_mark></DIV><P>Pictures show the first three examples. Marked circles denote original statues, empty circles denote new equidistant places, arrows denote movement plans for existing statues.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 1 
2 3 
3 1 
10 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1666.6667 
1000.0 
1666.6667 
0.0
</PRE><P>
______________________________________________________
3709||||||false||||||
<P>John is a Chief Executive Officer at a privately owned medium size company. The owner of the company has decided to make his son Scott a manager in the company. John fears that the owner will ultimately give CEO position to Scott if he does well on his new manager position, so he decided to make Scott's life as hard as possible by carefully selecting the team he is going to manage in the company.<P>John knows which pairs of his people work poorly in the same team. John introduced a <SPAN CLASS="textit">hardness factor</SPAN> of a team -- it is a number of pairs of people from this team who work poorly in the same team divided by the total number of people in the team. The larger is the hardness factor, the harder is this team to manage. John wants to find a group of people in the company that are harderst to manage and make it Scott's team. Please, help him.<P><DIV ALIGN="CENTER"><IMG WIDTH="230" HEIGHT="230" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="\epsfbox{p3709.eps}"> <tex2html_verbatim_mark></DIV><P>In the example on the picture the hardest team consists of people 1, 2, 4, and 5. Among 4 of them 5 pairs work poorly in the same team, thus hardness factor is equal to <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ {\frac{{5}}{{4}}}$"></SPAN> <tex2html_verbatim_mark> . If we add person number 3 to the team then hardness factor decreases to <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ {\frac{{6}}{{5}}}$"></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </B><P><P><P><BR><P>The first line of the input contains two integer numbers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ \le$">100, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. Here <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is a total number of people in the company (people are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>), and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the number of pairs of people who work poorly in the same team. Next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines describe those pairs with two integer numbers <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ \le$"><I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ \le$"><I>n</I>, <I>a</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ \neq$"> <I>b</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> on a line. The order of people in a pair is arbitrary and no pair is listed twice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>Write to the output an integer number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3709.jpg ALT="$ \le$"><I>n</I>)</SPAN> <tex2html_verbatim_mark> -- the number of people in the hardest team, followed by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines listing people from this team in ascending order. If there are multiple teams with the same hardness factor then write any one.<P>Note, that in the last example any team has hardness factor of zero, and any non-empty list of people is a valid answer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 6 
1 5 
5 4 
4 2 
2 5 
1 2 
3 1 

4 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
1 
2 
4 
5 

1 
1
</PRE><P>
______________________________________________________
3710||||||false||||||

<P>
There are two serious problems in the Kingdom of Lipshire: the roads and the fools 
who build them. Once upon a time, the King of Lipshire has decided to 
improve the road system because some roads became completely impassable 
-- it was easier to travel cross-country instead of using those roads. 

<P>
By King's decree, new roads are to be built in Lipshire. Of course, 
the new road system must interconnect all towns, i. e. there must be a 
path connecting any two towns of Lipshire. 

<P>
The road administration of 
Lipshire has resources to build exactly one road per year. Unfortunately, 
the fools who build these roads are completely out of control. So, 
regardless of the orders given, the fools randomly select two different 
towns <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> and build a road between them, even when those towns are 
already connected by a road. All possible choices are equiprobable. The 
road is build in such a manner that the only points where a traveler can 
leave it are the towns connected by this road. The only good thing is 
that all roads are bidirectional. 

<P>
The King knows about the problem, but 
he cannot do anything about it. The only thing King needs to know is 
the expected number of years to wait before the road system of Lipshire 
becomes interconnected. He asked you to provide this information.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<B>The input will contain several test cases, each of them as described below.
Consecutive test cases are separated by a single blank line.
</B>

<P>

<P><P>
<BR>

<P>
The first line of the input contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(2 \le n \le 30, 0 \le m \le 1 000)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3710img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3710img1.png
 ALT="$ \le$">30, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3710img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3710img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> --
 the number of towns in Lipshire, and the 
number of roads which are still good. The following <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines describe 
roads, one per line. Each road is described with two endpoints -- two 
integer numbers <SPAN CLASS="MATH"><I>u</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le u_{i} , v_{i} \le n, u_{i} \neq v_{i})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3710img1.png
 ALT="$ \le$"><I>u</I><SUB>i</SUB>, <I>v</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3710img1.png
 ALT="$ \le$"><I>n</I>, <I>u</I><SUB>i</SUB> <IMG
 WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3710img1.png
 ALT="$ \neq$"> <I>v</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark>. There can be 
multiple roads between two towns, but the road from a town to itself is not 
allowed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the expected number of years to wait for the interconnected road 
system. If the system is already interconnected, output zero as an 
answer. Output the number, on a line by itself, with at least six precise digits after the 
decimal point.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 1 
1 2 

4 2 
1 2 
3 4
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0.0 
1.5
</PRE> 

<P>

______________________________________________________
3711||||||false||||||

<P>
Apologists of Java and C++ can argue for hours proving each other that 
their programming language is the best one. Java people will tell that 
their programs are clearer and less prone to errors, while C++ people 
will laugh at their inability to instantiate an array of generics or 
tell them that their programs are slow and have long source code. 

<P>
Another issue that Java and C++ people could never agree on is identifier 
naming. In Java a multiword identifier is constructed in the following 
manner: the first word is written starting from the small letter, and the 
following ones are written starting from the capital letter, no 
separators are used. All other letters are small. Examples of a Java 
identifier are <TT>javaIdentifier</TT>, <TT>longAndMnemonicIdentifier</TT>, <TT>name</TT>, <TT>nEERC</TT>. 

<P>
Unlike them, C++ people use only small letters in their identiÃ¯Â¬Âers. To 
separate words they use underscore character `<TT>-</TT>'. Examples of C++ 
identifiers are <TT>c_identifier</TT>, <TT>long_and_mnemonic_identifier</TT>, <TT>name</TT> (you see 
that when there is just one word Java and C++ people agree), <TT>n_e_e_r_c</TT>. 

<P>
You are writing a translator that is intended to translate C++ programs 
to Java and vice versa. Of course, identifiers in the translated 
program must be formatted due to its language rules -- otherwise people will 
never like your translator. 

<P>
The first thing you would like to write is 
an identifier translation routine. Given an identifier, it would 
detect whether it is Java identifier or C++ identifier and translate it 
to another dialect. If it is neither, then your routine should report an 
error. Translation must preserve the order of words and must only 
change the case of letters and/or add/remove underscores.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several test cases, each of them consists of one line that contains an identifier. It 
consists of letters of the English alphabet and underscores. Its length 
does not exceed 100.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, and on a line by itself:

<P>
If the input identifier is Java identifier, output its C++ version. 

<P>
If it is C++ identifier, output its Java version. 

<P>
If it is none, output 
``<TT>Error!</TT>" instead.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
long_and_mnemonic_identifier 
anotherExample 
i 
bad_Style
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
longAndMnemonicIdentifier 
another_example 
i 
Error!
</PRE> 

<P>

______________________________________________________
3712||||||false||||||

<P>
A research laboratory of a world-leading automobile company has received an order to 
create a special transmission mechanism, which allows for incredibly 
efficient kickdown -- an operation of switching to lower gear. After several 
months of research engineers found that the most efficient solution 
requires special gears with teeth and cavities placed non-uniformly. They 
calculated the optimal flanks of the gears. Now they want to perform 
some experiments to prove their findings. 

<P>
The first phase of the experiment is done with planar toothed sections, not round-shaped gears. A 
section of length <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> consists of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> units. The unit is either a cavity of 
height <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark> or a tooth of height <SPAN CLASS="MATH">2<I>h</I></SPAN>
<tex2html_verbatim_mark>. Two sections are required for the 
experiment: one to emulate master gear (with teeth at the bottom) and one 
for the driven gear (with teeth at the top).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3712a.eps}$
 -->
<IMG
 WIDTH="843" HEIGHT="179" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3712a.jpg
 ALT="\epsfbox{p3712a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
There is a long stripe of width <SPAN CLASS="MATH">3<I>h</I></SPAN>
<tex2html_verbatim_mark> in the laboratory and its length is 
enough for cutting two engaged sections together. The sections are 
irregular but they may still be put together if shifted along each other.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3712b.eps}$
 -->
<IMG
 WIDTH="842" HEIGHT="128" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3712a.jpg
 ALT="\epsfbox{p3712b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The stripe is made of an expensive alloy, so the engineers want to use 
as little of it as possible. You need to Ã¯Â¬Ând the minimal length of 
the stripe which is enough for cutting both sections simultaneously.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several test cases, each of them as described below.

<P>
There are two lines in the input, each contains a string to 
describe a section. The first line describes master section (teeth at the 
bottom) and the second line describes driven section (teeth at the top). 
Each character in a string represents one section unit -- 1 for a 
cavity and 2 for a tooth. The sections can not be flipped or rotated. 

<P>
Each string is non-empty and its length does not exceed 100.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, write to the output a line containing
a single integer number -- the minimal 
length of the stripe required to cut off given sections.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2112112112 
2212112 
12121212 
21212121 
2211221122 
21212
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 
8 
15

______________________________________________________
3713||||||false||||||
<P>The Bandulu Space Agency (BSA) has plans for the following three space missions:<P><UL><LI>Mission A: Landing on Ganymede, the largest moon of Jupiter. </LI><LI>Mission B: Landing on Callisto, the second largest moon of Jupiter. </LI><LI>Mission C: Landing on Titan, the largest moon of Saturn. </LI></UL><P>Your task is to assign a crew for each mission. BSA has trained a number of excellent astronauts; everyone of them can be assigned to any mission. However, if two astronauts hate each other, then it is not wise to put them on the same mission. Furthermore, Mission A is clearly more prestigious than Mission B; who would like to go to the second largest moon if there is also a mission to the largest one? Therefore, the assignments have to be done in such a way that only young, inexperienced astronauts go to Mission B, and only senior astronauts are assigned to Mission A. An astronaut is considered <SPAN CLASS="textit">young</SPAN> if their age is less than the average age of the astronauts and an astronaut is <SPAN CLASS="textit">senior</SPAN> if their age is at least the averageage. Every astronaut can be assigned to Mission C, regardless of their age (but you must not assign two astronauts to the same mission if they hate each other).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing two integers <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3713img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3713img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3713img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3713img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>. The number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of astronauts. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines specify the age of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> astronauts; each line contains a single integer number between 0 and 200. The next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains two integers each, separated by a space. A line containing <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3713img1.png ALT="$ \le$"><I>i</I>, <I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3713img1.png ALT="$ \le$"><I>n</I>)</SPAN> <tex2html_verbatim_mark> means that the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th astronaut and the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th astronaut hate each other.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output n lines, each containing a single letter. This letter is either `<TT>A</TT>', `<TT>B</TT>', or `<TT>C</TT>'. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line describes which mission the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th astronaut is assigned to. Astronauts that hate each other should not be assigned to the same mission, only young astronauts should be assigned to Mission B and only senior astronauts should be assigned to Mission A. If there is no such assignment, then output the single line `<TT>No solution.</TT>' (without quotes).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
16 20
21
22
23
24
25
26
27
28
101
102
103
104
105
106
107
108
1 2
3 4
5 6 
7 8
9 10
11 12
13 14
15 16
1 10
2 9
3 12
4 11
5 14
6 13 
7 16
8 15
1 12
1 13
3 16
6 15
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
B
C
C
B
C
B
C
B
A
C
C
A
C
A
C
A
</PRE><P>
______________________________________________________
3714||||||false||||||
<P>The Widget Corporation has developed the greatest technological advance of the century: the megawidget. The megawidget uses revolutionary new technologies, thus completely new factories have to be built. The megawidget consists of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> subunits; each subunit will be produced in a different factory. Widget production requires large amount of water, thus the new factories will be located on the banks of the Purple River. Widget Corporation located <SPAN CLASS="MATH">2<I>n</I></SPAN> <tex2html_verbatim_mark> suitable sites where factories can be built and there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> sites on each bank of the river (see the figure below). During the production of a widget, certain subunits should be moved very quickly from one factory to another. Unfortunately, it is impossible to build roads between the factories, since the terrain is too rough. Therefore, the only way you can move subunits between two factories if you build a bridge connecting them. By definition, a bridge has to cross the river, thus you cannot build a bridge that connects two factories on the same bank. Furthermore, due to technological limitations, two bridges cannot cross each other. The figure shows a possible layout of 6 factories and 5 bridges.<P><DIV ALIGN="CENTER"><IMG WIDTH="728" HEIGHT="268" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3714.jpg ALT="\epsfbox{p3714.eps}"> <tex2html_verbatim_mark></DIV><P>You are given a list specifying which pairs of factories should be connected by bridges, and your task is to find a location for each factory such that the bridges can be built without crossing. If this is not possible, then you can reduce the number of bridges by using helicopters between two factories (the two factories connected by helicopters can be on the same bank or they can be on opposite banks). Helicopters are very expensive, so we can afford to replace at most 2 bridges with helicopters. Therefore, your task is to replace exactly 2 bridges with helicopters, and build the remaining bridges in such a way that they do not cross.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing two integers: <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3714.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3714.jpg ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>, the number of factories, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3714.jpg ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3714.jpg ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>, the number of pairs that have to be connected. The next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains two integers each, separated by a space. A line containing <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3714.jpg ALT="$ \le$"><I>i</I>, <I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3714.jpg ALT="$ \le$"><I>n</I>)</SPAN> <tex2html_verbatim_mark> means that the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th factory and the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th factory have to be connected (either by a bridge or by a helicopter connection). It is not sufficient that <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> can be reached from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> via a series of bridges, it is important to have a direct connection between the two factories.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, if there is a solution, then you have to output 2 lines specifying the pairs of factories that are to be connected by helicopters. Each of these two lines contains a pair of integers, separated by space. If it is not possible to solve the problem with 2 helicopters, then output the single line `<TT>No solution.</TT>' (without quotes).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 7
1 2
2 3
2 4
2 5
3 6
4 7
5 8
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 3
3 6
</PRE><P>
______________________________________________________
3715||||||false||||||
<P>In the monastery of Hotoshopp, the monks perform a mysterious ritual every midnight. The exact details of this centuries-old ritual is secret, but it is known that at the beginning of the ritual (exactly at midnight) several chimes are sounded at the same time. There are many chimes in the monastery, but there are only <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> different types of chimes. Every chime produces a perfect triangle wave (see below for details) and chimes of the same type produce exactly the same sound. A Type 1 chime produces a sound of frequency 10Hz and the frequency of a Type <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> chime is double the frequency of a Type <SPAN CLASS="MATH"><I>i</I> - 1</SPAN> <tex2html_verbatim_mark> chime.<P>Usually not all the chimes are sounded during the ritual; there are very strict rules that determine which combination of chimes are sounded at midnight on a given day. Your task is to write a program that, given a digital recording of the sound, determines which chimes were used.<P>The input contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> sound samples which describe the sound, starting at midnight. The sampling rate is exactly twice the frequency of the chime with the highest frequency. For example, if there are <SPAN CLASS="MATH"><I>n</I> = 4</SPAN> <tex2html_verbatim_mark> chimes, then the Type 4 chimes have frequency 80Hz, thus there are 160 samples per second. If the sampling frequency is <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark>, then the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th sample is taken<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>t</I>(<I>i</I>) : = <IMG WIDTH="19" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3715img1.png ALT="$\displaystyle {\frac{{i}}{{f}}}$"> - <IMG WIDTH="26" HEIGHT="56" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3715img1.png ALT="$\displaystyle {\frac{{12}}{{f}}}$"></DIV><P><tex2html_verbatim_mark></P>seconds after midnight <SPAN CLASS="MATH">(<I>i</I> = 1, 2,..., <I>m</I>)</SPAN> <tex2html_verbatim_mark>. That is, the samples are taken once every <SPAN CLASS="MATH">1/<I>f</I></SPAN> <tex2html_verbatim_mark> seconds, and the first sample is taken <SPAN CLASS="MATH">1/(2<I>f</I> )</SPAN> <tex2html_verbatim_mark> seconds after midnight.<P>Each chime produces a sound wave that is a perfect triangle wave. The wave oscillates between 1 and -1 in each period. At midnight, the value of the sound wave is 0, and it is increasing. The sound of the chime will not change during the recording: it does not stop, it does not get quieter or louder. As an example, the figure below shows the triangle wave of a Type 1 chime. If the sampling rate is 80Hz, thenthe dashed vertical lines show the time points when a sample is taken.<P><DIV ALIGN="CENTER"><IMG WIDTH="843" HEIGHT="447" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3715img1.png ALT="\epsfbox{p3715.eps}"> <tex2html_verbatim_mark></DIV><P>The following table shows the values of the first 10 samples:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Sample number</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Sample time</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Sample value</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.00625</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.25</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.01875</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.75</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.03125</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.75</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.0435</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.25</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.05625</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-0.25</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.06825</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-0.75</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.08125</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-0.75</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.09325</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-0.25</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.10625</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.25</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.11875</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0.75</TD></TR></TBODY></TABLE></DIV><P><P><BR>If two chimes are sounded at the same time, then the two sound waves are simply added together; each sound sample is the sum of the corresponding two sound samples.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each test case begins with a line containing an integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3715img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3715img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, the number of chimes, and an integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3715img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3715img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>, the number of sound samples. The number of samples is always a power of 2, and it is sufficiently large such that the input contains at least one full period from the sound of each chime. The next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contain the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> sound samples: each line contains a real number.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program should output <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each line containing a single integer. The integer in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line should be the number Type <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> chimes that were sounded. It can be assumed that there are at most 1000 chimes of each type.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 32
13.5
30.5
39
27
18.5
-6.5
-11
-7 
7
11
6.5
-18.5
-27
-39
-30.5
-13.5
13.5
30.5
39 
27
18.5
-6.5
-11
-7
7
11
6.5
-18.5
-27
-39 
-30.5
-13.5
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
26
29
2
2
</PRE><P>
______________________________________________________
3716||||||false||||||
<P>A DNA sequence or genetic sequence is a succession of letters representing the primary structure of a real or hypothetical DNA molecule or strand, with the capacity to carry information. The possible letters are A, C, G, and T, representing the four nucleotide subunits of a DNA strand: adenine, cytosine, guanine and thymine bases covalently linked to phospho-backbone.<P>DNA sequences undergo mutations during the evolution of species, which means that some letters are randomly replaced with others. Therefore, the DNA sequences of two closely related species are very similar, and the difference increases as the distance between the species increases. The mutations do not occur with uniform frequency throughout the sequence; typically there are fewer mutations at the biologically important parts, since even a single mutation can be lethal at such a place. On the other hand, if a part of the sequence does not carry any biologically relevant information, then mutations on this part have no effect. It follows that if we compare the DNA sequences of two species and a particular region of the sequence contains fewer than the average number of mutations, then most probably this part of the sequence plays an important biological role. Therefore, it is of crucial importance to identify such regions. More precisely, a <SPAN CLASS="textit">conserved region</SPAN> is a consecutive interval of the DNA sequence such that in this region at most <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> percent of the letters are different in the two sequences. Your task is to write a program that, given two DNA sequences, finds the longest conserved region.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing two integers: <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3716img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3716img1.png ALT="$ \le$">150000</SPAN> <tex2html_verbatim_mark>, the length of the genetic sequences and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3716img1.png ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3716img1.png ALT="$ \le$">99</SPAN> <tex2html_verbatim_mark>, the maximum percentage of mutated letters allowed in a conserved region. This is followed by two lines, each containing a DNA sequence of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. The sequence contains only the letters `<TT>A</TT>', `<TT>C</TT>', `<TT>G</TT>', and `<TT>T</TT>'.<P>The input is terminated by a test case with <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a line containing a single integer: the length of the longest conserved region between the two sequences. If there are no conserved regions in the input, then output `<TT>No solution.</TT>' (without quotes).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
14 25
ACCGGTAACGTGAA
ACTGGATACGTAAA
14 24
ACCGGTAACGTGAA
ACTGGATACGTAAA
8 1
AAAAAAAA
CCCCCCCC
8 33
AAACAAAA
CCCCCCCC 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
7
No solution.
1
</PRE><P>
______________________________________________________
3717||||||false||||||
<P>After the very exciting 2006 ICPC finals in San Antonio (Texas), ACM has decided to start a new radio station that will broadcast news, music and useful programming tricks to the farmers in Texas. The radio station itself will not be in Texas; it will be located at Saratov State University (Russia), whose team won the 2006 finals. Who else could give better programming advice than the winners?<P>In order to reach every ranch in Texas, powerful antennas have to be installed at the radio station. These antennas are very expensive, and they can broadcast only at a limited angle. More precisely, the price of an antenna is proportional to the <SPAN CLASS="textit">square</SPAN> of the angle. The cheapest antenna can broadcast across a 1-degree range and costs 1 unit of money; the second cheapest broadcasts across a 2-degree range andcosts 4 units, etc. For example, if the radio station is at (0,0) and there are two ranches at (0, 2) and (2, 2), then a 45-degree antenna (costing 2025) can broadcast to both ranches at the same time, but a 44-degree antenna (costing 1936) can broadcast to at most one of the ranches. The angle of the antenna is always an integer, thus there are 360 different types of antennas.<P>Your task is to optimize the type and position of the antennas such that every ranch is reached and the total cost is minimized.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each block begins with a line containing two integers: <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3717img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3717img1.png ALT="$ \le$">5000</SPAN> <tex2html_verbatim_mark> is the number of ranches and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3717img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3717img1.png ALT="$ \le$">40</SPAN> <tex2html_verbatim_mark> is the maximum number of antennas that you can install. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain 2 integers each; they describe the coordinates of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> ranches (these numbers are between 0 and 100000). The location of the radio station is always (0, 0).<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a single line containing an integer, the minimum cost of broadcasting to all the ranches using at most <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> antennas.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2
0 2
2 0
2 2
3 3
0 2
2 0
2 2
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2026
3
</PRE><P>
______________________________________________________
3718||||||false||||||
<P>Travelling in the Infinite Desert is very difficult, dangerous, and boring. Without roads and railway tracks, camel riding is the only form of travel that is available between the cities of the desert. The Desert Development Committee has decided to build a super fast train to connect the cities. The train is so fast that it can go only on a perfectly straight track; even the slightest turn would result in a catastrophe. Therefore, the train track that will be built should be one straight line segment, which means that not every city will be reached by the train. Your task is to design the track in such a way that the number of people who can use the train is maximized. The citizens of a city can only use the train line if the track goes 1 km or closer to the city centre.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing a single integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3718img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3718img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>, the number of cities. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain two real numbers <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3718img1.png ALT="$ \le$"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3718img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>, the coordinates of the city (in km) and an integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3718img1.png ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3718img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>, the population of the city. It can be assumed that the distance between two cities is always more than 2 km.<P>The input is terminated by a test case with <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a line containing a single integer: the maximum number of people that the train can reach.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
10 10.4 100
11.0 20 250
9 30 120
20.5 20 200
4
10 10.4 100
11.0 20 250
9 30 120
20.5 20 250
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
470
500
</PRE>
______________________________________________________
3719||||||false||||||
<P>This year exactly <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> people bought land in Squareville_including you. When someone buys land, then the first thing they do is to plant grass on the land; everyone wants to make sure that their grass is greener than the neighbour's. Depending on the type of grass, planting it has a certain cost. The next thing to do is to build a fence around the land; the cost of the fence depends of the type of the fence (green or white, with or without barbed wire, electric or not, etc.) Everyone has a very particular idea about the type of grass and the type of fence they want. In fact, everyone firstly decided upon the type of grass and fence, and then bought the largest piece of land they could afford (i.e., they could buy the land, the grass, andthe fence). In Squareville, you can buy only square-shaped land, but you can buy any size you want. We assume that everyone plants grass across the whole area of land and everyone builds a fence around the full perimeter, i.e., on all four sides.<P>Having a larger garden means that you are more respected in Squareville. Therefore, you would like to know how many of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> people will have larger land than you. Your task is to write a program thatcalculates this number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing an integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3719img1.png ALT="$ \le$"><I>nle</I>10000</SPAN> <tex2html_verbatim_mark>, the number of people buying land and a real number <!-- MATH
 $0 < c < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>c</I> &lt; 100</SPAN> <tex2html_verbatim_mark>, the cost of a unit area of land. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describe the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> people; the first of these lines describes you. Each line contains three real numbers: the amount <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3719img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3719img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark> of money this person has, the cost <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3719img1.png ALT="$ \le$"><I>g</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3719img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> of a unit amount of grass this person plants, and the cost <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3719img1.png ALT="$ \le$"><I>f</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3719img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> of a unit length of fence this person builds.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>n</I> = <I>c</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a single integer: how many people have larger land than you. Thus, if you have the largest land, then output `<TT>0</TT>'; if you have the smallest land, then output <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 1
32.0 5.0 1.0
16.0 1.0 1.0
63.0 2.0 3.0
68.0 10.0 3.0
88.0 1.0 10.0
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
</PRE><P>
______________________________________________________
3720||||||false||||||
<P>Hackerland is a happy democratic country with <SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN> <tex2html_verbatim_mark> cities, arranged in a rectangular <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> grid and connected by <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> roads in the east-west direction and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> roads in the north-south direction. By public demand, this orthogonal road system is to be supplemented by a system of highways in sucha way that there will be a direct connection between any pair of cities. Each highway is a straight line going through two or more cities. If two cities lie on the same highway, then they are directly connected.If two cities are in the same row or column, then they are already connected by the existing orthogonal road system (each east-west road connects all the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> cities in that row and each north-south road connects all the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> cities in that column), thus no new highway is needed to connect them. Your task is to count the number of highway that has to be built (a highway that goes through several cities on a straight line is counted as a single highway).<P><DIV ALIGN="CENTER"><IMG WIDTH="703" HEIGHT="204" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3720.jpg ALT="\epsfbox{p3720.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each test case consists of a single line containing two integers <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3720.jpg ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3720.jpg ALT="$ \le$">300</SPAN> <tex2html_verbatim_mark>, specifying the number of cities. The input is terminated by a test case with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output one line containing a single integer, the number of highways that must be built.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 4
3 3
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
12
14
</PRE><P>
______________________________________________________
3721||||||false||||||
<P>The ideal holiday for many people involves being on the white sand of a sunny beach on a tropical island, drinking cocktails under the palm trees and swimming, snorkelling and diving in the clear blue waves. The Algorithmic Archipelago is the ideal place for such a holiday as it consists of countless beautiful islands. Since many tourists spend their holidays (and money) on these islands, you decided to enter the tourism industry and buy an island. The cost of an island is proportional to its area, but the number of tourists that visit an island is proportional to the length of its beaches, i.e., the perimeter of the island. Your task is to select the island where the profit per investment ratio is the highest: where the ratio of the perimeter and the area is maximum. Out of curiosity, you would like the determine the minimum of this ratio aswell.<P>In the input you are given the map of the archipelago as an <SPAN CLASS="MATH"><I>n</I>&#215;<I>n</I></SPAN> <tex2html_verbatim_mark> matrix. Each cell contains either water or land. An island is a connected area of land.<P><UL><LI>Two cells sharing only a corner are not considered to be neighbours. (Therefore, there are 3 islands in the sample input). </LI><LI>It can happen that an island contains one or more lakes. The perimeter of these lakes also contribute to the perimeter of the island. </LI><LI>It can happen that the lake on an island contains further islands. These are considered to be separate islands, and the area of these islands does not contribute to the area of the island containing them. </LI><LI>We assume that there is water in the area outside the map. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several blocks of test cases. Each case begins with a line containing a single integer <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3721img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3721img1.png ALT="$ \le$">400</SPAN> <tex2html_verbatim_mark>, the size of the map. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each containing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> characters. Character `<TT>.</TT>' means water and character `<TT>X</TT>' means land. It can be assumed that the map contains not only water. The input is terminated by a test case with <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a line containing two real numbers, separated by a space: the maximum and the minimum of the ratio of the perimeter and the area. To avoid rounding problems, we accept solutions with a maximum of <SPAN CLASS="MATH">&#177;0.001</SPAN> <tex2html_verbatim_mark> error.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8
....XXXX
.XXX.XXX
XX.XX...
XX...XX.
X.XXX.XX
X.XXX.XX
X....XX.
XXXXXX..
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1.923 1.66613
</PRE><P>
______________________________________________________
3722||||||false||||||
<P>According to ancient legends, deep in the Forest of Walking Trees lies a mystical cave called the Cave of Infinite Wealth. In the middle of a huge cavern there is a lake surrounded by stalactites and stalagmites. The dark, cold water of the lake has magical properties; if anyone tosses a gold coin into the lake at midnight and spends the night in the cave, then he will find that he has more money in the morning than he had in the evening. More precisely, if he had <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> gold coins (after tossing one into the water), then hewill have <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \alpha$"><I>x</I></SPAN> <tex2html_verbatim_mark> gold coins in the morning.<P>The famous adventurer Gorgon Rattlesnake spent many years finding the cave. As you can imagine, the exact location is a well-guarded secret. Finally, after studying countless old maps, consulting with many famous sages, and making heavy use of GPS technology, he managed to arrive at the entrance of the cave.<P>Gorgon Rattlesnake spent <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> nights in the cavern, tossing a coin into the lake each night. After <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> nights, he travelled to the bustling city of Tse'padub. In Tse'padub, he visited the jewellery shop, and bought diamond rings to make transporting his valuables easier. Each diamond ring costs <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> gold coins, and he bought as many diamond rings as he could.<P>So far he was lucky. But shortly after he left the jewellery shop, he was attacked by jewel-eating monsters. These monsters did not harm him, but they ate all the diamond rings. For this reason, Gorgon Rattlesnake was left with no other valuables than the remaining gold coins. How many gold coins does he have?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT> </H2><P>The input contains several blocks of test cases. Each case consists of four integers separated by spaces:<P><UL><LI>The number <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \le$">100000000</SPAN> <tex2html_verbatim_mark> of coins Gorgon Rattlesnake had when he arrived to the cave. </LI><LI>The number <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \le$"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \alpha$"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \le$">100000000</SPAN> <tex2html_verbatim_mark> that the gold coins are multiplied by each night. </LI><LI>The number <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \le$">100000000</SPAN> <tex2html_verbatim_mark> of nights Gorgon Rattlesnake spent in the cave. </LI><LI>The cost <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \le$">100000000</SPAN> <tex2html_verbatim_mark> of a diamond rings. </LI></UL><P>It can be assumed (for mysterious reasons) that <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is always a prime number.<P>The input is terminated by a block with <SPAN CLASS="MATH"><I>x</I> = <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3722img1.png ALT="$ \alpha$"> = <I>n</I> = <I>c</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you have to output a line containing a single integer: the number of gold coins Gorgon Rattlesnake has.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
52 7 1 691
27 4 56 379
94 7 63 103
38 2 88 557
62 11 86 433
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
357
198
82
177
394
</PRE><P>
______________________________________________________
3723||||||false||||||

<P>
In recent years it has become very fashionable to buy widgets and the demand for widgets increased above all expectations. In fact, the supply cannot keep up with the demand: every widgeteer is busy building widgets all day. The Association for Widget Production realized the problem and decided that new widgeteers have to be trained. Training widgeteers is a long process: a beginner's course on widgeteering lasts <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> days with a 2-hour training session on each day. Due to the lack of qualified teachers, only two group of students will be admitted to the course. To accommodate the different lifestyles of the students,the training sessions of the two groups take place at different times of the day. Each student is available only for a certain period of time on each day. Therefore, the assignment of the students into groups and the scheduling of the training sessions should be done in such a way that every student can attend every session.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several blocks of test cases. Each block begins with a line containing two integers: the number <!-- MATH
 $1 \le d \le 50$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3723img1.png
 ALT="$ \le$"><I>d</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3723img1.png
 ALT="$ \le$">50</SPAN>
<tex2html_verbatim_mark> of days the training lasts and the number <!-- MATH
 $1 \le n \le 8000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3723img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3723img1.png
 ALT="$ \le$">8000</SPAN>
<tex2html_verbatim_mark> of students. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines describe when the students are available. Each line contains <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> time periods, describing when the given student can attend a training session on the <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> days. A time period is given by a start time and end time separated by a dash. The time periods for the different days are separated by spaces. For example, aline beginning with `<TT>8:00-19:30 16:45-20:00</TT>' means that on the first day the student is available only between 8:00 and 19:30, while on the second day the student is available only between 16:45 and 20:00. Therefore, on the second day, the student can participate in a 2-hour training session that starts at 18:00,but it cannot participate in it if it starts at 18:01. 

<P>
The input is terminated by a block with <SPAN CLASS="MATH"><I>d</I> = <I>n</I> = 0</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, you have to output a way of assigning the students into two groups and a scheduling of the training sessions. Each of the first <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines of the output should contain the integer 1 or 2, depending on which group the given student is assigned to. The next <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> lines describe the scheduling of the training sessions. Each line contains two starting times (separated by a space): the starting times of the two training session on the given day. (Recall that each training session lasts exactly 120 minutes; the two training sessions can overlap). The starting time should be formatted like this: 9:45. A session cannot start later than 22:00 (i.e., it will end on the same day). If it is not possible to find a schedule that satisfies the requirements, then output `<TT>No solution.</TT>' (without quotes).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 4
8:00-13:30 7:00-16:30 9:20-18:20 16:00-19:20 9:10-17:45
12:00-16:10 14:22-18:30 9:11-17:45 10:10-18:10 10:30-14:20
9:10-17:00 12:30-15:40 10:30-13:00 9:10-18:00 9:00-13:00
8:00-18:20 9:30-17:30 11:01-19:20 9:31-12:20 9:30-14:00
5 4
8:00-13:30 7:00-16:30 9:20-18:20 16:00-19:20 11:10-17:45
12:00-16:10 14:22-18:30 9:11-17:45 10:10-18:10 10:30-14:20
9:10-17:00 12:30-15:40 10:30-13:00 9:10-18:00 9:00-13:00 
8:00-18:20 9:30-17:30 11:01-19:20 9:31-12:20 9:30-14:00
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
2
1
2
9:10 12:00
12:30 14:22
10:30 11:01
16:00 10:10
9:10 10:30 
No solution.

______________________________________________________
3724||||||false||||||
<P>An undirected graph is called a <EM>caterpillar</EM> if it is connected, has no cycles, and there is a path in the graph where every node is either on this path or a neighbor of a node on the path. This path is called the <EM>spine</EM> of the caterpillar and the spine may not be unique. You are simply going to check graphs to see if they are caterpillars.<P>For example, the left graph below is not a caterpillar, but the right graph is. One possible spine is shown by dots.<P><DIV ALIGN="CENTER"><IMG WIDTH="703" HEIGHT="215" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3724.jpg ALT="\epsfbox{p3724.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple test cases. Each test case starts with a line containing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of nodes, numbered 1 through <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (a value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark> indicates end-of-input). The next line will contain an integer <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> indicating the number of edges. Starting on the following line will be <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> pairs <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> indicating an undirected edge between nodes <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. This information may span multiple lines. You may assume that <SPAN CLASS="MATH"><I>n</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3724.jpg ALT="$ \leq$"> 100</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>e</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3724.jpg ALT="$ \leq$"> 300</SPAN> <tex2html_verbatim_mark>. Do not assume that the graphs in the test cases are connected or acyclic.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case generate one line of output. This line should either be<P><P><BR><TT>Graph <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> is a caterpillar.</TT><P><P><BR>or<P><P><BR><TT>Graph <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> is not a caterpillar.</TT><P><P><BR>as appropriate, where <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> is the number of the graph, starting at 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
22
21
1 2 2 3 2 4 2 5 2 6 6 7 6 10 10 8 9 10 10 12 11 12 12 13 12 17
18 17 15 17 15 14 16 15 17 20 20 21 20 22 20 19
16
15
1 2 2 3 5 2 4 2 2 6 6 7 6 8 6 9 9 10 10 12 10 11 10 14 10 13 13 16 13 
15
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Graph 1 is not a caterpillar.
Graph 2 is a caterpillar.
</PRE><P>
______________________________________________________
3725||||||false||||||
<P>The Pizazz Pizzeria prides itself in delivering pizzas to its customers as fast as possible. Unfortunately, due to cutbacks, they can afford to hire only one driver to do the deliveries. He will wait for 1 or more (up to 10) orders to be processed before he starts any deliveries. Needless to say, he would like to take the shortest route in delivering these goodies and returning to the pizzeria, even if it means passing the same location(s) or the pizzeria more than once on the way. He has commissioned you to write a program to help him.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. The first line will contain a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of orders to deliver, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3725img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3725img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>. After this will be <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> lines each containing <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> integers indicating the times to travel between the pizzeria (numbered 0) and the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> locations (numbers 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>). The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th value on the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line indicates the time to go directly from location <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to location <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> without visiting any other locations along the way. Note that there may be quicker ways to go from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> via other locations, due to different speed limits, traffic lights, etc. Also, the time values may not be symmetric, i.e., the time to go directly from location <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> may not be the same as the time to go directly from location <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. An input value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark> will terminate input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you should output a single number indicating the minimum time to deliver all of the pizzas and return to the pizzeria.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
0 1 10 10
1 0 1 2
10 1 0 10
10 2 10 0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
</PRE><P>
______________________________________________________
3726||||||false||||||
Benjamin 
Go to the Regionals</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The Association for Computing Machinery (ACM) is considering new rules 
for its regional programming contests, in part to solve some
software problems. For instance, the program that prints out the badges 
for each team was
designed so that the same font size is used to print all badges for 
that team. However,
this means that if one member of the team has a very long name, then a 
very small font will be
used to print all of the team's badges, and this wouldn't look very 
nice for someone with an
extremely short name like ``AL".

<P>
The initial solution proposed by the ACM was to put a limit on the 
length of contestants' names.
Someone pointed out that this would discriminate against teams from 
certain regions where
bigger names are more common (for instance, children in the home towns 
of well-known actors are
more likely to be named after that actor - imagine how many children 
in Oakland, California
have been named after the actor Mahershalalhashbaz Ali since he became 
one of the stars of the
television series <I>The 4400</I>). 

<P>
As a compromise, the ACM decided to change the rule to require that 
``no team member's name can have
length more than two away from the average length of all the team 
member's names." Using this
rule, a team consisting of ``MAHERSHALALHASHBAZ", ``AL", and ``BILL" 
would be disqualified
(average name length is 8, so AL and BILL are not within 2). However, 
``MAHERSHALALHASHBAZ",
``NEBUCHADNEZZAR", and ``BILLYBOBBENJAMIN" would be okay (average name 
length is 16, and all
team member names have length within 2 of this number). 

<P>
Given the names of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> students, determine whether or not they can be 
placed into teams of <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>
members each so that each team meets the requirements of the new ACM 
rule. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of multiple test cases. Each test case begins with a 
line
consisting of two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>, where <!-- MATH
 $n \leq 1000, k
\leq 8$
 -->
<SPAN CLASS="MATH"><I>n</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3726img1.png
 ALT="$ \leq$"> 1000, <I>k</I> <IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3726img1.png
 ALT="$ \leq$"> 8</SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is
divisible by <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>. Following this are <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines, each containing a 
single name consisting only
of upper case letters with no embedded, leading, or trailing blanks. 
These are the names of
the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> students who need to be organized into teams of size <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> each. 
No name will exceed 80
characters. The last test case is followed by a line containing two 
zeros.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the case number (starting at 1) followed by 
either the
word ``<TT>yes</TT>" (meaning that it is possible to organize the students into 
teams of size <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> so
that no student on that team has a name whose length is greater than 
distance 2 from the
average name lengths of the members on that team), or ``<TT>no</TT>" if it is 
not possible. Use the
format shown in the sample output.  Insert a blank line between cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 3
MAHERSHALALHASHBAZ 
AL 
BILL 
6 3 
MAHERSHALALHASHBAZ 
AL 
NEBUCHADNEZZAR 
BILL 
BILLYBOBBENJAMIN 
JILL
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1: no 

Case 2: yes
</PRE>

<P>

______________________________________________________
3727||||||false||||||
<P>The Advancement of Collegiate Mastermind (hey, that's ACM again...weird!) is an organization which (among other things) holds classes for college students to improve their Mastermind skills. Recall that basic Mastermind is a two-player game which works as follows: The first player - the codemaker - creates a secret 4-color code, each color taken from one of six colors (we'll use A,B,C,D,E and F for the colors). The other player - the codebreaker - now must try to guess the codemaker's code. After each guess, the codemaker uses black and white pegs to tell the codebreaker two things: the number of correct colors in the correct positions (the black pegs), and the number of remaining correct colors that are in the wrong positions (the white pegs). For example, if the true code is ABCC, and the codebreaker makes the guess ACCD, then the response would be 2 black and 1 white; if the guess was CCAA, the response would be 3 white. the The codebreaker continues making guesses until he receives 4 blacks. More advanced versions of Mastermind increase both the length of the code and the number of colors to choose from.<P>The ACM's master instructor is Dee Sifer, and she has a unique ability: when given a set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> guesses and responses, she can immediately determine what the best <SPAN CLASS="MATH">(<I>n</I> + 1)</SPAN> <tex2html_verbatim_mark>-st guess should be. For each possible <SPAN CLASS="MATH">(<I>n</I> + 1)</SPAN> <tex2html_verbatim_mark>-st guess, Dee calculates (in her head) the number of codes left for each possible response she could get to that guess. The maximum of these numbers over all responses is called the <EM>uncertainty</EM> of the guess. The ``best'' guess is the one with the minimum uncertainty. For example, suppose that you get to a point in a game where you've narrowed down the answer to only three possible codes: ABBB, ABBC or ABCB. If your next guess is ABBB, there would be two possible responses: 4 blacks (leaving 0 remaining possibilities left) or 3 blacks (leaving 2 remaining possibilities - ABBC and ABCB). However, if instead of ABBB you try ABBC, then there are 3 possible responses: 4 blacks (leaving 0 possibilities), 3 blacks (leaving 1 possibility - ABBB) and 2 blacks and 2 whites (also leaving 1 possibility - ABCB). Thus ABBC would be a better guess in this case, since the uncertainty it leaves is 1, whereas the uncertainty for ABBB is 2.<P>This is all well and good, except for one thing. You have been selected as Dee's successor, and you do NOT have Dee's ability to pick the minimum uncertainty guess. Dee has been dropping hints (in code) that she plans to retire soon, so you need a program to help you simulate her ability.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. The first line of the input file will contain a single integer indicating the number of test cases. Each test case will consist of several lines. The first line will contain three integers: <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> is the length of the code being guessed, <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is the number of colors to choose from, and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of guesses made so far. These values will satisfy <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3727img1.png ALT="$ \le$"><I>l</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3727img1.png ALT="$ \le$">15, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3727img1.png ALT="$ \le$"><I>c</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3727img1.png ALT="$ \leq$"> 20, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3727img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3727img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>. The values of <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> will be such that the total possible number of codes will be <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3727img1.png ALT="$ \le$">32768</SPAN> <tex2html_verbatim_mark>. After this will come <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines of the form<P><P><BR><SPAN CLASS="MATH"><I>guess</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH"><I>guess</I></SPAN> <tex2html_verbatim_mark> is a length-<SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> character string specifying a guess, and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> are the number of black and white pegs in the response. All colors will be uppercase letters taken from the first <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> letters of the alphabet. For each test case, the guesses given will limit the total number of possible solutions to <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3727img1.png ALT="$ \leq$"> 1500</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line containing the best guess and its uncertainty. Use a single blank to separate the guess from the uncertainty. If there is more than one guess with the same minimum uncertainty, use the one which comes first lexicographically.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3
4 6 2
AABC 1 2
BEAC 0 3
4 6 1
ABCD 0 0
3 20 4
ABE 1 0
ROM 1 0
INK 1 0
MOB 0 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ABCD 4
AEEE 3
IBM 0
</PRE><P>
______________________________________________________
3728||||||false||||||
<P>The <EM>Knick Knack Plaque Shack</EM> designs plaques of unusual shapes. All the plaques are 1 inch deep, and have a wide variety of shapes, some of which are shown below.<P><DIV ALIGN="CENTER"><IMG WIDTH="486" HEIGHT="164" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3728a.jpg ALT="\epsfbox{p3728a.eps}"> <tex2html_verbatim_mark></DIV><P>Ben Fitt is one of several workers in the shipping department (part of the Knick Knack Plaque Shack Pack, as they like to call themselves). Each day he is assigned the task of shipping all the plaques of a certain width to the various department stores which sell them. He has at his disposal boxes with a depth of 1 and a width equal to the plaques' width. As the plaques come off the assembly line, he fits them into the boxes one at a time. When placed in a box, each plaque will slide down until some part of it touches the topmost plaque already in the box (or the bottom of the box if it is the first plaque). For example, if the leftmost plaque above came off the assembly line first, followed by the middle and then the rightmost, they would stack up one on top of the other as shown on the left. If they came off the assembly line in reverse order, they would stack up as shown on the right.<P><DIV ALIGN="CENTER"><IMG WIDTH="206" HEIGHT="190" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3728a.jpg ALT="\epsfbox{p3728b.eps}"> <tex2html_verbatim_mark></DIV><P>When a plaque comes off the assembly line which will not fit into the box (i.e., it sticks up over the top), Ben closes that box, ships it off, and starts a new box. In the above examples, the height of the boxes is only 12, so it would take two boxes for the first ordering of plaques, but only one for the second.<P>During his free moments between packing plaques, Ben wonders what it would be like if hundreds of computer programmers tried to write code to simulate this monotonous drudgery.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. Each test case will start with a line containing three integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicates the number of plaques to ship, <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> indicates the width of each plaque, and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> indicates the height of each shipping box. These values will lie in the ranges <SPAN CLASS="MATH">1...100</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1...10</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1...100</SPAN> <tex2html_verbatim_mark>, respectively. Following this line will be <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> specifications of plaque shapes. Each shape specification starts with a single line containing the integer height <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> of the plaque ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3728a.jpg ALT="$ \le$"><I>h</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3728a.jpg ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3728a.jpg ALT="$ \le$"><I>b</I></SPAN> <tex2html_verbatim_mark>). Following this will be <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> lines containing <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> characters each, where each character is either <TT>'X'</TT> (indicating a part of the plaque ) or <TT>'.'</TT>, indicating empty space. The order in which the plaques appear in the input is the order in which they must be packed in the boxes, and rotating or inverting the plaques is not allowed. The input file will end with the line <TT>0 0 0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line containing the maximum height of the plaques in each box, in the order in which they are filled.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 5 12
5
XXXXX
.XXXX
..XXX
...XX
....X
4
XXX..
..X..
..XXX
..X..
6
X....
X....
X....
X....
X....
XXXXX
3 5 12
6
X....
X....
X....
X....
X....
XXXXX
4
XXX..
..X..
..XXX
..X..
5
XXXXX
.XXXX
..XXX
...XX
....X
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9 6
10
</PRE><P>
______________________________________________________
3729||||||false||||||
<P>Bill Eaves owns the <EM>Shingle Minded</EM> roofing company which is a sub-contracting firm specializing in putting roofs on buildings. Often, Bill will receive a design for a roof from some young hot-shot architect which, though it may have some aesthetic appeal, is totally impractical. In these cases, Bill will begin negotiations with the architect and the client to find a simpler design. Bill's only concern is that the roof be convex, to allow rain, snow and frisbees to roll off easily. The architect's main concern is that the maximum height between his original roof and the compromise roof be as small as possible. The client's main concern is to get out of this meeting as soon as possible and get back to watching TV.<P>The architect's plans for the roof come in the form of a series of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> specifying the outline of the roof as seen from the side of the house. The roofs are always symmetrical, so the architect only shows the front side of the roof (from its start at the front of the house to its peak). Once Bill gets these plans and a decision is made on how many sections the convex roof should have, he must decide how to place the sections so as to 1) make sure that all the original <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> points lie on or below the new roof, and 2) to minimize the maximum vertical distance between any of the original <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> points and the new roof. All sections must lie on at least two of the initial points specified by the architect. An example is shown below. On the left are the initial points from the architect. The next two pictures show an approximation of the roof using only two sections. While both of these are convex, the second of the two is the one which minimizes the maximum distance.<P><DIV ALIGN="CENTER"><IMG WIDTH="1083" HEIGHT="256" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3729.jpg ALT="\epsfbox{p3729.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. Each case will begin with two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(2\leq n \leq 100, 1 \leq k < n)$
 --><SPAN CLASS="MATH">(2 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3729.jpg ALT="$ \leq$"> <I>n</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3729.jpg ALT="$ \leq$"> 100, 1 <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3729.jpg ALT="$ \leq$"> <I>k</I> &lt; <I>n</I>)</SPAN> <tex2html_verbatim_mark> indicating the number of points used in the original roof plan and the number of sections used in the compromise roof. These will be followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines each containing two floating points numbers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, specifying the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points in the roof plan. These values will be given in increasing order of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, and the last point will be guaranteed to have the highest <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> value of any of the points. All values will be between 0.0 and 10000.0. The last case is followed by a line containing <TT>0 0</TT> which indicates end-of-input and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the maximum distance between the best compromise roof and the initial points, rounded to the nearest thousandth.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 2
0.0 0.0
1.0 3.0
3.0 6.0
6.0 9.0
8.0 10.0
17.0 12.0
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1.500
</PRE><P>
______________________________________________________
3730||||||false||||||
<P>Assume we have an <SPAN CLASS="MATH"><I>n</I>&#215;<I>m</I></SPAN> <tex2html_verbatim_mark> grid of squares, each filled with either 0 or 1. A <EM>snake</EM> is a connected sequence of grid squares which has the following properties:<P><OL><LI>Each snake square has a 1 in it </LI><LI>Each snake square touches exactly two other snake squares (north/south/east/west), except the first and last square in the sequence (the head and tail of the snake) </LI></OL><P>A <EM>maximal snake</EM> is one in which we cannot add a 1 to either end without either lengthening the snake, combining two snakes together, or violating rule 2 above.<P>The examples below show grids with and without maximal snakes (all empty squares have 0's in them). Notice that the second grid does not have a maximal snake since you can add a 1 at the end of either snake to get a larger snake.<P><DIV ALIGN="CENTER"><BR><IMG WIDTH="540" HEIGHT="134" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3730.jpg ALT="\begin{picture}(130,90)(0,-15)
\put( 0, 0){\line(1,0){100}} \put( 0,10){\line(1,...
...){\makebox(0,0){1}}
\put(50,-10){\makebox(0,0){One maximal snake}}
\end{picture}"><BR></DIV><!--BR>
<IMG
 WIDTH="160" HEIGHT="134" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3730.jpg
 ALT="\begin{picture}(130,90)(0,-15)
\put( 0, 0){\line(1,0){100}} \put( 0,10){\line(1,...
...){\makebox(0,0){1}}
\put(50,-10){\makebox(0,0){No maximal snakes}}
\end{picture}">
<BR>
<BR>
<IMG
 WIDTH="169" HEIGHT="134" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3730.jpg
 ALT="\begin{picture}(100,90)(0,-15)
\put( 0, 0){\line(1,0){100}} \put( 0,10){\line(1,...
...makebox(0,0){1}}
\put(50,-10){\makebox(0,0){Three maximal snakes}}
\end{picture}">
<BR>
</DIV>

<P>

<DIV ALIGN="CENTER">
<TABLE COLS=10 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>
<P>
<DIV ALIGN="CENTER">One maximal snake
</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER"><TABLE COLS=10 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>
<P>
<DIV ALIGN="CENTER">No maximal snakes
</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER"><TABLE COLS=10 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>
<P>
<DIV ALIGN="CENTER">Three maximal snakes

</DIV--><P><P><BR>For this problem, you will be given grids and must count the number of maximal snakes in each.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. The first line of each test case will contain two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> indicating the number of rows and columns in the grid (the maximum value of each will be 200). The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines will consist of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> characters (either `<TT>0</TT>' or `<TT>1</TT>') specifying the grid. The last case is followed by a line containing <TT>0 0</TT> which indicates end-of-input and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line containing the number of maximal snakes in the grid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 10 
1111111110
0000000010
1100000011
1011110001
1010010001
1010010111
1110011100
7 10 
1111111110
0000000010
0001010011
1011010001
1010010001
1010010111
1110011100
7 10 
1011111110
0100000010
1101011011
1011010001
1010010001
1010010111
1110011100
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
0
3
</PRE><P>
______________________________________________________
3731||||||false||||||

<P>
The designers at Gazillion Games Inc. have come up with a new, 
relatively simple game called ``Stake Your Claim".  Two players - 0 and 1 - initially 
select two values <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> and an <!-- MATH
 $n \times n$
 -->
<SPAN CLASS="MATH"><I>n</I>&#215;<I>n</I></SPAN>
<tex2html_verbatim_mark> board is created with <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> 0's 
and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> 1's randomly placed on the board.  Starting with player 0, each player puts his/her 
number in one of the empty squares on the board.  After the board is filled, 
each player's score is equal to the largest connected region on the board 
filled with that player's number (where a connected region is one where for 
any two squares in the region a path exists consisting of only N/S/E/W moves).  
The player with the highest score wins, and is
awarded the difference between his/her score and the score of the other 
player. Two examples of
finished games are shown below, with the largest connected regions for 
each player outlined.
Note in the second example that the two sections with 2 0's each are 
not connected.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3731.eps}$
 -->
<IMG
 WIDTH="715" HEIGHT="307" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3731.jpg
 ALT="\epsfbox{p3731.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
In order to test how good this game is, the gang at Gazillion has hired 
you to write a program which can play the game.  Specifically, given any starting 
configuration, they would like a
program to determine the best move for the current player, i.e., the 
score which maximizes the points awarded to that player (or minimizes those awarded to the 
player's opponent).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of multiple test cases. Each test case will start 
with a line containing a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> (<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3731.jpg
 ALT="$ \leq$"> 8</SPAN>
<tex2html_verbatim_mark>) indicating the size of the 
board.  Next will come
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines describing the current board layout (row 0 first, followed by 
row 1, etc).  Each of
these lines will contain <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> characters taken from <TT>`0'</TT>, <TT>`1'</TT> 
and <TT>`.'</TT>, where <TT>`.'</TT>
represents an empty square.  The first character will be in column 0, 
the second in column 1, etc.  The number of 0's on the board will either be equal to the number 
of 1's or one greater, and there will be between 1 and 10 (inclusive) empty squares.
The last case is followed by a line containing 0 which indicates 
end-of-input and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output a single line containing two items: the 
coordinates of the best move for the player and the best point total achieved by that 
player.  In case of ties, print the move which comes first lexicographically.  Use the format 
shown in the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
01.1
00..
.01.
...1
4
0.01
0.01
1..0
.1..
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
(1,2) 2
(2,2) -1

______________________________________________________
3732||||||false||||||
<P>For her birthday, Colleen was given a section of track in order to start a toy train set. The section was a railroad crossing of exactly 90<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark> but with different lengths, as shown in the figure on the left below.<P><IMG WIDTH="342" HEIGHT="300" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3732a.jpg ALT="$\textstyle \parbox{.6\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=3in
\epsfbox{p3732a.eps}
\end{center}}$"><IMG WIDTH="224" HEIGHT="447" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3732a.jpg ALT="$\textstyle \parbox{.39\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=2in
\epsfbox{p3732b.eps}
\end{center}}$"><P>The distances <SPAN CLASS="MATH"><I>d</I>1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I>2</SPAN> <tex2html_verbatim_mark> are specified in integral numbers of millimeters.<P>Since this is the only piece of track she owned, she decided to purchase additional track in order to construct a figure eight, as shown in the figure on the right.<P>The top and bottom regions are 270<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark> portions of a circle, each with a constant radius, so that the arcs exactly line up with each respective portion of the crossing.<P>Colleen goes to the toy store, Mathematical Marvels, to purchase track. ``The reason the store is called Mathematical Marvels," explains the owner, ``is that we only sell flexible track, in sections that happen to be lengths that are prime numbers." To make matters worse, there is a track shortage! The store only carries one track piece with each prime number length between 3 and 997. The store charges by the piece, not the length, of track, and Colleen only has enough money for a maximum of five sections for the top oval, and five sections for the bottom oval.<P>You volunteer to help Colleen by writing a program to minimize the cost of purchasing the required train track. To do this you will determine the smallest number of primes, and their values, that give the lengths of track sections that must be purchased in order to complete the figure eight. There may be more than one correct set of primes for each arc, but the minimal cardinality for each set of sections is desired. Since the track sections are flexible, a tolerance of <SPAN CLASS="MATH">&#177;1</SPAN> <tex2html_verbatim_mark> mm on each arc distance is allowed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. For each case, the input will consist of two positive integers giving the lengths <SPAN CLASS="MATH"><I>d</I>1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I>2</SPAN> <tex2html_verbatim_mark> as described above. It is not necessarily the case that <SPAN CLASS="MATH"><I>d</I>1</SPAN> <tex2html_verbatim_mark> is less than <SPAN CLASS="MATH"><I>d</I>2</SPAN> <tex2html_verbatim_mark>, so the length of the top oval may be less than, equal to, or greater than the length of the bottom oval.<P>There will be at least one solution for each input case.<P>Input for the last case will be followed by a pair of zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (they start with 1 and increase sequentially). Then, on each of the next two lines, display the number of segments and the prime number lengths of track (in ascending order) to be used in constructing the oval regions of the figure ``8". Because of the track shortage these primes must all be unique. As noted above, there may be more than one correct set of prime-length track segments, but minimizing the number of segments is required.<P>Separate the output for consecutive cases with a blank line. Your output should appear similar to that shown in the sample below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
301 501 
210 435 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1 
   3 segments: 373, 991, 997
   2 segments: 499, 919

Case 2 
   2 segments: 7, 983 
   3 segments: 61, 991, 997
</PRE><P>
______________________________________________________
3733||||||false||||||
<P>Mrs. Smith bakes apple pies. Because she makes quite a few, she wishes to optimize the process by knowing exactly how much dough is required for each pie. Her pies are baked in tins which have negligible thickness but which are of this general shape (side view):<P><DIV ALIGN="CENTER"><IMG WIDTH="1056" HEIGHT="217" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3733a.jpg ALT="\epsfbox{p3733a.eps}"> <tex2html_verbatim_mark></DIV><P>Two pieces of dough are required for each pie. One piece of dough is placed in the bottom of the pan, up the inside, and out to the outside edge of the rim. The second piece of dough goes over the top of the pie, from the outside of the rim up to a point in the center of the pie forming a perfect cone. For clarity, note that the dough is two layers thick at the very outside edge of the rim.<P><DIV ALIGN="CENTER"><IMG WIDTH="1046" HEIGHT="191" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3733a.jpg ALT="\epsfbox{p3733b.eps}"> <tex2html_verbatim_mark></DIV><P>Given values for <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3733a.jpg ALT="$ \theta$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> (as identified in the preceding figures), determine the volume of dough required for each pie, in cubic inches, by first calculating the necessary surface areas and then considering the dough to be 1/8 inches thick.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. For each case, the input will consist of a line containing real numbers for <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3733a.jpg ALT="$ \theta$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>. Since these are real pies, <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3733a.jpg ALT="$ \theta$"></SPAN> <tex2html_verbatim_mark> will always be in the range 10 to 80 degrees, and the values for <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> will be positive and less than or equal to 16 inches.<P>Input for the last case will be followed by a line containing a single <TT>-1</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (they start with 1 and increase sequentially), and the total volume of crust required, in cubic inches, with three fractional digits. Separate the output for consecutive cases with a blank line. Your output should appear similar to that shown in the sample below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
45.0 9.0 0.5 2.0 1.0 
40.0 10.0 0.5 2.5 1.25 
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 42.258 cubic inches 

Case 2: 61.413 cubic inches
</PRE><P>
______________________________________________________
3734||||||false||||||

<P>
Decimal numbers can be displayed using one or more seven-segment displays. The segments are arranged so that illuminating selected segments yields a pattern corresponding to a decimal digit. The patterns used in this problem are show below. There are three horizontal segments (each illustrated by two hyphens), and four vertical segments (each illustrated by a vertical stroke).

<P>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p3734.eps}$
 -->
<IMG
 WIDTH="1134" HEIGHT="192" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3734img1.png
 ALT="\epsfbox{p3734.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Each of the segments in a single display has an expected lifetime specified by the manufacturer. This lifetime is the minimum cumulative time each segment is expected to be capable of being illuminated, independent of how frequently it is turned on or off. 

<P>
In normal use, a display doesnât always illuminate the same segments. That is, different digits are displayed with different frequencies. As a result, some segments might be illuminated longer than others, and thus the actual length of time the display can be expected to display the proper results is dependent on the values it displays. 

<P>
Given the values to be displayed, their probability of appearance, and the lifetime specified by the manufacturer, you are to determine the minimum time the display can be expected to display the proper values. 

<P>
Multiple single-digit displays may be required, the actual number of such depending on the largest value to be displayed. Values are displayed with leading zeroes, if necessary, to use all single-digit displays. The displays are entirely blank (no segments illuminated) if no value is displayed. 

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Examples</SPAN>

<P>
As a simple example, suppose the manufacturer specifies a particular display as having a 100 hour lifetime. If only the digits 0 and 1 are displayed, each with a 25 percent probability, then the display will require only a single digit, and it will be blank 50 percent of the time. During the remaining time, the rightmost two vertical segments will be illuminated, since they are ``on" during the display of 0 or 1. Given these conditions, the display will correctly operate for at least 200 hours. 

<P>
Suppose the values to be displayed are 0, 1, 10, and 11, each with a probability of 25 percent. If the display has the same manufacturer-specified lifetime, then two single-digit display units will be required, and the display will correctly operate for at least 100 hours. 

<P>
Finally, assume arbitrary decimal digits are to be displayed (with equal probability) 50 percent of the time. With a segment lifetime of 50 hours, the display can be expected to operate correctly for at least 111.11 hours. This is because no segment is illuminated in more than 90 percent of the digits displayed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
For this problem there are multiple cases. The input for each case begins with two integers. The first of these is the manufacturer-specified lifetime of a display, in hours; the second is the number of ranges of values to be displayed. For each of these ranges there follows a group of three integers that give the lowest and highest values in the range, and the probability that one of these values will appear. The largest value will never require a display with more than six digits. Input for the last case is followed by a single integer <TT>-1</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, display the case number (starting with 1) and the minimum time (with two fractional digits) the display will operate correctly. Leave a single blank line between the output for consecutive cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
100 1 
    0  1  50 

100 4 
    0  0  25
    1  1  25
   10 10  25
   11 11  25

100 2 
    0  1  50
   10 11  50

50 1 
    0  9  50

-1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 200.00 hours 

Case 2: 100.00 hours

Case 3: 100.00 hours 

Case 4: 111.11 hours
</PRE> 

<P>

______________________________________________________
3735||||||false||||||
<P>Welcome to Discrete Math I. Forty percent of your final grade will be based on your homework assignments. Now everyone can have a bad day from time to time, so you will be allowed to drop the scores of up to three of these assignments, but you have to choose which assignment scores to drop. Each assignment may have a different maximum score. Choose carefully, as the final homework grade will be the percentage ratio of your total score to the maximum possible score for the retained assignments.<P>Your team is to write a program that, given a list of assignment results, will calculate the best homework percentage grade that can be obtained by dropping zero, one, two, and three of the assignments. For example:<br /><P>As an example, consider that you have received the following scores on each of seven assignments, with the maximum scores as show:<P><DIV ALIGN="CENTER"><TABLE COLS=3><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN ID="txt52">Assignment</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN ID="txt53">Score</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN ID="txt54">Maximum</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN ID="txt55">Number</SPAN></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN ID="txt56">Possible</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>41</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>42</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>22</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>64</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>26</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>44</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>24</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>27</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>26</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>70</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>30</TD></TR></TABLE></DIV><p>The homework grade without dropping any assignments is:<p><table border="0" width="100%"><tr><td><table align="center" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="center"></td><td nowrap="nowrap" align="center">41 + 22 + 2 + 11 + 24 + 26 + 4<div class="hrcomp"><hr noshade="noshade" size="1"/></div>42 + 64 + 26 + 44 + 27 + 70 + 30<br /></td><td nowrap="nowrap" align="center">= 42.9%</td></tr></table></td><td width="1%">(1)</td></tr></table><p>The best result that can be obtained by dropping one assignment comes from dropping assignment 3:<p><table border="0" width="100%"><tr><td><table align="center" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="center"></td><td nowrap="nowrap" align="center">41 + 22 + 11 + 24 + 26 + 4<div class="hrcomp"><hr noshade="noshade" size="1"/></div>42 + 64 + 44 + 27 + 70 + 30<br /></td><td nowrap="nowrap" align="center">= 46.2%</td></tr></table></td><td width="1%">(2)</td></tr></table><p>Similarly, one can choose the two and three assignments to drop that yield the best possible final percentage.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input to your program will be a series of test cases terminated by end-of-file. Each test case will be a series of integers on one or more lines and will be terminated by a line that contains only an end-of-line character (an empty line) or by the end-of-file. The numbers are separated by whitespace and may be preceded and followed by white space. No input line will be longer than 80 characters. The integers are in pairs-the first integer is the student's score for an assignment, the second integer is the maximum possible score for that assignment. There will be at least 4 and at most 30 assignment score pairs per test case. For each pair, the maximum score will range from 1 to 100, and the student score will range from 0 to the maximum score (no extra credit is offered).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, your program is to print a single line containing the best possible final homework grade as a percentage after dropping zero, one, two, and three assignments respectively. Each percentage is to be rounded and printed with one digit after the decimal point. Percentages should be printed starting in the first column and are to be separated from each other by single spaces. No trailing spaces should appear on the line. Do not print excess leading or trailing zeroes, but do print single zeroes adjacent to the decimal point (such as 42.0 or 0.7).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 48  0
83  59 76  13
100

41 47 42 56 20 63 35 45 30 98 41 73 30 59 25 31 40 48 41 99
31 39 12 97 20 53 32 56 55 95 49 61 58 74 41 70 36 36 0 49
56 84 37 65 52 74 15 51 87 95 11 51 24 88 10 46 90 96 80 93

0 30 19 99 44 74 24 46 19 21 71 77 34 49 43 59 16 39 25 33
22 82 19 85 11 88 32 65 1 88 48 51 9 43 48 60 14 25 23 65
42 48 43 97 14 33 9 48 81 93 3 85 9 98 19 86 9 98 57 60

18 56  25 68  84 88  2 12  35 83  8 16  6 74 

30 78  92 99  11 42  40 96  28 74  10 41  32 74

41 42  22 64  2 26  11 44  24 27  26 70  4 30
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
25.7 35.3 53.2 77.6
57.3 59.6 61.2 62.9
42.0 43.9 45.9 48.1
44.8 53.3 57.7 65.1
48.2 50.3 52.7 56.6
42.9 46.2 50.2 56.8
</pre><p><!--div class="p"><></div>

<div class="p"><!></div>
</font>
<br /><br /><hr /><small>File translated from
T<sub><font size="-1">E</font></sub>X
by <a href="http://hutchinson.belmont.ma.us/tth/">
T<sub><font size="-1">T</font></sub>H</a>,
version 3.77.<br />On 23 Feb 2007, 21:26.</small>
</html-->
______________________________________________________
3736||||||false||||||

<P>
Every person's blood has 2 markers called ABO <SPAN  CLASS="textit">alleles</SPAN>. Each of the markers is represented by one of three letters: <TT>A</TT>, <TT>B</TT>, or <TT>O</TT>. This gives six possible combinations of these alleles that a person can have, each of them resulting in a particular ABO <SPAN  CLASS="textit">blood type</SPAN> for that person.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=2>
<COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<SPAN  CLASS="textit"><SPAN  CLASS="textbf">Combination</SPAN></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN  CLASS="textit"><SPAN  CLASS="textbf">ABO Blood Type</SPAN></SPAN> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
AA  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    A  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
AB  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    AB </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
AO  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    A  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
BB  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    B  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
BO  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    B  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
OO  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>    O </TD></TR>
</TABLE>

</DIV>

<P>

<P>
<BR>
Likewise, every person has two alleles for the blood <SPAN  CLASS="textit">Rh factor</SPAN>, represented by the characters <TT>+</TT> and <TT>-</TT>. Someone who is ``Rh positive" or ``Rh+" has at least one <TT>+</TT> allele, but could have two. Someone who is ``Rh negative" always has two <TT>-</TT> alleles. 

<P>
The blood type of a person is a combination of ABO blood type and Rh factor. The blood type is written by suffixing the ABO blood type with the <TT>+</TT> or <TT>-</TT> representing the Rh factor. Examples include <TT>A+</TT>, <TT>AB-</TT>, and <TT>O-</TT>. 

<P>
Blood types are inherited: each biological parent donates one ABO allele (randomly chosen from their two) and one Rh factor allele to their child. Therefore 2 ABO alleles and 2 Rh factor alleles of the parents determine the child's blood type. For example, if both parents of a child have blood type <TT>A-</TT>, then the child could have either type <TT>A-</TT> or type <TT>O-</TT> blood. A child of parents with blood types <TT>A+</TT> and <TT>B+</TT> could have any blood type. 

<P>
In this problem, you will be given the blood type of either both parents or one parent and a child; you will then determine the (possibly empty) set of blood types that might characterize the child or the other parent. 

<P>
Note: an uppercase letter ``Oh" is used in this problem to denote blood types, <SPAN  CLASS="textit">not</SPAN> a digit (zero).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple test cases. Each test case is on a single line in the format: the blood type of one parent, the blood type of the other parent, and finally the blood type of the child, except that the blood type of one parent or the child will be replaced by a question mark. To improve readability, whitespace may be included anywhere on the line except inside a single blood type specification. 

<P>
The last test case is followed by a line containing the letters <TT>E</TT>, <TT>N</TT>, and <TT>D</TT> separated by whitespace.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input, print the case number (beginning with 1) and the blood type of the parents and the child. If no blood type for a parent is possible, print ``<TT>IMPOSSIBLE</TT>". If multiple blood types for parents or child are possible, print all possible values in a comma-separated list enclosed in curly braces. The order of the blood types inside the curly braces does not matter.

<P>
The sample output illustrates multiple output formats. Your output format should be similar.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
O+  O-  ? 
O+  ?  O-
AB-  AB+  ? 
AB+  ?  O+ 
E N D
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: O+ O- {O+, O-}
Case 2: O+ {A-, A+, B-, B+, O-, O+} O-
Case 3: AB- AB+ {A+, A-, B+, B-, AB+, AB-}
Case 4: AB+ IMPOSSIBLE O+
</PRE> 

<P>

______________________________________________________
3737||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="485" HEIGHT="281" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3737a.jpg ALT="\epsfbox{p3737a.eps}"> <tex2html_verbatim_mark></DIV><P>The package sorting area of a shipping company consists of an incoming bin of packages, and three conveyor belts, ``A", ``B", and ``C", of varying widths. Each conveyor belt moves to the right. Packages fall off the end of the conveyor and into some other sorting bin. Suppose that the conveyors are of widths 10", 20", and 30" as in the diagram shown to the right.<P>All the packages are ``simple six sided boxes" with three dimensions. The person doing the sorting places each box on the appropriate conveyor. The proper conveyor to use is the narrowest one which is still wide enough to hold the package. We wish to use as little conveyor length as possible. All packages will fit on at least one conveyor, and (for example) a 20" conveyor would hold up to and including a 20" distance on one side of the package. Packages are placed on the conveyor with no space between them. In order to select the conveyor, you need to consider all dimensions of the package.<P><P><BR><SPAN CLASS="textbf">Examples</SPAN><P>Suppose a certain box is <SPAN CLASS="MATH">15"&#215;21"&#215;4"</SPAN> <tex2html_verbatim_mark>. The sorting process first considers using the minimal conveyor length, so we desire to put the box on a conveyor such that the 4" side is traveling in the conveyor direction to the right. We can thus place the box on a 4" <SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark> 21" side so that it is 15" high, or we can place it on a 4" <SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark> 15" side and the package will stand 21" high. Since we want to use the narrowest possible conveyor, we select conveyor ``B" since the 20" width of the conveyor will handle the 15" dimension of the box (``A" is too narrow, ``C" is excessively wide). At this point, conveyor ``B" moves to the right 4" to accommodate the box, and the box is placed on the far left end of the belt.<P>Another box arrives which is <SPAN CLASS="MATH">12"&#215;24"&#215;19"</SPAN> <tex2html_verbatim_mark>. We use the 12" dimension for the linear distance, and can either stand the box on a 12" <SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark> 19" surface so it is 24" high, or on a 12" <SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark> 24" surface so it is 19" high. We choose conveyor ``B" since <SPAN CLASS="MATH">19"<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3737a.jpg ALT="$ \le$">20"</SPAN> <tex2html_verbatim_mark>. Conveyor ``B" moves to the right by 12" to accommodate the box, and we place it on the belt.<P>After the two boxes described above have been processed, conveyor ``B" will look like this, with the first box to the right of the second box. Note that 24" of the conveyor belt is still unused.<P><DIV ALIGN="CENTER"><IMG WIDTH="345" HEIGHT="127" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3737a.jpg ALT="\epsfbox{p3737b.eps}"> <tex2html_verbatim_mark></DIV><P>As the belts move from left to right, packages will eventually fall off the end. The conveyor belts are 40" long. A package must be more than 50% over the right edge in order to fall off. For example, a box which occupies 5" of belt space will fall off when 3" has passed the end of the belt, not 2". Since package dimensions are given as integral numbers of inches, there is no need to check for 2.5". Similarly, a box taking up 4" of conveyor space falls off at 3" but stays on at 2".<P><DIV ALIGN="CENTER"><IMG WIDTH="357" HEIGHT="138" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3737a.jpg ALT="\epsfbox{p3737c.eps}"> <tex2html_verbatim_mark></DIV><P>Since there is 24" of conveyor remaining in this case, the first box will fall off when the belt has moved more than 26" further (recall that the first box is 4" on this dimension). The diagram shows the first box about to fall off the conveyor.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There may be multiple cases. The input for each case begins with a line containing three integers that specify the widths of the conveyor belts, in increasing order. That is, conveyor ``A" is the narrowest, and conveyor ``C" is the widest. No two conveyor belts will have the same width. This line will be followed by additional lines, one for each box, in the order they are placed on the conveyor belts. Each of these lines contains three positive non-zero integers giving the dimensions of a box. The first of these lines gives data for box 1, the second line for box 2, and so forth. The last box in each case will be followed by a line containing three integers, each <TT>-1</TT>.<P>Input for the last case is followed by a line containing three integer zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (starting with 1) on a line by itself. Then display additional lines, each of which gives the number of a box and the letter (A, B, or C) identifying the conveyor belt from which it fell. These must be in the correct temporal order, over all conveyor belts. That is, if box <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> falls off conveyor B before box <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> falls off conveyor A, then output from box <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> must precede the output for box <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>, even if box <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> was placed on conveyor A before box <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> was placed on conveyor B. Make your output appear similar to that shown in the samples below. Leave a single blank line between the output for consecutive cases. Note that there will be fewer lines of output than there are boxes, since some boxes will remain on the conveyors at the end of the program. Also, placing one large box on the conveyor may force more than one box (or no boxes) off the end.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 15 20
6 8 10
4 11 8
19 8 8
5 9 12
10 10 10
8 8 8
9 9 14
-1 -1 -1
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
   Box 1 fell off conveyor A 
   Box 2 fell off conveyor A
</PRE><P>
______________________________________________________
3738||||||false||||||

<P>
Many people recognize the ``birthday paradox." It states that given a group of 23 or more randomly chosen persons, the probability that at least two of them will have the same birthday is more than 50%. Actually it isnât a paradox, but is so named because it contradicts what most people would intuitively expect. 

<P>
But what is the probability that at least three persons in a group of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> randomly chosen persons share the same birthday? 

<P>
For simplicity we will assume that there are exactly 365 days in a year, and require that your answer be correct only within one tenth of a percent. For example, with 88 people in a group, the probability that at least three of these people will have the same birthday is 51.1 percent (with the result rounded to one fractional digit). Your answer could be any of 51.0 percent, 51.1 percent, or 51.2 percent and still be considered correct.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There may be multiple cases. The input for each case is a line containing the integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, the size of the group. <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> will be no larger than 1000. 

<P>
Input for the last case is followed by a line containing <TT>-1</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, display the case number (starting with 1) and the probability that at least three persons in a group of size <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> share the same birthday. Your result should be displayed as a percentage rounded to one fractional digit. Separate the output for consecutive cases by a blank line. Your output should look very similar to that shown in the samples below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
23 
88 
-1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1. 1.3 percent 

Case 2. 51.1 percent
</PRE> 

<P>

______________________________________________________
3739||||||false||||||
<P>Your company is constructing a device for the International Criminal Protection Council ICPC). This device can be used to detect e-mail messages containing words that suggest the message relates to an illegal activity, and thus require further attention. Since e-mail is abundant, and the networks are fast, the device needs to detect these words very quickly. You have decided to construct a hash code for each word in an e-mail and then determine if that word is in a hash table of suspect words. To make the lookup fast, you have decided to use a perfect hash function where each suspect word maps to a unique location in the table.<P>A perfect hash function maps its input directly to a fully-occupied table. You need to construct the perfect hash function from the list of suspect words. The hash function is of the form <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \lfloor$"><I>C</I>/<I>w</I><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \rfloor$"></SPAN> <tex2html_verbatim_mark> mod <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is a positive integer (which you need to discover), <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> is an integer representation of a word, and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the length of the table (that is, the number of suspect words). <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> must be as small as possible. Note that <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \lfloor$"><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \rfloor$"></SPAN> <tex2html_verbatim_mark> is the floor function and that <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \lfloor$"><I>R</I><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \rfloor$"></SPAN> <tex2html_verbatim_mark> for some real number <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is the largest integer that is less than or equal to <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>.<P>Assume the set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> suspect words is represented by the positive integers <SPAN CLASS="MATH"><I>w</I><SUB>1</SUB>, <I>w</I><SUB>2</SUB>,..., <I>w</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>. The problem is to find the smallest positive integer <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \lfloor$"><I>C</I>/<I>w</I><SUB>i</SUB><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \rfloor$"></SPAN> <tex2html_verbatim_mark> mod <SPAN CLASS="MATH"><I>n</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \neq$"> <IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \lfloor$"><I>C</I>/<I>w</I><SUB>j</SUB><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \rfloor$"></SPAN> <tex2html_verbatim_mark> mod <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> for all <!-- MATH
 $1 \le i < j \le n$
 --><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \le$"><I>i</I> &lt; <I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>. You are to convert each input word to an integer by processing each letter in the word, working left to right. Consider `<TT>a</TT>' to be 1, `<TT>b</TT>' to be 2, <SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark>, and `<TT>z</TT>' to be 26. Use 5 bits for each letter; before processing the next letter, shift the partially completed wordâs integer value left by 5 bits or multiply it by 32. Thus `<TT>a</TT>' = 1, and `<TT>bz</TT>' <!-- MATH
 $= 2 \times 32 + 26 = 90$
 -->
<SPAN CLASS="MATH">= 2&#215;32 + 26 = 90</SPAN>
<tex2html_verbatim_mark>.

<P>
<SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> must be a multiple of at least one wordâs integer representation.

<P>
If <!-- MATH
 $\lfloor C / w_{i} \rfloor$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png
 ALT="$ \lfloor$"><I>C</I>/<I>w</I><SUB>i</SUB><IMG
 WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png
 ALT="$ \rfloor$"></SPAN>
<tex2html_verbatim_mark> mod <!-- MATH
 $n = \lfloor C / w_{j} \rfloor$
 -->
<SPAN CLASS="MATH"><I>n</I> = <IMG
 WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png
 ALT="$ \lfloor$"><I>C</I>/<I>w</I><SUB>j</SUB><IMG
 WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png
 ALT="$ \rfloor$"></SPAN>
<tex2html_verbatim_mark> mod <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> for some <SPAN CLASS="MATH"><I>i</I> <IMG
 WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png
 ALT="$ \neq$"> <I>j</I></SPAN>
<tex2html_verbatim_mark> (that is, a hashing collision) then the next largest <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> that could possibly resolve the conflict is at least the minimum of (<!-- MATH
 $\lfloor C / w_{i} \rfloor + 1) \times w_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png
 ALT="$ \lfloor$"><I>C</I>/<I>w</I><SUB>i</SUB><IMG
 WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png
 ALT="$ \rfloor$"> +1)&#215;<I>w</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and (<!-- MATH
 $\lfloor C / w_{j} \rfloor + 1) \times w_{j}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png
 ALT="$ \lfloor$"><I>C</I>/<I>w</I><SUB>j</SUB><IMG
 WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3739img1.png
 ALT="$ \rfloor$"> +1)&#215;<I>w</I><SUB>j</SUB></SPAN>
<tex2html_verbatim_mark>,. Since all conflicts must be resolved, it is advantageous to choose the largest candidate from among the conflicts as the next <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> to test. <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> will <SPAN ID="txt64">not</SPAN> always fit in a 32-bit integer.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will contain multiple cases. For each case the input will consist of a single line containing between two and thirteen unique words, each containing only between one and five lowercase letters. The words are separated from each other by at least one blank. 

<P>
Input for the last case will be followed by a line containing only an end of line character.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, display the case number (starting with 1) and the value of <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> that yields a perfect hashing function. Separate the output for consecutive cases with a blank line. Your output should appear similar to that shown in the sample below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
bomb timer fuse radio 
ax knife pick lock gun
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 19029075 

Case 2: 817488
</PRE> 

<P>

______________________________________________________
3740||||||false||||||
<P>A display device is being constructed that will display certain five-digit values. Only certain values can be displayed, and the device can change only one digit at a time.<P>For example, suppose the allowed display values were 12345, 12346, 17345, 17346, 22346, and 26346. Is it possible to display each of these, given a choice as to which value is displayed first? The answer is yes, as illustrated below.<P><P><BR>Start with 26346.<P>Change the first 6 to 2 to yield 22346.<P>Now change the first 2 to 1 to yield 12346.<P>Now change the remaining 2 to 7 to yield 17346.<P>Then change the 6 to 5 to yield 17345.<P>And finally, change the 7 to 2 to yield 12345.<P><P><BR>Although all six values can be displayed in this case, it is not always the case that all values can be displayed. For example, consider this set of values: 59304, 58304, 8300, 48304, 19304, and 18304. The longest sequence that can be displayed has four values, as in 18304 <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3740img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> 19304 <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3740img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> 59304 <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3740img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> 58304.<P>The same value may not appear twice in the sequence of displayed values. In particular, the set of values 11111, 12111, 11211, 11121, and 11112 only allow sequences with a maximum length of 3.<P>Your job, given the set of values that can be displayed, is to determine the maximum number of values in a sequence that can be displayed, given that you can select the value with which the display begins, and that you can only change one digit at a time.<P>It is obvious that there are multiple such sequences. For example, reversing the order in which the values are displayed will yield another allowable sequence. It is not the particular sequence that is of interest here, but only the length of the sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain multiple cases. Each case begins with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that specifies the number of distinct values in the set. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> will be no larger than 10,000. This line is then followed by one or more lines containing a total of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> unique integers, each in the range 0 to 99999, with one or more such integers per line. Multiple integers on a line will be separated by spaces.<P>Input for the last case will be followed by a line containing the integer 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (starting with 1) and the number of unique values that can be displayed subject to the single-digit modification constraint. Separate output for consecutive cases with a blank line. Your output should appear similar to that shown in the sample below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
12345 12346 17345 17346 22346 
26346 
6 
59304 58304 8300 48304 19304 58303 
5 
10057 57 10056 50056 58 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1. 6 values 

Case 2. 4 values 

Case 3. 5 values

______________________________________________________
3741||||||false||||||

<P>
The Dean of ACM University's School of Programming Contests is responsible for assigning faculty to university committees. He has found that if he assigns faculty from different departments to a committee, they wind up discussing the socioeconomic importance of the number of bits in a byte and similar matters of earth-shaking importance but they never get any work done. On the other hand, if the faculty are all from the same department, they wind up discussing department business instead of university business. 

<P>
So the Dean wants to know if there is a way of assigning faculty to committees so that a majority (more then 50%) of faculty on each committee are from the same department (not necessarily the same department for different committees), but not all faculty on a committee are from the same department. The Dean thinks faculty ought to serve on at least two committees, but faculty refuse to serve on more than three committees. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<B>The input will contain several test cases, each of them as described below.
Consecutive test cases are separated by a single blank line.
</B>

<P>

<P><P>
<BR>

<P>
The first line of input to your program contains the names of the committees, separated by white space, for example:

<P>

<P>
<BR>
<PRE>
Curriculum Eisenhart-Awards
</PRE> 

<P>

<P>
<BR>
Each of the remaining lines contains the (unique) name of a faculty member and the name of the department which the faculty member belongs to, separated by white space, for example:

<P>

<P>
<BR>
<PRE>
Heliotis Software-Engineering 
Tymann Information-Technology 
Vallino Software-Engineering
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<B>For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>

<P>
For each committee your program must print out a line with the committee name, followed by one line with name and department for each committee member, such that all the conditions above are met. If there is more than one way to assign faculty, any single way may be printed. If there is no possible way to assign faculty, print <TT>No solution</TT>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Curriculum Eisenhart-Awards 
Heliotis Software-Engineering 
Tymann Information-Technology 
Vallino Software-Engineering

Library Budget 
Etlinger Computer-Science 
Strout Computer-Science
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Curriculum 
Heliotis Software-Engineering 
Tymann Information-Technology 
Vallino Software-Engineering 
Eisenhart-Awards 
Heliotis Software-Engineering 
Tymann Information-Technology 
Vallino Software-Engineering

No solution
</PRE> 

<P>

______________________________________________________
3742||||||false||||||
<P>A major manufacturer has contracted you to implement a simulator for their new preemptive multitasking system iFlop. A run of iFlop is described by a configuration file which contains lines separated by newline; each line contains positive integer numbers and case-sensitive words separated by white space. A configuration file starts with the following four lines, in order:<P><P><BR><TT>slice <SPAN CLASS="MATH"><I>number</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TT><P><TT>ready <SPAN CLASS="MATH"><I>name</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>name</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark></TT><P><TT>wait <SPAN CLASS="MATH"><I>name</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>name</I><SUB>5</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark></TT>.<P><TT>var <SPAN CLASS="MATH"><I>name</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>number</I><SUB>7</SUB></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <TT><SPAN CLASS="MATH"><I>number</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TT> is the (positive) number of instructions started within a time slice; <TT><SPAN CLASS="MATH"><I>name</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TT> etc. specify the user programs which are to be run, each as a separate process; <TT><SPAN CLASS="MATH"><I>name</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark></TT> etc. are the names of waiting lists for processes; and <TT><SPAN CLASS="MATH"><I>name</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark></TT> is the name and <TT><SPAN CLASS="MATH"><I>number</I><SUB>7</SUB></SPAN> <tex2html_verbatim_mark></TT> is the initial value of a global integer variable. There is at least one process and one waiting list and var lines may be repeated. All waiting list and variable names are different. Following the variables, the configuration file can specify some subprograms, for example:<P><P><BR><PRE>
sub Pfull 
0 if f 1 3 
1   dec f 
2    if TRUE 4 4 
3   move ready full 
4 end
</PRE><P><P><BR>where sub starts a subprogram and defines its name; the program ends with end. All subprogram names are different.<P>Within each subprogram, lines are numbered consecutively from <TT>0</TT>.<P><P><BR><TT>if</TT> specifies a condition and two existing line numbers. Execution continues with one of these two lines depending on whether the condition is true or false. A condition is either the name of a variable and is true if the variable is not zero, or it is the name of a list (including <TT>ready</TT>) and is true if the list is not empty.<P><P><BR><TT>dec</TT> decrements a variable by one; there is also an <TT>inc</TT> statement to increment a variable by one.<P><P><BR><TT>move</TT> specifies two lists (either one can be <TT>ready</TT>, otherwise names defined with <TT>wait</TT> are used) and takes the first process from the first list (which will be not empty) and appends it as the last process on the second list.<P><P><BR>Finally, the configuration file specifies each user program, for example:<P><P><BR><PRE>
prog consumer 
0 call Pfull 
1 print n 
2 call Vempty 
3 end
</PRE><P><P><BR>where <TT>prog</TT> starts a user program and specifies one of the names on the <TT>ready</TT> line; the program ends with <TT>end</TT>. All program names are different.<P>Within each program, lines are numbered consecutively from <TT>0</TT>.<P><P><BR><TT>print</TT> outputs the value of a variable to standard output.<P><P><BR><TT>call</TT> specifies the name of an existing subprogram to invoke. <TT>call</TT> cannot be used in a subprogram.<P>For the purposes of <TT>slice</TT>, each line (even <TT>call</TT>) counts as one unit. The program above requires four time units to complete because <TT>call</TT> counts as one unit irrespective of how many statements the subprogram contains.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </B><P><P><P><BR><P>Your simulator reads a configuration file from standard input and executes the programs for the processes specified with <TT>ready</TT>, one at a time beginning with the first process on the <TT>ready</TT> list.<P>If a process executes the number of lines specified with <TT>slice</TT> without executing <TT>call</TT> or <TT>end</TT> it is moved from the beginning to the end of the <TT>ready</TT> list and execution continues with the process which is then first on the <TT>ready</TT> list.<P>After a process executes a call, execution continues with the process which is then first on the <TT>ready</TT> list.<P>If a process reaches the matching <TT>end</TT> in its program the process is removed from the system.<P>Your simulator ends once the <TT>ready</TT> list is empty.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>At this point, for each non-empty list you must print one line with the name of the list and the name of the program of each process on the list.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
slice 10
ready consumer producer
wait full empty
var n 0
var f 0
var e 1
var TRUE 1
sub Pfull
0 if f 1 3
1   dec f
2    if TRUE 4 4
3   move ready full
4 end
sub Vfull
0 if full 1 3
1   move full ready
2    if TRUE 4 4
3   inc f
4 end
sub Pempty
0 if e 1 3
1   dec e
2    if TRUE 4 4
3   move ready empty
4 end 
sub Vempty
0 if empty 1 3
1   move empty ready
2    if TRUE 4 4
3   inc e
4 end
prog consumer
0 call Pfull
1 print n
2 call Vempty
3 end
prog producer
0 call Pempty
1 inc n
2 call Vfull
3 end

slice 1 
ready bad good bad good 
wait blocked 
sub block 
0 move ready blocked 
1 end 
prog bad 
0 call block 
1 end 
prog good 
0 end
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1

blocked bad bad
</PRE><P>
______________________________________________________
3743||||||false||||||

<P>
In Eric Solomon's game BlackBox a few marbles are hidden, each in one cell on a square grid. Your program should locate the marbles by shooting rays into the box.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3743.eps}$
 -->
<IMG
 WIDTH="572" HEIGHT="554" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3743img1.png
 ALT="\epsfbox{p3743.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<B>The input will contain several test cases, each of them as described below.
Consecutive test cases are separated by a single blank line.
</B>

<P>

<P><P>
<BR>

<P>
The first line of input contains two positive numbers, the side length of the square and the number of hidden marbles (separated by white space and not necessarily equal); in this case:

<P>

<P>
<BR>
<TT>5 4</TT>

<P>

<P>
<BR>
The edges of the square are numbered, starting with 1, as shown above. To compute deflection, as discussed below, the edges are treated as if they were squares adjacent to the board. Board positions are identified by the ordered sequence of smallest edge numbers; for example, the top left gray box is at position <TT>1,7</TT>. 

<P>
The remaining input lines describe what happens to search rays which enter the square from each side, proceed horizontally and/or vertically, and are either deflected or absorbed by the marbles. 

<P>
A ray is absorbed if it hits a marble directly. A line describing an absorbed ray contains a single positive number identifying the edge position where the ray enters the square; in this case:

<P>

<P>
<BR>
<PRE>
1 
3 
4 
8 
9 
12 
15 
17 
19
</PRE> 

<P>

<P>
<BR>
A ray is deflected if it hits one of the diagonal neighbors of a marble: it is turned 90 degrees away from the marble and from its current direction. A ray can be deflected more then once. A line describing a deflected ray contains two positive numbers identifying the edge positions where the ray enters and leaves the square (separated by white space); in this case:

<P>

<P>
<BR>
<PRE>
2 6 
5 7 
10 11 
13 14 
18 18
</PRE> 

<P>

<P>
<BR>
Note that input and output edge of a ray can always be interchanged. 

<P>
The last line is a special case: the ray starts at <TT>18</TT> and this edge is considered the diagonal neighbor of the marbles at <TT>1,9</TT> and <TT>1,7</TT>. The ray starts out going to the right. The first neighbor turns the ray up, the second neighbor turns the ray to the left. In summary, the ray is deflected twice and returns to its starting point <TT>18</TT>. 

<P>
One would expect that the list of absorbed and deflected rays contains each edge at least once. However, this example shows that that need not be the case: A ray starting at <TT>16</TT> is turned from going right to going down and never even reaches the board. Similarly, a ray starting at <TT>20</TT> is immediately turned up and misses the board, too. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<B>For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>

<P>
Your program should output one line with cell coordinates for each hidden marble. The coordinates should be the <SPAN  CLASS="textit">smaller</SPAN> edge numbers identifying column and row of the marble. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 5 
1 
2 6 
3 
4 
5 7 
8 
9 
10 11 
12 
13 14 
15 
17 
18 18 
19
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 7 
4 8
1 9
4 9
</PRE> 

<P>

______________________________________________________
3744||||||false||||||
<P>The DNA in your cells contains the instructions that specify the proteins that are synthesized by your body. DNA consists of a sequence of 4 nucleotides which can be represented by the letters A, T, G, and C. For example the string GCTGCTCGCGATAATAATGAA would represent a short DNA sequence consisting of 21 nucleotides. A protein consists of a sequence of amino acids, and like nucleotides, each amino acid is represented by a letter. There are 20 amino acids and they are represented by the characters: G, A, V, L, I, M, F, W, P, S, T, C, Y, N, Q, D, E, K, R, and H. The string AARDNNE would represent a protein consisting of 7 amino acids.<P>Genes, which can be viewed as substrings of the DNA sequence, direct the synthesis of proteins. The nucleotides in a gene are read in sequential order in groups of three. Each group of three nucleotides encodes a particular amino acid. A genetic code indicates what three nucleotides encode each amino acid. A subset of a genetic code is given below:<P><P><BR><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GCT GCG GCC GCA</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>R</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>CGT CGG CGC CGA AGG AGA</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GAT GAC</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>N</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>AAT AAC</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>TGC TGT</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GAG GAA</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>W</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>TTT</TD></TR></TABLE><P><P><BR>Note that there can be multiple nucleotide triplets which encode a single amino acid. For example, in the genetic code subset above, only the amino acid W is encoded by a single triplet. Using this genetic code subset, the DNA sequence GCTGCTCGCGATAATAATGAA encodes the protein AARDNNE.<P>Unfortunately molecular biology is nowhere near as simple as we have just described. As it turns out the DNA in your cells contains over 3 billion nucleotides, and only a fraction of your DNA actually contains genes that encode proteins. This means that genes are often embedded in long sequences of nucleotides (which need not start with triplets). So for example, the DNA sequence<P><P><BR>AAATT<SPAN CLASS="textbf">GCAGCTGCTCGCGATAATAATGAA</SPAN>TTTCGCGCGCGCGCGC<P><P><BR>contains the gene that encodes the amino acid sequence AARDNNE.<P>To make matters even worse, DNA is actually double stranded, which means when you are working with a DNA sequence the gene might be coded in the forward direction (as in the example above) or in the reverse direction. Again for example, the DNA sequence<P><P><BR>CGCGCGCGCGCGCTTT<SPAN CLASS="textbf">AAGTAATAATAGCGCTCGTCG</SPAN>ACGTTAAA<P><P><BR>also encodes the amino acid sequence AARDNNE. This time the amino acid sequence is encoded by the reverse strand.<P>Given a strand of DNA, a protein sequence, and a genetic code, you are to determine if the complete protein sequence is encoded by all or some part of the DNA sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will consist of a line containing a string that gives the DNA strand, for example:<P><P><BR><TT>AAATTGCAGCTGCTCGCGATAATAATGAATTTCGCGCGCGCGCGC</TT><P><P><BR>The second line will consist of a string of alphabetic characters that gives the protein sequence, for example:<P><P><BR><TT>AARDNNE</TT><P><P><BR>The remaining lines of input will give a subset of the genetic code. Each line will begin with a single character that specifies the amino acid being encoded, followed by the groups of three nucleotide sequences that encode the amino acid. All elements on the line will be separated by whitespace, for example:<P><PRE>
A GCT GCG GCC GCA 

R CGT CGG CGC CGA AGG AGA 

D GAT GAC 

N AAT AAC 

C TGC TGT 

E GAG GAA 

W TTT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program will print the word <TT>yes</TT> if the given DNA sequence encodes the amino acid sequence and the word <TT>no</TT> if it does not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
AAATTGCAGCTGCTCGCGATAATAATGAATTTCGCGCGCGCGCGC 
AARDNNE 
A GCT GCG GCC GCA 
R CGT CGG CGC CGA AGG AGA 
D GAT GAC 
N AAT AAC 
C TGC TGT 
E GAG GAA 
W TTT

AAATTGCAGCTGCTCGCGAT 
AARDNNE 
A GCT GCG GCC GCA 
R CGT CGG CGC CGA AGG AGA 
D GAT GAC 
N AAT AAC 
E GAG GAA
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
yes
no
</PRE><P>
______________________________________________________
3745||||||false||||||

<P>
Dezider works in a large factory as a box-mover. A box-mover's job is relatively simple: every day he is presented with a huge box which he can only push but not lift. His task is to push the box from its current position to a desired location. The factory floor is covered with square tiles and from a bird's perspective it would look like a grid. The box and Dezider each occupy exactly one square. As Dezider cannot lift the box, they cannot be in the same square at the same time. Apart from the box and Dezider, some squares contain unmovable obstacles, such as walls or very heavy furniture. Neither Dezider, nor a box can walk through or step on the obstacles. Dezider can move freely on the unblocked floor -- his possible moves are ``turn right", ``turn left", and ``make a step". If there is an obstacle in front of him while attempting to make a step, he simply bounces off the obstacle and lands at the same spot where he started doing the step. If there is a box in front of him while making a step and there is no obstacle in front of the box, Dezider pushes the box (as if the box made a step forward in sync with Dezider, so he ends up facing the box again but both moved). Dezider cannot pull the box -- it is too heavy and does not have any handles. 

<P>
Your task is to help Dezider to push the box to its target location. Dezider does not mind walking around the floor but pushing the box is a real pain in the neck. So he asks you to minimize the number of steps when he pushes the box. And -- Dezider is especially interested in finding out if it is possible to move the box to its target location at all! (Sometimes, after Dezider has pushed the box around for a few days, his boss wears a rather curious expression...) 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<B>The input will contain several test cases, each of them as described below.
Consecutive test cases are separated by a single blank line.
</B>

<P>

<P><P>
<BR>

<P>
The first line of the input file contains <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, the number of columns and rows of the grid, separated by a space, for example:

<P>

<P>
<BR>

<TT>15 5</TT>

<P>

<P>
<BR>
The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines describe the grid. Each line contains a string of length <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>. Within the strings is a single <TT>X</TT> (the target location for the box), a single <TT>B</TT> (the box), a single <TT>D</TT> (Dezider). The other characters in the strings are either <TT>O</TT> (obstacle) or period (empty tile). The four edges of the grid are always filled with obstacles. For example:

<P>

<P>
<BR>
<PRE>
OOOOOOOOOOOOOOO
O....D.O......O
O......O.B....O
O..........X..O
OOOOOOOOOOOOOOO
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, if it is not possible to get the box to its target location your program should output <TT>0</TT>. Otherwise, it should output the minimum number of box-pushing steps Dezider needs to make in order to get the box to its target location. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
15 5 
OOOOOOOOOOOOOOO 
O....D.O......O 
O......O.B....O 
O..........X..O 
OOOOOOOOOOOOOOO
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
</PRE> 

<P>

______________________________________________________
3746||||||false||||||
<P>Kazimir is a trash-sorting robot. Everybody (humans, that is) think he is very useful: you come to him with a list of parts needed for your new invention and he then sits by a conveyor belt which transports trash and whenever he spots the next part on your list, he picks it up, cleans it to perfection, and attaches it to the already obtained parts. Of course, every object on the conveyor belt has a different level of dirtiness. Some things take only a minute to clean while others take an hour. The conveyor belt is behind a glass wall with a window at the very front, so Kazimir can see all the objects (and their level of dirtiness) but he can reach only the very first object.<P>Kazimir's problem is that he is allergic to dirt. He strongly suspects that his current program does not minimize his exposure to the dirt -- often he finds himself cleaning an object for an hour whereas if he only waited a few minutes, he could have gotten the same object in an almost clean condition. So he asked you to reprogram him so that he spends the least possible time cleaning the objects on people's lists.<P>Kazimir has a list of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> wanted parts which he has to get in the specified order.<P>The conveyor belt is <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> feet long and every object occupies one foot on the belt.<P>The speed of the belt is one foot per minute. If Kazimir spends <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> minutes cleaning an object, the belt shifts by <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> feet and the objects that fall off the end of the belt in the meantime are loaded onto trucks which drive away to some unknown landfill, never to be seen again.<P>Your task is to tell Kazimir the specific objects he should pick up and clean in order to minimize the total cleaning time. You can assume that Kazimir can do everything but cleaning in a flash (0 minutes).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </B><P><P><P><BR><P>The first line contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, separated by white space, for example:<P><P><BR><TT>3 8</TT><P><P><BR>The next line contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers specifying the ordered list of the wanted objects (separated by white space), for example:<P><P><BR><TT>6 7 5</TT><P><P><BR>It is possible for an object to be repeated several times on the list. The list must be filled exactly in order as written. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describe the conveyor belt. Each line contains two integers separated by white space; the first specifies the next object on the conveyor belt, the second specifies the number of minutes it takes to clean the object, for example:<P><P><BR><PRE>
5 2 
6 20 
5 3 
6 1 
7 2 
6 15 
3 2 
5 20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, if it is not possible to collect all objects on the wish list, your program should output <TT>-1</TT>. Otherwise you should output the minimal number of minutes needed to clean the objects on the list in the specified order, for example:<P><P><BR><TT>23</TT><P><P><BR>In the example above, Kazimir can wait 3 minutes, clean the second object 6 in one minute, clean the object 7 in 2 minutes, wait another minute, and then clean the last object 5 in 20 minutes for a total of 23 minutes cleaning time. He is not allowed to clean object 5 first.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 8 
6 7 5 
5 2 
6 20 
5 3 
6 1 
7 2 
6 15 
3 2 
5 20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
23
</PRE><P>
______________________________________________________
3747||||||false||||||
<P>The contest judges are frantic: the contest is about to start and the planet colonies have just decided to compete after all. The judges were planning to use the old scoreboard program from the intercontinental days but it cannot handle the different time systems used on the planets.<P>Clearly, you would like to come to their rescue and write a new scoring program. The input is a list of teams and their raw performance on the problems, the output is a sorted list of teams with summary information about their performance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </B><P><P><P><BR><P>More precisely, the input starts with a line with the time stamp for the start of the contest. Time stamps use 2 digits each for the hour and for the minute, separated by a colon, on a 24 hour clock, for example:<P><PRE>
10:00
</PRE><P>The start line is followed by a sequence of raw team performances. Each performance starts with one line with the team name and the planet name where the team competes, both in lower-case letters and separated by white space, for example:<P><PRE>
rit earth
</PRE><P>This line is followed by one line for each problem (out of the eight) which the team attempted. Each problem line starts with the problem number. The number is followed by the time stamp for each attempt. If the team actually solved the problem, the last time stamp is followed by the word solved. You can assume that the contest ends before <TT>24:00</TT>. All items on each problem line are separated by white space, for example:<P><PRE>
1 10:01 10:02 10:03 15:03 
2 10:05 solved
</PRE><P><P><BR>Of course, the planet name determines what the time stamps actually mean. A day is defined as the time it takes for the sun to appear again in the same place in the sky. This is quite different for the different planets:<P><PRE>
mercury   59 earth days 
venus     117 earth days 
earth     1 earth day 
mars      1 earth day 
jupiter   10/24 earth days 
saturn    10/24 + 39/1440 earth days 
uranus    17/24 earth days 
neptune   16/24 earth days
</PRE><P>For historic reasons (and this may or may not be rooted in reality) each planet divides its day into 24 planet hours with 60 planet minutes each. The contest starts on each planet when the planet clock shows the start time reported in the input data as described above. And -- you guessed it -- the time stamps reported for each problem for each team are read off the clock on the team's planet. For a fair comparison the cumulative times will have to be converted to a common time scale and rounded (up beginning with 0.5 and down otherwise) to full minutes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR><P>The output from your program is a sorted list of performances, one performance per line. Information within a performance must be separated by blanks.<P>Each performance line starts with an alphabetized list of team names of the teams which achieved the same result. The names are followed by the (single) number of problems solved and cumulative time needed by each of these teams. Performances with more problems must be output first; within the same number of problems solved performances with shorter cumulative time must be output first. In case of equal times the performance with the fewer attempts at the solved problems must be output first.<P>The judges sit on Jupiter -- no way to stand up without an exo-skeleton there -- and expect the output to use Jupiter's clock. Therefore, the cumulative time must be converted from each team's planet to Jupiter days, hours, and minutes for output, separated by colons.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10:00 
rit earth 
1 10:01 10:02 10:03 15:03 
2 10:05 solved 
mit venus 
1 11:10 solved 
2 14:59 solved 
brown venus 
1 10:15 10:29 
2 12:20 solved 
3 13:49 solved 
ur earth 
4 10:04 solved 
suny jupiter 
2 10:04 10:12 solved
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
brown mit 2 71:22:55 
ur 1 0:0:10 
rit 1 0:0:12 
suny 1 0:0:12
</PRE><P>
______________________________________________________
3748||||||false||||||

<P>
After running a successful bakery for years and avoiding a tax audit last year, Arnie has discovered that he has accumulated billions of dollars. In the interest of trying new things Arnie has decided to start up a new airline ``Doggone Air" that caters exclusively to dogs. Arnie being the smart business dog has decided to hire greyhounds for sleek and speedy in-flight Beggin' Strip service, as well as seasoned pit bulls to maintain order, and limit his flights so that they all take off and land at locations in the same time zone and on the same day. 

<P>
When selecting a flight dogs, unlike humans, do not care about the actual time a flight departs or arrives at its destination, they only care about the total elapsed time of a flight plan consisting of one or more flights. Second, dogs cannot travel for more than 3 hours without taking a break. So, for destinations that are further than 3 hours away, the flight plan must include a layover of at least 30 minutes, to give the passengers time to stretch their legs and find suitable trees. Finally, dogs insist on leaving and arriving on the same day. 

<P>
You are to write a program that, given the flights offered by Doggone, along with a source and destination airport, will determine whether or not a flight plan exists that meets the selection criteria in the previous paragraph. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<B>The input will contain several test cases, each of them as described below.
Consecutive test cases are separated by a single blank line.
</B>

<P>
The input to your program will consist of several lines. The flrst line will contain a single positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> that gives the number of flights offered by Doggone Air. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines of input will be flights, in the following format:

<P>

<P>
<BR>

<TT><!-- MATH
 $source \ destination \ dd:dd \ aa:aa$
 -->
<SPAN CLASS="MATH"><I>source</I>&nbsp;<I>destination</I>&nbsp;<I>dd</I> : <I>dd</I>&nbsp;<I>aa</I> : <I>aa</I></SPAN>
<tex2html_verbatim_mark></TT>

<P>

<P>
<BR>
where <TT><SPAN CLASS="MATH"><I>source</I></SPAN>
<tex2html_verbatim_mark></TT> and <TT><!-- MATH
 $destination$
 -->
<SPAN CLASS="MATH"><I>destination</I></SPAN>
<tex2html_verbatim_mark></TT> are the source and destination airport, <TT><SPAN CLASS="MATH"><I>dd</I> : <I>dd</I></SPAN>
<tex2html_verbatim_mark></TT> is the time the flight departs (in 24-hour format) and <TT><SPAN CLASS="MATH"><I>aa</I> : <I>aa</I></SPAN>
<tex2html_verbatim_mark></TT> is the time the flight is scheduled to arrive at the destination. Note that these times may or may not correspond to what people would term real life. The last line of input will be in the following format:

<P>

<P>
<BR>

<TT><!-- MATH
 $source \ destination$
 -->
<SPAN CLASS="MATH"><I>source</I>&nbsp;<I>destination</I></SPAN>
<tex2html_verbatim_mark></TT>

<P>

<P>
<BR>
where <TT><SPAN CLASS="MATH"><I>source</I></SPAN>
<tex2html_verbatim_mark></TT> is the airport from which the passenger wishes to depart and <TT><!-- MATH
 $destination$
 -->
<SPAN CLASS="MATH"><I>destination</I></SPAN>
<tex2html_verbatim_mark></TT> is the airport at which the passenger wishes to arrive. All items are separated by white space. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, your program will either output <TT>yes</TT> if a valid flight path exists or <TT>no</TT> if a valid flight path cannot be found. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
Rochester Toronto 07:45 10:46 
Rochester Detroit 07:45 09:13 
Detroit London 09:49 12:17 
London Montreal 18:48 20:57 
Montreal Toronto 22:45 23:15 
Rochester Toronto
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
yes
</PRE> 


______________________________________________________
3749||||||false||||||
<P>The Confusion State University business office has a policy that requires all staff traveling on business to use the most cost-effective mode of transportation possible. Cost-effective does not necessarily mean cheapest, however, as the cost of the time spent traveling is also taken into account. The State of Confusion has fairly good airline coverage, and reasonable roads, but the bus and rail transporation network leaves much to be desired in terms of availability and timely performance. Therefore, most travel of any significant distance comes down to a fly-or-drive decision.<P>It became apparent during a recent review of staff travel expenses that in some cases, it is less expensive to rent a car from the approved rental agency and pay for fuel than it is to pay for staff members to drive their personal vehicles at the IRS-approved standard mileage rate. This provides a third alternative to consider when arranging travel. The business office has retained your team to develop a program that will select the most cost-effective mode of travel when arranging trips for staff members.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program will be a series of round-trip requests. Each round-trip request will contain the following information on three lines, with fields separated from each other by single spaces:<P><OL><LI>The first line will contain a trip name (a string of 1 to 31 upper and lower-case letters, digits, and hyphens), the total one-way road mileage as an integer, and the effective hourly pay rate for the staff member in dollars and cents. </LI><LI>The second line will contain flight information: the cost of the round-trip ticket (in dollars and cents), the total one-way flight duration (in whole minutes), the integer number of miles to the airport (in the event a traveler drives his/her personal car to the airport), the total cost of airport parking (in dollars and cents), and the cost of a round-trip shuttle as an alternative to driving to/from and parking at the airport (also in dollars and cents). </LI><LI>The third line will contain rental car costs: the total rental charges (in dollars and cents) and the per-gallon cost of gasoline (also in dollars and cents). </LI></OL><P>Your program is to compute the estimated total round-trip costs for flying, driving a rental car, and driving a personal vehicle (taking into account the cost of the time spent traveling in each case). Your program is to make the following assumptions:<P><UL><LI>When staff members drive on trips (other than to and from airports), their average speed is 55 miles per hour. </LI><LI>The IRS-approved reimbursement rate is 44.5 cents per mile. </LI><LI>For flying trips, the travel time each way will be the sum of the actual flying time, the time to get to/from the originating airport, and a two hour allowance. The two hour allowance covers the time spent at airports at each end of the trip along with destination ground transporation. </LI><LI>The travel time to/from the originating airport is to be calculated using an average in-city speed of 40 miles per hour. Originating airport travel time is the same whether a traveler drives and parks his/her personal car or if a shuttle is used. A traveler should use the shuttle if it is cheaper than driving to and from the airport and paying parking charges. </LI><LI>You may assume that the flying time is the same on the outbound and return trips. </LI><LI>If a traveler flies, assume destination ground transporation will be taken care of at no cost (e. g., free hotel shuttle). </LI><LI>The State authorizes the use of compact rental cars that average 25 miles per gallon in actual use. The review showed that the average added time to rent, refuel, and return a rental car is one hour per trip. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each trip, your program should print one line containing the name of the trip followed by a colon and a single space, an upper-case letter representing the most cost-effective mode of transporation (either ``<TT>F</TT>" for flying, ``<TT>R</TT>" for using a rental car, or ``<TT>D</TT>" for driving a personal vehicle), a single space, and the total travel charges of the selected option that will appear on the expense report (that is, not including the staff member's pay for the duration of travel). The travel charges are to be printed in dollars and cents with a dollar sign before the leading digit.<P>All costs being equal, travelers prefer to drive their own vehicles over the other options, and prefer renting a car to flying.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Campus-Visit 222 26.50 
310.20 67 22 36.00 67.00 
109.08 2.25 
Management-Visit 709 52.00 
250.00 120 22 48.00 67.00 
184.79 2.35
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Campus-Visit: R $149.04 
Management-Visit: F $317.00
</PRE><P>
______________________________________________________
3750||||||false||||||
<P>The reprographic center at Swamp County High School is a sorry collection of mimeographs and aging photocopiers. Just recently, it acquired a new laser printer that can print duplex (on both sides of the paper) and 2-up (two half-size pages on one side of a sheet of paper). To show off the new capabilities, the school wants to print this year's graduation program as a booklet rather than a bunch of 8.5 by 11 inch single-sided papers stapled together. A booklet is stack of 8.5 by 11 inch papers folded in half along the 5.5 inch midline, then stapled along the fold to make a simple spine.<P>Mr. Hack, the journalism teacher and a capable editor, was unable to determine the page print order necessary to produce a booklet from a document with sequentially ordered pages. He turned to your team, the webmasters for the school's underground website, to produce a program to reorder the pages for proper printing. Given the number of sequential pages in a document, produce the required number of sheets and proper page reordering for proper printing as a 2-up duplex booklet.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input to your program will be a list of document sizes (in total pages), one per line, terminated by end-of-file. Each page count will appear as a positive integer greater than zero beginning in the first column.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Output is one (potentially fairly long) line for each input line, describing the number of sheets needed and the necessary page reordering. For each document size, print the number of sheets of paper required in a booklet, followed by a colon, then the page numbers to print on each separate sheet of paper. For each sheet, print a space followed by four comma-separated page numbers (without embedded whitespace), where a page number of zero indicates a blank page. The laser printer prints pages in A,B,C,D order as indicated on the diagram at the end of this problem (see figure 1). Order the sheets such that laying the sheets down with the first two pages (6,3 in the seven-page sample) showing, then the next sheet's pages showing (0,1 in the seven-page sample) produce a stack of papers with page 1 on the facing (right hand) page, ready to be stapled from the top.<center><IMG SRC="http://livearchive.onlinejudge.org/external/37/p3750.jpg NAME="Figure 1" ALT="Diagram for Figure 1"><br>Figure 1.</center><p>A recent donation of very lightweight paper combined with a heavy duty stapler has made it possible to staple up to 50 sheets of paper together to form a booklet. Each document will always fit in one booklet.<br /><br /><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7
5
2
</pre><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2: 6,3,4,5 0,1,2,7
2: 0,3,4,5 0,1,2,0
1: 0,1,2,0
</pre><!--div class="p"><!></div>

<IMG SRC="http://livearchive.onlinejudge.org/external/37/p3750.jpg NAME="Figure 1" ALT="Diagram for Figure 1">
<br>
Figure 1.
<div class="p"><!></div>
</font>
<br /><br /><hr /><small>File translated from
T<sub><font size="-1">E</font></sub>X
by <a href="http://hutchinson.belmont.ma.us/tth/">
T<sub><font size="-1">T</font></sub>H</a>,
version 3.77.<br />On 22 Feb 2007, 21:29.</small>
</html-->
______________________________________________________
3751||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"><html><head><title>404 Not Found</title> </head><body><h1>Not Found</h1><p>The requested URL /external/37/3751.html was not found on this server.</p><hr><address>Apache Server at livearchive.onlinejudge.org Port 80</address></body></html>
______________________________________________________
3752||||||false||||||
<P>A seaport container terminal stores large containers that are eventually loaded on seagoing ships for transport abroad. Containers coming to the terminal by road and rail are stacked at the terminal as they arrive.<P>Seagoing ships carry large numbers of containers. The time to load a ship depends in part on the locations of its containers. The loading time increases when the containers are not on the top of the stacks, but can be fetched only after removing other containers that are on top of them.<P>The container terminal needs a plan for stacking containers in order to decrease loading time. The plan must allow each ship to be loaded by accessing only topmost containers on the stacks, and minimizing the total number of stacks needed.<P>For this problem, we know the order in which ships must be loaded and the order in which containers arrive. Each ship is represented by a capital letter between A and Z (inclusive), and the ships will be loaded in alphabetical order. Each container is labeled with a capital letter representing the ship onto which it needs to be loaded. There is no limit on the number of containers that can be placed in a single stack.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. Each test case consists of a single line containing from 1 to 1000 capital letters representing the order of arrival of a set of containers. For example, the line ABAC means consecutive containers arrive to be loaded onto ships A, B, A, and C, respectively. When all containers have arrived, the ships are loaded in strictly increasing order: first ship A, then ship B, and so on.<P>A line containing the word <TT>end</TT> follows the last test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, print the case number (beginning with 1) and the minimum number of stacks needed to store the containers before loading starts. Your output format should be similar to the one shown here.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
A 
CBACBACBACBACBA 
CCCCBBBBAAAA 
ACMICPC 
end
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1
Case 2: 3
Case 3: 1
Case 4: 4
</PRE><P>
______________________________________________________
3753||||||false||||||

<P>
Swamp County College is embarking on an effort to improve the management of the College's data center. The college is adopting the ITIL (Information Technology Information Library) model for IT service management. Originally developed by the British Government, ITIL covers a wide spectrum of IT service, application, and infrastructure management best practices. ITIL is now being adopted widely in both the public and private sectors worldwide. 

<P>
The college IT department has determined that it needs to improve its understanding of the infrastructure within the data center. In accordance with the ITIL model, the IT managers want to build a Configuration Management Data Base (a CMDB) that contains information about the equipment in the data center, the connections between that equipment, and the databases and software applications that run on the equipment. The objective is to be able to identify the potential impact of downtime or maintenance of one infrastructure component on the databases and applications supported by the infrastructure. 

<P>
Building a full CMDB is a major undertaking. In order to get some value out of the process quickly, and gain executive support and funding for the full project, the college is asking your team to develop a proof-of-concept database and tool that will demonstrate the basic functions of a CMDB and help them when planning upgrades to their critical infrastructure. 

<P>
This proof-of-concept database will handle the following infrastructure components and the relationships between them: 

<P>

<UL>
<LI>Storage Arrays 
</LI>
<LI>Storage (Fibre Channel) Switches 
</LI>
<LI>Network (IP) Switches 
</LI>
<LI>Servers 
</LI>
<LI>Databases 
</LI>
<LI>Applications 
</LI>
</UL>

<P>
Each of these infrastructure components is referred to by ITIL as a configuration item (CI). The database will contain a type definition of each CI and a list of relationships between them. Each CI will be defined as one of the above types (storage array, storage switch, network switch, server, database, or application). CI names are strings of between 1 and 31 upper case letters and digits, with the first character being a letter. No two CIs will have the same name. 

<P>
Relationships will be defined as connections or usage relationships between CIs; for example, a storage array connects to a storage switch, a server connects to a network switch, a server may connect to a storage switch, an application runs on a server, an application may use a database, an application may use another application, and a server may use a storage array. Databases and applications that depend on each other may reside on different servers, communicating with each other over the IP network. 

<P>
Storage switches provide connections between a server and a storage array. Every path between a server and its external storage will pass through only one storage switch. However, connections to storage arrays may be redundantâ that is, a given server may have independent connections to multiple switches, as may a storage array. This means that there may be multiple paths between a server and a storage array. These redundant paths are used to provide additional bandwidth and redundancy, so that if one storage switch fails or is taken down for maintenance, access to storage is not interrupted. 

<P>
Similarly, servers may have connections to multiple network switches, providing multiple paths for network traffic among databases and applications. Unlike storage, there may be multiple IP switches in a path between server network ports.

<P>
Your team is to write a program that will read CMDB entries, then use the CMDB entries to answer queries about the impact that a single down CI would have on database and application CIs. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input to your program will be a series of CI definitions, followed by a series of CI relationships, and ending with a series of queries. Each definition, relationship, and query appears on a line by itself, with the fields separated from each other by one or more spaces. No input line will exceed 80 columns. 

<P>
Each CI will be defined on a line containing the string ``<TT>CI</TT>", the CI name, and the type: 

<P>

<UL>
<LI>storage-array 
</LI>
<LI>storage-switch 
</LI>
<LI>network-switch 
</LI>
<LI>server 
</LI>
<LI>database 
</LI>
<LI>application 
</LI>
</UL>

<P>
Each relationship will be defined on a line containing the string ``<TT>RE</TT>", a CI, the type of relationship (as listed below), and another CI. The relationship definitions are as follows: 

<P>

<UL>
<LI><!-- MATH
 $\langle storage-array \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>storage</I> - <I>array</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> <TT>connects-to</TT> <!-- MATH
 $\langle storage-switch \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>storage</I> - <I>switch</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark>
</LI>
<LI><!-- MATH
 $\langle server \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>server</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> <TT>connects-to</TT> <!-- MATH
 $\langle storage-switch \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>storage</I> - <I>switch</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark>
</LI>
<LI><!-- MATH
 $\langle server \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>server</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> <TT>connects-to</TT> <!-- MATH
 $\langle network-switch \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>network</I> - <I>switch</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark>
</LI>
<LI><!-- MATH
 $\langle network-switch \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>network</I> - <I>switch</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> <TT>connects-to</TT> <!-- MATH
 $\langle network-switch \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>network</I> - <I>switch</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark>
</LI>
<LI><!-- MATH
 $\langle server \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>server</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> <TT>uses</TT> <!-- MATH
 $\langle storage-array \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>storage</I> - <I>array</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark>
</LI>
<LI><!-- MATH
 $\langle database \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>database</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> <TT>runs-on</TT> <!-- MATH
 $\langle server \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>server</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark>
</LI>
<LI><!-- MATH
 $\langle application \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>application</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> <TT>runs-on</TT> <!-- MATH
 $\langle server \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>server</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark>
</LI>
<LI><!-- MATH
 $\langle application \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>application</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> <TT>uses</TT> <!-- MATH
 $\langle database \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>database</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark>
</LI>
<LI><!-- MATH
 $\langle application \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>application</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> <TT>uses</TT> <!-- MATH
 $\langle application \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \langle$"><I>application</I><IMG
 WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3753img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark>
</LI>
</UL>

<P>
The CI relationships will be fully definedâthere will be no missing paths between components. Each application and database runs on only one server. Any application may use the services of several other applications and databases. 

<P>
Queries to the CMDB will begin with ``<TT>??</TT>" followed by a CI that has failed or is scheduled for maintenance. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program is to print the CI being queried, followed by a list of database and application CIs that would be affected. The CI being queried is to be printed on a line with the string ``<TT>Query:</TT>" starting in the first column, followed by a single space and the name of the CI. The affected database CIs are to be printed next, each on a separate line that begins with ``<TT>Database:</TT>" followed by a single space and the affected CI name. Applications are to be listed last, using the same formatâeach on a separate line that begins with ``<TT>Application:</TT>" followed by a single space and the affected CI name. The database and application CIs should be listed in ASCII lexical order. The lines containing affected CI names are to begin in the fourth column. If a CI is listed because it is in a degraded state, print an asterisk in the third column. 

<P>
A CMDB storage switch query is to report that the databases and applications running on a given server are running in a degraded state if the server can reach all its storage on one or more other paths. Should such a server lose all connectivity to a storage array it uses, all databases and applications running on that server will be down. If a server should lose a network connection that affects needed connectivity for applications that run on the server, those applications will be degraded or down (based on the availability of other network paths). 

<P>
Your proof-of-concept implementation is to have the capacity to handle 250 CI definitions and 1,000 CI relationships.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
CI AA storage-array 
CI S1 server 
CI S2 server 
CI S3 server 
CI FCSW storage-switch 
CI IPSW network-switch 
CI ODB database 
CI PDB database 
CI FINANCE application 
CI CRM application 
RE CRM uses ODB 
RE FINANCE uses PDB 
RE S1 uses AA 
RE S2 uses AA 
RE S1 connects-to FCSW 
RE S2 connects-to FCSW 
RE AA connects-to FCSW 
RE ODB runs-on S2 
RE PDB runs-on S1 
RE S1 connects-to IPSW 
RE S2 connects-to IPSW 
RE S3 connects-to IPSW 
RE FINANCE runs-on S1 
RE CRM runs-on S2 
?? PDB 
?? S2
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Query: PDB 
   Application: FINANCE 
Query: S2  
   Database: ODB 
   Application: CRM
</PRE> 

<P>

______________________________________________________
3754||||||false||||||

<P>
BigOh Corporation is expanding into Swamp County by building a new datacenter housing thousands of powerful server computers. Operating a datacenter requires a significant amount of electrical power, which is a particular challenge given Swamp County's poor infrastructure. Given Swamp County's sub-tropical location, one thing the county does have in large amounts is sunshine. BigOh, being an environmentally responsible company, is exploring the possibility of building and operating a completely solar-powered datacenter. Your task is to help estimate the feasibility of such a datacenter under various conditions. 

<P>
Given a four-day sunlight forecast, information about the solar panels and the servers, and a list of jobs to process, your team is to write a program that will determine if the requested jobs can be completed without running out of power. 

<P>
The four-day sunlight forecast consists of four input lines with one-day forecasts, each of which consists of a day name, sunrise time, sunset time, and cloud index floating point value between 0.000 and 1.000, separated from each other by whitespace. Times are specified on a 24-hour clock, so, for example, 1:00 PM would be written as 13:00. Day names will be single words of no more than 20 characters. 

<P>
The solar panels in the solar array are all flat, unobstructed, and aligned to be perpendicular to the sun at noon. On a day with exactly 12 hours of sunlight and a cloud index of 0.000, the solar panel array will collect 100 kilowatt hours (kWh). The amount of power collected scales linearly with the sunshine duration and cloud index. For example, on a day with 15-hours of sunshine and a cloud index of 0.5, the array would generate 62.5 kWh. No power at all is collected before dawn or after sunset. 

<P>
Power flows from the solar panel arrays to a high-capacity battery system. This battery system has a large capacity, but it is still limited to a given number of output kWh. The battery system also loses a certain percentage of the power put into it. For example, a battery system that has a maximum output capacity of 100 kWh and is 80<SPAN CLASS="MATH">%</SPAN>
<tex2html_verbatim_mark> efficient would have an output of 100 kWh if and only if the solar panel arrays generated at least 125 kWh that day. The battery system capacity in kWh and efficiency percentage will be specified on one input line after the forecast, separated by whitespace. 

<P>
To protect the capacity of the batteries over their lifetime, the entire battery system is completely drained just before dawn each day. To minimize overheating, the servers operate only during the cool late-night hours. The servers are fast enough to do all needed work between sunset and midnight, so the time needed to execute each job will not be a limiting factorâonly the power consumed matters. 

<P>
Each processing job is a massively parallel task that all servers work on as a group, and only one job may be active at any moment in time. Each job must run to completion in a single night. Some jobs are independent of other jobs, while others can only be run after some other job has produced needed output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The program input may specify from one to ten jobs. Each job is described by one line with a unique upper-case letter ID, the kWh of power needed to complete the job as a floating point value, the IDs of zero or more prerequisite jobs, and a human-readable string inside quotation marks that describes the purpose of the job. These fields are separated from each other by whitespace. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program should determine a four-day job schedule. Your program's output is to be a single line with the job IDs in the order in which the jobs should be run, with the days separated from each other by vertical-bar characters. If there are multiple possible schedules, print the one which is lexigraphically first in ASCII. If there is no possible schedule that will allow all jobs to complete without running out of power, your program should instead print one line: ``<TT>Insufficent sunlight for requested jobs.</TT>" If the input specifies dependencies between jobs that contain a cycle or a dependency on a non-existent job, print the line ``<TT>Invalid job dependencies.</TT>"

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Mon 06:02 17:58 0.000 
Tue 06:02 17:58 0.000 
Wed 06:03 17:57 0.200 
Thu 06:03 17:57 0.250 
100 80% 
A 12.0 "crawl web sites" 
B 22.0 A "parse web pages" 
C 18.8 "filter out spam emails" 
D 45.9 B "build web page index" 
E 69.6 B "compute page rank" 
F 13.3 "optimize text advertising bids" 
G 10.0 "crawl news sites" 
H 47.2 "stitch together satellite photos" 
I 4.9 B "classify pages for safesearch" 
J 18.8 "transcode video clips"
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
ABCIJ|E|DF|GH
</PRE> 


______________________________________________________
3755||||||false||||||
<P>A web <SPAN CLASS="textit">template engine</SPAN> is a software that is designed to process web templates and content information to produce web documents. A template is an html page, but without the content. In a way, a template system facilitates the separation between <SPAN CLASS="textit">the information</SPAN> in a web page, and <SPAN CLASS="textit">the presentation</SPAN> of it.<P>A template system normally comes with a (restricted and specialized) programming language to allow the variation of the presentation depending on certain properties of the information. For example, when presenting a bank statement, the bank may decide to display in red any transaction with an amount above <SPAN CLASS="MATH">$</SPAN> <tex2html_verbatim_mark>1,000 in order to grab the attention of the user.<P>Another technique, frequently used in printing tables, is to alternate the background color of rows to make it easier for the reader to visually follow a row. For example, the background color in Table (a) alternates after each row, while in Table (b) the color alternates every three rows.<P><DIV ALIGN="CENTER"><IMG WIDTH="435" HEIGHT="511" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3755img1.png ALT="\epsfbox{p3755a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="447" HEIGHT="524" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3755img1.png ALT="\epsfbox{p3755b.eps}"> <tex2html_verbatim_mark></DIV><P>A properly designed template language would have a construct to allow the designer to alternate the properties of table rows. In this problem we shall concentrate on one such construct that takes three arguments: <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. The template engine would then apply <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> on the first <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> rows, <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> on the second <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> rows, and then back to <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> on the third <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> rows, and so on.<P>Write a program that takes the current row number (starting at one,) the number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> , and properties <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and determines which of <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> should be applied to the current row.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on a separate line. Each line specifies four values: <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, all separated by one or more spaces.<P><SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is the current row number (first row is numbered 1) while <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is as described above. Note that <SPAN CLASS="MATH">0 &lt; <I>R</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $N < 1, 000, 000, 000$
 --><SPAN CLASS="MATH"><I>N</I> &lt; 1, 000, 000, 000</SPAN> <tex2html_verbatim_mark>.<P><SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> are properties. A property is a string made of upper- or lower-case letters, digits, and/or spaces. A property may be surrounded by double quotes, (but the double quotes are not part of the property.) If a property contains spaces, the surrounding double quotes are mandatory. No property will be longer than 512 characters (including the double quotes, if present.)<P>The last line of the input file is made of a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><TT>.</TT> <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3755img1.png ALT="$ \sqcup$"> <I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. Note that the double quotes are never printed. In addition, all letters are printed in lower case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1 red blue 
2 1 red blue 
3 1 red blue 
6 3 "big font" "small font" 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Output</A>&nbsp;</FONT></H2><P><PRE>
1. red 
2. blue 
3. red 
4. small font
</PRE><P>
______________________________________________________
3756||||||false||||||
<P>Tetris is a famous video game that has 5 pieces similar to these:<P><DIV ALIGN="CENTER"><IMG WIDTH="588" HEIGHT="76" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3756img1.png ALT="\epsfbox{p3756a.eps}"> <tex2html_verbatim_mark></DIV><P>In this problem, you're given an <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> <tex2html_verbatim_mark> grid of integers. We want to place a single piece of TETRIS on the grid such that the sum of the numbers below the piece are the maximum. Notice that all but the last TETRIS piece can be rotated by 90 degrees. Some pieces even have four different orientations. Any orientation is acceptable as long as the piece completely fits inside the grid. For example, the left-most piece can be placed on the first row of the grid, with a sum of 80. It can also be placed, for example, on the third column, yielding a sum of 91. As a matter of fact, in a <SPAN CLASS="MATH">4&#215;4</SPAN> <tex2html_verbatim_mark> grid, we can have 77 different ways to place the Tetris pieces. In the sample grid shown below, the largest sum that can be achieved is 120.<P><DIV ALIGN="CENTER"><IMG WIDTH="192" HEIGHT="188" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3756img1.png ALT="\epsfbox{p3756b.eps}"> <tex2html_verbatim_mark></DIV><DIV ALIGN="CENTER"><IMG WIDTH="192" HEIGHT="192" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3756img1.png ALT="\epsfbox{p3756c.eps}"> <tex2html_verbatim_mark></DIV><DIV ALIGN="CENTER"><IMG WIDTH="191" HEIGHT="192" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3756img1.png ALT="\epsfbox{p3756d.eps}"> <tex2html_verbatim_mark></DIV><DIV ALIGN="CENTER"><IMG WIDTH="192" HEIGHT="192" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3756img1.png ALT="\epsfbox{p3756e.eps}"> <tex2html_verbatim_mark></DIV><P>Write a program that determines the largest such sum for a given grid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. The first line of a test case has a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> denoting the grid size where <SPAN CLASS="MATH">4<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3756img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3756img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. The grid will be specified using <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines starting on the second line in a row major format. Each line will have <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers separated by one or more spaces. The absolute value of each integer in the grid will not exceed <SPAN CLASS="MATH">1, 000, 000</SPAN> <tex2html_verbatim_mark>. The end of the input cases is specified by a zero on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><TT>.</TT> <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3756img1.png ALT="$ \sqcup$"> <I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark> is the largest sum that can be obtained.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
70  2  1 7
 7  1 30 6 
 4 30 30 5 
 3  1 30 2 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Output</A>&nbsp;</FONT></H2><P><PRE>
1. 120
</PRE><P>
______________________________________________________
3757||||||false||||||

<P>
Blocks is a game where you're given wooden pieces that come in eight shapes as shown below:

<P>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p3757a.eps}$
 -->
<IMG
 WIDTH="869" HEIGHT="166" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3757img1.png
 ALT="\epsfbox{p3757a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The objective of the game is to assemble the widest rectangle that can be made of a subset of the given pieces with the following conditions:

<P>

<OL>
<LI>The rectangle must have smooth edges. In other words, the left-most piece must be 
<!-- MATH
 $\epsfbox{p3757d.eps}$
 -->
<IMG
 WIDTH="25" HEIGHT="49" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3757img1.png
 ALT="\epsfbox{p3757d.eps}">
<tex2html_verbatim_mark>
(piece #1) and the right-most piece must be 

<!-- MATH
 $\epsfbox{p3757e.eps}$
 -->
<IMG
 WIDTH="26" HEIGHT="48" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3757img1.png
 ALT="\epsfbox{p3757e.eps}">
<tex2html_verbatim_mark>
(piece #2.)
</LI>
<LI>Adjacent pieces must interlock properly. For example, either piece #4 or piece #5 must appear to the right of piece #1. Similarly, piece #4 can appear to the right of piece #1 or piece #3.
</LI>
<LI>No piece interlocks to the left of piece #1. No piece interlocks to the right of piece #2. 
</LI>
<LI>For each piece #1, the rectangle must have a matching piece #2. Similarly, for each piece #5, there must be a matching piece #6.
</LI>
</OL>

<P>
For example, the following two examples are valid arrangements:

<P>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p3757b.eps}$
 -->
<IMG
 WIDTH="1022" HEIGHT="153" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3757img1.png
 ALT="\epsfbox{p3757b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Whereas the following three are not: 

<P>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p3757c.eps}$
 -->
<IMG
 WIDTH="1203" HEIGHT="128" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3757img1.png
 ALT="\epsfbox{p3757c.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
A computer company is interested in building a BLOCKS video game and has hired you to write a program that determines if a given pieces' arrangement is valid according to the rules above, or not.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program will be tested on one or more test cases. Each test case is specified on a separate input line. Each piece is specified using the digit associated with it as in the previous figure. An arrangement is specified by listing its digits with no spaces between the digits. Each arrangement will have at least one piece, but no more than <SPAN CLASS="MATH">10, 000</SPAN>
<tex2html_verbatim_mark> pieces.

<P>
The last line in the input file will have a single <TT>0</TT>. That line is not part of the test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the result on a single line using the following format:

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark><TT>.</TT><!-- MATH
 $\sqcup result$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3757img1.png
 ALT="$ \sqcup$"> <I>result</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
Where <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> is the test case number (starting at 1,) and result is ``<TT>VALID</TT>" if the arrangement is valid, or ``<TT>NOT</TT>" if it's not.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
142 
1587862 
132 
143 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1. VALID 
2. VALID 
3. NOT 
4. NOT
</PRE> 

<P>

______________________________________________________
3758||||||false||||||
<P>WALK LIKE AN EGYPTIAN is an old multi-player board game played by children of the Sahara nomad tribes. Back in the old days, children would collect stones, and number each one of them. A game with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> players requires <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> stones. Each player chooses <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> stones. The stones are then laid out on an <SPAN CLASS="MATH"><I>N</I> <TT>*</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> grid in a peculiar order as in Figure (a) (for <SPAN CLASS="MATH"><I>N</I> = 4</SPAN> <tex2html_verbatim_mark>.) The player whose stone is placed in the top-right corner loses the round. Another round is then played but with <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> players. In total, <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> rounds are played to determine the winner.<P><DIV ALIGN="CENTER"><IMG WIDTH="192" HEIGHT="243" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3758img1.png ALT="\epsfbox{p3758a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="190" HEIGHT="230" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3758img1.png ALT="\epsfbox{p3758b.eps}"> <tex2html_verbatim_mark></DIV><P>There is a story why the stones are arranged in this order. It is said that back in the days of the Pharaohs, when entering a dark room in a Pyramid, workers would use the following ``algorithm" to be able to walk in the room without losing anybody: (see Figure (b)).<P><OL><LI>The first worker stands in the lower-left corner of the room. </LI><LI>The next three workers stand around the first forming a quarter of a circle by going in an anti-clockwise direction. </LI><LI>The next five workers stand around the last three, again forming a quarter of a circle but this time going in a clockwise direction. </LI><LI>The workers keep repeating the last two steps until the room is filled with workers. Each time they hit the left or bottom walls, they start a larger quarter circle and alternate their direction between clockwise and anti-clockwise. </LI></OL><P>Write a program that determines the stone placed on the top-right corner.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on a separate input line. Each test case will specify the number of players <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> where <!-- MATH
 $0 < N < 1, 000$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 1, 000</SPAN> <tex2html_verbatim_mark>.<P>The end of the test cases is indicated by a line made of a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><SPAN CLASS="MATH"><I>N</I> <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3758img1.png ALT="$ \sqcup$"></SPAN> <tex2html_verbatim_mark> <TT>=&gt;</TT> <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3758img1.png ALT="$ \sqcup$"> <I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of players for the this test case, and result is the number on the stone placed at the top-right corner of the grid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
2 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Output</A>&nbsp;</FONT></H2><P><PRE>
4 =&gt; 13 
2 =&gt; 3
</PRE><P>
______________________________________________________
3759||||||false||||||
<P>SAHARA is a two player board game played on a hexagon-shaped grid made out of 54 triangles as the one shown in Figure (a). Each player has 6 (tetraeder) pyramids, initially placed as seen Figure (b). Player one has the dark pyramids, player two has the lighter ones. The players take turns in moving one of their own pyramids. A pyramid is moved by tipping the pyramid on its side into an adjacent space. For example, a pyramid at location 11 can be moved to location 3, 10, or 12 (assuming the destination location is free.)<P><DIV ALIGN="CENTER"><IMG WIDTH="458" HEIGHT="447" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3759img1.png ALT="\epsfbox{p3759a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="460" HEIGHT="447" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3759img1.png ALT="\epsfbox{p3759b.eps}"> <tex2html_verbatim_mark></DIV><P>The objective of the game is to trap a pyramid of the opponent. A pyramid is trapped if it can't be moved. For example, a pyramid at location 11 is trapped if locations 3, 10, and 12 are all occupied (regardless of which player's pyramids occupy these locations.) Similarly, a pyramid at location 28 is trapped if both locations 17 and 29 are occupied. For example, in Figure (c) on the next page, player one can win the game by moving his pyramid from location 30 to location 29 and thus trapping the opponent's pyramid at location 28.<P><DIV ALIGN="CENTER"><IMG WIDTH="458" HEIGHT="460" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3759img1.png ALT="\epsfbox{p3759c.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="460" HEIGHT="447" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3759img1.png ALT="\epsfbox{p3759d.eps}"> <tex2html_verbatim_mark></DIV><P>Write a program that determines if the first player can trap an opponent's pyramid in a single move.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on a single line. Each test case is made of 12 numbers in the range <SPAN CLASS="MATH">[1, 54]</SPAN> <tex2html_verbatim_mark>. The first six numbers specify the locations of the first player's pyramids. The last six are for the second player. The locations are numbered in the same way as in Figure (a). Numbers are separated using one or more spaces. All test cases specify a valid game position where no pyramid is already trapped.<P>The last line of the input file will have a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><TT>.</TT> <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3759img1.png ALT="$ \sqcup$"> <I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark> is ``<TT>TRAPPED</TT>" if the first player can trap a pyramid of the opponent by moving one of his pyramids. Otherwise, result is ``<TT>FREE</TT>".<P><P><P><BR><B>Note:</B> The first test case corresponds to figure (c) while the second to figure (d).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
30 2 7 44 22 45   28 41 46 17 27 1 
30 2 7 44 22 45   28 41 46 18 27 1 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Output</A>&nbsp;</FONT></H2><P><PRE>
1. TRAPPED 
2. FREE
</PRE><P>
______________________________________________________
3760||||||false||||||
<P><SPAN CLASS="textit">Johnny hates Number Theory!</SPAN> Actually, back in 2002, we came to know that Johnny couldn't count and in 2005 we knew that Johnny couldn't yet add. (But we did know in 2003 that Johnny was street smart enough to solve difficult graph problems!) Why Johnny decided to study Number Theory is incomprehensible to us.<P>Anyhow, back to Johnny. Johnny just failed his comprehensive exam and that was all because of Euler's Totient function (<SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \varphi$"></SPAN> <tex2html_verbatim_mark> ). Johnny is so angry that he decides to create his own Totient function. Here's how he described it to his advisor:<P>In number theory, the prime factors of a positive integer are the prime numbers that divide into that integer exactly, without leaving a remainder. Johnny defines function <SPAN CLASS="MATH"><I>F</I>(<I>n</I>)</SPAN> <tex2html_verbatim_mark>, for <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \ge$">2</SPAN> <tex2html_verbatim_mark>, to be the non-decreasing list of prime numbers whose product is <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. For example, <SPAN CLASS="MATH"><I>F</I>(8) = <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \ll$"> 2, 2, 2 <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \gg$"></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>F</I>(60) = <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \ll$"> 2, 2, 3, 5 <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \gg$"></SPAN> <tex2html_verbatim_mark> , and <SPAN CLASS="MATH"><I>F</I>(71) = <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \ll$"> 71 <IMG WIDTH="22" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \gg$"></SPAN> <tex2html_verbatim_mark> (71 is a prime.) Let <SPAN CLASS="MATH"><I>O</I>(<I>n</I>)</SPAN> <tex2html_verbatim_mark> be the length of the list <SPAN CLASS="MATH"><I>F</I>(<I>n</I>)</SPAN> <tex2html_verbatim_mark> (i.e. its ordinal.) For example, <SPAN CLASS="MATH"><I>O</I>(8) = 3</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>O</I>(60) = 4</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>O</I>(71) = 1</SPAN> <tex2html_verbatim_mark>. Johnny also defines function <SPAN CLASS="MATH"><I>p</I>(<I>n</I>)</SPAN> <tex2html_verbatim_mark> over positive integers as follows:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>p</I>(<I>n</I>) = <IMG WIDTH="20" HEIGHT="84" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$\displaystyle \left\{\vphantom{ \begin{array}{ll}
0 &amp; $ if $n = 1 \\
-1 &amp; $ if $n$ is a prime number$ \\
O(n) &amp; $otherwise$ \\
\end{array} }\right.$"><IMG WIDTH="251" HEIGHT="82" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$\displaystyle \begin{array}{ll}
0 &amp; $ if $n = 1 \\
-1 &amp; $ if $n$ is a prime number$ \\
O(n) &amp; $otherwise$ \\
\end{array}$"></DIV><P><tex2html_verbatim_mark></P><P>The following table illustrates <SPAN CLASS="MATH"><I>p</I>(<I>n</I>)</SPAN> <tex2html_verbatim_mark> for the first twenty positive integers:<P><P><P><BR><TABLE COLS=21 BORDER FRAME=HSIDES RULES=GROUPS><COL ALIGN=LEFT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><COL ALIGN=RIGHT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>16</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>17</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>18</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>19</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>20</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>p</I>(<I>n</I>)</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD></TR></TBODY></TABLE><P><P><P><BR>Given two positive integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>a</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \le$"><I>b</I></SPAN> <tex2html_verbatim_mark>, Johnny defines his very own Totient function <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \varphi$">(<I>a</I>, <I>b</I>)</SPAN> <tex2html_verbatim_mark> as follows:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$\displaystyle \varphi$">(<I>a</I>, <I>b</I>) = (<IMG WIDTH="29" HEIGHT="70" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$\displaystyle \sum^{{b}}_{{k=a}}$"><I>p</I>(<I>k</I>)) - (<I>b</I> - <I>a</I> + 1)</DIV><P><tex2html_verbatim_mark></P><P>For example, <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \varphi$">(1, 4) = - 4</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \varphi$">(16, 16) = 3</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \varphi$">(8, 12) = 4</SPAN> <tex2html_verbatim_mark>.<P>For his dissertation, Johnny needs a program that determines the maximal <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \varphi$"></SPAN> <tex2html_verbatim_mark> within a given range <SPAN CLASS="MATH">[<I>L</I>, <I>U</I>]</SPAN> <tex2html_verbatim_mark>. In other words, given two positive integers <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \le$"><I>U</I></SPAN> <tex2html_verbatim_mark> , the program must find the maximum <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \varphi$">(<I>a</I>, <I>b</I>)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \le$"><I>a</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \le$"><I>U</I></SPAN> <tex2html_verbatim_mark>. For example, the maximal <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \varphi$"></SPAN> <tex2html_verbatim_mark> within the range [1, 20] is 7 (which is <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \varphi$">(8, 16)</SPAN> <tex2html_verbatim_mark>.)<P>Write the program Johnny needs!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on a single line. Each test case is specified using two positive integers <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> separated by one or more spaces, and satisfying the following property: <!-- MATH
 $1 \le L \le U < 1, 000, 000$
 --><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \le$"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \le$"><I>U</I> &lt; 1, 000, 000</SPAN> <tex2html_verbatim_mark><P>The end of the test cases is indicated by a line made of two <TT>-1</TT>'s. That last line is is not part of the test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><TT>.</TT> <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \sqcup$"> <I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and result is the maximal <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3760img1.png ALT="$ \varphi$"></SPAN> <tex2html_verbatim_mark> that can be found within the range <SPAN CLASS="MATH">[<I>L</I>, <I>U</I>]</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 5 
1 20 
10 20 
900000 901000 
-1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 1 
2. 7 
3. 5 
4. 2551
</PRE><P>
______________________________________________________
3761||||||false||||||
<P>Given graph G which is a connected, weighted, undirected graph, a <SPAN CLASS="textit">spanning tree</SPAN> T is a subgraph of G which is: (1) a tree that (2) connects all the vertices of G together. The <SPAN CLASS="textit">weight</SPAN> of a spanning tree is the sum of the weights of the edges in that tree. A <SPAN CLASS="textit">minimum spanning</SPAN> tree is a spanning tree: (3) whose weight is less than or equal to the weight of every other spanning tree.<P>Write a program that determines if a given tree T is a Minimum Spanning Tree for a given graph G.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. For each test case you'll be given a graph G and one or more trees to test. The first line of a test case will have a single positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> denoting the number of vertices in G (where <!-- MATH
 $1 < n \le 1000$
 --><SPAN CLASS="MATH">1 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3761img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>). The vertices are numbered starting from 1. The next <SPAN CLASS="MATH">(<I>n</I> - 1)</SPAN> <tex2html_verbatim_mark> lines specify the upper triangle of the graph's adjacency matrix as seen here:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>1, 2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>1, 3</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>...</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>1, n-1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>1, n</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>2, 3</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>2, 4</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>...</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>2, n</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3761img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>W</I><SUB>n-1, n</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TABLE></DIV><P><P><BR>where <SPAN CLASS="MATH"><I>W</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark> is the weight of the edge between vertices <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>W</I><SUB>i, j</SUB> = 0</SPAN> <tex2html_verbatim_mark> iff there is no edge between <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>. Note that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3761img1.png ALT="$ \le$"><I>W</I><SUB>i, j</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3761img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark><P>Following the graph specification, a test case will specify a single positive number <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> on a separate line where <!-- MATH
 $0 < Q \le 1000$
 --><SPAN CLASS="MATH">0 &lt; <I>Q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3761img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> denotes the number of trees to test on the given graph.<P>Each tree either consists of a single vertex, given by its number, or is specified as:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">(<I>R</I>&nbsp;<I>T</I><SUB>1</SUB>&nbsp;<I>T</I><SUB>2</SUB>&nbsp;...&nbsp;<I>T</I><SUB>c</SUB>)</DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is the number of the vertex at the root and <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB>,..., <I>T</I><SUB>c</SUB></SPAN> <tex2html_verbatim_mark> (where <!-- MATH
 $0 < c \le 1000$
 --><SPAN CLASS="MATH">0 &lt; <I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3761img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>) are the sub-trees of <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> specified recursively.<P>The last line of the input file will have a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each query, write the result on a separate line using the following format:<P><P><BR><SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark><TT>.</TT><SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark><TT>.</TT> <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3761img1.png ALT="$ \sqcup$"> <I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is the query number <SPAN CLASS="textit">within</SPAN> this test case (again starting at 1.) <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark> is either ``<TT>YES</TT>" or ``<TT>NO</TT>" indicating if the tree is a minimum spanning tree or not.<P><P><BR><SPAN CLASS="textbf">Sample Illustration</SPAN><P>The following figures illustrate the sample I/O. The top half is for the first test case, while the second test case is on the bottom. In the graph, vertex numbers are underlined and the edges of a minimum spanning tree are drawn in thicker lines.<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="1202" HEIGHT="382" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3761img1.png ALT="\epsfbox{p3761a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">=6in <IMG WIDTH="959" HEIGHT="441" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3761img1.png ALT="\epsfbox{p3761b.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
2  6 11 0 0 
0 10  0 0 
0  0  7 
3  4 
5 
3 
(6 (3 (1 2)) (4 5)) 
(3 (1 2) (6 (4 5))) 
(4 1 2 5 6) 
5
 6 6  0 6 
 6 0 10 
10 6 
10 
2 
(1 2 5 (3 4)) 
(5 4 (3 2 1)) 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Output</A>&nbsp;</FONT></H2><P><PRE>
1.1 YES 
1.2 YES 
1.3 NO 
2.1 YES 
2.2 YES
</PRE><P>
______________________________________________________
3762||||||false||||||
<P>A-to-Z is a game usually played by kids in elementary schools to help them improve their spelling skills and to enrich their vocabulary. The game comes with a set of words, each word written on a piece of plastic. Children challenge each other by picking two letters (let's call them <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>) and then trying to <SPAN CLASS="textit">connect</SPAN> these letters by finding a sequence of one or more words (we'll refer to them as <SPAN CLASS="MATH"><I>W</I><SUB>1</SUB>, <I>W</I><SUB>2</SUB>,..., <I>W</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>) where the first word <SPAN CLASS="MATH"><I>W</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> starts with <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and the last word <SPAN CLASS="MATH"><I>W</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> ends with <SPAN CLASS="MATH"><I>C</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. Each two consecutive words in the sequence ( <SPAN CLASS="MATH"><I>W</I><SUB>i</SUB>, <I>W</I><SUB>i+1</SUB></SPAN> <tex2html_verbatim_mark>) must overlap with at least two letters. Word <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> overlaps by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> letters with word <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> if the last <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> letters of <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> are the same as the first <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> letters of <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> . Take for example the figure on the right, where `<TT>a</TT>' was connected to `<TT>s</TT>' using the two-word sequence ``<TT>against</TT>" and ``<TT>students</TT>".<P><DIV ALIGN="CENTER"><IMG WIDTH="305" HEIGHT="89" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3762img1.png ALT="\epsfbox{p3762a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="255" HEIGHT="128" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3762img1.png ALT="\epsfbox{p3762b.eps}"> <tex2html_verbatim_mark></DIV><P>To determine the winner of the game, each sequence is assigned a penalty which is equal to the number of letters in the sequence (but overlapping letters are counted only once.) The player with <SPAN CLASS="textit">the least penalty wins</SPAN>. Going back to the figure, the first sequence ``<TT>against students</TT>" has a penalty of 13, while the second sequence ``<TT>about outside ideas</TT>" has a penalty of 11. You can think of the penalty as the width taken when the sequence is laid out as in the figure. The winning sequence is the one with the smallest width.<P>Write a program that takes a dictionary of words and determines the winning sequence connecting two given letters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case specifies a dictionary of words, and a list of one or more character pairs (called queries,) to connect using the dictionary.<P>The first line of a test case is a positive number <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> which denotes the number of words in the dictionary. The words are listed starting at the second line: One word per line. Words are made of lowercase letters only. No word is longer than 64 characters. A dictionary has at most <SPAN CLASS="MATH">50, 000</SPAN> <tex2html_verbatim_mark> words.<P>Following the dictionary, <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> queries are specified using <SPAN CLASS="MATH"><I>q</I> + 1</SPAN> <tex2html_verbatim_mark> lines. The first line specifies the number of queries, <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>. Each query is specified on a separate line. Each query specifies two lowercase letters <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>.<P>The end of the test cases is identified with an input line that contains a single integer <SPAN CLASS="MATH"><I>w</I> = 0</SPAN> <tex2html_verbatim_mark> (which is not part of the test cases.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each query, write the result on a separate line. If there is no sequence connecting the two letters, your program should print:<P><P><BR><SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark><TT>.</TT><SPAN CLASS="MATH"><I>b</I> <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3762img1.png ALT="$ \sqcup$"></SPAN> <tex2html_verbatim_mark><TT>0</TT><P><P><BR>where <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is the query number within this test case (again starting at 1.)<P>If, however, there is a sequence, your program should print the following:<P><P><BR><SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark><TT>.</TT> <SPAN CLASS="MATH"><I>b</I> <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3762img1.png ALT="$ \sqcup$"> <I>p</I> <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3762img1.png ALT="$ \sqcup$"> <I>word</I> - 1 <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3762img1.png ALT="$ \sqcup$"> <I>word</I> - 2 <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3762img1.png ALT="$ \sqcup$">...<IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3762img1.png ALT="$ \sqcup$"> <I>word</I> - <I>n</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> are as described previously, <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> is the penalty of the sequence. <SPAN CLASS="MATH"><I>word</I> - 1, <I>word</I> - 2,...<I>word</I> - <I>n</I></SPAN> <tex2html_verbatim_mark> is the sequence, where <SPAN CLASS="MATH"><I>word</I> - 1</SPAN> <tex2html_verbatim_mark> starts with <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>word</I> - <I>n</I></SPAN> <tex2html_verbatim_mark> ends with <SPAN CLASS="MATH"><I>C</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, and each two consecutive words overlap with at least two characters. Remember, we're interested in the sequence with the minimum possible penalty in the given dictionary. If there are more than one solution for a query, print any of them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 
ones 
against 
students 
about 
outside 
other 
ideas 
added 
education 
3 
a s 
o s 
o t 
3 
aaabb 
aabbbb 
bbbbz 
2 
a z 
z a 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Output</A>&nbsp;</FONT></H2><P><PRE>
1.1 11 about outside ideas 
1.2 4 ones 
1.3 0 
2.1 7 aabbbb bbbbz 
2.2 0
</PRE><P>
______________________________________________________
3763||||||false||||||
<P>You must have heard of the great mathematician <SPAN CLASS="textit">Leonardo da Pisa Fibonacci</SPAN> (1170-1240). Among the many algorithms that he described in his <SPAN CLASS="textit">Liber Abaci</SPAN> book, (which was first published in 1202,) Fibonacci described the <SPAN CLASS="textit">Casting Out Nines</SPAN> procedure for checking out addition, subtraction, and multiplication. According to historians, the procedure was transmitted to Europe by the Arabs, but was probably developed somewhere on the Indian subcontinent and is therefore sometimes also called ``<SPAN CLASS="textit">the Hindu check.</SPAN>"<P>``<SPAN CLASS="textit">Casting out nines</SPAN>" is an elementary check of a multiplication which makes use of the congruence <SPAN CLASS="MATH">10<SUP>x</SUP> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> 1</SPAN> <tex2html_verbatim_mark> (mod 9). Remember that when writing <SPAN CLASS="MATH"><I>x</I> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> <I>y</I></SPAN> <tex2html_verbatim_mark> (mod <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark>) we're actually saying that (<SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> mod <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark>) is equal to (<SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> mod <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark>).<P>Let <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> be natural numbers whose product is <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. Let the sums of the digits of these numbers be <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{a}}$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="22" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{b}}$"></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{c}}$"></SPAN> <tex2html_verbatim_mark>. Then <SPAN CLASS="MATH"><I>a</I> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> <IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{a}}$">( mod 9)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> <IMG WIDTH="12" HEIGHT="22" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{b}}$">( mod 9)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> <IMG WIDTH="12" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{c}}$">( mod 9)</SPAN> <tex2html_verbatim_mark>. Furthermore <SPAN CLASS="MATH"><I>a</I>&#215;<I>b</I> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> <IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{a}}$">&#215;<IMG WIDTH="12" HEIGHT="22" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{b}}$">( mod 9)</SPAN> <tex2html_verbatim_mark>, and so <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{a}}$">&#215;<IMG WIDTH="12" HEIGHT="22" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{b}}$"> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> <IMG WIDTH="12" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{c}}$">( mod 9)</SPAN> <tex2html_verbatim_mark>. So if <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{a}}$">&#215;<IMG WIDTH="12" HEIGHT="22" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{b}}$"></SPAN> <tex2html_verbatim_mark> are incongruent <SPAN CLASS="MATH">( mod 9)</SPAN> <tex2html_verbatim_mark>, the multiplication has been done incorrectly.<P>For example, <SPAN CLASS="MATH">12345&#215;67890 = 838102050</SPAN> <tex2html_verbatim_mark>. The sum-of-digits of 12345 and 67890 are 15 and 30, respectively, and the product of these is 450. Similarly, the sum-of-digits of 838102050 is 27. And since <SPAN CLASS="MATH">450 <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> 27 <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> 0</SPAN> <tex2html_verbatim_mark> (mod 9), so the Hindu Check shows agreement.<P>As another example, say someone incorrectly calculates <SPAN CLASS="MATH">13579&#215;24680 = 334129720</SPAN> <tex2html_verbatim_mark>. Since <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{a}}$">&#215;<IMG WIDTH="12" HEIGHT="22" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{b}}$"> = 25&#215;20 = 500 <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> 5( mod 9)</SPAN> <tex2html_verbatim_mark> whereas <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{c}}$"> = 31 <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> 4( mod 9)</SPAN> <tex2html_verbatim_mark>. So the multiplication is definitely incorrect.<P>The Hindu check can also be used to check on additions, since <SPAN CLASS="MATH"><I>a</I> + <I>b</I> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \equiv$"> <IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{a}}$"> + <IMG WIDTH="12" HEIGHT="22" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \overline{{b}}$">( mod 9)</SPAN> <tex2html_verbatim_mark>. Write a program that determines if a given addition or multiplication passes the Hindu Check or not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on a separate input line. Each line is of the form:<P><P><BR><TT><SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>+<SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>=<SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>.</TT><P><P><BR>Or,<P><P><BR><TT><SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>*<SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>=<SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>.</TT><P><P><BR>Notice the `<TT>.</TT>' at the end of the line. `<TT><SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark></TT>', `<TT><SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark></TT>', and `<TT><SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark></TT>' are natural numbers. There are no spaces between the numbers and the symbols (`<TT>+</TT>', `<TT>*</TT>', `<TT>=</TT>', and `<TT>.</TT>',) but trailing white-space may appear after the `<TT>.</TT>'.<P>The last line of the input file, which is not part of the test cases, will have a single `<TT>.</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><TT>.</TT> <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3763img1.png ALT="$ \sqcup$"> <I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) and <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark> is ``<TT>PASS</TT>" if the addition or multiplication operation of this test case passes the Hindu Check. Otherwise, <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark> is ``<TT>NOT!</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
12345*67890=838102050. 
13579*24680=334129720. 
23+11=34. 
.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Output</A>&nbsp;</FONT></H2><P><PRE>
1. PASS 
2. NOT! 
3. PASS

______________________________________________________
3764||||||false||||||
<P>Alias is an assumed or additional name that constitutes a distinctive designation of a person. Consider a set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> persons and assume that each person has <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> distinct aliases. A person is identified using any one of its <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> aliases. The <SPAN CLASS="MATH"><I>nk</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(= <I>n</I>&#215;<I>k</I>)</SPAN> <tex2html_verbatim_mark> distinct aliases are identified using integers <SPAN CLASS="MATH">1, 2,...<I>nk</I></SPAN> <tex2html_verbatim_mark>. Integers <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark> represent the first aliases of all <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> persons in an arbitrary order. In general, integers <SPAN CLASS="MATH">(<I>j</I> - 1)&#215;<I>n</I> + 1,(<I>j</I> - 1)&#215;<I>n</I> + 2,...,(<I>j</I> - 1)&#215;<I>n</I> + <I>n</I></SPAN> <tex2html_verbatim_mark> represent the <SPAN CLASS="MATH"><I>j</I><SUP>th</SUP></SPAN> <tex2html_verbatim_mark> alias of all n persons in an arbitrary order, for <SPAN CLASS="MATH"><I>j</I> = 1, 2,..., <I>k</I></SPAN> <tex2html_verbatim_mark>. Persons in the set are totally ordered with respect to a quality characteristic <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> associated with each person. Let <SPAN CLASS="MATH"><I>Q</I>(<I>r</I>)</SPAN> <tex2html_verbatim_mark> be the value of <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> for a person identified by one of its alias <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>.<P>Given a sufficient number, say <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, of inequalities of the type: <SPAN CLASS="MATH"><I>Q</I>(<I>r</I>) &gt; <I>Q</I>(<I>s</I>)</SPAN> <tex2html_verbatim_mark>, you are required to write a program to sort all persons in descending order and recognize all aliases of each person in the set.<P>As a simple illustration consider distinct total marks scored by three students in an examination. Each student is identified by any one of three distinct aliases in the Name: {first-name middle-name last-name}. Let integers 1, 2, 3 represent the first names, 4, 5, 6 represent the middle names and 7, 8, 9 represent the last names in an arbitrary order. Let <SPAN CLASS="MATH"><I>Q</I>(<I>r</I>)</SPAN> <tex2html_verbatim_mark> be the total marks of student r, r being an alias. Given the following inequalities: <SPAN CLASS="MATH"><I>Q</I>(6) &gt; <I>Q</I>(1), <I>Q</I>(9) &gt; <I>Q</I>(4), <I>Q</I>(5) &gt; <I>Q</I>(8), <I>Q</I>(2) &gt; <I>Q</I>(9), <I>Q</I>(7) &gt; <I>Q</I>(3), <I>Q</I>(9) &gt; <I>Q</I>(3)</SPAN> <tex2html_verbatim_mark>, one can conclude that the names of students appearing in descending order of total marks are {2 6 7}, {1 5 9} and {3 4 8}.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case the first input line gives the parameters <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>.<P>The second line contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> inequalities represented by <SPAN CLASS="MATH">2&#215;<I>m</I></SPAN> <tex2html_verbatim_mark> integers. An integer <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> occurring in an odd numbered position in the line and the integer <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> occurring in the next even numbered position, represent the inequality <SPAN CLASS="MATH"><I>Q</I>(<I>r</I>) &gt; <I>Q</I>(<I>s</I>)</SPAN> <tex2html_verbatim_mark>.<P>Assume that <SPAN CLASS="MATH"><I>nk</I></SPAN> <tex2html_verbatim_mark> is less than 100 and each integer in the second input line is of two digits, including a non-significant <TT>0</TT> when required.<P>The input terminates with a line containing <TT>0</TT> as input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines giving <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> aliases of each person in a line; a line contains aliases in increasing order. Arrange persons in descending order of the quality characteristic <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark>. As in input, each integer in output is of two digits, including a non-significant <TT>0</TT> when required.<P>A blank line appears after the last output line of a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 6
06 01 09 04 05 08 02 09 07 03 09 03
2 4 2
03 08 02 05
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
02 06 07
01 05 09
03 04 08

02 03 06 07
01 04 05 08
</PRE><P>
______________________________________________________
3765||||||false||||||
<P>Begin a sequence of distinct natural numbers <SPAN CLASS="MATH"><I>N</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I> = 0, 1, 2,...</SPAN> <tex2html_verbatim_mark>, with the number <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(= <I>N</I><SUB>0</SUB>)</SPAN> <tex2html_verbatim_mark>; generate numbers <SPAN CLASS="MATH"><I>N</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I> = 1, 2,...</SPAN> <tex2html_verbatim_mark>, recursively and end the sequence with the last generated number <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>. The characteristic of numbers and the process for generation are stated below:<P><UL><LI>Each number in the sequence contains an even number of decimal digits and is of the form <SPAN CLASS="MATH"><I>f</I><SUB>1</SUB><I>d</I><SUB>1</SUB><I>f</I><SUB>2</SUB><I>d</I><SUB>2</SUB><I>f</I><SUB>k</SUB>...<I>d</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>, <I>d</I><SUB>2</SUB>,..., <I>d</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark>, are <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> distinct digits in increasing order and each <SPAN CLASS="MATH"><I>f</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> is a non-zero digit. </LI><LI>For <SPAN CLASS="MATH"><I>i</I> = 0, 1, 2,...</SPAN> <tex2html_verbatim_mark>, if <SPAN CLASS="MATH"><I>N</I><SUB>i</SUB> = <I>f</I><SUB>1</SUB><I>d</I><SUB>1</SUB><I>f</I><SUB>2</SUB><I>d</I><SUB>2</SUB>...<I>f</I><SUB>k</SUB><I>d</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> then <SPAN CLASS="MATH"><I>N</I><SUB>i+1</SUB> = <I>F</I><SUB>1</SUB><I>D</I><SUB>1</SUB><I>F</I><SUB>2</SUB><I>D</I><SUB>2</SUB>...<I>F</I><SUB>K</SUB><I>D</I><SUB>K</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3765img1.png ALT="$ \ge$"><I>k</I></SPAN> <tex2html_verbatim_mark>; <SPAN CLASS="MATH"><I>D</I><SUB>1</SUB>, <I>D</I><SUB>2</SUB>,..., <I>D</I><SUB>K</SUB></SPAN> <tex2html_verbatim_mark>, are distinct digits that occur in <SPAN CLASS="MATH"><I>N</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and appear in increasing order in <SPAN CLASS="MATH"><I>N</I><SUB>i+1</SUB></SPAN> <tex2html_verbatim_mark>; and <SPAN CLASS="MATH"><I>F</I><SUB>J</SUB></SPAN> <tex2html_verbatim_mark> is the frequency of <SPAN CLASS="MATH"><I>D</I><SUB>J</SUB></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>N</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, for <SPAN CLASS="MATH"><I>J</I> = 1, 2,..., <I>K</I></SPAN> <tex2html_verbatim_mark>. For example if <SPAN CLASS="MATH"><I>N</I><SUB>i</SUB> = 102335</SPAN> <tex2html_verbatim_mark> then <SPAN CLASS="MATH"><I>N</I><SUB>i+1</SUB> = 1011122315</SPAN> <tex2html_verbatim_mark>. </LI></UL><P>Write a program to find for a given <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>, the longest sequence of numbers that ends with <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> and begins with the smallest <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>.<P>Again consider an example; if <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>=1011122315 then the required sequence of numbers is 303355 103325 1011122315.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>Each test case contains only one input, viz., <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>.<P>The input terminates when a line containing <TT>0</TT> appears as a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the longest sequence of numbers that ends with <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> and begins with the smallest <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>. Use space to separate two consecutive numbers in the sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1011122315
22
112213
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
303355 103325 1011122315
22
13 1113 3113 2123 112213
</PRE><P>
______________________________________________________
3766||||||false||||||
<P>Crossbits are like Crosswords; instead of entering words you enter binary bits <SPAN CLASS="MATH">01</SPAN> <tex2html_verbatim_mark> in a Crossbit under certain given conditions, assuming that a solution exists. An empty Crossbit of size <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is an empty grid of size <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> <tex2html_verbatim_mark>.<P>Given a natural number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, consider entering <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> binary bits in an empty Crossbit, satisfying the following conditions:<P><UL><LI>Each square in the grid contains either a 0-bit or a 1-bit with no 1-bit in two major diagonals. </LI><LI>The total number of 1-bit in each row / column is exactly equal to <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> being a given natural number less than <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. </LI><LI>A 0-bit has at least another adjacent 0-bit either in the same row or in the same column. </LI><LI>The Crossbit represents the <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>-bit binary number <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> formed by placing bits in the <SPAN CLASS="MATH">1<SUP>st</SUP></SPAN> <tex2html_verbatim_mark>, the <SPAN CLASS="MATH">2<SUP>nd</SUP></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> the <SPAN CLASS="MATH"><I>N</I><SUP>th</SUP></SPAN> <tex2html_verbatim_mark> row from left to right. </LI></UL><P>You are required to write a program that enters bits in an empty Crossbit so that the Crossbit represents the least binary number <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> for given <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>.<P>As an illustration consider the case with <SPAN CLASS="MATH"><I>N</I> = 4</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I> = 1</SPAN> <tex2html_verbatim_mark>. The Crossbit shown below represents the least binary number <SPAN CLASS="MATH"><I>B</I> = 0010100000010100</SPAN> <tex2html_verbatim_mark> of 16 bits satisfying the specified conditions.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY></TABLE></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case parameters <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> of the Crossbit are given in one line. Assume that <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> does not exceed 10.<P>The input terminates with a line containing <TT>0</TT> as input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the Crossbit in <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> rows; each row contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> bits with a space between two neighbouring bits. Keep a blank line after the last output line of each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 1
6 2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 0 1 0 
1 0 0 0 
0 0 0 1 
0 1 0 0 

0 0 0 1 1 0 
1 0 0 1 0 0 
0 0 0 0 1 1 
1 1 0 0 0 0 
0 0 1 0 0 1 
0 1 1 0 0 0
</PRE><P>
______________________________________________________
3767||||||false||||||
<P>Disputes between two warring parties over possession of properties are often settled amicably with the intervention of a third party. You are required to write a program on behalf of a consultancy firm that settles disputes amicably over possession of properties between two warring parties.<P>The dispute between two warring parties A and B, is over a set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> profit making industrial units (PMIU) that currently make profits <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB>, <I>P</I><SUB>2</SUB>,..., <I>P</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>. Assume that n is an even number less than 20. Each profit is a distinct integer representing rounded profit in crores of rupees. A profit identifies a PMIU and determines its valuation. For a subset of PMIU, the product of all profits from PMIU in the subset determines the total valuation of the subset. The two warring parties have agreed to accept a solution that divides the set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> PMIU into two disjoint subsets satisfying the following conditions:<P><OL><LI>The total number of PMIU in each subset is <SPAN CLASS="MATH"><I>n</I>/2</SPAN> <tex2html_verbatim_mark>. </LI><LI>The total valuation of each subset is the same. </LI><LI>The subset with higher total sum of profits is allocated to A. </LI></OL><P>Write a program that determines the subset of PMIU to be allocated to A, assuming that there exists a unique solution to the problem.<P>As a simple example consider 6 PMIU with profits 2, 4, 5, 12, 15 and 18. The subset of PMIU allocated to A is {2, 12, 15}.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case there is a single input line. The line gives a set of distinct integers representing profits of PMIU.<P>The input terminates with a line containing <TT>0</TT> as input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case there is only one output line. The line prints the subset of PMIU allocated to A in ascending order of profits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 12 10 15
2 4 5 12 15 18
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8 15
2 12 15
</PRE><P>
______________________________________________________
3768||||||false||||||
<P>Elimination of contestants from a live IQ contest on a TV channel is decided in phases.<P>Initially at phase 0, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> contestants, where <SPAN CLASS="MATH"><I>N</I> = 2<SUP>n</SUP></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I> &lt; 10</SPAN> <tex2html_verbatim_mark>, are selected through a special online IQ contest in which a total of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>M</I> &gt; <I>N</I>)</SPAN> <tex2html_verbatim_mark> contestants participate. The contestants are identified by distinct registration numbers <SPAN CLASS="MATH">1, 2,..., <I>M</I></SPAN> <tex2html_verbatim_mark>. The selected contestants are ranked distinctly from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> according to their performance in the online contest. They are qualified to participate in the live contest.<P>In the <SPAN CLASS="MATH"><I>p</I><SUP>th</SUP></SPAN> <tex2html_verbatim_mark> phase, <SPAN CLASS="MATH"><I>p</I> = 1, 2,..., <I>n</I>, <I>K</I><SUB>p</SUB></SPAN> <tex2html_verbatim_mark> contestants participate in the live contest, where <SPAN CLASS="MATH"><I>K</I><SUB>p</SUB> = 2<SUP>n-p+1</SUP></SPAN> <tex2html_verbatim_mark>. On the basis of response to questions presented during the show, <SPAN CLASS="MATH"><I>K</I><SUB>p</SUB>/2</SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>K</I><SUB>p</SUB></SPAN> <tex2html_verbatim_mark> contestants are ranked distinctly from 1 to <SPAN CLASS="MATH"><I>K</I><SUB>p</SUB>/2</SPAN> <tex2html_verbatim_mark>. These <SPAN CLASS="MATH"><I>K</I><SUB>p</SUB>/2</SPAN> <tex2html_verbatim_mark> contestants qualify to participate in the next phase. At the <SPAN CLASS="MATH"><I>n</I><SUP>th</SUP></SPAN> <tex2html_verbatim_mark> phase there are only two contestants and the one selected at this phase is the winner of the contest.<P>You are required to write a program that identifies the winner of the contest, given the following information:<P><UL><LI>INFO_1: Registration numbers of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> contestants who are selected through the online IQ contest, in order of the rank in the online IQ contest, and </LI><LI>INFO_2: A total of <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> qualified contestants in different phases; <SPAN CLASS="MATH"><I>K</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> in phase 1, <SPAN CLASS="MATH"><I>K</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> in phase 2, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>K</I><SUB>n+1</SUB></SPAN> <tex2html_verbatim_mark> in phase <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Qualified contestants of different phases appear in order of phases, i.e., phase 1, phase 2, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, phase <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Further, qualified contestants in a phase, say phase <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, appear in the order of the rank in the phase, i.e., the rank in phase <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>. A qualified contestant of a phase, say phase <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, is identified by his/her rank in the previous phase, i.e., in phase <SPAN CLASS="MATH"><I>p</I> - 1</SPAN> <tex2html_verbatim_mark>. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input may contain multiple test cases. For each case there are two input lines.<P>The first line gives <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers representing INFO_1 while the second line gives <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> integers representing INFO_2.<P>In each input line integers are separated by space. The input terminates with a line containing <TT>0</TT> as input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case there is only one output line. The line prints the registration number of the winner of the contest.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
23 18 6 20
4 2 2
29 57 4 33 5 12 16 18
7 1 5 3 2 1 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
18
29
</PRE><P>
______________________________________________________
3769||||||false||||||
<P>Friends are as friends should be. Friends believe each other, help each other and above all share joys, sorrows and problems. Friendship is mutual.<P>A college is on vacation. Classmates of a class are in their respective homes. It is a common knowledge to all classmates, who is a friend of whom. Friends among classmates are in direct contact through SMS. A classmate may send SMS to certain specified classmates through friends in minimum time.<P>Assume that it takes exactly one unit of time to send an SMS from a sender to a receiver. When a classmate initiates transmitting an SMS at time 0 to a friend, the friend receives the SMS at time 1. At time 1 both the initiator and the friend may send SMS to two different receivers simultaneously.<P>Consider all senders at time <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> and all receivers at time <SPAN CLASS="MATH">(<I>t</I> + 1), <I>t</I> = 1, 2</SPAN> <tex2html_verbatim_mark>, etc. Senders are classmates who have either received SMS at time <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> or sent the last SMS at time <SPAN CLASS="MATH">(<I>t</I> - 1)</SPAN> <tex2html_verbatim_mark>. Receivers are classmates who have not received SMS as yet and are friends of one or more senders. Who sends SMS to whom and when? The initiator decides in advance senders, receivers and times so that the SMS reaches specified classmates in minimum time. This information is transmitted to each receiver along with the SMS.<P>Write a program that finds the minimum time required for an SMS from a given initiator to reach three specified classmates through friends. Assume that the total number of classmates in a class does not exceed 50 and the roll number identifies a classmate.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases. For each test case there are two input lines.<P>The first line identifies friends among classmates. It gives an even number of integers representing roll numbers. Each pair of integers in the line, one appearing in an odd numbered position and the other appearing in the next even numbered position, represents roll numbers of a pair of friends among classmates.<P>The second line gives four integers. The first integer is the roll number of the initiator while the other integers are the roll numbers of three specified classmates.&nbsp;<P>Integers in an input line are separated by space. The input terminates with a line containing <TT>0</TT> as input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print output in a single line. The line gives the minimum time required for the SMS from the initiator to reach specified classmates through friends.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 2 4 2 5 4 5 1 5
4 1 2 3
3 2 2 4 2 5 4 5 1 5
2 3 4 5
1 3 4 6 7 2 4 1 3 6 7 6 3 2 5 1 8 5
1 6 7 8 
1 3 4 6 7 2 4 1 3 6 7 6 3 2 5 1 8 5
8 5 6 7 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
2
3
5
</PRE><P>
______________________________________________________
3770||||||false||||||

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3770.eps}$
 -->
<IMG
 WIDTH="161" HEIGHT="163" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3770.jpg
 ALT="\epsfbox{p3770.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
<SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark>of a fully laden swallow? This fearful question was posed to the intrepid band of Grail searchers. Their response of ``African or European?" was partly correct. The air speed would most definitely depend on the sub-species of swallow. King Arthur, fearing more intense questioning in this vein, ordered his royal mathematicians to determine the air speed of a fully laden swallow â both African and European. 

<P>
The mathematicians called upon the royal birders to capture a number of swallows of both types, lade them fully, and then release them from point A and time their arrival at point B. Since they didn't want to confuse their figures, the European and African swallows were each started from a different location, so that each group flew a different distance, but all swallows in the same group flew the same distance. They then asked the royal map-makers to determine the distance (measured in furlongs) between the two starting points and the finish point. Using 10 swallows of each type, the royal mathematicians would then compute the average air speed for each group. 

<P>
However, the royal mathematicians were somewhat lazy. After gathering all the data, they decided it was MUCH too hard to do all those nasty calculations by hand. So, they quickly constructed a time machine and have come into the future to enlist your help: they need you to write a program to do the calculations, which they will then take back into the past with them. Thus the searchers of the Grail will be saved from certain doom, (should this dastardly question be posed again), and you will go down in history as a hero. (Well, maybe not history, since they are from the past, so maybe you'll go down in futurory?) 

<P>
There's one tricky bit (you knew it was coming): the royal mathematicians cannot agree on exactly how the average should be calculated. Some believe that, for each group, one should add up all of the times and then divide the total distance covered by all the swallows of that type by the total time (this is method 1). Others are of the opinion that the average speed is determined by computing the speed for each swallow, summing those values and then dividing that total by the total number of swallows (this is method 2). Your program should compute the average both ways, to avoid a nasty falling out among the royal mathematicians. 

<P>
The input provided by the royal mathematicians is somewhat disorganized â the two breeds' times have been intermixed and they weren't too careful about capitalization. But each entry is on a separate line and marked with an `<TT>A</TT>' or `<TT>a</TT>' or `<TT>E</TT>' or `<TT>e</TT>' to aid in identification. Each line begins with this single letter, followed by a single space. The final datum on the line is the elapsed time the swallow flew, expressed in hours. Since the time-keeping of the era wasn't very accurate, this value is simply a real number <SPAN CLASS="MATH">( &gt; 0)</SPAN>
<tex2html_verbatim_mark> with a single level of precision, such as 1.5 (one and a half hours), or 0.4 (four-tenths of an hour).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
<B>The input will contain several test cases, each of them as described below.
Consecutive test cases are separated by a single blank line.
</B>

<P>

<P><P>
<BR>
The very first line of the input file will consist of 2 integers, both greater than 0, separated by a single space. The first integer is the distance the African swallows flew and the second integer is the distance the European swallows flew. Next come the times for the swallows (20 lines total: 10 for African, 10 for European â NOT in this order). Thus the input file has a total of 21 lines.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<B>For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P>

<P><P>
<BR>
The format for the output should be grouped by methods, with Method 1 being displayed first. Each method will produce 3 lines of output: 

<P>

<UL>
<LI><SPAN  CLASS="textbf">Line 1:</SPAN> the name of the method (capitalized, with a digit identifying it), e.g. ``Method 1" (the quotes are not part of your output.) 
</LI>
<LI><SPAN  CLASS="textbf">Line 2:</SPAN> the speed of a fully-laden African swallow (expressed in furlongs per hour), e.g. ``African: 3.00 furlongs per hour" (the quotes are not part of your output.) 
</LI>
<LI><SPAN  CLASS="textbf">Line 3:</SPAN> the speed of a fully-laden European swallow (expressed in furlongs per hour) e.g. ``European: 3.00 furlongs per hour" (the quotes are not part of your output.) 
</LI>
</UL>

<P>
The format for the data for each method is as follows: 

<P>

<UL>
<LI>The full name of the breed of swallow (capitalized), beginning with African 
</LI>
<LI>A colon 
</LI>
<LI>A single space 
</LI>
<LI>The speed (to two digits of accuracy, with leading 0 for values <SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark> 1.0) 
</LI>
<LI>A single space 
</LI>
<LI>The phrase âfurlongs per hourâ (the quotes are not part of the output). 
</LI>
</UL>

<P>
See the Sample output section below for any clarifications you require.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 5 
a 1.0 
A 1.0 
E 2.0 
E 2.0 
A 1.0 
e 2.0 
a 1.0 
A 1.0 
E 2.0 
E 2.0 
A 1.0 
e 2.0 
a 1.0 
A 1.0 
E 2.0 
E 2.0 
A 1.0 
e 2.0 
e 1.0 
a 2.0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Method 1 
African: 5.45 furlongs per hour 
European: 2.63 furlongs per hour 
Method 2 
African: 5.70 furlongs per hour 
European: 2.75 furlongs per hour
</PRE> 

<P>

______________________________________________________
3771||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="553" HEIGHT="294" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3771.jpg ALT="\epsfbox{p3771.eps}"> <tex2html_verbatim_mark></DIV><P>Dissatisfied with the loud and constant pronouncements of his alleged misdeeds by a trio of indefatigable minstrels, the brave knight Sir Robin wishes to exercise his authority by modifying their lyrics. The minstrels were happy to provide printed transcripts of their songs, and cheerfully announced that they would not change a word of them.<P>Undaunted, the brave (and crafty) Sir Robin scrutinized the documents and noticed that their loudest inflections were indicated by capital letters and realized that he could at least lower their voices. This, he reasoned, could be accomplished by replacing upper case letters with lower case letters (``Case correction", from his perspective). These modifications could be forced upon the singers by insistence upon proper usage of the King's English. Not all letters can be lower case, however, as the King's English mandates some letters must be upper case.<P>Strangely hesitant about performing ``case correction" personally, the brave, crafty (and managerially capable) Sir Robin humbly requests you write a program to perform a first pass of case correction for the songs. There will still be some corrections required after this program is used.<P>As your program reads the file, it must force to upper case all alphabetic characters that follow terminal punctuation marks (period, question mark, and exclamation point) with only white space or parentheses characters following. All other alphabetic characters are to be forced to lower case. Note that decimal numbers are not to be followed by an upper case character unless the number itself is followed by a terminal punctuation mark.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P><B>The input will contain several test cases, each of them as described below. Consecutive test cases are separated by a single blank line. </B><P><P><P><BR>The input file contains the text that you are converting. Your conversions should be based on the rules given by Brave Sir Robin above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><B>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </B><P><P><P><BR>The output is to be the converted text. All characters are transferred to the output. Some will have cAsE cOrReCtiOn, others will be directly copied.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
The Brave Sir Robin took a short walk in a dark forest where rabbits did stalk. a
ray of sunlight made him jump from his own shadow with A FACE AS PALE AS CHALK.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
the brave sir robin took a short walk in a dark forest where rabbits did stalk. A
ray of sunlight made him jump from his own shadow with a face as pale as chalk.
</PRE><P>
______________________________________________________
3772||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="690" HEIGHT="383" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3772.jpg ALT="\epsfbox{p3772.eps}"> <tex2html_verbatim_mark></DIV><P>The wise Sir Bedavere often uses non-standard logic, yet achieves positive results (Please see the scene ``How do you know she's a witch?" or recall the quote ``<SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>now sheep's bladders may be employed to prevent earthquakes."). Well, it seems he has been at it again, this time with division. He has determined that canceling the common digit of a numerator and denominator produces the correct answer. Of course, Sir Bedavere only tried this on a small sample of three digit numbers. An example of what he did is shown in the following division problem (in which he canceled the common 6):<P><DIV ALIGN="CENTER"><IMG WIDTH="223" HEIGHT="72" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3772.jpg ALT="\epsfbox{p3772b.eps}"> <tex2html_verbatim_mark></DIV><P>Your task is to find all three digit number combinations with the following property:<P><P><BR>number combinations where removing the rightmost digit from the top number (numerator) and the identical leftmost digit from the bottom number (denominator) leaves the result of the calculation unchanged.<P><P><BR>Omit all of the trivial cases -- <SPAN CLASS="MATH"><I>xxx</I>/<I>xxx</I> = <I>xx</I>/<I>xx</I></SPAN> <tex2html_verbatim_mark> (222/222 = 22/22). The solutions are to be shown in increasing order of the top number (the numerator).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>NONE! There is no input for this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Show the bogus division problems one to a line in the format shown below (which gives a <SPAN CLASS="textit">sample</SPAN> merely to show the format) -- single spaces separate the non-blank characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
217 / 775 = 21 / 75 
249 / 996 = 24 / 96
</PRE><P>
______________________________________________________
3773||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="703" HEIGHT="388" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3773.jpg ALT="\epsfbox{p3773.eps}"> <tex2html_verbatim_mark></DIV><P>The set of integers has rarely been a domain of error in everyday conversation. The king, however, is ``three blind" and cannot visualize any number containing the digit `3' in its base 10 representation. He does intuitively sense the number between 2 and 4 and compensates for his blindness in the following manner: whenever he wants to state any number containing the digit `3', he will speak a series of numbers until they can all be combined (in the order given) via addition, subtraction, multiplication and division to produce the desired value which contains the digit `3'. Mathematical operators work from left to right without any other regard for order of precedence (i.e. <SPAN CLASS="MATH">6 + 7 <TT>*</TT> 11 = 143 <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3773.jpg ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> a number with a `3').<P>For example, if the king says ``1 2 5", then a knight will say ``3" using the following logic:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">1&nbsp;2&nbsp;5 = 1 <TT>*</TT> 2 - 5 = 2 - 5 = | 2 - 5| = 3</DIV><P><tex2html_verbatim_mark></P><P>Note that there are no negative numbers in optimistic Camelot. Every subtraction will produce a nonnegative result by what is called, in these enlightened times, the absolute value. All division is integer division, i.e. 7/5 = 1. Obviously, if the number zero appears as a divisor, then division will not be attempted.<P>The court, however, has a problem. Some of the computations produce more than 1 number containing the digit `3'! You have been appointed to write a program which computes and displays the most frequently appearing number containing the digit `3'. In the event of a tie, use the largest number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of an unspecified number of lines. Each line will contain at least 1 and at most 9 integers. Every number will be nonnegative and less than 100. A line with a single `<code>#</code>' character will be the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For every line of input, print a line showing the number most probably meant by the king as described above. If there is no such number, print ``<TT>No result</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 2 5 
1 1 
6 5 1 
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
No result 
30
</PRE><P>
______________________________________________________
3774||||||false||||||
<P>The brave knights <I>(<SPAN CLASS="MATH"><B><I>k&#601;'</I></B></SPAN> <tex2html_verbatim_mark> nig' &#601;ts)</I> of Camelot are constantly exposed to French taunting while assaulting the castle occupied by the French. Consequently, the taunting to which they are exposed varies with their distance from the castle during their assault, as well as variations in French taunting activity. We need to estimate the total amount of taunting that they are exposed to during a certain time period. Unfortunately, we only have access to a set of measurements at random times -- we do not have a continuous reading -- and, because of flaws in our archaic equipment, the measurements of taunting occur at unpredictable intervals.<P>The total amount of taunting will be given by the integral of the taunting intensity during the time period, as held in the observation data file. The amount of random noise, though, is fairly high, so that a simple trapezoid-rule integration is all that is merited.<P><DIV ALIGN="CENTER"><IMG WIDTH="600" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3774.jpg ALT="\epsfbox{p3774.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases, each of them as describes below.<P><UL><LI>A single number, <SPAN CLASS="MATH"><B><I>n</I></B></SPAN> <tex2html_verbatim_mark>, specifying the number of data points in the file </LI><LI><SPAN CLASS="MATH"><B><I>n</I></B></SPAN> <tex2html_verbatim_mark> pairs of floating point numbers (given in increasing <SPAN CLASS="MATH"><B><I>x</I></B></SPAN> <tex2html_verbatim_mark> order), separated by a comma -- in other words, a CSV file that <SPAN CLASS="textit">could</SPAN> be input for a spreadsheet program [the first number is the <SPAN CLASS="MATH"><B><I>x</I></B></SPAN> <tex2html_verbatim_mark> coordinate (time specification), the second is the <SPAN CLASS="MATH"><B><I>y</I></B></SPAN> <tex2html_verbatim_mark> coordinate (the radiation reading)] </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write to the output a single line of text giving the first and last x values (with two digits to the right of the decimal point), and the computed integral (with four digits to the right of the decimal point), in the fashion shown below (which reflects the data shown in the graph):<P><P><BR><TT>0.00 to 365.25: 2099.8021</TT><P><P><BR>[A reasonable value for the given input, (shown in the graph above), since the values range around <SPAN CLASS="MATH"><B>5&nbsp;3/4</B></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><B>365.25 <TT>*</TT> 5.75</B></SPAN> <tex2html_verbatim_mark> gives 2100.1875.]<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 
 0.0000, 0.5176 
 0.9869,  1.000 
  1.596,  1.114 
  2.370,  1.006 
  2.904, 0.8481 
  3.506, 0.5760 
  3.996, 0.4775 
  5.004, 0.3945 
  6.283,  1.004
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.00 to 6.28: 4.7288
</PRE><P>
______________________________________________________
3775||||||false||||||

<P>
Holy Hand Grenades have found multiple uses throughout history. Most notably, King Arthur did use a Holy Hand Grenade (HHG) to dispatch a vicious rabbit which was guarding the entrance to a cave. The instructions for its use are in the Book of Armaments (Chapter 2, verses 9-21), and are read as follows:

<P>
<BLOCKQUOTE>
<SPAN  CLASS="textit">``First shalt thou take out the Holy Pin. Then, shalt thou count to three. No more, no less. Three shall be the number thou shalt count, and the number of the counting shall be three. Four shalt not count, neither count thou two, excepting that thou then proceed to three. Five is right out. Once the number three, being the third number, be reached, then lobbest thou thy Holy Hand Grenade of Antioch towards thy foe, who, being naughty in My sight, shall snuff it." Amen.</SPAN>

</BLOCKQUOTE> 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3775.eps}$
 -->
<IMG
 WIDTH="569" HEIGHT="486" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3775.jpg
 ALT="\epsfbox{p3775.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Unfortunately, the Book of Armaments faileth to mention that the HHG must come to a complete stop (i.e. rest stably) before it can explodeth and blow a rabbit to tiny bits. As long as it rolleth or wobbeleth, it refuseth to explodeth. Unknown is the reason why the authors of the Book of Armaments neglected to mention this pertinent fact. Further complicating matters, different HHGs have different radii of destruction (<SPAN  CLASS="textit">RD</SPAN>). Once a HHG resteth stably, and explodeth, everything within or equal to its <SPAN  CLASS="textit">RD</SPAN> shalt be snuffed out. Presumably, this is what happened to the rabbit with big, pointy teeth; however, there remaineth some controversy over this matter. Because of this controversy, the king hath decreed a simulation to be run that may possibly answer this question. 

<P>

<UL>
<LI>Your task is to determine the result of the grenade's explosion. 
</LI>
<LI>The grenade must always be at rest in order to detonate. All HHGs have a radius R=1 and a variable radius of destruction (RD). At the instant of detonation, the rabbit could be mid-leap, on the ground, or underground. 
</LI>
<LI>For each simulation the terrain remaineth unchanged. It consisteth of two intersecting curves, <!-- MATH
 $y = e^{-x}$
 -->
<SPAN CLASS="MATH"><I>y</I> = <I>e</I><SUP>-x</SUP></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I> = <I>ln</I>(<I>x</I>)</SPAN>
<tex2html_verbatim_mark> as we have revealed unto you in the illustrious illustration. The curves reside in the plane formed by the rabbit, the grenade, and the center of the earth. The terrain is impervious to detonations, and changeth not between tests. 
</LI>
<LI>If a bunny's center of mass is strictly below the ground level (as denoted by the intersecting curves) when a HHG explodeth, that bunny shalt remaineth un-snuffedeth and thus shalt live to bite another day. 
</LI>
<LI>If the bunny resideth strictly outside of the range of a stably resting HHG's radius of destruction, that bunny shalt also remain un-snuffedeth out. 
</LI>
<LI>Each result shalt be dependent upon computations accurate even unto 8 significant figures. 
</LI>
<LI>There shalt not be an input value smaller even than 1.0E-15 or greater even than 1.0E+15. 
</LI>
<LI>Because the bunny's center of mass doth be its location, a bunny might possibly end up inside both the <SPAN  CLASS="textit">RD</SPAN> and the R=1 of a HHG. This simply means the bunny is curled around the grenade. If the center of mass of such a bunny be strictly inside the <SPAN  CLASS="textit">RD</SPAN> it shall most surely be snuffÃ©d out. Amen. 
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The <SPAN  CLASS="textbf">first line</SPAN> of input doth contain yea verily a <SPAN  CLASS="textbf">single integer</SPAN> indicating the <SPAN  CLASS="textbf">number of holy hand grenades</SPAN> in the data file. Each <SPAN  CLASS="textbf">line of the file doth</SPAN> contain the radius of destruction of this particular holy hand grenade, and finally doth contain the rabbit's x coordinate (xb) and y coordinate (yb) during this particular test run. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test run, thy program shalt print out the words ``<TT>Bunny Bits</TT>" (if the rabbit is blown to bits by the grenade) or ``<TT>Bunny Biteth Knights</TT>" (if the rabbit liveth to fight on another day anon). 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 
1.5 3.0 3.0 
5.5 3.0 3.0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Bunny Biteth Knights 
Bunny Bits
</PRE> 

<P>

______________________________________________________
3776||||||false||||||
<!--P>
<DIV ALIGN="CENTER"--><!--IMG
 WIDTH="597" HEIGHT="321" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3776.jpg
 ALT="\epsfbox{p3776.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
After each commission to install a shrubbery, Roger the Shrubber has to transport many empty planting boxes with a drawn cart. In this instance, a planting box is a wooden box with one open side. 

<P>
Given a set of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> planting boxes, compute the largest number of boxes that can be nested. Specifically, report the number of the largest subset of boxes which may be nested such that the smallest box of the subset fits within the second smallest, the second smallest of the subset fits within the third smallest, the third smallest of the subset fits within the fourth smallest, and so forth. 

<P>
A box <SPAN CLASS="MATH"><I>i</I>(<I>b</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark> fits into box <SPAN CLASS="MATH"><I>j</I>(<I>b</I><SUB>j</SUB>)</SPAN>
<tex2html_verbatim_mark> if there exists some rotation of <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> such that each dimension of <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is less than the corresponding dimension of <SPAN CLASS="MATH"><I>b</I><SUB>j</SUB></SPAN>
<tex2html_verbatim_mark>. Any box can be rotated to nest inside another box. 

<P--><P>It is a common prank to give someone a gift in a large box, in which is nested a smaller box, with another smaller box inside that one, and so forth, until the smallest box -- nested within all those other boxes -- contains the gift. Given a set of boxes of various sizes, your problem is to find the size (cardinality) of the largest subset of boxes that can be used to create such a nested arrangement. If no boxes can be nested, then the size of the subset is just 1.<P>Naturally, each box in the set from which you can choose has three dimensions. Any box can be rotated, if desired, if that would enable it to fit inside another box. For our purposes, a box A can fit inside a box B if each dimension of box A is strictly less than the corresponding dimension of box B.<P><P><BR><SPAN CLASS="textbf">Example</SPAN><P>For example, suppose box A has dimensions <SPAN CLASS="MATH">12&#215;20&#215;60</SPAN> <tex2html_verbatim_mark> and box B has dimensions <SPAN CLASS="MATH">42&#215;18&#215;10</SPAN> <tex2html_verbatim_mark>. If we rotate box B appropriately -- so the dimensions are <SPAN CLASS="MATH">10&#215;18&#215;42</SPAN> <tex2html_verbatim_mark>, then we will be able to nest it inside box A. However, if box B had dimensions <SPAN CLASS="MATH">13&#215;12&#215;58</SPAN> <tex2html_verbatim_mark>, then no rotations would allow it to fit inside box A.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of an unspecified number of box sets. Each set will begin with a line containing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3776.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3776.jpg ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark>, the number of boxes in the set. Each box will be described on its own line by three positive integers representing length, width and height (Each value will not exceed 1000). The first two numbers of each box description will be followed by a space, the letter `<SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>', and a space. The end of input occurs when <SPAN CLASS="MATH"><I>n</I> = - 1</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of boxes, print a line containing the largest number of boxes that can be selected from the original set to form a fully nesting subset of boxes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
145 x 472 x 812 
827 x 133 x 549 
381 x 371 x 900 
271 x 389 x 128 
718 x 217 x 491 
4 
432 x 123 x 139 
942 x 844 x 783 
481 x 487 x 577 
677 x 581 x 701
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
4
</PRE><P>
______________________________________________________
3777||||||false||||||

<P>
Bart and Lisa Simpson have many chores, but they don't always do them well. So their father began keeping score, giving them credit only if a chore was done right. After a month, he showed them his record keeping. 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=9 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=2>  Chores</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=7>   
Assigned chores for first month</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=2>  done</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=2>  correctly</TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bart </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Bart </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Bart </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Bart </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Bart </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 75.00 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 66.67 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> % </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> % </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
This showed that Bart had done 3 out of 4 chores correctly and Lisa had done 2 out of 3 chores correctly. Then for a second month, Bart and Lisa did chores and the record keeping looked like this: 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=11 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=2>  Chores</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=9>   
Assigned chores for second month</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=2>  done</TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=2>  correctly</TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bart </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Bart </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Bart </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Lisa </TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 50.00 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 42.86 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> % </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> % </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>
The father made the following chart to support the hypothesis that Bart was doing the most chores: 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Month </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Month </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Computation </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Total </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD></TD><TD></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bart </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 75.00 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 50.00 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 125.00 / </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 53.30 </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> % </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> % </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 234.53 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> % </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Lisa </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 66.67 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 42.86 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 109.53 / </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 46.70 </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> % </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> % </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 234.53 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> % </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Lisa looked at the tables then said ``No no no, that's not right, I've done more." Bart pointed at the statistics and said, ``Numbers don't lie." Lisa said, ``But look, I've done 5 chores and you've only done 4. You just look good because you always run away before somebody asks you to do something. The total should give me 55% of the total chores done right." Bart laughed and ran away. Now Lisa needs your help to show the unfairness of these chore evaluations. She wants a program which computes the averages over the entire dataset and displays where the before and after averages support the opposite hypothesis than would be indicated by considering the total dataset. To be fair, she only wants to consider record keeping times when both she and Bart have chores assigned both before and after the record keeping. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of each test case contains one integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(2 \le N \le 50000)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3777img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3777img1.png
 ALT="$ \le$">50000)</SPAN>
<tex2html_verbatim_mark> the number of chore records. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines in each test case contains either ``<TT>Bart</TT>" or ``<TT>Lisa</TT>" followed by an integer, 0 or 1. The name shows who was assigned a chore, and the integer is a value of 1 if it was done correctly, or a 0 if it was not. Both Bart and Lisa will have chores assigned to them in each dataset. Input ends when <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Write on the first line of the output for each test case, the test case number, and the number of chores correctly performed by Bart <SPAN  CLASS="textbf">(CB)</SPAN> and Lisa <SPAN  CLASS="textbf">(CL)</SPAN> in the following format: 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TT>Case <SPAN  CLASS="textbf"><!-- MATH
 $<case \ number>$
 -->
<SPAN CLASS="MATH">&lt; <I>case</I>&nbsp;<I>number</I> &gt;</SPAN>
<tex2html_verbatim_mark></SPAN>: Bart did <SPAN  CLASS="textbf"><SPAN CLASS="MATH">&lt; <I>CB</I> &gt;</SPAN>
<tex2html_verbatim_mark></SPAN> and Lisa did <SPAN  CLASS="textbf"><SPAN CLASS="MATH">&lt; <I>CL</I> &gt;</SPAN>
<tex2html_verbatim_mark></SPAN></TT>

</DIV>

<P>

<P>
<BR>
If Bart and Lisa do the same number of chores over the entire dataset, there is no trend to oppose. In that case, print ``Bart and Lisa accomplished same number of chores". 

<P>
If Bart and Lisa do a different number of chores over the entire dataset, determine if there are any places in the dataset where taking the averages of all results before and after a record keeping break would produce results which would indicate a trend opposing the trend over the entire dataset. If there are no such cases, print on the next line, "Simpson's paradox not detected". Otherwise, print on the next line "Trend measured in 2 parts is reversed" and on every following line print the following: 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TT>After chore <!-- MATH
 $<chore \ number>$
 -->
<SPAN CLASS="MATH">&lt; <I>chore</I>&nbsp;<I>number</I> &gt;</SPAN>
<tex2html_verbatim_mark>: <!-- MATH
 $<B_{Before}>\%$
 -->
<SPAN CLASS="MATH">&lt; <I>B</I><SUB>Before</SUB> &gt; %</SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $<L_{Before}>\%$
 -->
<SPAN CLASS="MATH">&lt; <I>L</I><SUB>Before</SUB> &gt; %</SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $<B_{After}>\%$
 -->
<SPAN CLASS="MATH">&lt; <I>B</I><SUB>After</SUB> &gt; %</SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $<L_{After}>\%$
 -->
<SPAN CLASS="MATH">&lt; <I>L</I><SUB>After</SUB> &gt; %</SPAN>
<tex2html_verbatim_mark></TT>

</DIV> 

<P>

<P>
<BR>
where <!-- MATH
 $B_{Before}$
 -->
<SPAN CLASS="MATH"><I>B</I><SUB>Before</SUB></SPAN>
<tex2html_verbatim_mark> is Bart's correctly performed chore percentage before the record keeping, <!-- MATH
 $L_{Before}$
 -->
<SPAN CLASS="MATH"><I>L</I><SUB>Before</SUB></SPAN>
<tex2html_verbatim_mark> is Lisa's correctly performed chore percentage before the recordkeeping, <SPAN CLASS="MATH"><I>B</I><SUB>After</SUB></SPAN>
<tex2html_verbatim_mark> is Bart's correctly performed chore percentage after the first record keeping until the end of the dataset, and <SPAN CLASS="MATH"><I>L</I><SUB>After</SUB></SPAN>
<tex2html_verbatim_mark> is Lisa's correctly performed chore percentage after the first record keeping until the end of the dataset. Note that chores are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> in order of appearance in the dataset. All percentages must be rounded to the nearest .0001. Print a blank line between the outputs for two consecutive test cases.

<P>

<P>
<BR>

<SPAN ID="txt120">Clarification</SPAN>: Because Lisa wants a program which ``displays where the before and after averages support the opposite hypothesis than would be indicated by considering the total dataset", then any averages which, after rounding, are <SPAN ID="txt121">printed</SPAN> as equal must be disregarded.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
16 
Bart 1
Bart 0
Bart 1
Lisa 0
Lisa 1
Lisa 1
Bart 1
Bart 0
Bart 1
Lisa 0
Lisa 1
Lisa 1
Lisa 0
Lisa 1
Lisa 0
Lisa 0
2 
Lisa 1
Bart 1
2 
Lisa 0 
Bart 1
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1: Bart did 4 and Lisa did 5 
Trend measured in 2 parts is reversed 
After chore 4: 66.6667% 0.0000% 66.6667% 55.5556% 
After chore 5: 66.6667% 50.0000% 66.6667% 50.0000% 
After chore 7: 75.0000% 66.6667% 50.0000% 42.8571% 

Case 2: Bart did 1 and Lisa did 1 
Bart and Lisa accomplished same number of chores 

Case 3: Bart did 1 and Lisa did 0 
Simpson's paradox not detected
</PRE> 

<P>

______________________________________________________
3778||||||false||||||

<P>
In all the annals of knighthood, no personality trait has been in more dire need than the fortitude to withstand the diplomatically deleterious effects of a vicious, relentless taunting. Tasked with strengthening the mental endurance of Camelot's knights, King Arthur's court decided that instructional taunting must be applied, yet it could not be delivered by the chivalrous administration. Thus, Sir Lancelot commanded a local anarcho-syndicalist peasant to write a program that generates taunts (a.k.a. mudslinging) thereby producing a script to test the patience of knights in a training environment. To prevent unbridled creativity in taunting from spoiling the otherwise stately proceedings of a nobleman's education, the following rules designed by committee (The Round Table) must be adhered to:

<P>
<PRE>
&lt;taunt&gt; ::= &lt;sentence&gt; | &lt;taunt&gt; &lt;sentence&gt; | &lt;noun&gt;! | &lt;sentence&gt; 
&lt;sentence&gt; ::= &lt;past-rel&gt; &lt;noun-phrase&gt; | &lt;present-rel&gt; &lt;noun-phrase&gt; | &lt;past-rel&gt; &lt;article&gt; &lt;noun&gt; 
&lt;noun-phrase&gt; ::= &lt;article&gt; &lt;modified-noun&gt; 
&lt;modified-noun&gt; ::= &lt;noun&gt; | &lt;modifier&gt; &lt;noun&gt; 
&lt;modifier&gt; ::= &lt;adjective&gt; | &lt;adverb&gt; &lt;adjective&gt; 
&lt;present-rel&gt; ::= your &lt;present-person&gt; &lt;present-verb&gt; 
&lt;past-rel&gt; ::= your &lt;past-person&gt; &lt;past-verb&gt; 
&lt;present-person&gt; ::= steed | king | first-born 
&lt;past-person&gt; ::= mother | father | grandmother | grandfather | godfather 
&lt;noun&gt; ::= hamster | coconut | duck | herring | newt | peril | chicken | vole | parrot | mouse | twit 
&lt;present-verb&gt; ::= is | âmasquerades asâ 
&lt;past-verb&gt; ::= was | personified 
&lt;article&gt; ::= a 
&lt;adjective&gt; ::= silly | wicked | sordid | naughty | repulsive | malodorous | ill-tempered 
&lt;adverb&gt; ::= conspicuously | categorically | positively | cruelly | incontrovertibly
</PRE><SMALL CLASS="FOOTNOTESIZE"> 
</SMALL>
<P>
Note that all phrases in double quotes are to be treated as one word for taunt simulation output. 

<P>
The number of taunts elicited at any given time is derived from the number of words spoken by the knight. For every three words (or fraction thereof) delivered by the knight, the generator produces one or more taunts in a theater-style script format. In the event that 2 taunts must be produced on a single line, they will be counted as 2 taunts towards the total required. By a mandate from the masses, a word will always contain at least one alphabetic character, and will be separated from other words by at least 1 space. 

<P>
In exception to the above rules, whenever the program finds the holy grail, which is to say, the letters t-h-e-h-o-l-y-g-r-a-i-l (case insensitive) in that order in a line of input, then the first taunt generated will be displayed by the program as ``(A childish hand gesture)". 

<P>
To ensure all royal quality assurance criteria are met, the program must be demonstrated by a simulation showing the taunts produced from a series of inputs. Each taunt is generated by applying the taunt generation rules until all of the <SPAN CLASS="MATH">&lt;...&gt;</SPAN>
<tex2html_verbatim_mark> have been replaced with appropriate words. In most cases, you will face a choice of alternate rules for expanding a phrase name. In these cases, you should make a choice as follows: Suppose that this is the <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>-th such choice that you have faced for that rule since the start of program execution, and that you must choose one of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> rules for expanding a given kind of phrase. Let the rules for that phrase be numbered from <SPAN CLASS="MATH">1...<I>n</I></SPAN>
<tex2html_verbatim_mark> in the order of appearance above, and then choose rule number <!-- MATH
 $((k-1) \bmod n) + 1$
 -->
<SPAN CLASS="MATH">((<I>k</I> - 1) mod <I>n</I>) + 1</SPAN>
<tex2html_verbatim_mark>. 

<P>
Well, get on with it!

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of an unspecified number of lines. Each line will contain a statement uttered by a knight consisting of letters, digits, the characters ``<TT>,.-!?</TT>" and whitespace. Each line of input will be more than 1 character and less than 72 characters in length. All words will be separated by whitespace. Each statement will contain at least one word. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For every line of input, print a block of output containing the following:

<P>

<UL>
<LI>A single line containing ``<TT>Knight:</TT>", a space, and the input. Any appearance of whitespace inside the input will be replaced by a single space. 
</LI>
<LI>All taunts (as explained in the above rules) prefaced by ``<TT>Taunter:</TT>" and a space, the taunt, and a period. Each word should be separated from neighboring words by a single space. 
</LI>
<LI>A blank line
</LI>
</UL>

<P>
Each taunt should begin with a capital letter, and no extra characters should be added. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Hello! 
Are you feeling alright? 
Is there someone else I could talk to? 
Anyone at    all? 
We seek the holy grail . . .
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Knight: Hello! 
Taunter: Your mother was a hamster. 

Knight: Are you feeling alright? 
Taunter: Coconut! Your steed is a silly duck. 

Knight: Is there someone else I could talk to? 
Taunter: Your father personified a herring. 
Taunter: Your grandmother was a newt. 
Taunter: Peril! Your king masquerades as a conspicuously wicked chicken. 

Knight: Anyone at all? 
Taunter: Your grandfather personified a vole. 

Knight: We seek the holy grail . . . 
Taunter: (A childish hand gesture). 
Taunter: Your godfather was a parrot.
</PRE> 

<P>

______________________________________________________
3779||||||false||||||
<P>ALL HEADS: You're a Knight of the Round Table?<BR>ROBIN: I am.<BR>LEFT HEAD: In that case I shall have to kill you.<BR>MIDDLE HEAD: Shall I?<BR>RIGHT HEAD: Oh, I don't think so.<BR>MIDDLE HEAD: Well, what do I think?<BR>LEFT HEAD: I think kill him.<BR>RIGHT HEAD: Well let's be nice to him.<BR>MIDDLE HEAD: Oh shut up.<P><DIV ALIGN="CENTER"><IMG WIDTH="575" HEIGHT="319" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3779a.jpg ALT="\epsfbox{p3779a.eps}"> <tex2html_verbatim_mark></DIV><P>As the story goes, the Knight scarpers off. Right Head has taken it upon himself to search the grounds for the knight so he, Left, and Middle can go extinguish him (and then have tea and biscuits.)<P>Consider the following 8 by 12 maze, where shaded squares are walls that can't be entered.<P><DIV ALIGN="CENTER"><IMG WIDTH="729" HEIGHT="486" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3779a.jpg ALT="\epsfbox{p3779b.eps}"> <tex2html_verbatim_mark></DIV><P>The shortest path between the Right Head (denoted by the <TT>S</TT>, for start) and the knight (denoted by the <TT>F</TT>, for finish) is of length 3, as illustrated above. But! Right Head can't turn left or make UTurns. He can only move forward and turn right. That means the shortest path that Right Head can find is significantly longer: at 29!<P><DIV ALIGN="CENTER"><IMG WIDTH="713" HEIGHT="487" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3779a.jpg ALT="\epsfbox{p3779c.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>N</I> &gt; 0)</SPAN> <tex2html_verbatim_mark> specifying the number of mazes in the file. Following this, on a maze by maze basis will be the number of rows, <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(3 < r \le 20)$
 --><SPAN CLASS="MATH">(3 &lt; <I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3779a.jpg ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, a space, then the number of columns, <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(3 < c \le 20)$
 --><SPAN CLASS="MATH">(3 &lt; <I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3779a.jpg ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>. After this will follow <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> lines of <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> characters, representing a map of the maze:<P><PRE>
XXXXXXXXXXXXXX 
X          XXX 
X XFXXXXX    X 
XXX   XX  XX X 
X S          X 
XX  XXXXXX X X 
X        X X X 
X X      X X X 
XXX XX       X 
XXXXXXXXXXXXXX
</PRE><P><TT>X</TT>'s mark those locations that are walls and can't be occupied. <TT>S</TT> marks the start location, and <TT>F</TT> marks the Knight. Blanks are locations that can be freely traveled.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is the length of the shortest path between the start and finish locations. Based on the above maze, your program would output the minimum no-left-turns path length of 29.<P><P><BR><TT>Additional Constraints/Information: </TT><P><UL><LI>Right Head is capable of moving from the start position in any of the four primary compass directions. After that, he's constrained to either step forward or right. </LI><LI>The start and end locations will never be the same. </LI><LI>The maze is always surrounded by four walls. </LI><LI>You can assume that a path between the start and final locations always exists. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
10 14 
XXXXXXXXXXXXXX 
X          XXX
X XFXXXXX    X 
XXX   XX  XX X 
X S          X 
XX  XXXXXX X X 
X        X X X 
X X      X X X 
XXX XX       X 
XXXXXXXXXXXXXX
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
29
</PRE><P>
______________________________________________________
3780||||||false||||||
<P>A group of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> castle guards are voting to determine whether African swallows can carry coconuts. While each guard has his own personal opinion on the matter, a guard will often vote contrary to his beliefs in order to avoid disagreeing with the votes of his friends.<P>You are given a list of guards who either do or do not believe in the coconut-carrying capacity of African swallows, and a list of all pairs of guards who are friends. Your task is to determine how each guard must vote in order to minimize the sum of the total number of disagreements between friends and the total number of guards who must vote against their own beliefs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to this problem will contain multiple test cases. Each test case begins with a single line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (where <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3780img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3780img1.png ALT="$ \le$">300</SPAN> <tex2html_verbatim_mark>), the number of guards, and an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> (where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3780img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3780img1.png ALT="$ \le$"><I>n</I>(<I>n</I> - 1)/2</SPAN> <tex2html_verbatim_mark>), the number of pairs of guards who are friends. The second line of the test case contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers, where the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th integer is 1 if the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th guard believes in the ability of African swallows to carry coconuts, and 0 otherwise. Finally, the next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines of the test case each contain two distinct integers <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> (where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3780img1.png ALT="$ \le$"><I>i</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3780img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>), indicating that guards <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> are friends. Guards within each pair of friends may be listed in any order, but no pair of guards will be repeated. The input is terminated by an invalid test case with <SPAN CLASS="MATH"><I>n</I> = <I>m</I> =</SPAN> <tex2html_verbatim_mark> <TT>0</TT>, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input test case, print a single line containing the minimum possible sum of the total number of disagreements between all friends plus the total number of guards who must vote against their own beliefs.<P><P><BR><SPAN ID="txt51">Notes:</SPAN> In the first test case, the best result is achieved when all guards vote that African swallows cannot carry coconuts. Here, there is only a penalty of 1 for the first guard voting against his beliefs.<P>In the second test case, the best result is achieved when each guard votes for his beliefs. The penalty of 2 arises from the disagreements between guards 2 and 4, and guards 3 and 5.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 
1 0 0 
1 2 
1 3 
3 2 
6 6 
1 1 1 0 0 0 
1 2 
2 3 
4 2 
3 5 
4 5 
5 6 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
2

______________________________________________________
3781||||||false||||||
<P>Alice has a rod. One day, she draws a path on a grid and puts the rod on it. The path begins at (0, 0) and continues to the right. The first and last segments are always horizontal, so there are always an odd number of segments. If we number the segments <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark>, odd-numbered segments are all horizontal, while other segments (if any) are vertical. Initially, one endpoint <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> of the rod is located at (0, 0), and the other endpoint <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is at <SPAN CLASS="MATH">(<I>L</I>, 0)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> is the length of the rod. The length of the first segment is at least <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>.<P>When moving the rod, both endpoints <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> must be always on the path, though other parts may be outside. The rod is hard, so its length (i.e. distance between <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>) is always <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="498" HEIGHT="345" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3781.jpg ALT="\epsfbox{p3781.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig 1. The grid, the path and the rod</DIV><P>Write a program to compute the minimum distance A must cover to reach the rightmost endpoint of the path.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of each case contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3781.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3781.jpg ALT="$ \le$">10, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3781.jpg ALT="$ \le$"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3781.jpg ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark>, described above. The second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> non-zero integers <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(- 30<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3781.jpg ALT="$ \le$"><I>l</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3781.jpg ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark>, the lengths and directions of path segments. The absolute value of <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> denotes length of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th segment. If it is horizontal, <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is positive. That means, horizontal segments are always left-to-right. If it is vertical, positive means down-to-up (increasing y coordinate), negative means up-to-down (decreasing y coordinate). The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the minimum distance to two decimal places. If it's not possible to reach the rightmost point, print <TT>-1</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 5 
8 6 2 
5 2 
3 1 1 -4 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 11.00 
Case 2: 10.00
</PRE><P>
______________________________________________________
3782||||||false||||||
<P>Bob has <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> matches. He wants to compose numbers using the following scheme (that is, digit 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 needs 6, 2, 5, 5, 4, 5, 6, 3, 7, 6 matches):<P><DIV ALIGN="CENTER"><IMG WIDTH="857" HEIGHT="152" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3782.jpg ALT="\epsfbox{p3782.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig 1 Digits from matches</DIV><P>Write a program to make a non-negative integer which is a multiple of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. The integer should be as big as possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. Each case is described by two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3782.jpg ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3782.jpg ALT="$ \le$">3000)</SPAN> <tex2html_verbatim_mark>, as described above. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the biggest number that can be made. If there is no solution, output <TT>-1</TT>. Note that Bob don't have to use all his matches.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 3 
5 6 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 111 
Case 2: -1
</PRE><P>
______________________________________________________
3783||||||false||||||

<P>
Candy and his friends found a treasure map. With the help of the map, they successfully found the treasure inside an ancient cave, but just as they took the large treasure box, the cave started to collapse! 

<P>
Candy must find a way out, but the rocks are falling down so quickly that it's impossible to run out with bare feet. After carefully examined the treasure box, they found a digit panel, a button, and a small piece of paper. ``I am not an ordinary treasure box, I am a mini-spaceship, your last hope to escape. Use the digit panel to setup my speed, then press the button to launch. I'll fly from left to right, until I reach the exit. The trouble is: I am very weak. I'll explode immediately when hit by any falling rock, but if I'm just touching one, it's ok. When flying, I burn the treasures inside. The higher my speed is, the more treasures I will burn. Thus, be sure to find an appropriate speed before starting your journey. The last thing you need to know is: don't be too slow. The exit will be blocked after a while."

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3783.eps}$
 -->
<IMG
 WIDTH="272" HEIGHT="254" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="\epsfbox{p3783.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Fig 1. Collision between the spaceship and a rock

</DIV>

<P>
A list of rocks that will fall down is enclosed in that piece of paper. All the rocks have the same speed. Each rock continues to fall down until its topmost point reaches the land (i.e. <SPAN CLASS="MATH"><I>y</I> = 0</SPAN>
<tex2html_verbatim_mark>).You can start your journey at any time, but once you launch the spaceship, it never stops before reaching the exit or being destroyed! 

<P>
Write a program to find the minimal speed that takes you out of the cave. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several test cases. The first line of each case contains seven positive integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>V</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 50, 1 \le a, b \le 10, 1 \le L, H, V, T \le 10000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$">50, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$"><I>a</I>, <I>b</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$">10, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$"><I>L</I>, <I>H</I>, <I>V</I>, <I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$">10000)</SPAN>
<tex2html_verbatim_mark>. The spaceship is <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> units wide and <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> units high. Its bottom-left corner is initially (i.e. at time 0) at (0, 0). When the bottom-left corner reaches <SPAN CLASS="MATH">(<I>L</I>, 0)</SPAN>
<tex2html_verbatim_mark> before time <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark>, you succeeded. The height of the cave is <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark>. The speed of each rock is <SPAN CLASS="MATH"><I>V</I></SPAN>
<tex2html_verbatim_mark>. There are <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines followed. Each of these lines contains three integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le t_{i} \le T, 1 \le r_{i} \le 200, a + r_{i} \le x_{i} \le L - r_{i}, b < H - r_{i})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$"><I>t</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$"><I>T</I>, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$"><I>r</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$">200, <I>a</I> + <I>r</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$"><I>x</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3783.jpg
 ALT="$ \le$"><I>L</I> - <I>r</I><SUB>i</SUB>, <I>b</I> &lt; <I>H</I> - <I>r</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark>: at time <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, there will be a falling rock with a radius of <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> with its center at <!-- MATH
 $(x_{i}, H)$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>H</I>)</SPAN>
<tex2html_verbatim_mark>. The descriptions of rocks are sorted in increasing order of falling time. The last test case is followed by a single zero, which should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the case number and the minimal speed to two decimal places. It is always possible to escape.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 2 1 20 12 3 20 
5 2 5 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 1.00
</PRE> 

<P>

______________________________________________________
3784||||||false||||||
<P>If you hide some digits in an integer equation, you create a digit puzzle. The figure below shows two valid digit puzzles. Hidden digits are represented by squares, and other digits are shown. The numbers involved in this problem are all positive integers, written in decimal forms without leading zeros.<P><DIV ALIGN="CENTER"><IMG WIDTH="810" HEIGHT="256" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3784.jpg ALT="\epsfbox{p3784.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig 1. two good digit puzzles</DIV><P>If a digit puzzle has a unique solution, we call it a good puzzle. Both puzzles shown above are good puzzles. The solution to the first puzzle is <SPAN CLASS="MATH">7 <TT>*</TT> 12 = 84</SPAN> <tex2html_verbatim_mark>, while the solution to the second one is <SPAN CLASS="MATH">11 <TT>*</TT> 11 = 121</SPAN> <tex2html_verbatim_mark>.<P>You are already given some digit puzzles, but some of them are not good. Your task is to convert these puzzles into good ones. You can change any wildcard character (i.e. hidden digits) into a real digit, any real digit to a wildcard character, or a real digit to another real digit, but you cannot insert or remove any character at any place. The number of changed characters should be minimized.<P>In this problem, the puzzle is always in the form `` <SPAN CLASS="MATH"><I>a</I>&#215;<I>b</I> = <I>c</I></SPAN> <tex2html_verbatim_mark>", and `` <SPAN CLASS="MATH"><I>a</I>&#215;<I>b</I></SPAN> <tex2html_verbatim_mark>" and `` <SPAN CLASS="MATH"><I>b</I>&#215;<I>a</I></SPAN> <tex2html_verbatim_mark>" should be considered different if <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> is not equal to <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>. It is allowed that all digits of both <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> are shown (e.g <SPAN CLASS="MATH">12&#215;34 = <TT>*</TT> <TT>*</TT> <TT>*</TT> <TT>*</TT></SPAN> <tex2html_verbatim_mark>), though that puzzle is actually a simple multiplication problem. Write a program to make good puzzles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each test case contains three non-empty strings, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark>, having at most 2, 2 and 4 characters respectively. Each character is a digit or a wildcard `<code>*</code>', <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> will not begin with a zero character. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the converted puzzle. If more than one optimal solution is found, the lexicographically first one should be printed (remember that ``<code>*</code>" is before ``<TT>0</TT>"). There is always a solution.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 ** 8* 
** ** *** 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 7 ** 8* 
Case 2: ** ** 1*1
</PRE><P>
______________________________________________________
3785||||||false||||||
<P>When a student is too tired, he can't help sleeping in class, even if his favorite teacher is right here in front of him. Imagine you have a class of extraordinarily tired students, how long do you have to wait, before all the students are listening to you and won't sleep any more? In order to complete this task, you need to understand how students behave.<P>When a student is awaken, he struggles for <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> minutes listening to the teacher (after all, it's too bad to sleep all the time). After that, he counts the number of awaken and sleeping students (including himself). If there are strictly more sleeping students than awaken students, he sleeps for <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> minutes. Otherwise, he struggles for another <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> minutes, because he knew that when there is only very few sleeping students, there is a big chance for them to be punished! Note that a student counts the number of sleeping students only when he wants to sleep again.<P>Now that you understand each student could be described by two integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, the length of awaken and sleeping period. If there are always more sleeping students, these two periods continue again and again. We combine an awaken period with a sleeping period after it, and call the combined period an awaken-sleeping period. For example, a student with <SPAN CLASS="MATH"><I>a</I> = 1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I> = 4</SPAN> <tex2html_verbatim_mark> has an awaken-sleeping period of awaken-sleeping-sleeping-sleeping-sleeping. In this problem, we need another parameter <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3785img1.png ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3785img1.png ALT="$ \le$"><I>a</I> + <I>b</I>)</SPAN> <tex2html_verbatim_mark> to describe a student's initial condition: the initial position in his awaken-sleeping period. The 1st and 2nd position of the period discussed above are awaken and sleeping, respectively.<P>Now we use a triple <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark> to describe a student. Suppose there are three students (2, 4, 1), (1, 5, 2) and (1, 4, 3), all the students will be awaken at time 18. The details are shown in the table below.<P><DIV ALIGN="CENTER"><IMG WIDTH="1099" HEIGHT="179" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3785img1.png ALT="\epsfbox{p3785.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Table 1. An example</DIV><P>Write a program to calculate the first time when all the students are not sleeping.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of each case contains a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3785img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3785img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark>, the number of students. This is followed by n lines, each describing a student. Each of these lines contains three integers <SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3785img1.png ALT="$ \le$"><I>a</I>, <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3785img1.png ALT="$ \le$">5)</SPAN> <tex2html_verbatim_mark>, described above. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the first time all the students are awaken. If it'll never happen, output <TT>-1</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
2 4 1 
1 5 2 
1 4 3 
3 
1 2 1 
1 2 2 
1 2 3
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 18 
Case 2: -1
</PRE><P>
______________________________________________________
3786||||||false||||||
<P>There are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> fairies living happily in the Fairyland. One day, when the fairies are playing games, they are suddenly stuck in the sky and cannot move anymore! ``Your moving abilities are sealed by my magic. Be ready to defense my attack!" a terrible voice came out, ``I'll appear in the cube (0, 0, 0)-(<SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I></SPAN> <tex2html_verbatim_mark>), rush to the nearest fairy and then, make my assault with all my power!"<P>Since all the fairies cannot move any more, the only chance is to redistribute their defense powers according to their dangerousness. Formally, the defense power one fairy gains should be proportional to its probability to be attacked by the unknown fierce creature.<P>Write a program to compute the probability to be attacked, for every fairy. You may assume that the probability density of the attacker's initial position is the same everywhere in the cube; if there are at least two fairies closest (having the minimal Euclidean distance) to the initial position, any one may be attacked.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of each case contains four integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3786img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3786img1.png ALT="$ \le$">20, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3786img1.png ALT="$ \le$"><I>a</I>, <I>b</I>, <I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3786img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each containing three integers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3786img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3786img1.png ALT="$ \le$"><I>a</I>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3786img1.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3786img1.png ALT="$ \le$"><I>b</I>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3786img1.png ALT="$ \le$"><I>z</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3786img1.png ALT="$ \le$"><I>c</I>)</SPAN> <tex2html_verbatim_mark>, the coordinates of the fairies. No two fairies occupy the same position. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the probabilities for every fairy, to three decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 3 3 3 
1 1 1 
2 2 2 
2 7 2 10 
1 1 6 
3 1 6
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 0.500 0.500 
Case 2: 0.286 0.714
</PRE><P>
______________________________________________________
3787||||||false||||||
<P>Gargoyles can trace their history back many thousands of years to ancient Egypt, Greece, and Rome. Terra cotta waterspouts were formed in the shapes of animals such as lions and birds to serve the physical function of running the rainwater away from the walls and foundations of buildings, and the spiritual function of protecting from evil forces.<P><DIV ALIGN="CENTER"><IMG WIDTH="409" HEIGHT="486" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="\epsfbox{p3787.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig 1. A gargoyle</DIV><P>Have you ever dreamed of creating your own castle with a lot of beautiful gargoyles on the walls? To your knowledge, the speed of water coming out of each gargoyle should be identical, so an elaborately designed water system is required. The water system consists of a huge reservoir and several interconnecting water pipes. Pipes cannot save water, so the total incoming and outgoing speed of water should be equal at each connection.<P>All the water from gargoyles flows into the reservoir, which is located at the bottom of the castle. Some pipes are connecting the reservoir, but water can only go from the reservoir to pipes, but never from pipes back to the reservoir. A micro-processor is installed inside each pipe, so the speed of water could easily be controlled. However, the microprocessors consume electricity. The exact cost in each pipe is proportional to the speed of water. If the cost constant in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th pipe is <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, the electricity cost in that pipe is <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB><I>v</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the speed of water in that pipe.<P>Write a program to find the optimal configuration of the water system (i.e. the water speed in each pipe) of your dream castle, so that the total cost is minimized. It is always possible to build a water system.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of each case contains three integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$">25, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$">50, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, the number of gargoyles, the number of pipe connections and the number of pipes. The following <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines each contains five integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$"><I>a</I>, <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$"><I>n</I> + <I>m</I>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$"><I>l</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$"><I>u</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$">100, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3787.jpg ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, describing each pipe. <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> are the incoming and outgoing vertex number (reservoir is 0, gargoyles are numbered 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, pipe connections are numbered <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>n</I> + <I>m</I></SPAN> <tex2html_verbatim_mark>), lower-bound and upper-bound of water speed, and the cost constant. No pipe connects two identical vertices. For every pipe, the incoming vertex will never be a gargoyle, and the outgoing vertex will never be the reservoir. For every pair of vertices, there could be at most one pipe connecting them (if a pipe is going from <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, no pipes can go from <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, or from <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>). The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and minimal cost to two decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 1 4 
0 4 8 15 5 
4 1 2 5 2 
4 2 1 6 1 
4 3 3 7 2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 60.00
</PRE><P>
______________________________________________________
3788||||||false||||||

<P>
Do you like music? Let's play a game. I wrote down some notes on a piece of staff paper, then erase every other thing and leave only the notes. Can you guess what I wrote?

<P>
<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3788a.eps}$
 -->
<IMG
 WIDTH="907" HEIGHT="177" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3788a.jpg
 ALT="\epsfbox{p3788a.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Fig 1. Names of Notes

</DIV>

<P>
If you're not familiar with music, take a look at the picture above. The vertical position of a note determines its name, which is one of C, D, E, F, G, A and B, in this problem (yes, you don't have to consider notes in other octaves). Consecutive lines in the staff have the same vertical distances. We call it one standard distance (sd), which is always between 1.0 and 5.0. For example, C and E are 1sd apart, and D and B are 2.5sd. The horizontal order of the notes determines how the sequence is played (or sung). The exact horizontal positions do not matter, as long as the relative order is preserved. But since I never write down ugly scores, you can safely assume that the horizontal distance of an arbitrary pair of neighboring notes is at least 1sd and at most 5sd.

<P>
<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3788b.eps}$
 -->
<IMG
 WIDTH="1137" HEIGHT="203" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3788a.jpg
 ALT="\epsfbox{p3788b.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">(a) Everything (b) The Notes  (c) Note positions only 
<BR>
Fig 2. Transforming the original score into a hidden form

</DIV>

<P>
Figure 2(a) corresponds to the sequence EEECEG. Figure 2(b) shows the notes when other stuffs have been erased. Then, I rotate the paper and tell you the positions of the notes, shown in figure 2(c). 

<P>
Write a program to find my original music score, given the rotated positions of the notes. To make your life a little bit easier, I can tell you the name of the first and last note, and I promise that the answer could be uniquely determined. The rotation angle is an integer between -60 and 60 degrees (inclusive).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of several test cases. The first line of each case contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(3 \le n \le 20)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3788a.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3788a.jpg
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark> and two different capital letters from `<TT>A</TT>' to `<TT>G</TT>', in the order of ``first note, last note". This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines each containing two real numbers to eight decimal places, the rotated positions of each note. The notes can appear in any order. All the real numbers have absolute values not greater than 1000. The last test case is followed by a single zero, which should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the case number and recognized hidden score. The test cases are carefully designed such that floating error does not cause any problem.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 E G 
0.00000000 1.00000000 
1.00000000 1.00000000 
2.00000000 1.00000000 
4.00000000 0.00000000 
5.00000000 1.00000000 
8.00000000 2.00000000 
4 A C 
0.00000000 15.62499286 
11.28111236 5.80618831 
20.63744497 6.54957842 
37.94846083 0.00000000 
7 B F 
0.00000000 0.00000000 
15.14798698 18.22443643 
25.04608611 30.65582149 
19.58478851 24.56084570 
23.09216832 27.86533768 
11.29672536 9.31513384 
8.65999632 3.84492903 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: EEECEG 
Case 2: ADEC 
Case 3: BDEGGFF
</PRE> 

<P>

______________________________________________________
3789||||||false||||||
<P>Iceman was in a room in Iceland. He wants to get out of it, but it's not as easy as it seems. To help him, you need to know something about Iceland and Iceman.<P><DIV ALIGN="CENTER"><IMG WIDTH="294" HEIGHT="319" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3789.jpg ALT="\epsfbox{p3789.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig 1. The iceman in the room</DIV><P>The room could be described by an <SPAN CLASS="MATH"><I>n</I> <TT>*</TT> <I>m</I></SPAN> <tex2html_verbatim_mark> grid, so there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> rows numbered 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> from top to bottom, each with <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> squares numbered 1 to <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> from left to right. Each square may be empty, icy or rocky. An empty square is denoted by `<TT>.</TT>', while a rocky square is denoted by `<TT>X</TT>'. Ice squares are a bit complex, so we talk about it later. The first and last rows and columns are all rocky. The iceman's initial location is always an empty square at the beginning, denoted by `'. His destination is also empty at the beginning, denoted by `<TT>#</TT>'. What's more, the destination is always directly above a rocky square. Though the iceman looks bigger than a square, he always occupies exactly one single empty square.<P>The iceman has four kinds of moves: go left (<TT>L</TT>), go right (<TT>R</TT>), magic wind left (<code>&lt;</code>) and magic wind right (<code>&gt;</code>). Suppose the iceman is at <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark>, then `<code>&lt;</code>' move operates on the iceman's bottom-left square <SPAN CLASS="MATH">(<I>r</I> + 1, <I>c</I> - 1)</SPAN> <tex2html_verbatim_mark>. If the square is rocky, the move does nothing; if the square is empty, it becomes icy; if the square is icy, it becomes empty. There are four kinds of icy squares: ice with two free-ends (<TT>O</TT>), ice with left free-end (<TT>[</TT>), ice with right free-end (<TT>]</TT>), ice with no free-end (<TT>=</TT>). Here `free' means `not connected'. If an icy square is created by a magic-wind move, it connects to its left/right neighbor, provided the corresponding neighboring square is not empty (rocky or icy). The connections between neighboring squares are symmetric, so squares that are connected to each other behave as a whole. Connections could be created only by magic moves, and there are no vertical connections. We call the whole an ice bar. If an icy bar (no matter how many squares does it contain) has two free ends, we call it a free ice bar. Free ice bars immediate drop down vertically when all its supporting squares (squares directly below it) are empty. When an icy square is cleared, all connections of it (if any) are destroyed. Because rocky squares are fixed, if an ice bar connects to one or two rocky squares, it never drops down until its connections to rocky squares are all destroyed. The `<code>&gt;</code>' move is symmetrical.<P>The `<TT>L</TT>' move is a little bit complex, compared to what you might expect. Again, suppose the iceman is located at <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark>. If <SPAN CLASS="MATH">(<I>r</I>, <I>c</I> - 1)</SPAN> <tex2html_verbatim_mark> is an empty square, the iceman go there. Now he stands on the square <SPAN CLASS="MATH">(<I>r</I> + 1, <I>c</I> - 1)</SPAN> <tex2html_verbatim_mark>, which might be empty. If this is true, he falls down until the square under him is not empty. The iceman can launch a move only when he's standing on a rocky or icy square, so when falling down, he cannot do anything. Now consider the second case, i.e. <SPAN CLASS="MATH">(<I>r</I>, <I>c</I> - 1)</SPAN> <tex2html_verbatim_mark> is rocky. Obviously the iceman cannot move to that square, so he checks the square above it and the square above himself (i.e the squares <SPAN CLASS="MATH">(<I>r</I> - 1, <I>c</I> - 1)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>r</I> - 1, <I>c</I>)</SPAN> <tex2html_verbatim_mark>). If both are empty, he climbs to <SPAN CLASS="MATH">(<I>r</I> - 1, <I>c</I> - 1)</SPAN> <tex2html_verbatim_mark>, otherwise he remains at <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark>. The third and last case holds when <SPAN CLASS="MATH">(<I>r</I>, <I>c</I> - 1)</SPAN> <tex2html_verbatim_mark> is icy. In this case, the iceman tries to push it. The Iceman is not so powerful, so he can only push single <SPAN CLASS="MATH">(1&#215;1)</SPAN> <tex2html_verbatim_mark> icy squares. That is, if only if <SPAN CLASS="MATH">(<I>r</I>, <I>c</I> - 2)</SPAN> <tex2html_verbatim_mark> is empty, the ice at <SPAN CLASS="MATH">(<I>r</I>, <I>c</I> - 1)</SPAN> <tex2html_verbatim_mark> is pushed left. It continues to move left until it is blocked by a rocky or icy square, or the square directly below is empty. In the latter case, the ice drops down, as stated before. Note that when stopped dropping, the ice does not move left again. Don't forget that when the ice is pushed away successfully, some free ice bars may drop down. The iceman does not move until everything stopped moving or dropping. If the ice at <SPAN CLASS="MATH">(<I>r</I>, <I>c</I> - 1)</SPAN> <tex2html_verbatim_mark> cannot be pushed, it is treated as a rocky square, so the iceman may climb on it.<P>Write a program to move the iceman to the destination with minimum number of moves.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of each case contains two integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3789.jpg ALT="$ \le$"><I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3789.jpg ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark>. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each containing <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> characters. Each character is one of `<TT>.</TT>', `<TT>X</TT>', `', `<TT>#</TT>', `<TT>O</TT>', `<TT>[</TT>', `<TT>]</TT>', `<TT>=</TT>'. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the move sequence. There is always a solution of at most 15 moves. It is guaranteed that the optimal solution is unique.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
55 
XXXXX 
X@.#X 
XX.XX 
X...X 
XXXXX 
77 
XXXXXXX 
X.....X 
X@[=].X 
XXX.XXX 
XXX.XXX 
XXX#XXX 
XXXXXXX 
66 
XXXXXX 
X@...X 
XXXX=X 
X..O.X 
X.#O.X 
XXXXXX 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: &gt;RR 
Case 2: R&gt;R 
Case 3: RR&gt;RLLLLL&gt;R
</PRE><P>
______________________________________________________
3790||||||false||||||
<P>In most puzzles we are given some pieces and we have to make a target pattern which can be built in only one possible way. But some puzzles are a bit different, we are given a target pattern and from that target pattern we have to find in how many ways the pieces can be placed. Such a puzzle is the puzzle of overlapping squares. To understand this puzzle, look at the pictures below:<P><DIV ALIGN="CENTER"><IMG WIDTH="409" HEIGHT="422" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3790.jpg ALT="\epsfbox{p3790.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Fig 1. Placing four filled squares in an empty 4x4 grid.</DIV><P>In first figure we have placed a <SPAN CLASS="MATH">(2&#215;2)</SPAN> <tex2html_verbatim_mark> filled square in a <SPAN CLASS="MATH">(4&#215;4)</SPAN> <tex2html_verbatim_mark> grid. In the second figure we have placed another <SPAN CLASS="MATH">(2&#215;2)</SPAN> <tex2html_verbatim_mark> filled square in the grid, which have of course deleted some part of the black lines of the previous square, in third picture we have placed a third square and in the fourth picture we have placed a fourth square. The picture can become even more complex if we place more <SPAN CLASS="MATH">(2&#215;2)</SPAN> <tex2html_verbatim_mark> squares.<P>Write a program to determine if it's possible to form a target image using between 1 and 6 pieces (inclusive) of <SPAN CLASS="MATH">2&#215;2</SPAN> <tex2html_verbatim_mark> squares.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. Each test case is contained in five lines and each line contains nine characters. If the horizontal border of a filled square is visible it is denoted with `<TT>_</TT>' (ASCII value 95) sign and if vertical border of a filled square is visible then it is denoted with `<TT><SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark></TT>' (ASCII value 124) character. The board contains no other character than `<TT>_</TT>', `<TT><SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark></TT>' and of course ` ' (ASCII Value 32). The border lines of the squares can only be along the grid lines. Each board lines end with a `<TT><SPAN CLASS="MATH">#</SPAN> <tex2html_verbatim_mark></TT>' (Hash character) which denotes the end of line. This character is not a part of the grid or square. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and `<TT>Yes</TT>' or `<TT>No</TT>', depending on whether it's possible to form the target.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
         # 
 _ _ _   # 
| |_ _|  # 
|_|   |  # 
  |_ _|  #
         # 
   _ _   # 
  |   |  # 
  |_ _|  # 
         # 
 _ _ _ _ # 
|_|_|_|_|# 
|_|_|_|_|# 
|_|_|_|_|# 
|_|_|_|_|# 
   _ _   # 
 _|   |_ # 
| |_ _| |# 
|_|   |_|# 
  |_ _|_|# 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Yes
Case 2: Yes
Case 3: No 
Case 4: Yes

______________________________________________________
3791||||||false||||||
<P>Barry Bennett, the coach of the Bings football team, wants to arrange his team for an important match against the Bangs. He decides on the formation he wants to play, for example 4-4-2, meaning that there will be four defenders, four midfielders, and two strikers (and of course, one goalkeeper). Your task is to determine the players who will play. For each available player, we know his role (e.g. midfielder). For each role, the players are selected in ascending order of their numbers. When the players are selected, you must determine the captain too, who is the player with the longest record in the team play. In case two players have the same record, the one with bigger number is chosen. Note that the captain is chosen among the players that are selected in the arrange.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. The first 22 lines of each test case contain the data for the 22 available players in this format:<P><P><BR><SPAN CLASS="MATH"><I>number</I>&nbsp;<I>name</I>&nbsp;<I>role</I>&nbsp;<I>year</I><SUB>1</SUB> - <I>year'</I><SUB>1</SUB>&nbsp;<I>year</I><SUB>2</SUB> - <I>year'</I><SUB>2</SUB>&nbsp;...</SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>number</I></SPAN> <tex2html_verbatim_mark> is the player number (unique positive integer less than 100). <SPAN CLASS="MATH"><I>name</I></SPAN> <tex2html_verbatim_mark> is a string of at most 20 letters. <SPAN CLASS="MATH"><I>role</I></SPAN> <tex2html_verbatim_mark> is a single character among <TT>G</TT>, <TT>D</TT>, <TT>M</TT>, <TT>S</TT>, for goalkeeper, defender, midfielder, and striker respectively. Each <SPAN CLASS="MATH"><I>year</I><SUB>i</SUB> - <I>year'</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> pair <SPAN CLASS="MATH">(<I>year</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3791img1.png ALT="$ \le$"><I>year'</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> shows the player has been a member of the team between the specified years (inclusive). The years are in four-digit format. There is at least one and at most 20 such pairs, and the same year is not repeated more than once in the list. There is a 23-rd line describing the desired formation, like <TT>4-4-2</TT> in that format. Note that there are only three numbers in the formation (so, 4-3-2-1 is not valid), none of them is zero, and their sum is always 10. The input is terminated by a line containing a single `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a list of 11 players chosen in the arrange. Each line must contain the player number, his name and his role, separated by single blank characters. The players must be sorted according to their role, in the order of goalkeeper, defenders, midfielders, and strikers. The players with the same role are sorted according to ascending order of their numbers. There is an exception that the captain always comes as the first player in the entire list. If it is not possible to arrange the team conforming to the desired formation, write a single line containing `<TT>IMPOSSIBLE TO ARRANGE</TT>' in the output. There should be a blank line after the output for each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 PlayerA M 2000-2001 2003-2006
2 PlayerB M 2004-2006
10 PlayerC D 2001-2005
1 PlayerD D 2000-2001 2002-2004
11 PlayerE S 2003-2006
8 PlayerF M 2005-2006
22 PlayerG S 2005-2006
25 PlayerH G 2000-2001 2002-2003 2005-2006
6 PlayerI D 2003-2006
26 PlayerJ D 2003-2004 2000-2001
18 PlayerK M 2003-2004
19 PlayerL M 2000-2001 2003-2006
7 PlayerM S 2003-2006 1999-2001
21 PlayerN S 2003-2006
13 PlayerO S 2005-2006
15 PlayerP G 2001-2006
14 PlayerQ D 2003-2004
5 PlayerR S 2000-2005
20 PlayerS G 2000-2002 2003-2003
12 PlayerT M 2004-2005
3 PlayerU D 2000-2005
4 PlayerV M 2001-2004
4-4-2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 PlayerM S
15 PlayerP G
1 PlayerD D
3 PlayerU D
6 PlayerI D
10 PlayerC D
2 PlayerB M
4 PlayerV M
8 PlayerF M
9 PlayerA M
5 PlayerR S
</PRE><P>
______________________________________________________
3792||||||false||||||
<P>A <SPAN CLASS="MATH"><I>wild</I>&nbsp;<I>number</I></SPAN> <tex2html_verbatim_mark> is a string containing digits and question marks (like <TT>36?1?8</TT>). A number <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> matches a wild number <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> if they have the same length, and every non-question mark character in <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is equal to the character in the same position in <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> (it means that you can replace a question mark with any digit). For example, <TT>365198</TT> matches the wild number <TT>36?1?8</TT>, but <TT>360199</TT>, <TT>361028</TT>, or <TT>36128</TT> does not. Write a program that reads a wild number <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> and a number <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> from input, both of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, and determines the number of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-digit numbers that match <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> and are greater than <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input. Each test case consists of two lines of the same length. The first line contains a wild number <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>, and the second line contains an integer number <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>. The length of input lines is between 1 and 10 characters. The last line of input contains a single character <code>#</code>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write a single line containing the number of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-digit numbers matching <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> and greater than <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the length of <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
36?1?8
236428
8?3
910
?
5
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
100
0
4
</PRE><P>
______________________________________________________
3793||||||false||||||
<P>The rules for calculating the taxi fares are quite complex. Many factors are to be considered in computing the taxi fares, including the length of the trip, the time of the day, the speed, etc. Every morning Bianca Bennett uses taxi to get to her office, she thinks if taximeters are programmed correctly. One day, she decided to write a program to calculate the taxi fares to check this.<P>Imagine a taxi passes through a sequence of streets <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>, <I>S</I><SUB>2</SUB>,..., <I>S</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> in order. The length of <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and it is assumed that the taxi travels in a constant speed and it takes <SPAN CLASS="MATH"><I>M</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> minutes to travel one kilometer in <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. To make it simple, assume the passenger gets in at the start of a street <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and gets out at the end of the destination street <SPAN CLASS="MATH"><I>S</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> (i.e., he does not get in or out in the middle of a street). The passenger is charged for each kilometer of the trip. The first ten kilometers of the trip cost 1000 Rials each. The next 20 kilometers (from 11 to 30) cost 250 Rials each. After that, each kilometer costs 100 Rials.<P>During the night, the fare is increased by 20%. The rule is that for each kilometer, if the taxi travels at least one minute during the time interval [12 AM, 6 AM], that kilometer will cost 20% more. Since driving in a heavy traffic costs more, if the average speed of the taxi is less than 30 km/h during the whole trip, the fare is increased by 10%.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT> </H2><P>The input consists of multiple test cases. The first part of each test case is the sequence of streets the taxi travels. This comes in several lines, each describing one street in the form of<P><P><BR><SPAN CLASS="MATH"><I>street</I> - <I>name</I>&nbsp;<I>length</I>&nbsp;<I>min</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR><SPAN CLASS="MATH"><I>street</I> - <I>name</I></SPAN> <tex2html_verbatim_mark> is a unique string of at most 20 letters and digits with no blank in it, and <SPAN CLASS="MATH"><I>length</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>min</I></SPAN> <tex2html_verbatim_mark> are two positive integer numbers which are <SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> (measured in kilometers, at most 200) and <SPAN CLASS="MATH"><I>M</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> (measured in minutes) respectively. Each street is visited once by the taxi. The first part of the test case is terminated by a line containing a single $ character. The second part of the test case contains a single line of the form<P><P><BR><SPAN CLASS="MATH"><I>source</I> - <I>street</I>&nbsp;<I>dest</I> - <I>street</I>&nbsp;<I>time</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR>The first two items are the names of the source and the destination streets respectively. The third item is the time the passenger gets in which is in standard 24-hours format (<SPAN CLASS="MATH"><I>HH</I> : <I>MM</I></SPAN> <tex2html_verbatim_mark>). There is a line containing a single <code>#</code> character at the end of each test case. You may assume that the source and the destination streets belong to the input sequence of streets and the destination street does not come before the source street. The last line of the input contains two dash characters as shown in the sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line containing the fare of the passenger's trip.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Khayyam 10 35
15thKhordad 50 15 
Pamenar 15 40
$
Khayyam Pamenar 07:15
#
Jenah 10 40
Nouri 50 70
Hemmat 30 25
Chamran 80 80
ValieAsr 30 20
$
Nouri ValieAsr 23:30
#
--
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
21758
36432
</PRE><P>
______________________________________________________
3794||||||false||||||
<P><BLOCKQUOTE><SPAN CLASS="textbf">Dear Contestant,</SPAN></BLOCKQUOTE><P><BLOCKQUOTE><SPAN CLASS="textbf">I'm going to have a party at my villa at Hali-Bula to celebrate my retirement from BCM. I wish I could invite all my co-workers, but imagine how an employee can enjoy a party when he finds his boss among the guests! So, I decide not to invite both an employee and his/her boss. The organizational hierarchy at BCM is such that nobody has more than one boss, and there is one and only one employee with no boss at all (the Big Boss)! Can I ask you to please write a program to determine the maximum number of guests so that no employee is invited when his/her boss is invited too? I've attached the list of employees and the organizational hierarchy of BCM.</SPAN></BLOCKQUOTE><P><P><BR><BLOCKQUOTE><SPAN CLASS="textbf">Best,<BR>-Brian Bennett</SPAN></BLOCKQUOTE><P><P><BR><BLOCKQUOTE><SPAN CLASS="textbf">P.S. I would be very grateful if your program can indicate whether the list of people is uniquely determined if I choose to invite the maximum number of guests with that condition.</SPAN></BLOCKQUOTE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case is started with a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3794img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/3794img1.png ALT="$ \le$">200)</SPAN> <tex2html_verbatim_mark>, the number of BCM employees. The next line contains the name of the Big Boss only. Each of the following <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> lines contains the name of an employee together with the name of his/her boss. All names are strings of at least one and at most 100 letters and are separated by blanks. The last line of each test case contains a single <TT>0</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write a single line containing a number indicating the maximum number of guests that can be invited according to the required condition, and a word <TT>Yes</TT> or <TT>No</TT>, depending on whether the list of guests is unique in that case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
Jason
Jack Jason
Joe Jack
Jill Jason
John Jack
Jim Jill
2
Ming
Cho Ming
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 Yes
1 No
</PRE><P>
______________________________________________________
3795||||||false||||||

<P>
Back to year 3024, humans finally developed a new technology that enables them to conquer the alien races. The new technology made it possible to produce huge spaceships known as Saber Tooth spaceships as powerful as the aliens' defending mammoths. At that time, humans ruled several planets while some others were under control of the aliens. Using Saber Tooth ships, humans finally defeated aliens and this became the first Planet War in history. Our goal is to run a simulation of the ancient war to verify some historical hypotheses. 

<P>
Producing each spaceship takes an amount of time which is constant for each planet but may vary among different planets. We call the number of spaceships each planet can produce in a year, the <!-- MATH
 $production \  rate$
 -->
<SPAN CLASS="MATH"><I>production</I>&nbsp;<I>rate</I></SPAN>
<tex2html_verbatim_mark> of that planet. Note that each planet has a number of spaceships in it initially (before the simulation starts). The planets start producing  ships when the simulation starts, so if a planet has <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> ships initially, and has the production rate <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark>, it will have <SPAN CLASS="MATH"><I>n</I> + <I>p</I></SPAN>
<tex2html_verbatim_mark> ships at the beginning of year 1, and <!-- MATH
 $n + i \times p$
 -->
<SPAN CLASS="MATH"><I>n</I> + <I>i</I>&#215;<I>p</I></SPAN>
<tex2html_verbatim_mark> ships at the beginning of year <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> (years are started from zero).

<P>
Bradley Bennett, the commander in chief of the human armies, decided a strategy for the war. For each alien planet A, he chooses a corresponding human planet P, and produces spaceships in P until a certain moment at which he sends all spaceships in P to invade the planet A. No alien planet is invaded by two human planets and no human planet sends its spaceships to two different alien planets. 

<P>
The defense power of the alien planets comes from their powerful mammoths. Each alien planet contains a number of mammoths initially and produces a number of mammoths each year (called the production rate of the planet). When a fight between spaceships and mammoths takes place, the side having the greater number of troops is the winner. If the spaceships win, the alien planet is defeated. In case the number of mammoths and spaceships are equal, the spaceships win.

<P>
The difficulty with planning this strategy is that it takes some time for the spaceships to reach the alien planets, and during this time, the aliens produce mammoths. The time required for spaceships to travel from each human planet to each alien planet is known. The ships can leave their planets only at the beginning of years (right after the ships are produced) and reach the alien planets at the beginning of years too (right after the mammoths are produced). 

<P>

<P>
<BR>
As an example, consider a human planet with two initial spaceships and production rate three invading an alien planet with two initial mammoths and production rate two. The time required to travel between the two planets is two years and the ships are ordered to leave at year one. In this case, five ships leave the human planet. When they reach the alien planet, they confront eight mammoths and will be defeated during the fight.

<P>

<P>
<BR>
Bennett decided to prepare a plan that destroys every alien planet in the shortest possible time. Your task is to write a program to generate such a plan. The output is the shortest possible time (in years) in which every alien planet is defeated.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
There are multiple test cases in the input. The first line of each test case contains two numbers <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> which are the number of planets under the control of humans and aliens respectively (both between 1 and 250). The second line of the test case contains <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> pairs of non-negative integers <!-- MATH
 $n_{1} \ m_{1} \ n_{2} \ m_{2} \ldots n_{H} \ m_{H}$
 -->
<SPAN CLASS="MATH"><I>n</I><SUB>1</SUB>&nbsp;<I>m</I><SUB>1</SUB>&nbsp;<I>n</I><SUB>2</SUB>&nbsp;<I>m</I><SUB>2</SUB>...<I>n</I><SUB>H</SUB>&nbsp;<I>m</I><SUB>H</SUB></SPAN>
<tex2html_verbatim_mark>. The number <SPAN CLASS="MATH"><I>n</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is the initial number of Saber Tooth spaceships in the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th human planet and <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is the production rate of that planet. The third line contains <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> pairs of non-negative integers which specify the initial number of mammoths and the production rate of the alien planets in the same format as the second line. After the third line, there are <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> lines each containing <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> positive integers. The <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>-th number on the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th line shows how many years it takes a spaceship to travel from the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th human planet to the <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>-th alien planet. The last line of the input contains two zero numbers. Every number in the input except <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> is between 0 and 40000.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output for each test case contains a single integer which is the minimum time in which all alien planets can be defeated. If it is impossible to destroy all alien planets, the output should be `<TT>IMPOSSIBLE</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 1
2 3 0 3
2 2
2
2
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6
</PRE> 

<P>

______________________________________________________
3796||||||false||||||

<P>
Another boring Friday afternoon, Betty the Beetle thinks how to amuse herself. She goes out of her hiding place to take a walk around the living room in Bennett's house. Mr. and Mrs. Bennett are out to the theatre and there is a chessboard on the table! "The best time to practice my chessboard dance," Betty thinks! She gets so excited that she does not note that there are some pieces left on the board and starts the practice session! She has a script showing her how to move on the chessboard. The script is a sequence like the following example:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3796a.eps}$
 -->
<IMG
 WIDTH="255" HEIGHT="243" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3796a.jpg
 ALT="\epsfbox{p3796a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
At each instant of time Betty, stands on a square of the chessboard, facing one of the four directions (up, down, left, right) when the board is viewed from the above. Performing a ``move <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>" instruction, she moves <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> squares forward in her current direction. If moving <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> squares goes outside the board, she stays at the last square on the board and does not go out. There are three types of turns: turn right, turn left, and turn back, which change the direction of Betty. Note that turning does not change the position of Betty.

<P>
If Betty faces a chess piece when moving, she pushes that piece, together with all other pieces behind (a tough beetle she is!). This may cause some pieces fall of the edge of the chessboard, but she doesn't care! For example, in the following figure, the left board shows the initial state and the right board shows the state after performing the script in the above example. Upper-case and lower-case letters indicate the white and black pieces respectively. The arrow shows the position of Betty along with her direction. Note that during the first move, the black king (r) falls off the right edge of the board!

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3796b.eps}$
 -->
<IMG
 WIDTH="767" HEIGHT="345" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/p3796a.jpg
 ALT="\epsfbox{p3796b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
You are to write a program that reads the initial state of the board as well as the practice dance script, and writes the final state of the board after the practice.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are multiple test cases in the input. Each test case has two parts: the initial state of the board and the script. The board comes in eight lines of eight characters. The letters <TT>r</TT>, <TT>d</TT>, <TT>t</TT>, <TT>a</TT>, <TT>c</TT>, <TT>p</TT> indicate black pieces, <TT>R</TT>, <TT>D</TT>, <TT>T</TT>, <TT>A</TT>, <TT>C</TT>, <TT>P</TT> indicate the white pieces and the period (dot) character indicates an empty square. The square from which Betty starts dancing is specified by one of the four characters <TT>&lt;</TT>, <TT>&gt;</TT>, <code>^</code>, and <TT>v</TT> which also indicates her initial direction (left, right, up, and down respectively). Note that the input is not necessarily a valid chess game status.

<P>
The script comes immediately after the board. It consists of several lines (between 0 and 1000). In each line, there is one instruction in one of the following formats (<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is a non-negative integer number):

<P>

<P>
<BR>

<TT>move</TT> <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> 
<BR><TT>turn left</TT> 
<BR><TT>turn right</TT> 
<BR><TT>turn back</TT> 

<P>

<P>
<BR>
At the end of each test case, there is a line containing a single <code>#</code> character. The last line of the input contains two dash characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output for each test case should show the state of the board in the same format as the input. Write an empty line in the output after each board.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
.....c..
.p..A..t
D..&gt;T.Pr
....aP.P
p.d.C...
.....p.R
........
........
move 2
turn right
move 3
turn left
turn left
move 1
#
--
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
.....c..
.p..A..t
D.....TP
....a..P
p.d.C^..
.......R
.....P..
.....p..
</PRE> 

<P>

______________________________________________________
3797||||||false||||||

<P>
There is going to be a voting at FIPA (Federation Internationale de Programmation Association) to determine the host of the next IPWC (International Programming World Cup). Benjamin Bennett, the delegation of Diamondland to FIPA, is trying to seek other delegation's support for a vote in favor of hosting IPWC in Diamondland. Ben is trying to buy the votes by diamond gifts. He has figured out the voting price of each and every country. However, he knows that there is no need to diamond-bribe every country, since there are small poor countries that take vote orders from their respected superpowers. So, if you bribe a country, you have gained the vote of any other country under its domination (both directly and via other countries domination).  For example, if C is under domination of B, and B is under domination of A, one may get the vote of all three countries just by bribing A. Note that no country is under domination of more than one country, and the domination relationship makes no cycle. You are to help him, against a big diamond, by writing a program to find out the minimum number of diamonds needed such that at least <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> countries vote in favor of Diamondland. Since Diamondland is a candidate, it stands out of the voting process.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple test cases. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 200)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3797img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3797img1.png
 ALT="$ \le$">200)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le m \le n)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3797img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/37/3797img1.png
 ALT="$ \le$"><I>n</I>)</SPAN>
<tex2html_verbatim_mark> which are the number of countries participating in the voting process, and the number of votes Diamondland needs. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines, each describing one country, are of the following form:

<P>

<P>
<BR>

<!-- MATH
 $CountryName \ DiamondCount \ DCName_{1} \ DCName_{2} \ldots$
 -->
<SPAN CLASS="MATH"><I>CountryName</I>&nbsp;<I>DiamondCount</I>&nbsp;<I>DCName</I><SUB>1</SUB>&nbsp;<I>DCName</I><SUB>2</SUB>...</SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>

<!-- MATH
 $CountryName$
 -->
<SPAN CLASS="MATH"><I>CountryName</I></SPAN>
<tex2html_verbatim_mark>, the name of the country, is a string of at least one and at most 100 letters and <!-- MATH
 $DiamondCount$
 -->
<SPAN CLASS="MATH"><I>DiamondCount</I></SPAN>
<tex2html_verbatim_mark> is a positive integer which is the number of diamonds needed to get the vote of that country and all of the countries that their names come in the list <!-- MATH
 $DCName_{1} \ DCName_{2} \ldots$
 -->
<SPAN CLASS="MATH"><I>DCName</I><SUB>1</SUB>&nbsp;<I>DCName</I><SUB>2</SUB>...</SPAN>
<tex2html_verbatim_mark> which means they are under direct domination of that country. Note that it is possible that some countries do not have any other country under domination. The end of the input is marked by a single line containing a single <code>#</code> character.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case, write a single line containing a number showing the minimum number of diamonds needed to gain the vote of at least <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> countries.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 2
Aland 10
Boland 20 Aland
Coland 15
#
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
20
</PRE> 

<P>

______________________________________________________
3798||||||false||||||
<P>Bob Bennett, the young adventurer, has found the map to the treasure of the Chimp Island, where the ghost zombie pirate LeChimp, the infamous evil pirate of the Caribbeans has hidden somewhere inside the Zimbu Memorial Monument (ZM<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>). ZM<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> is made up of a number of corridors forming a maze. To protect the treasure, LeChimp has placed a number of stone blocks inside the corridors to block the way to the treasure. The map shows the hardness of each stone block which determines how long it takes to destroy the block. ZM<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> has a number of gates on the boundary from which Bob can enter the corridors. Fortunately, there may be a pack of dynamites at some gates, so that if Bob enters from such a gate, he may take the pack with him. Each pack has a number of dynamites that can be used to destroy the stone blocks in a much shorter time. Once entered, Bob cannot exit ZM<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> and enter again, nor can he walk on the area of other gates (so, he cannot pick more than one pack of dynamites).<P>The hardness of the stone blocks is an integer between 1 and 9, showing the number of days required to destroy the block. We neglect the time required to travel inside the corridors. Using a dynamite, Bob can destroy a block almost immediately, so we can ignore the time required for it too. The problem is to find the minimum time at which Bob can reach the treasure. He may choose any gate he wants to enter ZM<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case contains the map of ZM<SPAN CLASS="MATH"><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> viewed from the above. The map is a rectangular matrix of characters. Bob can move in four directions up, down, left, and right, but cannot move diagonally. He cannot enter a location shown by asterisk characters (<code>*</code>), even using all his dynamites! The character (<code>$</code>) shows the location of the treasure. A digit character (between <TT>1</TT> and <TT>9</TT>) shows a stone block of hardness equal to the value of the digit. A hash sign (<code>#</code>) which can appear only on the boundary of the map indicates a gate without a dynamite pack. An uppercase letter on the boundary shows a gate with a pack of dynamites. The letter A shows there is one dynamite in the pack, B shows there are two dynamite in the pack and so on. All other characters on the boundary of the map are asterisks. Corridors are indicated by dots (<TT>.</TT>). There is a blank line after each test case. The width and the height of the map are at least 3 and at most 100 characters. The last line of the input contains two dash characters (<TT>-</TT>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write a single line containing a number showing the minimum number of days it takes Bob to reach the treasure, if possible. If the treasure is unreachable, write `<TT>IMPOSSIBLE</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
*****#*********
*.1....4..$...*
*..***..2.....*
*..2..*****..2*
*..3..******37A
*****9..56....*
*.....******..*
***CA**********

*****
*$3**
*.2**
***#*

--
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
IMPOSSIBLE
</PRE><P>
______________________________________________________
3799||||||false||||||
<P>In this problem, you are given a sequence <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>, <I>S</I><SUB>2</SUB>,..., <I>S</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> of squares of different sizes. The sides of the squares are integer numbers. We locate the squares on the positive <SPAN CLASS="MATH"><I>x</I> - <I>y</I></SPAN> <tex2html_verbatim_mark> quarter of the plane, such that their sides make 45 degrees with <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> axes, and one of their vertices are on <SPAN CLASS="MATH"><I>y</I> = 0</SPAN> <tex2html_verbatim_mark> line. Let <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> be the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> coordinates of the bottom vertex of <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. First, put <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> such that its left vertex lies on <SPAN CLASS="MATH"><I>x</I> = 0</SPAN> <tex2html_verbatim_mark>. Then, put <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>i</I> &gt; 1)</SPAN> <tex2html_verbatim_mark> at minimum <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> such that<P><DL COMPACT><DT>a)</DT><DD><SPAN CLASS="MATH"><I>b</I><SUB>i</SUB> &gt; <I>b</I><SUB>i-1</SUB></SPAN> <tex2html_verbatim_mark> and</DD><DT>b)</DT><DD>the interior of <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> does not have intersection with the interior of <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>...<I>S</I><SUB>i-1</SUB></SPAN> <tex2html_verbatim_mark>.</DD></DL><P><DIV ALIGN="CENTER"><IMG WIDTH="294" HEIGHT="179" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3799.jpg ALT="\epsfbox{p3799.eps}"> <tex2html_verbatim_mark> </DIV><P>The goal is to find which squares are visible, either entirely or partially, when viewed from above. In the example above, the squares <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>S</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark> have this property. More formally, <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is visible from above if it contains a point <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, such that no square other than <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> intersect the vertical half-line drawn from <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> upwards.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. The first line of each test case is <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3799.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/37/p3799.jpg ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark>, the number of squares. The second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers between 1 to 30, where the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th number is the length of the sides of <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. The input is terminated by a line containing a zero number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line containing the index of the visible squares in the input sequence, in ascending order, separated by blank characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
3 5 1 4
3
2 1 2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 4
1 3

______________________________________________________
3800||||||false||||||
<P>Players in the Hermes sports complex are wearing jerseys imprinted with natural numbers. There are even number of players. During their practice session they were asked to form a circular chain. The players have done so but with a mathematical charm. The instructor Mr. Ramanujan, after taking a round around the player chain, noticed that the sum of any two adjacent jerseys had an interesting property (<SPAN CLASS="textbf"><SPAN CLASS="textit">adjacency constraint</SPAN></SPAN>). That number is divisible by itself and one only. This found to be true both in a clockwise or in an anticlockwise direction. A 6 player ring is illustrated below.<P><DIV ALIGN="CENTER"><IMG WIDTH="307" HEIGHT="345" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3800img1.png ALT="\epsfbox{p3800.eps}"> <tex2html_verbatim_mark></DIV><P>Your job is to automate Mr. Ramanujan's brain to see all possible such patterns, given any <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (Maximum value of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is 16). Captain has jersey #1 and hence obviously the point of beginning. Print all possible formations in ascending numeric ordering e.g. 1 2 5 comes before 1 2 6. Every formation must begin with captain's jersey number. Give priority to clockwise formations i.e. print patterns in clockwise direction and then all patterns of anticlockwise direction. There are no missing numbers on the jerseys. E.g. if the number of players is 6, the jerseys are numbered <SPAN CLASS="MATH">1, 2...6</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input represents the number of test cases <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> (at most 5).<P>The next <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines represent the number of players <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < n \le 16)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3800img1.png ALT="$ \le$">16)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output format is shown as sample below. Each row represents a possible formation satisfying the above adjacency constraint. For each test case, the first line should be the test case number followed by the arranged patterns, one pattern per row. There should be an empty line separating each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
6 
8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
143256 
165234 

2 
12385674 
12583476 
14765832 
16743852
</PRE><P>
______________________________________________________
3801||||||false||||||
<P>Mickie likes snowboarding. That's not very surprising, since snowboarding is really great. The bad thing is that in order to gain speed, the area must slope downwards. Another disadvantage is that when you've reached the bottom of the hill you have to walk up again or wait for the ski-lift.<P>Mickie and his friend Minnie are on a snowboarding adventure. Minnie offers to pay Mickie in thousands of dollars equivalent to the number of points he covers. But she poses a constraint: during his ride he should not choose a point whose height value is co-prime to the current point's height. (Two integers are co-prime if they do not have a common factor e.g. 14 and 15.)<P>Mickie has urgently called you over phone and pleads you to help him in his challenge. He would like to know how long the longest run in an area is. That area is given by a grid of numbers, defining the heights at those points. Look at this example:<P><DIV ALIGN="CENTER"></DIV><PRE>
 7  2  3  4 5 
36 37 38 34 6 
33 44 46 40 7 
24 43 42 41 8 
35 32 31 30 9
</PRE><DIV ALIGN="CENTER"></DIV><P>One can slide down from one point to a connected other one if and only if the height decreases and the heights are not co-prime. One point is connected to another if it's at left, at right, above or below it. In the sample map, a possible slide would be <SPAN CLASS="textbf">36-33-24</SPAN> (start at <SPAN CLASS="textbf">36</SPAN>, end at <SPAN CLASS="textbf">24</SPAN>). Of course if you would go <SPAN CLASS="textbf">46-44-33-24</SPAN> or <SPAN CLASS="textbf">46-38-34-4</SPAN> or <SPAN CLASS="textbf">46-40-34-4</SPAN>, it would be a much longer run. If there are more than one run of equal length, pick the one where the first different point comes earlier in the grid (minimum in x-co-ordinate first, and then in y, assuming that the top left corner is (0,0)). In the case above, we will pick <SPAN CLASS="textbf">46-38-34-4</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>All input comes from standard input. The first line contains the number of test cases <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. Each test case starts with a line containing the name (it's a single string), the number of rows <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and the number of columns <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>. After that follow <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines with <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> numbers each, defining the heights. <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> won't be bigger than 100, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> not bigger than 15 and the heights are always in the range from 2 to 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line to standard output containing the name of the area, a colon, a space and the length of the longest run (maximum points covered) one can slide down in that area. The path taken by Mickie is printed in the next line, each point separated by a blank space from the next.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
disney 5 5 
96 57 56 41 93 
87 58 33 83 77 
49 52 39 76 66 
47 79 36 31 43 
3 12 27 29 2 
midas 4 3
87 86 5 
71 72 57 
64 51 3 
45 31 22
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
disney: 9 
96 87 58 52 39 36 27 12 3 
midas: 4 
86 72 57 3
</PRE><P>
______________________________________________________
3802||||||false||||||

<P>
A popular word puzzle asks you to punctuate the following word sequence so that it makes sense. 

<P>

<P>
<BR>
``James while John had had had had had had had had had had had a better effect on the teacher."

<P>

<P>
<BR>
The answer is: James, while John had had ``had", had had ``had had"; ``had had" had had a better effect on the teacher. 

<P>
Similarly, number sequences that don't make sense by themselves can be made into correct equations by the addition of appropriate arithmetic operators and the = sign. 

<P>
For example, 

<P>

<P>
<BR>
5 7 4 = 3 is more meaningful when written as 

<P>

<P>
<BR>
5 + 7 / 4 = 3. 

<P>

<P>
<BR>
We would like you to write a program to insert appropriate operators (<SPAN CLASS="MATH">+</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH">-</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"></SPAN>
<tex2html_verbatim_mark>) into the integer sequences supplied by us so that each sequence is transformed into a mathematically correct equation. 

<P>
Each number in the input sequence must be used exactly once, but each operator may be used zero to many times. The expression should be read from left to right, with the output of the first operation being input of the second and so on, to calculate the target number. It is possible that no expression can generate the target number. It is also possible that many expressions can generate the target number. In this case, the 'correct' solution will be the one where the operator sequence is in `alphabetic' order, where + comes first, then -, <SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark> and / in that order. E.g. 1 + 1 <SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark> 1 comes before 1 + 1 / 1.

<P>
There are three restrictions on the composition of the mathematical expression:

<P>

<UL>
<LI>the numbers in the expression must appear in the same order as they appear in the input. 
</LI>
<LI>you are only allowed to use / in the expression when the result of the / operator will give a remainder of zero. Division by 0 is not allowed.
</LI>
<LI>you are only allowed to use an operator in the expression if its result after applying that operator is an integer from <!-- MATH
 $(-32000 \ldots +32000)$
 -->
<SPAN CLASS="MATH">(- 32000...+ 32000)</SPAN>
<tex2html_verbatim_mark>. The outer limits of this interval are not allowed.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input has multiple test cases. The first line contains the number of test cases <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>. 

<P>
Each subsequent line contains the number of integers in the sequence <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> nonnegative integers, followed by the target integer. Each integer is separated by a space from the next. Note that <!-- MATH
 $0 < p \le 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>p</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3802img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>. There may be duplicate numbers in the sequence. But all the numbers are less than 32000.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output should contain an expression, including all <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> numbers and <SPAN CLASS="MATH">(<I>p</I> - 1)</SPAN>
<tex2html_verbatim_mark> operators plus the equals sign and the target. Do not include spaces in your expression. If there is no expression possible output ``<TT>NO EXPRESSION</TT>" (without the quotes).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
3 5 7 4 3 
2 1 1 2000 
5 12 2 5 1 2 4
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5+7/4=3 
NO EXPRESSION 
12+2-5-1/2=4
</PRE> 

<P>

______________________________________________________
3803||||||false||||||
<P>One of the greatest epics in Indian history is Mahabharat. In this epic, Shakuni plays a key role by intimidating Dhuryodhana to go against the Pandavas resulting in the Great War. The story that still remains hidden is what causes Shakuni to intimidate Dhuryodhana resulting the down fall of Dhuryodhana. Shakuni himself unfolds the story for us:<P>I was born along with one hundred brothers and enjoyed a huge amount of wealth. Dhuryodhana had an eye over my wealth and wanted to capture it, so he imprisoned me and my brothers. He provided food and water sufficient for only one person. Since, I was the most intelligent of the lot and was keen to take revenge on him, I decided to make sure that I got the food needed to survive. So I framed an idea to get the food.<P>The idea was to form a circle consisting of me and my brothers and then eliminating the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>-th person from the circle stating he will not be eligible for the food. The last person still left in the circle would get the food and water. I always made sure that I got the food and water. Also, I wanted to make sure that none of my brothers recognize the pattern of elimination, so I kept changing the value of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> every day.<P>Assume yourself to be the modern-world Shakuni equipped with computers, write a program to obtain the food for yourself given the number of brothers (<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>) and the elimination number (<SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The standard input consists of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> (at most 5) test cases. First line of the input is the number of test cases. The next <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines each has two numbers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3803img1.png ALT="$ \le$">32000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3803img1.png ALT="$ \le$">32000)</SPAN> <tex2html_verbatim_mark> separated by a space, each corresponding to a single test case. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of brothers and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the elimination value. The first position is numbered ``1".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the position you should take to obtain the food. E.g. for the 23-rd position, output the number <TT>23</TT>. You should have <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines of output, and no blank lines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
41 3 
1000 55
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
31 
63
</PRE><P>
______________________________________________________
3804||||||false||||||

<P>
In this problem, you will compute how many water packets you need to purchase for a trip across the jungle on foot. 

<P>
At your starting location, you can purchase water packets at the general store and you can buy an unlimited amount of fruits available at the general store. The jungle contains trees with edible fruits only in specific locations. At each such location, you can collect as many fruits as you like and you can store water packets for later use. You can also purchase water packets for later use from the store. You will be given the coordinates of the store (starting location), location of trees that have edible fruits, and your destination in a two-dimensional coordinate system where the unit distance is one mile. 

<P>
For each mile that you walk, you must consume one packet of water and one fruit. 

<P>
Assume that these supplies are consumed continuously, so if you walk for a partial mile you will consume partial units of water and fruit. You are unable to walk unless you have supplies of both water and fruit. You must consume the supplies while you are walking, not while you are resting under the tree. Of course, there is a limit to the total amount of water packets and fruits that you can carry. This limit is expressed as your carrying capacity in total units (1 water packet or 1 fruit is 1 unit). At no time can the sum of the water packets and the fruits that you are carrying exceed this capacity. 

<P>
You must compute minimum number of water packets you need to purchase at the store in order to reach the destination. 

<P>
You need not have any water packet or fruit left when you arrive at the destination. Since the general store has only one million water packets available, the amount of water you should buy will be an integer greater than zero and less than or equal to one million.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The first line of input in each trial data set contains <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(2 <n< 20)$
 -->
<SPAN CLASS="MATH">(2 &lt; <I>n</I> &lt; 20)</SPAN>
<tex2html_verbatim_mark>, which is the total number of significant locations in the jungle, followed by an integer that is your total carrying capacity in units of fruits and water packets. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines contain pairs of integers separated by a space that represent the coordinates of the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> significant locations. The first significant location is the store (starting point), where water packets must be purchased; the last significant location is the destination; and the intervening significant locations (if any) are trees with edible fruits. You need not visit any tree with edible fruits unless you find it helpful in reaching your destination, and you need not visit these trees in any particular order. 

<P>
Each test case <SPAN CLASS="MATH"></SPAN>
<tex2html_verbatim_mark> trial is terminated by a pair of zeroes separated by a space, on a line by itself

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each trial, print ``<TT>Trial</TT> <!-- MATH
 $\#trial number$
 -->
<SPAN CLASS="MATH">#<I>trialnumber</I></SPAN>
<tex2html_verbatim_mark><TT>:</TT>" followed by an integer that represents the minimum number of water packets needed for your journey. Use the format shown in the example. If you cannot make it to the destination under the given conditions, print the trial number followed by the word ``<TT>Impossible</TT>". Trailing newline characters at the very end of the output will be ignored. 

<P>
Place a blank line after the output of each test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 100 
10 -20 
-10 5 
30 15 
15 35 
2 100 
0 0 
100 100 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Trial 1: 136 

Trial 2: Impossible
</PRE> 

<P>

______________________________________________________
3805||||||false||||||
<P>Peg solitaire is a classical puzzle (originating in France in the late 17th century) commonly played on a 33-hole cross-shaped board (also called ``the English Board") .In England it is known as ``Solitaire", but in the U.S. most people think of this as a card game so it is usually called ``Peg Solitaire". Other people know it as ``Hi-Q" because a popular version of the game sells under that trade name.<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="971" HEIGHT="639" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3805img1.png ALT="\epsfbox{p3805.eps}"> <tex2html_verbatim_mark></DIV><P>The basic game consists of a cross-shaped board, usually made of wood, together with a set of 32 pegs. To start the game, one fills the board with pegs except for the central hole. A jump consists of jumping one peg over another into an empty spot in the board, removing the peg jumped over from the board. Diagonal jumps are not allowed (in the standard version of the game). The goal is to choose a sequence of jumps and finish with as few pegs as possible, ideally a single peg in the center.<P>Starting with the centermost hole open, players move the pegs by jumping one peg over another, either in a horizontal or vertical direction and removing each peg that is jumped over. The objective for players is to remove as many pegs from the board as possible. This problem involves writing a program that will automatically play Peg-Solitaire so that we can investigate how the game might unfold based on various opening arrangements of pegs.<P>Problem Statement: There is a peg board with the following shape and with holes numbered from 1 to 33 as follows:<P><P><BR><DIV ALIGN="CENTER"></DIV><PRE>
                         1           2           3 
                         4           5           6 
 7           8           9          10          11          12          13 
14          15          16          17          18          19          20 
21          22          23          24          25          26          27
                        28          29          30 
                        31          32          33
</PRE><DIV ALIGN="CENTER"></DIV><P><P><BR>An instance of the game begins with some holes having pegs in them and the rest of the holes being empty. The game proceeds by jumping one peg over another, either horizontally or vertically, with the peg that is jumping landing in an empty hole, and the peg being jumped over being removed from the board. For example, if 9 is empty and 10 and 11 are not, then the peg in 11 can be ``moved" to 9 with the peg in 10 being removed. After this move, 10 and 11 would both be empty but 9 would have a peg in it.<P>Given a specific board configuration your program will pick and model a specific move, over and over, until no more moves are available. Your program will then report the number of holes that still have pegs in them and their positions on the board. At any point during the game there may be more than one possible move available. In such a case always model the move with the target hole of the moving peg as large as possible. If there is more than one move available to the largest possible target hole, then choose from those moves the one with the larger source hole.<P>For example, if the board looks like this, with <TT>X</TT> representing a peg and <TT>O</TT> representing a hole:<P><P><BR><DIV ALIGN="CENTER"></DIV><PRE>
                        O           O           O 
                        O           O           O 
O           O           O           X           O           X           O 
O           O           O           X           O           X           O 
O           O           O           O           X           O           O
                        O           O           O 
                        O           O           O
</PRE><DIV ALIGN="CENTER"></DIV><P><P><BR>then the following jumps would be made:<P><DL COMPACT><DT><SPAN CLASS="textbf">1:</SPAN></DT><DD>from 12 over 19 to 26 (26, 24, and 5 are the only possible targets and 26 is the largest),</DD><DT><SPAN CLASS="textbf">2:</SPAN></DT><DD>from 25 to 27 over 26 (5 ,24 and 27 are the only possible targets and 27 is the largest)</DD><DT><SPAN CLASS="textbf">3:</SPAN></DT><DD>from 10 to 24 over 17 (24 <SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark> 5), and two pegs would be left, one in hole 24 and one in hole 27.</DD></DL><P>Thus 2 pegs at holes 24 and 27 would be reported as the result for this instance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> between 1 and 10 describing how many instances of the game are represented. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines follow describing <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> instances of the game by listing the hole that have pegs in the beginning. Holes are listed in ascending order separated by a single space. A <TT>0</TT> will indicate the end of each sequence of unique number between 1 and 33 that represents an instance of the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There should be <SPAN CLASS="MATH"><I>N</I> + 2</SPAN> <tex2html_verbatim_mark> lines of output. The first line of output will read <TT>Peg-Solitaire OUTPUT</TT>. There will then be one line of output for each instance of the game, reporting the number of the holes that still have pegs in them, then a single space, and then their positions for the final configuration of that instance in ascending order separated by single spaces. The final line of output should read <TT>END OF OUTPUT</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1 4 7 8 10 18 0 
1 4 7 8 10 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Peg-Solitaire OUTPUT 
4 1 10 16 18 
3 1 10 16 
END OF OUTPUT
</PRE><P>
______________________________________________________
3806||||||false||||||

<P>
Baaaam! Another deadly gas bomb explodes in Manhattan's underworld. Rats have taken over the sewage and the city council is doing everything to get the rat population under control. 

<P>
As you know, Manhattan is organized in a regular fashion with streets and avenues arranged like a rectangular grid. Waste water drains run beneath the streets in the same arrangement and the rats have always set up their nests below street intersections. The only viable method to extinguish them is to use gas bombs like the one which has just exploded. However, gas bombs are not only dangerous for rats. The skyscrapers above the explosion point have to be evacuated in advance and so the point of rat attack must be chosen very carefully. The gas bombs used are built by a company called American Catastrophe Management (ACM) and they are sold under the heading of ``smart rat gas". They are smart because â when fired â the gas spreads in a rectangular fashion through the under street canals. The strength of a gas bomb is given by a number d which specifies the rectangular ``radius" of the gas diffusion area. For example, Figure shows what happens when a bomb with <SPAN CLASS="MATH"><I>d</I> = 1</SPAN>
<tex2html_verbatim_mark> explodes.

<P>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p3806.eps}$
 -->
<IMG
 WIDTH="938" HEIGHT="498" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3806img1.png
 ALT="\epsfbox{p3806.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<SPAN  CLASS="textbf">The Problem</SPAN>

<P>

<P>
<BR>
The area of interest consists of a discrete grid of <!-- MATH
 $1025 \times 1025$
 -->
<SPAN CLASS="MATH">1025&#215;1025</SPAN>
<tex2html_verbatim_mark> intersection points. Rat exterminator scouts have given a detailed report on where rat populations of different sizes have built their nests. You are given <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> gas bombs with strengths <!-- MATH
 $d_{1},d_{2},d_{3} \ldots d_{m}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>, <I>d</I><SUB>2</SUB>, <I>d</I><SUB>3</SUB>...<I>d</I><SUB>m</SUB></SPAN>
<tex2html_verbatim_mark> respectively and your task is to find explosion locations for these gas bombs which extinguish the largest number of rats.

<P>
The best position is determined by the following criteria: 

<P>

<UL>
<LI>The sum of all rat population sizes within the diffusion area of the gas bomb (given by <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>) is maximal. 
</LI>
<LI>If there are more than one of these best positions then the location with the ``minimal" position will be chosen. Positions are ordered first by their <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> coordinate and second by their <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> coordinate. 
</LI>
</UL>

<P>
Formally, given a location <!-- MATH
 $(x_{1}, y_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>
<tex2html_verbatim_mark> on the grid, a point <!-- MATH
 $(x_{2}, y_{2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark> is within the diffusion area of a gas bomb with strength d if the following equation holds: 

<P>
<P><!-- MATH
 \begin{displaymath}
max (abs(x_{2} - x_{1}), abs (y_{2} - y_{1})) \le d
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>max</I>(<I>abs</I>(<I>x</I><SUB>2</SUB> - <I>x</I><SUB>1</SUB>), <I>abs</I>(<I>y</I><SUB>2</SUB> - <I>y</I><SUB>1</SUB>))<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3806img1.png
 ALT="$\displaystyle \le$"><I>d</I>
</DIV><P>
<tex2html_verbatim_mark></P> 

<P>
The positions of the bombs must be disjoint . The optimal number (for the same number of rat deaths, the fewer the bombs used the better) of bombs must be used so that the maximum number of rats are killed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line contains the number of scenarios in the input (from standard input). For each scenario the first line contains the number of bombs <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le m \le 50)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3806img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3806img1.png
 ALT="$ \le$">50)</SPAN>
<tex2html_verbatim_mark> and the number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 20000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3806img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3806img1.png
 ALT="$ \le$">20000)</SPAN>
<tex2html_verbatim_mark> of rat populations separated by a blank space. The second line consists of strengths of each bomb separated by a blank space. Then for every rat population there follows a line containing three integers separated by spaces, for the position <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark> and ``size" <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> of the population <!-- MATH
 $(1 \le i \le 255)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3806img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3806img1.png
 ALT="$ \le$">255)</SPAN>
<tex2html_verbatim_mark>. It is guaranteed that position coordinates are valid (i.e., in the range between 0 and 1024) and no position is given more than once.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For every scenario print a line to standard output containing the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> coordinate of the chosen location for the gas bombs, followed by the sum of the rat population sizes which will be extinguished by each bomb used. The three numbers must be separated by single spaces. Each scenario must be separated by a blank line. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 
1 2 
1 
4 4 10 
6 6 20 
2 2 
20 10 
100 1010 20 
20 10 200
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
5 5 30 

0 0 200 
90 1000 20

______________________________________________________
3807||||||false||||||
<P>A Marble Game is played with <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> marbles on a square board. The board is divided into <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> <tex2html_verbatim_mark> unit squares, and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> of those unit squares contain holes. Marbles and holes are numbered from 1 to <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>. The goal of the Marble game is to roll each marble into the hole that has the same number.<P>A game board may contain walls. Each wall is one unit long and stands between two adjacent unit squares. Two squares are considered adjacent if and only if they share a side.<P>At the beginning of the game, all marbles are placed on the board, each in a different square. A ``move" consists of slightly lifting a side of the game board. Then all marbles on the board roll downward toward the opposite side, each one rolling until it meets a wall or drops into an empty hole, or until the next square is already occupied by another marble. Marbles roll subject to the following restrictions:<P><UL><LI>Marbles cannot jump over walls, other marbles, or empty holes. </LI><LI>Marbles cannot leave the board. (The edge of the board is a wall.) </LI><LI>A unit square can contain at most a single marble at any one time. </LI><LI>When a marble moves into a square with a hole, the marble drops into that hole. The hole is then filled, and other marbles can subsequently roll over the hole. A marble in a hole can never leave that hole. </LI></UL><P>The game is over when each marble has dropped into a hole with the corresponding number.<P>The figure below illustrates a solution for a game played on a <SPAN CLASS="MATH">4&#215;4</SPAN> <tex2html_verbatim_mark> board with three blue marbles, three holes and a wall. The solution has five moves: lift the east side, lift the north side, lift the south side, lift the west side, lift the north side.<P>Your program should determine the fewest number of moves to drop all the marbles into the correct holes -- if such a move sequence is possible.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3807.jpg ALT="\epsfbox{p3807.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. The first line of each test case contains three numbers: the size <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3807.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3807.jpg ALT="$ \le$">4)</SPAN> <tex2html_verbatim_mark> of the board, the number <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>M</I> &gt; 0)</SPAN> <tex2html_verbatim_mark> of marbles, and the number <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> of walls. Each of the following <SPAN CLASS="MATH">2<I>M</I></SPAN> <tex2html_verbatim_mark> lines contains two integers. The first integer is a row location and the second is a column location. The first <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> of those lines represent the locations of the marbles, where marble#1 is on the first line, marble#2 on the second, and so on. The last <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> of those lines represent the locations of the holes, with the location of hole#1 coming first, hole#2 coming second, and so on. Finally, the next <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> lines represent the wall locations. Each of those lines contains four integers: the first pair are the row and column of the square on one side of the wall and the second pair are the row and column of the square on the other side of the wall. Rows and columns are numbered <SPAN CLASS="MATH">0..<I>N</I> - 1</SPAN> <tex2html_verbatim_mark>.<P>The input file ends with a line containing three zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (beginning with 1) and the minimal number of moves to win the game. If the game cannot be won, print the word ``<TT>impossible</TT>". Put a blank line after each test case. Use the format of the sample output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3 1
0 1 
1 0 
1 2 
2 3 
2 1 
3 2 
1 1 1 2
3 2 2
0 0 
0 1 
0 2 
2 0 
2 0 1 0
2 0 2 1
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 5 moves 

Case 2: impossible
</PRE><P>
______________________________________________________
3808||||||false||||||
<P>A packet-switching network handles information in small units, breaking long messages into multiple packets before routing. Although each packet may travel along a different path, and the packets comprising a message may arrive at different times or out of order, the receiving computer reassembles the original message correctly.<P>The receiving computer uses a buffer memory to hold packets that arrive out of order. You must write a program that calculates the minimum buffer size in bytes needed to reassemble the incoming messages when the number of messages (<SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>), the number of packets (<SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>), the part of the messages in each packet, the size of each message, and the order of the incoming packets are given.<P>When each packet arrives, it may be placed into the buffer or moved directly to the output area. All packets that are held in the buffer are available to be moved to the output area at any time. A packet is said to ``pass the buffer" when it is moved to the output area. A message is said to ``pass the buffer" when all of its packets have passed the buffer.<P>The packets of any message must be ordered so the data in the sequence of packets that pass the buffer is in order. For example, the packet containing bytes 3 through 5 of a message must pass the buffer before the packet containing bytes 6 through 10 of the same message. Messages can pass the buffer in any order, but all packets from a single message must pass the buffer consecutively and in order (but not necessarily at the same time). Note that unlike actual buffering systems, the process for this problem can look ahead at all incoming packets to make its decisions.<P>The packets consist of data and header. The header contains three numbers: the message number, the starting byte number of data in the packet, and the ending byte number of data in the packet respectively. The first byte number in any message is 1.<P>For example, the figure below shows three messages (with sizes of 10, 20, and 5 bytes) and five packets. The minimum buffer size for this example is 10 bytes. As they arrive, packet #1 and packet #2 are stored in the buffer. They occupy 10 bytes. Then packet #3 passes the buffer directly. Packet #4 passes the buffer directly and then packet #2 exits the buffer. Finally, packet #5 passes the buffer directly and packet #1 exits the buffer.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3808.jpg ALT="\epsfbox{p3808.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3808.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3808.jpg ALT="$ \le$">5)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3808.jpg ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3808.jpg ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. The second line contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers that are the sizes of messages in bytes; the first number denotes the size of message #1, the second number denotes the size of message #2, and so on. Each of the following <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines describes a packet with three integers: the message number and the starting and ending byte numbers of data in the packet. No packet contains more 64 bytes of data.<P>The last test case is followed by a line containing two zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by the minimum buffer size in bytes required to reassemble the original messages. Put a blank line after the output for each test case. Use the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 
5 5 5 
1 1 5 
2 1 5 
3 1 5 
3 5 
10 20 5 
2 16 20 
1 6 10 
3 1 5 
1 1 5 
2 1 15 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 0 

Case 2: 10
</PRE><P>
______________________________________________________
3809||||||false||||||
<P>You have agreed to help a roofer estimate the amount of material required to protect the surface of a roof from sun damage by computing the surface area of the roof that can be seen when viewed from directly above.<P>The geometry of a roof is defined by the vertices of the triangles that enclose the plane surfaces of the roof. The <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of a vertex are determined from an aerial view of the roof, and the <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> coordinate is the height of the vertex above the ground, assuming that the ground is level (which we do). For example, a line segment with vertices (10,10,10) and (10,20,10) is parallel to the ground, and is 10 units long. A line segment with vertices (10,10,10) and (10,18,16) slopes from 10 units to 16 units above the ground; in the aerial view of the roof it is 8 units long, but the actual length is 10 units.<P>In an aerial view of a roof, one region of the roof can sometimes obscure a lower region. Only visible portions of the roof should be included in the total. For example, suppose you view a two-story building with a second floor that is smaller than the first floor. Obviously the area of the second floor's roof must be included in the total, but the visible surface area of the first floor's roof will not include the area directly underneath the second floor's roof.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases corresponding to roof descriptions. A test case begins with a line containing integers <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3809img1.png ALT="$ \le$"><I>V</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3809img1.png ALT="$ \le$">300)</SPAN> <tex2html_verbatim_mark>, which is the number of vertices, and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3809img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3809img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, which is the number of triangles. Each of the next <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> lines contains the coordinates <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> of a vertex. The test case concludes with <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> triangle descriptions, each consisting of the three vertex indices describing the vertices of a roof triangle. Vertices are numbered sequentially in the order they appear in the input, starting with 1.<P>All coordinates are positive integers no greater than 100. No roof triangles are degenerate, and all pairs of roof triangles have disjoint interiors -- that is, they may touch but they will not overlap or intersect.<P>The last test case is followed by a line containing two zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by the total visible surface area of the roof, accurate to two fractional digits. Use the sample output format and print a blank line after each case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 2 
10 10 10 
10 20 10 
20 10 10 
10 10 20 
10 20 20
20 20 20
1 2 3 
4 5 6 
3 1 
10 10 
10 18 16 
20 10 10 
1 2 3 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT> </H2><P><PRE>
Case 1: 75.00 

Case 2: 50.00
</PRE><P>
______________________________________________________
3810||||||false||||||
<P>The Aqua Container Management company manages water storage facilities. They are considering a system of storing water in a series of connected vertical tanks. Each tank has a horizontal cross-sectional area of one square meter, but the tanks have different heights. The base of each tank is at ground level. Each tank is connected by a pipe to the previous tank in the series and by another pipe to the next tank in the series. The pipes connecting the tanks are level and are at increasing heights (that is, the pipe connecting tank <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to tank <SPAN CLASS="MATH"><I>i</I> + 1</SPAN> <tex2html_verbatim_mark> is at a higher level than the pipe connecting tank <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to tank <SPAN CLASS="MATH"><I>i</I> - 1</SPAN> <tex2html_verbatim_mark>.) Tank 1 is open so that air and water can flow into it freely at the top. All the other tanks are closed so that air and water can flow in and out only through the connecting pipes. The connecting pipes are large enough that water and air can flow through them freely and simultaneously but small enough that their dimensions can be ignored in this problem.<P>The series of tanks is filled by pouring water slowly into the top of tank 1, continuing until the water level reaches the top of tank 1. As the water level rises above the connecting pipes, water flows among the tanks.<P>Aqua Container Management needs a program to compute the cubic meters of water that can be poured into the series of tanks before the water level reaches the top of tank 1.<P>The figure below illustrates a simple case involving only two tanks. After the filling procedure is completed, the air in the upper part of the second tank is compressed (its air pressure is greater than one atmosphere), so the water level in the second tank is lower than the water level in the first tank.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3810.jpg ALT="\epsfbox{p3810.eps}"> <tex2html_verbatim_mark></DIV><P>The following physical principles are helpful in solving this problem (some of these are approximations that are acceptable for the purposes of this problem):<P><UL><LI>Water flows downhill. </LI><LI>In an open space, the air pressure is equal to one atmosphere. </LI><LI>Air is compressible (the volume occupied by a given amount of air depends on pressure). Water is not compressible (the volume occupied by a given amount of water is constant, independent of pressure). </LI><LI>Air pressure is the same everywhere within a closed space. If the volume of the closed space changes, the product of the volume and the air pressure within the space remains constant. For example, suppose an enclosed airspace has an initial volume <SPAN CLASS="MATH"><I>V</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and pressure <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>. If the volume of the airspace changes to <SPAN CLASS="MATH"><I>V</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, then the new pressure <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> satisfies <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB><I>V</I><SUB>1</SUB> = <I>P</I><SUB>2</SUB><I>V</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. </LI><LI>In a column of water below an airspace, the water pressure at a level <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> meters below the water surface is equal to the air pressure at the surface plus <SPAN CLASS="MATH">0.097<SUP> . </SUP><I>D</I></SPAN> <tex2html_verbatim_mark> atmospheres. This is true regardless of whether the airspace is open or enclosed. </LI><LI>In a connected body of water (for example, when two or more tanks are connected by pipes below the water line), the water pressure is constant at any given level. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases representing different series of water tanks. Each test case has three lines of data. The first line contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3810.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3810.jpg ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> which is the number of tanks in the test case. The second line contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> positive floating point numbers that are the heights, in meters, of tanks 1 through <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. The third line contains <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> floating point numbers. On this line, the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>th number represents the height above the ground of the pipe that connects tank <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and tank <SPAN CLASS="MATH"><I>k</I> + 1</SPAN> <tex2html_verbatim_mark>. The numbers on the third line are increasing (each number is greater than the preceding number).<P>The last test case is followed by a line containing the integer zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by the amount of water, in cubic meters, that can be poured into tank 1 before the water level reaches the top of tank 1. Print the results with three digits to the right of the decimal point.<P>Print a blank line after the output for each test case. Use the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
10.0 8.0 
4.0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 15.260
</PRE><P>
______________________________________________________
3811||||||false||||||

<P>
Curses! A handsome spy has somehow escaped from your elaborate deathtrap, overpowered your guards, and stolen your secret world domination plans. Now he is running loose in your volcano base, risking your entire evil operation. He must be stopped before he escapes! 

<P>
Fortunately, you are watching the spy's progress from your secret control room, and you have planned for just such an eventuality. Your base consists of a complicated network of rooms connected by non-intersecting tunnels. Every room has a closed-circuit camera in it (allowing you to track the spy wherever he goes), and every tunnel has a small explosive charge in it, powerful enough to permanently collapse it. The spy is too quick to be caught in a collapse, so you'll have to strategically collapse tunnels to prevent him from traveling from his initial room to the outside of your base. 

<P>
Damage to your base will be expensive to repair, so you'd like to ruin as few tunnels as possible. Find a strategy that minimizes the number of tunnels you'll need to collapse, no matter how clever the spy is. To be safe, you'll have to assume that the spy knows all about your tunnel system. Your main advantage is the fact that you can collapse tunnels whenever you like, based on your observations as the spy moves through the tunnels.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of several test cases. Each test case begins with a line containing integers <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le R \le 50)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3811img1.png
 ALT="$ \le$"><I>R</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3811img1.png
 ALT="$ \le$">50)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le T \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3811img1.png
 ALT="$ \le$"><I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3811img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>, which are the number of rooms and tunnels in your base respectively. Rooms are numbered from 1 to <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> lines follow, each with two integers <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le x,y \le R)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3811img1.png
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3811img1.png
 ALT="$ \le$"><I>R</I>)</SPAN>
<tex2html_verbatim_mark>, which are the room numbers on either end of a tunnel; a 0 indicates that the tunnel connects to the outside. More than one tunnel may connect a pair of rooms. 

<P>
The spy always starts out in room 1. Input is terminated by a line containing two zeros.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print a line containing the test case number (beginning with 1) followed by the minimum number of tunnels that must be collapsed, in the worst case. Use the sample output format and print a blank line after each test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 6 
1 2 
1 3 
2 4 
3 4 
4 0 
4 0 
4 6 
1 2 
1 3 
1 4 
2 0 
3 0 
4 0 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 2 

Case 2: 2
</pre>

<p>

______________________________________________________
3812||||||false||||||
<P>Your chief judge is getting long in the tooth and it is getting increasingly difficult for him to read through the densely-written messages of complaints about the problems and scores. The chief judge prefers to have more and uniform spacing between the words, and you have been drafted to write a program to format lines of text accordingly.<P>Your task is to write a program to read a number of lines of text and format each line independently such that:<P><OL><LI>successive words on a formatted line are separated by <EM>exactly</EM> two blank spaces, and </LI><LI>words are NOT split between lines, and </LI><LI>width of the formatted text does not exceed a specified value. </LI></OL><P>Leading and trailing blank spaces on each given line should be ignored.<P>As an example:<P><P><BR><TABLE COLS=1 BORDER FRAME=BOX RULES=GROUPS><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Your chief judge is geting long in the tooth.</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Have a nice day.</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Your chief judge</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>is geting long in</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>the tooth.</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Have a nice day.</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>01234567890123456789</TT></TD></TR></TBODY></TABLE><P><P><BR>The first input line is formatted into three (3) lines of width bounded by 20 places, and words separated by two blank spaces in each line. The second input line is formatted independently on the fourth output line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem starts with an integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>K</I> &gt; 0</SPAN> <tex2html_verbatim_mark>, that represents the number of messages. The number <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is given on a separate line followed by a description of the <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> messages. The description of each message starts with a line that contains two integers. The first integer <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>W</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3812img1.png ALT="$ \ge$">20</SPAN> <tex2html_verbatim_mark>, represents the desired width of the formatted text, and the second integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I> &gt; 0</SPAN> <tex2html_verbatim_mark>, represents the number of lines in the message. A single blank space separates the two integers. The message, which consists of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, follows with each line consisting of a sequence of one or more words separated by blank spaces. The length of each word is less than or equal to <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>. That is, a word like ``supercalifragilistic-expialidocious" is only to be expected as part of the input if <SPAN CLASS="MATH"><I>W</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3812img1.png ALT="$ \ge$">35</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each message the output consists of one line. The line starts with the message number (the first message being ``<TT>Message 1</TT>"), followed by a ``<TT>: </TT>" (colon followed by space), as shown in the Sample Output below. This is followed by the number of lines that the formatted text would occupy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
20 1
Your chief judge is geting long in the tooth.
30 2
For each message the output consists of one line.
The chief judge now prefers to have more and uniform spacing
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Message 1: 3
Message 2: 6
</PRE><P>
______________________________________________________
3813||||||false||||||

<P>
Executive of the ACM (Australian Crikey Masters) club has recently decided to switch into a new rating system in their tournaments. The new rating system is based on a combination of match result, the players' rating, the pieces that remain on the board at the end of the game, as well as a handicap for the white player's advantage for playing first (Just in case you are curious about the game of Crikey. It is a two player board game that uses black and white pieces. The list of rules is lengthy and sometimes vague. One day I shall list them.). But it is complex and requires a lot of time to calculate in a tournament with a large number of participants. A task that must be completed between matches as the result of each match changes the players' ratings. The executive wants to speed-up the process of updating the players' ratings between matches through automation and you have been asked to implement this new rating system. 

<P>
I shall now explain the updating process along with an example of a game between Alice and Bob, whose current club ratings happen to be 76.91 and 76.36 respectively in the following steps: 

<P>

<OL>
<LI>Alice, who is scheduled to play white, will be treated as though she is three (3) points stronger than her current rating. This gives Alice a rating of 79.91 against Bob's rating of 76.36, and thus a rating gap of 3.55 in favor of Alice. The rating gap is defined as the higher-rated player's rating minus the lower-rated player's rating. 
</LI>
<LI>Calculate core exchange CE as ``rating gap / 10" (rounded to 2 decimals), which is 0.355 (rounded to 0.36) in Alice vs Bob game. In case you have forgotten, the digits 5 to 9 are rounded up and the digits 1 to 4 are rounded down. 
</LI>
<LI>Calculate the rating points exchange (RPE) based on the match result as follows: 
<DL COMPACT>
<DT>a.</DT>
<DD>If the player with the higher rating (in this case, Alice) wins, then the RPE is calculated as ``1 - CE". The winner's rating will go up by the RPE (in this case 0.64) and loser's rating down by the RPE.
</DD>
<DT>b.</DT>
<DD>If the player with the lower rating (in this case, Bob) wins, then the RPE is calculated as ``1 + CE". The loser's rating will go down by the RPE (in this case 1.36) and the winner's rating will go up by the RPE. 
</DD>
<DT>c.</DT>
<DD>If the game is drawn, then the RPE is calculated as ``CE". The higher-rated player's rating (in this case Alice's rating) will go down by the RPE (in this case 0.36) and the lower-rated player's rating will go up by the RPE. If both players have the same rating (after applying the handicap rule), then their ratings will not change. 
</DD>
</DL>
</LI>
<LI>However if the winning side is left with crikey pieces of total value less than those of the losing side, then the RPE calculated above is then doubled; that is multiplied by 2. In our example, the RPE will be calculated as 2.72 (1.36 <SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark> 2) in the case of Bob winning the game with the value of his remaining pieces less than those of Alice. If the game is drawn, then this rule does not apply. 
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input contains a single integer between 1 and 1000, inclusive, which is the number of tournaments that follow. The description of each tournament consists of ``<SPAN CLASS="MATH"><I>n</I> + <I>m</I> + 1</SPAN>
<tex2html_verbatim_mark>" lines: 

<P>

<OL>
<LI>The first line consists of two integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> that identify the number of players and the number of games. The value of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is between 2 and 500, inclusive and the value of <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> is between 1 and 500, inclusive. The integers are separated by a single space. 
</LI>
<LI>Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines consists of a string (with no blank spaces) that represents the player's name followed by a floating point number with 2 digits after the decimal point that represents the player's rating. The name of a player is a string of less than or equal to ten (10) lower-case letters. 
</LI>
<LI>Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines contains a description of a single game in the form of three (3) strings followed by two (2) integers that are separated by single spaces. The first string is the name of the player playing white, the third string is the white player's result (lost, drew, or won), and the first integer is the total value of the white player's pieces at the end of the game. The second string is the name of the player playing black, and the second integer is the total value of the black player's pieces at the end of the game. 
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each tournament the output starts with a line that contains the tournament number (the first being ``<TT>Ratings after Tournament 1</TT>"), followed by a ``<TT>:</TT>", as shown in the Sample Output below, and then followed by a sequence of players' names and their ratings sorted in decreasing order of their final ratings. Players with the same rating must be sorted in decreasing alphabetic order.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 
2 1 
alice 76.91 
bob 76.36 
alice bob lost 20 15 
2 2 
alice 55.55 
bob 55.55 
alice bob drew 10 30 
bob alice drew 20 20 
2 1 
alice 94.26 
bob 96.00 
alice bob won 10 10 
3 2 
alice 52.55 
bob 55.55 
fred 80.00 
alice bob drew 10 30 
fred fred lost 27 50
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Ratings after Tournament 1: 
bob 79.08 
alice 74.19 
Ratings after Tournament 2: 
alice 55.61 
bob 55.49 
Ratings after Tournament 3: 
bob 95.13 
alice 95.13 
Ratings after Tournament 4: 
fred 80.00 
bob 55.55 
alice 52.55
</PRE>

<P>

______________________________________________________
3814||||||false||||||
<P>An integer number is said to be <SPAN CLASS="textbf">self-divisible</SPAN> if each digit divides the number formed by all digits up to and including that digit evenly. If you find yourself puzzled by the previous sentence, you should not worry. You are not alone. I needed to scribble few examples to understand it myself.<P>Here are few of them:<P><DL COMPACT><DT>1)</DT><DD>213 is a self-divisible number because<P>2 divides 2, 1 divides 21, and 3 divides 213.<P></DD><DT>2)</DT><DD>201 is not a self-divisible number because<P>2 divides 2, but 0 does not divide any number.<P></DD><DT>3)</DT><DD>2534 is not a self-divisible number because<P>2 divides 2, 5 divides 25, but 3 does not divide 253.</DD></DL><P>Your task is to write a program to count the number of self-divisible numbers in a selected range. As an example, for the range of integers between 7 and 15, where<P><UL><LI>7, 8, 9, 11, 12, and 15 are self-divisible </LI><LI>10 is not self-divisible because it contains a zero, which cannot divide any number, and </LI><LI>13 and 14 are not self-divisible because the 2nd digit in each number does not divide it. </LI></UL><P>your program must calculate a count of 6.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that represents the number of cases, <SPAN CLASS="MATH"><I>N</I> &gt; 0</SPAN> <tex2html_verbatim_mark>, on a separate line followed by a description of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> cases. Each case is described on a separate line by two positive integers <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is less than or equal to <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>, that represent the start and finish values of a range of integers. The two numbers are separated by a single blank space as shown in the Sample Input below. Each of the integers <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> consists of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> digits, <!-- MATH
 $0 < K < 400$
 --><SPAN CLASS="MATH">0 &lt; <I>K</I> &lt; 400</SPAN> <tex2html_verbatim_mark>, and the number of self-divisible numbers in the range between each pair is less than 1000000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, the output consists of one line. The line starts with the case number starting with the value of one (1), followed by a ``<TT>:</TT>", as shown in the Sample Output below, and then followed by the number of self-divisible numbers in the range.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
3 5 
7 15 
2222222222222222222222 2222222222222222222224 
222222222222222222222 222222222222222222224 
222222 2222222
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 3 
Case 2: 6 
Case 3: 3 
Case 4: 2 
Case 5: 34865
</PRE><P>
______________________________________________________
3815||||||false||||||

<P>
Darts (Some historical records suggest that the first standard dartboards were the bottoms of wine casks, hence the game's original name of ``butts".) is a very popular game in which darts are thrown at a circular target (<SPAN  CLASS="textit">dart board</SPAN>) hung on a wall. Dart boards are usually made of sisal fibers or boar bristles, low quality boards are sometimes made of paper. A regulation board is 45.72 cm in diameter, and is divided into sectors. Each sector is lined with metal wire. The numbers indicating the various scores of sectors on the dart board are normally made of wire, especially on tournament-quality boards, but may be printed on the board instead. In the standard game, the dart board is hung so that the <SPAN  CLASS="textit">bulls-eye</SPAN> is 1.73 m from the floor, eye-level for a six foot person. The <SPAN  CLASS="textit">oche</SPAN>, the line behind which the player must stand, is 2.37 m from the face of the board. When playing darts players often aim at the high scoring sectors, but for ordinary players it is hard to land a dart on the desired sector. The risk of aiming at a sector can thus be measured by the difference between the scores of adjacent sectors, where two sectors are said to be adjacent if they share an edge or an arc. A large such difference increases the risk and makes the game more challenging. The total risk of a dart board is the sum over the risks between all adjacent sectors. We have been asked by the sponsor of a programming competition to design a new, and challenging, dart board to occupy the touchy coaches during the contest.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3815a.eps}$
 -->
<IMG
 WIDTH="361" HEIGHT="355" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3815a.png
 ALT="\epsfbox{p3815a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The new dart board design consists of a circle that is divided into <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> sectors, <SPAN CLASS="MATH"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3815a.png
 ALT="$ \ge$">3</SPAN>
<tex2html_verbatim_mark>, by lines running from the centre of the circle to its perimeter and a smaller concentric circle that subdivides each sector into two areas: as shown in the sketch for <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> equal to three (3). 

<P>
Your task is to write a program to read ``<SPAN CLASS="MATH">2<I>N</I></SPAN>
<tex2html_verbatim_mark>" positive integer values and assign them to the ``<SPAN CLASS="MATH">2<I>N</I></SPAN>
<tex2html_verbatim_mark>" areas of the new dart board design such that the total risk is maximized. An example of such an assignment is:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3815b.eps}$
 -->
<IMG
 WIDTH="754" HEIGHT="701" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3815a.png
 ALT="\epsfbox{p3815b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The total risk of this dart board design with ``6" areas is 59.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The first line of the input contains a single integer between 1 and 1000, inclusive, which is the number of dart boards that follow. The description of each dart board consists of two lines: 

<P>

<OL>
<LI>The first line consists of an integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $300 \ge N \ge 3$
 -->
<SPAN CLASS="MATH">300<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3815a.png
 ALT="$ \ge$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3815a.png
 ALT="$ \ge$">3</SPAN>
<tex2html_verbatim_mark>, which identifies the number of sectors on the board. 
</LI>
<LI>The second line consists of ``<SPAN CLASS="MATH">2<I>N</I></SPAN>
<tex2html_verbatim_mark>" positive integers, separated by single spaces, which represent the scores. Each integer is less than or equal to 10000.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each dart board the output is an integer, on a separate line, which represents the maximum risk of the board.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 
3 
2 3 5 7 11 13 
4 
2 3 5 7 17 19 23 29 
8 
2 6 7 3 2 4 99 30 28 56 74 1 35 10 10 48 
7 
2 6 7 3 2 4 99 30 28 74 35 10 10 48
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
59 
213 
1035 
870
</PRE>

<P>

______________________________________________________
3816||||||false||||||
<P>A skyline is the outline formed by a group of buildings against the sky. The ACM city in Second Life, which has been built with a beautiful skyline that's visible to anyone that approaches it, sold the rights to place advertisement at the approaches to the city to a company as long as it does so while preserving the shape of the city's skyline. The company wants to accept all requests for advertising that are of rectangular shape and can be fully placed, with sides parallel to edges of the skyline as shown shaded in the example below, within the interior of the skyline.<P>Each skyline of the ACM city is formed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> buildings, all with a width of one (1) but with different heights. The height of each building is between 0 and 1000, inclusive and the number of buildings <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is between 1 and 400, inclusive. The example below shows a skyline with six (6) buildings, and an advertisement of size 3 by 5 (shown in gray) placed parallel to the sides of the skyline. Note that an advertisement may be rotated by <SPAN CLASS="MATH">90<SUP>o</SUP></SPAN> <tex2html_verbatim_mark> so that it can fit into the skyline. That is, advertisement of size 5 by 3 can be placed within the skyline by rotating it first. It is ``Second Life" after all.<P><DIV ALIGN="CENTER"><IMG WIDTH="268" HEIGHT="273" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3816.png ALT="\epsfbox{p3816.eps}"> <tex2html_verbatim_mark></DIV><P>Your task is to write a program to read the descriptions of a number of skylines and advertising requests, and decide for each request whether it should be accepted or rejected. Each request is to be checked independently as only one advertisement will be displayed at any time.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a single integer <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> between 1 and 1000, inclusive, which is the number of cases that follow. Each case starts with a description of the skyline of the city from one approach that consists of two lines:<P><OL><LI>The first line contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3816.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3816.png ALT="$ \le$">400</SPAN> <tex2html_verbatim_mark>, that is the number of buildings in the skyline </LI><LI>The second line contains the heights of the buildings </LI></OL><P>followed by a sequence of advertising requests. Each request consists of two integers on a single line, separated by a single space, which describe the length of the two sides of the rectangle that contains the advertisement. Both lengths are between 1 and 1000, inclusive. A request of two zeros separated by a single space (<TT>0 0</TT>) terminates the case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each skyline the output starts with a line that contains the case number starting with the value of one (1), followed by a ``<TT>:</TT>", as shown in the Sample Output below, and then followed by a sequence of decisions of ``<TT>Accept</TT>" or ``<TT>Reject</TT>", on a separate line, for each request.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
6 
3 6 5 6 2 4 
3 5 
2 6 
8 1 
0 0 
7 
5 0 8 0 3 6 4 
3 4 
4 2 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
Accept 
Accept 
Reject 
Case 2: 
Reject 
Accept
</PRE><P>
______________________________________________________
3817||||||false||||||
<P><IMG WIDTH="74" HEIGHT="75" ALIGN="left" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3817.png ALT="\epsfbox{p3816.eps}"> Jeremy is not known for his organizational skills, but he is now determined to change. Jeremy's plan is to place notes around the house to remind him of tasks to be done and of the proper ways to do them. Jeremy's plan also includes encrypting the messages so that his parents (<SPAN CLASS="textit">who don't understand anything!</SPAN>) do not nag him, but in a simple way so that he can recover the original message easily.<P><P><BR>Jeremy's encryption scheme consists of two steps:<P><OL><LI>Enter the message, of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> characters, which includes the spaces between words, into a spiral that curls inwards in a clockwise direction, starting at the top-left corner of a square. The width and height of the square enclosing the spiral are chosen to be equal to the square root of <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is the smallest perfect square larger than or equal to <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is strictly less than <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, then the remaining locations in the square are filled with the character `<TT>$</TT>'. </LI><LI>Write the encrypted note by writing the characters one row at a time starting with the top row. </LI></OL><P>As an example, for the following message of 33 characters<P><P><BR><TT>abcd fgh jklmn pqrstu wxyz1 34567</TT><P><P><BR>Jeremy writes the following note:<P><P><BR><TT>abcd ftu wxgs67$yhr5$$z q43 1jp nmlk</TT><P><P><BR>based on entering his original message in a square of 6 rows and 6 columns as follows:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=6 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>f</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>u</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>w</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>x</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>g</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>s</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>$</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>y</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>h</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>r</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>$</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>$</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>z</TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>q</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>j</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>p</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>n</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>m</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>l</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>k</TD></TR></TBODY></TABLE></DIV><P><P><BR>Your task is to write a program to encrypt Jeremy's messages with the hope that he will acquire some organizational skills, in peace. In case you have forgotten, let me remind you that a number <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is a perfect square if there exists a positive integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, such that <SPAN CLASS="MATH"><I>K</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> equals <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>. For example, 16 is a perfect square but 18 is not a perfect square.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to this problem starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that represents the number of messages, <SPAN CLASS="MATH"><I>N</I> &gt; 0</SPAN> <tex2html_verbatim_mark>, on a separate line followed by a sequence of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> messages. Each message consists of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> characters, <SPAN CLASS="MATH">1000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3817.png ALT="$ \ge$"><I>M</I> &gt; 0</SPAN> <tex2html_verbatim_mark>, on a single line with no blank spaces at the end.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each message, the output consists of one line that contains the note with an encrypted message.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
Fold the clean laundry pile 
make a decision about the may-be laundry pile 
Make the dirty laundry pile invisible 
012345678901234567890123456789012345 
01234567890123456 890123456   012345
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Fold tdry phn$$$ieu$$$l a$$$ecl nael 
make a he maydty pi-e r$$lbctd$$eeiunual soba noi 
Make thpile ie $$$$n y$$$$vdr$$$$iidelbisrnual yt 
012345901236812347705458698769543210 
012345901236812347 054586   69543210
</PRE><P>
______________________________________________________
3818||||||false||||||
<P>As the sole employee in a pharmaceutical company with programming exposure, you have been asked to oversee the process of cutting DNA strands into smaller pieces, which has been outsourced to a company by the name of <SPAN CLASS="textit">Chopper!</SPAN>, and check for any attempt of over charging.<P><P><BR>DNA (<SPAN CLASS="textbf">Deoxyribonucleic acid</SPAN>) strand is a long polymer of simple units called nucleotides, with a backbone made of sugars and phosphate atoms joined by ester bonds. Attached to each sugar is one of four types of molecules called bases. It is the sequence of these four bases along the backbone that encodes information needed to construct other components such as proteins and RNA molecules. The cost of cutting a DNA strand, with today's technology, is equal to the length of the strand, where a ``cut" refers to splitting a strand into two pieces. The cost of a single cut does not depend on the location where the cut is made. <SPAN CLASS="textit">Chopper!</SPAN> claims to have developed the world-best-practice in sequencing the cuts of a DNA strand and to deliver the most savings to its customers.<P><P><BR>Your task is to write a program to process the next batch of DNA strands and calculate the best price for slicing each of them into smaller strands of integer lengths. For each DNA strand you are given its length as an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3818img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>, and a list of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3818img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3818img1.png ALT="$ \le$">15</SPAN> <tex2html_verbatim_mark>, strands' lengths to be produced. The sum of the <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> integers equals the original strand length <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR>The total cost of slicing a given strand depends on the choice of locations and the order of the <SPAN CLASS="MATH"><I>M</I> - 1</SPAN> <tex2html_verbatim_mark> required cuts. As an example, for a given list of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> (=4) lengths 2, 2, 5 and 5 and a DNA strand of length 14, we can:<P><UL><LI>first cut the strand in half then twice split a 2 and 5 from the remaining 7s for a cost of 28 (=14 + 7 + 7), or </LI><LI>first cut off a 5 from the end of the strand, then another 5, then split the remaining 4 in half for a cost of 27 (= 14 + 9 + 4). </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains information about a number of DNA strands to be processed. The information for each strand consists of two lines:<P><OL><LI>The first line consists of the two integers <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3818img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3818img1.png ALT="$ \le$">15</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3818img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3818img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>) that identify the number of required smaller strands and the length of DNA strand, respectively. </LI><LI>The second consists of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> positive integers (separated by blank spaces) that sum to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. </LI></OL><P>The input is terminated by a line of two zeros (<TT>0 0</TT>) for which no output is to be produced.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input DNA strand the output is an integer, on a separate line, which represents the minimum cost for slicing the strand into the given list.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 14 
2 5 2 5 
5 32 
3 3 5 5 16 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
27 
64
</PRE><P>
______________________________________________________
3819||||||false||||||
<P>You must be familiar with binary trees and all their operations, but this problem deals with a less popular structure, which I shall call <SPAN CLASS="textit">myTree</SPAN>. There are three possible organizations of a <SPAN CLASS="textit">myTree</SPAN>:<P><OL><LI>an empty tree. That is, a tree with no nodes. </LI><LI>a tree whose root node has a single data item, say K, and two children. Each of its two children is a <SPAN CLASS="textit">myTree</SPAN>. Any values in the left subtree are less than or equal to K, and any values in the right subtree are larger than K. </LI><LI>a tree whose root node has two data items, say <SPAN CLASS="MATH"><I>K</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> , and three children. <!-- MATH
 $K_{1} < K_{2}$
 --><SPAN CLASS="MATH"><I>K</I><SUB>1</SUB> &lt; <I>K</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> . Each of its three children is a <SPAN CLASS="textit">myTree</SPAN>. Any values in the left subtree are less than or equal to <SPAN CLASS="MATH"><I>K</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, any values in the middle subtree are larger than <SPAN CLASS="MATH"><I>K</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and smaller than or equal to <SPAN CLASS="MATH"><I>K</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, and any values in the right subtree are larger than <SPAN CLASS="MATH"><I>K</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. </LI></OL><P>All internal (non-terminal) nodes have two or three children, although some may be empty. One way to represent such a tree is to use level-order traversal, starting at the root node, with the content of each node enclosed in parentheses. An empty tree is represented by a pair of parentheses that encloses nothing. The following figure demonstrates an example of such a tree, along with its representation, with values in the nodes being uppercase characters chosen in the range of ``A" to ``Z", inclusive.<P><DIV ALIGN="CENTER"><IMG WIDTH="825" HEIGHT="351" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3819.png ALT="\epsfbox{p3819.eps}"> <tex2html_verbatim_mark></DIV><P>A lecturer of ``Data Structures 101" likes to test her students understanding of the <SPAN CLASS="textit">myTree</SPAN> structure by asking them to identify all possible ways to assign a missing value in a given <SPAN CLASS="textit">myTree</SPAN>.<P>Examples of such a question would be:<P><OL><LI>a tree ``<code>(M R) (C) (N P) (? U) () () () () () () () ()</code>", for which the answer should be the letters ``<TT>S</TT>" and ``<TT>T</TT>". </LI><LI>a tree ``<code>(M R) (X) (N O) (? U) () () () () () () () ()</code>", for which the answer should be ``<TT>This is not a myTree</TT>". The reason is that <SPAN CLASS="MATH"><I>X</I> &gt; <I>M</I></SPAN> <tex2html_verbatim_mark>. </LI><LI>a tree ``<code>(M R) (N O) (? U)</code>", for which the answer should be ``<TT>This is not a myTree</TT>". The reason is that nodes with two values should have three children in a myTree structure, which is violated in this question. </LI></OL><P>Your task is to write a program to answer such a question.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains descriptions of a number of <SPAN CLASS="textit">myTree structures</SPAN> to be processed. The information for each tree is given in a single line as a series of properly matched parentheses. Each pair of matched parentheses encloses zero, one, or two characters selected from uppercase letters in the range of ``<TT>A</TT>" to ``<TT>Z</TT>" and ``<TT>?</TT>". Each line contains exactly one ``<TT>?</TT>". The selected characters and parentheses are separated by single spaces.<P>The input is terminated by a line of a set of matched parentheses, which encloses a zero, for which no output is to be produced.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input tree the output is a single line with:<P><OL><LI>a listing of possible uppercase letters sorted in increasing order that can replace the ``<TT>?</TT>" in the given tree, or </LI><LI>the string ``<TT>This is not a myTree</TT>", if the given data does not conform to the given specifications. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
(M R) (C) (N P) (? U) () () () () () () () ()
(M R) (X) (N P) (? U)
(M R) (C) (? U)
(M R) (C) (N P) (? X) (A) () () () () (S) (U) () () () () () () ()
(0)
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
S T 
This is not a myTree 
This is not a myTree 
S T
</PRE><P>
______________________________________________________
3820||||||false||||||
<P>Mr. Thompson keeps the pupils in his class well behaved by dishing out a challenging class-quiz when they get rowdy. The quizzes are usually created as a variation of a familiar problem, cunning eh! He has recently used a typical <SPAN CLASS="MATH">1<SUP>st</SUP></SPAN> <tex2html_verbatim_mark> grade exercise in which pupils are given a sheet of paper with numbers scattered on it and a special number inside a box, as shown,<P><DIV ALIGN="CENTER"><IMG WIDTH="800" HEIGHT="455" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3820a.png ALT="\epsfbox{p3820a.eps}"> <tex2html_verbatim_mark></DIV><P>and are asked to connect pairs whose sum is equal to the number in the box with each number outside the box to be used at most once. A possible perfect answer is shown in colors. Mr. Thompson's quiz looks similar except that a pair of numbers can be connected if their sum equals any of the numbers in the box,<P><DIV ALIGN="CENTER"><IMG WIDTH="925" HEIGHT="287" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3820a.png ALT="\epsfbox{p3820b.eps}"> <tex2html_verbatim_mark></DIV><P>and the challenge is to find the largest number of possible connections. A pupil who rushes to connect ``1 to 5" will miss the chance to obtain two (2) pairs by connecting ``5 to 5" and ``1 to 2", which is the largest possible.<P>Mr. Thompson wants to have a large number of these quizzes, but he does not have the time to find the right answer for each one. Your task, as an admirer of your primary school teacher, is to help by writing a program to calculate the largest number of possible connections for him. The input to your program consists of a collection <SPAN CLASS="textbf">C</SPAN> of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers, and a set <SPAN CLASS="textbf">S</SPAN> of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers. A connection between elements in <SPAN CLASS="textbf">C</SPAN> is valid if the sum of the corresponding integers is an element in <SPAN CLASS="textbf">S</SPAN> with the constraint that each element in <SPAN CLASS="textbf">C</SPAN> may be used at most once. A value in <SPAN CLASS="textbf">S</SPAN> may be used more than once.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a single integer between 1 and 100, inclusive, which is the number of problems that follows. Each problem description consists of three lines: The first line contains two integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> that represent the sizes of the list <SPAN CLASS="textbf">C</SPAN> and the set <SPAN CLASS="textbf">S</SPAN>, respectively. The second line contains the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers of <SPAN CLASS="textbf">C</SPAN>, and the third line contains the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers of <SPAN CLASS="textbf">S</SPAN>. The values in each line are separated by single spaces. <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3820a.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3820a.png ALT="$ \le$">200</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3820a.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3820a.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem, the output is a single line consisting of an integer that is the maximum number of possible pairings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
6 4 
1 2 3 4 4 5 
6 9 3 5 
5 4 
1 2 3 4 5 
6 9 3 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
2

______________________________________________________
3821||||||false||||||
<html><head><title>Problem A: Tree Grafting</title> </head><body><h1>Problem A: Tree Grafting</h1><p><b>Input</b>: <tt>graft.in</tt><br><b>Output</b>: <tt>graft.out</tt></p>Trees have many applications in computer science. Perhaps the most commonly used trees are rooted binary trees, but there are other types of rooted trees that may be useful as well. One example is ordered trees, in which the subtrees for any given node are ordered. The number of children of each node is variable, and there is no limit on the number. Formally, an ordered tree consists of a finite set of nodes T such that<ul><li>there is one node designated as the root, denoted root(T);<br></li><li>the remaining nodes are partitioned into subsets T1, T2, ..., Tm, each of which is also a tree (subtrees).</li></ul>Also, define root(T1), ..., root(Tm) to be the children of root(T), with root(Ti) being the i-th child. The nodes root(T1), ..., root(Tm) are siblings.</p><p>It is often more convenient to represent an ordered tree as a rooted binary tree, so that each node can be stored in the same amount of memory. The conversion is performed by the following steps:</p><ol><li>remove all edges from each node to its children;</li> <li>for each node, add an edge to its first child in T (if any) as the left child;</li> <li>for each node, add an edge to its next sibling in T (if any) as the right child.</li></ol><p>This is illustrated by the following:<blockquote><pre>
         0                             0
       / | \                          /
      1  2  3       ===&gt;             1
        / \                           \
       4   5                           2
                                      / \
                                     4   3
                                      \
                                       5
</pre></blockquote>In most cases, the height of the tree (the number of edges in the longest root-to-leaf path) increases after the conversion. This is undesirable because the complexity of many algorithms on trees depends on its height.</p><p>You are asked to write a program that computes the height of the tree before and after the conversion.</p><h2>Input</h2><p>The input is given by a number of lines giving the directions taken in a depth-first traversal of the trees. There is one line for each tree. For example, the tree above would give dudduduudu, meaning 0 down to 1, 1 up to 0, 0 down to 2, etc. The input is terminated by a line whose first character is #. You may assume that each tree has at least 2 and no more than 10000 nodes.</p><h2>Output</h2><p>For each tree, print the heights of the tree before and after the conversion specified above. Use the format:<blockquote><pre>
Tree t: h1 =&gt; h2
</pre></blockquote>where t is the case number (starting from 1), h1 is the height of the tree before the conversion, and h2 is the height of the tree after the conversion.</p><h2>Sample Input</h3><pre>
dudduduudu
ddddduuuuu
dddduduuuu
dddduuduuu
#
</pre><h2>Sample Output</h2><pre>
Tree 1: 2 =&gt; 4
Tree 2: 5 =&gt; 5
Tree 3: 4 =&gt; 5
Tree 4: 4 =&gt; 4
</pre></body></html>
______________________________________________________
3822||||||false||||||
<html><head><title>Problem B: Look and Say</title> </head><body><h1>Problem B: Look and Say</h1><p><b>Input</b>: <tt>lookandsay.in</tt><br><b>Output</b>: <tt>lookandsay.out</tt></p><p>The look and say sequence is defined as follows. Start with any string of digits as the first element in the sequence. Each subsequent element is defined from the previous one by "verbally" describing the previous element. For example, the string 122344111 can be described as "one 1, two 2's, one 3, two 4's, three 1's". Therefore, the element that comes after 122344111 in the sequence is 1122132431. Similarly, the string 101 comes after 1111111111. Notice that it is generally not possible to uniquely identify the previous element of a particular element. For example, a string of 112213243 1's also yields 1122132431 as the next element.</p><h2>Input</h2><p>The input consists of a number of cases. The first line gives the number of cases to follow. Each case consists of a line of up to 1000 digits.</p><h2>Output</h2><p>For each test case, print the string that follows the given string.</p><h2>Sample Input</h2><pre><br>3<br>122344111<br>1111111111<br>12345<br></pre><p></p><h2>Sample Output</h2><pre><br>1122132431<br>101<br>1112131415<br></pre></body></html>
______________________________________________________
3823||||||false||||||
<html><head><title>Problem C: Server Relocation</title> </head><body><h1>Problem C: Server Relocation</h1><p><b>Input</b>: <tt>server.in</tt><br><b>Output</b>: <tt>server.out</tt></p><p>Michael has a powerful computer server that has hundreds of parallel processors and terabytes of main memory and disk space. Many important computations run continuously on this server, and power must be supplied to the server without interruption.</p><p>Michael's server must be moved to accommodate new servers that have been purchased recently. Fortunately, Michael's server has two redundant power supplies---as long as at least one of the two power supplies is connected to an electrical outlet, the server can continue to run. When the server is connected to an electrical outlet, it can be moved to any location which is not further away from the outlet than the length of the cord used to connect to the outlet.</p><p>Given which outlet Michael's server is plugged into initially and finally, and the locations of outlets in the server room, you should determine the smallest number of times you need to plug a cord into an electrical outlet in order to move the server while keeping the server running at all times. Note that, in the initial and final configuration, only one cord is connected to the power outlet.</p><p></p><h2>Input</h2><p>The first line of input is an integer giving the number of cases to follow. For each case, the first line is of the form</p><p>OUTLETS OUTLET_INITIAL OUTLET_FINAL LENGTH1 LENGTH2</p><p>where</p><p></p><ul><li>OUTLETS is the number of outlets in the server room (2 &lt;= OUTLETS &lt;= 1000).<br></li><li>OUTLET_INITIAL is the index (starting from 1) of the outlet the server is initially connected to.<br></li><li>OUTLET_FINAL is the index (starting from 1) of the outlet the server is finally connected to.<br></li><li>LENGTH1 and LENGTH2 are the positive lengths of the two power cords, with at most three digits of precision after the decimal point (0 &lt; LENGTH1, LENGTH2 &lt;= 30000).</li></ul><p>These are followed by OUTLETS lines giving the integer coordinates of the wall outlets, one per line, with the k-th line giving the location of the k-th outlet. All coordinates are specified as two integers (x- and y-coordinates) separated by a space, with absolute values at most 30000. You may assume that all coordinates are distinct, and that the initial outlet and the final outlet are different.</p><p></p><h2>Output</h2><p>For each case, print the minimum number of times you need to plug a cord into an electrical outlet in order to move the server to the final location while keeping the server running at all times. If this is not possible, print "Impossible".</p><p></p><h2>Sample Input</h2><p></p><pre><br>2<br>4 1 4 2.000 1.000<br>0 0<br>0 4<br>4 0<br>4 4<br>9 1 4 2.000 3.000<br>0 7<br>-6 2<br>-3 3<br>6 2<br>-6 -3<br>3 -3<br>6 -3<br>-3 -7<br>0 -7<br></pre><p></p><h2>Sample Output</h2><p></p><pre><br>Impossible<br>8<br></pre></body></html>
______________________________________________________
3824||||||false||||||
<html><head><title>Problem D: Coin Toss</title> </head><body><h1>Problem D: Coin Toss</h1><p><b>Input</b>: <tt>cointoss.in</tt><br><b>Output</b>: <tt>cointoss.out</tt></p><p>In a popular carnival game, a coin is tossed onto a table with an area that is covered with square tiles in a grid. The prizes are determined by the number of tiles covered by the coin when it comes to rest: the more tiles it covers, the better the prize. In the following diagram, the results from five coin tosses are shown:</p><p><img src="http://livearchive.onlinejudge.org/external/38/p3824.png></p><p>In this example:</p><ul><li>coin 1 covers 1 tile<br></li><li>coin 2 covers 2 tiles<br></li><li>coin 3 covers 3 tiles<br></li><li>coin 4 covers 4 tiles<br></li><li>coin 5 covers 2 tiles</li></ul><p>Notice that it is acceptable for a coin to land on the boundary of the playing area (coin 5). In order for a coin to cover a tile, the coin must cover up a positive area of the tile. In other words, it is not enough to simply touch the boundary of the tile. The center of the coin may be at any point of the playing area with uniform probability. You may assume that (1) the coin always comes to a rest lying flat, and (2) the player is good enough to guarantee that the center of the coin will always come to rest on the playing area (or the boundary).</p><p>The probability of a coin covering a certain number of tiles depends on the tile and coin sizes, as well as the number of rows and columns of tiles in the playing area. In this problem, you will be required to write a program which computes the probabilities of a coin covering a certain number of tiles.</p><h2>Input</h2><p>The first line of input is an integer specifying the number of cases to follow. For each case, you will be given 4 integers m, n, t, and c on a single line, separated by spaces. The playing area consists of m rows and n columns of tiles, each having side length t. The diameter of the coin used is c. You may assume that 1 &lt;= m, n &lt;= 5000, and 1 &lt;= c &lt; t &lt;= 1000.</p><h2>Output</h2><p>For each case, print the case number on its own line. This is followed by the probability of a coin covering 1 tile, 2 tiles, 3 tiles, and 4 tiles each on its own line. The probability should be expressed as a percentage rounded to 4 decimal places. Use the format as specified in the sample output. You should use double-precision floating-point numbers to perform the calculations. "Negative zeros" should be printed without the negative sign.</p><p>Separate the output of consecutive cases by a blank line.</p><h2>Sample Input</h2><pre>
3
5 5 10 3
7 4 25 20
10 10 10 4
</pre><h2>Sample Output</h2><pre>
Case 1:
Probability of covering 1 tile  = 57.7600%
Probability of covering 2 tiles = 36.4800%
Probability of covering 3 tiles = 1.2361%
Probability of covering 4 tiles = 4.5239%

Case 2:
Probability of covering 1 tile  = 12.5714%
Probability of covering 2 tiles = 46.2857%
Probability of covering 3 tiles = 8.8293%
Probability of covering 4 tiles = 32.3135%

Case 3:
Probability of covering 1 tile  = 40.9600%
Probability of covering 2 tiles = 46.0800%
Probability of covering 3 tiles = 2.7812%
Probability of covering 4 tiles = 10.1788%
</pre></body></html>
______________________________________________________
3825||||||false||||||
<html><head><title>Problem E: Vacation Rentals</title> </head><body><h1>Problem E: Vacation Rentals</h1><p><b>Input</b>: <tt>vacation.in</tt><br><b>Output</b>: <tt>vacation.out</tt></p><p>The Fifth Season Resort consists of a number of condominiums which are frequently occupied by their owners. At other times, however, they are available as vacation rentals. Since the resort has no more than 26 condominiums, they are identified by upper case letters.</p><p>One day the resort manager's telephone rings. She receives a reservation request for a vacation rental with an arrival date of December 2 and a departure date of December 9. She looks at the table of reservations, but doesn't find a condominium that would be available for the entire period. Most of the existing reservations were made by the owners of the respective condominiums (who want to stay in their own units), so it is not desirable to move an existing reservation from one unit to another. As she continues to scrutinize the table of reservations, however, she has an idea and says: "I can put you up in unit B for the first three nights, and transfer you to unit F for the rest of your stay. Will that work?" The person agrees and the reservation is made. Notice that reservations are done by "nights", so that a one night reservation implies that the guest departs one day after the arrival.</p><p>The goal of this problem is to satisfy such reservation requests (without changing existing reservations), with a minimum number of transfers (from one unit to another) during the requested period.</p><h2>Input</h2><p>The input consists of a number of cases. The first line of each case contains two positive integers M and N. M is the number of consecutive days for which the resort's manager has a reservation table, and N is the number of units (condominiums) in the resort. The units are labeled by upper case letters starting at 'A'. There are at most 100 days and at least 3 rooms in the reservation table. The days are numbered 1, 2, ..., M for simplicity.</p><p>The reservation table is given in the next M lines. Each line (row) of the table refers to a particular day (in the order 1, 2, 3, etc.), and each column of the table to a particular unit of the resort (in the order 'A', 'B', 'C', etc.). An entry of 'X' means that the corresponding unit is reserved for that day, while an 'O' means that the unit is available.</p><p>The reservation table is followed by one line of input, the reservation request, consisting of two integers: the arrival date and the departure date. The arrival date is in the range 1..M. The departure date is greater than the arrival date and less than or equal to M+1.</p><p>The end of input is indicated by M = N = 0.</p><h2>Output</h2><p>For each test case, first print the case number followed by a colon and a blank line. If the reservation request can be met, the output will show a reservation schedule with a minimum number of transfers (from one unit to another) during the stay at the resort. Each line of the schedule corresponds to a consecutive stay in the same unit, and should be printed in the following way:<pre>
&lt;unit&gt;: &lt;start date&gt;-&lt;end date&gt;
</pre>where <tt>&lt;unit&gt;</tt> is the unit, <tt>&lt;start date&gt;</tt> is the date on which the guests moves into the unit, and <tt>&lt;end date&gt;</tt> is the date on which the guests moves out of the unit. The lines in the schedule should be ordered in ascending order by the start date.</p><p><b>Tie breaking rule.</b> There may be several schedules with a minimum number of transfers. In these cases, choose the schedule which uses the lowest "unit label" in the first day (so unit A is given preference to unit B). If there is still a tie, choose the schedule with the lowest unit number in the second day, and so on.</p><p>If the reservation request cannot be met, print the line:<pre>
Not available
</pre>instead of the schedule.</p><p>Separate the output of consecutive cases by a blank line.</p><h2>Sample Input</h2><pre>
10 7
XXXXXXX
XOXXXXO
XOXXXXO
XOXXXOX
OXXOXOX
XOXOXOX
OXXOXOX
OXXXXOX
XXXXXXX
XXXXXXX
2 9
0 0
</pre><h2>Sample Output</h2><pre>
Case 1:

B: 2-5
F: 5-9
</pre></body></html>
______________________________________________________
3826||||||false||||||
<html><head><title>Problem F: Baseball</title> </head><body><h1>Problem F: Baseball</h1><p><b>Input</b>: <tt>baseball.in</tt><br><b>Output</b>: <tt>baseball.out</tt></p><p>Baseball is a game full of statistics. But what good are these statistics? Maybe they can be used to predict the outcome of a game.</p><p>A baseball game consists of 9 innings. If the game is tied after 9 innings, one additional inning is played at a time until the game is no longer tied at the end of the additional inning. Each inning is divided into two halves, in which one team "attacks" and the other team "defends". The visiting team attacks in the first half, while the home team attacks in the second half. If the home team is leading at the start of the second half of the 9th inning, the game ends because the winner has already been determined.</p><p>Each team submits a "batting order" at the beginning of the game indicating the order in which its 9 players will bat during the attack half of the inning. In each half of an inning, the players in the attacking team bat according to the batting order. The first batter in the first inning is the first one in the batting order. Each subsequent batter is the next batter in the batting order. If the previous batter is the last player in the batting order, the next batter is the first player in the batting order again. In each subsequent inning, the first player to bat is the player following the last player who has batted in the batting order.</p><p>When a player is successful at bat (a hit), the player at bat advances to the first base, and any other players already on base advance by one base (in real games a player may advance by multiple bases, but we will not consider this case in this problem). A player must advance to first base, second base, third base, and finally the home base in order to score a run. When a player reaches the home base, he is returned to the bench to wait for his next opportunity to bat. The half of an inning continues indefinitely until 3 attacking players are unsuccessful at bat (each unsuccessful batter is an "out"). When this happens, any players left on first, second, or third base return to the bench and do not score. The team that scores the most runs at the end of the game wins.</p><p>In certain situations, a player may "sacrifice" himself in order to advance the players already on base. If a sacrifice is successful, the player at bat is out but each player already on base is advanced by one base. A player advancing to the home base this way scores a run, unless the sacrificed batter is the third out of the inning. In the latter case, the half of the inning is over and no run is scored. If a sacrifice is unsuccessful, the batter is out and none of the players advances. A batter will attempt to sacrifice whenever there is a player on second base with zero out, or when there is a player on third base with at most one out.</p><p>One of the most commonly cited statistics for players is the "hit percentage" (between 0 and 1) for each player, indicating the proportion of time the player is successful at bat. Similarly, the "sacrifice percentage" of a player is the proportion of time the player is successful at a sacrifice. In this problem, you will be given the hit percentage and the sacrifice percentage of each of the 9 players in a team as well as a batting order. You will be asked to simulate a baseball game. Random numbers are required in a simulation, and you will use the following random number generator:<pre>
x(n+1) = (x(n) * 25173 + 13849) % 65536
</pre>where <code>x(n)</code> is the previous random number and <code>x(n+1)</code> is the next random number. The calculations above should be performed using 32-bit integers. You should start with the "seed" <code>x(0) = 1</code>; the first random number generated by your program is <code>x(1)</code>. Each time the simulation needs to determine if a hit or a sacrifice is successful, it should generate the next random number. A hit (or a sacrifice) is successful if<pre>
random_number / 65536 &lt;= hit (or sacrifice) percentage
</pre>The division in this formula is floating-point division. Do not reset the random number generator (i.e. resetting the seed to 1) except at the beginning of each game.</p><h2>Input</h2><p>The input consists of a number of games. The first line of the input file specifies the number of games to follow. Each game contains the batting order of the visiting team followed by the batting order of the home team. The batting order of each team starts with a line specifying the team name (at most 15 upper and lower case letters). The next 9 lines specify the 9 players, listed in the order they bat. Each of these lines contains the player's name (at most 15 upper and lower case characters), a space, then a floating-point number (to 3 decimal places) specifying his hit percentage, a space, and finally his sacrifice percentage (to 3 decimal places). You may assume that all hit percentages are between .200 and .400, and all sacrifice percentages are between .300 and .750. You may assume that no game will last more than 200 innings.</p><h2>Output</h2><p>For each game, print the game number as well as the visiting and home team names in the first line, as follows:<pre>
Game &lt;x&gt;: &lt;visiting&gt; vs. &lt;home&gt;
</pre>This is followed by a blank line.</p><p>Next print the players who score hits and runs, separately, for each inning in the order they occur in the game. Use the format as follows:<pre>
Inning 1:
Hits:
  &lt;player1&gt; &lt;team&gt;
  &lt;player2&gt; &lt;team&gt;

Runs:
  &lt;player3&gt; &lt;team&gt;
  &lt;player4&gt; &lt;team&gt;

</pre>Indent the list of players by two spaces. Print the player name and the team name right-justified in a field width of 15 (in addition to the indentation before the player's name and one space separation between the player's name and team name). If no one scores a hit or a run, print the single line<pre>
  none
</pre>(indented by two spaces) in the appropriate section instead of a list of players. Print a blank line after the output for each inning.</p><p>At the end of the game, print a summary on the number of runs and hits scored for each team, starting with the visiting team:<pre>
End of Game:
  &lt;visiting&gt; &lt;x&gt; runs, &lt;x&gt; hits
  &lt;home&gt; &lt;x&gt; runs, &lt;x&gt; hits
</pre>The summary should be indented by two spaces. Print the team name right-justified in a field width of 15 (in addition to the indentation).</p><p>Separate the output of consecutive games by a line containing 60 '=' signs.</p><h2>Sample Input</h2><pre>
1
Rangers
Young .213 .523
Kinsler .207 .602
Sosa .254 .300
Laird .220 .432
Byrd .206 .749
Wilkerson .236 .508
Catalanotto .272 .483
Teixeira .297 .573
Saltalamacchia .243 .632
BlueJays
Wells .378 .502
Hill .276 .544
Overbay .372 .694
McDonald .373 .618
Adams .320 .690
Rios .300 .450
Johnson .379 .559
Stairs .302 .621
Zaun .346 .515
</pre><h2>Sample Output</h2><pre>
Game 1: Rangers vs. BlueJays

Inning 1:
Hits:
             Hill        BlueJays
          Overbay        BlueJays
            Adams        BlueJays

Runs:
  none

Inning 2:
Hits:
  none

Runs:
  none

Inning 3:
Hits:
      Catalanotto         Rangers
            Wells        BlueJays
             Hill        BlueJays
            Adams        BlueJays

Runs:
            Wells        BlueJays

Inning 4:
Hits:
          Kinsler         Rangers

Runs:
  none

Inning 5:
Hits:
      Catalanotto         Rangers

Runs:
  none

Inning 6:
Hits:
             Sosa         Rangers
            Laird         Rangers
             Rios        BlueJays

Runs:
  none

Inning 7:
Hits:
        Wilkerson         Rangers
         Teixeira         Rangers
           Stairs        BlueJays

Runs:
  none

Inning 8:
Hits:
  none

Runs:
  none

Inning 9:
Hits:
  none

Runs:
  none

End of Game:
          Rangers 0 runs, 7 hits
         BlueJays 1 runs, 8 hits

</pre></body></html>
______________________________________________________
3827||||||false||||||
<html><head><title>Problem G: Team Work</title> </head><body><h1>Problem G: Team Work</h1><p><b>Input</b>: <tt>teamwork.in</tt><br><b>Output</b>: <tt>teamwork.out</tt></p><p>A certain programming contest coach is frustrated with the lack of team work in his teams. He decided to demonstrate to his students the importance of team work by using the following well-known analogy: it is very easy to take a single piece of stick and snap it into two halves. But if you bundle three sticks together (i.e. the three members of the team) you now have to apply a lot more force to snap the sticks. The coach is certain that his teams will understand the importance of team work after this demonstration.</p><p>So the coach went out to the forest to collect the sticks. The coach knows that a demonstration should always be rehearsed to debug any problems. He ensures that it is practically impossible to snap three sticks bundled together and that it is very easy to snap individual sticks. Oh no! Every stick he has carefully collected snapped into smaller pieces. He can go out to collect more sticks, but how would he know that the sticks would work with the demonstration?</p><p>The coach came up with a clever idea: just glue the pieces back together to form larger sticks! It appears that every piece can be glued together securely with any other piece even if the two pieces came from different sticks originally. Thus, he can reconstruct sticks by putting two or more pieces together. The reconstructed sticks have the added advantage that each individual stick is really easy to snap at the connection point. However, if two sticks have a connection point at the same location, the two sticks will snap just as easily when bundled together. Therefore, he must reconstruct three sticks in such a way that none of the connection points coincide. Furthermore, it is desirable for the reconstructed sticks to be as long as possible. Finally, the three reconstructed sticks must have the same length---the coach does not want to imply that one team member is better than another. It is acceptable to leave some pieces unused. Each piece can only be used once, of course.</p><h2>Input</h2><p>The input consists of a number of cases. Each case is specified on one line. The first number specifies the number of pieces (N). Each of the following N numbers is a positive integer specifying the length of each piece. There are at most 13 pieces, and the length of each piece is at most 25. The end of input is specified by a case in which N = 0.</p><h2>Output</h2><p>For each case, print the case number followed by a colon, followed by the longest possible length of the three reconstructed sticks on a single line. If it is impossible to reconstruct three sticks satisfying the constraints stated, then 0 is the longest possible length of the reconstructed sticks.</p><h2>Sample Input</h2><pre>
10 4 2 3 7 8 9 1 2 3 4
10 1 2 3 4 5 6 7 8 9 10
8 2 3 4 1 1 3 2 2
10 25 25 25 25 25 25 25 25 25 25
0
</pre><h2>Sample Output</h2><pre>
Case 1: 14
Case 2: 18
Case 3: 6
Case 4: 0
</pre></body></html>
______________________________________________________
3828||||||false||||||
<html><head><title>Problem H: Wavelet Compression</title> </head><body><h1>Problem H: Wavelet Compression</h1><p><b>Input</b>: <tt>wavelet.in</tt><br><b>Output</b>: <tt>wavelet.out</tt></p><p>The discrete wavelet transform is a popular tool for signal compression. In this problem, your job is to write a program to decompress a one-dimensional signal (a list of integers) that has been compressed by a simple wavelet transform.</p><p>To understand how this simple wavelet transform works, suppose that we have a list of an even number of integers. We compute the sum and difference of each pair of consecutive samples, resulting in two lists of sums and differences each having half the original length. Formally, if the original samples are<pre>
a(1),..., a(n)
</pre>the i-th sum <code>s(i)</code> and difference <code>d(i)</code> are computed as:<pre>
for i = 1,...,n/2:
  s(i) = a(2*i-1) + a(2*i)
  d(i) = a(2*i-1) - a(2*i)
</pre>This is then rearranged to give the transformed signal by first listing the sums and then the differences. For example, if the input signal is:<pre>
  5, 2, 3, 2, 5, 7, 9, 6
</pre>Then the sum and difference signals are:<pre>
   s(i) = 7, 5, 12, 15
   d(i) = 3, 1, -2, 3
</pre>Thus, the transformed signal is:<pre>
  7, 5, 12, 15, 3, 1, -2, 3
</pre></p><p>The same process is applied recursively to the first half of the transformed signal, treating <code>s(i)</code> as the input signal, until the length of the input signal is 1. In the example above, the final transformed signal is:<pre>
   39, -15, 2, -3, 3, 1, -2, 3
</pre>It is assumed that the length of the original input is a power of 2, and the input signal consists of integers between 0 and 255 (inclusive) only.</p><h2>Input</h2><p>The input consists of a number of cases. Each case is specified on a line, starting with an integer <code>N</code> (1 &lt;= <code>N</code> &lt;= 256) indicating the number of samples. The next <code>N</code> integers are the transformed samples. The end of input is indicated by a case in which <code>N</code> = 0.</p><h2>Output</h2><p>For each test case, output the original samples on a single line, separated by a single space.</p><h2>Sample Input</h2><pre>
8 39 -15 2 -3 3 1 -2 3
4 10 -4 -1 -1
0
</pre><h2>Sample Output</h2><pre>
5 2 3 2 5 7 9 6
1 2 3 4
</pre></body></html>
______________________________________________________
3829||||||false||||||
<html><head><title>Problem I: Elementary Additions</title> </head><body><h1>Problem I: Elementary Additions</h1><p><b>Input</b>: <tt>addition.in</tt><br><b>Output</b>: <tt>addition.out</tt></p><p>In today's environment, students rely on calculators and computers to perform simple arithmetic too much. Sadly, it is not uncommon to see university students who cannot do simple arithmetic without electronic aids. Professor Peano has had enough. He has decided to take the matter into his own hands and force his students to become proficient in the most basic arithmetic skill: addition of non-negative integers. Since the students do not have a good foundation in this skill, he decided to go back to the basics and represent non-negative integers with set theory.</p><p>The non-negative integers are represented by the following sets:</p><p></p><ul><li>0 is represented by the empty set {}.<br></li><li>For any number n &gt; 0, n is represented by a set containing the representations of all non-negative integers smaller than n.</li></ul><p>For example, the first 4 non-negative integers are represented by:<br></p><pre><br>  0 =&gt; {}<br>  1 =&gt; {{}}<br>  2 =&gt; {{},{{}}}<br>  3 =&gt; {{},{{}},{{},{{}}}}<br></pre><br>and so on. Notice that the cardinality (size) of the set is exactly the integer it represents. Although the elements of a set are generally unordered, Professor Peano requires that the elements of a set be ordered in increasing cardinality to make the assignments easier to grade. As an added advantage, Professor Peano is sure that there are no calculators or computer programs that can deal with numbers written in this notation.<p>Not surprisingly, many students cannot cope with this basic task and will fail the course if they do not get help soon. It is up to you, an enterprising computer science student, to help them. You have decided to write a computer program, codenamed Axiomatic Cheating Machine (ACM), to sell to the students and help them perform the additions to pass the course.</p><p></p><h2>Input</h2><p>The first line of the input contains a positive integer giving the number of cases to follow. For each case, there are two lines of input each containing a non-negative integer represented in set notation. Each line contains only the characters '{', '}', and ','. The sum of the two given integers will be at most 15.</p><p></p><h2>Output</h2><p>For each test case, output the sum of the two input integers in the set notation described above.</p><p></p><h2>Sample Input</h2><pre><br>3<br>{}<br>{}<br>{{}}<br>{{},{{}}}<br>{{},{{}},{{},{{}}}}<br>{{}}<br></pre><p></p><h2>Sample Output</h2><pre><br>{}<br>{{},{{}},{{},{{}}}}<br>{{},{{}},{{},{{}}},{{},{{}},{{},{{}}}}}<br></pre><p></p><p></p></body></html>
______________________________________________________
3830||||||false||||||
<P>Little John is playing very funny game with his younger brother. There is one big box filled with M&amp;Ms of different colors. At first John has to eat several M&amp;Ms of the same color. Then his opponent has to make a turn. And so on. Please note that each player has to eat at least one M&amp;M during his turn. If John (or his brother) will eat the last M&amp;M from the box he will be considered as a looser and he will have to buy a new candy box.<P>Both of players are using optimal game strategy. John starts first always. You will be given information about M&amp;Ms and your task is to determine a winner of such a beautiful game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line of input will contain a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3830img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3830img1.png ALT="$ \le$">474</SPAN> <tex2html_verbatim_mark>) -- the number of test cases. Next <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> pairs of lines will describe tests in a following format. The first line of each test will contain an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3830img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3830img1.png ALT="$ \le$">47</SPAN> <tex2html_verbatim_mark>) -- the amount of different M&amp;M colors in a box. Next line will contain <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>A</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3830img1.png ALT="$ \le$"><I>A</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3830img1.png ALT="$ \le$">4747</SPAN> <tex2html_verbatim_mark>), separated by spaces -- amount of M&amp;Ms of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th color.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Output <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> lines each of them containing information about game winner. Print `<TT>John</TT>' if John will win the game or `<TT>Brother</TT>' in other case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
3 5 1
1
1
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
John
Brother
</PRE><P>
______________________________________________________
3831||||||false||||||
<P>The new founded Balkan Investment Group Bank (BIG-Bank) opened a new office in Bucharest, equipped with a modern computing environment provided by IBM Romania, and using modern information technologies. As usual, each client of the bank is identified by a positive integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> and, upon arriving to the bank for some services, he or she receives a positive integer priority <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>. One of the inventions of the young managers of the bank shocked the software engineer of the serving system. They proposed to break the tradition by sometimes calling the serving desk with the <B>lowest</B> priority instead of that with the highest priority. Thus, the system will receive the following types of request:<P><P><BR><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>0</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>The system needs to stop serving</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1 <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark></TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Add client <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> to the waiting list with priority <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Serve the client with the highest priority and drop him or her from the waiting list</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Serve the client with the lowest priority and drop him or her from the waiting list</TD></TR></TBODY></TABLE><P><P><BR>Your task is to help the software engineer of the bank by writing a program to implement the requested serving policy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each line of the input contains one of the possible requests; only the last line contains the stop-request (code <TT>0</TT>). You may assume that when there is a request to include a new client in the list (code <TT>1</TT>), there is no other request in the list of the same client or with the same priority. An identifier <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is always less than <SPAN CLASS="MATH">10<SUP>6</SUP></SPAN> <tex2html_verbatim_mark>, and a priority <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is less than <SPAN CLASS="MATH">10<SUP>7</SUP></SPAN> <tex2html_verbatim_mark>. The client may arrive for being served multiple times, and each time may obtain a different priority.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each request with code <TT>2</TT> or <TT>3</TT>, the program has to print, in a separate line of the standard output, the identifier of the served client. If the request arrives when the waiting list is empty, then the program prints zero (<TT>0</TT>) to the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
1 20 14
1 30 3
2
1 10 99
3
2
2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
20
30
10
0
</PRE><P>
______________________________________________________
3832||||||false||||||
<P>Life can be taught, but sometimes simple problems are just very well hidden among difficult ones. Once identifying those simple problems you are almost on a half way of solving them as well as making one big step towards winning the contest. Just be careful, this is NOT the simplest problem!<P>Are you ready for that challenge?<P>Your task is to write a program that transforms numbers from various numeric systems to decade one (base=10).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input file consists from multiple data sets separated by one or more empty lines.<P>First line of each set contains definition of digit ordering for some hypothetical numerical system. All ASCII printable characters (codes greater than 0<SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark>20 (space)) are allowed to appear as digits, and they are sorted according to increased decimal value (starting from zero).<P>Each line of the input data set (starting from second one) is one number coded with previously defined digits. Such numbers can have multiple decade interpretations (taking different base for hypothetical system) and your task is to find sum of all possible interpretations.<P>Explanation: <EM>If we define digit ordering as ``0123456789" possible bases are 2..10 but number `6201' can be decoded only in systems with base 7..10.</EM><P>Input lines can contain white space characters on both ends which should be ignored.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>You are required to output one decimal number per each number from input data sets. That number represents sum of decimal representations for all valid numeric system bases.<P>Output data sets should be separated by one blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0123456789
 90763
1

.1&gt;C
CC.
&gt;.1
1....
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
90763
9

60
52
353
</PRE><P>
______________________________________________________
3833||||||false||||||
<P>The North Pole Beach Bank has to decide upon a set <SPAN CLASS="MATH"><I>App</I></SPAN> <tex2html_verbatim_mark> of mortgage applications. Each application <SPAN CLASS="MATH"><I>a</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \in$"> <I>App</I></SPAN> <tex2html_verbatim_mark> has an acceptance deadline <SPAN CLASS="MATH"><I>d</I><SUB>a</SUB></SPAN> <tex2html_verbatim_mark>, ie. the required loan must be paid at a time <SPAN CLASS="MATH"><I>t</I><SUB>a</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \le$"><I>t</I><SUB>a</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \le$"><I>d</I><SUB>a</SUB></SPAN> <tex2html_verbatim_mark>. If the application is accepted the Bank gets a profit <SPAN CLASS="MATH"><I>p</I><SUB>a</SUB></SPAN> <tex2html_verbatim_mark>. Time is measured in integral units starting from the conventional time origin 0, when the Bank decides upon all the <SPAN CLASS="MATH"><I>App</I></SPAN> <tex2html_verbatim_mark> applications. Moreover, the Bank can pay a maximum number of <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> loans at any given time. The Bank policy if focussed solely on profit: it accepts a subset <SPAN CLASS="MATH"><I>S</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \subseteq$"> <I>App</I></SPAN> <tex2html_verbatim_mark> of applications that maximizes the profit<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>profit</I>(<I>S</I>) = <IMG WIDTH="30" HEIGHT="54" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$\displaystyle \sum_{{a \in S}}^{}$"><I>p</I><SUB>a</SUB></DIV><P><tex2html_verbatim_mark></P><P>The problem is to compute the maximum profit the Bank can get from the given set <SPAN CLASS="MATH"><I>App</I></SPAN> <tex2html_verbatim_mark> of mortgage applications.<P><P><BR>For example, consider that <SPAN CLASS="MATH"><I>L</I> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>App</I> = {<I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>}</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>p</I><SUB>a</SUB>, <I>d</I><SUB>a</SUB>) = (4, 2)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>p</I><SUB>b</SUB>, <I>d</I><SUB>b</SUB>) = (1, 0)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>p</I><SUB>c</SUB>, <I>d</I><SUB>c</SUB>) = (2, 0)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">(<I>p</I><SUB>d</SUB>, <I>d</I><SUB>d</SUB>) = (3, 1)</SPAN> <tex2html_verbatim_mark>. The table below shows all possible sets of accepted mortgage applications and the scheduling of the loan payments. The highest profit is 9 and corresponds to the set <SPAN CLASS="MATH">{<I>c</I>, <I>d</I>, <I>a</I>}</SPAN> <tex2html_verbatim_mark>. The loan requested by the application <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is paid at time 0, the loan corresponding to <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> is paid at time 1, and, finally, the loan of <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> is paid at time 2.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=20 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Time</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=19>Sets of accepted applications and loan scheduling</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Profit</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR></TBODY></TABLE></DIV><P><P><BR>Write a program that reads sets of data from the standard input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each data set corresponds to a set of mortgage applications and starts with two integers: <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark> that shows the number of applications in the set, and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \le$"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> which shows the maximum number of loans the Bank can pay at any given time. Follow <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> pairs of integers <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB>&nbsp;<I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I> = 1, <I>N</I></SPAN> <tex2html_verbatim_mark>, that specify the profit <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \le$"><I>p</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark> and the deadline <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \le$"><I>d</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3833img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark> of the application <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>.<P>Input data are separated by white spaces, are correct, and terminate with an end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each data set the program computes the maximum profit the Bank can get from the accepted mortgage applications corresponding to that data set. The result is printed on standard output from the beginning of a line. There must be no empty lines on output. An example of input/output is shown below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 1     4 2  1 0   2 0   3 1

7 2
200 1   200 1   100 0  1000 2   80 1
50 20   500 1

0 100

1 0     4 1000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9
2050
0
0
</PRE><P>
______________________________________________________
3834||||||false||||||
<P>Data-mining huge data sets can be a painful and long lasting process if we are not aware of tiny patterns existing within those data sets.<P>One reputable company has recently discovered a tiny bug in their hardware video processing solution and they are trying to create software workaround. To achieve maximum performance they use their chips in pairs and all data objects in memory should have even number of references. Under certain circumstances this rule became violated and exactly one data object is referred by odd number of references. They are ready to launch product and this is the only showstopper they have. They need <B>YOU</B> to help them resolve this critical issue in most efficient way.<P>Can you help them?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input file consists from multiple data sets separated by one or more empty lines.<P>Each data set represents a sequence of 32-bit (positive) integers (references) which are stored in compressed way.<P>Each line of input set consists from three single space separated 32-bit (positive) integers <SPAN CLASS="MATH"><I>X</I>&nbsp;<I>Y</I>&nbsp;<I>Z</I></SPAN> <tex2html_verbatim_mark> and they represent following sequence of references: <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>X</I> + <I>Z</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>X</I> + 2*<I>Z</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>X</I> + 3*<I>Z</I></SPAN> <tex2html_verbatim_mark>, ..., <SPAN CLASS="MATH"><I>X</I> + <I>K</I>*<I>Z</I></SPAN> <tex2html_verbatim_mark>, ...(while <SPAN CLASS="MATH">(<I>X</I> + <I>K</I>*<I>Z</I>)<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3834img1.png ALT="$ \le$"><I>Y</I></SPAN> <tex2html_verbatim_mark>).<P>Your task is to data-mine input data and for each set determine weather data were corrupted, which reference is occurring odd number of times, and count that reference.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each input data set you should print to standard output new line of text with either `<TT>no corruption</TT>' (low case) or two integers separated by single space (first one is reference that occurs odd number of times and second one is count of that reference).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1 10 1
2 10 1

1 10 1
1 10 1

1 10 1
4 4 1
1 5 1
6 10 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1
no corruption
4 3
</PRE><P>
______________________________________________________
3835||||||false||||||
<P>Bob is a skilled engineer. He must design a highway that crosses a region with few villages. Since this region is quite unpopulated, he wants to minimize the number of exits from the highway. He models the highway as a line segment <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> (starting from zero), the villages as points on a plane, and the exits as points on <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. Considering that the highway and the villages position are known, Bob must find the minimum number of exists such that each village location is at most at the distance <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> from at least one exit. He knows that all village locations are at most at the distance <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> from <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The program input is from the standard input. Each data set in the file stands for a particular set of a highway and the positions of the villages. The data set starts with the length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> (fits an integer) of the highway. Follows the distance <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> (fits an integer), the number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> of villages, and for each village the location <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark>. The program prints the minimum number of exits. White spaces can occur freely in the input. The input data are correct and terminate with an end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each set of data the program prints the result to the standard output from the beginning of a line.<P>An input/output sample is in the table below. There is a single data set. The highway length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> is 100, the distance <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> is 50. There are 3 villages having the locations (2, 4), (50, 10), (70, 30). The result for the data set is the minimum number of exits: 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100
50
3
2 4
50 10
70 30
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
</PRE><P>
______________________________________________________
3836||||||false||||||
<P>Everybody is fond of computers, but buying a new one is always a money challenge. Fortunately, there is always a convenient way to deal with. You can replace your computer and get a brand new one, thus saving some maintenance cost. Of course, you must pay a fixed cost for each new computer you get.<P>Suppose you are considering a <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> year period over which you want to have a computer. Suppose you buy a new computer in year <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3836img1.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3836img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>. Then you have to pay a fixed cost <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, in the year <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, and a maintenance cost <SPAN CLASS="MATH"><I>m</I>(<I>y</I>, <I>z</I>)</SPAN> <tex2html_verbatim_mark> each year you own that computer, starting from year <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> through the year <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3836img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>, when you plan to buy - eventually - another computer.<P>Write a program that computes the minimum cost of having a computer over the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> year period.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The program input is from the standard input. Each data set in the file stands for a particular set of costs. A data set starts with the cost <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> for getting a new computer. Follows the number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> of years, and the maintenance costs <SPAN CLASS="MATH"><I>m</I>(<I>y</I>, <I>z</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I> = 1..<I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I> = <I>y</I>..<I>n</I></SPAN> <tex2html_verbatim_mark>.<P>The program prints the minimum cost of having a computer throughout the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> year period.<P>White spaces can occur freely in the input. The input data are correct and terminate with an end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each set of data the program prints the result to the standard output from the beginning of a line.<P>An input/output sample is in the table below. There is a single data set. The cost for getting a new computer is <SPAN CLASS="MATH"><I>c</I> = 3</SPAN> <tex2html_verbatim_mark>. The time period <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>n</I> = 3</SPAN> <tex2html_verbatim_mark> years, and the maintenance costs are:<P><UL><LI>For the first computer, which is certainly bought: <SPAN CLASS="MATH"><I>m</I>(1, 1) = 5</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I>(1, 2) = 7</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I>(1, 3) = 50</SPAN> <tex2html_verbatim_mark> </LI><LI>For the second computer, in the event the current computer is replaced: <SPAN CLASS="MATH"><I>m</I>(2, 2) = 6</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I>(2, 3) = 8</SPAN> <tex2html_verbatim_mark> </LI><LI>For the third computer, in the event the current computer is replaced: <SPAN CLASS="MATH"><I>m</I>(3, 3) = 10</SPAN> <tex2html_verbatim_mark>. </LI></UL><P>The result for the data set is the minimum cost 19.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
3
5 7 50
6 8
10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
19
</PRE><P>
______________________________________________________
3837||||||false||||||
<P>The stable marriage problem consists of matching members of two different sets according to the member's preferences for the other set's members. The input for our problem consists of:<P><UL><LI>a set <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> males; </LI><LI>a set <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> females; </LI><LI>for each male and female we have a list of all the members of the opposite gender in order of preference (from the most preferable to the least). </LI></UL><P>A marriage is a one-to-one mapping between males and females. A marriage is called stable, if there is no pair <SPAN CLASS="MATH">(<I>m</I>, <I>f</I> )</SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>f</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3837img1.png ALT="$ \in$"> <I>F</I></SPAN> <tex2html_verbatim_mark> prefers <SPAN CLASS="MATH"><I>m</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3837img1.png ALT="$ \in$"> <I>M</I></SPAN> <tex2html_verbatim_mark> to her current partner and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> prefers <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> over his current partner. The stable marriage <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is called male-optimal if there is no other stable marriage <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, where any male matches a female he prefers more than the one assigned in <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>.<P>Given preferable lists of males and females, you must find the male-optimal stable marriage.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line gives you the number of tests. The first line of each test case contains integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (<!-- MATH
 $0 < n < 27$
 --> <SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 27</SPAN> <tex2html_verbatim_mark>). Next line describes <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> male and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> female names. Male name is a lowercase letter, female name is an upper-case letter. Then go <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, that describe preferable lists for males. Next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describe preferable lists for females.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case find and print the pairs of the stable marriage, which is male-optimal. The pairs in each test case must be printed in lexicographical order of their male names as shown in sample output. Output an empty line between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
a b c A B C
a:BAC
b:BAC
c:ACB
A:acb
B:bac
C:cab
3
a b c A B C
a:ABC
b:ABC
c:BCA
A:bac
B:acb
C:abc
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
a A
b B
c C

a B
b A
c C
</PRE><P>
______________________________________________________
3838||||||false||||||
<P>Following the account of Jules Verne, a scrambled message written by the middle age alchemist Arne Saknussemm, and deciphered by professor Lidenbrock, started the incredible travel to the center of the Earth. The scrambling procedure used by Arne is alike the procedure given below.<P><OL><LI>Take a non empty message <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> that contains letters from the English alphabet, digits, commas, dots, quotes (i.e. '), spaces and line breaks, and whose last character is different than space. For example, consider the following message whose translation reads ``In Sneffels's crater descend brave traveler, and touch the center of the Earth".<P><PRE>
In Sneffels craterem descende audas
viator, et terrestre centrum attinges.
</PRE><P></LI><LI>Choose an integral number <!-- MATH
 $0 < K \le length(M)$
 --><SPAN CLASS="MATH">0 &lt; <I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3838img1.png ALT="$ \le$"><I>length</I>(<I>M</I>)</SPAN> <tex2html_verbatim_mark> and add trailing spaces to <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> such that the length of the resulting message, say <SPAN CLASS="MATH"><I>M'</I></SPAN> <tex2html_verbatim_mark>, is the least multiple of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. For <SPAN CLASS="MATH"><I>K</I> = 19</SPAN> <tex2html_verbatim_mark> and the message above, where <SPAN CLASS="MATH"><I>length</I>(<I>M</I>) = 74</SPAN> <tex2html_verbatim_mark> (including the 8 spaces and the line break that <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> contains), two trailing spaces are added yielding the message <SPAN CLASS="MATH"><I>M'</I></SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>length</I>(<I>M'</I>) = 76</SPAN> <tex2html_verbatim_mark>.<P></LI><LI>Replace all the spaces from <SPAN CLASS="MATH"><I>M'</I></SPAN> <tex2html_verbatim_mark> by the character <TT>_</TT> (underscore) ; replace all the line breaks from M' by <code>\</code> (backslash), and then reverse the message. In our case:<P><PRE>
__.segnitta_murtnec_ertserret_te_,rotaiv\sadua_ednecsed_meretarc_sleffenS_nI
</PRE><P></LI><LI>Write the message that results from step 3 in a table with <SPAN CLASS="MATH"><I>length</I>(<I>M'</I>)/<I>K</I></SPAN> <tex2html_verbatim_mark> rows and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> columns. The writing is column wise. For the given example, the message is written in a table with 76/19=4 rows and 19 columns as follows:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=19 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>_</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>m</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>n</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>_</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><code>\</code></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>u</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>s</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>m</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>_</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>_</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>g</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>u</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>r</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>r</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>_</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>,</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>s</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>n</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>s</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>f</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>_</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>.</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>n</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>r</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>r</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>r</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>i</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>_</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>r</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>r</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>l</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>n</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>s</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>i</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>_</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>_</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>s</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>o</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>v</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>_</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>n</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>I</TD></TR></TBODY></TABLE></DIV><P></LI><LI>The strings of characters that correspond to the rows of the table are the fragments of the scrambled message. The 4 fragments of Arne's message given in step 1 are:<P><PRE>
_etmneet_t\udsmt_fS   _gtuerr_,asaneeasf_
.narctrtria_edrrlen   si_t_seeovdec_ecenI
</PRE></LI></OL><P>Write a program that deciphers non empty messages scrambled as described. The length of a message, before scrambling, is at most 1000 characters, including spaces and line breaks.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The program input is from the standard input where each data set corresponds to a scrambled message. A data set starts with an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, that shows the number of fragments of the scrambled message, and continues with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> strings of characters that designate the fragments, in the order they appear in the table from step 4 of the scrambling procedure. Input data are separated by white-spaces and terminate with an end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The deciphered message must be printed on the standard output, from the beginning of a line and must be followed by an empty line as shown in the input/output sample below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4  _etmneet_t\udsmt_fS
   _gtuerr_,asaneeasf_
   .narctrtria_edrrlen
   si_t_seeovdec_ecenI
11 e n r e V _ s e l u J
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
In Sneffels craterem descende audas
viator, et terrestre centrum attinges.

Jules Verne
</PRE>
______________________________________________________
3839||||||false||||||
<P>Alpha-Triangle is the unique equilateral triangle that is formed by joining each and every word contained in a given set of words. Like all triangles, an Alpha-Triangle has three vertices and three sides. A point with no dimension represents a vertex in the triangle.<P>A side in an Alpha-Triangle has an identity, a length and a direction. It begins with a vertex, continues with a string of letters and ends up with another vertex. The string of letters identifies the side as well as defines the direction from the beginning to the end of the string. It is made up of a sequence of one or more words belonging to the given set. A word, say <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>, in the sequence is linked to the word appearing next, say <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>; the last letter of <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> is the first letter of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>; however the common letter appears in the string only once. The total number of letters in the string defines the length of the side. Like all equilateral triangles three sides of an Alpha-Triangle are of equal length. Let the length of each side of an Alpha-Triangle be <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>. A word, used once in a side, cannot be used again either in the same side or in any other side.<P><DIV ALIGN="CENTER"><IMG WIDTH="182" HEIGHT="179" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3839.png ALT="\epsfbox{p3839.eps}"> <tex2html_verbatim_mark></DIV><P>Each vertex/side has a distinct characteristic. Two sides meeting at one vertex begin with words having a common first letter. Let these sides be `<SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>' and `<SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>'. In case of another vertex two sides meeting at the vertex end up with words having a common last letter. Let these sides be `<SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>' and `<SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>'. In the case of the third vertex, of the two sides `<SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>' and `<SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>' meeting at the vertex, `<SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>' begins with a word having the first letter same as the last letter of the last word in `<SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>'. Vertices are placed so that sides `<SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>' and `<SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>' have clockwise direction while the third side `<SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>' has anti-clockwise direction. A triangle with sides `<SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>', `<SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>' and `<SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>', and associated directions are illustrated in the adjoining figure.<P>Write a program to find the Alpha-Triangle for a given set of words.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each case there is one input line. The line gives words in the given set in an arbitrary order. A space character separates two consecutive words in the set. Assume that the total number of words in the set is not greater than 20.<P>A line containing <TT>$</TT> as the first character, follows the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, present output in one line.<P>The line gives the length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> and the sides `<SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>', `<SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>' and `<SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>' in the order mentioned. Each side appears as a string of letters beginning, as well as ending with a point (<TT>.</TT>). A space character separates two fields appearing next to each other.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
open not toe orange text 
to alone orange eye against 
triangle and exit date eye angle 
then kind to all do lock not tell at lot 
$
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6 .openot. .textoe. .orange. 
7 .against. .torange. .aloneye. 
8 .anglexit. .triangle. .andateye. 
8 .allotell. .lockindo. .athenoto.
</PRE><P>
______________________________________________________
3840||||||false||||||
<P>A baby tries to solve the well-known eight-queen puzzle: the problem of placing eight chess queens on an <SPAN CLASS="MATH">8&#215;8</SPAN> <tex2html_verbatim_mark> chessboard so that no two queens share the same row, column, or diagonal. The baby understands the concept of row and column quite well but diagonal is not very clear to her. As a result she succeeds placing eight queens on the board so that no two queens share the same row or column but there remains the possibility that some queens share the same diagonal.<P>Given baby's queens (a solution by the baby) and a valid eight-queen solution, it is possible to move baby's queens to positions of queens in the valid solution. Assume that in a single move, a queen can be moved one unit row-wise or column-wise into an unoccupied position.<P>Write a program to find the minimum number of moves required to move baby's queens to positions of queens in the valid solution. The program should be usable for a more general <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-queen puzzle where n queens are placed on an <SPAN CLASS="MATH"><I>n</I>&#215;<I>n</I></SPAN> <tex2html_verbatim_mark> chessboard, <SPAN CLASS="MATH">4<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3840img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3840img1.png ALT="$ \le$">16</SPAN> <tex2html_verbatim_mark>. Assume that rows and columns of the chessboard are numbered <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases.<P>Each case begins with a line containing the integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P>Each of the next two lines contains a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers. Integers in the first line represent column numbers of baby's queens appearing in rows <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark> respectively. In the same way, the second line contains column numbers of queens in the given valid solution. A space separates two consecutive integers in the sequence.<P>A line containing a zero `<TT>0</TT>' as the first character follows the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the minimum number of moves required.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
1 2 3 4 
3 1 4 2 
4 
3 2 4 1 
3 1 4 2 
5 
5 3 1 4 2 
5 3 1 4 2 
5 
1 5 2 4 3 
3 1 4 2 5 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6 
2 
0 
8
</PRE><P>
______________________________________________________
3841||||||false||||||
<P>A hand of five cards makes a magician famous. The magician takes an ordinary deck of 52 cards and requests a viewer to select a hand of five cards. The viewer hands over these cards to an assistant, who stands far away from the magician so that the magician does not know what cards, are chosen. The assistant returns one of the five cards to the viewer and hands over the other four cards to the magician in a sequence, say 8 <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \spadesuit$"></SPAN> <tex2html_verbatim_mark> , Q <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \heartsuit$"></SPAN> <tex2html_verbatim_mark>, 8<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \clubsuit$"></SPAN> <tex2html_verbatim_mark> and 3 <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \diamondsuit$"></SPAN> <tex2html_verbatim_mark>. The magician identifies the card left behind with the viewer correctly.<P>The magician applies a simple trick. Cards in a deck of 52 cards are totally ordered, first by ordering the suits in alphabetical order of the suits: C: Club<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \clubsuit$"></SPAN> <tex2html_verbatim_mark>, D: Diamond <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \diamondsuit$"></SPAN> <tex2html_verbatim_mark>, H: Heart <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \heartsuit$"></SPAN> <tex2html_verbatim_mark> and S: Spade <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \spadesuit$"></SPAN> <tex2html_verbatim_mark> and then by rank A (=1), 2, 3,<SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, 9, 10, J (=11), Q (=12), K (=13). Since there are only four suits, the five cards selected by the viewer contain at least two cards of the same suit. The assistant gives one card of the same suit to the viewer, call it the hidden card and one another card of the same suit to the magician, and call it the base card. The base card indicates the suit of the hidden card so that the magician is required to know only the rank of the hidden card. Since the rank of the base card is known, the unknown rank of the hidden card can have one of the 12 ranks not known yet. The assistant plays a trick. She selects the hidden card and the base card so that the rank of the hidden card can be obtained by adding at most 6 to the rank of the base card. If the sum after addition turns out to be greater than 13 then the sum (mod 13) is considered to be the rank, otherwise the sum itself is considered as the rank. Since cards are totally ordered the three remaining cards can be identified by <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>: Lowest, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>: Medium and <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark>: Highest ranked cards. The number to be added to the rank of the base card is communicated to the magician by varying the order of the three remaining cards, as per the following table:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=6 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HML</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HLM</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>MHL</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>MLH</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>LHM</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>LMH</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY></TABLE></DIV><P><P><BR>For example, when the magician receives four cards in the order: 8 <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \spadesuit$"></SPAN> <tex2html_verbatim_mark>, Q <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \heartsuit$"></SPAN> <tex2html_verbatim_mark>, 8<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \clubsuit$"></SPAN> <tex2html_verbatim_mark> and 3 <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \diamondsuit$"></SPAN> <tex2html_verbatim_mark>, she marks 8 <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \spadesuit$"></SPAN> <tex2html_verbatim_mark> as the base card, identifies the order of the other 3 cards as HLM and adds 5 to 8 to get 13. The magician accordingly recognizes the hidden card as K <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3841img1.png ALT="$ \spadesuit$"></SPAN> <tex2html_verbatim_mark>.<P>Write a program for online demonstration of the trick played by the magician.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case there is only one input line. The line identifies the four cards and the order in which the cards are given to the magician. Two fields, appearing one after another without any space, represent each card. The first field represents the rank while the second represents the suit. For example JD identifies the Jack of Diamond, AS identifies the ace of Spade or 10C represents 10 of Club. A space character appears between representations of two neighbouring cards.<P>A line containing a zero `<TT>0</TT>' as the first character follows the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case there is only one output line. The line identifies the hidden card using representations of cards as in input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8S QH 8C 3D 
QD 5C 8D 7D 
5S QS 10C 3S 
QD 5C 8H 7S
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
KS 
AD 
10S 
KD
</PRE><P>
______________________________________________________
3842||||||false||||||
<P>Banks offer deposit schemes of various kinds to attract customers. In an <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>-year progressively reducing recurring deposit scheme (PRRDS) of a bank, a customer is required to deposit progressively reducing amounts every year for <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> years. Depending on the duration <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> of the scheme and the total amount <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> deposited in <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> years, the bank offers to return on maturity, i.e., after the expiry of <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> years, an amount <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, which is equal to <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> times the amount deposited in the first year. The bank ensures that the return <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> looks attractive by making a suitable choice of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>; <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> being a natural number.<P>In a PRRDS, the amount to be deposited in each but the last two years is exactly equal to the sum of amounts to be deposited in the next two years. The amounts to be deposited in the last two years, say <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> in the last year and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> in the last but one year, are progressively reducing <SPAN CLASS="MATH">(<I>x</I>, <I>y</I> &gt; 0;<I>y</I> &gt; <I>x</I>)</SPAN> <tex2html_verbatim_mark> and are determined so that the total amount deposited in <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> years is exactly equal to the specified amount <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. Assume that all deposits are in whole number of Rupees.<P>Write a program for the bank, so that given <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, the program computes <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> for which the return <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is maximum. For example in a 4-year scheme with <SPAN CLASS="MATH"><I>r</I> = 4</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I> = 3</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I> = 500</SPAN> <tex2html_verbatim_mark>, the progressively reducing recurring deposits 248, 126, 122 and 4, ensures the maximum return <SPAN CLASS="MATH"><I>R</I> = 744</SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>x</I> = 4</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I> = 122</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case there is only one input line. The line gives values of <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. Assume that <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> is not greater than 20.<P>A line containing a zero `<TT>0</TT>' as the first character follows the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case there is only one output line. The line gives the computed values of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3 500 
5 3 10000 
6 4 8000 
8 5 12000 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 122 744 
5 1425 12855 
1 666 13332 
1 363 23635
</PRE><P>
______________________________________________________
3843||||||false||||||
<P>Expressions are formalized in Lambda Calculus. Two expressions are said to be equivalent, if for each combination of constants/values for variables, they have the same output.<P>Define a binary operation (<SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark>) on a set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. The set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> contains letters from <SPAN CLASS="MATH">{</SPAN> <tex2html_verbatim_mark><TT>a</TT>, <TT>b</TT>, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, <TT>p</TT><SPAN CLASS="MATH">}</SPAN> <tex2html_verbatim_mark>. The operation <SPAN CLASS="MATH"><I>x</I> <TT>*</TT> <I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3843img1.png ALT="$ \in$"> <I>S</I></SPAN> <tex2html_verbatim_mark>, is defined by an operation table, where values of operands <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> appear in lexicographic order. The table is illustrated below for an operation on <SPAN CLASS="MATH"><I>S</I> = {<I>a</I>, <I>b</I>, <I>c</I>}</SPAN> <tex2html_verbatim_mark>. The table indicates that <SPAN CLASS="MATH"><I>a</I> <TT>*</TT> <I>a</I> = <I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I> <TT>*</TT> <I>a</I> = <I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I> <TT>*</TT> <I>b</I> = <I>c</I></SPAN> <tex2html_verbatim_mark>, and so on.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>x</I> <TT>*</TT> <I>y</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>c</TD></TR></TBODY></TABLE></DIV><P>Consider a string <SPAN CLASS="MATH"><I>s</I> = ``<I>s</I><SUB>1</SUB><I>s</I><SUB>2</SUB>...<I>s</I><SUB>n</SUB>"</SPAN> <tex2html_verbatim_mark> of letters in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and/or variables denoted by <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and/or <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>. Each variable may assume a value equal to a letter in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. Define the <SPAN CLASS="MATH"><I>LR</I></SPAN> <tex2html_verbatim_mark> expression of <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, where letters in <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> are processed from left to right,<P><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><I>LR</I>(<I>s</I>) = (...(((<I>s</I><SUB>1</SUB> <TT>*</TT> <I>s</I><SUB>2</SUB>) <TT>*</TT> <I>s</I><SUB>3</SUB>) <TT>*</TT> <I>s</I><SUB>4</SUB>) <TT>*</TT>...<I>s</I><SUB>n</SUB>).</SPAN> <tex2html_verbatim_mark></DIV><P>Similarly, define the <SPAN CLASS="MATH"><I>RL</I></SPAN> <tex2html_verbatim_mark> expression of <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, where letters are processed from right to left,<P><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><I>RL</I>(<I>s</I>) = (<I>s</I><SUB>1</SUB>...<TT>*</TT> (<I>s</I><SUB>n-3</SUB> <TT>*</TT> (<I>s</I><SUB>n-2</SUB> <TT>*</TT> (<I>s</I><SUB>n-1</SUB> <TT>*</TT> <I>s</I><SUB>n</SUB>)))...).</SPAN> <tex2html_verbatim_mark></DIV><P>Given the set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, the operation table defining the operation <SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark> and a number of strings each containing not more than two variables, you are required to write a program that determines the equivalence of <SPAN CLASS="MATH"><I>LR</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>RL</I></SPAN> <tex2html_verbatim_mark> expressions for each string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases. For each case there are three input lines.<P>The first line gives an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and a string. The integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> represents the total number of letters in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and the string identifies the letters in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, in lexicographic order.<P>The second line gives <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> strings each of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. The strings define, in order, the entries in the operation table appearing in rows <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark>.<P>The third line gives an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and a sequence of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> strings. Each string in the sequence is composed of letters in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and/or at most two variables <SPAN CLASS="MATH"><I>x</I>, <I>y</I></SPAN> <tex2html_verbatim_mark>. Assume that <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> are less than 10.<P>A line, containing a zero `<TT>0</TT>' as the first character, follows the last test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each string in the third input line of a test case there is one output line. The line gives the total number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> of equivalent <SPAN CLASS="MATH"><I>LR</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>RL</I></SPAN> <tex2html_verbatim_mark> expressions in the given string and identifies the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> strings in lexicographic order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 abc 
bcc aab abc 
5 abc bbb xx axby xay 
2 ab 
aa ab 
1 axaxbbx 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 abc 
0 
3 aa bb cc 
3 aabb aabc abbc 
3 caa cab cac 
2 aaaabba ababbbb
</PRE><P>
______________________________________________________
3844||||||false||||||
<P>Here is a fable. Two silly cats and a smart little mouse live together happily in a household with plenty of readily available food. Each occupies one of the six numbered rooms connected to adjacent rooms through openings inbuilt in the rooms. They can move freely from a room to adjacent rooms through the openings. The structure of the household and the numbering of rooms are shown in the figure below.<P><DIV ALIGN="CENTER"><IMG WIDTH="473" HEIGHT="142" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3844.png ALT="\epsfbox{p3844.eps}"> <tex2html_verbatim_mark></DIV><P>Silly cats are happy because each cat believes that it has a mouse to catch in its room. It never leaves a room unless it observes a mouse in an adjacent room. When it observes a mouse in an adjacent room, it moves over to that room and remains totally engaged in searching the mouse.<P>The mouse is happy because it is smart enough to remain safely alone in any of the rooms it likes. It is intelligent enough to make a series of changes of rooms so that it can control the occupancy of all rooms as per its desire. When it wishes to move to an adjacent room currently occupied by a cat, it simply makes itself visible to the cat through the opening between the rooms so that the cat moves over to the room to catch the mouse and the smart mouse can go over to the room of the cat unnoticed by the silly cat.<P>Assume that letters <TT>A</TT>, <TT>B</TT> identify cats while the letter <TT>M</TT> identifies the mouse. The letter <TT>E</TT> identifies an empty room. The occupancy of rooms is represented by a string of letters of length six: letters <TT>A</TT>, <TT>B</TT> and <TT>M</TT>, each occurs once while the letter <TT>E</TT> occurs thrice in the string. The position of a letter in the string identifies the room number. For example, the string <TT>BEEMEA</TT> indicates that the rooms numbered 2, 3 and 5 are empty. Cats <TT>A</TT>, <TT>B</TT> and the mouse <TT>M</TT> occupy rooms numbered 6, 1 and 4 respectively.<P>Write a program to find the least number of changes of rooms required to be made by the mouse to change an initial occupancy of rooms to an occupancy desired by the mouse.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each case there is only one input line. The line gives two strings of length six each. The first string represents the initial occupancy while the second string represents the desired occupancy. A space character separates the two strings.<P>A line containing <TT>$</TT> as the first character, follows the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case there is only one output line. The line gives the least number of changes of rooms required.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
BEEMEA BEEEAM 
EMABEE EEEAMB 
EABEME EMBEEA 
EMEABE EEEMAB
$
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
7 
5 
4
</PRE><P>
______________________________________________________
3845||||||false||||||
<P>Barracks in a garrison are structured in <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> rows and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> columns with certain security arrangements at each row-column position. Most of the positions are well guarded; however certain positions remain weakly guarded. All positions on the boundary, either well guarded or weakly guarded, are considered vulnerable. With respect to a given vulnerable weakly guarded position, positions appearing next to it column-wise/ row-wise/ diagonally, are considered vulnerable. Thus for a given vulnerable weakly guarded position there are at most eight vulnerable positions. Positions, which are neither vulnerable nor weakly guarded, are considered strongly secured. You are required to write a program to find all strongly secured positions in the garrison.<P>Let a zero `<TT>0</TT>' identify a weakly guarded position and a one `<TT>1</TT>' identify a wellguarded position. For illustration, in a garrison with barracks in 5 rows and 5 columns, the strongly secured positions are identified below by (1).<P><PRE>
                                0     1     1     1     0

                                1     0     1     1     1

                                1     1     1     (1)   1

                                1     (1)   0     (1)   1

                                1     1     1     1     1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each case, the first line gives the value of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, which is not greater than 20.<P>The next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines identify security status of each position in the garrison. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th line identifies the status in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th row of barracks, <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>N</I></SPAN> <tex2html_verbatim_mark>. Each line appears as a string of size <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, containing <TT>0</TT>'s and <TT>1</TT>'s. Each <TT>0</TT> identifies a weakly guarded position while each <TT>1</TT> identifies a well-guarded position. A line containing a zero `<TT>0</TT>' as the first character follows the last test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case there are two output lines. The first line gives the total number <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> of strongly secured positions. If <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is equal to <TT>0</TT> then there is no further output. Otherwise there is an additional line of output. It identifies all <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> positions, listing row number and column number of positions in row-major order. The line contains <SPAN CLASS="MATH">2&#215;<I>S</I></SPAN> <tex2html_verbatim_mark> integers separated by space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
01110 
10111 
11111 
11011 
11111 
5 
01110 
10111 
11011 
11001 
11111 
4 
1111 
1011 
1101 
1111 
5 
11111 
10111 
11011 
11001 
11111 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
3 4 4 2 4 4 
0 
2 
2 3 3 2 
5 
2 3 2 4 3 2 3 4 4 2
</PRE>
______________________________________________________
3846||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta name="generator" content="HTML Tidy for Windows (vers 12 April 2005), see www.w3.org"><title>Typesetting</title> <meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><meta name="Author" content="Ron Pacheco"></head><body style="background-color: white;" lang="EN-US"><p>Modern fonts are generally of two varieties: outline fonts, whose glyphs (the individual character shapes) are specified mathematically as a set of curves, and bitmap fonts, whose glyphs are specified as patterns of pixels. Fonts may also include embedded information such as kerning pairs (adjusting the spacing between certain pairs of glyphs, such as "AW", so that they appear spaced correctly), tracking hints (for managing inter-glyph spacing), antialiasing hints (smoothing of pixellated edges), and much more. To be sure, modern fonts are more than a simple collection of shapes, and displaying them properly is a common programming challenge.</p><p>For this problem we will concern ourselves with bitmapped fonts and a simple form of typesetting called glyph packing. Essentially, the idea is to pack the glyphs as tightly as possible while maintaining at least one horizontal pixel of separation between glyphs. For example, consider the glyphs shown to the left below for the Roman characters "P" and "J". The figure to the right shows them after glyph packing. Note that they are as close as possible without touching horizontally.</p><p><img alt="PJ" src="http://livearchive.onlinejudge.org/external/38/p3846a.png></p>Here's another example. In this case, notice that the final glyph cannot be packed at all.<p><img alt="Fiji" src="http://livearchive.onlinejudge.org/external/38/p3846a.png></p>After packing, pixels from distinct glyphs may be adjacent diagonally or vertically, but not horizontally. The following example shows that pixels may be adjacent diagonally. The "Love" test case in the example input section shows that they may be adjacent vertically.<p><img alt="two slashes" src="http://livearchive.onlinejudge.org/external/38/p3846a.png></p>Glyph packing has the nice property that it's easy to build "fancy" glyphs into the font so that glyph packing creates special effects with no extra work. Look at the "Toy" example below. The same simple packing process has been applied to these glyphs as to the ones above, but the result is more dramatic:<p><img alt="Toy" src="http://livearchive.onlinejudge.org/external/38/p3846a.png></p>Glyph packing has a few caveats, however, one of which we must concern ourselves with for this problem. Consider the example on the left below where a glyph for a hyphen is followed by a glyph for an underscore. Based on our one horizontal pixel of separation rule, how would this pack? Clearly something more is needed, and that something more is hinting within the glyphs themselves. Recall that in actual practice, fonts contain kerning pairs, tracking hints, etc. For our purposes, our hinting will be limited to "invisible" pixels that count as a pixel for the purpose of packing, but not for display. The center image below represents invisible pixels as open dots instead of closed dots. Now the two glyphs can be properly packed, resulting in the output shown on the right.<p><img alt="hidden pixels" src="http://livearchive.onlinejudge.org/external/38/p3846a.png></p><p>Now for the formal definition of a proper packing: (1) Glyphs are packed as close as possible without allowing any pixels from different glyphs to be immediately horizontally adjacent; (2) Given two glyphs, they may not be packed in such a way that any pixel of the leftmost glyph at a given height ends up positioned to the right of any pixel at the same height in the rightmost glyph.</p><p>Condition (2) above is easily understood by visualizing two glyphs sitting side by side, separated by a small space. If you "squeeze" them together, condition (2) says that their pixels are not allowed to "pass through" one another. Consider the example to the left below. The center image is not the proper packing, because it violates condition (2) of the formal definition. The image on the right is the proper packing of these glyphs.</p><p><img alt="hooks" src="http://livearchive.onlinejudge.org/external/38/p3846a.png></p><p><b>Input:</b> The input for this problem is sets of glyphs to be packed. In a given test case, all glyphs are the same height, and an integer, N, on the first line of the test case specifies this height. The next N lines contain the glyphs to be packed. Empty pixels in a glyph are represented by a dot '.' character. Non-empty pixels are represented by a hash mark '#' for visible pixels, and a zero '0' for invisible pixels. Glyphs are separated by a single column of space characters. The input will always consist of more than one glyph, at least one of which will always contain at least one visible pixel. A glyph will always have at least one non-empty pixel in its leftmost and rightmost column, and every glyph will have at least one non-empty pixel at the same height as at least one other glyph in the input. The minimum dimension of a glyph is 1 x 1, the maximum dimension is 20 x 20, and the maximum number of glyphs that will appear in any test case is 20. Test cases continue until a value of zero is specified for N.</p><p><b>Output:</b> For each test case, first output the number of that test case (starting with 1) on a line by itself. Then output the proper packing of the input glyphs, using the dot '.' character for empty pixels and for invisible pixels, and the hash mark '#' character for visible pixels. Omit leading and trailing empty columns (columns with no visible pixels) so that both the leftmost and rightmost output columns contain at least one visible pixel.</p><table border="1" cellpadding="10"><thead><tr><td><b>Example Input:</b></td><td><b>Example Output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace; letter-spacing: 2px;">8<br>###. ...#<br>#..# ...#<br>#..# ...#<br>###. ...#<br>#... ...#<br>#... ...#<br>#... #..#<br>#... ####<br>8<br>############# .... .............<br>..#.......... .... .............<br>..#.......... .##. .........#..#<br>..#.......... #..# .........#..#<br>..#.......... #..# .........#..#<br>..#.......... .##. ..........###<br>............. .... ............#<br>............. .... ############.<br>8<br>############# .............<br>..#.......... .............<br>..#.......... .........#..#<br>..#.......... .........#..#<br>..#.......... .........#..#<br>..#.......... ..........###<br>............. ............#<br>............. ############.<br>5<br>0..0 0..0<br>0..0 0..0<br>#### 0..0<br>0..0 0..0<br>0..0 ####<br>5<br>#.... .###.<br>#.... #...#<br>#...# #...#<br>#...# ....#<br>.###. ....#<br>3<br>### 0.0 ###<br>#.# 0.0 #.#<br>### 0.0 ###<br>3<br>0.0 ### 0.0<br>0.0 #.# 0.0<br>0.0 ### 0.0<br>8<br>#.... .... ..... ....<br>#.... .... ..... ....<br>#.... .##. #...# .##.<br>#.... #..# .#.#. #..#<br>#.... #..# .#.#. #..#<br>#.... #..# .#.#. ###.<br>#.... .##. ..#.. #...<br>##### .... ..#.. .###<br>0<br></td><td style="font-family: monospace; letter-spacing: 2px;" valign="top">1<br>###..#<br>#..#.#<br>#..#.#<br>###..#<br>#....#<br>#....#<br>#.#..#<br>#.####<br>2<br>#############<br>..#..........<br>..#..##..#..#<br>..#.#..#.#..#<br>..#.#..#.#..#<br>..#..##...###<br>............#<br>############.<br>3<br>.....#############<br>.......#..........<br>.......#.#..#.....<br>.......#.#..#.....<br>.......#.#..#.....<br>.......#..###.....<br>............#.....<br>############......<br>4<br>.........<br>.........<br>####.....<br>.........<br>.....####<br>5<br>#......###.<br>#.....#...#<br>#...#.#...#<br>#...#.....#<br>.###......#<br>6<br>###.....###<br>#.#.....#.#<br>###.....###<br>7<br>###<br>#.#<br>###<br>8<br>#..............<br>#..............<br>#..##.#...#.##.<br>#.#..#.#.#.#..#<br>#.#..#.#.#.#..#<br>#.#..#.#.#.###.<br>#..##...#..#...<br>#####...#...###<br></td></tr></tbody></table></body></html>
______________________________________________________
3847||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta name="generator" content="HTML Tidy for Windows (vers 12 April 2005), see www.w3.org"><meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><title>The Seven Percent Solution</title> <meta name="Author" content="Eric Shade"><meta name="author" content="Eric Shade"></head><body style="background-color: white;" lang="EN-US"><p>Uniform Resource Identifiers (or URIs) are strings like <i>http://icpc.baylor.edu/icpc/</i>, <i>mailto:foo@bar.org</i>, <i>ftp://127.0.0.1/pub/linux</i>, or even just <i>readme.txt</i> that are used to identify a resource, usually on the Internet or a local computer. Certain characters are reserved within URIs, and if a reserved character is part of an identifier then it must be <dfn>percent-encoded</dfn> by replacing it with a percent sign followed by two hexadecimal digits representing the ASCII code of the character. A table of seven reserved characters and their encodings is shown below. Your job is to write a program that can percent-encode a string of characters.</p><table align="center"><thead><tr><td><b>Character</b></td><td><b>Encoding</b></td></tr></thead><tbody><tr><td>" " (space)</td><td align="right">%20</td></tr><tr><td>"<tt>!</tt>" (exclamation point)</td><td align="right">%21</td></tr><tr><td>"<tt>$</tt>" (dollar sign)</td><td align="right">%24</td></tr><tr><td>"<tt>%</tt>" (percent sign)</td><td align="right">%25</td></tr><tr><td>"<tt>(</tt>" (left parenthesis)</td><td align="right">%28</td></tr><tr><td>"<tt>)</tt>" (right parenthesis)</td><td align="right">%29</td></tr><tr><td>"<tt>*</tt>" (asterisk)</td><td align="right">%2a</td></tr></tbody></table><p><b>Input:</b> The input consists of one or more strings, each 1&#8211;79 characters long and on a line by itself, followed by a line containing only "#" that signals the end of the input. The character "#" is used only as an end-of-input marker and will not appear anywhere else in the input. A string may contain spaces, but not at the beginning or end of the string, and there will never be two or more consecutive spaces.</p><p><b>Output:</b> For each input string, replace every occurrence of a reserved character in the table above by its percent-encoding, exactly as shown, and output the resulting string on a line by itself. Note that the percent-encoding for an asterisk is %2a (with a lowercase "a") rather than %2A (with an uppercase "A").</p><table border="1" cellpadding="10"><thead><tr><td><b>Example input:</b></td><td><b>Example output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">Happy Joy Joy!<br>http://icpc.baylor.edu/icpc/<br>plain_vanilla<br>(**)<br>?<br>the 7% solution<br>#<br></td><td style="font-family: monospace;" valign="top">Happy%20Joy%20Joy%21<br>http://icpc.baylor.edu/icpc/<br>plain_vanilla<br>%28%2a%2a%29<br>?<br>the%207%25%20solution<br></td></tr></tbody></table><p><small><i>Last modified on October 24, 2007 at 3:38 PM.</i></small></p></body></html>
______________________________________________________
3848||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta name="generator" content="HTML Tidy for Windows (vers 12 April 2005), see www.w3.org"><title>Slink</title> <meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><meta name="Author" content="Ron Pacheco"></head><body style="background-color: white;" lang="EN-US"><p>Slitherlink is a puzzle published by Nikoli, the Japanese company that popularized Sudoku. Slitherlink puzzles are gaining momentum, and books of Slitherlink puzzles have started showing up around the world. The puzzles are simple to understand, but can be challenging to solve. The puzzle is simply a rectangular grid of dots that forms a collection of cells, every cell being either blank or containing an integer from zero to three. The challenge is to connect the dots with line segments to form a cycle (a connected path such that every vertex has precisely two incident edges), in such a way that every cell with a value has exactly the number of incident edges as the digit it contains. Cells with no value may have any number of incident edges. A valid Slitherlink puzzle always contains sufficient non-empty cells to guarantee a unique solution. Below is an example from the Nikoli web site of a Slitherlink puzzle and its solution.</p><p><img alt="slitherlink example" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></p><p>It was shown by Takayuki Yato at the University of Tokyo that the general Slitherlink problem is NP-complete. (If you are not familiar with this concept, informally it means there is no "efficient" algorithm to solve the problem.) With a slight modification and some simple heuristics, however, programmatic solutions are possible. Our new puzzle, which we will term Slink, differs from Slitherlink only in that the puzzle may not have empty cells. That is, every cell must specify the number of incident edges. Below is the Slitherlink puzzle above converted to Slink (the added numbers are shown in gray). Note that the solution does not change, only the information given in the puzzle itself.</p><p><img alt="slink example" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></p><p>The heuristics for solving Slink arise from the nature of the puzzle itself. For example, consider a cell containing a zero. There must be no incident edges, therefore all edges incident to all zeros can be immediately removed from consideration as part of the solution path. Consider a three next to a zero. Because all the edges incident to the zero will be eliminated, the common edge shared with the three is also eliminated. But that leaves only three edges around the three, and therefore those three edges must be part of the solution path. The following table specifies the heuristic rules that must be properly applied to solve a Slink puzzle. The "x" characters between vertices mark edges that are not part of the solution path, while line segments between vertices mark edges that form part of the solution. Grey elements are the pattern the rule is based on, black elements indicate the additional edges that should be included or excluded if the rule is matched. Note that the pictured examples are for demonstration purposes only and do <i>not</i> illustrate every possible arrangement of the stated rule!</p><table border="1" cellpadding="3"><tr><th>Examples</th><th>Rule Specification</th><td bgcolor="#CCCCCC"> </td><th>Examples</th><th>Rule Specification</th></tr><tr><td><img alt="case 1" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>The easiest and most obvious of all the rules. Cells containing a zero have no incident edges, so all the edges around a zero should be removed from consideration as part of the solution path.</td><td bgcolor="#CCCCCC"> </td><td><img alt="case 2" src="http://livearchive.onlinejudge.org/external/38/p3848a.png><br><br><img alt="case 3" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If a cell contains the value <i>n</i> and only <i>n</i> incident edges remain (i.e. have not been eliminated), then the <i>n</i> remaining edges must be part of the solution path. Two examples of this occurring are shown here.</td></tr><tr><td><img alt="case 4" src="http://livearchive.onlinejudge.org/external/38/p3848a.png><br><br><img alt="case 5" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If a cell contains the value <i>n</i> and <i>n</i> incident edges have already been included in the path, the remaining edges can be eliminated. Two examples of this occurring are shown here.</td><td bgcolor="#CCCCCC"> </td><td><img alt="case 6" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If two 3's are adjacent to one another, the common edge between the cells as well as the outer edges of both cells are part of the solution path. One example of this arrangement occurring is shown here.</td></tr><tr><td><img alt="case 7" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If two 3's occur diagonally adjacent, the opposing corners as shown here must be part of the solution path. One example of such an arrangement is shown here.</td><td bgcolor="#CCCCCC"> </td><td><img alt="case 8" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If an edge enters a vertex for which only a single exit remains, that exit must be part of the solution path. One such example is shown here.</td></tr><tr><td><img alt="case 9" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If a vertex has two incident edges, the other edges can be eliminated from consideration as part of the solution path. One such example is shown here.</td><td bgcolor="#CCCCCC"> </td><td><img alt="case 10" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If any vertex has three incident edges excluded, the fourth incident edge can be excluded as well. One possible arrangement of this occurring is shown here.</td></tr><tr><td><img alt="case 11" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>A 3 for which two of the exits are blocked as shown, such as in a corner of the puzzle, must include the two edges incident to the blocked vertex.</td><td bgcolor="#CCCCCC"> </td><td><img alt="case 12" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If the exits at one corner of a 2 are blocked, and one exit at an adjacent vertex around the 2 is also blocked, then the unblocked exit at that adjacent vertex must be part of the solution path. One example of this arrangement is shown here.</td></tr><tr><td><img alt="case 13" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>A 1 for which the exit paths at one of its incident vertices are both blocked as shown, such as might occur in the corner of the puzzle, must also eliminate the other two edges incident to that vertex as shown.</td><td bgcolor="#CCCCCC"> </td><td><img alt="case 14" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If the solution path enters the corner of a 3, and the exit that goes away from the 3 at that same corner is blocked, then the two edges around the three incident to the opposite corner must be part of the solution path.</td></tr><tr><td><img alt="case 15" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If a 3 and 1 are diagonally adjacent, and the corner of the 3 furthest from the 1 has the exit segments blocked as shown, then the edges incident to the far corner of the 1 becomes blocked. The opposite is also true; if the far corner of the 1 had been blocked, then the exit segments at the far corner of the 3 would become blocked in the same manner.</td><td bgcolor="#CCCCCC"> </td><td><img alt="case 16" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If the solution path enters the corner of 2 and the path leading away from the 2 at the same corner is blocked, then if one of the paths leading away from the 2 at the diagonally opposite corner is also blocked, the other edge leading away from the 2 at that same corner must be part of the solution path. One example of this arrangement occurring is shown here.</td></tr><tr><td><img alt="case 17" src="http://livearchive.onlinejudge.org/external/38/p3848a.png></td><td>If the solution path enters the corner of a 1, and the exit that goes away from the 1 at that same corner is blocked, then the two edges around the three incident to the opposite corner must be eliminated from the solution path.</td><td bgcolor="#CCCCCC"> </td><td> </td><td> </td></tr></table><p><b>Input:</b> The input for this problem is a set of Slink puzzles to be solved. The first line of a Slink problem's input contains two integers, <i>r</i> and <i>c</i>, separated by a space, the number of rows and the number of columns in the puzzle. The next <i>r</i> rows of the input contain <i>c</i> integers, space delimited, valued from 0 to 3, which specify the content of the puzzle. The minimum dimension of a puzzle is 2 by 2 cells, and the maximum dimension is 20 by 20 cells. It is guaranteed that a unique solution to every input puzzle exists and can be determined with the above rules if a rule is always applied when it can be applied. A line with values of zero for <i>r</i> and <i>c</i> marks the end of the input.</p><p><b>Output:</b> The output for this problem is a graphical representation of the Slink puzzle solution. The first data set is 1, the second data set is 2, etc. On a line by itself display the data set number, followed by the solution in exactly the format demonstrated below. Vertical edges are output as the vertical bar '|' character, horizontal edges are output as dash '-' characters, vertices where the path changes direction are output as plus signs '+', and cell numbers are always displayed with a blank to the left and to the right. Further, surround the entire output with a border made up of hash marks '#' such that the number in the upper left cell of the puzzle always occurs four positions to the right of the border and three position below the border, and the number in the lower right cell always occurs four positions to the left of the border and three positions above the border.<br></p><table border="1" cellpadding="10"><thead><tr><td><b>Example Input:</b></td><td><b>Example Output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace; letter-spacing: 2px;" valign="top">8 8<br>1 0 1 1 2 2 1 3<br>3 3 3 3 2 3 3 2<br>2 2 0 1 1 2 2 0<br>2 3 1 1 0 1 2 2<br>2 1 2 3 1 1 0 2<br>1 2 2 2 2 3 2 1<br>3 2 1 3 1 1 3 2<br>1 0 0 2 3 2 3 2<br>6 6<br>0 0 1 1 0 0<br>0 2 2 2 2 0<br>1 2 0 0 2 1<br>1 2 0 0 2 1<br>0 2 2 2 2 0<br>0 0 1 1 0 0<br>2 2<br>2 2<br>2 2<br>3 5<br>3 3 3 2 3<br>1 2 1 3 2<br>3 3 2 2 2<br>0 0<br></td><td style="font-family: monospace; letter-spacing: 2px;" valign="top"><pre>
1
#####################################
#                                   #
#                 +---------------+ #
#   1   0   1   1 | 2   2   1   3 | #
# +---+   +---+   |   +---+   +---+ #
# | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 2   #
# |   +---+   +---+   |   +---+     #
# | 2   2   0   1   1 | 2   2   0   #
# +-------+           +-------+     #
#   2   3 | 1   1   0   1   2 | 2   #
# +-------+   +---+           +---+ #
# | 2   1   2 | 3 | 1   1   0   2 | #
# |       +---+   |   +---+       | #
# | 1   2 | 2   2 | 2 | 3 | 2   1 | #
# |   +---+   +---+   |   +---+   | #
# | 3 | 2   1 | 3   1 | 1   3 | 2 | #
# +---+       +---+   |   +---+   | #
#   1   0   0   2 | 3 | 2 | 3   2 | #
#                 +---+   +-------+ #
#                                   #
#####################################
2
#############################
#                           #
#                           #
#   0   0   1   1   0   0   #
#         +-------+         #
#   0   2 | 2   2 | 2   0   #
#     +---+       +---+     #
#   1 | 2   0   0   2 | 1   #
#     |               |     #
#   1 | 2   0   0   2 | 1   #
#     +---+       +---+     #
#   0   2 | 2   2 | 2   0   #
#         +-------+         #
#   0   0   1   1   0   0   #
#                           #
#                           #
#############################
3
#############
#           #
# +-------+ #
# | 2   2 | #
# |       | #
# | 2   2 | #
# +-------+ #
#           #
#############
4
#########################
#                       #
# +---+   +---+   +---+ #
# | 3 | 3 | 3 | 2 | 3 | #
# |   +---+   |   |   | #
# | 1   2   1 | 3 | 2 | #
# |   +---+   +---+   | #
# | 3 | 3 | 2   2   2 | #
# +---+   +-----------+ #
#                       #
#########################
</pre></td></tr></tbody></table></body></html>
______________________________________________________
3849||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta name="generator" content="HTML Tidy for Windows (vers 12 April 2005), see www.w3.org"><meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><title>Persistent Bits</title> <meta name="Author" content="Eric Shade"><meta name="author" content="Andy Harrington"></head><body style="background-color: white;"><p>WhatNext Software creates sequence generators that they hope will produce fairly random sequences of 16-bit unsigned integers in the range 0&#8211;65535. In general a sequence is specified by integers A, B, C, and S, where 1 &#8804; A &lt; 32768, 0 &#8804; B &lt; 65536, 2 &#8804; C &lt; 65536, and 0 &#8804; S &lt; C. S is the first element (the <dfn>seed</dfn>) of the sequence, and each later element is generated from the previous element. If X is an element of the sequence, then the next element is</p><blockquote>(A*X + B) % C</blockquote><p>where '%' is the remainder or modulus operation. Although every element of the sequence will be a 16-bit unsigned integer less than 65536, the intermediate result A*X + B may be larger, so calculations should be done with a 32-bit <i>int</i> rather than a 16-bit <i>short</i> to ensure accurate results.</p><p>Some values of the parameters produce better sequences than others. The most embarrassing sequences to WhatNext Software are ones that never change one or more bits. A bit that never changes throughout the sequence is <dfn>persistent</dfn>. Ideally, a sequence will have no persistent bits. Your job is to test a sequence and determine which bits are persistent.</p><p>For example, a particularly bad choice is A = 2, B = 5, C = 18, and S = 3. It produces the sequence 3, (2*3+5)%18 = 11, (2*11+5)%18 = 9, (2*9+5)%18 = 5, (2*5+5)%18 = 15, (2*15+5)%18 = 17, then (2*17+5)%18 = 3 again, and we're back at the beginning. So the sequence repeats the the same six values over and over:</p><table style="text-align: left; width: 200px;" border="1" cellpadding="2" cellspacing="2"><tbody><tr><td style="font-family: monospace;" align="center" valign="middle">Decimal</td><td style="font-family: monospace;" align="center" valign="middle">16-Bit Binary</td></tr><tr><td style="font-family: monospace;" align="center" valign="middle">3</td><td style="font-family: monospace;" align="center" valign="middle">0000000000000011</td></tr><tr><td style="font-family: monospace;" align="center" valign="middle">11</td><td style="font-family: monospace;" align="center" valign="middle">0000000000001011</td></tr><tr><td style="font-family: monospace;" align="center" valign="middle">9</td><td style="font-family: monospace;" align="center" valign="middle">0000000000001001</td></tr><tr><td style="font-family: monospace;" align="center" valign="middle">5</td><td style="font-family: monospace;" align="center" valign="middle">0000000000000101</td></tr><tr><td style="font-family: monospace;" align="center" valign="middle">15</td><td style="font-family: monospace;" align="center" valign="middle">0000000000001111</td></tr><tr><td style="font-family: monospace;" align="center" valign="middle">17</td><td style="font-family: monospace;" align="center" valign="middle">0000000000010001</td></tr><tr><td align="center" valign="middle">overall</td><td style="font-family: monospace;" align="center" valign="middle">00000000000????1</td></tr></tbody></table><p>The last line of the table indicates which bit positions are always 0, always 1, or take on both values in the sequence. Note that 12 of the 16 bits are persistent. (Good random sequences will have no persistent bits, but the converse is not necessarily true. For example, the sequence defined by A = 1, B = 1, C = 64000, and S = 0 has no persistent bits, but it's also not random: it just counts from 0 to 63999 before repeating.)  Note that a sequence does not need to return to the seed: with A = 2, B = 0, C = 16, and S = 2, the sequence goes 2, 4, 8, 0, 0, 0, ....</p><p><b>Input:</b> There are from one to sixteen datasets followed by a line containing only 0. Each dataset is a line containing decimal integer values for A, B, C, and S, separated by single blanks.</p><p><b>Output:</b> There is one line of output for each data set, each containing 16 characters, either '1', '0', or '?' for each of the 16 bits in order, with the most significant bit first, with '1' indicating the corresponding bit is always 1, '0' meaning the corresponding bit is always 0, and '?' indicating the bit takes on values of both 0 and 1 in the sequence.</p><table border="1" cellpadding="10"><thead><tr><td><b>Example input:</b></td><td><b>Example output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">2 5 18 3<br>1 1 64000 0<br>2 0 16 2<br>256 85 32768 21845<br>1 4097 32776 248<br>0<br></td><td style="font-family: monospace;" valign="top">00000000000????1<br>????????????????<br>000000000000???0<br>0101010101010101<br>0???000011111???<br><br></td></tr></tbody></table><p><small><i>Last modified on October 26, 2007 at 11:38 AM.</i></small></p></body></html>
______________________________________________________
3850||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta name="generator" content="HTML Tidy for Windows (vers 12 April 2005), see www.w3.org"><title>Here We Go(relians) Again</title> <meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><meta name="Author" content="Ron Pacheco"></head><body style="background-color: white;" lang="EN-US"><p>The Gorelians are a warlike race that travel the universe conquering new worlds as a form of recreation. Given their violent, fun-loving nature, keeping their leaders alive is of serious concern. Part of the Gorelian security plan involves changing the traffic patterns of their cities on a daily basis, and routing all Gorelian Government Officials to the Government Building by the fastest possible route.</p><p>Fortunately for the Gorelian Minister of Traffic (that would be you), all Gorelian cities are laid out as a rectangular grid of blocks, where each block is a square measuring 2520 rels per side (a rel is the Gorelian Official Unit of Distance). The speed limit between two adjacent intersections is always constant, and may range from 1 to 9 rels per blip (a blip, of course, being the Gorelian Official Unit of Time). Since Gorelians have outlawed decimal numbers as unholy (hey, if you're the dominant force in the known universe, you can outlaw whatever you want), speed limits are always integer values. This explains why Gorelian blocks are precisely 2520 rels in length: 2520 is the least common multiple of the integers 1 through 9. Thus, the time required to travel between two adjacent intersections is always an integer number of blips.</p><p>In all Gorelian cities, Government Housing is always at the northwest corner of the city, while the Government Building is always at the southeast corner. Streets between intersections might be one-way or two-way, or possibly even closed for repair (all this tinkering with traffic patterns causes a lot of accidents). Your job, given the details of speed limits, street directions, and street closures for a Gorelian city, is to determine the fastest route from Government Housing to the Government Building. (It is possible, due to street directions and closures, that no route exists, in which case a Gorelian Official Temporary Holiday is declared, and the Gorelian Officials take the day off.)</p><div align="center"><img src="http://livearchive.onlinejudge.org/external/38/p3850.png alt="Gorelian city"></div><p>The picture above shows a Gorelian City marked with speed limits, one way streets, and one closed street. It is assumed that streets are always traveled at the exact posted speed limit, and that turning a corner takes zero time. Under these conditions, you should be able to determine that the fastest route from Government Housing to the Government Building in this city is 1715 blips. And if the next day, the only change is that the closed road is opened to two way traffic at 9 rels per blip, the fastest route becomes 1295 blips. On the other hand, suppose the three one-way streets are switched from southbound to northbound (with the closed road remaining closed). In that case, no route would be possible and the day would be declared a holiday.</p><p><b>Input:</b> The input consists of a set of cities for which you must find a fastest route if one exists. The first line of an input case contains two integers, which are the vertical and horizontal number of city blocks, respectively. The smallest city is a single block, or 1 by 1, and the largest city is 20 by 20 blocks. The remainder of the input specifies speed limits and traffic directions for streets between intersections, one row of street segments at a time. The first line of the input (after the dimensions line) contains the data for the northernmost east-west street segments. The next line contains the data for the northernmost row of north-south street segments. Then the next row of east-west streets, then north-south streets, and so on, until the southernmost row of east-west streets. Speed limits and directions of travel are specified in order from west to east, and each consists of an integer from 0 to 9 indicating speed limit, and a symbol indicating which direction traffic may flow. A zero speed limit means the road is closed. All digits and symbols are delimited by a single space. For east-west streets, the symbol will be an asterisk '*' which indicates travel is allowed in both directions, a less-than symbol '&lt;' which indicates travel is allowed only in an east-to-west direction, or a greater-than symbol '&gt;' which indicates travel is allowed only in a west-to-east direction. For north-south streets, an asterisk again indicates travel is allowed in either direction, a lowercase "vee" character 'v' indicates travel is allowed only in a north-to-south directions, and a caret symbol '^' indicates travel is allowed only in a south-to-north direction. A zero speed, indicating a closed road, is always followed by an asterisk. Input cities continue in this manner until a value of zero is specified for both the vertical and horizontal dimensions.</p><p><b>Output:</b> For each input scenario, output a line specifying the integer number of blips of the shortest route, a space, and then the word "blips". For scenarios which have no route, output a line with the word "Holiday".</p><table border="1" cellpadding="10"><thead><tr><td><b>Example Input:</b></td><td><b>Example Output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">2 2<br>9 * 9 *<br>6 v 0 * 8 v<br>3 * 7 *<br>3 * 6 v 3 *<br>4 * 8 *<br>2 2<br>9 * 9 *<br>6 v 9 * 8 v<br>3 * 7 *<br>3 * 6 v 3 *<br>4 * 8 *<br>2 2<br>9 * 9 *<br>6 ^ 0 * 8 ^<br>3 * 7 *<br>3 * 6 ^ 3 *<br>4 * 8 *<br>0 0<br></td><td style="font-family: monospace;" valign="top">1715 blips<br>1295 blips<br>Holiday<br></td></tr></tbody></table></body></html>
______________________________________________________
3851||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta name="generator" content="HTML Tidy for Windows (vers 12 April 2005), see www.w3.org"><meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><title>Electronic Document Security</title> <meta name="Author" content="Eric Shade"><meta name="author" content="Eric Shade"></head><body style="background-color: white;" lang="EN-US"><p>The Tyrell corporation uses a state-of-the-art electronic document system that controls all aspects of document creation, viewing, editing, and distribution. Document security is handled via <dfn>access control lists</dfn> (ACLs). An ACL defines a set of entities that have access to the document, and for each entity defines the set of rights that it has. Entities are denoted by uppercase letters; an entity might be a single individual or an entire division. Rights are denoted by lowercase letters; examples of rights are <i>a</i> for <i>append</i>, <i>d</i> for <i>delete</i>, <i>e</i> for <i>edit</i>, and <i>r</i> for <i>read</i>.</p><p>The ACL for a document is stored along with that document, but there is also a separate ACL <dfn>log</dfn> stored on a separate log server. All documents start with an empty ACL, which grants no rights to anyone. Every time the ACL for a document is changed, a new entry is written to the log. An entry is of the form <i>ExR</i>, where <i>E</i> is a nonempty set of entities, <i>R</i> is a nonempty set of rights, and <i>x</i> is either "+", "&#8211;", or "=". Entry <i>E</i>+<i>R</i> says to grant all the rights in <i>R</i> to all the entities in <i>E</i>, entry <i>E</i>&#8211;<i>R</i> says to remove all the rights in <i>R</i> from all the entities in <i>E</i>, and entry <i>E</i>=<i>R</i> says that all the entities in <i>E</i> have exactly the rights in <i>R</i> and no others. An entry might be redundant in the sense that it grants an entity a right it already has and/or denies an entity a right that it doesn't have. A log is simply a list of entries separated by commas, ordered chronologically from oldest to most recent. Entries are cumulative, with newer entries taking precedence over older entries if there is a conflict.</p><p>Periodically the Tyrell corporation will run a security check by using the logs to compute the current ACL for each document and then comparing it with the ACL actually stored with the document. A mismatch indicates a security breach. Your job is to write a program that, given an ACL log, computes the current ACL.</p><p><b>Input:</b> The input consists of one or more ACL logs, each 3&#8211;79 characters long and on a line by itself, followed by a line containing only "#" that signals the end of the input. Logs will be in the format defined above and will not contain any whitespace.</p><p><b>Output:</b> For each log, output a single line containing the log number (logs are numbered sequentially starting with one), then a colon, then the current ACL in the format shown below. Note that (1) spaces do not appear in the output; (2) entities are listed in alphabetical order; (3) the rights for an entity are listed in alphabetical order; (4) entities with no current rights are not listed (even if they appeared in a log entry), so it's possible that an ACL will be empty; and (5) if two or more consecutive entities have exactly the same rights, those rights are only output once, after the list of entities.</p><table border="1" cellpadding="10"><thead><tr><td><b>Example input:</b></td><td><b>Example output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">MC-p,SC+c<br>YB=rde,B-dq,AYM+e<br>GQ+tju,GH-ju,AQ-z,Q=t,QG-t<br>JBL=fwa,H+wf,LD-fz,BJ-a,P=aw<br>#<br></td><td style="font-family: monospace;" valign="top">1:CSc<br>2:AeBerMeYder<br>3:<br>4:BHJfwLPaw<br></td></tr></tbody></table><p><small><i>Last modified on October 20, 2007 at 5:47 PM.</i></small></p></body></html>
______________________________________________________
3852||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta name="generator" content="HTML Tidy for Windows (vers 12 April 2005), see www.w3.org"><meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><title>Guard</title> <meta name="Author" content="Eric Shade"><meta name="author" content="Andy Harrington"></head><body style="background-color: white;"><p style="text-align: center;"><img style="width: 436px; height: 337px;" alt="Guard Placement" src="http://livearchive.onlinejudge.org/external/38/p3852.png></p><p>The Bluewater Security Company provides guards for clients with valuable possessions. Bluewater has found that clients are interested in having guards posted where they can see everything that is valuable merely by turning their heads, and also like guards to be posted particularly close to particularly valuable items. A sample site layout is shown above. Ignore the three black dots for now. Various locations are labeled and assigned values. For instance location A at coordinates (0,8) is the position of an item with value 4. Locations showing a value 0, like G, do not have a valuable item. The straight lines indicate corridors. For simplicity, corridors are modeled as line segments with 0 width. A guard at an intersection point of several corridors can see and therefore guard the items on each of the corridors. If Bluewater were contracted to supply 3 guards, they might choose to post them at the positions indicated with the small black dots. The guard not at an already labeled position is at (15.5, 6). To model the desire for guards to be closer to items of higher value, Bluewater calculates the <span style="font-style: italic;">risk</span> to a valuable item to be the value of the item times the minimum distance to a guard that can <span style="font-style: italic;">see</span> the item. Even if a guard is close to an item that is around a corner, that guard does <span style="font-style: italic;">not</span> affect the risk to the item, since the guard cannot see around a corner. In the diagram shown, the risks to the items are A: 4x5=20, C: 4x2.5=10, D: 2x0=0, .... The largest risks are for H: 50x7.5=375 and I: 50x7.5=375, so the maximum risk to any one item is 375. With this site layout, no arrangement of 3 guards would provide a lower maximum risk, so this arrangement of 3 guards minimizes the maximum risk. Bluewater would like to be able to tell any client who requests a particular number of guards for a particular site layout, what the minimized maximum risk will be.</p><p><b>Input:</b> The input will consist of one to sixteen data sets, followed by a line containing only 0. On each line the data will consist of blank separated tokens.</p><p>The first line of a dataset contains integers <span style="font-style: italic;">p c g</span>, where <span style="font-style: italic;">p</span> is the number of points specified, <span style="font-style: italic;">c</span> is the number of corridors, and <span style="font-style: italic;">g</span> is the number of guards to be placed. Constraints are 1<span style="font-style: italic;">&lt; p</span> &lt; 12; 0 &lt; <span style="font-style: italic;">c</span> &lt; 12; 0 &lt; <span style="font-style: italic;">g</span> &lt; 5.  </p><p>Next in the dataset are a total of <span style="font-style: italic;">p</span> groups of four tokens, each consisting of a capital letter and three nonnegative integers <span style="font-style: italic;">L</span> <span style="font-style: italic;">x y v</span> indicating the point (<span style="font-style: italic;">x</span>, <span style="font-style: italic;">y</span>) with label <span style="font-style: italic;">L</span> contains an item with value <span style="font-style: italic;">v</span>. If <span style="font-style: italic;">p</span> is no greater than 6, these groups will all be on one line. If <span style="font-style: italic;">p</span> is greater than 6, then the seventh and further groups will be on the next line. Labels will be consecutive letters starting from A. All the numbers are less than 1000. Each of the points is unique. A value of 0 for <span style="font-style: italic;">v</span> means there is no item of value there. The number of locations with items of value will be at least as large as the number of guards. </p><p>The last line of a dataset contains <span style="font-style: italic;">c </span>strings of letters, one for each corridor. For each corridor the letters are labels for points along the corridor, in order along the line segment from one end to the other, including both endpoints, all intersection points with other corridors, and all locations on the corridor with a valuable item. Each of the points given in the dataset will lie on at least one of the corridors.  </p><p><b>Output:</b> There is one line of output for each data set.  If there are not enough guards supplied to be able to see all the valuables, the line is "too few guards".  Otherwise the line is an unsigned number <span style="font-style: italic;">r</span> rounded to two places beyond the decimal point, where r is the minimum value over all placements of <span style="font-style: italic;">g</span> guards of the maximum "risk" to the valuables.</p><p>The first example dataset matches the illustration above, and the next three examples only vary the number of guards.</p><table border="1" cellpadding="10"><thead><tr><td><b>Example input:</b></td><td><b>Example output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">11 5 3<br>A 0 8 4 B 5 8 0 C 14 8 4 D 21 8 2 E 25 8 1 F 5 22 1<br>G 5 20 0 H 11 12 50 I 20 0 50 J 19 10 5 K 25 4 5<br>ABCDE AG FGB GHCI JDK<br>11 5 2<br>A 0 8 4 B 5 8 0 C 14 8 4 D 21 8 2 E 25 8 1 F 5 22 1<br>G 5 20 0 H 11 12 50 I 20 0 50 J 19 10 5 K 25 4 5<br>ABCDE AG FGB GHCI JDK<br>11 5 1<br>A 0 8 4 B 5 8 0 C 14 8 4 D 21 8 2 E 25 8 1 F 5 22 1<br>G 5 20 0 H 11 12 50 I 20 0 50 J 19 10 5 K 25 4 5<br>ABCDE AG FGB GHCI JDK<br>11 5 4<br>A 0 8 4 B 5 8 0 C 14 8 4 D 21 8 2 E 25 8 1 F 5 22 1<br>G 5 20 0 H 11 12 50 I 20 0 50 J 19 10 5 K 25 4 5<br>ABCDE AG FGB GHCI JDK<br>3 3 1<br>A 0 0 50 B 0 3 60 C 4 0 20<br>AB CB CA<br>0<br></td><td style="font-family: monospace;" valign="top">375.00<br>1250.00<br>too few guards<br>21.21<br>150.00<br><br></td></tr></tbody></table><p><small><i>Last modified on October 28, 2007 at 8:15 AM.</i></small></p></body></html>
______________________________________________________
3853||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta name="generator" content="HTML Tidy for Windows (vers 12 April 2005), see www.w3.org"><meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><title>Rock Skipping</title> <meta name="Author" content="Eric Shade"><meta name="author" content="Eric Shade"></head><body style="background-color: white;" lang="EN-US"><p>As a member of the International Rock-Skipping League, you travel to a different lake each week and compete in a rock-skipping contest. The goal is to throw a rock so that it skips as many times as possible; the exact rules for determining the winner are given below. To make the competitions interesting, the IRSL often chooses lakes with logs, sandbars, and other obstacles. You are provided with a side-view, water-level "map" of the lake as shown in the top line of the example below. (The numbers 0..29 below the map are just for reference.) A period (".") indicates clear water, where a rock will skip; any other character indicates some kind of obstacle that will stop a rock.</p><blockquote><tt>...=...**..#...@....:.:.:..=..</tt><br><tt>______________________________</tt><br><tt>          11111111112222222222</tt><br><tt>012345678901234567890123456789</tt></blockquote><p>You stand at the left end of the lake. You can throw a rock so that it lands at any position in the lake, and then skips at any fixed interval thereafter. So a throw can be defined as a pair (<i>i</i>,<i>d</i>), where <i>i</i> &ge; 0 is the initial landing position and <i>d</i> &gt; 0 is the distance between skips. Note that <i>d</i> must be positive. The <dfn>count</dfn> of a throw is the number of times that it skips on the water. The <dfn>length</dfn> is the position of its last contact with either the water or an obstacle. To rank two distinct throws, use the following criteria, in order, until a winner is determined: count (highest wins); length (greatest wins); initial position (greatest wins); distance between skips (smallest wins).</p><p>For the map shown above, throw (27,2) hits the obstacle at position 27; it has count 0 and length 27. Throw (16,1) skips at positions 16, 17, 18, and 19, then hits the obstacle at position 20; it has count 4 and length 20, so it beats throw (27,2). Throw (2,7) skips at positions 2, 9, 16, and 23, then skips over the lake; it has count 4 and length 23, so it beats throw (16,1). Throw (1,4) skips at positions 1, 5, 9, 13, 17, 21, 25, and 29, then skips over the lake; it has count 8 and distance 29, and is the best possible throw for this lake.</p><p><b>Input:</b> The input consists of one or more lake maps, each 1&#8211;40 characters long and on a line by itself, followed by a line containing only "END" that signals the end of the input. Positions within a map are numbered starting with zero. Maps will only contain printable ASCII punctuation characters. A period indicates clear water and any other character indicates an obstacle.</p><p><b>Output:</b> For each map, compute the best possible throw (<i>i</i>,<i>d</i>), then output a line containing <i>i</i> and <i>d</i> separated by one space.</p><table border="1" cellpadding="10"><thead><tr><td><b>Example input:</b></td><td><b>Example output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">...=...**..#...@....:.:.:..=..<br>.(+)<br>/^\.<br>*++&*<br>END<br></td><td style="font-family: monospace;" valign="top">1 4<br>0 3<br>3 1<br>4 1<br></td></tr></tbody></table><p><small><i>Last modified on October 26, 2007 at 9:28 AM.</i></small></p></body></html>
______________________________________________________
3854||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>One is an Interesting Number</title><p>Numbers are interesting, but some are inherently more interesting than others, by various criteria. Given a collection of numbers, you are to find the most interesting ones.</p><p>A number <i>X</i> is more interesting than another number <i>Y</i> if it has more <i>attributes</i> than <i>Y</i>. For the purposes of this problem, the attributes that are interesting are:</p><p></p><table align="center" border="1"><tbody><tr><td><b>Attribute Name</b></td><td><b>Description</b></td><td><b>Example Numbers</b></td></tr><tr><td><i>prime</i></td><td>The number is prime (not divisible by numbers other than itself and 1).</td><td>2, 113, 2<sup>32582657</sup> â 1</td></tr><tr><td><i>square</i></td><td>The number is the second power of an integer.</td><td>4, 225, 1089</td></tr><tr><td><i>cube</i></td><td>The number is the third power of an integer.</td><td>8, 3375, 35937</td></tr><tr><td><i>quad</i></td><td>The number is the fourth power of an integer.</td><td>16, 50625, 1185921</td></tr><tr><td><i>sum-multiple</i></td><td>The number is a multiple of the sum of its digits.</td><td>1, 24, 100</td></tr><tr><td><i>multiple-multiple</i></td><td>The number is a multiple of the number made when multiplying its digits together.</td><td>1, 24, 315</td></tr></tbody></table><p>Note that 0 has no multiples other than itself, and 1 is not prime.</p><p>In addition to the above attributes, there are also those which depend on the other numbers in a given collection:</p><p></p><table align="center" border="1"><tbody><tr><td><b>Attribute Name</b></td><td><b>Description</b></td></tr><tr><td><i>factor</i></td><td>The number is a factor of another number in the collection.</td></tr><tr><td><i>multiple</i></td><td>The number is a multiple of another number in the collection.</td></tr><tr><td><i>other-square</i></td><td>The number is the second power of another number in the collection.</td></tr><tr><td><i>other-cube</i></td><td>The number is the third power of another number in the collection.</td></tr><tr><td><i>other-quad</i></td><td>The number is the fourth power of another number in the collection.</td></tr><tr><td><i>other-sum-multiple</i></td><td>The number is a multiple of the sum of digits of another number in the collection.</td></tr><tr><td><i>other-multiple-multiple</i></td><td>The number is a multiple of the number made when multiplying the digits of another number in the collection together.</td></tr></tbody></table><p>This makes for a total of thirteen possible attributes. Note that meeting the criteria for a particular attribute in multiple ways (1 is the factor of all other numbers, for example) still only counts as a single instance of an attribute.</p><p>Given a collection of numbers, you are to determine which numbers in that collection are most interesting.</p><p><b>Input:</b></p><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p><ul><li>A line containing a single integer <i>M</i> (1 &le; <i>M</i> &le; 100) indicating how many numbers are in the collection;</li> <li>A series of <i>M</i> lines, each with a single integer <i>X</i> (1 &le; <i>X</i> &le; 1000000). There will be no duplicate integers <i>X</i> within the same data set.</li></ul><p><b>Output:</b></p><p>For each data set in the input, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, and so on. For each data set, print the number or numbers that are most interesting in the collection. If more than one number ties for "most interesting," print them in ascending order, one to a line.</p><p><b>Sample Input:</b></p><pre>2
2
1
100
3
2
3
4
</pre><p><b>Sample Output:</b></p><pre>DATA SET #1
1
DATA SET #2
4
</pre></body></html>
______________________________________________________
3855||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Verdis Quo</title><p>The Romans used letters from their Latin alphabet to represent each of the seven numerals in their number system. The list below shows which letters they used and what numeric value each of those letters represents:</p><p></p><table border="0"><tbody><tr><td align="right">I</td><td></td><td>=</td><td>1</td></tr><tr><td align="right">V</td><td></td><td>=</td><td>5</td></tr><tr><td align="right">X</td><td></td><td>=</td><td>10</td></tr><tr><td align="right">L</td><td></td><td>=</td><td>50</td></tr><tr><td align="right">C</td><td></td><td>=</td><td>100</td></tr><tr><td align="right">D</td><td></td><td>=</td><td>500</td></tr><tr><td align="right">M</td><td></td><td>=</td><td>1000</td></tr></tbody></table><p>Using these seven numerals, any desired number can be formed by following the two basic <i>additive</i> and <i>subtractive</i> rules. To form a number using the additive rule the Roman numerals are simply written from left to right in descending order, and the value of each roman numeral is added together. For example, the number MMCLVII has the value 1000 + 1000 + 100 + 50 + 5 + 1 + 1 = 2157. Using the addition rule alone could lead to very long strings of letters, so the subtraction rule was invented as a result. Using this rule, a smaller Roman numeral to the left of a larger one is subtracted from the total. In other words, the number MCMXIV is interpreted as 1000 â 100 + 1000 + 10 â 1 + 5 = 1914.</p><p>Over time the Roman number writing system became more standardized and several additional rules were developed. The additional rules used today are:</p><p></p><ol><li>The I, X, or C Roman numerals may only be repeated up to three times in succession. In other words, the number 4 must be represented as IV and <i>not</i> as IIII. </li><li>The V, L, or D numerals may never be repeated in succession, and the M numeral may be repeated as many times as necessary. </li><li>Only one smaller numeral can be placed to the left of another. For example, the number 18 is represented as XVIII but <i>not</i> as XIIX. </li><li>Only the I, X, or C can be used as subtractive numerals. </li><li>A subtractive I can only be used to the left of a V or X. Likewise a X can only appear to the left of a L or C, and a C can only be used to the left of a D or M. For example, 49 must be written as XLIX and <i>not</i> as IL. </li></ol><p>Your goal is to write a program which converts Roman numbers to base 10 integers.</p><p><b>Input:</b></p><p>The input to this problem will consist of the following:</p><ul><li>A line with a single integer "<i>N</i>" (1 &le; <i>N</i> &le; 1000), where <i>N</i> indicates how many Roman numbers are to be converted. </li><li>A series of <i>N</i> lines of input with each line containing one Roman number. Each Roman number will be in the range of 1 to 10,000 (inclusive) and will obey all of the rules laid out in the problem's introduction. </li></ul><p><b>Output:</b></p><p>For each of the <i>N</i> Roman numbers, print the equivalent base 10 integer, one per line.</p><p></p><p><b>Sample Input:</b></p><pre>3        <!--was 2, though seemed to be an old value-->
IX
MMDCII
DXII
</pre><p><b>Sample Output:</b></p><pre>9
2602
512
</pre></body></html>
______________________________________________________
3856||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>The Screen Behind the Mirror</title><p>Dr. Evil has contracted your valuable services to build for him the world's most powerful "laser". Of course before you spend one billion dollars building the thing, you want to run some simulations first to make sure everything will work as designed. For this phase of the project, you will be simulating part of the aiming system which uses mirrors and other optics to change the direction of the laser beam.</p><p>The simulation consists of a flat square table with mirrors, beam splitters, and beam detectors arranged on the tabletop, and with each object represented by a one dimensional line segment. The list below describes each of the object types in detail:</p><ul><li><i>mirror</i> : A mirror object will reflect any laser beam striking its surface. The reflected beam leaves at the same angle of incidence as the incoming beam. Note that <b>both sides of a mirror object are reflective</b>. </li><li><p><i>detector</i> : A detector is an opaque object which absorbs any laser beam striking it. The simulation must also keep track of which detectors are struck by a laser for program output purposes. Note that a laser beam strike on either side of a detector counts as a "hit".</p></li><li><p><i>splitter</i> : When a laser beam strikes a splitter, it divides into two beams. One of the new beams will reflect from the splitter surface (as with a mirror), and the other beam will pass through the splitter without changing direction. A splitter will function the same way regardless which side of it is struck by a laser beam.</p></li></ul><p>See the figures below for examples of a laser beam's interaction with each of the possible object types:</p><p></p><table class="example" noborder="" align="center"><tbody><tr><td><img src="http://livearchive.onlinejudge.org/external/38/p3856a.png> </td><td><img src="http://livearchive.onlinejudge.org/external/38/p3856a.png></td><td><img src="http://livearchive.onlinejudge.org/external/38/p3856a.png></td></tr><tr><td><i>Mirror Object</i></td><td><i>Splitter Object</i></td><td><i>Detector Object</i></td></tr></tbody></table><p>For each simulation, a single laser beam enters the tabletop area. The program must compute the path taken by the laser beam (including secondary beams due to splitters), and it must determine which detectors are struck by a laser beam.</p><p>You can make the following assumptions in the program:</p><ol><li>The tabletop surface is a 100 by 100 square, and unless otherwise specified all coordinates in the program's input are given as integers within the tabletop area (i.e. between 0 and 100 inclusive). </li><li>There will be no overlaps between the line segment objects. </li><li>The laser which enters the tabletop area always starts from the edge of the table. </li><li>The simulation of each data set ends when all laser beams have either exited the table top area or have terminated at a detector. </li><li>For each data set there will be no more than 100 total reflections among all laser beams in that data set. </li><li>A laser beam will never intersect any object on a vertex and will never be collinear with an object's line segment. </li><li>Each data set will contain at least one detector object. </li></ol><p><b>Input:</b></p><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p><ul><li>A single line with four numbers "<i>x,y i,j</i>" where <i>x,y</i> is a point along the table edge at which the laser beam enters, and <i>i,j</i> is a vector with integer components (- 1024 &le; <i>i,j</i> &le; 1024) specifying the direction of the incoming laser beam, where <i>i</i> corresponds to the x-axis direction and &nbsp;<i>j</i> corresponds to the y-axis direction. </li><li>A line with a single integer <i>P</i> (1 &le; <i>P</i> &le; 100) giving the total number of objects in this data set. </li><li>A series of <i>P</i> lines, each representing one object, with the first line describing object 1, the second line describing object 2, and so on. Each line begins with a single letter specifying the object type where a "<tt>M</tt>" indicates a mirror object, "<tt>S</tt>" a splitter, and "<tt>D</tt>" a detector. This is followed by two coordinate pairs of the form "<i>x,y</i>", specifying the two end points of the object's line segment. </li></ul><p><b>Output:</b></p><p>For each data set in the input, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, etc. If in this data set none of the detector objects are struck by any laser beams, output the message "<tt>NO BEAMS DETECTED</tt>". Otherwise, output the object number, one per line, of each detector struck by a laser beam. The list of detectors should be sorted by their object numbers and output in ascending order. If a detector is struck by more than one laser beam, it should only be listed once in the output.</p><p><b>Sample Input:</b></p><p></p><pre>1
50,100 0,-1
6
D 0,40 20,20
M 40,20 60,40
D 80,20 100,40
D 0,70 20,90
S 40,90 60,70
D 80,90 100,70
</pre><p><b>Sample Output:</b></p><p></p><pre>DATA SET #1
1
6
</pre></body></html>
______________________________________________________
3857||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Another Brick in the Wall</title><p>After years as a brick-layer, you've been called upon to analyze the structural integrity of various brick walls built by the Tetrad Corporation. Instead of using regular-sized bricks, the Tetrad Corporation seems overly fond of bricks made out of strange shapes. The structural integrity of a wall can be approximated by the fewest number of bricks that could be removed to create a gap from the top to the bottom. Can you determine that number for various odd walls created by Tetrad?</p><p><b>Input</b></p><p></p><p>Input to this problem will begin with a line containing a single integer <i>X</i> (1 &le; <i>X</i> &le; 100) indicating the number of data sets. Each data set consists of two components:</p><ul><li>A single line, "<i>M N</i>" (1 &le; <i>M,N</i> &le; 20) where <i>M</i> and <i>N</i> indicate the height and width (in units), respectively, of a brick wall; </li><li>A series of <i>M</i> lines, each <i>N</i> alphabetic characters in length. Each character will indicate to which brick that unit of the wall belongs to. Note that bricks will be contiguous; each unit of a brick will be adjacent (diagonals do not count as adjacent) to another unit of that brick. Multiple bricks may use the same characters for their representation, but any bricks that use identical characters will not be adjacent to each other. All letters will be uppercase. </li></ul><p><b>Output</b></p><p></p><p>For each data set, output the fewest number of bricks to remove to create a gap that leads from some point at the top of the wall, to some point at the bottom of the wall. Assume that bricks are in fixed locations and do not "fall" if bricks are removed from beneath them. A gap consists of contiguous units of removed bricks; each unit of a gap must be adjacent (diagonals do not count) to another unit of the gap.<br><br><b>Sample Input</b><br></p><pre>3
5 7
AABBCCD
EFFGGHH
IIJJKKL
MNNOOPP
QQRRSST
5 7
AABBCCD
AFFBGGD
IIJBKKD
MNNOOPD
QQRRSST
6 7
ABCDEAB
ABCFEAB
AEAABAB
ACDAEEB
FFGAHIJ
KLMANOP
</pre><b>Sample Output</b><br><pre>5
2
2
</pre></body></html>
______________________________________________________
3858||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>The Sidewinder Sleeps Tonite</title><p>Slitherlink is a type of logic puzzle made popular by Nikoli, the same Japanese puzzle company that has made Sudoku popular the world over. Like most good logic puzzles, it has a set of very basic rules that can nonetheless result in devilishly difficult (and delightful!) puzzling experiences.</p><p>The rules of Slitherlink are as follows:</p><ul><li>A Slitherlink board is made up of a lattice of dots; in this problem, it will be a regular rectangular lattice.</li> <li>Some of the boxes (or <i>cells</i>) defined by the lattice have numbers within them; with a regular rectangular lattice, the numbers will be between 0 and 3 inclusive.</li> <li>The goal of a Slitherlink puzzle is to connect adjacent dots (horizontally or vertically, like the sides of boxes) so that there is a <i>single</i> loop that never crosses itself, with no line segments that are not part of the loop (no "dangling" segments or other, separate loops) such that every cell that has a number has exactly that many sides as segments of the loop.</li></ul><table noborder="" align="center"><tbody><tr><td><img src="http://livearchive.onlinejudge.org/external/38/p3858a.png></td><td><img src="http://livearchive.onlinejudge.org/external/38/p3858a.png></td></tr><tr><td align="center">Unsolved 5x5 Puzzle</td><td align="center">Solved 5x5 Puzzle</td></tr></tbody></table><p>Given a supposedly solved Slitherlink puzzle, your task will be to determine whether or not it is indeed legitimately solved.</p><p><b>Input:</b></p><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p><ul><li>A line containing two integers <i>H</i>, <i>W</i> (1 &le; <i>H</i>,<i>W</i> &le; 20) representing the height and width of the Slitherlink puzzle by the number of <i>cells</i> (not dots!) per edge;</li> <li>A series of 2<i>H</i> + 1 lines representing the Slitherlink puzzle, using the following non-whitespace characters:<ul><li><tt>0</tt>, <tt>1</tt>, <tt>2</tt>, <tt>3</tt>, <tt>?</tt>: The numbers written inside a given cell. A <tt>?</tt> represents an empty cell, as in the example graphic above.</li> <li><tt>#</tt>: A dot in the lattice.</li> <li><tt>-</tt>, <tt>|</tt>: A horizontal or vertical line segment. </li><li><tt>.</tt>: An empty adjacency between two dots in the lattice. </li></ul></li></ul>Note that all Slitherlink puzzles will be fully represented; that is, there is no internal whitespace on a given line to represent empty cells or adjacencies.<p><b>Output:</b></p><p>For each data set, print "<tt>VALID</tt>" if the solution is a valid solution to the given Slitherlink, or "<tt>INVALID</tt>" if the solution is not valid.</p><p><b>Sample Input:</b></p><pre>2
5 5
#-#-#-#-#-#
|?.?.?.1.3|
#.#-#-#.#-#
|?|?.?|?|?.
#-#.#.#.#-#
.2.0.2|?.?|
#-#.#-#.#-#
|?|3|?.?|2.
#.#-#.#-#.#
|?.?.2|?.0.
#-#-#-#.#.#
5 5
#-#-#-#-#-#
|?|?.?.1.3|
#.#-#-#.#-#
|?|?.?|?|?.
#-#.#.#.#-#
.2.0.2|?.?|
#-#.#-#.#-#
|?|3|?.?|2.
#.#-#.#-#.#
|?.?.2|?.0.
#-#-#-#-#.#
</pre><p><b>Sample Output:</b></p><pre>VALID
INVALID
</pre><p></body></html>
______________________________________________________
3859||||||false||||||
<p>While the Romans may have had a fancy number system, the Visigoths (led by Alareiks, known now as Alaric I) managed to take Rome on August 24, 410. This was the first time that Rome had been taken by foreign troops in eight hundred years.</p><p>You will simulate a considerably less bloody (and less realistic) rout of soldiers by a potentially overwhelming force.</p><p>Consider a group of invaders of strength <i>I</i>, and an opposing force of strength <i>J</i>, with distance <i>D</i> between them and a defensive stronghold of strength <i>S</i>. The Routing Force <i>F</i> of the invaders can be calculated as their strength times the distance:</p><p><i>F</i> = <i>ID</i></p><p>and the Blocking Force <i>B</i> of the defenders can be calculated as their strength times the <b>square</b> of their defenses:</p><p><i>B</i> = <i>JS</i><sup>2</sup></p><p>If <i>F</i> is less than or equal to <i>B</i>, the invaders' rout fails, and they are driven off. If <i>F</i> is greater than <i>B</i>, the rout is successful, all defenders of the stronghold are driven off, and the invaders can continue. However, their strength is reduced by removing a fraction equal to the ratio of the defenders' Blocking Force to their Routing Force for that attack. The resulting number should be rounded <b>up</b> to the nearest integer, to ensure that a successful rout leaves at least one soldier:</p><p><i>I<sub>new</sub></i> = &#8968; <i>I</i>(1 - <i>B</i>/<i>F</i>) &#8969;</p><p>If the invaders make it through a stronghold, its location is considered the starting point for calculations regarding the next group of defenders, and so on, until either the invading force makes it all the way through the defenders or is completely routed.</p><p>Your goal is to determine whether or not a given invading force can make it through a particular gauntlet of defenders.</p><p>For the purposes of simplification, all defending strongholds in this simulation are considered to be in a straight line from the starting position of the invaders, and must be encountered in order from nearest to furthest away. No strongholds will be in the same location in a given set of data.</p><p><b>Input:</b></p><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p><ul><li>A line containing a single integer <i>E</i> (1 &le; <i>E</i> &le; 20) indicating the number of defensive strongholds in the data set;</li> <li>A series of <i>E</i> lines, each with three integers <i>D</i>, <i>J</i>, <i>S</i> (1 &le; <i>D, J</i> &le; 10000; 1 &le; <i>S</i> &le; 50) separated by spaces representing the strongholds. <i>D</i> is the distance of the stronghold <i>from the invaders' starting position</i>; remember that <b>all strongholds are considered to be in a straight line from the invaders' starting position, and must be encountered in order from nearest to furthest away.</b> <i>J</i> and <i>S</i> represent the strength of the defenders and the stronghold, respectively, as in the above equation; and</li> <li>A line containing a single integer <i>I</i> (1 &le; <i>I</i> &le; 30000) representing the strength of the invading force. </li></ul><p><b>Output:</b></p><p>For each data set, print "<tt>ROUT!</tt>" if the invaders make it through all of the strongholds, or "<tt>RETREAT!</tt>" if the invaders cannot make it through all of the strongholds.</p><p><b>Sample Input:</b></p><pre>2
1
10 10 5
100
2
75 100 5
10 10 5
50
</pre><p><b>Sample Output:</b></p><pre>ROUT!
RETREAT!
</pre>
______________________________________________________
3860||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Schottkey 7th Path</title><p>With a typical operating system, a filesystem consists of a number of <i>directories</i>, in which reside <i>files</i>. These files generally have a canonical location, known as the <i>absolute path</i> (such as <tt>/usr/games/bin/kobodl</tt>), which can be used to refer to the file no matter where the user is on a system.</p><p>Most operating system environments allow you to refer to files in other directories without having to be so explicit about their locations, however. This is often stored in a variable called <b><tt>PATH</tt></b>, and is an ordered list of locations (always absolute paths in this problem) to search for a given name. We will call these <i>search paths</i>.</p><p>In the brand-new <tt>crash</tt> shell, paths are handled somewhat differently. Users still provide an ordered list of locations that they wish to search for files (their search paths); when a particular filename is requested, however, <tt>crash</tt> tries to be even more helpful than usual. The process it follows is as follows:</p><ul><li>If there is an exact match for the filename, it is returned. Exact matches in locations earlier in the list are preferred. (There are no duplicate filenames in a single location.)</li> <li>If there are no exact matches, a filename that has a single <i>extra</i> character is returned. That character may be at any point in the filename, but the order of the non-extra characters must be identical to the requested filename. As before, matches in locations earlier in the list are preferred; if there are multiple matches in the highest-ranked location, all such matches in that location are returned.</li> <li>If there are no exact matches or one-extra-character matches, files that have <i>two</i> extra characters are looked for. The same rules of precedence and multiple matches apply as for the one-extra-character case.</li> <li>If no files meet the three criteria above, no filenames are returned. Two characters is considered the limit of "permissiveness" for the <tt>crash</tt> shell.</li></ul><p>So, for example, given the two files <tt>bang</tt> and <tt>tang</tt>, they are both one character away from the filename <tt>ang</tt> and two from <tt>ag</tt>. (All characters in this problem will be lowercase.) In the sample data below, both <tt>cat</tt> and <tt>rat</tt> are one character away from <tt>at</tt>.</p><p>Given a complete list of locations and files in those locations on a system, a set of users each with their own ordered lists of search paths, and a set of files that they wish to search for, what filenames would <tt>crash</tt> return?</p><p>For the purposes of simplification, all locations will be described by a single alphabetic string, as will filenames and usernames. Real operating system paths often have many components separated by characters such as slashes, but this problem does not. Also note that users may accidentally refer to nonexistent locations in their search paths; these (obviously) contain no files.</p><p><b>Input:</b></p><p>All alphabetic strings in the input will have at least one and at most 20 characters, and will contain no special characters such as slashes or spaces; all letters will be lowercase.</p><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p><ul><li>A line containing a single integer <i>F</i> (1 &le; <i>F</i> &le; 100) indicating the number of files on the system;</li> <li>A series of <i>F</i> lines representing the files on the system, in the format "<tt><i>location filename</i></tt>", where <i>location</i> and <i>filename</i> are both alphabetic strings;</li> <li>A line containing a single integer <i>U</i> (1 &le; <i>U</i> &le; 10) indicating the number of users on the system;</li> <li>A series of <i>U</i> stanzas representing the users. Each stanza consists of the following components:<ul><li>A line containing a single alphabetic string which is the user's<i>username</i>;</li> <li>A line containing a single integer <i>L</i> (1 &le; <i>L</i> &le; 10) representing the number of locations in the user's search path; and</li> <li>A series of <i>L</i> lines containing a single alphabetic string apiece listing the locations in the user's search path. The first one is the highest priority, the second (if present) is the second-highest priority, and so on.</li></ul></li><li>A line containing a single integer <i>S</i> (1 &le; <i>S</i> &le; 200) indicating the number of file searches to run;</li> <li>A series of <i>S</i> lines representing the searches, in the format "<tt><i>username filename</i></tt>", where <i>username</i> is an alphabetic string that matches one of the users defined in the data set, and <i>filename</i> is an alphabetic string that represents the requested filename.</li></ul><p><b>Output:</b></p><p>For each data set in the input, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, etc. Then for each of the <i>S</i> searches in the data set (and in the same order as read from the input) do the following:</p><ul><li>Print the line "<tt><i>username</i> REQUESTED <i>filename</i></tt>" where <i>filename</i> is the file requested by <i>username</i>. </li><li>For each file (if any) that matches this search, print the line "<tt>FOUND <i>filename</i> IN <i>location</i></tt>" where <i>filename</i> is the file that matched the user's request and that was found in  <i>location</i>. The list of matching files must be sorted in alphabetical order by <i>filename</i>. </li></ul><p><b>Sample Input:</b></p><pre>1
4
food oat
food goat
animal rat
animal cat
2
bob
2
food
animal
bill
1
animal
4
bob at
bob cat
bill goat
bill at
</pre><p><b>Sample Output:</b></p><pre>DATA SET #1
bob REQUESTED at
FOUND oat IN food
bob REQUESTED cat
FOUND cat IN animal
bill REQUESTED goat
bill REQUESTED at
FOUND cat IN animal
FOUND rat IN animal
</pre></body></html>
______________________________________________________
3861||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Another Version of the Truth</title><p><i>Influence</i> is a board game; while it can be played on almost any layout, an interesting layout is a hexagonal NxN grid, such that the layout resembles a rhombus.</p><p>An example 9x9 board is as follows:</p><pre>1 2 3 4 5 6 7 8 9
 \ \ \ \ \ \ \ \ \                
  * * * * * * * * * â A
   * * * * * * * * * â B
    * * * * * * * * * â C
     * * * * * * * * * â D
      * * * * * * * * * â E
       * * * * * * * * * â F
        * * * * * * * * * â G
         * * * * * * * * * â H
          * * * * * * * * * â I
</pre>On the above grid, F5 is adjacent to F4, F6, E5, E6, G4, and G5. (These coordinates are not used in the problem, but are useful for understanding the underlying adjacencies.)<p>The rules of <i>Influence</i> are simple; the pertinent details are as follows:</p><ul><li>Players take turns placing Manipulators on the board. Manipulators occupy a single location, and there may be at most one Manipulator at a location. If there is no empty location on the board to place a piece, the player must pass their turn.</li> <li>Each player has a certain amount of Influence. A player has a single point of Influence for every location on the board that is <i>strictly closer</i> to one of their Manipulators than a Manipulator of any other player. This is not "straight-line" distance, but the number of cells in a minimal path to a Manipulator. On the above grid, the cell F5 is 2 steps away from G6, 1 step away from G5, and 0 steps away from itself.</li> <li>The player with the most Influence at the end of the game wins.</li></ul>In the sample input below, the first player (represented by "!" marks) has only two Influence, that provided by the locations that his Manipulators are on; the second player (represented by "@" signs) has ten Influence, and the third player (represented by "#" marks) has four Influence. There are nine locations that provide Influence to no player, as they are equally distant from two or more of the players.<p>Given a particular board layout, answer this question: what would the resulting Influence be for each player's optimal move if they were making the last move in the game?</p><p>Moves are to be considered independently; that is, the maximum score for the second player should be calculated based on the original board layout, <i>not</i> the one after the first player's best move.</p><p><b>Input:</b></p><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p><ul><li>A line containing a single integer <i>P</i> (2 &le; <i>P</i> &le; 4) indicating the number of players in the game;</li> <li>A line containing a single integer <i>D</i> (1 &le; <i>D</i> &le; 26) indicating the board's dimension (9 would represent the 9x9 board above); and </li><li>A series of <i>D</i> lines, each representing a row on the board from top to bottom. Each location on the row is represented by one of the following characters, separated by spaces:<ul><li><tt>.</tt> â An empty location;</li> <li><tt>!</tt> â A piece for the first player;</li> <li><tt>@</tt> â A piece for the second player;</li> <li><tt>#</tt> â A piece for the third player (if playing); or</li> <li><tt>$</tt> â A piece for the fourth player (if playing).</li></ul><b>Note that there may be extra whitespace on these lines</b> (and only these lines). This is to make the input resemble the layout shown above.</li></ul><p><b>Output:</b></p><p>For each data set in the input, output the heading "<tt>DATA SET #<i>K</i></tt>" where <i>K</i> is 1 for the first data set, 2 for the second, etc. Then print <i>P</i> lines, each representing the maximum score possible for, in order, the first, second, third (if playing), and fourth (if playing) player if they were to make a single last move.</p><p><b>Sample Input:</b></p><pre>1
3
5
! . . # .
 . @ . . !
  . . . . #
   . . @ . .
    . . . . .
</pre><p><b>Sample Output:</b></p><pre>DATA SET #1
5
13
7
</pre></body></html>
______________________________________________________
3862||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>The Final Countdown</title><p>When Doctor Doom modeled LAI-BACH (the Latverian Aerospace Institute, Bolograd Active Control Headquarters) on Mission Command with NASA, he perhaps cribbed from the source a bit <i>too</i> closely.</p><p>NASA (and therefore LAI-BACH) have a peculiar way of handling countdowns to missions. While the clock may state that it is, say, thirty minutes until liftoff for a rocket or shuttle, there are built-in <i>holds</i> where the clock is stopped for a set amount of time. For example, there may be a 15-minute hold when the countdown reaches the 8-minute mark. The end result is that more time passes from the beginning of the countdown to the end than the numbers on the clock would imply.</p><p>LAI-BACH uses a simple "command file" format to manage holds for their countdowns on their computer systems. All commands start with a positive integer no greater than 1440 (countdowns longer than a day make Doctor Doom angry), followed by a directive. The format of the commands is as follows:</p><p></p><table align="center" border="1"><tbody><tr><td><tt><i>t</i> START</tt></td><td><i>t</i> is the start time on the countdown clock, in minutes.</td></tr><tr><td><tt><i>t</i> HOLD <i>n</i></tt></td><td>A mandatory hold for <i>n</i> minutes at countdown clock time <i>t</i>.</td></tr><tr><td><tt><i>t</i> HOLD <i>n</i> IF <i>condition</i></tt></td><td>A hold at countdown clock time <i>t</i> for <i>n</i> minutes if <i>condition</i> is true.</td></tr><tr><td><tt><i>t</i> HOLD <i>n</i> IF NOT <i>condition</i></tt></td><td>A hold at countdown clock time <i>t</i> for <i>n</i> minutes if <i>condition</i> is <b>not</b> true.</td></tr></tbody></table><p>All conditions are represented by short strings of lowercase letters, no more than 20 characters long; their actual values are not provided in the command structure, as they are determined by actual conditions during the launch (whether the fuel tanks have been topped off, whether the Fantastic Four is currently fighting Doctor Doom, and so on), but they are always either true or false and do not change during the course of a single countdown. A hold time <i>n</i> is a positive integer no more than 60 (minutes), as long delays also irritate Victor.</p><p>Given a particular command file, you are to determine both the shortest possible time and the longest possible time that the countdown can run. The commands may be present in any order, but there will always be one and only one <tt>START</tt> directive; there will be precisely as much whitespace on each line as dictated by the format given above. No two commands in a command file will reference the same minute <i>t</i>.</p><p><b>Input:</b></p><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:</p><ul><li>A line containing a single integer <i>L</i> (1 &le; <i>L</i> &le; 100) indicating the number of lines in the particular "command file"; and </li><li>A series of <i>L</i> lines representing the command file, in the format described above.</li></ul><p><b>Output:</b></p><p>For each data set, print "<tt><i>min</i> TO <i>max</i></tt>", where <i>min</i> is the shortest possible time the countdown can last in minutes, and <i>max</i> is the longest possible time the countdown can last in minutes.</p><p><b>Sample Input:</b></p><pre>2
3
30 START
15 HOLD 5
10 HOLD 5 IF fantasticfour
3
75 HOLD 20 IF yellowlightblinks
150 HOLD 30 IF NOT fueled
300 START
</pre><p><b>Sample Output:</b></p><pre>35 TO 40
300 TO 350
</pre></body></html>
______________________________________________________
3863||||||false||||||

<P>
In this problem you'll have to implement the Abacus Sort algorithm, also known as the Bead Sort algorithm. 

<P>
This abacus includes <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> poles, where <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the largest number to be sorted. Unlike conventional abacuses, a number is  represented by a corresponding number of beads on a  separate row, starting at the left (pole 1), and moving towards the right.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3863a.eps}$
 -->
<IMG
 WIDTH="305" HEIGHT="196" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3863a.png
 ALT="\epsfbox{p3863a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Once all numbers have been placed on their own row, we tilt the abacus and let the beads fall. In this case, four beads move downward. 

<P>
At this point, the top row of the abacus will represent the smallest number, and we can read off all the numbers, in sorted order, by reading the values on the various rows, from the top down.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3863b.eps}$
 -->
<IMG
 WIDTH="305" HEIGHT="198" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3863a.png
 ALT="\epsfbox{p3863b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains one or more test cases. Each test case consists of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines <!-- MATH
 $(0 < n \le 80)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3863a.png
 ALT="$ \le$">80)</SPAN>
<tex2html_verbatim_mark>, each line with an integer, <SPAN CLASS="MATH"><I>val</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 < val \le 50)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>val</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3863a.png
 ALT="$ \le$">50)</SPAN>
<tex2html_verbatim_mark>, to be sorted. After each test case, there will be a line with a single <TT>0</TT>. All integers will begin in the first column of the line. When reading input, the first item read will be the item at the top of the abacus when it is tilted and the last item read will be the item at the bottom. 

<P>
The end of input will be indicated by end of file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input file, you should produce the listing of the sorted values in ascending order. Each value should be displayed in its own row of text, with an <TT>X</TT> representing a pole with a bead and a hyphen representing a pole without a bead. There should be exactly <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> poles represented for each integer, where <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the largest number to be sorted in the set. At the end of the row, have a blank, a greater than (`<code>&gt;</code>') sign, a blank, and the integer being represented.

<P>
At the end of the final depiction of the abacus, have a line telling how many beads moved as a result of doing the sort. For example, in the example above (the first example in the sample input), 4 beads move. Your statement should have the form: 

<P>

<P>
<BR>

<TT>A total of <SPAN CLASS="MATH"><I>xx</I></SPAN>
<tex2html_verbatim_mark> beads slid during the sort.</TT> 

<P>

<P>
<BR>
where <TT><SPAN CLASS="MATH"><I>xx</I></SPAN>
<tex2html_verbatim_mark></TT> is replaced by the number of beads that move. You should not change ``<TT>beads</TT>" to ``<TT>bead</TT>" in the case of 1 bead sliding. 

<P>
Have a blank line between output from each input set.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
4 
1 
3 
3 
0 
30 
40 
40 
20 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
X--- &gt; 1 
XX-- &gt; 2 
XXX- &gt; 3 
XXX- &gt; 3 
XXXX &gt; 4 
A total of 4 beads slid during the sort. 

XXXXXXXXXXXXXXXXXXXX-------------------- &gt; 20 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX---------- &gt; 30 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX &gt; 40 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX &gt; 40
A total of 50 beads slid during the sort.
</PRE>

<P>

______________________________________________________
3864||||||false||||||
</H1><P>Your little sister Annie has just learned about different number bases. When you ask her what time it is, she tells you it's 5. ``Five?" you ask. ``Yes," she explains, since the clock shows ``1:01" which, she proudly explains, ``is 5 in base-2." Since you have to live with your sister and know she's going to learn more bases, you decide to write a program to make sense of her answers.<P>Your program should find all the times in an inclusive range that could be considered to valid numbers in a given base (ignoring the colon). For example, in base-2, in the inclusive time range between 1:00 and 2:00, the times 1:00, 1:01, 1:10, and 1:11 can be interpreted as the numbers 100, 101, 110, and 111 in base-2 (i.e. 4, 5, 6, and 7 in decimal).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to the program will consist of one or more data sets. Each data set will be on a single line. It will begin with the base, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 < d \le 10)$
 --><SPAN CLASS="MATH">(1 &lt; <I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3864img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark>, to use in examining clock times. There will then be 2 times, the start time and the end time, each in the format <SPAN CLASS="MATH"><I>hh</I> : <I>mm</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>h</I> : <I>mm</I></SPAN> <tex2html_verbatim_mark>, with <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3864img1.png ALT="$ \le$"><I>h</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3864img1.png ALT="$ \le$">9</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">10<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3864img1.png ALT="$ \le$"><I>hh</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3864img1.png ALT="$ \le$">23</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3864img1.png ALT="$ \le$"><I>mm</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3864img1.png ALT="$ \le$">59</SPAN> <tex2html_verbatim_mark>. There will be one or more spaces between these values. All times are assumed to be in the same day and the end time will be later than the start time.<P>The last data set will consist of just the value <TT>0</TT>. This line should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, have an initial line giving the range of times, in the format shown in the Sample Output section. Then have a list of all decimal integers that correspond to times in the inclusive range that are valid base-<SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> numbers. These numbers should be listed in increasing order, one to a line, and indented by three spaces. Have one blank line after the output for each data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 1:00 4:00 
3 1:15 1:45 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1:00 to 4:00: 
   4 
   5 
   6 
   7 

1:15 to 1:45: 
   15 
   16 
   17
</PRE><P>
______________________________________________________
3865||||||false||||||
<P>Dr. Hain and Dr. White have decided to retire from judging the regional programming contest and instead want to become dog show judges. Unfortunately, dog shows use different criteria from programming contests (dogs very seldom have compiler errors, although some may have wrong output), so they need a way to ensure they are judging the dogs consistently. Since they are still the chief judges of this contest, they have asked you to write a program to check the consistency of their dog judging.<P><P><BR>Your program should create charts showing the consistency between the two judges. The rows will represent the scores given by Dr. Hain and the columns will represent the scores given by Dr. White. Suppose the maximum score for a dog is 3 and the judges give the following scores:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Dog number</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Dr. Hain's score</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Dr. White's score</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>23</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>19</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>18</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>204</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>25</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY></TABLE></DIV><P><BR>The consistency chart resulting from these scores is:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=6 BORDER FRAME=RHS RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP COLSPAN=6>Dr. White's Score</TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Dr. Hain's</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Score</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="880" HEIGHT="199" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3865.png ALT="\epsfbox{p3865.eps}"> <tex2html_verbatim_mark></DIV><P>The 3 in the upper left hand corner indicates there were 3 dogs that Dr. Hain gave a 0 to that Dr. White also gave a 0 to (dogs 1, 14, and 6). The 1 in row 0, column 1 indicates there was 1 dog that Dr. Hain scored as a 0 while Dr. White scored it as a 3 (dog 23). Ideally, the only nonzero entries in this table would be along the diagonal, indicating perfect consistency.<P>Your program should take a group of scores and build the corresponding consistency table.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to the program will consist of one or more data sets. Each data set will begin with a single integer, <SPAN CLASS="MATH"><I>max</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 < max \le 20$
 --><SPAN CLASS="MATH">0 &lt; <I>max</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3865.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>, the maximum score a dog may receive. There will then be 1 or more lines representing the scores given by the judges. They will be in the following format:<P><P><BR><SPAN CLASS="MATH"><I>judge</I>&nbsp;<I>dog</I>&nbsp;<I>score</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where:<P><UL><LI><SPAN CLASS="MATH"><I>judge</I></SPAN> <tex2html_verbatim_mark> is a single letter, `<TT>H</TT>', `<TT>W</TT>', or `<TT>E</TT>' with `<TT>H</TT>' representing Dr. Hain's judgment, `<TT>W</TT>' representing Dr. White's judgment, and `<TT>E</TT>' marking the end of scores for this data set. </LI><LI><SPAN CLASS="MATH"><I>dog</I></SPAN> <tex2html_verbatim_mark> is a positive integer representing the dog number. </LI><LI><SPAN CLASS="MATH"><I>score</I></SPAN> <tex2html_verbatim_mark> is an integer, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3865.png ALT="$ \le$"><I>score</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3865.png ALT="$ \le$"><I>max</I></SPAN> <tex2html_verbatim_mark> </LI></UL><P>The end of input will be indicated by data set with <SPAN CLASS="MATH"><I>max</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3865.png ALT="$ \le$"> 0</SPAN> <tex2html_verbatim_mark>. This set should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each data set should start with a single line indicating the set number, starting at 1 and formatted as in the sample output. The consistency matrix should then be printed in row major order, one row per line, with one blank between each pair of consecutive entries. Only dogs which have been scored by both judges should be included in the consistency matrix. There should be a blank line after the consistency matrix for each data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
H 1 0 
H 19 2 
W 25 3 
H 12 3 
H 204 1 
H 6 0 
W 1 0 
H 5 3 
H 25 3 
W 23 3 
W 14 0 
W 5 0 
W 19 3 
H 23 0 
W 18 1 
H 14 0 
H 18 1 
W 12 2 
W 204 1 
W 6 0 
H 10 2 
W 100 2 
E 0 0 
2 
H 1000 1 
W 1000 0 
H 1001 1 
W 1001 0 
H 99 1 
H 5 1 
H 1002 1 
W 1002 0 
H 1003 1 
W 1003 0 
H 1004 1 
W 1004 0 
H 1005 1 
W 1005 0 
H 1007 1 
W 1007 0 
H 1008 1 
W 1008 0 
H 1009 1 
W 1009 0 
E 1 1 
-55
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Show 1: 
3 0 0 1 
0 2 0 0 
0 0 0 1 
1 0 1 1 

Show 2: 
0 0 0 
9 0 0 
0 0 0
</PRE><P>
______________________________________________________
3866||||||false||||||
<P>I drove all the way from my house to the contest site, so that I could carry out my divine duty as a contest judge. I printed out directions from my house to the contest, but forgot to print directions from the contest location back to my house! Your job is to generate (from the directions to the contest) the directions to get me back home.<P>The directions data has the following grammar:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COL ALIGN=RIGHT><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<directions>$
 --><SPAN CLASS="MATH">&lt; <I>directions</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<start-instruction>$
 --><SPAN CLASS="MATH">&lt; <I>start</I> - <I>instruction</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<traveling-instruction-list>$
 --><SPAN CLASS="MATH">&lt; <I>traveling</I> - <I>instruction</I> - <I>list</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<end-instruction>$
 --><SPAN CLASS="MATH">&lt; <I>end</I> - <I>instruction</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<start-instruction>$
 --><SPAN CLASS="MATH">&lt; <I>start</I> - <I>instruction</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Head</TT> <SPAN CLASS="MATH">&lt; <I>compass</I> &gt;</SPAN> <tex2html_verbatim_mark> <TT>from</TT> <SPAN CLASS="MATH">&lt; <I>address</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<end-instruction>$
 --><SPAN CLASS="MATH">&lt; <I>end</I> - <I>instruction</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Arrive at</TT> <SPAN CLASS="MATH">&lt; <I>address</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt; <I>address</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<number> \ <road>$
 --><SPAN CLASS="MATH">&lt; <I>number</I> &gt; &nbsp; &lt; <I>road</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $< traveling-instruction-list >$
 --><SPAN CLASS="MATH">&lt; <I>traveling</I> - <I>instruction</I> - <I>list</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<instruction>$
 --><SPAN CLASS="MATH">&lt; <I>instruction</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $< traveling-instruction-list >$
 --><SPAN CLASS="MATH">&lt; <I>traveling</I> - <I>instruction</I> - <I>list</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<instruction>$
 --><SPAN CLASS="MATH">&lt; <I>instruction</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<instruction-list>$
 --><SPAN CLASS="MATH">&lt; <I>instruction</I> - <I>list</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<instruction>$
 --><SPAN CLASS="MATH">&lt; <I>instruction</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Turn</TT> <SPAN CLASS="MATH">&lt; <I>LR</I> &gt;</SPAN> <tex2html_verbatim_mark> <TT>at</TT> <SPAN CLASS="MATH">&lt; <I>road</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<instruction>$
 --><SPAN CLASS="MATH">&lt; <I>instruction</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Continue on</TT> <SPAN CLASS="MATH">&lt; <I>road</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt; <I>road</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<word-list>$
 --><SPAN CLASS="MATH">&lt; <I>word</I> - <I>list</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<word-list>$
 --><SPAN CLASS="MATH">&lt; <I>word</I> - <I>list</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&lt; <I>word</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><!-- MATH
 $<word-list>$
 --><SPAN CLASS="MATH">&lt; <I>word</I> - <I>list</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $<word> <word-list>$
 --><SPAN CLASS="MATH">&lt; <I>word</I> &gt; &lt; <I>word</I> - <I>list</I> &gt;</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt; <I>LR</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>left</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt; <I>LR</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>right</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt; <I>compass</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>east</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt; <I>compass</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>west</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt; <I>compass</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>north</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">&lt; <I>compass</I> &gt;</SPAN> <tex2html_verbatim_mark> =</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>south</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2>A <SPAN CLASS="MATH">&lt; <I>number</I> &gt;</SPAN> <tex2html_verbatim_mark> is an integer from 1 to 999999.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2>A <SPAN CLASS="MATH">&lt; <I>word</I> &gt;</SPAN> <tex2html_verbatim_mark> is a string of letters and digits.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2>A single space will separate words and numbers on a line.</TD></TR></TBODY></TABLE></DIV><P><P><BR>You may assume all roads are two-way, and have either a north-south, or an east-west orientation. An instruction reading ``Continue on Elm St'' means the road has changed its name to Elm St, but there is no change in the direction of travel.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will consist of one or more data sets. Each directions data set starts with a line containing one integer, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(2 < n < 100$
 --><SPAN CLASS="MATH">(2 &lt; <I>n</I> &lt; 100</SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>n</I> = 0)</SPAN> <tex2html_verbatim_mark>, being the total number of instructions. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines each contain one instruction, and follow the grammar given above. An instruction line has less than 120 characters. The last directions data set has <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark>, and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each directions data set should begin with a line looking like<P><P><BR><TT>Directions</TT> <SPAN CLASS="MATH">&lt; <I>d</I> &gt;</SPAN> <tex2html_verbatim_mark><TT>:</TT><P><P><BR>where <SPAN CLASS="MATH">&lt; <I>d</I> &gt;</SPAN> <tex2html_verbatim_mark> is the number of the data set, starting at 1. There should follow <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> output lines, each being one instruction. There should be a blank line after each data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 
Head north from 2357 Georgia Ave 
Turn right at Bland Ave 
Turn right at W Gentilly Rd 
Turn left at GA67 
Continue on Jones Lane Memorial Hwy 
Turn right at E Main St 
Arrive at 1 E Main St 
8 
Head east from 7532 Monroe St 
Turn left at Everett St 
Turn right at Government St 
Continue on US98 
Turn left at S Conception St 
Continue on N Conception St 
Turn right at Saint Louis St 
Arrive at 154 Saint Louis St 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Directions 1: 
Head north from 1 E Main St 
Turn left at Jones Lane Memorial Hwy 
Continue on GA67 
Turn right at W Gentilly Rd 
Turn left at Bland Ave 
Turn left at Georgia Ave 
Arrive at 2357 Georgia Ave 

Directions 2: 
Head west from 154 Saint Louis St 
Turn left at N Conception St 
Continue on S Conception St 
Turn right at US98 
Continue on Government St 
Turn left at Everett St 
Turn right at Monroe St 
Arrive at 7532 Monroe St
</PRE><P>
______________________________________________________
3867||||||false||||||
<P>Run length encoding (RLE) of text strings replaces sequences of characters by a number (the number of repetitions of the character) followed by the character that is repeated. Thus, the string <TT>AAAAABAAABBCEEEEE</TT> would be replaced by <TT>4AB3ABBC5E</TT>. Note that <TT>BB</TT> is not replaced by <TT>2B</TT> since that is no shorter.<P>Under some circumstances, modified run length encoding (MRLE) can do better by replacing repeated adjacent substrings in a similar way. We now need a pair of numbers associated with a repeated substring: the number of repetitions, and the length of the substring. The string <TT>ABABAB</TT> (length 6) can be written (To be able to unambiguously display sequences of numbers (which may have more than one decimal digit), we will always display a number followed by a space.) as <TT>3 2 AB</TT> (length 4 (For simplicity, we will only consider cases where a number can be encoded in a byte, as well as being distinguishable from characters.)), being 3 repetitions of a length-2 substring (<TT>AB</TT>).<P>From longest to shortest substring length, the algorithm will scan the target string from left to right looking for sequences of substrings of that length. When a repetition of a substring is found, it is replaced the two numbers associated with the substring, followed by the substring itself. This process is repeated until finally all length-1 substrings have been considered.<P>For example, the string <TT>BABABABAABABABAB</TT> is first reduced to <TT>B2 7 ABABABAB</TT> (the longest repeating substring is <TT>ABABABA</TT>; the <TT>ABABABAABABABA</TT> is replaced by <TT>2 7 ABABABA</TT>). This reduced string is then further reduced to <TT>B2 7 2 4 ABAB</TT> (the longest repeating substring after the first reduction is <TT>ABAB</TT>; the <TT>ABABABAB</TT> is replaced by <TT>2 4 ABAB</TT>). No further reductions in the length of the compressed string can be made (The replacement of <TT>ABAB</TT> by <TT>2 2 AB</TT> does not reduce the length).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each target string may be spread over several lines. The first line for each target string contains a single integer, <SPAN CLASS="MATH">(<I>n</I> &lt; 100)</SPAN> <tex2html_verbatim_mark>, representing the number of lines containing the sequential components of the target string. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines containing strings of 1 to 256 uppercase characters. The first line of the last target string contains <TT>0</TT>, and should not be processed.<P>The target strings are guaranteed not to have repeated substrings longer than 100, and the number of repetitions is guaranteed to be no more than 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There should be two output lines for each target string. The first line should be<P><P><BR><TT>Target</TT> <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN> <tex2html_verbatim_mark><TT>:</TT><P><P><BR>where <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN> <tex2html_verbatim_mark> is the number of the target string, starting at 1. The second line should be the compressed string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
BABABABAABABABAB 
3 
ABBCCCD 
DDDEF 
EFGHGHGHIJIJIJ 
8 
BBBB 
BAAAABAAAABAAAAC 
BAAAABAAAABAAAACD 
BAAAABAAAABAAAAC 
BAAAABAAAABAAAACD 
BAAAABAAAABAAAAC 
BAAAABAAAABAAAACD 
EE 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Target 1: 
B2 7 2 4 ABAB 
Target 2: 
ABBCCC4 1 DEFEF3 2 GH3 2 IJ 
Target 3: 
4 1 B3 33 2 16 3 5 B4 1 ACDEE
</PRE><P>
______________________________________________________
3868||||||false||||||

<P>
Jane has just bought three rectangular Persian carpets that she wants to show off in the new house that she's building. She wants to put all the carpets into a square room, such that none of the carpets overlap, and that all carpet edges are parallel to the room walls. Given the sizes of the carpets, she wants to know the dimensions of the smallest room that will hold the carpets. For example, if the carpets are sized <!-- MATH
 $9 \times 2$
 -->
<SPAN CLASS="MATH">9&#215;2</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $2 \times 2$
 -->
<SPAN CLASS="MATH">2&#215;2</SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $8 \times 7$
 -->
<SPAN CLASS="MATH">8&#215;7</SPAN>
<tex2html_verbatim_mark>, these could be placed into a <!-- MATH
 $10 \times 10$
 -->
<SPAN CLASS="MATH">10&#215;10</SPAN>
<tex2html_verbatim_mark> room as follows:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3868.eps}$
 -->
<IMG
 WIDTH="352" HEIGHT="352" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3868.png
 ALT="\epsfbox{p3868.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each data set contains three lines, each containing two positive integers (<SPAN CLASS="MATH">&lt; 1000</SPAN>
<tex2html_verbatim_mark>) separated by a single space, being the dimensions of one carpet. The end of data is indicated with a single line having the values `<TT>0 0</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, output a line looking like 

<P>

<P>
<BR>

<TT>Set</TT> <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN>
<tex2html_verbatim_mark><TT>: minimum dimension =</TT> <SPAN CLASS="MATH">&lt; <I>d</I> &gt;</SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
Where <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the data set number starting at 1, and <SPAN CLASS="MATH">&lt; <I>d</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the size of the square room.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
9 2
2 2
8 7
8 3
3 7
6 3
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Set 1: minimum dimension = 10
Set 2: minimum dimension = 9
</PRE> 

<P>

______________________________________________________
3869||||||false||||||
<P>A decathlon is a sporting event with ten different events, and their results are combined to find an overall winner. In a polyathlon, the contestants participate in a variable number of events. You will write code to determine the order of finish of a group of participants in such a multievent competition.<P><P><BR>There are two types of events: timed events and measured events.<P><UL><LI>Timed events will have the contestant scores recorded in one of three forms: <SPAN CLASS="MATH"><I>hh</I> : <I>mm</I> : <I>ss</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>h</I> : <I>mm</I> : <I>ss</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>mm</I> : <I>ss</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> is a 1-digit integer, and <SPAN CLASS="MATH"><I>hh</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>mm</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>ss</I></SPAN> <tex2html_verbatim_mark> are 2-digit integers (representing hours, minutes, and seconds), with <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3869img1.png ALT="$ \le$"><I>mm</I>, <I>ss</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3869img1.png ALT="$ \le$">59</SPAN> <tex2html_verbatim_mark>. Example times are 12:01:01, 3:24:05 and 02:27. Example timed events are a marathon, or time to find a hidden treasure. In a timed event, a lower time is better. </LI><LI>Measured events will have the contestant scores recorded as integers. Example measured events are the distance a discus is thrown, or the number of hot dogs eaten in 5 minutes. In a measured event, a higher score is better. </LI></UL><P>After each event, the contestants are placed in order of their finish. The one with the best score is in position 1, the second best score in position 2, etc. In the case of ties, contestants with the same score are all in the same position. But if <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> contestants are in position <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, the next contestant will be in position <SPAN CLASS="MATH"><I>p</I> + <I>n</I></SPAN> <tex2html_verbatim_mark>. For example, consider the contestant results and positions in a measured event below:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Position</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Score</B></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>Name</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>95</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>ABRAMS</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>83</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>BLAKE</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>83</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>CHIN</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>82</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>DELNOSTRO</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>70</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>EWING</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>70</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>FRANKLYN</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>70</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>GHOST</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HARDY</TD></TR></TBODY></TABLE></DIV><P><P><BR>Since two participants have the second highest score, 83, they are both in position 2. The third highest score is then in position 4. Participants with equal positions are ordered by alphabetically increasing order of their name.<P>Once all events are completed, the positions of each contestant in each event are summed. The final results will put the contestants in order from lowest to highest based on the sum of their positions. The lowest sum is in position 1. Ties in final results are handled in the same way as in events. If a contestant does not have a score in all events, they are omitted from the final results.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input to your program will be 1 or more data sets. Each data set will begin with two lines. The first line of the data set will be a line of one or more characters in the set {<TT>A</TT>-<TT>Z</TT>, <TT>0</TT>-<TT>9</TT>, <TT>_</TT>}, giving the name of the competition. The next line will be a positive integer, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> , being the number of events in the competition. There will then be <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> sets of data about each event.<P>The data about each event will begin with 3 lines describing the event. The first line of the description will be one or more characters in the set {<TT>A</TT>-<TT>Z</TT>, <TT>0</TT>-<TT>9</TT>, <code>_</code>}, giving the name of the event. The second line will be either ``<TT>TIMED</TT>" or ``<TT>MEASURED</TT>", telling whether the event is timed or measured. The third line will be a positive integer, <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, giving the number of participant scores in the event. There will then be <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> lines, each giving a participant name and score.<P>Each of the participant lines will have a participant name consisting of one or more uppercase characters, a space, and the participant's score. The score will be in the format described in the problem description.<P>End of input is indicated by end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input set, have a line with the name of the competition, a blank line, and then the output for each of the events in the competition, in the order they appear in the competition followed by the final results.<P>For each event, the output should be the name of the event on a single line, followed by a single line for each competitor giving their position, their score (output in exactly the same format they were input), and their name, in order of their position. If two competitors finish in the same position, they should be listed alphabetically. There should be a blank line after the output for each event.<P>After all the output for events, there should be a line saying ``<TT>OVERALL_RANKINGS</TT>'', followed by a single line for each competitor giving their position, the sum of their other positions, and their name. Again, these should be in position order, with ties listed alphabetically. You may assume there will be at least one competitor who participates in all events. There should be two blank lines after the output for each competition.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ACM_CONTEST_PREP 
2 
PROBLEMS_SOLVED 
MEASURED 
3 
DIJKSTRA 3 
WIRTH 1 
HOARE 3 
TIME_TO_SOLVE 
TIMED 
4 
WIRTH 02:12 
BOHR 12:01:29 
KNUTH 02:12 
DIJKSTRA 1:49:05 
GREAT_BAKING_CONTEST 
1 
PIES_BAKED 
MEASURED 
5 
CHERRY 3 
APPLE 3 
LEMON 3 
BLUEBERRY 2 
PUMPKIN 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ACM_CONTEST_PREP 

PROBLEMS_SOLVED 
1 3 DIJKSTRA 
1 3 HOARE 
3 1 WIRTH 

TIME_TO_SOLVE 
1 02:12 KNUTH 
1 02:12 WIRTH 
3 1:49:05 DIJKSTRA 
4 12:01:29 BOHR 

OVERALL_RANKINGS 
1 4 DIJKSTRA 
1 4 WIRTH


GREAT_BAKING_CONTEST 

PIES_BAKED 
1 4 PUMPKIN 
2 3 APPLE 
2 3 CHERRY 
2 3 LEMON 
5 2 BLUEBERRY 

OVERALL_RANKINGS 
1 1 PUMPKIN 
2 2 APPLE 
2 2 CHERRY 
2 2 LEMON 
5 5 BLUEBERRY
</PRE><P>
______________________________________________________
3870||||||false||||||

<P>
You want to produce flash cards having pronounceable (but perhaps meaningless) words for children to practice their phonetics. Here we define a pronounceable word as one having interleaved consonants and vowels. However, there are also 2-letter compound consonants (e.g., ``ch", ``th", ``st"), and 2-letter compound vowels (having a vowel sounds such as ``ea", and ``ou").

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains one or more data sets, each containing two lines. The first line contains an integer <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 < v \le 6)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>v</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3870img1.png
 ALT="$ \le$">6)</SPAN>
<tex2html_verbatim_mark>, followed by a space-delimited list of <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark> (single or compound) vowels, taken from the set `<TT>a</TT>', `<TT>e</TT>', `<TT>i</TT>', `<TT>o</TT>', `<TT>u</TT>' . The second line contains an integer <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 < c \le 6)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>c</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3870img1.png
 ALT="$ \le$">6)</SPAN>
<tex2html_verbatim_mark>, followed by a space-delimited list of <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> (single or compound) vowels, where (single or compound) consonants are letters other than vowels. All single and compound vowels and consonants are made up of lowercase letters. The data set is guaranteed not to produce more than 10000 distinct pronounceable words. 

<P>
The end of input will be indicated by a line containing a single <TT>0</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, produce two lines looking like 

<P>

<P>
<BR>

<TT>Data set</TT> <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark><TT>:</TT> 
<BR><SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> <TT>words.</TT> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is a sequential number starting at 1, and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> is the total number of words generated. This should be followed by a sorted list of pronounceable words, each using every (compound) consonant exactly once. There is no requirement as to how many times each vowel may/must be used. If there are more than 100 words in the output, write just the first 100 words. Words should be written 10 per line for all lines of output (except possibly the last). Leave a blank line between output for each data set.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 a ee i 
2 s st 
2 a e 
2 s t
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Data set 1: 
96 words. 
asast asasta asastee asasti aseest aseesta aseestee aseesti asist asista 
asistee asisti astas astasa astasee astasi astees asteesa asteesee asteesi 
astis astisa astisee astisi eesast eesasta eesastee eesasti eeseest eeseesta 
eeseestee eeseesti eesist eesista eesistee eesisti eestas eestasa eestasee eestasi 
eestees eesteesa eesteesee eesteesi eestis eestisa eestisee eestisi isast isasta 
isastee isasti iseest iseesta iseestee iseesti isist isista isistee isisti 
istas istasa istasee istasi istees isteesa isteesee isteesi istis istisa 
istisee istisi sast sasta sastee sasti seest seesta seestee seesti 
sist sista sistee sisti stas stasa stasee stasi stees steesa 
steesee steesi stis stisa stisee stisi 

Data set 2: 
36 words. 
asat asata asate aset aseta asete atas atasa atase ates 
atesa atese esat esata esate eset eseta esete etas etasa 
etase etes etesa etese sat sata sate set seta sete 
tas tasa tase tes tesa tese
</PRE>

<P>

______________________________________________________
3871||||||false||||||

<P>
In the spirit of congeniality, players at a round table poker game decide to even out their winnings after a game ends. The scheme involves sharing their winningâeach player divides his money into three parts according to a specified pattern <SPAN CLASS="MATH"><I>L</I> : <I>M</I> : <I>R</I></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> indicates the part he shares with his neighbor on the left, <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> indicates the part he keeps for himself, and <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> indicates the part he shares with his neighbor on the right. However, if the left or right portion contains loose change (i.e., partial dollars), the player keeps that, and only gives whole dollar amounts to his/her neighbors. 

<P>
For example, suppose there are four players seated counterclockwise around the table with winnings of $60, $60, $120, and $90, respectively. If the sharing scheme is <SPAN CLASS="MATH">2 : 3 : 1</SPAN>
<tex2html_verbatim_mark>, each shares <SPAN CLASS="MATH">1/3</SPAN>
<tex2html_verbatim_mark> (that is, <SPAN CLASS="MATH">2/6</SPAN>
<tex2html_verbatim_mark>) of his money with the player on the left, <SPAN CLASS="MATH">1/6</SPAN>
<tex2html_verbatim_mark> of his money with the player on his right, and keeps the rest of his money for himself. After sharing, the money is distributed in the following amounts: $65, $80, $100, and $85. The players may decide to repeat this scheme more than once. If they share a second time, the money is distributed in these amounts: $74, $84, $92, and $80. 

<P>
Your job is to find how the money is finally distributed among the players after sharing is complete:

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be one or more games specified. For each game, you will be provided with this input: 

<P>

<UL>
<LI>The first line will be the number of players, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is an integer, <SPAN CLASS="MATH"><I>N</I> &gt; 0</SPAN>
<tex2html_verbatim_mark> 
</LI>
<LI>The next <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines will be the original amount held by each player, where each value is a non-negative integer. These are provided in the order the players are seated counterclockwise around the table 
</LI>
<LI>The next line is the sharing scheme in the form <SPAN CLASS="MATH"><I>L</I>&nbsp;<I>M</I>&nbsp;<I>R</I></SPAN>
<tex2html_verbatim_mark> (three non-negative integers). At least one of <SPAN CLASS="MATH"><I>L</I>&nbsp;<I>M</I>&nbsp;<I>R</I></SPAN>
<tex2html_verbatim_mark> will be greater than 0. 
</LI>
<LI>The next line is a non-negative integer indicating the number of times the sharing scheme is to be carried out.
</LI>
</UL>

<P>
A zero for the number of players will indicate end of input, and that game should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each game, output a line with the word ``<TT>Game</TT>" and the number of the game, beginning with 1. The next line indicates the distribution of money for the players, with a single space between the numbers. This is to be followed by a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
60 
60 
120 
90 
2 3 1 
2 
5 
100 
0 
0 
0 
0 
1 5 4 
3 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Game 1 
74 84 92 80 

Game 2 
25 34 25 8 8
</PRE>

<P>

______________________________________________________
3872||||||false||||||

<P>
When you use a spell checker, and the lookup word is wrong, it usually makes suggestions. Our task is, given a list of correctly spelled words (dictionary words) and a possibly misspelled lookup word, which of the dictionary words is/are closest to the lookup word. By ``closest" we mean that the lookup word has lowest penalty value relative to the dictionary word. Penalty values are calculated for the following errors: 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
Penalty </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Spelling error                 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Example lookup word misspellings of the  </TD></TR>
<TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  dictionary word HELLO                    </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> No error                       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  HELLO                                    </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> One extra letter               </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  HELLOT, THELLO, HELLTO                   </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Two extra letters              </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  AHELLTO                                  </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> One missing letter             </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  HELO                                     </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Two missing letters            </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  HLL                                      </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Adjacent letters interchanged  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  EHLLO, HLELO                             </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> One wrong letter               </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  HULLO                                    </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Two wrong letters              </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  HULUO                                    </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Only one error--the one with the lowest penalty--is counted for a lookup word/dictionary word pair.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of one or more data sets. Each data set will contain a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(n < 1000)$
 -->
<SPAN CLASS="MATH">(<I>n</I> &lt; 1000)</SPAN>
<tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines each having a dictionary word (consisting of 1 to 100 uppercase letters). This is followed by a line containing an integer <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le m \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3872img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3872img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines each having a lookup word (consisting of 1 to 100 uppercase letters). The last data set has <SPAN CLASS="MATH"><I>n</I> =</SPAN>
<tex2html_verbatim_mark><TT>0</TT>, and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, there should be a line like: 

<P>

<P>
<BR>

<TT>Data set</TT> <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN>
<tex2html_verbatim_mark><SPAN ID="txt57">:</SPAN> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH">&lt; <I>n</I> &gt;</SPAN>
<tex2html_verbatim_mark> is a sequential data set number starting at 1. This is followed by <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines (one per lookup word) looking like: 

<P>

<P>
<BR>

<code>&lt;lookup_word&gt;: &lt;dict_word_1&gt;, &lt;dict_word_2&gt;, ...&lt;dict_word_p&gt;.</code> 

<P>

<P>
<BR>
The penalty of the lookup word is the lowest possible (and the same) for each of the following list of dictionary words. The list of dictionary words should be in alphabetical order. If there are no matches, the output should look like: 

<P>

<P>
<BR>

<code>&lt;lookup_word&gt;: no suggestions.</code>

<P>

<P>
<BR>
There should be an empty line between data sets.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
CHILL 
CHELLO 
BELLOW 
HELL 
5 
HELL 
CHAMP 
CHELL 
THELLO 
THELLI 
2 
HI 
HO 
1 
HUM 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Data set 1: 
HELL: HELL. 
CHAMP: no suggestions. 
CHELL: CHELLO, CHILL, HELL. 
THELLO: CHELLO. 
THELLI: CHELLO, HELL. 

Data set 2: 
HUM: no suggestions.

______________________________________________________
3873||||||false||||||
<P>Consider the following circuit diagram made up of exclusive-or gates:<P><DIV ALIGN="CENTER"><IMG WIDTH="922" HEIGHT="269" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3873.png ALT="\epsfbox{p3873.eps}"> <tex2html_verbatim_mark></DIV><P>Obviously output zero is determined by not only input zero, but also the setting of A0, B0, C0, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> Let's call each association between input <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and output <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> a ``row". Suppose that there are seven such rows, so that ``A0" is the upper left external control, ``G0" is the upper right, ``A6" is the lower left, ``G6" is the lower right. One can then specify, in a <SPAN CLASS="MATH">7&#215;7</SPAN> <tex2html_verbatim_mark> matrix, the setting of all A0..G6, as in:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=7 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY></TABLE></DIV><P><P><BR>Note that in the case of row six, which is all zeros, this yields an identity function where output six will always be equal to input six.<P>This matrix and logic can be used as a primitive encoding/decoding device. Take an input character and pass it to the logic diagram with character bit zero going to input zero, bit one going to input one, and so on. Place output zero in bit zero of a new character; place output one in bit one, and so forth. The output will be another character, likely different from the input character.<P><P><BR><SPAN CLASS="textbf">Example</SPAN><P>An easy example can be constructed using the following table:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=7 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY></TABLE></DIV><P><P><BR>In this case bits zero, two, and four will be inverted. Inserting a letter `A', which is ASCII <SPAN CLASS="MATH">0&#215;41</SPAN> <tex2html_verbatim_mark> (hexadecimal) or binary 1000001 will generate 1010100 or <SPAN CLASS="MATH">0&#215;54</SPAN> <tex2html_verbatim_mark>, which is `T'. This completes the processing of one character by the Secret Decoder Ring.<P>After each character is completed, consider each row in the table as an integer. Row zero in the above example has a value of one. Add one to each row after processing a character. Subsequent decoder tables would thus contain:<P><DIV ALIGN="CENTER"><TABLE COLS=7 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY></TABLE><TABLE COLS=7 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY></TABLE><TABLE COLS=7 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER">After 1st character <SPAN CLASS="MATH">&nbsp; &nbsp;/SPAN> <tex2html_verbatim_mark> After 2nd character <SPAN CLASS="MATH">&nbsp; &nbsp;/SPAN> <tex2html_verbatim_mark> After 3rd character</DIV><P>Continue this process until the end of the data is encountered (see below) for each table. A row in a table will never overflow a seven bit value, so there is no need to test for this situation.<P>Although a byte is usually considered as having 8 bits, only the low-order 7 bits are used in this problem. The bit identified as ``bit 0" is the low-order bit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple tables and multiple input characters to be decoded using each table. A table will appear first, specified using 7 input lines each containing 7 integers, each of which is either 0 or 1. There is a blank between each pair of bits. Each row is arranged as described above - bit six, then bit five, and so forth down to bit zero. Following the table are additional lines of data, each line representing one character to be decoded. These lines have the same format as the table lines. The input line for the last character to be decoded by a table is followed by a line containing 7 zeroes. This input sequence may then repeat with additional tables and sets of characters to be decoded. The last repetition (a table and characters to be decoded) is followed by a line containing 7 zeroes. (This means no table will ever have 7 zeroes in its first row, and no character to be decoded will consist of 7 zeroes.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the table number (1, 2, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>) and the decoded characters. Display a blank line after the output for each table. Use the format shown in the sample below. There will not be any ``non-printable characters" in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0 0 0 0 0 1
0 0 0 0 0 0 0
0 0 0 0 0 0 1
0 0 0 0 0 0 0
0 0 0 0 0 0 1
0 0 0 0 0 0 0
0 0 0 0 0 0 0
1 0 1 0 1 0 0
0 1 1 1 1 0 1
0 1 0 1 0 0 1
1 0 1 0 0 0 1
0 1 0 1 1 1 1
1 0 0 0 1 1 0
1 0 1 0 0 1 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Table 1: ABCDEFG
</PRE><P>
______________________________________________________
3874||||||false||||||

<P>
Almost everyone is familiar with the ``seven puzzle." The puzzle board has <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> rows and <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> columns of squares, each square (except one) containing a tile marked with a letter or digit or symbol, and one empty square. In each move, any one of the tiles neighboring the empty square can be moved (by sliding it) from its square into the empty square giving a different puzzle configuration. 

<P>
In this problem each of the tiles in such a puzzle is marked with a binary digit (0 or 1). After you make exactly <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> moves of the tiles, treat each row as a separate <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>-digit binary number (treating the empty location as if it contained zero). What we want to know is the maximum number of unique binary integers that can possibly be created in this manner, considering all possible sequences of <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> moves. 

<P>
Let's consider a simple example. Suppose the initial puzzle configuration looked like that shown below, and that you make exactly one move. There are three possible choices for that move. The first choice is to move the 0 on the first row right; this yields the binary numbers 001 and 010 (treating the empty square as if it contained zero). The second choice is to move the 1 on the first row left. This yields the binary number 010 on each row. The third choice is to move the 1 on the second row up, yielding 011 and 000. So making one move could yield at most four binary numbers: 001, 010, 011 and 000.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3874.eps}$
 -->
<IMG
 WIDTH="217" HEIGHT="152" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3874.png
 ALT="\epsfbox{p3874.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple cases numbered <!-- MATH
 $1, 2, \ldots$
 -->
<SPAN CLASS="MATH">1, 2,...</SPAN>
<tex2html_verbatim_mark>. The input for each case begins with a line containing three integers <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> specifies the number of rows in the puzzle (between 1 and 5), and <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> specifies the number of columns (between 1 and 6). <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> specifies the maximum number of moves you may make; it will be no larger than 15. 

<P>
Following the first line of input there will be <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> lines, each containing <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> characters chosen from `<TT>0</TT>', `<TT>1</TT>', and `<TT>X</TT>'. Each character may be preceded and followed by whitespace (blanks or tabs). These lines specify the binary values on each tile and the position of the empty square (by the `<TT>X</TT>' character). `<TT>X</TT>' will appear exactly once. 

<P>
The last case will be followed by a line containing a single <TT>0</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, display the case number <!-- MATH
 $(1, 2, \ldots)$
 -->
<SPAN CLASS="MATH">(1, 2,...)</SPAN>
<tex2html_verbatim_mark> and the maximum number of different binary values that could be produced. Use the format shown in the samples below. Display a blank line after the output for each case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 3 1 
0 X 1 
0 1 0 
2 2 2 
0 X 
1 0 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 4 binary numbers 

Case 2: 3 binary numbers
</PRE>

<P>

______________________________________________________
3875||||||false||||||

<P>
The City of Octavia is one of the most orderly and well-organized cities in the world. The traffic in Octavia flows on 8 major avenues, named A through H and 8 major streets, numbered 1 through 8, all of which are two-way. The avenues stretch in the East/West direction and are perpendicular to the streets, which go North/South. Each street and each avenue has a speed limit â either 20 or 30 miles per hour (Octavia is not known to be fast-paced). The city infrastructure is so well designed that the distance between any two consecutive streets or avenues is exactly 1 mile. Thus, Octavians live in large city blocks that are each one square mile each (as illustrated in the diagram below), but drive only on the 8 streets and 8 avenues. Each intersection in Octavia is labeled with the name of the avenue and street that meet at that point; for example H8 is in the southeast corner of the city, while D5 is near the center. 

<P>
The Octavia City Council is conducting a traffic study and wants to install traffic lights on some (or all) intersections in Octavia. The city has already contracted Imperial Light Machines (ILM) to deliver the traffic lights. The ILM traffic lights are very simple: they only have red and green signals and are designed to cycle from green to red and back to green every 4 minutes, showing green for 2 minutes, then showing red for another 2 minutes. While this is adjustable, the Octavian Traffic Committee (OTC) has determined that 4 minutes is precisely the cycle time that they would need to control all the traffic in the city. Each traffic light is reset at a particular time every 24 hours and starts alternating from that point on, giving a green light to the North/South direction first. The city council is concerned with optimizing the traffic flow and wants to calculate the time it would take an average citizen to travel from their home to their work place, given a particular configuration of the ILM traffic lights.

<P>
<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p3875.eps}$
 -->
<IMG
 WIDTH="800" HEIGHT="521" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3875.png
 ALT="\epsfbox{p3875.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
You have been contracted by the OTC to provide key simulation data that will help the Octavia City Council determine the number and placement of the ILM Traffic Lights. To do that, you will be given a series of test cases that include speed limit data, the proposed location of traffic lights, the initial reset time of each traffic light, a starting point and time, and a destination point for a driving test (both points are intersections). You are to determine the minimum time it would take an
Octavian driver to traverse the major streets and avenues from the starting point to the destination point with the given configuration. Remember that Octavians are very strict and lawabiding citizens â they always drive at exactly the speed limit and always obey traffic lights. Keep in mind that no left or right turns are permitted on a red light in the City of Octavia.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple test cases, sequentially numbered starting with 1. The input begins with a single line containing an integer giving the number of tests. Following, there will be three separate lines of input for each test case, with all data items separated by whitespace (spaces or tabs): 

<P>

<UL>
<LI>Speed limits: a list of street or avenue names on which the speed limit is set to 20mph. All other streets and avenues (not listed in this input line) have a speed limit of 30mph. 
</LI>
<LI>Intersections with traffic lights and their reset times: a list of intersection labels, each followed by a reset time in minutes. All the reset times are given as integral numbers of minutes after midnight. 
</LI>
<LI>Start location, start time, end location: The intersection label of the start location, the time (as an integral number of minutes past midnight) when the Octavian driver leaves the start location, followed by the destination intersection label. Assume that if the start and destination locations have traffic lights, then the driver does not have to wait on those lights in order to depart or to arrive at the destination.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, display the test case number and the number of minutes it takes the Octavian driver to reach the destination. Use a format similar to that shown in the samples. Display a blank line after the output for each case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 
B C D 4 
D3 0    B4 2   C4 0   E4 0    E5 4 
E2 10   B5 

A1 0    A2 0  
A1 4    A2
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 14 minutes  

Case 2: 2 minutes
</PRE>

<P>

______________________________________________________
3876||||||false||||||

<P>
In a remote area of Canada, a bridge between two islands is being repaired. During the repair process the bridge can only take traffic in one lane. The bridge runs east and west, and there is a flag person with a radio at each end of the bridge to control the traffic flow. 

<P>
Cars may arrive at the east end of the bridge with their driver wishing to go west. Cars may also arrive at the west end of the bridge with their drivers heading east. This being Canada, all drivers obey the speed limit exactly â it takes precisely 60 seconds to cross the bridge in either direction. 

<P>
Of course, when the traffic flow is from east to west, any cars arriving on the west end must wait; similarly, if the traffic is moving across the bridge from west to eat, cars arriving at the east end must wait. The very instant that the last car going a certain direction (say, west to east) has crossed the bridge, the traffic can then run in the opposite direction (east to west). 

<P>
The input data for this problem consists of a sequence of arrival events, each event identifying the time a car arrives and at which end of the bridge it arrives. Your task is to determine when the last of the cars to arrive has left the bridge.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Example</SPAN>

<P>
Each event is characterized by the time since the previous event, and the end of the bridge at which the car arrives. For example, suppose the following happens: 

<P>

<P>
<BR>

<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
Time </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> End of the bridge </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>50   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> W </TD></TR>
</TBODY>
</TABLE>

<P>

<P>
<BR>
On the bridge, the following happens: 

<P>

<P>
<BR>

<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
Absolute Time </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Description </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       A car arrives at the east end. Since it is the first car it starts to cross, east </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> to west. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>50      </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       A second car arrives; since the direction is currently east to west, it also is </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> allowed to cross. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>60      </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       The first car leaves the bridge, and the second car is 10 seconds across. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>65      </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       A third car arrives at the west end of the bridge. It must wait; the direction  </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       right now is east to west. Note that this happens at time  because it is 15  </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       seconds later than the previous event in the data.  </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>110     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       The second car is now across. Since there are no more cars on the east end, the  </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       radios are used to instantly reverse the flow to west to east, and the third car  </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       starts across.  </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>170     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      The third car takes 60 seconds to cross, and has reached the end of the bridge.  </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      As there are no waiting cars, and no further arrival events to consider, we  </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>      display the result and proceed to the next set of data. </TD></TR>
</TBODY>
</TABLE>

<P>

<P>
<BR>
It is possible to have more than one car waiting at either end of the bridge. Since it is effectively a one lane bridge during the repair, cars can only proceed single file, cars travelling in the same direction across the bridge must maintain at least one second spacing. For example, consider this data:

<P>

<P>
<BR>

<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
Time </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> End of the bridge </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> E </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> W </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> W </TD></TR>
</TBODY>
</TABLE>

<P>

<P>
<BR>
On the bridge, the following happens: 

<P>

<P>
<BR>

<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
Absolute Time </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  Description </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       A car arrives at the east end. Since it is the first car it starts to cross, east to west.</TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10      </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       A second car arrives; because it is on the west end it must wait. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20      </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       Another car has arrived at the west end of the bridge. It must wait as well. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>60      </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       The first car leaves the bridge; the west to east traffic can proceed, and the second </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       car starts across. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>61      </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       One second later the other car on the west end begins to cross. </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>121     </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>       This last car takes 60 seconds to cross, and has reached the end of the bridge. </TD></TR>
</TBODY>
</TABLE>

<P>

<P>
<BR>
The program should display ``121 seconds" and proceed to the next set of data. 

<P>
A car must begin crossing the bridge as soon as possible, without violating any of the requirements of the problem. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple input cases, sequentially numbered starting with 1. The first line of the input contains a single integer specifying the number of cases. Following this, each case has one event per line specified by an integer <!-- MATH
 $\triangle T$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="20" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3876img1.png
 ALT="$ \triangle$"><I>T</I></SPAN>
<tex2html_verbatim_mark> to indicate the time since the previous event, whitespace, and either the character `<TT>E</TT>' or the character `<TT>W</TT>' to indicate at which end of the bridge the car arrived. The absolute time at which each data set begins is <TT>0</TT>, the first event always has <!-- MATH
 $\triangle T = 0$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="20" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3876img1.png
 ALT="$ \triangle$"><I>T</I> = 0</SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $\triangle T$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="20" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3876img1.png
 ALT="$ \triangle$"><I>T</I></SPAN>
<tex2html_verbatim_mark> for all other events is greater than <TT>0</TT>. There is a line containing the integer <TT>â1</TT> after the last line of data for each case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, display the case number and the number of seconds required for all the cars to cross the bridge. If each allowable sequence of events does not yield the same time required for all cars to cross the bridge, then you should report the minimum of those times. Display the output in a format similar to that shown in the samples. Display a blank line after the output for each case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
0 E 
50 E 
15 W 
-1 
0 E 
10 W 
10 W 
-1 
0 W 
30 E 
10 W 
10 W 
40 W 
-1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1. 170 seconds 

Case 2. 121 seconds 

Case 3. 210 seconds
</PRE>

<P>

______________________________________________________
3877||||||false||||||

<P>
Mr. Horologia's House of Clocks contains various cuckoo clocks that customers have brought in for repair. Since they are in the clock shop, one might rightly assume that these clocks don't quite run as they should. In fact, a fast clock may take 3,500 seconds to advance one hour, instead of 3,600 seconds. A slow clock might take 3,750 seconds. Each clock makes a sound like a cuckoo once each hour, precisely on the hour. That is, a clock will ``cuckoo" when it displays 12:00, 1:00, 2:00, and so forth. Of course, the displayed time when it cuckoos will not necessarily correspond to the real time, since the clock may be running fast or slow. 

<P>
Every midnight on Sunday morning, Mr. Horologia sets all clocks to exactly 12:00. He has sufficient assistants awake at that hour that all clocks can be set simultaneously. Some time later, possibly that same day but quite possibly several days later, all clocks in the room will cuckoo at precisely the same instant in time. (All clocks initially would chime when they are set at midnight on Sunday, but the initial cuckooing does not count.) What is the first day, hour, minute, and second when all clocks simultaneously go off? The time might be several days in the future; also, midnight on the next Sunday morning might come around again before they ever cuckoo simultaneously. In this latter case, Mr. Horologia will set them all again, and the correct answer would be ``<TT>Never</TT>".

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Example</SPAN>

<P>
An easy example involves two clocks, one that advances an hour every 3,000 seconds, and a second clock that advances an hour every 4,500 seconds. For simplicity, note that these represent 50 minutes and 75 minutes, respectively. The first clock would reach 1:00 AM after 50 minutes, then 2:00 AM after 100 minutes, and 3:00 AM after 150 minutes. The second clock would reach 1:00 at 75 minutes and 2:00 at 150 minutes. Thus, 150 minutes after midnight, clock number one and clock number two both cuckoo. The correct answer is thus ``<TT>Sunday at 2:30:00 AM</TT>". 

<P>
A second example might involve four clocks, all of which are extremely fast. They advance at 600, 1200, 1800, and 600 seconds. After 30 minutes, all of them cuckoo except for the second clock. After 60 minutes, all will cuckoo. Thus the answer here is ``<TT>Sunday at 1:00:00 AM</TT>". 

<P>
Finally, suppose we have four clocks with speeds of 3601, 3559, 3600, and 3700. The answer in this case is ``<TT>Never</TT>" -- the next Sunday will occur before all clocks cuckoo. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple cases, sequentially numbered starting with 1. The input for each case is a single line that contains integers giving the number of clocks <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> ``seconds" measurements. A line containing the integer <TT>0</TT> follows the last case. Because the repair shop is limited, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> will never be larger than 10.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, display the case number and either the first date and time when all clocks will cuckoo simultaneously, or the word ``<TT>Never</TT>" as described above. Display a blank line after the output for each case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 3000 4500 
4 600 1200 1800 600 
3 3550 3650 3655 
2 3525 3625
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: Sunday at 2:30:00 AM 

Case 2: Sunday at 1:00:00 AM 

Case 3: Never 

Case 4: Friday at 9:58:45 PM
</PRE>

<P>

______________________________________________________
3878||||||false||||||

<P>
In traditional ``long multiplication" we determine the product of two non-negative integers, <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>, by multiplying <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> by the individual digits of <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>, in turn, starting with the units digit. The results of these multiplications are arranged appropriately and added, yielding the completed product. 

<P>
The representation of these operations is usually done in a particular manner. Consider the multiplication of 123 by 95: 

<P>
<PRE>
  123 
   95 
  ---
  615 
1107 
-----
11685
</PRE>

<P>
The numbers to be multiplied, <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>, are each displayed on a separate line, followed by a horizontal line. The results of multiplying <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> by each digit of <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark> are then displayed on separate lines, followed by another horizontal line, and then the final product. In this problem you are to perform a sequence of such multiplications, displaying the results in this traditional representation, with the horizontal lines displayed using hyphens (minus signs). 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple input cases, sequentially numbered starting with 1. The input for each case will be a single line containing two integers, <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>, separated by whitespace (one or more blanks and tab characters). Whitespace may also precede the first integer and follow the second integer. Each integer will have no more than 30 digits. A line containing only an end of line character follows the last case. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case, first display the case number on a line by itself. Then perform the multiplication of <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>, displaying the results in the form shown above and in the examples shown below. Follow the output for each multiplication by a blank line. If <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark> contains only a single significant digit, omit the second horizontal line and the sum (since in that case it would be superfluous). Display zeroes only when they are significant. There must be no unnecessary leading blanks on any output line. That is, the entire multiplication display must appear as far to the left as possible. 

<P>
The number of hyphens in the first horizontal line should be the same as the number of significant digits in the larger of <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>. The number of hyphens in the second horizontal line, if it is produced, should be the same as the number of significant digits in the product of <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
  4 7 
135   46 
     12345   862
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 
 4 
 7 
 -
28 

Case 2: 
 135 
  46 
 ---
 810 
540 
----
6210 

Case 3: 
   12345 
     862 
   -----
   24690 
  74070 
 98760 
--------
10641390
</PRE>

<P>

______________________________________________________
3879||||||false||||||
<P>Genes are DNA sequences that cause certain traits in living organisms. For example, a specific DNA sequence, called the sickle cell gene, manifests itself in Sickle Cell Anemia, a deadly disease of the blood. Similarly, other genes are responsible for traits like blue or brown eyes, blond or brunette hair, and so on (admittedly, this is an oversimplification of the structure and function of genes, but it will do for this problem). The human DNA code, called the human genome, has already been extensively studied and fully mapped out to genes. Thus, it is possible to collect a DNA sample from a person and predict some of the traits in that individual, caused by genes found in the sample.<P>Your task is to locate and identify a number of pre-defined genes in several given DNA sequences. All DNA molecules, as well as any gene, are sequences composed from only four distinct chemicals, called nucleotides (Adenine, Cytosine, Guanine, and Thymine), which are labeled with the following letters: <TT>A</TT>, <TT>C</TT>, <TT>G</TT>, and <TT>T</TT>. From biology, we know a DNA molecule forms a right-handed double-helix structure where each base from one of the strands connects to exactly one corresponding base from the second strand. The bases always form <TT>A</TT>-<TT>T</TT> or <TT>C</TT>-<TT>G</TT> pairs (or, reflexively, <TT>T</TT>-<TT>A</TT>, and <TT>G</TT>-<TT>C</TT>) and thus, any gene sequence always has its complement in the pairing strand. Due to the method of collecting and examining DNA material, any given gene DNA sequence may be found in the DNA sample in either its original sequence, or in reverse, or in its complement image, or its reverse complement image. For example:<P><P><BR>The gene <TT>ACTTAGAAGGT</TT> may be found as <SPAN CLASS="MATH"><IMG WIDTH="20" HEIGHT="105" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3879img1.png ALT="$ \left\{\vphantom{ \begin{array}{l}
\mbox{\texttt{ACTTAGAAGGT} (original)} \\  ...
...)} \\
\mbox{\texttt{ACCTTCTAAGT} (reversed complement)}
\end{array} }\right.$"><IMG WIDTH="307" HEIGHT="105" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3879img1.png ALT="$ \begin{array}{l}
\mbox{\texttt{ACTTAGAAGGT} (original)} \\
\mbox{\texttt{TGA...
... reversed)} \\
\mbox{\texttt{ACCTTCTAAGT} (reversed complement)}
\end{array}$"></SPAN> <tex2html_verbatim_mark><P><P><BR>Further, even though unlikely, some genes, or one of their alternative sequences, may be fragments of other, larger genes. Finally, the same gene may be found in the same DNA sample in multiple locations, either in its original, or one of its alternative sequences. You will be given a set of genes, one gene per input line, each labeled with a simple name. The name and the gene sequence will be separated by a colon (``<TT>:</TT>"). For example:<P><P><BR><TT>Blue_eyes:ACTTAGAAGGT</TT><P><TT>Blond_hair:CTTAAGGGCGGGCTTCTTTA</TT><P><TT>...</TT><P><P><BR>The list of genes will be followed by one or more sample DNA sequences, which are submitted to you for your evaluation. Your program must display the list of genes present in each sample DNA sequence and the location (counting from 1) of the first base of the that gene, in the order in which those genes were encoded by the sequence. For example, the sequence<P><DIV ALIGN="CENTER"><TT>ACCTTACC<SPAN ID="txt73">CTTAAGGGCGGGCTTCTTTA</SPAN>GTGCTTGAGG<SPAN ID="txt74">ACCTTCTAAGT</SPAN></TT></DIV><P><DIV ALIGN="CENTER"><TT>TTACGGAATAACG<SPAN ID="txt75">ATTTCTTCGGGCGGGAATTC</SPAN>CAAGTCCCGGATCGA</TT></DIV><P>encodes Blond_hair , Blue_eyes, and Blond_hair at locations 9, 39, and 63, respectively. If the DNA sequence does not encode any of the known genes, simply output ``<TT>none</TT>".<P>Gene matches may overlap in a DNA sequence. For example, if a gene is <TT>ACA</TT> and the sample is <TT>ACACACA</TT>, your program should report three matches, one at index 1, one at index 3, and one at index 5.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input will contain a single integer <SPAN CLASS="MATH"><I>NG</I></SPAN> <tex2html_verbatim_mark> indicating the number of genes that are supplied. This number will be no larger than 20. <SPAN CLASS="MATH"><I>NG</I></SPAN> <tex2html_verbatim_mark> lines will follow this line, each containing a simple name for a gene (1 to 18 characters), a colon, and the gene sequence (no more than 40 characters each of which is <TT>A</TT>, <TT>T</TT>, <TT>C</TT>, or <TT>G</TT>). There may be whitespace (blanks and/or tabs) following the gene before the end of line.<P>Following the <SPAN CLASS="MATH"><I>NG</I></SPAN> <tex2html_verbatim_mark> lines containing genes there will appear an arbitrary number of sample DNA sequences, none of which is longer than 5000 characters. These are numbered sequentially, starting with 1. Each sample sequence will begin on a new line, and will naturally be composed from the letters <TT>A</TT>, <TT>T</TT>, <TT>C</TT>, and <TT>G</TT>. There may be multiple lines required for a single sample sequence, and the last letter in the last line of the sample will be followed immediately by a period (``<TT>.</TT>"). There may be whitespace at the end of each line (including the last in a sample). The sample input illustrates this format.<P>A line containing only a single period in the first column follows the last sample.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each sample DNA sequence, display the sequence number <SPAN CLASS="MATH">(1, 2,...)</SPAN> <tex2html_verbatim_mark>. If none of the NG genes appear in the sequence, then display the word ``<TT>none</TT>" on the same line as the sequence number. Otherwise, display the names of the genes - in the order they appear - on separate lines following the sequence number. After the name of each gene encountered in the DNA sequence, output the index of the first matching nucleotide of the gene (counting from 1). If multiple genes match at the same index, they should be displayed in the same order they appear in the input. Each gene matching the DNA sequence at a specific index value should be displayed only once. Your output should be very similar to that shown below, including the indentation of the names of the genes. Display a blank line after the output for each sample DNA sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
Blue_eyes:ACTTAGAAGGT 
Blond_hair:CTTAAGGGCGGGCTTCTTTA 
ACCTTACCCTTAAGGGCGGGCTTCTTTA 
GTGCTTGAGGACCTTCTAAGT 
TTACGGAATAACGATTTCTTCGGGCGGGAAT 
TCCAAGTCCCGGATCGA. 
TCCAAGTCCCGGATCGA. 
.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Sequence 1: 
    Blond_hair at 9 
    Blue_eyes at 39 
    Blond_hair at 63 

Sequence 2: none
</PRE><P>
______________________________________________________
3880||||||false||||||
<P>In this problem you are given a piece of graph paper with one-inch squares. The paper is <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> inches wide and <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark> inches tall, and you want to identify two points that are close as possible to <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> inches apart, where <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> is a real number. Naturally we can only accurately identify distances between the points formed by the intersections of the horizontal and vertical lines on the graph paper. Assume each point is identified by a pair of integers <SPAN CLASS="MATH">(<I>X</I>, <I>Y</I>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is the horizontal distance (in inches) to the right of the left edge of the paper and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> is the vertical distance down from the top edge of the paper. Thus a page that is 8 inches wide and 10 inches tall will have the point (0,0) in the upper left corner and the point (8,10) in the lower right corner. We assume that all distances will be measured from the upper left corner, (0,0). Your task is to find the point <SPAN CLASS="MATH">(<I>X</I>, <I>Y</I>)</SPAN> <tex2html_verbatim_mark> that is as close as possible to <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> inches from (0,0). If there are multiple points meeting this requirement, pick the point that has the smallest possible <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases to consider, numbered sequentially starting with 1. For each case there will be a single line of input containing W, H, and D separated by whitespace. Each of W and H will be no larger than 1000. A line containing three zeroes will follow the input for the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case display the case number and the integers <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> in the exact format shown in the samples below. Display a blank line after the output for each case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 10 1.5 
12 25 7.7 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: (1,1) 

Case 2: (3,7)
</PRE><P>
______________________________________________________
3881||||||false||||||
<P>Adding hexadecimal numbers is not too difficult, but you must remember the carries! Like adding decimal numbers, carries of 1 are generated when the sum of two digits and the carry from the right exceeds the maximum value that can be represented in a single digit (15, of course, for hexadecimal digits). In this problem you will be given a pair of non-negative hexadecimal numbers and asked to determine the number of non-zero carries that are involved in adding these numbers. We don't care about the sum.<P>For example, suppose the numbers to be added are <TT>1A2B</TT> and <TT>D6E4</TT>. The following steps would be used to determine the number of carries.<P><UL><LI><TT>B</TT> (decimal 11) and <TT>4</TT> are added, yielding a sum of 15 (there is no carry into the low-order position). Since this is less than 16, no carry is generated. </LI><LI><TT>2</TT> and <TT>E</TT> (decimal 14) are added (with no carry from the preceding step), yielding a sum of 16. Since this is too large for a single hexadecimal digit (it's larger than 15), a carry is generated to the next step. </LI><LI><TT>A</TT> (decimal 10) and <TT>6</TT> are added, along with the carry from the previous step. The sum is 10 + 6 + 1 = 17, and a carry is generated. </LI><LI>Finally, <TT>1</TT> and <TT>D</TT> (decimal 13) and the carry from the previous step are added yielding 1 + 13 + 1 = 15, and no carry is generated. </LI></UL><P>So a total of 2 carries were generated, and this is the answer for this case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases to consider, each numbered sequentially starting with 1. For each case the input consists of a single line containing two non-zero hexadecimal numbers, each containing no more than 30 hexadecimal digits. The allowable hexadecimal digits are <TT>0</TT> through <TT>9</TT> and `<TT>A</TT>' through `<TT>F</TT>' and `<TT>a</TT>' through `<TT>f</TT>'. These numbers are separated, and possibly preceded and followed by spaces. The input for the last case is followed by a line containing two hexadecimal numbers, each consisting of a single `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case display the case number and the number of carries generated. Use a format <SPAN CLASS="textbf"><SPAN ID="txt69">identical</SPAN></SPAN> to that shown in the samples below, and display a blank line after the output for each case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1A2B D6E4 
1 f 
   1    2222222222 
     0   0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2 carries 

Case 2: 1 carry 

Case 3: No carries

______________________________________________________
3882||||||false||||||

<P>
Let's play a stone removing game. 

<P>
Initially, <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> stones are arranged on a circle and numbered <!-- MATH
 $1, \ldots , n$
 -->
<SPAN CLASS="MATH">1,..., <I>n</I></SPAN>
<tex2html_verbatim_mark> clockwise (Figure 1). You are also given two numbers <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>. From this state, remove stones one by one following the rules explained below, until only one remains. In step 1, remove stone <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>. In step 2, locate the <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>-th next stone clockwise from <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> and remove it. In subsequent steps, start from the slot of the stone removed in the last step, make <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> hops clockwise on the remaining stones and remove the one you reach. In other words, skip <SPAN CLASS="MATH">(<I>k</I> - 1)</SPAN>
<tex2html_verbatim_mark> remaining stones clockwise and remove the next one. Repeat this until only one stone is left and answer its number. 

<P>
For example, the answer for the case <SPAN CLASS="MATH"><I>n</I> = 8</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I> = 5</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I> = 3</SPAN>
<tex2html_verbatim_mark> is 1, as shown in Figure 1.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3882.eps}$
 -->
<IMG
 WIDTH="1102" HEIGHT="508" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3882.png
 ALT="\epsfbox{p3882.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1: An example game

</DIV>

<P>

<P>
<BR>
<SPAN  CLASS="textbf">Initial state:</SPAN> Eight stones are arranged on a circle. 

<P>
<SPAN  CLASS="textbf">Step 1:</SPAN> Stone 3 is removed since <SPAN CLASS="MATH"><I>m</I> = 3</SPAN>
<tex2html_verbatim_mark>. 

<P>
<SPAN  CLASS="textbf">Step 2:</SPAN> You start from the slot that was occupied by stone 3. You skip four stones 4, 5, 6 and 7 (since <SPAN CLASS="MATH"><I>k</I> = 5</SPAN>
<tex2html_verbatim_mark>), and remove the next one, which is 8. 

<P>
<SPAN  CLASS="textbf">Step 3:</SPAN> You skip stones 1, 2, 4 and 5, and thus remove 6. Note that you only count stones that are still on the circle and ignore those already removed. Stone 3 is ignored in this case. 

<P>
<SPAN  CLASS="textbf">Steps 4-7:</SPAN> You continue until only one stone is left. Notice that in later steps when only a few stones remain, the same stone may be skipped multiple times. For example, stones 1 and 4 are skipped twice in step 7. 

<P>
<SPAN  CLASS="textbf">Final State:</SPAN> Finally, only one stone, 1, is on the circle. This is the final state, so the answer is 1.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets each of which is formatted as follows. 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>n</I>&nbsp;<I>k</I>&nbsp;<I>m</I></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
The last dataset is followed by a line containing three zeros. Numbers in a line are separated by a single space. A dataset satisfies the following conditions. 

<P>
<P><!-- MATH
 \begin{displaymath}
2 \le n \le 10000, 1 \le k \le 10000, 1 \le m \le n
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3882.png
 ALT="$\displaystyle \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3882.png
 ALT="$\displaystyle \le$">10000, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3882.png
 ALT="$\displaystyle \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3882.png
 ALT="$\displaystyle \le$">10000, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3882.png
 ALT="$\displaystyle \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3882.png
 ALT="$\displaystyle \le$"><I>n</I>
</DIV><P>
<tex2html_verbatim_mark></P>

<P>
The number of datasets is less than 100. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, output a line containing the stone number left in the final state. No extra characters such as spaces should appear in the output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8 5 3 
100 9999 98 
10000 10000 10000 
0 0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
93 
2019
</PRE>

<P>

______________________________________________________
3883||||||false||||||
<P>The sequence of <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> consecutive composite numbers (positive integers that are not prime and not equal to 1) lying between two successive prime numbers <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I> + <I>n</I></SPAN> <tex2html_verbatim_mark> is called a <SPAN CLASS="textit">prime gap</SPAN> of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. For example, <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3883img1.png ALT="$ \langle$">24, 25, 26, 27, 28<IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3883img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark> between 23 and 29 is a prime gap of length 6.<P>Your mission is to write a program to calculate, for a given positive integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, the length of the prime gap that contains <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>. For convenience, the length is considered 0 in case no prime gap contains <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of lines each of which contains a single positive integer. Each positive integer is greater than 1 and less than or equal to the 100000th prime number, which is 1299709. The end of the input is indicated by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be composed of lines each of which contains a single non-negative integer. It is the length of the prime gap that contains the corresponding positive integer in the input if it is a composite number, or `<TT>0</TT>' otherwise. No other characters should occur in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 
11 
27 
2 
492170 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
0 
6 
0 
114
</PRE><P>
______________________________________________________
3884||||||false||||||
<P>Here is a very simple variation of the game backgammon, named ``Minimal Backgammon". The game is played by only one player, using only one of the dice and only one checker (the token used by the player).<P>The game board is a line of <SPAN CLASS="MATH">(<I>N</I> + 1)</SPAN> <tex2html_verbatim_mark> squares labeled as 0 (the start) to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (the goal). At the beginning, the checker is placed on the start (square 0). The aim of the game is to bring the checker to the goal (square <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>). The checker proceeds as many squares as the roll of the dice. The dice generates six integers from 1 to 6 with equal probability.<P>The checker should not go beyond the goal. If the roll of the dice would bring the checker beyond the goal, the checker retreats from the goal as many squares as the excess. For example, if the checker is placed at the square <SPAN CLASS="MATH">(<I>N</I> - 3)</SPAN> <tex2html_verbatim_mark>, the roll ``5" brings the checker to the square <SPAN CLASS="MATH">(<I>N</I> - 2)</SPAN> <tex2html_verbatim_mark>, because the excess beyond the goal is 2. At the next turn, the checker proceeds toward the goal as usual.<P>Each square, except the start and the goal, may be given one of the following two special instructions.<P><DIV ALIGN="CENTER"><IMG WIDTH="443" HEIGHT="761" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="\epsfbox{p3884.eps}"> <tex2html_verbatim_mark></DIV><P><UL><LI>Lose one turn (labeled ``L" in Figure 2)<P>If the checker stops here, you cannot move the checker in the next turn. </LI><LI>Go back to the start (labeled ``B" in Figure 2)<P>If the checker stops here, the checker is brought back to the start. </LI></UL><P>Given a game board configuration (the size <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, and the placement of the special instructions), you are requested to compute the probability with which the game succeeds within a given number of turns.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets, each containing integers in the following format.<P><P><BR><SPAN CLASS="MATH"><I>N</I>&nbsp;<I>T</I>&nbsp;<I>L</I>&nbsp;<I>B</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>Lose</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>Lose</I><SUB>L</SUB></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>Back</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>Back</I><SUB>B</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the index of the goal, which satisfies <SPAN CLASS="MATH">5<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is the number of turns. You are requested to compute the probability of success within <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> turns. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> satisfies <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> is the number of squares marked ``Lose one turn", which satisfies <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> is the number of squares marked ``Go back to the start", which satisfies <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>. They are separated by a space.<P><SPAN CLASS="MATH"><I>Lose</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>'s are the indexes of the squares marked ``Lose one turn", which satisfy <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$"><I>Lose</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>. All <SPAN CLASS="MATH"><I>Lose</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>'s are distinct, and sorted in ascending order. <SPAN CLASS="MATH"><I>Back</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>'s are the indexes of the squares marked ``Go back to the start", which satisfy <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$"><I>Back</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3884.png ALT="$ \le$"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>. All <SPAN CLASS="MATH"><I>Back</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>'s are distinct, and sorted in ascending order. No numbers occur both in <SPAN CLASS="MATH"><I>Lose</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>'s and <SPAN CLASS="MATH"><I>Back</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>'s.<P>The end of the input is indicated by a line containing four zeros separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, you should answer the probability with which the game succeeds within the given number of turns. The output should not contain an error greater than 0.00001.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 1 0 0 
7 1 0 0 
7 2 0 0 
6 6 1 1
2 
5 
7 10 0 6
1 
2 
3 
4 
5 
6 
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.166667 
0.000000 
0.166667 
0.619642 
0.000000
</PRE><P>
______________________________________________________
3885||||||false||||||

<P>
You are constructing a triangular pyramid with a sheet of craft paper with grid lines. Its base and sides are all of triangular shape. You draw the base triangle and the three sides connected to the base on the paper, cut along the outer six edges, fold the edges of the base, and assemble them up as a pyramid. 

<P>
You are given the coordinates of the base's three vertices, and are to determine the coordinates of the other three. All the vertices must have integral X- and Y-coordinate values between -100 and +100 inclusive. Your goal is to minimize the height of the pyramid satisfying these conditions. Figure 3 shows some examples.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3885.eps}$
 -->
<IMG
 WIDTH="906" HEIGHT="446" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/p3885.png
 ALT="\epsfbox{p3885.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets, each in the following format. 

<P>

<P>
<BR>

<!-- MATH
 $X_{0} \ Y_{0} \ X_{1} \ Y_{1} \ X_{2} \ Y_{2}$
 -->
<SPAN CLASS="MATH"><I>X</I><SUB>0</SUB>&nbsp;<I>Y</I><SUB>0</SUB>&nbsp;<I>X</I><SUB>1</SUB>&nbsp;<I>Y</I><SUB>1</SUB>&nbsp;<I>X</I><SUB>2</SUB>&nbsp;<I>Y</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
They are all integral numbers between -100 and +100 inclusive. <!-- MATH
 $(X_{0} , Y_{0})$
 -->
<SPAN CLASS="MATH">(<I>X</I><SUB>0</SUB>, <I>Y</I><SUB>0</SUB>)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(X_{1} , Y_{1})$
 -->
<SPAN CLASS="MATH">(<I>X</I><SUB>1</SUB>, <I>Y</I><SUB>1</SUB>)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(X_{2} , Y_{2})$
 -->
<SPAN CLASS="MATH">(<I>X</I><SUB>2</SUB>, <I>Y</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark> are the coordinates of three vertices of the triangular base in counterclockwise order. 

<P>
The end of the input is indicated by a line containing six zeros separated by a single space. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, answer a single number in a separate line. If you can choose three vertices <!-- MATH
 $(X_{a}, Y_{a})$
 -->
<SPAN CLASS="MATH">(<I>X</I><SUB>a</SUB>, <I>Y</I><SUB>a</SUB>)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(X_{b}, Y_{b})$
 -->
<SPAN CLASS="MATH">(<I>X</I><SUB>b</SUB>, <I>Y</I><SUB>b</SUB>)</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $(X_{c}, Y_{c})$
 -->
<SPAN CLASS="MATH">(<I>X</I><SUB>c</SUB>, <I>Y</I><SUB>c</SUB>)</SPAN>
<tex2html_verbatim_mark> whose coordinates are all integral values between -100 and +100 inclusive, and triangles <!-- MATH
 $(X_{0}, Y_{0})-(X_{1}, Y_{1})-(X_{a}, Y_{a})$
 -->
<SPAN CLASS="MATH">(<I>X</I><SUB>0</SUB>, <I>Y</I><SUB>0</SUB>) - (<I>X</I><SUB>1</SUB>, <I>Y</I><SUB>1</SUB>) - (<I>X</I><SUB>a</SUB>, <I>Y</I><SUB>a</SUB>)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(X_{1}, Y_{1})-(X_{2}, Y_{2})-(X_{b}, Y_{b})$
 -->
<SPAN CLASS="MATH">(<I>X</I><SUB>1</SUB>, <I>Y</I><SUB>1</SUB>) - (<I>X</I><SUB>2</SUB>, <I>Y</I><SUB>2</SUB>) - (<I>X</I><SUB>b</SUB>, <I>Y</I><SUB>b</SUB>)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(X_{2}, Y_{2})- (X_{0}, Y_{0})-(X_{c}, Y_{c})$
 -->
<SPAN CLASS="MATH">(<I>X</I><SUB>2</SUB>, <I>Y</I><SUB>2</SUB>) - (<I>X</I><SUB>0</SUB>, <I>Y</I><SUB>0</SUB>) - (<I>X</I><SUB>c</SUB>, <I>Y</I><SUB>c</SUB>)</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $(X_{0}, Y_{0})-(X_{1}, Y_{1})-(X_{2}, Y_{2})$
 -->
<SPAN CLASS="MATH">(<I>X</I><SUB>0</SUB>, <I>Y</I><SUB>0</SUB>) - (<I>X</I><SUB>1</SUB>, <I>Y</I><SUB>1</SUB>) - (<I>X</I><SUB>2</SUB>, <I>Y</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark> do not overlap each other (in the XY-plane), and can be assembled as a triangular pyramid of positive (non-zero) height, output the minimum height among such pyramids. Otherwise, output `<TT>-1</TT>'. 

<P>
You may assume that the height is, if positive (non-zero), not less than 0.00001. The output should not contain an error greater than 0.00001.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 0 1 0 0 1 
0 0 5 0 2 5 
-100 -100 100 -100 0 100 
-72 -72 72 -72 0 72
0 0 0 0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
1.49666 
-1 
8.52936
</PRE>

<P>

______________________________________________________
3886||||||false||||||
<P>Your task in this problem is to create a program that finds the shortest path between two given locations on a given street map, which is represented as a collection of line segments on a plane.<P><DIV ALIGN="CENTER"><IMG WIDTH="911" HEIGHT="558" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3886.png ALT="\epsfbox{p3886.eps}"> <tex2html_verbatim_mark></DIV><P>Figure 4 is an example of a street map, where some line segments represent streets and the others are signs indicating the directions in which cars cannot move. More concretely, <TT>AE</TT>, <TT>AM</TT>, <TT>MQ</TT>, <TT>EQ</TT>, <TT>CP</TT> and <TT>HJ</TT> represent the streets and the others are signs in this map. In general, an end point of a sign touches one and only one line segment representing a street and the other end point is open. Each end point of every street touches one or more streets, but no signs.<P>The sign <TT>BF</TT>, for instance, indicates that at <TT>B</TT> cars may move left to right but may not in the reverse direction. In general, cars may not move from the obtuse angle side to the acute angle side at a point where a sign touches a street (note that the angle <TT>CBF</TT> is obtuse and the angle <TT>ABF</TT> is acute). Cars may directly move neither from <TT>P</TT> to <TT>M</TT> nor from <TT>M</TT> to <TT>P</TT> since cars moving left to right may not go through <TT>N</TT> and those moving right to left may not go through <TT>O</TT>. In a special case where the angle between a sign and a street is rectangular, cars may not move in either directions at the point. For instance, cars may directly move neither from <TT>H</TT> to <TT>J</TT> nor from <TT>J</TT> to <TT>H</TT>.<P>You should write a program that finds the shortest path obeying these traffic rules. The length of a line segment between <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><IMG WIDTH="194" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3886.png ALT="$ \sqrt{{(x_2 - x_1)^{2} + (y_2 - y_1)^{2}}}$"></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets, each in the following format.<P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>x</I><SUB>s</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUB>s</SUB></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>x</I><SUB>g</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUB>g</SUB></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>x</I><SUP>1</SUP><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUP>1</SUP><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>x</I><SUP>1</SUP><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUP>1</SUP><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3886.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>x</I><SUP>k</SUP><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUP>k</SUP><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>x</I><SUP>k</SUP><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUP>k</SUP><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3886.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>x</I><SUP>n</SUP><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUP>n</SUP><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>x</I><SUP>n</SUP><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUP>n</SUP><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><BR><P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, representing the number of line segments, is a positive integer less than or equal to 200.<P><P><BR><SPAN CLASS="MATH">(<I>x</I><SUB>s</SUB>, <I>y</I><SUB>s</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>g</SUB>, <I>y</I><SUB>g</SUB>)</SPAN> <tex2html_verbatim_mark> are the start and goal points, respectively. You can assume that <SPAN CLASS="MATH">(<I>x</I><SUB>s</SUB>, <I>y</I><SUB>s</SUB>) <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3886.png ALT="$ \neq$"> (<I>x</I><SUB>g</SUB>, <I>y</I><SUB>g</SUB>)</SPAN> <tex2html_verbatim_mark> and that each of them is located on an end point of some line segment representing a street. You can also assume that the shortest path from <SPAN CLASS="MATH">(<I>x</I><SUB>s</SUB>, <I>y</I><SUB>s</SUB>)</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH">(<I>x</I><SUB>g</SUB>, <I>y</I><SUB>g</SUB>)</SPAN> <tex2html_verbatim_mark> is unique.<P><P><BR><SPAN CLASS="MATH">(<I>x</I><SUP>k</SUP><SUB>1</SUB>, <I>y</I><SUP>k</SUP><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUP>k</SUP><SUB>2</SUB>, <I>y</I><SUP>k</SUP><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> are the two end points of the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>th line segment. You can assume that <SPAN CLASS="MATH">(<I>x</I><SUP>k</SUP><SUB>1</SUB>, <I>y</I><SUP>k</SUP><SUB>1</SUB>) <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3886.png ALT="$ \neq$"> (<I>x</I><SUP>k</SUP><SUB>2</SUB>, <I>y</I><SUP>k</SUP><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>. Two line segments never cross nor overlap. That is, if they share a point, it is always one of their end points.<P><P><BR>All the coordinates are non-negative integers less than or equal to 1000. The end of the input is indicated by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input dataset, print every <SPAN CLASS="textit">street intersection point</SPAN> on the shortest path from the start point to the goal point, one in an output line in this order, and a zero in a line following those points. Note that a street intersection point is a point where at least two line segments representing streets meet. An output line for a street intersection point should contain its <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinates separated by a space.<P>Print `<TT>-1</TT>' if there are no paths from the start point to the goal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 
1 1
4 4
1 1 4 1 
1 1 1 4
3 1 3 4
4 3 5 3
2 4 3 5
4 1 4 4 
3 3 2 2
1 4 4 4
9
1 5
5 1
5 4 5 1
1 5 1 1
1 5 5 1
2 3 2 4
5 4 1 5
3 2 2 1
4 2 4 1
1 1 5 1
5 3 4 3
11
5 5
1 0
3 1 5 1
4 3 4 2
3 1 5 5 
2 3 2 2
1 0 1 2
1 2 3 4
3 4 5 5
1 0 5 2
4 0 4 1
5 5 5 1
2 3 2 4
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1 
3 1 
3 4 
4 4 
0 
-1 
5 5 
5 2 
3 1 
1 0 
0
</PRE><P>
______________________________________________________
3887||||||false||||||
<P>Given an undirected weighted graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, you should find one of spanning trees specified as follows.<P>The graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> is an ordered pair <SPAN CLASS="MATH">(<I>V</I>, <I>E</I>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> is a set of vertices <SPAN CLASS="MATH">{<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>,..., <I>v</I><SUB>n</SUB>}</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> is a set of undirected edges <SPAN CLASS="MATH">{<I>e</I><SUB>1</SUB>, <I>e</I><SUB>2</SUB>,..., <I>e</I><SUB>m</SUB>}</SPAN> <tex2html_verbatim_mark>. Each edge <SPAN CLASS="MATH"><I>e</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3887img1.png ALT="$ \in$"> <I>E</I></SPAN> <tex2html_verbatim_mark> has its weight <SPAN CLASS="MATH"><I>w</I>(<I>e</I>)</SPAN> <tex2html_verbatim_mark>.<P>A spanning tree <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is a tree (a connected subgraph without cycles) which connects all the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> vertices with <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> edges. The <SPAN CLASS="textit">slimness</SPAN> of a spanning tree <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is defined as the difference between the largest weight and the smallest weight among the <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> edges of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="570" HEIGHT="253" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3887img1.png ALT="\epsfbox{p3887a.eps}"> <tex2html_verbatim_mark></DIV><P>For example, a graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> in Figure 5(a) has four vertices <!-- MATH
 $\{v_{1} , v_{2} , v_{3} , v_{4} \}$
 -->
<SPAN CLASS="MATH">{<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>, <I>v</I><SUB>3</SUB>, <I>v</I><SUB>4</SUB>}</SPAN>
<tex2html_verbatim_mark> and five undirected edges <!-- MATH
 $\{e_{1} , e_{2} , e_{3} , e_{4} , e_{5} \}$
 -->
<SPAN CLASS="MATH">{<I>e</I><SUB>1</SUB>, <I>e</I><SUB>2</SUB>, <I>e</I><SUB>3</SUB>, <I>e</I><SUB>4</SUB>, <I>e</I><SUB>5</SUB>}</SPAN>
<tex2html_verbatim_mark>. The weights of the edges are <!-- MATH
 $w(e_{1}) = 3$
 -->
<SPAN CLASS="MATH"><I>w</I>(<I>e</I><SUB>1</SUB>) = 3</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $w(e_{2}) = 5$
 -->
<SPAN CLASS="MATH"><I>w</I>(<I>e</I><SUB>2</SUB>) = 5</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $w(e_{3}) = 6$
 -->
<SPAN CLASS="MATH"><I>w</I>(<I>e</I><SUB>3</SUB>) = 6</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $w(e_{4}) = 6$
 -->
<SPAN CLASS="MATH"><I>w</I>(<I>e</I><SUB>4</SUB>) = 6</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $w(e_{5}) = 7$
 -->
<SPAN CLASS="MATH"><I>w</I>(<I>e</I><SUB>5</SUB>) = 7</SPAN>
<tex2html_verbatim_mark> as shown in Figure 5(b).

<P>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p3887b.eps}$
 -->
<IMG
 WIDTH="741" HEIGHT="259" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3887img1.png
 ALT="\epsfbox{p3887b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
There are several spanning trees for <SPAN CLASS="MATH"><I>G</I></SPAN>
<tex2html_verbatim_mark>. Four of them are depicted in Figure 6(a)â¼(d). The spanning tree <SPAN CLASS="MATH"><I>T</I><SUB>a</SUB></SPAN>
<tex2html_verbatim_mark> in Figure 6(a) has three edges whose weights are 3, 6 and 7. The largest weight is 7 and the smallest weight is 3 so that the slimness of the tree <SPAN CLASS="MATH"><I>T</I><SUB>a</SUB></SPAN>
<tex2html_verbatim_mark> is 4. The slimnesses of spanning trees <SPAN CLASS="MATH"><I>T</I><SUB>b</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I><SUB>c</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I><SUB>d</SUB></SPAN>
<tex2html_verbatim_mark> shown in Figure 6(b), (c) and (d) are 3, 2 and 1, respectively. You can easily see the slimness of any other spanning tree is greater than or equal to 1, thus the spanning tree <SPAN CLASS="MATH"><I>T</I><SUB>d</SUB></SPAN>
<tex2html_verbatim_mark> in Figure 6(d) is one of the slimmest spanning trees whose slimness is 1. 

<P>
Your job is to write a program that computes the smallest slimness. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets, followed by a line containing two zeros separated by a space. Each dataset has the following format. 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>  <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> 
<BR><SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>  <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>  <SPAN CLASS="MATH"><I>w</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> 
<BR><SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3887img1.png
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> 
<BR><SPAN CLASS="MATH"><I>a</I><SUB>m</SUB></SPAN>
<tex2html_verbatim_mark>  <SPAN CLASS="MATH"><I>b</I><SUB>m</SUB></SPAN>
<tex2html_verbatim_mark>  <SPAN CLASS="MATH"><I>w</I><SUB>m</SUB></SPAN>
<tex2html_verbatim_mark> 
<BR>
<P>

<P>
<BR>
Every input item in a dataset is a non-negative integer. Items in a line are separated by a space. 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of the vertices and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> the number of the edges. You can assume <!-- MATH
 $2 \le n \le 100$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3887img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3887img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $0 \le m \le n(n - 1)/2$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3887img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3887img1.png
 ALT="$ \le$"><I>n</I>(<I>n</I> - 1)/2</SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>a</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(k = 1, \ldots, m)$
 -->
<SPAN CLASS="MATH">(<I>k</I> = 1,..., <I>m</I>)</SPAN>
<tex2html_verbatim_mark> are positive integers less than or equal to <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, which represent the two vertices <SPAN CLASS="MATH"><I>v</I><SUB>a<SUB>k</SUB></SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>b<SUB>k</SUB></SUB></SPAN>
<tex2html_verbatim_mark> connected by the <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>-th edge <SPAN CLASS="MATH"><I>e</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>w</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> is a positive integer less than or equal to 10000, which indicates the weight of <SPAN CLASS="MATH"><I>e</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark>. You can assume that the graph <!-- MATH
 $G = (V, E)$
 -->
<SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN>
<tex2html_verbatim_mark> is simple, that is, there are no self-loops (that connect the same vertex) nor parallel edges (that are two or more edges whose both ends are the same two vertices).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, if the graph has spanning trees, the smallest slimness among them should be printed. Otherwise, `<TT>-1</TT>' should be printed. An output should not contain extra characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 5 
1 2 3
1 3 5
1 4 6
2 4 6
3 4 7
4 6 
1 2 10 
1 3 100 
1 4 90 
2 3 20 
2 4 80 
3 4 40 
2 1 
1 2 1
3 0 
3 1 
1 2 1
3 3 
1 2 2
2 3 5 
1 3 6 
5 10 
1 2 110 
1 3 120 
1 4 130 
1 5 120 
2 3 110 
2 4 120 
2 5 130 
3 4 120 
3 5 110 
4 5 120 
5 10 
1 2 9384 
1 3 887 
1 4 2778 
1 5 6916 
2 3 7794 
2 4 8336 
2 5 5387 
3 4 493 
3 5 6650 
4 5 1422 
5 8 
1 2 1 
2 3 100 
3 4 100 
4 5 100 
1 5 50 
2 5 50 
3 5 50 
4 1 150 
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
20 
0 
-1 
-1 
1 
0 
1686 
50
</PRE>

<P>

______________________________________________________
3888||||||false||||||
<P>You are working for an amusement park as an operator of an <SPAN CLASS="textit">obakeyashiki</SPAN>, or a haunted house, in which guests walk through narrow and dark corridors. The house is proud of their lively ghosts, which are actually robots remotely controlled by the operator, hiding here and there in the corridors. One morning, you found that the ghosts are not in the positions where they are supposed to be. Ah, yesterday was Halloween. Believe or not, paranormal spirits have moved them around the corridors in the night. You have to move them into their right positions before guests come. Your manager is eager to know how long it takes to restore the ghosts.<P>In this problem, you are asked to write a program that, given a floor map of a house, finds the smallest number of steps to move all ghosts to the positions where they are supposed to be.<P>A floor consists of a matrix of square cells. A cell is either a wall cell where ghosts cannot move into or a corridor cell where they can.<P>At each step, you can move any number of ghosts simultaneously. Every ghost can either stay in the current cell, or move to one of the corridor cells in its 4-neighborhood (i.e. immediately left, right, up or down), if the ghosts satisfy the following conditions:<P><P><BR><OL><LI>No more than one ghost occupies one position at the end of the step. </LI><LI>No pair of ghosts exchange their positions one another in the step. </LI></OL><P><P><BR>For example, suppose ghosts are located as shown in the following (partial) map, where a sharp sign (`<TT>#</TT>') represents a wall cell and `<TT>a</TT>', `<TT>b</TT>', and `<TT>c</TT>' ghosts.<P><P><BR><PRE>
                                  #### 
                                   ab# 
                                  #c## 
                                  ####
</PRE><P><P><BR>The following four maps show the only possible positions of the ghosts after one step.<P><P><BR><PRE>
                       ####   ####   ####   ####
                        ab#   a b#   acb#   ab #
                       #c##   #c##   # ##   #c##
                       ####   ####   ####   ####
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of at most 10 datasets, each of which represents a floor map of a house. The format of a dataset is as follows.<P><P><BR><SPAN CLASS="MATH"><TABLE><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>w</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>h</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>n</I></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>&nbsp;</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>c</I><SUB>11</SUB></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>c</I><SUB>12</SUB></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>...</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>c</I><SUB>1w</SUB></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>c</I><SUB>21</SUB></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>c</I><SUB>22</SUB></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>...</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>c</I><SUB>2w</SUB></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3888img1.png ALT="$ \vdots$"></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3888img1.png ALT="$ \vdots$"></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><IMG WIDTH="25" HEIGHT="29" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3888img1.png ALT="$ \ddots$"></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3888img1.png ALT="$ \vdots$"></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>c</I><SUB>h1</SUB></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>c</I><SUB>h2</SUB></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>...</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><I>c</I><SUB>hw</SUB></TD></TR></TABLE></SPAN><tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> in the first line are integers, separated by a space. <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> are the floor width and height of the house, respectively. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of ghosts. They satisfy the following constraints.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">4<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3888img1.png ALT="$\displaystyle \le$"><I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3888img1.png ALT="$\displaystyle \le$">16,&nbsp; &nbsp;4<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3888img1.png ALT="$\displaystyle \le$"><I>h</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3888img1.png ALT="$\displaystyle \le$">16,&nbsp; &nbsp;1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3888img1.png ALT="$\displaystyle \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3888img1.png ALT="$\displaystyle \le$">3</DIV><P><tex2html_verbatim_mark></P><P>Subsequent <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> lines of <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> characters are the floor map. Each of <SPAN CLASS="MATH"><I>c</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> is either:<P><P><BR><UL><LI>a `<TT>#</TT>' representing a wall cell, </LI><LI>a lowercase letter representing a corridor cell which is the initial position of a ghost, </LI><LI>an uppercase letter representing a corridor cell which is the position where the ghost corresponding to its lowercase letter is supposed to be, or </LI><LI>a space representing a corridor cell that is none of the above. </LI></UL><P>In each map, each of the first <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> letters from a and the first <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> letters from A appears once and only once. Outermost cells of a map are walls; i.e. all characters of the first and last lines are sharps; and the first and last characters on each line are also sharps. All corridor cells in a map are connected; i.e. given a corridor cell, you can reach any other corridor cell by following corridor cells in the 4-neighborhoods. Similarly, all wall cells are connected. Any <SPAN CLASS="MATH">2&#215;2</SPAN> <tex2html_verbatim_mark> area on any map has at least one sharp. You can assume that every map has a sequence of moves of ghosts that restores all ghosts to the positions where they are supposed to be.<P>The last dataset is followed by a line containing three zeros separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset in the input, one line containing the smallest number of steps to restore ghosts into the positions where they are supposed to be should be output. An output line should not contain extra characters such as spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 5 2 
##### 
#A#B# 
#   # 
#b#a# 
##### 
16 4 3 
################ 
## ########## ## 
#    ABCcba    # 
################ 
16 16 3 
################ 
### ##    #   ## 
##  #  ##   # c# 
#  ## ########b# 
# ##  # #   #  # 
#  # ##   # # ## 
##  a#  # # #  # 
### ## #### ## # 
##   #   #  #  # 
#  ##### # ## ## 
####   #B# #   # 
##  C#   #   ### 
#  # # ####### # 
# ######  A##  # 
#        #    ## 
################ 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 
36 
77
</PRE><P>
______________________________________________________
3889||||||false||||||
<P>In this problem, we consider a simple programming language that has only declarations of onedimensional integer arrays and assignment statements. The problem is to find a bug in the given program.<P>The syntax of this language is given in BNF as follows:<P><P><BR><TABLE COLS=3><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>program</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>::=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>declaration</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$">|<IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>program</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>declaration</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$">|<IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>program</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>assignment</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>declaration</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>::=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>array</I><IMG WIDTH="54" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_name$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark> <TT>[</TT> <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>number</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark><TT>]</TT> <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>new</I><IMG WIDTH="41" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_line$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>assignment</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>::=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>array</I><IMG WIDTH="54" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_name$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark> <TT>[</TT> <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>expression</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark><TT>]=</TT> <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>expression</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>new</I><SUB>l</SUB><I>ine</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>expression</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>::=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>number</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$">|<IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>array</I><IMG WIDTH="54" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_name$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark> <TT>[</TT> <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>expression</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark><TT>]</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>number</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>::=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>digit</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$">|<IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>digit</I><IMG WIDTH="71" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_positive$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>digit</I><IMG WIDTH="59" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_string$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>digit</I><IMG WIDTH="59" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_string$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>::=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>digit</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$">|<IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>digit</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>digit</I><IMG WIDTH="59" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_string$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>digit</I><IMG WIDTH="71" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_positive$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>::=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>2</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>3</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>4</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>5</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>6</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>7</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>8</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>9</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>digit</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>::=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0 <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>digit</I><IMG WIDTH="71" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_positive$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>array</I><IMG WIDTH="54" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_name$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>::=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>a</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>b</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>c</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>d</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>e</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>f</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>g</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>h</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>i</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>j</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>k</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>l</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>m</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>n</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>o</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>p</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>q</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>r</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>s</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>t</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>u</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>v</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>w</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>x</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>y</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>z</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>A</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>B</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>C</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>D</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>E</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>F</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>G</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>H</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>I</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>J</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>K</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>L</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>M</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>N</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>O</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>P</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>Q</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>R</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>S</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>T</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>U</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>V</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>W</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>X</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>Y</TT> <SPAN CLASS="MATH">|</SPAN> <tex2html_verbatim_mark> <TT>Z</TT></TD></TR></TABLE><P><P><BR>where <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>new</I><IMG WIDTH="41" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_line$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark> denotes a new line character (LF).<P>Characters used in a program are alphabetical letters, decimal digits, <TT>=</TT>, <TT>[</TT>, <TT>]</TT> and new line characters. No other characters appear in a program.<P>A declaration declares an array and specifies its length. Valid indices of an array of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> are integers between 0 and <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>, inclusive. Note that the array names are case sensitive, i.e. array <TT>a</TT> and array <TT>A</TT> are different arrays. The initial value of each element in the declared array is undefined.<P>For example, array <TT>a</TT> of length 10 and array <TT>b</TT> of length 5 are declared respectively as follows.<P><P><BR><PRE>
a[10] 
b[5]
</PRE><P><P><BR>An expression evaluates to a non-negative integer. A <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>number</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark> is interpreted as a decimal integer. An <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>array</I><IMG WIDTH="54" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \_name$"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark> <TT>[</TT> <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>expression</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark><TT>]</TT> evaluates to the value of the <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>expression</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark>-th element of the array. An assignment assigns the value denoted by the right hand side to the array element specified by the left hand side.<P>Examples of assignments are as follows.<P><P><BR><PRE>
a[0]=3 
a[1]=0 
a[2]=a[a[1]] 
a[a[0]]=a[1]
</PRE><P><P><BR>A program is executed from the first line, line by line. You can assume that an array is declared once and only once before any of its element is assigned or referred to.<P>Given a program, you are requested to find the following bugs.<P><UL><LI>An index of an array is invalid. </LI><LI>An array element that has not been assigned before is referred to in an assignment as an index of array or as the value to be assigned. </LI></UL><P>You can assume that other bugs, such as syntax errors, do not appear. You can also assume that integers represented by <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \langle$"><I>number</I><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3889img1.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark>s are between 0 and <SPAN CLASS="MATH">2<SUP>31</SUP> - 1(= 2147483647)</SPAN> <tex2html_verbatim_mark>, inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets followed by a line which contains only a single `<TT>.</TT>' (period).<P>Each dataset consists of a program also followed by a line which contains only a single `<TT>.</TT>' (period).<P>A program does not exceed 1000 lines. Any line does not exceed 80 characters excluding a new line character.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each program in the input, you should answer the line number of the assignment in which the first bug appears. The line numbers start with 1 for each program. If the program does not have a bug, you should answer zero. The output should not contain extra characters such as spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
a[3] 
a[0]=a[1] 
. 
x[1] 
x[0]=x[0] 
. 
a[0] 
a[0]=1 
. 
b[2] 
b[0]=2 
b[1]=b[b[0]] 
b[0]=b[1] 
. 
g[2] 
G[10] 
g[0]=0 
g[1]=G[0] 
. 
a[2147483647] 
a[0]=1 
B[2] 
B[a[0]]=2 
a[B[a[0]]]=3 
a[2147483646]=a[2] 
. 
.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
2 
2 
3 
4 
0
</PRE><P>
______________________________________________________
3890||||||false||||||

<P>
The main land of Japan called Honshu is an island surrounded by the sea. In such an island, it is natural to ask a question: ``Where is the most distant point from the sea?" The answer to this question for Honshu was found in 1996. The most distant point is located in former Usuda Town, Nagano Prefecture, whose distance from the sea is 114.86 km. 

<P>
In this problem, you are asked to write a program which, given a map of an island, finds the most distant point from the sea in the island, and reports its distance from the sea. In order to simplify the problem, we only consider maps representable by convex polygons.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets. Each dataset represents a map of an island, which is a convex polygon. The format of a dataset is as follows. 

<P>

<P>
<BR>

<TABLE COLS=3>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3890img1.png
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TABLE>

<P>

<P>
<BR>
Every input item in a dataset is a non-negative integer. Two input items in a line are separated by a space. 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> in the first line is the number of vertices of the polygon, satisfying <!-- MATH
 $3 \le n \le 100$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3890img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3890img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>. Subsequent <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines are the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinates of the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> vertices. Line segments <!-- MATH
 $(x_{i}, y_{i})-(x_{i+1}, y_{i+1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>) - (<I>x</I><SUB>i+1</SUB>, <I>y</I><SUB>i+1</SUB>)</SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le i \le n - 1)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3890img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/38/3890img1.png
 ALT="$ \le$"><I>n</I> - 1)</SPAN>
<tex2html_verbatim_mark> and the line segment <!-- MATH
 $(x_{n}, y_{n})-(x_{1}, y_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>n</SUB>, <I>y</I><SUB>n</SUB>) - (<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>
<tex2html_verbatim_mark> form the border of the polygon in counterclockwise order. That is, these line segments see the inside of the polygon in the left of their directions. All coordinate values are between 0 and 10000, inclusive. 

<P>
You can assume that the polygon is simple, that is, its border never crosses or touches itself. As stated above, the given polygon is always a convex one. 

<P>
The last dataset is followed by a line containing a single zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset in the input, one line containing the distance of the most distant point from the sea should be output. An output line should not contain extra characters such as spaces. 

<P>
The answer should not have an error greater than 0.00001 <SPAN CLASS="MATH">(10<SUP>-5</SUP>)</SPAN>
<tex2html_verbatim_mark>. You may output any number of digits after the decimal point, provided that the above accuracy condition is satisfied.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
0 0 
10000 0 
10000 10000 
0 10000 
3 
0 0 
10000 0 
7000 1000 
6 
0 40 
100 20 
250 40 
250 70 
100 90 
0 70 
3 
0 0 
10000 10000 
5000 5001 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5000.000000 
494.233641 
34.542948 
0.353553
</PRE>

<P>

______________________________________________________
3891||||||false||||||
<P>One of the tasks students routinely carry out in their mathematics classes is to solve a polynomial equation. It is, given a polynomial, say <SPAN CLASS="MATH"><I>X</I><SUP>2</SUP> - 4<I>X</I> + 1</SPAN> <tex2html_verbatim_mark>, to find its roots <SPAN CLASS="MATH">(2&#177;<IMG WIDTH="28" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \sqrt{{3}}$">)</SPAN> <tex2html_verbatim_mark>.<P>If the students' task is to find the roots of a given polynomial, the teacher's task is then to find a polynomial that has a given root. Ms. Galsone is an enthusiastic mathematics teacher who is bored with finding solutions of quadratic equations that are as simple as <SPAN CLASS="MATH"><I>a</I> + <I>b</I><IMG WIDTH="27" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \sqrt{{c}}$"></SPAN> <tex2html_verbatim_mark>. She wanted to make higher-degree equations whose solutions are a little more complicated. As usual in problems in mathematics classes, she wants to maintain all coefficients to be integers and keep the degree of the polynomial as small as possible (provided it has the specified root). Please help her by writing a program that carries out the task of the teacher's side.<P>You are given a number <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> of the form:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>t</I> = <IMG WIDTH="34" HEIGHT="38" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$\displaystyle \sqrt[m]{{a}}$"> + <IMG WIDTH="29" HEIGHT="44" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$\displaystyle \sqrt[n]{{b}}$"></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> are distinct prime numbers, and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> are integers greater than 1.<P>In this problem, you are asked to find <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>'s <SPAN CLASS="textit">minimal polynomial on integers</SPAN>, which is the polynomial <SPAN CLASS="MATH"><I>F</I>(<I>X</I>) = <I>a</I><SUB>d</SUB><I>X</I><SUP>d</SUP> + <I>a</I><SUB>d-1</SUB><I>X</I><SUP>d-1</SUP> + <SUP>... </SUP>+ <I>a</I><SUB>1</SUB><I>X</I> + <I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> satisfying the following conditions.<P><P><BR><OL><LI>Coefficients <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB>,..., <I>a</I><SUB>d</SUB></SPAN> <tex2html_verbatim_mark> are integers and <SPAN CLASS="MATH"><I>a</I><SUB>d</SUB> &gt; 0</SPAN> <tex2html_verbatim_mark>. </LI><LI><SPAN CLASS="MATH"><I>F</I>(<I>t</I>) = 0</SPAN> <tex2html_verbatim_mark>. </LI><LI>The degree <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> is minimum among polynomials satisfying the above two conditions. </LI><LI><SPAN CLASS="MATH"><I>F</I>(<I>X</I>)</SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="textit">primitive</SPAN>. That is, coefficients <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB>,..., <I>a</I><SUB>d</SUB></SPAN> <tex2html_verbatim_mark> have no common divisors greater than one. </LI></OL><P><P><BR>For example, the minimal polynomial of <SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \sqrt{{3}}$"> + <IMG WIDTH="28" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \sqrt{{2}}$"></SPAN> <tex2html_verbatim_mark> on integers is <SPAN CLASS="MATH"><I>F</I>(<I>X</I>) = <I>X</I><SUP>4</SUP> -10<I>X</I><SUP>2</SUP> + 1</SPAN> <tex2html_verbatim_mark>. Verifying <SPAN CLASS="MATH"><I>F</I>(<I>t</I>) = 0</SPAN> <tex2html_verbatim_mark> is as simple as the following ( <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha$"> = <IMG WIDTH="28" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \sqrt{{3}}$">,<IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta$"> = <IMG WIDTH="28" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \sqrt{{2}}$"></SPAN> <tex2html_verbatim_mark>).<P><P><BR><SPAN CLASS="MATH"><TABLE><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><I>F</I>(<I>t</I>)</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>(<IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha$"> + <IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta$">)<SUP>4</SUP> -10(<IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha$"> + <IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta$">)<SUP>2</SUP> + 1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>&nbsp;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>(<IMG WIDTH="23" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha^{{4}}_{}$"> +4<IMG WIDTH="23" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha^{{3}}_{}$"><IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta$"> +6<IMG WIDTH="23" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha^{{2}}_{}$"><IMG WIDTH="23" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta^{{2}}_{}$"> +4<IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha$"><IMG WIDTH="23" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta^{{3}}_{}$"> + <IMG WIDTH="23" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta^{{4}}_{}$">) - 10(<IMG WIDTH="23" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha^{{2}}_{}$"> +2<IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha$"><IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta$"> + <IMG WIDTH="23" HEIGHT="39" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta^{{2}}_{}$">) + 1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>&nbsp;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9 + 12<IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha$"><IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta$"> +36 + 8<IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha$"><IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta$"> +4 - 10(3 + 2<IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha$"><IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta$"> + 2) + 1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>&nbsp;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>(9 + 36 + 4 - 50 + 1) + (12 + 8 - 20)<IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \alpha$"><IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \beta$"></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>&nbsp;</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>=</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD></TR></TABLE></SPAN><tex2html_verbatim_mark><P><P><BR>Verifying that the degree of <SPAN CLASS="MATH"><I>F</I>(<I>t</I>)</SPAN> <tex2html_verbatim_mark> is in fact minimum is a bit more difficult. Fortunately, under the condition given in this problem, which is that <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> are distinct prime numbers and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> greater than one, the degree of the minimal polynomial is always <SPAN CLASS="MATH"><I>mn</I></SPAN> <tex2html_verbatim_mark>. Moreover, it is always <SPAN CLASS="textit">monic</SPAN>. That is, the coefficient of its highest-order term (<SPAN CLASS="MATH"><I>a</I><SUB>d</SUB></SPAN> <tex2html_verbatim_mark>) is one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets, each in the following format.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>a</I>&nbsp; <I>m</I>&nbsp; <I>b</I>&nbsp; <I>n</I></DIV><P><tex2html_verbatim_mark></P><P>This line represents <SPAN CLASS="MATH"><IMG WIDTH="34" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \sqrt[m]{{a}}$"> + <IMG WIDTH="29" HEIGHT="41" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \sqrt[n]{{b}}$"></SPAN> <tex2html_verbatim_mark>. The last dataset is followed by a single line consisting of four zeros. Numbers in a single line are separated by a single space.<P>Every dataset satisfies the following conditions.<P><P><BR><OL><LI><SPAN CLASS="MATH"><IMG WIDTH="34" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \sqrt[m]{{a}}$"> + <IMG WIDTH="29" HEIGHT="41" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \sqrt[n]{{b}}$"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \le$">4</SPAN> <tex2html_verbatim_mark> </LI><LI><SPAN CLASS="MATH"><I>mn</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3891img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark> </LI><LI>The coefficients of the answer <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB>,..., <I>a</I><SUB>d</SUB></SPAN> <tex2html_verbatim_mark> are between <SPAN CLASS="MATH">(- 2<SUP>31</SUP> + 1)</SPAN> <tex2html_verbatim_mark> and  <SPAN CLASS="MATH">(2<SUP>31</SUP> - 1)</SPAN> <tex2html_verbatim_mark>, inclusive. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output the coefficients of its minimal polynomial on integers <SPAN CLASS="MATH"><I>F</I>(<I>X</I>) = <I>a</I><SUB>d</SUB><I>X</I><SUP>d</SUP> + <I>a</I><SUB>d-1</SUB><I>X</I><SUP>d-1</SUP> + <SUP>... </SUP>+ <I>a</I><SUB>1</SUB><I>X</I> + <I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>, in the following format.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>a</I><SUB>d</SUB>&nbsp; <I>a</I><SUB>d-1</SUB>&nbsp;..&nbsp; <I>a</I><SUB>1</SUB>&nbsp; <I>a</I><SUB>0</SUB></DIV><P><tex2html_verbatim_mark></P><P>Non-negative integers must be printed without a sign (+ or -). Numbers in a single line must be separated by a single space and no other characters or extra spaces may appear in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 2 2 
3 2 2 3 
2 2 3 4 
31 4 2 3 
3 2 2 7 
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 0 -10 0 1 
1 0 -9 -4 27 -36 -23 
1 0 -8 0 18 0 -104 0 1 
1 0 0 -8 -93 0 24 -2976 2883 -32 -3720 -23064 -29775 
1 0 -21 0 189 0 -945 -4 2835 -252 -5103 -1260 5103 -756 -2183

______________________________________________________
3892||||||false||||||
<P>Our discerning gourmet puppy Arnie is turning to you for a program to help him split his dog biscuits. Each biscuit is shaped like a rectangle and perforated into equal sized squares:<P><DIV ALIGN="CENTER"><IMG WIDTH="353" HEIGHT="305" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3892a.png ALT="\epsfbox{p3892a.eps}"> <tex2html_verbatim_mark></DIV><P>Unfortunately, Arnie will only eat square-shaped biscuits; therefore, he must break the biscuit into squares. Each break, termed a split, is applied to one rectangle, runs along one straight perforated line, and separates the rectangle into two pieces:<P><DIV ALIGN="CENTER"><IMG WIDTH="441" HEIGHT="396" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3892a.png ALT="\epsfbox{p3892b.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains one positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of biscuits to split. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contains two positive integers <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, the number of rows and columns of one biscuit, separated by white space:<P>This defines two biscuits: the one shown above which requires four splits, and a square biscuit which requires no splits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains one line for each biscuit specifying the minimal number of splits required to break the biscuit into squares.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
6 7 
5 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
0
</PRE><P>
______________________________________________________
3893||||||false||||||
<P>James has a problem. He assembled a rectangular plaque from a lot of square tiles, each with a lower-case letter or blank.<P><DIV ALIGN="CENTER"><IMG WIDTH="538" HEIGHT="220" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3893a.png ALT="\epsfbox{p3893a.eps}"> <tex2html_verbatim_mark></DIV><P>The plaque fell down and broke into jagged pieces.<DIV ALIGN="CENTER"><IMG WIDTH="623" HEIGHT="268" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3893a.png ALT="\epsfbox{p3893b.eps}"> <tex2html_verbatim_mark></DIV><P>While James was reaching for the glue gun his faithful dog Buster pushed the pieces around.<P><DIV ALIGN="CENTER"><IMG WIDTH="615" HEIGHT="327" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/p3893a.png ALT="\epsfbox{p3893c.eps}"> <tex2html_verbatim_mark></DIV><P>Fortunately, Buster has not flipped a piece over -- after all he was using his nose -- but he did manage to rotate a few of the pieces and he has nudged all letters to be upright again. James fears that Buster even buried a piece or two, in which case the plaque would be lost forever.<P>James needs all the help he can get -- write a program to try and reassemble the plaque.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains two positive integers <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of words on the plaque and the number of pieces. The next <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> lines contain one word each, not necessarily in the right order.<P>Words consist of lower-case letters. On the plaque, words are separated by single blanks and wrap around. There may be trailing blanks at the bottom right of the plaque.<P>Finally, for each of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> pieces there is one line with two positive integers <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, the number of rows and columns for a rectangle which can just contain the piece; this line is followed by <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> lines with <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> non-blank characters each, where an underscore represents a blank tile and <TT>#</TT> represents a tile position which is not part of the piece; all other characters are lower-case. The example above would be the sample input below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program must print the assembled plaque (with underscores for blanks) or the words `<TT>No solution</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 8 
brown 
dog 
fox 
jumped 
lazy 
over 
quick 
the 
the 
3 4 
##p# 
##o# 
_eht 
3 4 
e### 
xo## 
ciuq 
4 3 
#k# 
#_# 
#r# 
_do 
4 2 
_b 
ju 
_t 
#g 
3 3 
r## 
m## 
he_ 
3 3 
_## 
ndl 
we# 
3 3 
#v# 
foz 
#_a 
1 1 
y
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
the_quick_b 
rown_fox_ju 
mped_over_t 
he_lazy_dog
</PRE><P>
______________________________________________________
3894||||||false||||||
<P>A Svetlozar Sequence consists of positive <TT>int</TT> values greater than 9, written in decimal, where for any two consecutive terms, <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, of the sequence, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is the smallest number which can be formed from a sequence of decimal digits which multiplied together equal <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, i.e.,<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>b</I> = <IMG WIDTH="27" HEIGHT="70" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3894img1.png ALT="$\displaystyle \sum^{{k}}_{{i=0}}$"><I>b</I><SUB>i</SUB>10<SUP>i</SUP>, <I>b</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3894img1.png ALT="$\displaystyle \le$">9, and <IMG WIDTH="26" HEIGHT="70" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/38/3894img1.png ALT="$\displaystyle \prod^{{k}}_{{i=0}}$"><I>b</I><SUB>i</SUB> = <I>a</I></DIV><P><tex2html_verbatim_mark></P><P>For example, the first Svetlozar Sequence is 10, 25, 55. It starts with 10 which has the factors 1, 2, 5, and 10. Candidates for the next term include 25, 52, and 125; the smallest candidate is 25. The term 25 has factors 1, 5, and 25, and candidates for the next term include 55 and 155. For this sequence no more terms are possible after 55.<P>Write a program to compute a Svetlozar Sequence from the first value of the sequence, if possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first input line contains one positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> input lines contains one positive integer which is proposed as a starting value for a Svetlozar Sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each proposed starting value the output should be one line containing the first 10 terms of the Svetlozar Sequence (or fewer terms if the sequence is shorter). If the value cannot start a Svetlozar Sequence the output should be `<TT>No sequence</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
10 
11 
12
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 25 55 
No sequence 
12 26
</PRE><P>
______________________________________________________
3895||||||false||||||
<P>Recently retired rascal Al acquired a nifty new notion which will wonderfully pique past passions: For a modest contribution he designs monumental business names, or rather, he'll use your program in his noble endeavor.<P>As a business name he takes the possessive version of either the client's first or last name, followed by as many different attributes as possible (each selected from a separate list of synonyms), and terminated by the product name or one of its equivalents. He only accepts those business names where each attribute and the product start with the same letter, irrespective of upper or lower case, and if at all possible even the selected first or last name of the client must start with that same letter.<P>Al gets a kickback from the sign companies -- the longer the sign the more of a kick. Therefore, to serve at Al's pleasure your program must compute the maximum number of non-blank characters (including the possessive quote) for each of Al's monumental business names.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contains one of the different attributes, each optionally followed by synonyms for that attribute. Following the attributes there is another line with a positive integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains a client's first and last name followed by a product name and optionally followed by equivalent product names. All words are separated by white space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There are <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines of output. Each line contains the maximum number of non-blank characters (including the possessive quote) for the acceptable business names which can be created from the attributes and the corresponding input line.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> The sample outputs below are based, respectively, on<P><TT>Potter's magnificent mellowing Mop</TT> and others,<P><TT>William's wonderful warbling Whatsits</TT>, and<P><TT>Christie's Corruption</TT>.<P>Note that <TT>Christie's magnificent mellowing Misdemeanors</TT> has more then 20 characters but is not acceptable because an alliteration between product and client name is possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
magnificent wonderful terrific great 
warbling tweeting 
daring twitching mellowing mimicking 
3 
Harry Potter     Broomstick Mop Wiper 
William Tell     Arrows Doohickies Whatsits Marbles 
Agatha Christie  Crimes Misdemeanors Corruption
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
31 
34 
20
</PRE><P>
______________________________________________________
3896||||||false||||||
<P>Write a program to solve a Hitori puzzle, if possible. Hitori is played on a square grid of cells, each occupied by a number. The objective is to clear some cells so that there are no duplicate numbers in any row or column. Any two cleared cells may not be horizontally or vertically adjacent to each other. All occupied cells must be horizontally or vertically connected together into a single group; i.e., the cleared cells cannot divide the occupied cells into unconnected sets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The grid is specified by a single line containing two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> separated by white space. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> numbers in the range from 1 to <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, separated by white space, which occupy the grid. Neither <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> nor <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> will exceed 25.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be <TT>No solution</TT> if no solution exists, or it should be in the same format as the input, where a cleared cell contains a single period and each occupied cell still contains the original number. An output line need not preserve the spacing of the corresponding input line. Note that there can be multiple solutions; your program should output only one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 10 
 4 10 1  6  3  2  5 7 
 3  6 7  2  1  6  5 4 
 2  3 4 10  2 10  6 1 
 4  1 6  5  7  7  3 5 
 7  2 3  1 10  5  1 2 
 3  5 6  7  3  1 10 4 
 6  4 2  3  5  4  7 10 
10  7 1  4  2  3  5 6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8 10 
. 10 . 6 3 2 . 7 
3 6 7 2 1 . 5 4 
. 3 4 . 2 10 6 1 
4 1 . 5 7 . 3 . 
7 . 3 . 10 5 1 2 
. 5 6 7 . 1 10 . 
6 . 2 3 5 4 7 10 
10 7 1 4 . 3 . 6
</PRE><P>
______________________________________________________
3897||||||false||||||
<P>Heidi and Sammy are lost among the trees and begging for a program to find their shortest way home.<P>Fortunately, our two puppies find themselves in a mathematical forest where the trees are planted on a square grid and where each tree has the shape of a number. Heidi and Sammy remember that from a tree with number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> they should choose a direction - north, south, east, or west - and walk in this direction until they reach the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>'th tree, at which time they will either have reached the single tree shaped like the number 0 - their home - or they need to make their next move, based on the shape of the tree they just reached. Needless to say, an invisible fence safely keeps our forlorn puppies inside the forest.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains four positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, separated by white space. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> are the dimensions of the grid, each not exceeding 30. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> nonnegative <TT>int</TT> values, separated by white space, which are the numbers for the trees in this row of the grid. Exactly one number in the grid will be zero. <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> are the row and column of the puppies' initial position.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>If the puppies can reach their home, the output of your program is the minimal number of steps required to get home, i.e., the sum of the tree shapes forming the shortest path. Otherwise your program prints <TT>No solution</TT>.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> In the example below, the puppies start at 1,1 -- the top left of the grid -- and move 2 trees east to 1,3 and from there 3 trees south to 4,3 -- their home.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3 1 1
2 2 3 
3 6 4 
2 6 3 
3 2 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5
</PRE><P>
______________________________________________________
3898||||||false||||||
<P>Dezider wants to impress his new colleague Zlatica. He is an excellent cook so he decided to invite Zlatica to his house for dinner. The trouble is, he tripped with the sauce in his hands (thankfully this was in the morning and Zlatica did not see it) and many bright red droplets fell on his white carpet. Now Dezider is starting to panic because he wants to have a perfectly clean house to impress Zlatica. Fortunately, there is a store nearby which sells all sizes of (expensive) circular rugs. Dezider does not have much money so he wants to buy the smallest rug with an integer radius which will cover all the droplets. You need to write a program to help him determine the right size to buy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains one positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of droplets on the carpet. Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contains two floating-point numbers, separated by white space, which represent the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>- and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinate of the corresponding droplet.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of a single integer, the radius of the smallest circular rug needed to cover all the droplets.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> The output for the sample below is because a circular rug of radius 1 and center for example at 1,0 will cover the four droplets described by the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
1   -0.5 
1.5  0 
0.5  0.5 
1    0.5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
</PRE><P>
______________________________________________________
3899||||||false||||||
<P>Anton T. Schrecklich, chief software architect at Software-Als-Produkt, has just come across a rather seminal paper (Nassi, I.; Shneiderman, B.: Flowchart techniques for structured programming, SIGPLAN Notices XII, August 1973.). He speed-dials you on his rotary phone to beg that you implement a tool which will revolutionize programming as he sees it: Programm-Diagramm Formulare -- an example is on the next page.<P>A simple action is represented as a box:<P><P><BR><PRE>
+--------+ 
| action | 
+--------+
</PRE><P><P><BR>A loop is represented as a box with a condition at the top and the body parts nested into the box:<P><P><BR><PRE>
+------------+ 
| condition  | 
| +----------+ 
| |    ..    | 
+-+----------+
</PRE><P><P><BR>Finally, a decision is represented with the condition at the top and the outcomes nested:<P><P><BR><PRE>
+--------------+ 
|  condition   | 
| true | false | 
+------+-------+ 
|  ..  |  ..   | 
+------+-------+
</PRE><P><P><BR>Schrecklich is the teutonic stickler for detail:<P><UL><LI><code>'\55'</code> (minus) and <code>'\174'</code> (or) must be used for horizontal and vertical lines, <code>'\53'</code> (plus) must mark every join and crossover, and there may be only <code>'\12'</code> (linefeed) characters outside the diagram. </LI><LI>Words must be horizontally centered, with at least one <code>'\40'</code> (space) before and after, except that loop conditions must be preceded by exactly one space and followed by at least two spaces. </LI><LI>Actions must be vertically centered, but no extra vertical space is allowed in the top part of a loop and a decision. </LI><LI>The loop body must be at the bottom right; the gutter at left must be exactly one space. </LI><LI>If one alternative of a decision requires more vertical space than the other, the other must be expanded vertically evenly; left-over lines must be added one at a time from the top down. </LI><LI>Finally, if exact centering is not possible, left or top padding must be rescate taillonjust less than right or bottom padding. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input describes one diagram and consists of one or more lines with one or more words, separated by white space. A word is any sequence of non-white-space characters. The words <TT>else</TT>, <TT>end</TT>, <TT>fi</TT>, <TT>if</TT>, and <TT>while</TT> are reserved to express loops and decisions, which may be nested:<P><P><BR><TT>while</TT> <SPAN CLASS="MATH"><I>condition</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>stmts</I></SPAN> <tex2html_verbatim_mark> <TT>end</TT><P><TT>if</TT> <SPAN CLASS="MATH"><I>condition</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>stmts</I></SPAN> <tex2html_verbatim_mark> <TT>fi</TT><P><TT>if</TT> <SPAN CLASS="MATH"><I>condition</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>stmts</I></SPAN> <tex2html_verbatim_mark> <TT>else</TT> <SPAN CLASS="MATH"><I>stmts</I></SPAN> <tex2html_verbatim_mark> <TT>fi</TT><P><P><BR>where condition is a single word and stmts is a sequence of actions, loops, and decisions. Every other single word is a separate action.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program must print the space-filled diagram containing the non-reserved words of the input in the respective structures.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
while x!=y 
  if x&gt;y 
    x-=y 
    trace 
  else 
    if x&lt;y y-=x trace fi 
  fi 
end
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
+-------------------------+ 
| x!=y                    | 
| +-----------------------+ 
| |          x&gt;y          | 
| | true  |     false     | 
| +-------+---------------+ 
| |       |      x&lt;y      | 
| | x-=y  | true  | false | 
| |       +-------+ ------+ 
| +-------+ y-=x  |       | 
| | trace +-------+       | 
| |       | trace |       | 
+-+-------+-------+-------+

______________________________________________________
3900||||||false||||||
<P>An <SPAN CLASS="textit">organic compound</SPAN> is any member of a large class of chemical compounds whose molecules contain carbon. The <SPAN CLASS="textit">molar mass</SPAN> of an organic compound is the mass of one mole of the organic compound. The molar mass of an organic compound can be computed from the standard atomic weights of the elements.<P><DIV ALIGN="CENTER"><IMG WIDTH="393" HEIGHT="350" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3900.png ALT="\epsfbox{p3900.eps}"> <tex2html_verbatim_mark></DIV><P>When an organic compound is given as a <SPAN CLASS="textit">molecular formula</SPAN>, Dr. CHON wants to find its molar mass. A molecular formula, such as <TT>C</TT><SPAN CLASS="MATH"><SUB>3</SUB></SPAN> <tex2html_verbatim_mark><TT>H</TT><SPAN CLASS="MATH"><SUB>4</SUB></SPAN> <tex2html_verbatim_mark><TT>O</TT><SPAN CLASS="MATH"><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, identifies each constituent element by its chemical symbol and indicates the number of atoms of each element found in each discrete molecule of that compound. If a molecule contains more than one atom of a particular element, this quantity is indicated using a subscript after the chemical symbol.<P>In this problem, we assume that the molecular formula is represented by only four elements, `<TT>C</TT>' (Carbon), `<TT>H</TT>' (Hydrogen), `<TT>O</TT>' (Oxygen), and `<TT>N</TT>' (Nitrogen) without parentheses.<P>The following table shows that the standard atomic weights for `<TT>C</TT>', `<TT>H</TT>', `<TT>O</TT>', and `<TT>N</TT>'.<P><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Atomic Name</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Carbon</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Hydrogen</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Oxygen</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Nitrogen</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Standard Atomic Weight</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12.01 g/mol</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1.008 g/mol</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>16.00 g/mol</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14.01 g/mol</TD></TR></TBODY></TABLE></DIV><P><P><BR>For example, the molar mass of a molecular formula <TT>C</TT><SPAN CLASS="MATH"><SUB>6</SUB></SPAN> <tex2html_verbatim_mark><TT>H</TT><SPAN CLASS="MATH"><SUB>5</SUB></SPAN> <tex2html_verbatim_mark><TT>OH</TT> is 94.108 g/mol which is computed by 6 <SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark> (12.01 g/mol) + 6 <SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark> (1.008 g/mol) + 1 <SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark> (16.00 g/mol).<P>Given a molecular formula, write a program to compute the molar mass of the formula.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case is given in a single line, which contains a molecular formula as a string. The chemical symbol is given by a capital letter and the length of the string is greater than 0 and less than 80. The quantity number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> which is represented after the chemical symbol would be omitted when the number is 1 <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3900.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3900.png ALT="$ \le$">99)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. The line should contain the molar mass of the given molecular formula.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
C 
C6H5OH 
NH2CH2COOH 
C12H22O11
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
12.010 
94.108 
75.070 
342.296
</PRE><P>
______________________________________________________
3901||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="527" HEIGHT="321" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3901.png ALT="\epsfbox{p3901.eps}"> <tex2html_verbatim_mark></DIV><P>Mr. Kim is a professional programmer. Recently he wants to design a new editor which has as many functions as possible. Most editors support a simple search function that finds one occurrence (or all occurrences successively) of a query pattern string in the text.<P>He observed that the search function in commercial editors <SPAN ID="txt52">does nothing</SPAN> if no query pattern is given. His idea of a new search function regards each substring of the given text as a query pattern string itself and his new function finds <SPAN ID="txt53">another occurrence</SPAN> in the text. The problem is that there can be occurrences of many substrings in the text. So, Mr. Kim decides that the new function finds only occurrences of the longest substring in the text in order to remedy the problem. A formal definition of the search function is as follows:<P>Given a text string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, find the longest substring in text string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> such that the substring appears at least twice. The two occurrences are allowed to overlap.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. For each test case, a text string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is given in one line. For every string, the length is less than or equal to 5,000 and the alphabet <SPAN CLASS="MATH"><IMG WIDTH="21" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3901.png ALT="$ \sum$"></SPAN> <tex2html_verbatim_mark> is the set of lowercase English characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. Print the length of the longest substring in text string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> such that the substring appears at least twice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
abcdefghikjlmn 
abcabcabc 
abcdabcabb
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 
6 
3
</PRE><P>
______________________________________________________
3902||||||false||||||
<P>Consider a tree network with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> nodes where the internal nodes correspond to servers and the terminal nodes correspond to clients. The nodes are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Among the servers, there is an original server <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> which provides VOD (Video On Demand) service. To ensure the quality of service for the clients, the distance from each client to the VOD server <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> should not exceed a certain value <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>. The distance from a node <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> to a node <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> in the tree is defined to be the number of edges on the path from <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>. If there is a nonempty subset <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> of clients such that the distance from each <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is greater than <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> , then replicas of the VOD system have to be placed in some servers so that the distance from each client to the nearest VOD server (the original VOD system or its replica) is <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> or less.<P>Given a tree network, a server <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> which has VOD system, and a positive integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, find the minimum number of replicas necessary so that each client is within distance <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> from the nearest server which has the original VOD system or its replica.<P>For example, consider the following tree network.<P><DIV ALIGN="CENTER"><IMG WIDTH="1004" HEIGHT="321" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3902.png ALT="\epsfbox{p3902.eps}"> <tex2html_verbatim_mark></DIV><P>In the above tree, the set of clients is {1, 6, 7, 8, 9, 10, 11, 13}, the set of servers is {2, 3, 4, 5, 12, 14}, and the original VOD server is located at node 12.<P>For <SPAN CLASS="MATH"><I>k</I> = 2</SPAN> <tex2html_verbatim_mark>, the quality of service is not guaranteed with one VOD server at node 12 because the clients in {6, 7, 8, 9, 10} are away from VOD server at distance <SPAN CLASS="MATH">&gt; <I>k</I></SPAN> <tex2html_verbatim_mark>. Therefore, we need one or more replicas. When one replica is placed at node 4, the distance from each client to the nearest server of {12, 4} is less than or equal to 2. The minimum number of the needed replicas is one for this example.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read the input from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases (<SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>) is given in the first line of the input. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3902.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3902.png ALT="$ \le$">1, 000)</SPAN> <tex2html_verbatim_mark> which is the number of nodes of the tree network. The next line contains two integers <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3902.png ALT="$ \le$"><I>s</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3902.png ALT="$ \le$"><I>n</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3902.png ALT="$ \ge$">1)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> is the VOD server and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the distance value for ensuring the quality of service. In the following <SPAN CLASS="MATH"><I>n - 1</I></SPAN> <tex2html_verbatim_mark> lines, each line contains a pair of nodes which represent an edge of the tree network.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. The line should contain an integer that is the minimum number of the needed replicas.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 14 
12 2 
1 2 
2 3 
3 4 
4 5 
5 6 
7 5 
8 5 
4 9 
10 3 
2 12 
12 14 
13 14 
14 11 
14 
3 4 
1 2 
2 3 
3 4 
4 5 
5 6 
7 5 
8 5 
4 9 
10 3 
2 12 
12 14 
13 14 
14 11
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
0
</PRE><P>
______________________________________________________
3903||||||false||||||
<P>Mobile phones prevail in everyday life. Every mobile phone has a number pad for users to dial the telephone number. Figure 1 shows a typical layout of number pads, which can be represented as 4 by 3 rectangular cells. We know that some mobile phone numbers are easy to memorize, since entering in sequence of digits implies an easy-to-remember geometric figure.<P><DIV ALIGN="CENTER"><IMG WIDTH="232" HEIGHT="330" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3903a.png ALT="\epsfbox{p3903a.eps}"> <tex2html_verbatim_mark></DIV><P>For each phone number, we can make a corresponding geometric figure, Phone Plot, which is a sequence of connected line segments. Assume that a phone number with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> digits is <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>&nbsp;<I>d</I><SUB>2</SUB>&nbsp;<I>d</I><SUB>3</SUB>...<I>d</I><SUB>n-1</SUB>&nbsp;<I>d</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>. The first line segment of Phone Plot is a line segment connecting the center points of pad <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and pad <SPAN CLASS="MATH"><I>d</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> . The second line segment of Phone Plot connects the center points of pad <SPAN CLASS="MATH"><I>d</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>. In a similar way the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-th line segment connects the center points of pad <SPAN CLASS="MATH"><I>d</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> and pad <SPAN CLASS="MATH"><I>d</I><SUB>k+1</SUB></SPAN> <tex2html_verbatim_mark>, and the last segment connects <SPAN CLASS="MATH"><I>d</I><SUB>n-1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>.<P>Let us show a few examples. The Phone Plot for the number 1023289873 is shown as the thick lines in Figure 2(a). Figure 2(b) shows that the Phone Plot for a number 1159533969.<P><DIV ALIGN="CENTER"><IMG WIDTH="661" HEIGHT="337" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3903a.png ALT="\epsfbox{p3903b.eps}"> <tex2html_verbatim_mark></DIV><P>You should note that some connecting line segments may overlap other line segment collinearly.<P>We characterize a Phone Plot by the Minimal Number of Decomposing Segments(MNDS). MNDS is the minimal number of line segments to reconstruct the given Phone Plot. So we easily find that the MNDS of the number 1023289873 is 5, and the MNDS of 1159533969 is 3. If the Phone Plot is reduced to a single point for a number (e.g., 0000000000), then MNDS of such a point Phone Plot is defined 0.<P>We want to classify the phone number into three disjoint classes; <TT>EXCELLENT</TT>, <TT>GOOD</TT> and <TT>BAD</TT> by the complexity of Phone Plot. Thus if the MNDS of Phone Plot is at most 3, then this number is classified to <TT>EXCELLENT</TT>. If MNDS is exactly 4, then this number is classified to <TT>GOOD</TT>. If the MNDS is greater than or equal to 5, that number is classified to <TT>BAD</TT>.<P>According to this classification, we say 1023289873 is <TT>BAD</TT> and 1159533969 is <TT>EXCELLENT</TT>. Figure 3 shows another example with 5233999008. Since the MNDS of 5233999008 is 5, so this number is <TT>BAD</TT>.<P><DIV ALIGN="CENTER"><IMG WIDTH="232" HEIGHT="327" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3903a.png ALT="\epsfbox{p3903c.eps}"> <tex2html_verbatim_mark></DIV><P>You have to decide whether the phone number given is <TT>EXCELLENT</TT> or <TT>GOOD</TT> or <TT>BAD</TT> according to the MNDS of the Phone Plot.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a string representing a phone number. The length of a phone number string is greater than 5 and less than 20.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. For each test case, print <TT>EXCELLENT</TT> or <TT>GOOD</TT> or <TT>BAD</TT> in a line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
1023289873 
1159533969 
147258052322 
5233999008
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
BAD 
EXCELLENT 
GOOD 
BAD
</PRE><P>
______________________________________________________
3904||||||false||||||

<P>
The city of Songpa is now carrying out a project to build a bicycle transportation system called âgreen Songpa.â By the end of this year, citizens and visitors alike will be able to pick up and drop off bicycles throughout the city. Recently, it was decided to attach a number tag to each bicycle for management use. The bicycles will be under control of the cityâs traffic system. 

<P>
The number tag contains a tile code of length <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, which consists of <!-- MATH
 $1 \times 2$
 -->
<SPAN CLASS="MATH">1&#215;2</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $2 \times 1$
 -->
<SPAN CLASS="MATH">2&#215;1</SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $2 \times 2$
 -->
<SPAN CLASS="MATH">2&#215;2</SPAN>
<tex2html_verbatim_mark> tiles placed on a <!-- MATH
 $2 \times n$
 -->
<SPAN CLASS="MATH">2&#215;<I>n</I></SPAN>
<tex2html_verbatim_mark> rectangular plate in a way that every cell of the plate is covered by exactly one tile. The plate is divided into <SPAN CLASS="MATH">2<I>n</I></SPAN>
<tex2html_verbatim_mark> cells of size <!-- MATH
 $1 \times 1$
 -->
<SPAN CLASS="MATH">1&#215;1</SPAN>
<tex2html_verbatim_mark>. Of course, no two tiles are allowed to overlap each other. The <!-- MATH
 $2 \times 5$
 -->
<SPAN CLASS="MATH">2&#215;5</SPAN>
<tex2html_verbatim_mark> plate and a tile code of length 5 are shown in Figures 1 and 2, respectively. The code will always be read from left to right. However, there is no distinction between the top side and the bottom side of the code. The code may be turned upside down. The code shown in Figure 3 is essentially the same code as in Figure 2.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3904.eps}$
 -->
<IMG
 WIDTH="1048" HEIGHT="159" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3904.png
 ALT="\epsfbox{p3904.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Given a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, the project director Dr. Yang wants to know how many tile codes of length <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> there are, that is, the number of ways to place the three kinds of tiles into a <!-- MATH
 $2 \times n$
 -->
<SPAN CLASS="MATH">2&#215;<I>n</I></SPAN>
<tex2html_verbatim_mark> rectangular plate subject to the above conditions. Write a program that can help him.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case is given in a single line, which contains a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $3 \le n \le 30$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3904.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3904.png
 ALT="$ \le$">30</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program is to write to standard output. Print exactly one line for each test case. The line should contain the number of tile codes of length <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
3 
4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
8
</PRE>

<P>

______________________________________________________
3905||||||false||||||
<P>The famous Korean internet company nhn has provided an internet-based photo service which allows The famous Korean internet company users to directly take a photo of an astronomical phenomenon in space by controlling a high-performance telescope owned by nhn. A few days later, a meteoric shower, known as the biggest one in this century, is expected. nhn has announced a photo competition which awards the user who takes a photo containing as many meteors as possible by using the photo service. For this competition, nhn provides the information on the trajectories of the meteors at their web page in advance. The best way to win is to compute the moment (the time) at which the telescope can catch the maximum number of meteors.<P>You have <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> meteors, each moving in uniform linear motion; the meteor <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> moves along the trajectory <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> + <I>t</I>&#215;<I>v</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> over time <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> is a non-negative real value, <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the starting point of <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the velocity of <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. The point <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> = (<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> is represented by <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>-coordinate <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>-coordinate <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> in the <SPAN CLASS="MATH">(<I>X</I>, <I>Y</I>)</SPAN>
<tex2html_verbatim_mark>-plane, and the velocity <!-- MATH
 $v_{i} = (a_{i}, b_{i})$
 -->
<SPAN CLASS="MATH"><I>v</I><SUB>i</SUB> = (<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark> is a non-zero vector with two components <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> in the <SPAN CLASS="MATH">(<I>X</I>, <I>Y</I>)</SPAN>
<tex2html_verbatim_mark>-plane. For example, if <!-- MATH
 $p_{i} = (1,3)$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> = (1, 3)</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $v_{i} = (â2,5)$
 -->
<SPAN CLASS="MATH"><I>v</I><SUB>i</SUB> = (-2, 5)</SPAN>
<tex2html_verbatim_mark>, then the meteor <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> will be at the position (0, 5.5) at time <SPAN CLASS="MATH"><I>t</I> = 0.5</SPAN>
<tex2html_verbatim_mark> because <!-- MATH
 $p_{i} + t \times v_{i} = (1,3) + 0.5 \times (â2,5) = (0,5.5)$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> + <I>t</I>&#215;<I>v</I><SUB>i</SUB> = (1, 3) + 0.5&#215;(-2, 5) = (0, 5.5)</SPAN>
<tex2html_verbatim_mark>. The telescope has a rectangular frame with the lower-left corner (0, 0) and the upper-right corner <SPAN CLASS="MATH">(<I>w</I>, <I>h</I>)</SPAN>
<tex2html_verbatim_mark>. Refer to Figure 1. A meteor is said to be in the telescope frame if the meteor is in the interior of the frame (not on the boundary of the frame). For exam!
 ple, in Figure 1, <!-- MATH
 $p_{2}, p_{3}, p_{4}$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>2</SUB>, <I>p</I><SUB>3</SUB>, <I>p</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>p</I><SUB>5</SUB></SPAN>
<tex2html_verbatim_mark> cannot be taken by the telescope at any time because they do not pass the interior of the frame at all. You need to compute a time at which the number of meteors in the frame of the telescope is maximized, and then output the maximum number of meteors.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3905.eps}$
 -->
<IMG
 WIDTH="1001" HEIGHT="621" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3905.png
 ALT="\epsfbox{p3905.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program is to read the input from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le w, h \le 100,000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3905.png
 ALT="$ \le$"><I>w</I>, <I>h</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3905.png
 ALT="$ \le$">100, 000)</SPAN>
<tex2html_verbatim_mark>, the width and height of the telescope frame, which are separated by single space. The second line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, the number of input points (meteors), <!-- MATH
 $1 \le n \le 100,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3905.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3905.png
 ALT="$ \le$">100, 000</SPAN>
<tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines contain four integers <!-- MATH
 $x_{i}, y_{i}, a_{i}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>, <I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>; <!-- MATH
 $(x_{i}, y_{i})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark> is the starting point <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $(a_{i}, b_{i})$
 -->
<SPAN CLASS="MATH">(<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark> is the nonzero velocity vector <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th meteor; <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are integer values between -200,000 and 200,000, and <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are integer values between -10 and 10. Note that at least one of <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is not zero. These four values are separated by single spaces. We assume that all starting points <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are distinct.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program is to write to standard output. Print the maximum number of meteors which can be in the telescope frame at some moment. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
4 2 
2 
-1 1 1 -1 
5 2 -1 -1 
13 6 
7 
3 -2 1 3 
6 9 -2 -1 
8 0 -1 -1 
7 6 10 0 
11 -2 2 1 
-2 4 6 -1 
3 2 -5 -1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
2
</PRE>

<P>

______________________________________________________
3906||||||false||||||
<P>Let DC (direct current) circuits be given. Each DC circuit generates a set of output signals. The DC circuits consist of a set of devices connected in parallel or in serial but they have no feedback loops. Each device generates a specific signal and the set of output signals of a circuit is determined by the kinds of devices and the topology of the device connection. For example, let two circuits named C1 and C2 be given as follows:<P><DIV ALIGN="CENTER"><IMG WIDTH="716" HEIGHT="317" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3906a.png ALT="\epsfbox{p3906a.eps}"> <tex2html_verbatim_mark></DIV><P>For C1, two signals, namely <TT>abc</TT> and <TT>adc</TT> can be generated. Given a circuit C, the output OUT(C) of it is defined as the set of signals which can be generated by C. For C1, the output of C1 is {<TT>abc, adc</TT>}, i.e. OUT(C1) = {<TT>abc, adc</TT>}. By the way, OUT(C2) is also {<TT>abc, adc</TT>}. For the above circuits, OUT(C1) = OUT(C2).<P>There is a special device called the pass device, namely <TT>1</TT>, generating no signal at all. The circuit C3 contains a pass device. The parallel connections and serial connections of sub-circuits can be arbitrarily nested and composed as shown in circuit C4.<P><DIV ALIGN="CENTER"><IMG WIDTH="794" HEIGHT="353" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3906a.png ALT="\epsfbox{p3906b.eps}"> <tex2html_verbatim_mark></DIV><P>For C3, the output is {<TT>abc, ac</TT>}, i.e. OUT(C3) = {<TT>abc, ac</TT>}; for C4, the output is {<TT>abc, aabc, aadc</TT>}, i.e. OUT(C4) = {<TT>abc, aabc, aadc</TT>}.<P>The problem is to determine the relation of two given circuits. The names of normal devices are given by lowercase letters depending on the signals generated by them. The name of the pass device is <TT>1</TT>. The parallel connection of two circuits <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> is denoted by <SPAN CLASS="MATH"><I>C</I>| <I>D</I></SPAN> <tex2html_verbatim_mark> and the serial connection of two circuits <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> in a row is denoted by <SPAN CLASS="MATH"><I>CD</I></SPAN> <tex2html_verbatim_mark>. The parentheses can be used as needed to clarify the topology of connections, but no spaces are allowed in a circuit description.<P>For example, the denotations of the above circuits are given as follows:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=HSIDES RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Circuit</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Circuit Representation</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>C1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>a(b|d)c</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>C2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>(ab|ad)c</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>C3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>a(b|1)c</TT></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>C4</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>a(b|a(b|d))c</TT></TD></TR></TBODY></TABLE></DIV><P><P><BR>There can be redundant parentheses around the representation of sub-circuits. For instance, C1 can be represented by <TT>(a((b)|((d)))c)</TT> instead of <TT>a(b|d)c</TT>.<P>The comparison result of two circuits is denoted by =, &lt;, &gt;, 0, and 1. Given two circuits <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>, the relation between them is determined as follows:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=HSIDES RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>The Relation of the Circuits  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    Representation of the Relation </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>OUT(<SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark>) = OUT(<SPAN CLASS="MATH"><I>D</I></SPAN>
<tex2html_verbatim_mark>)                        </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    =  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
OUT(<SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark>) is a proper subset of OUT(<SPAN CLASS="MATH"><I>D</I></SPAN>
<tex2html_verbatim_mark>)    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    &lt;  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
OUT(<SPAN CLASS="MATH"><I>D</I></SPAN>
<tex2html_verbatim_mark>) is a proper subset of OUT(<SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark>)    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    &gt;  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
OUT(<SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark>) and OUT(<SPAN CLASS="MATH"><I>D</I></SPAN>
<tex2html_verbatim_mark>) are disjoint         </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    0  </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
otherwise                              </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>    1 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
Assume that every circuit generates at least one signal. In other words, thereâs no circuit whose output is {} though it is allowed for nested circuits such as <TT>1</TT> or <TT>(1|1)</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program is to read the input from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case is given by two circuit representations separated by one or more spaces. The length of a circuit representation is less than 50; and the number of test cases is less than 30.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program is to write to standard output. For an input test case representing two circuits <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN>
<tex2html_verbatim_mark> in sequence, print a character representing the relation of <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN>
<tex2html_verbatim_mark> in one line. Hence, the number of output lines is equal to the number of test cases. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
a(b|d)c 
(a|b)aa 
a|b 
a1c 
b(a|1) 
(ab|ad)c 
a(a|b|1)b 
a 
a(1|b|bb)c 
b(1|b)(1|b)
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 
<PRE>
= 
0 
&gt; 
&lt; 
1
</PRE>

<P>

______________________________________________________
3907||||||false||||||
<P>Jisung is the student representative of the Department of Computer Engineering in ACM University. A few days later, the annual festival will be held for the students in the department. He is preparing some events for the festival. Since Jisung likes to make and solve puzzles, he decides to devise some interesting puzzle for the festival.<P>The followings are the rules for the puzzle made by Jisung:<P><DL COMPACT><DT>(1)</DT><DD>The players will be given an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Then they should use the first <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> capital letters from the Roman alphabet. For example, if <SPAN CLASS="MATH"><I>n</I> = 4</SPAN> <tex2html_verbatim_mark>, the four characters <TT>A</TT>, <TT>B</TT>, <TT>C</TT>, and <TT>D</TT> will be used to solve this puzzle.</DD><DT>(2)</DT><DD>The players will be given <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> forbidden strings. No forbidden string contains another forbidden string as a substring. The winner is the student who makes the longest string that does not include a forbidden string as a substring.</DD><DT>(3)</DT><DD>If such a longest string does not exist, i.e., if we can make arbitrarily long strings that satisfy the above condition, or if we cannot make any string that satisfies the above condition, `<TT>No</TT>' should be answered.</DD></DL><P>For example, suppose the given number <SPAN CLASS="MATH"><I>n</I> = 2</SPAN> <tex2html_verbatim_mark>, i.e., the players can use the two characters <TT>A</TT> and <TT>B</TT>. Assume that the forbidden strings are {<TT>AAA</TT>, <TT>AB</TT>, <TT>BA</TT>, <TT>BB</TT>}. In this case, the longest string that does not include any of the four forbidden strings as substrings is <TT>AA</TT>. But if the given forbidden strings are {<TT>AAA</TT>, <TT>BBB</TT>, <TT>ABAB</TT>, <TT>BBAA</TT>}, we cannot make such a longest string since arbitrarily long concatenations of <TT>ABA</TT>, i.e., <TT>ABAABAABA</TT> <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> do not include any forbidden string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3907img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3907img1.png ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3907img1.png ALT="$ \le$"><I>s</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3907img1.png ALT="$ \le$">1, 000)</SPAN> <tex2html_verbatim_mark> which represent the number of characters and the number of forbidden strings, respectively. From the second line to <SPAN CLASS="MATH">(<I>s</I> + 1)</SPAN> <tex2html_verbatim_mark>-st line of the test case, the forbidden strings are given one by one. The length of a forbidden string does not exceed 50.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. Print the longest string that does not include any forbidden string as a substring if it exists, otherwise, just print `<TT>No</TT>' as output. When there exists more than one such longest string with the same length, print the lexicographically largest string among them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
2 4 
AAA 
AB 
BA 
BB 
2 4 
AAA 
BBB 
ABAB 
BBAA 
3 7 
AA 
ABA 
BAC 
BB 
BC 
CA 
CC
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
AA 
No 
ACBAB
</PRE><P>
______________________________________________________
3908||||||false||||||

<P>
You are going to draw a figure on a monitor using a keyboard of a computer. The figure which you want to draw is a polygonal chain which consists of horizontal or vertical line segments only. In order to draw the figure, you should press some keys successively. A sequence of keys consists of pairs of a direction key and a digit key. The direction keys consist of four keys which are labeled as `<TT>N</TT>', `<TT>S</TT>', `<TT>E</TT>', and `<TT>W</TT>'. The symbols `<TT>N</TT>', `<TT>S</TT>', `<TT>E</TT>', and `<TT>W</TT>' represent North, South, East, and West respectively. The digit keys consist of 10 keys which are labeled as `<TT>0</TT>', `<TT>1</TT>' , <SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark>, `<TT>9</TT>'. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3908a.eps}$
 -->
<IMG
 WIDTH="376" HEIGHT="297" ALIGN="right" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3908a.png
 ALT="\epsfbox{p3908a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Initially, the cursor is located at the center of a monitor screen. If you will enter ``<TT>S4E3</TT>", i.e. youâll press the keys `<TT>S</TT>', `<TT>4</TT>', `<TT>E</TT>', and `<TT>3</TT>' in order, an L-shaped chain will appear on the monitor. When you first press the two keys `<TT>S</TT>' and `<TT>4</TT>', a vertical line segment with length 4 from the current cursor position, i.e. the center of the screen, to the south is drawn and the cursor is located at the endpoint of that segment. When you press next the two keys `<TT>E</TT>' and `<TT>3</TT>', a horizontal line segment with length 3 from the current cursor position to the east is drawn. 

<P>
Your computer program always keeps the polygonal chain simple. In other words, the polygonal chain on the monitor doesnât have either a cycle or an overlapped segment. Whenever the program finds a cycle or an overlap in the drawing, it instantly gets rid of it. For example, if you enter ``<TT>E6S2W5S2E2N7</TT>", two intersection points <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN>
<tex2html_verbatim_mark> occur in order by the last segment (see Figure 1). The program first gets rid of the cycle <!-- MATH
 $(p, d, e, f)$
 -->
<SPAN CLASS="MATH">(<I>p</I>, <I>d</I>, <I>e</I>, <I>f</I> )</SPAN>
<tex2html_verbatim_mark> containing the intersection <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark>, then the cycle <!-- MATH
 $(q, b, c, p)$
 -->
<SPAN CLASS="MATH">(<I>q</I>, <I>b</I>, <I>c</I>, <I>p</I>)</SPAN>
<tex2html_verbatim_mark> containing <SPAN CLASS="MATH"><I>q</I></SPAN>
<tex2html_verbatim_mark> as shown in Figure 1. Hence, the resulting chain on the monitor is the same as the chain by ``<TT>E3N3</TT>". If you enter ``<TT>E4S2W3S2E6N6W4S7</TT>", the program gets rid of the cycle <!-- MATH
 $(p, b, c, d, e, f, g, h)$
 -->
<SPAN CLASS="MATH">(<I>p</I>, <I>b</I>, <I>c</I>, <I>d</I>, <I>e</I>, <I>f</I>, <I>g</I>, <I>h</I>)</SPAN>
<tex2html_verbatim_mark> created by the first intersection point <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> as shown in Figure 2 (a). After removing this cycle, the other intersections disappear. The resulting chain is the same as that by ``<TT>E3S5</TT>". If you enter ``<TT>N5S9</TT>"(resp. ``<TT>!
 N9S5</TT>"), the resulting chain is identical to that by ``<TT>S4</TT>"(resp. ``<TT>N4</TT>") as shown in Figure 2 (b).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3908b.eps}$
 -->
<IMG
 WIDTH="968" HEIGHT="343" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3908a.png
 ALT="\epsfbox{p3908b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3908c.eps}$
 -->
<IMG
 WIDTH="964" HEIGHT="387" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3908a.png
 ALT="\epsfbox{p3908c.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Given a sequence of keys, write a program for computing the resulting chain. You can assume that the size of the monitor screen is sufficiently large.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is given in the first line of the input. Each test case is given in a single line, which contains a string <!-- MATH
 $d_{1}f_{1}d_{2}f_{2} \ldots d_{n}f_{n}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>1</SUB><I>f</I><SUB>1</SUB><I>d</I><SUB>2</SUB><I>f</I><SUB>2</SUB>...<I>d</I><SUB>n</SUB><I>f</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> , where <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB> <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3908a.png
 ALT="$ \in$"></SPAN>
<tex2html_verbatim_mark> {`<TT>N</TT>', `<TT>S</TT>', `<TT>E</TT>', `<TT>W</TT>'}, <SPAN CLASS="MATH"><I>f</I><SUB>i</SUB> <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3908a.png
 ALT="$ \in$"></SPAN>
<tex2html_verbatim_mark> {`<TT>0</TT>', `<TT>1</TT>', <SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark>, `<TT>9</TT>'}, and <!-- MATH
 $1 \le n \le 5,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3908a.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3908a.png
 ALT="$ \le$">5, 000</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program is to write to standard output. Print exactly one line for each test case. Print two integers <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> is the number of line segments on the resulting chain and <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> is the length of that chain, i.e. the total sum of the lengths of all line segments on the chain. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
E6S2W5S2E2N7 
E4S2W3S2E6N6W4S7 
N5S9 
E8S4W4N4E8 
E5S5W5N5
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 6
2 8
1 4
1 12
0 0
</PRE>

<P>

______________________________________________________
3909||||||false||||||
<P>For given two sets <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> of numbers, let a matching of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> be a set of pairs <SPAN CLASS="MATH">(<I>s</I>, <I>t</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3909img1.png ALT="$ \in$"> <I>S</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3909img1.png ALT="$ \in$"> <I>T</I></SPAN> <tex2html_verbatim_mark> such that each number in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is paired with at least one number in <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> and each number in <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is paired with at least one number in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. For example, the following is a matching of two sets <SPAN CLASS="MATH"><I>S</I> = {2, 8, 9, 10, 11}</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I> = {0, 3, 4, 6, 7, 11}</SPAN> <tex2html_verbatim_mark>:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>M</I><SUB>1</SUB> = {(2, 0),(2, 3),(2, 4),(8, 6),(9, 7),(10, 11),(11, 11)}</DIV><P><tex2html_verbatim_mark></P><P>Whereas the following is not a matching of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>,<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>M</I><SUB>2</SUB> = {(2, 0),(8, 3),(9, 4),(10, 6),(11, 7)}</DIV><P><tex2html_verbatim_mark></P>since the number 11 in set <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is not paired with any number in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>.<P>For a pair <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> <tex2html_verbatim_mark> in a matching, the cost of the pair is defined to be the absolute value of the difference between <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>. The cost of a matching is the sum of the cost of all pairs in the matching. For example, the cost of the matching <SPAN CLASS="MATH"><I>M</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is 10.<P>Given two sets of numbers, compute the minimum cost matching of the two sets. For example, the matching <SPAN CLASS="MATH"><I>M</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is a minimum cost matching of the given two sets <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case consists of three lines. The first line of each test case contains two integers. The first integer, <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> , is the number of integers in the first set, and the second integer, <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> , is the number of integers in the second set, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3909img1.png ALT="$ \le$"><I>n</I><SUB>1</SUB>, <I>n</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3909img1.png ALT="$ \le$">50, 000</SPAN> <tex2html_verbatim_mark>. The second line of each test case contains <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> integers for the first set and the third line contains <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> integers for the second set. The integers in each set are arranged in increasing order. All input integers are between 0 and 100,000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. The line should contain the cost of the minimum cost matching of the two sets of integers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
5 6 
2 8 9 10 11 
0 3 4 6 7 11 
4 4 
1 2 3 4 
5 6 7 8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 
16

______________________________________________________
3910||||||false||||||
<P>Misspelling is an art form that students seem to excel at. Write a program that removes the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>th character from an input string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3910img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3910img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of datasets that follow.<P>Each dataset consists of a single line of input containing <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, a space, and a single word made up of uppercase letters only. <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> will be less than or equal to the length of the word. The length of the word is guaranteed to be less than or equal to 80.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, and the misspelled word. The misspelled word is the input word with the indicated character deleted.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
4 MISSPELL 
1 PROGRAMMING 
7 CONTEST 
3 BALLOON
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 MISPELL 
2 ROGRAMMING 
3 CONTES 
4 BALOON
</PRE><P>
______________________________________________________
3911||||||false||||||
<P>Conversion between the <SPAN CLASS="textit">metric</SPAN> and <SPAN CLASS="textit">English</SPAN> measurement systems is relatively simple. Often, it involves either multiplying or dividing by a constant. You must write a program that converts between the following units:<P><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Type</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Metric</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">English equivalent</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Weight</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.000 kilograms</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2.2046 pounds</TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0.4536 kilograms</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.0000 pound</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Volume</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.0000 liter</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0.2642 gallons</TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3.7854 liters</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.0000 gallon</TD></TR></TBODY></TABLE></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3911img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3911img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of datasets that follow.<P>Each dataset consists of a single line of input containing a floating point (double precision) number, a space and the <SPAN CLASS="textit">unit specification</SPAN> for the measurement to be converted. The <SPAN CLASS="textit">unit specification</SPAN> is one of <TT>kg</TT>, <TT>lb</TT>, <TT>l</TT>, or <TT>g</TT> referring to kilograms, pounds, liters and gallons respectively.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, and the appropriately converted value rounded to 4 decimal places, a space and the <SPAN CLASS="textit">unit specification</SPAN> for the converted value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
1 kg 
2 l 
7 lb 
3.5 g 
0 l
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2.2046 lb 
2 0.5284 g 
3 3.1752 kg 
4 13.2489 l 
5 0.0000 g
</PRE><P>
______________________________________________________
3912||||||false||||||
<P>Chip and Dale have devised an encryption method to hide their (written) text messages. They first agree secretly on two numbers that will be used as the number of rows (<SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>) and columns (<SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>) in a matrix. The sender encodes an intermediate format using the following rules:<P><P><BR><OL><LI>The text is formed with uppercase letters [<TT>A-Z</TT>] and <SPAN CLASS="MATH">&lt; <I>space</I> &gt;</SPAN> <tex2html_verbatim_mark>. </LI><LI>Each text character will be represented by decimal values as follows: </LI></OL><P><P><BR><SPAN CLASS="MATH">&lt; <I>space</I> &gt; =</SPAN> <tex2html_verbatim_mark> <TT>0</TT>, A = <TT>1</TT>, B = <TT>2</TT>, C = <TT>3</TT>, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, Y = <TT>25</TT>, Z = <TT>26</TT><P><P><BR>The sender enters the 5 digit <SPAN CLASS="textit">binary</SPAN> representation of the characters' values in a spiral pattern along the matrix as shown below. The matrix is padded out with zeroes (0) to fill the matrix completely. For example, if the text to encode is: ``ACM" and <SPAN CLASS="MATH"><I>R</I> = 4</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I> = 4</SPAN> <tex2html_verbatim_mark>, the matrix would be filled in as follows:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=7><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \downarrow$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \uparrow$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \downarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \downarrow$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \leftarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \uparrow$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \downarrow$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \leftarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \leftarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \leftarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">A = 00001, C = 00011, M = 01101</DIV><P><DIV ALIGN="CENTER">(one extra 0)</DIV><P><P><BR>The bits in the matrix are then concatenated together in <SPAN CLASS="textit">row major</SPAN> order and sent to the receiver. The example above would be encoded as: <TT>0000110100101100</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of datasets that follow.<P>Each dataset consists of a single line of input containing <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, a space, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, a space, and a text string consisting of uppercase letters [<TT>A-Z</TT>] and <SPAN CLASS="MATH">&lt; <I>space</I> &gt;</SPAN> <tex2html_verbatim_mark>. The length of the text string is guaranteed to be <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3912img1.png ALT="$ \le$">(<I>R</I> <TT>*</TT> <I>C</I>)/5</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, and a string of binary digits <SPAN CLASS="MATH">(<I>R</I> <TT>*</TT> <I>C</I>)</SPAN> <tex2html_verbatim_mark> long describing the <B>encoded</B> text. The binary string represents the values used to fill in the matrix in rowmajor order. You may have to fill out the matrix with zeroes (<TT>0</TT>) to complete the matrix.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
4 4 ACM 
5 2 HI 
2 6 HI 
5 5 HI HO
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 0000110100101100 
2 0110000010 
3 010000001001 
4 0100001000011010110000010
</PRE><P>
______________________________________________________
3913||||||false||||||
<P>Chip and Dale have devised an encryption method to hide their (written) text messages. They first agree secretly on two numbers that will be used as the number of rows (<SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>) and columns (<SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>) in a matrix. The sender encodes an intermediate format using the following rules:<P><P><BR><OL><LI>The text is formed with uppercase letters [<TT>A-Z</TT>] and <SPAN CLASS="MATH">&lt; <I>space</I> &gt;</SPAN> <tex2html_verbatim_mark>. </LI><LI>Each text character will be represented by decimal values as follows: </LI></OL><P><P><BR><SPAN CLASS="MATH">&lt; <I>space</I> &gt; =</SPAN> <tex2html_verbatim_mark> <TT>0</TT>, A = <TT>1</TT>, B = <TT>2</TT>, C = <TT>3</TT>, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, Y = <TT>25</TT>, Z = <TT>26</TT><P><P><BR>The sender enters the 5 digit <SPAN CLASS="textit">binary</SPAN> representation of the characters' values in a spiral pattern along the matrix as shown below. The matrix is padded out with zeroes (0) to fill the matrix completely. For example, if the text to encode is: ``ACM" and <SPAN CLASS="MATH"><I>R</I> = 4</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I> = 4</SPAN> <tex2html_verbatim_mark>, the matrix would be filled in as follows:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=7><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \downarrow$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \uparrow$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \downarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \downarrow$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \leftarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \uparrow$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \downarrow$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \leftarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \leftarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \leftarrow$"></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">A = 00001, C = 00011, M = 01101</DIV><P><DIV ALIGN="CENTER">(one extra 0)</DIV><P>The bits in the matrix are then concatenated together in <SPAN CLASS="textit">row major</SPAN> order and sent to the receiver. The example above would be encoded as: <TT>0000110100101100</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of datasets that follow.<P>Each dataset consists of a single line of input containing <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, a space, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3913img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, a space, and a string of binary digits that represents the contents of the matrix (<SPAN CLASS="MATH"><I>R</I> <TT>*</TT> <I>C</I></SPAN> <tex2html_verbatim_mark> binary digits). The binary digits are in row major order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, and the <SPAN CLASS="textbf">decoded</SPAN> text message. You should throw away any trailing spaces and/or partial characters found while decoding.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
4 4 0000110100101100 
5 2 0110000010 
2 6 010000001001 
5 5 0100001000011010110000010
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 ACM 
2 HI 
3 HI 
4 HI HO
</PRE><P>
______________________________________________________
3914||||||false||||||
<P>The cook at the <SPAN CLASS="textit">Frobbozz Magic Pancake House</SPAN> sometimes falls asleep on the job while cooking pancakes. As a result, one side of a stack of pancakes is often burned. Clearly, it is bad business to serve visibly burned pancakes to the patrons. Before serving, the waitress will arrange the stacks of pancakes so that the burned sides are facing down. You must write a program to aid the waitress in stacking the pancakes correctly.<P>We start with a stack of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> pancakes of distinct sizes, each of which is burned on one side. The problem is to convert the stack to one in which the pancakes are in size order with the smallest on the top and the largest on the bottom and burned side down for each pancake. To do this, we are allowed to flip the top <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> pancakes over as a unit (so the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-th pancake is now on top and the pancake previously on top is now in the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-th position and the burned side goes from top to bottom and <EM>vice versa</EM>).<P>For example (<TT>+</TT> indicates burned bottom, <TT>-</TT> a burned top):<P><P><BR><DIV ALIGN="CENTER"><TT>+1 -3 -2</TT> [flip 2] <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3914img1.png ALT="$ \Rightarrow$"></SPAN> <tex2html_verbatim_mark> <TT>+3 -1 -2</TT> [flip 1] <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3914img1.png ALT="$ \Rightarrow$"></SPAN> <tex2html_verbatim_mark> <TT>-3 -1 -2</TT> [flip 3] <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3914img1.png ALT="$ \Rightarrow$"></SPAN> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><TT>+2 +1 +3</TT> [flip 1] <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3914img1.png ALT="$ \Rightarrow$"></SPAN> <tex2html_verbatim_mark> <TT>-2 +1 +3</TT> [flip 2] <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3914img1.png ALT="$ \Rightarrow$"></SPAN> <tex2html_verbatim_mark> <TT>-1 +2 +3</TT> [flip 1] <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3914img1.png ALT="$ \Rightarrow$"></SPAN> <tex2html_verbatim_mark> <TT>+1 +2 +3</TT></DIV><P><P><BR>You must write a program which finds a sequence of at most <SPAN CLASS="MATH">(3<I>n</I> - 2)</SPAN> <tex2html_verbatim_mark> flips, which converts a given stack of pancakes to a sorted stack with burned sides down.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a single decimal integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, the number of problem instances to follow. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines gives a separate dataset as a sequence of numbers separated by spaces. The first number on each line gives the number, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, of pancakes in the data set. The remainder of the data set is the numbers 1 through <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> in some order, each with a plus or minus sign, giving the initial pancake stack. The numbers indicate the relative sizes of the pancakes and the signs indicate whether the burned side is up (<TT>-</TT>) or down (<TT>+</TT>). <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> will be, at most, 30.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, the number of flips (<SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3914img1.png ALT="$ \ge$"> 0</SPAN> <tex2html_verbatim_mark>) required to sort the pancakes and a sequence of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> numbers, each of which gives the number of pancakes to flip on the corresponding sorting step. There may be several correct solutions for some datasets. For instance <TT>3 2 3</TT> is also a solution to the first problem below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
3 +1 -3 -2 
4 -3 +1 -2 -4 
5 +1 +2 +3 +4 -5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 6 2 1 3 1 2 1 
2 6 4 1 4 3 1 2 
3 3 5 1 5
</PRE><P>
______________________________________________________
3915||||||false||||||

<P>
Deep in the Amazon jungle, exceptionally tall trees grow that support a rich biosphere of figs and juniper bugs, which happen to be the culinary delight of brown monkeys. 

<P>
Reaching the canopy of these trees requires the monkeys to perform careful navigation through the tall tree's fragile vine system. These vines operate like a see-saw: an unbalancing of weight at any vine junction would snap the vine from the tree, and the monkeys would plummet to the ground below. The monkeys have figured out that if they work together to keep the vines properly balanced, they can <SPAN  CLASS="textit">all</SPAN> feast on the figs and juniper bugs in the canopy of the trees. 

<P>
A <SPAN  CLASS="textit">vine junction</SPAN> supports exactly two sub-vines, each of which must contain the same number of monkeys, or else the vine will break, leaving a pile of dead monkeys on the jungle ground. For purposes of this problem, a <SPAN  CLASS="textit">vine junction</SPAN> is denoted by a pair of matching square brackets <TT>[ ]</TT>, which may contain nested information about junctions further down its <SPAN  CLASS="textit">sub-vines</SPAN>. The nesting of vines will go no further than 25 levels deep.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3915.eps}$
 -->
<IMG
 WIDTH="730" HEIGHT="371" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3915.png
 ALT="\epsfbox{p3915.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
You will write a program that calculates the <SPAN  CLASS="textit">minimum</SPAN> number of monkeys required to balance a particular vine configuration. There is <SPAN  CLASS="textbf">always</SPAN> at least one monkey needed, and, multiple monkeys may hang from the same vine.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $(1 \le N \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3915.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3915.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> which is the number of datasets that follow. 

<P>
Each dataset consists of a single line of input containing a vine configuration consisting of a string of <TT>[</TT> and <TT>]</TT> characters as described above. The length of the string of <TT>[</TT> and <TT>]</TT> will be greater than or equal to zero, and less than or equal to 150. 

<P>

<P>
<BR>

<B>Note:</B> The second line of sample input is a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, and the minimum number of monkeys required to reach the canopy successfully. Assume that all the hanging vines are reachable from the jungle floor, and that all monkeys jump on the vines at the same time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 
[] 

[[][[]]]
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1 2 
2 1 
3 8
</PRE>

<P>

______________________________________________________
3916||||||false||||||
<P>Just when you thought we had run out of model rocket height problems<SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark><P>Yet another method used to determine the height achieved by a model rocket is the vertical line method. Two observers A and B are spaced <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> feet apart along a base line along one edge of the flat test field. The launch platform is equidistant from observers A and B and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> feet from the base line. Each observer has a theodolite or some other device for measuring angle above the horizontal (elevation angle) of a distant object and the azimuth angle (the angle the vertical plane of the sight line makes with the line from A through B measured counter-clockwise). Each measuring device is on a stand. A's device is <SPAN CLASS="MATH"><I>HA</I></SPAN> <tex2html_verbatim_mark> feet above the level of the launch platform and B's device is <SPAN CLASS="MATH"><I>HB</I></SPAN> <tex2html_verbatim_mark> feet above the level of the launch platform. When a rocket is fired, near the top of its flight, it deploys a parachute and emits a puff of smoke. Each observer measures the elevation angle and azimuth angle of the puff of smoke from their location. If the peak location is on the wrong side of the baseline or outside the lines determined by A and B perpendicular to the base line, it is out of bounds and disqualified. From this information, the height of the rocket may be determined as follows:<P>Each sight line determines a vertical plane. These two planes intersect in a vertical line (thus the name of the method). Each sight line intersects this vertical line in a point. If these points are more than <SPAN CLASS="MATH"><I>ERRDIST</I></SPAN> <tex2html_verbatim_mark> feet apart, an error is assumed and the flight is rejected. Otherwise, the point halfway between the two points where a sight line intersects the vertical line is computed. The rocket height is the distance of this midpoint above the launch platform.<P>You must write a program which, given the parameters <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> (the distance in feet between observers A and B), <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> (the distance in feet from the base line to the launch platform), <SPAN CLASS="MATH"><I>HA</I></SPAN> <tex2html_verbatim_mark> (the distance of the measuring device A above the launch platform in feet), <SPAN CLASS="MATH"><I>HB</I></SPAN> <tex2html_verbatim_mark> (the distance of the measuring device B above the launch platform in feet), <SPAN CLASS="MATH"><I>ERRDIST</I></SPAN> <tex2html_verbatim_mark> (the maximum distance between the intersection points of a sight line with the vertical line), <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark> (the elevation angle of the rocket in degrees measured by the left observer A), <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \beta$"></SPAN> <tex2html_verbatim_mark> (the elevation angle of the rocket in degrees observed by the right observer B), <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \gamma$"></SPAN> <tex2html_verbatim_mark> (the azimuth angle in degrees measured by the left observer A) and <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \delta$"></SPAN> <tex2html_verbatim_mark> (the azimuth angle in degrees measured by the right observer B), computes the height of the rocket above the launch platform in feet to the nearest foot.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of datasets that follow.<P>The second line contains the parameters <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>HA</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>HB</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>ERRDIST</I></SPAN> <tex2html_verbatim_mark> in that order as (floating point) decimal values. These values would be measured once at the beginning of the day and remain fixed through all rocket shots.<P>Each succeeding line of input represents a single dataset. Each dataset will contain the angles <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \beta$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \gamma$"></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \delta$"></SPAN> <tex2html_verbatim_mark> in that order (measured in degrees) as (floating point) decimal values for a rocket shot.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset of four angles, the output consists of a single line . If angles <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \alpha$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \beta$"></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="14" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \gamma$"></SPAN> <tex2html_verbatim_mark> are not strictly between 0 and 90 degrees or <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3916img1.png ALT="$ \delta$"></SPAN> <tex2html_verbatim_mark> is not strictly between 90 degrees and 180 degrees, the line should contain the dataset number, a space and the word ``<TT>DISQUALIFIED</TT>" (without the quotes). Otherwise, if the distance between the intersection points of a sight line with the vertical line is more that <SPAN CLASS="MATH"><I>ERRDIST</I></SPAN> <tex2html_verbatim_mark> feet, the line should contain the dataset number, a space and the word ``<TT>ERROR</TT>" (without the quotes). Otherwise, the line should contain the dataset number, a space and the height above the launch platform in feet to the nearest foot.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
100.0 300.0 5.25 2.92 5.00 
40.1 36.2 35.3 151.6 
64.9 71.1 15.7 160.1 
44.9 41.2 33.1 152.5 
44.9 41.2 33.1 52.5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 50 
2 ERROR 
3 58 
4 DISQUALIFIED
</PRE><P>
______________________________________________________
3917||||||false||||||
<P>We wish to tile a grid 4 units high and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> units long with rectangles (dominoes) 2 units by one unit (in either orientation). For example, the figure shows the five different ways that a grid 4 units high and 2 units wide may be tiled.<P><DIV ALIGN="CENTER"><IMG WIDTH="449" HEIGHT="144" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3917.png ALT="\epsfbox{p3917.eps}"> <tex2html_verbatim_mark></DIV><P>Write a program that takes as input the width, <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>, of the grid and outputs the number of different ways to tile a 4-by-<SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> grid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3917.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3917.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of datasets that follow.<P>Each dataset contains a single decimal integer, the width, <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>, of the grid for this problem instance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, there is one line of output: The problem instance number as a decimal integer (start counting at one), a single space and the number of tilings of a 4-by-<SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> grid. The values of <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> will be chosen so the count will fit in a 32-bit integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
2 
3 
7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 5 
2 11 
3 781
</PRE><P>
______________________________________________________
3918||||||false||||||
<P>The <EM>Flathead Testing Corporation</EM> (FTC) supplies various tests for Human Resources departments at many companies. One type of test they supply includes spatial concepts questions such as:<P>When the following figure is folded back on the interior lines it forms a cube.<P><DIV ALIGN="CENTER"><IMG WIDTH="420" HEIGHT="300" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3918a.png ALT="\epsfbox{p3918a.eps}"> <tex2html_verbatim_mark></DIV><P>Which of the following could be an image of one corner of the resulting cube?<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="896" HEIGHT="188" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3918a.png ALT="\epsfbox{p3918b.eps}"> <tex2html_verbatim_mark></DIV><P>Unfortunately, FTC was recently embarrassed when one such question on a test had no solution among the choices and another (given in the example) had two solutions among the choices (1 and 3).<P>FTC needs a routine which will read in a specification of the unfolded cube and specifications of corner views and determine, for each corner view, whether it is a view of a corner of the cube specified in the unfolded part.<P>FTC uses the following images as faces of each cube. Each image is symmetrical about the vertical axis and has a distinguished end (up in each image).<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="832" HEIGHT="86" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3918a.png ALT="\epsfbox{p3918c.eps}"> <tex2html_verbatim_mark></DIV><P>The unfolded cube is specified by a string of six pairs of a letter indicating the image on the face and a number indicating the orientation of the distinguished end of the face: 1 is up, 2 is right, 3 is down and 4 is left. The faces are specified in the order given in the following figure with the orientations indicated in the square to the right:<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="860" HEIGHT="249" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3918a.png ALT="\epsfbox{p3918d.eps}"> <tex2html_verbatim_mark></DIV><P>So the unfolded cube in the example is specified as ``<TT>F3E4E2D3C2F3</TT>". FTC has a routine which reads this specification and generates the unfolded image for the question.<P>The answer images are specified by three pairs of a letter and a digit indicating a face image and an orientation as indicated in the following diagram. The faces are specified in the order top, right, left (indicated by numbers in brackets in the figures), that is clockwise around the center vertex starting at the top. The orientation of the distinguished end of each face is indicated by the numbers on the edges in the diagram. They circle each face clockwise, starting at the center vertex.<P><DIV ALIGN="CENTER"><IMG WIDTH="337" HEIGHT="428" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3918a.png ALT="\epsfbox{p3918e.eps}"> <tex2html_verbatim_mark></DIV><P>For the example, the answer figures are specified as ``<TT>C2D2F2</TT>", ``<TT>E3F3C4</TT>", ``<TT>F2C2D2</TT>", ``<TT>D1E1F3</TT>" and ``<TT>E1C1E1</TT>". Again, FTC has a routine which reads this specification and generates each answer image for the question. They just need your routine to make sure there is exactly one correct answer to each question.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3918a.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3918a.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of datasets that follow.<P>Each dataset consists of six lines of input. The first line of input is the specification for the folded out cube as described above. This line is followed by five lines, each of which gives the specification of one answer image as described above.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output on a single line the dataset number, (1 through <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>), a blank, the number of answers which are solutions of the problem (corners of the cube specified in the folded out line), a blank and five `<TT>Y</TT>' or `<TT>N</TT>' characters separated by a blank indicating which of the answer images was a solution (`<TT>Y</TT>' for a solution, `<TT>N</TT>' for not a solution).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
F3E4E2D3C2F3 
C2D2F2 
E3F3C4 
F2C2D2 
D1E1F3 
E1C1E1 
A2F4F1A3A3C4 
C3A4A2 
F3F4A1 
F3C4A1 
A2C3A2 
A4A4F1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 Y N Y N N 
2 0 N N N N N

______________________________________________________
3919||||||false||||||

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3919.eps}$
 -->
<IMG
 WIDTH="260" HEIGHT="151" ALIGN="right" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3919.png
 ALT="\epsfbox{p3919.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The conventional western musical scale is based on 12 tones: 

<P>
<TT>A A# B C C# D D# E F F# G G#</TT> 

<P>
The sequence repeats indefinitely - the next note higher than <TT>G#</TT> is also called <TT>A</TT>. 

<P>
Each step from one note to another in this sequence is called a half-step. The <TT>#</TT> symbol is called a ``sharp" and actually means ``raised a half step". Hence ``<TT>A#</TT>" is ``A raised a half-step". There is a similar symbol ``ï¬at" meaning ``lowered a half-step" that we will render as ``<TT>b</TT>" in this problem, though it is normally written as <SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3919.png
 ALT="$ \flat$"></SPAN>
<tex2html_verbatim_mark>.

<P>
Given that meaning for <TT>#</TT> and <TT>b</TT>, it is possible for notes to actually be referred to by more than one name. <TT>A#</TT> and <TT>Bb</TT> refer to the same note. <TT>B#</TT> means the same as <TT>C</TT>. <TT>Fb</TT> means the same as <TT>E</TT>. 

<P>
A common task for musical arrangers is to transpose a work of music - to raise or lower the entire work by some number of half-steps in order to fit better into the range of a particular singer or musical instrument. A proper transposition will preserve the number of half-steps between any two successive notes in the work.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of one or more input sets. 

<P>
An input set consists of a line containing a sequence of 0 or more notes with sharp and ï¬at marks, each note separated fro mthe others by one or more blanks. This is followed by a line containing a single integer indicating the number of half-steps to transpose the piece (positive numbers indicating the notes should be transposed up, negative indicating it should be transposed down). 

<P>
The end of input is signaled by a line consisting of the string ``<TT>***</TT>".

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input set, you should print one line containing the sequence of transposed notes, each represented as in the list of 12 given at the start of this problem. Notes should be printed with a single blank space separating them.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
C# E Db G# 
1 
D E# D A 
-1 
***
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
D F D A 
C# E C# G#
</PRE>

<P>

______________________________________________________
3920||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="237" HEIGHT="256" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3920.png ALT="\epsfbox{p3920.eps}"> <tex2html_verbatim_mark></DIV><P>Alabama Mobiles Inc. designs and manufactures mobiles, lightweight ``kinetic sculptures" consisting of bars hanging from strings. From each end of the bar hangs a string supporting either a small decorative object of some kind or another, smaller mobile. A well-designed mobile must have the weights of all the decorative items balanced, so that each bar in the mobile will naturally tend to hang horizontally. A bar can be balanced even if the weights hanging from either side are not equal. The string must be tied to the bar si that it divides the bar into two lengths <SPAN CLASS="MATH"><I>L</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, such that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>L</I><SUB>1</SUB> <TT>*</TT> <I>W</I><SUB>1</SUB> = <I>L</I><SUB>2</SUB> <TT>*</TT> <I>W</I><SUB>2</SUB></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>W</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is the total weight hanging from the <SPAN CLASS="MATH"><I>L</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> side of the bar and <SPAN CLASS="MATH"><I>W</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is the total length hanging from the other side.<P>Write a program to read a partial design for a new mobile and determine if it can be balanced and if, once balanced, the elements will swing freely without bumping or entangling with one another.<P>Each mobile will be described as a collection of bars and decorative objects. You will be given the lengths of the bars, the weights of all objects, and information on how the bars and objects are connected to one another. You may assume that the bars are made of a lightweight material so that their weight and the weight of the connecting strings are negligible compared to the weights of the decorative objects. 

<P>
Every mobile will have at least one bar.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of a number of mobile design specifications. Each mobile design is given as a parenthesized expression. These expressions are composed of two basic forms: 

<P>

<OL>
<LI>(<TT>D</TT> <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark>) 

<P>
describes a decorative object. <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> is a ï¬oating point number giving the weight of the object. 

<P>
</LI>
<LI>(<TT>B</TT> # <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>m</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>m</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>) 

<P>
describes a bar. 

<UL>
<LI># is an integer that constitutes a unique identifier for each bar. These integers will be assigned densely so that a mobile with a total of <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> bars will use the numbers <!-- MATH
 $1 \ldots k$
 -->
<SPAN CLASS="MATH">1...<I>k</I></SPAN>
<tex2html_verbatim_mark> as identifiers. The order in which these identifiers appear within a total expression is arbitrary. 
</LI>
<LI><SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> is a ï¬oating point number indicating the length of the bar. 
</LI>
<LI><SPAN CLASS="MATH"><I>m</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> are two parenthesized expressions describing the portion of the mobile hanging from each end of this bar.
</LI>
</UL>
</LI>
</OL>

<P>
In the above two forms, wherever a space is shown between the components of each form, the actual input may contain 1 or more spaces and/or line terminators. An exception to this rule is that, to either side of a `<TT>(</TT>' or `<TT>)</TT>' in these forms, the input may contain zero or more spaces and/or line terminators. 

<P>
Every mobile will contain at least one bar. 

<P>
End of input is indicated by a line containing only: <TT>()</TT>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each mobile specification, the program should print one line of output for each bar, in order by the object number of the bar. Each line will have the form 

<P>

<P>
<BR>

<TT>Bar <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> must be tied <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> from one end.</TT> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the identifying number of the bar and where <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> is the smaller of the two lengths <SPAN CLASS="MATH"><I>L</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> as described above and is printed to one decimal place precision.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
(B 2 4.0 
  (D 1.0 ) 
  (B 1 2.0 (D 1.0 ) (D 2.0 ))) 
()
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Bar 1 must be tied 0.7 from one end. 
Bar 2 must be tied 1.0 from one end.
</PRE>

<P>

______________________________________________________
3921||||||false||||||

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3921.eps}$
 -->
<IMG
 WIDTH="300" HEIGHT="179" ALIGN="right" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3921.png
 ALT="\epsfbox{p3921.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
You fell asleep at your desk (again!) and were awakened by the sound of the newly installed security-cam robots rolling out into the office corridors. You know youâll be in big trouble if any of these robots manages to record your image. Luckily, you are able to quickly call up on your desktop computer the route each robot is programmed to follow. You need to plan your own movements to stay out of a direct line of sight of any of the robots. 

<P>
The robots move in discrete steps of unit size, moving either to the north, east, west, or south. You may move, also in discrete steps of unit size, in one of these same directions (walls permitting), but you also have the option of remaining in place for a step. You and all robots move simultaneously. 

<P>
Neither you nor the robots may move through walls, nor can either you or the robots move outside the building. 

<P>
The robots take a photograph in each of the <TT>NSEW</TT> directions immediately after moving. To be captured in a photo, you would have to be directly along a <TT>NS</TT> or <TT>EW</TT> line from a robot with no walls between you. You are also considered to have been spotted if, at the end of any movement, you are directly on top of a robot.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of one or more mazes. Each maze begins with a line containing two integers, <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark>, denoting the width (west-east) and the height (north-south) of the maze. Neither you nor the robots may leave this area. It is considered to be implicitly enclosed, but may contain other walls. End of input is indicated when either <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark> is less than 3. 

<P>
This is followed by <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark> lines of input, each containing at least <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> characters. In each of these lines, only the first <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark> characters are significant. Extra characters should be ignored. 

<P>
The interpretation of the characters in these lines is as follows: 

<P>

<UL>
<LI>` ' denotes an open space 
</LI>
<LI>`<TT>X</TT>' denotes a wall. 
</LI>
<LI>`<TT>Y</TT>' denotes your current position and will occur exactly once in the maze. 
</LI>
<LI><SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>, a single digit in the range 0-9 denotes the current position of a robot. No digit will be repeated, and a set of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> robots will be denoted by the digits <!-- MATH
 $0 \ldots n - 1$
 -->
<SPAN CLASS="MATH">0...<I>n</I> - 1</SPAN>
<tex2html_verbatim_mark>. 
</LI>
</UL>

<P>
Each maze will be followed by <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines (where <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the total number of robots). Each line will contain from 0 to 80 characters. All <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines will contain the same number of characters. These chracters will be chosen from among <TT>NSEW</TT> to denote North, South, East, and West, where `North' points towards the portion of the maze described by the first line of input and `West' points to the portion of the maze denoted by the first column of each line of the maze input. These characters describe the movement of the robots, one step in the maze at a time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each maze, you should print a single line of the form: 

<P>

<P>
<BR>

<TT>You can hide for</TT> <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <TT>turns.</TT> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> is the maximum number of steps the robots can take before you are seen. If you can avoid detection during the entire predicted movement of the robots, <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> will be the number of steps given for each robot in the text.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
12 7 
XXXXXXXXXXXX 
X      1   X 
X        X X 
X        X X 
X      XXX X 
X    0 XXXYX 
XXXXXXXXXXXX 
NNEWSWWW 
EEEWWWWW 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
You can hide for 2 turns.
</PRE>

<P>

______________________________________________________
3922||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="241" HEIGHT="453" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3922.png ALT="\epsfbox{p3922.eps}"> <tex2html_verbatim_mark></DIV><P>The Justice Dept runs a Witness Protection Plan in which witnesses to crimes are given new identities to protect them from retaliation by the people against whom they testify in court.<P>Experience has shown that many of the protected witnesses are their own worst enemies - often giving away their new locations and identities in misguided attempts to contact relatives and friends and to assure them that all is well.<P>The plan is experimenting with a new idea of allowing such communications, in email form only, with the idea that employees of the plan will inspect the communications first and cut out any potentially dangerous sentences, then send the email on from Dept computers so that they cannot be traced back to the witness.<P>Unfortunately, the budget for the pilot project was cut almost as soon as the project commenced. There is insufficient money to actually hire people to read all the email, so an automated solution is sought instead.<P>Write a program that, given a list of sensitive words and a message (in plain text form), scans the message for any sentence containing a sensitive word (ignoring differences in upper/lower case). If a sensitive word is found, every character in that sentence (except for line terminators) should be replaced by `<TT>@</TT>' characters.<P>For the purposes of this program, a word is a string of consecutive alphanumeric characters bounded in the message by the start or end of the message and/or by any non-alphanumeric character. A sentence is a string of consecutive characters bounded by the start or end of the message, by a paragraph boundary (a line containing zero characters), and/or by one of the punctuation characters: `<TT>.</TT>', `<TT>?</TT>', or `<TT>!</TT>'<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT>
</H2>

<P>
Input to the program consists of one or more input sets. Each input set consists of a word list and a message. The end of the input is signaled by a line containing only the left-justified phrase ``<TT>EndOfInput</TT>". 

<P>
A word list consists of zero or more words, one per line and left-justified. Words may be up to 40 characters in length.The end of the word list is signalled by a line containing only the left-justified phrase ``<TT>EndOfList</TT>". 

<P>
The word list is immediately followed by a message. A message consists of zero or more lines of text containing up to 80 characters per line. The end of the message is signaled by a line containing only the left-justified phrase ``<TT>EndOfMsg</TT>".

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input set, print the message, exactly as it appears in the input except for replacement of sentences by `<TT>@</TT>' characters as described above. At the end of each message, print a line containing only a string of four `<TT>=</TT>' characters, left-justified.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
John 
jane 
Smith 
Jones 
Kansas 
court 
crime 
phone 
555 
EndOfList 
Dear Mom, 

I just wanted to let you know that I am alive and well. Jane is 
well also. Iâm glad they were able to relocate us. My 
only complaint is that I wish they could have found someplace 
more exciting than Kansas for us to live in! If you really need 
to contact us, you can do so by telephone. The number is 
(757) 555-0478, but donât tell anyone. 

Love, 
the new John Smith 
EndOfMsg 
EndOfInput
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Dear Mom, 

I just wanted to let you know that I am alive and well.@@@@@@@@ 
@@@@@@@@@@ Iâm glad they were able to relocate us.@@@ 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ If you really need 
to contact us, you can do so by telephone.@@@@@@@@@@@@@@ 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 

@@@@@ 
@@@@@@@@@@@@@@@@@@ 
====
</PRE>

<P>

______________________________________________________
3923||||||false||||||

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3923.eps}$
 -->
<IMG
 WIDTH="206" HEIGHT="231" ALIGN="right" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3923.png
 ALT="\epsfbox{p3923.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Frederico de Vinci (one of Leonardoâs less talented cousins) is a budding alchemist who spends his days mixing a variety of chemicals hoping to stumble upon the formula to change lead into gold. Near his worktable, he keeps a cheap ceramic jar where he deposits the useless and rather noxious results of his failed experiments. 

<P>
He has had a few accidents with cracked and shattered disposal jars because of the heat produced by the reacting chemicals he has dropped in there. 

<P>
Frederico has worked up a table of the amount of the temperature changes produced by various pairs of chemicals he has previously put into his disposal jars. (He believes that simultaneous interactions of 3 or more chemicals are insignificant.) 

<P>
Write a program to read this information and a list of what he is planning to dispose into the jar, and to print the maximum temperature change that may be produced.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of one or more problem sets. The final problem set is followed by a line containing the phrase ``<TT>ENDOFINPUT</TT>". 

<P>
Each problem set begins with a list of up to 64 pairs of chemicals and the heat they produce. This consists of multiple lines, each of the form 

<P>

<P>
<BR>

<!-- MATH
 $chemical1 \ chemical2 \ heat$
 -->
<SPAN CLASS="MATH"><I>chemical</I>1&nbsp;<I>chemical</I>2&nbsp;<I>heat</I></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>chemical</I>1</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>chemical</I>2</SPAN>
<tex2html_verbatim_mark> are names of chemicals, expressed as an alphabetic string of 1-20 characters. <SPAN CLASS="MATH"><I>heat</I></SPAN>
<tex2html_verbatim_mark> is an integer in the range <!-- MATH
 $0 \ldots 100$
 -->
<SPAN CLASS="MATH">0...100</SPAN>
<tex2html_verbatim_mark> indicating the number of degrees by which the temperature in the jar will rise when 1 gram of <SPAN CLASS="MATH"><I>chemical</I>1</SPAN>
<tex2html_verbatim_mark> mixes with one gram of <SPAN CLASS="MATH"><I>chemical</I>2</SPAN>
<tex2html_verbatim_mark>. The order in which the two chemicals appear within a single line is not relevant. No pair of chemicals will appear more than once in this list. 

<P>
This list of pairs is terminated by a line containing ``<TT>0 0 0</TT>". It is followed by a list of up to 12 chemicals that Frederico plans to place in the jar. The list consists of a number of lines of the form 

<P>

<P>
<BR>

<!-- MATH
 $chemical \ amount$
 -->
<SPAN CLASS="MATH"><I>chemical</I>&nbsp;<I>amount</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>chemical</I></SPAN>
<tex2html_verbatim_mark> is the name of a chemical (again, expressed as an alphabetic string of 1-20 characters) and <SPAN CLASS="MATH"><I>amount</I></SPAN>
<tex2html_verbatim_mark> is an integer in the range <!-- MATH
 $0 \ldots 1000$
 -->
<SPAN CLASS="MATH">0...1000</SPAN>
<tex2html_verbatim_mark> indicating the quantity (in grams) to be disposed. No chemical will appear more than once in this second list. 

<P>
This list is terminated by a line containing ``<TT>0 0</TT>".

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each problem set, print a single line of output of the form 

<P>

<P>
<BR>

<TT>The temperature in the jar will change by at most</TT> <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <TT>degrees.</TT> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> is an integer indicating the maximum temperature rise. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Aqua Beta 2 
Beta Calcum 1 
Aqua Delta 10 
Ente Franca 10 
0 0 0 
Aqua 50 
Calcum 10 
Beta 25 
Delta 10 
Franca 10 
0 0 
ENDOFINPUT
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
The temperature in the jar will change by at most 150 degrees.
</PRE>

<P>

______________________________________________________
3924||||||false||||||

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3924.eps}$
 -->
<IMG
 WIDTH="241" HEIGHT="474" ALIGN="right" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3924.png
 ALT="\epsfbox{p3924.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
You are competing with another company for a city contract to fill potholes in the city streets. 

<P>
The city has set up a contest in which you will compete in a rectangular parking lot containing a large number of potholes to see which company can work faster. 

<P>
You are to stretch a rope from one end of the lot to the other, dividing the lot into two rectangles. Your opponent will then choose which side of the lot they wish to work in, while you work in the other side. Obviously, then, you need to try can divide the lot so that the amount of work to be done (total area of all potholes) on each side is as nearly equal as possible. 

<P>
For the purposes of this problem, potholes will be modeled as circles. Potholes do not overlap one another or the edges of the parking lot. Your chosen placement of the rope may not cross a pothole. Potholes may, however, be tangent to one another, to the edges of the lot, or to the rope.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input consists of one or more problem sets. Each problem set consists of 

<UL>
<LI>One line containing the width (x) and height (y) of the parking lot, given as two positive ï¬oating point numbers. 
</LI>
<LI>Two or more lines containing descriptions of potholes. Each line consists of three nonnegative ï¬oating point numbers denoting the (x,y) coordinates of the center of the pothole, followed by the radius of the pothole. The origin of the coordinate system is at a corner of the parking lot. 
</LI>
<LI>The end of an input set is signaled by a line containing 3 zeroes separated by blanks. The end of all input is signaled by a subsequent line containing two zeros separated by blanks. 
</LI>
</UL>

<P>
Write a program that, given a description of the parking lot and of the potholes, determines where to place to rope so that the total area of the potholes on each side of the rope is as nearly equal as possible. Potholes will be modeled as perfect circles. The rope may not pass through any pothole, though it may be tangent to potholes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each problem set, print a line 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
where <!-- MATH
 $(x_{1} , y_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $(x_{2} , y_{2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark> are the points where the rope crosses the boundary of the parking lot. Order your output so that <!-- MATH
 $x_{1} \le x_{2}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3924.png
 ALT="$ \le$"><I>x</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $y_{1} \le y_{2}$
 -->
<SPAN CLASS="MATH"><I>y</I><SUB>1</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3924.png
 ALT="$ \le$"><I>y</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>. Point coordinates should be printed to one decimal place accuracy. 

<P>
These points should be chosen so as to most nearly divide the set of potholes into two equal sets by total area. 

<P>
If there is more than one possible placement of the rope that achieves the most nearly equal divisions of pothole areas, choose the placement that most nearly divides the parking lot into equal areas. If this does not resolve the tie, favor the placement of the rope that intersects the x axis of the lot. Any remaining ties should be broken in favor of the smaller x value.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
16.0 12.0 
1.0 1.0 0.8 
8.0 6.0 2.0 
3.0 5.0 1.0 
3.0 9.0 1.0 
0 0 0 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6.0 0.0 6.0 12.0
</PRE>

<P>

______________________________________________________
3925||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="241" HEIGHT="148" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3925.png ALT="\epsfbox{p3925.eps}"> <tex2html_verbatim_mark></DIV><P>Bulls and Cows is a game played between two players, one called the <SPAN CLASS="textit">codemaker</SPAN> and the other the <SPAN CLASS="textit">codebreaker</SPAN>. The codemaker forms a secret ``code", a decimal integer of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> digits, all of them different. The codebreaker then attempts to guess the code by naming numbers of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> digits. For each guess, the codemaker responds with the number of digits of correct value in the correct position (``Bulls") and the number of correct digits in an incorrect position (``Cows").<P>For example, if the secret code were 1230 and the codebreaker guessed 1205, the response would be ``2 Bulls and 1 Cow".<P>Write a program to read a series of guesses and responses for a game and to print the number of possible solutions and, from among all possible solutions, the numerically smallest one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of one or more game descriptions.<P>Each game description begins with a line with a single integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> in the range <SPAN CLASS="MATH">1...7</SPAN> <tex2html_verbatim_mark>. A nonpositive value for <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> signals the end of input. Each positive <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is followed by some number of lines, each line containing one guess and response. Each line will contain <SPAN CLASS="MATH"><I>K</I> + 2</SPAN> <tex2html_verbatim_mark> single-digit numbers, separated by one or more blanks. The first <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> digits represent the guess. The next number represents the number of Bulls. The final digit is the number of Cows.<P>The end of the sequence of guess-and-response lines is signaled by a line of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> integers, the first of which is `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each game description in the input, print a line of the form<P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <TT>is one of</TT> <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <TT>possible solutions.</TT><P><P><BR>where the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is a sequence of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> digits, printed with no intervening spaces, and representing the numerically smallest possible solution, and where <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is an integer denoting the number of possible solutions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
0 1 2 8 4 5 5 0 
0 1 2 9 5 4 3 2 
-1 1 2 3 4 5 0 0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
012345 is one of 5 possible solutions.
</PRE><P>
______________________________________________________
3926||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="294" HEIGHT="125" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3926.png ALT="\epsfbox{p3926.eps}"> <tex2html_verbatim_mark></DIV><P>Dr. Montgomery Moreau has been observing a population of Northern Madagascar Pie-bald Shrews in the wild for many years. He has made careful observations of all the shrews in the area, noting their distinctive physical characteristics and naming each one.<P>He has made a list of significant physical characteristics (e.g., brown fur, red eyes, white feet, prominent incisor teeth, etc.) and taken note of which if these appear to be dominant (if either parent has this characteristic, their children will have it.<P>In recent years he has begun to suspect that the shrew population has been undergoing a high rate of genetic mutation (possibly due to that strange glowing rock near their communal burrow). When the shrews emerged from their burrow at the end of the past winter, he noted quite a few new youngsters whose physical characteristics did not match up with any possible pair of prospective parents.<P>Write a program to determine the smallest number of mutations for each juvenile shrew that would account for its possible parentage.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of one or more input sets.<P>Each input set consists of a number of lines, each describing a single animal. Each line begins with a single character, either `<TT>M</TT>', `<TT>F</TT>', or `<TT>C</TT>'. These denote a male adult, a female adult, and a child, respectively. There will be at least one of each type of record in an input set. This initial character is followed by a blank, then by 1-40 consecutive <TT>0</TT> or <TT>1</TT> characters describing a genetic code for that animal. All lines in a given input set will have the same number of characters in their genetic codes.<P>A <TT>1</TT> indicates that the animal possesses a particular physical characteristic associated with a dominant gene, a <TT>0</TT> indicates that it does not. The input set is terminated by a line beginning with the character `<TT>X</TT>'. The end of all input sets is indicated by a second, consecutive line beginning with `<TT>X</TT>'.<P>In the absence of mutation, a child can have a <TT>1</TT> in a gene position only if at least one parent has a <TT>1</TT> there, and can have a <TT>0</TT> in that position only if both parents have a <TT>0</TT> in the corresponding position. Assume that a mutation affects only a single genetic marker.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each child, print a line of the form<P><P><BR><TT>Child <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> has a minimum of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> mutations.</TT><P><P><BR>where <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is the number (beginning with 1) indicating the order in which the child appeared in the input (<SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> ascending with each output line) an where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the minimum number of mutations that could account for the birth of this child from some pair of adults.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
M 0011 
F 0000 
M 1001 
C 1011 
F 0110 
C 1111
X 
X
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Child 1 has a minimum of 1 mutations. 
Child 2 has a minimum of 0 mutations.

______________________________________________________
3927||||||false||||||
<P>An extensive area of research in computer science is the field of communications. With computer networks being part of everyday life of many people, the development of ways for making networks faster, more reliable and secure is constantly needed. This practical need motivates an extensive research activity in the theory behind communications.<P>The very first thing needed to establish any kind of communication is a common code. A code is a way of changing the <SPAN CLASS="textit">form</SPAN> of a piece of information into some other form, in general to make it possible to convey that piece of information from one place to another. Flag codes used by boats and the Morse code used in telegraphy are examples of codes for translating letters into different forms to enable communication over different media.<P>More formally, a code is a set of strings composed of symbols from one alphabet. Each string defined in the code is called a code word. A message is then composed concatenating a set of code words to convey the information needed. For example, in Morse code the alphabet is composed of the symbols hyphen and dot; letter ``<TT>S</TT>" is represented by the code word ``<TT>...</TT>", letter ``<TT>O</TT>" is represented by the code word ``<TT>--</TT>", and therefore the distress message ``<TT>SOS</TT>" in Morse code is ``<TT>...--...</TT>".<P>Codes for communication can have many desirable and undesirable properties such as ambiguity, entropy, redundancy, and many more. In this problem we will focus on ambiguity as a key property.<P>A code is <SPAN CLASS="textit">ambiguous</SPAN> when there exists a message using that code that can be partitioned into different sequences of code words. In other words, in an ambiguous code a message may have more than one meaning. For example, consider the binary alphabet, composed of symbols {<TT>0</TT>,<TT>1</TT>}. For the code composed of the words {<TT>10</TT>, <TT>01</TT>, <TT>101</TT>} the message <TT>10101</TT> can be understood as <TT>10-101</TT> or <TT>101-01</TT> and therefore the code is ambiguous. On the other hand, for the code composed of the words {<TT>01</TT>, <TT>10</TT>, <TT>011</TT>} no ambiguous message exists and therefore the code is unambiguous.<P>As a part of the computer science community, you are required to develop a tester that checks if codes are ambiguous. In case a code is indeed ambiguous, you are also required to report the length (i.e. the number of symbols) of the shortest ambiguous message for that code.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each test case will consist on several lines. In all test cases the alphabet will be the set of hexadecimal digits (decimal digits plus the uppercase letters ``<TT>A</TT>" to ``<TT>F</TT>"). The first line of a test case will contain an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3927img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3927img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, the number of code words in the code. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines describes a code word and contains a different and non-empty string of at most 50 hexadecimal digits.<P>Input is terminated by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line with the length of the shortest ambiguous message for the provided code or `<TT>-1</TT>' if the code is unambiguous.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
10 
01 
101 
3 
AB 
BA 
ABB 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 
-1
</PRE><P>
______________________________________________________
3928||||||false||||||

<P>
The ICPC world finals will be held in a luxurious hotel with a big ballroom. A buffet meal will be served in this ballroom, and organizers decided to decorate its walls with pictures of past champion teams. 

<P>
In order to avoid criticism about favouring some of those teams over others, the organizing commitee wants to make sure that all pictures are appropiately illuminated. The only direct way they've found for doing this is ensuring each picture has at least one lightbulb that directly illuminates it. 

<P>
In this way, the perimeter of the ballroom wall can be divided into illuminated parts (in which pictures may be placed) and dark parts (which are not suitable for placing the pictures). 

<P>
The ballroom has the shape of a box and contains several lightbulbs. Each lightbulb emits light in all directions, but this light can be blocked by columns. All columns in the ballroom have cylindrical shape and go from the floor to the ceiling, so light cannot pass over or above them. Columns are of course placed so that its circular section is parallel to the ballroom floor. Any given point <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> on the perimeter wall is said to be illuminated if there exists a line segment (a light ray) which starts on a lightbulb, ends in <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> and does not touch or pass through any column.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3928.eps}$
 -->
<IMG
 WIDTH="859" HEIGHT="243" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3928.gif
 ALT="\epsfbox{p3928.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Top view of 3 ballrooms with their lightbulbs, columns and illuminated and dark areas

</DIV>

<P>
Your task as a helper of the ICPC organization is to examine the blueprints of the ballroom and determine the total length of illuminated sections of the perimeter wall. The blueprint consist of a rectangle indicating a top view of the ballroom, with the lightbulbs and columns marked in it.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each test case will consist on several lines. The first line will contain four integers: <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark>, the number of lightbulbs, <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark>, the number of columns, <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark>, the size of the ballroom on the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> coordinate and <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>, the size of the ballroom on the <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> coordinate. The lower-left corner of the ballroom is at (0,0) while the upper-right corner is at <SPAN CLASS="MATH">(<I>X</I>, <I>Y</I>)</SPAN>
<tex2html_verbatim_mark>.

<P>
The next <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> lines will contain two integers each representing the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> coordinate of each lightbulb. The last <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> lines of the test case will contain three integers each, representing the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> coordinates of the center of a column and its radius, in that order. You can assume that <SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3928.gif
 ALT="$ \le$"><I>L</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $C \le 10^{3}$
 -->
<SPAN CLASS="MATH"><I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3928.gif
 ALT="$ \le$">10<SUP>3</SUP></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH">4<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3928.gif
 ALT="$ \le$"><I>X</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $Y \le 10^{6}$
 -->
<SPAN CLASS="MATH"><I>Y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3928.gif
 ALT="$ \le$">10<SUP>6</SUP></SPAN>
<tex2html_verbatim_mark>. Also, for all pairs of coordinates <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH">0 &lt; <I>x</I> &lt; <I>X</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH">0 &lt; <I>y</I> &lt; <I>Y</I></SPAN>
<tex2html_verbatim_mark>, both for lightbulbs and column center locations. All radii of the columns will be positive. Finally, no two columns will overlap, although they may touch, and no column will touch or intersect with the border of the ballroom. No lightbulb will be inside a column or in its boundary and no two lightbulbs will be in the same place. 

<P>
Input is terminated with <!-- MATH
 $L = C = X = Y = 0$
 -->
<SPAN CLASS="MATH"><I>L</I> = <I>C</I> = <I>X</I> = <I>Y</I> = 0</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output a single line with the total length of the illuminated parts of the perimeter wall. The result must be printed as a real number with exactly four decimal figures. An error of 0.0001 is allowed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 1 8 8
6 6
2 6
4 4 2
1 4 7 7
3 3
2 4 1
4 2 1
2 2 1
4 4 1
2 2 9 7
1 2
5 5
3 3 2
7 5 1
0 0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
28.0000 
0.0000 
25.8214
</PRE>

<P>

______________________________________________________
3929||||||false||||||
<P>Martin and Isa are very competitive. The newest competition they have created is about looking at the plates of the cars. Each time one of them sees a car plate in the streets, he or she sends to the other an SMS message with the content of that plate; the one who has seen the newest plate is in the lead of the game. As the Automobile Car Management (ACM) office assigns the plates sequentially in increasing order, they can compare them and find out who is the winner.<P>Martin has a very smart eye and he has stayed on the lead for several weeks. Maybe he keeps looking at the streets instead of working, or maybe he stays all day in front of car selling companies waiting for new cars to go out with new plates. Isa, tired of being always behind, has written a program that generates a random plate, so the next time Martin sends a message to her, she will respond with this generated plate. In this way, she hopes to give Martin a hard time trying to beat her.<P>However, Martin has grown suspicious, and he wants to determine if Isa actually saw a car with the plate she sent or not. This way, he will know if Isa is in the lead of the game.<P>He knows some facts about the plates assigned by the ACM:<P><P><BR><UL><LI>Each plate is a combination of 7 characters, which may be uppercase letters (A-Z), or digits (0-9). </LI><LI>There exists two kinds of plate schemes: the old one, used for several years, and the new one which has been in use for some months, when the combinations of the old one were exhausted. </LI><LI>In the old scheme, the first three characters were letters, and the last four were digits, so the plates run from AAA0000 to ZZZ9999. </LI><LI>In the new scheme, the first five characters are letters, and the last two are digits. Unfortunately the chief of ACM messed up with the printing system while he was trying to create a poster for his next campaign for mayor, and the printer is not able to write the letters A, C, M, I, and P. Therefore, in this new scheme, the first plate is BBBBB00, instead of AAAAA00. </LI><LI>The plates are assigned following a sequential order. As a particular case, the last plate from the old scheme is followed by the first plate from the new scheme. </LI></UL><P><P><BR>As Isa is not aware of all of this, she has just made sure that her random generator creates a combination consisting of seven characters, where the first three characters are always uppercase letters, the last two characters are always digits, and each one of the fourth and fifth characters may be an uppercase letter or a digit (possibly generating an illegal combination, but she has not much time to worry about that).<P>Of course, Martin will not consider Isa the winner if he receives an illegal combination, or if he receives a legal plate, but equal to or older than his. But that's not all of it. Since Martin knows that new plates are not generated too fast, he will not believe that Isa saw a car with a plate newer than the one he sent, but sequentially too far. For example, if Martin sends DDDDD45, and receives ZZZZZ45, he will not believe that Isa saw a car with that plate, because he knows that the ACM couldn't have printed enough plates to get to ZZZZZ45 in the time he received that answer.<P>So, Martin has decided to consider Isa the winner only if he receives a legal plate, newer than his, and older than or equal to the <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>-th consecutive plate after the one he sent. He calls <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> his <SPAN CLASS="textit">confidence number</SPAN>. For example, if Martin sends ABC1234, and his confidence number is 6, he will think that Isa is the winner only if he receives any plate newer than ABC1234, but older than or equal to ABC1240.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each test case is described in a single line that contains two strings <SPAN CLASS="MATH"><I>S</I><SUB>M</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>S</I><SUB>I</SUB></SPAN> <tex2html_verbatim_mark>, and an integer <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, separated by single spaces. <SPAN CLASS="MATH"><I>S</I><SUB>M</SUB></SPAN> <tex2html_verbatim_mark> is the 7-character string sent by Martin, which is always a legal plate. <SPAN CLASS="MATH"><I>S</I><SUB>I</SUB></SPAN> <tex2html_verbatim_mark> is the 7-character string answered by Isa, which was generated using her random generator. <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is Martin's confidence number <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3929img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3929img1.png ALT="$ \le$">10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark>.<P>The end of input is indicated by <SPAN CLASS="MATH"><I>S</I><SUB>M</SUB> = <I>S</I><SUB>I</SUB> =</SPAN> <tex2html_verbatim_mark>``<TT>*</TT>" and <SPAN CLASS="MATH"><I>C</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line with the uppercase character ``<TT>Y</TT>" if, according to Martin, Isa is the winner, and with the uppercase character ``<TT>N</TT>" otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ABC1234 ABC1240 6 
ABC1234 ABC1234 6 
ACM5932 ADM5933 260000 
BBBBB23 BBBBC23 100 
BBBBB23 BBBBD00 77 
ZZZ9997 ZZZ9999 1 
ZZZ9998 BBBBB01 3 
ZZZZZ95 ZZZZZ99 10 
BBBBB23 BBBBB22 5 
* * 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Y 
N 
N 
N 
Y 
N 
Y 
Y 
N
</PRE><P>
______________________________________________________
3930||||||false||||||

<P>
The inhabitants of a small Caribbean island in the region known as Bermuda's Triangle love to spend their warm summer nights playing cards. As a tribute to the region where they live, all of their card games have some connection to triangles. One of the most popular games in the island is known as Triples, and has very simple rules. 

<P>
The game is played between two players, with a set of standard playing cards. Cards are distinguished only by their values, from 1 (Ace) to 13 (King). The cards are shuffled and placed as a pile in the center of the table, face down. This pile is called the <SPAN  CLASS="textit">stock</SPAN>. The two players take turns at playing. At each turn, a player 

<P>

<P>
<BR>

<UL>
<LI>draws the top card from the stock, adding it to her/his hand; and 
</LI>
<LI>decides whether she/he wants to ``drop some triples". 
</LI>
</UL>

<P>

<P>
<BR>
Dropping a triple consists of choosing three cards (a <SPAN  CLASS="textit">triple</SPAN>) from the hand and placing them on the table, face up. The dropped triples stay on the table until the end of the game. Only some sets of three cards form a valid triple. There are two types of valid triples: 

<P>

<P>
<BR>

<UL>
<LI><SPAN  CLASS="textit">Perfect triples</SPAN> are made of three cards whose values represent the length of sides of an equilateral triangle; 
</LI>
<LI><SPAN  CLASS="textit">Common triples</SPAN> are made by three cards whose values represent the length of sides of any other (not equilateral) triangle. 
</LI>
</UL>

<P>

<P>
<BR>
The figure below shows examples of perfect triples (a), common triples (b), and invalid triples (c).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3930.eps}$
 -->
<IMG
 WIDTH="864" HEIGHT="295" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3930.gif
 ALT="\epsfbox{p3930.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Only valid triples can be dropped, but a player may drop any number of triples at a given turn. In particular, since players know the number of cards in the stock at every turn, a player may decide to drop all triples in her/his last turn. Some players, however, normally drop some triples during the game, to maintain as few cards in their hands as possible. 

<P>
The game finishes when the stock is empty. The winner is the player that dropped the largest number of perfect triples. If both players dropped the same number of perfect triples, the winner is the player that dropped the largest number of common triples. If both players dropped the same number of perfect triples and the same number of common triples, the result is a tie. 

<P>
Given the description of the cards in the stock, write a program that determines the winner of a game of Triples, considering both players play as best as possible.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several test cases. The first line of a test case contains one integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> representing the number of cards in the stock <!-- MATH
 $(6 \le N \le 10^{4})$
 -->
<SPAN CLASS="MATH">(6<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3930.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3930.gif
 ALT="$ \le$">10<SUP>4</SUP>)</SPAN>
<tex2html_verbatim_mark>. The next line contains <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, separated by single spaces, representing the cards in the stock (<!-- MATH
 $1 \le X_{i} \le 13$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3930.gif
 ALT="$ \le$"><I>X</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3930.gif
 ALT="$ \le$">13</SPAN>
<tex2html_verbatim_mark>, for <!-- MATH
 $1 \le i \le N)$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3930.gif
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3930.gif
 ALT="$ \le$"><I>N</I>)</SPAN>
<tex2html_verbatim_mark>. The cards are given in the order they are drawn by the players: the first card in the input <SPAN CLASS="MATH">(<I>X</I><SUB>1</SUB>)</SPAN>
<tex2html_verbatim_mark> is the first card drawn, the second card in the input <SPAN CLASS="MATH">(<I>X</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark> is the second card drawn, and so on. Several cards with the same value may be present in the stock, and not necessarily all card values are present in the stock. The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case your program must output a single line, containing `<TT>1</TT>' if the first player to play wins the game, `<TT>2</TT>' if the second player wins, or `<TT>0</TT>' if there is a tie. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
7 
5 6 5 6 5 6 8 
12 
13 13 13 13 13 13 1 3 2 9 3 9 
12 
1 2 1 2 1 2 3 1 4 2 5 3 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
0 
2 
1
</PRE>

<P>

______________________________________________________
3931||||||false||||||

<P>
Emoticons are used in chat and e-mail conversations to try to express the emotions that printed words cannot. This may seem like a nice feature for many, but a lot of people find it really annoying and wants to get rid of emoticons. 

<P>
George is one of those people. He hates emoticons so bad, that he is preparing a plan to remove all emoticons from all e-mails in the world. Since you share his visionary plans, you are preparing a special program to help him. 

<P>
Your program will receive the list of emoticons to proscribe. Each emoticon will be a string of characters not including any whitespace. You will also receive several lines of text. What you need to do is change some characters of the text into spaces to ensure no emoticon is left on the text. For an emoticon to be considered to appear in the text it has to appear in a single line and be made of consecutive characters. 

<P>
To help George's plan remain secret as long as possible, you need to do your job with the minimum possible amount of character changes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several test cases. Each test case consists of several lines. The first line of each test case will contain two integers separated 
by a single space: <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, the number of emoticons to proscribe, and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark>, the number of lines the text has. The next <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines contain one emoticon each, a non-empty string of at most 15 characters. Each of the last <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> lines of the test case contains a line of text of at most 80 characters. You can assume <SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3931img1.png
 ALT="$ \le$"><I>N</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3931img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>. 

<P>
Valid input characters for emoticons are uppercase and lowercase letters, digits and the symbols ``
The input is terminated by <SPAN CLASS="MATH"><I>N</I> = <I>M</I> = 0</SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output exactly one line containing a single integer that indicates the minimum number of changes you need to make to the entire text to ensure no emoticon on the list appears in it. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 6 
:-) 
:-( 
(-: 
)-: 
Hello uncle John! :-) :-D 
I am sad or happy? (-:-(? 
I feel so happy, my head spins 
(-:-)(-:-)(-:-)(-:-) :-) (-: :-) 
but then sadness comes :-( 
Loves you, Joanna :-))))) 
3 1 
:) 
): 
)) 
:):)):)):)):(:((:(((:):) 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
11 
8
</PRE>

<P>

______________________________________________________
3932||||||false||||||
<P>A group of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> friends is going to see a movie. However, they are too late to get good tickets, so they are looking for a good way to sit all nearby. Since they are all science students, they decided to come up with an optimization problem instead of going on with informal arguments to decide which tickets to buy.<P>The movie theater has <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> rows of <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> seats each, and they can see a map with the currently available seats marked. They decided that seating close to each other is all that matters, even if that means seating in the front row where the screen is so big it's impossible to see it all at once. In order to have a formal criteria, they thought they would buy seats in order to minimize the <SPAN CLASS="textit">extension</SPAN> of their group.<P>The <SPAN CLASS="textit">extension</SPAN> is defined as the area of the smallest rectangle with sides parallel to the seats that contains all bought seats. The area of a rectangle is the number of seats contained in it. They've taken out a laptop and pointed at you to help them find those desired seats.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each test case will consist on several lines. The first line will contain three positive integers <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> as explained above (<SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3932img1.png ALT="$ \le$"><I>R</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3932img1.png ALT="$ \le$">300</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3932img1.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3932img1.png ALT="$ \le$"><I>R</I>&#215;<I>C</I></SPAN> <tex2html_verbatim_mark>). The next <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines will contain exactly <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> characters each. The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th character of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line will be `<TT>X</TT>' if the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th seat on the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th row is taken or `<TT>.</TT>' if it is available. There will always be at least <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> available seats in total.<P>Input is terminated with <SPAN CLASS="MATH"><I>R</I> = <I>C</I> = <I>K</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line containing the minimum extension the group can have.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 5 5 
...XX 
.X.XX 
XX... 
5 6 6 
..X.X. 
.XXX.. 
.XX.X. 
.XXX.X 
.XX.XX 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6 
9
</PRE><P>
______________________________________________________
3933||||||false||||||

<P>
The famous witch is back. After killing an incredible amount of monsters in order to find a hidden treasure, Zak Galou decided to buy vineyards in Burgundy and retired. Everything was calm in his new life, until the day that his farm tractor stopped working. 

<P>
His tractor's engine works based on a mechanism of gears. The engine can be represented by a bidimensional grid. At most one gear can be attached to each position of the grid. All the gears are identical and can mesh with adjacent gears. In this grid, a gear can have up to six other adjacent gears, see figure below:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3933a.eps}$
 -->
<IMG
 WIDTH="575" HEIGHT="294" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3933a.jpg
 ALT="\epsfbox{p3933a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Under normal utilization, when the tractor is started, some of the gears are initially activated and try to turn clockwise. When a gear tries to turn in one direction, all the adjacent gears try to turn in the opposite direction. 

<P>
When Zak Galou opened his engine he noticed that it had been sabotaged (probably by a jealous treasure hunter who was not able to find the treasure). Some of the gears were removed from the engine and others have been added to it. As a consequence, some of the gears were immobile. A gear can be immobile either if it is <SPAN  CLASS="textit">free</SPAN> or if it is <SPAN  CLASS="textit">blocked</SPAN>. A gear is <SPAN  CLASS="textit">free</SPAN> when it is not an initially activated gear and no adjacent gear is trying to turn. A gear is <SPAN  CLASS="textit">blocked</SPAN> when it is trying to turn in both directions at the same time. For example, consider that there are three gears in the engine as shown in the figure below. If any of the gears is initially activated when the tractor is started, all of them will be blocked. If none of the gears are initially activated, all of them will be free.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3933b.eps}$
 -->
<IMG
 WIDTH="144" HEIGHT="102" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3933a.jpg
 ALT="\epsfbox{p3933b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
As a part of the work of fixing his tractor, Zak Galou asks for your help to solve the following problem. Given the description of the engine and the gears that are initially activated in the clockwise direction, he wants to know for each gear, what is its state when the tractor is started: turn clockwise, turn counter-clockwise, free or blocked.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several test cases. The first line of a test case contains two integers <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark>, separated by a single space, representing respectively the number of rows and columns of the engine grid (<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3933a.jpg
 ALT="$ \le$"><I>R</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3933a.jpg
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>). The next <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> lines describe the engine. The <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th line represents the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th row of the engine and contains <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> characters. The character ``<TT>.</TT>" indicates that there is no gear in the corresponding position, the character ``<TT>*</TT>" indicates that there is a gear that is not initially activated when the engine is started and an ``<TT>I</TT>" indicates that there is a gear that is initially activated when the engine is started. Notice that, for simplicity reasons, the parallelogram representing the engine grid is described in the input as if it was a rectangle with each row left aligned. The end of input is indicated by <SPAN CLASS="MATH"><I>R</I> = <I>C</I> = 0</SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, your program must output <SPAN CLASS="MATH"><I>R</I> + 1</SPAN>
<tex2html_verbatim_mark> lines. The first line must be empty; each of the following <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> lines must have <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> characters. The characters printed must represent the state of each position of the grid when the engine is started. Print a ``<TT>.</TT>" if there is no gear in the position; a ``<TT>(</TT>" if there is a gear turning in the clockwise direction; a ``<TT>)</TT>" if there is a gear turning in the counter-clockwise direction, an uppercase ``<TT>F</TT>" if there is a gear that is free and an uppercase ``<TT>B</TT>" if there is a blocked gear. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 3 
... 
.*. 
.I. 
... 
4 4 
.... 
.**. 
.I.. 
..*. 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
... 
.). 
.(. 
... 
.... 
.BB. 
.B.. 
..F.
</PRE>

<P>

______________________________________________________
3934||||||false||||||
<P>Hemisphere Network is the largest television network in Tumbolia, a small country located east of South America (or south of East America). The most popular sport in Tumbolia, unsurprisingly, is soccer; many games are broadcast every week in Tumbolia.<P>Hemisphere Network receives many requests to replay dubious plays; usually, these happen when a player is deemed to be offside by the referee. An attacking player is <SPAN CLASS="textit">offside</SPAN> if he is nearer to his opponents' goal line than the second last opponent. A player is not offside if<P><P><BR><UL><LI>he is level with the second last opponent or </LI><LI>he is level with the last two opponents. </LI></UL><P><P><BR>Through the use of computer graphics technology, Hemisphere Network can take an image of the field and determine the distances of the players to the defending team's goal line, but they still need a program that, given these distances, decides whether a player is offside.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> separated by a single space indicating, respectively, the number of attacking and defending players involved in the play (<SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3934img1.png ALT="$ \le$"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>D</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3934img1.png ALT="$ \le$">11</SPAN> <tex2html_verbatim_mark>). The next line contains <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> separated by single spaces, indicating the distances of the attacking players to the goal line <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3934img1.png ALT="$ \le$"><I>B</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3934img1.png ALT="$ \le$">10<SUP>4</SUP>)</SPAN> <tex2html_verbatim_mark>. The next line contains <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>C</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> separated by single spaces, indicating the distances of the defending players to the goal line <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3934img1.png ALT="$ \le$"><I>C</I><SUB>j</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3934img1.png ALT="$ \le$">10<SUP>4</SUP>)</SPAN> <tex2html_verbatim_mark>. The end of input is indicated by <SPAN CLASS="MATH"><I>A</I> = <I>D</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input print a line containing a single character: ``<TT>Y</TT>" (uppercase) if there is an attacking player offside, and ``<TT>N</TT>" (uppercase) otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 3 
500 700 
700 500 500 
2 2 
200 400 
200 1000 
3 4 
530 510 490 
480 470 50 310
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
N 
Y 
N
</PRE><P>
______________________________________________________
3935||||||false||||||
<P>Charles is the contest director for the ICPC Tumbolian regional contest. His responsibility is ensuring the contest flows smoothly, that the contest rules are applied fairly, and, of course, announcing the final contest ranking.<P>According to ICPC rules, a team with more solved problems ranks above a team with less solved problems. If two teams have the same number of solved problems, the team with the smaller total penalty ranks above the team with the larger total penalty (in case both teams have the same number of solved problems and the same penalty, Charles considers them as tied).<P>The <SPAN CLASS="textit">total penalty</SPAN> for a team is the sum of all the problem penalties of the problems that team has solved. The problem penalty for a problem is <SPAN CLASS="MATH"><I>TP</I> + <I>EP</I>&#215;<I>FA</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>TP</I></SPAN> <tex2html_verbatim_mark> is the time penalty for that problem, <SPAN CLASS="MATH"><I>EP</I></SPAN> <tex2html_verbatim_mark> is the contest's error penalty and <SPAN CLASS="MATH"><I>FA</I></SPAN> <tex2html_verbatim_mark> is the number of failed attempts at solving the problem before submitting a correct solution.<P>The <SPAN CLASS="textit">time penalty</SPAN> for a problem is the time since the start of the contest, in minutes, that the team needed to solve the problem. The <SPAN CLASS="textit">error penalty</SPAN> is a positive integer chosen by the contest director, designed to reward teams that submit correct solutions on the first attempt.<P>Charles wants to change the error penalty from the ``standard" value of 20 minutes to stir things up. To study the effects of that change on the final rankings, he wants to know the range of error penalties that <SPAN CLASS="textit">don't</SPAN> change the final standings.<P>In other words, if team A is ahead of team B in the original standings, then A should be ahead of B in the modified standings; if A and B are tied in the original standings, they should also be tied in the modified standings (the original standings are the ones obtained with an error penalty of 20 minutes).<P>Charles has been very busy organizing the Tumbolian regional, so he asked you to make a program that will compute the range for him.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> separated by a single space, indicating the number of teams and the number of problems, respectively <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3935img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3935img1.png ALT="$ \le$">100, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3935img1.png ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3935img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark>. Each one of the next <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> lines describes the performance of a team. A team's performance description is a line containing <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> problem descriptions separated by single spaces. Teams are not necessarily given in order of their final standings.<P>Each problem description is a string ``<TT><SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>/<SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark></TT>", where <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is an integer representing the number of attempts that the corresponding team made at solving that problem <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3935img1.png ALT="$ \le$"><I>A</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3935img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is either ``<TT>-</TT>", if the team did not solve that problem, or an integer indicating the number of minutes it took for the team to submit a correct solution <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3935img1.png ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3935img1.png ALT="$ \le$">300)</SPAN> <tex2html_verbatim_mark>. Attempts made after the first correct submission are not counted.<P>The end of input is indicated by <SPAN CLASS="MATH"><I>T</I> = <I>P</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input print two positive integers separated by a single space, indicating the smallest and largest error penalties that would not change the final ranking. If there is no upper bound for the error penalty, print a ``<TT>*</TT>" instead of the upper bound.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 3 
0/- 0/- 0/-
2/- 2/- 1/-
1/60 1/165 1/-
1/80 0/- 2/120 
0/- 1/17 0/-
4 2 
17/- 5/-
2/7 3/-
3/- 2/-
1/15 0/-
3 2 
1/- 2/15 
2/53 1/17 
1/70 1/20 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 24 
9 * 
20 20
</PRE><P>
______________________________________________________
3936||||||false||||||

<P>
Thirty five years ago, a group of super heroes was chosen to form the Justice League, whose purpose was to protect the planet Earth from the villains. After all those years helping mankind, its members are retiring and now it is time to choose the new members of the Justice League. 

<P>
In order to keep their secret identity, let's say, secret, super heroes usually use an integer number to identify themselves. There are <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> super heroes on Earth, identified with the integers from 1 to <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark>. With a brief look at the newspapers anyone can find out if two super heroes have already worked together in a mission. If this happened, we say that the two heroes have a <SPAN  CLASS="textit">relationship</SPAN>. 

<P>
There must be only one Justice League in the world, which could be formed by any number of super heroes (even only one). Moreover, for any two heroes in the new league, they <SPAN  CLASS="textit">must</SPAN> have a relationship. 

<P>
Besides, consider the set of the heroes not chosen to take part in the Justice League. For any two heroes on that set, they <SPAN  CLASS="textit">must not</SPAN> have a relationship. This prevents the formation of unofficial justice leagues. 

<P>
You work for an agency in charge of creating the new Justice League. The agency doesn't know if it is possible to create the League with the restrictions given, and asked for your programming skills. Given a set of super heroes and their relationships, determine if it is possible to select any subset to form the Justice League, according to the given restrictions.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input is composed of several test cases. The first line of each test case contains two integers separated by a single space, <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(2 \le H \le 5 \times 10^{4})$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3936img1.png
 ALT="$ \le$"><I>H</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3936img1.png
 ALT="$ \le$">5&#215;10<SUP>4</SUP>)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le R \le 10^{5})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3936img1.png
 ALT="$ \le$"><I>R</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3936img1.png
 ALT="$ \le$">10<SUP>5</SUP>)</SPAN>
<tex2html_verbatim_mark>, indicating, respectively, the number of heroes and the number of relationships. Each of the following <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> lines contains two integers separated by a single space, <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le A < B \le H)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3936img1.png
 ALT="$ \le$"><I>A</I> &lt; <I>B</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3936img1.png
 ALT="$ \le$"><I>H</I>)</SPAN>
<tex2html_verbatim_mark>, indicating that super hero <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> has a relationship with super hero <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>. Note that if <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> has a relationship with <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> also has a relationship with <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>. A relationship is never informed twice on a test case. 

<P>
The end of input is indicated by <SPAN CLASS="MATH"><I>H</I> = <I>R</I> = 0</SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input print a single line, containing the uppercase letter ``<TT>Y</TT>" if it is possible to select a subset of heroes to form the Justice League according to the given restrictions, or the uppercase letter ``<TT>N</TT>" otherwise. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
5 5
1 2
2 3
1 3
1 4
3 5
9 8
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
4 3
1 2
2 3
3 4
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Y 
N 
Y

______________________________________________________
3937||||||false||||||
<P>Captain Ray likes sticks and spares no effort to find sticks of various colors. It is really a tedious work which Ray has been tired of. As the ICPC Regional contest is coming, he has no time to do it. Consequently he orders his teammate Neal to do this work.<P>Neal does not like this work either, so he decides just to paint some of the sticks and provide them for Ray (Of course, he will not let Ray know this, otherwise <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>).<P><P><BR>Neal tells Ray that he has found many sticks, all of which contain no more than three colors (denoted as 1, 2, 3). Ray divides each stick into <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> parts (<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is no more than 30), and let Neal know exactly the wanted color of each part. Neal will paint each stick in several steps with the following rules in each step:<P><OL><LI>He can only paint at most three consecutive blocks at a time. (Each block contains one part or several consecutive parts) </LI><LI>The color in the same block must be the same. </LI><LI>After Neal finish painting the sticks, the color of the stick must be same as Ray wanted. </LI></OL><P>Now it is Neal's time to paint the sticks. To finish this job as soon as possible, he wants to minimize the number of step.<P>You may assume that all sticks are of no color at the beginning.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. For each test case, there is a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, described above, on the first line. Then <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> numbers (each number is 1, 2, or 3) come in the second line indicating the colors of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> parts. Proceed to the end of the file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the least number of steps that Neal needs to paint a stick. Please output the results as in the Sample Output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1 2 

3 
1 2 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1 
Case 2: 1
</PRE><P>
______________________________________________________
3938||||||false||||||

<P>
After doing Ray a great favor to collect sticks for Ray, Poor Neal becomes very hungry. In return for Neal's help, Ray makes a great dinner for Neal. When it is time for dinner, Ray arranges all the dishes he makes in a single line (actually this line is very long <SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark>, the dishes are represented by 1, 2, 3 <SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark>). ``You make me work hard and don't pay me! You refuse to teach me Latin Dance! Now it is time for you to serve me", Neal says to himself. 

<P>
Every dish has its own value represented by an integer whose absolute value is less than 1,000,000,000. Before having dinner, Neal is wondering about the total value of the dishes he will eat. So he raises many questions about the values of dishes he would have. 

<P>
For each question Neal asks, he will first write down an interval <SPAN CLASS="MATH">[<I>a</I>, <I>b</I>]</SPAN>
<tex2html_verbatim_mark> (inclusive) to represent all the dishes <!-- MATH
 $a, a+1, \ldots , b$
 -->
<SPAN CLASS="MATH"><I>a</I>, <I>a</I> + 1,..., <I>b</I></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> are positive integers, and then asks Ray which sequence of consecutive dishes in the interval has the most total value. Now Ray needs your help.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains multiple test cases. For each test case, there are two integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> in the first line <!-- MATH
 $(n, m < 500000)$
 -->
<SPAN CLASS="MATH">(<I>n</I>, <I>m</I> &lt; 500000)</SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of dishes and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> is the number of questions Neal asks.

<P>
Then <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> numbers come in the second line, which are the values of the dishes from left to right. Next <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines are the questions and each line contains two numbers <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> as described above. Proceed to the end of the input file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines. Each line contains two numbers, indicating the beginning position and end position of the sequence. If there are multiple solutions, output the one with the smallest beginning position. If there are still multiple solutions then, just output the one with the smallest end position. Please output the result as in the Sample Output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 1 
1 2 3 
1 1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 
1 1
</PRE>

<P>

______________________________________________________
3939||||||false||||||
<P>xxx lives in a forest , and everyday he jumps from one tree to another to pick fruits to eat. If the distance that he jumps is too short, the very weak xxx will fall off. Suppose that the paths in the forest are known and the initial position, the terminal position and the minimum distance that xxx can jump are known too. Please answer whether he can get the fruits this time?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases. For each test case, the data in the first line are 3 positive integers: <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> means the number of trees in xxx's territory, trees are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> means the number of pairs of trees that can be reached from each other. <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> means the number of times that xxx picks the fruits. Each of the following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines has 3 integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> are tree numbers and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is the distance between tree <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and tree <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>. Each of the last <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> lines has three numbers, indicating the initial tree number, terminal tree number and the minimum distance that xxx can jump this time. Proceed to the end of the input file<P><P><!-- MATH
 \begin{displaymath}
(1 \le n \le 1000,1 < a, b \le n, 0 < c \le 100000,1 \le m, r \le n * n)
\end{displaymath}
 --></P><DIV ALIGN="CENTER" CLASS="mathdisplay">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3939img1.png ALT="$\displaystyle \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3939img1.png ALT="$\displaystyle \le$">1000, 1 &lt; <I>a</I>, <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3939img1.png ALT="$\displaystyle \le$"><I>n</I>, 0 &lt; <I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3939img1.png ALT="$\displaystyle \le$">100000, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3939img1.png ALT="$\displaystyle \le$"><I>m</I>, <I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3939img1.png ALT="$\displaystyle \le$"><I>n</I>*<I>n</I>)</DIV><P><tex2html_verbatim_mark></P><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output ``<TT>yes</TT>" or ``<TT>no</TT>" in one line for each jump journey xxx makes. ``<TT>yes</TT>" means xxx can jump from initial position to the terminal position to get the fruits, ``<TT>no</TT>" means xxx cannot. Please output the result as in the Sample Output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 1 1 
1 2 1 
2 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
yes
</PRE><P>
______________________________________________________
3940||||||false||||||
<P>Jiejie is a naughty boy. He always plays games during the training time, spreads the virus among the computers in the lab, attacks others' computers and even peeps Neal's love letters to girls <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>. Everybody in the ACM Lab is so angry at him that they strongly suggest Captain Ray punish Jiejie. Mainly and efficiently, Ray orders Jiejie to write numbers.<P>Jiejie is a boy who likes bargaining. ``You write two number strings on the blackboard and then I will write numbers without knowing them. The punishment ends as soon as one of the two number strings you have on the blackboard appears in the string I write" Jiejie says. Although this punishment is rather slight, Ray accepts it as he thinks Jiejie is still a young boy after all.<P>How many numbers will Jiejie write?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. Every test case contains two lines, the first and the second number string respectively, and both of the string lengths are no more than 9. All the elements in the string are digits `0' - `9'. Proceed to the end of the file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the first line contains a real number which is the expected length of number strings Jiejie will write. The second line is a real number that is the probability that Jiejie will end with getting the first string. The third line is a real number that is the probability that Jiejie will end with getting the second string. The Input data promises that there is an unique solution. Please output the result as in the Sample Output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
123 
82
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
90.91 
0.09 
0.91
</PRE><P>
______________________________________________________
3941||||||false||||||
<P>Since entering university, xxx only does three things everyday: having a meal, sleeping and reading novels. He gains weight very quickly and looks already like a ball when he is a sophomore. He is so lazy that he leaves furniture to stand disorderly in his dormitory. When he wants to get something, he never moves furniture, but try to get through among furniture. Now please write a program to help him find out the shortest distance he has to walk in order to get the things he wants. (xxx can move in touch with furniture, but cannot fly over the furniture).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. For each test case , the first line of the file contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of pieces of furniture.<P>In each line of the following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, the first number <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> means the number of vertices of the base shape of a furniture (assume that furniture is of a prism shape, so the base shapes of furniture are simple polygons, the heights of all the furniture are higher than xxx), the second number <SPAN CLASS="MATH"><I>q</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the height of the furniture, followed by <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> pairs of integers <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>, the coordinates of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th vertex of the base figure.<P>The last line contain 7integers: <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB>, <I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>z</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>z</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><P><UL><LI><SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>: the radius of xxx (assuming xxx is a ball);<P></LI><LI><SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>z</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark>: the starting position of the center of the ball;<P></LI><LI><SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>z</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>: the terminal position of the center of the ball. </LI></UL><P>You can assume that the center of the ball is not on or in any furniture. Assume that xxx's dormitory is big enough so that he can move freely between furniture and walls. Proceed to the end of the file.<P><P><BR><B>Note:</B> Consider the following restrictions <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3941img1.png ALT="$ \le$"><I>n</I>, <I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>, <I>q</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3941img1.png ALT="$ \le$">1000, 3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3941img1.png ALT="$ \le$"><I>p</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3941img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, if xxx can move to the terminal position from the initial position without moving furniture, then output the minimum distance that xxx moves, keep two digits after the decimal point. Otherwise, output ``<TT>TOO FAT</TT>". Please output the result as in the Sample Output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
3 9 1 1 2 2 3 1 
1 7 7 1 8 8 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1.41
</PRE><P>
______________________________________________________
3942||||||false||||||
<P>Neal is very curious about combinatorial problems, and now here comes a problem about words. Knowing that Ray has a photographic memory and this may not trouble him, Neal gives it to Jiejie.<P>Since Jiejie can't remember numbers clearly, he just uses sticks to help himself. Allowing for Jiejie's only 20071027 sticks, he can only record the remainders of the numbers divided by total amount of sticks.<P>The problem is as follows: a word needs to be divided into small pieces in such a way that each piece is from some given set of words. Given a word and the set of words, Jiejie should calculate the number of ways the given word can be divided, using the words in the set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. For each test case: the first line contains the given word whose length is no more than 300 000.<P>The second line contains an integer <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3942img1.png ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3942img1.png ALT="$ \le$">4000</SPAN> <tex2html_verbatim_mark>.<P>Each of the following <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> lines contains one word from the set. Each word will be at most 100 characters long. There will be no two identical words and all letters in the words will be lowercase.<P>There is a blank line between consecutive test cases.<P>You should proceed to the end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the number, as described above, from the task description modulo 20071027.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
abcd 
4 
a 
b 
cd 
ab
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2
</PRE><P>
______________________________________________________
3943||||||false||||||
<P>Just before the Nanjing Regional Contest begins, the ACM Team gets a letter from Liking at Normal University of Absolute Angel (NUAA). In the letter Liking says that she misses all his friends at the NUAA ACM Team and sends her best wishes to the Contest Committee and the contestants from NUAA although she can not come here for some reasons. At the end of the letter, Liking leaves some strange strings that her friends do not understand. This problem comes to Ray, her best friend.<P>``I think I know the trick", says Ray. ``But we have to take part in the competition first, otherwise we will be late. However, I'm going to give you some clues and maybe you could think of it if you solve all the contest problems earlier. You just need to find the longest substring that appears more than once in the original string, then you may know what Liking means." Then the Regional Contest Begins <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. For each test case, there is an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (no more than 200,000) on the first line indicating the length of the string. The next line contains a string of lowercase letters which is the string Liking writes. There is a blank line between each test case. Proceed to the end of the Input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output exactly one integer on a line which is the length of the longest substring that appears more than once in the original string Liking writes. Please output as that in the Sample Output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
aa

10 
likinglike
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1 
Case 2: 3
</PRE><P>
______________________________________________________
3944||||||false||||||
<P>119 is really a special number for Janey. It is not the phone number for emergency as most of you may think of, but the birthday of her dance partner Ray. As the day is coming, she keeps thinking of the time when they studied dancing together, took part in competition and show dance, and confronted the tedious final exam provided by their Latin Dance teacher ZZ . So she decides to give Ray a present.<P>Knowing that Ray likes the movie Matrix, Janey just makes a Magic Matrix(MM) for him. It is an <SPAN CLASS="MATH"><I>m</I> <TT>*</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> matrix with each element being a real number so that Ray can do lots of games and research on it. Janey hates real numbers and want to convert all the numbers into integers. At first she calculate the sum of numbers in each row and in each column, thus she gets <SPAN CLASS="MATH"><I>m</I> <TT>*</TT> <I>n</I> + <I>m</I> + <I>n</I></SPAN> <tex2html_verbatim_mark> real numbers in all. Then she rounds all the real numbers to its next smaller integers or next larger integer (if the number is an integer itself, for example X, you can round it to X or X + 1) so that the sum of the rounded numbers in each row equals the rounded sum of the row and the sum of the rounded numbers in each column equals the rounded sum of the column. Your task is to help Janey to find such a way of converting.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. For each test case, there are two integers <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> on the first line representing the number of rows and the number of columns of the matrix respectively, where 1&le;m, n&le;100, all the numbers in the input matrix are real numbers in [0,10], having at most one digit after the decimal point. Then <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines follow, each line represents a row in the original matrix. Proceed to the end of the file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, first output <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> on the first line separate by a single space. Then output <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines with each line containing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers separated by a single space, representing the matrix after the converting described before. If there doesn't exist a way to implement such converting, just output ``<TT>Impossible.</TT>". Please output as that in the Sample Output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1 
2.5

2 2 
1.1 2.2 
2.2 1.1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1 1 
2 
Case 2: 2 2 
1 2 
2 1
</PRE><P>
______________________________________________________
3945||||||false||||||
<P>Everybody knows that xxx loves eating ants. Today, xxx is lucky to find a crowd of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> ants at a time. xxx thinks of a great method to catch all ants. He applies the glue on a disk and uses the disk with glue face downwards to catch all ants. In this way, he can catch all ants at a time with just a slap. xxx has all sizes of disks, but the glue is quite expensive and also has to be painted on the disks evenly. So xxx wants to choose the smallest disk so that he can save some glue. Write a program to help the poor xxx.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. Each test case contains an integer, the number of ants, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> pairs of numbers <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>, the coordinates of the location where the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th ants is <!-- MATH
 $(1< n, x_{i}, y_{i} < 500000)$
 --><SPAN CLASS="MATH">(1 &lt; <I>n</I>, <I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB> &lt; 500000)</SPAN> <tex2html_verbatim_mark>. Proceed to the end of the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output one number, the radius of the smallest disk. Keep 4 decimals after the decimal point. Please output the result as that in the Sample Output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1 1 
1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 0.5000
</PRE><P>
______________________________________________________
3946||||||false||||||
<P>A rectangular cake with a grid of <SPAN CLASS="MATH"><I>m</I> <TT>*</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> unit squares on its top needs to be sliced into pieces. Several cherries are scattered on the top of the cake with at most one cherry on a unit square. The slicing should follow the rules below:<P><OL><LI>each piece is rectangular or square; </LI><LI>each cutting edge is straight and along a grid line; </LI><LI>each piece has only one cherry on it. </LI></OL><P>For example, assume that the cake has a grid of <SPAN CLASS="MATH">3 <TT>*</TT> 4</SPAN> <tex2html_verbatim_mark> unit squares on its top, and there are three cherries on the top, as shown in the figure below.<P><DIV ALIGN="CENTER"><IMG WIDTH="257" HEIGHT="197" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3946a.png ALT="\epsfbox{p3946a.eps}"> <tex2html_verbatim_mark></DIV><P>One allowable slicing is as follows.<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="784" HEIGHT="224" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3946a.png ALT="\epsfbox{p3946b.eps}"> <tex2html_verbatim_mark></DIV><P>For this way of slicing, the total length of the cutting edges is 4+2=6.<P>Another way of slicing is<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="767" HEIGHT="198" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3946a.png ALT="\epsfbox{p3946c.eps}"> <tex2html_verbatim_mark></DIV><P>In this case, the total length of the cutting edges is 3+2=5.<P>Given the shape of the cake and the scatter of the cherries, you are supposed to find out the least total length of the cutting edges.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. For each test case:<P>The first line contains three integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3946a.png ALT="$ \le$"><I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3946a.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I> <TT>*</TT> <I>m</I></SPAN> <tex2html_verbatim_mark> is the size of the grid on the cake, and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the number of the cherries.<P>Then <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines follow. Each line has two integers indicating the position of the unit square with a cherry on it. The two integers show respectively the row number and the column number of the unit square in the grid.<P>All integers in each line should be separated by blanks.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output an integer indicating the least total length of the cutting edges.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 4 3 
1 2 
2 3 
3 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 5

______________________________________________________
3947||||||false||||||
<P>As you may know, a <SPAN CLASS="textit">palindrome</SPAN> is a word (or string) that is the same both forwards and backwards. For example, ``<TT>MADAM</TT>" is a palindrome as it is the same when read left-to-right or right-to-left.<P>However, another form of the palindrome is a <SPAN CLASS="textit">mirrored string</SPAN>. As some characters are mirrors of themselves (such as <TT>A</TT> or <TT>T</TT>) and some characters can be mirrored using other letters or numbers (such as <TT>E</TT> and <TT>3</TT> - not perfectly mind you, but still a mirror). An example is ``<TT>AEIUI3A</TT>".<P>Combining the two (palindrome and mirrored string) one gets and <SPAN CLASS="textit">mirrored palindrome</SPAN>. This is essentially the combination of the two, i.e. it can be read the same both forward and backward and it is an exact mirror of itself. An example of this could be ``<TT>MOTOM</TT>", as <TT>M</TT>, <TT>O</TT> and <TT>T</TT> are all their own mirrored characters.<P>Here is a list of all characters that have mirrors:<P><P><BR><PRE>
A -&gt; A
E -&gt; 3
H -&gt; H
I -&gt; I
J -&gt; L
L -&gt; J
M -&gt; M
O -&gt; O
S -&gt; 2
T -&gt; T
U -&gt; U
V -&gt; V
W -&gt; W
X -&gt; X
Y -&gt; Y
Z -&gt; 5
1 -&gt; 1
2 -&gt; S
3 -&gt; E
5 -&gt; Z
8 -&gt; 8
</PRE><P><P><BR>Characters that do not have a mirror are: <TT>B</TT>, <TT>C</TT>, <TT>D</TT>, <TT>F</TT>, <TT>G</TT>, <TT>K</TT>, <TT>N</TT>, <TT>P</TT>, <TT>Q</TT>, <TT>R</TT>, <TT>4</TT>, <TT>6</TT>, <TT>7</TT> and <TT>9</TT>.<P>As <TT>0</TT> (zero) and <TT>O</TT> (letter O) are too similar, <TT>0</TT> (zero) will be excluded.<P>There are other character mirrors, but only the above ones will be used.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of an unknown number of strings, each on a new line, that need to be classified. Only the following characters will be present: <TT>A-Z</TT> and <TT>1-9</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output must display one of the following for each line of input:<P><P><BR><UL><LI><TT>neither</TT> - if the string is neither a palindrome nor a mirrored string </LI><LI><TT>palindrome</TT> - if the string is a palindrome, but not a mirrored string </LI><LI><TT>mirrored</TT> - if the string is a mirrored string, but not a palindrome </LI><LI><TT>both</TT> - if the string is both a palindrome and a mirrored string. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
TOTEM 
MADAM 
AEIUI3A 
MOTOM
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
neither 
palindrome 
mirrored 
both
</PRE><P>
______________________________________________________
3948||||||false||||||

<P>
A number of people are all perched in a tree, each on their own branch. They also each have a saw in their hands. Their objective is that each saws through their neighbourâs branch until their neighbour falls. However, not every branch takes as long to saw through, so in the end there may still be some people in the tree while everyone else would have fallen (together with their branch and saw) to the ground. 

<P>
When a personâs branch gets cut all the way through, they will obviously not be able to continue cutting through their neighbourâs branch, as they would have fallen to the ground and the branches are out of their reach (they would probably also be in a bit of pain after the fall). Also, nobody moves off their current branch, and everyone cuts at the same rate. 

<P>
As everyone sits in a circle, everyone is able to cut their neighbourâs branch. 

<P>
Each person always cuts the branch of the neighbour to their right.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input comprises of an unknown number of scenarios. Each scenario consists of a single line indicating the number of people in the tree followed by a line containing the amount of time each person's own branch will take to get cut through. Given a person at position <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, that person will then cut branch <SPAN CLASS="MATH"><I>n</I> + 1</SPAN>
<tex2html_verbatim_mark>. (The last person obviously cuts the first personâs branch.)

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output should just indicate which people are still in the tree after everyone has finished cutting through their neighbourâs branch. Should no-one remain in the tree, a value of <TT>0</TT> (zero) should be output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 
6 5 4 3 2 1 
4 
2 7 2 7
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
2 4
</PRE>

<P>

______________________________________________________
3949||||||false||||||

<P>
It is the year 2031 and you run a fairly profitable business dropping aid packages in remote areas. In the old days, aid drops were done using parachutes; nowadays the process has become a lot more streamlined with the invention of the kinetic hoop. 

<P>
The kinetic hoop is a device that can ``catch" a rapidly moving object, provided the object is dropped through the ``hoop" with sufficient precision. As an added bonus, the kinetic hoop converts the kinetic energy of the incoming object into stored electricity, thus allowing the hoop to operate maintenancefree in remote areas. 

<P>
You are a firm believer in hacking together your own equipment, so you have decided to develop your own cargo release mechanism for the latest addition to your ï¬eet (an aeroplane affectionately known as ``Dogbert"). 

<P>
A critical component of the the cargo release system is the computer that calculates the exact release time that will ensure that the cargo will pass safely through the target hoop. Figure 1 illustrates the scenario. 

<P>
Note that it is assumed that your navigation system will align your ï¬ight path so that you will pass directly over the kinetic hoop, and that your vertical velocity will be zero at the time of release. All that remains now is the calculation of the exact value of <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>, the distance from the target at which you must release the cargo. 

<P>
Fortunately you are familiar with the linear drag equations, so you can calculate the correct cargo release distance, given your current altitude and horizontal speed. In the following equations, capital letters denote vectors (2-dimensional, in this case), and lower case letters denote scalars. The equation describing the position of the centroid of the aid package at time <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark> is 

<P>
<P><!-- MATH
 \begin{displaymath}
P(t)=C_{v} \frac{m}{k} e^{k\cdot t/m}-G \frac{m \cdot g \cdot t}{k} + C_{p}
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>P</I>(<I>t</I>) = <I>C</I><SUB>v</SUB><IMG
 WIDTH="23" HEIGHT="47" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3949img1.png
 ALT="$\displaystyle {\frac{{m}}{{k}}}$"><I>e</I><SUP>k<SUP> . </SUP>t/m</SUP> - <I>G</I><IMG
 WIDTH="64" HEIGHT="55" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3949img1.png
 ALT="$\displaystyle {\frac{{m \cdot g \cdot t}}{{k}}}$"> + <I>C</I><SUB>p</SUB>
</DIV><P>
<tex2html_verbatim_mark></P>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3949.eps}$
 -->
<IMG
 WIDTH="735" HEIGHT="592" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3949img1.png
 ALT="\epsfbox{p3949.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1: Dogbert in action 

</DIV>

<P>

<P>
<BR>
with the velocity of the package being described by 

<P>
<P><!-- MATH
 \begin{displaymath}
V(t) = C_{v} e^{k \cdot t/m} - G \frac{m \cdot g}{k}
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>V</I>(<I>t</I>) = <I>C</I><SUB>v</SUB><I>e</I><SUP>k<SUP> . </SUP>t/m</SUP> - <I>G</I><IMG
 WIDTH="45" HEIGHT="49" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3949img1.png
 ALT="$\displaystyle {\frac{{m \cdot g}}{{k}}}$">
</DIV><P>
<tex2html_verbatim_mark></P>
where 

<P>
<BR>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<!-- MATH
 \begin{eqnarray*}
P(t) & = & \mbox{a vector indicating the position of the object at time } t \\
V(t) & = & \mbox{a vector indicating the velocity of the object at time } t \\
t & = & \mbox{time in seconds, } t=0 \mbox{ when package is released} \\
C_{v} & = & V(0) + G \frac{m \cdot g}{k} \\
V(0) & = & \mbox{[initial horizontal velocity, initial vertical velocity]} \\
G & = & \mbox{[0, -1]. This is the direction of gravity} \\
m & = & \mbox{mass of object, in kg} \\
g & = & 9.8ms^{-2} \\
k & = & \mbox{viscosity coefficient = -1.0}  \\
C_{p} & = & P(0) - C_{v}\frac{m}{k} \\
P(0) & = & \mbox{[initial horizontal position, initial vertical position]} \\
\end{eqnarray*}
 -->
<TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%">
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>P</I>(<I>t</I>)</TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%">a vector indicating the position of the object at time <I>t</I></TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>V</I>(<I>t</I>)</TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%">a vector indicating the velocity of the object at time <I>t</I></TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>t</I></TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%">time in seconds, <I>t</I> = 0 when package is released</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>C</I><SUB>v</SUB></TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%"><I>V</I>(0) + <I>G</I><IMG
 WIDTH="45" HEIGHT="49" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3949img1.png
 ALT="$\displaystyle {\frac{{m \cdot g}}{{k}}}$"></TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>V</I>(0)</TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%">[initial horizontal velocity, initial vertical velocity]</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>G</I></TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%">[0, -1]. This is the direction of gravity</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>m</I></TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%">mass of object, in kg</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>g</I></TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%">9.8<I>ms</I><SUP>-2</SUP></TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>k</I></TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%">viscosity coefficient = -1.0</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>C</I><SUB>p</SUB></TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%"><I>P</I>(0) - <I>C</I><SUB>v</SUB><IMG
 WIDTH="23" HEIGHT="47" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3949img1.png
 ALT="$\displaystyle {\frac{{m}}{{k}}}$"></TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>P</I>(0)</TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%">[initial horizontal position, initial vertical position]</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
</TABLE></DIV>
<BR CLEAR="ALL">

<P>

<P>
<BR>
Your program must therefore calculate the value of the distance <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> that ensures that the centroid of a package of mass <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>, released from an altitude <SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark>, will pass through the centre of the hoop, assuming that the hoop is perfectly ï¬ush with the ground.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input will consist of an arbitrary number of records, with each record composed of three values: 

<P>

<P>
<BR>

<!-- MATH
 $<speed> \ <altitude> \ <package mass>$
 -->
<SPAN CLASS="MATH">&lt; <I>speed</I> &gt; &nbsp; &lt; <I>altitude</I> &gt; &nbsp; &lt; <I>packagemass</I> &gt;</SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
The <SPAN CLASS="MATH">&lt; <I>speed</I> &gt;</SPAN>
<tex2html_verbatim_mark> field denotes the horizontal speed, in meters per second, at which your aeroplane is travelling at the time of release. The <!-- MATH
 $<altitude>$
 -->
<SPAN CLASS="MATH">&lt; <I>altitude</I> &gt;</SPAN>
<tex2html_verbatim_mark> field denotes the altitude of your aeroplane (<SPAN CLASS="MATH"><I>h</I></SPAN>
<tex2html_verbatim_mark> above), in meters, at that time. Lastly, the <!-- MATH
 $<package\_mass>$
 -->
<SPAN CLASS="MATH">&lt; <I>package</I><IMG
 WIDTH="51" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3949img1.png
 ALT="$ \_mass$"> &gt;</SPAN>
<tex2html_verbatim_mark> field specifies the mass of the package, in kilograms. 

<P>
The end of the input will be signalled by a negative value in the <SPAN CLASS="MATH">&lt; <I>speed</I> &gt;</SPAN>
<tex2html_verbatim_mark> field.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your output will be a single real number, truncated to one digit after the decimal period, denoting the distance <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> from the target at which the package must be released. 

<P>
Note that the time of impact (an internal part of your calculation) must be accurate to ten digits after the decimal period. The input mass and altitude combinations are guaranteed to result in impact on the ground in at most 5000 seconds, and the value of <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> is guaranteed to be less than 50000 meters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
83 3048 100 
166 3048 100 
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1901.6 
3803.3
</PRE>

<P>

______________________________________________________
3950||||||false||||||

<P>
Every so often we hear on the news that there is going to be either a solar or lunar eclipse. Eclipses have a long history dating back well into the BCâs. Astronomers study total solar eclipses very closely as they provide the rare opportunity to observe the corona. 

<P>
An eclipse occurs when two celestial bodies and a star are (nearly) linearly aligned and the shadow cast by the one body intersects the other body, creating darkness on the latter body. 

<P>
We are interested in determining when a solar eclipse will next occur. In Figure 1 you can see two labelled regions. The umbra is the area of total darkness - a body in this region will experience a total solar eclipse. The penumbra is the area of partial darkness - a body in this region will experience a partial solar eclipse. 

<P>
You will be given the size and location of a star and two celestial bodies. Your task is to determine if the first celestial body creates a solar eclipse on the second celestial body. If it does then you are to determine whether it is a total or partial eclipse and whether the entire body is in eclipse. If part of the body is experiencing total eclipse while the entire body is experiencing at least a partial eclipse, we are only interested in the part that is in total eclipse. 

<P>
Consider a scaled model of our solar system with the sun at the origin (0, 0, 0) with radius 700, the moon at position (49900, 1000, 149700) with radius 2 and Earth at position (50000, 1000, 150000) with radius 7. In Figure 1, the sun would be the star on the left and the moon would be the smaller body on the right. Part of Earth would then fall in the black umbra region and hence partly experience a total solar eclipse. 

<P>
For any body: 

<P>

<P>
<BR>

<UL>
<LI><!-- MATH
 $1 \le r \le 10^{6}$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3950img1.png
 ALT="$ \le$"><I>r</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3950img1.png
 ALT="$ \le$">10<SUP>6</SUP></SPAN>
<tex2html_verbatim_mark>
</LI>
<LI><!-- MATH
 $0 \le x, y, z \le 10^{9}$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3950img1.png
 ALT="$ \le$"><I>x</I>, <I>y</I>, <I>z</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3950img1.png
 ALT="$ \le$">10<SUP>9</SUP></SPAN>
<tex2html_verbatim_mark>
</LI>
</UL>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3950.eps}$
 -->
<IMG
 WIDTH="815" HEIGHT="379" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3950img1.png
 ALT="\epsfbox{p3950.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1: Diagram depicting the umbra (total eclipse) and penumbra (partial eclipse) areas. The body on the left is a star 

</DIV>

<P>
It is guaranteed that the bodies will be at least 1 unit apart from each other and from the star, and that moving the second body by 1 unit (in any direction) will not change the answer.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
A test case is described by three lines, each describing the size and location of a single body. The first line contains four space-separated integers <SPAN CLASS="MATH"><I>x</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark> , describing the center (<SPAN CLASS="MATH"><I>x</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark>) and radius <SPAN CLASS="MATH"><I>r</I><SUB>s</SUB></SPAN>
<tex2html_verbatim_mark> of the star. The following two lines define the two celestial bodies in the same manner. 

<P>
Test cases follow directly after one another with a <TT>-1</TT> representing the end of the test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Each test case has a single line of output describing the type of eclipse for that case. If the second celestial body listed in the test case is experiencing an eclipse, then one of the following lines must be output: 

<P>

<UL>
<LI><TT>Entire total solar eclipse</TT> 
</LI>
<LI><TT>Part total solar eclipse</TT> 
</LI>
<LI><TT>Entire partial solar eclipse</TT> 
</LI>
<LI><TT>Part partial solar eclipse</TT>
</LI>
</UL>

<P>
If there is no solar eclipse, the line ``<TT>No solar eclipse</TT>" must be output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 0 0 700 
49900 1000 149700 2 
50000 1000 150000 7 
0 0 0 10 
50 0 100 40 
60 0 200 1 
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Part total solar eclipse 
Entire total solar eclipse
</PRE>

<P>

______________________________________________________
3951||||||false||||||

<P>
You are developing a computer-based Scrabble game. Only one part of the program is still incomplete: the computer opponent. You have decided on a heuristic-based algorithm for choosing the computer opponentâs next move. Your heuristic requires the evaluation of all the anagrams of a given word. 

<P>
An anagram of a word is a permutation of the letters that forms another valid word. For example, ``sale" would be one possible anagram of the word ``seal". Note that words do not include any spaces, so only single-word anagrams will be considered. 

<P>
Your Scrabble game already uses a dictionary to keep the players honest, so the validity of a given permutation can be tested against this very same dictionary.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input will consist of an arbitrary number of records. Each record will consist of two parts: a ``dictionary" of words, and a ``target list" of words. The dictionary of words will be presented as a list of words, one per line. The end of the dictionary is indicated by a line containing the string ``<TT>-1</TT>", after which the target words will be listed. The target words are listed one per line, with the end of the record indicated by a line containing the string ``<TT>-2</TT>". After a ``<TT>-2</TT>", the pattern may repeat, with the next line containing the first word from the next recordâs dictionary, followed by the rest of the next record. Alternatively, the file may end after the last ``<TT>-2</TT>" in the input data set.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program must keep track of all the words that appeared in the current recordâs dictionary part. For each word <SPAN CLASS="MATH"><I>W</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> appearing in the target list, do the following: 

<P>

<P>
<BR>

<OL>
<LI>Find the set A of all anagrams of <SPAN CLASS="MATH"><I>W</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> in the current dictionary 
</LI>
<LI>Sort the set A in lexicographical order to obtain <SPAN CLASS="MATH"><I>S</I></SPAN>
<tex2html_verbatim_mark> 
</LI>
<LI>Output each of the words in <SPAN CLASS="MATH"><I>S</I></SPAN>
<tex2html_verbatim_mark>, one word per line 
</LI>
<LI>Output a blank line 
</LI>
</OL>

<P>

<P>
<BR>
Please keep in mind that your anagram search must be case-insensitive, so that ``hello" is an anagram of ``Hello", for example.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
bababa 
ababab 
bacaba 
cababa 
-1 
babaca 
-2 
Bob 
seal 
Elsa 
sale 
-1 
sale 
bob 
-2
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
bacaba 
cababa 

Elsa 
sale 
seal 

Bob
</PRE>

<P>

______________________________________________________
3952||||||false||||||
<P>You work in a population genetics lab, studying the effects of applying cosmetics to furry animals (on their health, not on their social lives). One day when you try to open a database of results, you realise that a power glitch has corrupted your files.<P>After looking at the raw data, you realise that the effect of the data corruption was that your experiment labels have been shuffled. In other words, you no longer know whether a set of results belong to experiments conducted on rabbits, rats, or an experiment which included both rats and rabbits.<P>Fortunately, one of the fields in each set of results is the monthly population size of the experimental group. You begin to ponder if it may be possible to identify what the experimental label should be, given the population numbers.<P>You recall that rabbits multiply at a fixed rate. In other words, if you start with two rabbits, they will produce one little rabbit every month. The baby rabbits take one month to mature, after which they start reproducing at the same rate. A sequence of rabbit population number would thus look as follows:<P><SPAN CLASS="MATH">1, 1, 2, 3, 5, 8, 13,...</SPAN> <tex2html_verbatim_mark><P>In general, the rabbit population size in month <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (for <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3952img1.png ALT="$ \ge$">2</SPAN> <tex2html_verbatim_mark>) can be expressed using the following recurrence relation:<P><SPAN CLASS="MATH"><I>Ln</I> = <I>Ln</I> - 1 + <I>Ln</I> - 2</SPAN> <tex2html_verbatim_mark><P>where<P><SPAN CLASS="MATH"><I>L</I><SUB>0</SUB> = 1</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>L</I><SUB>1</SUB> = 1</SPAN> <tex2html_verbatim_mark>.<P><P><BR>For the specific type of lab rat that you use in your experiments, a similar sequence describes the population numbers, namely:<P><!--$1, 1, 3, 5, 11, 21, 43, \ldots$
 -->
<SPAN CLASS="MATH">1, 1, 3, 5, 11, 21, 43,...</SPAN>
<tex2html_verbatim_mark> 

<P>
The recurrence relation describing the rat population size in month <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> (for <SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/3952img1.png
 ALT="$ \ge$">2</SPAN>
<tex2html_verbatim_mark>) can be expressed using the following recurrence relation:

<P>
<!-- MATH
 $R_{n} = R_{nâ1} + 2R_{nâ2}$
 -->
<SPAN CLASS="MATH"><I>R</I><SUB>n</SUB> = <I>R</I><SUB>nâ1</SUB> +2<I>R</I><SUB>nâ2</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>
where <SPAN CLASS="MATH"><I>R</I><SUB>0</SUB> = 1</SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB> = 1</SPAN>
<tex2html_verbatim_mark>. 

<P>

<P>
<BR>
Lastly, in experiments that involved both rabbits and rats, the population size field in your result set represent the sum of the rabbit and rat population sizes. This means for such mixed experiments, the population size in month <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> can be expressed as 

<P>
<!-- MATH
 $P_{n} = L_{n} + R_{n}$
 -->
<SPAN CLASS="MATH"><I>P</I><SUB>n</SUB> = <I>L</I><SUB>n</SUB> + <I>R</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
You decide to write a program to process the corrupted file, and guess what the appropriate label should be for each record, based on the population size field. 

<P>
Sometimes it will not be possible to uniquely identify what the appropriate label should be; in those cases you would be happy with multiple labels for now.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input will be a list of positive integers, with each integer representing the population size field of an experiment. The input will be terminated by a negative integer. 

<P>
The integers will always be smaller than <SPAN CLASS="MATH">2<SUP>32</SUP></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your output must be of the format 

<P>

<P>
<BR>

<!-- MATH
 $<value> <space>:<space> <id> [,<space> <id>] [,<space> <id>]$
 -->
<SPAN CLASS="MATH">&lt; <I>value</I> &gt; &lt; <I>space</I> &gt; : &lt; <I>space</I> &gt; &lt; <I>id</I> &gt; [, &lt; <I>space</I> &gt; &lt; <I>id</I> &gt; ][, &lt; <I>space</I> &gt; &lt; <I>id</I> &gt; ]</SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
where square brackets ``[" and ``]" denote optional strings, and <SPAN CLASS="MATH">&lt; <I>value</I> &gt;</SPAN>
<tex2html_verbatim_mark> is the input population size value. The <SPAN CLASS="MATH">&lt; <I>id</I> &gt;</SPAN>
<tex2html_verbatim_mark> tag denotes one of the strings <TT>rat</TT>, <TT>rabbit</TT>, or <TT>rat+rabbit</TT>. Each output record must be separated with a newline character. 

<P>
It is possible that a given population size value (for example, the value 4) does not correspond to any valid rat, rabbit, or rat-and-rabbit experiment. These numbers should be ignored, and no output should be produced for such numbers. 

<P>
When more than one label is applicable to a given input value, the labels must be output in the order `<TT>rat</TT>', `<TT>rabbit</TT>', and then `<TT>rat+rabbit</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
2 
4 
5 
13
11 
7 
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 : rat, rabbit 
2 : rabbit, rat+rabbit 
5 : rat, rabbit, rat+rabbit 
13 : rabbit 
11 : rat

______________________________________________________
3953||||||false||||||
<P>The marketing and public-relations department of the Czech Technical University has designed a new reconfigurable mechanical Flip-Flop Bill-Board (FFBB). The billboard is a regular twodimensional grid of <SPAN CLASS="MATH"><I>R</I>&#215;<I>C</I></SPAN> <tex2html_verbatim_mark> square tiles made of plastic. Each plastic tile is white on one side and black on the other. The idea of the billboard is that you can create various pictures by flipping individual tiles over. Such billboards will hang above all entrances to the university and will be used to display simple pictures and advertise upcoming academic events.<P>To change pictures, each billboard is equipped with a ``reconfiguration device". The device is just an ordinary long wooden stick that is used to tap the tiles. If you tap a tile, it flips over to the other side, i.e., it changes from white to black or vice versa. Do you agree this idea is very clever?<P>Unfortunately, the billboard makers did not realize one thing. The tiles are very close to each other and their sides touch. Whenever a tile is tapped, it takes all neighboring tiles with it and all of them flip over together. Therefore, if you want to change the color of a tile, all neighboring tiles change their color too. Neighboring tiles are those that touch each other with the whole side. All inner tiles have 4 neighbors, which means 5 tiles are flipped over when tapped. Border tiles have less neighbors, of course.<P><DIV ALIGN="CENTER"><IMG WIDTH="431" HEIGHT="128" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3953.png ALT="\epsfbox{p3953.eps}"> <tex2html_verbatim_mark></DIV><P>For example, if you have the billboard configuration shown in the left picture above and tap the tile marked with the cross, you will get the picture on the right. As you can see, the billboard reconfiguration is not so easy under these conditions. Your task is to find the fastest way to ``clear" the billboard, i.e., to flip all tiles to their white side.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several billboard descriptions. Each description begins with a line containing two integer numbers <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3953.png ALT="$ \le$"><I>R</I>, <I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3953.png ALT="$ \le$">16)</SPAN> <tex2html_verbatim_mark> specifying the billboard size. Then there are <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines, each containing <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> characters. The characters can be either an uppercase letter ``<TT>X</TT>" (black) or a dot ``<TT>.</TT>" (white). There is one empty line after each map. The input is terminated by two zeros in place of the board size.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each billboard, print one line containing the sentence ``<TT>You have to tap</TT> <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <TT>tiles.</TT>", where <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is the minimal possible number of taps needed to make all squares white. If the situation cannot be solved, output the string ``<TT>Damaged billboard.</TT>" instead.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 5 
XX.XX 
X.X.X 
.XXX. 
X.X.X 
XX.XX 

5 5 
.XX.X 
..... 
..XXX 
..X.X 
..X.. 

1 5 
...XX 

5 5 
...X. 
...XX 
.XX.. 
..X.. 
..... 

8 9 
..XXXXX.. 
.X.....X. 
X..X.X..X 
X.......X 
X.X...X.X 
X..XXX..X 
.X.....X. 
..XXXXX.. 

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
You have to tap 5 tiles. 
Damaged billboard. 
You have to tap 1 tiles. 
You have to tap 2 tiles. 
You have to tap 25 tiles.
</PRE><P>
______________________________________________________
3954||||||false||||||
<P>Nowadays, everyone has a cellphone, or even two or three. You probably know where their name comes from. Do you? Cellphones can be moved (they are ``mobile") and they use wireless connection to static stations called BTS (Base Transceiver Station). Each BTS covers an area around it and that area is called a <SPAN CLASS="textit">cell</SPAN>.<P>The Czech Technical University runs an experimental private GSM network with a BTS right on top of the building you are in just now. Since the placement of base stations is very important for the network coverage, your task is to create a program that will find the optimal position for a BTS. The program will be given coordinates of ``points of interest". The goal is to find a position that will cover the maximal number of these points. It is supposed that a BTS can cover all points that are no further than some given distance <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>. Therefore, the cell has a circular shape.<P><DIV ALIGN="CENTER"><IMG WIDTH="318" HEIGHT="182" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3954.png ALT="\epsfbox{p3954.eps}"> <tex2html_verbatim_mark></DIV><P>The picture above shows eight points of interest (little circles) and one of the possible optimal BTS positions (small triangle). For the given distance <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, it is not possible to cover more than four points. Notice that the BTS does not need to be placed in an existing point of interest.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several scenarios. Each scenario begins with a line containing two integer numbers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of points of interest, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3954.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3954.png ALT="$ \le$">2000</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is the maximal distance the BTS is able to cover, <!-- MATH
 $0 \le R < 10 000$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3954.png ALT="$ \le$"><I>R</I> &lt; 10000</SPAN> <tex2html_verbatim_mark>. Then there are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each containing two integer numbers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> giving coordinates of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th point, <!-- MATH
 $|X_{i}|, |Y_{i}| < 10 000$
 --><SPAN CLASS="MATH">| <I>X</I><SUB>i</SUB>|,| <I>Y</I><SUB>i</SUB>| &lt; 10000</SPAN> <tex2html_verbatim_mark>. All points are distinct, i.e., no two of them will have the same coordinates.<P>The scenario is followed by one empty line and then the next scenario begins. The last one is followed by a line containing two zeros.<P>A point lying at the circle boundary (exactly in the distance <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>) is considered covered. To avoid floating-point inaccuracies, the input points will be selected in such a way that for any possible subset of points <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> that can be covered by a circle with the radius <SPAN CLASS="MATH"><I>R</I> + 0.001</SPAN> <tex2html_verbatim_mark>, there will always exist a circle with the radius <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> that also covers them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each scenario, print one line containing the sentence ``<TT>It is possible to cover</TT> <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <TT>points.</TT>", where <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the maximal number of points of interest that may be covered by a single BTS.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> The first sample input scenario corresponds to the picture, providing that the X axis aims right and Y axis down.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 2 
1 2 
5 3 
5 4 
1 4 
8 2 
4 5 
7 5 
3 3

2 100 
0 100 
0 -100 

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
It is possible to cover 4 points. 
It is possible to cover 2 points.
</PRE><P>
______________________________________________________
3955||||||false||||||

<P>
A civil engineer that has recently graduated from the Czech Technical University encountered an interesting problem and asked us for a help. The problem is more of economical than engineering nature. The engineer needs to connect several buildings with an infrastructure. Unfortunately, the investor is not the owner of all the land between these places. Therefore, some properties have to be bought first. 

<P>
The land is divided into a regular ``grid" of hexagonal parcels, each of them forms an independent unit and has the same value. Some of the parcels belong to the investor. These parcels form four connected areas, each containing one building to be connected with the others. Your task is to find the minimal number of parcels that must be acquired to connect the four given areas.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3955.eps}$
 -->
<IMG
 WIDTH="233" HEIGHT="205" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3955.png
 ALT="\epsfbox{p3955.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The whole land also has a hexagonal shape with six sides, each consisting of exactly <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> parcels. The above picture shows a land with <SPAN CLASS="MATH"><I>H</I> = 4</SPAN>
<tex2html_verbatim_mark>, parcels with letters represent the four areas to be connected. In this case, it is necessary to buy four additional parcels. One of the possible solutions is marked by crosses.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several scenarios. Each scenario begins with an integer number <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark>, which specifies the size of the land, <!-- MATH
 $2 \le H \le 20$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3955.png
 ALT="$ \le$"><I>H</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3955.png
 ALT="$ \le$">20</SPAN>
<tex2html_verbatim_mark>. Then there are <SPAN CLASS="MATH">2*<I>H</I> - 1</SPAN>
<tex2html_verbatim_mark> lines representing individual ``rows" of the land (always oriented as in the picture). The lines contain one non-space character for each parcel. It means the first line will contain <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> characters, the second line <SPAN CLASS="MATH"><I>H</I> + 1</SPAN>
<tex2html_verbatim_mark>, and so on. The longest line will be the middle one, with <SPAN CLASS="MATH">2*<I>H</I> - 1</SPAN>
<tex2html_verbatim_mark> characters. Then the ``length" descends and the last line contains <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> parcels, again. 

<P>
The character representing a parcel will be either a dot (``<TT>.</TT>") for the land that is not owned by the investor, or one of the uppercase letters ``<TT>A</TT>", ``<TT>B</TT>", ``<TT>C</TT>", or ``<TT>D</TT>". The areas of parcels occupied by the same letter will always be connected. It means that between any two parcels in the same area, there exists a path leading only through that area. 

<P>
Beside the characters representing parcels, the lines may contain any number of spaces at any positions to improve ``human readability" of the input. There is always at least one space between two letters (or the dots). After the land description, there will be one empty line and then the next scenario begins. The last scenario is followed by a line containing zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each scenario, output one line with the sentence ``<TT>You have to buy</TT> <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> <TT>parcels.</TT>", where <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> is the minimal number of parcels that must be acquired to make all four areas connected together. 

<P>
Areas are considered <SPAN  CLASS="textit">connected</SPAN>, if it is possible to find a path between them that leads only through parcels that have been bought.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
    B . . C 
   . . . . C 
  . A . . C . 
 . A A . . . .
  . A . . . . 
   . . . D D 
    . . . . 

0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
You have to buy 4 parcels.
</PRE> 

<P>

______________________________________________________
3956||||||false||||||
<P>The Czech Technical University is rather old -- you already know that it celebrates 300 years of its existence in 2007. Some of the university buildings are old as well. And the navigation in old buildings can sometimes be a little bit tricky, because of strange long corridors that fork and join at absolutely unexpected places.<P>The result is that some first-graders have often diffculties finding the right way to their classes. Therefore, the Student Union has developed a computer game to help the students to practice their orientation skills. The goal of the game is to find the way out of a labyrinth. Your task is to write a verification software that solves this game.<P>The labyrinth is a 2-dimensional grid of squares, each square is either free or filled with a wall. Some of the free squares may contain doors or keys. There are four different types of keys and doors: blue, yellow, red, and green. Each key can open only doors of the same color.<P>You can move between adjacent free squares vertically or horizontally, diagonal movement is not allowed. You may not go across walls and you cannot leave the labyrinth area. If a square contains a door, you may go there only if you have stepped on a square with an appropriate key before.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several maps. Each map begins with a line containing two integer numbers <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3956img1.png ALT="$ \le$"><I>R</I>, <I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3956img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> specifying the map size. Then there are <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines each containing <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> characters. Each character is one of the following:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2><SPAN CLASS="textbf">Character</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Meaning</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Hash mark</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>#</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Wall</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Dot</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>.</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Free square</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Asterisk</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>*</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Your position</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Uppercase letter</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B Y R G</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Blue, yellow, red, or green door</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Lowercase letter</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>b y r g</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Blue, yellow, red, or green key</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Uppercase X</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>X</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Exit</TD></TR></TBODY></TABLE></DIV><P><P><BR>Note that it is allowed to have<P><UL><LI>more than one exit, </LI><LI>no exit at all, </LI><LI>more doors and/or keys of the same color, and </LI><LI>keys without corresponding doors and vice versa. </LI></UL><P>You may assume that the marker of your position (``<TT>*</TT>") will appear exactly once in every map. There is one blank line after each map. The input is terminated by two zeros in place of the map size.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each map, print one line containing the sentence ``<TT>Escape possible in</TT> <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> <TT>steps.</TT>", where <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is the smallest possible number of step to reach any of the exits. If no exit can be reached, output the string ``<TT>The poor student is trapped!</TT>" instead. One step is defined as a movement between two adjacent cells. Grabbing a key or unlocking a door does not count as a step.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 10 
*........X 

1 3 
*#X 

3 20 
#################### 
#XY.gBr.*.Rb.G.GG.y# 
#################### 

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Escape possible in 9 steps. 
The poor student is trapped! 
Escape possible in 45 steps.
</PRE><P>
______________________________________________________
3957||||||false||||||

<P>
The Department of Computer Science and Engineering runs courses dealing not only with algorithms but also with computer hardware. One such introductory course explains basic principles of integrated circuits (``chips"), binary logic, boolean algebra, etc. As you may know, the very basic units of logical circuits are called <SPAN  CLASS="textit">gates</SPAN>. A gate is an element performing one simple logical operation. It can be connected to other gates using <SPAN  CLASS="textit">lines</SPAN>.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3957.eps}$
 -->
<IMG
 WIDTH="337" HEIGHT="86" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3957.png
 ALT="\epsfbox{p3957.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Logical circuits may be drawn as pictures with the gates represented as squares with inputs on the left and outputs on the right. In each square, there is a symbol that determines the gate type: Number <TT>1</TT> denotes an OR gate (its outputs are 0 if and only if there is no input with the value of 1), <TT>&amp;</TT> is an AND gate (outputs are 1 if and only if there is no 0 input), and <TT>=</TT> is a XOR gate (outputs are 1 if and only if there is an odd number inputs that have the value of 1). 

<P>
Your task is to scan such a ``picture" and compute values of all named circuit outputs. The lines may split and join again but you may assume that each ``value consumer" (input port of a gate or a named output) will be connected to exactly one ``value source" (output port of a gate or an input value). There will be no feedback loops, i.e., there exists no cycle that would lead through the same gate twice.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several pictures. Each picture consists of at least one and at most 200 rows composed of the following characters: 

<P>

<UL>
<LI><SPAN  CLASS="textbf">Space</SPAN> (`` "). Empty space in the picture. Spaces are used to indent other characters to appropriate locations, because the exact position of characters is often important. Trailing spaces at the end of input rows may be present but may also be left out. 
</LI>
<LI><SPAN  CLASS="textbf">Dash</SPAN> (``<TT>-</TT>"). Horizontal line. It connects characters on its left and right together, those characters will always exist and be able to ``accept" the connection. 
</LI>
<LI><SPAN  CLASS="textbf">Pipe</SPAN> (``<TT>|</TT>"). Vertical line, connects characters that are directly above and below. Like with the horizontal line, those characters will always accept the connection. 
</LI>
<LI><SPAN  CLASS="textbf">Plus sign</SPAN> (``<TT>+</TT>"). Line connection or a bend. Connects characters on all four sides. All characters that are able to accept the connection are considered connected (there will always be at least two). However, there may be sides that contain a non-empty character that is not connected. For example, if a dash is present on a position directly below the plus sign, they are not considered connected. 
</LI>
<LI><SPAN  CLASS="textbf">Lowercase letter x</SPAN> (``<TT>x</TT>"). Crossing of two lines without a connection. All four neighboring characters will accept the connection. The character above is connected to the one below and the character to the left with the one on the right, but there is no mutual connection between these two pairs.
</LI>
<LI><SPAN  CLASS="textbf">Equal sign</SPAN> (``<TT>=</TT>"). Represents an input or output port. It always connects characters on its left and right, at least one of these characters is the port. If there is a port on the left, it may only be a value source. If there is a port on the right, it may only be a value consumer.
</LI>
<LI><SPAN  CLASS="textbf">Lowercase letter o</SPAN> (``<TT>o</TT>"). Negation. There will always be a gate on the left and a port on the right of this character. It makes the particular gate output negated. 
</LI>
<LI><SPAN  CLASS="textbf">Hash mark</SPAN> (``<TT>#</TT>"). Gate, which has always a rectangular shape with two vertical and two horizontal sides. The left vertical side may be connected to input ports, the right side to output ports (possibly negated). No two gates will touch each other's side, which means that any two vertically or horizontally neighboring hash marks are always parts of the same gate. 

<P>
The rectangle size will always be at least 3 characters in both directions, which means there is at least one character inside. All inner characters are empty (spaces), with exactly one exception. That single non-empty character denotes the gate type (note that it may have different meaning than outside the gate area) and will be a digit ``one" (``<TT>1</TT>"), ampersand (``<TT>&amp;</TT>"), or an equal sign (``<TT>=</TT>"). 
</LI>
<LI><SPAN  CLASS="textbf">Binary digit</SPAN> (``<TT>0</TT>" and ``<TT>1</TT>"). Input value of the circuit. It is connected to the character on its right, which is always an equal sign. 
</LI>
<LI><SPAN  CLASS="textbf">Uppercase letter</SPAN> (``<TT>A</TT>" through ``<TT>Z</TT>"). Named output of the circuit. It accepts connection from its left, which is always an equal sign. Each letter will appear at most once, which means the number of circuit outputs is between 0 and 26, inclusive. 
</LI>
</UL>

<P>
Each picture will be terminated by a row consisting solely of asterisk (``<TT>*</TT>") characters (at least one). The last picture will be followed by two such rows. No row in the input will be longer than 200 characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each picture, print the values of all named outputs, sorted alphabetically. Each output row should contain three characters: output name (one uppercase letter), equals sign, and a binary value (zero or one). Print one empty line after each test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
     0=+ 
       | 
       | ####### 
       +=#     # 
         # &amp;   #o=--+ 
1=------=#     #    | 
         #     #    | 
         #######    +--=### ### 
                    |   #=#=#1#o==X 
       1=-----------x--=# # ### 
               1=---x--=### 
                    +------------=Y 
*********************************** 
1=A 
*** 
*
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
X=0 
Y=1 

A=1
</PRE>

<P>

______________________________________________________
3958||||||false||||||
<P>Binary numbers form the principal basis of computer science. Most of you have heard of other systems, such as ternary, octal, or hexadecimal. You probably know how to use these systems and how to convert numbers between them. But did you know that the system base (radix) could also be negative? One assistant professor at the Czech Technical University has recently met <SPAN CLASS="textit">negabinary</SPAN> numbers and other systems with a negative base. Will you help him to convert numbers to and from these systems?<P>A number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> written in the system with a positive base <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> will always appear as a string of digits between 0 and <SPAN CLASS="MATH"><I>R</I> - 1</SPAN> <tex2html_verbatim_mark>, inclusive. A digit at the position <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> (positions are counted from right to left and starting with zero) represents a value of <SPAN CLASS="MATH"><I>R</I><SUP>P</SUP></SPAN> <tex2html_verbatim_mark> . This means the value of the digit is multiplied by <SPAN CLASS="MATH"><I>R</I><SUP>P</SUP></SPAN> <tex2html_verbatim_mark> and values of all positions are summed together. For example, if we use the octal system (radix <SPAN CLASS="MATH"><I>R</I> = 8</SPAN> <tex2html_verbatim_mark>), a number written as 17024 has the following value:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">1*8<SUP>4</SUP> +7*8<SUP>3</SUP> +0*8<SUP>2</SUP> +2*8<SUP>1</SUP> +4*8<SUP>0</SUP> = 1*4096 + 7*512 + 2*8 + 4*1 = 7700</DIV><P><tex2html_verbatim_mark></P><P>With a negative radix <SPAN CLASS="MATH">- <I>R</I></SPAN> <tex2html_verbatim_mark>, the principle remains the same: each digit will have a value of <SPAN CLASS="MATH">(- <I>R</I>)<SUP>P</SUP></SPAN> <tex2html_verbatim_mark>. For example, a negaoctal (radix <SPAN CLASS="MATH"><I>R</I> = - 8</SPAN> <tex2html_verbatim_mark>) number 17024 counts as:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">1*(- 8)<SUP>4</SUP> +7*(- 8)<SUP>3</SUP> +0*(- 8)<SUP>2</SUP> +2*(- 8)<SUP>1</SUP> +4*(- 8)<SUP>0</SUP> = 1*4096 - 7*512 - 2*8 + 4*1 = 500</DIV><P><tex2html_verbatim_mark></P><P>One big advantage of systems with a negative base is that we do not need a minus sign to express negative numbers. A couple of examples for the negabinary system <SPAN CLASS="MATH">(<I>R</I> = - 2)</SPAN> <tex2html_verbatim_mark>:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=6 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>decimal</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>negabinary</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>decimal</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>negabinary</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>decimal</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>negabinary</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-10</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1010</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1101</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>100</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-9</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1011</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>101</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-8</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1000</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>11010</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-7</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1001</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>11011</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-6</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1110</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>11000</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-5</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1111</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>110</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>11001</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>-4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1100</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>111</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>11110</TD></TR></TBODY></TABLE></DIV><P><P><BR>You may notice that the negabinary representation of any integer number is unique, if no ``leading zeros" are allowed. The only number that can start with the digit ``<TT>0</TT>", is the zero itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input will contain several conversions, each of them specified on one line. A conversion from the decimal system to some negative-base system will start with a lowercase word ``<TT>to</TT>" followed by a minus sign (with no space before it), the requested base (radix) <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, one space, and a decimal number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P>A conversion to the decimal system will start with a lowercase word ``<TT>from</TT>", followed by a minus sign, radix <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, one space, and a number written in the system with a base of <SPAN CLASS="MATH">- <I>R</I></SPAN> <tex2html_verbatim_mark>.<P>The input will be terminated by a line containing a lowercase word ``<TT>end</TT>". All numbers will satisfy the following conditions: <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3958img1.png ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3958img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">-1000000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3958img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3958img1.png ALT="$ \le$">1000000</SPAN> <tex2html_verbatim_mark> (decimal).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each conversion, print one number on a separate line. If the input used a decimal format, output the same number written in the system with a base <SPAN CLASS="MATH">- <I>R</I></SPAN> <tex2html_verbatim_mark>. If the input contained such a number, output its decimal value.<P>Both input and output numbers must not contain any leading zeros. The minus sign ``<TT>-</TT>" may only be present with negative numbers written in the decimal system. Any non-negative number or a number written in a negative-base system must not start with it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
to-2 10 
from-2 1010 
to-10 10 
to-10 -10 
from-10 10 
end
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
11110 
-10 
190 
10 
-10
</PRE><P>
______________________________________________________
3959||||||false||||||
<P>In this problem, we will help the Faculty of Civil Engineering. They need a software to analyze ground plans of buildings. Specifically, your task is to detect outlines of a building when all of its corners are given.<P><DIV ALIGN="CENTER"><IMG WIDTH="549" HEIGHT="134" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3959.png ALT="\epsfbox{p3959.eps}"> <tex2html_verbatim_mark></DIV><P>You may assume that each building is a rectangular polygon with each of its sides being parallel either with X or Y axis. Therefore, each of its vertex angles is exactly either 90 or 270 degrees.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several buildings. The description of each building starts with a single positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, the number of corners (polygon vertices), <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3959.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3959.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>. Then there are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> pairs of integer numbers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> giving coordinates of individual corners, <SPAN CLASS="MATH">| <I>X</I><SUB>i</SUB>|,| <I>Y</I><SUB>i</SUB>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3959.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>.<P>You may assume that all corners are listed and no two of them have the same coordinates. The polygon does always exist, it is closed, its sides do not intersect or touch (except neighboring sides, of course), and it contains no ``holes" inside. In other words, the outline is formed by one closed line. The order of corners in the input file may be arbitrary.<P>There is an empty line after each building, then the next one is described. After the last building, there is a single zero that signals the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each building, output one line containing <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> characters without any whitespace between them. The characters should be uppercase letters that specify directions of individual walls (sides) when the building outline is followed. ``<TT>N</TT>" stands for North (the positive direction of the Y axis), ``<TT>E</TT>" for East (the positive direction of the X axis), ``<TT>W</TT>" for West, and ``<TT>S</TT>" for South. The ``walk" should start in the vertex that has been given first in the input and always proceed in the <SPAN CLASS="textit">clockwise</SPAN> direction.<P><P><BR>The second sample input corresponds to the picture.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
0 0 
2 2 
0 2 
2 0

6 
1 1 
2 2 
0 1 
1 0 
0 2 
2 0

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
NESW 
WNESWN
</PRE><P>
______________________________________________________
3960||||||false||||||

<P>
Roshambo -- this simple game is known all around the world. In German, it is called ``Schnick, Schnack, Schnuck", in Japanese ``Janken", in Spanish ``Cachip&#250;n", in Polish ``Papier, kamien, nozyce". The Czechs call it ``K&#225;men, nuzky, pap&#237;r". 

<P>
Whatever is the name of the game, its principles remain the same. Two players simultaneously form their hand into one of three possible shapes (symbols): Rock (closed fist), Paper (open hand), or Scissors (two fingers extended). If both of them show the same symbol, it is a tie and no points are given. Otherwise, one of the symbols wins: Rock blunts Scissors, Scissors cut Paper, and Paper covers Rock. 

<P>
Czech Technical University students also know the game very well and use it to resolve small disputes. Imagine, for example, two students living together in one room. Yesterday evening, there was a small celebration, and in the morning, no one wants to go to the lectures. They agreed that one person would be enough to take notices for both, but who will be the poor one? Roshambo is a very effective way to decide. 

<P>
Did you know there are even the World Series of Roshambo? Our organizing team would like to host the World Championships in 2009. Your task is to help us in developing a Roshambo scoring system and write a program that evaluates one game between two players. 

<P>
Since the participants will come from different countries, the system must accept input in various languages. The following table shows names of three Roshambo symbols. Note that in some languages, there may be two different words for the same symbol. 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN  CLASS="textbf">Language</SPAN>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <SPAN  CLASS="textbf">Code</SPAN>  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <SPAN  CLASS="textbf">Rock</SPAN>  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <SPAN  CLASS="textbf">Scissors</SPAN>  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <SPAN  CLASS="textbf">Paper</SPAN>   </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN  CLASS="textbf">Czech</SPAN>     </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>cs</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Kamen</TT>   </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Nuzky</TT>  </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Papir</TT>           </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN  CLASS="textbf">English</SPAN>   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>en</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Rock</TT>           </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Scissors</TT>        </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Paper</TT>           </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN  CLASS="textbf">French</SPAN>    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>fr</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Pierre</TT>         </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Ciseaux</TT>         </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Feuille</TT>         </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN  CLASS="textbf">German</SPAN>    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>de</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Stein</TT>          </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Schere</TT>          </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Papier</TT>          </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN  CLASS="textbf">Hungarian</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>hu</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Ko | Koe</TT>       </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Ollo | Olloo</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Papir</TT>           </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN  CLASS="textbf">Italian</SPAN>   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>it</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Sasso | Roccia</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Forbice</TT>         </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Carta | Rete</TT>    </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN  CLASS="textbf">Japanese</SPAN>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>jp</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Guu</TT>            </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Choki</TT>           </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Paa</TT>             </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN  CLASS="textbf">Polish</SPAN>    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>pl</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Kamien</TT>         </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Nozyce</TT>          </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Papier</TT>          </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN  CLASS="textbf">Spanish</SPAN>   </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>es</TT>    </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Piedra</TT>         </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Tijera</TT>          </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  <TT>Papel</TT>           </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several games. Each game starts with two lines describing players. Each of these two lines contains two lowercase letters specifying the language used by the player (see the language code in the table above), one space, and a player name. The name will consist from at most twenty upper- or lower-case letters.

<P>
After the players description, there are at most 100 lines containing individual rounds. Each round is described by two words separated with one space. The words name the symbol shown by the first and second player, respectively. All symbols are named in the mother tongue of the concerned player. All allowed words are shown in the table above, the first letter will be always in uppercase, all other letters in lowercase. 

<P>
The last round is followed by a line containing one single dash character (``<TT>-</TT>") and then the next game begins. The only exception is the last game in the input, which is terminated by a dot (``<TT>.</TT>") instead of the dash.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each game, print five lines of output. The first line should contain the string ``<TT>Game #</TT><SPAN CLASS="MATH"><I>G</I></SPAN>
<tex2html_verbatim_mark><TT>:</TT>", where <SPAN CLASS="MATH"><I>G</I></SPAN>
<tex2html_verbatim_mark> is the number of the game, starting with one. 

<P>
The second line will contain the first player name followed by a colon (``<TT>:</TT>"), one space and the number of rounds won by that player. The number should be followed by one space and the word ``<TT>points</TT>". Use the singular form ``<TT>point</TT>" if (and only if) the number of points of the player equals one. 

<P>
The third line has the same format and shows the second player's name and points. 

<P>
The fourth line displays the outcome of the game. It must contain the word ``<TT>WINNER</TT>" followed by a colon, space and the name of the player who gained more points. If both players have the same number of points, the fourth line will contain words ``<TT>TIED GAME</TT>" instead. 

<P>
The fifth line is left empty to visually separate individual games.

<P>

<P>
<BR>

<B>Note:</B> Acknowledgements to Wikipedia, the free encyclopedia, for providing background information and symbol names in various languages. If your own language is missing, it may be because it has no article on Roshambo in Wikipedia.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
cs Pepik 
en Johnny 
Nuzky Scissors 
Papir Rock 
Papir Scissors 
-
de Gertruda 
cs Lenka 
Stein Papir 
Schere Kamen
.
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Game #1: 
Pepik: 1 point 
Johnny: 1 point 
TIED GAME 

Game #2: 
Gertruda: 0 points 
Lenka: 2 points 
WINNER: Lenka
</PRE>

<P>

______________________________________________________
3961||||||false||||||

<P>
Somewhere deep in the Czech Technical University buildings, there are laboratories for examining mechanical and electrical properties of various materials. In one of yesterday's presentations, you have seen how was one of the laboratories changed into a new multimedia lab. But there are still others, serving to their original purposes. 

<P>
In this task, you are to write software for a robot that handles samples in such a laboratory. Imagine there are material samples lined up on a running belt. The samples have different heights, which may cause troubles to the next processing unit. To eliminate such troubles, we need to sort the samples by their height into the ascending order. 

<P>
Reordering is done by a mechanical robot arm, which is able to pick up any number of consecutive samples and turn them round, such that their mutual order is reversed. In other words, one robot operation can reverse the order of samples on positions between <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>. 

<P>
A possible way to sort the samples is to find the position of the smallest one (<SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>) and reverse the order between positions 1 and <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, which causes the smallest sample to become first. Then we find the second one on position <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> and reverse the order between 2 and <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>. Then the third sample is located etc.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3961.eps}$
 -->
<IMG
 WIDTH="634" HEIGHT="129" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3961.png
 ALT="\epsfbox{p3961.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The picture shows a simple example of 6 samples. The smallest one is on the 4th position, therefore, the robot arm reverses the first 4 samples. The second smallest sample is the last one, so the next robot operation will reverse the order of five samples on positions 2-6. The third step will be to reverse the samples 3-4, etc. 

<P>
Your task is to find the correct sequence of reversal operations that will sort the samples using the above algorithm. If there are more samples with the same height, their mutual order must be preserved: the one that was given first in the initial order must be placed before the others in the final order too.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of several scenarios. Each scenario is described by two lines. The first line contains one integer number <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, the number of samples, <!-- MATH
 $1 \le N \le 100 000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3961.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3961.png
 ALT="$ \le$">100000</SPAN>
<tex2html_verbatim_mark>. The second line lists exactly <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> space-separated positive integers, they specify the heights of individual samples and their initial order. 

<P>
The last scenario is followed by a line containing zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each scenario, output one line with exactly <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> integers <!-- MATH
 $P_{1}, P_{2}, \ldots, P_{N}$
 -->
<SPAN CLASS="MATH"><I>P</I><SUB>1</SUB>, <I>P</I><SUB>2</SUB>,..., <I>P</I><SUB>N</SUB></SPAN>
<tex2html_verbatim_mark>, separated by a space. Each <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> must be an integer <!-- MATH
 $(1 \le P_{i} \le N)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3961.png
 ALT="$ \le$"><I>P</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3961.png
 ALT="$ \le$"><I>N</I>)</SPAN>
<tex2html_verbatim_mark> giving the position of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th sample just before the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th reversal operation. 

<P>
Note that if a sample is already on its correct position <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, you should output the number <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> anyway, indicating that the ``interval between <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>" (a single sample) should be reversed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 
3 4 5 1 6 2 
4 
3 3 2 1 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 6 4 5 6 6 
4 2 4 4
</PRE>

<P>

______________________________________________________
3962||||||false||||||

<P>
Czech Technical University has the word ``technical" in its name. Beside others, this means that lectures in physics are important here. Do you still remember some of the basic physical principles? 

<P>
For example, imagine a simple glass of water. Or, we will rather call it a cup to avoid ambiguity of this word. So, imagine a simple cup (made of glass) that is partially filled with water. You might have noticed that the stability of such a cup depends on the amount of water inside. If you brush against a full cup, it is relatively easy to knock it down and spill its contents. If the cup is empty, there is fortunately nothing to be spilled, but other than that, the situation does not improve much - it is still easy to knock the cup down with only a little force. The best stability is usually achieved with a ``half-full" cup. 

<P>
In this problem, your task is to determine the water level that makes a cup as much stable as possible. For the purpose of this problem, we will make a simple assumption that the ``stability" of a cup is higher, if its center of mass (sometimes also called the center of gravity) is lower (closer to the bottom). 

<P>
The <SPAN  CLASS="textit">center of mass</SPAN> can be informally defined as follows: Imagine that glass and water consist of a very large number of very small particles. Then the center of mass is an average of the position of all these particles. The average is weighted by particle masses. Since the density of glass is approximately <!-- MATH
 $2 500 \ kg.m^{-3}$
 -->
<SPAN CLASS="MATH">2500&nbsp;<I>kg</I>.<I>m</I><SUP>-3</SUP></SPAN>
<tex2html_verbatim_mark> and the density of water only <!-- MATH
 $1 000 \ kg.m^{-3}$
 -->
<SPAN CLASS="MATH">1000&nbsp;<I>kg</I>.<I>m</I><SUP>-3</SUP></SPAN>
<tex2html_verbatim_mark>, we will suppose that the mass of a glass particle is 2.5 times higher than the mass of a water particle of the same size. 

<P>
All cups considered in this problem will have an exact rotary shape. But their radius may vary with the height -- some cups are wider at the top, others are wider at the bottom. Also, the thickness of the glass may not be constant.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3962.eps}$
 -->
<IMG
 WIDTH="510" HEIGHT="225" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3962.png
 ALT="\epsfbox{p3962.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The left figure shows a typical cup considered in this problem. It can be fully described by its height (<SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark>), thickness of the bottom (<SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>), and two functions <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark>. Both of these functions take a current height as their argument and they give the outer radius (<SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark>) and glass thickness (<SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark>) in the appropriate height. Please note that the thickness is always measured strictly horizontally and may therefore not reflect the ``real thickness" of the glass in its usual meaning.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several cup descriptions. Each description consists of three lines. The first line contains two numbers: <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> (cup height) and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> (bottom thickness), <!-- MATH
 $0 < B < H \le 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>B</I> &lt; <I>H</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3962.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>. The second line contains an expression <SPAN CLASS="MATH"><I>R</I>(<I>x</I>)</SPAN>
<tex2html_verbatim_mark> (radius), the third line an expression <SPAN CLASS="MATH"><I>T</I>(<I>x</I>)</SPAN>
<tex2html_verbatim_mark> (glass thickness). All data are given in centimeters. The last description is followed by a line with two zeros. 

<P>
The expressions will contain only digits (``<TT>0</TT>" through ``<TT>9</TT>"), decimal points (``<TT>.</TT>"), four basic operators (``<TT>+</TT>", ``<TT>-</TT>", ``<TT>*</TT>", and ``<TT>/</TT>"), parentheses (``<TT>(</TT>" and ``<TT>)</TT>"), and the lowercase letters ``<TT>x</TT>" denoting the input variable (height measured from the cup bottom). 

<P>
<DIV ALIGN="CENTER">
<SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3962.png
 ALT="$ \forall$"><I>x</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le x \le H$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3962.png
 ALT="$ \le$"><I>x</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3962.png
 ALT="$ \le$"><I>H</I></SPAN>
<tex2html_verbatim_mark>, the radius will satisfy: <!-- MATH
 $0.1 < R(x) \le 100$
 -->
<SPAN CLASS="MATH">0.1 &lt; <I>R</I>(<I>x</I>)<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3962.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark> 
</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER"><SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3962.png
 ALT="$ \forall$"><I>x</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $B \le x \le H$
 -->
<SPAN CLASS="MATH"><I>B</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3962.png
 ALT="$ \le$"><I>x</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3962.png
 ALT="$ \le$"><I>H</I></SPAN>
<tex2html_verbatim_mark>, the thickness will satisfy: <!-- MATH
 $0.1 \le T (x) < R(x)$
 -->
<SPAN CLASS="MATH">0.1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/39/p3962.png
 ALT="$ \le$"><I>T</I>(<I>x</I>) &lt; <I>R</I>(<I>x</I>)</SPAN>
<tex2html_verbatim_mark>
</DIV>

<P>

<P>
<BR>
Arithmetical operators have their usual meaning and priorities, i.e., multiplication and division have a higher priority than addition and subtraction.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each cup, output the sentence ``<TT>Pour</TT> <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> <TT>litres /</TT> <SPAN CLASS="MATH"><I>W</I></SPAN>
<tex2html_verbatim_mark> <TT>cm of water.</TT>", where <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> is the amount of water that must be poured into the cup to reach the maximal stability (in litres). <SPAN CLASS="MATH"><I>W</I></SPAN>
<tex2html_verbatim_mark> is the water level (in centimeters) measured from the bottom of the cup. Both numbers must be given with exactly three decimal digits.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
9 1 
3+x/6 
17/8-x/8 
10 1 
(x+10) 
10/(x+10) 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Pour 0.030 litres / 3.365 cm of water. 
Pour 0.878 litres / 2.193 cm of water.

______________________________________________________
3963||||||false||||||
<P>Roman numerals are an ancient numbering system used extensively throughout Europe through the 13th century (where it was eventually replaced by our current positional system). Vestiges of this system still exist today on clock faces, building cornerstones, Super Bowls and Star Wars episodes. The system uses the following 7 symbols:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=8 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Symbol</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>V</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>X</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Value</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>50</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>500</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1000</TD></TR></TBODY></TABLE></DIV><P><P><BR>Symbols <TT>I</TT>, <TT>X</TT>, <TT>C</TT> and <TT>M</TT> can be repeated as needed (though never more than three times for <TT>I</TT>, <TT>X</TT> and <TT>C</TT>), so that 3 is represented as <TT>III</TT>, 27 as <TT>XXVII</TT> and 4865 as <TT>MMMMDCCCLXV</TT>. The symbols are always written from the highest value to the lowest, but for one exception: if a lower symbol precedes a higher one, it is <SPAN CLASS="textit">subtracted</SPAN> from the higher. Thus 4 is written not as <TT>IIII</TT> but as <TT>IV</TT>, and 900 is written as <TT>CM</TT>.<P>The rules for this subtractive behavior are the following:<P><OL><LI>Only <TT>I</TT>, <TT>X</TT> and <TT>C</TT> can be subtracted. </LI><LI>These numbers can only appear once in their subtractive versions (e.g., you can't write 8 as <TT>IIX</TT>). </LI><LI>Each can only come before symbols that are no larger than 10 times their value. Thus we can not write IC for 99 or XD for 490 (these would be XCIX and CDXC, respectively). Note that the first two words in this problem title are invalid Roman numerals, but the third is fine. </LI></OL><P>Your task for this problem is simple: read in a set of Roman numeral values and output their sum as a Roman numeral.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. Each test case starts with a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of values to add. After this will come <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> values (potentially several on a line), all valid Roman numerals with whitespace only coming between values. A value of <SPAN CLASS="MATH"><I>n</I> =</SPAN> <tex2html_verbatim_mark> <TT>0</TT> will indicate end of input. All sums will be less than 5000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the case number and the sum, both as Roman numerals, using the format shown below. Case numbers should start at <TT>I</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
XII MDL 
4 
I I I 
I 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case I: MDLXII 
Case II: IV
</PRE><P>
______________________________________________________
3964||||||false||||||
<P>Suppose you have a strip of paper and are given instructions to fold the paper in one of two ways: an upper fold, where the right end of the paper is brought over to the top of the left end; and a lower fold, where the right end of the paper is brought below the left end. The diagram below illustrates both types of folds.<P><DIV ALIGN="CENTER"><IMG WIDTH="397" HEIGHT="57" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3964a.png ALT="\epsfbox{p3964a.eps}"> <tex2html_verbatim_mark></DIV><P>Now, after meticulously folding the strip several times, you are asked to unfold it by making a 90 degree angle at each crease. The example below shows the result of an upper fold, followed by a lower fold and then an unfolding.<P><DIV ALIGN="CENTER"><IMG WIDTH="470" HEIGHT="70" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3964a.png ALT="\epsfbox{p3964b.eps}"> <tex2html_verbatim_mark></DIV><P>If the left end of the folded strip is placed at the origin (0,0) and the first right angle is at (1,0), it is natural to ask the questions: Where will the second right angle be located? The third right angle? Where will the other end of the strip be located? Well, that's for us to know and you to figure out.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain multiple test cases. The first line of the file will contain a single integer indicating the number of test cases. Each case will consist of a string of letters <TT>U</TT> and <TT>L</TT> indicating a series of upper and lower folds followed by an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. The length of the string will be between 1 and 30, inclusive. The value of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> identifies a position on the paper. A value of <SPAN CLASS="MATH"><I>m</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the left end (at location (0, 0)). If there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> folds, then a value of <SPAN CLASS="MATH"><I>m</I> = 2<SUP>n</SUP></SPAN> <tex2html_verbatim_mark> indicates the right end of the strip. Any value for <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> between these two extremes represents one of the right angles; <SPAN CLASS="MATH"><I>m</I> = 1</SPAN> <tex2html_verbatim_mark> indicates the first right angle, and so on.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line of the form <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> indicating the location of the right angle (or end point) specified by the problem. You should assume that if there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> folds in the test case, the length of the string is <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN> <tex2html_verbatim_mark> so that the distance between creases is 1 unit long.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
UL 4 
UL 3 
LLUL 13
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
(2,0) 
(2,-1) 
(1,-2)
</PRE><P>
______________________________________________________
3965||||||false||||||
<P>Everyone knows that the letter ``E" is the most frequent letter in the English language. In fact, there are one hundred sixteen E's on this very page ... no, make that one hundred twenty one. Indeed, when spelling out integers it is interesting to see which ones do NOT use the letter ``E". For example 6030 (six thousand thirty) doesn't. Nor does 4002064 (four million two thousand sixty four).<P>It turns out that 6030 is the 64th positive integer that does not use an ``E" when spelled out and 4002064 is the 838th such number. Your job is to find the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-th such number.<P>Note: 1,001,001,001,001,001,001,001,001,000 is ``one octillion, one septillion, one sextillion, one quintillion, one quadrillion, one trillion, one billion, one million, one thousand". (Whew!)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of multiple test cases. Each input case will consist of one positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (less than <SPAN CLASS="MATH">2<SUP>31</SUP></SPAN> <tex2html_verbatim_mark>) on a line. A `<TT>0</TT>' indicates end-of-input. (There will be no commas in the input.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> you will print, with appropriate commas, the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-th positive integer whose spelling does not use an ``E". You may assume that all answers are less than <SPAN CLASS="MATH">10<SUP>28</SUP></SPAN> <tex2html_verbatim_mark> .<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
10 
838 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
44 
4,002,064
</PRE><P>
______________________________________________________
3966||||||false||||||
<P>On an <SPAN CLASS="MATH"><I>n</I>&#215;<I>m</I></SPAN> <tex2html_verbatim_mark> board there is a lemming on each square. Every second, the lemmings try to move either north, south, east or west, according to rules which are explained below. To determine which direction to move in, each lemming has an agenda, which is an ordering of the four possible directions (for example, one possible agenda might be NWES). The rules for lemming movement are the following:<P><OL><LI>Initially each lemming sets its direction of movement <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> to the first direction in its agenda. </LI><LI>At each time step, each lemming tries to move in its direction <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>. Three things can happen to lemming <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>:<DL COMPACT><DT>(a)</DT><DD>If <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>'s current direction <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> causes it to move off the board, then the world has one less lemming in it. Otherwise, <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>'s target destination will be to another square.</DD><DT>(b)</DT><DD>If <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>'s target square is empty or about to become empty as a result of another lemming leaving it, and no other lemming wants to move to the same square, then <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> moves into its target square. In this case, the lemming will use the same direction <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> in the next time step.</DD><DT>(c)</DT><DD>Otherwise, if another lemming is trying to move into <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>'s target square, or if the target square contains a lemming which cannot move, then <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> stays put. In this case, it will update its <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> by going to the next direction in its agenda (wrapping around to the beginning if necessary).</DD></DL></LI></OL><P>Two lemmings which want to exchange squares can do so, unless of course some other lemming is trying to move into one of their two squares (in which case all three of the lemmings would stay in their current squares). Lemmings being lemmings, they continue to move until all of them have moved off the board. Your job is to determine how long that takes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. Each test case will consist of multiple lines. The first line will contain two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, specifying the number of rows and columns in the board. The maximum value for each of these is 100. The board is situated so that square (0, 0) is in the southwest corner, and square <SPAN CLASS="MATH">(0, <I>m</I> - 1)</SPAN> <tex2html_verbatim_mark> is in the southeast corner. Following this will be several rows containing the agendas for the nm lemmings. Each agenda will be a permutation of the string NESW. There will be 16 agendas on each line (except perhaps the last), with a single space between each. The agendas are assigned row-wise to the lemmings, so that the first agenda is associated with the lemming on square (0, 0), the second with the lemming on square (0, 1), and so on. The last case will be followed by the line `<TT>0 0</TT>' which will terminate input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line containing the case number (using the format shown below) followed by the number of steps it takes until the last lemming(s) falls off the board. Use only single spaces to separate items on a line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 2 
ENWS WSNE NESW WENS 
2 2 
ENWS WSNE NESW SWEN 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2 
Case 2: 3
</PRE><P>
______________________________________________________
